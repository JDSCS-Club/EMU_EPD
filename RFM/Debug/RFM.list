
RFM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019084  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000eb80  08039214  08039214  00029214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08047d94  08047d94  00040dc8  2**0
                  CONTENTS
  4 .ARM          00000008  08047d94  08047d94  00037d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08047d9c  08047d9c  00040dc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08047d9c  08047d9c  00037d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08047da4  08047da4  00037da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000dc8  20000000  08047da8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037b8  20000dc8  08048b70  00040dc8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004580  08048b70  00044580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040dc8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040df8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036263  00000000  00000000  00040e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000978d  00000000  00000000  0007709e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d18  00000000  00000000  00080830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000022d2  00000000  00000000  00083548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003f810  00000000  00000000  0008581a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ab93  00000000  00000000  000c502a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015bbff  00000000  00000000  000ffbbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c974  00000000  00000000  0025b7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00268130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000dc8 	.word	0x20000dc8
 80201ac:	00000000 	.word	0x00000000
 80201b0:	080391fc 	.word	0x080391fc

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	20000dcc 	.word	0x20000dcc
 80201cc:	080391fc 	.word	0x080391fc

080201d0 <strcmp>:
 80201d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80201d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80201d8:	2a01      	cmp	r2, #1
 80201da:	bf28      	it	cs
 80201dc:	429a      	cmpcs	r2, r3
 80201de:	d0f7      	beq.n	80201d0 <strcmp>
 80201e0:	1ad0      	subs	r0, r2, r3
 80201e2:	4770      	bx	lr

080201e4 <strlen>:
 80201e4:	4603      	mov	r3, r0
 80201e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201ea:	2a00      	cmp	r2, #0
 80201ec:	d1fb      	bne.n	80201e6 <strlen+0x2>
 80201ee:	1a18      	subs	r0, r3, r0
 80201f0:	3801      	subs	r0, #1
 80201f2:	4770      	bx	lr
	...

08020200 <memchr>:
 8020200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020204:	2a10      	cmp	r2, #16
 8020206:	db2b      	blt.n	8020260 <memchr+0x60>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	d008      	beq.n	8020220 <memchr+0x20>
 802020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020212:	3a01      	subs	r2, #1
 8020214:	428b      	cmp	r3, r1
 8020216:	d02d      	beq.n	8020274 <memchr+0x74>
 8020218:	f010 0f07 	tst.w	r0, #7
 802021c:	b342      	cbz	r2, 8020270 <memchr+0x70>
 802021e:	d1f6      	bne.n	802020e <memchr+0xe>
 8020220:	b4f0      	push	{r4, r5, r6, r7}
 8020222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802022a:	f022 0407 	bic.w	r4, r2, #7
 802022e:	f07f 0700 	mvns.w	r7, #0
 8020232:	2300      	movs	r3, #0
 8020234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020238:	3c08      	subs	r4, #8
 802023a:	ea85 0501 	eor.w	r5, r5, r1
 802023e:	ea86 0601 	eor.w	r6, r6, r1
 8020242:	fa85 f547 	uadd8	r5, r5, r7
 8020246:	faa3 f587 	sel	r5, r3, r7
 802024a:	fa86 f647 	uadd8	r6, r6, r7
 802024e:	faa5 f687 	sel	r6, r5, r7
 8020252:	b98e      	cbnz	r6, 8020278 <memchr+0x78>
 8020254:	d1ee      	bne.n	8020234 <memchr+0x34>
 8020256:	bcf0      	pop	{r4, r5, r6, r7}
 8020258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802025c:	f002 0207 	and.w	r2, r2, #7
 8020260:	b132      	cbz	r2, 8020270 <memchr+0x70>
 8020262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020266:	3a01      	subs	r2, #1
 8020268:	ea83 0301 	eor.w	r3, r3, r1
 802026c:	b113      	cbz	r3, 8020274 <memchr+0x74>
 802026e:	d1f8      	bne.n	8020262 <memchr+0x62>
 8020270:	2000      	movs	r0, #0
 8020272:	4770      	bx	lr
 8020274:	3801      	subs	r0, #1
 8020276:	4770      	bx	lr
 8020278:	2d00      	cmp	r5, #0
 802027a:	bf06      	itte	eq
 802027c:	4635      	moveq	r5, r6
 802027e:	3803      	subeq	r0, #3
 8020280:	3807      	subne	r0, #7
 8020282:	f015 0f01 	tst.w	r5, #1
 8020286:	d107      	bne.n	8020298 <memchr+0x98>
 8020288:	3001      	adds	r0, #1
 802028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802028e:	bf02      	ittt	eq
 8020290:	3001      	addeq	r0, #1
 8020292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020296:	3001      	addeq	r0, #1
 8020298:	bcf0      	pop	{r4, r5, r6, r7}
 802029a:	3801      	subs	r0, #1
 802029c:	4770      	bx	lr
 802029e:	bf00      	nop

080202a0 <__aeabi_uldivmod>:
 80202a0:	b953      	cbnz	r3, 80202b8 <__aeabi_uldivmod+0x18>
 80202a2:	b94a      	cbnz	r2, 80202b8 <__aeabi_uldivmod+0x18>
 80202a4:	2900      	cmp	r1, #0
 80202a6:	bf08      	it	eq
 80202a8:	2800      	cmpeq	r0, #0
 80202aa:	bf1c      	itt	ne
 80202ac:	f04f 31ff 	movne.w	r1, #4294967295
 80202b0:	f04f 30ff 	movne.w	r0, #4294967295
 80202b4:	f000 b970 	b.w	8020598 <__aeabi_idiv0>
 80202b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202c0:	f000 f806 	bl	80202d0 <__udivmoddi4>
 80202c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202cc:	b004      	add	sp, #16
 80202ce:	4770      	bx	lr

080202d0 <__udivmoddi4>:
 80202d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202d4:	9e08      	ldr	r6, [sp, #32]
 80202d6:	460d      	mov	r5, r1
 80202d8:	4604      	mov	r4, r0
 80202da:	460f      	mov	r7, r1
 80202dc:	2b00      	cmp	r3, #0
 80202de:	d14a      	bne.n	8020376 <__udivmoddi4+0xa6>
 80202e0:	428a      	cmp	r2, r1
 80202e2:	4694      	mov	ip, r2
 80202e4:	d965      	bls.n	80203b2 <__udivmoddi4+0xe2>
 80202e6:	fab2 f382 	clz	r3, r2
 80202ea:	b143      	cbz	r3, 80202fe <__udivmoddi4+0x2e>
 80202ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80202f0:	f1c3 0220 	rsb	r2, r3, #32
 80202f4:	409f      	lsls	r7, r3
 80202f6:	fa20 f202 	lsr.w	r2, r0, r2
 80202fa:	4317      	orrs	r7, r2
 80202fc:	409c      	lsls	r4, r3
 80202fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8020302:	fa1f f58c 	uxth.w	r5, ip
 8020306:	fbb7 f1fe 	udiv	r1, r7, lr
 802030a:	0c22      	lsrs	r2, r4, #16
 802030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8020310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8020314:	fb01 f005 	mul.w	r0, r1, r5
 8020318:	4290      	cmp	r0, r2
 802031a:	d90a      	bls.n	8020332 <__udivmoddi4+0x62>
 802031c:	eb1c 0202 	adds.w	r2, ip, r2
 8020320:	f101 37ff 	add.w	r7, r1, #4294967295
 8020324:	f080 811c 	bcs.w	8020560 <__udivmoddi4+0x290>
 8020328:	4290      	cmp	r0, r2
 802032a:	f240 8119 	bls.w	8020560 <__udivmoddi4+0x290>
 802032e:	3902      	subs	r1, #2
 8020330:	4462      	add	r2, ip
 8020332:	1a12      	subs	r2, r2, r0
 8020334:	b2a4      	uxth	r4, r4
 8020336:	fbb2 f0fe 	udiv	r0, r2, lr
 802033a:	fb0e 2210 	mls	r2, lr, r0, r2
 802033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020342:	fb00 f505 	mul.w	r5, r0, r5
 8020346:	42a5      	cmp	r5, r4
 8020348:	d90a      	bls.n	8020360 <__udivmoddi4+0x90>
 802034a:	eb1c 0404 	adds.w	r4, ip, r4
 802034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8020352:	f080 8107 	bcs.w	8020564 <__udivmoddi4+0x294>
 8020356:	42a5      	cmp	r5, r4
 8020358:	f240 8104 	bls.w	8020564 <__udivmoddi4+0x294>
 802035c:	4464      	add	r4, ip
 802035e:	3802      	subs	r0, #2
 8020360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8020364:	1b64      	subs	r4, r4, r5
 8020366:	2100      	movs	r1, #0
 8020368:	b11e      	cbz	r6, 8020372 <__udivmoddi4+0xa2>
 802036a:	40dc      	lsrs	r4, r3
 802036c:	2300      	movs	r3, #0
 802036e:	e9c6 4300 	strd	r4, r3, [r6]
 8020372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020376:	428b      	cmp	r3, r1
 8020378:	d908      	bls.n	802038c <__udivmoddi4+0xbc>
 802037a:	2e00      	cmp	r6, #0
 802037c:	f000 80ed 	beq.w	802055a <__udivmoddi4+0x28a>
 8020380:	2100      	movs	r1, #0
 8020382:	e9c6 0500 	strd	r0, r5, [r6]
 8020386:	4608      	mov	r0, r1
 8020388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802038c:	fab3 f183 	clz	r1, r3
 8020390:	2900      	cmp	r1, #0
 8020392:	d149      	bne.n	8020428 <__udivmoddi4+0x158>
 8020394:	42ab      	cmp	r3, r5
 8020396:	d302      	bcc.n	802039e <__udivmoddi4+0xce>
 8020398:	4282      	cmp	r2, r0
 802039a:	f200 80f8 	bhi.w	802058e <__udivmoddi4+0x2be>
 802039e:	1a84      	subs	r4, r0, r2
 80203a0:	eb65 0203 	sbc.w	r2, r5, r3
 80203a4:	2001      	movs	r0, #1
 80203a6:	4617      	mov	r7, r2
 80203a8:	2e00      	cmp	r6, #0
 80203aa:	d0e2      	beq.n	8020372 <__udivmoddi4+0xa2>
 80203ac:	e9c6 4700 	strd	r4, r7, [r6]
 80203b0:	e7df      	b.n	8020372 <__udivmoddi4+0xa2>
 80203b2:	b902      	cbnz	r2, 80203b6 <__udivmoddi4+0xe6>
 80203b4:	deff      	udf	#255	; 0xff
 80203b6:	fab2 f382 	clz	r3, r2
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	f040 8090 	bne.w	80204e0 <__udivmoddi4+0x210>
 80203c0:	1a8a      	subs	r2, r1, r2
 80203c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203c6:	fa1f fe8c 	uxth.w	lr, ip
 80203ca:	2101      	movs	r1, #1
 80203cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80203d0:	fb07 2015 	mls	r0, r7, r5, r2
 80203d4:	0c22      	lsrs	r2, r4, #16
 80203d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80203da:	fb0e f005 	mul.w	r0, lr, r5
 80203de:	4290      	cmp	r0, r2
 80203e0:	d908      	bls.n	80203f4 <__udivmoddi4+0x124>
 80203e2:	eb1c 0202 	adds.w	r2, ip, r2
 80203e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80203ea:	d202      	bcs.n	80203f2 <__udivmoddi4+0x122>
 80203ec:	4290      	cmp	r0, r2
 80203ee:	f200 80cb 	bhi.w	8020588 <__udivmoddi4+0x2b8>
 80203f2:	4645      	mov	r5, r8
 80203f4:	1a12      	subs	r2, r2, r0
 80203f6:	b2a4      	uxth	r4, r4
 80203f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80203fc:	fb07 2210 	mls	r2, r7, r0, r2
 8020400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020404:	fb0e fe00 	mul.w	lr, lr, r0
 8020408:	45a6      	cmp	lr, r4
 802040a:	d908      	bls.n	802041e <__udivmoddi4+0x14e>
 802040c:	eb1c 0404 	adds.w	r4, ip, r4
 8020410:	f100 32ff 	add.w	r2, r0, #4294967295
 8020414:	d202      	bcs.n	802041c <__udivmoddi4+0x14c>
 8020416:	45a6      	cmp	lr, r4
 8020418:	f200 80bb 	bhi.w	8020592 <__udivmoddi4+0x2c2>
 802041c:	4610      	mov	r0, r2
 802041e:	eba4 040e 	sub.w	r4, r4, lr
 8020422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8020426:	e79f      	b.n	8020368 <__udivmoddi4+0x98>
 8020428:	f1c1 0720 	rsb	r7, r1, #32
 802042c:	408b      	lsls	r3, r1
 802042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8020432:	ea4c 0c03 	orr.w	ip, ip, r3
 8020436:	fa05 f401 	lsl.w	r4, r5, r1
 802043a:	fa20 f307 	lsr.w	r3, r0, r7
 802043e:	40fd      	lsrs	r5, r7
 8020440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8020444:	4323      	orrs	r3, r4
 8020446:	fbb5 f8f9 	udiv	r8, r5, r9
 802044a:	fa1f fe8c 	uxth.w	lr, ip
 802044e:	fb09 5518 	mls	r5, r9, r8, r5
 8020452:	0c1c      	lsrs	r4, r3, #16
 8020454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8020458:	fb08 f50e 	mul.w	r5, r8, lr
 802045c:	42a5      	cmp	r5, r4
 802045e:	fa02 f201 	lsl.w	r2, r2, r1
 8020462:	fa00 f001 	lsl.w	r0, r0, r1
 8020466:	d90b      	bls.n	8020480 <__udivmoddi4+0x1b0>
 8020468:	eb1c 0404 	adds.w	r4, ip, r4
 802046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8020470:	f080 8088 	bcs.w	8020584 <__udivmoddi4+0x2b4>
 8020474:	42a5      	cmp	r5, r4
 8020476:	f240 8085 	bls.w	8020584 <__udivmoddi4+0x2b4>
 802047a:	f1a8 0802 	sub.w	r8, r8, #2
 802047e:	4464      	add	r4, ip
 8020480:	1b64      	subs	r4, r4, r5
 8020482:	b29d      	uxth	r5, r3
 8020484:	fbb4 f3f9 	udiv	r3, r4, r9
 8020488:	fb09 4413 	mls	r4, r9, r3, r4
 802048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8020490:	fb03 fe0e 	mul.w	lr, r3, lr
 8020494:	45a6      	cmp	lr, r4
 8020496:	d908      	bls.n	80204aa <__udivmoddi4+0x1da>
 8020498:	eb1c 0404 	adds.w	r4, ip, r4
 802049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80204a0:	d26c      	bcs.n	802057c <__udivmoddi4+0x2ac>
 80204a2:	45a6      	cmp	lr, r4
 80204a4:	d96a      	bls.n	802057c <__udivmoddi4+0x2ac>
 80204a6:	3b02      	subs	r3, #2
 80204a8:	4464      	add	r4, ip
 80204aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80204ae:	fba3 9502 	umull	r9, r5, r3, r2
 80204b2:	eba4 040e 	sub.w	r4, r4, lr
 80204b6:	42ac      	cmp	r4, r5
 80204b8:	46c8      	mov	r8, r9
 80204ba:	46ae      	mov	lr, r5
 80204bc:	d356      	bcc.n	802056c <__udivmoddi4+0x29c>
 80204be:	d053      	beq.n	8020568 <__udivmoddi4+0x298>
 80204c0:	b156      	cbz	r6, 80204d8 <__udivmoddi4+0x208>
 80204c2:	ebb0 0208 	subs.w	r2, r0, r8
 80204c6:	eb64 040e 	sbc.w	r4, r4, lr
 80204ca:	fa04 f707 	lsl.w	r7, r4, r7
 80204ce:	40ca      	lsrs	r2, r1
 80204d0:	40cc      	lsrs	r4, r1
 80204d2:	4317      	orrs	r7, r2
 80204d4:	e9c6 7400 	strd	r7, r4, [r6]
 80204d8:	4618      	mov	r0, r3
 80204da:	2100      	movs	r1, #0
 80204dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204e0:	f1c3 0120 	rsb	r1, r3, #32
 80204e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80204e8:	fa20 f201 	lsr.w	r2, r0, r1
 80204ec:	fa25 f101 	lsr.w	r1, r5, r1
 80204f0:	409d      	lsls	r5, r3
 80204f2:	432a      	orrs	r2, r5
 80204f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204f8:	fa1f fe8c 	uxth.w	lr, ip
 80204fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8020500:	fb07 1510 	mls	r5, r7, r0, r1
 8020504:	0c11      	lsrs	r1, r2, #16
 8020506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 802050a:	fb00 f50e 	mul.w	r5, r0, lr
 802050e:	428d      	cmp	r5, r1
 8020510:	fa04 f403 	lsl.w	r4, r4, r3
 8020514:	d908      	bls.n	8020528 <__udivmoddi4+0x258>
 8020516:	eb1c 0101 	adds.w	r1, ip, r1
 802051a:	f100 38ff 	add.w	r8, r0, #4294967295
 802051e:	d22f      	bcs.n	8020580 <__udivmoddi4+0x2b0>
 8020520:	428d      	cmp	r5, r1
 8020522:	d92d      	bls.n	8020580 <__udivmoddi4+0x2b0>
 8020524:	3802      	subs	r0, #2
 8020526:	4461      	add	r1, ip
 8020528:	1b49      	subs	r1, r1, r5
 802052a:	b292      	uxth	r2, r2
 802052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8020530:	fb07 1115 	mls	r1, r7, r5, r1
 8020534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8020538:	fb05 f10e 	mul.w	r1, r5, lr
 802053c:	4291      	cmp	r1, r2
 802053e:	d908      	bls.n	8020552 <__udivmoddi4+0x282>
 8020540:	eb1c 0202 	adds.w	r2, ip, r2
 8020544:	f105 38ff 	add.w	r8, r5, #4294967295
 8020548:	d216      	bcs.n	8020578 <__udivmoddi4+0x2a8>
 802054a:	4291      	cmp	r1, r2
 802054c:	d914      	bls.n	8020578 <__udivmoddi4+0x2a8>
 802054e:	3d02      	subs	r5, #2
 8020550:	4462      	add	r2, ip
 8020552:	1a52      	subs	r2, r2, r1
 8020554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8020558:	e738      	b.n	80203cc <__udivmoddi4+0xfc>
 802055a:	4631      	mov	r1, r6
 802055c:	4630      	mov	r0, r6
 802055e:	e708      	b.n	8020372 <__udivmoddi4+0xa2>
 8020560:	4639      	mov	r1, r7
 8020562:	e6e6      	b.n	8020332 <__udivmoddi4+0x62>
 8020564:	4610      	mov	r0, r2
 8020566:	e6fb      	b.n	8020360 <__udivmoddi4+0x90>
 8020568:	4548      	cmp	r0, r9
 802056a:	d2a9      	bcs.n	80204c0 <__udivmoddi4+0x1f0>
 802056c:	ebb9 0802 	subs.w	r8, r9, r2
 8020570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8020574:	3b01      	subs	r3, #1
 8020576:	e7a3      	b.n	80204c0 <__udivmoddi4+0x1f0>
 8020578:	4645      	mov	r5, r8
 802057a:	e7ea      	b.n	8020552 <__udivmoddi4+0x282>
 802057c:	462b      	mov	r3, r5
 802057e:	e794      	b.n	80204aa <__udivmoddi4+0x1da>
 8020580:	4640      	mov	r0, r8
 8020582:	e7d1      	b.n	8020528 <__udivmoddi4+0x258>
 8020584:	46d0      	mov	r8, sl
 8020586:	e77b      	b.n	8020480 <__udivmoddi4+0x1b0>
 8020588:	3d02      	subs	r5, #2
 802058a:	4462      	add	r2, ip
 802058c:	e732      	b.n	80203f4 <__udivmoddi4+0x124>
 802058e:	4608      	mov	r0, r1
 8020590:	e70a      	b.n	80203a8 <__udivmoddi4+0xd8>
 8020592:	4464      	add	r4, ip
 8020594:	3802      	subs	r0, #2
 8020596:	e742      	b.n	802041e <__udivmoddi4+0x14e>

08020598 <__aeabi_idiv0>:
 8020598:	4770      	bx	lr
 802059a:	bf00      	nop

0802059c <HAL_GPIO_EXTI_Callback>:
uint8_t RF_NIRQ;

//========================================================================
void HAL_GPIO_EXTI_Callback ( uint16_t GPIO_Pin )
//========================================================================
{
 802059c:	b580      	push	{r7, lr}
 802059e:	b084      	sub	sp, #16
 80205a0:	af00      	add	r7, sp, #0
 80205a2:	4603      	mov	r3, r0
 80205a4:	80fb      	strh	r3, [r7, #6]
    uint8_t st;

//    printf( " HAL_GPIO_EXTI_Callback\n" );

    st = HAL_GPIO_ReadPin ( RF_INT_GPIO_Port, RF_INT_Pin );
 80205a6:	2110      	movs	r1, #16
 80205a8:	4809      	ldr	r0, [pc, #36]	; (80205d0 <HAL_GPIO_EXTI_Callback+0x34>)
 80205aa:	f002 ff9f 	bl	80234ec <HAL_GPIO_ReadPin>
 80205ae:	4603      	mov	r3, r0
 80205b0:	73fb      	strb	r3, [r7, #15]
    if ( st )	//	rising edge
 80205b2:	7bfb      	ldrb	r3, [r7, #15]
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d003      	beq.n	80205c0 <HAL_GPIO_EXTI_Callback+0x24>
    {
        RF_NIRQ = TRUE;
 80205b8:	4b06      	ldr	r3, [pc, #24]	; (80205d4 <HAL_GPIO_EXTI_Callback+0x38>)
 80205ba:	2201      	movs	r2, #1
 80205bc:	701a      	strb	r2, [r3, #0]
    }
    else		//	falling edge
    {
        RF_NIRQ = FALSE;
    }
}
 80205be:	e002      	b.n	80205c6 <HAL_GPIO_EXTI_Callback+0x2a>
        RF_NIRQ = FALSE;
 80205c0:	4b04      	ldr	r3, [pc, #16]	; (80205d4 <HAL_GPIO_EXTI_Callback+0x38>)
 80205c2:	2200      	movs	r2, #0
 80205c4:	701a      	strb	r2, [r3, #0]
}
 80205c6:	bf00      	nop
 80205c8:	3710      	adds	r7, #16
 80205ca:	46bd      	mov	sp, r7
 80205cc:	bd80      	pop	{r7, pc}
 80205ce:	bf00      	nop
 80205d0:	40020800 	.word	0x40020800
 80205d4:	20001218 	.word	0x20001218

080205d8 <LoopProcMain>:

int g_bEnIWDGStat = 1;		//	WatchDog Stat Enable
//========================================================================
void LoopProcMain( int nTick )
//========================================================================
{
 80205d8:	b480      	push	{r7}
 80205da:	b083      	sub	sp, #12
 80205dc:	af00      	add	r7, sp, #0
 80205de:	6078      	str	r0, [r7, #4]
	if ( g_bEnIWDGStat )
 80205e0:	4b07      	ldr	r3, [pc, #28]	; (8020600 <LoopProcMain+0x28>)
 80205e2:	681b      	ldr	r3, [r3, #0]
 80205e4:	2b00      	cmp	r3, #0
 80205e6:	d004      	beq.n	80205f2 <LoopProcMain+0x1a>
	{
		//	Watchdog Reload
		__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 80205e8:	4b06      	ldr	r3, [pc, #24]	; (8020604 <LoopProcMain+0x2c>)
 80205ea:	681b      	ldr	r3, [r3, #0]
 80205ec:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80205f0:	601a      	str	r2, [r3, #0]
//	{
//		char *sTest = "USB 가나다라\n\r";
//		CDC_Transmit_FS(sTest, strlen(sTest) + 1);
//		s_nTick = nTick;
//	}
}
 80205f2:	bf00      	nop
 80205f4:	370c      	adds	r7, #12
 80205f6:	46bd      	mov	sp, r7
 80205f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205fc:	4770      	bx	lr
 80205fe:	bf00      	nop
 8020600:	20000000 	.word	0x20000000
 8020604:	20000fdc 	.word	0x20000fdc

08020608 <MX_IWDG_Disable>:
#endif

//========================================================================
void MX_IWDG_Disable( void )
//========================================================================
{
 8020608:	b480      	push	{r7}
 802060a:	af00      	add	r7, sp, #0
	//	iWdg : iWatchdog의 경우 처음 시작 이후에 Stop 불가.
	//			-> Reset이후에만 종료됨.
//	IWDG_DISABLE_WRITE_ACCESS( &hiwdg );
}
 802060c:	bf00      	nop
 802060e:	46bd      	mov	sp, r7
 8020610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020614:	4770      	bx	lr
	...

08020618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020618:	b580      	push	{r7, lr}
 802061a:	b082      	sub	sp, #8
 802061c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802061e:	f001 fa6d 	bl	8021afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020622:	f000 f871 	bl	8020708 <SystemClock_Config>
#else	//	Application

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020626:	f000 fb47 	bl	8020cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 802062a:	f000 faff 	bl	8020c2c <MX_DMA_Init>
  MX_I2C1_Init();
 802062e:	f000 f93f 	bl	80208b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8020632:	f000 f9e1 	bl	80209f8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8020636:	f000 fa15 	bl	8020a64 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 802063a:	f000 faa3 	bl	8020b84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 802063e:	f000 facb 	bl	8020bd8 <MX_USART2_UART_Init>
  MX_I2S3_Init();
 8020642:	f000 f991 	bl	8020968 <MX_I2S3_Init>
  MX_TIM3_Init();
 8020646:	f000 fa45 	bl	8020ad4 <MX_TIM3_Init>
  MX_ADC1_Init();
 802064a:	f000 f8df 	bl	802080c <MX_ADC1_Init>
  MX_I2C3_Init();
 802064e:	f000 f95d 	bl	802090c <MX_I2C3_Init>
  MX_IWDG_Init();
 8020652:	f000 f9b7 	bl	80209c4 <MX_IWDG_Init>
  MX_USB_DEVICE_Init();
 8020656:	f015 ff93 	bl	8036580 <MX_USB_DEVICE_Init>
	//========================================================================
	//    Start PWM

	//    I2S MCLK - 12 MHz
  	//		72000000 / 3 / 2 = 12000000 ( 12MHz ) - MCLK ( MAX9860+ )
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_2 );       //      12 MHz
 802065a:	2104      	movs	r1, #4
 802065c:	4821      	ldr	r0, [pc, #132]	; (80206e4 <main+0xcc>)
 802065e:	f007 fca7 	bl	8027fb0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start( &htim3, TIM_CHANNEL_2 );
 8020662:	2104      	movs	r1, #4
 8020664:	481f      	ldr	r0, [pc, #124]	; (80206e4 <main+0xcc>)
 8020666:	f008 f94c 	bl	8028902 <HAL_TIMEx_PWMN_Start>

	//========================================================================
	//    Initial

	//	Serial
	SerialInit( &huart1, &huart2 );   //  Init Serial Handle
 802066a:	491f      	ldr	r1, [pc, #124]	; (80206e8 <main+0xd0>)
 802066c:	481f      	ldr	r0, [pc, #124]	; (80206ec <main+0xd4>)
 802066e:	f013 ff4b 	bl	8034508 <SerialInit>
	//SerialInit( NULL, &huart2 );   //  Init Serial Handle
	setbuf ( stdout, NULL );		            //	1024 byte buffer clear
 8020672:	4b1f      	ldr	r3, [pc, #124]	; (80206f0 <main+0xd8>)
 8020674:	681b      	ldr	r3, [r3, #0]
 8020676:	689b      	ldr	r3, [r3, #8]
 8020678:	2100      	movs	r1, #0
 802067a:	4618      	mov	r0, r3
 802067c:	f016 ff86 	bl	803758c <setbuf>
	//  setvbuf ( stdout, NULL, _IOLBF, NULL );	//	Line Buffer
	setvbuf ( stdout, NULL, _IONBF, NULL );	//	No Buffer
 8020680:	4b1b      	ldr	r3, [pc, #108]	; (80206f0 <main+0xd8>)
 8020682:	681b      	ldr	r3, [r3, #0]
 8020684:	6898      	ldr	r0, [r3, #8]
 8020686:	2300      	movs	r3, #0
 8020688:	2202      	movs	r2, #2
 802068a:	2100      	movs	r1, #0
 802068c:	f016 ff86 	bl	803759c <setvbuf>

	printf( "%s(%d) - Start\n", __func__, __LINE__ );
 8020690:	22ff      	movs	r2, #255	; 0xff
 8020692:	4918      	ldr	r1, [pc, #96]	; (80206f4 <main+0xdc>)
 8020694:	4818      	ldr	r0, [pc, #96]	; (80206f8 <main+0xe0>)
 8020696:	f016 ff03 	bl	80374a0 <iprintf>

	//========================================================================
	//    RFM Main Routine


	ProcMenuSetTxPwr(0);
 802069a:	2000      	movs	r0, #0
 802069c:	f011 ff64 	bl	8032568 <ProcMenuSetTxPwr>

	RFM_main();
 80206a0:	f013 fad2 	bl	8033c48 <RFM_main>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	nCurrTick = HAL_GetTick();
 80206a4:	f001 fa60 	bl	8021b68 <HAL_GetTick>
 80206a8:	4603      	mov	r3, r0
 80206aa:	607b      	str	r3, [r7, #4]

	LoopProcKey( nCurrTick );
 80206ac:	687b      	ldr	r3, [r7, #4]
 80206ae:	4618      	mov	r0, r3
 80206b0:	f011 f834 	bl	803171c <LoopProcKey>

	if ( ( nCurrTick - nLedTick ) >= 1000 )
 80206b4:	4b11      	ldr	r3, [pc, #68]	; (80206fc <main+0xe4>)
 80206b6:	681b      	ldr	r3, [r3, #0]
 80206b8:	687a      	ldr	r2, [r7, #4]
 80206ba:	1ad3      	subs	r3, r2, r3
 80206bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80206c0:	dbf0      	blt.n	80206a4 <main+0x8c>
	{
	    HAL_GPIO_TogglePin( LED_ST_GPIO_Port, LED_ST_Pin );
 80206c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80206c6:	480e      	ldr	r0, [pc, #56]	; (8020700 <main+0xe8>)
 80206c8:	f002 ff41 	bl	802354e <HAL_GPIO_TogglePin>

	    printf( "%s(%d) - Loop(%d)\n", __func__, __LINE__, nCurrTick );
 80206cc:	687b      	ldr	r3, [r7, #4]
 80206ce:	f240 1227 	movw	r2, #295	; 0x127
 80206d2:	4908      	ldr	r1, [pc, #32]	; (80206f4 <main+0xdc>)
 80206d4:	480b      	ldr	r0, [pc, #44]	; (8020704 <main+0xec>)
 80206d6:	f016 fee3 	bl	80374a0 <iprintf>

	    nLedTick = nCurrTick;
 80206da:	4a08      	ldr	r2, [pc, #32]	; (80206fc <main+0xe4>)
 80206dc:	687b      	ldr	r3, [r7, #4]
 80206de:	6013      	str	r3, [r2, #0]
	nCurrTick = HAL_GetTick();
 80206e0:	e7e0      	b.n	80206a4 <main+0x8c>
 80206e2:	bf00      	nop
 80206e4:	20001158 	.word	0x20001158
 80206e8:	200011d8 	.word	0x200011d8
 80206ec:	20001198 	.word	0x20001198
 80206f0:	20000dc4 	.word	0x20000dc4
 80206f4:	0803b660 	.word	0x0803b660
 80206f8:	08039214 	.word	0x08039214
 80206fc:	2000121c 	.word	0x2000121c
 8020700:	40020c00 	.word	0x40020c00
 8020704:	08039224 	.word	0x08039224

08020708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020708:	b580      	push	{r7, lr}
 802070a:	b098      	sub	sp, #96	; 0x60
 802070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802070e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020712:	2230      	movs	r2, #48	; 0x30
 8020714:	2100      	movs	r1, #0
 8020716:	4618      	mov	r0, r3
 8020718:	f017 f924 	bl	8037964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802071c:	f107 031c 	add.w	r3, r7, #28
 8020720:	2200      	movs	r2, #0
 8020722:	601a      	str	r2, [r3, #0]
 8020724:	605a      	str	r2, [r3, #4]
 8020726:	609a      	str	r2, [r3, #8]
 8020728:	60da      	str	r2, [r3, #12]
 802072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802072c:	f107 030c 	add.w	r3, r7, #12
 8020730:	2200      	movs	r2, #0
 8020732:	601a      	str	r2, [r3, #0]
 8020734:	605a      	str	r2, [r3, #4]
 8020736:	609a      	str	r2, [r3, #8]
 8020738:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 802073a:	2300      	movs	r3, #0
 802073c:	60bb      	str	r3, [r7, #8]
 802073e:	4b31      	ldr	r3, [pc, #196]	; (8020804 <SystemClock_Config+0xfc>)
 8020740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020742:	4a30      	ldr	r2, [pc, #192]	; (8020804 <SystemClock_Config+0xfc>)
 8020744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020748:	6413      	str	r3, [r2, #64]	; 0x40
 802074a:	4b2e      	ldr	r3, [pc, #184]	; (8020804 <SystemClock_Config+0xfc>)
 802074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020752:	60bb      	str	r3, [r7, #8]
 8020754:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020756:	2300      	movs	r3, #0
 8020758:	607b      	str	r3, [r7, #4]
 802075a:	4b2b      	ldr	r3, [pc, #172]	; (8020808 <SystemClock_Config+0x100>)
 802075c:	681b      	ldr	r3, [r3, #0]
 802075e:	4a2a      	ldr	r2, [pc, #168]	; (8020808 <SystemClock_Config+0x100>)
 8020760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020764:	6013      	str	r3, [r2, #0]
 8020766:	4b28      	ldr	r3, [pc, #160]	; (8020808 <SystemClock_Config+0x100>)
 8020768:	681b      	ldr	r3, [r3, #0]
 802076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802076e:	607b      	str	r3, [r7, #4]
 8020770:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8020772:	2309      	movs	r3, #9
 8020774:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8020776:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 802077a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 802077c:	2301      	movs	r3, #1
 802077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020780:	2302      	movs	r3, #2
 8020782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020784:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8020788:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 15;
 802078a:	230f      	movs	r3, #15
 802078c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 802078e:	2348      	movs	r3, #72	; 0x48
 8020790:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020792:	2302      	movs	r3, #2
 8020794:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8020796:	2303      	movs	r3, #3
 8020798:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802079a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802079e:	4618      	mov	r0, r3
 80207a0:	f006 fa42 	bl	8026c28 <HAL_RCC_OscConfig>
 80207a4:	4603      	mov	r3, r0
 80207a6:	2b00      	cmp	r3, #0
 80207a8:	d001      	beq.n	80207ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80207aa:	f000 fbc9 	bl	8020f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80207ae:	230f      	movs	r3, #15
 80207b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80207b2:	2302      	movs	r3, #2
 80207b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80207b6:	2300      	movs	r3, #0
 80207b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80207ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80207be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80207c0:	2300      	movs	r3, #0
 80207c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80207c4:	f107 031c 	add.w	r3, r7, #28
 80207c8:	2102      	movs	r1, #2
 80207ca:	4618      	mov	r0, r3
 80207cc:	f006 fc9a 	bl	8027104 <HAL_RCC_ClockConfig>
 80207d0:	4603      	mov	r3, r0
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d001      	beq.n	80207da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80207d6:	f000 fbb3 	bl	8020f40 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80207da:	2301      	movs	r3, #1
 80207dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 128;
 80207de:	2380      	movs	r3, #128	; 0x80
 80207e0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 80207e2:	2305      	movs	r3, #5
 80207e4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80207e6:	f107 030c 	add.w	r3, r7, #12
 80207ea:	4618      	mov	r0, r3
 80207ec:	f006 fe9c 	bl	8027528 <HAL_RCCEx_PeriphCLKConfig>
 80207f0:	4603      	mov	r3, r0
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d001      	beq.n	80207fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80207f6:	f000 fba3 	bl	8020f40 <Error_Handler>
  }
}
 80207fa:	bf00      	nop
 80207fc:	3760      	adds	r7, #96	; 0x60
 80207fe:	46bd      	mov	sp, r7
 8020800:	bd80      	pop	{r7, pc}
 8020802:	bf00      	nop
 8020804:	40023800 	.word	0x40023800
 8020808:	40007000 	.word	0x40007000

0802080c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 802080c:	b580      	push	{r7, lr}
 802080e:	b084      	sub	sp, #16
 8020810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8020812:	463b      	mov	r3, r7
 8020814:	2200      	movs	r2, #0
 8020816:	601a      	str	r2, [r3, #0]
 8020818:	605a      	str	r2, [r3, #4]
 802081a:	609a      	str	r2, [r3, #8]
 802081c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 802081e:	4b21      	ldr	r3, [pc, #132]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020820:	4a21      	ldr	r2, [pc, #132]	; (80208a8 <MX_ADC1_Init+0x9c>)
 8020822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8020824:	4b1f      	ldr	r3, [pc, #124]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020826:	2200      	movs	r2, #0
 8020828:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 802082a:	4b1e      	ldr	r3, [pc, #120]	; (80208a4 <MX_ADC1_Init+0x98>)
 802082c:	2200      	movs	r2, #0
 802082e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8020830:	4b1c      	ldr	r3, [pc, #112]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020832:	2200      	movs	r2, #0
 8020834:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8020836:	4b1b      	ldr	r3, [pc, #108]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020838:	2200      	movs	r2, #0
 802083a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 802083c:	4b19      	ldr	r3, [pc, #100]	; (80208a4 <MX_ADC1_Init+0x98>)
 802083e:	2200      	movs	r2, #0
 8020840:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8020844:	4b17      	ldr	r3, [pc, #92]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020846:	2200      	movs	r2, #0
 8020848:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 802084a:	4b16      	ldr	r3, [pc, #88]	; (80208a4 <MX_ADC1_Init+0x98>)
 802084c:	4a17      	ldr	r2, [pc, #92]	; (80208ac <MX_ADC1_Init+0xa0>)
 802084e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8020850:	4b14      	ldr	r3, [pc, #80]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020852:	2200      	movs	r2, #0
 8020854:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8020856:	4b13      	ldr	r3, [pc, #76]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020858:	2201      	movs	r2, #1
 802085a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 802085c:	4b11      	ldr	r3, [pc, #68]	; (80208a4 <MX_ADC1_Init+0x98>)
 802085e:	2200      	movs	r2, #0
 8020860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020864:	4b0f      	ldr	r3, [pc, #60]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020866:	2201      	movs	r2, #1
 8020868:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 802086a:	480e      	ldr	r0, [pc, #56]	; (80208a4 <MX_ADC1_Init+0x98>)
 802086c:	f001 f9ac 	bl	8021bc8 <HAL_ADC_Init>
 8020870:	4603      	mov	r3, r0
 8020872:	2b00      	cmp	r3, #0
 8020874:	d001      	beq.n	802087a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8020876:	f000 fb63 	bl	8020f40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 802087a:	230b      	movs	r3, #11
 802087c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 802087e:	2301      	movs	r3, #1
 8020880:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8020882:	2300      	movs	r3, #0
 8020884:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020886:	463b      	mov	r3, r7
 8020888:	4619      	mov	r1, r3
 802088a:	4806      	ldr	r0, [pc, #24]	; (80208a4 <MX_ADC1_Init+0x98>)
 802088c:	f001 fb38 	bl	8021f00 <HAL_ADC_ConfigChannel>
 8020890:	4603      	mov	r3, r0
 8020892:	2b00      	cmp	r3, #0
 8020894:	d001      	beq.n	802089a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8020896:	f000 fb53 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 802089a:	bf00      	nop
 802089c:	3710      	adds	r7, #16
 802089e:	46bd      	mov	sp, r7
 80208a0:	bd80      	pop	{r7, pc}
 80208a2:	bf00      	nop
 80208a4:	20000de4 	.word	0x20000de4
 80208a8:	40012000 	.word	0x40012000
 80208ac:	0f000001 	.word	0x0f000001

080208b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80208b0:	b580      	push	{r7, lr}
 80208b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80208b4:	4b12      	ldr	r3, [pc, #72]	; (8020900 <MX_I2C1_Init+0x50>)
 80208b6:	4a13      	ldr	r2, [pc, #76]	; (8020904 <MX_I2C1_Init+0x54>)
 80208b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80208ba:	4b11      	ldr	r3, [pc, #68]	; (8020900 <MX_I2C1_Init+0x50>)
 80208bc:	4a12      	ldr	r2, [pc, #72]	; (8020908 <MX_I2C1_Init+0x58>)
 80208be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80208c0:	4b0f      	ldr	r3, [pc, #60]	; (8020900 <MX_I2C1_Init+0x50>)
 80208c2:	2200      	movs	r2, #0
 80208c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80208c6:	4b0e      	ldr	r3, [pc, #56]	; (8020900 <MX_I2C1_Init+0x50>)
 80208c8:	2200      	movs	r2, #0
 80208ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80208cc:	4b0c      	ldr	r3, [pc, #48]	; (8020900 <MX_I2C1_Init+0x50>)
 80208ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80208d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80208d4:	4b0a      	ldr	r3, [pc, #40]	; (8020900 <MX_I2C1_Init+0x50>)
 80208d6:	2200      	movs	r2, #0
 80208d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80208da:	4b09      	ldr	r3, [pc, #36]	; (8020900 <MX_I2C1_Init+0x50>)
 80208dc:	2200      	movs	r2, #0
 80208de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80208e0:	4b07      	ldr	r3, [pc, #28]	; (8020900 <MX_I2C1_Init+0x50>)
 80208e2:	2200      	movs	r2, #0
 80208e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80208e6:	4b06      	ldr	r3, [pc, #24]	; (8020900 <MX_I2C1_Init+0x50>)
 80208e8:	2200      	movs	r2, #0
 80208ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80208ec:	4804      	ldr	r0, [pc, #16]	; (8020900 <MX_I2C1_Init+0x50>)
 80208ee:	f002 fe61 	bl	80235b4 <HAL_I2C_Init>
 80208f2:	4603      	mov	r3, r0
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	d001      	beq.n	80208fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80208f8:	f000 fb22 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80208fc:	bf00      	nop
 80208fe:	bd80      	pop	{r7, pc}
 8020900:	20000e2c 	.word	0x20000e2c
 8020904:	40005400 	.word	0x40005400
 8020908:	000186a0 	.word	0x000186a0

0802090c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 802090c:	b580      	push	{r7, lr}
 802090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8020910:	4b12      	ldr	r3, [pc, #72]	; (802095c <MX_I2C3_Init+0x50>)
 8020912:	4a13      	ldr	r2, [pc, #76]	; (8020960 <MX_I2C3_Init+0x54>)
 8020914:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8020916:	4b11      	ldr	r3, [pc, #68]	; (802095c <MX_I2C3_Init+0x50>)
 8020918:	4a12      	ldr	r2, [pc, #72]	; (8020964 <MX_I2C3_Init+0x58>)
 802091a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 802091c:	4b0f      	ldr	r3, [pc, #60]	; (802095c <MX_I2C3_Init+0x50>)
 802091e:	2200      	movs	r2, #0
 8020920:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8020922:	4b0e      	ldr	r3, [pc, #56]	; (802095c <MX_I2C3_Init+0x50>)
 8020924:	2200      	movs	r2, #0
 8020926:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020928:	4b0c      	ldr	r3, [pc, #48]	; (802095c <MX_I2C3_Init+0x50>)
 802092a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802092e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020930:	4b0a      	ldr	r3, [pc, #40]	; (802095c <MX_I2C3_Init+0x50>)
 8020932:	2200      	movs	r2, #0
 8020934:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8020936:	4b09      	ldr	r3, [pc, #36]	; (802095c <MX_I2C3_Init+0x50>)
 8020938:	2200      	movs	r2, #0
 802093a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802093c:	4b07      	ldr	r3, [pc, #28]	; (802095c <MX_I2C3_Init+0x50>)
 802093e:	2200      	movs	r2, #0
 8020940:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020942:	4b06      	ldr	r3, [pc, #24]	; (802095c <MX_I2C3_Init+0x50>)
 8020944:	2200      	movs	r2, #0
 8020946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8020948:	4804      	ldr	r0, [pc, #16]	; (802095c <MX_I2C3_Init+0x50>)
 802094a:	f002 fe33 	bl	80235b4 <HAL_I2C_Init>
 802094e:	4603      	mov	r3, r0
 8020950:	2b00      	cmp	r3, #0
 8020952:	d001      	beq.n	8020958 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8020954:	f000 faf4 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8020958:	bf00      	nop
 802095a:	bd80      	pop	{r7, pc}
 802095c:	20000e80 	.word	0x20000e80
 8020960:	40005c00 	.word	0x40005c00
 8020964:	00061a80 	.word	0x00061a80

08020968 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8020968:	b580      	push	{r7, lr}
 802096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 802096c:	4b13      	ldr	r3, [pc, #76]	; (80209bc <MX_I2S3_Init+0x54>)
 802096e:	4a14      	ldr	r2, [pc, #80]	; (80209c0 <MX_I2S3_Init+0x58>)
 8020970:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8020972:	4b12      	ldr	r3, [pc, #72]	; (80209bc <MX_I2S3_Init+0x54>)
 8020974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020978:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PCM_SHORT;
 802097a:	4b10      	ldr	r3, [pc, #64]	; (80209bc <MX_I2S3_Init+0x54>)
 802097c:	2230      	movs	r2, #48	; 0x30
 802097e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8020980:	4b0e      	ldr	r3, [pc, #56]	; (80209bc <MX_I2S3_Init+0x54>)
 8020982:	2201      	movs	r2, #1
 8020984:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8020986:	4b0d      	ldr	r3, [pc, #52]	; (80209bc <MX_I2S3_Init+0x54>)
 8020988:	2200      	movs	r2, #0
 802098a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 802098c:	4b0b      	ldr	r3, [pc, #44]	; (80209bc <MX_I2S3_Init+0x54>)
 802098e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8020992:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8020994:	4b09      	ldr	r3, [pc, #36]	; (80209bc <MX_I2S3_Init+0x54>)
 8020996:	2200      	movs	r2, #0
 8020998:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 802099a:	4b08      	ldr	r3, [pc, #32]	; (80209bc <MX_I2S3_Init+0x54>)
 802099c:	2200      	movs	r2, #0
 802099e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80209a0:	4b06      	ldr	r3, [pc, #24]	; (80209bc <MX_I2S3_Init+0x54>)
 80209a2:	2201      	movs	r2, #1
 80209a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80209a6:	4805      	ldr	r0, [pc, #20]	; (80209bc <MX_I2S3_Init+0x54>)
 80209a8:	f004 f872 	bl	8024a90 <HAL_I2S_Init>
 80209ac:	4603      	mov	r3, r0
 80209ae:	2b00      	cmp	r3, #0
 80209b0:	d001      	beq.n	80209b6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80209b2:	f000 fac5 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80209b6:	bf00      	nop
 80209b8:	bd80      	pop	{r7, pc}
 80209ba:	bf00      	nop
 80209bc:	20000ed4 	.word	0x20000ed4
 80209c0:	40003c00 	.word	0x40003c00

080209c4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80209c4:	b580      	push	{r7, lr}
 80209c6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80209c8:	4b09      	ldr	r3, [pc, #36]	; (80209f0 <MX_IWDG_Init+0x2c>)
 80209ca:	4a0a      	ldr	r2, [pc, #40]	; (80209f4 <MX_IWDG_Init+0x30>)
 80209cc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 80209ce:	4b08      	ldr	r3, [pc, #32]	; (80209f0 <MX_IWDG_Init+0x2c>)
 80209d0:	2205      	movs	r2, #5
 80209d2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 80209d4:	4b06      	ldr	r3, [pc, #24]	; (80209f0 <MX_IWDG_Init+0x2c>)
 80209d6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80209da:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80209dc:	4804      	ldr	r0, [pc, #16]	; (80209f0 <MX_IWDG_Init+0x2c>)
 80209de:	f004 ff67 	bl	80258b0 <HAL_IWDG_Init>
 80209e2:	4603      	mov	r3, r0
 80209e4:	2b00      	cmp	r3, #0
 80209e6:	d001      	beq.n	80209ec <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80209e8:	f000 faaa 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80209ec:	bf00      	nop
 80209ee:	bd80      	pop	{r7, pc}
 80209f0:	20000fdc 	.word	0x20000fdc
 80209f4:	40003000 	.word	0x40003000

080209f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80209f8:	b580      	push	{r7, lr}
 80209fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80209fc:	4b17      	ldr	r3, [pc, #92]	; (8020a5c <MX_SPI1_Init+0x64>)
 80209fe:	4a18      	ldr	r2, [pc, #96]	; (8020a60 <MX_SPI1_Init+0x68>)
 8020a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8020a02:	4b16      	ldr	r3, [pc, #88]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8020a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8020a0a:	4b14      	ldr	r3, [pc, #80]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8020a10:	4b12      	ldr	r3, [pc, #72]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a12:	2200      	movs	r2, #0
 8020a14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8020a16:	4b11      	ldr	r3, [pc, #68]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a18:	2200      	movs	r2, #0
 8020a1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8020a1c:	4b0f      	ldr	r3, [pc, #60]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a1e:	2200      	movs	r2, #0
 8020a20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8020a22:	4b0e      	ldr	r3, [pc, #56]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020a28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8020a2a:	4b0c      	ldr	r3, [pc, #48]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a2c:	2210      	movs	r2, #16
 8020a2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020a30:	4b0a      	ldr	r3, [pc, #40]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a32:	2200      	movs	r2, #0
 8020a34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8020a36:	4b09      	ldr	r3, [pc, #36]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a38:	2200      	movs	r2, #0
 8020a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020a3c:	4b07      	ldr	r3, [pc, #28]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a3e:	2200      	movs	r2, #0
 8020a40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8020a42:	4b06      	ldr	r3, [pc, #24]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a44:	220a      	movs	r2, #10
 8020a46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8020a48:	4804      	ldr	r0, [pc, #16]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a4a:	f006 ff7b 	bl	8027944 <HAL_SPI_Init>
 8020a4e:	4603      	mov	r3, r0
 8020a50:	2b00      	cmp	r3, #0
 8020a52:	d001      	beq.n	8020a58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8020a54:	f000 fa74 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8020a58:	bf00      	nop
 8020a5a:	bd80      	pop	{r7, pc}
 8020a5c:	20000fe8 	.word	0x20000fe8
 8020a60:	40013000 	.word	0x40013000

08020a64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8020a64:	b580      	push	{r7, lr}
 8020a66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8020a68:	4b18      	ldr	r3, [pc, #96]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a6a:	4a19      	ldr	r2, [pc, #100]	; (8020ad0 <MX_SPI2_Init+0x6c>)
 8020a6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8020a6e:	4b17      	ldr	r3, [pc, #92]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8020a74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8020a76:	4b15      	ldr	r3, [pc, #84]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a78:	2200      	movs	r2, #0
 8020a7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8020a7c:	4b13      	ldr	r3, [pc, #76]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020a82:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8020a84:	4b11      	ldr	r3, [pc, #68]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a86:	2202      	movs	r2, #2
 8020a88:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8020a8a:	4b10      	ldr	r3, [pc, #64]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a8c:	2201      	movs	r2, #1
 8020a8e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8020a90:	4b0e      	ldr	r3, [pc, #56]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020a96:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8020a98:	4b0c      	ldr	r3, [pc, #48]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a9a:	2228      	movs	r2, #40	; 0x28
 8020a9c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020a9e:	4b0b      	ldr	r3, [pc, #44]	; (8020acc <MX_SPI2_Init+0x68>)
 8020aa0:	2200      	movs	r2, #0
 8020aa2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8020aa4:	4b09      	ldr	r3, [pc, #36]	; (8020acc <MX_SPI2_Init+0x68>)
 8020aa6:	2200      	movs	r2, #0
 8020aa8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020aaa:	4b08      	ldr	r3, [pc, #32]	; (8020acc <MX_SPI2_Init+0x68>)
 8020aac:	2200      	movs	r2, #0
 8020aae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8020ab0:	4b06      	ldr	r3, [pc, #24]	; (8020acc <MX_SPI2_Init+0x68>)
 8020ab2:	220a      	movs	r2, #10
 8020ab4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8020ab6:	4805      	ldr	r0, [pc, #20]	; (8020acc <MX_SPI2_Init+0x68>)
 8020ab8:	f006 ff44 	bl	8027944 <HAL_SPI_Init>
 8020abc:	4603      	mov	r3, r0
 8020abe:	2b00      	cmp	r3, #0
 8020ac0:	d001      	beq.n	8020ac6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8020ac2:	f000 fa3d 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8020ac6:	bf00      	nop
 8020ac8:	bd80      	pop	{r7, pc}
 8020aca:	bf00      	nop
 8020acc:	20001040 	.word	0x20001040
 8020ad0:	40003800 	.word	0x40003800

08020ad4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8020ad4:	b580      	push	{r7, lr}
 8020ad6:	b08a      	sub	sp, #40	; 0x28
 8020ad8:	af00      	add	r7, sp, #0
    //  72000000 / 18 / 2 = 2000000 ( 2MHz )
    //  72000000 / 3 / 2 = 12000000 ( 12MHz ) - MCLK ( MAX9860+ )

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020ada:	f107 0320 	add.w	r3, r7, #32
 8020ade:	2200      	movs	r2, #0
 8020ae0:	601a      	str	r2, [r3, #0]
 8020ae2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8020ae4:	1d3b      	adds	r3, r7, #4
 8020ae6:	2200      	movs	r2, #0
 8020ae8:	601a      	str	r2, [r3, #0]
 8020aea:	605a      	str	r2, [r3, #4]
 8020aec:	609a      	str	r2, [r3, #8]
 8020aee:	60da      	str	r2, [r3, #12]
 8020af0:	611a      	str	r2, [r3, #16]
 8020af2:	615a      	str	r2, [r3, #20]
 8020af4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8020af6:	4b21      	ldr	r3, [pc, #132]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020af8:	4a21      	ldr	r2, [pc, #132]	; (8020b80 <MX_TIM3_Init+0xac>)
 8020afa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8020afc:	4b1f      	ldr	r3, [pc, #124]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020afe:	2202      	movs	r2, #2
 8020b00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020b02:	4b1e      	ldr	r3, [pc, #120]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b04:	2200      	movs	r2, #0
 8020b06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2-1;
 8020b08:	4b1c      	ldr	r3, [pc, #112]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b0a:	2201      	movs	r2, #1
 8020b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020b0e:	4b1b      	ldr	r3, [pc, #108]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b10:	2200      	movs	r2, #0
 8020b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020b14:	4b19      	ldr	r3, [pc, #100]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b16:	2200      	movs	r2, #0
 8020b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8020b1a:	4818      	ldr	r0, [pc, #96]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b1c:	f007 fa1d 	bl	8027f5a <HAL_TIM_PWM_Init>
 8020b20:	4603      	mov	r3, r0
 8020b22:	2b00      	cmp	r3, #0
 8020b24:	d001      	beq.n	8020b2a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8020b26:	f000 fa0b 	bl	8020f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020b2a:	2300      	movs	r3, #0
 8020b2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020b2e:	2300      	movs	r3, #0
 8020b30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8020b32:	f107 0320 	add.w	r3, r7, #32
 8020b36:	4619      	mov	r1, r3
 8020b38:	4810      	ldr	r0, [pc, #64]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b3a:	f007 ff0d 	bl	8028958 <HAL_TIMEx_MasterConfigSynchronization>
 8020b3e:	4603      	mov	r3, r0
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	d001      	beq.n	8020b48 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8020b44:	f000 f9fc 	bl	8020f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8020b48:	2360      	movs	r3, #96	; 0x60
 8020b4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8020b4c:	2301      	movs	r3, #1
 8020b4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8020b50:	2300      	movs	r3, #0
 8020b52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8020b54:	2300      	movs	r3, #0
 8020b56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8020b58:	1d3b      	adds	r3, r7, #4
 8020b5a:	2204      	movs	r2, #4
 8020b5c:	4619      	mov	r1, r3
 8020b5e:	4807      	ldr	r0, [pc, #28]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b60:	f007 fb6c 	bl	802823c <HAL_TIM_PWM_ConfigChannel>
 8020b64:	4603      	mov	r3, r0
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d001      	beq.n	8020b6e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8020b6a:	f000 f9e9 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8020b6e:	4803      	ldr	r0, [pc, #12]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b70:	f000 fd2a 	bl	80215c8 <HAL_TIM_MspPostInit>

}
 8020b74:	bf00      	nop
 8020b76:	3728      	adds	r7, #40	; 0x28
 8020b78:	46bd      	mov	sp, r7
 8020b7a:	bd80      	pop	{r7, pc}
 8020b7c:	20001158 	.word	0x20001158
 8020b80:	40000400 	.word	0x40000400

08020b84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020b84:	b580      	push	{r7, lr}
 8020b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020b88:	4b11      	ldr	r3, [pc, #68]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020b8a:	4a12      	ldr	r2, [pc, #72]	; (8020bd4 <MX_USART1_UART_Init+0x50>)
 8020b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020b8e:	4b10      	ldr	r3, [pc, #64]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020b96:	4b0e      	ldr	r3, [pc, #56]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020b98:	2200      	movs	r2, #0
 8020b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020b9c:	4b0c      	ldr	r3, [pc, #48]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020b9e:	2200      	movs	r2, #0
 8020ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020ba2:	4b0b      	ldr	r3, [pc, #44]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020ba4:	2200      	movs	r2, #0
 8020ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020ba8:	4b09      	ldr	r3, [pc, #36]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020baa:	220c      	movs	r2, #12
 8020bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020bae:	4b08      	ldr	r3, [pc, #32]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020bb0:	2200      	movs	r2, #0
 8020bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020bb4:	4b06      	ldr	r3, [pc, #24]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020bb6:	2200      	movs	r2, #0
 8020bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020bba:	4805      	ldr	r0, [pc, #20]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020bbc:	f007 ff81 	bl	8028ac2 <HAL_UART_Init>
 8020bc0:	4603      	mov	r3, r0
 8020bc2:	2b00      	cmp	r3, #0
 8020bc4:	d001      	beq.n	8020bca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8020bc6:	f000 f9bb 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020bca:	bf00      	nop
 8020bcc:	bd80      	pop	{r7, pc}
 8020bce:	bf00      	nop
 8020bd0:	20001198 	.word	0x20001198
 8020bd4:	40011000 	.word	0x40011000

08020bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8020bd8:	b580      	push	{r7, lr}
 8020bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8020bdc:	4b11      	ldr	r3, [pc, #68]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020bde:	4a12      	ldr	r2, [pc, #72]	; (8020c28 <MX_USART2_UART_Init+0x50>)
 8020be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8020be2:	4b10      	ldr	r3, [pc, #64]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8020bea:	4b0e      	ldr	r3, [pc, #56]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020bec:	2200      	movs	r2, #0
 8020bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8020bf0:	4b0c      	ldr	r3, [pc, #48]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020bf2:	2200      	movs	r2, #0
 8020bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8020bf6:	4b0b      	ldr	r3, [pc, #44]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020bf8:	2200      	movs	r2, #0
 8020bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8020bfc:	4b09      	ldr	r3, [pc, #36]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020bfe:	220c      	movs	r2, #12
 8020c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020c02:	4b08      	ldr	r3, [pc, #32]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020c04:	2200      	movs	r2, #0
 8020c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8020c08:	4b06      	ldr	r3, [pc, #24]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020c0a:	2200      	movs	r2, #0
 8020c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8020c0e:	4805      	ldr	r0, [pc, #20]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020c10:	f007 ff57 	bl	8028ac2 <HAL_UART_Init>
 8020c14:	4603      	mov	r3, r0
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d001      	beq.n	8020c1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8020c1a:	f000 f991 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8020c1e:	bf00      	nop
 8020c20:	bd80      	pop	{r7, pc}
 8020c22:	bf00      	nop
 8020c24:	200011d8 	.word	0x200011d8
 8020c28:	40004400 	.word	0x40004400

08020c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8020c2c:	b580      	push	{r7, lr}
 8020c2e:	b082      	sub	sp, #8
 8020c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020c32:	2300      	movs	r3, #0
 8020c34:	607b      	str	r3, [r7, #4]
 8020c36:	4b1f      	ldr	r3, [pc, #124]	; (8020cb4 <MX_DMA_Init+0x88>)
 8020c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c3a:	4a1e      	ldr	r2, [pc, #120]	; (8020cb4 <MX_DMA_Init+0x88>)
 8020c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8020c40:	6313      	str	r3, [r2, #48]	; 0x30
 8020c42:	4b1c      	ldr	r3, [pc, #112]	; (8020cb4 <MX_DMA_Init+0x88>)
 8020c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020c4a:	607b      	str	r3, [r7, #4]
 8020c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8020c4e:	2300      	movs	r3, #0
 8020c50:	603b      	str	r3, [r7, #0]
 8020c52:	4b18      	ldr	r3, [pc, #96]	; (8020cb4 <MX_DMA_Init+0x88>)
 8020c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c56:	4a17      	ldr	r2, [pc, #92]	; (8020cb4 <MX_DMA_Init+0x88>)
 8020c58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8020c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8020c5e:	4b15      	ldr	r3, [pc, #84]	; (8020cb4 <MX_DMA_Init+0x88>)
 8020c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020c66:	603b      	str	r3, [r7, #0]
 8020c68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8020c6a:	2200      	movs	r2, #0
 8020c6c:	2100      	movs	r1, #0
 8020c6e:	200b      	movs	r0, #11
 8020c70:	f001 fc1c 	bl	80224ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8020c74:	200b      	movs	r0, #11
 8020c76:	f001 fc35 	bl	80224e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8020c7a:	2200      	movs	r2, #0
 8020c7c:	2100      	movs	r1, #0
 8020c7e:	2010      	movs	r0, #16
 8020c80:	f001 fc14 	bl	80224ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8020c84:	2010      	movs	r0, #16
 8020c86:	f001 fc2d 	bl	80224e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8020c8a:	2200      	movs	r2, #0
 8020c8c:	2100      	movs	r1, #0
 8020c8e:	2038      	movs	r0, #56	; 0x38
 8020c90:	f001 fc0c 	bl	80224ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8020c94:	2038      	movs	r0, #56	; 0x38
 8020c96:	f001 fc25 	bl	80224e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8020c9a:	2200      	movs	r2, #0
 8020c9c:	2100      	movs	r1, #0
 8020c9e:	203b      	movs	r0, #59	; 0x3b
 8020ca0:	f001 fc04 	bl	80224ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8020ca4:	203b      	movs	r0, #59	; 0x3b
 8020ca6:	f001 fc1d 	bl	80224e4 <HAL_NVIC_EnableIRQ>

}
 8020caa:	bf00      	nop
 8020cac:	3708      	adds	r7, #8
 8020cae:	46bd      	mov	sp, r7
 8020cb0:	bd80      	pop	{r7, pc}
 8020cb2:	bf00      	nop
 8020cb4:	40023800 	.word	0x40023800

08020cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020cb8:	b580      	push	{r7, lr}
 8020cba:	b08c      	sub	sp, #48	; 0x30
 8020cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020cbe:	f107 031c 	add.w	r3, r7, #28
 8020cc2:	2200      	movs	r2, #0
 8020cc4:	601a      	str	r2, [r3, #0]
 8020cc6:	605a      	str	r2, [r3, #4]
 8020cc8:	609a      	str	r2, [r3, #8]
 8020cca:	60da      	str	r2, [r3, #12]
 8020ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020cce:	2300      	movs	r3, #0
 8020cd0:	61bb      	str	r3, [r7, #24]
 8020cd2:	4b8b      	ldr	r3, [pc, #556]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cd6:	4a8a      	ldr	r2, [pc, #552]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020cd8:	f043 0310 	orr.w	r3, r3, #16
 8020cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8020cde:	4b88      	ldr	r3, [pc, #544]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ce2:	f003 0310 	and.w	r3, r3, #16
 8020ce6:	61bb      	str	r3, [r7, #24]
 8020ce8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020cea:	2300      	movs	r3, #0
 8020cec:	617b      	str	r3, [r7, #20]
 8020cee:	4b84      	ldr	r3, [pc, #528]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cf2:	4a83      	ldr	r2, [pc, #524]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020cf4:	f043 0304 	orr.w	r3, r3, #4
 8020cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8020cfa:	4b81      	ldr	r3, [pc, #516]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cfe:	f003 0304 	and.w	r3, r3, #4
 8020d02:	617b      	str	r3, [r7, #20]
 8020d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020d06:	2300      	movs	r3, #0
 8020d08:	613b      	str	r3, [r7, #16]
 8020d0a:	4b7d      	ldr	r3, [pc, #500]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d0e:	4a7c      	ldr	r2, [pc, #496]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020d14:	6313      	str	r3, [r2, #48]	; 0x30
 8020d16:	4b7a      	ldr	r3, [pc, #488]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020d1e:	613b      	str	r3, [r7, #16]
 8020d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020d22:	2300      	movs	r3, #0
 8020d24:	60fb      	str	r3, [r7, #12]
 8020d26:	4b76      	ldr	r3, [pc, #472]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d2a:	4a75      	ldr	r2, [pc, #468]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d2c:	f043 0301 	orr.w	r3, r3, #1
 8020d30:	6313      	str	r3, [r2, #48]	; 0x30
 8020d32:	4b73      	ldr	r3, [pc, #460]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d36:	f003 0301 	and.w	r3, r3, #1
 8020d3a:	60fb      	str	r3, [r7, #12]
 8020d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020d3e:	2300      	movs	r3, #0
 8020d40:	60bb      	str	r3, [r7, #8]
 8020d42:	4b6f      	ldr	r3, [pc, #444]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d46:	4a6e      	ldr	r2, [pc, #440]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d48:	f043 0302 	orr.w	r3, r3, #2
 8020d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8020d4e:	4b6c      	ldr	r3, [pc, #432]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d52:	f003 0302 	and.w	r3, r3, #2
 8020d56:	60bb      	str	r3, [r7, #8]
 8020d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020d5a:	2300      	movs	r3, #0
 8020d5c:	607b      	str	r3, [r7, #4]
 8020d5e:	4b68      	ldr	r3, [pc, #416]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d62:	4a67      	ldr	r2, [pc, #412]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d64:	f043 0308 	orr.w	r3, r3, #8
 8020d68:	6313      	str	r3, [r2, #48]	; 0x30
 8020d6a:	4b65      	ldr	r3, [pc, #404]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d6e:	f003 0308 	and.w	r3, r3, #8
 8020d72:	607b      	str	r3, [r7, #4]
 8020d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PWR_RF_Pin|PWR_AUDIO_Pin, GPIO_PIN_SET);
 8020d76:	2201      	movs	r2, #1
 8020d78:	210c      	movs	r1, #12
 8020d7a:	4862      	ldr	r0, [pc, #392]	; (8020f04 <MX_GPIO_Init+0x24c>)
 8020d7c:	f002 fbce 	bl	802351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPK_ON_Pin|STANDBY_Pin|AUDIO_ON_Pin|LIGHT_ON_Pin
 8020d80:	2200      	movs	r2, #0
 8020d82:	f647 31a0 	movw	r1, #31648	; 0x7ba0
 8020d86:	485f      	ldr	r0, [pc, #380]	; (8020f04 <MX_GPIO_Init+0x24c>)
 8020d88:	f002 fbc8 	bl	802351c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_ID_Pin|TRN_RST_Pin, GPIO_PIN_RESET);
 8020d8c:	2200      	movs	r2, #0
 8020d8e:	f248 0120 	movw	r1, #32800	; 0x8020
 8020d92:	485d      	ldr	r0, [pc, #372]	; (8020f08 <MX_GPIO_Init+0x250>)
 8020d94:	f002 fbc2 	bl	802351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CSN_GPIO_Port, SPI_CSN_Pin, GPIO_PIN_SET);
 8020d98:	2201      	movs	r2, #1
 8020d9a:	2110      	movs	r1, #16
 8020d9c:	485b      	ldr	r0, [pc, #364]	; (8020f0c <MX_GPIO_Init+0x254>)
 8020d9e:	f002 fbbd 	bl	802351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_EN_Pin|RF_TX_Pin|RF_RX_Pin|LED_ON_A_Pin
 8020da2:	2200      	movs	r2, #0
 8020da4:	f246 1107 	movw	r1, #24839	; 0x6107
 8020da8:	4859      	ldr	r0, [pc, #356]	; (8020f10 <MX_GPIO_Init+0x258>)
 8020daa:	f002 fbb7 	bl	802351c <HAL_GPIO_WritePin>
                          |LED_ON_B_Pin|FLASH_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 8020dae:	2201      	movs	r2, #1
 8020db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8020db4:	4856      	ldr	r0, [pc, #344]	; (8020f10 <MX_GPIO_Init+0x258>)
 8020db6:	f002 fbb1 	bl	802351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_OFF_EN_GPIO_Port, ON_OFF_EN_Pin, GPIO_PIN_SET);
 8020dba:	2201      	movs	r2, #1
 8020dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020dc0:	4854      	ldr	r0, [pc, #336]	; (8020f14 <MX_GPIO_Init+0x25c>)
 8020dc2:	f002 fbab 	bl	802351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ST_GPIO_Port, LED_ST_Pin, GPIO_PIN_RESET);
 8020dc6:	2200      	movs	r2, #0
 8020dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020dcc:	4851      	ldr	r0, [pc, #324]	; (8020f14 <MX_GPIO_Init+0x25c>)
 8020dce:	f002 fba5 	bl	802351c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWR_RF_Pin PWR_AUDIO_Pin SPK_ON_Pin STANDBY_Pin
                           AUDIO_ON_Pin LIGHT_ON_Pin PE11 PE12
                           PE13 PE14 */
  GPIO_InitStruct.Pin = PWR_RF_Pin|PWR_AUDIO_Pin|SPK_ON_Pin|STANDBY_Pin
 8020dd2:	f647 33ac 	movw	r3, #31660	; 0x7bac
 8020dd6:	61fb      	str	r3, [r7, #28]
                          |AUDIO_ON_Pin|LIGHT_ON_Pin|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020dd8:	2301      	movs	r3, #1
 8020dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020ddc:	2300      	movs	r3, #0
 8020dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020de0:	2300      	movs	r3, #0
 8020de2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8020de4:	f107 031c 	add.w	r3, r7, #28
 8020de8:	4619      	mov	r1, r3
 8020dea:	4846      	ldr	r0, [pc, #280]	; (8020f04 <MX_GPIO_Init+0x24c>)
 8020dec:	f002 f9e2 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO1_Pin OVERRIDE_ON_Pin VDD_3_3V_RF_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin|OVERRIDE_ON_Pin|VDD_3_3V_RF_Pin;
 8020df0:	f240 4341 	movw	r3, #1089	; 0x441
 8020df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020df6:	2300      	movs	r3, #0
 8020df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dfa:	2300      	movs	r3, #0
 8020dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8020dfe:	f107 031c 	add.w	r3, r7, #28
 8020e02:	4619      	mov	r1, r3
 8020e04:	483f      	ldr	r0, [pc, #252]	; (8020f04 <MX_GPIO_Init+0x24c>)
 8020e06:	f002 f9d5 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ID_Pin TRN_RST_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin|TRN_RST_Pin;
 8020e0a:	f248 0320 	movw	r3, #32800	; 0x8020
 8020e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e10:	2301      	movs	r3, #1
 8020e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e14:	2300      	movs	r3, #0
 8020e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e18:	2300      	movs	r3, #0
 8020e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020e1c:	f107 031c 	add.w	r3, r7, #28
 8020e20:	4619      	mov	r1, r3
 8020e22:	4839      	ldr	r0, [pc, #228]	; (8020f08 <MX_GPIO_Init+0x250>)
 8020e24:	f002 f9c6 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_CHRG_Pin */
  GPIO_InitStruct.Pin = BAT_CHRG_Pin;
 8020e28:	2301      	movs	r3, #1
 8020e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020e2c:	2300      	movs	r3, #0
 8020e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e30:	2300      	movs	r3, #0
 8020e32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BAT_CHRG_GPIO_Port, &GPIO_InitStruct);
 8020e34:	f107 031c 	add.w	r3, r7, #28
 8020e38:	4619      	mov	r1, r3
 8020e3a:	4833      	ldr	r0, [pc, #204]	; (8020f08 <MX_GPIO_Init+0x250>)
 8020e3c:	f002 f9ba 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CSN_Pin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin;
 8020e40:	2310      	movs	r3, #16
 8020e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e44:	2301      	movs	r3, #1
 8020e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e48:	2300      	movs	r3, #0
 8020e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8020e4c:	2302      	movs	r3, #2
 8020e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CSN_GPIO_Port, &GPIO_InitStruct);
 8020e50:	f107 031c 	add.w	r3, r7, #28
 8020e54:	4619      	mov	r1, r3
 8020e56:	482d      	ldr	r0, [pc, #180]	; (8020f0c <MX_GPIO_Init+0x254>)
 8020e58:	f002 f9ac 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_INT_Pin */
  GPIO_InitStruct.Pin = RF_INT_Pin;
 8020e5c:	2310      	movs	r3, #16
 8020e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8020e60:	4b2d      	ldr	r3, [pc, #180]	; (8020f18 <MX_GPIO_Init+0x260>)
 8020e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e64:	2300      	movs	r3, #0
 8020e66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RF_INT_GPIO_Port, &GPIO_InitStruct);
 8020e68:	f107 031c 	add.w	r3, r7, #28
 8020e6c:	4619      	mov	r1, r3
 8020e6e:	4826      	ldr	r0, [pc, #152]	; (8020f08 <MX_GPIO_Init+0x250>)
 8020e70:	f002 f9a0 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_EN_Pin RF_TX_Pin RF_RX_Pin LED_ON_A_Pin
                           LED_ON_B_Pin FLASH_ON_Pin */
  GPIO_InitStruct.Pin = RX_EN_Pin|RF_TX_Pin|RF_RX_Pin|LED_ON_A_Pin
 8020e74:	f246 1307 	movw	r3, #24839	; 0x6107
 8020e78:	61fb      	str	r3, [r7, #28]
                          |LED_ON_B_Pin|FLASH_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e7a:	2301      	movs	r3, #1
 8020e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e7e:	2300      	movs	r3, #0
 8020e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e82:	2300      	movs	r3, #0
 8020e84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020e86:	f107 031c 	add.w	r3, r7, #28
 8020e8a:	4619      	mov	r1, r3
 8020e8c:	4820      	ldr	r0, [pc, #128]	; (8020f10 <MX_GPIO_Init+0x258>)
 8020e8e:	f002 f991 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 8020e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e98:	2301      	movs	r3, #1
 8020e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8020e9c:	2301      	movs	r3, #1
 8020e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8020ea0:	2302      	movs	r3, #2
 8020ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8020ea4:	f107 031c 	add.w	r3, r7, #28
 8020ea8:	4619      	mov	r1, r3
 8020eaa:	4819      	ldr	r0, [pc, #100]	; (8020f10 <MX_GPIO_Init+0x258>)
 8020eac:	f002 f982 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_OFF_KEY_Pin DOME1_Pin DOME2_Pin DOME3_Pin
                           DOME4_Pin DOME5_Pin DOME6_Pin SOS_KEY_Pin
                           PTT_KEY_Pin */
  GPIO_InitStruct.Pin = ON_OFF_KEY_Pin|DOME1_Pin|DOME2_Pin|DOME3_Pin
 8020eb0:	f240 23ff 	movw	r3, #767	; 0x2ff
 8020eb4:	61fb      	str	r3, [r7, #28]
                          |DOME4_Pin|DOME5_Pin|DOME6_Pin|SOS_KEY_Pin
                          |PTT_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020eb6:	2300      	movs	r3, #0
 8020eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020eba:	2300      	movs	r3, #0
 8020ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020ebe:	f107 031c 	add.w	r3, r7, #28
 8020ec2:	4619      	mov	r1, r3
 8020ec4:	4813      	ldr	r0, [pc, #76]	; (8020f14 <MX_GPIO_Init+0x25c>)
 8020ec6:	f002 f975 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_OFF_EN_Pin LED_ST_Pin */
  GPIO_InitStruct.Pin = ON_OFF_EN_Pin|LED_ST_Pin;
 8020eca:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8020ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020ed0:	2301      	movs	r3, #1
 8020ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020ed4:	2300      	movs	r3, #0
 8020ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020ed8:	2300      	movs	r3, #0
 8020eda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020edc:	f107 031c 	add.w	r3, r7, #28
 8020ee0:	4619      	mov	r1, r3
 8020ee2:	480c      	ldr	r0, [pc, #48]	; (8020f14 <MX_GPIO_Init+0x25c>)
 8020ee4:	f002 f966 	bl	80231b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8020ee8:	2200      	movs	r2, #0
 8020eea:	2100      	movs	r1, #0
 8020eec:	200a      	movs	r0, #10
 8020eee:	f001 fadd 	bl	80224ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8020ef2:	200a      	movs	r0, #10
 8020ef4:	f001 faf6 	bl	80224e4 <HAL_NVIC_EnableIRQ>

}
 8020ef8:	bf00      	nop
 8020efa:	3730      	adds	r7, #48	; 0x30
 8020efc:	46bd      	mov	sp, r7
 8020efe:	bd80      	pop	{r7, pc}
 8020f00:	40023800 	.word	0x40023800
 8020f04:	40021000 	.word	0x40021000
 8020f08:	40020800 	.word	0x40020800
 8020f0c:	40020000 	.word	0x40020000
 8020f10:	40020400 	.word	0x40020400
 8020f14:	40020c00 	.word	0x40020c00
 8020f18:	10310000 	.word	0x10310000

08020f1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020f1c:	b580      	push	{r7, lr}
 8020f1e:	b082      	sub	sp, #8
 8020f20:	af00      	add	r7, sp, #0
 8020f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	4a04      	ldr	r2, [pc, #16]	; (8020f3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8020f2a:	4293      	cmp	r3, r2
 8020f2c:	d101      	bne.n	8020f32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020f2e:	f000 fe07 	bl	8021b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020f32:	bf00      	nop
 8020f34:	3708      	adds	r7, #8
 8020f36:	46bd      	mov	sp, r7
 8020f38:	bd80      	pop	{r7, pc}
 8020f3a:	bf00      	nop
 8020f3c:	40010000 	.word	0x40010000

08020f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020f40:	b480      	push	{r7}
 8020f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8020f44:	bf00      	nop
 8020f46:	46bd      	mov	sp, r7
 8020f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f4c:	4770      	bx	lr
	...

08020f50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020f50:	b480      	push	{r7}
 8020f52:	b083      	sub	sp, #12
 8020f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020f56:	2300      	movs	r3, #0
 8020f58:	607b      	str	r3, [r7, #4]
 8020f5a:	4b10      	ldr	r3, [pc, #64]	; (8020f9c <HAL_MspInit+0x4c>)
 8020f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020f5e:	4a0f      	ldr	r2, [pc, #60]	; (8020f9c <HAL_MspInit+0x4c>)
 8020f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020f64:	6453      	str	r3, [r2, #68]	; 0x44
 8020f66:	4b0d      	ldr	r3, [pc, #52]	; (8020f9c <HAL_MspInit+0x4c>)
 8020f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020f6e:	607b      	str	r3, [r7, #4]
 8020f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020f72:	2300      	movs	r3, #0
 8020f74:	603b      	str	r3, [r7, #0]
 8020f76:	4b09      	ldr	r3, [pc, #36]	; (8020f9c <HAL_MspInit+0x4c>)
 8020f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f7a:	4a08      	ldr	r2, [pc, #32]	; (8020f9c <HAL_MspInit+0x4c>)
 8020f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020f80:	6413      	str	r3, [r2, #64]	; 0x40
 8020f82:	4b06      	ldr	r3, [pc, #24]	; (8020f9c <HAL_MspInit+0x4c>)
 8020f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020f8a:	603b      	str	r3, [r7, #0]
 8020f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020f8e:	bf00      	nop
 8020f90:	370c      	adds	r7, #12
 8020f92:	46bd      	mov	sp, r7
 8020f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f98:	4770      	bx	lr
 8020f9a:	bf00      	nop
 8020f9c:	40023800 	.word	0x40023800

08020fa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8020fa0:	b580      	push	{r7, lr}
 8020fa2:	b08a      	sub	sp, #40	; 0x28
 8020fa4:	af00      	add	r7, sp, #0
 8020fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020fa8:	f107 0314 	add.w	r3, r7, #20
 8020fac:	2200      	movs	r2, #0
 8020fae:	601a      	str	r2, [r3, #0]
 8020fb0:	605a      	str	r2, [r3, #4]
 8020fb2:	609a      	str	r2, [r3, #8]
 8020fb4:	60da      	str	r2, [r3, #12]
 8020fb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	4a17      	ldr	r2, [pc, #92]	; (802101c <HAL_ADC_MspInit+0x7c>)
 8020fbe:	4293      	cmp	r3, r2
 8020fc0:	d127      	bne.n	8021012 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	613b      	str	r3, [r7, #16]
 8020fc6:	4b16      	ldr	r3, [pc, #88]	; (8021020 <HAL_ADC_MspInit+0x80>)
 8020fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020fca:	4a15      	ldr	r2, [pc, #84]	; (8021020 <HAL_ADC_MspInit+0x80>)
 8020fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8020fd2:	4b13      	ldr	r3, [pc, #76]	; (8021020 <HAL_ADC_MspInit+0x80>)
 8020fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020fda:	613b      	str	r3, [r7, #16]
 8020fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020fde:	2300      	movs	r3, #0
 8020fe0:	60fb      	str	r3, [r7, #12]
 8020fe2:	4b0f      	ldr	r3, [pc, #60]	; (8021020 <HAL_ADC_MspInit+0x80>)
 8020fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fe6:	4a0e      	ldr	r2, [pc, #56]	; (8021020 <HAL_ADC_MspInit+0x80>)
 8020fe8:	f043 0304 	orr.w	r3, r3, #4
 8020fec:	6313      	str	r3, [r2, #48]	; 0x30
 8020fee:	4b0c      	ldr	r3, [pc, #48]	; (8021020 <HAL_ADC_MspInit+0x80>)
 8020ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ff2:	f003 0304 	and.w	r3, r3, #4
 8020ff6:	60fb      	str	r3, [r7, #12]
 8020ff8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 8020ffa:	2302      	movs	r3, #2
 8020ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8020ffe:	2303      	movs	r3, #3
 8021000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021002:	2300      	movs	r3, #0
 8021004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 8021006:	f107 0314 	add.w	r3, r7, #20
 802100a:	4619      	mov	r1, r3
 802100c:	4805      	ldr	r0, [pc, #20]	; (8021024 <HAL_ADC_MspInit+0x84>)
 802100e:	f002 f8d1 	bl	80231b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8021012:	bf00      	nop
 8021014:	3728      	adds	r7, #40	; 0x28
 8021016:	46bd      	mov	sp, r7
 8021018:	bd80      	pop	{r7, pc}
 802101a:	bf00      	nop
 802101c:	40012000 	.word	0x40012000
 8021020:	40023800 	.word	0x40023800
 8021024:	40020800 	.word	0x40020800

08021028 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8021028:	b580      	push	{r7, lr}
 802102a:	b08c      	sub	sp, #48	; 0x30
 802102c:	af00      	add	r7, sp, #0
 802102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021030:	f107 031c 	add.w	r3, r7, #28
 8021034:	2200      	movs	r2, #0
 8021036:	601a      	str	r2, [r3, #0]
 8021038:	605a      	str	r2, [r3, #4]
 802103a:	609a      	str	r2, [r3, #8]
 802103c:	60da      	str	r2, [r3, #12]
 802103e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8021040:	687b      	ldr	r3, [r7, #4]
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	4a42      	ldr	r2, [pc, #264]	; (8021150 <HAL_I2C_MspInit+0x128>)
 8021046:	4293      	cmp	r3, r2
 8021048:	d12c      	bne.n	80210a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802104a:	2300      	movs	r3, #0
 802104c:	61bb      	str	r3, [r7, #24]
 802104e:	4b41      	ldr	r3, [pc, #260]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 8021050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021052:	4a40      	ldr	r2, [pc, #256]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 8021054:	f043 0302 	orr.w	r3, r3, #2
 8021058:	6313      	str	r3, [r2, #48]	; 0x30
 802105a:	4b3e      	ldr	r3, [pc, #248]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 802105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802105e:	f003 0302 	and.w	r3, r3, #2
 8021062:	61bb      	str	r3, [r7, #24]
 8021064:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021066:	23c0      	movs	r3, #192	; 0xc0
 8021068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802106a:	2312      	movs	r3, #18
 802106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802106e:	2301      	movs	r3, #1
 8021070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021072:	2303      	movs	r3, #3
 8021074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8021076:	2304      	movs	r3, #4
 8021078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802107a:	f107 031c 	add.w	r3, r7, #28
 802107e:	4619      	mov	r1, r3
 8021080:	4835      	ldr	r0, [pc, #212]	; (8021158 <HAL_I2C_MspInit+0x130>)
 8021082:	f002 f897 	bl	80231b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021086:	2300      	movs	r3, #0
 8021088:	617b      	str	r3, [r7, #20]
 802108a:	4b32      	ldr	r3, [pc, #200]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 802108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802108e:	4a31      	ldr	r2, [pc, #196]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 8021090:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8021094:	6413      	str	r3, [r2, #64]	; 0x40
 8021096:	4b2f      	ldr	r3, [pc, #188]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 8021098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802109a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802109e:	617b      	str	r3, [r7, #20]
 80210a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80210a2:	e050      	b.n	8021146 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	681b      	ldr	r3, [r3, #0]
 80210a8:	4a2c      	ldr	r2, [pc, #176]	; (802115c <HAL_I2C_MspInit+0x134>)
 80210aa:	4293      	cmp	r3, r2
 80210ac:	d14b      	bne.n	8021146 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80210ae:	2300      	movs	r3, #0
 80210b0:	613b      	str	r3, [r7, #16]
 80210b2:	4b28      	ldr	r3, [pc, #160]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 80210b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210b6:	4a27      	ldr	r2, [pc, #156]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 80210b8:	f043 0304 	orr.w	r3, r3, #4
 80210bc:	6313      	str	r3, [r2, #48]	; 0x30
 80210be:	4b25      	ldr	r3, [pc, #148]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 80210c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210c2:	f003 0304 	and.w	r3, r3, #4
 80210c6:	613b      	str	r3, [r7, #16]
 80210c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80210ca:	2300      	movs	r3, #0
 80210cc:	60fb      	str	r3, [r7, #12]
 80210ce:	4b21      	ldr	r3, [pc, #132]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 80210d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210d2:	4a20      	ldr	r2, [pc, #128]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 80210d4:	f043 0301 	orr.w	r3, r3, #1
 80210d8:	6313      	str	r3, [r2, #48]	; 0x30
 80210da:	4b1e      	ldr	r3, [pc, #120]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 80210dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210de:	f003 0301 	and.w	r3, r3, #1
 80210e2:	60fb      	str	r3, [r7, #12]
 80210e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80210e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80210ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80210ec:	2312      	movs	r3, #18
 80210ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80210f0:	2301      	movs	r3, #1
 80210f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80210f4:	2303      	movs	r3, #3
 80210f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80210f8:	2304      	movs	r3, #4
 80210fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80210fc:	f107 031c 	add.w	r3, r7, #28
 8021100:	4619      	mov	r1, r3
 8021102:	4817      	ldr	r0, [pc, #92]	; (8021160 <HAL_I2C_MspInit+0x138>)
 8021104:	f002 f856 	bl	80231b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8021108:	f44f 7380 	mov.w	r3, #256	; 0x100
 802110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802110e:	2312      	movs	r3, #18
 8021110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021112:	2301      	movs	r3, #1
 8021114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021116:	2303      	movs	r3, #3
 8021118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802111a:	2304      	movs	r3, #4
 802111c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802111e:	f107 031c 	add.w	r3, r7, #28
 8021122:	4619      	mov	r1, r3
 8021124:	480f      	ldr	r0, [pc, #60]	; (8021164 <HAL_I2C_MspInit+0x13c>)
 8021126:	f002 f845 	bl	80231b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 802112a:	2300      	movs	r3, #0
 802112c:	60bb      	str	r3, [r7, #8]
 802112e:	4b09      	ldr	r3, [pc, #36]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 8021130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021132:	4a08      	ldr	r2, [pc, #32]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 8021134:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021138:	6413      	str	r3, [r2, #64]	; 0x40
 802113a:	4b06      	ldr	r3, [pc, #24]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 802113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802113e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8021142:	60bb      	str	r3, [r7, #8]
 8021144:	68bb      	ldr	r3, [r7, #8]
}
 8021146:	bf00      	nop
 8021148:	3730      	adds	r7, #48	; 0x30
 802114a:	46bd      	mov	sp, r7
 802114c:	bd80      	pop	{r7, pc}
 802114e:	bf00      	nop
 8021150:	40005400 	.word	0x40005400
 8021154:	40023800 	.word	0x40023800
 8021158:	40020400 	.word	0x40020400
 802115c:	40005c00 	.word	0x40005c00
 8021160:	40020800 	.word	0x40020800
 8021164:	40020000 	.word	0x40020000

08021168 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8021168:	b580      	push	{r7, lr}
 802116a:	b08a      	sub	sp, #40	; 0x28
 802116c:	af00      	add	r7, sp, #0
 802116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021170:	f107 0314 	add.w	r3, r7, #20
 8021174:	2200      	movs	r2, #0
 8021176:	601a      	str	r2, [r3, #0]
 8021178:	605a      	str	r2, [r3, #4]
 802117a:	609a      	str	r2, [r3, #8]
 802117c:	60da      	str	r2, [r3, #12]
 802117e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8021180:	687b      	ldr	r3, [r7, #4]
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	4a6b      	ldr	r2, [pc, #428]	; (8021334 <HAL_I2S_MspInit+0x1cc>)
 8021186:	4293      	cmp	r3, r2
 8021188:	f040 80d0 	bne.w	802132c <HAL_I2S_MspInit+0x1c4>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 802118c:	2300      	movs	r3, #0
 802118e:	613b      	str	r3, [r7, #16]
 8021190:	4b69      	ldr	r3, [pc, #420]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 8021192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021194:	4a68      	ldr	r2, [pc, #416]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 8021196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802119a:	6413      	str	r3, [r2, #64]	; 0x40
 802119c:	4b66      	ldr	r3, [pc, #408]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 802119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80211a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80211a4:	613b      	str	r3, [r7, #16]
 80211a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80211a8:	2300      	movs	r3, #0
 80211aa:	60fb      	str	r3, [r7, #12]
 80211ac:	4b62      	ldr	r3, [pc, #392]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 80211ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211b0:	4a61      	ldr	r2, [pc, #388]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 80211b2:	f043 0301 	orr.w	r3, r3, #1
 80211b6:	6313      	str	r3, [r2, #48]	; 0x30
 80211b8:	4b5f      	ldr	r3, [pc, #380]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 80211ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211bc:	f003 0301 	and.w	r3, r3, #1
 80211c0:	60fb      	str	r3, [r7, #12]
 80211c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80211c4:	2300      	movs	r3, #0
 80211c6:	60bb      	str	r3, [r7, #8]
 80211c8:	4b5b      	ldr	r3, [pc, #364]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 80211ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211cc:	4a5a      	ldr	r2, [pc, #360]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 80211ce:	f043 0304 	orr.w	r3, r3, #4
 80211d2:	6313      	str	r3, [r2, #48]	; 0x30
 80211d4:	4b58      	ldr	r3, [pc, #352]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 80211d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211d8:	f003 0304 	and.w	r3, r3, #4
 80211dc:	60bb      	str	r3, [r7, #8]
 80211de:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80211e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80211e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80211e6:	2302      	movs	r3, #2
 80211e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211ea:	2300      	movs	r3, #0
 80211ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80211ee:	2302      	movs	r3, #2
 80211f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80211f2:	2306      	movs	r3, #6
 80211f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80211f6:	f107 0314 	add.w	r3, r7, #20
 80211fa:	4619      	mov	r1, r3
 80211fc:	484f      	ldr	r0, [pc, #316]	; (802133c <HAL_I2S_MspInit+0x1d4>)
 80211fe:	f001 ffd9 	bl	80231b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8021202:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021208:	2302      	movs	r3, #2
 802120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802120c:	2300      	movs	r3, #0
 802120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8021210:	2302      	movs	r3, #2
 8021212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8021214:	2306      	movs	r3, #6
 8021216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021218:	f107 0314 	add.w	r3, r7, #20
 802121c:	4619      	mov	r1, r3
 802121e:	4848      	ldr	r0, [pc, #288]	; (8021340 <HAL_I2S_MspInit+0x1d8>)
 8021220:	f001 ffc8 	bl	80231b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8021224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802122a:	2302      	movs	r3, #2
 802122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802122e:	2300      	movs	r3, #0
 8021230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8021232:	2302      	movs	r3, #2
 8021234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8021236:	2305      	movs	r3, #5
 8021238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802123a:	f107 0314 	add.w	r3, r7, #20
 802123e:	4619      	mov	r1, r3
 8021240:	483f      	ldr	r0, [pc, #252]	; (8021340 <HAL_I2S_MspInit+0x1d8>)
 8021242:	f001 ffb7 	bl	80231b4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8021246:	4b3f      	ldr	r3, [pc, #252]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021248:	4a3f      	ldr	r2, [pc, #252]	; (8021348 <HAL_I2S_MspInit+0x1e0>)
 802124a:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 802124c:	4b3d      	ldr	r3, [pc, #244]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 802124e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8021252:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8021254:	4b3b      	ldr	r3, [pc, #236]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021256:	2200      	movs	r2, #0
 8021258:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802125a:	4b3a      	ldr	r3, [pc, #232]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 802125c:	2200      	movs	r2, #0
 802125e:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8021260:	4b38      	ldr	r3, [pc, #224]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021266:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8021268:	4b36      	ldr	r3, [pc, #216]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 802126a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802126e:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8021270:	4b34      	ldr	r3, [pc, #208]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8021276:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_NORMAL;
 8021278:	4b32      	ldr	r3, [pc, #200]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 802127a:	2200      	movs	r2, #0
 802127c:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 802127e:	4b31      	ldr	r3, [pc, #196]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021280:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8021284:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8021286:	4b2f      	ldr	r3, [pc, #188]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021288:	2204      	movs	r2, #4
 802128a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2s3_ext_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 802128c:	4b2d      	ldr	r3, [pc, #180]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 802128e:	2203      	movs	r2, #3
 8021290:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2s3_ext_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8021292:	4b2c      	ldr	r3, [pc, #176]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021294:	2200      	movs	r2, #0
 8021296:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2s3_ext_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8021298:	4b2a      	ldr	r3, [pc, #168]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 802129a:	2200      	movs	r2, #0
 802129c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 802129e:	4829      	ldr	r0, [pc, #164]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 80212a0:	f001 f92e 	bl	8022500 <HAL_DMA_Init>
 80212a4:	4603      	mov	r3, r0
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d001      	beq.n	80212ae <HAL_I2S_MspInit+0x146>
    {
      Error_Handler();
 80212aa:	f7ff fe49 	bl	8020f40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 80212ae:	687b      	ldr	r3, [r7, #4]
 80212b0:	4a24      	ldr	r2, [pc, #144]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 80212b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80212b4:	4a23      	ldr	r2, [pc, #140]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80212ba:	4b24      	ldr	r3, [pc, #144]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212bc:	4a24      	ldr	r2, [pc, #144]	; (8021350 <HAL_I2S_MspInit+0x1e8>)
 80212be:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80212c0:	4b22      	ldr	r3, [pc, #136]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212c2:	2200      	movs	r2, #0
 80212c4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80212c6:	4b21      	ldr	r3, [pc, #132]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212c8:	2240      	movs	r2, #64	; 0x40
 80212ca:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80212cc:	4b1f      	ldr	r3, [pc, #124]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212ce:	2200      	movs	r2, #0
 80212d0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80212d2:	4b1e      	ldr	r3, [pc, #120]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80212d8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80212da:	4b1c      	ldr	r3, [pc, #112]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80212e0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80212e2:	4b1a      	ldr	r3, [pc, #104]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80212e8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80212ea:	4b18      	ldr	r3, [pc, #96]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212ec:	2200      	movs	r2, #0
 80212ee:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80212f0:	4b16      	ldr	r3, [pc, #88]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80212f6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80212f8:	4b14      	ldr	r3, [pc, #80]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212fa:	2204      	movs	r2, #4
 80212fc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80212fe:	4b13      	ldr	r3, [pc, #76]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 8021300:	2203      	movs	r2, #3
 8021302:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8021304:	4b11      	ldr	r3, [pc, #68]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 8021306:	2200      	movs	r2, #0
 8021308:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 802130a:	4b10      	ldr	r3, [pc, #64]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 802130c:	2200      	movs	r2, #0
 802130e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8021310:	480e      	ldr	r0, [pc, #56]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 8021312:	f001 f8f5 	bl	8022500 <HAL_DMA_Init>
 8021316:	4603      	mov	r3, r0
 8021318:	2b00      	cmp	r3, #0
 802131a:	d001      	beq.n	8021320 <HAL_I2S_MspInit+0x1b8>
    {
      Error_Handler();
 802131c:	f7ff fe10 	bl	8020f40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	4a0a      	ldr	r2, [pc, #40]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 8021324:	639a      	str	r2, [r3, #56]	; 0x38
 8021326:	4a09      	ldr	r2, [pc, #36]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 8021328:	687b      	ldr	r3, [r7, #4]
 802132a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 802132c:	bf00      	nop
 802132e:	3728      	adds	r7, #40	; 0x28
 8021330:	46bd      	mov	sp, r7
 8021332:	bd80      	pop	{r7, pc}
 8021334:	40003c00 	.word	0x40003c00
 8021338:	40023800 	.word	0x40023800
 802133c:	40020000 	.word	0x40020000
 8021340:	40020800 	.word	0x40020800
 8021344:	20000f1c 	.word	0x20000f1c
 8021348:	40026010 	.word	0x40026010
 802134c:	20000f7c 	.word	0x20000f7c
 8021350:	40026088 	.word	0x40026088

08021354 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021354:	b580      	push	{r7, lr}
 8021356:	b08c      	sub	sp, #48	; 0x30
 8021358:	af00      	add	r7, sp, #0
 802135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802135c:	f107 031c 	add.w	r3, r7, #28
 8021360:	2200      	movs	r2, #0
 8021362:	601a      	str	r2, [r3, #0]
 8021364:	605a      	str	r2, [r3, #4]
 8021366:	609a      	str	r2, [r3, #8]
 8021368:	60da      	str	r2, [r3, #12]
 802136a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	4a7a      	ldr	r2, [pc, #488]	; (802155c <HAL_SPI_MspInit+0x208>)
 8021372:	4293      	cmp	r3, r2
 8021374:	f040 809d 	bne.w	80214b2 <HAL_SPI_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8021378:	2300      	movs	r3, #0
 802137a:	61bb      	str	r3, [r7, #24]
 802137c:	4b78      	ldr	r3, [pc, #480]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 802137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021380:	4a77      	ldr	r2, [pc, #476]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 8021382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8021386:	6453      	str	r3, [r2, #68]	; 0x44
 8021388:	4b75      	ldr	r3, [pc, #468]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 802138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802138c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021390:	61bb      	str	r3, [r7, #24]
 8021392:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021394:	2300      	movs	r3, #0
 8021396:	617b      	str	r3, [r7, #20]
 8021398:	4b71      	ldr	r3, [pc, #452]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 802139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802139c:	4a70      	ldr	r2, [pc, #448]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 802139e:	f043 0301 	orr.w	r3, r3, #1
 80213a2:	6313      	str	r3, [r2, #48]	; 0x30
 80213a4:	4b6e      	ldr	r3, [pc, #440]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80213a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213a8:	f003 0301 	and.w	r3, r3, #1
 80213ac:	617b      	str	r3, [r7, #20]
 80213ae:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 80213b0:	23e0      	movs	r3, #224	; 0xe0
 80213b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80213b4:	2302      	movs	r3, #2
 80213b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80213b8:	2300      	movs	r3, #0
 80213ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80213bc:	2303      	movs	r3, #3
 80213be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80213c0:	2305      	movs	r3, #5
 80213c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80213c4:	f107 031c 	add.w	r3, r7, #28
 80213c8:	4619      	mov	r1, r3
 80213ca:	4866      	ldr	r0, [pc, #408]	; (8021564 <HAL_SPI_MspInit+0x210>)
 80213cc:	f001 fef2 	bl	80231b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80213d0:	4b65      	ldr	r3, [pc, #404]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213d2:	4a66      	ldr	r2, [pc, #408]	; (802156c <HAL_SPI_MspInit+0x218>)
 80213d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80213d6:	4b64      	ldr	r3, [pc, #400]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213d8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80213dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80213de:	4b62      	ldr	r3, [pc, #392]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213e0:	2240      	movs	r2, #64	; 0x40
 80213e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80213e4:	4b60      	ldr	r3, [pc, #384]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213e6:	2200      	movs	r2, #0
 80213e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80213ea:	4b5f      	ldr	r3, [pc, #380]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80213f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80213f2:	4b5d      	ldr	r3, [pc, #372]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213f4:	2200      	movs	r2, #0
 80213f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80213f8:	4b5b      	ldr	r3, [pc, #364]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213fa:	2200      	movs	r2, #0
 80213fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80213fe:	4b5a      	ldr	r3, [pc, #360]	; (8021568 <HAL_SPI_MspInit+0x214>)
 8021400:	2200      	movs	r2, #0
 8021402:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8021404:	4b58      	ldr	r3, [pc, #352]	; (8021568 <HAL_SPI_MspInit+0x214>)
 8021406:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 802140a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 802140c:	4b56      	ldr	r3, [pc, #344]	; (8021568 <HAL_SPI_MspInit+0x214>)
 802140e:	2204      	movs	r2, #4
 8021410:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8021412:	4b55      	ldr	r3, [pc, #340]	; (8021568 <HAL_SPI_MspInit+0x214>)
 8021414:	2203      	movs	r2, #3
 8021416:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8021418:	4b53      	ldr	r3, [pc, #332]	; (8021568 <HAL_SPI_MspInit+0x214>)
 802141a:	2200      	movs	r2, #0
 802141c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 802141e:	4b52      	ldr	r3, [pc, #328]	; (8021568 <HAL_SPI_MspInit+0x214>)
 8021420:	2200      	movs	r2, #0
 8021422:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8021424:	4850      	ldr	r0, [pc, #320]	; (8021568 <HAL_SPI_MspInit+0x214>)
 8021426:	f001 f86b 	bl	8022500 <HAL_DMA_Init>
 802142a:	4603      	mov	r3, r0
 802142c:	2b00      	cmp	r3, #0
 802142e:	d001      	beq.n	8021434 <HAL_SPI_MspInit+0xe0>
    {
      Error_Handler();
 8021430:	f7ff fd86 	bl	8020f40 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8021434:	687b      	ldr	r3, [r7, #4]
 8021436:	4a4c      	ldr	r2, [pc, #304]	; (8021568 <HAL_SPI_MspInit+0x214>)
 8021438:	649a      	str	r2, [r3, #72]	; 0x48
 802143a:	4a4b      	ldr	r2, [pc, #300]	; (8021568 <HAL_SPI_MspInit+0x214>)
 802143c:	687b      	ldr	r3, [r7, #4]
 802143e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8021440:	4b4b      	ldr	r3, [pc, #300]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021442:	4a4c      	ldr	r2, [pc, #304]	; (8021574 <HAL_SPI_MspInit+0x220>)
 8021444:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8021446:	4b4a      	ldr	r3, [pc, #296]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021448:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 802144c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802144e:	4b48      	ldr	r3, [pc, #288]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021450:	2200      	movs	r2, #0
 8021452:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8021454:	4b46      	ldr	r3, [pc, #280]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021456:	2200      	movs	r2, #0
 8021458:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 802145a:	4b45      	ldr	r3, [pc, #276]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 802145c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021460:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8021462:	4b43      	ldr	r3, [pc, #268]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021464:	2200      	movs	r2, #0
 8021466:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8021468:	4b41      	ldr	r3, [pc, #260]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 802146a:	2200      	movs	r2, #0
 802146c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 802146e:	4b40      	ldr	r3, [pc, #256]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021470:	2200      	movs	r2, #0
 8021472:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8021474:	4b3e      	ldr	r3, [pc, #248]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021476:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 802147a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 802147c:	4b3c      	ldr	r3, [pc, #240]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 802147e:	2204      	movs	r2, #4
 8021480:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8021482:	4b3b      	ldr	r3, [pc, #236]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021484:	2203      	movs	r2, #3
 8021486:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8021488:	4b39      	ldr	r3, [pc, #228]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 802148a:	2200      	movs	r2, #0
 802148c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 802148e:	4b38      	ldr	r3, [pc, #224]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021490:	2200      	movs	r2, #0
 8021492:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8021494:	4836      	ldr	r0, [pc, #216]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021496:	f001 f833 	bl	8022500 <HAL_DMA_Init>
 802149a:	4603      	mov	r3, r0
 802149c:	2b00      	cmp	r3, #0
 802149e:	d001      	beq.n	80214a4 <HAL_SPI_MspInit+0x150>
    {
      Error_Handler();
 80214a0:	f7ff fd4e 	bl	8020f40 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	4a32      	ldr	r2, [pc, #200]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 80214a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80214aa:	4a31      	ldr	r2, [pc, #196]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 80214ac:	687b      	ldr	r3, [r7, #4]
 80214ae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80214b0:	e04f      	b.n	8021552 <HAL_SPI_MspInit+0x1fe>
  else if(hspi->Instance==SPI2)
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	681b      	ldr	r3, [r3, #0]
 80214b6:	4a30      	ldr	r2, [pc, #192]	; (8021578 <HAL_SPI_MspInit+0x224>)
 80214b8:	4293      	cmp	r3, r2
 80214ba:	d14a      	bne.n	8021552 <HAL_SPI_MspInit+0x1fe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80214bc:	2300      	movs	r3, #0
 80214be:	613b      	str	r3, [r7, #16]
 80214c0:	4b27      	ldr	r3, [pc, #156]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214c4:	4a26      	ldr	r2, [pc, #152]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80214ca:	6413      	str	r3, [r2, #64]	; 0x40
 80214cc:	4b24      	ldr	r3, [pc, #144]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80214d4:	613b      	str	r3, [r7, #16]
 80214d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80214d8:	2300      	movs	r3, #0
 80214da:	60fb      	str	r3, [r7, #12]
 80214dc:	4b20      	ldr	r3, [pc, #128]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214e0:	4a1f      	ldr	r2, [pc, #124]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214e2:	f043 0304 	orr.w	r3, r3, #4
 80214e6:	6313      	str	r3, [r2, #48]	; 0x30
 80214e8:	4b1d      	ldr	r3, [pc, #116]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214ec:	f003 0304 	and.w	r3, r3, #4
 80214f0:	60fb      	str	r3, [r7, #12]
 80214f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80214f4:	2300      	movs	r3, #0
 80214f6:	60bb      	str	r3, [r7, #8]
 80214f8:	4b19      	ldr	r3, [pc, #100]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214fc:	4a18      	ldr	r2, [pc, #96]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214fe:	f043 0302 	orr.w	r3, r3, #2
 8021502:	6313      	str	r3, [r2, #48]	; 0x30
 8021504:	4b16      	ldr	r3, [pc, #88]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 8021506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021508:	f003 0302 	and.w	r3, r3, #2
 802150c:	60bb      	str	r3, [r7, #8]
 802150e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOSI_Pin;
 8021510:	2308      	movs	r3, #8
 8021512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021514:	2302      	movs	r3, #2
 8021516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021518:	2300      	movs	r3, #0
 802151a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802151c:	2303      	movs	r3, #3
 802151e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8021520:	2305      	movs	r3, #5
 8021522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOSI_GPIO_Port, &GPIO_InitStruct);
 8021524:	f107 031c 	add.w	r3, r7, #28
 8021528:	4619      	mov	r1, r3
 802152a:	4814      	ldr	r0, [pc, #80]	; (802157c <HAL_SPI_MspInit+0x228>)
 802152c:	f001 fe42 	bl	80231b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_Pin;
 8021530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021536:	2302      	movs	r3, #2
 8021538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802153a:	2300      	movs	r3, #0
 802153c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802153e:	2303      	movs	r3, #3
 8021540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8021542:	2305      	movs	r3, #5
 8021544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 8021546:	f107 031c 	add.w	r3, r7, #28
 802154a:	4619      	mov	r1, r3
 802154c:	480c      	ldr	r0, [pc, #48]	; (8021580 <HAL_SPI_MspInit+0x22c>)
 802154e:	f001 fe31 	bl	80231b4 <HAL_GPIO_Init>
}
 8021552:	bf00      	nop
 8021554:	3730      	adds	r7, #48	; 0x30
 8021556:	46bd      	mov	sp, r7
 8021558:	bd80      	pop	{r7, pc}
 802155a:	bf00      	nop
 802155c:	40013000 	.word	0x40013000
 8021560:	40023800 	.word	0x40023800
 8021564:	40020000 	.word	0x40020000
 8021568:	20001098 	.word	0x20001098
 802156c:	40026458 	.word	0x40026458
 8021570:	200010f8 	.word	0x200010f8
 8021574:	40026410 	.word	0x40026410
 8021578:	40003800 	.word	0x40003800
 802157c:	40020800 	.word	0x40020800
 8021580:	40020400 	.word	0x40020400

08021584 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8021584:	b480      	push	{r7}
 8021586:	b085      	sub	sp, #20
 8021588:	af00      	add	r7, sp, #0
 802158a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 802158c:	687b      	ldr	r3, [r7, #4]
 802158e:	681b      	ldr	r3, [r3, #0]
 8021590:	4a0b      	ldr	r2, [pc, #44]	; (80215c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8021592:	4293      	cmp	r3, r2
 8021594:	d10d      	bne.n	80215b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8021596:	2300      	movs	r3, #0
 8021598:	60fb      	str	r3, [r7, #12]
 802159a:	4b0a      	ldr	r3, [pc, #40]	; (80215c4 <HAL_TIM_PWM_MspInit+0x40>)
 802159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802159e:	4a09      	ldr	r2, [pc, #36]	; (80215c4 <HAL_TIM_PWM_MspInit+0x40>)
 80215a0:	f043 0302 	orr.w	r3, r3, #2
 80215a4:	6413      	str	r3, [r2, #64]	; 0x40
 80215a6:	4b07      	ldr	r3, [pc, #28]	; (80215c4 <HAL_TIM_PWM_MspInit+0x40>)
 80215a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80215aa:	f003 0302 	and.w	r3, r3, #2
 80215ae:	60fb      	str	r3, [r7, #12]
 80215b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80215b2:	bf00      	nop
 80215b4:	3714      	adds	r7, #20
 80215b6:	46bd      	mov	sp, r7
 80215b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215bc:	4770      	bx	lr
 80215be:	bf00      	nop
 80215c0:	40000400 	.word	0x40000400
 80215c4:	40023800 	.word	0x40023800

080215c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80215c8:	b580      	push	{r7, lr}
 80215ca:	b088      	sub	sp, #32
 80215cc:	af00      	add	r7, sp, #0
 80215ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80215d0:	f107 030c 	add.w	r3, r7, #12
 80215d4:	2200      	movs	r2, #0
 80215d6:	601a      	str	r2, [r3, #0]
 80215d8:	605a      	str	r2, [r3, #4]
 80215da:	609a      	str	r2, [r3, #8]
 80215dc:	60da      	str	r2, [r3, #12]
 80215de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80215e0:	687b      	ldr	r3, [r7, #4]
 80215e2:	681b      	ldr	r3, [r3, #0]
 80215e4:	4a12      	ldr	r2, [pc, #72]	; (8021630 <HAL_TIM_MspPostInit+0x68>)
 80215e6:	4293      	cmp	r3, r2
 80215e8:	d11d      	bne.n	8021626 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80215ea:	2300      	movs	r3, #0
 80215ec:	60bb      	str	r3, [r7, #8]
 80215ee:	4b11      	ldr	r3, [pc, #68]	; (8021634 <HAL_TIM_MspPostInit+0x6c>)
 80215f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215f2:	4a10      	ldr	r2, [pc, #64]	; (8021634 <HAL_TIM_MspPostInit+0x6c>)
 80215f4:	f043 0304 	orr.w	r3, r3, #4
 80215f8:	6313      	str	r3, [r2, #48]	; 0x30
 80215fa:	4b0e      	ldr	r3, [pc, #56]	; (8021634 <HAL_TIM_MspPostInit+0x6c>)
 80215fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215fe:	f003 0304 	and.w	r3, r3, #4
 8021602:	60bb      	str	r3, [r7, #8]
 8021604:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8021606:	2380      	movs	r3, #128	; 0x80
 8021608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802160a:	2302      	movs	r3, #2
 802160c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802160e:	2300      	movs	r3, #0
 8021610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021612:	2300      	movs	r3, #0
 8021614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8021616:	2302      	movs	r3, #2
 8021618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802161a:	f107 030c 	add.w	r3, r7, #12
 802161e:	4619      	mov	r1, r3
 8021620:	4805      	ldr	r0, [pc, #20]	; (8021638 <HAL_TIM_MspPostInit+0x70>)
 8021622:	f001 fdc7 	bl	80231b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8021626:	bf00      	nop
 8021628:	3720      	adds	r7, #32
 802162a:	46bd      	mov	sp, r7
 802162c:	bd80      	pop	{r7, pc}
 802162e:	bf00      	nop
 8021630:	40000400 	.word	0x40000400
 8021634:	40023800 	.word	0x40023800
 8021638:	40020800 	.word	0x40020800

0802163c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 802163c:	b580      	push	{r7, lr}
 802163e:	b08c      	sub	sp, #48	; 0x30
 8021640:	af00      	add	r7, sp, #0
 8021642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021644:	f107 031c 	add.w	r3, r7, #28
 8021648:	2200      	movs	r2, #0
 802164a:	601a      	str	r2, [r3, #0]
 802164c:	605a      	str	r2, [r3, #4]
 802164e:	609a      	str	r2, [r3, #8]
 8021650:	60da      	str	r2, [r3, #12]
 8021652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	681b      	ldr	r3, [r3, #0]
 8021658:	4a3a      	ldr	r2, [pc, #232]	; (8021744 <HAL_UART_MspInit+0x108>)
 802165a:	4293      	cmp	r3, r2
 802165c:	d135      	bne.n	80216ca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 802165e:	2300      	movs	r3, #0
 8021660:	61bb      	str	r3, [r7, #24]
 8021662:	4b39      	ldr	r3, [pc, #228]	; (8021748 <HAL_UART_MspInit+0x10c>)
 8021664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021666:	4a38      	ldr	r2, [pc, #224]	; (8021748 <HAL_UART_MspInit+0x10c>)
 8021668:	f043 0310 	orr.w	r3, r3, #16
 802166c:	6453      	str	r3, [r2, #68]	; 0x44
 802166e:	4b36      	ldr	r3, [pc, #216]	; (8021748 <HAL_UART_MspInit+0x10c>)
 8021670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021672:	f003 0310 	and.w	r3, r3, #16
 8021676:	61bb      	str	r3, [r7, #24]
 8021678:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802167a:	2300      	movs	r3, #0
 802167c:	617b      	str	r3, [r7, #20]
 802167e:	4b32      	ldr	r3, [pc, #200]	; (8021748 <HAL_UART_MspInit+0x10c>)
 8021680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021682:	4a31      	ldr	r2, [pc, #196]	; (8021748 <HAL_UART_MspInit+0x10c>)
 8021684:	f043 0301 	orr.w	r3, r3, #1
 8021688:	6313      	str	r3, [r2, #48]	; 0x30
 802168a:	4b2f      	ldr	r3, [pc, #188]	; (8021748 <HAL_UART_MspInit+0x10c>)
 802168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802168e:	f003 0301 	and.w	r3, r3, #1
 8021692:	617b      	str	r3, [r7, #20]
 8021694:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8021696:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802169c:	2302      	movs	r3, #2
 802169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80216a0:	2300      	movs	r3, #0
 80216a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80216a4:	2303      	movs	r3, #3
 80216a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80216a8:	2307      	movs	r3, #7
 80216aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80216ac:	f107 031c 	add.w	r3, r7, #28
 80216b0:	4619      	mov	r1, r3
 80216b2:	4826      	ldr	r0, [pc, #152]	; (802174c <HAL_UART_MspInit+0x110>)
 80216b4:	f001 fd7e 	bl	80231b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80216b8:	2200      	movs	r2, #0
 80216ba:	2100      	movs	r1, #0
 80216bc:	2025      	movs	r0, #37	; 0x25
 80216be:	f000 fef5 	bl	80224ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80216c2:	2025      	movs	r0, #37	; 0x25
 80216c4:	f000 ff0e 	bl	80224e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80216c8:	e038      	b.n	802173c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80216ca:	687b      	ldr	r3, [r7, #4]
 80216cc:	681b      	ldr	r3, [r3, #0]
 80216ce:	4a20      	ldr	r2, [pc, #128]	; (8021750 <HAL_UART_MspInit+0x114>)
 80216d0:	4293      	cmp	r3, r2
 80216d2:	d133      	bne.n	802173c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80216d4:	2300      	movs	r3, #0
 80216d6:	613b      	str	r3, [r7, #16]
 80216d8:	4b1b      	ldr	r3, [pc, #108]	; (8021748 <HAL_UART_MspInit+0x10c>)
 80216da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80216dc:	4a1a      	ldr	r2, [pc, #104]	; (8021748 <HAL_UART_MspInit+0x10c>)
 80216de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80216e2:	6413      	str	r3, [r2, #64]	; 0x40
 80216e4:	4b18      	ldr	r3, [pc, #96]	; (8021748 <HAL_UART_MspInit+0x10c>)
 80216e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80216e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80216ec:	613b      	str	r3, [r7, #16]
 80216ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80216f0:	2300      	movs	r3, #0
 80216f2:	60fb      	str	r3, [r7, #12]
 80216f4:	4b14      	ldr	r3, [pc, #80]	; (8021748 <HAL_UART_MspInit+0x10c>)
 80216f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216f8:	4a13      	ldr	r2, [pc, #76]	; (8021748 <HAL_UART_MspInit+0x10c>)
 80216fa:	f043 0301 	orr.w	r3, r3, #1
 80216fe:	6313      	str	r3, [r2, #48]	; 0x30
 8021700:	4b11      	ldr	r3, [pc, #68]	; (8021748 <HAL_UART_MspInit+0x10c>)
 8021702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021704:	f003 0301 	and.w	r3, r3, #1
 8021708:	60fb      	str	r3, [r7, #12]
 802170a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802170c:	230c      	movs	r3, #12
 802170e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021710:	2302      	movs	r3, #2
 8021712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021714:	2300      	movs	r3, #0
 8021716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021718:	2303      	movs	r3, #3
 802171a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802171c:	2307      	movs	r3, #7
 802171e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021720:	f107 031c 	add.w	r3, r7, #28
 8021724:	4619      	mov	r1, r3
 8021726:	4809      	ldr	r0, [pc, #36]	; (802174c <HAL_UART_MspInit+0x110>)
 8021728:	f001 fd44 	bl	80231b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 802172c:	2200      	movs	r2, #0
 802172e:	2100      	movs	r1, #0
 8021730:	2026      	movs	r0, #38	; 0x26
 8021732:	f000 febb 	bl	80224ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8021736:	2026      	movs	r0, #38	; 0x26
 8021738:	f000 fed4 	bl	80224e4 <HAL_NVIC_EnableIRQ>
}
 802173c:	bf00      	nop
 802173e:	3730      	adds	r7, #48	; 0x30
 8021740:	46bd      	mov	sp, r7
 8021742:	bd80      	pop	{r7, pc}
 8021744:	40011000 	.word	0x40011000
 8021748:	40023800 	.word	0x40023800
 802174c:	40020000 	.word	0x40020000
 8021750:	40004400 	.word	0x40004400

08021754 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021754:	b580      	push	{r7, lr}
 8021756:	b08c      	sub	sp, #48	; 0x30
 8021758:	af00      	add	r7, sp, #0
 802175a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 802175c:	2300      	movs	r3, #0
 802175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8021760:	2300      	movs	r3, #0
 8021762:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8021764:	2200      	movs	r2, #0
 8021766:	6879      	ldr	r1, [r7, #4]
 8021768:	2019      	movs	r0, #25
 802176a:	f000 fe9f 	bl	80224ac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 802176e:	2019      	movs	r0, #25
 8021770:	f000 feb8 	bl	80224e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8021774:	2300      	movs	r3, #0
 8021776:	60fb      	str	r3, [r7, #12]
 8021778:	4b1e      	ldr	r3, [pc, #120]	; (80217f4 <HAL_InitTick+0xa0>)
 802177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802177c:	4a1d      	ldr	r2, [pc, #116]	; (80217f4 <HAL_InitTick+0xa0>)
 802177e:	f043 0301 	orr.w	r3, r3, #1
 8021782:	6453      	str	r3, [r2, #68]	; 0x44
 8021784:	4b1b      	ldr	r3, [pc, #108]	; (80217f4 <HAL_InitTick+0xa0>)
 8021786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021788:	f003 0301 	and.w	r3, r3, #1
 802178c:	60fb      	str	r3, [r7, #12]
 802178e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8021790:	f107 0210 	add.w	r2, r7, #16
 8021794:	f107 0314 	add.w	r3, r7, #20
 8021798:	4611      	mov	r1, r2
 802179a:	4618      	mov	r0, r3
 802179c:	f005 fe92 	bl	80274c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80217a0:	f005 fe7c 	bl	802749c <HAL_RCC_GetPCLK2Freq>
 80217a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80217a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217a8:	4a13      	ldr	r2, [pc, #76]	; (80217f8 <HAL_InitTick+0xa4>)
 80217aa:	fba2 2303 	umull	r2, r3, r2, r3
 80217ae:	0c9b      	lsrs	r3, r3, #18
 80217b0:	3b01      	subs	r3, #1
 80217b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80217b4:	4b11      	ldr	r3, [pc, #68]	; (80217fc <HAL_InitTick+0xa8>)
 80217b6:	4a12      	ldr	r2, [pc, #72]	; (8021800 <HAL_InitTick+0xac>)
 80217b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80217ba:	4b10      	ldr	r3, [pc, #64]	; (80217fc <HAL_InitTick+0xa8>)
 80217bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80217c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80217c2:	4a0e      	ldr	r2, [pc, #56]	; (80217fc <HAL_InitTick+0xa8>)
 80217c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80217c8:	4b0c      	ldr	r3, [pc, #48]	; (80217fc <HAL_InitTick+0xa8>)
 80217ca:	2200      	movs	r2, #0
 80217cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80217ce:	4b0b      	ldr	r3, [pc, #44]	; (80217fc <HAL_InitTick+0xa8>)
 80217d0:	2200      	movs	r2, #0
 80217d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80217d4:	4809      	ldr	r0, [pc, #36]	; (80217fc <HAL_InitTick+0xa8>)
 80217d6:	f006 fb67 	bl	8027ea8 <HAL_TIM_Base_Init>
 80217da:	4603      	mov	r3, r0
 80217dc:	2b00      	cmp	r3, #0
 80217de:	d104      	bne.n	80217ea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80217e0:	4806      	ldr	r0, [pc, #24]	; (80217fc <HAL_InitTick+0xa8>)
 80217e2:	f006 fb96 	bl	8027f12 <HAL_TIM_Base_Start_IT>
 80217e6:	4603      	mov	r3, r0
 80217e8:	e000      	b.n	80217ec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80217ea:	2301      	movs	r3, #1
}
 80217ec:	4618      	mov	r0, r3
 80217ee:	3730      	adds	r7, #48	; 0x30
 80217f0:	46bd      	mov	sp, r7
 80217f2:	bd80      	pop	{r7, pc}
 80217f4:	40023800 	.word	0x40023800
 80217f8:	431bde83 	.word	0x431bde83
 80217fc:	20001220 	.word	0x20001220
 8021800:	40010000 	.word	0x40010000

08021804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021804:	b480      	push	{r7}
 8021806:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8021808:	bf00      	nop
 802180a:	46bd      	mov	sp, r7
 802180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021810:	4770      	bx	lr

08021812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021812:	b480      	push	{r7}
 8021814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021816:	e7fe      	b.n	8021816 <HardFault_Handler+0x4>

08021818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021818:	b480      	push	{r7}
 802181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802181c:	e7fe      	b.n	802181c <MemManage_Handler+0x4>

0802181e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802181e:	b480      	push	{r7}
 8021820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021822:	e7fe      	b.n	8021822 <BusFault_Handler+0x4>

08021824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021824:	b480      	push	{r7}
 8021826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021828:	e7fe      	b.n	8021828 <UsageFault_Handler+0x4>

0802182a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802182a:	b480      	push	{r7}
 802182c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802182e:	bf00      	nop
 8021830:	46bd      	mov	sp, r7
 8021832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021836:	4770      	bx	lr

08021838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021838:	b480      	push	{r7}
 802183a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802183c:	bf00      	nop
 802183e:	46bd      	mov	sp, r7
 8021840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021844:	4770      	bx	lr

08021846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021846:	b480      	push	{r7}
 8021848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802184a:	bf00      	nop
 802184c:	46bd      	mov	sp, r7
 802184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021852:	4770      	bx	lr

08021854 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8021854:	b580      	push	{r7, lr}
 8021856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8021858:	2010      	movs	r0, #16
 802185a:	f001 fe93 	bl	8023584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 802185e:	bf00      	nop
 8021860:	bd80      	pop	{r7, pc}
	...

08021864 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8021864:	b580      	push	{r7, lr}
 8021866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8021868:	4802      	ldr	r0, [pc, #8]	; (8021874 <DMA1_Stream0_IRQHandler+0x10>)
 802186a:	f000 ff71 	bl	8022750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 802186e:	bf00      	nop
 8021870:	bd80      	pop	{r7, pc}
 8021872:	bf00      	nop
 8021874:	20000f1c 	.word	0x20000f1c

08021878 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8021878:	b580      	push	{r7, lr}
 802187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 802187c:	4802      	ldr	r0, [pc, #8]	; (8021888 <DMA1_Stream5_IRQHandler+0x10>)
 802187e:	f000 ff67 	bl	8022750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8021882:	bf00      	nop
 8021884:	bd80      	pop	{r7, pc}
 8021886:	bf00      	nop
 8021888:	20000f7c 	.word	0x20000f7c

0802188c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 802188c:	b580      	push	{r7, lr}
 802188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8021890:	4802      	ldr	r0, [pc, #8]	; (802189c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8021892:	f006 fbcb 	bl	802802c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8021896:	bf00      	nop
 8021898:	bd80      	pop	{r7, pc}
 802189a:	bf00      	nop
 802189c:	20001220 	.word	0x20001220

080218a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80218a0:	b580      	push	{r7, lr}
 80218a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80218a4:	4802      	ldr	r0, [pc, #8]	; (80218b0 <USART1_IRQHandler+0x10>)
 80218a6:	f007 fa47 	bl	8028d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80218aa:	bf00      	nop
 80218ac:	bd80      	pop	{r7, pc}
 80218ae:	bf00      	nop
 80218b0:	20001198 	.word	0x20001198

080218b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80218b4:	b580      	push	{r7, lr}
 80218b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80218b8:	4802      	ldr	r0, [pc, #8]	; (80218c4 <USART2_IRQHandler+0x10>)
 80218ba:	f007 fa3d 	bl	8028d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80218be:	bf00      	nop
 80218c0:	bd80      	pop	{r7, pc}
 80218c2:	bf00      	nop
 80218c4:	200011d8 	.word	0x200011d8

080218c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80218c8:	b580      	push	{r7, lr}
 80218ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80218cc:	4802      	ldr	r0, [pc, #8]	; (80218d8 <DMA2_Stream0_IRQHandler+0x10>)
 80218ce:	f000 ff3f 	bl	8022750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80218d2:	bf00      	nop
 80218d4:	bd80      	pop	{r7, pc}
 80218d6:	bf00      	nop
 80218d8:	200010f8 	.word	0x200010f8

080218dc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80218dc:	b580      	push	{r7, lr}
 80218de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80218e0:	4802      	ldr	r0, [pc, #8]	; (80218ec <DMA2_Stream3_IRQHandler+0x10>)
 80218e2:	f000 ff35 	bl	8022750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80218e6:	bf00      	nop
 80218e8:	bd80      	pop	{r7, pc}
 80218ea:	bf00      	nop
 80218ec:	20001098 	.word	0x20001098

080218f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80218f0:	b580      	push	{r7, lr}
 80218f2:	af00      	add	r7, sp, #0
#if defined(USE_BOOTLOADER)
 //	Bootloader : Exclude
#else	//	Application

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80218f4:	4802      	ldr	r0, [pc, #8]	; (8021900 <OTG_FS_IRQHandler+0x10>)
 80218f6:	f004 f964 	bl	8025bc2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

#endif	//	Application

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80218fa:	bf00      	nop
 80218fc:	bd80      	pop	{r7, pc}
 80218fe:	bf00      	nop
 8021900:	2000402c 	.word	0x2000402c

08021904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8021904:	b480      	push	{r7}
 8021906:	af00      	add	r7, sp, #0
	return 1;
 8021908:	2301      	movs	r3, #1
}
 802190a:	4618      	mov	r0, r3
 802190c:	46bd      	mov	sp, r7
 802190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021912:	4770      	bx	lr

08021914 <_kill>:

int _kill(int pid, int sig)
{
 8021914:	b580      	push	{r7, lr}
 8021916:	b082      	sub	sp, #8
 8021918:	af00      	add	r7, sp, #0
 802191a:	6078      	str	r0, [r7, #4]
 802191c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 802191e:	f016 f8fb 	bl	8037b18 <__errno>
 8021922:	4603      	mov	r3, r0
 8021924:	2216      	movs	r2, #22
 8021926:	601a      	str	r2, [r3, #0]
	return -1;
 8021928:	f04f 33ff 	mov.w	r3, #4294967295
}
 802192c:	4618      	mov	r0, r3
 802192e:	3708      	adds	r7, #8
 8021930:	46bd      	mov	sp, r7
 8021932:	bd80      	pop	{r7, pc}

08021934 <_exit>:

void _exit (int status)
{
 8021934:	b580      	push	{r7, lr}
 8021936:	b082      	sub	sp, #8
 8021938:	af00      	add	r7, sp, #0
 802193a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 802193c:	f04f 31ff 	mov.w	r1, #4294967295
 8021940:	6878      	ldr	r0, [r7, #4]
 8021942:	f7ff ffe7 	bl	8021914 <_kill>
	while (1) {}		/* Make sure we hang here */
 8021946:	e7fe      	b.n	8021946 <_exit+0x12>

08021948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021948:	b580      	push	{r7, lr}
 802194a:	b086      	sub	sp, #24
 802194c:	af00      	add	r7, sp, #0
 802194e:	60f8      	str	r0, [r7, #12]
 8021950:	60b9      	str	r1, [r7, #8]
 8021952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021954:	2300      	movs	r3, #0
 8021956:	617b      	str	r3, [r7, #20]
 8021958:	e00a      	b.n	8021970 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 802195a:	f012 fd7b 	bl	8034454 <__io_getchar>
 802195e:	4601      	mov	r1, r0
 8021960:	68bb      	ldr	r3, [r7, #8]
 8021962:	1c5a      	adds	r2, r3, #1
 8021964:	60ba      	str	r2, [r7, #8]
 8021966:	b2ca      	uxtb	r2, r1
 8021968:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802196a:	697b      	ldr	r3, [r7, #20]
 802196c:	3301      	adds	r3, #1
 802196e:	617b      	str	r3, [r7, #20]
 8021970:	697a      	ldr	r2, [r7, #20]
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	429a      	cmp	r2, r3
 8021976:	dbf0      	blt.n	802195a <_read+0x12>
	}

return len;
 8021978:	687b      	ldr	r3, [r7, #4]
}
 802197a:	4618      	mov	r0, r3
 802197c:	3718      	adds	r7, #24
 802197e:	46bd      	mov	sp, r7
 8021980:	bd80      	pop	{r7, pc}

08021982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8021982:	b580      	push	{r7, lr}
 8021984:	b086      	sub	sp, #24
 8021986:	af00      	add	r7, sp, #0
 8021988:	60f8      	str	r0, [r7, #12]
 802198a:	60b9      	str	r1, [r7, #8]
 802198c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802198e:	2300      	movs	r3, #0
 8021990:	617b      	str	r3, [r7, #20]
 8021992:	e009      	b.n	80219a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8021994:	68bb      	ldr	r3, [r7, #8]
 8021996:	1c5a      	adds	r2, r3, #1
 8021998:	60ba      	str	r2, [r7, #8]
 802199a:	781b      	ldrb	r3, [r3, #0]
 802199c:	4618      	mov	r0, r3
 802199e:	f012 fd0d 	bl	80343bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80219a2:	697b      	ldr	r3, [r7, #20]
 80219a4:	3301      	adds	r3, #1
 80219a6:	617b      	str	r3, [r7, #20]
 80219a8:	697a      	ldr	r2, [r7, #20]
 80219aa:	687b      	ldr	r3, [r7, #4]
 80219ac:	429a      	cmp	r2, r3
 80219ae:	dbf1      	blt.n	8021994 <_write+0x12>
	}
	return len;
 80219b0:	687b      	ldr	r3, [r7, #4]
}
 80219b2:	4618      	mov	r0, r3
 80219b4:	3718      	adds	r7, #24
 80219b6:	46bd      	mov	sp, r7
 80219b8:	bd80      	pop	{r7, pc}

080219ba <_close>:

int _close(int file)
{
 80219ba:	b480      	push	{r7}
 80219bc:	b083      	sub	sp, #12
 80219be:	af00      	add	r7, sp, #0
 80219c0:	6078      	str	r0, [r7, #4]
	return -1;
 80219c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80219c6:	4618      	mov	r0, r3
 80219c8:	370c      	adds	r7, #12
 80219ca:	46bd      	mov	sp, r7
 80219cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219d0:	4770      	bx	lr

080219d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80219d2:	b480      	push	{r7}
 80219d4:	b083      	sub	sp, #12
 80219d6:	af00      	add	r7, sp, #0
 80219d8:	6078      	str	r0, [r7, #4]
 80219da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80219dc:	683b      	ldr	r3, [r7, #0]
 80219de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80219e2:	605a      	str	r2, [r3, #4]
	return 0;
 80219e4:	2300      	movs	r3, #0
}
 80219e6:	4618      	mov	r0, r3
 80219e8:	370c      	adds	r7, #12
 80219ea:	46bd      	mov	sp, r7
 80219ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219f0:	4770      	bx	lr

080219f2 <_isatty>:

int _isatty(int file)
{
 80219f2:	b480      	push	{r7}
 80219f4:	b083      	sub	sp, #12
 80219f6:	af00      	add	r7, sp, #0
 80219f8:	6078      	str	r0, [r7, #4]
	return 1;
 80219fa:	2301      	movs	r3, #1
}
 80219fc:	4618      	mov	r0, r3
 80219fe:	370c      	adds	r7, #12
 8021a00:	46bd      	mov	sp, r7
 8021a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a06:	4770      	bx	lr

08021a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021a08:	b480      	push	{r7}
 8021a0a:	b085      	sub	sp, #20
 8021a0c:	af00      	add	r7, sp, #0
 8021a0e:	60f8      	str	r0, [r7, #12]
 8021a10:	60b9      	str	r1, [r7, #8]
 8021a12:	607a      	str	r2, [r7, #4]
	return 0;
 8021a14:	2300      	movs	r3, #0
}
 8021a16:	4618      	mov	r0, r3
 8021a18:	3714      	adds	r7, #20
 8021a1a:	46bd      	mov	sp, r7
 8021a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a20:	4770      	bx	lr
	...

08021a24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8021a24:	b580      	push	{r7, lr}
 8021a26:	b084      	sub	sp, #16
 8021a28:	af00      	add	r7, sp, #0
 8021a2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8021a2c:	4b11      	ldr	r3, [pc, #68]	; (8021a74 <_sbrk+0x50>)
 8021a2e:	681b      	ldr	r3, [r3, #0]
 8021a30:	2b00      	cmp	r3, #0
 8021a32:	d102      	bne.n	8021a3a <_sbrk+0x16>
		heap_end = &end;
 8021a34:	4b0f      	ldr	r3, [pc, #60]	; (8021a74 <_sbrk+0x50>)
 8021a36:	4a10      	ldr	r2, [pc, #64]	; (8021a78 <_sbrk+0x54>)
 8021a38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8021a3a:	4b0e      	ldr	r3, [pc, #56]	; (8021a74 <_sbrk+0x50>)
 8021a3c:	681b      	ldr	r3, [r3, #0]
 8021a3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8021a40:	4b0c      	ldr	r3, [pc, #48]	; (8021a74 <_sbrk+0x50>)
 8021a42:	681a      	ldr	r2, [r3, #0]
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	4413      	add	r3, r2
 8021a48:	466a      	mov	r2, sp
 8021a4a:	4293      	cmp	r3, r2
 8021a4c:	d907      	bls.n	8021a5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8021a4e:	f016 f863 	bl	8037b18 <__errno>
 8021a52:	4603      	mov	r3, r0
 8021a54:	220c      	movs	r2, #12
 8021a56:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8021a58:	f04f 33ff 	mov.w	r3, #4294967295
 8021a5c:	e006      	b.n	8021a6c <_sbrk+0x48>
	}

	heap_end += incr;
 8021a5e:	4b05      	ldr	r3, [pc, #20]	; (8021a74 <_sbrk+0x50>)
 8021a60:	681a      	ldr	r2, [r3, #0]
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	4413      	add	r3, r2
 8021a66:	4a03      	ldr	r2, [pc, #12]	; (8021a74 <_sbrk+0x50>)
 8021a68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8021a6a:	68fb      	ldr	r3, [r7, #12]
}
 8021a6c:	4618      	mov	r0, r3
 8021a6e:	3710      	adds	r7, #16
 8021a70:	46bd      	mov	sp, r7
 8021a72:	bd80      	pop	{r7, pc}
 8021a74:	20001260 	.word	0x20001260
 8021a78:	20004580 	.word	0x20004580

08021a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8021a7c:	b480      	push	{r7}
 8021a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021a80:	4b07      	ldr	r3, [pc, #28]	; (8021aa0 <SystemInit+0x24>)
 8021a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021a86:	4a06      	ldr	r2, [pc, #24]	; (8021aa0 <SystemInit+0x24>)
 8021a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

//  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#if		defined(USE_BOOTLOADER)	//	Bootloader	memory Address : 0x08000000
 SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#else							//	Application	memory Address : 0x08020000
 SCB->VTOR = (FLASH_BASE | VECT_TAB_OFFSET) + 0x00020000;//VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8021a90:	4b03      	ldr	r3, [pc, #12]	; (8021aa0 <SystemInit+0x24>)
 8021a92:	4a04      	ldr	r2, [pc, #16]	; (8021aa4 <SystemInit+0x28>)
 8021a94:	609a      	str	r2, [r3, #8]
#endif

#endif
}
 8021a96:	bf00      	nop
 8021a98:	46bd      	mov	sp, r7
 8021a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a9e:	4770      	bx	lr
 8021aa0:	e000ed00 	.word	0xe000ed00
 8021aa4:	08020000 	.word	0x08020000

08021aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8021aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021ae0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8021aac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8021aae:	e003      	b.n	8021ab8 <LoopCopyDataInit>

08021ab0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8021ab0:	4b0c      	ldr	r3, [pc, #48]	; (8021ae4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8021ab2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8021ab4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8021ab6:	3104      	adds	r1, #4

08021ab8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8021ab8:	480b      	ldr	r0, [pc, #44]	; (8021ae8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8021aba:	4b0c      	ldr	r3, [pc, #48]	; (8021aec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8021abc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8021abe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8021ac0:	d3f6      	bcc.n	8021ab0 <CopyDataInit>
  ldr  r2, =_sbss
 8021ac2:	4a0b      	ldr	r2, [pc, #44]	; (8021af0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8021ac4:	e002      	b.n	8021acc <LoopFillZerobss>

08021ac6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8021ac6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8021ac8:	f842 3b04 	str.w	r3, [r2], #4

08021acc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8021acc:	4b09      	ldr	r3, [pc, #36]	; (8021af4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8021ace:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8021ad0:	d3f9      	bcc.n	8021ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8021ad2:	f7ff ffd3 	bl	8021a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021ad6:	f016 f825 	bl	8037b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021ada:	f7fe fd9d 	bl	8020618 <main>
  bx  lr    
 8021ade:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8021ae0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8021ae4:	08047da8 	.word	0x08047da8
  ldr  r0, =_sdata
 8021ae8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8021aec:	20000dc8 	.word	0x20000dc8
  ldr  r2, =_sbss
 8021af0:	20000dc8 	.word	0x20000dc8
  ldr  r3, = _ebss
 8021af4:	20004580 	.word	0x20004580

08021af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021af8:	e7fe      	b.n	8021af8 <ADC_IRQHandler>
	...

08021afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8021afc:	b580      	push	{r7, lr}
 8021afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8021b00:	4b0e      	ldr	r3, [pc, #56]	; (8021b3c <HAL_Init+0x40>)
 8021b02:	681b      	ldr	r3, [r3, #0]
 8021b04:	4a0d      	ldr	r2, [pc, #52]	; (8021b3c <HAL_Init+0x40>)
 8021b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8021b0c:	4b0b      	ldr	r3, [pc, #44]	; (8021b3c <HAL_Init+0x40>)
 8021b0e:	681b      	ldr	r3, [r3, #0]
 8021b10:	4a0a      	ldr	r2, [pc, #40]	; (8021b3c <HAL_Init+0x40>)
 8021b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8021b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8021b18:	4b08      	ldr	r3, [pc, #32]	; (8021b3c <HAL_Init+0x40>)
 8021b1a:	681b      	ldr	r3, [r3, #0]
 8021b1c:	4a07      	ldr	r2, [pc, #28]	; (8021b3c <HAL_Init+0x40>)
 8021b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021b24:	2003      	movs	r0, #3
 8021b26:	f000 fcb6 	bl	8022496 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8021b2a:	2000      	movs	r0, #0
 8021b2c:	f7ff fe12 	bl	8021754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8021b30:	f7ff fa0e 	bl	8020f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8021b34:	2300      	movs	r3, #0
}
 8021b36:	4618      	mov	r0, r3
 8021b38:	bd80      	pop	{r7, pc}
 8021b3a:	bf00      	nop
 8021b3c:	40023c00 	.word	0x40023c00

08021b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8021b40:	b480      	push	{r7}
 8021b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8021b44:	4b06      	ldr	r3, [pc, #24]	; (8021b60 <HAL_IncTick+0x20>)
 8021b46:	781b      	ldrb	r3, [r3, #0]
 8021b48:	461a      	mov	r2, r3
 8021b4a:	4b06      	ldr	r3, [pc, #24]	; (8021b64 <HAL_IncTick+0x24>)
 8021b4c:	681b      	ldr	r3, [r3, #0]
 8021b4e:	4413      	add	r3, r2
 8021b50:	4a04      	ldr	r2, [pc, #16]	; (8021b64 <HAL_IncTick+0x24>)
 8021b52:	6013      	str	r3, [r2, #0]
}
 8021b54:	bf00      	nop
 8021b56:	46bd      	mov	sp, r7
 8021b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b5c:	4770      	bx	lr
 8021b5e:	bf00      	nop
 8021b60:	2000000c 	.word	0x2000000c
 8021b64:	20001264 	.word	0x20001264

08021b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8021b68:	b480      	push	{r7}
 8021b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8021b6c:	4b03      	ldr	r3, [pc, #12]	; (8021b7c <HAL_GetTick+0x14>)
 8021b6e:	681b      	ldr	r3, [r3, #0]
}
 8021b70:	4618      	mov	r0, r3
 8021b72:	46bd      	mov	sp, r7
 8021b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b78:	4770      	bx	lr
 8021b7a:	bf00      	nop
 8021b7c:	20001264 	.word	0x20001264

08021b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8021b80:	b580      	push	{r7, lr}
 8021b82:	b084      	sub	sp, #16
 8021b84:	af00      	add	r7, sp, #0
 8021b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8021b88:	f7ff ffee 	bl	8021b68 <HAL_GetTick>
 8021b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8021b92:	68fb      	ldr	r3, [r7, #12]
 8021b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021b98:	d005      	beq.n	8021ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8021b9a:	4b0a      	ldr	r3, [pc, #40]	; (8021bc4 <HAL_Delay+0x44>)
 8021b9c:	781b      	ldrb	r3, [r3, #0]
 8021b9e:	461a      	mov	r2, r3
 8021ba0:	68fb      	ldr	r3, [r7, #12]
 8021ba2:	4413      	add	r3, r2
 8021ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8021ba6:	bf00      	nop
 8021ba8:	f7ff ffde 	bl	8021b68 <HAL_GetTick>
 8021bac:	4602      	mov	r2, r0
 8021bae:	68bb      	ldr	r3, [r7, #8]
 8021bb0:	1ad3      	subs	r3, r2, r3
 8021bb2:	68fa      	ldr	r2, [r7, #12]
 8021bb4:	429a      	cmp	r2, r3
 8021bb6:	d8f7      	bhi.n	8021ba8 <HAL_Delay+0x28>
  {
  }
}
 8021bb8:	bf00      	nop
 8021bba:	bf00      	nop
 8021bbc:	3710      	adds	r7, #16
 8021bbe:	46bd      	mov	sp, r7
 8021bc0:	bd80      	pop	{r7, pc}
 8021bc2:	bf00      	nop
 8021bc4:	2000000c 	.word	0x2000000c

08021bc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8021bc8:	b580      	push	{r7, lr}
 8021bca:	b084      	sub	sp, #16
 8021bcc:	af00      	add	r7, sp, #0
 8021bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8021bd0:	2300      	movs	r3, #0
 8021bd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8021bd4:	687b      	ldr	r3, [r7, #4]
 8021bd6:	2b00      	cmp	r3, #0
 8021bd8:	d101      	bne.n	8021bde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8021bda:	2301      	movs	r3, #1
 8021bdc:	e033      	b.n	8021c46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8021bde:	687b      	ldr	r3, [r7, #4]
 8021be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021be2:	2b00      	cmp	r3, #0
 8021be4:	d109      	bne.n	8021bfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8021be6:	6878      	ldr	r0, [r7, #4]
 8021be8:	f7ff f9da 	bl	8020fa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	2200      	movs	r2, #0
 8021bf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	2200      	movs	r2, #0
 8021bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8021bfa:	687b      	ldr	r3, [r7, #4]
 8021bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021bfe:	f003 0310 	and.w	r3, r3, #16
 8021c02:	2b00      	cmp	r3, #0
 8021c04:	d118      	bne.n	8021c38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8021c06:	687b      	ldr	r3, [r7, #4]
 8021c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8021c0e:	f023 0302 	bic.w	r3, r3, #2
 8021c12:	f043 0202 	orr.w	r2, r3, #2
 8021c16:	687b      	ldr	r3, [r7, #4]
 8021c18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8021c1a:	6878      	ldr	r0, [r7, #4]
 8021c1c:	f000 fa92 	bl	8022144 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	2200      	movs	r2, #0
 8021c24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8021c26:	687b      	ldr	r3, [r7, #4]
 8021c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c2a:	f023 0303 	bic.w	r3, r3, #3
 8021c2e:	f043 0201 	orr.w	r2, r3, #1
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	641a      	str	r2, [r3, #64]	; 0x40
 8021c36:	e001      	b.n	8021c3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8021c38:	2301      	movs	r3, #1
 8021c3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8021c3c:	687b      	ldr	r3, [r7, #4]
 8021c3e:	2200      	movs	r2, #0
 8021c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8021c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8021c46:	4618      	mov	r0, r3
 8021c48:	3710      	adds	r7, #16
 8021c4a:	46bd      	mov	sp, r7
 8021c4c:	bd80      	pop	{r7, pc}
	...

08021c50 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8021c50:	b480      	push	{r7}
 8021c52:	b085      	sub	sp, #20
 8021c54:	af00      	add	r7, sp, #0
 8021c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8021c58:	2300      	movs	r3, #0
 8021c5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8021c5c:	687b      	ldr	r3, [r7, #4]
 8021c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021c62:	2b01      	cmp	r3, #1
 8021c64:	d101      	bne.n	8021c6a <HAL_ADC_Start+0x1a>
 8021c66:	2302      	movs	r3, #2
 8021c68:	e0a5      	b.n	8021db6 <HAL_ADC_Start+0x166>
 8021c6a:	687b      	ldr	r3, [r7, #4]
 8021c6c:	2201      	movs	r2, #1
 8021c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8021c72:	687b      	ldr	r3, [r7, #4]
 8021c74:	681b      	ldr	r3, [r3, #0]
 8021c76:	689b      	ldr	r3, [r3, #8]
 8021c78:	f003 0301 	and.w	r3, r3, #1
 8021c7c:	2b01      	cmp	r3, #1
 8021c7e:	d018      	beq.n	8021cb2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8021c80:	687b      	ldr	r3, [r7, #4]
 8021c82:	681b      	ldr	r3, [r3, #0]
 8021c84:	689a      	ldr	r2, [r3, #8]
 8021c86:	687b      	ldr	r3, [r7, #4]
 8021c88:	681b      	ldr	r3, [r3, #0]
 8021c8a:	f042 0201 	orr.w	r2, r2, #1
 8021c8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8021c90:	4b4c      	ldr	r3, [pc, #304]	; (8021dc4 <HAL_ADC_Start+0x174>)
 8021c92:	681b      	ldr	r3, [r3, #0]
 8021c94:	4a4c      	ldr	r2, [pc, #304]	; (8021dc8 <HAL_ADC_Start+0x178>)
 8021c96:	fba2 2303 	umull	r2, r3, r2, r3
 8021c9a:	0c9a      	lsrs	r2, r3, #18
 8021c9c:	4613      	mov	r3, r2
 8021c9e:	005b      	lsls	r3, r3, #1
 8021ca0:	4413      	add	r3, r2
 8021ca2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8021ca4:	e002      	b.n	8021cac <HAL_ADC_Start+0x5c>
    {
      counter--;
 8021ca6:	68bb      	ldr	r3, [r7, #8]
 8021ca8:	3b01      	subs	r3, #1
 8021caa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8021cac:	68bb      	ldr	r3, [r7, #8]
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	d1f9      	bne.n	8021ca6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8021cb2:	687b      	ldr	r3, [r7, #4]
 8021cb4:	681b      	ldr	r3, [r3, #0]
 8021cb6:	689b      	ldr	r3, [r3, #8]
 8021cb8:	f003 0301 	and.w	r3, r3, #1
 8021cbc:	2b01      	cmp	r3, #1
 8021cbe:	d179      	bne.n	8021db4 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8021cc0:	687b      	ldr	r3, [r7, #4]
 8021cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021cc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8021cc8:	f023 0301 	bic.w	r3, r3, #1
 8021ccc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8021cd0:	687b      	ldr	r3, [r7, #4]
 8021cd2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	681b      	ldr	r3, [r3, #0]
 8021cd8:	685b      	ldr	r3, [r3, #4]
 8021cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021cde:	2b00      	cmp	r3, #0
 8021ce0:	d007      	beq.n	8021cf2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ce6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8021cea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8021cee:	687b      	ldr	r3, [r7, #4]
 8021cf0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8021cf2:	687b      	ldr	r3, [r7, #4]
 8021cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021cfe:	d106      	bne.n	8021d0e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d04:	f023 0206 	bic.w	r2, r3, #6
 8021d08:	687b      	ldr	r3, [r7, #4]
 8021d0a:	645a      	str	r2, [r3, #68]	; 0x44
 8021d0c:	e002      	b.n	8021d14 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8021d0e:	687b      	ldr	r3, [r7, #4]
 8021d10:	2200      	movs	r2, #0
 8021d12:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8021d14:	687b      	ldr	r3, [r7, #4]
 8021d16:	2200      	movs	r2, #0
 8021d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8021d1c:	4b2b      	ldr	r3, [pc, #172]	; (8021dcc <HAL_ADC_Start+0x17c>)
 8021d1e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8021d20:	687b      	ldr	r3, [r7, #4]
 8021d22:	681b      	ldr	r3, [r3, #0]
 8021d24:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8021d28:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8021d2a:	68fb      	ldr	r3, [r7, #12]
 8021d2c:	685b      	ldr	r3, [r3, #4]
 8021d2e:	f003 031f 	and.w	r3, r3, #31
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d12a      	bne.n	8021d8c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8021d36:	687b      	ldr	r3, [r7, #4]
 8021d38:	681b      	ldr	r3, [r3, #0]
 8021d3a:	4a25      	ldr	r2, [pc, #148]	; (8021dd0 <HAL_ADC_Start+0x180>)
 8021d3c:	4293      	cmp	r3, r2
 8021d3e:	d015      	beq.n	8021d6c <HAL_ADC_Start+0x11c>
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	681b      	ldr	r3, [r3, #0]
 8021d44:	4a23      	ldr	r2, [pc, #140]	; (8021dd4 <HAL_ADC_Start+0x184>)
 8021d46:	4293      	cmp	r3, r2
 8021d48:	d105      	bne.n	8021d56 <HAL_ADC_Start+0x106>
 8021d4a:	4b20      	ldr	r3, [pc, #128]	; (8021dcc <HAL_ADC_Start+0x17c>)
 8021d4c:	685b      	ldr	r3, [r3, #4]
 8021d4e:	f003 031f 	and.w	r3, r3, #31
 8021d52:	2b00      	cmp	r3, #0
 8021d54:	d00a      	beq.n	8021d6c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8021d56:	687b      	ldr	r3, [r7, #4]
 8021d58:	681b      	ldr	r3, [r3, #0]
 8021d5a:	4a1f      	ldr	r2, [pc, #124]	; (8021dd8 <HAL_ADC_Start+0x188>)
 8021d5c:	4293      	cmp	r3, r2
 8021d5e:	d129      	bne.n	8021db4 <HAL_ADC_Start+0x164>
 8021d60:	4b1a      	ldr	r3, [pc, #104]	; (8021dcc <HAL_ADC_Start+0x17c>)
 8021d62:	685b      	ldr	r3, [r3, #4]
 8021d64:	f003 0310 	and.w	r3, r3, #16
 8021d68:	2b00      	cmp	r3, #0
 8021d6a:	d123      	bne.n	8021db4 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	681b      	ldr	r3, [r3, #0]
 8021d70:	689b      	ldr	r3, [r3, #8]
 8021d72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8021d76:	2b00      	cmp	r3, #0
 8021d78:	d11c      	bne.n	8021db4 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8021d7a:	687b      	ldr	r3, [r7, #4]
 8021d7c:	681b      	ldr	r3, [r3, #0]
 8021d7e:	689a      	ldr	r2, [r3, #8]
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	681b      	ldr	r3, [r3, #0]
 8021d84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8021d88:	609a      	str	r2, [r3, #8]
 8021d8a:	e013      	b.n	8021db4 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8021d8c:	687b      	ldr	r3, [r7, #4]
 8021d8e:	681b      	ldr	r3, [r3, #0]
 8021d90:	4a0f      	ldr	r2, [pc, #60]	; (8021dd0 <HAL_ADC_Start+0x180>)
 8021d92:	4293      	cmp	r3, r2
 8021d94:	d10e      	bne.n	8021db4 <HAL_ADC_Start+0x164>
 8021d96:	687b      	ldr	r3, [r7, #4]
 8021d98:	681b      	ldr	r3, [r3, #0]
 8021d9a:	689b      	ldr	r3, [r3, #8]
 8021d9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8021da0:	2b00      	cmp	r3, #0
 8021da2:	d107      	bne.n	8021db4 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	681b      	ldr	r3, [r3, #0]
 8021da8:	689a      	ldr	r2, [r3, #8]
 8021daa:	687b      	ldr	r3, [r7, #4]
 8021dac:	681b      	ldr	r3, [r3, #0]
 8021dae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8021db2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8021db4:	2300      	movs	r3, #0
}
 8021db6:	4618      	mov	r0, r3
 8021db8:	3714      	adds	r7, #20
 8021dba:	46bd      	mov	sp, r7
 8021dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dc0:	4770      	bx	lr
 8021dc2:	bf00      	nop
 8021dc4:	20000004 	.word	0x20000004
 8021dc8:	431bde83 	.word	0x431bde83
 8021dcc:	40012300 	.word	0x40012300
 8021dd0:	40012000 	.word	0x40012000
 8021dd4:	40012100 	.word	0x40012100
 8021dd8:	40012200 	.word	0x40012200

08021ddc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8021ddc:	b580      	push	{r7, lr}
 8021dde:	b084      	sub	sp, #16
 8021de0:	af00      	add	r7, sp, #0
 8021de2:	6078      	str	r0, [r7, #4]
 8021de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8021de6:	2300      	movs	r3, #0
 8021de8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8021dea:	687b      	ldr	r3, [r7, #4]
 8021dec:	681b      	ldr	r3, [r3, #0]
 8021dee:	689b      	ldr	r3, [r3, #8]
 8021df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021df8:	d113      	bne.n	8021e22 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8021dfa:	687b      	ldr	r3, [r7, #4]
 8021dfc:	681b      	ldr	r3, [r3, #0]
 8021dfe:	689b      	ldr	r3, [r3, #8]
 8021e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8021e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021e08:	d10b      	bne.n	8021e22 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8021e0a:	687b      	ldr	r3, [r7, #4]
 8021e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021e0e:	f043 0220 	orr.w	r2, r3, #32
 8021e12:	687b      	ldr	r3, [r7, #4]
 8021e14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8021e16:	687b      	ldr	r3, [r7, #4]
 8021e18:	2200      	movs	r2, #0
 8021e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8021e1e:	2301      	movs	r3, #1
 8021e20:	e05c      	b.n	8021edc <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8021e22:	f7ff fea1 	bl	8021b68 <HAL_GetTick>
 8021e26:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8021e28:	e01a      	b.n	8021e60 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8021e2a:	683b      	ldr	r3, [r7, #0]
 8021e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021e30:	d016      	beq.n	8021e60 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8021e32:	683b      	ldr	r3, [r7, #0]
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	d007      	beq.n	8021e48 <HAL_ADC_PollForConversion+0x6c>
 8021e38:	f7ff fe96 	bl	8021b68 <HAL_GetTick>
 8021e3c:	4602      	mov	r2, r0
 8021e3e:	68fb      	ldr	r3, [r7, #12]
 8021e40:	1ad3      	subs	r3, r2, r3
 8021e42:	683a      	ldr	r2, [r7, #0]
 8021e44:	429a      	cmp	r2, r3
 8021e46:	d20b      	bcs.n	8021e60 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8021e48:	687b      	ldr	r3, [r7, #4]
 8021e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021e4c:	f043 0204 	orr.w	r2, r3, #4
 8021e50:	687b      	ldr	r3, [r7, #4]
 8021e52:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8021e54:	687b      	ldr	r3, [r7, #4]
 8021e56:	2200      	movs	r2, #0
 8021e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8021e5c:	2303      	movs	r3, #3
 8021e5e:	e03d      	b.n	8021edc <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	681b      	ldr	r3, [r3, #0]
 8021e64:	681b      	ldr	r3, [r3, #0]
 8021e66:	f003 0302 	and.w	r3, r3, #2
 8021e6a:	2b02      	cmp	r3, #2
 8021e6c:	d1dd      	bne.n	8021e2a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	681b      	ldr	r3, [r3, #0]
 8021e72:	f06f 0212 	mvn.w	r2, #18
 8021e76:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8021e78:	687b      	ldr	r3, [r7, #4]
 8021e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021e7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8021e84:	687b      	ldr	r3, [r7, #4]
 8021e86:	681b      	ldr	r3, [r3, #0]
 8021e88:	689b      	ldr	r3, [r3, #8]
 8021e8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	d123      	bne.n	8021eda <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8021e96:	2b00      	cmp	r3, #0
 8021e98:	d11f      	bne.n	8021eda <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ea0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	d006      	beq.n	8021eb6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8021ea8:	687b      	ldr	r3, [r7, #4]
 8021eaa:	681b      	ldr	r3, [r3, #0]
 8021eac:	689b      	ldr	r3, [r3, #8]
 8021eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8021eb2:	2b00      	cmp	r3, #0
 8021eb4:	d111      	bne.n	8021eda <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021eba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8021ec2:	687b      	ldr	r3, [r7, #4]
 8021ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	d105      	bne.n	8021eda <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8021ece:	687b      	ldr	r3, [r7, #4]
 8021ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ed2:	f043 0201 	orr.w	r2, r3, #1
 8021ed6:	687b      	ldr	r3, [r7, #4]
 8021ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8021eda:	2300      	movs	r3, #0
}
 8021edc:	4618      	mov	r0, r3
 8021ede:	3710      	adds	r7, #16
 8021ee0:	46bd      	mov	sp, r7
 8021ee2:	bd80      	pop	{r7, pc}

08021ee4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8021ee4:	b480      	push	{r7}
 8021ee6:	b083      	sub	sp, #12
 8021ee8:	af00      	add	r7, sp, #0
 8021eea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8021eec:	687b      	ldr	r3, [r7, #4]
 8021eee:	681b      	ldr	r3, [r3, #0]
 8021ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8021ef2:	4618      	mov	r0, r3
 8021ef4:	370c      	adds	r7, #12
 8021ef6:	46bd      	mov	sp, r7
 8021ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021efc:	4770      	bx	lr
	...

08021f00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8021f00:	b480      	push	{r7}
 8021f02:	b085      	sub	sp, #20
 8021f04:	af00      	add	r7, sp, #0
 8021f06:	6078      	str	r0, [r7, #4]
 8021f08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8021f0a:	2300      	movs	r3, #0
 8021f0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8021f0e:	687b      	ldr	r3, [r7, #4]
 8021f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021f14:	2b01      	cmp	r3, #1
 8021f16:	d101      	bne.n	8021f1c <HAL_ADC_ConfigChannel+0x1c>
 8021f18:	2302      	movs	r3, #2
 8021f1a:	e105      	b.n	8022128 <HAL_ADC_ConfigChannel+0x228>
 8021f1c:	687b      	ldr	r3, [r7, #4]
 8021f1e:	2201      	movs	r2, #1
 8021f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8021f24:	683b      	ldr	r3, [r7, #0]
 8021f26:	681b      	ldr	r3, [r3, #0]
 8021f28:	2b09      	cmp	r3, #9
 8021f2a:	d925      	bls.n	8021f78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	681b      	ldr	r3, [r3, #0]
 8021f30:	68d9      	ldr	r1, [r3, #12]
 8021f32:	683b      	ldr	r3, [r7, #0]
 8021f34:	681b      	ldr	r3, [r3, #0]
 8021f36:	b29b      	uxth	r3, r3
 8021f38:	461a      	mov	r2, r3
 8021f3a:	4613      	mov	r3, r2
 8021f3c:	005b      	lsls	r3, r3, #1
 8021f3e:	4413      	add	r3, r2
 8021f40:	3b1e      	subs	r3, #30
 8021f42:	2207      	movs	r2, #7
 8021f44:	fa02 f303 	lsl.w	r3, r2, r3
 8021f48:	43da      	mvns	r2, r3
 8021f4a:	687b      	ldr	r3, [r7, #4]
 8021f4c:	681b      	ldr	r3, [r3, #0]
 8021f4e:	400a      	ands	r2, r1
 8021f50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8021f52:	687b      	ldr	r3, [r7, #4]
 8021f54:	681b      	ldr	r3, [r3, #0]
 8021f56:	68d9      	ldr	r1, [r3, #12]
 8021f58:	683b      	ldr	r3, [r7, #0]
 8021f5a:	689a      	ldr	r2, [r3, #8]
 8021f5c:	683b      	ldr	r3, [r7, #0]
 8021f5e:	681b      	ldr	r3, [r3, #0]
 8021f60:	b29b      	uxth	r3, r3
 8021f62:	4618      	mov	r0, r3
 8021f64:	4603      	mov	r3, r0
 8021f66:	005b      	lsls	r3, r3, #1
 8021f68:	4403      	add	r3, r0
 8021f6a:	3b1e      	subs	r3, #30
 8021f6c:	409a      	lsls	r2, r3
 8021f6e:	687b      	ldr	r3, [r7, #4]
 8021f70:	681b      	ldr	r3, [r3, #0]
 8021f72:	430a      	orrs	r2, r1
 8021f74:	60da      	str	r2, [r3, #12]
 8021f76:	e022      	b.n	8021fbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	681b      	ldr	r3, [r3, #0]
 8021f7c:	6919      	ldr	r1, [r3, #16]
 8021f7e:	683b      	ldr	r3, [r7, #0]
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	b29b      	uxth	r3, r3
 8021f84:	461a      	mov	r2, r3
 8021f86:	4613      	mov	r3, r2
 8021f88:	005b      	lsls	r3, r3, #1
 8021f8a:	4413      	add	r3, r2
 8021f8c:	2207      	movs	r2, #7
 8021f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8021f92:	43da      	mvns	r2, r3
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	681b      	ldr	r3, [r3, #0]
 8021f98:	400a      	ands	r2, r1
 8021f9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8021f9c:	687b      	ldr	r3, [r7, #4]
 8021f9e:	681b      	ldr	r3, [r3, #0]
 8021fa0:	6919      	ldr	r1, [r3, #16]
 8021fa2:	683b      	ldr	r3, [r7, #0]
 8021fa4:	689a      	ldr	r2, [r3, #8]
 8021fa6:	683b      	ldr	r3, [r7, #0]
 8021fa8:	681b      	ldr	r3, [r3, #0]
 8021faa:	b29b      	uxth	r3, r3
 8021fac:	4618      	mov	r0, r3
 8021fae:	4603      	mov	r3, r0
 8021fb0:	005b      	lsls	r3, r3, #1
 8021fb2:	4403      	add	r3, r0
 8021fb4:	409a      	lsls	r2, r3
 8021fb6:	687b      	ldr	r3, [r7, #4]
 8021fb8:	681b      	ldr	r3, [r3, #0]
 8021fba:	430a      	orrs	r2, r1
 8021fbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8021fbe:	683b      	ldr	r3, [r7, #0]
 8021fc0:	685b      	ldr	r3, [r3, #4]
 8021fc2:	2b06      	cmp	r3, #6
 8021fc4:	d824      	bhi.n	8022010 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8021fc6:	687b      	ldr	r3, [r7, #4]
 8021fc8:	681b      	ldr	r3, [r3, #0]
 8021fca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8021fcc:	683b      	ldr	r3, [r7, #0]
 8021fce:	685a      	ldr	r2, [r3, #4]
 8021fd0:	4613      	mov	r3, r2
 8021fd2:	009b      	lsls	r3, r3, #2
 8021fd4:	4413      	add	r3, r2
 8021fd6:	3b05      	subs	r3, #5
 8021fd8:	221f      	movs	r2, #31
 8021fda:	fa02 f303 	lsl.w	r3, r2, r3
 8021fde:	43da      	mvns	r2, r3
 8021fe0:	687b      	ldr	r3, [r7, #4]
 8021fe2:	681b      	ldr	r3, [r3, #0]
 8021fe4:	400a      	ands	r2, r1
 8021fe6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	681b      	ldr	r3, [r3, #0]
 8021fec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8021fee:	683b      	ldr	r3, [r7, #0]
 8021ff0:	681b      	ldr	r3, [r3, #0]
 8021ff2:	b29b      	uxth	r3, r3
 8021ff4:	4618      	mov	r0, r3
 8021ff6:	683b      	ldr	r3, [r7, #0]
 8021ff8:	685a      	ldr	r2, [r3, #4]
 8021ffa:	4613      	mov	r3, r2
 8021ffc:	009b      	lsls	r3, r3, #2
 8021ffe:	4413      	add	r3, r2
 8022000:	3b05      	subs	r3, #5
 8022002:	fa00 f203 	lsl.w	r2, r0, r3
 8022006:	687b      	ldr	r3, [r7, #4]
 8022008:	681b      	ldr	r3, [r3, #0]
 802200a:	430a      	orrs	r2, r1
 802200c:	635a      	str	r2, [r3, #52]	; 0x34
 802200e:	e04c      	b.n	80220aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8022010:	683b      	ldr	r3, [r7, #0]
 8022012:	685b      	ldr	r3, [r3, #4]
 8022014:	2b0c      	cmp	r3, #12
 8022016:	d824      	bhi.n	8022062 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8022018:	687b      	ldr	r3, [r7, #4]
 802201a:	681b      	ldr	r3, [r3, #0]
 802201c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802201e:	683b      	ldr	r3, [r7, #0]
 8022020:	685a      	ldr	r2, [r3, #4]
 8022022:	4613      	mov	r3, r2
 8022024:	009b      	lsls	r3, r3, #2
 8022026:	4413      	add	r3, r2
 8022028:	3b23      	subs	r3, #35	; 0x23
 802202a:	221f      	movs	r2, #31
 802202c:	fa02 f303 	lsl.w	r3, r2, r3
 8022030:	43da      	mvns	r2, r3
 8022032:	687b      	ldr	r3, [r7, #4]
 8022034:	681b      	ldr	r3, [r3, #0]
 8022036:	400a      	ands	r2, r1
 8022038:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	681b      	ldr	r3, [r3, #0]
 802203e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8022040:	683b      	ldr	r3, [r7, #0]
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	b29b      	uxth	r3, r3
 8022046:	4618      	mov	r0, r3
 8022048:	683b      	ldr	r3, [r7, #0]
 802204a:	685a      	ldr	r2, [r3, #4]
 802204c:	4613      	mov	r3, r2
 802204e:	009b      	lsls	r3, r3, #2
 8022050:	4413      	add	r3, r2
 8022052:	3b23      	subs	r3, #35	; 0x23
 8022054:	fa00 f203 	lsl.w	r2, r0, r3
 8022058:	687b      	ldr	r3, [r7, #4]
 802205a:	681b      	ldr	r3, [r3, #0]
 802205c:	430a      	orrs	r2, r1
 802205e:	631a      	str	r2, [r3, #48]	; 0x30
 8022060:	e023      	b.n	80220aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8022062:	687b      	ldr	r3, [r7, #4]
 8022064:	681b      	ldr	r3, [r3, #0]
 8022066:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8022068:	683b      	ldr	r3, [r7, #0]
 802206a:	685a      	ldr	r2, [r3, #4]
 802206c:	4613      	mov	r3, r2
 802206e:	009b      	lsls	r3, r3, #2
 8022070:	4413      	add	r3, r2
 8022072:	3b41      	subs	r3, #65	; 0x41
 8022074:	221f      	movs	r2, #31
 8022076:	fa02 f303 	lsl.w	r3, r2, r3
 802207a:	43da      	mvns	r2, r3
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	681b      	ldr	r3, [r3, #0]
 8022080:	400a      	ands	r2, r1
 8022082:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8022084:	687b      	ldr	r3, [r7, #4]
 8022086:	681b      	ldr	r3, [r3, #0]
 8022088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802208a:	683b      	ldr	r3, [r7, #0]
 802208c:	681b      	ldr	r3, [r3, #0]
 802208e:	b29b      	uxth	r3, r3
 8022090:	4618      	mov	r0, r3
 8022092:	683b      	ldr	r3, [r7, #0]
 8022094:	685a      	ldr	r2, [r3, #4]
 8022096:	4613      	mov	r3, r2
 8022098:	009b      	lsls	r3, r3, #2
 802209a:	4413      	add	r3, r2
 802209c:	3b41      	subs	r3, #65	; 0x41
 802209e:	fa00 f203 	lsl.w	r2, r0, r3
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	681b      	ldr	r3, [r3, #0]
 80220a6:	430a      	orrs	r2, r1
 80220a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80220aa:	4b22      	ldr	r3, [pc, #136]	; (8022134 <HAL_ADC_ConfigChannel+0x234>)
 80220ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80220ae:	687b      	ldr	r3, [r7, #4]
 80220b0:	681b      	ldr	r3, [r3, #0]
 80220b2:	4a21      	ldr	r2, [pc, #132]	; (8022138 <HAL_ADC_ConfigChannel+0x238>)
 80220b4:	4293      	cmp	r3, r2
 80220b6:	d109      	bne.n	80220cc <HAL_ADC_ConfigChannel+0x1cc>
 80220b8:	683b      	ldr	r3, [r7, #0]
 80220ba:	681b      	ldr	r3, [r3, #0]
 80220bc:	2b12      	cmp	r3, #18
 80220be:	d105      	bne.n	80220cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80220c0:	68fb      	ldr	r3, [r7, #12]
 80220c2:	685b      	ldr	r3, [r3, #4]
 80220c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80220c8:	68fb      	ldr	r3, [r7, #12]
 80220ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	681b      	ldr	r3, [r3, #0]
 80220d0:	4a19      	ldr	r2, [pc, #100]	; (8022138 <HAL_ADC_ConfigChannel+0x238>)
 80220d2:	4293      	cmp	r3, r2
 80220d4:	d123      	bne.n	802211e <HAL_ADC_ConfigChannel+0x21e>
 80220d6:	683b      	ldr	r3, [r7, #0]
 80220d8:	681b      	ldr	r3, [r3, #0]
 80220da:	2b10      	cmp	r3, #16
 80220dc:	d003      	beq.n	80220e6 <HAL_ADC_ConfigChannel+0x1e6>
 80220de:	683b      	ldr	r3, [r7, #0]
 80220e0:	681b      	ldr	r3, [r3, #0]
 80220e2:	2b11      	cmp	r3, #17
 80220e4:	d11b      	bne.n	802211e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80220e6:	68fb      	ldr	r3, [r7, #12]
 80220e8:	685b      	ldr	r3, [r3, #4]
 80220ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80220ee:	68fb      	ldr	r3, [r7, #12]
 80220f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80220f2:	683b      	ldr	r3, [r7, #0]
 80220f4:	681b      	ldr	r3, [r3, #0]
 80220f6:	2b10      	cmp	r3, #16
 80220f8:	d111      	bne.n	802211e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80220fa:	4b10      	ldr	r3, [pc, #64]	; (802213c <HAL_ADC_ConfigChannel+0x23c>)
 80220fc:	681b      	ldr	r3, [r3, #0]
 80220fe:	4a10      	ldr	r2, [pc, #64]	; (8022140 <HAL_ADC_ConfigChannel+0x240>)
 8022100:	fba2 2303 	umull	r2, r3, r2, r3
 8022104:	0c9a      	lsrs	r2, r3, #18
 8022106:	4613      	mov	r3, r2
 8022108:	009b      	lsls	r3, r3, #2
 802210a:	4413      	add	r3, r2
 802210c:	005b      	lsls	r3, r3, #1
 802210e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8022110:	e002      	b.n	8022118 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8022112:	68bb      	ldr	r3, [r7, #8]
 8022114:	3b01      	subs	r3, #1
 8022116:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8022118:	68bb      	ldr	r3, [r7, #8]
 802211a:	2b00      	cmp	r3, #0
 802211c:	d1f9      	bne.n	8022112 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 802211e:	687b      	ldr	r3, [r7, #4]
 8022120:	2200      	movs	r2, #0
 8022122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8022126:	2300      	movs	r3, #0
}
 8022128:	4618      	mov	r0, r3
 802212a:	3714      	adds	r7, #20
 802212c:	46bd      	mov	sp, r7
 802212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022132:	4770      	bx	lr
 8022134:	40012300 	.word	0x40012300
 8022138:	40012000 	.word	0x40012000
 802213c:	20000004 	.word	0x20000004
 8022140:	431bde83 	.word	0x431bde83

08022144 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8022144:	b480      	push	{r7}
 8022146:	b085      	sub	sp, #20
 8022148:	af00      	add	r7, sp, #0
 802214a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802214c:	4b79      	ldr	r3, [pc, #484]	; (8022334 <ADC_Init+0x1f0>)
 802214e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8022150:	68fb      	ldr	r3, [r7, #12]
 8022152:	685b      	ldr	r3, [r3, #4]
 8022154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8022158:	68fb      	ldr	r3, [r7, #12]
 802215a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 802215c:	68fb      	ldr	r3, [r7, #12]
 802215e:	685a      	ldr	r2, [r3, #4]
 8022160:	687b      	ldr	r3, [r7, #4]
 8022162:	685b      	ldr	r3, [r3, #4]
 8022164:	431a      	orrs	r2, r3
 8022166:	68fb      	ldr	r3, [r7, #12]
 8022168:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 802216a:	687b      	ldr	r3, [r7, #4]
 802216c:	681b      	ldr	r3, [r3, #0]
 802216e:	685a      	ldr	r2, [r3, #4]
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	681b      	ldr	r3, [r3, #0]
 8022174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	681b      	ldr	r3, [r3, #0]
 802217e:	6859      	ldr	r1, [r3, #4]
 8022180:	687b      	ldr	r3, [r7, #4]
 8022182:	691b      	ldr	r3, [r3, #16]
 8022184:	021a      	lsls	r2, r3, #8
 8022186:	687b      	ldr	r3, [r7, #4]
 8022188:	681b      	ldr	r3, [r3, #0]
 802218a:	430a      	orrs	r2, r1
 802218c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 802218e:	687b      	ldr	r3, [r7, #4]
 8022190:	681b      	ldr	r3, [r3, #0]
 8022192:	685a      	ldr	r2, [r3, #4]
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	681b      	ldr	r3, [r3, #0]
 8022198:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 802219c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	681b      	ldr	r3, [r3, #0]
 80221a2:	6859      	ldr	r1, [r3, #4]
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	689a      	ldr	r2, [r3, #8]
 80221a8:	687b      	ldr	r3, [r7, #4]
 80221aa:	681b      	ldr	r3, [r3, #0]
 80221ac:	430a      	orrs	r2, r1
 80221ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	681b      	ldr	r3, [r3, #0]
 80221b4:	689a      	ldr	r2, [r3, #8]
 80221b6:	687b      	ldr	r3, [r7, #4]
 80221b8:	681b      	ldr	r3, [r3, #0]
 80221ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80221be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80221c0:	687b      	ldr	r3, [r7, #4]
 80221c2:	681b      	ldr	r3, [r3, #0]
 80221c4:	6899      	ldr	r1, [r3, #8]
 80221c6:	687b      	ldr	r3, [r7, #4]
 80221c8:	68da      	ldr	r2, [r3, #12]
 80221ca:	687b      	ldr	r3, [r7, #4]
 80221cc:	681b      	ldr	r3, [r3, #0]
 80221ce:	430a      	orrs	r2, r1
 80221d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80221d2:	687b      	ldr	r3, [r7, #4]
 80221d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221d6:	4a58      	ldr	r2, [pc, #352]	; (8022338 <ADC_Init+0x1f4>)
 80221d8:	4293      	cmp	r3, r2
 80221da:	d022      	beq.n	8022222 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80221dc:	687b      	ldr	r3, [r7, #4]
 80221de:	681b      	ldr	r3, [r3, #0]
 80221e0:	689a      	ldr	r2, [r3, #8]
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	681b      	ldr	r3, [r3, #0]
 80221e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80221ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	681b      	ldr	r3, [r3, #0]
 80221f0:	6899      	ldr	r1, [r3, #8]
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80221f6:	687b      	ldr	r3, [r7, #4]
 80221f8:	681b      	ldr	r3, [r3, #0]
 80221fa:	430a      	orrs	r2, r1
 80221fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	681b      	ldr	r3, [r3, #0]
 8022202:	689a      	ldr	r2, [r3, #8]
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	681b      	ldr	r3, [r3, #0]
 8022208:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802220c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	681b      	ldr	r3, [r3, #0]
 8022212:	6899      	ldr	r1, [r3, #8]
 8022214:	687b      	ldr	r3, [r7, #4]
 8022216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022218:	687b      	ldr	r3, [r7, #4]
 802221a:	681b      	ldr	r3, [r3, #0]
 802221c:	430a      	orrs	r2, r1
 802221e:	609a      	str	r2, [r3, #8]
 8022220:	e00f      	b.n	8022242 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	681b      	ldr	r3, [r3, #0]
 8022226:	689a      	ldr	r2, [r3, #8]
 8022228:	687b      	ldr	r3, [r7, #4]
 802222a:	681b      	ldr	r3, [r3, #0]
 802222c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8022230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	681b      	ldr	r3, [r3, #0]
 8022236:	689a      	ldr	r2, [r3, #8]
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	681b      	ldr	r3, [r3, #0]
 802223c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8022240:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8022242:	687b      	ldr	r3, [r7, #4]
 8022244:	681b      	ldr	r3, [r3, #0]
 8022246:	689a      	ldr	r2, [r3, #8]
 8022248:	687b      	ldr	r3, [r7, #4]
 802224a:	681b      	ldr	r3, [r3, #0]
 802224c:	f022 0202 	bic.w	r2, r2, #2
 8022250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	6899      	ldr	r1, [r3, #8]
 8022258:	687b      	ldr	r3, [r7, #4]
 802225a:	7e1b      	ldrb	r3, [r3, #24]
 802225c:	005a      	lsls	r2, r3, #1
 802225e:	687b      	ldr	r3, [r7, #4]
 8022260:	681b      	ldr	r3, [r3, #0]
 8022262:	430a      	orrs	r2, r1
 8022264:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	f893 3020 	ldrb.w	r3, [r3, #32]
 802226c:	2b00      	cmp	r3, #0
 802226e:	d01b      	beq.n	80222a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8022270:	687b      	ldr	r3, [r7, #4]
 8022272:	681b      	ldr	r3, [r3, #0]
 8022274:	685a      	ldr	r2, [r3, #4]
 8022276:	687b      	ldr	r3, [r7, #4]
 8022278:	681b      	ldr	r3, [r3, #0]
 802227a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802227e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8022280:	687b      	ldr	r3, [r7, #4]
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	685a      	ldr	r2, [r3, #4]
 8022286:	687b      	ldr	r3, [r7, #4]
 8022288:	681b      	ldr	r3, [r3, #0]
 802228a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 802228e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8022290:	687b      	ldr	r3, [r7, #4]
 8022292:	681b      	ldr	r3, [r3, #0]
 8022294:	6859      	ldr	r1, [r3, #4]
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802229a:	3b01      	subs	r3, #1
 802229c:	035a      	lsls	r2, r3, #13
 802229e:	687b      	ldr	r3, [r7, #4]
 80222a0:	681b      	ldr	r3, [r3, #0]
 80222a2:	430a      	orrs	r2, r1
 80222a4:	605a      	str	r2, [r3, #4]
 80222a6:	e007      	b.n	80222b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80222a8:	687b      	ldr	r3, [r7, #4]
 80222aa:	681b      	ldr	r3, [r3, #0]
 80222ac:	685a      	ldr	r2, [r3, #4]
 80222ae:	687b      	ldr	r3, [r7, #4]
 80222b0:	681b      	ldr	r3, [r3, #0]
 80222b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80222b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	681b      	ldr	r3, [r3, #0]
 80222bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80222be:	687b      	ldr	r3, [r7, #4]
 80222c0:	681b      	ldr	r3, [r3, #0]
 80222c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80222c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80222c8:	687b      	ldr	r3, [r7, #4]
 80222ca:	681b      	ldr	r3, [r3, #0]
 80222cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	69db      	ldr	r3, [r3, #28]
 80222d2:	3b01      	subs	r3, #1
 80222d4:	051a      	lsls	r2, r3, #20
 80222d6:	687b      	ldr	r3, [r7, #4]
 80222d8:	681b      	ldr	r3, [r3, #0]
 80222da:	430a      	orrs	r2, r1
 80222dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	681b      	ldr	r3, [r3, #0]
 80222e2:	689a      	ldr	r2, [r3, #8]
 80222e4:	687b      	ldr	r3, [r7, #4]
 80222e6:	681b      	ldr	r3, [r3, #0]
 80222e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80222ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	681b      	ldr	r3, [r3, #0]
 80222f2:	6899      	ldr	r1, [r3, #8]
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80222fa:	025a      	lsls	r2, r3, #9
 80222fc:	687b      	ldr	r3, [r7, #4]
 80222fe:	681b      	ldr	r3, [r3, #0]
 8022300:	430a      	orrs	r2, r1
 8022302:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8022304:	687b      	ldr	r3, [r7, #4]
 8022306:	681b      	ldr	r3, [r3, #0]
 8022308:	689a      	ldr	r2, [r3, #8]
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	681b      	ldr	r3, [r3, #0]
 802230e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8022312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8022314:	687b      	ldr	r3, [r7, #4]
 8022316:	681b      	ldr	r3, [r3, #0]
 8022318:	6899      	ldr	r1, [r3, #8]
 802231a:	687b      	ldr	r3, [r7, #4]
 802231c:	695b      	ldr	r3, [r3, #20]
 802231e:	029a      	lsls	r2, r3, #10
 8022320:	687b      	ldr	r3, [r7, #4]
 8022322:	681b      	ldr	r3, [r3, #0]
 8022324:	430a      	orrs	r2, r1
 8022326:	609a      	str	r2, [r3, #8]
}
 8022328:	bf00      	nop
 802232a:	3714      	adds	r7, #20
 802232c:	46bd      	mov	sp, r7
 802232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022332:	4770      	bx	lr
 8022334:	40012300 	.word	0x40012300
 8022338:	0f000001 	.word	0x0f000001

0802233c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802233c:	b480      	push	{r7}
 802233e:	b085      	sub	sp, #20
 8022340:	af00      	add	r7, sp, #0
 8022342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8022344:	687b      	ldr	r3, [r7, #4]
 8022346:	f003 0307 	and.w	r3, r3, #7
 802234a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802234c:	4b0c      	ldr	r3, [pc, #48]	; (8022380 <__NVIC_SetPriorityGrouping+0x44>)
 802234e:	68db      	ldr	r3, [r3, #12]
 8022350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8022352:	68ba      	ldr	r2, [r7, #8]
 8022354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8022358:	4013      	ands	r3, r2
 802235a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802235c:	68fb      	ldr	r3, [r7, #12]
 802235e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8022360:	68bb      	ldr	r3, [r7, #8]
 8022362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8022364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8022368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802236c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802236e:	4a04      	ldr	r2, [pc, #16]	; (8022380 <__NVIC_SetPriorityGrouping+0x44>)
 8022370:	68bb      	ldr	r3, [r7, #8]
 8022372:	60d3      	str	r3, [r2, #12]
}
 8022374:	bf00      	nop
 8022376:	3714      	adds	r7, #20
 8022378:	46bd      	mov	sp, r7
 802237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802237e:	4770      	bx	lr
 8022380:	e000ed00 	.word	0xe000ed00

08022384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8022384:	b480      	push	{r7}
 8022386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022388:	4b04      	ldr	r3, [pc, #16]	; (802239c <__NVIC_GetPriorityGrouping+0x18>)
 802238a:	68db      	ldr	r3, [r3, #12]
 802238c:	0a1b      	lsrs	r3, r3, #8
 802238e:	f003 0307 	and.w	r3, r3, #7
}
 8022392:	4618      	mov	r0, r3
 8022394:	46bd      	mov	sp, r7
 8022396:	f85d 7b04 	ldr.w	r7, [sp], #4
 802239a:	4770      	bx	lr
 802239c:	e000ed00 	.word	0xe000ed00

080223a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80223a0:	b480      	push	{r7}
 80223a2:	b083      	sub	sp, #12
 80223a4:	af00      	add	r7, sp, #0
 80223a6:	4603      	mov	r3, r0
 80223a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80223aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80223ae:	2b00      	cmp	r3, #0
 80223b0:	db0b      	blt.n	80223ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80223b2:	79fb      	ldrb	r3, [r7, #7]
 80223b4:	f003 021f 	and.w	r2, r3, #31
 80223b8:	4907      	ldr	r1, [pc, #28]	; (80223d8 <__NVIC_EnableIRQ+0x38>)
 80223ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80223be:	095b      	lsrs	r3, r3, #5
 80223c0:	2001      	movs	r0, #1
 80223c2:	fa00 f202 	lsl.w	r2, r0, r2
 80223c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80223ca:	bf00      	nop
 80223cc:	370c      	adds	r7, #12
 80223ce:	46bd      	mov	sp, r7
 80223d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223d4:	4770      	bx	lr
 80223d6:	bf00      	nop
 80223d8:	e000e100 	.word	0xe000e100

080223dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80223dc:	b480      	push	{r7}
 80223de:	b083      	sub	sp, #12
 80223e0:	af00      	add	r7, sp, #0
 80223e2:	4603      	mov	r3, r0
 80223e4:	6039      	str	r1, [r7, #0]
 80223e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80223e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80223ec:	2b00      	cmp	r3, #0
 80223ee:	db0a      	blt.n	8022406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80223f0:	683b      	ldr	r3, [r7, #0]
 80223f2:	b2da      	uxtb	r2, r3
 80223f4:	490c      	ldr	r1, [pc, #48]	; (8022428 <__NVIC_SetPriority+0x4c>)
 80223f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80223fa:	0112      	lsls	r2, r2, #4
 80223fc:	b2d2      	uxtb	r2, r2
 80223fe:	440b      	add	r3, r1
 8022400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8022404:	e00a      	b.n	802241c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022406:	683b      	ldr	r3, [r7, #0]
 8022408:	b2da      	uxtb	r2, r3
 802240a:	4908      	ldr	r1, [pc, #32]	; (802242c <__NVIC_SetPriority+0x50>)
 802240c:	79fb      	ldrb	r3, [r7, #7]
 802240e:	f003 030f 	and.w	r3, r3, #15
 8022412:	3b04      	subs	r3, #4
 8022414:	0112      	lsls	r2, r2, #4
 8022416:	b2d2      	uxtb	r2, r2
 8022418:	440b      	add	r3, r1
 802241a:	761a      	strb	r2, [r3, #24]
}
 802241c:	bf00      	nop
 802241e:	370c      	adds	r7, #12
 8022420:	46bd      	mov	sp, r7
 8022422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022426:	4770      	bx	lr
 8022428:	e000e100 	.word	0xe000e100
 802242c:	e000ed00 	.word	0xe000ed00

08022430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8022430:	b480      	push	{r7}
 8022432:	b089      	sub	sp, #36	; 0x24
 8022434:	af00      	add	r7, sp, #0
 8022436:	60f8      	str	r0, [r7, #12]
 8022438:	60b9      	str	r1, [r7, #8]
 802243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802243c:	68fb      	ldr	r3, [r7, #12]
 802243e:	f003 0307 	and.w	r3, r3, #7
 8022442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022444:	69fb      	ldr	r3, [r7, #28]
 8022446:	f1c3 0307 	rsb	r3, r3, #7
 802244a:	2b04      	cmp	r3, #4
 802244c:	bf28      	it	cs
 802244e:	2304      	movcs	r3, #4
 8022450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022452:	69fb      	ldr	r3, [r7, #28]
 8022454:	3304      	adds	r3, #4
 8022456:	2b06      	cmp	r3, #6
 8022458:	d902      	bls.n	8022460 <NVIC_EncodePriority+0x30>
 802245a:	69fb      	ldr	r3, [r7, #28]
 802245c:	3b03      	subs	r3, #3
 802245e:	e000      	b.n	8022462 <NVIC_EncodePriority+0x32>
 8022460:	2300      	movs	r3, #0
 8022462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022464:	f04f 32ff 	mov.w	r2, #4294967295
 8022468:	69bb      	ldr	r3, [r7, #24]
 802246a:	fa02 f303 	lsl.w	r3, r2, r3
 802246e:	43da      	mvns	r2, r3
 8022470:	68bb      	ldr	r3, [r7, #8]
 8022472:	401a      	ands	r2, r3
 8022474:	697b      	ldr	r3, [r7, #20]
 8022476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022478:	f04f 31ff 	mov.w	r1, #4294967295
 802247c:	697b      	ldr	r3, [r7, #20]
 802247e:	fa01 f303 	lsl.w	r3, r1, r3
 8022482:	43d9      	mvns	r1, r3
 8022484:	687b      	ldr	r3, [r7, #4]
 8022486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022488:	4313      	orrs	r3, r2
         );
}
 802248a:	4618      	mov	r0, r3
 802248c:	3724      	adds	r7, #36	; 0x24
 802248e:	46bd      	mov	sp, r7
 8022490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022494:	4770      	bx	lr

08022496 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022496:	b580      	push	{r7, lr}
 8022498:	b082      	sub	sp, #8
 802249a:	af00      	add	r7, sp, #0
 802249c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802249e:	6878      	ldr	r0, [r7, #4]
 80224a0:	f7ff ff4c 	bl	802233c <__NVIC_SetPriorityGrouping>
}
 80224a4:	bf00      	nop
 80224a6:	3708      	adds	r7, #8
 80224a8:	46bd      	mov	sp, r7
 80224aa:	bd80      	pop	{r7, pc}

080224ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80224ac:	b580      	push	{r7, lr}
 80224ae:	b086      	sub	sp, #24
 80224b0:	af00      	add	r7, sp, #0
 80224b2:	4603      	mov	r3, r0
 80224b4:	60b9      	str	r1, [r7, #8]
 80224b6:	607a      	str	r2, [r7, #4]
 80224b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80224ba:	2300      	movs	r3, #0
 80224bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80224be:	f7ff ff61 	bl	8022384 <__NVIC_GetPriorityGrouping>
 80224c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80224c4:	687a      	ldr	r2, [r7, #4]
 80224c6:	68b9      	ldr	r1, [r7, #8]
 80224c8:	6978      	ldr	r0, [r7, #20]
 80224ca:	f7ff ffb1 	bl	8022430 <NVIC_EncodePriority>
 80224ce:	4602      	mov	r2, r0
 80224d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80224d4:	4611      	mov	r1, r2
 80224d6:	4618      	mov	r0, r3
 80224d8:	f7ff ff80 	bl	80223dc <__NVIC_SetPriority>
}
 80224dc:	bf00      	nop
 80224de:	3718      	adds	r7, #24
 80224e0:	46bd      	mov	sp, r7
 80224e2:	bd80      	pop	{r7, pc}

080224e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80224e4:	b580      	push	{r7, lr}
 80224e6:	b082      	sub	sp, #8
 80224e8:	af00      	add	r7, sp, #0
 80224ea:	4603      	mov	r3, r0
 80224ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80224ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80224f2:	4618      	mov	r0, r3
 80224f4:	f7ff ff54 	bl	80223a0 <__NVIC_EnableIRQ>
}
 80224f8:	bf00      	nop
 80224fa:	3708      	adds	r7, #8
 80224fc:	46bd      	mov	sp, r7
 80224fe:	bd80      	pop	{r7, pc}

08022500 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8022500:	b580      	push	{r7, lr}
 8022502:	b086      	sub	sp, #24
 8022504:	af00      	add	r7, sp, #0
 8022506:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8022508:	2300      	movs	r3, #0
 802250a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 802250c:	f7ff fb2c 	bl	8021b68 <HAL_GetTick>
 8022510:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	2b00      	cmp	r3, #0
 8022516:	d101      	bne.n	802251c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8022518:	2301      	movs	r3, #1
 802251a:	e099      	b.n	8022650 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	2200      	movs	r2, #0
 8022520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8022524:	687b      	ldr	r3, [r7, #4]
 8022526:	2202      	movs	r2, #2
 8022528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	681b      	ldr	r3, [r3, #0]
 8022530:	681a      	ldr	r2, [r3, #0]
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	681b      	ldr	r3, [r3, #0]
 8022536:	f022 0201 	bic.w	r2, r2, #1
 802253a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802253c:	e00f      	b.n	802255e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802253e:	f7ff fb13 	bl	8021b68 <HAL_GetTick>
 8022542:	4602      	mov	r2, r0
 8022544:	693b      	ldr	r3, [r7, #16]
 8022546:	1ad3      	subs	r3, r2, r3
 8022548:	2b05      	cmp	r3, #5
 802254a:	d908      	bls.n	802255e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	2220      	movs	r2, #32
 8022550:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8022552:	687b      	ldr	r3, [r7, #4]
 8022554:	2203      	movs	r2, #3
 8022556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802255a:	2303      	movs	r3, #3
 802255c:	e078      	b.n	8022650 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802255e:	687b      	ldr	r3, [r7, #4]
 8022560:	681b      	ldr	r3, [r3, #0]
 8022562:	681b      	ldr	r3, [r3, #0]
 8022564:	f003 0301 	and.w	r3, r3, #1
 8022568:	2b00      	cmp	r3, #0
 802256a:	d1e8      	bne.n	802253e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	681b      	ldr	r3, [r3, #0]
 8022570:	681b      	ldr	r3, [r3, #0]
 8022572:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8022574:	697a      	ldr	r2, [r7, #20]
 8022576:	4b38      	ldr	r3, [pc, #224]	; (8022658 <HAL_DMA_Init+0x158>)
 8022578:	4013      	ands	r3, r2
 802257a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802257c:	687b      	ldr	r3, [r7, #4]
 802257e:	685a      	ldr	r2, [r3, #4]
 8022580:	687b      	ldr	r3, [r7, #4]
 8022582:	689b      	ldr	r3, [r3, #8]
 8022584:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022586:	687b      	ldr	r3, [r7, #4]
 8022588:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802258a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802258c:	687b      	ldr	r3, [r7, #4]
 802258e:	691b      	ldr	r3, [r3, #16]
 8022590:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022592:	687b      	ldr	r3, [r7, #4]
 8022594:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022598:	687b      	ldr	r3, [r7, #4]
 802259a:	699b      	ldr	r3, [r3, #24]
 802259c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802259e:	687b      	ldr	r3, [r7, #4]
 80225a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80225a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80225a4:	687b      	ldr	r3, [r7, #4]
 80225a6:	6a1b      	ldr	r3, [r3, #32]
 80225a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80225aa:	697a      	ldr	r2, [r7, #20]
 80225ac:	4313      	orrs	r3, r2
 80225ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80225b0:	687b      	ldr	r3, [r7, #4]
 80225b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225b4:	2b04      	cmp	r3, #4
 80225b6:	d107      	bne.n	80225c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80225bc:	687b      	ldr	r3, [r7, #4]
 80225be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80225c0:	4313      	orrs	r3, r2
 80225c2:	697a      	ldr	r2, [r7, #20]
 80225c4:	4313      	orrs	r3, r2
 80225c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80225c8:	687b      	ldr	r3, [r7, #4]
 80225ca:	681b      	ldr	r3, [r3, #0]
 80225cc:	697a      	ldr	r2, [r7, #20]
 80225ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	681b      	ldr	r3, [r3, #0]
 80225d4:	695b      	ldr	r3, [r3, #20]
 80225d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80225d8:	697b      	ldr	r3, [r7, #20]
 80225da:	f023 0307 	bic.w	r3, r3, #7
 80225de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80225e0:	687b      	ldr	r3, [r7, #4]
 80225e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225e4:	697a      	ldr	r2, [r7, #20]
 80225e6:	4313      	orrs	r3, r2
 80225e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80225ea:	687b      	ldr	r3, [r7, #4]
 80225ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225ee:	2b04      	cmp	r3, #4
 80225f0:	d117      	bne.n	8022622 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80225f2:	687b      	ldr	r3, [r7, #4]
 80225f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80225f6:	697a      	ldr	r2, [r7, #20]
 80225f8:	4313      	orrs	r3, r2
 80225fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022600:	2b00      	cmp	r3, #0
 8022602:	d00e      	beq.n	8022622 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8022604:	6878      	ldr	r0, [r7, #4]
 8022606:	f000 fa91 	bl	8022b2c <DMA_CheckFifoParam>
 802260a:	4603      	mov	r3, r0
 802260c:	2b00      	cmp	r3, #0
 802260e:	d008      	beq.n	8022622 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	2240      	movs	r2, #64	; 0x40
 8022614:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	2201      	movs	r2, #1
 802261a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 802261e:	2301      	movs	r3, #1
 8022620:	e016      	b.n	8022650 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	681b      	ldr	r3, [r3, #0]
 8022626:	697a      	ldr	r2, [r7, #20]
 8022628:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802262a:	6878      	ldr	r0, [r7, #4]
 802262c:	f000 fa48 	bl	8022ac0 <DMA_CalcBaseAndBitshift>
 8022630:	4603      	mov	r3, r0
 8022632:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022638:	223f      	movs	r2, #63	; 0x3f
 802263a:	409a      	lsls	r2, r3
 802263c:	68fb      	ldr	r3, [r7, #12]
 802263e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8022640:	687b      	ldr	r3, [r7, #4]
 8022642:	2200      	movs	r2, #0
 8022644:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8022646:	687b      	ldr	r3, [r7, #4]
 8022648:	2201      	movs	r2, #1
 802264a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802264e:	2300      	movs	r3, #0
}
 8022650:	4618      	mov	r0, r3
 8022652:	3718      	adds	r7, #24
 8022654:	46bd      	mov	sp, r7
 8022656:	bd80      	pop	{r7, pc}
 8022658:	f010803f 	.word	0xf010803f

0802265c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802265c:	b580      	push	{r7, lr}
 802265e:	b086      	sub	sp, #24
 8022660:	af00      	add	r7, sp, #0
 8022662:	60f8      	str	r0, [r7, #12]
 8022664:	60b9      	str	r1, [r7, #8]
 8022666:	607a      	str	r2, [r7, #4]
 8022668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802266a:	2300      	movs	r3, #0
 802266c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802266e:	68fb      	ldr	r3, [r7, #12]
 8022670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022672:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8022674:	68fb      	ldr	r3, [r7, #12]
 8022676:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802267a:	2b01      	cmp	r3, #1
 802267c:	d101      	bne.n	8022682 <HAL_DMA_Start_IT+0x26>
 802267e:	2302      	movs	r3, #2
 8022680:	e040      	b.n	8022704 <HAL_DMA_Start_IT+0xa8>
 8022682:	68fb      	ldr	r3, [r7, #12]
 8022684:	2201      	movs	r2, #1
 8022686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 802268a:	68fb      	ldr	r3, [r7, #12]
 802268c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8022690:	b2db      	uxtb	r3, r3
 8022692:	2b01      	cmp	r3, #1
 8022694:	d12f      	bne.n	80226f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8022696:	68fb      	ldr	r3, [r7, #12]
 8022698:	2202      	movs	r2, #2
 802269a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802269e:	68fb      	ldr	r3, [r7, #12]
 80226a0:	2200      	movs	r2, #0
 80226a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80226a4:	683b      	ldr	r3, [r7, #0]
 80226a6:	687a      	ldr	r2, [r7, #4]
 80226a8:	68b9      	ldr	r1, [r7, #8]
 80226aa:	68f8      	ldr	r0, [r7, #12]
 80226ac:	f000 f9da 	bl	8022a64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80226b0:	68fb      	ldr	r3, [r7, #12]
 80226b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80226b4:	223f      	movs	r2, #63	; 0x3f
 80226b6:	409a      	lsls	r2, r3
 80226b8:	693b      	ldr	r3, [r7, #16]
 80226ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80226bc:	68fb      	ldr	r3, [r7, #12]
 80226be:	681b      	ldr	r3, [r3, #0]
 80226c0:	681a      	ldr	r2, [r3, #0]
 80226c2:	68fb      	ldr	r3, [r7, #12]
 80226c4:	681b      	ldr	r3, [r3, #0]
 80226c6:	f042 0216 	orr.w	r2, r2, #22
 80226ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80226cc:	68fb      	ldr	r3, [r7, #12]
 80226ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80226d0:	2b00      	cmp	r3, #0
 80226d2:	d007      	beq.n	80226e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80226d4:	68fb      	ldr	r3, [r7, #12]
 80226d6:	681b      	ldr	r3, [r3, #0]
 80226d8:	681a      	ldr	r2, [r3, #0]
 80226da:	68fb      	ldr	r3, [r7, #12]
 80226dc:	681b      	ldr	r3, [r3, #0]
 80226de:	f042 0208 	orr.w	r2, r2, #8
 80226e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80226e4:	68fb      	ldr	r3, [r7, #12]
 80226e6:	681b      	ldr	r3, [r3, #0]
 80226e8:	681a      	ldr	r2, [r3, #0]
 80226ea:	68fb      	ldr	r3, [r7, #12]
 80226ec:	681b      	ldr	r3, [r3, #0]
 80226ee:	f042 0201 	orr.w	r2, r2, #1
 80226f2:	601a      	str	r2, [r3, #0]
 80226f4:	e005      	b.n	8022702 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80226f6:	68fb      	ldr	r3, [r7, #12]
 80226f8:	2200      	movs	r2, #0
 80226fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80226fe:	2302      	movs	r3, #2
 8022700:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8022702:	7dfb      	ldrb	r3, [r7, #23]
}
 8022704:	4618      	mov	r0, r3
 8022706:	3718      	adds	r7, #24
 8022708:	46bd      	mov	sp, r7
 802270a:	bd80      	pop	{r7, pc}

0802270c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802270c:	b480      	push	{r7}
 802270e:	b083      	sub	sp, #12
 8022710:	af00      	add	r7, sp, #0
 8022712:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8022714:	687b      	ldr	r3, [r7, #4]
 8022716:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802271a:	b2db      	uxtb	r3, r3
 802271c:	2b02      	cmp	r3, #2
 802271e:	d004      	beq.n	802272a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	2280      	movs	r2, #128	; 0x80
 8022724:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8022726:	2301      	movs	r3, #1
 8022728:	e00c      	b.n	8022744 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 802272a:	687b      	ldr	r3, [r7, #4]
 802272c:	2205      	movs	r2, #5
 802272e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8022732:	687b      	ldr	r3, [r7, #4]
 8022734:	681b      	ldr	r3, [r3, #0]
 8022736:	681a      	ldr	r2, [r3, #0]
 8022738:	687b      	ldr	r3, [r7, #4]
 802273a:	681b      	ldr	r3, [r3, #0]
 802273c:	f022 0201 	bic.w	r2, r2, #1
 8022740:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8022742:	2300      	movs	r3, #0
}
 8022744:	4618      	mov	r0, r3
 8022746:	370c      	adds	r7, #12
 8022748:	46bd      	mov	sp, r7
 802274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802274e:	4770      	bx	lr

08022750 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8022750:	b580      	push	{r7, lr}
 8022752:	b086      	sub	sp, #24
 8022754:	af00      	add	r7, sp, #0
 8022756:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8022758:	2300      	movs	r3, #0
 802275a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 802275c:	4b8e      	ldr	r3, [pc, #568]	; (8022998 <HAL_DMA_IRQHandler+0x248>)
 802275e:	681b      	ldr	r3, [r3, #0]
 8022760:	4a8e      	ldr	r2, [pc, #568]	; (802299c <HAL_DMA_IRQHandler+0x24c>)
 8022762:	fba2 2303 	umull	r2, r3, r2, r3
 8022766:	0a9b      	lsrs	r3, r3, #10
 8022768:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802276e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8022770:	693b      	ldr	r3, [r7, #16]
 8022772:	681b      	ldr	r3, [r3, #0]
 8022774:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802277a:	2208      	movs	r2, #8
 802277c:	409a      	lsls	r2, r3
 802277e:	68fb      	ldr	r3, [r7, #12]
 8022780:	4013      	ands	r3, r2
 8022782:	2b00      	cmp	r3, #0
 8022784:	d01a      	beq.n	80227bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	681b      	ldr	r3, [r3, #0]
 802278a:	681b      	ldr	r3, [r3, #0]
 802278c:	f003 0304 	and.w	r3, r3, #4
 8022790:	2b00      	cmp	r3, #0
 8022792:	d013      	beq.n	80227bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8022794:	687b      	ldr	r3, [r7, #4]
 8022796:	681b      	ldr	r3, [r3, #0]
 8022798:	681a      	ldr	r2, [r3, #0]
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	681b      	ldr	r3, [r3, #0]
 802279e:	f022 0204 	bic.w	r2, r2, #4
 80227a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80227a8:	2208      	movs	r2, #8
 80227aa:	409a      	lsls	r2, r3
 80227ac:	693b      	ldr	r3, [r7, #16]
 80227ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80227b0:	687b      	ldr	r3, [r7, #4]
 80227b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80227b4:	f043 0201 	orr.w	r2, r3, #1
 80227b8:	687b      	ldr	r3, [r7, #4]
 80227ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80227c0:	2201      	movs	r2, #1
 80227c2:	409a      	lsls	r2, r3
 80227c4:	68fb      	ldr	r3, [r7, #12]
 80227c6:	4013      	ands	r3, r2
 80227c8:	2b00      	cmp	r3, #0
 80227ca:	d012      	beq.n	80227f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80227cc:	687b      	ldr	r3, [r7, #4]
 80227ce:	681b      	ldr	r3, [r3, #0]
 80227d0:	695b      	ldr	r3, [r3, #20]
 80227d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80227d6:	2b00      	cmp	r3, #0
 80227d8:	d00b      	beq.n	80227f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80227da:	687b      	ldr	r3, [r7, #4]
 80227dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80227de:	2201      	movs	r2, #1
 80227e0:	409a      	lsls	r2, r3
 80227e2:	693b      	ldr	r3, [r7, #16]
 80227e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80227e6:	687b      	ldr	r3, [r7, #4]
 80227e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80227ea:	f043 0202 	orr.w	r2, r3, #2
 80227ee:	687b      	ldr	r3, [r7, #4]
 80227f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80227f6:	2204      	movs	r2, #4
 80227f8:	409a      	lsls	r2, r3
 80227fa:	68fb      	ldr	r3, [r7, #12]
 80227fc:	4013      	ands	r3, r2
 80227fe:	2b00      	cmp	r3, #0
 8022800:	d012      	beq.n	8022828 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	681b      	ldr	r3, [r3, #0]
 8022806:	681b      	ldr	r3, [r3, #0]
 8022808:	f003 0302 	and.w	r3, r3, #2
 802280c:	2b00      	cmp	r3, #0
 802280e:	d00b      	beq.n	8022828 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022814:	2204      	movs	r2, #4
 8022816:	409a      	lsls	r2, r3
 8022818:	693b      	ldr	r3, [r7, #16]
 802281a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802281c:	687b      	ldr	r3, [r7, #4]
 802281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022820:	f043 0204 	orr.w	r2, r3, #4
 8022824:	687b      	ldr	r3, [r7, #4]
 8022826:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802282c:	2210      	movs	r2, #16
 802282e:	409a      	lsls	r2, r3
 8022830:	68fb      	ldr	r3, [r7, #12]
 8022832:	4013      	ands	r3, r2
 8022834:	2b00      	cmp	r3, #0
 8022836:	d043      	beq.n	80228c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8022838:	687b      	ldr	r3, [r7, #4]
 802283a:	681b      	ldr	r3, [r3, #0]
 802283c:	681b      	ldr	r3, [r3, #0]
 802283e:	f003 0308 	and.w	r3, r3, #8
 8022842:	2b00      	cmp	r3, #0
 8022844:	d03c      	beq.n	80228c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802284a:	2210      	movs	r2, #16
 802284c:	409a      	lsls	r2, r3
 802284e:	693b      	ldr	r3, [r7, #16]
 8022850:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	681b      	ldr	r3, [r3, #0]
 8022856:	681b      	ldr	r3, [r3, #0]
 8022858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802285c:	2b00      	cmp	r3, #0
 802285e:	d018      	beq.n	8022892 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8022860:	687b      	ldr	r3, [r7, #4]
 8022862:	681b      	ldr	r3, [r3, #0]
 8022864:	681b      	ldr	r3, [r3, #0]
 8022866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802286a:	2b00      	cmp	r3, #0
 802286c:	d108      	bne.n	8022880 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802286e:	687b      	ldr	r3, [r7, #4]
 8022870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022872:	2b00      	cmp	r3, #0
 8022874:	d024      	beq.n	80228c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802287a:	6878      	ldr	r0, [r7, #4]
 802287c:	4798      	blx	r3
 802287e:	e01f      	b.n	80228c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8022880:	687b      	ldr	r3, [r7, #4]
 8022882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022884:	2b00      	cmp	r3, #0
 8022886:	d01b      	beq.n	80228c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8022888:	687b      	ldr	r3, [r7, #4]
 802288a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802288c:	6878      	ldr	r0, [r7, #4]
 802288e:	4798      	blx	r3
 8022890:	e016      	b.n	80228c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8022892:	687b      	ldr	r3, [r7, #4]
 8022894:	681b      	ldr	r3, [r3, #0]
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802289c:	2b00      	cmp	r3, #0
 802289e:	d107      	bne.n	80228b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	681b      	ldr	r3, [r3, #0]
 80228a4:	681a      	ldr	r2, [r3, #0]
 80228a6:	687b      	ldr	r3, [r7, #4]
 80228a8:	681b      	ldr	r3, [r3, #0]
 80228aa:	f022 0208 	bic.w	r2, r2, #8
 80228ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80228b0:	687b      	ldr	r3, [r7, #4]
 80228b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	d003      	beq.n	80228c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80228bc:	6878      	ldr	r0, [r7, #4]
 80228be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80228c4:	2220      	movs	r2, #32
 80228c6:	409a      	lsls	r2, r3
 80228c8:	68fb      	ldr	r3, [r7, #12]
 80228ca:	4013      	ands	r3, r2
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	f000 808f 	beq.w	80229f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80228d2:	687b      	ldr	r3, [r7, #4]
 80228d4:	681b      	ldr	r3, [r3, #0]
 80228d6:	681b      	ldr	r3, [r3, #0]
 80228d8:	f003 0310 	and.w	r3, r3, #16
 80228dc:	2b00      	cmp	r3, #0
 80228de:	f000 8087 	beq.w	80229f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80228e2:	687b      	ldr	r3, [r7, #4]
 80228e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80228e6:	2220      	movs	r2, #32
 80228e8:	409a      	lsls	r2, r3
 80228ea:	693b      	ldr	r3, [r7, #16]
 80228ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80228f4:	b2db      	uxtb	r3, r3
 80228f6:	2b05      	cmp	r3, #5
 80228f8:	d136      	bne.n	8022968 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	681b      	ldr	r3, [r3, #0]
 80228fe:	681a      	ldr	r2, [r3, #0]
 8022900:	687b      	ldr	r3, [r7, #4]
 8022902:	681b      	ldr	r3, [r3, #0]
 8022904:	f022 0216 	bic.w	r2, r2, #22
 8022908:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	681b      	ldr	r3, [r3, #0]
 802290e:	695a      	ldr	r2, [r3, #20]
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	681b      	ldr	r3, [r3, #0]
 8022914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022918:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802291a:	687b      	ldr	r3, [r7, #4]
 802291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802291e:	2b00      	cmp	r3, #0
 8022920:	d103      	bne.n	802292a <HAL_DMA_IRQHandler+0x1da>
 8022922:	687b      	ldr	r3, [r7, #4]
 8022924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022926:	2b00      	cmp	r3, #0
 8022928:	d007      	beq.n	802293a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802292a:	687b      	ldr	r3, [r7, #4]
 802292c:	681b      	ldr	r3, [r3, #0]
 802292e:	681a      	ldr	r2, [r3, #0]
 8022930:	687b      	ldr	r3, [r7, #4]
 8022932:	681b      	ldr	r3, [r3, #0]
 8022934:	f022 0208 	bic.w	r2, r2, #8
 8022938:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802293a:	687b      	ldr	r3, [r7, #4]
 802293c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802293e:	223f      	movs	r2, #63	; 0x3f
 8022940:	409a      	lsls	r2, r3
 8022942:	693b      	ldr	r3, [r7, #16]
 8022944:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8022946:	687b      	ldr	r3, [r7, #4]
 8022948:	2200      	movs	r2, #0
 802294a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802294e:	687b      	ldr	r3, [r7, #4]
 8022950:	2201      	movs	r2, #1
 8022952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802295a:	2b00      	cmp	r3, #0
 802295c:	d07e      	beq.n	8022a5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 802295e:	687b      	ldr	r3, [r7, #4]
 8022960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022962:	6878      	ldr	r0, [r7, #4]
 8022964:	4798      	blx	r3
        }
        return;
 8022966:	e079      	b.n	8022a5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	681b      	ldr	r3, [r3, #0]
 802296c:	681b      	ldr	r3, [r3, #0]
 802296e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8022972:	2b00      	cmp	r3, #0
 8022974:	d01d      	beq.n	80229b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8022976:	687b      	ldr	r3, [r7, #4]
 8022978:	681b      	ldr	r3, [r3, #0]
 802297a:	681b      	ldr	r3, [r3, #0]
 802297c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8022980:	2b00      	cmp	r3, #0
 8022982:	d10d      	bne.n	80229a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8022984:	687b      	ldr	r3, [r7, #4]
 8022986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022988:	2b00      	cmp	r3, #0
 802298a:	d031      	beq.n	80229f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 802298c:	687b      	ldr	r3, [r7, #4]
 802298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022990:	6878      	ldr	r0, [r7, #4]
 8022992:	4798      	blx	r3
 8022994:	e02c      	b.n	80229f0 <HAL_DMA_IRQHandler+0x2a0>
 8022996:	bf00      	nop
 8022998:	20000004 	.word	0x20000004
 802299c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80229a4:	2b00      	cmp	r3, #0
 80229a6:	d023      	beq.n	80229f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80229a8:	687b      	ldr	r3, [r7, #4]
 80229aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80229ac:	6878      	ldr	r0, [r7, #4]
 80229ae:	4798      	blx	r3
 80229b0:	e01e      	b.n	80229f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	681b      	ldr	r3, [r3, #0]
 80229b6:	681b      	ldr	r3, [r3, #0]
 80229b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80229bc:	2b00      	cmp	r3, #0
 80229be:	d10f      	bne.n	80229e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80229c0:	687b      	ldr	r3, [r7, #4]
 80229c2:	681b      	ldr	r3, [r3, #0]
 80229c4:	681a      	ldr	r2, [r3, #0]
 80229c6:	687b      	ldr	r3, [r7, #4]
 80229c8:	681b      	ldr	r3, [r3, #0]
 80229ca:	f022 0210 	bic.w	r2, r2, #16
 80229ce:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80229d0:	687b      	ldr	r3, [r7, #4]
 80229d2:	2200      	movs	r2, #0
 80229d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80229d8:	687b      	ldr	r3, [r7, #4]
 80229da:	2201      	movs	r2, #1
 80229dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80229e0:	687b      	ldr	r3, [r7, #4]
 80229e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	d003      	beq.n	80229f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80229ec:	6878      	ldr	r0, [r7, #4]
 80229ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80229f0:	687b      	ldr	r3, [r7, #4]
 80229f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80229f4:	2b00      	cmp	r3, #0
 80229f6:	d032      	beq.n	8022a5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80229f8:	687b      	ldr	r3, [r7, #4]
 80229fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80229fc:	f003 0301 	and.w	r3, r3, #1
 8022a00:	2b00      	cmp	r3, #0
 8022a02:	d022      	beq.n	8022a4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	2205      	movs	r2, #5
 8022a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	681b      	ldr	r3, [r3, #0]
 8022a10:	681a      	ldr	r2, [r3, #0]
 8022a12:	687b      	ldr	r3, [r7, #4]
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	f022 0201 	bic.w	r2, r2, #1
 8022a1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8022a1c:	68bb      	ldr	r3, [r7, #8]
 8022a1e:	3301      	adds	r3, #1
 8022a20:	60bb      	str	r3, [r7, #8]
 8022a22:	697a      	ldr	r2, [r7, #20]
 8022a24:	429a      	cmp	r2, r3
 8022a26:	d307      	bcc.n	8022a38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	681b      	ldr	r3, [r3, #0]
 8022a2c:	681b      	ldr	r3, [r3, #0]
 8022a2e:	f003 0301 	and.w	r3, r3, #1
 8022a32:	2b00      	cmp	r3, #0
 8022a34:	d1f2      	bne.n	8022a1c <HAL_DMA_IRQHandler+0x2cc>
 8022a36:	e000      	b.n	8022a3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8022a38:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8022a3a:	687b      	ldr	r3, [r7, #4]
 8022a3c:	2200      	movs	r2, #0
 8022a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8022a42:	687b      	ldr	r3, [r7, #4]
 8022a44:	2201      	movs	r2, #1
 8022a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8022a4a:	687b      	ldr	r3, [r7, #4]
 8022a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022a4e:	2b00      	cmp	r3, #0
 8022a50:	d005      	beq.n	8022a5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022a56:	6878      	ldr	r0, [r7, #4]
 8022a58:	4798      	blx	r3
 8022a5a:	e000      	b.n	8022a5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8022a5c:	bf00      	nop
    }
  }
}
 8022a5e:	3718      	adds	r7, #24
 8022a60:	46bd      	mov	sp, r7
 8022a62:	bd80      	pop	{r7, pc}

08022a64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8022a64:	b480      	push	{r7}
 8022a66:	b085      	sub	sp, #20
 8022a68:	af00      	add	r7, sp, #0
 8022a6a:	60f8      	str	r0, [r7, #12]
 8022a6c:	60b9      	str	r1, [r7, #8]
 8022a6e:	607a      	str	r2, [r7, #4]
 8022a70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8022a72:	68fb      	ldr	r3, [r7, #12]
 8022a74:	681b      	ldr	r3, [r3, #0]
 8022a76:	681a      	ldr	r2, [r3, #0]
 8022a78:	68fb      	ldr	r3, [r7, #12]
 8022a7a:	681b      	ldr	r3, [r3, #0]
 8022a7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8022a80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8022a82:	68fb      	ldr	r3, [r7, #12]
 8022a84:	681b      	ldr	r3, [r3, #0]
 8022a86:	683a      	ldr	r2, [r7, #0]
 8022a88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8022a8a:	68fb      	ldr	r3, [r7, #12]
 8022a8c:	689b      	ldr	r3, [r3, #8]
 8022a8e:	2b40      	cmp	r3, #64	; 0x40
 8022a90:	d108      	bne.n	8022aa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8022a92:	68fb      	ldr	r3, [r7, #12]
 8022a94:	681b      	ldr	r3, [r3, #0]
 8022a96:	687a      	ldr	r2, [r7, #4]
 8022a98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8022a9a:	68fb      	ldr	r3, [r7, #12]
 8022a9c:	681b      	ldr	r3, [r3, #0]
 8022a9e:	68ba      	ldr	r2, [r7, #8]
 8022aa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8022aa2:	e007      	b.n	8022ab4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8022aa4:	68fb      	ldr	r3, [r7, #12]
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	68ba      	ldr	r2, [r7, #8]
 8022aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8022aac:	68fb      	ldr	r3, [r7, #12]
 8022aae:	681b      	ldr	r3, [r3, #0]
 8022ab0:	687a      	ldr	r2, [r7, #4]
 8022ab2:	60da      	str	r2, [r3, #12]
}
 8022ab4:	bf00      	nop
 8022ab6:	3714      	adds	r7, #20
 8022ab8:	46bd      	mov	sp, r7
 8022aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022abe:	4770      	bx	lr

08022ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8022ac0:	b480      	push	{r7}
 8022ac2:	b085      	sub	sp, #20
 8022ac4:	af00      	add	r7, sp, #0
 8022ac6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8022ac8:	687b      	ldr	r3, [r7, #4]
 8022aca:	681b      	ldr	r3, [r3, #0]
 8022acc:	b2db      	uxtb	r3, r3
 8022ace:	3b10      	subs	r3, #16
 8022ad0:	4a14      	ldr	r2, [pc, #80]	; (8022b24 <DMA_CalcBaseAndBitshift+0x64>)
 8022ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8022ad6:	091b      	lsrs	r3, r3, #4
 8022ad8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8022ada:	4a13      	ldr	r2, [pc, #76]	; (8022b28 <DMA_CalcBaseAndBitshift+0x68>)
 8022adc:	68fb      	ldr	r3, [r7, #12]
 8022ade:	4413      	add	r3, r2
 8022ae0:	781b      	ldrb	r3, [r3, #0]
 8022ae2:	461a      	mov	r2, r3
 8022ae4:	687b      	ldr	r3, [r7, #4]
 8022ae6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8022ae8:	68fb      	ldr	r3, [r7, #12]
 8022aea:	2b03      	cmp	r3, #3
 8022aec:	d909      	bls.n	8022b02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8022aee:	687b      	ldr	r3, [r7, #4]
 8022af0:	681b      	ldr	r3, [r3, #0]
 8022af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8022af6:	f023 0303 	bic.w	r3, r3, #3
 8022afa:	1d1a      	adds	r2, r3, #4
 8022afc:	687b      	ldr	r3, [r7, #4]
 8022afe:	659a      	str	r2, [r3, #88]	; 0x58
 8022b00:	e007      	b.n	8022b12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	681b      	ldr	r3, [r3, #0]
 8022b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8022b0a:	f023 0303 	bic.w	r3, r3, #3
 8022b0e:	687a      	ldr	r2, [r7, #4]
 8022b10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8022b12:	687b      	ldr	r3, [r7, #4]
 8022b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8022b16:	4618      	mov	r0, r3
 8022b18:	3714      	adds	r7, #20
 8022b1a:	46bd      	mov	sp, r7
 8022b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b20:	4770      	bx	lr
 8022b22:	bf00      	nop
 8022b24:	aaaaaaab 	.word	0xaaaaaaab
 8022b28:	0803b680 	.word	0x0803b680

08022b2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8022b2c:	b480      	push	{r7}
 8022b2e:	b085      	sub	sp, #20
 8022b30:	af00      	add	r7, sp, #0
 8022b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8022b34:	2300      	movs	r3, #0
 8022b36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8022b38:	687b      	ldr	r3, [r7, #4]
 8022b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8022b3e:	687b      	ldr	r3, [r7, #4]
 8022b40:	699b      	ldr	r3, [r3, #24]
 8022b42:	2b00      	cmp	r3, #0
 8022b44:	d11f      	bne.n	8022b86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8022b46:	68bb      	ldr	r3, [r7, #8]
 8022b48:	2b03      	cmp	r3, #3
 8022b4a:	d856      	bhi.n	8022bfa <DMA_CheckFifoParam+0xce>
 8022b4c:	a201      	add	r2, pc, #4	; (adr r2, 8022b54 <DMA_CheckFifoParam+0x28>)
 8022b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022b52:	bf00      	nop
 8022b54:	08022b65 	.word	0x08022b65
 8022b58:	08022b77 	.word	0x08022b77
 8022b5c:	08022b65 	.word	0x08022b65
 8022b60:	08022bfb 	.word	0x08022bfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8022b64:	687b      	ldr	r3, [r7, #4]
 8022b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8022b6c:	2b00      	cmp	r3, #0
 8022b6e:	d046      	beq.n	8022bfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8022b70:	2301      	movs	r3, #1
 8022b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022b74:	e043      	b.n	8022bfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8022b7e:	d140      	bne.n	8022c02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8022b80:	2301      	movs	r3, #1
 8022b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022b84:	e03d      	b.n	8022c02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8022b86:	687b      	ldr	r3, [r7, #4]
 8022b88:	699b      	ldr	r3, [r3, #24]
 8022b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8022b8e:	d121      	bne.n	8022bd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8022b90:	68bb      	ldr	r3, [r7, #8]
 8022b92:	2b03      	cmp	r3, #3
 8022b94:	d837      	bhi.n	8022c06 <DMA_CheckFifoParam+0xda>
 8022b96:	a201      	add	r2, pc, #4	; (adr r2, 8022b9c <DMA_CheckFifoParam+0x70>)
 8022b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022b9c:	08022bad 	.word	0x08022bad
 8022ba0:	08022bb3 	.word	0x08022bb3
 8022ba4:	08022bad 	.word	0x08022bad
 8022ba8:	08022bc5 	.word	0x08022bc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8022bac:	2301      	movs	r3, #1
 8022bae:	73fb      	strb	r3, [r7, #15]
      break;
 8022bb0:	e030      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8022bb2:	687b      	ldr	r3, [r7, #4]
 8022bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8022bba:	2b00      	cmp	r3, #0
 8022bbc:	d025      	beq.n	8022c0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8022bbe:	2301      	movs	r3, #1
 8022bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022bc2:	e022      	b.n	8022c0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8022bc4:	687b      	ldr	r3, [r7, #4]
 8022bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022bc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8022bcc:	d11f      	bne.n	8022c0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8022bce:	2301      	movs	r3, #1
 8022bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8022bd2:	e01c      	b.n	8022c0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8022bd4:	68bb      	ldr	r3, [r7, #8]
 8022bd6:	2b02      	cmp	r3, #2
 8022bd8:	d903      	bls.n	8022be2 <DMA_CheckFifoParam+0xb6>
 8022bda:	68bb      	ldr	r3, [r7, #8]
 8022bdc:	2b03      	cmp	r3, #3
 8022bde:	d003      	beq.n	8022be8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8022be0:	e018      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8022be2:	2301      	movs	r3, #1
 8022be4:	73fb      	strb	r3, [r7, #15]
      break;
 8022be6:	e015      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8022be8:	687b      	ldr	r3, [r7, #4]
 8022bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8022bf0:	2b00      	cmp	r3, #0
 8022bf2:	d00e      	beq.n	8022c12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8022bf4:	2301      	movs	r3, #1
 8022bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8022bf8:	e00b      	b.n	8022c12 <DMA_CheckFifoParam+0xe6>
      break;
 8022bfa:	bf00      	nop
 8022bfc:	e00a      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      break;
 8022bfe:	bf00      	nop
 8022c00:	e008      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      break;
 8022c02:	bf00      	nop
 8022c04:	e006      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      break;
 8022c06:	bf00      	nop
 8022c08:	e004      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      break;
 8022c0a:	bf00      	nop
 8022c0c:	e002      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      break;   
 8022c0e:	bf00      	nop
 8022c10:	e000      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      break;
 8022c12:	bf00      	nop
    }
  } 
  
  return status; 
 8022c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8022c16:	4618      	mov	r0, r3
 8022c18:	3714      	adds	r7, #20
 8022c1a:	46bd      	mov	sp, r7
 8022c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c20:	4770      	bx	lr
 8022c22:	bf00      	nop

08022c24 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8022c24:	b580      	push	{r7, lr}
 8022c26:	b086      	sub	sp, #24
 8022c28:	af00      	add	r7, sp, #0
 8022c2a:	60f8      	str	r0, [r7, #12]
 8022c2c:	60b9      	str	r1, [r7, #8]
 8022c2e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8022c32:	2301      	movs	r3, #1
 8022c34:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8022c36:	4b23      	ldr	r3, [pc, #140]	; (8022cc4 <HAL_FLASH_Program+0xa0>)
 8022c38:	7e1b      	ldrb	r3, [r3, #24]
 8022c3a:	2b01      	cmp	r3, #1
 8022c3c:	d101      	bne.n	8022c42 <HAL_FLASH_Program+0x1e>
 8022c3e:	2302      	movs	r3, #2
 8022c40:	e03b      	b.n	8022cba <HAL_FLASH_Program+0x96>
 8022c42:	4b20      	ldr	r3, [pc, #128]	; (8022cc4 <HAL_FLASH_Program+0xa0>)
 8022c44:	2201      	movs	r2, #1
 8022c46:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022c48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022c4c:	f000 f860 	bl	8022d10 <FLASH_WaitForLastOperation>
 8022c50:	4603      	mov	r3, r0
 8022c52:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8022c54:	7dfb      	ldrb	r3, [r7, #23]
 8022c56:	2b00      	cmp	r3, #0
 8022c58:	d12b      	bne.n	8022cb2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8022c5a:	68fb      	ldr	r3, [r7, #12]
 8022c5c:	2b00      	cmp	r3, #0
 8022c5e:	d105      	bne.n	8022c6c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8022c60:	783b      	ldrb	r3, [r7, #0]
 8022c62:	4619      	mov	r1, r3
 8022c64:	68b8      	ldr	r0, [r7, #8]
 8022c66:	f000 f90b 	bl	8022e80 <FLASH_Program_Byte>
 8022c6a:	e016      	b.n	8022c9a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8022c6c:	68fb      	ldr	r3, [r7, #12]
 8022c6e:	2b01      	cmp	r3, #1
 8022c70:	d105      	bne.n	8022c7e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8022c72:	883b      	ldrh	r3, [r7, #0]
 8022c74:	4619      	mov	r1, r3
 8022c76:	68b8      	ldr	r0, [r7, #8]
 8022c78:	f000 f8de 	bl	8022e38 <FLASH_Program_HalfWord>
 8022c7c:	e00d      	b.n	8022c9a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8022c7e:	68fb      	ldr	r3, [r7, #12]
 8022c80:	2b02      	cmp	r3, #2
 8022c82:	d105      	bne.n	8022c90 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8022c84:	683b      	ldr	r3, [r7, #0]
 8022c86:	4619      	mov	r1, r3
 8022c88:	68b8      	ldr	r0, [r7, #8]
 8022c8a:	f000 f8b3 	bl	8022df4 <FLASH_Program_Word>
 8022c8e:	e004      	b.n	8022c9a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8022c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022c94:	68b8      	ldr	r0, [r7, #8]
 8022c96:	f000 f87b 	bl	8022d90 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022c9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022c9e:	f000 f837 	bl	8022d10 <FLASH_WaitForLastOperation>
 8022ca2:	4603      	mov	r3, r0
 8022ca4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8022ca6:	4b08      	ldr	r3, [pc, #32]	; (8022cc8 <HAL_FLASH_Program+0xa4>)
 8022ca8:	691b      	ldr	r3, [r3, #16]
 8022caa:	4a07      	ldr	r2, [pc, #28]	; (8022cc8 <HAL_FLASH_Program+0xa4>)
 8022cac:	f023 0301 	bic.w	r3, r3, #1
 8022cb0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8022cb2:	4b04      	ldr	r3, [pc, #16]	; (8022cc4 <HAL_FLASH_Program+0xa0>)
 8022cb4:	2200      	movs	r2, #0
 8022cb6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8022cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8022cba:	4618      	mov	r0, r3
 8022cbc:	3718      	adds	r7, #24
 8022cbe:	46bd      	mov	sp, r7
 8022cc0:	bd80      	pop	{r7, pc}
 8022cc2:	bf00      	nop
 8022cc4:	20001268 	.word	0x20001268
 8022cc8:	40023c00 	.word	0x40023c00

08022ccc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8022ccc:	b480      	push	{r7}
 8022cce:	b083      	sub	sp, #12
 8022cd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8022cd2:	2300      	movs	r3, #0
 8022cd4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8022cd6:	4b0b      	ldr	r3, [pc, #44]	; (8022d04 <HAL_FLASH_Unlock+0x38>)
 8022cd8:	691b      	ldr	r3, [r3, #16]
 8022cda:	2b00      	cmp	r3, #0
 8022cdc:	da0b      	bge.n	8022cf6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8022cde:	4b09      	ldr	r3, [pc, #36]	; (8022d04 <HAL_FLASH_Unlock+0x38>)
 8022ce0:	4a09      	ldr	r2, [pc, #36]	; (8022d08 <HAL_FLASH_Unlock+0x3c>)
 8022ce2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8022ce4:	4b07      	ldr	r3, [pc, #28]	; (8022d04 <HAL_FLASH_Unlock+0x38>)
 8022ce6:	4a09      	ldr	r2, [pc, #36]	; (8022d0c <HAL_FLASH_Unlock+0x40>)
 8022ce8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8022cea:	4b06      	ldr	r3, [pc, #24]	; (8022d04 <HAL_FLASH_Unlock+0x38>)
 8022cec:	691b      	ldr	r3, [r3, #16]
 8022cee:	2b00      	cmp	r3, #0
 8022cf0:	da01      	bge.n	8022cf6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8022cf2:	2301      	movs	r3, #1
 8022cf4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8022cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8022cf8:	4618      	mov	r0, r3
 8022cfa:	370c      	adds	r7, #12
 8022cfc:	46bd      	mov	sp, r7
 8022cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d02:	4770      	bx	lr
 8022d04:	40023c00 	.word	0x40023c00
 8022d08:	45670123 	.word	0x45670123
 8022d0c:	cdef89ab 	.word	0xcdef89ab

08022d10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8022d10:	b580      	push	{r7, lr}
 8022d12:	b084      	sub	sp, #16
 8022d14:	af00      	add	r7, sp, #0
 8022d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8022d18:	2300      	movs	r3, #0
 8022d1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8022d1c:	4b1a      	ldr	r3, [pc, #104]	; (8022d88 <FLASH_WaitForLastOperation+0x78>)
 8022d1e:	2200      	movs	r2, #0
 8022d20:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8022d22:	f7fe ff21 	bl	8021b68 <HAL_GetTick>
 8022d26:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8022d28:	e010      	b.n	8022d4c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8022d2a:	687b      	ldr	r3, [r7, #4]
 8022d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022d30:	d00c      	beq.n	8022d4c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8022d32:	687b      	ldr	r3, [r7, #4]
 8022d34:	2b00      	cmp	r3, #0
 8022d36:	d007      	beq.n	8022d48 <FLASH_WaitForLastOperation+0x38>
 8022d38:	f7fe ff16 	bl	8021b68 <HAL_GetTick>
 8022d3c:	4602      	mov	r2, r0
 8022d3e:	68fb      	ldr	r3, [r7, #12]
 8022d40:	1ad3      	subs	r3, r2, r3
 8022d42:	687a      	ldr	r2, [r7, #4]
 8022d44:	429a      	cmp	r2, r3
 8022d46:	d201      	bcs.n	8022d4c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8022d48:	2303      	movs	r3, #3
 8022d4a:	e019      	b.n	8022d80 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8022d4c:	4b0f      	ldr	r3, [pc, #60]	; (8022d8c <FLASH_WaitForLastOperation+0x7c>)
 8022d4e:	68db      	ldr	r3, [r3, #12]
 8022d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022d54:	2b00      	cmp	r3, #0
 8022d56:	d1e8      	bne.n	8022d2a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8022d58:	4b0c      	ldr	r3, [pc, #48]	; (8022d8c <FLASH_WaitForLastOperation+0x7c>)
 8022d5a:	68db      	ldr	r3, [r3, #12]
 8022d5c:	f003 0301 	and.w	r3, r3, #1
 8022d60:	2b00      	cmp	r3, #0
 8022d62:	d002      	beq.n	8022d6a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8022d64:	4b09      	ldr	r3, [pc, #36]	; (8022d8c <FLASH_WaitForLastOperation+0x7c>)
 8022d66:	2201      	movs	r2, #1
 8022d68:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8022d6a:	4b08      	ldr	r3, [pc, #32]	; (8022d8c <FLASH_WaitForLastOperation+0x7c>)
 8022d6c:	68db      	ldr	r3, [r3, #12]
 8022d6e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8022d72:	2b00      	cmp	r3, #0
 8022d74:	d003      	beq.n	8022d7e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8022d76:	f000 f8a5 	bl	8022ec4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8022d7a:	2301      	movs	r3, #1
 8022d7c:	e000      	b.n	8022d80 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8022d7e:	2300      	movs	r3, #0
  
}  
 8022d80:	4618      	mov	r0, r3
 8022d82:	3710      	adds	r7, #16
 8022d84:	46bd      	mov	sp, r7
 8022d86:	bd80      	pop	{r7, pc}
 8022d88:	20001268 	.word	0x20001268
 8022d8c:	40023c00 	.word	0x40023c00

08022d90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8022d90:	b480      	push	{r7}
 8022d92:	b085      	sub	sp, #20
 8022d94:	af00      	add	r7, sp, #0
 8022d96:	60f8      	str	r0, [r7, #12]
 8022d98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8022d9c:	4b14      	ldr	r3, [pc, #80]	; (8022df0 <FLASH_Program_DoubleWord+0x60>)
 8022d9e:	691b      	ldr	r3, [r3, #16]
 8022da0:	4a13      	ldr	r2, [pc, #76]	; (8022df0 <FLASH_Program_DoubleWord+0x60>)
 8022da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022da6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8022da8:	4b11      	ldr	r3, [pc, #68]	; (8022df0 <FLASH_Program_DoubleWord+0x60>)
 8022daa:	691b      	ldr	r3, [r3, #16]
 8022dac:	4a10      	ldr	r2, [pc, #64]	; (8022df0 <FLASH_Program_DoubleWord+0x60>)
 8022dae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8022db2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8022db4:	4b0e      	ldr	r3, [pc, #56]	; (8022df0 <FLASH_Program_DoubleWord+0x60>)
 8022db6:	691b      	ldr	r3, [r3, #16]
 8022db8:	4a0d      	ldr	r2, [pc, #52]	; (8022df0 <FLASH_Program_DoubleWord+0x60>)
 8022dba:	f043 0301 	orr.w	r3, r3, #1
 8022dbe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8022dc0:	68fb      	ldr	r3, [r7, #12]
 8022dc2:	683a      	ldr	r2, [r7, #0]
 8022dc4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8022dc6:	f3bf 8f6f 	isb	sy
}
 8022dca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8022dcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022dd0:	f04f 0200 	mov.w	r2, #0
 8022dd4:	f04f 0300 	mov.w	r3, #0
 8022dd8:	000a      	movs	r2, r1
 8022dda:	2300      	movs	r3, #0
 8022ddc:	68f9      	ldr	r1, [r7, #12]
 8022dde:	3104      	adds	r1, #4
 8022de0:	4613      	mov	r3, r2
 8022de2:	600b      	str	r3, [r1, #0]
}
 8022de4:	bf00      	nop
 8022de6:	3714      	adds	r7, #20
 8022de8:	46bd      	mov	sp, r7
 8022dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dee:	4770      	bx	lr
 8022df0:	40023c00 	.word	0x40023c00

08022df4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8022df4:	b480      	push	{r7}
 8022df6:	b083      	sub	sp, #12
 8022df8:	af00      	add	r7, sp, #0
 8022dfa:	6078      	str	r0, [r7, #4]
 8022dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8022dfe:	4b0d      	ldr	r3, [pc, #52]	; (8022e34 <FLASH_Program_Word+0x40>)
 8022e00:	691b      	ldr	r3, [r3, #16]
 8022e02:	4a0c      	ldr	r2, [pc, #48]	; (8022e34 <FLASH_Program_Word+0x40>)
 8022e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022e08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8022e0a:	4b0a      	ldr	r3, [pc, #40]	; (8022e34 <FLASH_Program_Word+0x40>)
 8022e0c:	691b      	ldr	r3, [r3, #16]
 8022e0e:	4a09      	ldr	r2, [pc, #36]	; (8022e34 <FLASH_Program_Word+0x40>)
 8022e10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8022e14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8022e16:	4b07      	ldr	r3, [pc, #28]	; (8022e34 <FLASH_Program_Word+0x40>)
 8022e18:	691b      	ldr	r3, [r3, #16]
 8022e1a:	4a06      	ldr	r2, [pc, #24]	; (8022e34 <FLASH_Program_Word+0x40>)
 8022e1c:	f043 0301 	orr.w	r3, r3, #1
 8022e20:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8022e22:	687b      	ldr	r3, [r7, #4]
 8022e24:	683a      	ldr	r2, [r7, #0]
 8022e26:	601a      	str	r2, [r3, #0]
}
 8022e28:	bf00      	nop
 8022e2a:	370c      	adds	r7, #12
 8022e2c:	46bd      	mov	sp, r7
 8022e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e32:	4770      	bx	lr
 8022e34:	40023c00 	.word	0x40023c00

08022e38 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8022e38:	b480      	push	{r7}
 8022e3a:	b083      	sub	sp, #12
 8022e3c:	af00      	add	r7, sp, #0
 8022e3e:	6078      	str	r0, [r7, #4]
 8022e40:	460b      	mov	r3, r1
 8022e42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8022e44:	4b0d      	ldr	r3, [pc, #52]	; (8022e7c <FLASH_Program_HalfWord+0x44>)
 8022e46:	691b      	ldr	r3, [r3, #16]
 8022e48:	4a0c      	ldr	r2, [pc, #48]	; (8022e7c <FLASH_Program_HalfWord+0x44>)
 8022e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022e4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8022e50:	4b0a      	ldr	r3, [pc, #40]	; (8022e7c <FLASH_Program_HalfWord+0x44>)
 8022e52:	691b      	ldr	r3, [r3, #16]
 8022e54:	4a09      	ldr	r2, [pc, #36]	; (8022e7c <FLASH_Program_HalfWord+0x44>)
 8022e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022e5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8022e5c:	4b07      	ldr	r3, [pc, #28]	; (8022e7c <FLASH_Program_HalfWord+0x44>)
 8022e5e:	691b      	ldr	r3, [r3, #16]
 8022e60:	4a06      	ldr	r2, [pc, #24]	; (8022e7c <FLASH_Program_HalfWord+0x44>)
 8022e62:	f043 0301 	orr.w	r3, r3, #1
 8022e66:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8022e68:	687b      	ldr	r3, [r7, #4]
 8022e6a:	887a      	ldrh	r2, [r7, #2]
 8022e6c:	801a      	strh	r2, [r3, #0]
}
 8022e6e:	bf00      	nop
 8022e70:	370c      	adds	r7, #12
 8022e72:	46bd      	mov	sp, r7
 8022e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e78:	4770      	bx	lr
 8022e7a:	bf00      	nop
 8022e7c:	40023c00 	.word	0x40023c00

08022e80 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8022e80:	b480      	push	{r7}
 8022e82:	b083      	sub	sp, #12
 8022e84:	af00      	add	r7, sp, #0
 8022e86:	6078      	str	r0, [r7, #4]
 8022e88:	460b      	mov	r3, r1
 8022e8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8022e8c:	4b0c      	ldr	r3, [pc, #48]	; (8022ec0 <FLASH_Program_Byte+0x40>)
 8022e8e:	691b      	ldr	r3, [r3, #16]
 8022e90:	4a0b      	ldr	r2, [pc, #44]	; (8022ec0 <FLASH_Program_Byte+0x40>)
 8022e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022e96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8022e98:	4b09      	ldr	r3, [pc, #36]	; (8022ec0 <FLASH_Program_Byte+0x40>)
 8022e9a:	4a09      	ldr	r2, [pc, #36]	; (8022ec0 <FLASH_Program_Byte+0x40>)
 8022e9c:	691b      	ldr	r3, [r3, #16]
 8022e9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8022ea0:	4b07      	ldr	r3, [pc, #28]	; (8022ec0 <FLASH_Program_Byte+0x40>)
 8022ea2:	691b      	ldr	r3, [r3, #16]
 8022ea4:	4a06      	ldr	r2, [pc, #24]	; (8022ec0 <FLASH_Program_Byte+0x40>)
 8022ea6:	f043 0301 	orr.w	r3, r3, #1
 8022eaa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8022eac:	687b      	ldr	r3, [r7, #4]
 8022eae:	78fa      	ldrb	r2, [r7, #3]
 8022eb0:	701a      	strb	r2, [r3, #0]
}
 8022eb2:	bf00      	nop
 8022eb4:	370c      	adds	r7, #12
 8022eb6:	46bd      	mov	sp, r7
 8022eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ebc:	4770      	bx	lr
 8022ebe:	bf00      	nop
 8022ec0:	40023c00 	.word	0x40023c00

08022ec4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8022ec4:	b480      	push	{r7}
 8022ec6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8022ec8:	4b27      	ldr	r3, [pc, #156]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022eca:	68db      	ldr	r3, [r3, #12]
 8022ecc:	f003 0310 	and.w	r3, r3, #16
 8022ed0:	2b00      	cmp	r3, #0
 8022ed2:	d008      	beq.n	8022ee6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8022ed4:	4b25      	ldr	r3, [pc, #148]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022ed6:	69db      	ldr	r3, [r3, #28]
 8022ed8:	f043 0310 	orr.w	r3, r3, #16
 8022edc:	4a23      	ldr	r2, [pc, #140]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022ede:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8022ee0:	4b21      	ldr	r3, [pc, #132]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022ee2:	2210      	movs	r2, #16
 8022ee4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8022ee6:	4b20      	ldr	r3, [pc, #128]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022ee8:	68db      	ldr	r3, [r3, #12]
 8022eea:	f003 0320 	and.w	r3, r3, #32
 8022eee:	2b00      	cmp	r3, #0
 8022ef0:	d008      	beq.n	8022f04 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8022ef2:	4b1e      	ldr	r3, [pc, #120]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022ef4:	69db      	ldr	r3, [r3, #28]
 8022ef6:	f043 0308 	orr.w	r3, r3, #8
 8022efa:	4a1c      	ldr	r2, [pc, #112]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022efc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8022efe:	4b1a      	ldr	r3, [pc, #104]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f00:	2220      	movs	r2, #32
 8022f02:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8022f04:	4b18      	ldr	r3, [pc, #96]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f06:	68db      	ldr	r3, [r3, #12]
 8022f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022f0c:	2b00      	cmp	r3, #0
 8022f0e:	d008      	beq.n	8022f22 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8022f10:	4b16      	ldr	r3, [pc, #88]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022f12:	69db      	ldr	r3, [r3, #28]
 8022f14:	f043 0304 	orr.w	r3, r3, #4
 8022f18:	4a14      	ldr	r2, [pc, #80]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022f1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8022f1c:	4b12      	ldr	r3, [pc, #72]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f1e:	2240      	movs	r2, #64	; 0x40
 8022f20:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8022f22:	4b11      	ldr	r3, [pc, #68]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f24:	68db      	ldr	r3, [r3, #12]
 8022f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022f2a:	2b00      	cmp	r3, #0
 8022f2c:	d008      	beq.n	8022f40 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8022f2e:	4b0f      	ldr	r3, [pc, #60]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022f30:	69db      	ldr	r3, [r3, #28]
 8022f32:	f043 0302 	orr.w	r3, r3, #2
 8022f36:	4a0d      	ldr	r2, [pc, #52]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022f38:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8022f3a:	4b0b      	ldr	r3, [pc, #44]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f3c:	2280      	movs	r2, #128	; 0x80
 8022f3e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8022f40:	4b09      	ldr	r3, [pc, #36]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f42:	68db      	ldr	r3, [r3, #12]
 8022f44:	f003 0302 	and.w	r3, r3, #2
 8022f48:	2b00      	cmp	r3, #0
 8022f4a:	d008      	beq.n	8022f5e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8022f4c:	4b07      	ldr	r3, [pc, #28]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022f4e:	69db      	ldr	r3, [r3, #28]
 8022f50:	f043 0320 	orr.w	r3, r3, #32
 8022f54:	4a05      	ldr	r2, [pc, #20]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022f56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8022f58:	4b03      	ldr	r3, [pc, #12]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f5a:	2202      	movs	r2, #2
 8022f5c:	60da      	str	r2, [r3, #12]
  }
}
 8022f5e:	bf00      	nop
 8022f60:	46bd      	mov	sp, r7
 8022f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f66:	4770      	bx	lr
 8022f68:	40023c00 	.word	0x40023c00
 8022f6c:	20001268 	.word	0x20001268

08022f70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8022f70:	b580      	push	{r7, lr}
 8022f72:	b084      	sub	sp, #16
 8022f74:	af00      	add	r7, sp, #0
 8022f76:	6078      	str	r0, [r7, #4]
 8022f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8022f7a:	2301      	movs	r3, #1
 8022f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8022f7e:	2300      	movs	r3, #0
 8022f80:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8022f82:	4b31      	ldr	r3, [pc, #196]	; (8023048 <HAL_FLASHEx_Erase+0xd8>)
 8022f84:	7e1b      	ldrb	r3, [r3, #24]
 8022f86:	2b01      	cmp	r3, #1
 8022f88:	d101      	bne.n	8022f8e <HAL_FLASHEx_Erase+0x1e>
 8022f8a:	2302      	movs	r3, #2
 8022f8c:	e058      	b.n	8023040 <HAL_FLASHEx_Erase+0xd0>
 8022f8e:	4b2e      	ldr	r3, [pc, #184]	; (8023048 <HAL_FLASHEx_Erase+0xd8>)
 8022f90:	2201      	movs	r2, #1
 8022f92:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022f94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022f98:	f7ff feba 	bl	8022d10 <FLASH_WaitForLastOperation>
 8022f9c:	4603      	mov	r3, r0
 8022f9e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8022fa0:	7bfb      	ldrb	r3, [r7, #15]
 8022fa2:	2b00      	cmp	r3, #0
 8022fa4:	d148      	bne.n	8023038 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8022fa6:	683b      	ldr	r3, [r7, #0]
 8022fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8022fac:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8022fae:	687b      	ldr	r3, [r7, #4]
 8022fb0:	681b      	ldr	r3, [r3, #0]
 8022fb2:	2b01      	cmp	r3, #1
 8022fb4:	d115      	bne.n	8022fe2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	691b      	ldr	r3, [r3, #16]
 8022fba:	b2da      	uxtb	r2, r3
 8022fbc:	687b      	ldr	r3, [r7, #4]
 8022fbe:	685b      	ldr	r3, [r3, #4]
 8022fc0:	4619      	mov	r1, r3
 8022fc2:	4610      	mov	r0, r2
 8022fc4:	f000 f844 	bl	8023050 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022fc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022fcc:	f7ff fea0 	bl	8022d10 <FLASH_WaitForLastOperation>
 8022fd0:	4603      	mov	r3, r0
 8022fd2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8022fd4:	4b1d      	ldr	r3, [pc, #116]	; (802304c <HAL_FLASHEx_Erase+0xdc>)
 8022fd6:	691b      	ldr	r3, [r3, #16]
 8022fd8:	4a1c      	ldr	r2, [pc, #112]	; (802304c <HAL_FLASHEx_Erase+0xdc>)
 8022fda:	f023 0304 	bic.w	r3, r3, #4
 8022fde:	6113      	str	r3, [r2, #16]
 8022fe0:	e028      	b.n	8023034 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8022fe2:	687b      	ldr	r3, [r7, #4]
 8022fe4:	689b      	ldr	r3, [r3, #8]
 8022fe6:	60bb      	str	r3, [r7, #8]
 8022fe8:	e01c      	b.n	8023024 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8022fea:	687b      	ldr	r3, [r7, #4]
 8022fec:	691b      	ldr	r3, [r3, #16]
 8022fee:	b2db      	uxtb	r3, r3
 8022ff0:	4619      	mov	r1, r3
 8022ff2:	68b8      	ldr	r0, [r7, #8]
 8022ff4:	f000 f850 	bl	8023098 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022ff8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022ffc:	f7ff fe88 	bl	8022d10 <FLASH_WaitForLastOperation>
 8023000:	4603      	mov	r3, r0
 8023002:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8023004:	4b11      	ldr	r3, [pc, #68]	; (802304c <HAL_FLASHEx_Erase+0xdc>)
 8023006:	691b      	ldr	r3, [r3, #16]
 8023008:	4a10      	ldr	r2, [pc, #64]	; (802304c <HAL_FLASHEx_Erase+0xdc>)
 802300a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 802300e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8023010:	7bfb      	ldrb	r3, [r7, #15]
 8023012:	2b00      	cmp	r3, #0
 8023014:	d003      	beq.n	802301e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8023016:	683b      	ldr	r3, [r7, #0]
 8023018:	68ba      	ldr	r2, [r7, #8]
 802301a:	601a      	str	r2, [r3, #0]
          break;
 802301c:	e00a      	b.n	8023034 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802301e:	68bb      	ldr	r3, [r7, #8]
 8023020:	3301      	adds	r3, #1
 8023022:	60bb      	str	r3, [r7, #8]
 8023024:	687b      	ldr	r3, [r7, #4]
 8023026:	68da      	ldr	r2, [r3, #12]
 8023028:	687b      	ldr	r3, [r7, #4]
 802302a:	689b      	ldr	r3, [r3, #8]
 802302c:	4413      	add	r3, r2
 802302e:	68ba      	ldr	r2, [r7, #8]
 8023030:	429a      	cmp	r2, r3
 8023032:	d3da      	bcc.n	8022fea <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8023034:	f000 f878 	bl	8023128 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8023038:	4b03      	ldr	r3, [pc, #12]	; (8023048 <HAL_FLASHEx_Erase+0xd8>)
 802303a:	2200      	movs	r2, #0
 802303c:	761a      	strb	r2, [r3, #24]

  return status;
 802303e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023040:	4618      	mov	r0, r3
 8023042:	3710      	adds	r7, #16
 8023044:	46bd      	mov	sp, r7
 8023046:	bd80      	pop	{r7, pc}
 8023048:	20001268 	.word	0x20001268
 802304c:	40023c00 	.word	0x40023c00

08023050 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8023050:	b480      	push	{r7}
 8023052:	b083      	sub	sp, #12
 8023054:	af00      	add	r7, sp, #0
 8023056:	4603      	mov	r3, r0
 8023058:	6039      	str	r1, [r7, #0]
 802305a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802305c:	4b0d      	ldr	r3, [pc, #52]	; (8023094 <FLASH_MassErase+0x44>)
 802305e:	691b      	ldr	r3, [r3, #16]
 8023060:	4a0c      	ldr	r2, [pc, #48]	; (8023094 <FLASH_MassErase+0x44>)
 8023062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023066:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8023068:	4b0a      	ldr	r3, [pc, #40]	; (8023094 <FLASH_MassErase+0x44>)
 802306a:	691b      	ldr	r3, [r3, #16]
 802306c:	4a09      	ldr	r2, [pc, #36]	; (8023094 <FLASH_MassErase+0x44>)
 802306e:	f043 0304 	orr.w	r3, r3, #4
 8023072:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8023074:	4b07      	ldr	r3, [pc, #28]	; (8023094 <FLASH_MassErase+0x44>)
 8023076:	691a      	ldr	r2, [r3, #16]
 8023078:	79fb      	ldrb	r3, [r7, #7]
 802307a:	021b      	lsls	r3, r3, #8
 802307c:	4313      	orrs	r3, r2
 802307e:	4a05      	ldr	r2, [pc, #20]	; (8023094 <FLASH_MassErase+0x44>)
 8023080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023084:	6113      	str	r3, [r2, #16]
}
 8023086:	bf00      	nop
 8023088:	370c      	adds	r7, #12
 802308a:	46bd      	mov	sp, r7
 802308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023090:	4770      	bx	lr
 8023092:	bf00      	nop
 8023094:	40023c00 	.word	0x40023c00

08023098 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8023098:	b480      	push	{r7}
 802309a:	b085      	sub	sp, #20
 802309c:	af00      	add	r7, sp, #0
 802309e:	6078      	str	r0, [r7, #4]
 80230a0:	460b      	mov	r3, r1
 80230a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80230a4:	2300      	movs	r3, #0
 80230a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80230a8:	78fb      	ldrb	r3, [r7, #3]
 80230aa:	2b00      	cmp	r3, #0
 80230ac:	d102      	bne.n	80230b4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80230ae:	2300      	movs	r3, #0
 80230b0:	60fb      	str	r3, [r7, #12]
 80230b2:	e010      	b.n	80230d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80230b4:	78fb      	ldrb	r3, [r7, #3]
 80230b6:	2b01      	cmp	r3, #1
 80230b8:	d103      	bne.n	80230c2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80230ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80230be:	60fb      	str	r3, [r7, #12]
 80230c0:	e009      	b.n	80230d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80230c2:	78fb      	ldrb	r3, [r7, #3]
 80230c4:	2b02      	cmp	r3, #2
 80230c6:	d103      	bne.n	80230d0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80230c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80230cc:	60fb      	str	r3, [r7, #12]
 80230ce:	e002      	b.n	80230d6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80230d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80230d4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80230d6:	4b13      	ldr	r3, [pc, #76]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230d8:	691b      	ldr	r3, [r3, #16]
 80230da:	4a12      	ldr	r2, [pc, #72]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80230e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80230e2:	4b10      	ldr	r3, [pc, #64]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230e4:	691a      	ldr	r2, [r3, #16]
 80230e6:	490f      	ldr	r1, [pc, #60]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230e8:	68fb      	ldr	r3, [r7, #12]
 80230ea:	4313      	orrs	r3, r2
 80230ec:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80230ee:	4b0d      	ldr	r3, [pc, #52]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230f0:	691b      	ldr	r3, [r3, #16]
 80230f2:	4a0c      	ldr	r2, [pc, #48]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80230f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80230fa:	4b0a      	ldr	r3, [pc, #40]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230fc:	691a      	ldr	r2, [r3, #16]
 80230fe:	687b      	ldr	r3, [r7, #4]
 8023100:	00db      	lsls	r3, r3, #3
 8023102:	4313      	orrs	r3, r2
 8023104:	4a07      	ldr	r2, [pc, #28]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 8023106:	f043 0302 	orr.w	r3, r3, #2
 802310a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 802310c:	4b05      	ldr	r3, [pc, #20]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 802310e:	691b      	ldr	r3, [r3, #16]
 8023110:	4a04      	ldr	r2, [pc, #16]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 8023112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023116:	6113      	str	r3, [r2, #16]
}
 8023118:	bf00      	nop
 802311a:	3714      	adds	r7, #20
 802311c:	46bd      	mov	sp, r7
 802311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023122:	4770      	bx	lr
 8023124:	40023c00 	.word	0x40023c00

08023128 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8023128:	b480      	push	{r7}
 802312a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 802312c:	4b20      	ldr	r3, [pc, #128]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802312e:	681b      	ldr	r3, [r3, #0]
 8023130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8023134:	2b00      	cmp	r3, #0
 8023136:	d017      	beq.n	8023168 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8023138:	4b1d      	ldr	r3, [pc, #116]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802313a:	681b      	ldr	r3, [r3, #0]
 802313c:	4a1c      	ldr	r2, [pc, #112]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802313e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8023142:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8023144:	4b1a      	ldr	r3, [pc, #104]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023146:	681b      	ldr	r3, [r3, #0]
 8023148:	4a19      	ldr	r2, [pc, #100]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802314a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802314e:	6013      	str	r3, [r2, #0]
 8023150:	4b17      	ldr	r3, [pc, #92]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023152:	681b      	ldr	r3, [r3, #0]
 8023154:	4a16      	ldr	r2, [pc, #88]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802315a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802315c:	4b14      	ldr	r3, [pc, #80]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802315e:	681b      	ldr	r3, [r3, #0]
 8023160:	4a13      	ldr	r2, [pc, #76]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8023166:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8023168:	4b11      	ldr	r3, [pc, #68]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802316a:	681b      	ldr	r3, [r3, #0]
 802316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023170:	2b00      	cmp	r3, #0
 8023172:	d017      	beq.n	80231a4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8023174:	4b0e      	ldr	r3, [pc, #56]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023176:	681b      	ldr	r3, [r3, #0]
 8023178:	4a0d      	ldr	r2, [pc, #52]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802317a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802317e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8023180:	4b0b      	ldr	r3, [pc, #44]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023182:	681b      	ldr	r3, [r3, #0]
 8023184:	4a0a      	ldr	r2, [pc, #40]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023186:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802318a:	6013      	str	r3, [r2, #0]
 802318c:	4b08      	ldr	r3, [pc, #32]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802318e:	681b      	ldr	r3, [r3, #0]
 8023190:	4a07      	ldr	r2, [pc, #28]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023196:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8023198:	4b05      	ldr	r3, [pc, #20]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802319a:	681b      	ldr	r3, [r3, #0]
 802319c:	4a04      	ldr	r2, [pc, #16]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802319e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80231a2:	6013      	str	r3, [r2, #0]
  }
}
 80231a4:	bf00      	nop
 80231a6:	46bd      	mov	sp, r7
 80231a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231ac:	4770      	bx	lr
 80231ae:	bf00      	nop
 80231b0:	40023c00 	.word	0x40023c00

080231b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80231b4:	b480      	push	{r7}
 80231b6:	b089      	sub	sp, #36	; 0x24
 80231b8:	af00      	add	r7, sp, #0
 80231ba:	6078      	str	r0, [r7, #4]
 80231bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80231be:	2300      	movs	r3, #0
 80231c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80231c2:	2300      	movs	r3, #0
 80231c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80231c6:	2300      	movs	r3, #0
 80231c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80231ca:	2300      	movs	r3, #0
 80231cc:	61fb      	str	r3, [r7, #28]
 80231ce:	e16b      	b.n	80234a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80231d0:	2201      	movs	r2, #1
 80231d2:	69fb      	ldr	r3, [r7, #28]
 80231d4:	fa02 f303 	lsl.w	r3, r2, r3
 80231d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80231da:	683b      	ldr	r3, [r7, #0]
 80231dc:	681b      	ldr	r3, [r3, #0]
 80231de:	697a      	ldr	r2, [r7, #20]
 80231e0:	4013      	ands	r3, r2
 80231e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80231e4:	693a      	ldr	r2, [r7, #16]
 80231e6:	697b      	ldr	r3, [r7, #20]
 80231e8:	429a      	cmp	r2, r3
 80231ea:	f040 815a 	bne.w	80234a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80231ee:	683b      	ldr	r3, [r7, #0]
 80231f0:	685b      	ldr	r3, [r3, #4]
 80231f2:	2b01      	cmp	r3, #1
 80231f4:	d00b      	beq.n	802320e <HAL_GPIO_Init+0x5a>
 80231f6:	683b      	ldr	r3, [r7, #0]
 80231f8:	685b      	ldr	r3, [r3, #4]
 80231fa:	2b02      	cmp	r3, #2
 80231fc:	d007      	beq.n	802320e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80231fe:	683b      	ldr	r3, [r7, #0]
 8023200:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8023202:	2b11      	cmp	r3, #17
 8023204:	d003      	beq.n	802320e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8023206:	683b      	ldr	r3, [r7, #0]
 8023208:	685b      	ldr	r3, [r3, #4]
 802320a:	2b12      	cmp	r3, #18
 802320c:	d130      	bne.n	8023270 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802320e:	687b      	ldr	r3, [r7, #4]
 8023210:	689b      	ldr	r3, [r3, #8]
 8023212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8023214:	69fb      	ldr	r3, [r7, #28]
 8023216:	005b      	lsls	r3, r3, #1
 8023218:	2203      	movs	r2, #3
 802321a:	fa02 f303 	lsl.w	r3, r2, r3
 802321e:	43db      	mvns	r3, r3
 8023220:	69ba      	ldr	r2, [r7, #24]
 8023222:	4013      	ands	r3, r2
 8023224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8023226:	683b      	ldr	r3, [r7, #0]
 8023228:	68da      	ldr	r2, [r3, #12]
 802322a:	69fb      	ldr	r3, [r7, #28]
 802322c:	005b      	lsls	r3, r3, #1
 802322e:	fa02 f303 	lsl.w	r3, r2, r3
 8023232:	69ba      	ldr	r2, [r7, #24]
 8023234:	4313      	orrs	r3, r2
 8023236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8023238:	687b      	ldr	r3, [r7, #4]
 802323a:	69ba      	ldr	r2, [r7, #24]
 802323c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802323e:	687b      	ldr	r3, [r7, #4]
 8023240:	685b      	ldr	r3, [r3, #4]
 8023242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8023244:	2201      	movs	r2, #1
 8023246:	69fb      	ldr	r3, [r7, #28]
 8023248:	fa02 f303 	lsl.w	r3, r2, r3
 802324c:	43db      	mvns	r3, r3
 802324e:	69ba      	ldr	r2, [r7, #24]
 8023250:	4013      	ands	r3, r2
 8023252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8023254:	683b      	ldr	r3, [r7, #0]
 8023256:	685b      	ldr	r3, [r3, #4]
 8023258:	091b      	lsrs	r3, r3, #4
 802325a:	f003 0201 	and.w	r2, r3, #1
 802325e:	69fb      	ldr	r3, [r7, #28]
 8023260:	fa02 f303 	lsl.w	r3, r2, r3
 8023264:	69ba      	ldr	r2, [r7, #24]
 8023266:	4313      	orrs	r3, r2
 8023268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802326a:	687b      	ldr	r3, [r7, #4]
 802326c:	69ba      	ldr	r2, [r7, #24]
 802326e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8023270:	687b      	ldr	r3, [r7, #4]
 8023272:	68db      	ldr	r3, [r3, #12]
 8023274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8023276:	69fb      	ldr	r3, [r7, #28]
 8023278:	005b      	lsls	r3, r3, #1
 802327a:	2203      	movs	r2, #3
 802327c:	fa02 f303 	lsl.w	r3, r2, r3
 8023280:	43db      	mvns	r3, r3
 8023282:	69ba      	ldr	r2, [r7, #24]
 8023284:	4013      	ands	r3, r2
 8023286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8023288:	683b      	ldr	r3, [r7, #0]
 802328a:	689a      	ldr	r2, [r3, #8]
 802328c:	69fb      	ldr	r3, [r7, #28]
 802328e:	005b      	lsls	r3, r3, #1
 8023290:	fa02 f303 	lsl.w	r3, r2, r3
 8023294:	69ba      	ldr	r2, [r7, #24]
 8023296:	4313      	orrs	r3, r2
 8023298:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	69ba      	ldr	r2, [r7, #24]
 802329e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80232a0:	683b      	ldr	r3, [r7, #0]
 80232a2:	685b      	ldr	r3, [r3, #4]
 80232a4:	2b02      	cmp	r3, #2
 80232a6:	d003      	beq.n	80232b0 <HAL_GPIO_Init+0xfc>
 80232a8:	683b      	ldr	r3, [r7, #0]
 80232aa:	685b      	ldr	r3, [r3, #4]
 80232ac:	2b12      	cmp	r3, #18
 80232ae:	d123      	bne.n	80232f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80232b0:	69fb      	ldr	r3, [r7, #28]
 80232b2:	08da      	lsrs	r2, r3, #3
 80232b4:	687b      	ldr	r3, [r7, #4]
 80232b6:	3208      	adds	r2, #8
 80232b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80232bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80232be:	69fb      	ldr	r3, [r7, #28]
 80232c0:	f003 0307 	and.w	r3, r3, #7
 80232c4:	009b      	lsls	r3, r3, #2
 80232c6:	220f      	movs	r2, #15
 80232c8:	fa02 f303 	lsl.w	r3, r2, r3
 80232cc:	43db      	mvns	r3, r3
 80232ce:	69ba      	ldr	r2, [r7, #24]
 80232d0:	4013      	ands	r3, r2
 80232d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80232d4:	683b      	ldr	r3, [r7, #0]
 80232d6:	691a      	ldr	r2, [r3, #16]
 80232d8:	69fb      	ldr	r3, [r7, #28]
 80232da:	f003 0307 	and.w	r3, r3, #7
 80232de:	009b      	lsls	r3, r3, #2
 80232e0:	fa02 f303 	lsl.w	r3, r2, r3
 80232e4:	69ba      	ldr	r2, [r7, #24]
 80232e6:	4313      	orrs	r3, r2
 80232e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80232ea:	69fb      	ldr	r3, [r7, #28]
 80232ec:	08da      	lsrs	r2, r3, #3
 80232ee:	687b      	ldr	r3, [r7, #4]
 80232f0:	3208      	adds	r2, #8
 80232f2:	69b9      	ldr	r1, [r7, #24]
 80232f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80232f8:	687b      	ldr	r3, [r7, #4]
 80232fa:	681b      	ldr	r3, [r3, #0]
 80232fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80232fe:	69fb      	ldr	r3, [r7, #28]
 8023300:	005b      	lsls	r3, r3, #1
 8023302:	2203      	movs	r2, #3
 8023304:	fa02 f303 	lsl.w	r3, r2, r3
 8023308:	43db      	mvns	r3, r3
 802330a:	69ba      	ldr	r2, [r7, #24]
 802330c:	4013      	ands	r3, r2
 802330e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8023310:	683b      	ldr	r3, [r7, #0]
 8023312:	685b      	ldr	r3, [r3, #4]
 8023314:	f003 0203 	and.w	r2, r3, #3
 8023318:	69fb      	ldr	r3, [r7, #28]
 802331a:	005b      	lsls	r3, r3, #1
 802331c:	fa02 f303 	lsl.w	r3, r2, r3
 8023320:	69ba      	ldr	r2, [r7, #24]
 8023322:	4313      	orrs	r3, r2
 8023324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8023326:	687b      	ldr	r3, [r7, #4]
 8023328:	69ba      	ldr	r2, [r7, #24]
 802332a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 802332c:	683b      	ldr	r3, [r7, #0]
 802332e:	685b      	ldr	r3, [r3, #4]
 8023330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023334:	2b00      	cmp	r3, #0
 8023336:	f000 80b4 	beq.w	80234a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802333a:	2300      	movs	r3, #0
 802333c:	60fb      	str	r3, [r7, #12]
 802333e:	4b60      	ldr	r3, [pc, #384]	; (80234c0 <HAL_GPIO_Init+0x30c>)
 8023340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023342:	4a5f      	ldr	r2, [pc, #380]	; (80234c0 <HAL_GPIO_Init+0x30c>)
 8023344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023348:	6453      	str	r3, [r2, #68]	; 0x44
 802334a:	4b5d      	ldr	r3, [pc, #372]	; (80234c0 <HAL_GPIO_Init+0x30c>)
 802334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802334e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023352:	60fb      	str	r3, [r7, #12]
 8023354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8023356:	4a5b      	ldr	r2, [pc, #364]	; (80234c4 <HAL_GPIO_Init+0x310>)
 8023358:	69fb      	ldr	r3, [r7, #28]
 802335a:	089b      	lsrs	r3, r3, #2
 802335c:	3302      	adds	r3, #2
 802335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8023364:	69fb      	ldr	r3, [r7, #28]
 8023366:	f003 0303 	and.w	r3, r3, #3
 802336a:	009b      	lsls	r3, r3, #2
 802336c:	220f      	movs	r2, #15
 802336e:	fa02 f303 	lsl.w	r3, r2, r3
 8023372:	43db      	mvns	r3, r3
 8023374:	69ba      	ldr	r2, [r7, #24]
 8023376:	4013      	ands	r3, r2
 8023378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802337a:	687b      	ldr	r3, [r7, #4]
 802337c:	4a52      	ldr	r2, [pc, #328]	; (80234c8 <HAL_GPIO_Init+0x314>)
 802337e:	4293      	cmp	r3, r2
 8023380:	d02b      	beq.n	80233da <HAL_GPIO_Init+0x226>
 8023382:	687b      	ldr	r3, [r7, #4]
 8023384:	4a51      	ldr	r2, [pc, #324]	; (80234cc <HAL_GPIO_Init+0x318>)
 8023386:	4293      	cmp	r3, r2
 8023388:	d025      	beq.n	80233d6 <HAL_GPIO_Init+0x222>
 802338a:	687b      	ldr	r3, [r7, #4]
 802338c:	4a50      	ldr	r2, [pc, #320]	; (80234d0 <HAL_GPIO_Init+0x31c>)
 802338e:	4293      	cmp	r3, r2
 8023390:	d01f      	beq.n	80233d2 <HAL_GPIO_Init+0x21e>
 8023392:	687b      	ldr	r3, [r7, #4]
 8023394:	4a4f      	ldr	r2, [pc, #316]	; (80234d4 <HAL_GPIO_Init+0x320>)
 8023396:	4293      	cmp	r3, r2
 8023398:	d019      	beq.n	80233ce <HAL_GPIO_Init+0x21a>
 802339a:	687b      	ldr	r3, [r7, #4]
 802339c:	4a4e      	ldr	r2, [pc, #312]	; (80234d8 <HAL_GPIO_Init+0x324>)
 802339e:	4293      	cmp	r3, r2
 80233a0:	d013      	beq.n	80233ca <HAL_GPIO_Init+0x216>
 80233a2:	687b      	ldr	r3, [r7, #4]
 80233a4:	4a4d      	ldr	r2, [pc, #308]	; (80234dc <HAL_GPIO_Init+0x328>)
 80233a6:	4293      	cmp	r3, r2
 80233a8:	d00d      	beq.n	80233c6 <HAL_GPIO_Init+0x212>
 80233aa:	687b      	ldr	r3, [r7, #4]
 80233ac:	4a4c      	ldr	r2, [pc, #304]	; (80234e0 <HAL_GPIO_Init+0x32c>)
 80233ae:	4293      	cmp	r3, r2
 80233b0:	d007      	beq.n	80233c2 <HAL_GPIO_Init+0x20e>
 80233b2:	687b      	ldr	r3, [r7, #4]
 80233b4:	4a4b      	ldr	r2, [pc, #300]	; (80234e4 <HAL_GPIO_Init+0x330>)
 80233b6:	4293      	cmp	r3, r2
 80233b8:	d101      	bne.n	80233be <HAL_GPIO_Init+0x20a>
 80233ba:	2307      	movs	r3, #7
 80233bc:	e00e      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233be:	2308      	movs	r3, #8
 80233c0:	e00c      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233c2:	2306      	movs	r3, #6
 80233c4:	e00a      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233c6:	2305      	movs	r3, #5
 80233c8:	e008      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233ca:	2304      	movs	r3, #4
 80233cc:	e006      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233ce:	2303      	movs	r3, #3
 80233d0:	e004      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233d2:	2302      	movs	r3, #2
 80233d4:	e002      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233d6:	2301      	movs	r3, #1
 80233d8:	e000      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233da:	2300      	movs	r3, #0
 80233dc:	69fa      	ldr	r2, [r7, #28]
 80233de:	f002 0203 	and.w	r2, r2, #3
 80233e2:	0092      	lsls	r2, r2, #2
 80233e4:	4093      	lsls	r3, r2
 80233e6:	69ba      	ldr	r2, [r7, #24]
 80233e8:	4313      	orrs	r3, r2
 80233ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80233ec:	4935      	ldr	r1, [pc, #212]	; (80234c4 <HAL_GPIO_Init+0x310>)
 80233ee:	69fb      	ldr	r3, [r7, #28]
 80233f0:	089b      	lsrs	r3, r3, #2
 80233f2:	3302      	adds	r3, #2
 80233f4:	69ba      	ldr	r2, [r7, #24]
 80233f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80233fa:	4b3b      	ldr	r3, [pc, #236]	; (80234e8 <HAL_GPIO_Init+0x334>)
 80233fc:	681b      	ldr	r3, [r3, #0]
 80233fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023400:	693b      	ldr	r3, [r7, #16]
 8023402:	43db      	mvns	r3, r3
 8023404:	69ba      	ldr	r2, [r7, #24]
 8023406:	4013      	ands	r3, r2
 8023408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 802340a:	683b      	ldr	r3, [r7, #0]
 802340c:	685b      	ldr	r3, [r3, #4]
 802340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023412:	2b00      	cmp	r3, #0
 8023414:	d003      	beq.n	802341e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8023416:	69ba      	ldr	r2, [r7, #24]
 8023418:	693b      	ldr	r3, [r7, #16]
 802341a:	4313      	orrs	r3, r2
 802341c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802341e:	4a32      	ldr	r2, [pc, #200]	; (80234e8 <HAL_GPIO_Init+0x334>)
 8023420:	69bb      	ldr	r3, [r7, #24]
 8023422:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8023424:	4b30      	ldr	r3, [pc, #192]	; (80234e8 <HAL_GPIO_Init+0x334>)
 8023426:	685b      	ldr	r3, [r3, #4]
 8023428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802342a:	693b      	ldr	r3, [r7, #16]
 802342c:	43db      	mvns	r3, r3
 802342e:	69ba      	ldr	r2, [r7, #24]
 8023430:	4013      	ands	r3, r2
 8023432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8023434:	683b      	ldr	r3, [r7, #0]
 8023436:	685b      	ldr	r3, [r3, #4]
 8023438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802343c:	2b00      	cmp	r3, #0
 802343e:	d003      	beq.n	8023448 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8023440:	69ba      	ldr	r2, [r7, #24]
 8023442:	693b      	ldr	r3, [r7, #16]
 8023444:	4313      	orrs	r3, r2
 8023446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8023448:	4a27      	ldr	r2, [pc, #156]	; (80234e8 <HAL_GPIO_Init+0x334>)
 802344a:	69bb      	ldr	r3, [r7, #24]
 802344c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802344e:	4b26      	ldr	r3, [pc, #152]	; (80234e8 <HAL_GPIO_Init+0x334>)
 8023450:	689b      	ldr	r3, [r3, #8]
 8023452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023454:	693b      	ldr	r3, [r7, #16]
 8023456:	43db      	mvns	r3, r3
 8023458:	69ba      	ldr	r2, [r7, #24]
 802345a:	4013      	ands	r3, r2
 802345c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 802345e:	683b      	ldr	r3, [r7, #0]
 8023460:	685b      	ldr	r3, [r3, #4]
 8023462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8023466:	2b00      	cmp	r3, #0
 8023468:	d003      	beq.n	8023472 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 802346a:	69ba      	ldr	r2, [r7, #24]
 802346c:	693b      	ldr	r3, [r7, #16]
 802346e:	4313      	orrs	r3, r2
 8023470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8023472:	4a1d      	ldr	r2, [pc, #116]	; (80234e8 <HAL_GPIO_Init+0x334>)
 8023474:	69bb      	ldr	r3, [r7, #24]
 8023476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8023478:	4b1b      	ldr	r3, [pc, #108]	; (80234e8 <HAL_GPIO_Init+0x334>)
 802347a:	68db      	ldr	r3, [r3, #12]
 802347c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802347e:	693b      	ldr	r3, [r7, #16]
 8023480:	43db      	mvns	r3, r3
 8023482:	69ba      	ldr	r2, [r7, #24]
 8023484:	4013      	ands	r3, r2
 8023486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8023488:	683b      	ldr	r3, [r7, #0]
 802348a:	685b      	ldr	r3, [r3, #4]
 802348c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8023490:	2b00      	cmp	r3, #0
 8023492:	d003      	beq.n	802349c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8023494:	69ba      	ldr	r2, [r7, #24]
 8023496:	693b      	ldr	r3, [r7, #16]
 8023498:	4313      	orrs	r3, r2
 802349a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 802349c:	4a12      	ldr	r2, [pc, #72]	; (80234e8 <HAL_GPIO_Init+0x334>)
 802349e:	69bb      	ldr	r3, [r7, #24]
 80234a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80234a2:	69fb      	ldr	r3, [r7, #28]
 80234a4:	3301      	adds	r3, #1
 80234a6:	61fb      	str	r3, [r7, #28]
 80234a8:	69fb      	ldr	r3, [r7, #28]
 80234aa:	2b0f      	cmp	r3, #15
 80234ac:	f67f ae90 	bls.w	80231d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80234b0:	bf00      	nop
 80234b2:	bf00      	nop
 80234b4:	3724      	adds	r7, #36	; 0x24
 80234b6:	46bd      	mov	sp, r7
 80234b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234bc:	4770      	bx	lr
 80234be:	bf00      	nop
 80234c0:	40023800 	.word	0x40023800
 80234c4:	40013800 	.word	0x40013800
 80234c8:	40020000 	.word	0x40020000
 80234cc:	40020400 	.word	0x40020400
 80234d0:	40020800 	.word	0x40020800
 80234d4:	40020c00 	.word	0x40020c00
 80234d8:	40021000 	.word	0x40021000
 80234dc:	40021400 	.word	0x40021400
 80234e0:	40021800 	.word	0x40021800
 80234e4:	40021c00 	.word	0x40021c00
 80234e8:	40013c00 	.word	0x40013c00

080234ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80234ec:	b480      	push	{r7}
 80234ee:	b085      	sub	sp, #20
 80234f0:	af00      	add	r7, sp, #0
 80234f2:	6078      	str	r0, [r7, #4]
 80234f4:	460b      	mov	r3, r1
 80234f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80234f8:	687b      	ldr	r3, [r7, #4]
 80234fa:	691a      	ldr	r2, [r3, #16]
 80234fc:	887b      	ldrh	r3, [r7, #2]
 80234fe:	4013      	ands	r3, r2
 8023500:	2b00      	cmp	r3, #0
 8023502:	d002      	beq.n	802350a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8023504:	2301      	movs	r3, #1
 8023506:	73fb      	strb	r3, [r7, #15]
 8023508:	e001      	b.n	802350e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 802350a:	2300      	movs	r3, #0
 802350c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 802350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023510:	4618      	mov	r0, r3
 8023512:	3714      	adds	r7, #20
 8023514:	46bd      	mov	sp, r7
 8023516:	f85d 7b04 	ldr.w	r7, [sp], #4
 802351a:	4770      	bx	lr

0802351c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802351c:	b480      	push	{r7}
 802351e:	b083      	sub	sp, #12
 8023520:	af00      	add	r7, sp, #0
 8023522:	6078      	str	r0, [r7, #4]
 8023524:	460b      	mov	r3, r1
 8023526:	807b      	strh	r3, [r7, #2]
 8023528:	4613      	mov	r3, r2
 802352a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802352c:	787b      	ldrb	r3, [r7, #1]
 802352e:	2b00      	cmp	r3, #0
 8023530:	d003      	beq.n	802353a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8023532:	887a      	ldrh	r2, [r7, #2]
 8023534:	687b      	ldr	r3, [r7, #4]
 8023536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8023538:	e003      	b.n	8023542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802353a:	887b      	ldrh	r3, [r7, #2]
 802353c:	041a      	lsls	r2, r3, #16
 802353e:	687b      	ldr	r3, [r7, #4]
 8023540:	619a      	str	r2, [r3, #24]
}
 8023542:	bf00      	nop
 8023544:	370c      	adds	r7, #12
 8023546:	46bd      	mov	sp, r7
 8023548:	f85d 7b04 	ldr.w	r7, [sp], #4
 802354c:	4770      	bx	lr

0802354e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 802354e:	b480      	push	{r7}
 8023550:	b083      	sub	sp, #12
 8023552:	af00      	add	r7, sp, #0
 8023554:	6078      	str	r0, [r7, #4]
 8023556:	460b      	mov	r3, r1
 8023558:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	695a      	ldr	r2, [r3, #20]
 802355e:	887b      	ldrh	r3, [r7, #2]
 8023560:	401a      	ands	r2, r3
 8023562:	887b      	ldrh	r3, [r7, #2]
 8023564:	429a      	cmp	r2, r3
 8023566:	d104      	bne.n	8023572 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8023568:	887b      	ldrh	r3, [r7, #2]
 802356a:	041a      	lsls	r2, r3, #16
 802356c:	687b      	ldr	r3, [r7, #4]
 802356e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8023570:	e002      	b.n	8023578 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8023572:	887a      	ldrh	r2, [r7, #2]
 8023574:	687b      	ldr	r3, [r7, #4]
 8023576:	619a      	str	r2, [r3, #24]
}
 8023578:	bf00      	nop
 802357a:	370c      	adds	r7, #12
 802357c:	46bd      	mov	sp, r7
 802357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023582:	4770      	bx	lr

08023584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8023584:	b580      	push	{r7, lr}
 8023586:	b082      	sub	sp, #8
 8023588:	af00      	add	r7, sp, #0
 802358a:	4603      	mov	r3, r0
 802358c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 802358e:	4b08      	ldr	r3, [pc, #32]	; (80235b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8023590:	695a      	ldr	r2, [r3, #20]
 8023592:	88fb      	ldrh	r3, [r7, #6]
 8023594:	4013      	ands	r3, r2
 8023596:	2b00      	cmp	r3, #0
 8023598:	d006      	beq.n	80235a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 802359a:	4a05      	ldr	r2, [pc, #20]	; (80235b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 802359c:	88fb      	ldrh	r3, [r7, #6]
 802359e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80235a0:	88fb      	ldrh	r3, [r7, #6]
 80235a2:	4618      	mov	r0, r3
 80235a4:	f7fc fffa 	bl	802059c <HAL_GPIO_EXTI_Callback>
  }
}
 80235a8:	bf00      	nop
 80235aa:	3708      	adds	r7, #8
 80235ac:	46bd      	mov	sp, r7
 80235ae:	bd80      	pop	{r7, pc}
 80235b0:	40013c00 	.word	0x40013c00

080235b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80235b4:	b580      	push	{r7, lr}
 80235b6:	b084      	sub	sp, #16
 80235b8:	af00      	add	r7, sp, #0
 80235ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80235bc:	687b      	ldr	r3, [r7, #4]
 80235be:	2b00      	cmp	r3, #0
 80235c0:	d101      	bne.n	80235c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80235c2:	2301      	movs	r3, #1
 80235c4:	e12b      	b.n	802381e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80235c6:	687b      	ldr	r3, [r7, #4]
 80235c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80235cc:	b2db      	uxtb	r3, r3
 80235ce:	2b00      	cmp	r3, #0
 80235d0:	d106      	bne.n	80235e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80235d2:	687b      	ldr	r3, [r7, #4]
 80235d4:	2200      	movs	r2, #0
 80235d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80235da:	6878      	ldr	r0, [r7, #4]
 80235dc:	f7fd fd24 	bl	8021028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80235e0:	687b      	ldr	r3, [r7, #4]
 80235e2:	2224      	movs	r2, #36	; 0x24
 80235e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80235e8:	687b      	ldr	r3, [r7, #4]
 80235ea:	681b      	ldr	r3, [r3, #0]
 80235ec:	681a      	ldr	r2, [r3, #0]
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	681b      	ldr	r3, [r3, #0]
 80235f2:	f022 0201 	bic.w	r2, r2, #1
 80235f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80235f8:	687b      	ldr	r3, [r7, #4]
 80235fa:	681b      	ldr	r3, [r3, #0]
 80235fc:	681a      	ldr	r2, [r3, #0]
 80235fe:	687b      	ldr	r3, [r7, #4]
 8023600:	681b      	ldr	r3, [r3, #0]
 8023602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8023606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	681b      	ldr	r3, [r3, #0]
 802360c:	681a      	ldr	r2, [r3, #0]
 802360e:	687b      	ldr	r3, [r7, #4]
 8023610:	681b      	ldr	r3, [r3, #0]
 8023612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8023616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8023618:	f003 ff2c 	bl	8027474 <HAL_RCC_GetPCLK1Freq>
 802361c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802361e:	687b      	ldr	r3, [r7, #4]
 8023620:	685b      	ldr	r3, [r3, #4]
 8023622:	4a81      	ldr	r2, [pc, #516]	; (8023828 <HAL_I2C_Init+0x274>)
 8023624:	4293      	cmp	r3, r2
 8023626:	d807      	bhi.n	8023638 <HAL_I2C_Init+0x84>
 8023628:	68fb      	ldr	r3, [r7, #12]
 802362a:	4a80      	ldr	r2, [pc, #512]	; (802382c <HAL_I2C_Init+0x278>)
 802362c:	4293      	cmp	r3, r2
 802362e:	bf94      	ite	ls
 8023630:	2301      	movls	r3, #1
 8023632:	2300      	movhi	r3, #0
 8023634:	b2db      	uxtb	r3, r3
 8023636:	e006      	b.n	8023646 <HAL_I2C_Init+0x92>
 8023638:	68fb      	ldr	r3, [r7, #12]
 802363a:	4a7d      	ldr	r2, [pc, #500]	; (8023830 <HAL_I2C_Init+0x27c>)
 802363c:	4293      	cmp	r3, r2
 802363e:	bf94      	ite	ls
 8023640:	2301      	movls	r3, #1
 8023642:	2300      	movhi	r3, #0
 8023644:	b2db      	uxtb	r3, r3
 8023646:	2b00      	cmp	r3, #0
 8023648:	d001      	beq.n	802364e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 802364a:	2301      	movs	r3, #1
 802364c:	e0e7      	b.n	802381e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802364e:	68fb      	ldr	r3, [r7, #12]
 8023650:	4a78      	ldr	r2, [pc, #480]	; (8023834 <HAL_I2C_Init+0x280>)
 8023652:	fba2 2303 	umull	r2, r3, r2, r3
 8023656:	0c9b      	lsrs	r3, r3, #18
 8023658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802365a:	687b      	ldr	r3, [r7, #4]
 802365c:	681b      	ldr	r3, [r3, #0]
 802365e:	685b      	ldr	r3, [r3, #4]
 8023660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	681b      	ldr	r3, [r3, #0]
 8023668:	68ba      	ldr	r2, [r7, #8]
 802366a:	430a      	orrs	r2, r1
 802366c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802366e:	687b      	ldr	r3, [r7, #4]
 8023670:	681b      	ldr	r3, [r3, #0]
 8023672:	6a1b      	ldr	r3, [r3, #32]
 8023674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8023678:	687b      	ldr	r3, [r7, #4]
 802367a:	685b      	ldr	r3, [r3, #4]
 802367c:	4a6a      	ldr	r2, [pc, #424]	; (8023828 <HAL_I2C_Init+0x274>)
 802367e:	4293      	cmp	r3, r2
 8023680:	d802      	bhi.n	8023688 <HAL_I2C_Init+0xd4>
 8023682:	68bb      	ldr	r3, [r7, #8]
 8023684:	3301      	adds	r3, #1
 8023686:	e009      	b.n	802369c <HAL_I2C_Init+0xe8>
 8023688:	68bb      	ldr	r3, [r7, #8]
 802368a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802368e:	fb02 f303 	mul.w	r3, r2, r3
 8023692:	4a69      	ldr	r2, [pc, #420]	; (8023838 <HAL_I2C_Init+0x284>)
 8023694:	fba2 2303 	umull	r2, r3, r2, r3
 8023698:	099b      	lsrs	r3, r3, #6
 802369a:	3301      	adds	r3, #1
 802369c:	687a      	ldr	r2, [r7, #4]
 802369e:	6812      	ldr	r2, [r2, #0]
 80236a0:	430b      	orrs	r3, r1
 80236a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80236a4:	687b      	ldr	r3, [r7, #4]
 80236a6:	681b      	ldr	r3, [r3, #0]
 80236a8:	69db      	ldr	r3, [r3, #28]
 80236aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80236ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80236b2:	687b      	ldr	r3, [r7, #4]
 80236b4:	685b      	ldr	r3, [r3, #4]
 80236b6:	495c      	ldr	r1, [pc, #368]	; (8023828 <HAL_I2C_Init+0x274>)
 80236b8:	428b      	cmp	r3, r1
 80236ba:	d819      	bhi.n	80236f0 <HAL_I2C_Init+0x13c>
 80236bc:	68fb      	ldr	r3, [r7, #12]
 80236be:	1e59      	subs	r1, r3, #1
 80236c0:	687b      	ldr	r3, [r7, #4]
 80236c2:	685b      	ldr	r3, [r3, #4]
 80236c4:	005b      	lsls	r3, r3, #1
 80236c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80236ca:	1c59      	adds	r1, r3, #1
 80236cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80236d0:	400b      	ands	r3, r1
 80236d2:	2b00      	cmp	r3, #0
 80236d4:	d00a      	beq.n	80236ec <HAL_I2C_Init+0x138>
 80236d6:	68fb      	ldr	r3, [r7, #12]
 80236d8:	1e59      	subs	r1, r3, #1
 80236da:	687b      	ldr	r3, [r7, #4]
 80236dc:	685b      	ldr	r3, [r3, #4]
 80236de:	005b      	lsls	r3, r3, #1
 80236e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80236e4:	3301      	adds	r3, #1
 80236e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80236ea:	e051      	b.n	8023790 <HAL_I2C_Init+0x1dc>
 80236ec:	2304      	movs	r3, #4
 80236ee:	e04f      	b.n	8023790 <HAL_I2C_Init+0x1dc>
 80236f0:	687b      	ldr	r3, [r7, #4]
 80236f2:	689b      	ldr	r3, [r3, #8]
 80236f4:	2b00      	cmp	r3, #0
 80236f6:	d111      	bne.n	802371c <HAL_I2C_Init+0x168>
 80236f8:	68fb      	ldr	r3, [r7, #12]
 80236fa:	1e58      	subs	r0, r3, #1
 80236fc:	687b      	ldr	r3, [r7, #4]
 80236fe:	6859      	ldr	r1, [r3, #4]
 8023700:	460b      	mov	r3, r1
 8023702:	005b      	lsls	r3, r3, #1
 8023704:	440b      	add	r3, r1
 8023706:	fbb0 f3f3 	udiv	r3, r0, r3
 802370a:	3301      	adds	r3, #1
 802370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023710:	2b00      	cmp	r3, #0
 8023712:	bf0c      	ite	eq
 8023714:	2301      	moveq	r3, #1
 8023716:	2300      	movne	r3, #0
 8023718:	b2db      	uxtb	r3, r3
 802371a:	e012      	b.n	8023742 <HAL_I2C_Init+0x18e>
 802371c:	68fb      	ldr	r3, [r7, #12]
 802371e:	1e58      	subs	r0, r3, #1
 8023720:	687b      	ldr	r3, [r7, #4]
 8023722:	6859      	ldr	r1, [r3, #4]
 8023724:	460b      	mov	r3, r1
 8023726:	009b      	lsls	r3, r3, #2
 8023728:	440b      	add	r3, r1
 802372a:	0099      	lsls	r1, r3, #2
 802372c:	440b      	add	r3, r1
 802372e:	fbb0 f3f3 	udiv	r3, r0, r3
 8023732:	3301      	adds	r3, #1
 8023734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023738:	2b00      	cmp	r3, #0
 802373a:	bf0c      	ite	eq
 802373c:	2301      	moveq	r3, #1
 802373e:	2300      	movne	r3, #0
 8023740:	b2db      	uxtb	r3, r3
 8023742:	2b00      	cmp	r3, #0
 8023744:	d001      	beq.n	802374a <HAL_I2C_Init+0x196>
 8023746:	2301      	movs	r3, #1
 8023748:	e022      	b.n	8023790 <HAL_I2C_Init+0x1dc>
 802374a:	687b      	ldr	r3, [r7, #4]
 802374c:	689b      	ldr	r3, [r3, #8]
 802374e:	2b00      	cmp	r3, #0
 8023750:	d10e      	bne.n	8023770 <HAL_I2C_Init+0x1bc>
 8023752:	68fb      	ldr	r3, [r7, #12]
 8023754:	1e58      	subs	r0, r3, #1
 8023756:	687b      	ldr	r3, [r7, #4]
 8023758:	6859      	ldr	r1, [r3, #4]
 802375a:	460b      	mov	r3, r1
 802375c:	005b      	lsls	r3, r3, #1
 802375e:	440b      	add	r3, r1
 8023760:	fbb0 f3f3 	udiv	r3, r0, r3
 8023764:	3301      	adds	r3, #1
 8023766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802376a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802376e:	e00f      	b.n	8023790 <HAL_I2C_Init+0x1dc>
 8023770:	68fb      	ldr	r3, [r7, #12]
 8023772:	1e58      	subs	r0, r3, #1
 8023774:	687b      	ldr	r3, [r7, #4]
 8023776:	6859      	ldr	r1, [r3, #4]
 8023778:	460b      	mov	r3, r1
 802377a:	009b      	lsls	r3, r3, #2
 802377c:	440b      	add	r3, r1
 802377e:	0099      	lsls	r1, r3, #2
 8023780:	440b      	add	r3, r1
 8023782:	fbb0 f3f3 	udiv	r3, r0, r3
 8023786:	3301      	adds	r3, #1
 8023788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802378c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8023790:	6879      	ldr	r1, [r7, #4]
 8023792:	6809      	ldr	r1, [r1, #0]
 8023794:	4313      	orrs	r3, r2
 8023796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8023798:	687b      	ldr	r3, [r7, #4]
 802379a:	681b      	ldr	r3, [r3, #0]
 802379c:	681b      	ldr	r3, [r3, #0]
 802379e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80237a2:	687b      	ldr	r3, [r7, #4]
 80237a4:	69da      	ldr	r2, [r3, #28]
 80237a6:	687b      	ldr	r3, [r7, #4]
 80237a8:	6a1b      	ldr	r3, [r3, #32]
 80237aa:	431a      	orrs	r2, r3
 80237ac:	687b      	ldr	r3, [r7, #4]
 80237ae:	681b      	ldr	r3, [r3, #0]
 80237b0:	430a      	orrs	r2, r1
 80237b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80237b4:	687b      	ldr	r3, [r7, #4]
 80237b6:	681b      	ldr	r3, [r3, #0]
 80237b8:	689b      	ldr	r3, [r3, #8]
 80237ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80237be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80237c2:	687a      	ldr	r2, [r7, #4]
 80237c4:	6911      	ldr	r1, [r2, #16]
 80237c6:	687a      	ldr	r2, [r7, #4]
 80237c8:	68d2      	ldr	r2, [r2, #12]
 80237ca:	4311      	orrs	r1, r2
 80237cc:	687a      	ldr	r2, [r7, #4]
 80237ce:	6812      	ldr	r2, [r2, #0]
 80237d0:	430b      	orrs	r3, r1
 80237d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80237d4:	687b      	ldr	r3, [r7, #4]
 80237d6:	681b      	ldr	r3, [r3, #0]
 80237d8:	68db      	ldr	r3, [r3, #12]
 80237da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80237de:	687b      	ldr	r3, [r7, #4]
 80237e0:	695a      	ldr	r2, [r3, #20]
 80237e2:	687b      	ldr	r3, [r7, #4]
 80237e4:	699b      	ldr	r3, [r3, #24]
 80237e6:	431a      	orrs	r2, r3
 80237e8:	687b      	ldr	r3, [r7, #4]
 80237ea:	681b      	ldr	r3, [r3, #0]
 80237ec:	430a      	orrs	r2, r1
 80237ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80237f0:	687b      	ldr	r3, [r7, #4]
 80237f2:	681b      	ldr	r3, [r3, #0]
 80237f4:	681a      	ldr	r2, [r3, #0]
 80237f6:	687b      	ldr	r3, [r7, #4]
 80237f8:	681b      	ldr	r3, [r3, #0]
 80237fa:	f042 0201 	orr.w	r2, r2, #1
 80237fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023800:	687b      	ldr	r3, [r7, #4]
 8023802:	2200      	movs	r2, #0
 8023804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8023806:	687b      	ldr	r3, [r7, #4]
 8023808:	2220      	movs	r2, #32
 802380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802380e:	687b      	ldr	r3, [r7, #4]
 8023810:	2200      	movs	r2, #0
 8023812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8023814:	687b      	ldr	r3, [r7, #4]
 8023816:	2200      	movs	r2, #0
 8023818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802381c:	2300      	movs	r3, #0
}
 802381e:	4618      	mov	r0, r3
 8023820:	3710      	adds	r7, #16
 8023822:	46bd      	mov	sp, r7
 8023824:	bd80      	pop	{r7, pc}
 8023826:	bf00      	nop
 8023828:	000186a0 	.word	0x000186a0
 802382c:	001e847f 	.word	0x001e847f
 8023830:	003d08ff 	.word	0x003d08ff
 8023834:	431bde83 	.word	0x431bde83
 8023838:	10624dd3 	.word	0x10624dd3

0802383c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802383c:	b580      	push	{r7, lr}
 802383e:	b088      	sub	sp, #32
 8023840:	af02      	add	r7, sp, #8
 8023842:	60f8      	str	r0, [r7, #12]
 8023844:	607a      	str	r2, [r7, #4]
 8023846:	461a      	mov	r2, r3
 8023848:	460b      	mov	r3, r1
 802384a:	817b      	strh	r3, [r7, #10]
 802384c:	4613      	mov	r3, r2
 802384e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8023850:	f7fe f98a 	bl	8021b68 <HAL_GetTick>
 8023854:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8023856:	68fb      	ldr	r3, [r7, #12]
 8023858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802385c:	b2db      	uxtb	r3, r3
 802385e:	2b20      	cmp	r3, #32
 8023860:	f040 80e0 	bne.w	8023a24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8023864:	697b      	ldr	r3, [r7, #20]
 8023866:	9300      	str	r3, [sp, #0]
 8023868:	2319      	movs	r3, #25
 802386a:	2201      	movs	r2, #1
 802386c:	4970      	ldr	r1, [pc, #448]	; (8023a30 <HAL_I2C_Master_Transmit+0x1f4>)
 802386e:	68f8      	ldr	r0, [r7, #12]
 8023870:	f000 ff30 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8023874:	4603      	mov	r3, r0
 8023876:	2b00      	cmp	r3, #0
 8023878:	d001      	beq.n	802387e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 802387a:	2302      	movs	r3, #2
 802387c:	e0d3      	b.n	8023a26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 802387e:	68fb      	ldr	r3, [r7, #12]
 8023880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023884:	2b01      	cmp	r3, #1
 8023886:	d101      	bne.n	802388c <HAL_I2C_Master_Transmit+0x50>
 8023888:	2302      	movs	r3, #2
 802388a:	e0cc      	b.n	8023a26 <HAL_I2C_Master_Transmit+0x1ea>
 802388c:	68fb      	ldr	r3, [r7, #12]
 802388e:	2201      	movs	r2, #1
 8023890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8023894:	68fb      	ldr	r3, [r7, #12]
 8023896:	681b      	ldr	r3, [r3, #0]
 8023898:	681b      	ldr	r3, [r3, #0]
 802389a:	f003 0301 	and.w	r3, r3, #1
 802389e:	2b01      	cmp	r3, #1
 80238a0:	d007      	beq.n	80238b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80238a2:	68fb      	ldr	r3, [r7, #12]
 80238a4:	681b      	ldr	r3, [r3, #0]
 80238a6:	681a      	ldr	r2, [r3, #0]
 80238a8:	68fb      	ldr	r3, [r7, #12]
 80238aa:	681b      	ldr	r3, [r3, #0]
 80238ac:	f042 0201 	orr.w	r2, r2, #1
 80238b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80238b2:	68fb      	ldr	r3, [r7, #12]
 80238b4:	681b      	ldr	r3, [r3, #0]
 80238b6:	681a      	ldr	r2, [r3, #0]
 80238b8:	68fb      	ldr	r3, [r7, #12]
 80238ba:	681b      	ldr	r3, [r3, #0]
 80238bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80238c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80238c2:	68fb      	ldr	r3, [r7, #12]
 80238c4:	2221      	movs	r2, #33	; 0x21
 80238c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80238ca:	68fb      	ldr	r3, [r7, #12]
 80238cc:	2210      	movs	r2, #16
 80238ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80238d2:	68fb      	ldr	r3, [r7, #12]
 80238d4:	2200      	movs	r2, #0
 80238d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80238d8:	68fb      	ldr	r3, [r7, #12]
 80238da:	687a      	ldr	r2, [r7, #4]
 80238dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80238de:	68fb      	ldr	r3, [r7, #12]
 80238e0:	893a      	ldrh	r2, [r7, #8]
 80238e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80238e4:	68fb      	ldr	r3, [r7, #12]
 80238e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80238e8:	b29a      	uxth	r2, r3
 80238ea:	68fb      	ldr	r3, [r7, #12]
 80238ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80238ee:	68fb      	ldr	r3, [r7, #12]
 80238f0:	4a50      	ldr	r2, [pc, #320]	; (8023a34 <HAL_I2C_Master_Transmit+0x1f8>)
 80238f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80238f4:	8979      	ldrh	r1, [r7, #10]
 80238f6:	697b      	ldr	r3, [r7, #20]
 80238f8:	6a3a      	ldr	r2, [r7, #32]
 80238fa:	68f8      	ldr	r0, [r7, #12]
 80238fc:	f000 fcea 	bl	80242d4 <I2C_MasterRequestWrite>
 8023900:	4603      	mov	r3, r0
 8023902:	2b00      	cmp	r3, #0
 8023904:	d001      	beq.n	802390a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8023906:	2301      	movs	r3, #1
 8023908:	e08d      	b.n	8023a26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802390a:	2300      	movs	r3, #0
 802390c:	613b      	str	r3, [r7, #16]
 802390e:	68fb      	ldr	r3, [r7, #12]
 8023910:	681b      	ldr	r3, [r3, #0]
 8023912:	695b      	ldr	r3, [r3, #20]
 8023914:	613b      	str	r3, [r7, #16]
 8023916:	68fb      	ldr	r3, [r7, #12]
 8023918:	681b      	ldr	r3, [r3, #0]
 802391a:	699b      	ldr	r3, [r3, #24]
 802391c:	613b      	str	r3, [r7, #16]
 802391e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8023920:	e066      	b.n	80239f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023922:	697a      	ldr	r2, [r7, #20]
 8023924:	6a39      	ldr	r1, [r7, #32]
 8023926:	68f8      	ldr	r0, [r7, #12]
 8023928:	f000 ffaa 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 802392c:	4603      	mov	r3, r0
 802392e:	2b00      	cmp	r3, #0
 8023930:	d00d      	beq.n	802394e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8023932:	68fb      	ldr	r3, [r7, #12]
 8023934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023936:	2b04      	cmp	r3, #4
 8023938:	d107      	bne.n	802394a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802393a:	68fb      	ldr	r3, [r7, #12]
 802393c:	681b      	ldr	r3, [r3, #0]
 802393e:	681a      	ldr	r2, [r3, #0]
 8023940:	68fb      	ldr	r3, [r7, #12]
 8023942:	681b      	ldr	r3, [r3, #0]
 8023944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023948:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 802394a:	2301      	movs	r3, #1
 802394c:	e06b      	b.n	8023a26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 802394e:	68fb      	ldr	r3, [r7, #12]
 8023950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023952:	781a      	ldrb	r2, [r3, #0]
 8023954:	68fb      	ldr	r3, [r7, #12]
 8023956:	681b      	ldr	r3, [r3, #0]
 8023958:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802395a:	68fb      	ldr	r3, [r7, #12]
 802395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802395e:	1c5a      	adds	r2, r3, #1
 8023960:	68fb      	ldr	r3, [r7, #12]
 8023962:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8023964:	68fb      	ldr	r3, [r7, #12]
 8023966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023968:	b29b      	uxth	r3, r3
 802396a:	3b01      	subs	r3, #1
 802396c:	b29a      	uxth	r2, r3
 802396e:	68fb      	ldr	r3, [r7, #12]
 8023970:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8023972:	68fb      	ldr	r3, [r7, #12]
 8023974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023976:	3b01      	subs	r3, #1
 8023978:	b29a      	uxth	r2, r3
 802397a:	68fb      	ldr	r3, [r7, #12]
 802397c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 802397e:	68fb      	ldr	r3, [r7, #12]
 8023980:	681b      	ldr	r3, [r3, #0]
 8023982:	695b      	ldr	r3, [r3, #20]
 8023984:	f003 0304 	and.w	r3, r3, #4
 8023988:	2b04      	cmp	r3, #4
 802398a:	d11b      	bne.n	80239c4 <HAL_I2C_Master_Transmit+0x188>
 802398c:	68fb      	ldr	r3, [r7, #12]
 802398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023990:	2b00      	cmp	r3, #0
 8023992:	d017      	beq.n	80239c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8023994:	68fb      	ldr	r3, [r7, #12]
 8023996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023998:	781a      	ldrb	r2, [r3, #0]
 802399a:	68fb      	ldr	r3, [r7, #12]
 802399c:	681b      	ldr	r3, [r3, #0]
 802399e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80239a0:	68fb      	ldr	r3, [r7, #12]
 80239a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239a4:	1c5a      	adds	r2, r3, #1
 80239a6:	68fb      	ldr	r3, [r7, #12]
 80239a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80239aa:	68fb      	ldr	r3, [r7, #12]
 80239ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80239ae:	b29b      	uxth	r3, r3
 80239b0:	3b01      	subs	r3, #1
 80239b2:	b29a      	uxth	r2, r3
 80239b4:	68fb      	ldr	r3, [r7, #12]
 80239b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80239b8:	68fb      	ldr	r3, [r7, #12]
 80239ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80239bc:	3b01      	subs	r3, #1
 80239be:	b29a      	uxth	r2, r3
 80239c0:	68fb      	ldr	r3, [r7, #12]
 80239c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80239c4:	697a      	ldr	r2, [r7, #20]
 80239c6:	6a39      	ldr	r1, [r7, #32]
 80239c8:	68f8      	ldr	r0, [r7, #12]
 80239ca:	f000 ff9a 	bl	8024902 <I2C_WaitOnBTFFlagUntilTimeout>
 80239ce:	4603      	mov	r3, r0
 80239d0:	2b00      	cmp	r3, #0
 80239d2:	d00d      	beq.n	80239f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80239d4:	68fb      	ldr	r3, [r7, #12]
 80239d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80239d8:	2b04      	cmp	r3, #4
 80239da:	d107      	bne.n	80239ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80239dc:	68fb      	ldr	r3, [r7, #12]
 80239de:	681b      	ldr	r3, [r3, #0]
 80239e0:	681a      	ldr	r2, [r3, #0]
 80239e2:	68fb      	ldr	r3, [r7, #12]
 80239e4:	681b      	ldr	r3, [r3, #0]
 80239e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80239ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80239ec:	2301      	movs	r3, #1
 80239ee:	e01a      	b.n	8023a26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80239f0:	68fb      	ldr	r3, [r7, #12]
 80239f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80239f4:	2b00      	cmp	r3, #0
 80239f6:	d194      	bne.n	8023922 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80239f8:	68fb      	ldr	r3, [r7, #12]
 80239fa:	681b      	ldr	r3, [r3, #0]
 80239fc:	681a      	ldr	r2, [r3, #0]
 80239fe:	68fb      	ldr	r3, [r7, #12]
 8023a00:	681b      	ldr	r3, [r3, #0]
 8023a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8023a08:	68fb      	ldr	r3, [r7, #12]
 8023a0a:	2220      	movs	r2, #32
 8023a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8023a10:	68fb      	ldr	r3, [r7, #12]
 8023a12:	2200      	movs	r2, #0
 8023a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8023a18:	68fb      	ldr	r3, [r7, #12]
 8023a1a:	2200      	movs	r2, #0
 8023a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8023a20:	2300      	movs	r3, #0
 8023a22:	e000      	b.n	8023a26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8023a24:	2302      	movs	r3, #2
  }
}
 8023a26:	4618      	mov	r0, r3
 8023a28:	3718      	adds	r7, #24
 8023a2a:	46bd      	mov	sp, r7
 8023a2c:	bd80      	pop	{r7, pc}
 8023a2e:	bf00      	nop
 8023a30:	00100002 	.word	0x00100002
 8023a34:	ffff0000 	.word	0xffff0000

08023a38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8023a38:	b580      	push	{r7, lr}
 8023a3a:	b088      	sub	sp, #32
 8023a3c:	af02      	add	r7, sp, #8
 8023a3e:	60f8      	str	r0, [r7, #12]
 8023a40:	4608      	mov	r0, r1
 8023a42:	4611      	mov	r1, r2
 8023a44:	461a      	mov	r2, r3
 8023a46:	4603      	mov	r3, r0
 8023a48:	817b      	strh	r3, [r7, #10]
 8023a4a:	460b      	mov	r3, r1
 8023a4c:	813b      	strh	r3, [r7, #8]
 8023a4e:	4613      	mov	r3, r2
 8023a50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8023a52:	f7fe f889 	bl	8021b68 <HAL_GetTick>
 8023a56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8023a58:	68fb      	ldr	r3, [r7, #12]
 8023a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023a5e:	b2db      	uxtb	r3, r3
 8023a60:	2b20      	cmp	r3, #32
 8023a62:	f040 80d9 	bne.w	8023c18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8023a66:	697b      	ldr	r3, [r7, #20]
 8023a68:	9300      	str	r3, [sp, #0]
 8023a6a:	2319      	movs	r3, #25
 8023a6c:	2201      	movs	r2, #1
 8023a6e:	496d      	ldr	r1, [pc, #436]	; (8023c24 <HAL_I2C_Mem_Write+0x1ec>)
 8023a70:	68f8      	ldr	r0, [r7, #12]
 8023a72:	f000 fe2f 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8023a76:	4603      	mov	r3, r0
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	d001      	beq.n	8023a80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8023a7c:	2302      	movs	r3, #2
 8023a7e:	e0cc      	b.n	8023c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8023a80:	68fb      	ldr	r3, [r7, #12]
 8023a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023a86:	2b01      	cmp	r3, #1
 8023a88:	d101      	bne.n	8023a8e <HAL_I2C_Mem_Write+0x56>
 8023a8a:	2302      	movs	r3, #2
 8023a8c:	e0c5      	b.n	8023c1a <HAL_I2C_Mem_Write+0x1e2>
 8023a8e:	68fb      	ldr	r3, [r7, #12]
 8023a90:	2201      	movs	r2, #1
 8023a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8023a96:	68fb      	ldr	r3, [r7, #12]
 8023a98:	681b      	ldr	r3, [r3, #0]
 8023a9a:	681b      	ldr	r3, [r3, #0]
 8023a9c:	f003 0301 	and.w	r3, r3, #1
 8023aa0:	2b01      	cmp	r3, #1
 8023aa2:	d007      	beq.n	8023ab4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8023aa4:	68fb      	ldr	r3, [r7, #12]
 8023aa6:	681b      	ldr	r3, [r3, #0]
 8023aa8:	681a      	ldr	r2, [r3, #0]
 8023aaa:	68fb      	ldr	r3, [r7, #12]
 8023aac:	681b      	ldr	r3, [r3, #0]
 8023aae:	f042 0201 	orr.w	r2, r2, #1
 8023ab2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8023ab4:	68fb      	ldr	r3, [r7, #12]
 8023ab6:	681b      	ldr	r3, [r3, #0]
 8023ab8:	681a      	ldr	r2, [r3, #0]
 8023aba:	68fb      	ldr	r3, [r7, #12]
 8023abc:	681b      	ldr	r3, [r3, #0]
 8023abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023ac2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8023ac4:	68fb      	ldr	r3, [r7, #12]
 8023ac6:	2221      	movs	r2, #33	; 0x21
 8023ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8023acc:	68fb      	ldr	r3, [r7, #12]
 8023ace:	2240      	movs	r2, #64	; 0x40
 8023ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023ad4:	68fb      	ldr	r3, [r7, #12]
 8023ad6:	2200      	movs	r2, #0
 8023ad8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8023ada:	68fb      	ldr	r3, [r7, #12]
 8023adc:	6a3a      	ldr	r2, [r7, #32]
 8023ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8023ae0:	68fb      	ldr	r3, [r7, #12]
 8023ae2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8023ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8023ae6:	68fb      	ldr	r3, [r7, #12]
 8023ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023aea:	b29a      	uxth	r2, r3
 8023aec:	68fb      	ldr	r3, [r7, #12]
 8023aee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8023af0:	68fb      	ldr	r3, [r7, #12]
 8023af2:	4a4d      	ldr	r2, [pc, #308]	; (8023c28 <HAL_I2C_Mem_Write+0x1f0>)
 8023af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8023af6:	88f8      	ldrh	r0, [r7, #6]
 8023af8:	893a      	ldrh	r2, [r7, #8]
 8023afa:	8979      	ldrh	r1, [r7, #10]
 8023afc:	697b      	ldr	r3, [r7, #20]
 8023afe:	9301      	str	r3, [sp, #4]
 8023b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023b02:	9300      	str	r3, [sp, #0]
 8023b04:	4603      	mov	r3, r0
 8023b06:	68f8      	ldr	r0, [r7, #12]
 8023b08:	f000 fc66 	bl	80243d8 <I2C_RequestMemoryWrite>
 8023b0c:	4603      	mov	r3, r0
 8023b0e:	2b00      	cmp	r3, #0
 8023b10:	d052      	beq.n	8023bb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8023b12:	2301      	movs	r3, #1
 8023b14:	e081      	b.n	8023c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023b16:	697a      	ldr	r2, [r7, #20]
 8023b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8023b1a:	68f8      	ldr	r0, [r7, #12]
 8023b1c:	f000 feb0 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 8023b20:	4603      	mov	r3, r0
 8023b22:	2b00      	cmp	r3, #0
 8023b24:	d00d      	beq.n	8023b42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8023b26:	68fb      	ldr	r3, [r7, #12]
 8023b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b2a:	2b04      	cmp	r3, #4
 8023b2c:	d107      	bne.n	8023b3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023b2e:	68fb      	ldr	r3, [r7, #12]
 8023b30:	681b      	ldr	r3, [r3, #0]
 8023b32:	681a      	ldr	r2, [r3, #0]
 8023b34:	68fb      	ldr	r3, [r7, #12]
 8023b36:	681b      	ldr	r3, [r3, #0]
 8023b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8023b3e:	2301      	movs	r3, #1
 8023b40:	e06b      	b.n	8023c1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8023b42:	68fb      	ldr	r3, [r7, #12]
 8023b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b46:	781a      	ldrb	r2, [r3, #0]
 8023b48:	68fb      	ldr	r3, [r7, #12]
 8023b4a:	681b      	ldr	r3, [r3, #0]
 8023b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8023b4e:	68fb      	ldr	r3, [r7, #12]
 8023b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b52:	1c5a      	adds	r2, r3, #1
 8023b54:	68fb      	ldr	r3, [r7, #12]
 8023b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8023b58:	68fb      	ldr	r3, [r7, #12]
 8023b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023b5c:	3b01      	subs	r3, #1
 8023b5e:	b29a      	uxth	r2, r3
 8023b60:	68fb      	ldr	r3, [r7, #12]
 8023b62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8023b64:	68fb      	ldr	r3, [r7, #12]
 8023b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023b68:	b29b      	uxth	r3, r3
 8023b6a:	3b01      	subs	r3, #1
 8023b6c:	b29a      	uxth	r2, r3
 8023b6e:	68fb      	ldr	r3, [r7, #12]
 8023b70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8023b72:	68fb      	ldr	r3, [r7, #12]
 8023b74:	681b      	ldr	r3, [r3, #0]
 8023b76:	695b      	ldr	r3, [r3, #20]
 8023b78:	f003 0304 	and.w	r3, r3, #4
 8023b7c:	2b04      	cmp	r3, #4
 8023b7e:	d11b      	bne.n	8023bb8 <HAL_I2C_Mem_Write+0x180>
 8023b80:	68fb      	ldr	r3, [r7, #12]
 8023b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023b84:	2b00      	cmp	r3, #0
 8023b86:	d017      	beq.n	8023bb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8023b88:	68fb      	ldr	r3, [r7, #12]
 8023b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b8c:	781a      	ldrb	r2, [r3, #0]
 8023b8e:	68fb      	ldr	r3, [r7, #12]
 8023b90:	681b      	ldr	r3, [r3, #0]
 8023b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8023b94:	68fb      	ldr	r3, [r7, #12]
 8023b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b98:	1c5a      	adds	r2, r3, #1
 8023b9a:	68fb      	ldr	r3, [r7, #12]
 8023b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8023b9e:	68fb      	ldr	r3, [r7, #12]
 8023ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023ba2:	3b01      	subs	r3, #1
 8023ba4:	b29a      	uxth	r2, r3
 8023ba6:	68fb      	ldr	r3, [r7, #12]
 8023ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8023baa:	68fb      	ldr	r3, [r7, #12]
 8023bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023bae:	b29b      	uxth	r3, r3
 8023bb0:	3b01      	subs	r3, #1
 8023bb2:	b29a      	uxth	r2, r3
 8023bb4:	68fb      	ldr	r3, [r7, #12]
 8023bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8023bb8:	68fb      	ldr	r3, [r7, #12]
 8023bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023bbc:	2b00      	cmp	r3, #0
 8023bbe:	d1aa      	bne.n	8023b16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023bc0:	697a      	ldr	r2, [r7, #20]
 8023bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8023bc4:	68f8      	ldr	r0, [r7, #12]
 8023bc6:	f000 fe9c 	bl	8024902 <I2C_WaitOnBTFFlagUntilTimeout>
 8023bca:	4603      	mov	r3, r0
 8023bcc:	2b00      	cmp	r3, #0
 8023bce:	d00d      	beq.n	8023bec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8023bd0:	68fb      	ldr	r3, [r7, #12]
 8023bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023bd4:	2b04      	cmp	r3, #4
 8023bd6:	d107      	bne.n	8023be8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023bd8:	68fb      	ldr	r3, [r7, #12]
 8023bda:	681b      	ldr	r3, [r3, #0]
 8023bdc:	681a      	ldr	r2, [r3, #0]
 8023bde:	68fb      	ldr	r3, [r7, #12]
 8023be0:	681b      	ldr	r3, [r3, #0]
 8023be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023be6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8023be8:	2301      	movs	r3, #1
 8023bea:	e016      	b.n	8023c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023bec:	68fb      	ldr	r3, [r7, #12]
 8023bee:	681b      	ldr	r3, [r3, #0]
 8023bf0:	681a      	ldr	r2, [r3, #0]
 8023bf2:	68fb      	ldr	r3, [r7, #12]
 8023bf4:	681b      	ldr	r3, [r3, #0]
 8023bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8023bfc:	68fb      	ldr	r3, [r7, #12]
 8023bfe:	2220      	movs	r2, #32
 8023c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8023c04:	68fb      	ldr	r3, [r7, #12]
 8023c06:	2200      	movs	r2, #0
 8023c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8023c0c:	68fb      	ldr	r3, [r7, #12]
 8023c0e:	2200      	movs	r2, #0
 8023c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8023c14:	2300      	movs	r3, #0
 8023c16:	e000      	b.n	8023c1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8023c18:	2302      	movs	r3, #2
  }
}
 8023c1a:	4618      	mov	r0, r3
 8023c1c:	3718      	adds	r7, #24
 8023c1e:	46bd      	mov	sp, r7
 8023c20:	bd80      	pop	{r7, pc}
 8023c22:	bf00      	nop
 8023c24:	00100002 	.word	0x00100002
 8023c28:	ffff0000 	.word	0xffff0000

08023c2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8023c2c:	b580      	push	{r7, lr}
 8023c2e:	b08c      	sub	sp, #48	; 0x30
 8023c30:	af02      	add	r7, sp, #8
 8023c32:	60f8      	str	r0, [r7, #12]
 8023c34:	4608      	mov	r0, r1
 8023c36:	4611      	mov	r1, r2
 8023c38:	461a      	mov	r2, r3
 8023c3a:	4603      	mov	r3, r0
 8023c3c:	817b      	strh	r3, [r7, #10]
 8023c3e:	460b      	mov	r3, r1
 8023c40:	813b      	strh	r3, [r7, #8]
 8023c42:	4613      	mov	r3, r2
 8023c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8023c46:	f7fd ff8f 	bl	8021b68 <HAL_GetTick>
 8023c4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8023c4c:	68fb      	ldr	r3, [r7, #12]
 8023c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023c52:	b2db      	uxtb	r3, r3
 8023c54:	2b20      	cmp	r3, #32
 8023c56:	f040 8208 	bne.w	802406a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8023c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c5c:	9300      	str	r3, [sp, #0]
 8023c5e:	2319      	movs	r3, #25
 8023c60:	2201      	movs	r2, #1
 8023c62:	497b      	ldr	r1, [pc, #492]	; (8023e50 <HAL_I2C_Mem_Read+0x224>)
 8023c64:	68f8      	ldr	r0, [r7, #12]
 8023c66:	f000 fd35 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8023c6a:	4603      	mov	r3, r0
 8023c6c:	2b00      	cmp	r3, #0
 8023c6e:	d001      	beq.n	8023c74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8023c70:	2302      	movs	r3, #2
 8023c72:	e1fb      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8023c74:	68fb      	ldr	r3, [r7, #12]
 8023c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023c7a:	2b01      	cmp	r3, #1
 8023c7c:	d101      	bne.n	8023c82 <HAL_I2C_Mem_Read+0x56>
 8023c7e:	2302      	movs	r3, #2
 8023c80:	e1f4      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
 8023c82:	68fb      	ldr	r3, [r7, #12]
 8023c84:	2201      	movs	r2, #1
 8023c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8023c8a:	68fb      	ldr	r3, [r7, #12]
 8023c8c:	681b      	ldr	r3, [r3, #0]
 8023c8e:	681b      	ldr	r3, [r3, #0]
 8023c90:	f003 0301 	and.w	r3, r3, #1
 8023c94:	2b01      	cmp	r3, #1
 8023c96:	d007      	beq.n	8023ca8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8023c98:	68fb      	ldr	r3, [r7, #12]
 8023c9a:	681b      	ldr	r3, [r3, #0]
 8023c9c:	681a      	ldr	r2, [r3, #0]
 8023c9e:	68fb      	ldr	r3, [r7, #12]
 8023ca0:	681b      	ldr	r3, [r3, #0]
 8023ca2:	f042 0201 	orr.w	r2, r2, #1
 8023ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8023ca8:	68fb      	ldr	r3, [r7, #12]
 8023caa:	681b      	ldr	r3, [r3, #0]
 8023cac:	681a      	ldr	r2, [r3, #0]
 8023cae:	68fb      	ldr	r3, [r7, #12]
 8023cb0:	681b      	ldr	r3, [r3, #0]
 8023cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8023cb8:	68fb      	ldr	r3, [r7, #12]
 8023cba:	2222      	movs	r2, #34	; 0x22
 8023cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8023cc0:	68fb      	ldr	r3, [r7, #12]
 8023cc2:	2240      	movs	r2, #64	; 0x40
 8023cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023cc8:	68fb      	ldr	r3, [r7, #12]
 8023cca:	2200      	movs	r2, #0
 8023ccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8023cce:	68fb      	ldr	r3, [r7, #12]
 8023cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8023cd4:	68fb      	ldr	r3, [r7, #12]
 8023cd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8023cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8023cda:	68fb      	ldr	r3, [r7, #12]
 8023cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023cde:	b29a      	uxth	r2, r3
 8023ce0:	68fb      	ldr	r3, [r7, #12]
 8023ce2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8023ce4:	68fb      	ldr	r3, [r7, #12]
 8023ce6:	4a5b      	ldr	r2, [pc, #364]	; (8023e54 <HAL_I2C_Mem_Read+0x228>)
 8023ce8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8023cea:	88f8      	ldrh	r0, [r7, #6]
 8023cec:	893a      	ldrh	r2, [r7, #8]
 8023cee:	8979      	ldrh	r1, [r7, #10]
 8023cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023cf2:	9301      	str	r3, [sp, #4]
 8023cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023cf6:	9300      	str	r3, [sp, #0]
 8023cf8:	4603      	mov	r3, r0
 8023cfa:	68f8      	ldr	r0, [r7, #12]
 8023cfc:	f000 fc02 	bl	8024504 <I2C_RequestMemoryRead>
 8023d00:	4603      	mov	r3, r0
 8023d02:	2b00      	cmp	r3, #0
 8023d04:	d001      	beq.n	8023d0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8023d06:	2301      	movs	r3, #1
 8023d08:	e1b0      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8023d0a:	68fb      	ldr	r3, [r7, #12]
 8023d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023d0e:	2b00      	cmp	r3, #0
 8023d10:	d113      	bne.n	8023d3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023d12:	2300      	movs	r3, #0
 8023d14:	623b      	str	r3, [r7, #32]
 8023d16:	68fb      	ldr	r3, [r7, #12]
 8023d18:	681b      	ldr	r3, [r3, #0]
 8023d1a:	695b      	ldr	r3, [r3, #20]
 8023d1c:	623b      	str	r3, [r7, #32]
 8023d1e:	68fb      	ldr	r3, [r7, #12]
 8023d20:	681b      	ldr	r3, [r3, #0]
 8023d22:	699b      	ldr	r3, [r3, #24]
 8023d24:	623b      	str	r3, [r7, #32]
 8023d26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023d28:	68fb      	ldr	r3, [r7, #12]
 8023d2a:	681b      	ldr	r3, [r3, #0]
 8023d2c:	681a      	ldr	r2, [r3, #0]
 8023d2e:	68fb      	ldr	r3, [r7, #12]
 8023d30:	681b      	ldr	r3, [r3, #0]
 8023d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023d36:	601a      	str	r2, [r3, #0]
 8023d38:	e184      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8023d3a:	68fb      	ldr	r3, [r7, #12]
 8023d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023d3e:	2b01      	cmp	r3, #1
 8023d40:	d11b      	bne.n	8023d7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8023d42:	68fb      	ldr	r3, [r7, #12]
 8023d44:	681b      	ldr	r3, [r3, #0]
 8023d46:	681a      	ldr	r2, [r3, #0]
 8023d48:	68fb      	ldr	r3, [r7, #12]
 8023d4a:	681b      	ldr	r3, [r3, #0]
 8023d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023d52:	2300      	movs	r3, #0
 8023d54:	61fb      	str	r3, [r7, #28]
 8023d56:	68fb      	ldr	r3, [r7, #12]
 8023d58:	681b      	ldr	r3, [r3, #0]
 8023d5a:	695b      	ldr	r3, [r3, #20]
 8023d5c:	61fb      	str	r3, [r7, #28]
 8023d5e:	68fb      	ldr	r3, [r7, #12]
 8023d60:	681b      	ldr	r3, [r3, #0]
 8023d62:	699b      	ldr	r3, [r3, #24]
 8023d64:	61fb      	str	r3, [r7, #28]
 8023d66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023d68:	68fb      	ldr	r3, [r7, #12]
 8023d6a:	681b      	ldr	r3, [r3, #0]
 8023d6c:	681a      	ldr	r2, [r3, #0]
 8023d6e:	68fb      	ldr	r3, [r7, #12]
 8023d70:	681b      	ldr	r3, [r3, #0]
 8023d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023d76:	601a      	str	r2, [r3, #0]
 8023d78:	e164      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8023d7a:	68fb      	ldr	r3, [r7, #12]
 8023d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023d7e:	2b02      	cmp	r3, #2
 8023d80:	d11b      	bne.n	8023dba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8023d82:	68fb      	ldr	r3, [r7, #12]
 8023d84:	681b      	ldr	r3, [r3, #0]
 8023d86:	681a      	ldr	r2, [r3, #0]
 8023d88:	68fb      	ldr	r3, [r7, #12]
 8023d8a:	681b      	ldr	r3, [r3, #0]
 8023d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023d90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8023d92:	68fb      	ldr	r3, [r7, #12]
 8023d94:	681b      	ldr	r3, [r3, #0]
 8023d96:	681a      	ldr	r2, [r3, #0]
 8023d98:	68fb      	ldr	r3, [r7, #12]
 8023d9a:	681b      	ldr	r3, [r3, #0]
 8023d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8023da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023da2:	2300      	movs	r3, #0
 8023da4:	61bb      	str	r3, [r7, #24]
 8023da6:	68fb      	ldr	r3, [r7, #12]
 8023da8:	681b      	ldr	r3, [r3, #0]
 8023daa:	695b      	ldr	r3, [r3, #20]
 8023dac:	61bb      	str	r3, [r7, #24]
 8023dae:	68fb      	ldr	r3, [r7, #12]
 8023db0:	681b      	ldr	r3, [r3, #0]
 8023db2:	699b      	ldr	r3, [r3, #24]
 8023db4:	61bb      	str	r3, [r7, #24]
 8023db6:	69bb      	ldr	r3, [r7, #24]
 8023db8:	e144      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023dba:	2300      	movs	r3, #0
 8023dbc:	617b      	str	r3, [r7, #20]
 8023dbe:	68fb      	ldr	r3, [r7, #12]
 8023dc0:	681b      	ldr	r3, [r3, #0]
 8023dc2:	695b      	ldr	r3, [r3, #20]
 8023dc4:	617b      	str	r3, [r7, #20]
 8023dc6:	68fb      	ldr	r3, [r7, #12]
 8023dc8:	681b      	ldr	r3, [r3, #0]
 8023dca:	699b      	ldr	r3, [r3, #24]
 8023dcc:	617b      	str	r3, [r7, #20]
 8023dce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8023dd0:	e138      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8023dd2:	68fb      	ldr	r3, [r7, #12]
 8023dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023dd6:	2b03      	cmp	r3, #3
 8023dd8:	f200 80f1 	bhi.w	8023fbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8023ddc:	68fb      	ldr	r3, [r7, #12]
 8023dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023de0:	2b01      	cmp	r3, #1
 8023de2:	d123      	bne.n	8023e2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023de6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8023de8:	68f8      	ldr	r0, [r7, #12]
 8023dea:	f000 fdcb 	bl	8024984 <I2C_WaitOnRXNEFlagUntilTimeout>
 8023dee:	4603      	mov	r3, r0
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	d001      	beq.n	8023df8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8023df4:	2301      	movs	r3, #1
 8023df6:	e139      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023df8:	68fb      	ldr	r3, [r7, #12]
 8023dfa:	681b      	ldr	r3, [r3, #0]
 8023dfc:	691a      	ldr	r2, [r3, #16]
 8023dfe:	68fb      	ldr	r3, [r7, #12]
 8023e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e02:	b2d2      	uxtb	r2, r2
 8023e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023e06:	68fb      	ldr	r3, [r7, #12]
 8023e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e0a:	1c5a      	adds	r2, r3, #1
 8023e0c:	68fb      	ldr	r3, [r7, #12]
 8023e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023e10:	68fb      	ldr	r3, [r7, #12]
 8023e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023e14:	3b01      	subs	r3, #1
 8023e16:	b29a      	uxth	r2, r3
 8023e18:	68fb      	ldr	r3, [r7, #12]
 8023e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023e1c:	68fb      	ldr	r3, [r7, #12]
 8023e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023e20:	b29b      	uxth	r3, r3
 8023e22:	3b01      	subs	r3, #1
 8023e24:	b29a      	uxth	r2, r3
 8023e26:	68fb      	ldr	r3, [r7, #12]
 8023e28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8023e2a:	e10b      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8023e2c:	68fb      	ldr	r3, [r7, #12]
 8023e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023e30:	2b02      	cmp	r3, #2
 8023e32:	d14e      	bne.n	8023ed2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8023e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e36:	9300      	str	r3, [sp, #0]
 8023e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023e3a:	2200      	movs	r2, #0
 8023e3c:	4906      	ldr	r1, [pc, #24]	; (8023e58 <HAL_I2C_Mem_Read+0x22c>)
 8023e3e:	68f8      	ldr	r0, [r7, #12]
 8023e40:	f000 fc48 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8023e44:	4603      	mov	r3, r0
 8023e46:	2b00      	cmp	r3, #0
 8023e48:	d008      	beq.n	8023e5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8023e4a:	2301      	movs	r3, #1
 8023e4c:	e10e      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
 8023e4e:	bf00      	nop
 8023e50:	00100002 	.word	0x00100002
 8023e54:	ffff0000 	.word	0xffff0000
 8023e58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023e5c:	68fb      	ldr	r3, [r7, #12]
 8023e5e:	681b      	ldr	r3, [r3, #0]
 8023e60:	681a      	ldr	r2, [r3, #0]
 8023e62:	68fb      	ldr	r3, [r7, #12]
 8023e64:	681b      	ldr	r3, [r3, #0]
 8023e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023e6c:	68fb      	ldr	r3, [r7, #12]
 8023e6e:	681b      	ldr	r3, [r3, #0]
 8023e70:	691a      	ldr	r2, [r3, #16]
 8023e72:	68fb      	ldr	r3, [r7, #12]
 8023e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e76:	b2d2      	uxtb	r2, r2
 8023e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023e7a:	68fb      	ldr	r3, [r7, #12]
 8023e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e7e:	1c5a      	adds	r2, r3, #1
 8023e80:	68fb      	ldr	r3, [r7, #12]
 8023e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023e84:	68fb      	ldr	r3, [r7, #12]
 8023e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023e88:	3b01      	subs	r3, #1
 8023e8a:	b29a      	uxth	r2, r3
 8023e8c:	68fb      	ldr	r3, [r7, #12]
 8023e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023e90:	68fb      	ldr	r3, [r7, #12]
 8023e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023e94:	b29b      	uxth	r3, r3
 8023e96:	3b01      	subs	r3, #1
 8023e98:	b29a      	uxth	r2, r3
 8023e9a:	68fb      	ldr	r3, [r7, #12]
 8023e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023e9e:	68fb      	ldr	r3, [r7, #12]
 8023ea0:	681b      	ldr	r3, [r3, #0]
 8023ea2:	691a      	ldr	r2, [r3, #16]
 8023ea4:	68fb      	ldr	r3, [r7, #12]
 8023ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023ea8:	b2d2      	uxtb	r2, r2
 8023eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023eac:	68fb      	ldr	r3, [r7, #12]
 8023eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023eb0:	1c5a      	adds	r2, r3, #1
 8023eb2:	68fb      	ldr	r3, [r7, #12]
 8023eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023eb6:	68fb      	ldr	r3, [r7, #12]
 8023eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023eba:	3b01      	subs	r3, #1
 8023ebc:	b29a      	uxth	r2, r3
 8023ebe:	68fb      	ldr	r3, [r7, #12]
 8023ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023ec2:	68fb      	ldr	r3, [r7, #12]
 8023ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023ec6:	b29b      	uxth	r3, r3
 8023ec8:	3b01      	subs	r3, #1
 8023eca:	b29a      	uxth	r2, r3
 8023ecc:	68fb      	ldr	r3, [r7, #12]
 8023ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8023ed0:	e0b8      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8023ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023ed4:	9300      	str	r3, [sp, #0]
 8023ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ed8:	2200      	movs	r2, #0
 8023eda:	4966      	ldr	r1, [pc, #408]	; (8024074 <HAL_I2C_Mem_Read+0x448>)
 8023edc:	68f8      	ldr	r0, [r7, #12]
 8023ede:	f000 fbf9 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8023ee2:	4603      	mov	r3, r0
 8023ee4:	2b00      	cmp	r3, #0
 8023ee6:	d001      	beq.n	8023eec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8023ee8:	2301      	movs	r3, #1
 8023eea:	e0bf      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8023eec:	68fb      	ldr	r3, [r7, #12]
 8023eee:	681b      	ldr	r3, [r3, #0]
 8023ef0:	681a      	ldr	r2, [r3, #0]
 8023ef2:	68fb      	ldr	r3, [r7, #12]
 8023ef4:	681b      	ldr	r3, [r3, #0]
 8023ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023efc:	68fb      	ldr	r3, [r7, #12]
 8023efe:	681b      	ldr	r3, [r3, #0]
 8023f00:	691a      	ldr	r2, [r3, #16]
 8023f02:	68fb      	ldr	r3, [r7, #12]
 8023f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f06:	b2d2      	uxtb	r2, r2
 8023f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023f0a:	68fb      	ldr	r3, [r7, #12]
 8023f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f0e:	1c5a      	adds	r2, r3, #1
 8023f10:	68fb      	ldr	r3, [r7, #12]
 8023f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023f14:	68fb      	ldr	r3, [r7, #12]
 8023f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023f18:	3b01      	subs	r3, #1
 8023f1a:	b29a      	uxth	r2, r3
 8023f1c:	68fb      	ldr	r3, [r7, #12]
 8023f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023f20:	68fb      	ldr	r3, [r7, #12]
 8023f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023f24:	b29b      	uxth	r3, r3
 8023f26:	3b01      	subs	r3, #1
 8023f28:	b29a      	uxth	r2, r3
 8023f2a:	68fb      	ldr	r3, [r7, #12]
 8023f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8023f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023f30:	9300      	str	r3, [sp, #0]
 8023f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023f34:	2200      	movs	r2, #0
 8023f36:	494f      	ldr	r1, [pc, #316]	; (8024074 <HAL_I2C_Mem_Read+0x448>)
 8023f38:	68f8      	ldr	r0, [r7, #12]
 8023f3a:	f000 fbcb 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8023f3e:	4603      	mov	r3, r0
 8023f40:	2b00      	cmp	r3, #0
 8023f42:	d001      	beq.n	8023f48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8023f44:	2301      	movs	r3, #1
 8023f46:	e091      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023f48:	68fb      	ldr	r3, [r7, #12]
 8023f4a:	681b      	ldr	r3, [r3, #0]
 8023f4c:	681a      	ldr	r2, [r3, #0]
 8023f4e:	68fb      	ldr	r3, [r7, #12]
 8023f50:	681b      	ldr	r3, [r3, #0]
 8023f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023f58:	68fb      	ldr	r3, [r7, #12]
 8023f5a:	681b      	ldr	r3, [r3, #0]
 8023f5c:	691a      	ldr	r2, [r3, #16]
 8023f5e:	68fb      	ldr	r3, [r7, #12]
 8023f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f62:	b2d2      	uxtb	r2, r2
 8023f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023f66:	68fb      	ldr	r3, [r7, #12]
 8023f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f6a:	1c5a      	adds	r2, r3, #1
 8023f6c:	68fb      	ldr	r3, [r7, #12]
 8023f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023f70:	68fb      	ldr	r3, [r7, #12]
 8023f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023f74:	3b01      	subs	r3, #1
 8023f76:	b29a      	uxth	r2, r3
 8023f78:	68fb      	ldr	r3, [r7, #12]
 8023f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023f7c:	68fb      	ldr	r3, [r7, #12]
 8023f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023f80:	b29b      	uxth	r3, r3
 8023f82:	3b01      	subs	r3, #1
 8023f84:	b29a      	uxth	r2, r3
 8023f86:	68fb      	ldr	r3, [r7, #12]
 8023f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023f8a:	68fb      	ldr	r3, [r7, #12]
 8023f8c:	681b      	ldr	r3, [r3, #0]
 8023f8e:	691a      	ldr	r2, [r3, #16]
 8023f90:	68fb      	ldr	r3, [r7, #12]
 8023f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f94:	b2d2      	uxtb	r2, r2
 8023f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023f98:	68fb      	ldr	r3, [r7, #12]
 8023f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f9c:	1c5a      	adds	r2, r3, #1
 8023f9e:	68fb      	ldr	r3, [r7, #12]
 8023fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023fa2:	68fb      	ldr	r3, [r7, #12]
 8023fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023fa6:	3b01      	subs	r3, #1
 8023fa8:	b29a      	uxth	r2, r3
 8023faa:	68fb      	ldr	r3, [r7, #12]
 8023fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023fae:	68fb      	ldr	r3, [r7, #12]
 8023fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023fb2:	b29b      	uxth	r3, r3
 8023fb4:	3b01      	subs	r3, #1
 8023fb6:	b29a      	uxth	r2, r3
 8023fb8:	68fb      	ldr	r3, [r7, #12]
 8023fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8023fbc:	e042      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8023fc2:	68f8      	ldr	r0, [r7, #12]
 8023fc4:	f000 fcde 	bl	8024984 <I2C_WaitOnRXNEFlagUntilTimeout>
 8023fc8:	4603      	mov	r3, r0
 8023fca:	2b00      	cmp	r3, #0
 8023fcc:	d001      	beq.n	8023fd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8023fce:	2301      	movs	r3, #1
 8023fd0:	e04c      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023fd2:	68fb      	ldr	r3, [r7, #12]
 8023fd4:	681b      	ldr	r3, [r3, #0]
 8023fd6:	691a      	ldr	r2, [r3, #16]
 8023fd8:	68fb      	ldr	r3, [r7, #12]
 8023fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023fdc:	b2d2      	uxtb	r2, r2
 8023fde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8023fe0:	68fb      	ldr	r3, [r7, #12]
 8023fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023fe4:	1c5a      	adds	r2, r3, #1
 8023fe6:	68fb      	ldr	r3, [r7, #12]
 8023fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8023fea:	68fb      	ldr	r3, [r7, #12]
 8023fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023fee:	3b01      	subs	r3, #1
 8023ff0:	b29a      	uxth	r2, r3
 8023ff2:	68fb      	ldr	r3, [r7, #12]
 8023ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8023ff6:	68fb      	ldr	r3, [r7, #12]
 8023ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023ffa:	b29b      	uxth	r3, r3
 8023ffc:	3b01      	subs	r3, #1
 8023ffe:	b29a      	uxth	r2, r3
 8024000:	68fb      	ldr	r3, [r7, #12]
 8024002:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8024004:	68fb      	ldr	r3, [r7, #12]
 8024006:	681b      	ldr	r3, [r3, #0]
 8024008:	695b      	ldr	r3, [r3, #20]
 802400a:	f003 0304 	and.w	r3, r3, #4
 802400e:	2b04      	cmp	r3, #4
 8024010:	d118      	bne.n	8024044 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8024012:	68fb      	ldr	r3, [r7, #12]
 8024014:	681b      	ldr	r3, [r3, #0]
 8024016:	691a      	ldr	r2, [r3, #16]
 8024018:	68fb      	ldr	r3, [r7, #12]
 802401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802401c:	b2d2      	uxtb	r2, r2
 802401e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8024020:	68fb      	ldr	r3, [r7, #12]
 8024022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024024:	1c5a      	adds	r2, r3, #1
 8024026:	68fb      	ldr	r3, [r7, #12]
 8024028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 802402a:	68fb      	ldr	r3, [r7, #12]
 802402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802402e:	3b01      	subs	r3, #1
 8024030:	b29a      	uxth	r2, r3
 8024032:	68fb      	ldr	r3, [r7, #12]
 8024034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8024036:	68fb      	ldr	r3, [r7, #12]
 8024038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802403a:	b29b      	uxth	r3, r3
 802403c:	3b01      	subs	r3, #1
 802403e:	b29a      	uxth	r2, r3
 8024040:	68fb      	ldr	r3, [r7, #12]
 8024042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8024044:	68fb      	ldr	r3, [r7, #12]
 8024046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024048:	2b00      	cmp	r3, #0
 802404a:	f47f aec2 	bne.w	8023dd2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 802404e:	68fb      	ldr	r3, [r7, #12]
 8024050:	2220      	movs	r2, #32
 8024052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8024056:	68fb      	ldr	r3, [r7, #12]
 8024058:	2200      	movs	r2, #0
 802405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802405e:	68fb      	ldr	r3, [r7, #12]
 8024060:	2200      	movs	r2, #0
 8024062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8024066:	2300      	movs	r3, #0
 8024068:	e000      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 802406a:	2302      	movs	r3, #2
  }
}
 802406c:	4618      	mov	r0, r3
 802406e:	3728      	adds	r7, #40	; 0x28
 8024070:	46bd      	mov	sp, r7
 8024072:	bd80      	pop	{r7, pc}
 8024074:	00010004 	.word	0x00010004

08024078 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8024078:	b580      	push	{r7, lr}
 802407a:	b08a      	sub	sp, #40	; 0x28
 802407c:	af02      	add	r7, sp, #8
 802407e:	60f8      	str	r0, [r7, #12]
 8024080:	607a      	str	r2, [r7, #4]
 8024082:	603b      	str	r3, [r7, #0]
 8024084:	460b      	mov	r3, r1
 8024086:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8024088:	f7fd fd6e 	bl	8021b68 <HAL_GetTick>
 802408c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 802408e:	2301      	movs	r3, #1
 8024090:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8024092:	68fb      	ldr	r3, [r7, #12]
 8024094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024098:	b2db      	uxtb	r3, r3
 802409a:	2b20      	cmp	r3, #32
 802409c:	f040 8111 	bne.w	80242c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80240a0:	69fb      	ldr	r3, [r7, #28]
 80240a2:	9300      	str	r3, [sp, #0]
 80240a4:	2319      	movs	r3, #25
 80240a6:	2201      	movs	r2, #1
 80240a8:	4988      	ldr	r1, [pc, #544]	; (80242cc <HAL_I2C_IsDeviceReady+0x254>)
 80240aa:	68f8      	ldr	r0, [r7, #12]
 80240ac:	f000 fb12 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 80240b0:	4603      	mov	r3, r0
 80240b2:	2b00      	cmp	r3, #0
 80240b4:	d001      	beq.n	80240ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80240b6:	2302      	movs	r3, #2
 80240b8:	e104      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80240ba:	68fb      	ldr	r3, [r7, #12]
 80240bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80240c0:	2b01      	cmp	r3, #1
 80240c2:	d101      	bne.n	80240c8 <HAL_I2C_IsDeviceReady+0x50>
 80240c4:	2302      	movs	r3, #2
 80240c6:	e0fd      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
 80240c8:	68fb      	ldr	r3, [r7, #12]
 80240ca:	2201      	movs	r2, #1
 80240cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80240d0:	68fb      	ldr	r3, [r7, #12]
 80240d2:	681b      	ldr	r3, [r3, #0]
 80240d4:	681b      	ldr	r3, [r3, #0]
 80240d6:	f003 0301 	and.w	r3, r3, #1
 80240da:	2b01      	cmp	r3, #1
 80240dc:	d007      	beq.n	80240ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80240de:	68fb      	ldr	r3, [r7, #12]
 80240e0:	681b      	ldr	r3, [r3, #0]
 80240e2:	681a      	ldr	r2, [r3, #0]
 80240e4:	68fb      	ldr	r3, [r7, #12]
 80240e6:	681b      	ldr	r3, [r3, #0]
 80240e8:	f042 0201 	orr.w	r2, r2, #1
 80240ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80240ee:	68fb      	ldr	r3, [r7, #12]
 80240f0:	681b      	ldr	r3, [r3, #0]
 80240f2:	681a      	ldr	r2, [r3, #0]
 80240f4:	68fb      	ldr	r3, [r7, #12]
 80240f6:	681b      	ldr	r3, [r3, #0]
 80240f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80240fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80240fe:	68fb      	ldr	r3, [r7, #12]
 8024100:	2224      	movs	r2, #36	; 0x24
 8024102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8024106:	68fb      	ldr	r3, [r7, #12]
 8024108:	2200      	movs	r2, #0
 802410a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802410c:	68fb      	ldr	r3, [r7, #12]
 802410e:	4a70      	ldr	r2, [pc, #448]	; (80242d0 <HAL_I2C_IsDeviceReady+0x258>)
 8024110:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8024112:	68fb      	ldr	r3, [r7, #12]
 8024114:	681b      	ldr	r3, [r3, #0]
 8024116:	681a      	ldr	r2, [r3, #0]
 8024118:	68fb      	ldr	r3, [r7, #12]
 802411a:	681b      	ldr	r3, [r3, #0]
 802411c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024120:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8024122:	69fb      	ldr	r3, [r7, #28]
 8024124:	9300      	str	r3, [sp, #0]
 8024126:	683b      	ldr	r3, [r7, #0]
 8024128:	2200      	movs	r2, #0
 802412a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 802412e:	68f8      	ldr	r0, [r7, #12]
 8024130:	f000 fad0 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8024134:	4603      	mov	r3, r0
 8024136:	2b00      	cmp	r3, #0
 8024138:	d00d      	beq.n	8024156 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802413a:	68fb      	ldr	r3, [r7, #12]
 802413c:	681b      	ldr	r3, [r3, #0]
 802413e:	681b      	ldr	r3, [r3, #0]
 8024140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024148:	d103      	bne.n	8024152 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 802414a:	68fb      	ldr	r3, [r7, #12]
 802414c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024150:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8024152:	2303      	movs	r3, #3
 8024154:	e0b6      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8024156:	897b      	ldrh	r3, [r7, #10]
 8024158:	b2db      	uxtb	r3, r3
 802415a:	461a      	mov	r2, r3
 802415c:	68fb      	ldr	r3, [r7, #12]
 802415e:	681b      	ldr	r3, [r3, #0]
 8024160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8024164:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8024166:	f7fd fcff 	bl	8021b68 <HAL_GetTick>
 802416a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 802416c:	68fb      	ldr	r3, [r7, #12]
 802416e:	681b      	ldr	r3, [r3, #0]
 8024170:	695b      	ldr	r3, [r3, #20]
 8024172:	f003 0302 	and.w	r3, r3, #2
 8024176:	2b02      	cmp	r3, #2
 8024178:	bf0c      	ite	eq
 802417a:	2301      	moveq	r3, #1
 802417c:	2300      	movne	r3, #0
 802417e:	b2db      	uxtb	r3, r3
 8024180:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8024182:	68fb      	ldr	r3, [r7, #12]
 8024184:	681b      	ldr	r3, [r3, #0]
 8024186:	695b      	ldr	r3, [r3, #20]
 8024188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024190:	bf0c      	ite	eq
 8024192:	2301      	moveq	r3, #1
 8024194:	2300      	movne	r3, #0
 8024196:	b2db      	uxtb	r3, r3
 8024198:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 802419a:	e025      	b.n	80241e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802419c:	f7fd fce4 	bl	8021b68 <HAL_GetTick>
 80241a0:	4602      	mov	r2, r0
 80241a2:	69fb      	ldr	r3, [r7, #28]
 80241a4:	1ad3      	subs	r3, r2, r3
 80241a6:	683a      	ldr	r2, [r7, #0]
 80241a8:	429a      	cmp	r2, r3
 80241aa:	d302      	bcc.n	80241b2 <HAL_I2C_IsDeviceReady+0x13a>
 80241ac:	683b      	ldr	r3, [r7, #0]
 80241ae:	2b00      	cmp	r3, #0
 80241b0:	d103      	bne.n	80241ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80241b2:	68fb      	ldr	r3, [r7, #12]
 80241b4:	22a0      	movs	r2, #160	; 0xa0
 80241b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80241ba:	68fb      	ldr	r3, [r7, #12]
 80241bc:	681b      	ldr	r3, [r3, #0]
 80241be:	695b      	ldr	r3, [r3, #20]
 80241c0:	f003 0302 	and.w	r3, r3, #2
 80241c4:	2b02      	cmp	r3, #2
 80241c6:	bf0c      	ite	eq
 80241c8:	2301      	moveq	r3, #1
 80241ca:	2300      	movne	r3, #0
 80241cc:	b2db      	uxtb	r3, r3
 80241ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80241d0:	68fb      	ldr	r3, [r7, #12]
 80241d2:	681b      	ldr	r3, [r3, #0]
 80241d4:	695b      	ldr	r3, [r3, #20]
 80241d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80241da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80241de:	bf0c      	ite	eq
 80241e0:	2301      	moveq	r3, #1
 80241e2:	2300      	movne	r3, #0
 80241e4:	b2db      	uxtb	r3, r3
 80241e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80241e8:	68fb      	ldr	r3, [r7, #12]
 80241ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80241ee:	b2db      	uxtb	r3, r3
 80241f0:	2ba0      	cmp	r3, #160	; 0xa0
 80241f2:	d005      	beq.n	8024200 <HAL_I2C_IsDeviceReady+0x188>
 80241f4:	7dfb      	ldrb	r3, [r7, #23]
 80241f6:	2b00      	cmp	r3, #0
 80241f8:	d102      	bne.n	8024200 <HAL_I2C_IsDeviceReady+0x188>
 80241fa:	7dbb      	ldrb	r3, [r7, #22]
 80241fc:	2b00      	cmp	r3, #0
 80241fe:	d0cd      	beq.n	802419c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8024200:	68fb      	ldr	r3, [r7, #12]
 8024202:	2220      	movs	r2, #32
 8024204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8024208:	68fb      	ldr	r3, [r7, #12]
 802420a:	681b      	ldr	r3, [r3, #0]
 802420c:	695b      	ldr	r3, [r3, #20]
 802420e:	f003 0302 	and.w	r3, r3, #2
 8024212:	2b02      	cmp	r3, #2
 8024214:	d129      	bne.n	802426a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8024216:	68fb      	ldr	r3, [r7, #12]
 8024218:	681b      	ldr	r3, [r3, #0]
 802421a:	681a      	ldr	r2, [r3, #0]
 802421c:	68fb      	ldr	r3, [r7, #12]
 802421e:	681b      	ldr	r3, [r3, #0]
 8024220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024224:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8024226:	2300      	movs	r3, #0
 8024228:	613b      	str	r3, [r7, #16]
 802422a:	68fb      	ldr	r3, [r7, #12]
 802422c:	681b      	ldr	r3, [r3, #0]
 802422e:	695b      	ldr	r3, [r3, #20]
 8024230:	613b      	str	r3, [r7, #16]
 8024232:	68fb      	ldr	r3, [r7, #12]
 8024234:	681b      	ldr	r3, [r3, #0]
 8024236:	699b      	ldr	r3, [r3, #24]
 8024238:	613b      	str	r3, [r7, #16]
 802423a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 802423c:	69fb      	ldr	r3, [r7, #28]
 802423e:	9300      	str	r3, [sp, #0]
 8024240:	2319      	movs	r3, #25
 8024242:	2201      	movs	r2, #1
 8024244:	4921      	ldr	r1, [pc, #132]	; (80242cc <HAL_I2C_IsDeviceReady+0x254>)
 8024246:	68f8      	ldr	r0, [r7, #12]
 8024248:	f000 fa44 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 802424c:	4603      	mov	r3, r0
 802424e:	2b00      	cmp	r3, #0
 8024250:	d001      	beq.n	8024256 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8024252:	2301      	movs	r3, #1
 8024254:	e036      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8024256:	68fb      	ldr	r3, [r7, #12]
 8024258:	2220      	movs	r2, #32
 802425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802425e:	68fb      	ldr	r3, [r7, #12]
 8024260:	2200      	movs	r2, #0
 8024262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8024266:	2300      	movs	r3, #0
 8024268:	e02c      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802426a:	68fb      	ldr	r3, [r7, #12]
 802426c:	681b      	ldr	r3, [r3, #0]
 802426e:	681a      	ldr	r2, [r3, #0]
 8024270:	68fb      	ldr	r3, [r7, #12]
 8024272:	681b      	ldr	r3, [r3, #0]
 8024274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024278:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802427a:	68fb      	ldr	r3, [r7, #12]
 802427c:	681b      	ldr	r3, [r3, #0]
 802427e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8024282:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8024284:	69fb      	ldr	r3, [r7, #28]
 8024286:	9300      	str	r3, [sp, #0]
 8024288:	2319      	movs	r3, #25
 802428a:	2201      	movs	r2, #1
 802428c:	490f      	ldr	r1, [pc, #60]	; (80242cc <HAL_I2C_IsDeviceReady+0x254>)
 802428e:	68f8      	ldr	r0, [r7, #12]
 8024290:	f000 fa20 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8024294:	4603      	mov	r3, r0
 8024296:	2b00      	cmp	r3, #0
 8024298:	d001      	beq.n	802429e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 802429a:	2301      	movs	r3, #1
 802429c:	e012      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 802429e:	69bb      	ldr	r3, [r7, #24]
 80242a0:	3301      	adds	r3, #1
 80242a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80242a4:	69ba      	ldr	r2, [r7, #24]
 80242a6:	687b      	ldr	r3, [r7, #4]
 80242a8:	429a      	cmp	r2, r3
 80242aa:	f4ff af32 	bcc.w	8024112 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80242ae:	68fb      	ldr	r3, [r7, #12]
 80242b0:	2220      	movs	r2, #32
 80242b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80242b6:	68fb      	ldr	r3, [r7, #12]
 80242b8:	2200      	movs	r2, #0
 80242ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80242be:	2301      	movs	r3, #1
 80242c0:	e000      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80242c2:	2302      	movs	r3, #2
  }
}
 80242c4:	4618      	mov	r0, r3
 80242c6:	3720      	adds	r7, #32
 80242c8:	46bd      	mov	sp, r7
 80242ca:	bd80      	pop	{r7, pc}
 80242cc:	00100002 	.word	0x00100002
 80242d0:	ffff0000 	.word	0xffff0000

080242d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80242d4:	b580      	push	{r7, lr}
 80242d6:	b088      	sub	sp, #32
 80242d8:	af02      	add	r7, sp, #8
 80242da:	60f8      	str	r0, [r7, #12]
 80242dc:	607a      	str	r2, [r7, #4]
 80242de:	603b      	str	r3, [r7, #0]
 80242e0:	460b      	mov	r3, r1
 80242e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80242e4:	68fb      	ldr	r3, [r7, #12]
 80242e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80242e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80242ea:	697b      	ldr	r3, [r7, #20]
 80242ec:	2b08      	cmp	r3, #8
 80242ee:	d006      	beq.n	80242fe <I2C_MasterRequestWrite+0x2a>
 80242f0:	697b      	ldr	r3, [r7, #20]
 80242f2:	2b01      	cmp	r3, #1
 80242f4:	d003      	beq.n	80242fe <I2C_MasterRequestWrite+0x2a>
 80242f6:	697b      	ldr	r3, [r7, #20]
 80242f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80242fc:	d108      	bne.n	8024310 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80242fe:	68fb      	ldr	r3, [r7, #12]
 8024300:	681b      	ldr	r3, [r3, #0]
 8024302:	681a      	ldr	r2, [r3, #0]
 8024304:	68fb      	ldr	r3, [r7, #12]
 8024306:	681b      	ldr	r3, [r3, #0]
 8024308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802430c:	601a      	str	r2, [r3, #0]
 802430e:	e00b      	b.n	8024328 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8024310:	68fb      	ldr	r3, [r7, #12]
 8024312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024314:	2b12      	cmp	r3, #18
 8024316:	d107      	bne.n	8024328 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8024318:	68fb      	ldr	r3, [r7, #12]
 802431a:	681b      	ldr	r3, [r3, #0]
 802431c:	681a      	ldr	r2, [r3, #0]
 802431e:	68fb      	ldr	r3, [r7, #12]
 8024320:	681b      	ldr	r3, [r3, #0]
 8024322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024326:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8024328:	683b      	ldr	r3, [r7, #0]
 802432a:	9300      	str	r3, [sp, #0]
 802432c:	687b      	ldr	r3, [r7, #4]
 802432e:	2200      	movs	r2, #0
 8024330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8024334:	68f8      	ldr	r0, [r7, #12]
 8024336:	f000 f9cd 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 802433a:	4603      	mov	r3, r0
 802433c:	2b00      	cmp	r3, #0
 802433e:	d00d      	beq.n	802435c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8024340:	68fb      	ldr	r3, [r7, #12]
 8024342:	681b      	ldr	r3, [r3, #0]
 8024344:	681b      	ldr	r3, [r3, #0]
 8024346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802434a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802434e:	d103      	bne.n	8024358 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8024350:	68fb      	ldr	r3, [r7, #12]
 8024352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8024358:	2303      	movs	r3, #3
 802435a:	e035      	b.n	80243c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802435c:	68fb      	ldr	r3, [r7, #12]
 802435e:	691b      	ldr	r3, [r3, #16]
 8024360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8024364:	d108      	bne.n	8024378 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8024366:	897b      	ldrh	r3, [r7, #10]
 8024368:	b2db      	uxtb	r3, r3
 802436a:	461a      	mov	r2, r3
 802436c:	68fb      	ldr	r3, [r7, #12]
 802436e:	681b      	ldr	r3, [r3, #0]
 8024370:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8024374:	611a      	str	r2, [r3, #16]
 8024376:	e01b      	b.n	80243b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8024378:	897b      	ldrh	r3, [r7, #10]
 802437a:	11db      	asrs	r3, r3, #7
 802437c:	b2db      	uxtb	r3, r3
 802437e:	f003 0306 	and.w	r3, r3, #6
 8024382:	b2db      	uxtb	r3, r3
 8024384:	f063 030f 	orn	r3, r3, #15
 8024388:	b2da      	uxtb	r2, r3
 802438a:	68fb      	ldr	r3, [r7, #12]
 802438c:	681b      	ldr	r3, [r3, #0]
 802438e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8024390:	683b      	ldr	r3, [r7, #0]
 8024392:	687a      	ldr	r2, [r7, #4]
 8024394:	490e      	ldr	r1, [pc, #56]	; (80243d0 <I2C_MasterRequestWrite+0xfc>)
 8024396:	68f8      	ldr	r0, [r7, #12]
 8024398:	f000 f9f3 	bl	8024782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 802439c:	4603      	mov	r3, r0
 802439e:	2b00      	cmp	r3, #0
 80243a0:	d001      	beq.n	80243a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80243a2:	2301      	movs	r3, #1
 80243a4:	e010      	b.n	80243c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80243a6:	897b      	ldrh	r3, [r7, #10]
 80243a8:	b2da      	uxtb	r2, r3
 80243aa:	68fb      	ldr	r3, [r7, #12]
 80243ac:	681b      	ldr	r3, [r3, #0]
 80243ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80243b0:	683b      	ldr	r3, [r7, #0]
 80243b2:	687a      	ldr	r2, [r7, #4]
 80243b4:	4907      	ldr	r1, [pc, #28]	; (80243d4 <I2C_MasterRequestWrite+0x100>)
 80243b6:	68f8      	ldr	r0, [r7, #12]
 80243b8:	f000 f9e3 	bl	8024782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80243bc:	4603      	mov	r3, r0
 80243be:	2b00      	cmp	r3, #0
 80243c0:	d001      	beq.n	80243c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80243c2:	2301      	movs	r3, #1
 80243c4:	e000      	b.n	80243c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80243c6:	2300      	movs	r3, #0
}
 80243c8:	4618      	mov	r0, r3
 80243ca:	3718      	adds	r7, #24
 80243cc:	46bd      	mov	sp, r7
 80243ce:	bd80      	pop	{r7, pc}
 80243d0:	00010008 	.word	0x00010008
 80243d4:	00010002 	.word	0x00010002

080243d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80243d8:	b580      	push	{r7, lr}
 80243da:	b088      	sub	sp, #32
 80243dc:	af02      	add	r7, sp, #8
 80243de:	60f8      	str	r0, [r7, #12]
 80243e0:	4608      	mov	r0, r1
 80243e2:	4611      	mov	r1, r2
 80243e4:	461a      	mov	r2, r3
 80243e6:	4603      	mov	r3, r0
 80243e8:	817b      	strh	r3, [r7, #10]
 80243ea:	460b      	mov	r3, r1
 80243ec:	813b      	strh	r3, [r7, #8]
 80243ee:	4613      	mov	r3, r2
 80243f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80243f2:	68fb      	ldr	r3, [r7, #12]
 80243f4:	681b      	ldr	r3, [r3, #0]
 80243f6:	681a      	ldr	r2, [r3, #0]
 80243f8:	68fb      	ldr	r3, [r7, #12]
 80243fa:	681b      	ldr	r3, [r3, #0]
 80243fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8024402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024404:	9300      	str	r3, [sp, #0]
 8024406:	6a3b      	ldr	r3, [r7, #32]
 8024408:	2200      	movs	r2, #0
 802440a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 802440e:	68f8      	ldr	r0, [r7, #12]
 8024410:	f000 f960 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8024414:	4603      	mov	r3, r0
 8024416:	2b00      	cmp	r3, #0
 8024418:	d00d      	beq.n	8024436 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802441a:	68fb      	ldr	r3, [r7, #12]
 802441c:	681b      	ldr	r3, [r3, #0]
 802441e:	681b      	ldr	r3, [r3, #0]
 8024420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024428:	d103      	bne.n	8024432 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 802442a:	68fb      	ldr	r3, [r7, #12]
 802442c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024430:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8024432:	2303      	movs	r3, #3
 8024434:	e05f      	b.n	80244f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8024436:	897b      	ldrh	r3, [r7, #10]
 8024438:	b2db      	uxtb	r3, r3
 802443a:	461a      	mov	r2, r3
 802443c:	68fb      	ldr	r3, [r7, #12]
 802443e:	681b      	ldr	r3, [r3, #0]
 8024440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8024444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8024446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024448:	6a3a      	ldr	r2, [r7, #32]
 802444a:	492d      	ldr	r1, [pc, #180]	; (8024500 <I2C_RequestMemoryWrite+0x128>)
 802444c:	68f8      	ldr	r0, [r7, #12]
 802444e:	f000 f998 	bl	8024782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8024452:	4603      	mov	r3, r0
 8024454:	2b00      	cmp	r3, #0
 8024456:	d001      	beq.n	802445c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8024458:	2301      	movs	r3, #1
 802445a:	e04c      	b.n	80244f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802445c:	2300      	movs	r3, #0
 802445e:	617b      	str	r3, [r7, #20]
 8024460:	68fb      	ldr	r3, [r7, #12]
 8024462:	681b      	ldr	r3, [r3, #0]
 8024464:	695b      	ldr	r3, [r3, #20]
 8024466:	617b      	str	r3, [r7, #20]
 8024468:	68fb      	ldr	r3, [r7, #12]
 802446a:	681b      	ldr	r3, [r3, #0]
 802446c:	699b      	ldr	r3, [r3, #24]
 802446e:	617b      	str	r3, [r7, #20]
 8024470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8024472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024474:	6a39      	ldr	r1, [r7, #32]
 8024476:	68f8      	ldr	r0, [r7, #12]
 8024478:	f000 fa02 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 802447c:	4603      	mov	r3, r0
 802447e:	2b00      	cmp	r3, #0
 8024480:	d00d      	beq.n	802449e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8024482:	68fb      	ldr	r3, [r7, #12]
 8024484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024486:	2b04      	cmp	r3, #4
 8024488:	d107      	bne.n	802449a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802448a:	68fb      	ldr	r3, [r7, #12]
 802448c:	681b      	ldr	r3, [r3, #0]
 802448e:	681a      	ldr	r2, [r3, #0]
 8024490:	68fb      	ldr	r3, [r7, #12]
 8024492:	681b      	ldr	r3, [r3, #0]
 8024494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 802449a:	2301      	movs	r3, #1
 802449c:	e02b      	b.n	80244f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 802449e:	88fb      	ldrh	r3, [r7, #6]
 80244a0:	2b01      	cmp	r3, #1
 80244a2:	d105      	bne.n	80244b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80244a4:	893b      	ldrh	r3, [r7, #8]
 80244a6:	b2da      	uxtb	r2, r3
 80244a8:	68fb      	ldr	r3, [r7, #12]
 80244aa:	681b      	ldr	r3, [r3, #0]
 80244ac:	611a      	str	r2, [r3, #16]
 80244ae:	e021      	b.n	80244f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80244b0:	893b      	ldrh	r3, [r7, #8]
 80244b2:	0a1b      	lsrs	r3, r3, #8
 80244b4:	b29b      	uxth	r3, r3
 80244b6:	b2da      	uxtb	r2, r3
 80244b8:	68fb      	ldr	r3, [r7, #12]
 80244ba:	681b      	ldr	r3, [r3, #0]
 80244bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80244be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80244c0:	6a39      	ldr	r1, [r7, #32]
 80244c2:	68f8      	ldr	r0, [r7, #12]
 80244c4:	f000 f9dc 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 80244c8:	4603      	mov	r3, r0
 80244ca:	2b00      	cmp	r3, #0
 80244cc:	d00d      	beq.n	80244ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80244ce:	68fb      	ldr	r3, [r7, #12]
 80244d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80244d2:	2b04      	cmp	r3, #4
 80244d4:	d107      	bne.n	80244e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80244d6:	68fb      	ldr	r3, [r7, #12]
 80244d8:	681b      	ldr	r3, [r3, #0]
 80244da:	681a      	ldr	r2, [r3, #0]
 80244dc:	68fb      	ldr	r3, [r7, #12]
 80244de:	681b      	ldr	r3, [r3, #0]
 80244e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80244e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80244e6:	2301      	movs	r3, #1
 80244e8:	e005      	b.n	80244f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80244ea:	893b      	ldrh	r3, [r7, #8]
 80244ec:	b2da      	uxtb	r2, r3
 80244ee:	68fb      	ldr	r3, [r7, #12]
 80244f0:	681b      	ldr	r3, [r3, #0]
 80244f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80244f4:	2300      	movs	r3, #0
}
 80244f6:	4618      	mov	r0, r3
 80244f8:	3718      	adds	r7, #24
 80244fa:	46bd      	mov	sp, r7
 80244fc:	bd80      	pop	{r7, pc}
 80244fe:	bf00      	nop
 8024500:	00010002 	.word	0x00010002

08024504 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8024504:	b580      	push	{r7, lr}
 8024506:	b088      	sub	sp, #32
 8024508:	af02      	add	r7, sp, #8
 802450a:	60f8      	str	r0, [r7, #12]
 802450c:	4608      	mov	r0, r1
 802450e:	4611      	mov	r1, r2
 8024510:	461a      	mov	r2, r3
 8024512:	4603      	mov	r3, r0
 8024514:	817b      	strh	r3, [r7, #10]
 8024516:	460b      	mov	r3, r1
 8024518:	813b      	strh	r3, [r7, #8]
 802451a:	4613      	mov	r3, r2
 802451c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802451e:	68fb      	ldr	r3, [r7, #12]
 8024520:	681b      	ldr	r3, [r3, #0]
 8024522:	681a      	ldr	r2, [r3, #0]
 8024524:	68fb      	ldr	r3, [r7, #12]
 8024526:	681b      	ldr	r3, [r3, #0]
 8024528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802452c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802452e:	68fb      	ldr	r3, [r7, #12]
 8024530:	681b      	ldr	r3, [r3, #0]
 8024532:	681a      	ldr	r2, [r3, #0]
 8024534:	68fb      	ldr	r3, [r7, #12]
 8024536:	681b      	ldr	r3, [r3, #0]
 8024538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802453c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024540:	9300      	str	r3, [sp, #0]
 8024542:	6a3b      	ldr	r3, [r7, #32]
 8024544:	2200      	movs	r2, #0
 8024546:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 802454a:	68f8      	ldr	r0, [r7, #12]
 802454c:	f000 f8c2 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8024550:	4603      	mov	r3, r0
 8024552:	2b00      	cmp	r3, #0
 8024554:	d00d      	beq.n	8024572 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8024556:	68fb      	ldr	r3, [r7, #12]
 8024558:	681b      	ldr	r3, [r3, #0]
 802455a:	681b      	ldr	r3, [r3, #0]
 802455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024564:	d103      	bne.n	802456e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8024566:	68fb      	ldr	r3, [r7, #12]
 8024568:	f44f 7200 	mov.w	r2, #512	; 0x200
 802456c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 802456e:	2303      	movs	r3, #3
 8024570:	e0aa      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8024572:	897b      	ldrh	r3, [r7, #10]
 8024574:	b2db      	uxtb	r3, r3
 8024576:	461a      	mov	r2, r3
 8024578:	68fb      	ldr	r3, [r7, #12]
 802457a:	681b      	ldr	r3, [r3, #0]
 802457c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8024580:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8024582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024584:	6a3a      	ldr	r2, [r7, #32]
 8024586:	4952      	ldr	r1, [pc, #328]	; (80246d0 <I2C_RequestMemoryRead+0x1cc>)
 8024588:	68f8      	ldr	r0, [r7, #12]
 802458a:	f000 f8fa 	bl	8024782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 802458e:	4603      	mov	r3, r0
 8024590:	2b00      	cmp	r3, #0
 8024592:	d001      	beq.n	8024598 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8024594:	2301      	movs	r3, #1
 8024596:	e097      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8024598:	2300      	movs	r3, #0
 802459a:	617b      	str	r3, [r7, #20]
 802459c:	68fb      	ldr	r3, [r7, #12]
 802459e:	681b      	ldr	r3, [r3, #0]
 80245a0:	695b      	ldr	r3, [r3, #20]
 80245a2:	617b      	str	r3, [r7, #20]
 80245a4:	68fb      	ldr	r3, [r7, #12]
 80245a6:	681b      	ldr	r3, [r3, #0]
 80245a8:	699b      	ldr	r3, [r3, #24]
 80245aa:	617b      	str	r3, [r7, #20]
 80245ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80245ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80245b0:	6a39      	ldr	r1, [r7, #32]
 80245b2:	68f8      	ldr	r0, [r7, #12]
 80245b4:	f000 f964 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 80245b8:	4603      	mov	r3, r0
 80245ba:	2b00      	cmp	r3, #0
 80245bc:	d00d      	beq.n	80245da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80245be:	68fb      	ldr	r3, [r7, #12]
 80245c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80245c2:	2b04      	cmp	r3, #4
 80245c4:	d107      	bne.n	80245d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80245c6:	68fb      	ldr	r3, [r7, #12]
 80245c8:	681b      	ldr	r3, [r3, #0]
 80245ca:	681a      	ldr	r2, [r3, #0]
 80245cc:	68fb      	ldr	r3, [r7, #12]
 80245ce:	681b      	ldr	r3, [r3, #0]
 80245d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80245d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80245d6:	2301      	movs	r3, #1
 80245d8:	e076      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80245da:	88fb      	ldrh	r3, [r7, #6]
 80245dc:	2b01      	cmp	r3, #1
 80245de:	d105      	bne.n	80245ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80245e0:	893b      	ldrh	r3, [r7, #8]
 80245e2:	b2da      	uxtb	r2, r3
 80245e4:	68fb      	ldr	r3, [r7, #12]
 80245e6:	681b      	ldr	r3, [r3, #0]
 80245e8:	611a      	str	r2, [r3, #16]
 80245ea:	e021      	b.n	8024630 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80245ec:	893b      	ldrh	r3, [r7, #8]
 80245ee:	0a1b      	lsrs	r3, r3, #8
 80245f0:	b29b      	uxth	r3, r3
 80245f2:	b2da      	uxtb	r2, r3
 80245f4:	68fb      	ldr	r3, [r7, #12]
 80245f6:	681b      	ldr	r3, [r3, #0]
 80245f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80245fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80245fc:	6a39      	ldr	r1, [r7, #32]
 80245fe:	68f8      	ldr	r0, [r7, #12]
 8024600:	f000 f93e 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 8024604:	4603      	mov	r3, r0
 8024606:	2b00      	cmp	r3, #0
 8024608:	d00d      	beq.n	8024626 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802460a:	68fb      	ldr	r3, [r7, #12]
 802460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802460e:	2b04      	cmp	r3, #4
 8024610:	d107      	bne.n	8024622 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8024612:	68fb      	ldr	r3, [r7, #12]
 8024614:	681b      	ldr	r3, [r3, #0]
 8024616:	681a      	ldr	r2, [r3, #0]
 8024618:	68fb      	ldr	r3, [r7, #12]
 802461a:	681b      	ldr	r3, [r3, #0]
 802461c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024620:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8024622:	2301      	movs	r3, #1
 8024624:	e050      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8024626:	893b      	ldrh	r3, [r7, #8]
 8024628:	b2da      	uxtb	r2, r3
 802462a:	68fb      	ldr	r3, [r7, #12]
 802462c:	681b      	ldr	r3, [r3, #0]
 802462e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8024630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024632:	6a39      	ldr	r1, [r7, #32]
 8024634:	68f8      	ldr	r0, [r7, #12]
 8024636:	f000 f923 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 802463a:	4603      	mov	r3, r0
 802463c:	2b00      	cmp	r3, #0
 802463e:	d00d      	beq.n	802465c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8024640:	68fb      	ldr	r3, [r7, #12]
 8024642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024644:	2b04      	cmp	r3, #4
 8024646:	d107      	bne.n	8024658 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8024648:	68fb      	ldr	r3, [r7, #12]
 802464a:	681b      	ldr	r3, [r3, #0]
 802464c:	681a      	ldr	r2, [r3, #0]
 802464e:	68fb      	ldr	r3, [r7, #12]
 8024650:	681b      	ldr	r3, [r3, #0]
 8024652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024656:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8024658:	2301      	movs	r3, #1
 802465a:	e035      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802465c:	68fb      	ldr	r3, [r7, #12]
 802465e:	681b      	ldr	r3, [r3, #0]
 8024660:	681a      	ldr	r2, [r3, #0]
 8024662:	68fb      	ldr	r3, [r7, #12]
 8024664:	681b      	ldr	r3, [r3, #0]
 8024666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802466a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802466e:	9300      	str	r3, [sp, #0]
 8024670:	6a3b      	ldr	r3, [r7, #32]
 8024672:	2200      	movs	r2, #0
 8024674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8024678:	68f8      	ldr	r0, [r7, #12]
 802467a:	f000 f82b 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 802467e:	4603      	mov	r3, r0
 8024680:	2b00      	cmp	r3, #0
 8024682:	d00d      	beq.n	80246a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8024684:	68fb      	ldr	r3, [r7, #12]
 8024686:	681b      	ldr	r3, [r3, #0]
 8024688:	681b      	ldr	r3, [r3, #0]
 802468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802468e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024692:	d103      	bne.n	802469c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8024694:	68fb      	ldr	r3, [r7, #12]
 8024696:	f44f 7200 	mov.w	r2, #512	; 0x200
 802469a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 802469c:	2303      	movs	r3, #3
 802469e:	e013      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80246a0:	897b      	ldrh	r3, [r7, #10]
 80246a2:	b2db      	uxtb	r3, r3
 80246a4:	f043 0301 	orr.w	r3, r3, #1
 80246a8:	b2da      	uxtb	r2, r3
 80246aa:	68fb      	ldr	r3, [r7, #12]
 80246ac:	681b      	ldr	r3, [r3, #0]
 80246ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80246b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246b2:	6a3a      	ldr	r2, [r7, #32]
 80246b4:	4906      	ldr	r1, [pc, #24]	; (80246d0 <I2C_RequestMemoryRead+0x1cc>)
 80246b6:	68f8      	ldr	r0, [r7, #12]
 80246b8:	f000 f863 	bl	8024782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80246bc:	4603      	mov	r3, r0
 80246be:	2b00      	cmp	r3, #0
 80246c0:	d001      	beq.n	80246c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80246c2:	2301      	movs	r3, #1
 80246c4:	e000      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80246c6:	2300      	movs	r3, #0
}
 80246c8:	4618      	mov	r0, r3
 80246ca:	3718      	adds	r7, #24
 80246cc:	46bd      	mov	sp, r7
 80246ce:	bd80      	pop	{r7, pc}
 80246d0:	00010002 	.word	0x00010002

080246d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80246d4:	b580      	push	{r7, lr}
 80246d6:	b084      	sub	sp, #16
 80246d8:	af00      	add	r7, sp, #0
 80246da:	60f8      	str	r0, [r7, #12]
 80246dc:	60b9      	str	r1, [r7, #8]
 80246de:	603b      	str	r3, [r7, #0]
 80246e0:	4613      	mov	r3, r2
 80246e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80246e4:	e025      	b.n	8024732 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80246e6:	683b      	ldr	r3, [r7, #0]
 80246e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80246ec:	d021      	beq.n	8024732 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80246ee:	f7fd fa3b 	bl	8021b68 <HAL_GetTick>
 80246f2:	4602      	mov	r2, r0
 80246f4:	69bb      	ldr	r3, [r7, #24]
 80246f6:	1ad3      	subs	r3, r2, r3
 80246f8:	683a      	ldr	r2, [r7, #0]
 80246fa:	429a      	cmp	r2, r3
 80246fc:	d302      	bcc.n	8024704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80246fe:	683b      	ldr	r3, [r7, #0]
 8024700:	2b00      	cmp	r3, #0
 8024702:	d116      	bne.n	8024732 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8024704:	68fb      	ldr	r3, [r7, #12]
 8024706:	2200      	movs	r2, #0
 8024708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 802470a:	68fb      	ldr	r3, [r7, #12]
 802470c:	2220      	movs	r2, #32
 802470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8024712:	68fb      	ldr	r3, [r7, #12]
 8024714:	2200      	movs	r2, #0
 8024716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802471a:	68fb      	ldr	r3, [r7, #12]
 802471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802471e:	f043 0220 	orr.w	r2, r3, #32
 8024722:	68fb      	ldr	r3, [r7, #12]
 8024724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8024726:	68fb      	ldr	r3, [r7, #12]
 8024728:	2200      	movs	r2, #0
 802472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802472e:	2301      	movs	r3, #1
 8024730:	e023      	b.n	802477a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8024732:	68bb      	ldr	r3, [r7, #8]
 8024734:	0c1b      	lsrs	r3, r3, #16
 8024736:	b2db      	uxtb	r3, r3
 8024738:	2b01      	cmp	r3, #1
 802473a:	d10d      	bne.n	8024758 <I2C_WaitOnFlagUntilTimeout+0x84>
 802473c:	68fb      	ldr	r3, [r7, #12]
 802473e:	681b      	ldr	r3, [r3, #0]
 8024740:	695b      	ldr	r3, [r3, #20]
 8024742:	43da      	mvns	r2, r3
 8024744:	68bb      	ldr	r3, [r7, #8]
 8024746:	4013      	ands	r3, r2
 8024748:	b29b      	uxth	r3, r3
 802474a:	2b00      	cmp	r3, #0
 802474c:	bf0c      	ite	eq
 802474e:	2301      	moveq	r3, #1
 8024750:	2300      	movne	r3, #0
 8024752:	b2db      	uxtb	r3, r3
 8024754:	461a      	mov	r2, r3
 8024756:	e00c      	b.n	8024772 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8024758:	68fb      	ldr	r3, [r7, #12]
 802475a:	681b      	ldr	r3, [r3, #0]
 802475c:	699b      	ldr	r3, [r3, #24]
 802475e:	43da      	mvns	r2, r3
 8024760:	68bb      	ldr	r3, [r7, #8]
 8024762:	4013      	ands	r3, r2
 8024764:	b29b      	uxth	r3, r3
 8024766:	2b00      	cmp	r3, #0
 8024768:	bf0c      	ite	eq
 802476a:	2301      	moveq	r3, #1
 802476c:	2300      	movne	r3, #0
 802476e:	b2db      	uxtb	r3, r3
 8024770:	461a      	mov	r2, r3
 8024772:	79fb      	ldrb	r3, [r7, #7]
 8024774:	429a      	cmp	r2, r3
 8024776:	d0b6      	beq.n	80246e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8024778:	2300      	movs	r3, #0
}
 802477a:	4618      	mov	r0, r3
 802477c:	3710      	adds	r7, #16
 802477e:	46bd      	mov	sp, r7
 8024780:	bd80      	pop	{r7, pc}

08024782 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8024782:	b580      	push	{r7, lr}
 8024784:	b084      	sub	sp, #16
 8024786:	af00      	add	r7, sp, #0
 8024788:	60f8      	str	r0, [r7, #12]
 802478a:	60b9      	str	r1, [r7, #8]
 802478c:	607a      	str	r2, [r7, #4]
 802478e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8024790:	e051      	b.n	8024836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8024792:	68fb      	ldr	r3, [r7, #12]
 8024794:	681b      	ldr	r3, [r3, #0]
 8024796:	695b      	ldr	r3, [r3, #20]
 8024798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802479c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80247a0:	d123      	bne.n	80247ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80247a2:	68fb      	ldr	r3, [r7, #12]
 80247a4:	681b      	ldr	r3, [r3, #0]
 80247a6:	681a      	ldr	r2, [r3, #0]
 80247a8:	68fb      	ldr	r3, [r7, #12]
 80247aa:	681b      	ldr	r3, [r3, #0]
 80247ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80247b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80247b2:	68fb      	ldr	r3, [r7, #12]
 80247b4:	681b      	ldr	r3, [r3, #0]
 80247b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80247ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80247bc:	68fb      	ldr	r3, [r7, #12]
 80247be:	2200      	movs	r2, #0
 80247c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80247c2:	68fb      	ldr	r3, [r7, #12]
 80247c4:	2220      	movs	r2, #32
 80247c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80247ca:	68fb      	ldr	r3, [r7, #12]
 80247cc:	2200      	movs	r2, #0
 80247ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80247d2:	68fb      	ldr	r3, [r7, #12]
 80247d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80247d6:	f043 0204 	orr.w	r2, r3, #4
 80247da:	68fb      	ldr	r3, [r7, #12]
 80247dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80247de:	68fb      	ldr	r3, [r7, #12]
 80247e0:	2200      	movs	r2, #0
 80247e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80247e6:	2301      	movs	r3, #1
 80247e8:	e046      	b.n	8024878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80247ea:	687b      	ldr	r3, [r7, #4]
 80247ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80247f0:	d021      	beq.n	8024836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80247f2:	f7fd f9b9 	bl	8021b68 <HAL_GetTick>
 80247f6:	4602      	mov	r2, r0
 80247f8:	683b      	ldr	r3, [r7, #0]
 80247fa:	1ad3      	subs	r3, r2, r3
 80247fc:	687a      	ldr	r2, [r7, #4]
 80247fe:	429a      	cmp	r2, r3
 8024800:	d302      	bcc.n	8024808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8024802:	687b      	ldr	r3, [r7, #4]
 8024804:	2b00      	cmp	r3, #0
 8024806:	d116      	bne.n	8024836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8024808:	68fb      	ldr	r3, [r7, #12]
 802480a:	2200      	movs	r2, #0
 802480c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802480e:	68fb      	ldr	r3, [r7, #12]
 8024810:	2220      	movs	r2, #32
 8024812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8024816:	68fb      	ldr	r3, [r7, #12]
 8024818:	2200      	movs	r2, #0
 802481a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802481e:	68fb      	ldr	r3, [r7, #12]
 8024820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024822:	f043 0220 	orr.w	r2, r3, #32
 8024826:	68fb      	ldr	r3, [r7, #12]
 8024828:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802482a:	68fb      	ldr	r3, [r7, #12]
 802482c:	2200      	movs	r2, #0
 802482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8024832:	2301      	movs	r3, #1
 8024834:	e020      	b.n	8024878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8024836:	68bb      	ldr	r3, [r7, #8]
 8024838:	0c1b      	lsrs	r3, r3, #16
 802483a:	b2db      	uxtb	r3, r3
 802483c:	2b01      	cmp	r3, #1
 802483e:	d10c      	bne.n	802485a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8024840:	68fb      	ldr	r3, [r7, #12]
 8024842:	681b      	ldr	r3, [r3, #0]
 8024844:	695b      	ldr	r3, [r3, #20]
 8024846:	43da      	mvns	r2, r3
 8024848:	68bb      	ldr	r3, [r7, #8]
 802484a:	4013      	ands	r3, r2
 802484c:	b29b      	uxth	r3, r3
 802484e:	2b00      	cmp	r3, #0
 8024850:	bf14      	ite	ne
 8024852:	2301      	movne	r3, #1
 8024854:	2300      	moveq	r3, #0
 8024856:	b2db      	uxtb	r3, r3
 8024858:	e00b      	b.n	8024872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 802485a:	68fb      	ldr	r3, [r7, #12]
 802485c:	681b      	ldr	r3, [r3, #0]
 802485e:	699b      	ldr	r3, [r3, #24]
 8024860:	43da      	mvns	r2, r3
 8024862:	68bb      	ldr	r3, [r7, #8]
 8024864:	4013      	ands	r3, r2
 8024866:	b29b      	uxth	r3, r3
 8024868:	2b00      	cmp	r3, #0
 802486a:	bf14      	ite	ne
 802486c:	2301      	movne	r3, #1
 802486e:	2300      	moveq	r3, #0
 8024870:	b2db      	uxtb	r3, r3
 8024872:	2b00      	cmp	r3, #0
 8024874:	d18d      	bne.n	8024792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8024876:	2300      	movs	r3, #0
}
 8024878:	4618      	mov	r0, r3
 802487a:	3710      	adds	r7, #16
 802487c:	46bd      	mov	sp, r7
 802487e:	bd80      	pop	{r7, pc}

08024880 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8024880:	b580      	push	{r7, lr}
 8024882:	b084      	sub	sp, #16
 8024884:	af00      	add	r7, sp, #0
 8024886:	60f8      	str	r0, [r7, #12]
 8024888:	60b9      	str	r1, [r7, #8]
 802488a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802488c:	e02d      	b.n	80248ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 802488e:	68f8      	ldr	r0, [r7, #12]
 8024890:	f000 f8ce 	bl	8024a30 <I2C_IsAcknowledgeFailed>
 8024894:	4603      	mov	r3, r0
 8024896:	2b00      	cmp	r3, #0
 8024898:	d001      	beq.n	802489e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 802489a:	2301      	movs	r3, #1
 802489c:	e02d      	b.n	80248fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802489e:	68bb      	ldr	r3, [r7, #8]
 80248a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80248a4:	d021      	beq.n	80248ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80248a6:	f7fd f95f 	bl	8021b68 <HAL_GetTick>
 80248aa:	4602      	mov	r2, r0
 80248ac:	687b      	ldr	r3, [r7, #4]
 80248ae:	1ad3      	subs	r3, r2, r3
 80248b0:	68ba      	ldr	r2, [r7, #8]
 80248b2:	429a      	cmp	r2, r3
 80248b4:	d302      	bcc.n	80248bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80248b6:	68bb      	ldr	r3, [r7, #8]
 80248b8:	2b00      	cmp	r3, #0
 80248ba:	d116      	bne.n	80248ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80248bc:	68fb      	ldr	r3, [r7, #12]
 80248be:	2200      	movs	r2, #0
 80248c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80248c2:	68fb      	ldr	r3, [r7, #12]
 80248c4:	2220      	movs	r2, #32
 80248c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80248ca:	68fb      	ldr	r3, [r7, #12]
 80248cc:	2200      	movs	r2, #0
 80248ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80248d2:	68fb      	ldr	r3, [r7, #12]
 80248d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80248d6:	f043 0220 	orr.w	r2, r3, #32
 80248da:	68fb      	ldr	r3, [r7, #12]
 80248dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80248de:	68fb      	ldr	r3, [r7, #12]
 80248e0:	2200      	movs	r2, #0
 80248e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80248e6:	2301      	movs	r3, #1
 80248e8:	e007      	b.n	80248fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80248ea:	68fb      	ldr	r3, [r7, #12]
 80248ec:	681b      	ldr	r3, [r3, #0]
 80248ee:	695b      	ldr	r3, [r3, #20]
 80248f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80248f4:	2b80      	cmp	r3, #128	; 0x80
 80248f6:	d1ca      	bne.n	802488e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80248f8:	2300      	movs	r3, #0
}
 80248fa:	4618      	mov	r0, r3
 80248fc:	3710      	adds	r7, #16
 80248fe:	46bd      	mov	sp, r7
 8024900:	bd80      	pop	{r7, pc}

08024902 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8024902:	b580      	push	{r7, lr}
 8024904:	b084      	sub	sp, #16
 8024906:	af00      	add	r7, sp, #0
 8024908:	60f8      	str	r0, [r7, #12]
 802490a:	60b9      	str	r1, [r7, #8]
 802490c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 802490e:	e02d      	b.n	802496c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8024910:	68f8      	ldr	r0, [r7, #12]
 8024912:	f000 f88d 	bl	8024a30 <I2C_IsAcknowledgeFailed>
 8024916:	4603      	mov	r3, r0
 8024918:	2b00      	cmp	r3, #0
 802491a:	d001      	beq.n	8024920 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 802491c:	2301      	movs	r3, #1
 802491e:	e02d      	b.n	802497c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8024920:	68bb      	ldr	r3, [r7, #8]
 8024922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024926:	d021      	beq.n	802496c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8024928:	f7fd f91e 	bl	8021b68 <HAL_GetTick>
 802492c:	4602      	mov	r2, r0
 802492e:	687b      	ldr	r3, [r7, #4]
 8024930:	1ad3      	subs	r3, r2, r3
 8024932:	68ba      	ldr	r2, [r7, #8]
 8024934:	429a      	cmp	r2, r3
 8024936:	d302      	bcc.n	802493e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8024938:	68bb      	ldr	r3, [r7, #8]
 802493a:	2b00      	cmp	r3, #0
 802493c:	d116      	bne.n	802496c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 802493e:	68fb      	ldr	r3, [r7, #12]
 8024940:	2200      	movs	r2, #0
 8024942:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8024944:	68fb      	ldr	r3, [r7, #12]
 8024946:	2220      	movs	r2, #32
 8024948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802494c:	68fb      	ldr	r3, [r7, #12]
 802494e:	2200      	movs	r2, #0
 8024950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8024954:	68fb      	ldr	r3, [r7, #12]
 8024956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024958:	f043 0220 	orr.w	r2, r3, #32
 802495c:	68fb      	ldr	r3, [r7, #12]
 802495e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8024960:	68fb      	ldr	r3, [r7, #12]
 8024962:	2200      	movs	r2, #0
 8024964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8024968:	2301      	movs	r3, #1
 802496a:	e007      	b.n	802497c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 802496c:	68fb      	ldr	r3, [r7, #12]
 802496e:	681b      	ldr	r3, [r3, #0]
 8024970:	695b      	ldr	r3, [r3, #20]
 8024972:	f003 0304 	and.w	r3, r3, #4
 8024976:	2b04      	cmp	r3, #4
 8024978:	d1ca      	bne.n	8024910 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 802497a:	2300      	movs	r3, #0
}
 802497c:	4618      	mov	r0, r3
 802497e:	3710      	adds	r7, #16
 8024980:	46bd      	mov	sp, r7
 8024982:	bd80      	pop	{r7, pc}

08024984 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8024984:	b580      	push	{r7, lr}
 8024986:	b084      	sub	sp, #16
 8024988:	af00      	add	r7, sp, #0
 802498a:	60f8      	str	r0, [r7, #12]
 802498c:	60b9      	str	r1, [r7, #8]
 802498e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8024990:	e042      	b.n	8024a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8024992:	68fb      	ldr	r3, [r7, #12]
 8024994:	681b      	ldr	r3, [r3, #0]
 8024996:	695b      	ldr	r3, [r3, #20]
 8024998:	f003 0310 	and.w	r3, r3, #16
 802499c:	2b10      	cmp	r3, #16
 802499e:	d119      	bne.n	80249d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80249a0:	68fb      	ldr	r3, [r7, #12]
 80249a2:	681b      	ldr	r3, [r3, #0]
 80249a4:	f06f 0210 	mvn.w	r2, #16
 80249a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80249aa:	68fb      	ldr	r3, [r7, #12]
 80249ac:	2200      	movs	r2, #0
 80249ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80249b0:	68fb      	ldr	r3, [r7, #12]
 80249b2:	2220      	movs	r2, #32
 80249b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80249b8:	68fb      	ldr	r3, [r7, #12]
 80249ba:	2200      	movs	r2, #0
 80249bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80249c0:	68fb      	ldr	r3, [r7, #12]
 80249c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80249c4:	68fb      	ldr	r3, [r7, #12]
 80249c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80249c8:	68fb      	ldr	r3, [r7, #12]
 80249ca:	2200      	movs	r2, #0
 80249cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80249d0:	2301      	movs	r3, #1
 80249d2:	e029      	b.n	8024a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80249d4:	f7fd f8c8 	bl	8021b68 <HAL_GetTick>
 80249d8:	4602      	mov	r2, r0
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	1ad3      	subs	r3, r2, r3
 80249de:	68ba      	ldr	r2, [r7, #8]
 80249e0:	429a      	cmp	r2, r3
 80249e2:	d302      	bcc.n	80249ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80249e4:	68bb      	ldr	r3, [r7, #8]
 80249e6:	2b00      	cmp	r3, #0
 80249e8:	d116      	bne.n	8024a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80249ea:	68fb      	ldr	r3, [r7, #12]
 80249ec:	2200      	movs	r2, #0
 80249ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80249f0:	68fb      	ldr	r3, [r7, #12]
 80249f2:	2220      	movs	r2, #32
 80249f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80249f8:	68fb      	ldr	r3, [r7, #12]
 80249fa:	2200      	movs	r2, #0
 80249fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8024a00:	68fb      	ldr	r3, [r7, #12]
 8024a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a04:	f043 0220 	orr.w	r2, r3, #32
 8024a08:	68fb      	ldr	r3, [r7, #12]
 8024a0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8024a0c:	68fb      	ldr	r3, [r7, #12]
 8024a0e:	2200      	movs	r2, #0
 8024a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8024a14:	2301      	movs	r3, #1
 8024a16:	e007      	b.n	8024a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8024a18:	68fb      	ldr	r3, [r7, #12]
 8024a1a:	681b      	ldr	r3, [r3, #0]
 8024a1c:	695b      	ldr	r3, [r3, #20]
 8024a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024a22:	2b40      	cmp	r3, #64	; 0x40
 8024a24:	d1b5      	bne.n	8024992 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8024a26:	2300      	movs	r3, #0
}
 8024a28:	4618      	mov	r0, r3
 8024a2a:	3710      	adds	r7, #16
 8024a2c:	46bd      	mov	sp, r7
 8024a2e:	bd80      	pop	{r7, pc}

08024a30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8024a30:	b480      	push	{r7}
 8024a32:	b083      	sub	sp, #12
 8024a34:	af00      	add	r7, sp, #0
 8024a36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8024a38:	687b      	ldr	r3, [r7, #4]
 8024a3a:	681b      	ldr	r3, [r3, #0]
 8024a3c:	695b      	ldr	r3, [r3, #20]
 8024a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024a46:	d11b      	bne.n	8024a80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8024a48:	687b      	ldr	r3, [r7, #4]
 8024a4a:	681b      	ldr	r3, [r3, #0]
 8024a4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8024a50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8024a52:	687b      	ldr	r3, [r7, #4]
 8024a54:	2200      	movs	r2, #0
 8024a56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8024a58:	687b      	ldr	r3, [r7, #4]
 8024a5a:	2220      	movs	r2, #32
 8024a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8024a60:	687b      	ldr	r3, [r7, #4]
 8024a62:	2200      	movs	r2, #0
 8024a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8024a68:	687b      	ldr	r3, [r7, #4]
 8024a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a6c:	f043 0204 	orr.w	r2, r3, #4
 8024a70:	687b      	ldr	r3, [r7, #4]
 8024a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8024a74:	687b      	ldr	r3, [r7, #4]
 8024a76:	2200      	movs	r2, #0
 8024a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8024a7c:	2301      	movs	r3, #1
 8024a7e:	e000      	b.n	8024a82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8024a80:	2300      	movs	r3, #0
}
 8024a82:	4618      	mov	r0, r3
 8024a84:	370c      	adds	r7, #12
 8024a86:	46bd      	mov	sp, r7
 8024a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a8c:	4770      	bx	lr
	...

08024a90 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8024a90:	b580      	push	{r7, lr}
 8024a92:	b088      	sub	sp, #32
 8024a94:	af00      	add	r7, sp, #0
 8024a96:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8024a98:	687b      	ldr	r3, [r7, #4]
 8024a9a:	2b00      	cmp	r3, #0
 8024a9c:	d101      	bne.n	8024aa2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8024a9e:	2301      	movs	r3, #1
 8024aa0:	e128      	b.n	8024cf4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8024aa2:	687b      	ldr	r3, [r7, #4]
 8024aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8024aa8:	b2db      	uxtb	r3, r3
 8024aaa:	2b00      	cmp	r3, #0
 8024aac:	d109      	bne.n	8024ac2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8024aae:	687b      	ldr	r3, [r7, #4]
 8024ab0:	2200      	movs	r2, #0
 8024ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8024ab6:	687b      	ldr	r3, [r7, #4]
 8024ab8:	4a90      	ldr	r2, [pc, #576]	; (8024cfc <HAL_I2S_Init+0x26c>)
 8024aba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8024abc:	6878      	ldr	r0, [r7, #4]
 8024abe:	f7fc fb53 	bl	8021168 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8024ac2:	687b      	ldr	r3, [r7, #4]
 8024ac4:	2202      	movs	r2, #2
 8024ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8024aca:	687b      	ldr	r3, [r7, #4]
 8024acc:	681b      	ldr	r3, [r3, #0]
 8024ace:	69db      	ldr	r3, [r3, #28]
 8024ad0:	687a      	ldr	r2, [r7, #4]
 8024ad2:	6812      	ldr	r2, [r2, #0]
 8024ad4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8024ad8:	f023 030f 	bic.w	r3, r3, #15
 8024adc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8024ade:	687b      	ldr	r3, [r7, #4]
 8024ae0:	681b      	ldr	r3, [r3, #0]
 8024ae2:	2202      	movs	r2, #2
 8024ae4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8024ae6:	687b      	ldr	r3, [r7, #4]
 8024ae8:	695b      	ldr	r3, [r3, #20]
 8024aea:	2b02      	cmp	r3, #2
 8024aec:	d060      	beq.n	8024bb0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8024aee:	687b      	ldr	r3, [r7, #4]
 8024af0:	68db      	ldr	r3, [r3, #12]
 8024af2:	2b00      	cmp	r3, #0
 8024af4:	d102      	bne.n	8024afc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8024af6:	2310      	movs	r3, #16
 8024af8:	617b      	str	r3, [r7, #20]
 8024afa:	e001      	b.n	8024b00 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8024afc:	2320      	movs	r3, #32
 8024afe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8024b00:	687b      	ldr	r3, [r7, #4]
 8024b02:	689b      	ldr	r3, [r3, #8]
 8024b04:	2b20      	cmp	r3, #32
 8024b06:	d802      	bhi.n	8024b0e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8024b08:	697b      	ldr	r3, [r7, #20]
 8024b0a:	005b      	lsls	r3, r3, #1
 8024b0c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8024b0e:	2001      	movs	r0, #1
 8024b10:	f002 fdec 	bl	80276ec <HAL_RCCEx_GetPeriphCLKFreq>
 8024b14:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8024b16:	687b      	ldr	r3, [r7, #4]
 8024b18:	691b      	ldr	r3, [r3, #16]
 8024b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024b1e:	d125      	bne.n	8024b6c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8024b20:	687b      	ldr	r3, [r7, #4]
 8024b22:	68db      	ldr	r3, [r3, #12]
 8024b24:	2b00      	cmp	r3, #0
 8024b26:	d010      	beq.n	8024b4a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8024b28:	697b      	ldr	r3, [r7, #20]
 8024b2a:	009b      	lsls	r3, r3, #2
 8024b2c:	68fa      	ldr	r2, [r7, #12]
 8024b2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8024b32:	4613      	mov	r3, r2
 8024b34:	009b      	lsls	r3, r3, #2
 8024b36:	4413      	add	r3, r2
 8024b38:	005b      	lsls	r3, r3, #1
 8024b3a:	461a      	mov	r2, r3
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	695b      	ldr	r3, [r3, #20]
 8024b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8024b44:	3305      	adds	r3, #5
 8024b46:	613b      	str	r3, [r7, #16]
 8024b48:	e01f      	b.n	8024b8a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8024b4a:	697b      	ldr	r3, [r7, #20]
 8024b4c:	00db      	lsls	r3, r3, #3
 8024b4e:	68fa      	ldr	r2, [r7, #12]
 8024b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8024b54:	4613      	mov	r3, r2
 8024b56:	009b      	lsls	r3, r3, #2
 8024b58:	4413      	add	r3, r2
 8024b5a:	005b      	lsls	r3, r3, #1
 8024b5c:	461a      	mov	r2, r3
 8024b5e:	687b      	ldr	r3, [r7, #4]
 8024b60:	695b      	ldr	r3, [r3, #20]
 8024b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8024b66:	3305      	adds	r3, #5
 8024b68:	613b      	str	r3, [r7, #16]
 8024b6a:	e00e      	b.n	8024b8a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8024b6c:	68fa      	ldr	r2, [r7, #12]
 8024b6e:	697b      	ldr	r3, [r7, #20]
 8024b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8024b74:	4613      	mov	r3, r2
 8024b76:	009b      	lsls	r3, r3, #2
 8024b78:	4413      	add	r3, r2
 8024b7a:	005b      	lsls	r3, r3, #1
 8024b7c:	461a      	mov	r2, r3
 8024b7e:	687b      	ldr	r3, [r7, #4]
 8024b80:	695b      	ldr	r3, [r3, #20]
 8024b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8024b86:	3305      	adds	r3, #5
 8024b88:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8024b8a:	693b      	ldr	r3, [r7, #16]
 8024b8c:	4a5c      	ldr	r2, [pc, #368]	; (8024d00 <HAL_I2S_Init+0x270>)
 8024b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8024b92:	08db      	lsrs	r3, r3, #3
 8024b94:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8024b96:	693b      	ldr	r3, [r7, #16]
 8024b98:	f003 0301 	and.w	r3, r3, #1
 8024b9c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8024b9e:	693a      	ldr	r2, [r7, #16]
 8024ba0:	69bb      	ldr	r3, [r7, #24]
 8024ba2:	1ad3      	subs	r3, r2, r3
 8024ba4:	085b      	lsrs	r3, r3, #1
 8024ba6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8024ba8:	69bb      	ldr	r3, [r7, #24]
 8024baa:	021b      	lsls	r3, r3, #8
 8024bac:	61bb      	str	r3, [r7, #24]
 8024bae:	e003      	b.n	8024bb8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8024bb0:	2302      	movs	r3, #2
 8024bb2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8024bb4:	2300      	movs	r3, #0
 8024bb6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8024bb8:	69fb      	ldr	r3, [r7, #28]
 8024bba:	2b01      	cmp	r3, #1
 8024bbc:	d902      	bls.n	8024bc4 <HAL_I2S_Init+0x134>
 8024bbe:	69fb      	ldr	r3, [r7, #28]
 8024bc0:	2bff      	cmp	r3, #255	; 0xff
 8024bc2:	d907      	bls.n	8024bd4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8024bc4:	687b      	ldr	r3, [r7, #4]
 8024bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024bc8:	f043 0210 	orr.w	r2, r3, #16
 8024bcc:	687b      	ldr	r3, [r7, #4]
 8024bce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8024bd0:	2301      	movs	r3, #1
 8024bd2:	e08f      	b.n	8024cf4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8024bd4:	687b      	ldr	r3, [r7, #4]
 8024bd6:	691a      	ldr	r2, [r3, #16]
 8024bd8:	69bb      	ldr	r3, [r7, #24]
 8024bda:	ea42 0103 	orr.w	r1, r2, r3
 8024bde:	687b      	ldr	r3, [r7, #4]
 8024be0:	681b      	ldr	r3, [r3, #0]
 8024be2:	69fa      	ldr	r2, [r7, #28]
 8024be4:	430a      	orrs	r2, r1
 8024be6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8024be8:	687b      	ldr	r3, [r7, #4]
 8024bea:	681b      	ldr	r3, [r3, #0]
 8024bec:	69db      	ldr	r3, [r3, #28]
 8024bee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8024bf2:	f023 030f 	bic.w	r3, r3, #15
 8024bf6:	687a      	ldr	r2, [r7, #4]
 8024bf8:	6851      	ldr	r1, [r2, #4]
 8024bfa:	687a      	ldr	r2, [r7, #4]
 8024bfc:	6892      	ldr	r2, [r2, #8]
 8024bfe:	4311      	orrs	r1, r2
 8024c00:	687a      	ldr	r2, [r7, #4]
 8024c02:	68d2      	ldr	r2, [r2, #12]
 8024c04:	4311      	orrs	r1, r2
 8024c06:	687a      	ldr	r2, [r7, #4]
 8024c08:	6992      	ldr	r2, [r2, #24]
 8024c0a:	430a      	orrs	r2, r1
 8024c0c:	431a      	orrs	r2, r3
 8024c0e:	687b      	ldr	r3, [r7, #4]
 8024c10:	681b      	ldr	r3, [r3, #0]
 8024c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8024c16:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8024c18:	687b      	ldr	r3, [r7, #4]
 8024c1a:	6a1b      	ldr	r3, [r3, #32]
 8024c1c:	2b01      	cmp	r3, #1
 8024c1e:	d161      	bne.n	8024ce4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8024c20:	687b      	ldr	r3, [r7, #4]
 8024c22:	4a38      	ldr	r2, [pc, #224]	; (8024d04 <HAL_I2S_Init+0x274>)
 8024c24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8024c26:	687b      	ldr	r3, [r7, #4]
 8024c28:	681b      	ldr	r3, [r3, #0]
 8024c2a:	4a37      	ldr	r2, [pc, #220]	; (8024d08 <HAL_I2S_Init+0x278>)
 8024c2c:	4293      	cmp	r3, r2
 8024c2e:	d101      	bne.n	8024c34 <HAL_I2S_Init+0x1a4>
 8024c30:	4b36      	ldr	r3, [pc, #216]	; (8024d0c <HAL_I2S_Init+0x27c>)
 8024c32:	e001      	b.n	8024c38 <HAL_I2S_Init+0x1a8>
 8024c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8024c38:	69db      	ldr	r3, [r3, #28]
 8024c3a:	687a      	ldr	r2, [r7, #4]
 8024c3c:	6812      	ldr	r2, [r2, #0]
 8024c3e:	4932      	ldr	r1, [pc, #200]	; (8024d08 <HAL_I2S_Init+0x278>)
 8024c40:	428a      	cmp	r2, r1
 8024c42:	d101      	bne.n	8024c48 <HAL_I2S_Init+0x1b8>
 8024c44:	4a31      	ldr	r2, [pc, #196]	; (8024d0c <HAL_I2S_Init+0x27c>)
 8024c46:	e001      	b.n	8024c4c <HAL_I2S_Init+0x1bc>
 8024c48:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8024c4c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8024c50:	f023 030f 	bic.w	r3, r3, #15
 8024c54:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8024c56:	687b      	ldr	r3, [r7, #4]
 8024c58:	681b      	ldr	r3, [r3, #0]
 8024c5a:	4a2b      	ldr	r2, [pc, #172]	; (8024d08 <HAL_I2S_Init+0x278>)
 8024c5c:	4293      	cmp	r3, r2
 8024c5e:	d101      	bne.n	8024c64 <HAL_I2S_Init+0x1d4>
 8024c60:	4b2a      	ldr	r3, [pc, #168]	; (8024d0c <HAL_I2S_Init+0x27c>)
 8024c62:	e001      	b.n	8024c68 <HAL_I2S_Init+0x1d8>
 8024c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8024c68:	2202      	movs	r2, #2
 8024c6a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8024c6c:	687b      	ldr	r3, [r7, #4]
 8024c6e:	681b      	ldr	r3, [r3, #0]
 8024c70:	4a25      	ldr	r2, [pc, #148]	; (8024d08 <HAL_I2S_Init+0x278>)
 8024c72:	4293      	cmp	r3, r2
 8024c74:	d101      	bne.n	8024c7a <HAL_I2S_Init+0x1ea>
 8024c76:	4b25      	ldr	r3, [pc, #148]	; (8024d0c <HAL_I2S_Init+0x27c>)
 8024c78:	e001      	b.n	8024c7e <HAL_I2S_Init+0x1ee>
 8024c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8024c7e:	69db      	ldr	r3, [r3, #28]
 8024c80:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8024c82:	687b      	ldr	r3, [r7, #4]
 8024c84:	685b      	ldr	r3, [r3, #4]
 8024c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024c8a:	d003      	beq.n	8024c94 <HAL_I2S_Init+0x204>
 8024c8c:	687b      	ldr	r3, [r7, #4]
 8024c8e:	685b      	ldr	r3, [r3, #4]
 8024c90:	2b00      	cmp	r3, #0
 8024c92:	d103      	bne.n	8024c9c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8024c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8024c98:	613b      	str	r3, [r7, #16]
 8024c9a:	e001      	b.n	8024ca0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8024c9c:	2300      	movs	r3, #0
 8024c9e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8024ca0:	693b      	ldr	r3, [r7, #16]
 8024ca2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8024ca4:	687b      	ldr	r3, [r7, #4]
 8024ca6:	689b      	ldr	r3, [r3, #8]
 8024ca8:	b299      	uxth	r1, r3
 8024caa:	687b      	ldr	r3, [r7, #4]
 8024cac:	68db      	ldr	r3, [r3, #12]
 8024cae:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8024cb0:	687b      	ldr	r3, [r7, #4]
 8024cb2:	699b      	ldr	r3, [r3, #24]
 8024cb4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8024cb6:	4303      	orrs	r3, r0
 8024cb8:	b29b      	uxth	r3, r3
 8024cba:	430b      	orrs	r3, r1
 8024cbc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8024cbe:	4313      	orrs	r3, r2
 8024cc0:	b29a      	uxth	r2, r3
 8024cc2:	897b      	ldrh	r3, [r7, #10]
 8024cc4:	4313      	orrs	r3, r2
 8024cc6:	b29b      	uxth	r3, r3
 8024cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8024ccc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8024cce:	687b      	ldr	r3, [r7, #4]
 8024cd0:	681b      	ldr	r3, [r3, #0]
 8024cd2:	4a0d      	ldr	r2, [pc, #52]	; (8024d08 <HAL_I2S_Init+0x278>)
 8024cd4:	4293      	cmp	r3, r2
 8024cd6:	d101      	bne.n	8024cdc <HAL_I2S_Init+0x24c>
 8024cd8:	4b0c      	ldr	r3, [pc, #48]	; (8024d0c <HAL_I2S_Init+0x27c>)
 8024cda:	e001      	b.n	8024ce0 <HAL_I2S_Init+0x250>
 8024cdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8024ce0:	897a      	ldrh	r2, [r7, #10]
 8024ce2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8024ce4:	687b      	ldr	r3, [r7, #4]
 8024ce6:	2200      	movs	r2, #0
 8024ce8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8024cea:	687b      	ldr	r3, [r7, #4]
 8024cec:	2201      	movs	r2, #1
 8024cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8024cf2:	2300      	movs	r3, #0
}
 8024cf4:	4618      	mov	r0, r3
 8024cf6:	3720      	adds	r7, #32
 8024cf8:	46bd      	mov	sp, r7
 8024cfa:	bd80      	pop	{r7, pc}
 8024cfc:	08024e07 	.word	0x08024e07
 8024d00:	cccccccd 	.word	0xcccccccd
 8024d04:	08025231 	.word	0x08025231
 8024d08:	40003800 	.word	0x40003800
 8024d0c:	40003400 	.word	0x40003400

08024d10 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8024d10:	b480      	push	{r7}
 8024d12:	b083      	sub	sp, #12
 8024d14:	af00      	add	r7, sp, #0
 8024d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8024d18:	bf00      	nop
 8024d1a:	370c      	adds	r7, #12
 8024d1c:	46bd      	mov	sp, r7
 8024d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d22:	4770      	bx	lr

08024d24 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8024d24:	b480      	push	{r7}
 8024d26:	b083      	sub	sp, #12
 8024d28:	af00      	add	r7, sp, #0
 8024d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8024d2c:	bf00      	nop
 8024d2e:	370c      	adds	r7, #12
 8024d30:	46bd      	mov	sp, r7
 8024d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d36:	4770      	bx	lr

08024d38 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8024d38:	b480      	push	{r7}
 8024d3a:	b083      	sub	sp, #12
 8024d3c:	af00      	add	r7, sp, #0
 8024d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8024d40:	bf00      	nop
 8024d42:	370c      	adds	r7, #12
 8024d44:	46bd      	mov	sp, r7
 8024d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d4a:	4770      	bx	lr

08024d4c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8024d4c:	b580      	push	{r7, lr}
 8024d4e:	b082      	sub	sp, #8
 8024d50:	af00      	add	r7, sp, #0
 8024d52:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8024d54:	687b      	ldr	r3, [r7, #4]
 8024d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024d58:	881a      	ldrh	r2, [r3, #0]
 8024d5a:	687b      	ldr	r3, [r7, #4]
 8024d5c:	681b      	ldr	r3, [r3, #0]
 8024d5e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8024d60:	687b      	ldr	r3, [r7, #4]
 8024d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024d64:	1c9a      	adds	r2, r3, #2
 8024d66:	687b      	ldr	r3, [r7, #4]
 8024d68:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8024d6e:	b29b      	uxth	r3, r3
 8024d70:	3b01      	subs	r3, #1
 8024d72:	b29a      	uxth	r2, r3
 8024d74:	687b      	ldr	r3, [r7, #4]
 8024d76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8024d78:	687b      	ldr	r3, [r7, #4]
 8024d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8024d7c:	b29b      	uxth	r3, r3
 8024d7e:	2b00      	cmp	r3, #0
 8024d80:	d10e      	bne.n	8024da0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8024d82:	687b      	ldr	r3, [r7, #4]
 8024d84:	681b      	ldr	r3, [r3, #0]
 8024d86:	685a      	ldr	r2, [r3, #4]
 8024d88:	687b      	ldr	r3, [r7, #4]
 8024d8a:	681b      	ldr	r3, [r3, #0]
 8024d8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8024d90:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8024d92:	687b      	ldr	r3, [r7, #4]
 8024d94:	2201      	movs	r2, #1
 8024d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8024d9a:	6878      	ldr	r0, [r7, #4]
 8024d9c:	f7ff ffb8 	bl	8024d10 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8024da0:	bf00      	nop
 8024da2:	3708      	adds	r7, #8
 8024da4:	46bd      	mov	sp, r7
 8024da6:	bd80      	pop	{r7, pc}

08024da8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8024da8:	b580      	push	{r7, lr}
 8024daa:	b082      	sub	sp, #8
 8024dac:	af00      	add	r7, sp, #0
 8024dae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8024db0:	687b      	ldr	r3, [r7, #4]
 8024db2:	681b      	ldr	r3, [r3, #0]
 8024db4:	68da      	ldr	r2, [r3, #12]
 8024db6:	687b      	ldr	r3, [r7, #4]
 8024db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024dba:	b292      	uxth	r2, r2
 8024dbc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8024dbe:	687b      	ldr	r3, [r7, #4]
 8024dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024dc2:	1c9a      	adds	r2, r3, #2
 8024dc4:	687b      	ldr	r3, [r7, #4]
 8024dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8024dc8:	687b      	ldr	r3, [r7, #4]
 8024dca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8024dcc:	b29b      	uxth	r3, r3
 8024dce:	3b01      	subs	r3, #1
 8024dd0:	b29a      	uxth	r2, r3
 8024dd2:	687b      	ldr	r3, [r7, #4]
 8024dd4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8024dd6:	687b      	ldr	r3, [r7, #4]
 8024dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8024dda:	b29b      	uxth	r3, r3
 8024ddc:	2b00      	cmp	r3, #0
 8024dde:	d10e      	bne.n	8024dfe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	681b      	ldr	r3, [r3, #0]
 8024de4:	685a      	ldr	r2, [r3, #4]
 8024de6:	687b      	ldr	r3, [r7, #4]
 8024de8:	681b      	ldr	r3, [r3, #0]
 8024dea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8024dee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8024df0:	687b      	ldr	r3, [r7, #4]
 8024df2:	2201      	movs	r2, #1
 8024df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8024df8:	6878      	ldr	r0, [r7, #4]
 8024dfa:	f7ff ff93 	bl	8024d24 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8024dfe:	bf00      	nop
 8024e00:	3708      	adds	r7, #8
 8024e02:	46bd      	mov	sp, r7
 8024e04:	bd80      	pop	{r7, pc}

08024e06 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8024e06:	b580      	push	{r7, lr}
 8024e08:	b086      	sub	sp, #24
 8024e0a:	af00      	add	r7, sp, #0
 8024e0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8024e0e:	687b      	ldr	r3, [r7, #4]
 8024e10:	681b      	ldr	r3, [r3, #0]
 8024e12:	689b      	ldr	r3, [r3, #8]
 8024e14:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8024e16:	687b      	ldr	r3, [r7, #4]
 8024e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8024e1c:	b2db      	uxtb	r3, r3
 8024e1e:	2b04      	cmp	r3, #4
 8024e20:	d13a      	bne.n	8024e98 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8024e22:	697b      	ldr	r3, [r7, #20]
 8024e24:	f003 0301 	and.w	r3, r3, #1
 8024e28:	2b01      	cmp	r3, #1
 8024e2a:	d109      	bne.n	8024e40 <I2S_IRQHandler+0x3a>
 8024e2c:	687b      	ldr	r3, [r7, #4]
 8024e2e:	681b      	ldr	r3, [r3, #0]
 8024e30:	685b      	ldr	r3, [r3, #4]
 8024e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024e36:	2b40      	cmp	r3, #64	; 0x40
 8024e38:	d102      	bne.n	8024e40 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8024e3a:	6878      	ldr	r0, [r7, #4]
 8024e3c:	f7ff ffb4 	bl	8024da8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8024e40:	697b      	ldr	r3, [r7, #20]
 8024e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024e46:	2b40      	cmp	r3, #64	; 0x40
 8024e48:	d126      	bne.n	8024e98 <I2S_IRQHandler+0x92>
 8024e4a:	687b      	ldr	r3, [r7, #4]
 8024e4c:	681b      	ldr	r3, [r3, #0]
 8024e4e:	685b      	ldr	r3, [r3, #4]
 8024e50:	f003 0320 	and.w	r3, r3, #32
 8024e54:	2b20      	cmp	r3, #32
 8024e56:	d11f      	bne.n	8024e98 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8024e58:	687b      	ldr	r3, [r7, #4]
 8024e5a:	681b      	ldr	r3, [r3, #0]
 8024e5c:	685a      	ldr	r2, [r3, #4]
 8024e5e:	687b      	ldr	r3, [r7, #4]
 8024e60:	681b      	ldr	r3, [r3, #0]
 8024e62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8024e66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8024e68:	2300      	movs	r3, #0
 8024e6a:	613b      	str	r3, [r7, #16]
 8024e6c:	687b      	ldr	r3, [r7, #4]
 8024e6e:	681b      	ldr	r3, [r3, #0]
 8024e70:	68db      	ldr	r3, [r3, #12]
 8024e72:	613b      	str	r3, [r7, #16]
 8024e74:	687b      	ldr	r3, [r7, #4]
 8024e76:	681b      	ldr	r3, [r3, #0]
 8024e78:	689b      	ldr	r3, [r3, #8]
 8024e7a:	613b      	str	r3, [r7, #16]
 8024e7c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8024e7e:	687b      	ldr	r3, [r7, #4]
 8024e80:	2201      	movs	r2, #1
 8024e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8024e86:	687b      	ldr	r3, [r7, #4]
 8024e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024e8a:	f043 0202 	orr.w	r2, r3, #2
 8024e8e:	687b      	ldr	r3, [r7, #4]
 8024e90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8024e92:	6878      	ldr	r0, [r7, #4]
 8024e94:	f7ff ff50 	bl	8024d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8024e98:	687b      	ldr	r3, [r7, #4]
 8024e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8024e9e:	b2db      	uxtb	r3, r3
 8024ea0:	2b03      	cmp	r3, #3
 8024ea2:	d136      	bne.n	8024f12 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8024ea4:	697b      	ldr	r3, [r7, #20]
 8024ea6:	f003 0302 	and.w	r3, r3, #2
 8024eaa:	2b02      	cmp	r3, #2
 8024eac:	d109      	bne.n	8024ec2 <I2S_IRQHandler+0xbc>
 8024eae:	687b      	ldr	r3, [r7, #4]
 8024eb0:	681b      	ldr	r3, [r3, #0]
 8024eb2:	685b      	ldr	r3, [r3, #4]
 8024eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024eb8:	2b80      	cmp	r3, #128	; 0x80
 8024eba:	d102      	bne.n	8024ec2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8024ebc:	6878      	ldr	r0, [r7, #4]
 8024ebe:	f7ff ff45 	bl	8024d4c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8024ec2:	697b      	ldr	r3, [r7, #20]
 8024ec4:	f003 0308 	and.w	r3, r3, #8
 8024ec8:	2b08      	cmp	r3, #8
 8024eca:	d122      	bne.n	8024f12 <I2S_IRQHandler+0x10c>
 8024ecc:	687b      	ldr	r3, [r7, #4]
 8024ece:	681b      	ldr	r3, [r3, #0]
 8024ed0:	685b      	ldr	r3, [r3, #4]
 8024ed2:	f003 0320 	and.w	r3, r3, #32
 8024ed6:	2b20      	cmp	r3, #32
 8024ed8:	d11b      	bne.n	8024f12 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8024eda:	687b      	ldr	r3, [r7, #4]
 8024edc:	681b      	ldr	r3, [r3, #0]
 8024ede:	685a      	ldr	r2, [r3, #4]
 8024ee0:	687b      	ldr	r3, [r7, #4]
 8024ee2:	681b      	ldr	r3, [r3, #0]
 8024ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8024ee8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8024eea:	2300      	movs	r3, #0
 8024eec:	60fb      	str	r3, [r7, #12]
 8024eee:	687b      	ldr	r3, [r7, #4]
 8024ef0:	681b      	ldr	r3, [r3, #0]
 8024ef2:	689b      	ldr	r3, [r3, #8]
 8024ef4:	60fb      	str	r3, [r7, #12]
 8024ef6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8024ef8:	687b      	ldr	r3, [r7, #4]
 8024efa:	2201      	movs	r2, #1
 8024efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8024f00:	687b      	ldr	r3, [r7, #4]
 8024f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024f04:	f043 0204 	orr.w	r2, r3, #4
 8024f08:	687b      	ldr	r3, [r7, #4]
 8024f0a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8024f0c:	6878      	ldr	r0, [r7, #4]
 8024f0e:	f7ff ff13 	bl	8024d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8024f12:	bf00      	nop
 8024f14:	3718      	adds	r7, #24
 8024f16:	46bd      	mov	sp, r7
 8024f18:	bd80      	pop	{r7, pc}
	...

08024f1c <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8024f1c:	b580      	push	{r7, lr}
 8024f1e:	b088      	sub	sp, #32
 8024f20:	af00      	add	r7, sp, #0
 8024f22:	60f8      	str	r0, [r7, #12]
 8024f24:	60b9      	str	r1, [r7, #8]
 8024f26:	607a      	str	r2, [r7, #4]
 8024f28:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8024f2a:	2300      	movs	r3, #0
 8024f2c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8024f2e:	2300      	movs	r3, #0
 8024f30:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8024f32:	2300      	movs	r3, #0
 8024f34:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8024f36:	68fb      	ldr	r3, [r7, #12]
 8024f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8024f3c:	b2db      	uxtb	r3, r3
 8024f3e:	2b01      	cmp	r3, #1
 8024f40:	d002      	beq.n	8024f48 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8024f42:	2302      	movs	r3, #2
 8024f44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8024f46:	e160      	b.n	802520a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8024f48:	68bb      	ldr	r3, [r7, #8]
 8024f4a:	2b00      	cmp	r3, #0
 8024f4c:	d005      	beq.n	8024f5a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8024f4e:	687b      	ldr	r3, [r7, #4]
 8024f50:	2b00      	cmp	r3, #0
 8024f52:	d002      	beq.n	8024f5a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8024f54:	887b      	ldrh	r3, [r7, #2]
 8024f56:	2b00      	cmp	r3, #0
 8024f58:	d101      	bne.n	8024f5e <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8024f5a:	2301      	movs	r3, #1
 8024f5c:	e15a      	b.n	8025214 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8024f5e:	68fb      	ldr	r3, [r7, #12]
 8024f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8024f64:	b2db      	uxtb	r3, r3
 8024f66:	2b01      	cmp	r3, #1
 8024f68:	d101      	bne.n	8024f6e <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8024f6a:	2302      	movs	r3, #2
 8024f6c:	e152      	b.n	8025214 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8024f6e:	68fb      	ldr	r3, [r7, #12]
 8024f70:	2201      	movs	r2, #1
 8024f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8024f76:	68ba      	ldr	r2, [r7, #8]
 8024f78:	68fb      	ldr	r3, [r7, #12]
 8024f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8024f7c:	687a      	ldr	r2, [r7, #4]
 8024f7e:	68fb      	ldr	r3, [r7, #12]
 8024f80:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8024f82:	68fb      	ldr	r3, [r7, #12]
 8024f84:	681b      	ldr	r3, [r3, #0]
 8024f86:	69db      	ldr	r3, [r3, #28]
 8024f88:	f003 0307 	and.w	r3, r3, #7
 8024f8c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8024f8e:	697b      	ldr	r3, [r7, #20]
 8024f90:	2b03      	cmp	r3, #3
 8024f92:	d002      	beq.n	8024f9a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8024f94:	697b      	ldr	r3, [r7, #20]
 8024f96:	2b05      	cmp	r3, #5
 8024f98:	d114      	bne.n	8024fc4 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8024f9a:	887b      	ldrh	r3, [r7, #2]
 8024f9c:	005b      	lsls	r3, r3, #1
 8024f9e:	b29a      	uxth	r2, r3
 8024fa0:	68fb      	ldr	r3, [r7, #12]
 8024fa2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8024fa4:	887b      	ldrh	r3, [r7, #2]
 8024fa6:	005b      	lsls	r3, r3, #1
 8024fa8:	b29a      	uxth	r2, r3
 8024faa:	68fb      	ldr	r3, [r7, #12]
 8024fac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8024fae:	887b      	ldrh	r3, [r7, #2]
 8024fb0:	005b      	lsls	r3, r3, #1
 8024fb2:	b29a      	uxth	r2, r3
 8024fb4:	68fb      	ldr	r3, [r7, #12]
 8024fb6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8024fb8:	887b      	ldrh	r3, [r7, #2]
 8024fba:	005b      	lsls	r3, r3, #1
 8024fbc:	b29a      	uxth	r2, r3
 8024fbe:	68fb      	ldr	r3, [r7, #12]
 8024fc0:	865a      	strh	r2, [r3, #50]	; 0x32
 8024fc2:	e00b      	b.n	8024fdc <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8024fc4:	68fb      	ldr	r3, [r7, #12]
 8024fc6:	887a      	ldrh	r2, [r7, #2]
 8024fc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8024fca:	68fb      	ldr	r3, [r7, #12]
 8024fcc:	887a      	ldrh	r2, [r7, #2]
 8024fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8024fd0:	68fb      	ldr	r3, [r7, #12]
 8024fd2:	887a      	ldrh	r2, [r7, #2]
 8024fd4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8024fd6:	68fb      	ldr	r3, [r7, #12]
 8024fd8:	887a      	ldrh	r2, [r7, #2]
 8024fda:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8024fdc:	68fb      	ldr	r3, [r7, #12]
 8024fde:	2200      	movs	r2, #0
 8024fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8024fe2:	68fb      	ldr	r3, [r7, #12]
 8024fe4:	2205      	movs	r2, #5
 8024fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8024fea:	68fb      	ldr	r3, [r7, #12]
 8024fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024fee:	4a8b      	ldr	r2, [pc, #556]	; (802521c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8024ff0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8024ff2:	68fb      	ldr	r3, [r7, #12]
 8024ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024ff6:	4a8a      	ldr	r2, [pc, #552]	; (8025220 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8024ff8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8024ffa:	68fb      	ldr	r3, [r7, #12]
 8024ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024ffe:	4a89      	ldr	r2, [pc, #548]	; (8025224 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8025000:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8025002:	68fb      	ldr	r3, [r7, #12]
 8025004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025006:	4a85      	ldr	r2, [pc, #532]	; (802521c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8025008:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 802500a:	68fb      	ldr	r3, [r7, #12]
 802500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802500e:	4a84      	ldr	r2, [pc, #528]	; (8025220 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8025010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8025012:	68fb      	ldr	r3, [r7, #12]
 8025014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025016:	4a83      	ldr	r2, [pc, #524]	; (8025224 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8025018:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 802501a:	68fb      	ldr	r3, [r7, #12]
 802501c:	681b      	ldr	r3, [r3, #0]
 802501e:	69db      	ldr	r3, [r3, #28]
 8025020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025024:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8025026:	697b      	ldr	r3, [r7, #20]
 8025028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802502c:	d002      	beq.n	8025034 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 802502e:	697b      	ldr	r3, [r7, #20]
 8025030:	2b00      	cmp	r3, #0
 8025032:	d16b      	bne.n	802510c <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8025034:	1d3b      	adds	r3, r7, #4
 8025036:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8025038:	68fb      	ldr	r3, [r7, #12]
 802503a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 802503c:	68fb      	ldr	r3, [r7, #12]
 802503e:	681b      	ldr	r3, [r3, #0]
 8025040:	4a79      	ldr	r2, [pc, #484]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8025042:	4293      	cmp	r3, r2
 8025044:	d101      	bne.n	802504a <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8025046:	4b79      	ldr	r3, [pc, #484]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8025048:	e001      	b.n	802504e <HAL_I2SEx_TransmitReceive_DMA+0x132>
 802504a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802504e:	330c      	adds	r3, #12
 8025050:	4619      	mov	r1, r3
 8025052:	69bb      	ldr	r3, [r7, #24]
 8025054:	681a      	ldr	r2, [r3, #0]
 8025056:	68fb      	ldr	r3, [r7, #12]
 8025058:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 802505a:	b29b      	uxth	r3, r3
 802505c:	f7fd fafe 	bl	802265c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8025060:	68fb      	ldr	r3, [r7, #12]
 8025062:	681b      	ldr	r3, [r3, #0]
 8025064:	4a70      	ldr	r2, [pc, #448]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8025066:	4293      	cmp	r3, r2
 8025068:	d101      	bne.n	802506e <HAL_I2SEx_TransmitReceive_DMA+0x152>
 802506a:	4b70      	ldr	r3, [pc, #448]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 802506c:	e001      	b.n	8025072 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 802506e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025072:	685a      	ldr	r2, [r3, #4]
 8025074:	68fb      	ldr	r3, [r7, #12]
 8025076:	681b      	ldr	r3, [r3, #0]
 8025078:	496b      	ldr	r1, [pc, #428]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 802507a:	428b      	cmp	r3, r1
 802507c:	d101      	bne.n	8025082 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 802507e:	4b6b      	ldr	r3, [pc, #428]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8025080:	e001      	b.n	8025086 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8025082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025086:	f042 0201 	orr.w	r2, r2, #1
 802508a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 802508c:	f107 0308 	add.w	r3, r7, #8
 8025090:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8025092:	68fb      	ldr	r3, [r7, #12]
 8025094:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8025096:	69bb      	ldr	r3, [r7, #24]
 8025098:	6819      	ldr	r1, [r3, #0]
 802509a:	68fb      	ldr	r3, [r7, #12]
 802509c:	681b      	ldr	r3, [r3, #0]
 802509e:	330c      	adds	r3, #12
 80250a0:	461a      	mov	r2, r3
 80250a2:	68fb      	ldr	r3, [r7, #12]
 80250a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80250a6:	b29b      	uxth	r3, r3
 80250a8:	f7fd fad8 	bl	802265c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80250ac:	68fb      	ldr	r3, [r7, #12]
 80250ae:	681b      	ldr	r3, [r3, #0]
 80250b0:	685a      	ldr	r2, [r3, #4]
 80250b2:	68fb      	ldr	r3, [r7, #12]
 80250b4:	681b      	ldr	r3, [r3, #0]
 80250b6:	f042 0202 	orr.w	r2, r2, #2
 80250ba:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80250bc:	68fb      	ldr	r3, [r7, #12]
 80250be:	681b      	ldr	r3, [r3, #0]
 80250c0:	69db      	ldr	r3, [r3, #28]
 80250c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80250c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80250ca:	f000 809e 	beq.w	802520a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80250ce:	68fb      	ldr	r3, [r7, #12]
 80250d0:	681b      	ldr	r3, [r3, #0]
 80250d2:	4a55      	ldr	r2, [pc, #340]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80250d4:	4293      	cmp	r3, r2
 80250d6:	d101      	bne.n	80250dc <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80250d8:	4b54      	ldr	r3, [pc, #336]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80250da:	e001      	b.n	80250e0 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80250dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80250e0:	69da      	ldr	r2, [r3, #28]
 80250e2:	68fb      	ldr	r3, [r7, #12]
 80250e4:	681b      	ldr	r3, [r3, #0]
 80250e6:	4950      	ldr	r1, [pc, #320]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80250e8:	428b      	cmp	r3, r1
 80250ea:	d101      	bne.n	80250f0 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80250ec:	4b4f      	ldr	r3, [pc, #316]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80250ee:	e001      	b.n	80250f4 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80250f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80250f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80250f8:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80250fa:	68fb      	ldr	r3, [r7, #12]
 80250fc:	681b      	ldr	r3, [r3, #0]
 80250fe:	69da      	ldr	r2, [r3, #28]
 8025100:	68fb      	ldr	r3, [r7, #12]
 8025102:	681b      	ldr	r3, [r3, #0]
 8025104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8025108:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 802510a:	e07e      	b.n	802520a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 802510c:	68fb      	ldr	r3, [r7, #12]
 802510e:	681b      	ldr	r3, [r3, #0]
 8025110:	69db      	ldr	r3, [r3, #28]
 8025112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802511a:	d10a      	bne.n	8025132 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 802511c:	2300      	movs	r3, #0
 802511e:	613b      	str	r3, [r7, #16]
 8025120:	68fb      	ldr	r3, [r7, #12]
 8025122:	681b      	ldr	r3, [r3, #0]
 8025124:	68db      	ldr	r3, [r3, #12]
 8025126:	613b      	str	r3, [r7, #16]
 8025128:	68fb      	ldr	r3, [r7, #12]
 802512a:	681b      	ldr	r3, [r3, #0]
 802512c:	689b      	ldr	r3, [r3, #8]
 802512e:	613b      	str	r3, [r7, #16]
 8025130:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8025132:	f107 0308 	add.w	r3, r7, #8
 8025136:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8025138:	68fb      	ldr	r3, [r7, #12]
 802513a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 802513c:	69bb      	ldr	r3, [r7, #24]
 802513e:	6819      	ldr	r1, [r3, #0]
 8025140:	68fb      	ldr	r3, [r7, #12]
 8025142:	681b      	ldr	r3, [r3, #0]
 8025144:	4a38      	ldr	r2, [pc, #224]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8025146:	4293      	cmp	r3, r2
 8025148:	d101      	bne.n	802514e <HAL_I2SEx_TransmitReceive_DMA+0x232>
 802514a:	4b38      	ldr	r3, [pc, #224]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 802514c:	e001      	b.n	8025152 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 802514e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025152:	330c      	adds	r3, #12
 8025154:	461a      	mov	r2, r3
 8025156:	68fb      	ldr	r3, [r7, #12]
 8025158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802515a:	b29b      	uxth	r3, r3
 802515c:	f7fd fa7e 	bl	802265c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8025160:	68fb      	ldr	r3, [r7, #12]
 8025162:	681b      	ldr	r3, [r3, #0]
 8025164:	4a30      	ldr	r2, [pc, #192]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8025166:	4293      	cmp	r3, r2
 8025168:	d101      	bne.n	802516e <HAL_I2SEx_TransmitReceive_DMA+0x252>
 802516a:	4b30      	ldr	r3, [pc, #192]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 802516c:	e001      	b.n	8025172 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 802516e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025172:	685a      	ldr	r2, [r3, #4]
 8025174:	68fb      	ldr	r3, [r7, #12]
 8025176:	681b      	ldr	r3, [r3, #0]
 8025178:	492b      	ldr	r1, [pc, #172]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 802517a:	428b      	cmp	r3, r1
 802517c:	d101      	bne.n	8025182 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 802517e:	4b2b      	ldr	r3, [pc, #172]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8025180:	e001      	b.n	8025186 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8025182:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025186:	f042 0202 	orr.w	r2, r2, #2
 802518a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 802518c:	1d3b      	adds	r3, r7, #4
 802518e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8025190:	68fb      	ldr	r3, [r7, #12]
 8025192:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8025194:	68fb      	ldr	r3, [r7, #12]
 8025196:	681b      	ldr	r3, [r3, #0]
 8025198:	330c      	adds	r3, #12
 802519a:	4619      	mov	r1, r3
 802519c:	69bb      	ldr	r3, [r7, #24]
 802519e:	681a      	ldr	r2, [r3, #0]
 80251a0:	68fb      	ldr	r3, [r7, #12]
 80251a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80251a4:	b29b      	uxth	r3, r3
 80251a6:	f7fd fa59 	bl	802265c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80251aa:	68fb      	ldr	r3, [r7, #12]
 80251ac:	681b      	ldr	r3, [r3, #0]
 80251ae:	685a      	ldr	r2, [r3, #4]
 80251b0:	68fb      	ldr	r3, [r7, #12]
 80251b2:	681b      	ldr	r3, [r3, #0]
 80251b4:	f042 0201 	orr.w	r2, r2, #1
 80251b8:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80251ba:	68fb      	ldr	r3, [r7, #12]
 80251bc:	681b      	ldr	r3, [r3, #0]
 80251be:	69db      	ldr	r3, [r3, #28]
 80251c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80251c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80251c8:	d01e      	beq.n	8025208 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80251ca:	68fb      	ldr	r3, [r7, #12]
 80251cc:	681b      	ldr	r3, [r3, #0]
 80251ce:	4a16      	ldr	r2, [pc, #88]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80251d0:	4293      	cmp	r3, r2
 80251d2:	d101      	bne.n	80251d8 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80251d4:	4b15      	ldr	r3, [pc, #84]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80251d6:	e001      	b.n	80251dc <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80251d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80251dc:	69da      	ldr	r2, [r3, #28]
 80251de:	68fb      	ldr	r3, [r7, #12]
 80251e0:	681b      	ldr	r3, [r3, #0]
 80251e2:	4911      	ldr	r1, [pc, #68]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80251e4:	428b      	cmp	r3, r1
 80251e6:	d101      	bne.n	80251ec <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80251e8:	4b10      	ldr	r3, [pc, #64]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80251ea:	e001      	b.n	80251f0 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80251ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80251f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80251f4:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80251f6:	68fb      	ldr	r3, [r7, #12]
 80251f8:	681b      	ldr	r3, [r3, #0]
 80251fa:	69da      	ldr	r2, [r3, #28]
 80251fc:	68fb      	ldr	r3, [r7, #12]
 80251fe:	681b      	ldr	r3, [r3, #0]
 8025200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8025204:	61da      	str	r2, [r3, #28]
 8025206:	e000      	b.n	802520a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8025208:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 802520a:	68fb      	ldr	r3, [r7, #12]
 802520c:	2200      	movs	r2, #0
 802520e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8025212:	7ffb      	ldrb	r3, [r7, #31]
}
 8025214:	4618      	mov	r0, r3
 8025216:	3720      	adds	r7, #32
 8025218:	46bd      	mov	sp, r7
 802521a:	bd80      	pop	{r7, pc}
 802521c:	080254ed 	.word	0x080254ed
 8025220:	08025509 	.word	0x08025509
 8025224:	08025639 	.word	0x08025639
 8025228:	40003800 	.word	0x40003800
 802522c:	40003400 	.word	0x40003400

08025230 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8025230:	b580      	push	{r7, lr}
 8025232:	b088      	sub	sp, #32
 8025234:	af00      	add	r7, sp, #0
 8025236:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8025238:	687b      	ldr	r3, [r7, #4]
 802523a:	681b      	ldr	r3, [r3, #0]
 802523c:	689b      	ldr	r3, [r3, #8]
 802523e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8025240:	687b      	ldr	r3, [r7, #4]
 8025242:	681b      	ldr	r3, [r3, #0]
 8025244:	4a92      	ldr	r2, [pc, #584]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8025246:	4293      	cmp	r3, r2
 8025248:	d101      	bne.n	802524e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 802524a:	4b92      	ldr	r3, [pc, #584]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 802524c:	e001      	b.n	8025252 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 802524e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025252:	689b      	ldr	r3, [r3, #8]
 8025254:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8025256:	687b      	ldr	r3, [r7, #4]
 8025258:	681b      	ldr	r3, [r3, #0]
 802525a:	685b      	ldr	r3, [r3, #4]
 802525c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 802525e:	687b      	ldr	r3, [r7, #4]
 8025260:	681b      	ldr	r3, [r3, #0]
 8025262:	4a8b      	ldr	r2, [pc, #556]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8025264:	4293      	cmp	r3, r2
 8025266:	d101      	bne.n	802526c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8025268:	4b8a      	ldr	r3, [pc, #552]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 802526a:	e001      	b.n	8025270 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 802526c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025270:	685b      	ldr	r3, [r3, #4]
 8025272:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8025274:	687b      	ldr	r3, [r7, #4]
 8025276:	685b      	ldr	r3, [r3, #4]
 8025278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802527c:	d004      	beq.n	8025288 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 802527e:	687b      	ldr	r3, [r7, #4]
 8025280:	685b      	ldr	r3, [r3, #4]
 8025282:	2b00      	cmp	r3, #0
 8025284:	f040 8099 	bne.w	80253ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8025288:	69fb      	ldr	r3, [r7, #28]
 802528a:	f003 0302 	and.w	r3, r3, #2
 802528e:	2b02      	cmp	r3, #2
 8025290:	d107      	bne.n	80252a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8025292:	697b      	ldr	r3, [r7, #20]
 8025294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025298:	2b00      	cmp	r3, #0
 802529a:	d002      	beq.n	80252a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 802529c:	6878      	ldr	r0, [r7, #4]
 802529e:	f000 fa0b 	bl	80256b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80252a2:	69bb      	ldr	r3, [r7, #24]
 80252a4:	f003 0301 	and.w	r3, r3, #1
 80252a8:	2b01      	cmp	r3, #1
 80252aa:	d107      	bne.n	80252bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80252ac:	693b      	ldr	r3, [r7, #16]
 80252ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80252b2:	2b00      	cmp	r3, #0
 80252b4:	d002      	beq.n	80252bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80252b6:	6878      	ldr	r0, [r7, #4]
 80252b8:	f000 faae 	bl	8025818 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80252bc:	69bb      	ldr	r3, [r7, #24]
 80252be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80252c2:	2b40      	cmp	r3, #64	; 0x40
 80252c4:	d13a      	bne.n	802533c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80252c6:	693b      	ldr	r3, [r7, #16]
 80252c8:	f003 0320 	and.w	r3, r3, #32
 80252cc:	2b00      	cmp	r3, #0
 80252ce:	d035      	beq.n	802533c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80252d0:	687b      	ldr	r3, [r7, #4]
 80252d2:	681b      	ldr	r3, [r3, #0]
 80252d4:	4a6e      	ldr	r2, [pc, #440]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80252d6:	4293      	cmp	r3, r2
 80252d8:	d101      	bne.n	80252de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80252da:	4b6e      	ldr	r3, [pc, #440]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80252dc:	e001      	b.n	80252e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80252de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80252e2:	685a      	ldr	r2, [r3, #4]
 80252e4:	687b      	ldr	r3, [r7, #4]
 80252e6:	681b      	ldr	r3, [r3, #0]
 80252e8:	4969      	ldr	r1, [pc, #420]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80252ea:	428b      	cmp	r3, r1
 80252ec:	d101      	bne.n	80252f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80252ee:	4b69      	ldr	r3, [pc, #420]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80252f0:	e001      	b.n	80252f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80252f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80252f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80252fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80252fc:	687b      	ldr	r3, [r7, #4]
 80252fe:	681b      	ldr	r3, [r3, #0]
 8025300:	685a      	ldr	r2, [r3, #4]
 8025302:	687b      	ldr	r3, [r7, #4]
 8025304:	681b      	ldr	r3, [r3, #0]
 8025306:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 802530a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 802530c:	2300      	movs	r3, #0
 802530e:	60fb      	str	r3, [r7, #12]
 8025310:	687b      	ldr	r3, [r7, #4]
 8025312:	681b      	ldr	r3, [r3, #0]
 8025314:	68db      	ldr	r3, [r3, #12]
 8025316:	60fb      	str	r3, [r7, #12]
 8025318:	687b      	ldr	r3, [r7, #4]
 802531a:	681b      	ldr	r3, [r3, #0]
 802531c:	689b      	ldr	r3, [r3, #8]
 802531e:	60fb      	str	r3, [r7, #12]
 8025320:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8025322:	687b      	ldr	r3, [r7, #4]
 8025324:	2201      	movs	r2, #1
 8025326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 802532a:	687b      	ldr	r3, [r7, #4]
 802532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802532e:	f043 0202 	orr.w	r2, r3, #2
 8025332:	687b      	ldr	r3, [r7, #4]
 8025334:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8025336:	6878      	ldr	r0, [r7, #4]
 8025338:	f7ff fcfe 	bl	8024d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 802533c:	69fb      	ldr	r3, [r7, #28]
 802533e:	f003 0308 	and.w	r3, r3, #8
 8025342:	2b08      	cmp	r3, #8
 8025344:	f040 80c3 	bne.w	80254ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8025348:	697b      	ldr	r3, [r7, #20]
 802534a:	f003 0320 	and.w	r3, r3, #32
 802534e:	2b00      	cmp	r3, #0
 8025350:	f000 80bd 	beq.w	80254ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8025354:	687b      	ldr	r3, [r7, #4]
 8025356:	681b      	ldr	r3, [r3, #0]
 8025358:	685a      	ldr	r2, [r3, #4]
 802535a:	687b      	ldr	r3, [r7, #4]
 802535c:	681b      	ldr	r3, [r3, #0]
 802535e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8025362:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8025364:	687b      	ldr	r3, [r7, #4]
 8025366:	681b      	ldr	r3, [r3, #0]
 8025368:	4a49      	ldr	r2, [pc, #292]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 802536a:	4293      	cmp	r3, r2
 802536c:	d101      	bne.n	8025372 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 802536e:	4b49      	ldr	r3, [pc, #292]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8025370:	e001      	b.n	8025376 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8025372:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025376:	685a      	ldr	r2, [r3, #4]
 8025378:	687b      	ldr	r3, [r7, #4]
 802537a:	681b      	ldr	r3, [r3, #0]
 802537c:	4944      	ldr	r1, [pc, #272]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 802537e:	428b      	cmp	r3, r1
 8025380:	d101      	bne.n	8025386 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8025382:	4b44      	ldr	r3, [pc, #272]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8025384:	e001      	b.n	802538a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8025386:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802538a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 802538e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8025390:	2300      	movs	r3, #0
 8025392:	60bb      	str	r3, [r7, #8]
 8025394:	687b      	ldr	r3, [r7, #4]
 8025396:	681b      	ldr	r3, [r3, #0]
 8025398:	689b      	ldr	r3, [r3, #8]
 802539a:	60bb      	str	r3, [r7, #8]
 802539c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 802539e:	687b      	ldr	r3, [r7, #4]
 80253a0:	2201      	movs	r2, #1
 80253a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80253a6:	687b      	ldr	r3, [r7, #4]
 80253a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80253aa:	f043 0204 	orr.w	r2, r3, #4
 80253ae:	687b      	ldr	r3, [r7, #4]
 80253b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80253b2:	6878      	ldr	r0, [r7, #4]
 80253b4:	f7ff fcc0 	bl	8024d38 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80253b8:	e089      	b.n	80254ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80253ba:	69bb      	ldr	r3, [r7, #24]
 80253bc:	f003 0302 	and.w	r3, r3, #2
 80253c0:	2b02      	cmp	r3, #2
 80253c2:	d107      	bne.n	80253d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80253c4:	693b      	ldr	r3, [r7, #16]
 80253c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80253ca:	2b00      	cmp	r3, #0
 80253cc:	d002      	beq.n	80253d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80253ce:	6878      	ldr	r0, [r7, #4]
 80253d0:	f000 f9a4 	bl	802571c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80253d4:	69fb      	ldr	r3, [r7, #28]
 80253d6:	f003 0301 	and.w	r3, r3, #1
 80253da:	2b01      	cmp	r3, #1
 80253dc:	d107      	bne.n	80253ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80253de:	697b      	ldr	r3, [r7, #20]
 80253e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80253e4:	2b00      	cmp	r3, #0
 80253e6:	d002      	beq.n	80253ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80253e8:	6878      	ldr	r0, [r7, #4]
 80253ea:	f000 f9e3 	bl	80257b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80253ee:	69fb      	ldr	r3, [r7, #28]
 80253f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80253f4:	2b40      	cmp	r3, #64	; 0x40
 80253f6:	d12f      	bne.n	8025458 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80253f8:	697b      	ldr	r3, [r7, #20]
 80253fa:	f003 0320 	and.w	r3, r3, #32
 80253fe:	2b00      	cmp	r3, #0
 8025400:	d02a      	beq.n	8025458 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8025402:	687b      	ldr	r3, [r7, #4]
 8025404:	681b      	ldr	r3, [r3, #0]
 8025406:	685a      	ldr	r2, [r3, #4]
 8025408:	687b      	ldr	r3, [r7, #4]
 802540a:	681b      	ldr	r3, [r3, #0]
 802540c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8025410:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8025412:	687b      	ldr	r3, [r7, #4]
 8025414:	681b      	ldr	r3, [r3, #0]
 8025416:	4a1e      	ldr	r2, [pc, #120]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8025418:	4293      	cmp	r3, r2
 802541a:	d101      	bne.n	8025420 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 802541c:	4b1d      	ldr	r3, [pc, #116]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 802541e:	e001      	b.n	8025424 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8025420:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025424:	685a      	ldr	r2, [r3, #4]
 8025426:	687b      	ldr	r3, [r7, #4]
 8025428:	681b      	ldr	r3, [r3, #0]
 802542a:	4919      	ldr	r1, [pc, #100]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 802542c:	428b      	cmp	r3, r1
 802542e:	d101      	bne.n	8025434 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8025430:	4b18      	ldr	r3, [pc, #96]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8025432:	e001      	b.n	8025438 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8025434:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025438:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 802543c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 802543e:	687b      	ldr	r3, [r7, #4]
 8025440:	2201      	movs	r2, #1
 8025442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8025446:	687b      	ldr	r3, [r7, #4]
 8025448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802544a:	f043 0202 	orr.w	r2, r3, #2
 802544e:	687b      	ldr	r3, [r7, #4]
 8025450:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8025452:	6878      	ldr	r0, [r7, #4]
 8025454:	f7ff fc70 	bl	8024d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8025458:	69bb      	ldr	r3, [r7, #24]
 802545a:	f003 0308 	and.w	r3, r3, #8
 802545e:	2b08      	cmp	r3, #8
 8025460:	d136      	bne.n	80254d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8025462:	693b      	ldr	r3, [r7, #16]
 8025464:	f003 0320 	and.w	r3, r3, #32
 8025468:	2b00      	cmp	r3, #0
 802546a:	d031      	beq.n	80254d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 802546c:	687b      	ldr	r3, [r7, #4]
 802546e:	681b      	ldr	r3, [r3, #0]
 8025470:	4a07      	ldr	r2, [pc, #28]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8025472:	4293      	cmp	r3, r2
 8025474:	d101      	bne.n	802547a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8025476:	4b07      	ldr	r3, [pc, #28]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8025478:	e001      	b.n	802547e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 802547a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802547e:	685a      	ldr	r2, [r3, #4]
 8025480:	687b      	ldr	r3, [r7, #4]
 8025482:	681b      	ldr	r3, [r3, #0]
 8025484:	4902      	ldr	r1, [pc, #8]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8025486:	428b      	cmp	r3, r1
 8025488:	d106      	bne.n	8025498 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 802548a:	4b02      	ldr	r3, [pc, #8]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 802548c:	e006      	b.n	802549c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 802548e:	bf00      	nop
 8025490:	40003800 	.word	0x40003800
 8025494:	40003400 	.word	0x40003400
 8025498:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802549c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80254a0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80254a2:	687b      	ldr	r3, [r7, #4]
 80254a4:	681b      	ldr	r3, [r3, #0]
 80254a6:	685a      	ldr	r2, [r3, #4]
 80254a8:	687b      	ldr	r3, [r7, #4]
 80254aa:	681b      	ldr	r3, [r3, #0]
 80254ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80254b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	2201      	movs	r2, #1
 80254b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80254ba:	687b      	ldr	r3, [r7, #4]
 80254bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80254be:	f043 0204 	orr.w	r2, r3, #4
 80254c2:	687b      	ldr	r3, [r7, #4]
 80254c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80254c6:	6878      	ldr	r0, [r7, #4]
 80254c8:	f7ff fc36 	bl	8024d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80254cc:	e000      	b.n	80254d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80254ce:	bf00      	nop
}
 80254d0:	bf00      	nop
 80254d2:	3720      	adds	r7, #32
 80254d4:	46bd      	mov	sp, r7
 80254d6:	bd80      	pop	{r7, pc}

080254d8 <HAL_I2SEx_TxRxHalfCpltCallback>:
  * @brief  Tx and Rx Transfer half completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80254d8:	b480      	push	{r7}
 80254da:	b083      	sub	sp, #12
 80254dc:	af00      	add	r7, sp, #0
 80254de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxHalfCpltCallback could be implemented in the user file
   */
}
 80254e0:	bf00      	nop
 80254e2:	370c      	adds	r7, #12
 80254e4:	46bd      	mov	sp, r7
 80254e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254ea:	4770      	bx	lr

080254ec <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80254ec:	b580      	push	{r7, lr}
 80254ee:	b084      	sub	sp, #16
 80254f0:	af00      	add	r7, sp, #0
 80254f2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80254f4:	687b      	ldr	r3, [r7, #4]
 80254f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80254f8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80254fa:	68f8      	ldr	r0, [r7, #12]
 80254fc:	f7ff ffec 	bl	80254d8 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8025500:	bf00      	nop
 8025502:	3710      	adds	r7, #16
 8025504:	46bd      	mov	sp, r7
 8025506:	bd80      	pop	{r7, pc}

08025508 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8025508:	b580      	push	{r7, lr}
 802550a:	b084      	sub	sp, #16
 802550c:	af00      	add	r7, sp, #0
 802550e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8025510:	687b      	ldr	r3, [r7, #4]
 8025512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025514:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8025516:	687b      	ldr	r3, [r7, #4]
 8025518:	69db      	ldr	r3, [r3, #28]
 802551a:	2b00      	cmp	r3, #0
 802551c:	f040 8084 	bne.w	8025628 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8025520:	68fb      	ldr	r3, [r7, #12]
 8025522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025524:	687a      	ldr	r2, [r7, #4]
 8025526:	429a      	cmp	r2, r3
 8025528:	d13c      	bne.n	80255a4 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 802552a:	68fb      	ldr	r3, [r7, #12]
 802552c:	681b      	ldr	r3, [r3, #0]
 802552e:	69db      	ldr	r3, [r3, #28]
 8025530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025538:	d006      	beq.n	8025548 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 802553a:	68fb      	ldr	r3, [r7, #12]
 802553c:	681b      	ldr	r3, [r3, #0]
 802553e:	69db      	ldr	r3, [r3, #28]
 8025540:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8025544:	2b00      	cmp	r3, #0
 8025546:	d116      	bne.n	8025576 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8025548:	68fb      	ldr	r3, [r7, #12]
 802554a:	681b      	ldr	r3, [r3, #0]
 802554c:	4a38      	ldr	r2, [pc, #224]	; (8025630 <I2SEx_TxRxDMACplt+0x128>)
 802554e:	4293      	cmp	r3, r2
 8025550:	d101      	bne.n	8025556 <I2SEx_TxRxDMACplt+0x4e>
 8025552:	4b38      	ldr	r3, [pc, #224]	; (8025634 <I2SEx_TxRxDMACplt+0x12c>)
 8025554:	e001      	b.n	802555a <I2SEx_TxRxDMACplt+0x52>
 8025556:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802555a:	685a      	ldr	r2, [r3, #4]
 802555c:	68fb      	ldr	r3, [r7, #12]
 802555e:	681b      	ldr	r3, [r3, #0]
 8025560:	4933      	ldr	r1, [pc, #204]	; (8025630 <I2SEx_TxRxDMACplt+0x128>)
 8025562:	428b      	cmp	r3, r1
 8025564:	d101      	bne.n	802556a <I2SEx_TxRxDMACplt+0x62>
 8025566:	4b33      	ldr	r3, [pc, #204]	; (8025634 <I2SEx_TxRxDMACplt+0x12c>)
 8025568:	e001      	b.n	802556e <I2SEx_TxRxDMACplt+0x66>
 802556a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802556e:	f022 0201 	bic.w	r2, r2, #1
 8025572:	605a      	str	r2, [r3, #4]
 8025574:	e007      	b.n	8025586 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8025576:	68fb      	ldr	r3, [r7, #12]
 8025578:	681b      	ldr	r3, [r3, #0]
 802557a:	685a      	ldr	r2, [r3, #4]
 802557c:	68fb      	ldr	r3, [r7, #12]
 802557e:	681b      	ldr	r3, [r3, #0]
 8025580:	f022 0201 	bic.w	r2, r2, #1
 8025584:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8025586:	68fb      	ldr	r3, [r7, #12]
 8025588:	2200      	movs	r2, #0
 802558a:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 802558c:	68fb      	ldr	r3, [r7, #12]
 802558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025590:	b29b      	uxth	r3, r3
 8025592:	2b00      	cmp	r3, #0
 8025594:	d106      	bne.n	80255a4 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8025596:	68fb      	ldr	r3, [r7, #12]
 8025598:	2201      	movs	r2, #1
 802559a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 802559e:	68f8      	ldr	r0, [r7, #12]
 80255a0:	f00a fb24 	bl	802fbec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 80255a4:	68fb      	ldr	r3, [r7, #12]
 80255a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80255a8:	687a      	ldr	r2, [r7, #4]
 80255aa:	429a      	cmp	r2, r3
 80255ac:	d13c      	bne.n	8025628 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80255ae:	68fb      	ldr	r3, [r7, #12]
 80255b0:	681b      	ldr	r3, [r3, #0]
 80255b2:	69db      	ldr	r3, [r3, #28]
 80255b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80255b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80255bc:	d006      	beq.n	80255cc <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80255be:	68fb      	ldr	r3, [r7, #12]
 80255c0:	681b      	ldr	r3, [r3, #0]
 80255c2:	69db      	ldr	r3, [r3, #28]
 80255c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80255c8:	2b00      	cmp	r3, #0
 80255ca:	d108      	bne.n	80255de <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80255cc:	68fb      	ldr	r3, [r7, #12]
 80255ce:	681b      	ldr	r3, [r3, #0]
 80255d0:	685a      	ldr	r2, [r3, #4]
 80255d2:	68fb      	ldr	r3, [r7, #12]
 80255d4:	681b      	ldr	r3, [r3, #0]
 80255d6:	f022 0202 	bic.w	r2, r2, #2
 80255da:	605a      	str	r2, [r3, #4]
 80255dc:	e015      	b.n	802560a <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80255de:	68fb      	ldr	r3, [r7, #12]
 80255e0:	681b      	ldr	r3, [r3, #0]
 80255e2:	4a13      	ldr	r2, [pc, #76]	; (8025630 <I2SEx_TxRxDMACplt+0x128>)
 80255e4:	4293      	cmp	r3, r2
 80255e6:	d101      	bne.n	80255ec <I2SEx_TxRxDMACplt+0xe4>
 80255e8:	4b12      	ldr	r3, [pc, #72]	; (8025634 <I2SEx_TxRxDMACplt+0x12c>)
 80255ea:	e001      	b.n	80255f0 <I2SEx_TxRxDMACplt+0xe8>
 80255ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80255f0:	685a      	ldr	r2, [r3, #4]
 80255f2:	68fb      	ldr	r3, [r7, #12]
 80255f4:	681b      	ldr	r3, [r3, #0]
 80255f6:	490e      	ldr	r1, [pc, #56]	; (8025630 <I2SEx_TxRxDMACplt+0x128>)
 80255f8:	428b      	cmp	r3, r1
 80255fa:	d101      	bne.n	8025600 <I2SEx_TxRxDMACplt+0xf8>
 80255fc:	4b0d      	ldr	r3, [pc, #52]	; (8025634 <I2SEx_TxRxDMACplt+0x12c>)
 80255fe:	e001      	b.n	8025604 <I2SEx_TxRxDMACplt+0xfc>
 8025600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025604:	f022 0202 	bic.w	r2, r2, #2
 8025608:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 802560a:	68fb      	ldr	r3, [r7, #12]
 802560c:	2200      	movs	r2, #0
 802560e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8025610:	68fb      	ldr	r3, [r7, #12]
 8025612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8025614:	b29b      	uxth	r3, r3
 8025616:	2b00      	cmp	r3, #0
 8025618:	d106      	bne.n	8025628 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 802561a:	68fb      	ldr	r3, [r7, #12]
 802561c:	2201      	movs	r2, #1
 802561e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8025622:	68f8      	ldr	r0, [r7, #12]
 8025624:	f00a fae2 	bl	802fbec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
}
 8025628:	bf00      	nop
 802562a:	3710      	adds	r7, #16
 802562c:	46bd      	mov	sp, r7
 802562e:	bd80      	pop	{r7, pc}
 8025630:	40003800 	.word	0x40003800
 8025634:	40003400 	.word	0x40003400

08025638 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8025638:	b580      	push	{r7, lr}
 802563a:	b084      	sub	sp, #16
 802563c:	af00      	add	r7, sp, #0
 802563e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8025640:	687b      	ldr	r3, [r7, #4]
 8025642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025644:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8025646:	68fb      	ldr	r3, [r7, #12]
 8025648:	681b      	ldr	r3, [r3, #0]
 802564a:	685a      	ldr	r2, [r3, #4]
 802564c:	68fb      	ldr	r3, [r7, #12]
 802564e:	681b      	ldr	r3, [r3, #0]
 8025650:	f022 0203 	bic.w	r2, r2, #3
 8025654:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8025656:	68fb      	ldr	r3, [r7, #12]
 8025658:	681b      	ldr	r3, [r3, #0]
 802565a:	4a15      	ldr	r2, [pc, #84]	; (80256b0 <I2SEx_TxRxDMAError+0x78>)
 802565c:	4293      	cmp	r3, r2
 802565e:	d101      	bne.n	8025664 <I2SEx_TxRxDMAError+0x2c>
 8025660:	4b14      	ldr	r3, [pc, #80]	; (80256b4 <I2SEx_TxRxDMAError+0x7c>)
 8025662:	e001      	b.n	8025668 <I2SEx_TxRxDMAError+0x30>
 8025664:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025668:	685a      	ldr	r2, [r3, #4]
 802566a:	68fb      	ldr	r3, [r7, #12]
 802566c:	681b      	ldr	r3, [r3, #0]
 802566e:	4910      	ldr	r1, [pc, #64]	; (80256b0 <I2SEx_TxRxDMAError+0x78>)
 8025670:	428b      	cmp	r3, r1
 8025672:	d101      	bne.n	8025678 <I2SEx_TxRxDMAError+0x40>
 8025674:	4b0f      	ldr	r3, [pc, #60]	; (80256b4 <I2SEx_TxRxDMAError+0x7c>)
 8025676:	e001      	b.n	802567c <I2SEx_TxRxDMAError+0x44>
 8025678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802567c:	f022 0203 	bic.w	r2, r2, #3
 8025680:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8025682:	68fb      	ldr	r3, [r7, #12]
 8025684:	2200      	movs	r2, #0
 8025686:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8025688:	68fb      	ldr	r3, [r7, #12]
 802568a:	2200      	movs	r2, #0
 802568c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 802568e:	68fb      	ldr	r3, [r7, #12]
 8025690:	2201      	movs	r2, #1
 8025692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8025696:	68fb      	ldr	r3, [r7, #12]
 8025698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802569a:	f043 0208 	orr.w	r2, r3, #8
 802569e:	68fb      	ldr	r3, [r7, #12]
 80256a0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80256a2:	68f8      	ldr	r0, [r7, #12]
 80256a4:	f7ff fb48 	bl	8024d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80256a8:	bf00      	nop
 80256aa:	3710      	adds	r7, #16
 80256ac:	46bd      	mov	sp, r7
 80256ae:	bd80      	pop	{r7, pc}
 80256b0:	40003800 	.word	0x40003800
 80256b4:	40003400 	.word	0x40003400

080256b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80256b8:	b580      	push	{r7, lr}
 80256ba:	b082      	sub	sp, #8
 80256bc:	af00      	add	r7, sp, #0
 80256be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80256c0:	687b      	ldr	r3, [r7, #4]
 80256c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80256c4:	1c99      	adds	r1, r3, #2
 80256c6:	687a      	ldr	r2, [r7, #4]
 80256c8:	6251      	str	r1, [r2, #36]	; 0x24
 80256ca:	881a      	ldrh	r2, [r3, #0]
 80256cc:	687b      	ldr	r3, [r7, #4]
 80256ce:	681b      	ldr	r3, [r3, #0]
 80256d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80256d2:	687b      	ldr	r3, [r7, #4]
 80256d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80256d6:	b29b      	uxth	r3, r3
 80256d8:	3b01      	subs	r3, #1
 80256da:	b29a      	uxth	r2, r3
 80256dc:	687b      	ldr	r3, [r7, #4]
 80256de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80256e0:	687b      	ldr	r3, [r7, #4]
 80256e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80256e4:	b29b      	uxth	r3, r3
 80256e6:	2b00      	cmp	r3, #0
 80256e8:	d113      	bne.n	8025712 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80256ea:	687b      	ldr	r3, [r7, #4]
 80256ec:	681b      	ldr	r3, [r3, #0]
 80256ee:	685a      	ldr	r2, [r3, #4]
 80256f0:	687b      	ldr	r3, [r7, #4]
 80256f2:	681b      	ldr	r3, [r3, #0]
 80256f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80256f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80256fa:	687b      	ldr	r3, [r7, #4]
 80256fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80256fe:	b29b      	uxth	r3, r3
 8025700:	2b00      	cmp	r3, #0
 8025702:	d106      	bne.n	8025712 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8025704:	687b      	ldr	r3, [r7, #4]
 8025706:	2201      	movs	r2, #1
 8025708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 802570c:	6878      	ldr	r0, [r7, #4]
 802570e:	f00a fa6d 	bl	802fbec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8025712:	bf00      	nop
 8025714:	3708      	adds	r7, #8
 8025716:	46bd      	mov	sp, r7
 8025718:	bd80      	pop	{r7, pc}
	...

0802571c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 802571c:	b580      	push	{r7, lr}
 802571e:	b082      	sub	sp, #8
 8025720:	af00      	add	r7, sp, #0
 8025722:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8025724:	687b      	ldr	r3, [r7, #4]
 8025726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025728:	1c99      	adds	r1, r3, #2
 802572a:	687a      	ldr	r2, [r7, #4]
 802572c:	6251      	str	r1, [r2, #36]	; 0x24
 802572e:	8819      	ldrh	r1, [r3, #0]
 8025730:	687b      	ldr	r3, [r7, #4]
 8025732:	681b      	ldr	r3, [r3, #0]
 8025734:	4a1d      	ldr	r2, [pc, #116]	; (80257ac <I2SEx_TxISR_I2SExt+0x90>)
 8025736:	4293      	cmp	r3, r2
 8025738:	d101      	bne.n	802573e <I2SEx_TxISR_I2SExt+0x22>
 802573a:	4b1d      	ldr	r3, [pc, #116]	; (80257b0 <I2SEx_TxISR_I2SExt+0x94>)
 802573c:	e001      	b.n	8025742 <I2SEx_TxISR_I2SExt+0x26>
 802573e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025742:	460a      	mov	r2, r1
 8025744:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8025746:	687b      	ldr	r3, [r7, #4]
 8025748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802574a:	b29b      	uxth	r3, r3
 802574c:	3b01      	subs	r3, #1
 802574e:	b29a      	uxth	r2, r3
 8025750:	687b      	ldr	r3, [r7, #4]
 8025752:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8025754:	687b      	ldr	r3, [r7, #4]
 8025756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025758:	b29b      	uxth	r3, r3
 802575a:	2b00      	cmp	r3, #0
 802575c:	d121      	bne.n	80257a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 802575e:	687b      	ldr	r3, [r7, #4]
 8025760:	681b      	ldr	r3, [r3, #0]
 8025762:	4a12      	ldr	r2, [pc, #72]	; (80257ac <I2SEx_TxISR_I2SExt+0x90>)
 8025764:	4293      	cmp	r3, r2
 8025766:	d101      	bne.n	802576c <I2SEx_TxISR_I2SExt+0x50>
 8025768:	4b11      	ldr	r3, [pc, #68]	; (80257b0 <I2SEx_TxISR_I2SExt+0x94>)
 802576a:	e001      	b.n	8025770 <I2SEx_TxISR_I2SExt+0x54>
 802576c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025770:	685a      	ldr	r2, [r3, #4]
 8025772:	687b      	ldr	r3, [r7, #4]
 8025774:	681b      	ldr	r3, [r3, #0]
 8025776:	490d      	ldr	r1, [pc, #52]	; (80257ac <I2SEx_TxISR_I2SExt+0x90>)
 8025778:	428b      	cmp	r3, r1
 802577a:	d101      	bne.n	8025780 <I2SEx_TxISR_I2SExt+0x64>
 802577c:	4b0c      	ldr	r3, [pc, #48]	; (80257b0 <I2SEx_TxISR_I2SExt+0x94>)
 802577e:	e001      	b.n	8025784 <I2SEx_TxISR_I2SExt+0x68>
 8025780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025784:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8025788:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 802578a:	687b      	ldr	r3, [r7, #4]
 802578c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802578e:	b29b      	uxth	r3, r3
 8025790:	2b00      	cmp	r3, #0
 8025792:	d106      	bne.n	80257a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8025794:	687b      	ldr	r3, [r7, #4]
 8025796:	2201      	movs	r2, #1
 8025798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 802579c:	6878      	ldr	r0, [r7, #4]
 802579e:	f00a fa25 	bl	802fbec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80257a2:	bf00      	nop
 80257a4:	3708      	adds	r7, #8
 80257a6:	46bd      	mov	sp, r7
 80257a8:	bd80      	pop	{r7, pc}
 80257aa:	bf00      	nop
 80257ac:	40003800 	.word	0x40003800
 80257b0:	40003400 	.word	0x40003400

080257b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80257b4:	b580      	push	{r7, lr}
 80257b6:	b082      	sub	sp, #8
 80257b8:	af00      	add	r7, sp, #0
 80257ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80257bc:	687b      	ldr	r3, [r7, #4]
 80257be:	681b      	ldr	r3, [r3, #0]
 80257c0:	68d8      	ldr	r0, [r3, #12]
 80257c2:	687b      	ldr	r3, [r7, #4]
 80257c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80257c6:	1c99      	adds	r1, r3, #2
 80257c8:	687a      	ldr	r2, [r7, #4]
 80257ca:	62d1      	str	r1, [r2, #44]	; 0x2c
 80257cc:	b282      	uxth	r2, r0
 80257ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80257d0:	687b      	ldr	r3, [r7, #4]
 80257d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80257d4:	b29b      	uxth	r3, r3
 80257d6:	3b01      	subs	r3, #1
 80257d8:	b29a      	uxth	r2, r3
 80257da:	687b      	ldr	r3, [r7, #4]
 80257dc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80257de:	687b      	ldr	r3, [r7, #4]
 80257e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80257e2:	b29b      	uxth	r3, r3
 80257e4:	2b00      	cmp	r3, #0
 80257e6:	d113      	bne.n	8025810 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80257e8:	687b      	ldr	r3, [r7, #4]
 80257ea:	681b      	ldr	r3, [r3, #0]
 80257ec:	685a      	ldr	r2, [r3, #4]
 80257ee:	687b      	ldr	r3, [r7, #4]
 80257f0:	681b      	ldr	r3, [r3, #0]
 80257f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80257f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80257f8:	687b      	ldr	r3, [r7, #4]
 80257fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80257fc:	b29b      	uxth	r3, r3
 80257fe:	2b00      	cmp	r3, #0
 8025800:	d106      	bne.n	8025810 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8025802:	687b      	ldr	r3, [r7, #4]
 8025804:	2201      	movs	r2, #1
 8025806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 802580a:	6878      	ldr	r0, [r7, #4]
 802580c:	f00a f9ee 	bl	802fbec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8025810:	bf00      	nop
 8025812:	3708      	adds	r7, #8
 8025814:	46bd      	mov	sp, r7
 8025816:	bd80      	pop	{r7, pc}

08025818 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8025818:	b580      	push	{r7, lr}
 802581a:	b082      	sub	sp, #8
 802581c:	af00      	add	r7, sp, #0
 802581e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8025820:	687b      	ldr	r3, [r7, #4]
 8025822:	681b      	ldr	r3, [r3, #0]
 8025824:	4a20      	ldr	r2, [pc, #128]	; (80258a8 <I2SEx_RxISR_I2SExt+0x90>)
 8025826:	4293      	cmp	r3, r2
 8025828:	d101      	bne.n	802582e <I2SEx_RxISR_I2SExt+0x16>
 802582a:	4b20      	ldr	r3, [pc, #128]	; (80258ac <I2SEx_RxISR_I2SExt+0x94>)
 802582c:	e001      	b.n	8025832 <I2SEx_RxISR_I2SExt+0x1a>
 802582e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025832:	68d8      	ldr	r0, [r3, #12]
 8025834:	687b      	ldr	r3, [r7, #4]
 8025836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025838:	1c99      	adds	r1, r3, #2
 802583a:	687a      	ldr	r2, [r7, #4]
 802583c:	62d1      	str	r1, [r2, #44]	; 0x2c
 802583e:	b282      	uxth	r2, r0
 8025840:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8025842:	687b      	ldr	r3, [r7, #4]
 8025844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8025846:	b29b      	uxth	r3, r3
 8025848:	3b01      	subs	r3, #1
 802584a:	b29a      	uxth	r2, r3
 802584c:	687b      	ldr	r3, [r7, #4]
 802584e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8025850:	687b      	ldr	r3, [r7, #4]
 8025852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8025854:	b29b      	uxth	r3, r3
 8025856:	2b00      	cmp	r3, #0
 8025858:	d121      	bne.n	802589e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 802585a:	687b      	ldr	r3, [r7, #4]
 802585c:	681b      	ldr	r3, [r3, #0]
 802585e:	4a12      	ldr	r2, [pc, #72]	; (80258a8 <I2SEx_RxISR_I2SExt+0x90>)
 8025860:	4293      	cmp	r3, r2
 8025862:	d101      	bne.n	8025868 <I2SEx_RxISR_I2SExt+0x50>
 8025864:	4b11      	ldr	r3, [pc, #68]	; (80258ac <I2SEx_RxISR_I2SExt+0x94>)
 8025866:	e001      	b.n	802586c <I2SEx_RxISR_I2SExt+0x54>
 8025868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802586c:	685a      	ldr	r2, [r3, #4]
 802586e:	687b      	ldr	r3, [r7, #4]
 8025870:	681b      	ldr	r3, [r3, #0]
 8025872:	490d      	ldr	r1, [pc, #52]	; (80258a8 <I2SEx_RxISR_I2SExt+0x90>)
 8025874:	428b      	cmp	r3, r1
 8025876:	d101      	bne.n	802587c <I2SEx_RxISR_I2SExt+0x64>
 8025878:	4b0c      	ldr	r3, [pc, #48]	; (80258ac <I2SEx_RxISR_I2SExt+0x94>)
 802587a:	e001      	b.n	8025880 <I2SEx_RxISR_I2SExt+0x68>
 802587c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025880:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8025884:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8025886:	687b      	ldr	r3, [r7, #4]
 8025888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802588a:	b29b      	uxth	r3, r3
 802588c:	2b00      	cmp	r3, #0
 802588e:	d106      	bne.n	802589e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8025890:	687b      	ldr	r3, [r7, #4]
 8025892:	2201      	movs	r2, #1
 8025894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8025898:	6878      	ldr	r0, [r7, #4]
 802589a:	f00a f9a7 	bl	802fbec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 802589e:	bf00      	nop
 80258a0:	3708      	adds	r7, #8
 80258a2:	46bd      	mov	sp, r7
 80258a4:	bd80      	pop	{r7, pc}
 80258a6:	bf00      	nop
 80258a8:	40003800 	.word	0x40003800
 80258ac:	40003400 	.word	0x40003400

080258b0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80258b0:	b580      	push	{r7, lr}
 80258b2:	b084      	sub	sp, #16
 80258b4:	af00      	add	r7, sp, #0
 80258b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80258b8:	687b      	ldr	r3, [r7, #4]
 80258ba:	2b00      	cmp	r3, #0
 80258bc:	d101      	bne.n	80258c2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80258be:	2301      	movs	r3, #1
 80258c0:	e02b      	b.n	802591a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80258c2:	687b      	ldr	r3, [r7, #4]
 80258c4:	681b      	ldr	r3, [r3, #0]
 80258c6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80258ca:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80258cc:	687b      	ldr	r3, [r7, #4]
 80258ce:	681b      	ldr	r3, [r3, #0]
 80258d0:	f245 5255 	movw	r2, #21845	; 0x5555
 80258d4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80258d6:	687b      	ldr	r3, [r7, #4]
 80258d8:	681b      	ldr	r3, [r3, #0]
 80258da:	687a      	ldr	r2, [r7, #4]
 80258dc:	6852      	ldr	r2, [r2, #4]
 80258de:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80258e0:	687b      	ldr	r3, [r7, #4]
 80258e2:	681b      	ldr	r3, [r3, #0]
 80258e4:	687a      	ldr	r2, [r7, #4]
 80258e6:	6892      	ldr	r2, [r2, #8]
 80258e8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80258ea:	f7fc f93d 	bl	8021b68 <HAL_GetTick>
 80258ee:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80258f0:	e008      	b.n	8025904 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80258f2:	f7fc f939 	bl	8021b68 <HAL_GetTick>
 80258f6:	4602      	mov	r2, r0
 80258f8:	68fb      	ldr	r3, [r7, #12]
 80258fa:	1ad3      	subs	r3, r2, r3
 80258fc:	2b30      	cmp	r3, #48	; 0x30
 80258fe:	d901      	bls.n	8025904 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8025900:	2303      	movs	r3, #3
 8025902:	e00a      	b.n	802591a <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8025904:	687b      	ldr	r3, [r7, #4]
 8025906:	681b      	ldr	r3, [r3, #0]
 8025908:	68db      	ldr	r3, [r3, #12]
 802590a:	2b00      	cmp	r3, #0
 802590c:	d1f1      	bne.n	80258f2 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 802590e:	687b      	ldr	r3, [r7, #4]
 8025910:	681b      	ldr	r3, [r3, #0]
 8025912:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8025916:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8025918:	2300      	movs	r3, #0
}
 802591a:	4618      	mov	r0, r3
 802591c:	3710      	adds	r7, #16
 802591e:	46bd      	mov	sp, r7
 8025920:	bd80      	pop	{r7, pc}

08025922 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8025922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025924:	b08f      	sub	sp, #60	; 0x3c
 8025926:	af0a      	add	r7, sp, #40	; 0x28
 8025928:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 802592a:	687b      	ldr	r3, [r7, #4]
 802592c:	2b00      	cmp	r3, #0
 802592e:	d101      	bne.n	8025934 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8025930:	2301      	movs	r3, #1
 8025932:	e10f      	b.n	8025b54 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8025934:	687b      	ldr	r3, [r7, #4]
 8025936:	681b      	ldr	r3, [r3, #0]
 8025938:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 802593a:	687b      	ldr	r3, [r7, #4]
 802593c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8025940:	b2db      	uxtb	r3, r3
 8025942:	2b00      	cmp	r3, #0
 8025944:	d106      	bne.n	8025954 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8025946:	687b      	ldr	r3, [r7, #4]
 8025948:	2200      	movs	r2, #0
 802594a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 802594e:	6878      	ldr	r0, [r7, #4]
 8025950:	f011 f834 	bl	80369bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8025954:	687b      	ldr	r3, [r7, #4]
 8025956:	2203      	movs	r2, #3
 8025958:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 802595c:	68bb      	ldr	r3, [r7, #8]
 802595e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025964:	2b00      	cmp	r3, #0
 8025966:	d102      	bne.n	802596e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8025968:	687b      	ldr	r3, [r7, #4]
 802596a:	2200      	movs	r2, #0
 802596c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 802596e:	687b      	ldr	r3, [r7, #4]
 8025970:	681b      	ldr	r3, [r3, #0]
 8025972:	4618      	mov	r0, r3
 8025974:	f004 fa45 	bl	8029e02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8025978:	687b      	ldr	r3, [r7, #4]
 802597a:	681b      	ldr	r3, [r3, #0]
 802597c:	603b      	str	r3, [r7, #0]
 802597e:	687e      	ldr	r6, [r7, #4]
 8025980:	466d      	mov	r5, sp
 8025982:	f106 0410 	add.w	r4, r6, #16
 8025986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802598a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802598c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802598e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025992:	e885 0003 	stmia.w	r5, {r0, r1}
 8025996:	1d33      	adds	r3, r6, #4
 8025998:	cb0e      	ldmia	r3, {r1, r2, r3}
 802599a:	6838      	ldr	r0, [r7, #0]
 802599c:	f004 f91c 	bl	8029bd8 <USB_CoreInit>
 80259a0:	4603      	mov	r3, r0
 80259a2:	2b00      	cmp	r3, #0
 80259a4:	d005      	beq.n	80259b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80259a6:	687b      	ldr	r3, [r7, #4]
 80259a8:	2202      	movs	r2, #2
 80259aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80259ae:	2301      	movs	r3, #1
 80259b0:	e0d0      	b.n	8025b54 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80259b2:	687b      	ldr	r3, [r7, #4]
 80259b4:	681b      	ldr	r3, [r3, #0]
 80259b6:	2100      	movs	r1, #0
 80259b8:	4618      	mov	r0, r3
 80259ba:	f004 fa33 	bl	8029e24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80259be:	2300      	movs	r3, #0
 80259c0:	73fb      	strb	r3, [r7, #15]
 80259c2:	e04a      	b.n	8025a5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80259c4:	7bfa      	ldrb	r2, [r7, #15]
 80259c6:	6879      	ldr	r1, [r7, #4]
 80259c8:	4613      	mov	r3, r2
 80259ca:	00db      	lsls	r3, r3, #3
 80259cc:	1a9b      	subs	r3, r3, r2
 80259ce:	009b      	lsls	r3, r3, #2
 80259d0:	440b      	add	r3, r1
 80259d2:	333d      	adds	r3, #61	; 0x3d
 80259d4:	2201      	movs	r2, #1
 80259d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80259d8:	7bfa      	ldrb	r2, [r7, #15]
 80259da:	6879      	ldr	r1, [r7, #4]
 80259dc:	4613      	mov	r3, r2
 80259de:	00db      	lsls	r3, r3, #3
 80259e0:	1a9b      	subs	r3, r3, r2
 80259e2:	009b      	lsls	r3, r3, #2
 80259e4:	440b      	add	r3, r1
 80259e6:	333c      	adds	r3, #60	; 0x3c
 80259e8:	7bfa      	ldrb	r2, [r7, #15]
 80259ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80259ec:	7bfa      	ldrb	r2, [r7, #15]
 80259ee:	7bfb      	ldrb	r3, [r7, #15]
 80259f0:	b298      	uxth	r0, r3
 80259f2:	6879      	ldr	r1, [r7, #4]
 80259f4:	4613      	mov	r3, r2
 80259f6:	00db      	lsls	r3, r3, #3
 80259f8:	1a9b      	subs	r3, r3, r2
 80259fa:	009b      	lsls	r3, r3, #2
 80259fc:	440b      	add	r3, r1
 80259fe:	3342      	adds	r3, #66	; 0x42
 8025a00:	4602      	mov	r2, r0
 8025a02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8025a04:	7bfa      	ldrb	r2, [r7, #15]
 8025a06:	6879      	ldr	r1, [r7, #4]
 8025a08:	4613      	mov	r3, r2
 8025a0a:	00db      	lsls	r3, r3, #3
 8025a0c:	1a9b      	subs	r3, r3, r2
 8025a0e:	009b      	lsls	r3, r3, #2
 8025a10:	440b      	add	r3, r1
 8025a12:	333f      	adds	r3, #63	; 0x3f
 8025a14:	2200      	movs	r2, #0
 8025a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8025a18:	7bfa      	ldrb	r2, [r7, #15]
 8025a1a:	6879      	ldr	r1, [r7, #4]
 8025a1c:	4613      	mov	r3, r2
 8025a1e:	00db      	lsls	r3, r3, #3
 8025a20:	1a9b      	subs	r3, r3, r2
 8025a22:	009b      	lsls	r3, r3, #2
 8025a24:	440b      	add	r3, r1
 8025a26:	3344      	adds	r3, #68	; 0x44
 8025a28:	2200      	movs	r2, #0
 8025a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8025a2c:	7bfa      	ldrb	r2, [r7, #15]
 8025a2e:	6879      	ldr	r1, [r7, #4]
 8025a30:	4613      	mov	r3, r2
 8025a32:	00db      	lsls	r3, r3, #3
 8025a34:	1a9b      	subs	r3, r3, r2
 8025a36:	009b      	lsls	r3, r3, #2
 8025a38:	440b      	add	r3, r1
 8025a3a:	3348      	adds	r3, #72	; 0x48
 8025a3c:	2200      	movs	r2, #0
 8025a3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8025a40:	7bfa      	ldrb	r2, [r7, #15]
 8025a42:	6879      	ldr	r1, [r7, #4]
 8025a44:	4613      	mov	r3, r2
 8025a46:	00db      	lsls	r3, r3, #3
 8025a48:	1a9b      	subs	r3, r3, r2
 8025a4a:	009b      	lsls	r3, r3, #2
 8025a4c:	440b      	add	r3, r1
 8025a4e:	3350      	adds	r3, #80	; 0x50
 8025a50:	2200      	movs	r2, #0
 8025a52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8025a54:	7bfb      	ldrb	r3, [r7, #15]
 8025a56:	3301      	adds	r3, #1
 8025a58:	73fb      	strb	r3, [r7, #15]
 8025a5a:	7bfa      	ldrb	r2, [r7, #15]
 8025a5c:	687b      	ldr	r3, [r7, #4]
 8025a5e:	685b      	ldr	r3, [r3, #4]
 8025a60:	429a      	cmp	r2, r3
 8025a62:	d3af      	bcc.n	80259c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8025a64:	2300      	movs	r3, #0
 8025a66:	73fb      	strb	r3, [r7, #15]
 8025a68:	e044      	b.n	8025af4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8025a6a:	7bfa      	ldrb	r2, [r7, #15]
 8025a6c:	6879      	ldr	r1, [r7, #4]
 8025a6e:	4613      	mov	r3, r2
 8025a70:	00db      	lsls	r3, r3, #3
 8025a72:	1a9b      	subs	r3, r3, r2
 8025a74:	009b      	lsls	r3, r3, #2
 8025a76:	440b      	add	r3, r1
 8025a78:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8025a7c:	2200      	movs	r2, #0
 8025a7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8025a80:	7bfa      	ldrb	r2, [r7, #15]
 8025a82:	6879      	ldr	r1, [r7, #4]
 8025a84:	4613      	mov	r3, r2
 8025a86:	00db      	lsls	r3, r3, #3
 8025a88:	1a9b      	subs	r3, r3, r2
 8025a8a:	009b      	lsls	r3, r3, #2
 8025a8c:	440b      	add	r3, r1
 8025a8e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8025a92:	7bfa      	ldrb	r2, [r7, #15]
 8025a94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8025a96:	7bfa      	ldrb	r2, [r7, #15]
 8025a98:	6879      	ldr	r1, [r7, #4]
 8025a9a:	4613      	mov	r3, r2
 8025a9c:	00db      	lsls	r3, r3, #3
 8025a9e:	1a9b      	subs	r3, r3, r2
 8025aa0:	009b      	lsls	r3, r3, #2
 8025aa2:	440b      	add	r3, r1
 8025aa4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8025aa8:	2200      	movs	r2, #0
 8025aaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8025aac:	7bfa      	ldrb	r2, [r7, #15]
 8025aae:	6879      	ldr	r1, [r7, #4]
 8025ab0:	4613      	mov	r3, r2
 8025ab2:	00db      	lsls	r3, r3, #3
 8025ab4:	1a9b      	subs	r3, r3, r2
 8025ab6:	009b      	lsls	r3, r3, #2
 8025ab8:	440b      	add	r3, r1
 8025aba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8025abe:	2200      	movs	r2, #0
 8025ac0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8025ac2:	7bfa      	ldrb	r2, [r7, #15]
 8025ac4:	6879      	ldr	r1, [r7, #4]
 8025ac6:	4613      	mov	r3, r2
 8025ac8:	00db      	lsls	r3, r3, #3
 8025aca:	1a9b      	subs	r3, r3, r2
 8025acc:	009b      	lsls	r3, r3, #2
 8025ace:	440b      	add	r3, r1
 8025ad0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8025ad4:	2200      	movs	r2, #0
 8025ad6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8025ad8:	7bfa      	ldrb	r2, [r7, #15]
 8025ada:	6879      	ldr	r1, [r7, #4]
 8025adc:	4613      	mov	r3, r2
 8025ade:	00db      	lsls	r3, r3, #3
 8025ae0:	1a9b      	subs	r3, r3, r2
 8025ae2:	009b      	lsls	r3, r3, #2
 8025ae4:	440b      	add	r3, r1
 8025ae6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8025aea:	2200      	movs	r2, #0
 8025aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8025aee:	7bfb      	ldrb	r3, [r7, #15]
 8025af0:	3301      	adds	r3, #1
 8025af2:	73fb      	strb	r3, [r7, #15]
 8025af4:	7bfa      	ldrb	r2, [r7, #15]
 8025af6:	687b      	ldr	r3, [r7, #4]
 8025af8:	685b      	ldr	r3, [r3, #4]
 8025afa:	429a      	cmp	r2, r3
 8025afc:	d3b5      	bcc.n	8025a6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8025afe:	687b      	ldr	r3, [r7, #4]
 8025b00:	681b      	ldr	r3, [r3, #0]
 8025b02:	603b      	str	r3, [r7, #0]
 8025b04:	687e      	ldr	r6, [r7, #4]
 8025b06:	466d      	mov	r5, sp
 8025b08:	f106 0410 	add.w	r4, r6, #16
 8025b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025b14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025b18:	e885 0003 	stmia.w	r5, {r0, r1}
 8025b1c:	1d33      	adds	r3, r6, #4
 8025b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025b20:	6838      	ldr	r0, [r7, #0]
 8025b22:	f004 f9a9 	bl	8029e78 <USB_DevInit>
 8025b26:	4603      	mov	r3, r0
 8025b28:	2b00      	cmp	r3, #0
 8025b2a:	d005      	beq.n	8025b38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8025b2c:	687b      	ldr	r3, [r7, #4]
 8025b2e:	2202      	movs	r2, #2
 8025b30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8025b34:	2301      	movs	r3, #1
 8025b36:	e00d      	b.n	8025b54 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8025b38:	687b      	ldr	r3, [r7, #4]
 8025b3a:	2200      	movs	r2, #0
 8025b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8025b40:	687b      	ldr	r3, [r7, #4]
 8025b42:	2201      	movs	r2, #1
 8025b44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8025b48:	687b      	ldr	r3, [r7, #4]
 8025b4a:	681b      	ldr	r3, [r3, #0]
 8025b4c:	4618      	mov	r0, r3
 8025b4e:	f005 f9f1 	bl	802af34 <USB_DevDisconnect>

  return HAL_OK;
 8025b52:	2300      	movs	r3, #0
}
 8025b54:	4618      	mov	r0, r3
 8025b56:	3714      	adds	r7, #20
 8025b58:	46bd      	mov	sp, r7
 8025b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025b5c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8025b5c:	b580      	push	{r7, lr}
 8025b5e:	b084      	sub	sp, #16
 8025b60:	af00      	add	r7, sp, #0
 8025b62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8025b64:	687b      	ldr	r3, [r7, #4]
 8025b66:	681b      	ldr	r3, [r3, #0]
 8025b68:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8025b6a:	687b      	ldr	r3, [r7, #4]
 8025b6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8025b70:	2b01      	cmp	r3, #1
 8025b72:	d101      	bne.n	8025b78 <HAL_PCD_Start+0x1c>
 8025b74:	2302      	movs	r3, #2
 8025b76:	e020      	b.n	8025bba <HAL_PCD_Start+0x5e>
 8025b78:	687b      	ldr	r3, [r7, #4]
 8025b7a:	2201      	movs	r2, #1
 8025b7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8025b80:	687b      	ldr	r3, [r7, #4]
 8025b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025b84:	2b01      	cmp	r3, #1
 8025b86:	d109      	bne.n	8025b9c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8025b88:	687b      	ldr	r3, [r7, #4]
 8025b8a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8025b8c:	2b01      	cmp	r3, #1
 8025b8e:	d005      	beq.n	8025b9c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8025b90:	68fb      	ldr	r3, [r7, #12]
 8025b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025b94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8025b98:	68fb      	ldr	r3, [r7, #12]
 8025b9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8025b9c:	687b      	ldr	r3, [r7, #4]
 8025b9e:	681b      	ldr	r3, [r3, #0]
 8025ba0:	4618      	mov	r0, r3
 8025ba2:	f004 f91d 	bl	8029de0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8025ba6:	687b      	ldr	r3, [r7, #4]
 8025ba8:	681b      	ldr	r3, [r3, #0]
 8025baa:	4618      	mov	r0, r3
 8025bac:	f005 f9a1 	bl	802aef2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8025bb0:	687b      	ldr	r3, [r7, #4]
 8025bb2:	2200      	movs	r2, #0
 8025bb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8025bb8:	2300      	movs	r3, #0
}
 8025bba:	4618      	mov	r0, r3
 8025bbc:	3710      	adds	r7, #16
 8025bbe:	46bd      	mov	sp, r7
 8025bc0:	bd80      	pop	{r7, pc}

08025bc2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8025bc2:	b590      	push	{r4, r7, lr}
 8025bc4:	b08d      	sub	sp, #52	; 0x34
 8025bc6:	af00      	add	r7, sp, #0
 8025bc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8025bca:	687b      	ldr	r3, [r7, #4]
 8025bcc:	681b      	ldr	r3, [r3, #0]
 8025bce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025bd0:	6a3b      	ldr	r3, [r7, #32]
 8025bd2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8025bd4:	687b      	ldr	r3, [r7, #4]
 8025bd6:	681b      	ldr	r3, [r3, #0]
 8025bd8:	4618      	mov	r0, r3
 8025bda:	f005 fa5f 	bl	802b09c <USB_GetMode>
 8025bde:	4603      	mov	r3, r0
 8025be0:	2b00      	cmp	r3, #0
 8025be2:	f040 839d 	bne.w	8026320 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8025be6:	687b      	ldr	r3, [r7, #4]
 8025be8:	681b      	ldr	r3, [r3, #0]
 8025bea:	4618      	mov	r0, r3
 8025bec:	f005 f9c3 	bl	802af76 <USB_ReadInterrupts>
 8025bf0:	4603      	mov	r3, r0
 8025bf2:	2b00      	cmp	r3, #0
 8025bf4:	f000 8393 	beq.w	802631e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8025bf8:	687b      	ldr	r3, [r7, #4]
 8025bfa:	681b      	ldr	r3, [r3, #0]
 8025bfc:	4618      	mov	r0, r3
 8025bfe:	f005 f9ba 	bl	802af76 <USB_ReadInterrupts>
 8025c02:	4603      	mov	r3, r0
 8025c04:	f003 0302 	and.w	r3, r3, #2
 8025c08:	2b02      	cmp	r3, #2
 8025c0a:	d107      	bne.n	8025c1c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8025c0c:	687b      	ldr	r3, [r7, #4]
 8025c0e:	681b      	ldr	r3, [r3, #0]
 8025c10:	695a      	ldr	r2, [r3, #20]
 8025c12:	687b      	ldr	r3, [r7, #4]
 8025c14:	681b      	ldr	r3, [r3, #0]
 8025c16:	f002 0202 	and.w	r2, r2, #2
 8025c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8025c1c:	687b      	ldr	r3, [r7, #4]
 8025c1e:	681b      	ldr	r3, [r3, #0]
 8025c20:	4618      	mov	r0, r3
 8025c22:	f005 f9a8 	bl	802af76 <USB_ReadInterrupts>
 8025c26:	4603      	mov	r3, r0
 8025c28:	f003 0310 	and.w	r3, r3, #16
 8025c2c:	2b10      	cmp	r3, #16
 8025c2e:	d161      	bne.n	8025cf4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8025c30:	687b      	ldr	r3, [r7, #4]
 8025c32:	681b      	ldr	r3, [r3, #0]
 8025c34:	699a      	ldr	r2, [r3, #24]
 8025c36:	687b      	ldr	r3, [r7, #4]
 8025c38:	681b      	ldr	r3, [r3, #0]
 8025c3a:	f022 0210 	bic.w	r2, r2, #16
 8025c3e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8025c40:	6a3b      	ldr	r3, [r7, #32]
 8025c42:	6a1b      	ldr	r3, [r3, #32]
 8025c44:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8025c46:	69bb      	ldr	r3, [r7, #24]
 8025c48:	f003 020f 	and.w	r2, r3, #15
 8025c4c:	4613      	mov	r3, r2
 8025c4e:	00db      	lsls	r3, r3, #3
 8025c50:	1a9b      	subs	r3, r3, r2
 8025c52:	009b      	lsls	r3, r3, #2
 8025c54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8025c58:	687a      	ldr	r2, [r7, #4]
 8025c5a:	4413      	add	r3, r2
 8025c5c:	3304      	adds	r3, #4
 8025c5e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8025c60:	69bb      	ldr	r3, [r7, #24]
 8025c62:	0c5b      	lsrs	r3, r3, #17
 8025c64:	f003 030f 	and.w	r3, r3, #15
 8025c68:	2b02      	cmp	r3, #2
 8025c6a:	d124      	bne.n	8025cb6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8025c6c:	69ba      	ldr	r2, [r7, #24]
 8025c6e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8025c72:	4013      	ands	r3, r2
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	d035      	beq.n	8025ce4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8025c78:	697b      	ldr	r3, [r7, #20]
 8025c7a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8025c7c:	69bb      	ldr	r3, [r7, #24]
 8025c7e:	091b      	lsrs	r3, r3, #4
 8025c80:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8025c82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8025c86:	b29b      	uxth	r3, r3
 8025c88:	461a      	mov	r2, r3
 8025c8a:	6a38      	ldr	r0, [r7, #32]
 8025c8c:	f005 f80e 	bl	802acac <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8025c90:	697b      	ldr	r3, [r7, #20]
 8025c92:	68da      	ldr	r2, [r3, #12]
 8025c94:	69bb      	ldr	r3, [r7, #24]
 8025c96:	091b      	lsrs	r3, r3, #4
 8025c98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8025c9c:	441a      	add	r2, r3
 8025c9e:	697b      	ldr	r3, [r7, #20]
 8025ca0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8025ca2:	697b      	ldr	r3, [r7, #20]
 8025ca4:	699a      	ldr	r2, [r3, #24]
 8025ca6:	69bb      	ldr	r3, [r7, #24]
 8025ca8:	091b      	lsrs	r3, r3, #4
 8025caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8025cae:	441a      	add	r2, r3
 8025cb0:	697b      	ldr	r3, [r7, #20]
 8025cb2:	619a      	str	r2, [r3, #24]
 8025cb4:	e016      	b.n	8025ce4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8025cb6:	69bb      	ldr	r3, [r7, #24]
 8025cb8:	0c5b      	lsrs	r3, r3, #17
 8025cba:	f003 030f 	and.w	r3, r3, #15
 8025cbe:	2b06      	cmp	r3, #6
 8025cc0:	d110      	bne.n	8025ce4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8025cc2:	687b      	ldr	r3, [r7, #4]
 8025cc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8025cc8:	2208      	movs	r2, #8
 8025cca:	4619      	mov	r1, r3
 8025ccc:	6a38      	ldr	r0, [r7, #32]
 8025cce:	f004 ffed 	bl	802acac <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8025cd2:	697b      	ldr	r3, [r7, #20]
 8025cd4:	699a      	ldr	r2, [r3, #24]
 8025cd6:	69bb      	ldr	r3, [r7, #24]
 8025cd8:	091b      	lsrs	r3, r3, #4
 8025cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8025cde:	441a      	add	r2, r3
 8025ce0:	697b      	ldr	r3, [r7, #20]
 8025ce2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8025ce4:	687b      	ldr	r3, [r7, #4]
 8025ce6:	681b      	ldr	r3, [r3, #0]
 8025ce8:	699a      	ldr	r2, [r3, #24]
 8025cea:	687b      	ldr	r3, [r7, #4]
 8025cec:	681b      	ldr	r3, [r3, #0]
 8025cee:	f042 0210 	orr.w	r2, r2, #16
 8025cf2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8025cf4:	687b      	ldr	r3, [r7, #4]
 8025cf6:	681b      	ldr	r3, [r3, #0]
 8025cf8:	4618      	mov	r0, r3
 8025cfa:	f005 f93c 	bl	802af76 <USB_ReadInterrupts>
 8025cfe:	4603      	mov	r3, r0
 8025d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8025d04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8025d08:	d16e      	bne.n	8025de8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8025d0a:	2300      	movs	r3, #0
 8025d0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8025d0e:	687b      	ldr	r3, [r7, #4]
 8025d10:	681b      	ldr	r3, [r3, #0]
 8025d12:	4618      	mov	r0, r3
 8025d14:	f005 f942 	bl	802af9c <USB_ReadDevAllOutEpInterrupt>
 8025d18:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8025d1a:	e062      	b.n	8025de2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8025d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d1e:	f003 0301 	and.w	r3, r3, #1
 8025d22:	2b00      	cmp	r3, #0
 8025d24:	d057      	beq.n	8025dd6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8025d26:	687b      	ldr	r3, [r7, #4]
 8025d28:	681b      	ldr	r3, [r3, #0]
 8025d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025d2c:	b2d2      	uxtb	r2, r2
 8025d2e:	4611      	mov	r1, r2
 8025d30:	4618      	mov	r0, r3
 8025d32:	f005 f967 	bl	802b004 <USB_ReadDevOutEPInterrupt>
 8025d36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8025d38:	693b      	ldr	r3, [r7, #16]
 8025d3a:	f003 0301 	and.w	r3, r3, #1
 8025d3e:	2b00      	cmp	r3, #0
 8025d40:	d00c      	beq.n	8025d5c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8025d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d44:	015a      	lsls	r2, r3, #5
 8025d46:	69fb      	ldr	r3, [r7, #28]
 8025d48:	4413      	add	r3, r2
 8025d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025d4e:	461a      	mov	r2, r3
 8025d50:	2301      	movs	r3, #1
 8025d52:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8025d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025d56:	6878      	ldr	r0, [r7, #4]
 8025d58:	f000 fdb0 	bl	80268bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8025d5c:	693b      	ldr	r3, [r7, #16]
 8025d5e:	f003 0308 	and.w	r3, r3, #8
 8025d62:	2b00      	cmp	r3, #0
 8025d64:	d00c      	beq.n	8025d80 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8025d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d68:	015a      	lsls	r2, r3, #5
 8025d6a:	69fb      	ldr	r3, [r7, #28]
 8025d6c:	4413      	add	r3, r2
 8025d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025d72:	461a      	mov	r2, r3
 8025d74:	2308      	movs	r3, #8
 8025d76:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8025d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025d7a:	6878      	ldr	r0, [r7, #4]
 8025d7c:	f000 feaa 	bl	8026ad4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8025d80:	693b      	ldr	r3, [r7, #16]
 8025d82:	f003 0310 	and.w	r3, r3, #16
 8025d86:	2b00      	cmp	r3, #0
 8025d88:	d008      	beq.n	8025d9c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8025d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d8c:	015a      	lsls	r2, r3, #5
 8025d8e:	69fb      	ldr	r3, [r7, #28]
 8025d90:	4413      	add	r3, r2
 8025d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025d96:	461a      	mov	r2, r3
 8025d98:	2310      	movs	r3, #16
 8025d9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8025d9c:	693b      	ldr	r3, [r7, #16]
 8025d9e:	f003 0320 	and.w	r3, r3, #32
 8025da2:	2b00      	cmp	r3, #0
 8025da4:	d008      	beq.n	8025db8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8025da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025da8:	015a      	lsls	r2, r3, #5
 8025daa:	69fb      	ldr	r3, [r7, #28]
 8025dac:	4413      	add	r3, r2
 8025dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025db2:	461a      	mov	r2, r3
 8025db4:	2320      	movs	r3, #32
 8025db6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8025db8:	693b      	ldr	r3, [r7, #16]
 8025dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8025dbe:	2b00      	cmp	r3, #0
 8025dc0:	d009      	beq.n	8025dd6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8025dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025dc4:	015a      	lsls	r2, r3, #5
 8025dc6:	69fb      	ldr	r3, [r7, #28]
 8025dc8:	4413      	add	r3, r2
 8025dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025dce:	461a      	mov	r2, r3
 8025dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8025dd4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8025dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025dd8:	3301      	adds	r3, #1
 8025dda:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8025ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025dde:	085b      	lsrs	r3, r3, #1
 8025de0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8025de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025de4:	2b00      	cmp	r3, #0
 8025de6:	d199      	bne.n	8025d1c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8025de8:	687b      	ldr	r3, [r7, #4]
 8025dea:	681b      	ldr	r3, [r3, #0]
 8025dec:	4618      	mov	r0, r3
 8025dee:	f005 f8c2 	bl	802af76 <USB_ReadInterrupts>
 8025df2:	4603      	mov	r3, r0
 8025df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025df8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8025dfc:	f040 80c0 	bne.w	8025f80 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8025e00:	687b      	ldr	r3, [r7, #4]
 8025e02:	681b      	ldr	r3, [r3, #0]
 8025e04:	4618      	mov	r0, r3
 8025e06:	f005 f8e3 	bl	802afd0 <USB_ReadDevAllInEpInterrupt>
 8025e0a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8025e0c:	2300      	movs	r3, #0
 8025e0e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8025e10:	e0b2      	b.n	8025f78 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8025e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e14:	f003 0301 	and.w	r3, r3, #1
 8025e18:	2b00      	cmp	r3, #0
 8025e1a:	f000 80a7 	beq.w	8025f6c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8025e1e:	687b      	ldr	r3, [r7, #4]
 8025e20:	681b      	ldr	r3, [r3, #0]
 8025e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025e24:	b2d2      	uxtb	r2, r2
 8025e26:	4611      	mov	r1, r2
 8025e28:	4618      	mov	r0, r3
 8025e2a:	f005 f909 	bl	802b040 <USB_ReadDevInEPInterrupt>
 8025e2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8025e30:	693b      	ldr	r3, [r7, #16]
 8025e32:	f003 0301 	and.w	r3, r3, #1
 8025e36:	2b00      	cmp	r3, #0
 8025e38:	d057      	beq.n	8025eea <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8025e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e3c:	f003 030f 	and.w	r3, r3, #15
 8025e40:	2201      	movs	r2, #1
 8025e42:	fa02 f303 	lsl.w	r3, r2, r3
 8025e46:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8025e48:	69fb      	ldr	r3, [r7, #28]
 8025e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8025e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8025e50:	68fb      	ldr	r3, [r7, #12]
 8025e52:	43db      	mvns	r3, r3
 8025e54:	69f9      	ldr	r1, [r7, #28]
 8025e56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8025e5a:	4013      	ands	r3, r2
 8025e5c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8025e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e60:	015a      	lsls	r2, r3, #5
 8025e62:	69fb      	ldr	r3, [r7, #28]
 8025e64:	4413      	add	r3, r2
 8025e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025e6a:	461a      	mov	r2, r3
 8025e6c:	2301      	movs	r3, #1
 8025e6e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8025e70:	687b      	ldr	r3, [r7, #4]
 8025e72:	691b      	ldr	r3, [r3, #16]
 8025e74:	2b01      	cmp	r3, #1
 8025e76:	d132      	bne.n	8025ede <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8025e78:	6879      	ldr	r1, [r7, #4]
 8025e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025e7c:	4613      	mov	r3, r2
 8025e7e:	00db      	lsls	r3, r3, #3
 8025e80:	1a9b      	subs	r3, r3, r2
 8025e82:	009b      	lsls	r3, r3, #2
 8025e84:	440b      	add	r3, r1
 8025e86:	3348      	adds	r3, #72	; 0x48
 8025e88:	6819      	ldr	r1, [r3, #0]
 8025e8a:	6878      	ldr	r0, [r7, #4]
 8025e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025e8e:	4613      	mov	r3, r2
 8025e90:	00db      	lsls	r3, r3, #3
 8025e92:	1a9b      	subs	r3, r3, r2
 8025e94:	009b      	lsls	r3, r3, #2
 8025e96:	4403      	add	r3, r0
 8025e98:	3344      	adds	r3, #68	; 0x44
 8025e9a:	681b      	ldr	r3, [r3, #0]
 8025e9c:	4419      	add	r1, r3
 8025e9e:	6878      	ldr	r0, [r7, #4]
 8025ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025ea2:	4613      	mov	r3, r2
 8025ea4:	00db      	lsls	r3, r3, #3
 8025ea6:	1a9b      	subs	r3, r3, r2
 8025ea8:	009b      	lsls	r3, r3, #2
 8025eaa:	4403      	add	r3, r0
 8025eac:	3348      	adds	r3, #72	; 0x48
 8025eae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8025eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025eb2:	2b00      	cmp	r3, #0
 8025eb4:	d113      	bne.n	8025ede <HAL_PCD_IRQHandler+0x31c>
 8025eb6:	6879      	ldr	r1, [r7, #4]
 8025eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025eba:	4613      	mov	r3, r2
 8025ebc:	00db      	lsls	r3, r3, #3
 8025ebe:	1a9b      	subs	r3, r3, r2
 8025ec0:	009b      	lsls	r3, r3, #2
 8025ec2:	440b      	add	r3, r1
 8025ec4:	3350      	adds	r3, #80	; 0x50
 8025ec6:	681b      	ldr	r3, [r3, #0]
 8025ec8:	2b00      	cmp	r3, #0
 8025eca:	d108      	bne.n	8025ede <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8025ecc:	687b      	ldr	r3, [r7, #4]
 8025ece:	6818      	ldr	r0, [r3, #0]
 8025ed0:	687b      	ldr	r3, [r7, #4]
 8025ed2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8025ed6:	461a      	mov	r2, r3
 8025ed8:	2101      	movs	r1, #1
 8025eda:	f005 f911 	bl	802b100 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8025ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ee0:	b2db      	uxtb	r3, r3
 8025ee2:	4619      	mov	r1, r3
 8025ee4:	6878      	ldr	r0, [r7, #4]
 8025ee6:	f010 fdea 	bl	8036abe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8025eea:	693b      	ldr	r3, [r7, #16]
 8025eec:	f003 0308 	and.w	r3, r3, #8
 8025ef0:	2b00      	cmp	r3, #0
 8025ef2:	d008      	beq.n	8025f06 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8025ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ef6:	015a      	lsls	r2, r3, #5
 8025ef8:	69fb      	ldr	r3, [r7, #28]
 8025efa:	4413      	add	r3, r2
 8025efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025f00:	461a      	mov	r2, r3
 8025f02:	2308      	movs	r3, #8
 8025f04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8025f06:	693b      	ldr	r3, [r7, #16]
 8025f08:	f003 0310 	and.w	r3, r3, #16
 8025f0c:	2b00      	cmp	r3, #0
 8025f0e:	d008      	beq.n	8025f22 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8025f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f12:	015a      	lsls	r2, r3, #5
 8025f14:	69fb      	ldr	r3, [r7, #28]
 8025f16:	4413      	add	r3, r2
 8025f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025f1c:	461a      	mov	r2, r3
 8025f1e:	2310      	movs	r3, #16
 8025f20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8025f22:	693b      	ldr	r3, [r7, #16]
 8025f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025f28:	2b00      	cmp	r3, #0
 8025f2a:	d008      	beq.n	8025f3e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8025f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f2e:	015a      	lsls	r2, r3, #5
 8025f30:	69fb      	ldr	r3, [r7, #28]
 8025f32:	4413      	add	r3, r2
 8025f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025f38:	461a      	mov	r2, r3
 8025f3a:	2340      	movs	r3, #64	; 0x40
 8025f3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8025f3e:	693b      	ldr	r3, [r7, #16]
 8025f40:	f003 0302 	and.w	r3, r3, #2
 8025f44:	2b00      	cmp	r3, #0
 8025f46:	d008      	beq.n	8025f5a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8025f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f4a:	015a      	lsls	r2, r3, #5
 8025f4c:	69fb      	ldr	r3, [r7, #28]
 8025f4e:	4413      	add	r3, r2
 8025f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025f54:	461a      	mov	r2, r3
 8025f56:	2302      	movs	r3, #2
 8025f58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8025f5a:	693b      	ldr	r3, [r7, #16]
 8025f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025f60:	2b00      	cmp	r3, #0
 8025f62:	d003      	beq.n	8025f6c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8025f64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025f66:	6878      	ldr	r0, [r7, #4]
 8025f68:	f000 fc1b 	bl	80267a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8025f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f6e:	3301      	adds	r3, #1
 8025f70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8025f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f74:	085b      	lsrs	r3, r3, #1
 8025f76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8025f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f7a:	2b00      	cmp	r3, #0
 8025f7c:	f47f af49 	bne.w	8025e12 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8025f80:	687b      	ldr	r3, [r7, #4]
 8025f82:	681b      	ldr	r3, [r3, #0]
 8025f84:	4618      	mov	r0, r3
 8025f86:	f004 fff6 	bl	802af76 <USB_ReadInterrupts>
 8025f8a:	4603      	mov	r3, r0
 8025f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8025f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025f94:	d122      	bne.n	8025fdc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8025f96:	69fb      	ldr	r3, [r7, #28]
 8025f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8025f9c:	685b      	ldr	r3, [r3, #4]
 8025f9e:	69fa      	ldr	r2, [r7, #28]
 8025fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8025fa4:	f023 0301 	bic.w	r3, r3, #1
 8025fa8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8025faa:	687b      	ldr	r3, [r7, #4]
 8025fac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8025fb0:	2b01      	cmp	r3, #1
 8025fb2:	d108      	bne.n	8025fc6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8025fb4:	687b      	ldr	r3, [r7, #4]
 8025fb6:	2200      	movs	r2, #0
 8025fb8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8025fbc:	2100      	movs	r1, #0
 8025fbe:	6878      	ldr	r0, [r7, #4]
 8025fc0:	f000 fe26 	bl	8026c10 <HAL_PCDEx_LPM_Callback>
 8025fc4:	e002      	b.n	8025fcc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8025fc6:	6878      	ldr	r0, [r7, #4]
 8025fc8:	f010 fdf0 	bl	8036bac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8025fcc:	687b      	ldr	r3, [r7, #4]
 8025fce:	681b      	ldr	r3, [r3, #0]
 8025fd0:	695a      	ldr	r2, [r3, #20]
 8025fd2:	687b      	ldr	r3, [r7, #4]
 8025fd4:	681b      	ldr	r3, [r3, #0]
 8025fd6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8025fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8025fdc:	687b      	ldr	r3, [r7, #4]
 8025fde:	681b      	ldr	r3, [r3, #0]
 8025fe0:	4618      	mov	r0, r3
 8025fe2:	f004 ffc8 	bl	802af76 <USB_ReadInterrupts>
 8025fe6:	4603      	mov	r3, r0
 8025fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8025fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8025ff0:	d112      	bne.n	8026018 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8025ff2:	69fb      	ldr	r3, [r7, #28]
 8025ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8025ff8:	689b      	ldr	r3, [r3, #8]
 8025ffa:	f003 0301 	and.w	r3, r3, #1
 8025ffe:	2b01      	cmp	r3, #1
 8026000:	d102      	bne.n	8026008 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8026002:	6878      	ldr	r0, [r7, #4]
 8026004:	f010 fdac 	bl	8036b60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8026008:	687b      	ldr	r3, [r7, #4]
 802600a:	681b      	ldr	r3, [r3, #0]
 802600c:	695a      	ldr	r2, [r3, #20]
 802600e:	687b      	ldr	r3, [r7, #4]
 8026010:	681b      	ldr	r3, [r3, #0]
 8026012:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8026016:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8026018:	687b      	ldr	r3, [r7, #4]
 802601a:	681b      	ldr	r3, [r3, #0]
 802601c:	4618      	mov	r0, r3
 802601e:	f004 ffaa 	bl	802af76 <USB_ReadInterrupts>
 8026022:	4603      	mov	r3, r0
 8026024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802602c:	f040 80c7 	bne.w	80261be <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8026030:	69fb      	ldr	r3, [r7, #28]
 8026032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026036:	685b      	ldr	r3, [r3, #4]
 8026038:	69fa      	ldr	r2, [r7, #28]
 802603a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802603e:	f023 0301 	bic.w	r3, r3, #1
 8026042:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8026044:	687b      	ldr	r3, [r7, #4]
 8026046:	681b      	ldr	r3, [r3, #0]
 8026048:	2110      	movs	r1, #16
 802604a:	4618      	mov	r0, r3
 802604c:	f004 f878 	bl	802a140 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026050:	2300      	movs	r3, #0
 8026052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026054:	e056      	b.n	8026104 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8026056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026058:	015a      	lsls	r2, r3, #5
 802605a:	69fb      	ldr	r3, [r7, #28]
 802605c:	4413      	add	r3, r2
 802605e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026062:	461a      	mov	r2, r3
 8026064:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8026068:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802606c:	015a      	lsls	r2, r3, #5
 802606e:	69fb      	ldr	r3, [r7, #28]
 8026070:	4413      	add	r3, r2
 8026072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026076:	681b      	ldr	r3, [r3, #0]
 8026078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802607a:	0151      	lsls	r1, r2, #5
 802607c:	69fa      	ldr	r2, [r7, #28]
 802607e:	440a      	add	r2, r1
 8026080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8026084:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8026088:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 802608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802608c:	015a      	lsls	r2, r3, #5
 802608e:	69fb      	ldr	r3, [r7, #28]
 8026090:	4413      	add	r3, r2
 8026092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026096:	681b      	ldr	r3, [r3, #0]
 8026098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802609a:	0151      	lsls	r1, r2, #5
 802609c:	69fa      	ldr	r2, [r7, #28]
 802609e:	440a      	add	r2, r1
 80260a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80260a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80260a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80260aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260ac:	015a      	lsls	r2, r3, #5
 80260ae:	69fb      	ldr	r3, [r7, #28]
 80260b0:	4413      	add	r3, r2
 80260b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80260b6:	461a      	mov	r2, r3
 80260b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80260bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80260be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260c0:	015a      	lsls	r2, r3, #5
 80260c2:	69fb      	ldr	r3, [r7, #28]
 80260c4:	4413      	add	r3, r2
 80260c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80260ca:	681b      	ldr	r3, [r3, #0]
 80260cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80260ce:	0151      	lsls	r1, r2, #5
 80260d0:	69fa      	ldr	r2, [r7, #28]
 80260d2:	440a      	add	r2, r1
 80260d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80260d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80260dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80260de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260e0:	015a      	lsls	r2, r3, #5
 80260e2:	69fb      	ldr	r3, [r7, #28]
 80260e4:	4413      	add	r3, r2
 80260e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80260ea:	681b      	ldr	r3, [r3, #0]
 80260ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80260ee:	0151      	lsls	r1, r2, #5
 80260f0:	69fa      	ldr	r2, [r7, #28]
 80260f2:	440a      	add	r2, r1
 80260f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80260f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80260fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80260fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026100:	3301      	adds	r3, #1
 8026102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026104:	687b      	ldr	r3, [r7, #4]
 8026106:	685b      	ldr	r3, [r3, #4]
 8026108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802610a:	429a      	cmp	r2, r3
 802610c:	d3a3      	bcc.n	8026056 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 802610e:	69fb      	ldr	r3, [r7, #28]
 8026110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026114:	69db      	ldr	r3, [r3, #28]
 8026116:	69fa      	ldr	r2, [r7, #28]
 8026118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802611c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8026120:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8026122:	687b      	ldr	r3, [r7, #4]
 8026124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026126:	2b00      	cmp	r3, #0
 8026128:	d016      	beq.n	8026158 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 802612a:	69fb      	ldr	r3, [r7, #28]
 802612c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8026134:	69fa      	ldr	r2, [r7, #28]
 8026136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802613a:	f043 030b 	orr.w	r3, r3, #11
 802613e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8026142:	69fb      	ldr	r3, [r7, #28]
 8026144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802614a:	69fa      	ldr	r2, [r7, #28]
 802614c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026150:	f043 030b 	orr.w	r3, r3, #11
 8026154:	6453      	str	r3, [r2, #68]	; 0x44
 8026156:	e015      	b.n	8026184 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8026158:	69fb      	ldr	r3, [r7, #28]
 802615a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802615e:	695b      	ldr	r3, [r3, #20]
 8026160:	69fa      	ldr	r2, [r7, #28]
 8026162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802616a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 802616e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8026170:	69fb      	ldr	r3, [r7, #28]
 8026172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026176:	691b      	ldr	r3, [r3, #16]
 8026178:	69fa      	ldr	r2, [r7, #28]
 802617a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802617e:	f043 030b 	orr.w	r3, r3, #11
 8026182:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8026184:	69fb      	ldr	r3, [r7, #28]
 8026186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802618a:	681b      	ldr	r3, [r3, #0]
 802618c:	69fa      	ldr	r2, [r7, #28]
 802618e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026192:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8026196:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8026198:	687b      	ldr	r3, [r7, #4]
 802619a:	6818      	ldr	r0, [r3, #0]
 802619c:	687b      	ldr	r3, [r7, #4]
 802619e:	691b      	ldr	r3, [r3, #16]
 80261a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80261a2:	687b      	ldr	r3, [r7, #4]
 80261a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80261a8:	461a      	mov	r2, r3
 80261aa:	f004 ffa9 	bl	802b100 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80261ae:	687b      	ldr	r3, [r7, #4]
 80261b0:	681b      	ldr	r3, [r3, #0]
 80261b2:	695a      	ldr	r2, [r3, #20]
 80261b4:	687b      	ldr	r3, [r7, #4]
 80261b6:	681b      	ldr	r3, [r3, #0]
 80261b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80261bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80261be:	687b      	ldr	r3, [r7, #4]
 80261c0:	681b      	ldr	r3, [r3, #0]
 80261c2:	4618      	mov	r0, r3
 80261c4:	f004 fed7 	bl	802af76 <USB_ReadInterrupts>
 80261c8:	4603      	mov	r3, r0
 80261ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80261ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80261d2:	d124      	bne.n	802621e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80261d4:	687b      	ldr	r3, [r7, #4]
 80261d6:	681b      	ldr	r3, [r3, #0]
 80261d8:	4618      	mov	r0, r3
 80261da:	f004 ff6d 	bl	802b0b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80261de:	687b      	ldr	r3, [r7, #4]
 80261e0:	681b      	ldr	r3, [r3, #0]
 80261e2:	4618      	mov	r0, r3
 80261e4:	f004 f80d 	bl	802a202 <USB_GetDevSpeed>
 80261e8:	4603      	mov	r3, r0
 80261ea:	461a      	mov	r2, r3
 80261ec:	687b      	ldr	r3, [r7, #4]
 80261ee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80261f0:	687b      	ldr	r3, [r7, #4]
 80261f2:	681c      	ldr	r4, [r3, #0]
 80261f4:	f001 f932 	bl	802745c <HAL_RCC_GetHCLKFreq>
 80261f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80261fa:	687b      	ldr	r3, [r7, #4]
 80261fc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80261fe:	b2db      	uxtb	r3, r3
 8026200:	461a      	mov	r2, r3
 8026202:	4620      	mov	r0, r4
 8026204:	f003 fd4a 	bl	8029c9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8026208:	6878      	ldr	r0, [r7, #4]
 802620a:	f010 fc80 	bl	8036b0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 802620e:	687b      	ldr	r3, [r7, #4]
 8026210:	681b      	ldr	r3, [r3, #0]
 8026212:	695a      	ldr	r2, [r3, #20]
 8026214:	687b      	ldr	r3, [r7, #4]
 8026216:	681b      	ldr	r3, [r3, #0]
 8026218:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 802621c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 802621e:	687b      	ldr	r3, [r7, #4]
 8026220:	681b      	ldr	r3, [r3, #0]
 8026222:	4618      	mov	r0, r3
 8026224:	f004 fea7 	bl	802af76 <USB_ReadInterrupts>
 8026228:	4603      	mov	r3, r0
 802622a:	f003 0308 	and.w	r3, r3, #8
 802622e:	2b08      	cmp	r3, #8
 8026230:	d10a      	bne.n	8026248 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8026232:	6878      	ldr	r0, [r7, #4]
 8026234:	f010 fc5d 	bl	8036af2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8026238:	687b      	ldr	r3, [r7, #4]
 802623a:	681b      	ldr	r3, [r3, #0]
 802623c:	695a      	ldr	r2, [r3, #20]
 802623e:	687b      	ldr	r3, [r7, #4]
 8026240:	681b      	ldr	r3, [r3, #0]
 8026242:	f002 0208 	and.w	r2, r2, #8
 8026246:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8026248:	687b      	ldr	r3, [r7, #4]
 802624a:	681b      	ldr	r3, [r3, #0]
 802624c:	4618      	mov	r0, r3
 802624e:	f004 fe92 	bl	802af76 <USB_ReadInterrupts>
 8026252:	4603      	mov	r3, r0
 8026254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8026258:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802625c:	d10f      	bne.n	802627e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 802625e:	2300      	movs	r3, #0
 8026260:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8026262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026264:	b2db      	uxtb	r3, r3
 8026266:	4619      	mov	r1, r3
 8026268:	6878      	ldr	r0, [r7, #4]
 802626a:	f010 fcbf 	bl	8036bec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 802626e:	687b      	ldr	r3, [r7, #4]
 8026270:	681b      	ldr	r3, [r3, #0]
 8026272:	695a      	ldr	r2, [r3, #20]
 8026274:	687b      	ldr	r3, [r7, #4]
 8026276:	681b      	ldr	r3, [r3, #0]
 8026278:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 802627c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 802627e:	687b      	ldr	r3, [r7, #4]
 8026280:	681b      	ldr	r3, [r3, #0]
 8026282:	4618      	mov	r0, r3
 8026284:	f004 fe77 	bl	802af76 <USB_ReadInterrupts>
 8026288:	4603      	mov	r3, r0
 802628a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802628e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8026292:	d10f      	bne.n	80262b4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8026294:	2300      	movs	r3, #0
 8026296:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8026298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802629a:	b2db      	uxtb	r3, r3
 802629c:	4619      	mov	r1, r3
 802629e:	6878      	ldr	r0, [r7, #4]
 80262a0:	f010 fc92 	bl	8036bc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80262a4:	687b      	ldr	r3, [r7, #4]
 80262a6:	681b      	ldr	r3, [r3, #0]
 80262a8:	695a      	ldr	r2, [r3, #20]
 80262aa:	687b      	ldr	r3, [r7, #4]
 80262ac:	681b      	ldr	r3, [r3, #0]
 80262ae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80262b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80262b4:	687b      	ldr	r3, [r7, #4]
 80262b6:	681b      	ldr	r3, [r3, #0]
 80262b8:	4618      	mov	r0, r3
 80262ba:	f004 fe5c 	bl	802af76 <USB_ReadInterrupts>
 80262be:	4603      	mov	r3, r0
 80262c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80262c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80262c8:	d10a      	bne.n	80262e0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80262ca:	6878      	ldr	r0, [r7, #4]
 80262cc:	f010 fca0 	bl	8036c10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80262d0:	687b      	ldr	r3, [r7, #4]
 80262d2:	681b      	ldr	r3, [r3, #0]
 80262d4:	695a      	ldr	r2, [r3, #20]
 80262d6:	687b      	ldr	r3, [r7, #4]
 80262d8:	681b      	ldr	r3, [r3, #0]
 80262da:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80262de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80262e0:	687b      	ldr	r3, [r7, #4]
 80262e2:	681b      	ldr	r3, [r3, #0]
 80262e4:	4618      	mov	r0, r3
 80262e6:	f004 fe46 	bl	802af76 <USB_ReadInterrupts>
 80262ea:	4603      	mov	r3, r0
 80262ec:	f003 0304 	and.w	r3, r3, #4
 80262f0:	2b04      	cmp	r3, #4
 80262f2:	d115      	bne.n	8026320 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80262f4:	687b      	ldr	r3, [r7, #4]
 80262f6:	681b      	ldr	r3, [r3, #0]
 80262f8:	685b      	ldr	r3, [r3, #4]
 80262fa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80262fc:	69bb      	ldr	r3, [r7, #24]
 80262fe:	f003 0304 	and.w	r3, r3, #4
 8026302:	2b00      	cmp	r3, #0
 8026304:	d002      	beq.n	802630c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8026306:	6878      	ldr	r0, [r7, #4]
 8026308:	f010 fc90 	bl	8036c2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 802630c:	687b      	ldr	r3, [r7, #4]
 802630e:	681b      	ldr	r3, [r3, #0]
 8026310:	6859      	ldr	r1, [r3, #4]
 8026312:	687b      	ldr	r3, [r7, #4]
 8026314:	681b      	ldr	r3, [r3, #0]
 8026316:	69ba      	ldr	r2, [r7, #24]
 8026318:	430a      	orrs	r2, r1
 802631a:	605a      	str	r2, [r3, #4]
 802631c:	e000      	b.n	8026320 <HAL_PCD_IRQHandler+0x75e>
      return;
 802631e:	bf00      	nop
    }
  }
}
 8026320:	3734      	adds	r7, #52	; 0x34
 8026322:	46bd      	mov	sp, r7
 8026324:	bd90      	pop	{r4, r7, pc}

08026326 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8026326:	b580      	push	{r7, lr}
 8026328:	b082      	sub	sp, #8
 802632a:	af00      	add	r7, sp, #0
 802632c:	6078      	str	r0, [r7, #4]
 802632e:	460b      	mov	r3, r1
 8026330:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8026332:	687b      	ldr	r3, [r7, #4]
 8026334:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8026338:	2b01      	cmp	r3, #1
 802633a:	d101      	bne.n	8026340 <HAL_PCD_SetAddress+0x1a>
 802633c:	2302      	movs	r3, #2
 802633e:	e013      	b.n	8026368 <HAL_PCD_SetAddress+0x42>
 8026340:	687b      	ldr	r3, [r7, #4]
 8026342:	2201      	movs	r2, #1
 8026344:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8026348:	687b      	ldr	r3, [r7, #4]
 802634a:	78fa      	ldrb	r2, [r7, #3]
 802634c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8026350:	687b      	ldr	r3, [r7, #4]
 8026352:	681b      	ldr	r3, [r3, #0]
 8026354:	78fa      	ldrb	r2, [r7, #3]
 8026356:	4611      	mov	r1, r2
 8026358:	4618      	mov	r0, r3
 802635a:	f004 fda4 	bl	802aea6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 802635e:	687b      	ldr	r3, [r7, #4]
 8026360:	2200      	movs	r2, #0
 8026362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8026366:	2300      	movs	r3, #0
}
 8026368:	4618      	mov	r0, r3
 802636a:	3708      	adds	r7, #8
 802636c:	46bd      	mov	sp, r7
 802636e:	bd80      	pop	{r7, pc}

08026370 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8026370:	b580      	push	{r7, lr}
 8026372:	b084      	sub	sp, #16
 8026374:	af00      	add	r7, sp, #0
 8026376:	6078      	str	r0, [r7, #4]
 8026378:	4608      	mov	r0, r1
 802637a:	4611      	mov	r1, r2
 802637c:	461a      	mov	r2, r3
 802637e:	4603      	mov	r3, r0
 8026380:	70fb      	strb	r3, [r7, #3]
 8026382:	460b      	mov	r3, r1
 8026384:	803b      	strh	r3, [r7, #0]
 8026386:	4613      	mov	r3, r2
 8026388:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 802638a:	2300      	movs	r3, #0
 802638c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 802638e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8026392:	2b00      	cmp	r3, #0
 8026394:	da0f      	bge.n	80263b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8026396:	78fb      	ldrb	r3, [r7, #3]
 8026398:	f003 020f 	and.w	r2, r3, #15
 802639c:	4613      	mov	r3, r2
 802639e:	00db      	lsls	r3, r3, #3
 80263a0:	1a9b      	subs	r3, r3, r2
 80263a2:	009b      	lsls	r3, r3, #2
 80263a4:	3338      	adds	r3, #56	; 0x38
 80263a6:	687a      	ldr	r2, [r7, #4]
 80263a8:	4413      	add	r3, r2
 80263aa:	3304      	adds	r3, #4
 80263ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80263ae:	68fb      	ldr	r3, [r7, #12]
 80263b0:	2201      	movs	r2, #1
 80263b2:	705a      	strb	r2, [r3, #1]
 80263b4:	e00f      	b.n	80263d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80263b6:	78fb      	ldrb	r3, [r7, #3]
 80263b8:	f003 020f 	and.w	r2, r3, #15
 80263bc:	4613      	mov	r3, r2
 80263be:	00db      	lsls	r3, r3, #3
 80263c0:	1a9b      	subs	r3, r3, r2
 80263c2:	009b      	lsls	r3, r3, #2
 80263c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80263c8:	687a      	ldr	r2, [r7, #4]
 80263ca:	4413      	add	r3, r2
 80263cc:	3304      	adds	r3, #4
 80263ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80263d0:	68fb      	ldr	r3, [r7, #12]
 80263d2:	2200      	movs	r2, #0
 80263d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80263d6:	78fb      	ldrb	r3, [r7, #3]
 80263d8:	f003 030f 	and.w	r3, r3, #15
 80263dc:	b2da      	uxtb	r2, r3
 80263de:	68fb      	ldr	r3, [r7, #12]
 80263e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80263e2:	883a      	ldrh	r2, [r7, #0]
 80263e4:	68fb      	ldr	r3, [r7, #12]
 80263e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80263e8:	68fb      	ldr	r3, [r7, #12]
 80263ea:	78ba      	ldrb	r2, [r7, #2]
 80263ec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80263ee:	68fb      	ldr	r3, [r7, #12]
 80263f0:	785b      	ldrb	r3, [r3, #1]
 80263f2:	2b00      	cmp	r3, #0
 80263f4:	d004      	beq.n	8026400 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80263f6:	68fb      	ldr	r3, [r7, #12]
 80263f8:	781b      	ldrb	r3, [r3, #0]
 80263fa:	b29a      	uxth	r2, r3
 80263fc:	68fb      	ldr	r3, [r7, #12]
 80263fe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8026400:	78bb      	ldrb	r3, [r7, #2]
 8026402:	2b02      	cmp	r3, #2
 8026404:	d102      	bne.n	802640c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8026406:	68fb      	ldr	r3, [r7, #12]
 8026408:	2200      	movs	r2, #0
 802640a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 802640c:	687b      	ldr	r3, [r7, #4]
 802640e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8026412:	2b01      	cmp	r3, #1
 8026414:	d101      	bne.n	802641a <HAL_PCD_EP_Open+0xaa>
 8026416:	2302      	movs	r3, #2
 8026418:	e00e      	b.n	8026438 <HAL_PCD_EP_Open+0xc8>
 802641a:	687b      	ldr	r3, [r7, #4]
 802641c:	2201      	movs	r2, #1
 802641e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8026422:	687b      	ldr	r3, [r7, #4]
 8026424:	681b      	ldr	r3, [r3, #0]
 8026426:	68f9      	ldr	r1, [r7, #12]
 8026428:	4618      	mov	r0, r3
 802642a:	f003 ff0f 	bl	802a24c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 802642e:	687b      	ldr	r3, [r7, #4]
 8026430:	2200      	movs	r2, #0
 8026432:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8026436:	7afb      	ldrb	r3, [r7, #11]
}
 8026438:	4618      	mov	r0, r3
 802643a:	3710      	adds	r7, #16
 802643c:	46bd      	mov	sp, r7
 802643e:	bd80      	pop	{r7, pc}

08026440 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8026440:	b580      	push	{r7, lr}
 8026442:	b084      	sub	sp, #16
 8026444:	af00      	add	r7, sp, #0
 8026446:	6078      	str	r0, [r7, #4]
 8026448:	460b      	mov	r3, r1
 802644a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 802644c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8026450:	2b00      	cmp	r3, #0
 8026452:	da0f      	bge.n	8026474 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8026454:	78fb      	ldrb	r3, [r7, #3]
 8026456:	f003 020f 	and.w	r2, r3, #15
 802645a:	4613      	mov	r3, r2
 802645c:	00db      	lsls	r3, r3, #3
 802645e:	1a9b      	subs	r3, r3, r2
 8026460:	009b      	lsls	r3, r3, #2
 8026462:	3338      	adds	r3, #56	; 0x38
 8026464:	687a      	ldr	r2, [r7, #4]
 8026466:	4413      	add	r3, r2
 8026468:	3304      	adds	r3, #4
 802646a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802646c:	68fb      	ldr	r3, [r7, #12]
 802646e:	2201      	movs	r2, #1
 8026470:	705a      	strb	r2, [r3, #1]
 8026472:	e00f      	b.n	8026494 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8026474:	78fb      	ldrb	r3, [r7, #3]
 8026476:	f003 020f 	and.w	r2, r3, #15
 802647a:	4613      	mov	r3, r2
 802647c:	00db      	lsls	r3, r3, #3
 802647e:	1a9b      	subs	r3, r3, r2
 8026480:	009b      	lsls	r3, r3, #2
 8026482:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8026486:	687a      	ldr	r2, [r7, #4]
 8026488:	4413      	add	r3, r2
 802648a:	3304      	adds	r3, #4
 802648c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 802648e:	68fb      	ldr	r3, [r7, #12]
 8026490:	2200      	movs	r2, #0
 8026492:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8026494:	78fb      	ldrb	r3, [r7, #3]
 8026496:	f003 030f 	and.w	r3, r3, #15
 802649a:	b2da      	uxtb	r2, r3
 802649c:	68fb      	ldr	r3, [r7, #12]
 802649e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80264a0:	687b      	ldr	r3, [r7, #4]
 80264a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80264a6:	2b01      	cmp	r3, #1
 80264a8:	d101      	bne.n	80264ae <HAL_PCD_EP_Close+0x6e>
 80264aa:	2302      	movs	r3, #2
 80264ac:	e00e      	b.n	80264cc <HAL_PCD_EP_Close+0x8c>
 80264ae:	687b      	ldr	r3, [r7, #4]
 80264b0:	2201      	movs	r2, #1
 80264b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80264b6:	687b      	ldr	r3, [r7, #4]
 80264b8:	681b      	ldr	r3, [r3, #0]
 80264ba:	68f9      	ldr	r1, [r7, #12]
 80264bc:	4618      	mov	r0, r3
 80264be:	f003 ff4d 	bl	802a35c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80264c2:	687b      	ldr	r3, [r7, #4]
 80264c4:	2200      	movs	r2, #0
 80264c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80264ca:	2300      	movs	r3, #0
}
 80264cc:	4618      	mov	r0, r3
 80264ce:	3710      	adds	r7, #16
 80264d0:	46bd      	mov	sp, r7
 80264d2:	bd80      	pop	{r7, pc}

080264d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80264d4:	b580      	push	{r7, lr}
 80264d6:	b086      	sub	sp, #24
 80264d8:	af00      	add	r7, sp, #0
 80264da:	60f8      	str	r0, [r7, #12]
 80264dc:	607a      	str	r2, [r7, #4]
 80264de:	603b      	str	r3, [r7, #0]
 80264e0:	460b      	mov	r3, r1
 80264e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80264e4:	7afb      	ldrb	r3, [r7, #11]
 80264e6:	f003 020f 	and.w	r2, r3, #15
 80264ea:	4613      	mov	r3, r2
 80264ec:	00db      	lsls	r3, r3, #3
 80264ee:	1a9b      	subs	r3, r3, r2
 80264f0:	009b      	lsls	r3, r3, #2
 80264f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80264f6:	68fa      	ldr	r2, [r7, #12]
 80264f8:	4413      	add	r3, r2
 80264fa:	3304      	adds	r3, #4
 80264fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80264fe:	697b      	ldr	r3, [r7, #20]
 8026500:	687a      	ldr	r2, [r7, #4]
 8026502:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8026504:	697b      	ldr	r3, [r7, #20]
 8026506:	683a      	ldr	r2, [r7, #0]
 8026508:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 802650a:	697b      	ldr	r3, [r7, #20]
 802650c:	2200      	movs	r2, #0
 802650e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8026510:	697b      	ldr	r3, [r7, #20]
 8026512:	2200      	movs	r2, #0
 8026514:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8026516:	7afb      	ldrb	r3, [r7, #11]
 8026518:	f003 030f 	and.w	r3, r3, #15
 802651c:	b2da      	uxtb	r2, r3
 802651e:	697b      	ldr	r3, [r7, #20]
 8026520:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8026522:	68fb      	ldr	r3, [r7, #12]
 8026524:	691b      	ldr	r3, [r3, #16]
 8026526:	2b01      	cmp	r3, #1
 8026528:	d102      	bne.n	8026530 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 802652a:	687a      	ldr	r2, [r7, #4]
 802652c:	697b      	ldr	r3, [r7, #20]
 802652e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8026530:	7afb      	ldrb	r3, [r7, #11]
 8026532:	f003 030f 	and.w	r3, r3, #15
 8026536:	2b00      	cmp	r3, #0
 8026538:	d109      	bne.n	802654e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 802653a:	68fb      	ldr	r3, [r7, #12]
 802653c:	6818      	ldr	r0, [r3, #0]
 802653e:	68fb      	ldr	r3, [r7, #12]
 8026540:	691b      	ldr	r3, [r3, #16]
 8026542:	b2db      	uxtb	r3, r3
 8026544:	461a      	mov	r2, r3
 8026546:	6979      	ldr	r1, [r7, #20]
 8026548:	f004 fa28 	bl	802a99c <USB_EP0StartXfer>
 802654c:	e008      	b.n	8026560 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 802654e:	68fb      	ldr	r3, [r7, #12]
 8026550:	6818      	ldr	r0, [r3, #0]
 8026552:	68fb      	ldr	r3, [r7, #12]
 8026554:	691b      	ldr	r3, [r3, #16]
 8026556:	b2db      	uxtb	r3, r3
 8026558:	461a      	mov	r2, r3
 802655a:	6979      	ldr	r1, [r7, #20]
 802655c:	f003 ffda 	bl	802a514 <USB_EPStartXfer>
  }

  return HAL_OK;
 8026560:	2300      	movs	r3, #0
}
 8026562:	4618      	mov	r0, r3
 8026564:	3718      	adds	r7, #24
 8026566:	46bd      	mov	sp, r7
 8026568:	bd80      	pop	{r7, pc}

0802656a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802656a:	b480      	push	{r7}
 802656c:	b083      	sub	sp, #12
 802656e:	af00      	add	r7, sp, #0
 8026570:	6078      	str	r0, [r7, #4]
 8026572:	460b      	mov	r3, r1
 8026574:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8026576:	78fb      	ldrb	r3, [r7, #3]
 8026578:	f003 020f 	and.w	r2, r3, #15
 802657c:	6879      	ldr	r1, [r7, #4]
 802657e:	4613      	mov	r3, r2
 8026580:	00db      	lsls	r3, r3, #3
 8026582:	1a9b      	subs	r3, r3, r2
 8026584:	009b      	lsls	r3, r3, #2
 8026586:	440b      	add	r3, r1
 8026588:	f503 7305 	add.w	r3, r3, #532	; 0x214
 802658c:	681b      	ldr	r3, [r3, #0]
}
 802658e:	4618      	mov	r0, r3
 8026590:	370c      	adds	r7, #12
 8026592:	46bd      	mov	sp, r7
 8026594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026598:	4770      	bx	lr

0802659a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 802659a:	b580      	push	{r7, lr}
 802659c:	b086      	sub	sp, #24
 802659e:	af00      	add	r7, sp, #0
 80265a0:	60f8      	str	r0, [r7, #12]
 80265a2:	607a      	str	r2, [r7, #4]
 80265a4:	603b      	str	r3, [r7, #0]
 80265a6:	460b      	mov	r3, r1
 80265a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80265aa:	7afb      	ldrb	r3, [r7, #11]
 80265ac:	f003 020f 	and.w	r2, r3, #15
 80265b0:	4613      	mov	r3, r2
 80265b2:	00db      	lsls	r3, r3, #3
 80265b4:	1a9b      	subs	r3, r3, r2
 80265b6:	009b      	lsls	r3, r3, #2
 80265b8:	3338      	adds	r3, #56	; 0x38
 80265ba:	68fa      	ldr	r2, [r7, #12]
 80265bc:	4413      	add	r3, r2
 80265be:	3304      	adds	r3, #4
 80265c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80265c2:	697b      	ldr	r3, [r7, #20]
 80265c4:	687a      	ldr	r2, [r7, #4]
 80265c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80265c8:	697b      	ldr	r3, [r7, #20]
 80265ca:	683a      	ldr	r2, [r7, #0]
 80265cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80265ce:	697b      	ldr	r3, [r7, #20]
 80265d0:	2200      	movs	r2, #0
 80265d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80265d4:	697b      	ldr	r3, [r7, #20]
 80265d6:	2201      	movs	r2, #1
 80265d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80265da:	7afb      	ldrb	r3, [r7, #11]
 80265dc:	f003 030f 	and.w	r3, r3, #15
 80265e0:	b2da      	uxtb	r2, r3
 80265e2:	697b      	ldr	r3, [r7, #20]
 80265e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80265e6:	68fb      	ldr	r3, [r7, #12]
 80265e8:	691b      	ldr	r3, [r3, #16]
 80265ea:	2b01      	cmp	r3, #1
 80265ec:	d102      	bne.n	80265f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80265ee:	687a      	ldr	r2, [r7, #4]
 80265f0:	697b      	ldr	r3, [r7, #20]
 80265f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80265f4:	7afb      	ldrb	r3, [r7, #11]
 80265f6:	f003 030f 	and.w	r3, r3, #15
 80265fa:	2b00      	cmp	r3, #0
 80265fc:	d109      	bne.n	8026612 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80265fe:	68fb      	ldr	r3, [r7, #12]
 8026600:	6818      	ldr	r0, [r3, #0]
 8026602:	68fb      	ldr	r3, [r7, #12]
 8026604:	691b      	ldr	r3, [r3, #16]
 8026606:	b2db      	uxtb	r3, r3
 8026608:	461a      	mov	r2, r3
 802660a:	6979      	ldr	r1, [r7, #20]
 802660c:	f004 f9c6 	bl	802a99c <USB_EP0StartXfer>
 8026610:	e008      	b.n	8026624 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8026612:	68fb      	ldr	r3, [r7, #12]
 8026614:	6818      	ldr	r0, [r3, #0]
 8026616:	68fb      	ldr	r3, [r7, #12]
 8026618:	691b      	ldr	r3, [r3, #16]
 802661a:	b2db      	uxtb	r3, r3
 802661c:	461a      	mov	r2, r3
 802661e:	6979      	ldr	r1, [r7, #20]
 8026620:	f003 ff78 	bl	802a514 <USB_EPStartXfer>
  }

  return HAL_OK;
 8026624:	2300      	movs	r3, #0
}
 8026626:	4618      	mov	r0, r3
 8026628:	3718      	adds	r7, #24
 802662a:	46bd      	mov	sp, r7
 802662c:	bd80      	pop	{r7, pc}

0802662e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802662e:	b580      	push	{r7, lr}
 8026630:	b084      	sub	sp, #16
 8026632:	af00      	add	r7, sp, #0
 8026634:	6078      	str	r0, [r7, #4]
 8026636:	460b      	mov	r3, r1
 8026638:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 802663a:	78fb      	ldrb	r3, [r7, #3]
 802663c:	f003 020f 	and.w	r2, r3, #15
 8026640:	687b      	ldr	r3, [r7, #4]
 8026642:	685b      	ldr	r3, [r3, #4]
 8026644:	429a      	cmp	r2, r3
 8026646:	d901      	bls.n	802664c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8026648:	2301      	movs	r3, #1
 802664a:	e050      	b.n	80266ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 802664c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8026650:	2b00      	cmp	r3, #0
 8026652:	da0f      	bge.n	8026674 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8026654:	78fb      	ldrb	r3, [r7, #3]
 8026656:	f003 020f 	and.w	r2, r3, #15
 802665a:	4613      	mov	r3, r2
 802665c:	00db      	lsls	r3, r3, #3
 802665e:	1a9b      	subs	r3, r3, r2
 8026660:	009b      	lsls	r3, r3, #2
 8026662:	3338      	adds	r3, #56	; 0x38
 8026664:	687a      	ldr	r2, [r7, #4]
 8026666:	4413      	add	r3, r2
 8026668:	3304      	adds	r3, #4
 802666a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802666c:	68fb      	ldr	r3, [r7, #12]
 802666e:	2201      	movs	r2, #1
 8026670:	705a      	strb	r2, [r3, #1]
 8026672:	e00d      	b.n	8026690 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8026674:	78fa      	ldrb	r2, [r7, #3]
 8026676:	4613      	mov	r3, r2
 8026678:	00db      	lsls	r3, r3, #3
 802667a:	1a9b      	subs	r3, r3, r2
 802667c:	009b      	lsls	r3, r3, #2
 802667e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8026682:	687a      	ldr	r2, [r7, #4]
 8026684:	4413      	add	r3, r2
 8026686:	3304      	adds	r3, #4
 8026688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 802668a:	68fb      	ldr	r3, [r7, #12]
 802668c:	2200      	movs	r2, #0
 802668e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8026690:	68fb      	ldr	r3, [r7, #12]
 8026692:	2201      	movs	r2, #1
 8026694:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8026696:	78fb      	ldrb	r3, [r7, #3]
 8026698:	f003 030f 	and.w	r3, r3, #15
 802669c:	b2da      	uxtb	r2, r3
 802669e:	68fb      	ldr	r3, [r7, #12]
 80266a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80266a2:	687b      	ldr	r3, [r7, #4]
 80266a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80266a8:	2b01      	cmp	r3, #1
 80266aa:	d101      	bne.n	80266b0 <HAL_PCD_EP_SetStall+0x82>
 80266ac:	2302      	movs	r3, #2
 80266ae:	e01e      	b.n	80266ee <HAL_PCD_EP_SetStall+0xc0>
 80266b0:	687b      	ldr	r3, [r7, #4]
 80266b2:	2201      	movs	r2, #1
 80266b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80266b8:	687b      	ldr	r3, [r7, #4]
 80266ba:	681b      	ldr	r3, [r3, #0]
 80266bc:	68f9      	ldr	r1, [r7, #12]
 80266be:	4618      	mov	r0, r3
 80266c0:	f004 fb1d 	bl	802acfe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80266c4:	78fb      	ldrb	r3, [r7, #3]
 80266c6:	f003 030f 	and.w	r3, r3, #15
 80266ca:	2b00      	cmp	r3, #0
 80266cc:	d10a      	bne.n	80266e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80266ce:	687b      	ldr	r3, [r7, #4]
 80266d0:	6818      	ldr	r0, [r3, #0]
 80266d2:	687b      	ldr	r3, [r7, #4]
 80266d4:	691b      	ldr	r3, [r3, #16]
 80266d6:	b2d9      	uxtb	r1, r3
 80266d8:	687b      	ldr	r3, [r7, #4]
 80266da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80266de:	461a      	mov	r2, r3
 80266e0:	f004 fd0e 	bl	802b100 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80266e4:	687b      	ldr	r3, [r7, #4]
 80266e6:	2200      	movs	r2, #0
 80266e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80266ec:	2300      	movs	r3, #0
}
 80266ee:	4618      	mov	r0, r3
 80266f0:	3710      	adds	r7, #16
 80266f2:	46bd      	mov	sp, r7
 80266f4:	bd80      	pop	{r7, pc}

080266f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80266f6:	b580      	push	{r7, lr}
 80266f8:	b084      	sub	sp, #16
 80266fa:	af00      	add	r7, sp, #0
 80266fc:	6078      	str	r0, [r7, #4]
 80266fe:	460b      	mov	r3, r1
 8026700:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8026702:	78fb      	ldrb	r3, [r7, #3]
 8026704:	f003 020f 	and.w	r2, r3, #15
 8026708:	687b      	ldr	r3, [r7, #4]
 802670a:	685b      	ldr	r3, [r3, #4]
 802670c:	429a      	cmp	r2, r3
 802670e:	d901      	bls.n	8026714 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8026710:	2301      	movs	r3, #1
 8026712:	e042      	b.n	802679a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8026714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8026718:	2b00      	cmp	r3, #0
 802671a:	da0f      	bge.n	802673c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802671c:	78fb      	ldrb	r3, [r7, #3]
 802671e:	f003 020f 	and.w	r2, r3, #15
 8026722:	4613      	mov	r3, r2
 8026724:	00db      	lsls	r3, r3, #3
 8026726:	1a9b      	subs	r3, r3, r2
 8026728:	009b      	lsls	r3, r3, #2
 802672a:	3338      	adds	r3, #56	; 0x38
 802672c:	687a      	ldr	r2, [r7, #4]
 802672e:	4413      	add	r3, r2
 8026730:	3304      	adds	r3, #4
 8026732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8026734:	68fb      	ldr	r3, [r7, #12]
 8026736:	2201      	movs	r2, #1
 8026738:	705a      	strb	r2, [r3, #1]
 802673a:	e00f      	b.n	802675c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 802673c:	78fb      	ldrb	r3, [r7, #3]
 802673e:	f003 020f 	and.w	r2, r3, #15
 8026742:	4613      	mov	r3, r2
 8026744:	00db      	lsls	r3, r3, #3
 8026746:	1a9b      	subs	r3, r3, r2
 8026748:	009b      	lsls	r3, r3, #2
 802674a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 802674e:	687a      	ldr	r2, [r7, #4]
 8026750:	4413      	add	r3, r2
 8026752:	3304      	adds	r3, #4
 8026754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8026756:	68fb      	ldr	r3, [r7, #12]
 8026758:	2200      	movs	r2, #0
 802675a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 802675c:	68fb      	ldr	r3, [r7, #12]
 802675e:	2200      	movs	r2, #0
 8026760:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8026762:	78fb      	ldrb	r3, [r7, #3]
 8026764:	f003 030f 	and.w	r3, r3, #15
 8026768:	b2da      	uxtb	r2, r3
 802676a:	68fb      	ldr	r3, [r7, #12]
 802676c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 802676e:	687b      	ldr	r3, [r7, #4]
 8026770:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8026774:	2b01      	cmp	r3, #1
 8026776:	d101      	bne.n	802677c <HAL_PCD_EP_ClrStall+0x86>
 8026778:	2302      	movs	r3, #2
 802677a:	e00e      	b.n	802679a <HAL_PCD_EP_ClrStall+0xa4>
 802677c:	687b      	ldr	r3, [r7, #4]
 802677e:	2201      	movs	r2, #1
 8026780:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8026784:	687b      	ldr	r3, [r7, #4]
 8026786:	681b      	ldr	r3, [r3, #0]
 8026788:	68f9      	ldr	r1, [r7, #12]
 802678a:	4618      	mov	r0, r3
 802678c:	f004 fb25 	bl	802adda <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8026790:	687b      	ldr	r3, [r7, #4]
 8026792:	2200      	movs	r2, #0
 8026794:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8026798:	2300      	movs	r3, #0
}
 802679a:	4618      	mov	r0, r3
 802679c:	3710      	adds	r7, #16
 802679e:	46bd      	mov	sp, r7
 80267a0:	bd80      	pop	{r7, pc}

080267a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80267a2:	b580      	push	{r7, lr}
 80267a4:	b08a      	sub	sp, #40	; 0x28
 80267a6:	af02      	add	r7, sp, #8
 80267a8:	6078      	str	r0, [r7, #4]
 80267aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80267ac:	687b      	ldr	r3, [r7, #4]
 80267ae:	681b      	ldr	r3, [r3, #0]
 80267b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80267b2:	697b      	ldr	r3, [r7, #20]
 80267b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80267b6:	683a      	ldr	r2, [r7, #0]
 80267b8:	4613      	mov	r3, r2
 80267ba:	00db      	lsls	r3, r3, #3
 80267bc:	1a9b      	subs	r3, r3, r2
 80267be:	009b      	lsls	r3, r3, #2
 80267c0:	3338      	adds	r3, #56	; 0x38
 80267c2:	687a      	ldr	r2, [r7, #4]
 80267c4:	4413      	add	r3, r2
 80267c6:	3304      	adds	r3, #4
 80267c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80267ca:	68fb      	ldr	r3, [r7, #12]
 80267cc:	699a      	ldr	r2, [r3, #24]
 80267ce:	68fb      	ldr	r3, [r7, #12]
 80267d0:	695b      	ldr	r3, [r3, #20]
 80267d2:	429a      	cmp	r2, r3
 80267d4:	d901      	bls.n	80267da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80267d6:	2301      	movs	r3, #1
 80267d8:	e06c      	b.n	80268b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80267da:	68fb      	ldr	r3, [r7, #12]
 80267dc:	695a      	ldr	r2, [r3, #20]
 80267de:	68fb      	ldr	r3, [r7, #12]
 80267e0:	699b      	ldr	r3, [r3, #24]
 80267e2:	1ad3      	subs	r3, r2, r3
 80267e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80267e6:	68fb      	ldr	r3, [r7, #12]
 80267e8:	689b      	ldr	r3, [r3, #8]
 80267ea:	69fa      	ldr	r2, [r7, #28]
 80267ec:	429a      	cmp	r2, r3
 80267ee:	d902      	bls.n	80267f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80267f0:	68fb      	ldr	r3, [r7, #12]
 80267f2:	689b      	ldr	r3, [r3, #8]
 80267f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80267f6:	69fb      	ldr	r3, [r7, #28]
 80267f8:	3303      	adds	r3, #3
 80267fa:	089b      	lsrs	r3, r3, #2
 80267fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80267fe:	e02b      	b.n	8026858 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8026800:	68fb      	ldr	r3, [r7, #12]
 8026802:	695a      	ldr	r2, [r3, #20]
 8026804:	68fb      	ldr	r3, [r7, #12]
 8026806:	699b      	ldr	r3, [r3, #24]
 8026808:	1ad3      	subs	r3, r2, r3
 802680a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 802680c:	68fb      	ldr	r3, [r7, #12]
 802680e:	689b      	ldr	r3, [r3, #8]
 8026810:	69fa      	ldr	r2, [r7, #28]
 8026812:	429a      	cmp	r2, r3
 8026814:	d902      	bls.n	802681c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8026816:	68fb      	ldr	r3, [r7, #12]
 8026818:	689b      	ldr	r3, [r3, #8]
 802681a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 802681c:	69fb      	ldr	r3, [r7, #28]
 802681e:	3303      	adds	r3, #3
 8026820:	089b      	lsrs	r3, r3, #2
 8026822:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8026824:	68fb      	ldr	r3, [r7, #12]
 8026826:	68d9      	ldr	r1, [r3, #12]
 8026828:	683b      	ldr	r3, [r7, #0]
 802682a:	b2da      	uxtb	r2, r3
 802682c:	69fb      	ldr	r3, [r7, #28]
 802682e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8026830:	687b      	ldr	r3, [r7, #4]
 8026832:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8026834:	b2db      	uxtb	r3, r3
 8026836:	9300      	str	r3, [sp, #0]
 8026838:	4603      	mov	r3, r0
 802683a:	6978      	ldr	r0, [r7, #20]
 802683c:	f004 fa01 	bl	802ac42 <USB_WritePacket>

    ep->xfer_buff  += len;
 8026840:	68fb      	ldr	r3, [r7, #12]
 8026842:	68da      	ldr	r2, [r3, #12]
 8026844:	69fb      	ldr	r3, [r7, #28]
 8026846:	441a      	add	r2, r3
 8026848:	68fb      	ldr	r3, [r7, #12]
 802684a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 802684c:	68fb      	ldr	r3, [r7, #12]
 802684e:	699a      	ldr	r2, [r3, #24]
 8026850:	69fb      	ldr	r3, [r7, #28]
 8026852:	441a      	add	r2, r3
 8026854:	68fb      	ldr	r3, [r7, #12]
 8026856:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8026858:	683b      	ldr	r3, [r7, #0]
 802685a:	015a      	lsls	r2, r3, #5
 802685c:	693b      	ldr	r3, [r7, #16]
 802685e:	4413      	add	r3, r2
 8026860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026864:	699b      	ldr	r3, [r3, #24]
 8026866:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8026868:	69ba      	ldr	r2, [r7, #24]
 802686a:	429a      	cmp	r2, r3
 802686c:	d809      	bhi.n	8026882 <PCD_WriteEmptyTxFifo+0xe0>
 802686e:	68fb      	ldr	r3, [r7, #12]
 8026870:	699a      	ldr	r2, [r3, #24]
 8026872:	68fb      	ldr	r3, [r7, #12]
 8026874:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8026876:	429a      	cmp	r2, r3
 8026878:	d203      	bcs.n	8026882 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 802687a:	68fb      	ldr	r3, [r7, #12]
 802687c:	695b      	ldr	r3, [r3, #20]
 802687e:	2b00      	cmp	r3, #0
 8026880:	d1be      	bne.n	8026800 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8026882:	68fb      	ldr	r3, [r7, #12]
 8026884:	695a      	ldr	r2, [r3, #20]
 8026886:	68fb      	ldr	r3, [r7, #12]
 8026888:	699b      	ldr	r3, [r3, #24]
 802688a:	429a      	cmp	r2, r3
 802688c:	d811      	bhi.n	80268b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 802688e:	683b      	ldr	r3, [r7, #0]
 8026890:	f003 030f 	and.w	r3, r3, #15
 8026894:	2201      	movs	r2, #1
 8026896:	fa02 f303 	lsl.w	r3, r2, r3
 802689a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 802689c:	693b      	ldr	r3, [r7, #16]
 802689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80268a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80268a4:	68bb      	ldr	r3, [r7, #8]
 80268a6:	43db      	mvns	r3, r3
 80268a8:	6939      	ldr	r1, [r7, #16]
 80268aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80268ae:	4013      	ands	r3, r2
 80268b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80268b2:	2300      	movs	r3, #0
}
 80268b4:	4618      	mov	r0, r3
 80268b6:	3720      	adds	r7, #32
 80268b8:	46bd      	mov	sp, r7
 80268ba:	bd80      	pop	{r7, pc}

080268bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80268bc:	b580      	push	{r7, lr}
 80268be:	b086      	sub	sp, #24
 80268c0:	af00      	add	r7, sp, #0
 80268c2:	6078      	str	r0, [r7, #4]
 80268c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80268c6:	687b      	ldr	r3, [r7, #4]
 80268c8:	681b      	ldr	r3, [r3, #0]
 80268ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80268cc:	697b      	ldr	r3, [r7, #20]
 80268ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80268d0:	697b      	ldr	r3, [r7, #20]
 80268d2:	333c      	adds	r3, #60	; 0x3c
 80268d4:	3304      	adds	r3, #4
 80268d6:	681b      	ldr	r3, [r3, #0]
 80268d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80268da:	683b      	ldr	r3, [r7, #0]
 80268dc:	015a      	lsls	r2, r3, #5
 80268de:	693b      	ldr	r3, [r7, #16]
 80268e0:	4413      	add	r3, r2
 80268e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80268e6:	689b      	ldr	r3, [r3, #8]
 80268e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80268ea:	687b      	ldr	r3, [r7, #4]
 80268ec:	691b      	ldr	r3, [r3, #16]
 80268ee:	2b01      	cmp	r3, #1
 80268f0:	f040 80a0 	bne.w	8026a34 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80268f4:	68bb      	ldr	r3, [r7, #8]
 80268f6:	f003 0308 	and.w	r3, r3, #8
 80268fa:	2b00      	cmp	r3, #0
 80268fc:	d015      	beq.n	802692a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80268fe:	68fb      	ldr	r3, [r7, #12]
 8026900:	4a72      	ldr	r2, [pc, #456]	; (8026acc <PCD_EP_OutXfrComplete_int+0x210>)
 8026902:	4293      	cmp	r3, r2
 8026904:	f240 80dd 	bls.w	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8026908:	68bb      	ldr	r3, [r7, #8]
 802690a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802690e:	2b00      	cmp	r3, #0
 8026910:	f000 80d7 	beq.w	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8026914:	683b      	ldr	r3, [r7, #0]
 8026916:	015a      	lsls	r2, r3, #5
 8026918:	693b      	ldr	r3, [r7, #16]
 802691a:	4413      	add	r3, r2
 802691c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026920:	461a      	mov	r2, r3
 8026922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8026926:	6093      	str	r3, [r2, #8]
 8026928:	e0cb      	b.n	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 802692a:	68bb      	ldr	r3, [r7, #8]
 802692c:	f003 0320 	and.w	r3, r3, #32
 8026930:	2b00      	cmp	r3, #0
 8026932:	d009      	beq.n	8026948 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8026934:	683b      	ldr	r3, [r7, #0]
 8026936:	015a      	lsls	r2, r3, #5
 8026938:	693b      	ldr	r3, [r7, #16]
 802693a:	4413      	add	r3, r2
 802693c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026940:	461a      	mov	r2, r3
 8026942:	2320      	movs	r3, #32
 8026944:	6093      	str	r3, [r2, #8]
 8026946:	e0bc      	b.n	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8026948:	68bb      	ldr	r3, [r7, #8]
 802694a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802694e:	2b00      	cmp	r3, #0
 8026950:	f040 80b7 	bne.w	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8026954:	68fb      	ldr	r3, [r7, #12]
 8026956:	4a5d      	ldr	r2, [pc, #372]	; (8026acc <PCD_EP_OutXfrComplete_int+0x210>)
 8026958:	4293      	cmp	r3, r2
 802695a:	d90f      	bls.n	802697c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 802695c:	68bb      	ldr	r3, [r7, #8]
 802695e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8026962:	2b00      	cmp	r3, #0
 8026964:	d00a      	beq.n	802697c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8026966:	683b      	ldr	r3, [r7, #0]
 8026968:	015a      	lsls	r2, r3, #5
 802696a:	693b      	ldr	r3, [r7, #16]
 802696c:	4413      	add	r3, r2
 802696e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026972:	461a      	mov	r2, r3
 8026974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8026978:	6093      	str	r3, [r2, #8]
 802697a:	e0a2      	b.n	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 802697c:	6879      	ldr	r1, [r7, #4]
 802697e:	683a      	ldr	r2, [r7, #0]
 8026980:	4613      	mov	r3, r2
 8026982:	00db      	lsls	r3, r3, #3
 8026984:	1a9b      	subs	r3, r3, r2
 8026986:	009b      	lsls	r3, r3, #2
 8026988:	440b      	add	r3, r1
 802698a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 802698e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8026990:	683b      	ldr	r3, [r7, #0]
 8026992:	0159      	lsls	r1, r3, #5
 8026994:	693b      	ldr	r3, [r7, #16]
 8026996:	440b      	add	r3, r1
 8026998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802699c:	691b      	ldr	r3, [r3, #16]
 802699e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80269a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80269a4:	6878      	ldr	r0, [r7, #4]
 80269a6:	683a      	ldr	r2, [r7, #0]
 80269a8:	4613      	mov	r3, r2
 80269aa:	00db      	lsls	r3, r3, #3
 80269ac:	1a9b      	subs	r3, r3, r2
 80269ae:	009b      	lsls	r3, r3, #2
 80269b0:	4403      	add	r3, r0
 80269b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80269b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80269b8:	6879      	ldr	r1, [r7, #4]
 80269ba:	683a      	ldr	r2, [r7, #0]
 80269bc:	4613      	mov	r3, r2
 80269be:	00db      	lsls	r3, r3, #3
 80269c0:	1a9b      	subs	r3, r3, r2
 80269c2:	009b      	lsls	r3, r3, #2
 80269c4:	440b      	add	r3, r1
 80269c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80269ca:	6819      	ldr	r1, [r3, #0]
 80269cc:	6878      	ldr	r0, [r7, #4]
 80269ce:	683a      	ldr	r2, [r7, #0]
 80269d0:	4613      	mov	r3, r2
 80269d2:	00db      	lsls	r3, r3, #3
 80269d4:	1a9b      	subs	r3, r3, r2
 80269d6:	009b      	lsls	r3, r3, #2
 80269d8:	4403      	add	r3, r0
 80269da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80269de:	681b      	ldr	r3, [r3, #0]
 80269e0:	4419      	add	r1, r3
 80269e2:	6878      	ldr	r0, [r7, #4]
 80269e4:	683a      	ldr	r2, [r7, #0]
 80269e6:	4613      	mov	r3, r2
 80269e8:	00db      	lsls	r3, r3, #3
 80269ea:	1a9b      	subs	r3, r3, r2
 80269ec:	009b      	lsls	r3, r3, #2
 80269ee:	4403      	add	r3, r0
 80269f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80269f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80269f6:	683b      	ldr	r3, [r7, #0]
 80269f8:	2b00      	cmp	r3, #0
 80269fa:	d114      	bne.n	8026a26 <PCD_EP_OutXfrComplete_int+0x16a>
 80269fc:	6879      	ldr	r1, [r7, #4]
 80269fe:	683a      	ldr	r2, [r7, #0]
 8026a00:	4613      	mov	r3, r2
 8026a02:	00db      	lsls	r3, r3, #3
 8026a04:	1a9b      	subs	r3, r3, r2
 8026a06:	009b      	lsls	r3, r3, #2
 8026a08:	440b      	add	r3, r1
 8026a0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8026a0e:	681b      	ldr	r3, [r3, #0]
 8026a10:	2b00      	cmp	r3, #0
 8026a12:	d108      	bne.n	8026a26 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8026a14:	687b      	ldr	r3, [r7, #4]
 8026a16:	6818      	ldr	r0, [r3, #0]
 8026a18:	687b      	ldr	r3, [r7, #4]
 8026a1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8026a1e:	461a      	mov	r2, r3
 8026a20:	2101      	movs	r1, #1
 8026a22:	f004 fb6d 	bl	802b100 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8026a26:	683b      	ldr	r3, [r7, #0]
 8026a28:	b2db      	uxtb	r3, r3
 8026a2a:	4619      	mov	r1, r3
 8026a2c:	6878      	ldr	r0, [r7, #4]
 8026a2e:	f010 f82b 	bl	8036a88 <HAL_PCD_DataOutStageCallback>
 8026a32:	e046      	b.n	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8026a34:	68fb      	ldr	r3, [r7, #12]
 8026a36:	4a26      	ldr	r2, [pc, #152]	; (8026ad0 <PCD_EP_OutXfrComplete_int+0x214>)
 8026a38:	4293      	cmp	r3, r2
 8026a3a:	d124      	bne.n	8026a86 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8026a3c:	68bb      	ldr	r3, [r7, #8]
 8026a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8026a42:	2b00      	cmp	r3, #0
 8026a44:	d00a      	beq.n	8026a5c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8026a46:	683b      	ldr	r3, [r7, #0]
 8026a48:	015a      	lsls	r2, r3, #5
 8026a4a:	693b      	ldr	r3, [r7, #16]
 8026a4c:	4413      	add	r3, r2
 8026a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026a52:	461a      	mov	r2, r3
 8026a54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8026a58:	6093      	str	r3, [r2, #8]
 8026a5a:	e032      	b.n	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8026a5c:	68bb      	ldr	r3, [r7, #8]
 8026a5e:	f003 0320 	and.w	r3, r3, #32
 8026a62:	2b00      	cmp	r3, #0
 8026a64:	d008      	beq.n	8026a78 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8026a66:	683b      	ldr	r3, [r7, #0]
 8026a68:	015a      	lsls	r2, r3, #5
 8026a6a:	693b      	ldr	r3, [r7, #16]
 8026a6c:	4413      	add	r3, r2
 8026a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026a72:	461a      	mov	r2, r3
 8026a74:	2320      	movs	r3, #32
 8026a76:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8026a78:	683b      	ldr	r3, [r7, #0]
 8026a7a:	b2db      	uxtb	r3, r3
 8026a7c:	4619      	mov	r1, r3
 8026a7e:	6878      	ldr	r0, [r7, #4]
 8026a80:	f010 f802 	bl	8036a88 <HAL_PCD_DataOutStageCallback>
 8026a84:	e01d      	b.n	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8026a86:	683b      	ldr	r3, [r7, #0]
 8026a88:	2b00      	cmp	r3, #0
 8026a8a:	d114      	bne.n	8026ab6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8026a8c:	6879      	ldr	r1, [r7, #4]
 8026a8e:	683a      	ldr	r2, [r7, #0]
 8026a90:	4613      	mov	r3, r2
 8026a92:	00db      	lsls	r3, r3, #3
 8026a94:	1a9b      	subs	r3, r3, r2
 8026a96:	009b      	lsls	r3, r3, #2
 8026a98:	440b      	add	r3, r1
 8026a9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8026a9e:	681b      	ldr	r3, [r3, #0]
 8026aa0:	2b00      	cmp	r3, #0
 8026aa2:	d108      	bne.n	8026ab6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8026aa4:	687b      	ldr	r3, [r7, #4]
 8026aa6:	6818      	ldr	r0, [r3, #0]
 8026aa8:	687b      	ldr	r3, [r7, #4]
 8026aaa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8026aae:	461a      	mov	r2, r3
 8026ab0:	2100      	movs	r1, #0
 8026ab2:	f004 fb25 	bl	802b100 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8026ab6:	683b      	ldr	r3, [r7, #0]
 8026ab8:	b2db      	uxtb	r3, r3
 8026aba:	4619      	mov	r1, r3
 8026abc:	6878      	ldr	r0, [r7, #4]
 8026abe:	f00f ffe3 	bl	8036a88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8026ac2:	2300      	movs	r3, #0
}
 8026ac4:	4618      	mov	r0, r3
 8026ac6:	3718      	adds	r7, #24
 8026ac8:	46bd      	mov	sp, r7
 8026aca:	bd80      	pop	{r7, pc}
 8026acc:	4f54300a 	.word	0x4f54300a
 8026ad0:	4f54310a 	.word	0x4f54310a

08026ad4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8026ad4:	b580      	push	{r7, lr}
 8026ad6:	b086      	sub	sp, #24
 8026ad8:	af00      	add	r7, sp, #0
 8026ada:	6078      	str	r0, [r7, #4]
 8026adc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8026ade:	687b      	ldr	r3, [r7, #4]
 8026ae0:	681b      	ldr	r3, [r3, #0]
 8026ae2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026ae4:	697b      	ldr	r3, [r7, #20]
 8026ae6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8026ae8:	697b      	ldr	r3, [r7, #20]
 8026aea:	333c      	adds	r3, #60	; 0x3c
 8026aec:	3304      	adds	r3, #4
 8026aee:	681b      	ldr	r3, [r3, #0]
 8026af0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8026af2:	683b      	ldr	r3, [r7, #0]
 8026af4:	015a      	lsls	r2, r3, #5
 8026af6:	693b      	ldr	r3, [r7, #16]
 8026af8:	4413      	add	r3, r2
 8026afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026afe:	689b      	ldr	r3, [r3, #8]
 8026b00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8026b02:	68fb      	ldr	r3, [r7, #12]
 8026b04:	4a15      	ldr	r2, [pc, #84]	; (8026b5c <PCD_EP_OutSetupPacket_int+0x88>)
 8026b06:	4293      	cmp	r3, r2
 8026b08:	d90e      	bls.n	8026b28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8026b0a:	68bb      	ldr	r3, [r7, #8]
 8026b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8026b10:	2b00      	cmp	r3, #0
 8026b12:	d009      	beq.n	8026b28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8026b14:	683b      	ldr	r3, [r7, #0]
 8026b16:	015a      	lsls	r2, r3, #5
 8026b18:	693b      	ldr	r3, [r7, #16]
 8026b1a:	4413      	add	r3, r2
 8026b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026b20:	461a      	mov	r2, r3
 8026b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8026b26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8026b28:	6878      	ldr	r0, [r7, #4]
 8026b2a:	f00f ff9b 	bl	8036a64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8026b2e:	68fb      	ldr	r3, [r7, #12]
 8026b30:	4a0a      	ldr	r2, [pc, #40]	; (8026b5c <PCD_EP_OutSetupPacket_int+0x88>)
 8026b32:	4293      	cmp	r3, r2
 8026b34:	d90c      	bls.n	8026b50 <PCD_EP_OutSetupPacket_int+0x7c>
 8026b36:	687b      	ldr	r3, [r7, #4]
 8026b38:	691b      	ldr	r3, [r3, #16]
 8026b3a:	2b01      	cmp	r3, #1
 8026b3c:	d108      	bne.n	8026b50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8026b3e:	687b      	ldr	r3, [r7, #4]
 8026b40:	6818      	ldr	r0, [r3, #0]
 8026b42:	687b      	ldr	r3, [r7, #4]
 8026b44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8026b48:	461a      	mov	r2, r3
 8026b4a:	2101      	movs	r1, #1
 8026b4c:	f004 fad8 	bl	802b100 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8026b50:	2300      	movs	r3, #0
}
 8026b52:	4618      	mov	r0, r3
 8026b54:	3718      	adds	r7, #24
 8026b56:	46bd      	mov	sp, r7
 8026b58:	bd80      	pop	{r7, pc}
 8026b5a:	bf00      	nop
 8026b5c:	4f54300a 	.word	0x4f54300a

08026b60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8026b60:	b480      	push	{r7}
 8026b62:	b085      	sub	sp, #20
 8026b64:	af00      	add	r7, sp, #0
 8026b66:	6078      	str	r0, [r7, #4]
 8026b68:	460b      	mov	r3, r1
 8026b6a:	70fb      	strb	r3, [r7, #3]
 8026b6c:	4613      	mov	r3, r2
 8026b6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8026b70:	687b      	ldr	r3, [r7, #4]
 8026b72:	681b      	ldr	r3, [r3, #0]
 8026b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026b76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8026b78:	78fb      	ldrb	r3, [r7, #3]
 8026b7a:	2b00      	cmp	r3, #0
 8026b7c:	d107      	bne.n	8026b8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8026b7e:	883b      	ldrh	r3, [r7, #0]
 8026b80:	0419      	lsls	r1, r3, #16
 8026b82:	687b      	ldr	r3, [r7, #4]
 8026b84:	681b      	ldr	r3, [r3, #0]
 8026b86:	68ba      	ldr	r2, [r7, #8]
 8026b88:	430a      	orrs	r2, r1
 8026b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8026b8c:	e028      	b.n	8026be0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8026b8e:	687b      	ldr	r3, [r7, #4]
 8026b90:	681b      	ldr	r3, [r3, #0]
 8026b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026b94:	0c1b      	lsrs	r3, r3, #16
 8026b96:	68ba      	ldr	r2, [r7, #8]
 8026b98:	4413      	add	r3, r2
 8026b9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8026b9c:	2300      	movs	r3, #0
 8026b9e:	73fb      	strb	r3, [r7, #15]
 8026ba0:	e00d      	b.n	8026bbe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8026ba2:	687b      	ldr	r3, [r7, #4]
 8026ba4:	681a      	ldr	r2, [r3, #0]
 8026ba6:	7bfb      	ldrb	r3, [r7, #15]
 8026ba8:	3340      	adds	r3, #64	; 0x40
 8026baa:	009b      	lsls	r3, r3, #2
 8026bac:	4413      	add	r3, r2
 8026bae:	685b      	ldr	r3, [r3, #4]
 8026bb0:	0c1b      	lsrs	r3, r3, #16
 8026bb2:	68ba      	ldr	r2, [r7, #8]
 8026bb4:	4413      	add	r3, r2
 8026bb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8026bb8:	7bfb      	ldrb	r3, [r7, #15]
 8026bba:	3301      	adds	r3, #1
 8026bbc:	73fb      	strb	r3, [r7, #15]
 8026bbe:	7bfa      	ldrb	r2, [r7, #15]
 8026bc0:	78fb      	ldrb	r3, [r7, #3]
 8026bc2:	3b01      	subs	r3, #1
 8026bc4:	429a      	cmp	r2, r3
 8026bc6:	d3ec      	bcc.n	8026ba2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8026bc8:	883b      	ldrh	r3, [r7, #0]
 8026bca:	0418      	lsls	r0, r3, #16
 8026bcc:	687b      	ldr	r3, [r7, #4]
 8026bce:	6819      	ldr	r1, [r3, #0]
 8026bd0:	78fb      	ldrb	r3, [r7, #3]
 8026bd2:	3b01      	subs	r3, #1
 8026bd4:	68ba      	ldr	r2, [r7, #8]
 8026bd6:	4302      	orrs	r2, r0
 8026bd8:	3340      	adds	r3, #64	; 0x40
 8026bda:	009b      	lsls	r3, r3, #2
 8026bdc:	440b      	add	r3, r1
 8026bde:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8026be0:	2300      	movs	r3, #0
}
 8026be2:	4618      	mov	r0, r3
 8026be4:	3714      	adds	r7, #20
 8026be6:	46bd      	mov	sp, r7
 8026be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bec:	4770      	bx	lr

08026bee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8026bee:	b480      	push	{r7}
 8026bf0:	b083      	sub	sp, #12
 8026bf2:	af00      	add	r7, sp, #0
 8026bf4:	6078      	str	r0, [r7, #4]
 8026bf6:	460b      	mov	r3, r1
 8026bf8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8026bfa:	687b      	ldr	r3, [r7, #4]
 8026bfc:	681b      	ldr	r3, [r3, #0]
 8026bfe:	887a      	ldrh	r2, [r7, #2]
 8026c00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8026c02:	2300      	movs	r3, #0
}
 8026c04:	4618      	mov	r0, r3
 8026c06:	370c      	adds	r7, #12
 8026c08:	46bd      	mov	sp, r7
 8026c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c0e:	4770      	bx	lr

08026c10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8026c10:	b480      	push	{r7}
 8026c12:	b083      	sub	sp, #12
 8026c14:	af00      	add	r7, sp, #0
 8026c16:	6078      	str	r0, [r7, #4]
 8026c18:	460b      	mov	r3, r1
 8026c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8026c1c:	bf00      	nop
 8026c1e:	370c      	adds	r7, #12
 8026c20:	46bd      	mov	sp, r7
 8026c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c26:	4770      	bx	lr

08026c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026c28:	b580      	push	{r7, lr}
 8026c2a:	b086      	sub	sp, #24
 8026c2c:	af00      	add	r7, sp, #0
 8026c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8026c30:	687b      	ldr	r3, [r7, #4]
 8026c32:	2b00      	cmp	r3, #0
 8026c34:	d101      	bne.n	8026c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8026c36:	2301      	movs	r3, #1
 8026c38:	e25e      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026c3a:	687b      	ldr	r3, [r7, #4]
 8026c3c:	681b      	ldr	r3, [r3, #0]
 8026c3e:	f003 0301 	and.w	r3, r3, #1
 8026c42:	2b00      	cmp	r3, #0
 8026c44:	d075      	beq.n	8026d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026c46:	4b88      	ldr	r3, [pc, #544]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026c48:	689b      	ldr	r3, [r3, #8]
 8026c4a:	f003 030c 	and.w	r3, r3, #12
 8026c4e:	2b04      	cmp	r3, #4
 8026c50:	d00c      	beq.n	8026c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026c52:	4b85      	ldr	r3, [pc, #532]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026c54:	689b      	ldr	r3, [r3, #8]
 8026c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026c5a:	2b08      	cmp	r3, #8
 8026c5c:	d112      	bne.n	8026c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026c5e:	4b82      	ldr	r3, [pc, #520]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026c60:	685b      	ldr	r3, [r3, #4]
 8026c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026c6a:	d10b      	bne.n	8026c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026c6c:	4b7e      	ldr	r3, [pc, #504]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026c6e:	681b      	ldr	r3, [r3, #0]
 8026c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026c74:	2b00      	cmp	r3, #0
 8026c76:	d05b      	beq.n	8026d30 <HAL_RCC_OscConfig+0x108>
 8026c78:	687b      	ldr	r3, [r7, #4]
 8026c7a:	685b      	ldr	r3, [r3, #4]
 8026c7c:	2b00      	cmp	r3, #0
 8026c7e:	d157      	bne.n	8026d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8026c80:	2301      	movs	r3, #1
 8026c82:	e239      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026c84:	687b      	ldr	r3, [r7, #4]
 8026c86:	685b      	ldr	r3, [r3, #4]
 8026c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026c8c:	d106      	bne.n	8026c9c <HAL_RCC_OscConfig+0x74>
 8026c8e:	4b76      	ldr	r3, [pc, #472]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026c90:	681b      	ldr	r3, [r3, #0]
 8026c92:	4a75      	ldr	r2, [pc, #468]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026c98:	6013      	str	r3, [r2, #0]
 8026c9a:	e01d      	b.n	8026cd8 <HAL_RCC_OscConfig+0xb0>
 8026c9c:	687b      	ldr	r3, [r7, #4]
 8026c9e:	685b      	ldr	r3, [r3, #4]
 8026ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8026ca4:	d10c      	bne.n	8026cc0 <HAL_RCC_OscConfig+0x98>
 8026ca6:	4b70      	ldr	r3, [pc, #448]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026ca8:	681b      	ldr	r3, [r3, #0]
 8026caa:	4a6f      	ldr	r2, [pc, #444]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026cb0:	6013      	str	r3, [r2, #0]
 8026cb2:	4b6d      	ldr	r3, [pc, #436]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cb4:	681b      	ldr	r3, [r3, #0]
 8026cb6:	4a6c      	ldr	r2, [pc, #432]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026cbc:	6013      	str	r3, [r2, #0]
 8026cbe:	e00b      	b.n	8026cd8 <HAL_RCC_OscConfig+0xb0>
 8026cc0:	4b69      	ldr	r3, [pc, #420]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cc2:	681b      	ldr	r3, [r3, #0]
 8026cc4:	4a68      	ldr	r2, [pc, #416]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026cca:	6013      	str	r3, [r2, #0]
 8026ccc:	4b66      	ldr	r3, [pc, #408]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cce:	681b      	ldr	r3, [r3, #0]
 8026cd0:	4a65      	ldr	r2, [pc, #404]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8026cd8:	687b      	ldr	r3, [r7, #4]
 8026cda:	685b      	ldr	r3, [r3, #4]
 8026cdc:	2b00      	cmp	r3, #0
 8026cde:	d013      	beq.n	8026d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026ce0:	f7fa ff42 	bl	8021b68 <HAL_GetTick>
 8026ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026ce6:	e008      	b.n	8026cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026ce8:	f7fa ff3e 	bl	8021b68 <HAL_GetTick>
 8026cec:	4602      	mov	r2, r0
 8026cee:	693b      	ldr	r3, [r7, #16]
 8026cf0:	1ad3      	subs	r3, r2, r3
 8026cf2:	2b64      	cmp	r3, #100	; 0x64
 8026cf4:	d901      	bls.n	8026cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8026cf6:	2303      	movs	r3, #3
 8026cf8:	e1fe      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026cfa:	4b5b      	ldr	r3, [pc, #364]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cfc:	681b      	ldr	r3, [r3, #0]
 8026cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026d02:	2b00      	cmp	r3, #0
 8026d04:	d0f0      	beq.n	8026ce8 <HAL_RCC_OscConfig+0xc0>
 8026d06:	e014      	b.n	8026d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026d08:	f7fa ff2e 	bl	8021b68 <HAL_GetTick>
 8026d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026d0e:	e008      	b.n	8026d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026d10:	f7fa ff2a 	bl	8021b68 <HAL_GetTick>
 8026d14:	4602      	mov	r2, r0
 8026d16:	693b      	ldr	r3, [r7, #16]
 8026d18:	1ad3      	subs	r3, r2, r3
 8026d1a:	2b64      	cmp	r3, #100	; 0x64
 8026d1c:	d901      	bls.n	8026d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8026d1e:	2303      	movs	r3, #3
 8026d20:	e1ea      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026d22:	4b51      	ldr	r3, [pc, #324]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d24:	681b      	ldr	r3, [r3, #0]
 8026d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026d2a:	2b00      	cmp	r3, #0
 8026d2c:	d1f0      	bne.n	8026d10 <HAL_RCC_OscConfig+0xe8>
 8026d2e:	e000      	b.n	8026d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8026d32:	687b      	ldr	r3, [r7, #4]
 8026d34:	681b      	ldr	r3, [r3, #0]
 8026d36:	f003 0302 	and.w	r3, r3, #2
 8026d3a:	2b00      	cmp	r3, #0
 8026d3c:	d063      	beq.n	8026e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026d3e:	4b4a      	ldr	r3, [pc, #296]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d40:	689b      	ldr	r3, [r3, #8]
 8026d42:	f003 030c 	and.w	r3, r3, #12
 8026d46:	2b00      	cmp	r3, #0
 8026d48:	d00b      	beq.n	8026d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026d4a:	4b47      	ldr	r3, [pc, #284]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d4c:	689b      	ldr	r3, [r3, #8]
 8026d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026d52:	2b08      	cmp	r3, #8
 8026d54:	d11c      	bne.n	8026d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026d56:	4b44      	ldr	r3, [pc, #272]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d58:	685b      	ldr	r3, [r3, #4]
 8026d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026d5e:	2b00      	cmp	r3, #0
 8026d60:	d116      	bne.n	8026d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026d62:	4b41      	ldr	r3, [pc, #260]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d64:	681b      	ldr	r3, [r3, #0]
 8026d66:	f003 0302 	and.w	r3, r3, #2
 8026d6a:	2b00      	cmp	r3, #0
 8026d6c:	d005      	beq.n	8026d7a <HAL_RCC_OscConfig+0x152>
 8026d6e:	687b      	ldr	r3, [r7, #4]
 8026d70:	68db      	ldr	r3, [r3, #12]
 8026d72:	2b01      	cmp	r3, #1
 8026d74:	d001      	beq.n	8026d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8026d76:	2301      	movs	r3, #1
 8026d78:	e1be      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026d7a:	4b3b      	ldr	r3, [pc, #236]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d7c:	681b      	ldr	r3, [r3, #0]
 8026d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026d82:	687b      	ldr	r3, [r7, #4]
 8026d84:	691b      	ldr	r3, [r3, #16]
 8026d86:	00db      	lsls	r3, r3, #3
 8026d88:	4937      	ldr	r1, [pc, #220]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d8a:	4313      	orrs	r3, r2
 8026d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026d8e:	e03a      	b.n	8026e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8026d90:	687b      	ldr	r3, [r7, #4]
 8026d92:	68db      	ldr	r3, [r3, #12]
 8026d94:	2b00      	cmp	r3, #0
 8026d96:	d020      	beq.n	8026dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8026d98:	4b34      	ldr	r3, [pc, #208]	; (8026e6c <HAL_RCC_OscConfig+0x244>)
 8026d9a:	2201      	movs	r2, #1
 8026d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026d9e:	f7fa fee3 	bl	8021b68 <HAL_GetTick>
 8026da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026da4:	e008      	b.n	8026db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026da6:	f7fa fedf 	bl	8021b68 <HAL_GetTick>
 8026daa:	4602      	mov	r2, r0
 8026dac:	693b      	ldr	r3, [r7, #16]
 8026dae:	1ad3      	subs	r3, r2, r3
 8026db0:	2b02      	cmp	r3, #2
 8026db2:	d901      	bls.n	8026db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8026db4:	2303      	movs	r3, #3
 8026db6:	e19f      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026db8:	4b2b      	ldr	r3, [pc, #172]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026dba:	681b      	ldr	r3, [r3, #0]
 8026dbc:	f003 0302 	and.w	r3, r3, #2
 8026dc0:	2b00      	cmp	r3, #0
 8026dc2:	d0f0      	beq.n	8026da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026dc4:	4b28      	ldr	r3, [pc, #160]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026dc6:	681b      	ldr	r3, [r3, #0]
 8026dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026dcc:	687b      	ldr	r3, [r7, #4]
 8026dce:	691b      	ldr	r3, [r3, #16]
 8026dd0:	00db      	lsls	r3, r3, #3
 8026dd2:	4925      	ldr	r1, [pc, #148]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026dd4:	4313      	orrs	r3, r2
 8026dd6:	600b      	str	r3, [r1, #0]
 8026dd8:	e015      	b.n	8026e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8026dda:	4b24      	ldr	r3, [pc, #144]	; (8026e6c <HAL_RCC_OscConfig+0x244>)
 8026ddc:	2200      	movs	r2, #0
 8026dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026de0:	f7fa fec2 	bl	8021b68 <HAL_GetTick>
 8026de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026de6:	e008      	b.n	8026dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026de8:	f7fa febe 	bl	8021b68 <HAL_GetTick>
 8026dec:	4602      	mov	r2, r0
 8026dee:	693b      	ldr	r3, [r7, #16]
 8026df0:	1ad3      	subs	r3, r2, r3
 8026df2:	2b02      	cmp	r3, #2
 8026df4:	d901      	bls.n	8026dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8026df6:	2303      	movs	r3, #3
 8026df8:	e17e      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026dfa:	4b1b      	ldr	r3, [pc, #108]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026dfc:	681b      	ldr	r3, [r3, #0]
 8026dfe:	f003 0302 	and.w	r3, r3, #2
 8026e02:	2b00      	cmp	r3, #0
 8026e04:	d1f0      	bne.n	8026de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8026e06:	687b      	ldr	r3, [r7, #4]
 8026e08:	681b      	ldr	r3, [r3, #0]
 8026e0a:	f003 0308 	and.w	r3, r3, #8
 8026e0e:	2b00      	cmp	r3, #0
 8026e10:	d036      	beq.n	8026e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8026e12:	687b      	ldr	r3, [r7, #4]
 8026e14:	695b      	ldr	r3, [r3, #20]
 8026e16:	2b00      	cmp	r3, #0
 8026e18:	d016      	beq.n	8026e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8026e1a:	4b15      	ldr	r3, [pc, #84]	; (8026e70 <HAL_RCC_OscConfig+0x248>)
 8026e1c:	2201      	movs	r2, #1
 8026e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026e20:	f7fa fea2 	bl	8021b68 <HAL_GetTick>
 8026e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026e26:	e008      	b.n	8026e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026e28:	f7fa fe9e 	bl	8021b68 <HAL_GetTick>
 8026e2c:	4602      	mov	r2, r0
 8026e2e:	693b      	ldr	r3, [r7, #16]
 8026e30:	1ad3      	subs	r3, r2, r3
 8026e32:	2b02      	cmp	r3, #2
 8026e34:	d901      	bls.n	8026e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8026e36:	2303      	movs	r3, #3
 8026e38:	e15e      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026e3a:	4b0b      	ldr	r3, [pc, #44]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026e3e:	f003 0302 	and.w	r3, r3, #2
 8026e42:	2b00      	cmp	r3, #0
 8026e44:	d0f0      	beq.n	8026e28 <HAL_RCC_OscConfig+0x200>
 8026e46:	e01b      	b.n	8026e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8026e48:	4b09      	ldr	r3, [pc, #36]	; (8026e70 <HAL_RCC_OscConfig+0x248>)
 8026e4a:	2200      	movs	r2, #0
 8026e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026e4e:	f7fa fe8b 	bl	8021b68 <HAL_GetTick>
 8026e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026e54:	e00e      	b.n	8026e74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026e56:	f7fa fe87 	bl	8021b68 <HAL_GetTick>
 8026e5a:	4602      	mov	r2, r0
 8026e5c:	693b      	ldr	r3, [r7, #16]
 8026e5e:	1ad3      	subs	r3, r2, r3
 8026e60:	2b02      	cmp	r3, #2
 8026e62:	d907      	bls.n	8026e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8026e64:	2303      	movs	r3, #3
 8026e66:	e147      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
 8026e68:	40023800 	.word	0x40023800
 8026e6c:	42470000 	.word	0x42470000
 8026e70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026e74:	4b88      	ldr	r3, [pc, #544]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026e78:	f003 0302 	and.w	r3, r3, #2
 8026e7c:	2b00      	cmp	r3, #0
 8026e7e:	d1ea      	bne.n	8026e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8026e80:	687b      	ldr	r3, [r7, #4]
 8026e82:	681b      	ldr	r3, [r3, #0]
 8026e84:	f003 0304 	and.w	r3, r3, #4
 8026e88:	2b00      	cmp	r3, #0
 8026e8a:	f000 8097 	beq.w	8026fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8026e8e:	2300      	movs	r3, #0
 8026e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8026e92:	4b81      	ldr	r3, [pc, #516]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026e9a:	2b00      	cmp	r3, #0
 8026e9c:	d10f      	bne.n	8026ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8026e9e:	2300      	movs	r3, #0
 8026ea0:	60bb      	str	r3, [r7, #8]
 8026ea2:	4b7d      	ldr	r3, [pc, #500]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026ea6:	4a7c      	ldr	r2, [pc, #496]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026eac:	6413      	str	r3, [r2, #64]	; 0x40
 8026eae:	4b7a      	ldr	r3, [pc, #488]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026eb6:	60bb      	str	r3, [r7, #8]
 8026eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8026eba:	2301      	movs	r3, #1
 8026ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026ebe:	4b77      	ldr	r3, [pc, #476]	; (802709c <HAL_RCC_OscConfig+0x474>)
 8026ec0:	681b      	ldr	r3, [r3, #0]
 8026ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026ec6:	2b00      	cmp	r3, #0
 8026ec8:	d118      	bne.n	8026efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8026eca:	4b74      	ldr	r3, [pc, #464]	; (802709c <HAL_RCC_OscConfig+0x474>)
 8026ecc:	681b      	ldr	r3, [r3, #0]
 8026ece:	4a73      	ldr	r2, [pc, #460]	; (802709c <HAL_RCC_OscConfig+0x474>)
 8026ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8026ed6:	f7fa fe47 	bl	8021b68 <HAL_GetTick>
 8026eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026edc:	e008      	b.n	8026ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8026ede:	f7fa fe43 	bl	8021b68 <HAL_GetTick>
 8026ee2:	4602      	mov	r2, r0
 8026ee4:	693b      	ldr	r3, [r7, #16]
 8026ee6:	1ad3      	subs	r3, r2, r3
 8026ee8:	2b02      	cmp	r3, #2
 8026eea:	d901      	bls.n	8026ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8026eec:	2303      	movs	r3, #3
 8026eee:	e103      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026ef0:	4b6a      	ldr	r3, [pc, #424]	; (802709c <HAL_RCC_OscConfig+0x474>)
 8026ef2:	681b      	ldr	r3, [r3, #0]
 8026ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026ef8:	2b00      	cmp	r3, #0
 8026efa:	d0f0      	beq.n	8026ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8026efc:	687b      	ldr	r3, [r7, #4]
 8026efe:	689b      	ldr	r3, [r3, #8]
 8026f00:	2b01      	cmp	r3, #1
 8026f02:	d106      	bne.n	8026f12 <HAL_RCC_OscConfig+0x2ea>
 8026f04:	4b64      	ldr	r3, [pc, #400]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f08:	4a63      	ldr	r2, [pc, #396]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f0a:	f043 0301 	orr.w	r3, r3, #1
 8026f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8026f10:	e01c      	b.n	8026f4c <HAL_RCC_OscConfig+0x324>
 8026f12:	687b      	ldr	r3, [r7, #4]
 8026f14:	689b      	ldr	r3, [r3, #8]
 8026f16:	2b05      	cmp	r3, #5
 8026f18:	d10c      	bne.n	8026f34 <HAL_RCC_OscConfig+0x30c>
 8026f1a:	4b5f      	ldr	r3, [pc, #380]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f1e:	4a5e      	ldr	r2, [pc, #376]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f20:	f043 0304 	orr.w	r3, r3, #4
 8026f24:	6713      	str	r3, [r2, #112]	; 0x70
 8026f26:	4b5c      	ldr	r3, [pc, #368]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f2a:	4a5b      	ldr	r2, [pc, #364]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f2c:	f043 0301 	orr.w	r3, r3, #1
 8026f30:	6713      	str	r3, [r2, #112]	; 0x70
 8026f32:	e00b      	b.n	8026f4c <HAL_RCC_OscConfig+0x324>
 8026f34:	4b58      	ldr	r3, [pc, #352]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f38:	4a57      	ldr	r2, [pc, #348]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f3a:	f023 0301 	bic.w	r3, r3, #1
 8026f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8026f40:	4b55      	ldr	r3, [pc, #340]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f44:	4a54      	ldr	r2, [pc, #336]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f46:	f023 0304 	bic.w	r3, r3, #4
 8026f4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8026f4c:	687b      	ldr	r3, [r7, #4]
 8026f4e:	689b      	ldr	r3, [r3, #8]
 8026f50:	2b00      	cmp	r3, #0
 8026f52:	d015      	beq.n	8026f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026f54:	f7fa fe08 	bl	8021b68 <HAL_GetTick>
 8026f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026f5a:	e00a      	b.n	8026f72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026f5c:	f7fa fe04 	bl	8021b68 <HAL_GetTick>
 8026f60:	4602      	mov	r2, r0
 8026f62:	693b      	ldr	r3, [r7, #16]
 8026f64:	1ad3      	subs	r3, r2, r3
 8026f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8026f6a:	4293      	cmp	r3, r2
 8026f6c:	d901      	bls.n	8026f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8026f6e:	2303      	movs	r3, #3
 8026f70:	e0c2      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026f72:	4b49      	ldr	r3, [pc, #292]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f76:	f003 0302 	and.w	r3, r3, #2
 8026f7a:	2b00      	cmp	r3, #0
 8026f7c:	d0ee      	beq.n	8026f5c <HAL_RCC_OscConfig+0x334>
 8026f7e:	e014      	b.n	8026faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026f80:	f7fa fdf2 	bl	8021b68 <HAL_GetTick>
 8026f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026f86:	e00a      	b.n	8026f9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026f88:	f7fa fdee 	bl	8021b68 <HAL_GetTick>
 8026f8c:	4602      	mov	r2, r0
 8026f8e:	693b      	ldr	r3, [r7, #16]
 8026f90:	1ad3      	subs	r3, r2, r3
 8026f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8026f96:	4293      	cmp	r3, r2
 8026f98:	d901      	bls.n	8026f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8026f9a:	2303      	movs	r3, #3
 8026f9c:	e0ac      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026f9e:	4b3e      	ldr	r3, [pc, #248]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026fa2:	f003 0302 	and.w	r3, r3, #2
 8026fa6:	2b00      	cmp	r3, #0
 8026fa8:	d1ee      	bne.n	8026f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8026faa:	7dfb      	ldrb	r3, [r7, #23]
 8026fac:	2b01      	cmp	r3, #1
 8026fae:	d105      	bne.n	8026fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8026fb0:	4b39      	ldr	r3, [pc, #228]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026fb4:	4a38      	ldr	r2, [pc, #224]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8026fba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8026fbc:	687b      	ldr	r3, [r7, #4]
 8026fbe:	699b      	ldr	r3, [r3, #24]
 8026fc0:	2b00      	cmp	r3, #0
 8026fc2:	f000 8098 	beq.w	80270f6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8026fc6:	4b34      	ldr	r3, [pc, #208]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026fc8:	689b      	ldr	r3, [r3, #8]
 8026fca:	f003 030c 	and.w	r3, r3, #12
 8026fce:	2b08      	cmp	r3, #8
 8026fd0:	d05c      	beq.n	802708c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8026fd2:	687b      	ldr	r3, [r7, #4]
 8026fd4:	699b      	ldr	r3, [r3, #24]
 8026fd6:	2b02      	cmp	r3, #2
 8026fd8:	d141      	bne.n	802705e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026fda:	4b31      	ldr	r3, [pc, #196]	; (80270a0 <HAL_RCC_OscConfig+0x478>)
 8026fdc:	2200      	movs	r2, #0
 8026fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026fe0:	f7fa fdc2 	bl	8021b68 <HAL_GetTick>
 8026fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026fe6:	e008      	b.n	8026ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026fe8:	f7fa fdbe 	bl	8021b68 <HAL_GetTick>
 8026fec:	4602      	mov	r2, r0
 8026fee:	693b      	ldr	r3, [r7, #16]
 8026ff0:	1ad3      	subs	r3, r2, r3
 8026ff2:	2b02      	cmp	r3, #2
 8026ff4:	d901      	bls.n	8026ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8026ff6:	2303      	movs	r3, #3
 8026ff8:	e07e      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026ffa:	4b27      	ldr	r3, [pc, #156]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026ffc:	681b      	ldr	r3, [r3, #0]
 8026ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027002:	2b00      	cmp	r3, #0
 8027004:	d1f0      	bne.n	8026fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8027006:	687b      	ldr	r3, [r7, #4]
 8027008:	69da      	ldr	r2, [r3, #28]
 802700a:	687b      	ldr	r3, [r7, #4]
 802700c:	6a1b      	ldr	r3, [r3, #32]
 802700e:	431a      	orrs	r2, r3
 8027010:	687b      	ldr	r3, [r7, #4]
 8027012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027014:	019b      	lsls	r3, r3, #6
 8027016:	431a      	orrs	r2, r3
 8027018:	687b      	ldr	r3, [r7, #4]
 802701a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802701c:	085b      	lsrs	r3, r3, #1
 802701e:	3b01      	subs	r3, #1
 8027020:	041b      	lsls	r3, r3, #16
 8027022:	431a      	orrs	r2, r3
 8027024:	687b      	ldr	r3, [r7, #4]
 8027026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027028:	061b      	lsls	r3, r3, #24
 802702a:	491b      	ldr	r1, [pc, #108]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 802702c:	4313      	orrs	r3, r2
 802702e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8027030:	4b1b      	ldr	r3, [pc, #108]	; (80270a0 <HAL_RCC_OscConfig+0x478>)
 8027032:	2201      	movs	r2, #1
 8027034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027036:	f7fa fd97 	bl	8021b68 <HAL_GetTick>
 802703a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802703c:	e008      	b.n	8027050 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802703e:	f7fa fd93 	bl	8021b68 <HAL_GetTick>
 8027042:	4602      	mov	r2, r0
 8027044:	693b      	ldr	r3, [r7, #16]
 8027046:	1ad3      	subs	r3, r2, r3
 8027048:	2b02      	cmp	r3, #2
 802704a:	d901      	bls.n	8027050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802704c:	2303      	movs	r3, #3
 802704e:	e053      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027050:	4b11      	ldr	r3, [pc, #68]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8027052:	681b      	ldr	r3, [r3, #0]
 8027054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027058:	2b00      	cmp	r3, #0
 802705a:	d0f0      	beq.n	802703e <HAL_RCC_OscConfig+0x416>
 802705c:	e04b      	b.n	80270f6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802705e:	4b10      	ldr	r3, [pc, #64]	; (80270a0 <HAL_RCC_OscConfig+0x478>)
 8027060:	2200      	movs	r2, #0
 8027062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027064:	f7fa fd80 	bl	8021b68 <HAL_GetTick>
 8027068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802706a:	e008      	b.n	802707e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802706c:	f7fa fd7c 	bl	8021b68 <HAL_GetTick>
 8027070:	4602      	mov	r2, r0
 8027072:	693b      	ldr	r3, [r7, #16]
 8027074:	1ad3      	subs	r3, r2, r3
 8027076:	2b02      	cmp	r3, #2
 8027078:	d901      	bls.n	802707e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802707a:	2303      	movs	r3, #3
 802707c:	e03c      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802707e:	4b06      	ldr	r3, [pc, #24]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8027080:	681b      	ldr	r3, [r3, #0]
 8027082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027086:	2b00      	cmp	r3, #0
 8027088:	d1f0      	bne.n	802706c <HAL_RCC_OscConfig+0x444>
 802708a:	e034      	b.n	80270f6 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802708c:	687b      	ldr	r3, [r7, #4]
 802708e:	699b      	ldr	r3, [r3, #24]
 8027090:	2b01      	cmp	r3, #1
 8027092:	d107      	bne.n	80270a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8027094:	2301      	movs	r3, #1
 8027096:	e02f      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
 8027098:	40023800 	.word	0x40023800
 802709c:	40007000 	.word	0x40007000
 80270a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80270a4:	4b16      	ldr	r3, [pc, #88]	; (8027100 <HAL_RCC_OscConfig+0x4d8>)
 80270a6:	685b      	ldr	r3, [r3, #4]
 80270a8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80270aa:	68fb      	ldr	r3, [r7, #12]
 80270ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80270b0:	687b      	ldr	r3, [r7, #4]
 80270b2:	69db      	ldr	r3, [r3, #28]
 80270b4:	429a      	cmp	r2, r3
 80270b6:	d11c      	bne.n	80270f2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80270b8:	68fb      	ldr	r3, [r7, #12]
 80270ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80270be:	687b      	ldr	r3, [r7, #4]
 80270c0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80270c2:	429a      	cmp	r2, r3
 80270c4:	d115      	bne.n	80270f2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80270c6:	68fa      	ldr	r2, [r7, #12]
 80270c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80270cc:	4013      	ands	r3, r2
 80270ce:	687a      	ldr	r2, [r7, #4]
 80270d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80270d2:	4293      	cmp	r3, r2
 80270d4:	d10d      	bne.n	80270f2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80270d6:	68fb      	ldr	r3, [r7, #12]
 80270d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80270dc:	687b      	ldr	r3, [r7, #4]
 80270de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80270e0:	429a      	cmp	r2, r3
 80270e2:	d106      	bne.n	80270f2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80270e4:	68fb      	ldr	r3, [r7, #12]
 80270e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80270ea:	687b      	ldr	r3, [r7, #4]
 80270ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80270ee:	429a      	cmp	r2, r3
 80270f0:	d001      	beq.n	80270f6 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80270f2:	2301      	movs	r3, #1
 80270f4:	e000      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80270f6:	2300      	movs	r3, #0
}
 80270f8:	4618      	mov	r0, r3
 80270fa:	3718      	adds	r7, #24
 80270fc:	46bd      	mov	sp, r7
 80270fe:	bd80      	pop	{r7, pc}
 8027100:	40023800 	.word	0x40023800

08027104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8027104:	b580      	push	{r7, lr}
 8027106:	b084      	sub	sp, #16
 8027108:	af00      	add	r7, sp, #0
 802710a:	6078      	str	r0, [r7, #4]
 802710c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802710e:	687b      	ldr	r3, [r7, #4]
 8027110:	2b00      	cmp	r3, #0
 8027112:	d101      	bne.n	8027118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8027114:	2301      	movs	r3, #1
 8027116:	e0cc      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8027118:	4b68      	ldr	r3, [pc, #416]	; (80272bc <HAL_RCC_ClockConfig+0x1b8>)
 802711a:	681b      	ldr	r3, [r3, #0]
 802711c:	f003 030f 	and.w	r3, r3, #15
 8027120:	683a      	ldr	r2, [r7, #0]
 8027122:	429a      	cmp	r2, r3
 8027124:	d90c      	bls.n	8027140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027126:	4b65      	ldr	r3, [pc, #404]	; (80272bc <HAL_RCC_ClockConfig+0x1b8>)
 8027128:	683a      	ldr	r2, [r7, #0]
 802712a:	b2d2      	uxtb	r2, r2
 802712c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802712e:	4b63      	ldr	r3, [pc, #396]	; (80272bc <HAL_RCC_ClockConfig+0x1b8>)
 8027130:	681b      	ldr	r3, [r3, #0]
 8027132:	f003 030f 	and.w	r3, r3, #15
 8027136:	683a      	ldr	r2, [r7, #0]
 8027138:	429a      	cmp	r2, r3
 802713a:	d001      	beq.n	8027140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802713c:	2301      	movs	r3, #1
 802713e:	e0b8      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8027140:	687b      	ldr	r3, [r7, #4]
 8027142:	681b      	ldr	r3, [r3, #0]
 8027144:	f003 0302 	and.w	r3, r3, #2
 8027148:	2b00      	cmp	r3, #0
 802714a:	d020      	beq.n	802718e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802714c:	687b      	ldr	r3, [r7, #4]
 802714e:	681b      	ldr	r3, [r3, #0]
 8027150:	f003 0304 	and.w	r3, r3, #4
 8027154:	2b00      	cmp	r3, #0
 8027156:	d005      	beq.n	8027164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8027158:	4b59      	ldr	r3, [pc, #356]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 802715a:	689b      	ldr	r3, [r3, #8]
 802715c:	4a58      	ldr	r2, [pc, #352]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 802715e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8027162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027164:	687b      	ldr	r3, [r7, #4]
 8027166:	681b      	ldr	r3, [r3, #0]
 8027168:	f003 0308 	and.w	r3, r3, #8
 802716c:	2b00      	cmp	r3, #0
 802716e:	d005      	beq.n	802717c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8027170:	4b53      	ldr	r3, [pc, #332]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027172:	689b      	ldr	r3, [r3, #8]
 8027174:	4a52      	ldr	r2, [pc, #328]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802717a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802717c:	4b50      	ldr	r3, [pc, #320]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 802717e:	689b      	ldr	r3, [r3, #8]
 8027180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8027184:	687b      	ldr	r3, [r7, #4]
 8027186:	689b      	ldr	r3, [r3, #8]
 8027188:	494d      	ldr	r1, [pc, #308]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 802718a:	4313      	orrs	r3, r2
 802718c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802718e:	687b      	ldr	r3, [r7, #4]
 8027190:	681b      	ldr	r3, [r3, #0]
 8027192:	f003 0301 	and.w	r3, r3, #1
 8027196:	2b00      	cmp	r3, #0
 8027198:	d044      	beq.n	8027224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802719a:	687b      	ldr	r3, [r7, #4]
 802719c:	685b      	ldr	r3, [r3, #4]
 802719e:	2b01      	cmp	r3, #1
 80271a0:	d107      	bne.n	80271b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80271a2:	4b47      	ldr	r3, [pc, #284]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 80271a4:	681b      	ldr	r3, [r3, #0]
 80271a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80271aa:	2b00      	cmp	r3, #0
 80271ac:	d119      	bne.n	80271e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80271ae:	2301      	movs	r3, #1
 80271b0:	e07f      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80271b2:	687b      	ldr	r3, [r7, #4]
 80271b4:	685b      	ldr	r3, [r3, #4]
 80271b6:	2b02      	cmp	r3, #2
 80271b8:	d003      	beq.n	80271c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80271ba:	687b      	ldr	r3, [r7, #4]
 80271bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80271be:	2b03      	cmp	r3, #3
 80271c0:	d107      	bne.n	80271d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80271c2:	4b3f      	ldr	r3, [pc, #252]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 80271c4:	681b      	ldr	r3, [r3, #0]
 80271c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80271ca:	2b00      	cmp	r3, #0
 80271cc:	d109      	bne.n	80271e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80271ce:	2301      	movs	r3, #1
 80271d0:	e06f      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80271d2:	4b3b      	ldr	r3, [pc, #236]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 80271d4:	681b      	ldr	r3, [r3, #0]
 80271d6:	f003 0302 	and.w	r3, r3, #2
 80271da:	2b00      	cmp	r3, #0
 80271dc:	d101      	bne.n	80271e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80271de:	2301      	movs	r3, #1
 80271e0:	e067      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80271e2:	4b37      	ldr	r3, [pc, #220]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 80271e4:	689b      	ldr	r3, [r3, #8]
 80271e6:	f023 0203 	bic.w	r2, r3, #3
 80271ea:	687b      	ldr	r3, [r7, #4]
 80271ec:	685b      	ldr	r3, [r3, #4]
 80271ee:	4934      	ldr	r1, [pc, #208]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 80271f0:	4313      	orrs	r3, r2
 80271f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80271f4:	f7fa fcb8 	bl	8021b68 <HAL_GetTick>
 80271f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80271fa:	e00a      	b.n	8027212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80271fc:	f7fa fcb4 	bl	8021b68 <HAL_GetTick>
 8027200:	4602      	mov	r2, r0
 8027202:	68fb      	ldr	r3, [r7, #12]
 8027204:	1ad3      	subs	r3, r2, r3
 8027206:	f241 3288 	movw	r2, #5000	; 0x1388
 802720a:	4293      	cmp	r3, r2
 802720c:	d901      	bls.n	8027212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802720e:	2303      	movs	r3, #3
 8027210:	e04f      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027212:	4b2b      	ldr	r3, [pc, #172]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027214:	689b      	ldr	r3, [r3, #8]
 8027216:	f003 020c 	and.w	r2, r3, #12
 802721a:	687b      	ldr	r3, [r7, #4]
 802721c:	685b      	ldr	r3, [r3, #4]
 802721e:	009b      	lsls	r3, r3, #2
 8027220:	429a      	cmp	r2, r3
 8027222:	d1eb      	bne.n	80271fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8027224:	4b25      	ldr	r3, [pc, #148]	; (80272bc <HAL_RCC_ClockConfig+0x1b8>)
 8027226:	681b      	ldr	r3, [r3, #0]
 8027228:	f003 030f 	and.w	r3, r3, #15
 802722c:	683a      	ldr	r2, [r7, #0]
 802722e:	429a      	cmp	r2, r3
 8027230:	d20c      	bcs.n	802724c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027232:	4b22      	ldr	r3, [pc, #136]	; (80272bc <HAL_RCC_ClockConfig+0x1b8>)
 8027234:	683a      	ldr	r2, [r7, #0]
 8027236:	b2d2      	uxtb	r2, r2
 8027238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802723a:	4b20      	ldr	r3, [pc, #128]	; (80272bc <HAL_RCC_ClockConfig+0x1b8>)
 802723c:	681b      	ldr	r3, [r3, #0]
 802723e:	f003 030f 	and.w	r3, r3, #15
 8027242:	683a      	ldr	r2, [r7, #0]
 8027244:	429a      	cmp	r2, r3
 8027246:	d001      	beq.n	802724c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8027248:	2301      	movs	r3, #1
 802724a:	e032      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802724c:	687b      	ldr	r3, [r7, #4]
 802724e:	681b      	ldr	r3, [r3, #0]
 8027250:	f003 0304 	and.w	r3, r3, #4
 8027254:	2b00      	cmp	r3, #0
 8027256:	d008      	beq.n	802726a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8027258:	4b19      	ldr	r3, [pc, #100]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 802725a:	689b      	ldr	r3, [r3, #8]
 802725c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8027260:	687b      	ldr	r3, [r7, #4]
 8027262:	68db      	ldr	r3, [r3, #12]
 8027264:	4916      	ldr	r1, [pc, #88]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027266:	4313      	orrs	r3, r2
 8027268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802726a:	687b      	ldr	r3, [r7, #4]
 802726c:	681b      	ldr	r3, [r3, #0]
 802726e:	f003 0308 	and.w	r3, r3, #8
 8027272:	2b00      	cmp	r3, #0
 8027274:	d009      	beq.n	802728a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8027276:	4b12      	ldr	r3, [pc, #72]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027278:	689b      	ldr	r3, [r3, #8]
 802727a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802727e:	687b      	ldr	r3, [r7, #4]
 8027280:	691b      	ldr	r3, [r3, #16]
 8027282:	00db      	lsls	r3, r3, #3
 8027284:	490e      	ldr	r1, [pc, #56]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027286:	4313      	orrs	r3, r2
 8027288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802728a:	f000 f821 	bl	80272d0 <HAL_RCC_GetSysClockFreq>
 802728e:	4602      	mov	r2, r0
 8027290:	4b0b      	ldr	r3, [pc, #44]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027292:	689b      	ldr	r3, [r3, #8]
 8027294:	091b      	lsrs	r3, r3, #4
 8027296:	f003 030f 	and.w	r3, r3, #15
 802729a:	490a      	ldr	r1, [pc, #40]	; (80272c4 <HAL_RCC_ClockConfig+0x1c0>)
 802729c:	5ccb      	ldrb	r3, [r1, r3]
 802729e:	fa22 f303 	lsr.w	r3, r2, r3
 80272a2:	4a09      	ldr	r2, [pc, #36]	; (80272c8 <HAL_RCC_ClockConfig+0x1c4>)
 80272a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80272a6:	4b09      	ldr	r3, [pc, #36]	; (80272cc <HAL_RCC_ClockConfig+0x1c8>)
 80272a8:	681b      	ldr	r3, [r3, #0]
 80272aa:	4618      	mov	r0, r3
 80272ac:	f7fa fa52 	bl	8021754 <HAL_InitTick>

  return HAL_OK;
 80272b0:	2300      	movs	r3, #0
}
 80272b2:	4618      	mov	r0, r3
 80272b4:	3710      	adds	r7, #16
 80272b6:	46bd      	mov	sp, r7
 80272b8:	bd80      	pop	{r7, pc}
 80272ba:	bf00      	nop
 80272bc:	40023c00 	.word	0x40023c00
 80272c0:	40023800 	.word	0x40023800
 80272c4:	0803b668 	.word	0x0803b668
 80272c8:	20000004 	.word	0x20000004
 80272cc:	20000008 	.word	0x20000008

080272d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80272d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80272d4:	b090      	sub	sp, #64	; 0x40
 80272d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80272d8:	2300      	movs	r3, #0
 80272da:	637b      	str	r3, [r7, #52]	; 0x34
 80272dc:	2300      	movs	r3, #0
 80272de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80272e0:	2300      	movs	r3, #0
 80272e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80272e4:	2300      	movs	r3, #0
 80272e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80272e8:	4b59      	ldr	r3, [pc, #356]	; (8027450 <HAL_RCC_GetSysClockFreq+0x180>)
 80272ea:	689b      	ldr	r3, [r3, #8]
 80272ec:	f003 030c 	and.w	r3, r3, #12
 80272f0:	2b08      	cmp	r3, #8
 80272f2:	d00d      	beq.n	8027310 <HAL_RCC_GetSysClockFreq+0x40>
 80272f4:	2b08      	cmp	r3, #8
 80272f6:	f200 80a1 	bhi.w	802743c <HAL_RCC_GetSysClockFreq+0x16c>
 80272fa:	2b00      	cmp	r3, #0
 80272fc:	d002      	beq.n	8027304 <HAL_RCC_GetSysClockFreq+0x34>
 80272fe:	2b04      	cmp	r3, #4
 8027300:	d003      	beq.n	802730a <HAL_RCC_GetSysClockFreq+0x3a>
 8027302:	e09b      	b.n	802743c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8027304:	4b53      	ldr	r3, [pc, #332]	; (8027454 <HAL_RCC_GetSysClockFreq+0x184>)
 8027306:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8027308:	e09b      	b.n	8027442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802730a:	4b53      	ldr	r3, [pc, #332]	; (8027458 <HAL_RCC_GetSysClockFreq+0x188>)
 802730c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802730e:	e098      	b.n	8027442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8027310:	4b4f      	ldr	r3, [pc, #316]	; (8027450 <HAL_RCC_GetSysClockFreq+0x180>)
 8027312:	685b      	ldr	r3, [r3, #4]
 8027314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027318:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802731a:	4b4d      	ldr	r3, [pc, #308]	; (8027450 <HAL_RCC_GetSysClockFreq+0x180>)
 802731c:	685b      	ldr	r3, [r3, #4]
 802731e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027322:	2b00      	cmp	r3, #0
 8027324:	d028      	beq.n	8027378 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027326:	4b4a      	ldr	r3, [pc, #296]	; (8027450 <HAL_RCC_GetSysClockFreq+0x180>)
 8027328:	685b      	ldr	r3, [r3, #4]
 802732a:	099b      	lsrs	r3, r3, #6
 802732c:	2200      	movs	r2, #0
 802732e:	623b      	str	r3, [r7, #32]
 8027330:	627a      	str	r2, [r7, #36]	; 0x24
 8027332:	6a3b      	ldr	r3, [r7, #32]
 8027334:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8027338:	2100      	movs	r1, #0
 802733a:	4b47      	ldr	r3, [pc, #284]	; (8027458 <HAL_RCC_GetSysClockFreq+0x188>)
 802733c:	fb03 f201 	mul.w	r2, r3, r1
 8027340:	2300      	movs	r3, #0
 8027342:	fb00 f303 	mul.w	r3, r0, r3
 8027346:	4413      	add	r3, r2
 8027348:	4a43      	ldr	r2, [pc, #268]	; (8027458 <HAL_RCC_GetSysClockFreq+0x188>)
 802734a:	fba0 1202 	umull	r1, r2, r0, r2
 802734e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8027350:	460a      	mov	r2, r1
 8027352:	62ba      	str	r2, [r7, #40]	; 0x28
 8027354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027356:	4413      	add	r3, r2
 8027358:	62fb      	str	r3, [r7, #44]	; 0x2c
 802735a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802735c:	2200      	movs	r2, #0
 802735e:	61bb      	str	r3, [r7, #24]
 8027360:	61fa      	str	r2, [r7, #28]
 8027362:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027366:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802736a:	f7f8 ff99 	bl	80202a0 <__aeabi_uldivmod>
 802736e:	4602      	mov	r2, r0
 8027370:	460b      	mov	r3, r1
 8027372:	4613      	mov	r3, r2
 8027374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8027376:	e053      	b.n	8027420 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027378:	4b35      	ldr	r3, [pc, #212]	; (8027450 <HAL_RCC_GetSysClockFreq+0x180>)
 802737a:	685b      	ldr	r3, [r3, #4]
 802737c:	099b      	lsrs	r3, r3, #6
 802737e:	2200      	movs	r2, #0
 8027380:	613b      	str	r3, [r7, #16]
 8027382:	617a      	str	r2, [r7, #20]
 8027384:	693b      	ldr	r3, [r7, #16]
 8027386:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 802738a:	f04f 0b00 	mov.w	fp, #0
 802738e:	4652      	mov	r2, sl
 8027390:	465b      	mov	r3, fp
 8027392:	f04f 0000 	mov.w	r0, #0
 8027396:	f04f 0100 	mov.w	r1, #0
 802739a:	0159      	lsls	r1, r3, #5
 802739c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80273a0:	0150      	lsls	r0, r2, #5
 80273a2:	4602      	mov	r2, r0
 80273a4:	460b      	mov	r3, r1
 80273a6:	ebb2 080a 	subs.w	r8, r2, sl
 80273aa:	eb63 090b 	sbc.w	r9, r3, fp
 80273ae:	f04f 0200 	mov.w	r2, #0
 80273b2:	f04f 0300 	mov.w	r3, #0
 80273b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80273ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80273be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80273c2:	ebb2 0408 	subs.w	r4, r2, r8
 80273c6:	eb63 0509 	sbc.w	r5, r3, r9
 80273ca:	f04f 0200 	mov.w	r2, #0
 80273ce:	f04f 0300 	mov.w	r3, #0
 80273d2:	00eb      	lsls	r3, r5, #3
 80273d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80273d8:	00e2      	lsls	r2, r4, #3
 80273da:	4614      	mov	r4, r2
 80273dc:	461d      	mov	r5, r3
 80273de:	eb14 030a 	adds.w	r3, r4, sl
 80273e2:	603b      	str	r3, [r7, #0]
 80273e4:	eb45 030b 	adc.w	r3, r5, fp
 80273e8:	607b      	str	r3, [r7, #4]
 80273ea:	f04f 0200 	mov.w	r2, #0
 80273ee:	f04f 0300 	mov.w	r3, #0
 80273f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80273f6:	4629      	mov	r1, r5
 80273f8:	028b      	lsls	r3, r1, #10
 80273fa:	4621      	mov	r1, r4
 80273fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8027400:	4621      	mov	r1, r4
 8027402:	028a      	lsls	r2, r1, #10
 8027404:	4610      	mov	r0, r2
 8027406:	4619      	mov	r1, r3
 8027408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802740a:	2200      	movs	r2, #0
 802740c:	60bb      	str	r3, [r7, #8]
 802740e:	60fa      	str	r2, [r7, #12]
 8027410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8027414:	f7f8 ff44 	bl	80202a0 <__aeabi_uldivmod>
 8027418:	4602      	mov	r2, r0
 802741a:	460b      	mov	r3, r1
 802741c:	4613      	mov	r3, r2
 802741e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8027420:	4b0b      	ldr	r3, [pc, #44]	; (8027450 <HAL_RCC_GetSysClockFreq+0x180>)
 8027422:	685b      	ldr	r3, [r3, #4]
 8027424:	0c1b      	lsrs	r3, r3, #16
 8027426:	f003 0303 	and.w	r3, r3, #3
 802742a:	3301      	adds	r3, #1
 802742c:	005b      	lsls	r3, r3, #1
 802742e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8027430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8027432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027434:	fbb2 f3f3 	udiv	r3, r2, r3
 8027438:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802743a:	e002      	b.n	8027442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802743c:	4b05      	ldr	r3, [pc, #20]	; (8027454 <HAL_RCC_GetSysClockFreq+0x184>)
 802743e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8027440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8027442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8027444:	4618      	mov	r0, r3
 8027446:	3740      	adds	r7, #64	; 0x40
 8027448:	46bd      	mov	sp, r7
 802744a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802744e:	bf00      	nop
 8027450:	40023800 	.word	0x40023800
 8027454:	00f42400 	.word	0x00f42400
 8027458:	01c9c380 	.word	0x01c9c380

0802745c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802745c:	b480      	push	{r7}
 802745e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8027460:	4b03      	ldr	r3, [pc, #12]	; (8027470 <HAL_RCC_GetHCLKFreq+0x14>)
 8027462:	681b      	ldr	r3, [r3, #0]
}
 8027464:	4618      	mov	r0, r3
 8027466:	46bd      	mov	sp, r7
 8027468:	f85d 7b04 	ldr.w	r7, [sp], #4
 802746c:	4770      	bx	lr
 802746e:	bf00      	nop
 8027470:	20000004 	.word	0x20000004

08027474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8027474:	b580      	push	{r7, lr}
 8027476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8027478:	f7ff fff0 	bl	802745c <HAL_RCC_GetHCLKFreq>
 802747c:	4602      	mov	r2, r0
 802747e:	4b05      	ldr	r3, [pc, #20]	; (8027494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8027480:	689b      	ldr	r3, [r3, #8]
 8027482:	0a9b      	lsrs	r3, r3, #10
 8027484:	f003 0307 	and.w	r3, r3, #7
 8027488:	4903      	ldr	r1, [pc, #12]	; (8027498 <HAL_RCC_GetPCLK1Freq+0x24>)
 802748a:	5ccb      	ldrb	r3, [r1, r3]
 802748c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027490:	4618      	mov	r0, r3
 8027492:	bd80      	pop	{r7, pc}
 8027494:	40023800 	.word	0x40023800
 8027498:	0803b678 	.word	0x0803b678

0802749c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802749c:	b580      	push	{r7, lr}
 802749e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80274a0:	f7ff ffdc 	bl	802745c <HAL_RCC_GetHCLKFreq>
 80274a4:	4602      	mov	r2, r0
 80274a6:	4b05      	ldr	r3, [pc, #20]	; (80274bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80274a8:	689b      	ldr	r3, [r3, #8]
 80274aa:	0b5b      	lsrs	r3, r3, #13
 80274ac:	f003 0307 	and.w	r3, r3, #7
 80274b0:	4903      	ldr	r1, [pc, #12]	; (80274c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80274b2:	5ccb      	ldrb	r3, [r1, r3]
 80274b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80274b8:	4618      	mov	r0, r3
 80274ba:	bd80      	pop	{r7, pc}
 80274bc:	40023800 	.word	0x40023800
 80274c0:	0803b678 	.word	0x0803b678

080274c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80274c4:	b480      	push	{r7}
 80274c6:	b083      	sub	sp, #12
 80274c8:	af00      	add	r7, sp, #0
 80274ca:	6078      	str	r0, [r7, #4]
 80274cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80274ce:	687b      	ldr	r3, [r7, #4]
 80274d0:	220f      	movs	r2, #15
 80274d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80274d4:	4b12      	ldr	r3, [pc, #72]	; (8027520 <HAL_RCC_GetClockConfig+0x5c>)
 80274d6:	689b      	ldr	r3, [r3, #8]
 80274d8:	f003 0203 	and.w	r2, r3, #3
 80274dc:	687b      	ldr	r3, [r7, #4]
 80274de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80274e0:	4b0f      	ldr	r3, [pc, #60]	; (8027520 <HAL_RCC_GetClockConfig+0x5c>)
 80274e2:	689b      	ldr	r3, [r3, #8]
 80274e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80274e8:	687b      	ldr	r3, [r7, #4]
 80274ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80274ec:	4b0c      	ldr	r3, [pc, #48]	; (8027520 <HAL_RCC_GetClockConfig+0x5c>)
 80274ee:	689b      	ldr	r3, [r3, #8]
 80274f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80274f4:	687b      	ldr	r3, [r7, #4]
 80274f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80274f8:	4b09      	ldr	r3, [pc, #36]	; (8027520 <HAL_RCC_GetClockConfig+0x5c>)
 80274fa:	689b      	ldr	r3, [r3, #8]
 80274fc:	08db      	lsrs	r3, r3, #3
 80274fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027502:	687b      	ldr	r3, [r7, #4]
 8027504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027506:	4b07      	ldr	r3, [pc, #28]	; (8027524 <HAL_RCC_GetClockConfig+0x60>)
 8027508:	681b      	ldr	r3, [r3, #0]
 802750a:	f003 020f 	and.w	r2, r3, #15
 802750e:	683b      	ldr	r3, [r7, #0]
 8027510:	601a      	str	r2, [r3, #0]
}
 8027512:	bf00      	nop
 8027514:	370c      	adds	r7, #12
 8027516:	46bd      	mov	sp, r7
 8027518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802751c:	4770      	bx	lr
 802751e:	bf00      	nop
 8027520:	40023800 	.word	0x40023800
 8027524:	40023c00 	.word	0x40023c00

08027528 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027528:	b580      	push	{r7, lr}
 802752a:	b086      	sub	sp, #24
 802752c:	af00      	add	r7, sp, #0
 802752e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027530:	2300      	movs	r3, #0
 8027532:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8027534:	2300      	movs	r3, #0
 8027536:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027538:	687b      	ldr	r3, [r7, #4]
 802753a:	681b      	ldr	r3, [r3, #0]
 802753c:	f003 0301 	and.w	r3, r3, #1
 8027540:	2b00      	cmp	r3, #0
 8027542:	d105      	bne.n	8027550 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8027544:	687b      	ldr	r3, [r7, #4]
 8027546:	681b      	ldr	r3, [r3, #0]
 8027548:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802754c:	2b00      	cmp	r3, #0
 802754e:	d035      	beq.n	80275bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8027550:	4b62      	ldr	r3, [pc, #392]	; (80276dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8027552:	2200      	movs	r2, #0
 8027554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027556:	f7fa fb07 	bl	8021b68 <HAL_GetTick>
 802755a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802755c:	e008      	b.n	8027570 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802755e:	f7fa fb03 	bl	8021b68 <HAL_GetTick>
 8027562:	4602      	mov	r2, r0
 8027564:	697b      	ldr	r3, [r7, #20]
 8027566:	1ad3      	subs	r3, r2, r3
 8027568:	2b02      	cmp	r3, #2
 802756a:	d901      	bls.n	8027570 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802756c:	2303      	movs	r3, #3
 802756e:	e0b0      	b.n	80276d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027570:	4b5b      	ldr	r3, [pc, #364]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8027572:	681b      	ldr	r3, [r3, #0]
 8027574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027578:	2b00      	cmp	r3, #0
 802757a:	d1f0      	bne.n	802755e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 802757c:	687b      	ldr	r3, [r7, #4]
 802757e:	685b      	ldr	r3, [r3, #4]
 8027580:	019a      	lsls	r2, r3, #6
 8027582:	687b      	ldr	r3, [r7, #4]
 8027584:	689b      	ldr	r3, [r3, #8]
 8027586:	071b      	lsls	r3, r3, #28
 8027588:	4955      	ldr	r1, [pc, #340]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802758a:	4313      	orrs	r3, r2
 802758c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8027590:	4b52      	ldr	r3, [pc, #328]	; (80276dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8027592:	2201      	movs	r2, #1
 8027594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027596:	f7fa fae7 	bl	8021b68 <HAL_GetTick>
 802759a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802759c:	e008      	b.n	80275b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802759e:	f7fa fae3 	bl	8021b68 <HAL_GetTick>
 80275a2:	4602      	mov	r2, r0
 80275a4:	697b      	ldr	r3, [r7, #20]
 80275a6:	1ad3      	subs	r3, r2, r3
 80275a8:	2b02      	cmp	r3, #2
 80275aa:	d901      	bls.n	80275b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80275ac:	2303      	movs	r3, #3
 80275ae:	e090      	b.n	80276d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80275b0:	4b4b      	ldr	r3, [pc, #300]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80275b2:	681b      	ldr	r3, [r3, #0]
 80275b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80275b8:	2b00      	cmp	r3, #0
 80275ba:	d0f0      	beq.n	802759e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80275bc:	687b      	ldr	r3, [r7, #4]
 80275be:	681b      	ldr	r3, [r3, #0]
 80275c0:	f003 0302 	and.w	r3, r3, #2
 80275c4:	2b00      	cmp	r3, #0
 80275c6:	f000 8083 	beq.w	80276d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80275ca:	2300      	movs	r3, #0
 80275cc:	60fb      	str	r3, [r7, #12]
 80275ce:	4b44      	ldr	r3, [pc, #272]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80275d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80275d2:	4a43      	ldr	r2, [pc, #268]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80275d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80275d8:	6413      	str	r3, [r2, #64]	; 0x40
 80275da:	4b41      	ldr	r3, [pc, #260]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80275dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80275de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80275e2:	60fb      	str	r3, [r7, #12]
 80275e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80275e6:	4b3f      	ldr	r3, [pc, #252]	; (80276e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80275e8:	681b      	ldr	r3, [r3, #0]
 80275ea:	4a3e      	ldr	r2, [pc, #248]	; (80276e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80275ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80275f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80275f2:	f7fa fab9 	bl	8021b68 <HAL_GetTick>
 80275f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80275f8:	e008      	b.n	802760c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80275fa:	f7fa fab5 	bl	8021b68 <HAL_GetTick>
 80275fe:	4602      	mov	r2, r0
 8027600:	697b      	ldr	r3, [r7, #20]
 8027602:	1ad3      	subs	r3, r2, r3
 8027604:	2b02      	cmp	r3, #2
 8027606:	d901      	bls.n	802760c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8027608:	2303      	movs	r3, #3
 802760a:	e062      	b.n	80276d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 802760c:	4b35      	ldr	r3, [pc, #212]	; (80276e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802760e:	681b      	ldr	r3, [r3, #0]
 8027610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027614:	2b00      	cmp	r3, #0
 8027616:	d0f0      	beq.n	80275fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8027618:	4b31      	ldr	r3, [pc, #196]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802761a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802761c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027620:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8027622:	693b      	ldr	r3, [r7, #16]
 8027624:	2b00      	cmp	r3, #0
 8027626:	d02f      	beq.n	8027688 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8027628:	687b      	ldr	r3, [r7, #4]
 802762a:	68db      	ldr	r3, [r3, #12]
 802762c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027630:	693a      	ldr	r2, [r7, #16]
 8027632:	429a      	cmp	r2, r3
 8027634:	d028      	beq.n	8027688 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8027636:	4b2a      	ldr	r3, [pc, #168]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8027638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802763a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802763e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8027640:	4b29      	ldr	r3, [pc, #164]	; (80276e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8027642:	2201      	movs	r2, #1
 8027644:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8027646:	4b28      	ldr	r3, [pc, #160]	; (80276e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8027648:	2200      	movs	r2, #0
 802764a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 802764c:	4a24      	ldr	r2, [pc, #144]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802764e:	693b      	ldr	r3, [r7, #16]
 8027650:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8027652:	4b23      	ldr	r3, [pc, #140]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8027654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027656:	f003 0301 	and.w	r3, r3, #1
 802765a:	2b01      	cmp	r3, #1
 802765c:	d114      	bne.n	8027688 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 802765e:	f7fa fa83 	bl	8021b68 <HAL_GetTick>
 8027662:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027664:	e00a      	b.n	802767c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8027666:	f7fa fa7f 	bl	8021b68 <HAL_GetTick>
 802766a:	4602      	mov	r2, r0
 802766c:	697b      	ldr	r3, [r7, #20]
 802766e:	1ad3      	subs	r3, r2, r3
 8027670:	f241 3288 	movw	r2, #5000	; 0x1388
 8027674:	4293      	cmp	r3, r2
 8027676:	d901      	bls.n	802767c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8027678:	2303      	movs	r3, #3
 802767a:	e02a      	b.n	80276d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802767c:	4b18      	ldr	r3, [pc, #96]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802767e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027680:	f003 0302 	and.w	r3, r3, #2
 8027684:	2b00      	cmp	r3, #0
 8027686:	d0ee      	beq.n	8027666 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8027688:	687b      	ldr	r3, [r7, #4]
 802768a:	68db      	ldr	r3, [r3, #12]
 802768c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8027694:	d10d      	bne.n	80276b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8027696:	4b12      	ldr	r3, [pc, #72]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8027698:	689b      	ldr	r3, [r3, #8]
 802769a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802769e:	687b      	ldr	r3, [r7, #4]
 80276a0:	68db      	ldr	r3, [r3, #12]
 80276a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80276a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80276aa:	490d      	ldr	r1, [pc, #52]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80276ac:	4313      	orrs	r3, r2
 80276ae:	608b      	str	r3, [r1, #8]
 80276b0:	e005      	b.n	80276be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80276b2:	4b0b      	ldr	r3, [pc, #44]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80276b4:	689b      	ldr	r3, [r3, #8]
 80276b6:	4a0a      	ldr	r2, [pc, #40]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80276b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80276bc:	6093      	str	r3, [r2, #8]
 80276be:	4b08      	ldr	r3, [pc, #32]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80276c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80276c2:	687b      	ldr	r3, [r7, #4]
 80276c4:	68db      	ldr	r3, [r3, #12]
 80276c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80276ca:	4905      	ldr	r1, [pc, #20]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80276cc:	4313      	orrs	r3, r2
 80276ce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80276d0:	2300      	movs	r3, #0
}
 80276d2:	4618      	mov	r0, r3
 80276d4:	3718      	adds	r7, #24
 80276d6:	46bd      	mov	sp, r7
 80276d8:	bd80      	pop	{r7, pc}
 80276da:	bf00      	nop
 80276dc:	42470068 	.word	0x42470068
 80276e0:	40023800 	.word	0x40023800
 80276e4:	40007000 	.word	0x40007000
 80276e8:	42470e40 	.word	0x42470e40

080276ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80276ec:	b480      	push	{r7}
 80276ee:	b087      	sub	sp, #28
 80276f0:	af00      	add	r7, sp, #0
 80276f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80276f4:	2300      	movs	r3, #0
 80276f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80276f8:	2300      	movs	r3, #0
 80276fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80276fc:	2300      	movs	r3, #0
 80276fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8027700:	2300      	movs	r3, #0
 8027702:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8027704:	687b      	ldr	r3, [r7, #4]
 8027706:	2b01      	cmp	r3, #1
 8027708:	d13e      	bne.n	8027788 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 802770a:	4b23      	ldr	r3, [pc, #140]	; (8027798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 802770c:	689b      	ldr	r3, [r3, #8]
 802770e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8027712:	60fb      	str	r3, [r7, #12]
 8027714:	68fb      	ldr	r3, [r7, #12]
 8027716:	2b00      	cmp	r3, #0
 8027718:	d005      	beq.n	8027726 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 802771a:	68fb      	ldr	r3, [r7, #12]
 802771c:	2b01      	cmp	r3, #1
 802771e:	d12f      	bne.n	8027780 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8027720:	4b1e      	ldr	r3, [pc, #120]	; (802779c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8027722:	617b      	str	r3, [r7, #20]
          break;
 8027724:	e02f      	b.n	8027786 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8027726:	4b1c      	ldr	r3, [pc, #112]	; (8027798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8027728:	685b      	ldr	r3, [r3, #4]
 802772a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802772e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027732:	d108      	bne.n	8027746 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8027734:	4b18      	ldr	r3, [pc, #96]	; (8027798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8027736:	685b      	ldr	r3, [r3, #4]
 8027738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802773c:	4a18      	ldr	r2, [pc, #96]	; (80277a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 802773e:	fbb2 f3f3 	udiv	r3, r2, r3
 8027742:	613b      	str	r3, [r7, #16]
 8027744:	e007      	b.n	8027756 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8027746:	4b14      	ldr	r3, [pc, #80]	; (8027798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8027748:	685b      	ldr	r3, [r3, #4]
 802774a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802774e:	4a15      	ldr	r2, [pc, #84]	; (80277a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8027750:	fbb2 f3f3 	udiv	r3, r2, r3
 8027754:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8027756:	4b10      	ldr	r3, [pc, #64]	; (8027798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8027758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802775c:	099b      	lsrs	r3, r3, #6
 802775e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8027762:	693b      	ldr	r3, [r7, #16]
 8027764:	fb02 f303 	mul.w	r3, r2, r3
 8027768:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 802776a:	4b0b      	ldr	r3, [pc, #44]	; (8027798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 802776c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027770:	0f1b      	lsrs	r3, r3, #28
 8027772:	f003 0307 	and.w	r3, r3, #7
 8027776:	68ba      	ldr	r2, [r7, #8]
 8027778:	fbb2 f3f3 	udiv	r3, r2, r3
 802777c:	617b      	str	r3, [r7, #20]
          break;
 802777e:	e002      	b.n	8027786 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8027780:	2300      	movs	r3, #0
 8027782:	617b      	str	r3, [r7, #20]
          break;
 8027784:	bf00      	nop
        }
      }
      break;
 8027786:	bf00      	nop
    }
  }
  return frequency;
 8027788:	697b      	ldr	r3, [r7, #20]
}
 802778a:	4618      	mov	r0, r3
 802778c:	371c      	adds	r7, #28
 802778e:	46bd      	mov	sp, r7
 8027790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027794:	4770      	bx	lr
 8027796:	bf00      	nop
 8027798:	40023800 	.word	0x40023800
 802779c:	00bb8000 	.word	0x00bb8000
 80277a0:	01c9c380 	.word	0x01c9c380
 80277a4:	00f42400 	.word	0x00f42400

080277a8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80277a8:	b580      	push	{r7, lr}
 80277aa:	b082      	sub	sp, #8
 80277ac:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80277ae:	f7fa f9db 	bl	8021b68 <HAL_GetTick>
 80277b2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80277b4:	4b5d      	ldr	r3, [pc, #372]	; (802792c <HAL_RCC_DeInit+0x184>)
 80277b6:	681b      	ldr	r3, [r3, #0]
 80277b8:	4a5c      	ldr	r2, [pc, #368]	; (802792c <HAL_RCC_DeInit+0x184>)
 80277ba:	f043 0301 	orr.w	r3, r3, #1
 80277be:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80277c0:	e008      	b.n	80277d4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80277c2:	f7fa f9d1 	bl	8021b68 <HAL_GetTick>
 80277c6:	4602      	mov	r2, r0
 80277c8:	687b      	ldr	r3, [r7, #4]
 80277ca:	1ad3      	subs	r3, r2, r3
 80277cc:	2b02      	cmp	r3, #2
 80277ce:	d901      	bls.n	80277d4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80277d0:	2303      	movs	r3, #3
 80277d2:	e0a7      	b.n	8027924 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80277d4:	4b55      	ldr	r3, [pc, #340]	; (802792c <HAL_RCC_DeInit+0x184>)
 80277d6:	681b      	ldr	r3, [r3, #0]
 80277d8:	f003 0302 	and.w	r3, r3, #2
 80277dc:	2b00      	cmp	r3, #0
 80277de:	d0f0      	beq.n	80277c2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80277e0:	4b52      	ldr	r3, [pc, #328]	; (802792c <HAL_RCC_DeInit+0x184>)
 80277e2:	681b      	ldr	r3, [r3, #0]
 80277e4:	4a51      	ldr	r2, [pc, #324]	; (802792c <HAL_RCC_DeInit+0x184>)
 80277e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80277ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80277ec:	f7fa f9bc 	bl	8021b68 <HAL_GetTick>
 80277f0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80277f2:	4b4e      	ldr	r3, [pc, #312]	; (802792c <HAL_RCC_DeInit+0x184>)
 80277f4:	2200      	movs	r2, #0
 80277f6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80277f8:	e00a      	b.n	8027810 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80277fa:	f7fa f9b5 	bl	8021b68 <HAL_GetTick>
 80277fe:	4602      	mov	r2, r0
 8027800:	687b      	ldr	r3, [r7, #4]
 8027802:	1ad3      	subs	r3, r2, r3
 8027804:	f241 3288 	movw	r2, #5000	; 0x1388
 8027808:	4293      	cmp	r3, r2
 802780a:	d901      	bls.n	8027810 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 802780c:	2303      	movs	r3, #3
 802780e:	e089      	b.n	8027924 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8027810:	4b46      	ldr	r3, [pc, #280]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027812:	689b      	ldr	r3, [r3, #8]
 8027814:	f003 030c 	and.w	r3, r3, #12
 8027818:	2b00      	cmp	r3, #0
 802781a:	d1ee      	bne.n	80277fa <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 802781c:	f7fa f9a4 	bl	8021b68 <HAL_GetTick>
 8027820:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8027822:	4b42      	ldr	r3, [pc, #264]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027824:	681b      	ldr	r3, [r3, #0]
 8027826:	4a41      	ldr	r2, [pc, #260]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027828:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 802782c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 802782e:	e008      	b.n	8027842 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8027830:	f7fa f99a 	bl	8021b68 <HAL_GetTick>
 8027834:	4602      	mov	r2, r0
 8027836:	687b      	ldr	r3, [r7, #4]
 8027838:	1ad3      	subs	r3, r2, r3
 802783a:	2b64      	cmp	r3, #100	; 0x64
 802783c:	d901      	bls.n	8027842 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 802783e:	2303      	movs	r3, #3
 8027840:	e070      	b.n	8027924 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8027842:	4b3a      	ldr	r3, [pc, #232]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027844:	681b      	ldr	r3, [r3, #0]
 8027846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802784a:	2b00      	cmp	r3, #0
 802784c:	d1f0      	bne.n	8027830 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 802784e:	f7fa f98b 	bl	8021b68 <HAL_GetTick>
 8027852:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8027854:	4b35      	ldr	r3, [pc, #212]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027856:	681b      	ldr	r3, [r3, #0]
 8027858:	4a34      	ldr	r2, [pc, #208]	; (802792c <HAL_RCC_DeInit+0x184>)
 802785a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802785e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8027860:	e008      	b.n	8027874 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027862:	f7fa f981 	bl	8021b68 <HAL_GetTick>
 8027866:	4602      	mov	r2, r0
 8027868:	687b      	ldr	r3, [r7, #4]
 802786a:	1ad3      	subs	r3, r2, r3
 802786c:	2b02      	cmp	r3, #2
 802786e:	d901      	bls.n	8027874 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8027870:	2303      	movs	r3, #3
 8027872:	e057      	b.n	8027924 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8027874:	4b2d      	ldr	r3, [pc, #180]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027876:	681b      	ldr	r3, [r3, #0]
 8027878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802787c:	2b00      	cmp	r3, #0
 802787e:	d1f0      	bne.n	8027862 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8027880:	f7fa f972 	bl	8021b68 <HAL_GetTick>
 8027884:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8027886:	4b29      	ldr	r3, [pc, #164]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027888:	681b      	ldr	r3, [r3, #0]
 802788a:	4a28      	ldr	r2, [pc, #160]	; (802792c <HAL_RCC_DeInit+0x184>)
 802788c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8027890:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8027892:	e008      	b.n	80278a6 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8027894:	f7fa f968 	bl	8021b68 <HAL_GetTick>
 8027898:	4602      	mov	r2, r0
 802789a:	687b      	ldr	r3, [r7, #4]
 802789c:	1ad3      	subs	r3, r2, r3
 802789e:	2b02      	cmp	r3, #2
 80278a0:	d901      	bls.n	80278a6 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80278a2:	2303      	movs	r3, #3
 80278a4:	e03e      	b.n	8027924 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80278a6:	4b21      	ldr	r3, [pc, #132]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278a8:	681b      	ldr	r3, [r3, #0]
 80278aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80278ae:	2b00      	cmp	r3, #0
 80278b0:	d1f0      	bne.n	8027894 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80278b2:	4b1e      	ldr	r3, [pc, #120]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278b4:	4a1e      	ldr	r2, [pc, #120]	; (8027930 <HAL_RCC_DeInit+0x188>)
 80278b6:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80278b8:	4b1c      	ldr	r3, [pc, #112]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278ba:	4a1e      	ldr	r2, [pc, #120]	; (8027934 <HAL_RCC_DeInit+0x18c>)
 80278bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80278c0:	4b1a      	ldr	r3, [pc, #104]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278c2:	68db      	ldr	r3, [r3, #12]
 80278c4:	4a19      	ldr	r2, [pc, #100]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278c6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80278ca:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80278cc:	4b17      	ldr	r3, [pc, #92]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278ce:	68db      	ldr	r3, [r3, #12]
 80278d0:	4a16      	ldr	r2, [pc, #88]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80278d6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80278d8:	4b14      	ldr	r3, [pc, #80]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278da:	68db      	ldr	r3, [r3, #12]
 80278dc:	4a13      	ldr	r2, [pc, #76]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278de:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80278e2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80278e4:	4b11      	ldr	r3, [pc, #68]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278e6:	68db      	ldr	r3, [r3, #12]
 80278e8:	4a10      	ldr	r2, [pc, #64]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80278ee:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80278f0:	4b0e      	ldr	r3, [pc, #56]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80278f4:	4a0d      	ldr	r2, [pc, #52]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278f6:	f023 0301 	bic.w	r3, r3, #1
 80278fa:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80278fc:	4b0b      	ldr	r3, [pc, #44]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027900:	4a0a      	ldr	r2, [pc, #40]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027906:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8027908:	4b0b      	ldr	r3, [pc, #44]	; (8027938 <HAL_RCC_DeInit+0x190>)
 802790a:	4a0c      	ldr	r2, [pc, #48]	; (802793c <HAL_RCC_DeInit+0x194>)
 802790c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 802790e:	4b0c      	ldr	r3, [pc, #48]	; (8027940 <HAL_RCC_DeInit+0x198>)
 8027910:	681b      	ldr	r3, [r3, #0]
 8027912:	4618      	mov	r0, r3
 8027914:	f7f9 ff1e 	bl	8021754 <HAL_InitTick>
 8027918:	4603      	mov	r3, r0
 802791a:	2b00      	cmp	r3, #0
 802791c:	d001      	beq.n	8027922 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 802791e:	2301      	movs	r3, #1
 8027920:	e000      	b.n	8027924 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8027922:	2300      	movs	r3, #0
  }
}
 8027924:	4618      	mov	r0, r3
 8027926:	3708      	adds	r7, #8
 8027928:	46bd      	mov	sp, r7
 802792a:	bd80      	pop	{r7, pc}
 802792c:	40023800 	.word	0x40023800
 8027930:	04003010 	.word	0x04003010
 8027934:	20003000 	.word	0x20003000
 8027938:	20000004 	.word	0x20000004
 802793c:	00f42400 	.word	0x00f42400
 8027940:	20000008 	.word	0x20000008

08027944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8027944:	b580      	push	{r7, lr}
 8027946:	b082      	sub	sp, #8
 8027948:	af00      	add	r7, sp, #0
 802794a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802794c:	687b      	ldr	r3, [r7, #4]
 802794e:	2b00      	cmp	r3, #0
 8027950:	d101      	bne.n	8027956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8027952:	2301      	movs	r3, #1
 8027954:	e056      	b.n	8027a04 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8027956:	687b      	ldr	r3, [r7, #4]
 8027958:	2200      	movs	r2, #0
 802795a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802795c:	687b      	ldr	r3, [r7, #4]
 802795e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027962:	b2db      	uxtb	r3, r3
 8027964:	2b00      	cmp	r3, #0
 8027966:	d106      	bne.n	8027976 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8027968:	687b      	ldr	r3, [r7, #4]
 802796a:	2200      	movs	r2, #0
 802796c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8027970:	6878      	ldr	r0, [r7, #4]
 8027972:	f7f9 fcef 	bl	8021354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8027976:	687b      	ldr	r3, [r7, #4]
 8027978:	2202      	movs	r2, #2
 802797a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802797e:	687b      	ldr	r3, [r7, #4]
 8027980:	681b      	ldr	r3, [r3, #0]
 8027982:	681a      	ldr	r2, [r3, #0]
 8027984:	687b      	ldr	r3, [r7, #4]
 8027986:	681b      	ldr	r3, [r3, #0]
 8027988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802798c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 802798e:	687b      	ldr	r3, [r7, #4]
 8027990:	685a      	ldr	r2, [r3, #4]
 8027992:	687b      	ldr	r3, [r7, #4]
 8027994:	689b      	ldr	r3, [r3, #8]
 8027996:	431a      	orrs	r2, r3
 8027998:	687b      	ldr	r3, [r7, #4]
 802799a:	68db      	ldr	r3, [r3, #12]
 802799c:	431a      	orrs	r2, r3
 802799e:	687b      	ldr	r3, [r7, #4]
 80279a0:	691b      	ldr	r3, [r3, #16]
 80279a2:	431a      	orrs	r2, r3
 80279a4:	687b      	ldr	r3, [r7, #4]
 80279a6:	695b      	ldr	r3, [r3, #20]
 80279a8:	431a      	orrs	r2, r3
 80279aa:	687b      	ldr	r3, [r7, #4]
 80279ac:	699b      	ldr	r3, [r3, #24]
 80279ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80279b2:	431a      	orrs	r2, r3
 80279b4:	687b      	ldr	r3, [r7, #4]
 80279b6:	69db      	ldr	r3, [r3, #28]
 80279b8:	431a      	orrs	r2, r3
 80279ba:	687b      	ldr	r3, [r7, #4]
 80279bc:	6a1b      	ldr	r3, [r3, #32]
 80279be:	ea42 0103 	orr.w	r1, r2, r3
 80279c2:	687b      	ldr	r3, [r7, #4]
 80279c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80279c6:	687b      	ldr	r3, [r7, #4]
 80279c8:	681b      	ldr	r3, [r3, #0]
 80279ca:	430a      	orrs	r2, r1
 80279cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80279ce:	687b      	ldr	r3, [r7, #4]
 80279d0:	699b      	ldr	r3, [r3, #24]
 80279d2:	0c1b      	lsrs	r3, r3, #16
 80279d4:	f003 0104 	and.w	r1, r3, #4
 80279d8:	687b      	ldr	r3, [r7, #4]
 80279da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80279dc:	687b      	ldr	r3, [r7, #4]
 80279de:	681b      	ldr	r3, [r3, #0]
 80279e0:	430a      	orrs	r2, r1
 80279e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80279e4:	687b      	ldr	r3, [r7, #4]
 80279e6:	681b      	ldr	r3, [r3, #0]
 80279e8:	69da      	ldr	r2, [r3, #28]
 80279ea:	687b      	ldr	r3, [r7, #4]
 80279ec:	681b      	ldr	r3, [r3, #0]
 80279ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80279f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80279f4:	687b      	ldr	r3, [r7, #4]
 80279f6:	2200      	movs	r2, #0
 80279f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80279fa:	687b      	ldr	r3, [r7, #4]
 80279fc:	2201      	movs	r2, #1
 80279fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8027a02:	2300      	movs	r3, #0
}
 8027a04:	4618      	mov	r0, r3
 8027a06:	3708      	adds	r7, #8
 8027a08:	46bd      	mov	sp, r7
 8027a0a:	bd80      	pop	{r7, pc}

08027a0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8027a0c:	b580      	push	{r7, lr}
 8027a0e:	b08c      	sub	sp, #48	; 0x30
 8027a10:	af00      	add	r7, sp, #0
 8027a12:	60f8      	str	r0, [r7, #12]
 8027a14:	60b9      	str	r1, [r7, #8]
 8027a16:	607a      	str	r2, [r7, #4]
 8027a18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8027a1a:	2301      	movs	r3, #1
 8027a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8027a1e:	2300      	movs	r3, #0
 8027a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027a24:	68fb      	ldr	r3, [r7, #12]
 8027a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027a2a:	2b01      	cmp	r3, #1
 8027a2c:	d101      	bne.n	8027a32 <HAL_SPI_TransmitReceive+0x26>
 8027a2e:	2302      	movs	r3, #2
 8027a30:	e18a      	b.n	8027d48 <HAL_SPI_TransmitReceive+0x33c>
 8027a32:	68fb      	ldr	r3, [r7, #12]
 8027a34:	2201      	movs	r2, #1
 8027a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027a3a:	f7fa f895 	bl	8021b68 <HAL_GetTick>
 8027a3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8027a40:	68fb      	ldr	r3, [r7, #12]
 8027a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8027a4a:	68fb      	ldr	r3, [r7, #12]
 8027a4c:	685b      	ldr	r3, [r3, #4]
 8027a4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8027a50:	887b      	ldrh	r3, [r7, #2]
 8027a52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8027a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027a58:	2b01      	cmp	r3, #1
 8027a5a:	d00f      	beq.n	8027a7c <HAL_SPI_TransmitReceive+0x70>
 8027a5c:	69fb      	ldr	r3, [r7, #28]
 8027a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027a62:	d107      	bne.n	8027a74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8027a64:	68fb      	ldr	r3, [r7, #12]
 8027a66:	689b      	ldr	r3, [r3, #8]
 8027a68:	2b00      	cmp	r3, #0
 8027a6a:	d103      	bne.n	8027a74 <HAL_SPI_TransmitReceive+0x68>
 8027a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027a70:	2b04      	cmp	r3, #4
 8027a72:	d003      	beq.n	8027a7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8027a74:	2302      	movs	r3, #2
 8027a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027a7a:	e15b      	b.n	8027d34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8027a7c:	68bb      	ldr	r3, [r7, #8]
 8027a7e:	2b00      	cmp	r3, #0
 8027a80:	d005      	beq.n	8027a8e <HAL_SPI_TransmitReceive+0x82>
 8027a82:	687b      	ldr	r3, [r7, #4]
 8027a84:	2b00      	cmp	r3, #0
 8027a86:	d002      	beq.n	8027a8e <HAL_SPI_TransmitReceive+0x82>
 8027a88:	887b      	ldrh	r3, [r7, #2]
 8027a8a:	2b00      	cmp	r3, #0
 8027a8c:	d103      	bne.n	8027a96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8027a8e:	2301      	movs	r3, #1
 8027a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027a94:	e14e      	b.n	8027d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8027a96:	68fb      	ldr	r3, [r7, #12]
 8027a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027a9c:	b2db      	uxtb	r3, r3
 8027a9e:	2b04      	cmp	r3, #4
 8027aa0:	d003      	beq.n	8027aaa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8027aa2:	68fb      	ldr	r3, [r7, #12]
 8027aa4:	2205      	movs	r2, #5
 8027aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027aaa:	68fb      	ldr	r3, [r7, #12]
 8027aac:	2200      	movs	r2, #0
 8027aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8027ab0:	68fb      	ldr	r3, [r7, #12]
 8027ab2:	687a      	ldr	r2, [r7, #4]
 8027ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8027ab6:	68fb      	ldr	r3, [r7, #12]
 8027ab8:	887a      	ldrh	r2, [r7, #2]
 8027aba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8027abc:	68fb      	ldr	r3, [r7, #12]
 8027abe:	887a      	ldrh	r2, [r7, #2]
 8027ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8027ac2:	68fb      	ldr	r3, [r7, #12]
 8027ac4:	68ba      	ldr	r2, [r7, #8]
 8027ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8027ac8:	68fb      	ldr	r3, [r7, #12]
 8027aca:	887a      	ldrh	r2, [r7, #2]
 8027acc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8027ace:	68fb      	ldr	r3, [r7, #12]
 8027ad0:	887a      	ldrh	r2, [r7, #2]
 8027ad2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8027ad4:	68fb      	ldr	r3, [r7, #12]
 8027ad6:	2200      	movs	r2, #0
 8027ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027ada:	68fb      	ldr	r3, [r7, #12]
 8027adc:	2200      	movs	r2, #0
 8027ade:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027ae0:	68fb      	ldr	r3, [r7, #12]
 8027ae2:	681b      	ldr	r3, [r3, #0]
 8027ae4:	681b      	ldr	r3, [r3, #0]
 8027ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027aea:	2b40      	cmp	r3, #64	; 0x40
 8027aec:	d007      	beq.n	8027afe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027aee:	68fb      	ldr	r3, [r7, #12]
 8027af0:	681b      	ldr	r3, [r3, #0]
 8027af2:	681a      	ldr	r2, [r3, #0]
 8027af4:	68fb      	ldr	r3, [r7, #12]
 8027af6:	681b      	ldr	r3, [r3, #0]
 8027af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027afc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8027afe:	68fb      	ldr	r3, [r7, #12]
 8027b00:	68db      	ldr	r3, [r3, #12]
 8027b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027b06:	d178      	bne.n	8027bfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027b08:	68fb      	ldr	r3, [r7, #12]
 8027b0a:	685b      	ldr	r3, [r3, #4]
 8027b0c:	2b00      	cmp	r3, #0
 8027b0e:	d002      	beq.n	8027b16 <HAL_SPI_TransmitReceive+0x10a>
 8027b10:	8b7b      	ldrh	r3, [r7, #26]
 8027b12:	2b01      	cmp	r3, #1
 8027b14:	d166      	bne.n	8027be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027b16:	68fb      	ldr	r3, [r7, #12]
 8027b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b1a:	881a      	ldrh	r2, [r3, #0]
 8027b1c:	68fb      	ldr	r3, [r7, #12]
 8027b1e:	681b      	ldr	r3, [r3, #0]
 8027b20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8027b22:	68fb      	ldr	r3, [r7, #12]
 8027b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b26:	1c9a      	adds	r2, r3, #2
 8027b28:	68fb      	ldr	r3, [r7, #12]
 8027b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027b2c:	68fb      	ldr	r3, [r7, #12]
 8027b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027b30:	b29b      	uxth	r3, r3
 8027b32:	3b01      	subs	r3, #1
 8027b34:	b29a      	uxth	r2, r3
 8027b36:	68fb      	ldr	r3, [r7, #12]
 8027b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027b3a:	e053      	b.n	8027be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027b3c:	68fb      	ldr	r3, [r7, #12]
 8027b3e:	681b      	ldr	r3, [r3, #0]
 8027b40:	689b      	ldr	r3, [r3, #8]
 8027b42:	f003 0302 	and.w	r3, r3, #2
 8027b46:	2b02      	cmp	r3, #2
 8027b48:	d11b      	bne.n	8027b82 <HAL_SPI_TransmitReceive+0x176>
 8027b4a:	68fb      	ldr	r3, [r7, #12]
 8027b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027b4e:	b29b      	uxth	r3, r3
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	d016      	beq.n	8027b82 <HAL_SPI_TransmitReceive+0x176>
 8027b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b56:	2b01      	cmp	r3, #1
 8027b58:	d113      	bne.n	8027b82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027b5a:	68fb      	ldr	r3, [r7, #12]
 8027b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b5e:	881a      	ldrh	r2, [r3, #0]
 8027b60:	68fb      	ldr	r3, [r7, #12]
 8027b62:	681b      	ldr	r3, [r3, #0]
 8027b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027b66:	68fb      	ldr	r3, [r7, #12]
 8027b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b6a:	1c9a      	adds	r2, r3, #2
 8027b6c:	68fb      	ldr	r3, [r7, #12]
 8027b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027b70:	68fb      	ldr	r3, [r7, #12]
 8027b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027b74:	b29b      	uxth	r3, r3
 8027b76:	3b01      	subs	r3, #1
 8027b78:	b29a      	uxth	r2, r3
 8027b7a:	68fb      	ldr	r3, [r7, #12]
 8027b7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027b7e:	2300      	movs	r3, #0
 8027b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027b82:	68fb      	ldr	r3, [r7, #12]
 8027b84:	681b      	ldr	r3, [r3, #0]
 8027b86:	689b      	ldr	r3, [r3, #8]
 8027b88:	f003 0301 	and.w	r3, r3, #1
 8027b8c:	2b01      	cmp	r3, #1
 8027b8e:	d119      	bne.n	8027bc4 <HAL_SPI_TransmitReceive+0x1b8>
 8027b90:	68fb      	ldr	r3, [r7, #12]
 8027b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027b94:	b29b      	uxth	r3, r3
 8027b96:	2b00      	cmp	r3, #0
 8027b98:	d014      	beq.n	8027bc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027b9a:	68fb      	ldr	r3, [r7, #12]
 8027b9c:	681b      	ldr	r3, [r3, #0]
 8027b9e:	68da      	ldr	r2, [r3, #12]
 8027ba0:	68fb      	ldr	r3, [r7, #12]
 8027ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027ba4:	b292      	uxth	r2, r2
 8027ba6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027ba8:	68fb      	ldr	r3, [r7, #12]
 8027baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027bac:	1c9a      	adds	r2, r3, #2
 8027bae:	68fb      	ldr	r3, [r7, #12]
 8027bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027bb2:	68fb      	ldr	r3, [r7, #12]
 8027bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027bb6:	b29b      	uxth	r3, r3
 8027bb8:	3b01      	subs	r3, #1
 8027bba:	b29a      	uxth	r2, r3
 8027bbc:	68fb      	ldr	r3, [r7, #12]
 8027bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027bc0:	2301      	movs	r3, #1
 8027bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8027bc4:	f7f9 ffd0 	bl	8021b68 <HAL_GetTick>
 8027bc8:	4602      	mov	r2, r0
 8027bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027bcc:	1ad3      	subs	r3, r2, r3
 8027bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027bd0:	429a      	cmp	r2, r3
 8027bd2:	d807      	bhi.n	8027be4 <HAL_SPI_TransmitReceive+0x1d8>
 8027bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027bda:	d003      	beq.n	8027be4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8027bdc:	2303      	movs	r3, #3
 8027bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027be2:	e0a7      	b.n	8027d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027be4:	68fb      	ldr	r3, [r7, #12]
 8027be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027be8:	b29b      	uxth	r3, r3
 8027bea:	2b00      	cmp	r3, #0
 8027bec:	d1a6      	bne.n	8027b3c <HAL_SPI_TransmitReceive+0x130>
 8027bee:	68fb      	ldr	r3, [r7, #12]
 8027bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027bf2:	b29b      	uxth	r3, r3
 8027bf4:	2b00      	cmp	r3, #0
 8027bf6:	d1a1      	bne.n	8027b3c <HAL_SPI_TransmitReceive+0x130>
 8027bf8:	e07c      	b.n	8027cf4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027bfa:	68fb      	ldr	r3, [r7, #12]
 8027bfc:	685b      	ldr	r3, [r3, #4]
 8027bfe:	2b00      	cmp	r3, #0
 8027c00:	d002      	beq.n	8027c08 <HAL_SPI_TransmitReceive+0x1fc>
 8027c02:	8b7b      	ldrh	r3, [r7, #26]
 8027c04:	2b01      	cmp	r3, #1
 8027c06:	d16b      	bne.n	8027ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027c08:	68fb      	ldr	r3, [r7, #12]
 8027c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027c0c:	68fb      	ldr	r3, [r7, #12]
 8027c0e:	681b      	ldr	r3, [r3, #0]
 8027c10:	330c      	adds	r3, #12
 8027c12:	7812      	ldrb	r2, [r2, #0]
 8027c14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027c16:	68fb      	ldr	r3, [r7, #12]
 8027c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c1a:	1c5a      	adds	r2, r3, #1
 8027c1c:	68fb      	ldr	r3, [r7, #12]
 8027c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027c20:	68fb      	ldr	r3, [r7, #12]
 8027c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c24:	b29b      	uxth	r3, r3
 8027c26:	3b01      	subs	r3, #1
 8027c28:	b29a      	uxth	r2, r3
 8027c2a:	68fb      	ldr	r3, [r7, #12]
 8027c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027c2e:	e057      	b.n	8027ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027c30:	68fb      	ldr	r3, [r7, #12]
 8027c32:	681b      	ldr	r3, [r3, #0]
 8027c34:	689b      	ldr	r3, [r3, #8]
 8027c36:	f003 0302 	and.w	r3, r3, #2
 8027c3a:	2b02      	cmp	r3, #2
 8027c3c:	d11c      	bne.n	8027c78 <HAL_SPI_TransmitReceive+0x26c>
 8027c3e:	68fb      	ldr	r3, [r7, #12]
 8027c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c42:	b29b      	uxth	r3, r3
 8027c44:	2b00      	cmp	r3, #0
 8027c46:	d017      	beq.n	8027c78 <HAL_SPI_TransmitReceive+0x26c>
 8027c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027c4a:	2b01      	cmp	r3, #1
 8027c4c:	d114      	bne.n	8027c78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8027c4e:	68fb      	ldr	r3, [r7, #12]
 8027c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027c52:	68fb      	ldr	r3, [r7, #12]
 8027c54:	681b      	ldr	r3, [r3, #0]
 8027c56:	330c      	adds	r3, #12
 8027c58:	7812      	ldrb	r2, [r2, #0]
 8027c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8027c5c:	68fb      	ldr	r3, [r7, #12]
 8027c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c60:	1c5a      	adds	r2, r3, #1
 8027c62:	68fb      	ldr	r3, [r7, #12]
 8027c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027c66:	68fb      	ldr	r3, [r7, #12]
 8027c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c6a:	b29b      	uxth	r3, r3
 8027c6c:	3b01      	subs	r3, #1
 8027c6e:	b29a      	uxth	r2, r3
 8027c70:	68fb      	ldr	r3, [r7, #12]
 8027c72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027c74:	2300      	movs	r3, #0
 8027c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027c78:	68fb      	ldr	r3, [r7, #12]
 8027c7a:	681b      	ldr	r3, [r3, #0]
 8027c7c:	689b      	ldr	r3, [r3, #8]
 8027c7e:	f003 0301 	and.w	r3, r3, #1
 8027c82:	2b01      	cmp	r3, #1
 8027c84:	d119      	bne.n	8027cba <HAL_SPI_TransmitReceive+0x2ae>
 8027c86:	68fb      	ldr	r3, [r7, #12]
 8027c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c8a:	b29b      	uxth	r3, r3
 8027c8c:	2b00      	cmp	r3, #0
 8027c8e:	d014      	beq.n	8027cba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8027c90:	68fb      	ldr	r3, [r7, #12]
 8027c92:	681b      	ldr	r3, [r3, #0]
 8027c94:	68da      	ldr	r2, [r3, #12]
 8027c96:	68fb      	ldr	r3, [r7, #12]
 8027c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c9a:	b2d2      	uxtb	r2, r2
 8027c9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8027c9e:	68fb      	ldr	r3, [r7, #12]
 8027ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027ca2:	1c5a      	adds	r2, r3, #1
 8027ca4:	68fb      	ldr	r3, [r7, #12]
 8027ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027ca8:	68fb      	ldr	r3, [r7, #12]
 8027caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027cac:	b29b      	uxth	r3, r3
 8027cae:	3b01      	subs	r3, #1
 8027cb0:	b29a      	uxth	r2, r3
 8027cb2:	68fb      	ldr	r3, [r7, #12]
 8027cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027cb6:	2301      	movs	r3, #1
 8027cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8027cba:	f7f9 ff55 	bl	8021b68 <HAL_GetTick>
 8027cbe:	4602      	mov	r2, r0
 8027cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027cc2:	1ad3      	subs	r3, r2, r3
 8027cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027cc6:	429a      	cmp	r2, r3
 8027cc8:	d803      	bhi.n	8027cd2 <HAL_SPI_TransmitReceive+0x2c6>
 8027cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027cd0:	d102      	bne.n	8027cd8 <HAL_SPI_TransmitReceive+0x2cc>
 8027cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027cd4:	2b00      	cmp	r3, #0
 8027cd6:	d103      	bne.n	8027ce0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8027cd8:	2303      	movs	r3, #3
 8027cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027cde:	e029      	b.n	8027d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027ce0:	68fb      	ldr	r3, [r7, #12]
 8027ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027ce4:	b29b      	uxth	r3, r3
 8027ce6:	2b00      	cmp	r3, #0
 8027ce8:	d1a2      	bne.n	8027c30 <HAL_SPI_TransmitReceive+0x224>
 8027cea:	68fb      	ldr	r3, [r7, #12]
 8027cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027cee:	b29b      	uxth	r3, r3
 8027cf0:	2b00      	cmp	r3, #0
 8027cf2:	d19d      	bne.n	8027c30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027cf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8027cf8:	68f8      	ldr	r0, [r7, #12]
 8027cfa:	f000 f893 	bl	8027e24 <SPI_EndRxTxTransaction>
 8027cfe:	4603      	mov	r3, r0
 8027d00:	2b00      	cmp	r3, #0
 8027d02:	d006      	beq.n	8027d12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8027d04:	2301      	movs	r3, #1
 8027d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027d0a:	68fb      	ldr	r3, [r7, #12]
 8027d0c:	2220      	movs	r2, #32
 8027d0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8027d10:	e010      	b.n	8027d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027d12:	68fb      	ldr	r3, [r7, #12]
 8027d14:	689b      	ldr	r3, [r3, #8]
 8027d16:	2b00      	cmp	r3, #0
 8027d18:	d10b      	bne.n	8027d32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027d1a:	2300      	movs	r3, #0
 8027d1c:	617b      	str	r3, [r7, #20]
 8027d1e:	68fb      	ldr	r3, [r7, #12]
 8027d20:	681b      	ldr	r3, [r3, #0]
 8027d22:	68db      	ldr	r3, [r3, #12]
 8027d24:	617b      	str	r3, [r7, #20]
 8027d26:	68fb      	ldr	r3, [r7, #12]
 8027d28:	681b      	ldr	r3, [r3, #0]
 8027d2a:	689b      	ldr	r3, [r3, #8]
 8027d2c:	617b      	str	r3, [r7, #20]
 8027d2e:	697b      	ldr	r3, [r7, #20]
 8027d30:	e000      	b.n	8027d34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8027d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027d34:	68fb      	ldr	r3, [r7, #12]
 8027d36:	2201      	movs	r2, #1
 8027d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027d3c:	68fb      	ldr	r3, [r7, #12]
 8027d3e:	2200      	movs	r2, #0
 8027d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027d44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8027d48:	4618      	mov	r0, r3
 8027d4a:	3730      	adds	r7, #48	; 0x30
 8027d4c:	46bd      	mov	sp, r7
 8027d4e:	bd80      	pop	{r7, pc}

08027d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8027d50:	b580      	push	{r7, lr}
 8027d52:	b084      	sub	sp, #16
 8027d54:	af00      	add	r7, sp, #0
 8027d56:	60f8      	str	r0, [r7, #12]
 8027d58:	60b9      	str	r1, [r7, #8]
 8027d5a:	603b      	str	r3, [r7, #0]
 8027d5c:	4613      	mov	r3, r2
 8027d5e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8027d60:	e04c      	b.n	8027dfc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8027d62:	683b      	ldr	r3, [r7, #0]
 8027d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027d68:	d048      	beq.n	8027dfc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8027d6a:	f7f9 fefd 	bl	8021b68 <HAL_GetTick>
 8027d6e:	4602      	mov	r2, r0
 8027d70:	69bb      	ldr	r3, [r7, #24]
 8027d72:	1ad3      	subs	r3, r2, r3
 8027d74:	683a      	ldr	r2, [r7, #0]
 8027d76:	429a      	cmp	r2, r3
 8027d78:	d902      	bls.n	8027d80 <SPI_WaitFlagStateUntilTimeout+0x30>
 8027d7a:	683b      	ldr	r3, [r7, #0]
 8027d7c:	2b00      	cmp	r3, #0
 8027d7e:	d13d      	bne.n	8027dfc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8027d80:	68fb      	ldr	r3, [r7, #12]
 8027d82:	681b      	ldr	r3, [r3, #0]
 8027d84:	685a      	ldr	r2, [r3, #4]
 8027d86:	68fb      	ldr	r3, [r7, #12]
 8027d88:	681b      	ldr	r3, [r3, #0]
 8027d8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8027d8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027d90:	68fb      	ldr	r3, [r7, #12]
 8027d92:	685b      	ldr	r3, [r3, #4]
 8027d94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027d98:	d111      	bne.n	8027dbe <SPI_WaitFlagStateUntilTimeout+0x6e>
 8027d9a:	68fb      	ldr	r3, [r7, #12]
 8027d9c:	689b      	ldr	r3, [r3, #8]
 8027d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027da2:	d004      	beq.n	8027dae <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8027da4:	68fb      	ldr	r3, [r7, #12]
 8027da6:	689b      	ldr	r3, [r3, #8]
 8027da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027dac:	d107      	bne.n	8027dbe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8027dae:	68fb      	ldr	r3, [r7, #12]
 8027db0:	681b      	ldr	r3, [r3, #0]
 8027db2:	681a      	ldr	r2, [r3, #0]
 8027db4:	68fb      	ldr	r3, [r7, #12]
 8027db6:	681b      	ldr	r3, [r3, #0]
 8027db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027dbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8027dbe:	68fb      	ldr	r3, [r7, #12]
 8027dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027dc6:	d10f      	bne.n	8027de8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8027dc8:	68fb      	ldr	r3, [r7, #12]
 8027dca:	681b      	ldr	r3, [r3, #0]
 8027dcc:	681a      	ldr	r2, [r3, #0]
 8027dce:	68fb      	ldr	r3, [r7, #12]
 8027dd0:	681b      	ldr	r3, [r3, #0]
 8027dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8027dd6:	601a      	str	r2, [r3, #0]
 8027dd8:	68fb      	ldr	r3, [r7, #12]
 8027dda:	681b      	ldr	r3, [r3, #0]
 8027ddc:	681a      	ldr	r2, [r3, #0]
 8027dde:	68fb      	ldr	r3, [r7, #12]
 8027de0:	681b      	ldr	r3, [r3, #0]
 8027de2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8027de6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8027de8:	68fb      	ldr	r3, [r7, #12]
 8027dea:	2201      	movs	r2, #1
 8027dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8027df0:	68fb      	ldr	r3, [r7, #12]
 8027df2:	2200      	movs	r2, #0
 8027df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8027df8:	2303      	movs	r3, #3
 8027dfa:	e00f      	b.n	8027e1c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8027dfc:	68fb      	ldr	r3, [r7, #12]
 8027dfe:	681b      	ldr	r3, [r3, #0]
 8027e00:	689a      	ldr	r2, [r3, #8]
 8027e02:	68bb      	ldr	r3, [r7, #8]
 8027e04:	4013      	ands	r3, r2
 8027e06:	68ba      	ldr	r2, [r7, #8]
 8027e08:	429a      	cmp	r2, r3
 8027e0a:	bf0c      	ite	eq
 8027e0c:	2301      	moveq	r3, #1
 8027e0e:	2300      	movne	r3, #0
 8027e10:	b2db      	uxtb	r3, r3
 8027e12:	461a      	mov	r2, r3
 8027e14:	79fb      	ldrb	r3, [r7, #7]
 8027e16:	429a      	cmp	r2, r3
 8027e18:	d1a3      	bne.n	8027d62 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8027e1a:	2300      	movs	r3, #0
}
 8027e1c:	4618      	mov	r0, r3
 8027e1e:	3710      	adds	r7, #16
 8027e20:	46bd      	mov	sp, r7
 8027e22:	bd80      	pop	{r7, pc}

08027e24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8027e24:	b580      	push	{r7, lr}
 8027e26:	b088      	sub	sp, #32
 8027e28:	af02      	add	r7, sp, #8
 8027e2a:	60f8      	str	r0, [r7, #12]
 8027e2c:	60b9      	str	r1, [r7, #8]
 8027e2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8027e30:	4b1b      	ldr	r3, [pc, #108]	; (8027ea0 <SPI_EndRxTxTransaction+0x7c>)
 8027e32:	681b      	ldr	r3, [r3, #0]
 8027e34:	4a1b      	ldr	r2, [pc, #108]	; (8027ea4 <SPI_EndRxTxTransaction+0x80>)
 8027e36:	fba2 2303 	umull	r2, r3, r2, r3
 8027e3a:	0d5b      	lsrs	r3, r3, #21
 8027e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8027e40:	fb02 f303 	mul.w	r3, r2, r3
 8027e44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8027e46:	68fb      	ldr	r3, [r7, #12]
 8027e48:	685b      	ldr	r3, [r3, #4]
 8027e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027e4e:	d112      	bne.n	8027e76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8027e50:	687b      	ldr	r3, [r7, #4]
 8027e52:	9300      	str	r3, [sp, #0]
 8027e54:	68bb      	ldr	r3, [r7, #8]
 8027e56:	2200      	movs	r2, #0
 8027e58:	2180      	movs	r1, #128	; 0x80
 8027e5a:	68f8      	ldr	r0, [r7, #12]
 8027e5c:	f7ff ff78 	bl	8027d50 <SPI_WaitFlagStateUntilTimeout>
 8027e60:	4603      	mov	r3, r0
 8027e62:	2b00      	cmp	r3, #0
 8027e64:	d016      	beq.n	8027e94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027e66:	68fb      	ldr	r3, [r7, #12]
 8027e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027e6a:	f043 0220 	orr.w	r2, r3, #32
 8027e6e:	68fb      	ldr	r3, [r7, #12]
 8027e70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8027e72:	2303      	movs	r3, #3
 8027e74:	e00f      	b.n	8027e96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8027e76:	697b      	ldr	r3, [r7, #20]
 8027e78:	2b00      	cmp	r3, #0
 8027e7a:	d00a      	beq.n	8027e92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8027e7c:	697b      	ldr	r3, [r7, #20]
 8027e7e:	3b01      	subs	r3, #1
 8027e80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8027e82:	68fb      	ldr	r3, [r7, #12]
 8027e84:	681b      	ldr	r3, [r3, #0]
 8027e86:	689b      	ldr	r3, [r3, #8]
 8027e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027e8c:	2b80      	cmp	r3, #128	; 0x80
 8027e8e:	d0f2      	beq.n	8027e76 <SPI_EndRxTxTransaction+0x52>
 8027e90:	e000      	b.n	8027e94 <SPI_EndRxTxTransaction+0x70>
        break;
 8027e92:	bf00      	nop
  }

  return HAL_OK;
 8027e94:	2300      	movs	r3, #0
}
 8027e96:	4618      	mov	r0, r3
 8027e98:	3718      	adds	r7, #24
 8027e9a:	46bd      	mov	sp, r7
 8027e9c:	bd80      	pop	{r7, pc}
 8027e9e:	bf00      	nop
 8027ea0:	20000004 	.word	0x20000004
 8027ea4:	165e9f81 	.word	0x165e9f81

08027ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8027ea8:	b580      	push	{r7, lr}
 8027eaa:	b082      	sub	sp, #8
 8027eac:	af00      	add	r7, sp, #0
 8027eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8027eb0:	687b      	ldr	r3, [r7, #4]
 8027eb2:	2b00      	cmp	r3, #0
 8027eb4:	d101      	bne.n	8027eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8027eb6:	2301      	movs	r3, #1
 8027eb8:	e01d      	b.n	8027ef6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8027eba:	687b      	ldr	r3, [r7, #4]
 8027ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027ec0:	b2db      	uxtb	r3, r3
 8027ec2:	2b00      	cmp	r3, #0
 8027ec4:	d106      	bne.n	8027ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8027ec6:	687b      	ldr	r3, [r7, #4]
 8027ec8:	2200      	movs	r2, #0
 8027eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8027ece:	6878      	ldr	r0, [r7, #4]
 8027ed0:	f000 f815 	bl	8027efe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8027ed4:	687b      	ldr	r3, [r7, #4]
 8027ed6:	2202      	movs	r2, #2
 8027ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8027edc:	687b      	ldr	r3, [r7, #4]
 8027ede:	681a      	ldr	r2, [r3, #0]
 8027ee0:	687b      	ldr	r3, [r7, #4]
 8027ee2:	3304      	adds	r3, #4
 8027ee4:	4619      	mov	r1, r3
 8027ee6:	4610      	mov	r0, r2
 8027ee8:	f000 fa96 	bl	8028418 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8027eec:	687b      	ldr	r3, [r7, #4]
 8027eee:	2201      	movs	r2, #1
 8027ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8027ef4:	2300      	movs	r3, #0
}
 8027ef6:	4618      	mov	r0, r3
 8027ef8:	3708      	adds	r7, #8
 8027efa:	46bd      	mov	sp, r7
 8027efc:	bd80      	pop	{r7, pc}

08027efe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8027efe:	b480      	push	{r7}
 8027f00:	b083      	sub	sp, #12
 8027f02:	af00      	add	r7, sp, #0
 8027f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8027f06:	bf00      	nop
 8027f08:	370c      	adds	r7, #12
 8027f0a:	46bd      	mov	sp, r7
 8027f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f10:	4770      	bx	lr

08027f12 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8027f12:	b480      	push	{r7}
 8027f14:	b085      	sub	sp, #20
 8027f16:	af00      	add	r7, sp, #0
 8027f18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8027f1a:	687b      	ldr	r3, [r7, #4]
 8027f1c:	681b      	ldr	r3, [r3, #0]
 8027f1e:	68da      	ldr	r2, [r3, #12]
 8027f20:	687b      	ldr	r3, [r7, #4]
 8027f22:	681b      	ldr	r3, [r3, #0]
 8027f24:	f042 0201 	orr.w	r2, r2, #1
 8027f28:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8027f2a:	687b      	ldr	r3, [r7, #4]
 8027f2c:	681b      	ldr	r3, [r3, #0]
 8027f2e:	689b      	ldr	r3, [r3, #8]
 8027f30:	f003 0307 	and.w	r3, r3, #7
 8027f34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8027f36:	68fb      	ldr	r3, [r7, #12]
 8027f38:	2b06      	cmp	r3, #6
 8027f3a:	d007      	beq.n	8027f4c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8027f3c:	687b      	ldr	r3, [r7, #4]
 8027f3e:	681b      	ldr	r3, [r3, #0]
 8027f40:	681a      	ldr	r2, [r3, #0]
 8027f42:	687b      	ldr	r3, [r7, #4]
 8027f44:	681b      	ldr	r3, [r3, #0]
 8027f46:	f042 0201 	orr.w	r2, r2, #1
 8027f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8027f4c:	2300      	movs	r3, #0
}
 8027f4e:	4618      	mov	r0, r3
 8027f50:	3714      	adds	r7, #20
 8027f52:	46bd      	mov	sp, r7
 8027f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f58:	4770      	bx	lr

08027f5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8027f5a:	b580      	push	{r7, lr}
 8027f5c:	b082      	sub	sp, #8
 8027f5e:	af00      	add	r7, sp, #0
 8027f60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8027f62:	687b      	ldr	r3, [r7, #4]
 8027f64:	2b00      	cmp	r3, #0
 8027f66:	d101      	bne.n	8027f6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8027f68:	2301      	movs	r3, #1
 8027f6a:	e01d      	b.n	8027fa8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8027f6c:	687b      	ldr	r3, [r7, #4]
 8027f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027f72:	b2db      	uxtb	r3, r3
 8027f74:	2b00      	cmp	r3, #0
 8027f76:	d106      	bne.n	8027f86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8027f78:	687b      	ldr	r3, [r7, #4]
 8027f7a:	2200      	movs	r2, #0
 8027f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8027f80:	6878      	ldr	r0, [r7, #4]
 8027f82:	f7f9 faff 	bl	8021584 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8027f86:	687b      	ldr	r3, [r7, #4]
 8027f88:	2202      	movs	r2, #2
 8027f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8027f8e:	687b      	ldr	r3, [r7, #4]
 8027f90:	681a      	ldr	r2, [r3, #0]
 8027f92:	687b      	ldr	r3, [r7, #4]
 8027f94:	3304      	adds	r3, #4
 8027f96:	4619      	mov	r1, r3
 8027f98:	4610      	mov	r0, r2
 8027f9a:	f000 fa3d 	bl	8028418 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8027f9e:	687b      	ldr	r3, [r7, #4]
 8027fa0:	2201      	movs	r2, #1
 8027fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8027fa6:	2300      	movs	r3, #0
}
 8027fa8:	4618      	mov	r0, r3
 8027faa:	3708      	adds	r7, #8
 8027fac:	46bd      	mov	sp, r7
 8027fae:	bd80      	pop	{r7, pc}

08027fb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8027fb0:	b580      	push	{r7, lr}
 8027fb2:	b084      	sub	sp, #16
 8027fb4:	af00      	add	r7, sp, #0
 8027fb6:	6078      	str	r0, [r7, #4]
 8027fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8027fba:	687b      	ldr	r3, [r7, #4]
 8027fbc:	681b      	ldr	r3, [r3, #0]
 8027fbe:	2201      	movs	r2, #1
 8027fc0:	6839      	ldr	r1, [r7, #0]
 8027fc2:	4618      	mov	r0, r3
 8027fc4:	f000 fc78 	bl	80288b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8027fc8:	687b      	ldr	r3, [r7, #4]
 8027fca:	681b      	ldr	r3, [r3, #0]
 8027fcc:	4a15      	ldr	r2, [pc, #84]	; (8028024 <HAL_TIM_PWM_Start+0x74>)
 8027fce:	4293      	cmp	r3, r2
 8027fd0:	d004      	beq.n	8027fdc <HAL_TIM_PWM_Start+0x2c>
 8027fd2:	687b      	ldr	r3, [r7, #4]
 8027fd4:	681b      	ldr	r3, [r3, #0]
 8027fd6:	4a14      	ldr	r2, [pc, #80]	; (8028028 <HAL_TIM_PWM_Start+0x78>)
 8027fd8:	4293      	cmp	r3, r2
 8027fda:	d101      	bne.n	8027fe0 <HAL_TIM_PWM_Start+0x30>
 8027fdc:	2301      	movs	r3, #1
 8027fde:	e000      	b.n	8027fe2 <HAL_TIM_PWM_Start+0x32>
 8027fe0:	2300      	movs	r3, #0
 8027fe2:	2b00      	cmp	r3, #0
 8027fe4:	d007      	beq.n	8027ff6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8027fe6:	687b      	ldr	r3, [r7, #4]
 8027fe8:	681b      	ldr	r3, [r3, #0]
 8027fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8027fec:	687b      	ldr	r3, [r7, #4]
 8027fee:	681b      	ldr	r3, [r3, #0]
 8027ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8027ff4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8027ff6:	687b      	ldr	r3, [r7, #4]
 8027ff8:	681b      	ldr	r3, [r3, #0]
 8027ffa:	689b      	ldr	r3, [r3, #8]
 8027ffc:	f003 0307 	and.w	r3, r3, #7
 8028000:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028002:	68fb      	ldr	r3, [r7, #12]
 8028004:	2b06      	cmp	r3, #6
 8028006:	d007      	beq.n	8028018 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8028008:	687b      	ldr	r3, [r7, #4]
 802800a:	681b      	ldr	r3, [r3, #0]
 802800c:	681a      	ldr	r2, [r3, #0]
 802800e:	687b      	ldr	r3, [r7, #4]
 8028010:	681b      	ldr	r3, [r3, #0]
 8028012:	f042 0201 	orr.w	r2, r2, #1
 8028016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8028018:	2300      	movs	r3, #0
}
 802801a:	4618      	mov	r0, r3
 802801c:	3710      	adds	r7, #16
 802801e:	46bd      	mov	sp, r7
 8028020:	bd80      	pop	{r7, pc}
 8028022:	bf00      	nop
 8028024:	40010000 	.word	0x40010000
 8028028:	40010400 	.word	0x40010400

0802802c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802802c:	b580      	push	{r7, lr}
 802802e:	b082      	sub	sp, #8
 8028030:	af00      	add	r7, sp, #0
 8028032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028034:	687b      	ldr	r3, [r7, #4]
 8028036:	681b      	ldr	r3, [r3, #0]
 8028038:	691b      	ldr	r3, [r3, #16]
 802803a:	f003 0302 	and.w	r3, r3, #2
 802803e:	2b02      	cmp	r3, #2
 8028040:	d122      	bne.n	8028088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8028042:	687b      	ldr	r3, [r7, #4]
 8028044:	681b      	ldr	r3, [r3, #0]
 8028046:	68db      	ldr	r3, [r3, #12]
 8028048:	f003 0302 	and.w	r3, r3, #2
 802804c:	2b02      	cmp	r3, #2
 802804e:	d11b      	bne.n	8028088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8028050:	687b      	ldr	r3, [r7, #4]
 8028052:	681b      	ldr	r3, [r3, #0]
 8028054:	f06f 0202 	mvn.w	r2, #2
 8028058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802805a:	687b      	ldr	r3, [r7, #4]
 802805c:	2201      	movs	r2, #1
 802805e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8028060:	687b      	ldr	r3, [r7, #4]
 8028062:	681b      	ldr	r3, [r3, #0]
 8028064:	699b      	ldr	r3, [r3, #24]
 8028066:	f003 0303 	and.w	r3, r3, #3
 802806a:	2b00      	cmp	r3, #0
 802806c:	d003      	beq.n	8028076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802806e:	6878      	ldr	r0, [r7, #4]
 8028070:	f000 f9b4 	bl	80283dc <HAL_TIM_IC_CaptureCallback>
 8028074:	e005      	b.n	8028082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8028076:	6878      	ldr	r0, [r7, #4]
 8028078:	f000 f9a6 	bl	80283c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802807c:	6878      	ldr	r0, [r7, #4]
 802807e:	f000 f9b7 	bl	80283f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028082:	687b      	ldr	r3, [r7, #4]
 8028084:	2200      	movs	r2, #0
 8028086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8028088:	687b      	ldr	r3, [r7, #4]
 802808a:	681b      	ldr	r3, [r3, #0]
 802808c:	691b      	ldr	r3, [r3, #16]
 802808e:	f003 0304 	and.w	r3, r3, #4
 8028092:	2b04      	cmp	r3, #4
 8028094:	d122      	bne.n	80280dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8028096:	687b      	ldr	r3, [r7, #4]
 8028098:	681b      	ldr	r3, [r3, #0]
 802809a:	68db      	ldr	r3, [r3, #12]
 802809c:	f003 0304 	and.w	r3, r3, #4
 80280a0:	2b04      	cmp	r3, #4
 80280a2:	d11b      	bne.n	80280dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80280a4:	687b      	ldr	r3, [r7, #4]
 80280a6:	681b      	ldr	r3, [r3, #0]
 80280a8:	f06f 0204 	mvn.w	r2, #4
 80280ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80280ae:	687b      	ldr	r3, [r7, #4]
 80280b0:	2202      	movs	r2, #2
 80280b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80280b4:	687b      	ldr	r3, [r7, #4]
 80280b6:	681b      	ldr	r3, [r3, #0]
 80280b8:	699b      	ldr	r3, [r3, #24]
 80280ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80280be:	2b00      	cmp	r3, #0
 80280c0:	d003      	beq.n	80280ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80280c2:	6878      	ldr	r0, [r7, #4]
 80280c4:	f000 f98a 	bl	80283dc <HAL_TIM_IC_CaptureCallback>
 80280c8:	e005      	b.n	80280d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80280ca:	6878      	ldr	r0, [r7, #4]
 80280cc:	f000 f97c 	bl	80283c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80280d0:	6878      	ldr	r0, [r7, #4]
 80280d2:	f000 f98d 	bl	80283f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80280d6:	687b      	ldr	r3, [r7, #4]
 80280d8:	2200      	movs	r2, #0
 80280da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80280dc:	687b      	ldr	r3, [r7, #4]
 80280de:	681b      	ldr	r3, [r3, #0]
 80280e0:	691b      	ldr	r3, [r3, #16]
 80280e2:	f003 0308 	and.w	r3, r3, #8
 80280e6:	2b08      	cmp	r3, #8
 80280e8:	d122      	bne.n	8028130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80280ea:	687b      	ldr	r3, [r7, #4]
 80280ec:	681b      	ldr	r3, [r3, #0]
 80280ee:	68db      	ldr	r3, [r3, #12]
 80280f0:	f003 0308 	and.w	r3, r3, #8
 80280f4:	2b08      	cmp	r3, #8
 80280f6:	d11b      	bne.n	8028130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80280f8:	687b      	ldr	r3, [r7, #4]
 80280fa:	681b      	ldr	r3, [r3, #0]
 80280fc:	f06f 0208 	mvn.w	r2, #8
 8028100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8028102:	687b      	ldr	r3, [r7, #4]
 8028104:	2204      	movs	r2, #4
 8028106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8028108:	687b      	ldr	r3, [r7, #4]
 802810a:	681b      	ldr	r3, [r3, #0]
 802810c:	69db      	ldr	r3, [r3, #28]
 802810e:	f003 0303 	and.w	r3, r3, #3
 8028112:	2b00      	cmp	r3, #0
 8028114:	d003      	beq.n	802811e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028116:	6878      	ldr	r0, [r7, #4]
 8028118:	f000 f960 	bl	80283dc <HAL_TIM_IC_CaptureCallback>
 802811c:	e005      	b.n	802812a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802811e:	6878      	ldr	r0, [r7, #4]
 8028120:	f000 f952 	bl	80283c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028124:	6878      	ldr	r0, [r7, #4]
 8028126:	f000 f963 	bl	80283f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802812a:	687b      	ldr	r3, [r7, #4]
 802812c:	2200      	movs	r2, #0
 802812e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8028130:	687b      	ldr	r3, [r7, #4]
 8028132:	681b      	ldr	r3, [r3, #0]
 8028134:	691b      	ldr	r3, [r3, #16]
 8028136:	f003 0310 	and.w	r3, r3, #16
 802813a:	2b10      	cmp	r3, #16
 802813c:	d122      	bne.n	8028184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802813e:	687b      	ldr	r3, [r7, #4]
 8028140:	681b      	ldr	r3, [r3, #0]
 8028142:	68db      	ldr	r3, [r3, #12]
 8028144:	f003 0310 	and.w	r3, r3, #16
 8028148:	2b10      	cmp	r3, #16
 802814a:	d11b      	bne.n	8028184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802814c:	687b      	ldr	r3, [r7, #4]
 802814e:	681b      	ldr	r3, [r3, #0]
 8028150:	f06f 0210 	mvn.w	r2, #16
 8028154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8028156:	687b      	ldr	r3, [r7, #4]
 8028158:	2208      	movs	r2, #8
 802815a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802815c:	687b      	ldr	r3, [r7, #4]
 802815e:	681b      	ldr	r3, [r3, #0]
 8028160:	69db      	ldr	r3, [r3, #28]
 8028162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028166:	2b00      	cmp	r3, #0
 8028168:	d003      	beq.n	8028172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802816a:	6878      	ldr	r0, [r7, #4]
 802816c:	f000 f936 	bl	80283dc <HAL_TIM_IC_CaptureCallback>
 8028170:	e005      	b.n	802817e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028172:	6878      	ldr	r0, [r7, #4]
 8028174:	f000 f928 	bl	80283c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028178:	6878      	ldr	r0, [r7, #4]
 802817a:	f000 f939 	bl	80283f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802817e:	687b      	ldr	r3, [r7, #4]
 8028180:	2200      	movs	r2, #0
 8028182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8028184:	687b      	ldr	r3, [r7, #4]
 8028186:	681b      	ldr	r3, [r3, #0]
 8028188:	691b      	ldr	r3, [r3, #16]
 802818a:	f003 0301 	and.w	r3, r3, #1
 802818e:	2b01      	cmp	r3, #1
 8028190:	d10e      	bne.n	80281b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8028192:	687b      	ldr	r3, [r7, #4]
 8028194:	681b      	ldr	r3, [r3, #0]
 8028196:	68db      	ldr	r3, [r3, #12]
 8028198:	f003 0301 	and.w	r3, r3, #1
 802819c:	2b01      	cmp	r3, #1
 802819e:	d107      	bne.n	80281b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80281a0:	687b      	ldr	r3, [r7, #4]
 80281a2:	681b      	ldr	r3, [r3, #0]
 80281a4:	f06f 0201 	mvn.w	r2, #1
 80281a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80281aa:	6878      	ldr	r0, [r7, #4]
 80281ac:	f7f8 feb6 	bl	8020f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80281b0:	687b      	ldr	r3, [r7, #4]
 80281b2:	681b      	ldr	r3, [r3, #0]
 80281b4:	691b      	ldr	r3, [r3, #16]
 80281b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80281ba:	2b80      	cmp	r3, #128	; 0x80
 80281bc:	d10e      	bne.n	80281dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80281be:	687b      	ldr	r3, [r7, #4]
 80281c0:	681b      	ldr	r3, [r3, #0]
 80281c2:	68db      	ldr	r3, [r3, #12]
 80281c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80281c8:	2b80      	cmp	r3, #128	; 0x80
 80281ca:	d107      	bne.n	80281dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80281cc:	687b      	ldr	r3, [r7, #4]
 80281ce:	681b      	ldr	r3, [r3, #0]
 80281d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80281d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80281d6:	6878      	ldr	r0, [r7, #4]
 80281d8:	f000 fc44 	bl	8028a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80281dc:	687b      	ldr	r3, [r7, #4]
 80281de:	681b      	ldr	r3, [r3, #0]
 80281e0:	691b      	ldr	r3, [r3, #16]
 80281e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80281e6:	2b40      	cmp	r3, #64	; 0x40
 80281e8:	d10e      	bne.n	8028208 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80281ea:	687b      	ldr	r3, [r7, #4]
 80281ec:	681b      	ldr	r3, [r3, #0]
 80281ee:	68db      	ldr	r3, [r3, #12]
 80281f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80281f4:	2b40      	cmp	r3, #64	; 0x40
 80281f6:	d107      	bne.n	8028208 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80281f8:	687b      	ldr	r3, [r7, #4]
 80281fa:	681b      	ldr	r3, [r3, #0]
 80281fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8028200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8028202:	6878      	ldr	r0, [r7, #4]
 8028204:	f000 f8fe 	bl	8028404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8028208:	687b      	ldr	r3, [r7, #4]
 802820a:	681b      	ldr	r3, [r3, #0]
 802820c:	691b      	ldr	r3, [r3, #16]
 802820e:	f003 0320 	and.w	r3, r3, #32
 8028212:	2b20      	cmp	r3, #32
 8028214:	d10e      	bne.n	8028234 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8028216:	687b      	ldr	r3, [r7, #4]
 8028218:	681b      	ldr	r3, [r3, #0]
 802821a:	68db      	ldr	r3, [r3, #12]
 802821c:	f003 0320 	and.w	r3, r3, #32
 8028220:	2b20      	cmp	r3, #32
 8028222:	d107      	bne.n	8028234 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8028224:	687b      	ldr	r3, [r7, #4]
 8028226:	681b      	ldr	r3, [r3, #0]
 8028228:	f06f 0220 	mvn.w	r2, #32
 802822c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802822e:	6878      	ldr	r0, [r7, #4]
 8028230:	f000 fc0e 	bl	8028a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8028234:	bf00      	nop
 8028236:	3708      	adds	r7, #8
 8028238:	46bd      	mov	sp, r7
 802823a:	bd80      	pop	{r7, pc}

0802823c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802823c:	b580      	push	{r7, lr}
 802823e:	b084      	sub	sp, #16
 8028240:	af00      	add	r7, sp, #0
 8028242:	60f8      	str	r0, [r7, #12]
 8028244:	60b9      	str	r1, [r7, #8]
 8028246:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8028248:	68fb      	ldr	r3, [r7, #12]
 802824a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802824e:	2b01      	cmp	r3, #1
 8028250:	d101      	bne.n	8028256 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8028252:	2302      	movs	r3, #2
 8028254:	e0b4      	b.n	80283c0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8028256:	68fb      	ldr	r3, [r7, #12]
 8028258:	2201      	movs	r2, #1
 802825a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802825e:	68fb      	ldr	r3, [r7, #12]
 8028260:	2202      	movs	r2, #2
 8028262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8028266:	687b      	ldr	r3, [r7, #4]
 8028268:	2b0c      	cmp	r3, #12
 802826a:	f200 809f 	bhi.w	80283ac <HAL_TIM_PWM_ConfigChannel+0x170>
 802826e:	a201      	add	r2, pc, #4	; (adr r2, 8028274 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8028270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028274:	080282a9 	.word	0x080282a9
 8028278:	080283ad 	.word	0x080283ad
 802827c:	080283ad 	.word	0x080283ad
 8028280:	080283ad 	.word	0x080283ad
 8028284:	080282e9 	.word	0x080282e9
 8028288:	080283ad 	.word	0x080283ad
 802828c:	080283ad 	.word	0x080283ad
 8028290:	080283ad 	.word	0x080283ad
 8028294:	0802832b 	.word	0x0802832b
 8028298:	080283ad 	.word	0x080283ad
 802829c:	080283ad 	.word	0x080283ad
 80282a0:	080283ad 	.word	0x080283ad
 80282a4:	0802836b 	.word	0x0802836b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80282a8:	68fb      	ldr	r3, [r7, #12]
 80282aa:	681b      	ldr	r3, [r3, #0]
 80282ac:	68b9      	ldr	r1, [r7, #8]
 80282ae:	4618      	mov	r0, r3
 80282b0:	f000 f952 	bl	8028558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80282b4:	68fb      	ldr	r3, [r7, #12]
 80282b6:	681b      	ldr	r3, [r3, #0]
 80282b8:	699a      	ldr	r2, [r3, #24]
 80282ba:	68fb      	ldr	r3, [r7, #12]
 80282bc:	681b      	ldr	r3, [r3, #0]
 80282be:	f042 0208 	orr.w	r2, r2, #8
 80282c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80282c4:	68fb      	ldr	r3, [r7, #12]
 80282c6:	681b      	ldr	r3, [r3, #0]
 80282c8:	699a      	ldr	r2, [r3, #24]
 80282ca:	68fb      	ldr	r3, [r7, #12]
 80282cc:	681b      	ldr	r3, [r3, #0]
 80282ce:	f022 0204 	bic.w	r2, r2, #4
 80282d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80282d4:	68fb      	ldr	r3, [r7, #12]
 80282d6:	681b      	ldr	r3, [r3, #0]
 80282d8:	6999      	ldr	r1, [r3, #24]
 80282da:	68bb      	ldr	r3, [r7, #8]
 80282dc:	691a      	ldr	r2, [r3, #16]
 80282de:	68fb      	ldr	r3, [r7, #12]
 80282e0:	681b      	ldr	r3, [r3, #0]
 80282e2:	430a      	orrs	r2, r1
 80282e4:	619a      	str	r2, [r3, #24]
      break;
 80282e6:	e062      	b.n	80283ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80282e8:	68fb      	ldr	r3, [r7, #12]
 80282ea:	681b      	ldr	r3, [r3, #0]
 80282ec:	68b9      	ldr	r1, [r7, #8]
 80282ee:	4618      	mov	r0, r3
 80282f0:	f000 f9a2 	bl	8028638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80282f4:	68fb      	ldr	r3, [r7, #12]
 80282f6:	681b      	ldr	r3, [r3, #0]
 80282f8:	699a      	ldr	r2, [r3, #24]
 80282fa:	68fb      	ldr	r3, [r7, #12]
 80282fc:	681b      	ldr	r3, [r3, #0]
 80282fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8028302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8028304:	68fb      	ldr	r3, [r7, #12]
 8028306:	681b      	ldr	r3, [r3, #0]
 8028308:	699a      	ldr	r2, [r3, #24]
 802830a:	68fb      	ldr	r3, [r7, #12]
 802830c:	681b      	ldr	r3, [r3, #0]
 802830e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8028312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8028314:	68fb      	ldr	r3, [r7, #12]
 8028316:	681b      	ldr	r3, [r3, #0]
 8028318:	6999      	ldr	r1, [r3, #24]
 802831a:	68bb      	ldr	r3, [r7, #8]
 802831c:	691b      	ldr	r3, [r3, #16]
 802831e:	021a      	lsls	r2, r3, #8
 8028320:	68fb      	ldr	r3, [r7, #12]
 8028322:	681b      	ldr	r3, [r3, #0]
 8028324:	430a      	orrs	r2, r1
 8028326:	619a      	str	r2, [r3, #24]
      break;
 8028328:	e041      	b.n	80283ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802832a:	68fb      	ldr	r3, [r7, #12]
 802832c:	681b      	ldr	r3, [r3, #0]
 802832e:	68b9      	ldr	r1, [r7, #8]
 8028330:	4618      	mov	r0, r3
 8028332:	f000 f9f7 	bl	8028724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8028336:	68fb      	ldr	r3, [r7, #12]
 8028338:	681b      	ldr	r3, [r3, #0]
 802833a:	69da      	ldr	r2, [r3, #28]
 802833c:	68fb      	ldr	r3, [r7, #12]
 802833e:	681b      	ldr	r3, [r3, #0]
 8028340:	f042 0208 	orr.w	r2, r2, #8
 8028344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8028346:	68fb      	ldr	r3, [r7, #12]
 8028348:	681b      	ldr	r3, [r3, #0]
 802834a:	69da      	ldr	r2, [r3, #28]
 802834c:	68fb      	ldr	r3, [r7, #12]
 802834e:	681b      	ldr	r3, [r3, #0]
 8028350:	f022 0204 	bic.w	r2, r2, #4
 8028354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8028356:	68fb      	ldr	r3, [r7, #12]
 8028358:	681b      	ldr	r3, [r3, #0]
 802835a:	69d9      	ldr	r1, [r3, #28]
 802835c:	68bb      	ldr	r3, [r7, #8]
 802835e:	691a      	ldr	r2, [r3, #16]
 8028360:	68fb      	ldr	r3, [r7, #12]
 8028362:	681b      	ldr	r3, [r3, #0]
 8028364:	430a      	orrs	r2, r1
 8028366:	61da      	str	r2, [r3, #28]
      break;
 8028368:	e021      	b.n	80283ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802836a:	68fb      	ldr	r3, [r7, #12]
 802836c:	681b      	ldr	r3, [r3, #0]
 802836e:	68b9      	ldr	r1, [r7, #8]
 8028370:	4618      	mov	r0, r3
 8028372:	f000 fa4b 	bl	802880c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8028376:	68fb      	ldr	r3, [r7, #12]
 8028378:	681b      	ldr	r3, [r3, #0]
 802837a:	69da      	ldr	r2, [r3, #28]
 802837c:	68fb      	ldr	r3, [r7, #12]
 802837e:	681b      	ldr	r3, [r3, #0]
 8028380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8028384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8028386:	68fb      	ldr	r3, [r7, #12]
 8028388:	681b      	ldr	r3, [r3, #0]
 802838a:	69da      	ldr	r2, [r3, #28]
 802838c:	68fb      	ldr	r3, [r7, #12]
 802838e:	681b      	ldr	r3, [r3, #0]
 8028390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8028394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8028396:	68fb      	ldr	r3, [r7, #12]
 8028398:	681b      	ldr	r3, [r3, #0]
 802839a:	69d9      	ldr	r1, [r3, #28]
 802839c:	68bb      	ldr	r3, [r7, #8]
 802839e:	691b      	ldr	r3, [r3, #16]
 80283a0:	021a      	lsls	r2, r3, #8
 80283a2:	68fb      	ldr	r3, [r7, #12]
 80283a4:	681b      	ldr	r3, [r3, #0]
 80283a6:	430a      	orrs	r2, r1
 80283a8:	61da      	str	r2, [r3, #28]
      break;
 80283aa:	e000      	b.n	80283ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80283ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80283ae:	68fb      	ldr	r3, [r7, #12]
 80283b0:	2201      	movs	r2, #1
 80283b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80283b6:	68fb      	ldr	r3, [r7, #12]
 80283b8:	2200      	movs	r2, #0
 80283ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80283be:	2300      	movs	r3, #0
}
 80283c0:	4618      	mov	r0, r3
 80283c2:	3710      	adds	r7, #16
 80283c4:	46bd      	mov	sp, r7
 80283c6:	bd80      	pop	{r7, pc}

080283c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80283c8:	b480      	push	{r7}
 80283ca:	b083      	sub	sp, #12
 80283cc:	af00      	add	r7, sp, #0
 80283ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80283d0:	bf00      	nop
 80283d2:	370c      	adds	r7, #12
 80283d4:	46bd      	mov	sp, r7
 80283d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283da:	4770      	bx	lr

080283dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80283dc:	b480      	push	{r7}
 80283de:	b083      	sub	sp, #12
 80283e0:	af00      	add	r7, sp, #0
 80283e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80283e4:	bf00      	nop
 80283e6:	370c      	adds	r7, #12
 80283e8:	46bd      	mov	sp, r7
 80283ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283ee:	4770      	bx	lr

080283f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80283f0:	b480      	push	{r7}
 80283f2:	b083      	sub	sp, #12
 80283f4:	af00      	add	r7, sp, #0
 80283f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80283f8:	bf00      	nop
 80283fa:	370c      	adds	r7, #12
 80283fc:	46bd      	mov	sp, r7
 80283fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028402:	4770      	bx	lr

08028404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8028404:	b480      	push	{r7}
 8028406:	b083      	sub	sp, #12
 8028408:	af00      	add	r7, sp, #0
 802840a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802840c:	bf00      	nop
 802840e:	370c      	adds	r7, #12
 8028410:	46bd      	mov	sp, r7
 8028412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028416:	4770      	bx	lr

08028418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8028418:	b480      	push	{r7}
 802841a:	b085      	sub	sp, #20
 802841c:	af00      	add	r7, sp, #0
 802841e:	6078      	str	r0, [r7, #4]
 8028420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8028422:	687b      	ldr	r3, [r7, #4]
 8028424:	681b      	ldr	r3, [r3, #0]
 8028426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8028428:	687b      	ldr	r3, [r7, #4]
 802842a:	4a40      	ldr	r2, [pc, #256]	; (802852c <TIM_Base_SetConfig+0x114>)
 802842c:	4293      	cmp	r3, r2
 802842e:	d013      	beq.n	8028458 <TIM_Base_SetConfig+0x40>
 8028430:	687b      	ldr	r3, [r7, #4]
 8028432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028436:	d00f      	beq.n	8028458 <TIM_Base_SetConfig+0x40>
 8028438:	687b      	ldr	r3, [r7, #4]
 802843a:	4a3d      	ldr	r2, [pc, #244]	; (8028530 <TIM_Base_SetConfig+0x118>)
 802843c:	4293      	cmp	r3, r2
 802843e:	d00b      	beq.n	8028458 <TIM_Base_SetConfig+0x40>
 8028440:	687b      	ldr	r3, [r7, #4]
 8028442:	4a3c      	ldr	r2, [pc, #240]	; (8028534 <TIM_Base_SetConfig+0x11c>)
 8028444:	4293      	cmp	r3, r2
 8028446:	d007      	beq.n	8028458 <TIM_Base_SetConfig+0x40>
 8028448:	687b      	ldr	r3, [r7, #4]
 802844a:	4a3b      	ldr	r2, [pc, #236]	; (8028538 <TIM_Base_SetConfig+0x120>)
 802844c:	4293      	cmp	r3, r2
 802844e:	d003      	beq.n	8028458 <TIM_Base_SetConfig+0x40>
 8028450:	687b      	ldr	r3, [r7, #4]
 8028452:	4a3a      	ldr	r2, [pc, #232]	; (802853c <TIM_Base_SetConfig+0x124>)
 8028454:	4293      	cmp	r3, r2
 8028456:	d108      	bne.n	802846a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8028458:	68fb      	ldr	r3, [r7, #12]
 802845a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802845e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8028460:	683b      	ldr	r3, [r7, #0]
 8028462:	685b      	ldr	r3, [r3, #4]
 8028464:	68fa      	ldr	r2, [r7, #12]
 8028466:	4313      	orrs	r3, r2
 8028468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802846a:	687b      	ldr	r3, [r7, #4]
 802846c:	4a2f      	ldr	r2, [pc, #188]	; (802852c <TIM_Base_SetConfig+0x114>)
 802846e:	4293      	cmp	r3, r2
 8028470:	d02b      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 8028472:	687b      	ldr	r3, [r7, #4]
 8028474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028478:	d027      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 802847a:	687b      	ldr	r3, [r7, #4]
 802847c:	4a2c      	ldr	r2, [pc, #176]	; (8028530 <TIM_Base_SetConfig+0x118>)
 802847e:	4293      	cmp	r3, r2
 8028480:	d023      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 8028482:	687b      	ldr	r3, [r7, #4]
 8028484:	4a2b      	ldr	r2, [pc, #172]	; (8028534 <TIM_Base_SetConfig+0x11c>)
 8028486:	4293      	cmp	r3, r2
 8028488:	d01f      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 802848a:	687b      	ldr	r3, [r7, #4]
 802848c:	4a2a      	ldr	r2, [pc, #168]	; (8028538 <TIM_Base_SetConfig+0x120>)
 802848e:	4293      	cmp	r3, r2
 8028490:	d01b      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 8028492:	687b      	ldr	r3, [r7, #4]
 8028494:	4a29      	ldr	r2, [pc, #164]	; (802853c <TIM_Base_SetConfig+0x124>)
 8028496:	4293      	cmp	r3, r2
 8028498:	d017      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 802849a:	687b      	ldr	r3, [r7, #4]
 802849c:	4a28      	ldr	r2, [pc, #160]	; (8028540 <TIM_Base_SetConfig+0x128>)
 802849e:	4293      	cmp	r3, r2
 80284a0:	d013      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 80284a2:	687b      	ldr	r3, [r7, #4]
 80284a4:	4a27      	ldr	r2, [pc, #156]	; (8028544 <TIM_Base_SetConfig+0x12c>)
 80284a6:	4293      	cmp	r3, r2
 80284a8:	d00f      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 80284aa:	687b      	ldr	r3, [r7, #4]
 80284ac:	4a26      	ldr	r2, [pc, #152]	; (8028548 <TIM_Base_SetConfig+0x130>)
 80284ae:	4293      	cmp	r3, r2
 80284b0:	d00b      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 80284b2:	687b      	ldr	r3, [r7, #4]
 80284b4:	4a25      	ldr	r2, [pc, #148]	; (802854c <TIM_Base_SetConfig+0x134>)
 80284b6:	4293      	cmp	r3, r2
 80284b8:	d007      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 80284ba:	687b      	ldr	r3, [r7, #4]
 80284bc:	4a24      	ldr	r2, [pc, #144]	; (8028550 <TIM_Base_SetConfig+0x138>)
 80284be:	4293      	cmp	r3, r2
 80284c0:	d003      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 80284c2:	687b      	ldr	r3, [r7, #4]
 80284c4:	4a23      	ldr	r2, [pc, #140]	; (8028554 <TIM_Base_SetConfig+0x13c>)
 80284c6:	4293      	cmp	r3, r2
 80284c8:	d108      	bne.n	80284dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80284ca:	68fb      	ldr	r3, [r7, #12]
 80284cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80284d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80284d2:	683b      	ldr	r3, [r7, #0]
 80284d4:	68db      	ldr	r3, [r3, #12]
 80284d6:	68fa      	ldr	r2, [r7, #12]
 80284d8:	4313      	orrs	r3, r2
 80284da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80284dc:	68fb      	ldr	r3, [r7, #12]
 80284de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80284e2:	683b      	ldr	r3, [r7, #0]
 80284e4:	695b      	ldr	r3, [r3, #20]
 80284e6:	4313      	orrs	r3, r2
 80284e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80284ea:	687b      	ldr	r3, [r7, #4]
 80284ec:	68fa      	ldr	r2, [r7, #12]
 80284ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80284f0:	683b      	ldr	r3, [r7, #0]
 80284f2:	689a      	ldr	r2, [r3, #8]
 80284f4:	687b      	ldr	r3, [r7, #4]
 80284f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80284f8:	683b      	ldr	r3, [r7, #0]
 80284fa:	681a      	ldr	r2, [r3, #0]
 80284fc:	687b      	ldr	r3, [r7, #4]
 80284fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8028500:	687b      	ldr	r3, [r7, #4]
 8028502:	4a0a      	ldr	r2, [pc, #40]	; (802852c <TIM_Base_SetConfig+0x114>)
 8028504:	4293      	cmp	r3, r2
 8028506:	d003      	beq.n	8028510 <TIM_Base_SetConfig+0xf8>
 8028508:	687b      	ldr	r3, [r7, #4]
 802850a:	4a0c      	ldr	r2, [pc, #48]	; (802853c <TIM_Base_SetConfig+0x124>)
 802850c:	4293      	cmp	r3, r2
 802850e:	d103      	bne.n	8028518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8028510:	683b      	ldr	r3, [r7, #0]
 8028512:	691a      	ldr	r2, [r3, #16]
 8028514:	687b      	ldr	r3, [r7, #4]
 8028516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8028518:	687b      	ldr	r3, [r7, #4]
 802851a:	2201      	movs	r2, #1
 802851c:	615a      	str	r2, [r3, #20]
}
 802851e:	bf00      	nop
 8028520:	3714      	adds	r7, #20
 8028522:	46bd      	mov	sp, r7
 8028524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028528:	4770      	bx	lr
 802852a:	bf00      	nop
 802852c:	40010000 	.word	0x40010000
 8028530:	40000400 	.word	0x40000400
 8028534:	40000800 	.word	0x40000800
 8028538:	40000c00 	.word	0x40000c00
 802853c:	40010400 	.word	0x40010400
 8028540:	40014000 	.word	0x40014000
 8028544:	40014400 	.word	0x40014400
 8028548:	40014800 	.word	0x40014800
 802854c:	40001800 	.word	0x40001800
 8028550:	40001c00 	.word	0x40001c00
 8028554:	40002000 	.word	0x40002000

08028558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8028558:	b480      	push	{r7}
 802855a:	b087      	sub	sp, #28
 802855c:	af00      	add	r7, sp, #0
 802855e:	6078      	str	r0, [r7, #4]
 8028560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8028562:	687b      	ldr	r3, [r7, #4]
 8028564:	6a1b      	ldr	r3, [r3, #32]
 8028566:	f023 0201 	bic.w	r2, r3, #1
 802856a:	687b      	ldr	r3, [r7, #4]
 802856c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802856e:	687b      	ldr	r3, [r7, #4]
 8028570:	6a1b      	ldr	r3, [r3, #32]
 8028572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8028574:	687b      	ldr	r3, [r7, #4]
 8028576:	685b      	ldr	r3, [r3, #4]
 8028578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802857a:	687b      	ldr	r3, [r7, #4]
 802857c:	699b      	ldr	r3, [r3, #24]
 802857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8028580:	68fb      	ldr	r3, [r7, #12]
 8028582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8028588:	68fb      	ldr	r3, [r7, #12]
 802858a:	f023 0303 	bic.w	r3, r3, #3
 802858e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8028590:	683b      	ldr	r3, [r7, #0]
 8028592:	681b      	ldr	r3, [r3, #0]
 8028594:	68fa      	ldr	r2, [r7, #12]
 8028596:	4313      	orrs	r3, r2
 8028598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802859a:	697b      	ldr	r3, [r7, #20]
 802859c:	f023 0302 	bic.w	r3, r3, #2
 80285a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80285a2:	683b      	ldr	r3, [r7, #0]
 80285a4:	689b      	ldr	r3, [r3, #8]
 80285a6:	697a      	ldr	r2, [r7, #20]
 80285a8:	4313      	orrs	r3, r2
 80285aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80285ac:	687b      	ldr	r3, [r7, #4]
 80285ae:	4a20      	ldr	r2, [pc, #128]	; (8028630 <TIM_OC1_SetConfig+0xd8>)
 80285b0:	4293      	cmp	r3, r2
 80285b2:	d003      	beq.n	80285bc <TIM_OC1_SetConfig+0x64>
 80285b4:	687b      	ldr	r3, [r7, #4]
 80285b6:	4a1f      	ldr	r2, [pc, #124]	; (8028634 <TIM_OC1_SetConfig+0xdc>)
 80285b8:	4293      	cmp	r3, r2
 80285ba:	d10c      	bne.n	80285d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80285bc:	697b      	ldr	r3, [r7, #20]
 80285be:	f023 0308 	bic.w	r3, r3, #8
 80285c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80285c4:	683b      	ldr	r3, [r7, #0]
 80285c6:	68db      	ldr	r3, [r3, #12]
 80285c8:	697a      	ldr	r2, [r7, #20]
 80285ca:	4313      	orrs	r3, r2
 80285cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80285ce:	697b      	ldr	r3, [r7, #20]
 80285d0:	f023 0304 	bic.w	r3, r3, #4
 80285d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80285d6:	687b      	ldr	r3, [r7, #4]
 80285d8:	4a15      	ldr	r2, [pc, #84]	; (8028630 <TIM_OC1_SetConfig+0xd8>)
 80285da:	4293      	cmp	r3, r2
 80285dc:	d003      	beq.n	80285e6 <TIM_OC1_SetConfig+0x8e>
 80285de:	687b      	ldr	r3, [r7, #4]
 80285e0:	4a14      	ldr	r2, [pc, #80]	; (8028634 <TIM_OC1_SetConfig+0xdc>)
 80285e2:	4293      	cmp	r3, r2
 80285e4:	d111      	bne.n	802860a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80285e6:	693b      	ldr	r3, [r7, #16]
 80285e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80285ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80285ee:	693b      	ldr	r3, [r7, #16]
 80285f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80285f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80285f6:	683b      	ldr	r3, [r7, #0]
 80285f8:	695b      	ldr	r3, [r3, #20]
 80285fa:	693a      	ldr	r2, [r7, #16]
 80285fc:	4313      	orrs	r3, r2
 80285fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8028600:	683b      	ldr	r3, [r7, #0]
 8028602:	699b      	ldr	r3, [r3, #24]
 8028604:	693a      	ldr	r2, [r7, #16]
 8028606:	4313      	orrs	r3, r2
 8028608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802860a:	687b      	ldr	r3, [r7, #4]
 802860c:	693a      	ldr	r2, [r7, #16]
 802860e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8028610:	687b      	ldr	r3, [r7, #4]
 8028612:	68fa      	ldr	r2, [r7, #12]
 8028614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8028616:	683b      	ldr	r3, [r7, #0]
 8028618:	685a      	ldr	r2, [r3, #4]
 802861a:	687b      	ldr	r3, [r7, #4]
 802861c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802861e:	687b      	ldr	r3, [r7, #4]
 8028620:	697a      	ldr	r2, [r7, #20]
 8028622:	621a      	str	r2, [r3, #32]
}
 8028624:	bf00      	nop
 8028626:	371c      	adds	r7, #28
 8028628:	46bd      	mov	sp, r7
 802862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802862e:	4770      	bx	lr
 8028630:	40010000 	.word	0x40010000
 8028634:	40010400 	.word	0x40010400

08028638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8028638:	b480      	push	{r7}
 802863a:	b087      	sub	sp, #28
 802863c:	af00      	add	r7, sp, #0
 802863e:	6078      	str	r0, [r7, #4]
 8028640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8028642:	687b      	ldr	r3, [r7, #4]
 8028644:	6a1b      	ldr	r3, [r3, #32]
 8028646:	f023 0210 	bic.w	r2, r3, #16
 802864a:	687b      	ldr	r3, [r7, #4]
 802864c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802864e:	687b      	ldr	r3, [r7, #4]
 8028650:	6a1b      	ldr	r3, [r3, #32]
 8028652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8028654:	687b      	ldr	r3, [r7, #4]
 8028656:	685b      	ldr	r3, [r3, #4]
 8028658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802865a:	687b      	ldr	r3, [r7, #4]
 802865c:	699b      	ldr	r3, [r3, #24]
 802865e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8028660:	68fb      	ldr	r3, [r7, #12]
 8028662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8028666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8028668:	68fb      	ldr	r3, [r7, #12]
 802866a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802866e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8028670:	683b      	ldr	r3, [r7, #0]
 8028672:	681b      	ldr	r3, [r3, #0]
 8028674:	021b      	lsls	r3, r3, #8
 8028676:	68fa      	ldr	r2, [r7, #12]
 8028678:	4313      	orrs	r3, r2
 802867a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 802867c:	697b      	ldr	r3, [r7, #20]
 802867e:	f023 0320 	bic.w	r3, r3, #32
 8028682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8028684:	683b      	ldr	r3, [r7, #0]
 8028686:	689b      	ldr	r3, [r3, #8]
 8028688:	011b      	lsls	r3, r3, #4
 802868a:	697a      	ldr	r2, [r7, #20]
 802868c:	4313      	orrs	r3, r2
 802868e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8028690:	687b      	ldr	r3, [r7, #4]
 8028692:	4a22      	ldr	r2, [pc, #136]	; (802871c <TIM_OC2_SetConfig+0xe4>)
 8028694:	4293      	cmp	r3, r2
 8028696:	d003      	beq.n	80286a0 <TIM_OC2_SetConfig+0x68>
 8028698:	687b      	ldr	r3, [r7, #4]
 802869a:	4a21      	ldr	r2, [pc, #132]	; (8028720 <TIM_OC2_SetConfig+0xe8>)
 802869c:	4293      	cmp	r3, r2
 802869e:	d10d      	bne.n	80286bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80286a0:	697b      	ldr	r3, [r7, #20]
 80286a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80286a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80286a8:	683b      	ldr	r3, [r7, #0]
 80286aa:	68db      	ldr	r3, [r3, #12]
 80286ac:	011b      	lsls	r3, r3, #4
 80286ae:	697a      	ldr	r2, [r7, #20]
 80286b0:	4313      	orrs	r3, r2
 80286b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80286b4:	697b      	ldr	r3, [r7, #20]
 80286b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80286ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80286bc:	687b      	ldr	r3, [r7, #4]
 80286be:	4a17      	ldr	r2, [pc, #92]	; (802871c <TIM_OC2_SetConfig+0xe4>)
 80286c0:	4293      	cmp	r3, r2
 80286c2:	d003      	beq.n	80286cc <TIM_OC2_SetConfig+0x94>
 80286c4:	687b      	ldr	r3, [r7, #4]
 80286c6:	4a16      	ldr	r2, [pc, #88]	; (8028720 <TIM_OC2_SetConfig+0xe8>)
 80286c8:	4293      	cmp	r3, r2
 80286ca:	d113      	bne.n	80286f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80286cc:	693b      	ldr	r3, [r7, #16]
 80286ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80286d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80286d4:	693b      	ldr	r3, [r7, #16]
 80286d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80286da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80286dc:	683b      	ldr	r3, [r7, #0]
 80286de:	695b      	ldr	r3, [r3, #20]
 80286e0:	009b      	lsls	r3, r3, #2
 80286e2:	693a      	ldr	r2, [r7, #16]
 80286e4:	4313      	orrs	r3, r2
 80286e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80286e8:	683b      	ldr	r3, [r7, #0]
 80286ea:	699b      	ldr	r3, [r3, #24]
 80286ec:	009b      	lsls	r3, r3, #2
 80286ee:	693a      	ldr	r2, [r7, #16]
 80286f0:	4313      	orrs	r3, r2
 80286f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80286f4:	687b      	ldr	r3, [r7, #4]
 80286f6:	693a      	ldr	r2, [r7, #16]
 80286f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80286fa:	687b      	ldr	r3, [r7, #4]
 80286fc:	68fa      	ldr	r2, [r7, #12]
 80286fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8028700:	683b      	ldr	r3, [r7, #0]
 8028702:	685a      	ldr	r2, [r3, #4]
 8028704:	687b      	ldr	r3, [r7, #4]
 8028706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8028708:	687b      	ldr	r3, [r7, #4]
 802870a:	697a      	ldr	r2, [r7, #20]
 802870c:	621a      	str	r2, [r3, #32]
}
 802870e:	bf00      	nop
 8028710:	371c      	adds	r7, #28
 8028712:	46bd      	mov	sp, r7
 8028714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028718:	4770      	bx	lr
 802871a:	bf00      	nop
 802871c:	40010000 	.word	0x40010000
 8028720:	40010400 	.word	0x40010400

08028724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8028724:	b480      	push	{r7}
 8028726:	b087      	sub	sp, #28
 8028728:	af00      	add	r7, sp, #0
 802872a:	6078      	str	r0, [r7, #4]
 802872c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802872e:	687b      	ldr	r3, [r7, #4]
 8028730:	6a1b      	ldr	r3, [r3, #32]
 8028732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8028736:	687b      	ldr	r3, [r7, #4]
 8028738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802873a:	687b      	ldr	r3, [r7, #4]
 802873c:	6a1b      	ldr	r3, [r3, #32]
 802873e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8028740:	687b      	ldr	r3, [r7, #4]
 8028742:	685b      	ldr	r3, [r3, #4]
 8028744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8028746:	687b      	ldr	r3, [r7, #4]
 8028748:	69db      	ldr	r3, [r3, #28]
 802874a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 802874c:	68fb      	ldr	r3, [r7, #12]
 802874e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8028754:	68fb      	ldr	r3, [r7, #12]
 8028756:	f023 0303 	bic.w	r3, r3, #3
 802875a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802875c:	683b      	ldr	r3, [r7, #0]
 802875e:	681b      	ldr	r3, [r3, #0]
 8028760:	68fa      	ldr	r2, [r7, #12]
 8028762:	4313      	orrs	r3, r2
 8028764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8028766:	697b      	ldr	r3, [r7, #20]
 8028768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802876c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802876e:	683b      	ldr	r3, [r7, #0]
 8028770:	689b      	ldr	r3, [r3, #8]
 8028772:	021b      	lsls	r3, r3, #8
 8028774:	697a      	ldr	r2, [r7, #20]
 8028776:	4313      	orrs	r3, r2
 8028778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802877a:	687b      	ldr	r3, [r7, #4]
 802877c:	4a21      	ldr	r2, [pc, #132]	; (8028804 <TIM_OC3_SetConfig+0xe0>)
 802877e:	4293      	cmp	r3, r2
 8028780:	d003      	beq.n	802878a <TIM_OC3_SetConfig+0x66>
 8028782:	687b      	ldr	r3, [r7, #4]
 8028784:	4a20      	ldr	r2, [pc, #128]	; (8028808 <TIM_OC3_SetConfig+0xe4>)
 8028786:	4293      	cmp	r3, r2
 8028788:	d10d      	bne.n	80287a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802878a:	697b      	ldr	r3, [r7, #20]
 802878c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8028790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8028792:	683b      	ldr	r3, [r7, #0]
 8028794:	68db      	ldr	r3, [r3, #12]
 8028796:	021b      	lsls	r3, r3, #8
 8028798:	697a      	ldr	r2, [r7, #20]
 802879a:	4313      	orrs	r3, r2
 802879c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802879e:	697b      	ldr	r3, [r7, #20]
 80287a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80287a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80287a6:	687b      	ldr	r3, [r7, #4]
 80287a8:	4a16      	ldr	r2, [pc, #88]	; (8028804 <TIM_OC3_SetConfig+0xe0>)
 80287aa:	4293      	cmp	r3, r2
 80287ac:	d003      	beq.n	80287b6 <TIM_OC3_SetConfig+0x92>
 80287ae:	687b      	ldr	r3, [r7, #4]
 80287b0:	4a15      	ldr	r2, [pc, #84]	; (8028808 <TIM_OC3_SetConfig+0xe4>)
 80287b2:	4293      	cmp	r3, r2
 80287b4:	d113      	bne.n	80287de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80287b6:	693b      	ldr	r3, [r7, #16]
 80287b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80287bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80287be:	693b      	ldr	r3, [r7, #16]
 80287c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80287c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80287c6:	683b      	ldr	r3, [r7, #0]
 80287c8:	695b      	ldr	r3, [r3, #20]
 80287ca:	011b      	lsls	r3, r3, #4
 80287cc:	693a      	ldr	r2, [r7, #16]
 80287ce:	4313      	orrs	r3, r2
 80287d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80287d2:	683b      	ldr	r3, [r7, #0]
 80287d4:	699b      	ldr	r3, [r3, #24]
 80287d6:	011b      	lsls	r3, r3, #4
 80287d8:	693a      	ldr	r2, [r7, #16]
 80287da:	4313      	orrs	r3, r2
 80287dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80287de:	687b      	ldr	r3, [r7, #4]
 80287e0:	693a      	ldr	r2, [r7, #16]
 80287e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80287e4:	687b      	ldr	r3, [r7, #4]
 80287e6:	68fa      	ldr	r2, [r7, #12]
 80287e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80287ea:	683b      	ldr	r3, [r7, #0]
 80287ec:	685a      	ldr	r2, [r3, #4]
 80287ee:	687b      	ldr	r3, [r7, #4]
 80287f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80287f2:	687b      	ldr	r3, [r7, #4]
 80287f4:	697a      	ldr	r2, [r7, #20]
 80287f6:	621a      	str	r2, [r3, #32]
}
 80287f8:	bf00      	nop
 80287fa:	371c      	adds	r7, #28
 80287fc:	46bd      	mov	sp, r7
 80287fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028802:	4770      	bx	lr
 8028804:	40010000 	.word	0x40010000
 8028808:	40010400 	.word	0x40010400

0802880c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802880c:	b480      	push	{r7}
 802880e:	b087      	sub	sp, #28
 8028810:	af00      	add	r7, sp, #0
 8028812:	6078      	str	r0, [r7, #4]
 8028814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8028816:	687b      	ldr	r3, [r7, #4]
 8028818:	6a1b      	ldr	r3, [r3, #32]
 802881a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802881e:	687b      	ldr	r3, [r7, #4]
 8028820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8028822:	687b      	ldr	r3, [r7, #4]
 8028824:	6a1b      	ldr	r3, [r3, #32]
 8028826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8028828:	687b      	ldr	r3, [r7, #4]
 802882a:	685b      	ldr	r3, [r3, #4]
 802882c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802882e:	687b      	ldr	r3, [r7, #4]
 8028830:	69db      	ldr	r3, [r3, #28]
 8028832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8028834:	68fb      	ldr	r3, [r7, #12]
 8028836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802883a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802883c:	68fb      	ldr	r3, [r7, #12]
 802883e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8028844:	683b      	ldr	r3, [r7, #0]
 8028846:	681b      	ldr	r3, [r3, #0]
 8028848:	021b      	lsls	r3, r3, #8
 802884a:	68fa      	ldr	r2, [r7, #12]
 802884c:	4313      	orrs	r3, r2
 802884e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8028850:	693b      	ldr	r3, [r7, #16]
 8028852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8028856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8028858:	683b      	ldr	r3, [r7, #0]
 802885a:	689b      	ldr	r3, [r3, #8]
 802885c:	031b      	lsls	r3, r3, #12
 802885e:	693a      	ldr	r2, [r7, #16]
 8028860:	4313      	orrs	r3, r2
 8028862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8028864:	687b      	ldr	r3, [r7, #4]
 8028866:	4a12      	ldr	r2, [pc, #72]	; (80288b0 <TIM_OC4_SetConfig+0xa4>)
 8028868:	4293      	cmp	r3, r2
 802886a:	d003      	beq.n	8028874 <TIM_OC4_SetConfig+0x68>
 802886c:	687b      	ldr	r3, [r7, #4]
 802886e:	4a11      	ldr	r2, [pc, #68]	; (80288b4 <TIM_OC4_SetConfig+0xa8>)
 8028870:	4293      	cmp	r3, r2
 8028872:	d109      	bne.n	8028888 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8028874:	697b      	ldr	r3, [r7, #20]
 8028876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802887a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802887c:	683b      	ldr	r3, [r7, #0]
 802887e:	695b      	ldr	r3, [r3, #20]
 8028880:	019b      	lsls	r3, r3, #6
 8028882:	697a      	ldr	r2, [r7, #20]
 8028884:	4313      	orrs	r3, r2
 8028886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8028888:	687b      	ldr	r3, [r7, #4]
 802888a:	697a      	ldr	r2, [r7, #20]
 802888c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802888e:	687b      	ldr	r3, [r7, #4]
 8028890:	68fa      	ldr	r2, [r7, #12]
 8028892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8028894:	683b      	ldr	r3, [r7, #0]
 8028896:	685a      	ldr	r2, [r3, #4]
 8028898:	687b      	ldr	r3, [r7, #4]
 802889a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802889c:	687b      	ldr	r3, [r7, #4]
 802889e:	693a      	ldr	r2, [r7, #16]
 80288a0:	621a      	str	r2, [r3, #32]
}
 80288a2:	bf00      	nop
 80288a4:	371c      	adds	r7, #28
 80288a6:	46bd      	mov	sp, r7
 80288a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288ac:	4770      	bx	lr
 80288ae:	bf00      	nop
 80288b0:	40010000 	.word	0x40010000
 80288b4:	40010400 	.word	0x40010400

080288b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80288b8:	b480      	push	{r7}
 80288ba:	b087      	sub	sp, #28
 80288bc:	af00      	add	r7, sp, #0
 80288be:	60f8      	str	r0, [r7, #12]
 80288c0:	60b9      	str	r1, [r7, #8]
 80288c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80288c4:	68bb      	ldr	r3, [r7, #8]
 80288c6:	f003 031f 	and.w	r3, r3, #31
 80288ca:	2201      	movs	r2, #1
 80288cc:	fa02 f303 	lsl.w	r3, r2, r3
 80288d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80288d2:	68fb      	ldr	r3, [r7, #12]
 80288d4:	6a1a      	ldr	r2, [r3, #32]
 80288d6:	697b      	ldr	r3, [r7, #20]
 80288d8:	43db      	mvns	r3, r3
 80288da:	401a      	ands	r2, r3
 80288dc:	68fb      	ldr	r3, [r7, #12]
 80288de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80288e0:	68fb      	ldr	r3, [r7, #12]
 80288e2:	6a1a      	ldr	r2, [r3, #32]
 80288e4:	68bb      	ldr	r3, [r7, #8]
 80288e6:	f003 031f 	and.w	r3, r3, #31
 80288ea:	6879      	ldr	r1, [r7, #4]
 80288ec:	fa01 f303 	lsl.w	r3, r1, r3
 80288f0:	431a      	orrs	r2, r3
 80288f2:	68fb      	ldr	r3, [r7, #12]
 80288f4:	621a      	str	r2, [r3, #32]
}
 80288f6:	bf00      	nop
 80288f8:	371c      	adds	r7, #28
 80288fa:	46bd      	mov	sp, r7
 80288fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028900:	4770      	bx	lr

08028902 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8028902:	b580      	push	{r7, lr}
 8028904:	b084      	sub	sp, #16
 8028906:	af00      	add	r7, sp, #0
 8028908:	6078      	str	r0, [r7, #4]
 802890a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 802890c:	687b      	ldr	r3, [r7, #4]
 802890e:	681b      	ldr	r3, [r3, #0]
 8028910:	2204      	movs	r2, #4
 8028912:	6839      	ldr	r1, [r7, #0]
 8028914:	4618      	mov	r0, r3
 8028916:	f000 f8af 	bl	8028a78 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 802891a:	687b      	ldr	r3, [r7, #4]
 802891c:	681b      	ldr	r3, [r3, #0]
 802891e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028920:	687b      	ldr	r3, [r7, #4]
 8028922:	681b      	ldr	r3, [r3, #0]
 8028924:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8028928:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802892a:	687b      	ldr	r3, [r7, #4]
 802892c:	681b      	ldr	r3, [r3, #0]
 802892e:	689b      	ldr	r3, [r3, #8]
 8028930:	f003 0307 	and.w	r3, r3, #7
 8028934:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028936:	68fb      	ldr	r3, [r7, #12]
 8028938:	2b06      	cmp	r3, #6
 802893a:	d007      	beq.n	802894c <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 802893c:	687b      	ldr	r3, [r7, #4]
 802893e:	681b      	ldr	r3, [r3, #0]
 8028940:	681a      	ldr	r2, [r3, #0]
 8028942:	687b      	ldr	r3, [r7, #4]
 8028944:	681b      	ldr	r3, [r3, #0]
 8028946:	f042 0201 	orr.w	r2, r2, #1
 802894a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802894c:	2300      	movs	r3, #0
}
 802894e:	4618      	mov	r0, r3
 8028950:	3710      	adds	r7, #16
 8028952:	46bd      	mov	sp, r7
 8028954:	bd80      	pop	{r7, pc}
	...

08028958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8028958:	b480      	push	{r7}
 802895a:	b085      	sub	sp, #20
 802895c:	af00      	add	r7, sp, #0
 802895e:	6078      	str	r0, [r7, #4]
 8028960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8028962:	687b      	ldr	r3, [r7, #4]
 8028964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028968:	2b01      	cmp	r3, #1
 802896a:	d101      	bne.n	8028970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802896c:	2302      	movs	r3, #2
 802896e:	e05a      	b.n	8028a26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8028970:	687b      	ldr	r3, [r7, #4]
 8028972:	2201      	movs	r2, #1
 8028974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028978:	687b      	ldr	r3, [r7, #4]
 802897a:	2202      	movs	r2, #2
 802897c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8028980:	687b      	ldr	r3, [r7, #4]
 8028982:	681b      	ldr	r3, [r3, #0]
 8028984:	685b      	ldr	r3, [r3, #4]
 8028986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8028988:	687b      	ldr	r3, [r7, #4]
 802898a:	681b      	ldr	r3, [r3, #0]
 802898c:	689b      	ldr	r3, [r3, #8]
 802898e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8028990:	68fb      	ldr	r3, [r7, #12]
 8028992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8028998:	683b      	ldr	r3, [r7, #0]
 802899a:	681b      	ldr	r3, [r3, #0]
 802899c:	68fa      	ldr	r2, [r7, #12]
 802899e:	4313      	orrs	r3, r2
 80289a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80289a2:	687b      	ldr	r3, [r7, #4]
 80289a4:	681b      	ldr	r3, [r3, #0]
 80289a6:	68fa      	ldr	r2, [r7, #12]
 80289a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80289aa:	687b      	ldr	r3, [r7, #4]
 80289ac:	681b      	ldr	r3, [r3, #0]
 80289ae:	4a21      	ldr	r2, [pc, #132]	; (8028a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80289b0:	4293      	cmp	r3, r2
 80289b2:	d022      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289b4:	687b      	ldr	r3, [r7, #4]
 80289b6:	681b      	ldr	r3, [r3, #0]
 80289b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80289bc:	d01d      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289be:	687b      	ldr	r3, [r7, #4]
 80289c0:	681b      	ldr	r3, [r3, #0]
 80289c2:	4a1d      	ldr	r2, [pc, #116]	; (8028a38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80289c4:	4293      	cmp	r3, r2
 80289c6:	d018      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289c8:	687b      	ldr	r3, [r7, #4]
 80289ca:	681b      	ldr	r3, [r3, #0]
 80289cc:	4a1b      	ldr	r2, [pc, #108]	; (8028a3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80289ce:	4293      	cmp	r3, r2
 80289d0:	d013      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289d2:	687b      	ldr	r3, [r7, #4]
 80289d4:	681b      	ldr	r3, [r3, #0]
 80289d6:	4a1a      	ldr	r2, [pc, #104]	; (8028a40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80289d8:	4293      	cmp	r3, r2
 80289da:	d00e      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289dc:	687b      	ldr	r3, [r7, #4]
 80289de:	681b      	ldr	r3, [r3, #0]
 80289e0:	4a18      	ldr	r2, [pc, #96]	; (8028a44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80289e2:	4293      	cmp	r3, r2
 80289e4:	d009      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289e6:	687b      	ldr	r3, [r7, #4]
 80289e8:	681b      	ldr	r3, [r3, #0]
 80289ea:	4a17      	ldr	r2, [pc, #92]	; (8028a48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80289ec:	4293      	cmp	r3, r2
 80289ee:	d004      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289f0:	687b      	ldr	r3, [r7, #4]
 80289f2:	681b      	ldr	r3, [r3, #0]
 80289f4:	4a15      	ldr	r2, [pc, #84]	; (8028a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80289f6:	4293      	cmp	r3, r2
 80289f8:	d10c      	bne.n	8028a14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80289fa:	68bb      	ldr	r3, [r7, #8]
 80289fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8028a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8028a02:	683b      	ldr	r3, [r7, #0]
 8028a04:	685b      	ldr	r3, [r3, #4]
 8028a06:	68ba      	ldr	r2, [r7, #8]
 8028a08:	4313      	orrs	r3, r2
 8028a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8028a0c:	687b      	ldr	r3, [r7, #4]
 8028a0e:	681b      	ldr	r3, [r3, #0]
 8028a10:	68ba      	ldr	r2, [r7, #8]
 8028a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8028a14:	687b      	ldr	r3, [r7, #4]
 8028a16:	2201      	movs	r2, #1
 8028a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8028a1c:	687b      	ldr	r3, [r7, #4]
 8028a1e:	2200      	movs	r2, #0
 8028a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8028a24:	2300      	movs	r3, #0
}
 8028a26:	4618      	mov	r0, r3
 8028a28:	3714      	adds	r7, #20
 8028a2a:	46bd      	mov	sp, r7
 8028a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a30:	4770      	bx	lr
 8028a32:	bf00      	nop
 8028a34:	40010000 	.word	0x40010000
 8028a38:	40000400 	.word	0x40000400
 8028a3c:	40000800 	.word	0x40000800
 8028a40:	40000c00 	.word	0x40000c00
 8028a44:	40010400 	.word	0x40010400
 8028a48:	40014000 	.word	0x40014000
 8028a4c:	40001800 	.word	0x40001800

08028a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8028a50:	b480      	push	{r7}
 8028a52:	b083      	sub	sp, #12
 8028a54:	af00      	add	r7, sp, #0
 8028a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8028a58:	bf00      	nop
 8028a5a:	370c      	adds	r7, #12
 8028a5c:	46bd      	mov	sp, r7
 8028a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a62:	4770      	bx	lr

08028a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8028a64:	b480      	push	{r7}
 8028a66:	b083      	sub	sp, #12
 8028a68:	af00      	add	r7, sp, #0
 8028a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8028a6c:	bf00      	nop
 8028a6e:	370c      	adds	r7, #12
 8028a70:	46bd      	mov	sp, r7
 8028a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a76:	4770      	bx	lr

08028a78 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8028a78:	b480      	push	{r7}
 8028a7a:	b087      	sub	sp, #28
 8028a7c:	af00      	add	r7, sp, #0
 8028a7e:	60f8      	str	r0, [r7, #12]
 8028a80:	60b9      	str	r1, [r7, #8]
 8028a82:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8028a84:	68bb      	ldr	r3, [r7, #8]
 8028a86:	f003 031f 	and.w	r3, r3, #31
 8028a8a:	2204      	movs	r2, #4
 8028a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8028a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8028a92:	68fb      	ldr	r3, [r7, #12]
 8028a94:	6a1a      	ldr	r2, [r3, #32]
 8028a96:	697b      	ldr	r3, [r7, #20]
 8028a98:	43db      	mvns	r3, r3
 8028a9a:	401a      	ands	r2, r3
 8028a9c:	68fb      	ldr	r3, [r7, #12]
 8028a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8028aa0:	68fb      	ldr	r3, [r7, #12]
 8028aa2:	6a1a      	ldr	r2, [r3, #32]
 8028aa4:	68bb      	ldr	r3, [r7, #8]
 8028aa6:	f003 031f 	and.w	r3, r3, #31
 8028aaa:	6879      	ldr	r1, [r7, #4]
 8028aac:	fa01 f303 	lsl.w	r3, r1, r3
 8028ab0:	431a      	orrs	r2, r3
 8028ab2:	68fb      	ldr	r3, [r7, #12]
 8028ab4:	621a      	str	r2, [r3, #32]
}
 8028ab6:	bf00      	nop
 8028ab8:	371c      	adds	r7, #28
 8028aba:	46bd      	mov	sp, r7
 8028abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ac0:	4770      	bx	lr

08028ac2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8028ac2:	b580      	push	{r7, lr}
 8028ac4:	b082      	sub	sp, #8
 8028ac6:	af00      	add	r7, sp, #0
 8028ac8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8028aca:	687b      	ldr	r3, [r7, #4]
 8028acc:	2b00      	cmp	r3, #0
 8028ace:	d101      	bne.n	8028ad4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8028ad0:	2301      	movs	r3, #1
 8028ad2:	e03f      	b.n	8028b54 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8028ad4:	687b      	ldr	r3, [r7, #4]
 8028ad6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8028ada:	b2db      	uxtb	r3, r3
 8028adc:	2b00      	cmp	r3, #0
 8028ade:	d106      	bne.n	8028aee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8028ae0:	687b      	ldr	r3, [r7, #4]
 8028ae2:	2200      	movs	r2, #0
 8028ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8028ae8:	6878      	ldr	r0, [r7, #4]
 8028aea:	f7f8 fda7 	bl	802163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8028aee:	687b      	ldr	r3, [r7, #4]
 8028af0:	2224      	movs	r2, #36	; 0x24
 8028af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8028af6:	687b      	ldr	r3, [r7, #4]
 8028af8:	681b      	ldr	r3, [r3, #0]
 8028afa:	68da      	ldr	r2, [r3, #12]
 8028afc:	687b      	ldr	r3, [r7, #4]
 8028afe:	681b      	ldr	r3, [r3, #0]
 8028b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028b04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8028b06:	6878      	ldr	r0, [r7, #4]
 8028b08:	f000 fb96 	bl	8029238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8028b0c:	687b      	ldr	r3, [r7, #4]
 8028b0e:	681b      	ldr	r3, [r3, #0]
 8028b10:	691a      	ldr	r2, [r3, #16]
 8028b12:	687b      	ldr	r3, [r7, #4]
 8028b14:	681b      	ldr	r3, [r3, #0]
 8028b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8028b1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8028b1c:	687b      	ldr	r3, [r7, #4]
 8028b1e:	681b      	ldr	r3, [r3, #0]
 8028b20:	695a      	ldr	r2, [r3, #20]
 8028b22:	687b      	ldr	r3, [r7, #4]
 8028b24:	681b      	ldr	r3, [r3, #0]
 8028b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8028b2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8028b2c:	687b      	ldr	r3, [r7, #4]
 8028b2e:	681b      	ldr	r3, [r3, #0]
 8028b30:	68da      	ldr	r2, [r3, #12]
 8028b32:	687b      	ldr	r3, [r7, #4]
 8028b34:	681b      	ldr	r3, [r3, #0]
 8028b36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028b3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028b3c:	687b      	ldr	r3, [r7, #4]
 8028b3e:	2200      	movs	r2, #0
 8028b40:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8028b42:	687b      	ldr	r3, [r7, #4]
 8028b44:	2220      	movs	r2, #32
 8028b46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8028b4a:	687b      	ldr	r3, [r7, #4]
 8028b4c:	2220      	movs	r2, #32
 8028b4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8028b52:	2300      	movs	r3, #0
}
 8028b54:	4618      	mov	r0, r3
 8028b56:	3708      	adds	r7, #8
 8028b58:	46bd      	mov	sp, r7
 8028b5a:	bd80      	pop	{r7, pc}

08028b5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028b5c:	b580      	push	{r7, lr}
 8028b5e:	b088      	sub	sp, #32
 8028b60:	af02      	add	r7, sp, #8
 8028b62:	60f8      	str	r0, [r7, #12]
 8028b64:	60b9      	str	r1, [r7, #8]
 8028b66:	603b      	str	r3, [r7, #0]
 8028b68:	4613      	mov	r3, r2
 8028b6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8028b6c:	2300      	movs	r3, #0
 8028b6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8028b70:	68fb      	ldr	r3, [r7, #12]
 8028b72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8028b76:	b2db      	uxtb	r3, r3
 8028b78:	2b20      	cmp	r3, #32
 8028b7a:	f040 8083 	bne.w	8028c84 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8028b7e:	68bb      	ldr	r3, [r7, #8]
 8028b80:	2b00      	cmp	r3, #0
 8028b82:	d002      	beq.n	8028b8a <HAL_UART_Transmit+0x2e>
 8028b84:	88fb      	ldrh	r3, [r7, #6]
 8028b86:	2b00      	cmp	r3, #0
 8028b88:	d101      	bne.n	8028b8e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8028b8a:	2301      	movs	r3, #1
 8028b8c:	e07b      	b.n	8028c86 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8028b8e:	68fb      	ldr	r3, [r7, #12]
 8028b90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8028b94:	2b01      	cmp	r3, #1
 8028b96:	d101      	bne.n	8028b9c <HAL_UART_Transmit+0x40>
 8028b98:	2302      	movs	r3, #2
 8028b9a:	e074      	b.n	8028c86 <HAL_UART_Transmit+0x12a>
 8028b9c:	68fb      	ldr	r3, [r7, #12]
 8028b9e:	2201      	movs	r2, #1
 8028ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028ba4:	68fb      	ldr	r3, [r7, #12]
 8028ba6:	2200      	movs	r2, #0
 8028ba8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8028baa:	68fb      	ldr	r3, [r7, #12]
 8028bac:	2221      	movs	r2, #33	; 0x21
 8028bae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8028bb2:	f7f8 ffd9 	bl	8021b68 <HAL_GetTick>
 8028bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8028bb8:	68fb      	ldr	r3, [r7, #12]
 8028bba:	88fa      	ldrh	r2, [r7, #6]
 8028bbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8028bbe:	68fb      	ldr	r3, [r7, #12]
 8028bc0:	88fa      	ldrh	r2, [r7, #6]
 8028bc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8028bc4:	68fb      	ldr	r3, [r7, #12]
 8028bc6:	2200      	movs	r2, #0
 8028bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8028bcc:	e042      	b.n	8028c54 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8028bce:	68fb      	ldr	r3, [r7, #12]
 8028bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8028bd2:	b29b      	uxth	r3, r3
 8028bd4:	3b01      	subs	r3, #1
 8028bd6:	b29a      	uxth	r2, r3
 8028bd8:	68fb      	ldr	r3, [r7, #12]
 8028bda:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8028bdc:	68fb      	ldr	r3, [r7, #12]
 8028bde:	689b      	ldr	r3, [r3, #8]
 8028be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028be4:	d122      	bne.n	8028c2c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8028be6:	683b      	ldr	r3, [r7, #0]
 8028be8:	9300      	str	r3, [sp, #0]
 8028bea:	697b      	ldr	r3, [r7, #20]
 8028bec:	2200      	movs	r2, #0
 8028bee:	2180      	movs	r1, #128	; 0x80
 8028bf0:	68f8      	ldr	r0, [r7, #12]
 8028bf2:	f000 f9b5 	bl	8028f60 <UART_WaitOnFlagUntilTimeout>
 8028bf6:	4603      	mov	r3, r0
 8028bf8:	2b00      	cmp	r3, #0
 8028bfa:	d001      	beq.n	8028c00 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8028bfc:	2303      	movs	r3, #3
 8028bfe:	e042      	b.n	8028c86 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8028c00:	68bb      	ldr	r3, [r7, #8]
 8028c02:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8028c04:	693b      	ldr	r3, [r7, #16]
 8028c06:	881b      	ldrh	r3, [r3, #0]
 8028c08:	461a      	mov	r2, r3
 8028c0a:	68fb      	ldr	r3, [r7, #12]
 8028c0c:	681b      	ldr	r3, [r3, #0]
 8028c0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8028c12:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8028c14:	68fb      	ldr	r3, [r7, #12]
 8028c16:	691b      	ldr	r3, [r3, #16]
 8028c18:	2b00      	cmp	r3, #0
 8028c1a:	d103      	bne.n	8028c24 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8028c1c:	68bb      	ldr	r3, [r7, #8]
 8028c1e:	3302      	adds	r3, #2
 8028c20:	60bb      	str	r3, [r7, #8]
 8028c22:	e017      	b.n	8028c54 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8028c24:	68bb      	ldr	r3, [r7, #8]
 8028c26:	3301      	adds	r3, #1
 8028c28:	60bb      	str	r3, [r7, #8]
 8028c2a:	e013      	b.n	8028c54 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8028c2c:	683b      	ldr	r3, [r7, #0]
 8028c2e:	9300      	str	r3, [sp, #0]
 8028c30:	697b      	ldr	r3, [r7, #20]
 8028c32:	2200      	movs	r2, #0
 8028c34:	2180      	movs	r1, #128	; 0x80
 8028c36:	68f8      	ldr	r0, [r7, #12]
 8028c38:	f000 f992 	bl	8028f60 <UART_WaitOnFlagUntilTimeout>
 8028c3c:	4603      	mov	r3, r0
 8028c3e:	2b00      	cmp	r3, #0
 8028c40:	d001      	beq.n	8028c46 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8028c42:	2303      	movs	r3, #3
 8028c44:	e01f      	b.n	8028c86 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8028c46:	68bb      	ldr	r3, [r7, #8]
 8028c48:	1c5a      	adds	r2, r3, #1
 8028c4a:	60ba      	str	r2, [r7, #8]
 8028c4c:	781a      	ldrb	r2, [r3, #0]
 8028c4e:	68fb      	ldr	r3, [r7, #12]
 8028c50:	681b      	ldr	r3, [r3, #0]
 8028c52:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8028c54:	68fb      	ldr	r3, [r7, #12]
 8028c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8028c58:	b29b      	uxth	r3, r3
 8028c5a:	2b00      	cmp	r3, #0
 8028c5c:	d1b7      	bne.n	8028bce <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8028c5e:	683b      	ldr	r3, [r7, #0]
 8028c60:	9300      	str	r3, [sp, #0]
 8028c62:	697b      	ldr	r3, [r7, #20]
 8028c64:	2200      	movs	r2, #0
 8028c66:	2140      	movs	r1, #64	; 0x40
 8028c68:	68f8      	ldr	r0, [r7, #12]
 8028c6a:	f000 f979 	bl	8028f60 <UART_WaitOnFlagUntilTimeout>
 8028c6e:	4603      	mov	r3, r0
 8028c70:	2b00      	cmp	r3, #0
 8028c72:	d001      	beq.n	8028c78 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8028c74:	2303      	movs	r3, #3
 8028c76:	e006      	b.n	8028c86 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8028c78:	68fb      	ldr	r3, [r7, #12]
 8028c7a:	2220      	movs	r2, #32
 8028c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8028c80:	2300      	movs	r3, #0
 8028c82:	e000      	b.n	8028c86 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8028c84:	2302      	movs	r3, #2
  }
}
 8028c86:	4618      	mov	r0, r3
 8028c88:	3718      	adds	r7, #24
 8028c8a:	46bd      	mov	sp, r7
 8028c8c:	bd80      	pop	{r7, pc}

08028c8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8028c8e:	b480      	push	{r7}
 8028c90:	b085      	sub	sp, #20
 8028c92:	af00      	add	r7, sp, #0
 8028c94:	60f8      	str	r0, [r7, #12]
 8028c96:	60b9      	str	r1, [r7, #8]
 8028c98:	4613      	mov	r3, r2
 8028c9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8028c9c:	68fb      	ldr	r3, [r7, #12]
 8028c9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8028ca2:	b2db      	uxtb	r3, r3
 8028ca4:	2b20      	cmp	r3, #32
 8028ca6:	d140      	bne.n	8028d2a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8028ca8:	68bb      	ldr	r3, [r7, #8]
 8028caa:	2b00      	cmp	r3, #0
 8028cac:	d002      	beq.n	8028cb4 <HAL_UART_Receive_IT+0x26>
 8028cae:	88fb      	ldrh	r3, [r7, #6]
 8028cb0:	2b00      	cmp	r3, #0
 8028cb2:	d101      	bne.n	8028cb8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8028cb4:	2301      	movs	r3, #1
 8028cb6:	e039      	b.n	8028d2c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8028cb8:	68fb      	ldr	r3, [r7, #12]
 8028cba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8028cbe:	2b01      	cmp	r3, #1
 8028cc0:	d101      	bne.n	8028cc6 <HAL_UART_Receive_IT+0x38>
 8028cc2:	2302      	movs	r3, #2
 8028cc4:	e032      	b.n	8028d2c <HAL_UART_Receive_IT+0x9e>
 8028cc6:	68fb      	ldr	r3, [r7, #12]
 8028cc8:	2201      	movs	r2, #1
 8028cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8028cce:	68fb      	ldr	r3, [r7, #12]
 8028cd0:	68ba      	ldr	r2, [r7, #8]
 8028cd2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8028cd4:	68fb      	ldr	r3, [r7, #12]
 8028cd6:	88fa      	ldrh	r2, [r7, #6]
 8028cd8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8028cda:	68fb      	ldr	r3, [r7, #12]
 8028cdc:	88fa      	ldrh	r2, [r7, #6]
 8028cde:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028ce0:	68fb      	ldr	r3, [r7, #12]
 8028ce2:	2200      	movs	r2, #0
 8028ce4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8028ce6:	68fb      	ldr	r3, [r7, #12]
 8028ce8:	2222      	movs	r2, #34	; 0x22
 8028cea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8028cee:	68fb      	ldr	r3, [r7, #12]
 8028cf0:	2200      	movs	r2, #0
 8028cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8028cf6:	68fb      	ldr	r3, [r7, #12]
 8028cf8:	681b      	ldr	r3, [r3, #0]
 8028cfa:	68da      	ldr	r2, [r3, #12]
 8028cfc:	68fb      	ldr	r3, [r7, #12]
 8028cfe:	681b      	ldr	r3, [r3, #0]
 8028d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8028d04:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8028d06:	68fb      	ldr	r3, [r7, #12]
 8028d08:	681b      	ldr	r3, [r3, #0]
 8028d0a:	695a      	ldr	r2, [r3, #20]
 8028d0c:	68fb      	ldr	r3, [r7, #12]
 8028d0e:	681b      	ldr	r3, [r3, #0]
 8028d10:	f042 0201 	orr.w	r2, r2, #1
 8028d14:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8028d16:	68fb      	ldr	r3, [r7, #12]
 8028d18:	681b      	ldr	r3, [r3, #0]
 8028d1a:	68da      	ldr	r2, [r3, #12]
 8028d1c:	68fb      	ldr	r3, [r7, #12]
 8028d1e:	681b      	ldr	r3, [r3, #0]
 8028d20:	f042 0220 	orr.w	r2, r2, #32
 8028d24:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8028d26:	2300      	movs	r3, #0
 8028d28:	e000      	b.n	8028d2c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8028d2a:	2302      	movs	r3, #2
  }
}
 8028d2c:	4618      	mov	r0, r3
 8028d2e:	3714      	adds	r7, #20
 8028d30:	46bd      	mov	sp, r7
 8028d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d36:	4770      	bx	lr

08028d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8028d38:	b580      	push	{r7, lr}
 8028d3a:	b088      	sub	sp, #32
 8028d3c:	af00      	add	r7, sp, #0
 8028d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8028d40:	687b      	ldr	r3, [r7, #4]
 8028d42:	681b      	ldr	r3, [r3, #0]
 8028d44:	681b      	ldr	r3, [r3, #0]
 8028d46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8028d48:	687b      	ldr	r3, [r7, #4]
 8028d4a:	681b      	ldr	r3, [r3, #0]
 8028d4c:	68db      	ldr	r3, [r3, #12]
 8028d4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8028d50:	687b      	ldr	r3, [r7, #4]
 8028d52:	681b      	ldr	r3, [r3, #0]
 8028d54:	695b      	ldr	r3, [r3, #20]
 8028d56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8028d58:	2300      	movs	r3, #0
 8028d5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8028d5c:	2300      	movs	r3, #0
 8028d5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8028d60:	69fb      	ldr	r3, [r7, #28]
 8028d62:	f003 030f 	and.w	r3, r3, #15
 8028d66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8028d68:	693b      	ldr	r3, [r7, #16]
 8028d6a:	2b00      	cmp	r3, #0
 8028d6c:	d10d      	bne.n	8028d8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8028d6e:	69fb      	ldr	r3, [r7, #28]
 8028d70:	f003 0320 	and.w	r3, r3, #32
 8028d74:	2b00      	cmp	r3, #0
 8028d76:	d008      	beq.n	8028d8a <HAL_UART_IRQHandler+0x52>
 8028d78:	69bb      	ldr	r3, [r7, #24]
 8028d7a:	f003 0320 	and.w	r3, r3, #32
 8028d7e:	2b00      	cmp	r3, #0
 8028d80:	d003      	beq.n	8028d8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8028d82:	6878      	ldr	r0, [r7, #4]
 8028d84:	f000 f9d6 	bl	8029134 <UART_Receive_IT>
      return;
 8028d88:	e0d0      	b.n	8028f2c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8028d8a:	693b      	ldr	r3, [r7, #16]
 8028d8c:	2b00      	cmp	r3, #0
 8028d8e:	f000 80b0 	beq.w	8028ef2 <HAL_UART_IRQHandler+0x1ba>
 8028d92:	697b      	ldr	r3, [r7, #20]
 8028d94:	f003 0301 	and.w	r3, r3, #1
 8028d98:	2b00      	cmp	r3, #0
 8028d9a:	d105      	bne.n	8028da8 <HAL_UART_IRQHandler+0x70>
 8028d9c:	69bb      	ldr	r3, [r7, #24]
 8028d9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8028da2:	2b00      	cmp	r3, #0
 8028da4:	f000 80a5 	beq.w	8028ef2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8028da8:	69fb      	ldr	r3, [r7, #28]
 8028daa:	f003 0301 	and.w	r3, r3, #1
 8028dae:	2b00      	cmp	r3, #0
 8028db0:	d00a      	beq.n	8028dc8 <HAL_UART_IRQHandler+0x90>
 8028db2:	69bb      	ldr	r3, [r7, #24]
 8028db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028db8:	2b00      	cmp	r3, #0
 8028dba:	d005      	beq.n	8028dc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8028dbc:	687b      	ldr	r3, [r7, #4]
 8028dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028dc0:	f043 0201 	orr.w	r2, r3, #1
 8028dc4:	687b      	ldr	r3, [r7, #4]
 8028dc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8028dc8:	69fb      	ldr	r3, [r7, #28]
 8028dca:	f003 0304 	and.w	r3, r3, #4
 8028dce:	2b00      	cmp	r3, #0
 8028dd0:	d00a      	beq.n	8028de8 <HAL_UART_IRQHandler+0xb0>
 8028dd2:	697b      	ldr	r3, [r7, #20]
 8028dd4:	f003 0301 	and.w	r3, r3, #1
 8028dd8:	2b00      	cmp	r3, #0
 8028dda:	d005      	beq.n	8028de8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8028ddc:	687b      	ldr	r3, [r7, #4]
 8028dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028de0:	f043 0202 	orr.w	r2, r3, #2
 8028de4:	687b      	ldr	r3, [r7, #4]
 8028de6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8028de8:	69fb      	ldr	r3, [r7, #28]
 8028dea:	f003 0302 	and.w	r3, r3, #2
 8028dee:	2b00      	cmp	r3, #0
 8028df0:	d00a      	beq.n	8028e08 <HAL_UART_IRQHandler+0xd0>
 8028df2:	697b      	ldr	r3, [r7, #20]
 8028df4:	f003 0301 	and.w	r3, r3, #1
 8028df8:	2b00      	cmp	r3, #0
 8028dfa:	d005      	beq.n	8028e08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8028dfc:	687b      	ldr	r3, [r7, #4]
 8028dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028e00:	f043 0204 	orr.w	r2, r3, #4
 8028e04:	687b      	ldr	r3, [r7, #4]
 8028e06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8028e08:	69fb      	ldr	r3, [r7, #28]
 8028e0a:	f003 0308 	and.w	r3, r3, #8
 8028e0e:	2b00      	cmp	r3, #0
 8028e10:	d00f      	beq.n	8028e32 <HAL_UART_IRQHandler+0xfa>
 8028e12:	69bb      	ldr	r3, [r7, #24]
 8028e14:	f003 0320 	and.w	r3, r3, #32
 8028e18:	2b00      	cmp	r3, #0
 8028e1a:	d104      	bne.n	8028e26 <HAL_UART_IRQHandler+0xee>
 8028e1c:	697b      	ldr	r3, [r7, #20]
 8028e1e:	f003 0301 	and.w	r3, r3, #1
 8028e22:	2b00      	cmp	r3, #0
 8028e24:	d005      	beq.n	8028e32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8028e26:	687b      	ldr	r3, [r7, #4]
 8028e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028e2a:	f043 0208 	orr.w	r2, r3, #8
 8028e2e:	687b      	ldr	r3, [r7, #4]
 8028e30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8028e32:	687b      	ldr	r3, [r7, #4]
 8028e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028e36:	2b00      	cmp	r3, #0
 8028e38:	d077      	beq.n	8028f2a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8028e3a:	69fb      	ldr	r3, [r7, #28]
 8028e3c:	f003 0320 	and.w	r3, r3, #32
 8028e40:	2b00      	cmp	r3, #0
 8028e42:	d007      	beq.n	8028e54 <HAL_UART_IRQHandler+0x11c>
 8028e44:	69bb      	ldr	r3, [r7, #24]
 8028e46:	f003 0320 	and.w	r3, r3, #32
 8028e4a:	2b00      	cmp	r3, #0
 8028e4c:	d002      	beq.n	8028e54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8028e4e:	6878      	ldr	r0, [r7, #4]
 8028e50:	f000 f970 	bl	8029134 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8028e54:	687b      	ldr	r3, [r7, #4]
 8028e56:	681b      	ldr	r3, [r3, #0]
 8028e58:	695b      	ldr	r3, [r3, #20]
 8028e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028e5e:	2b40      	cmp	r3, #64	; 0x40
 8028e60:	bf0c      	ite	eq
 8028e62:	2301      	moveq	r3, #1
 8028e64:	2300      	movne	r3, #0
 8028e66:	b2db      	uxtb	r3, r3
 8028e68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8028e6a:	687b      	ldr	r3, [r7, #4]
 8028e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028e6e:	f003 0308 	and.w	r3, r3, #8
 8028e72:	2b00      	cmp	r3, #0
 8028e74:	d102      	bne.n	8028e7c <HAL_UART_IRQHandler+0x144>
 8028e76:	68fb      	ldr	r3, [r7, #12]
 8028e78:	2b00      	cmp	r3, #0
 8028e7a:	d031      	beq.n	8028ee0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8028e7c:	6878      	ldr	r0, [r7, #4]
 8028e7e:	f000 f8b9 	bl	8028ff4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028e82:	687b      	ldr	r3, [r7, #4]
 8028e84:	681b      	ldr	r3, [r3, #0]
 8028e86:	695b      	ldr	r3, [r3, #20]
 8028e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028e8c:	2b40      	cmp	r3, #64	; 0x40
 8028e8e:	d123      	bne.n	8028ed8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8028e90:	687b      	ldr	r3, [r7, #4]
 8028e92:	681b      	ldr	r3, [r3, #0]
 8028e94:	695a      	ldr	r2, [r3, #20]
 8028e96:	687b      	ldr	r3, [r7, #4]
 8028e98:	681b      	ldr	r3, [r3, #0]
 8028e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028e9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8028ea0:	687b      	ldr	r3, [r7, #4]
 8028ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028ea4:	2b00      	cmp	r3, #0
 8028ea6:	d013      	beq.n	8028ed0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8028ea8:	687b      	ldr	r3, [r7, #4]
 8028eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028eac:	4a21      	ldr	r2, [pc, #132]	; (8028f34 <HAL_UART_IRQHandler+0x1fc>)
 8028eae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8028eb0:	687b      	ldr	r3, [r7, #4]
 8028eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028eb4:	4618      	mov	r0, r3
 8028eb6:	f7f9 fc29 	bl	802270c <HAL_DMA_Abort_IT>
 8028eba:	4603      	mov	r3, r0
 8028ebc:	2b00      	cmp	r3, #0
 8028ebe:	d016      	beq.n	8028eee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8028ec0:	687b      	ldr	r3, [r7, #4]
 8028ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028ec6:	687a      	ldr	r2, [r7, #4]
 8028ec8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8028eca:	4610      	mov	r0, r2
 8028ecc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028ece:	e00e      	b.n	8028eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8028ed0:	6878      	ldr	r0, [r7, #4]
 8028ed2:	f000 f83b 	bl	8028f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028ed6:	e00a      	b.n	8028eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8028ed8:	6878      	ldr	r0, [r7, #4]
 8028eda:	f000 f837 	bl	8028f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028ede:	e006      	b.n	8028eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8028ee0:	6878      	ldr	r0, [r7, #4]
 8028ee2:	f000 f833 	bl	8028f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028ee6:	687b      	ldr	r3, [r7, #4]
 8028ee8:	2200      	movs	r2, #0
 8028eea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8028eec:	e01d      	b.n	8028f2a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028eee:	bf00      	nop
    return;
 8028ef0:	e01b      	b.n	8028f2a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8028ef2:	69fb      	ldr	r3, [r7, #28]
 8028ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028ef8:	2b00      	cmp	r3, #0
 8028efa:	d008      	beq.n	8028f0e <HAL_UART_IRQHandler+0x1d6>
 8028efc:	69bb      	ldr	r3, [r7, #24]
 8028efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028f02:	2b00      	cmp	r3, #0
 8028f04:	d003      	beq.n	8028f0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8028f06:	6878      	ldr	r0, [r7, #4]
 8028f08:	f000 f8a6 	bl	8029058 <UART_Transmit_IT>
    return;
 8028f0c:	e00e      	b.n	8028f2c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8028f0e:	69fb      	ldr	r3, [r7, #28]
 8028f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028f14:	2b00      	cmp	r3, #0
 8028f16:	d009      	beq.n	8028f2c <HAL_UART_IRQHandler+0x1f4>
 8028f18:	69bb      	ldr	r3, [r7, #24]
 8028f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028f1e:	2b00      	cmp	r3, #0
 8028f20:	d004      	beq.n	8028f2c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8028f22:	6878      	ldr	r0, [r7, #4]
 8028f24:	f000 f8ee 	bl	8029104 <UART_EndTransmit_IT>
    return;
 8028f28:	e000      	b.n	8028f2c <HAL_UART_IRQHandler+0x1f4>
    return;
 8028f2a:	bf00      	nop
  }
}
 8028f2c:	3720      	adds	r7, #32
 8028f2e:	46bd      	mov	sp, r7
 8028f30:	bd80      	pop	{r7, pc}
 8028f32:	bf00      	nop
 8028f34:	08029031 	.word	0x08029031

08028f38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8028f38:	b480      	push	{r7}
 8028f3a:	b083      	sub	sp, #12
 8028f3c:	af00      	add	r7, sp, #0
 8028f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8028f40:	bf00      	nop
 8028f42:	370c      	adds	r7, #12
 8028f44:	46bd      	mov	sp, r7
 8028f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f4a:	4770      	bx	lr

08028f4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8028f4c:	b480      	push	{r7}
 8028f4e:	b083      	sub	sp, #12
 8028f50:	af00      	add	r7, sp, #0
 8028f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8028f54:	bf00      	nop
 8028f56:	370c      	adds	r7, #12
 8028f58:	46bd      	mov	sp, r7
 8028f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f5e:	4770      	bx	lr

08028f60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8028f60:	b580      	push	{r7, lr}
 8028f62:	b084      	sub	sp, #16
 8028f64:	af00      	add	r7, sp, #0
 8028f66:	60f8      	str	r0, [r7, #12]
 8028f68:	60b9      	str	r1, [r7, #8]
 8028f6a:	603b      	str	r3, [r7, #0]
 8028f6c:	4613      	mov	r3, r2
 8028f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8028f70:	e02c      	b.n	8028fcc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8028f72:	69bb      	ldr	r3, [r7, #24]
 8028f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028f78:	d028      	beq.n	8028fcc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8028f7a:	69bb      	ldr	r3, [r7, #24]
 8028f7c:	2b00      	cmp	r3, #0
 8028f7e:	d007      	beq.n	8028f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8028f80:	f7f8 fdf2 	bl	8021b68 <HAL_GetTick>
 8028f84:	4602      	mov	r2, r0
 8028f86:	683b      	ldr	r3, [r7, #0]
 8028f88:	1ad3      	subs	r3, r2, r3
 8028f8a:	69ba      	ldr	r2, [r7, #24]
 8028f8c:	429a      	cmp	r2, r3
 8028f8e:	d21d      	bcs.n	8028fcc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8028f90:	68fb      	ldr	r3, [r7, #12]
 8028f92:	681b      	ldr	r3, [r3, #0]
 8028f94:	68da      	ldr	r2, [r3, #12]
 8028f96:	68fb      	ldr	r3, [r7, #12]
 8028f98:	681b      	ldr	r3, [r3, #0]
 8028f9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8028f9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8028fa0:	68fb      	ldr	r3, [r7, #12]
 8028fa2:	681b      	ldr	r3, [r3, #0]
 8028fa4:	695a      	ldr	r2, [r3, #20]
 8028fa6:	68fb      	ldr	r3, [r7, #12]
 8028fa8:	681b      	ldr	r3, [r3, #0]
 8028faa:	f022 0201 	bic.w	r2, r2, #1
 8028fae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8028fb0:	68fb      	ldr	r3, [r7, #12]
 8028fb2:	2220      	movs	r2, #32
 8028fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8028fb8:	68fb      	ldr	r3, [r7, #12]
 8028fba:	2220      	movs	r2, #32
 8028fbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8028fc0:	68fb      	ldr	r3, [r7, #12]
 8028fc2:	2200      	movs	r2, #0
 8028fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8028fc8:	2303      	movs	r3, #3
 8028fca:	e00f      	b.n	8028fec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8028fcc:	68fb      	ldr	r3, [r7, #12]
 8028fce:	681b      	ldr	r3, [r3, #0]
 8028fd0:	681a      	ldr	r2, [r3, #0]
 8028fd2:	68bb      	ldr	r3, [r7, #8]
 8028fd4:	4013      	ands	r3, r2
 8028fd6:	68ba      	ldr	r2, [r7, #8]
 8028fd8:	429a      	cmp	r2, r3
 8028fda:	bf0c      	ite	eq
 8028fdc:	2301      	moveq	r3, #1
 8028fde:	2300      	movne	r3, #0
 8028fe0:	b2db      	uxtb	r3, r3
 8028fe2:	461a      	mov	r2, r3
 8028fe4:	79fb      	ldrb	r3, [r7, #7]
 8028fe6:	429a      	cmp	r2, r3
 8028fe8:	d0c3      	beq.n	8028f72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8028fea:	2300      	movs	r3, #0
}
 8028fec:	4618      	mov	r0, r3
 8028fee:	3710      	adds	r7, #16
 8028ff0:	46bd      	mov	sp, r7
 8028ff2:	bd80      	pop	{r7, pc}

08028ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8028ff4:	b480      	push	{r7}
 8028ff6:	b083      	sub	sp, #12
 8028ff8:	af00      	add	r7, sp, #0
 8028ffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8028ffc:	687b      	ldr	r3, [r7, #4]
 8028ffe:	681b      	ldr	r3, [r3, #0]
 8029000:	68da      	ldr	r2, [r3, #12]
 8029002:	687b      	ldr	r3, [r7, #4]
 8029004:	681b      	ldr	r3, [r3, #0]
 8029006:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 802900a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802900c:	687b      	ldr	r3, [r7, #4]
 802900e:	681b      	ldr	r3, [r3, #0]
 8029010:	695a      	ldr	r2, [r3, #20]
 8029012:	687b      	ldr	r3, [r7, #4]
 8029014:	681b      	ldr	r3, [r3, #0]
 8029016:	f022 0201 	bic.w	r2, r2, #1
 802901a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802901c:	687b      	ldr	r3, [r7, #4]
 802901e:	2220      	movs	r2, #32
 8029020:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8029024:	bf00      	nop
 8029026:	370c      	adds	r7, #12
 8029028:	46bd      	mov	sp, r7
 802902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802902e:	4770      	bx	lr

08029030 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8029030:	b580      	push	{r7, lr}
 8029032:	b084      	sub	sp, #16
 8029034:	af00      	add	r7, sp, #0
 8029036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8029038:	687b      	ldr	r3, [r7, #4]
 802903a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802903c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802903e:	68fb      	ldr	r3, [r7, #12]
 8029040:	2200      	movs	r2, #0
 8029042:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8029044:	68fb      	ldr	r3, [r7, #12]
 8029046:	2200      	movs	r2, #0
 8029048:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802904a:	68f8      	ldr	r0, [r7, #12]
 802904c:	f7ff ff7e 	bl	8028f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8029050:	bf00      	nop
 8029052:	3710      	adds	r7, #16
 8029054:	46bd      	mov	sp, r7
 8029056:	bd80      	pop	{r7, pc}

08029058 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8029058:	b480      	push	{r7}
 802905a:	b085      	sub	sp, #20
 802905c:	af00      	add	r7, sp, #0
 802905e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8029060:	687b      	ldr	r3, [r7, #4]
 8029062:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8029066:	b2db      	uxtb	r3, r3
 8029068:	2b21      	cmp	r3, #33	; 0x21
 802906a:	d144      	bne.n	80290f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 802906c:	687b      	ldr	r3, [r7, #4]
 802906e:	689b      	ldr	r3, [r3, #8]
 8029070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029074:	d11a      	bne.n	80290ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8029076:	687b      	ldr	r3, [r7, #4]
 8029078:	6a1b      	ldr	r3, [r3, #32]
 802907a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802907c:	68fb      	ldr	r3, [r7, #12]
 802907e:	881b      	ldrh	r3, [r3, #0]
 8029080:	461a      	mov	r2, r3
 8029082:	687b      	ldr	r3, [r7, #4]
 8029084:	681b      	ldr	r3, [r3, #0]
 8029086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802908a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 802908c:	687b      	ldr	r3, [r7, #4]
 802908e:	691b      	ldr	r3, [r3, #16]
 8029090:	2b00      	cmp	r3, #0
 8029092:	d105      	bne.n	80290a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8029094:	687b      	ldr	r3, [r7, #4]
 8029096:	6a1b      	ldr	r3, [r3, #32]
 8029098:	1c9a      	adds	r2, r3, #2
 802909a:	687b      	ldr	r3, [r7, #4]
 802909c:	621a      	str	r2, [r3, #32]
 802909e:	e00e      	b.n	80290be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80290a0:	687b      	ldr	r3, [r7, #4]
 80290a2:	6a1b      	ldr	r3, [r3, #32]
 80290a4:	1c5a      	adds	r2, r3, #1
 80290a6:	687b      	ldr	r3, [r7, #4]
 80290a8:	621a      	str	r2, [r3, #32]
 80290aa:	e008      	b.n	80290be <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80290ac:	687b      	ldr	r3, [r7, #4]
 80290ae:	6a1b      	ldr	r3, [r3, #32]
 80290b0:	1c59      	adds	r1, r3, #1
 80290b2:	687a      	ldr	r2, [r7, #4]
 80290b4:	6211      	str	r1, [r2, #32]
 80290b6:	781a      	ldrb	r2, [r3, #0]
 80290b8:	687b      	ldr	r3, [r7, #4]
 80290ba:	681b      	ldr	r3, [r3, #0]
 80290bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80290be:	687b      	ldr	r3, [r7, #4]
 80290c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80290c2:	b29b      	uxth	r3, r3
 80290c4:	3b01      	subs	r3, #1
 80290c6:	b29b      	uxth	r3, r3
 80290c8:	687a      	ldr	r2, [r7, #4]
 80290ca:	4619      	mov	r1, r3
 80290cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80290ce:	2b00      	cmp	r3, #0
 80290d0:	d10f      	bne.n	80290f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80290d2:	687b      	ldr	r3, [r7, #4]
 80290d4:	681b      	ldr	r3, [r3, #0]
 80290d6:	68da      	ldr	r2, [r3, #12]
 80290d8:	687b      	ldr	r3, [r7, #4]
 80290da:	681b      	ldr	r3, [r3, #0]
 80290dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80290e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80290e2:	687b      	ldr	r3, [r7, #4]
 80290e4:	681b      	ldr	r3, [r3, #0]
 80290e6:	68da      	ldr	r2, [r3, #12]
 80290e8:	687b      	ldr	r3, [r7, #4]
 80290ea:	681b      	ldr	r3, [r3, #0]
 80290ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80290f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80290f2:	2300      	movs	r3, #0
 80290f4:	e000      	b.n	80290f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80290f6:	2302      	movs	r3, #2
  }
}
 80290f8:	4618      	mov	r0, r3
 80290fa:	3714      	adds	r7, #20
 80290fc:	46bd      	mov	sp, r7
 80290fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029102:	4770      	bx	lr

08029104 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8029104:	b580      	push	{r7, lr}
 8029106:	b082      	sub	sp, #8
 8029108:	af00      	add	r7, sp, #0
 802910a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802910c:	687b      	ldr	r3, [r7, #4]
 802910e:	681b      	ldr	r3, [r3, #0]
 8029110:	68da      	ldr	r2, [r3, #12]
 8029112:	687b      	ldr	r3, [r7, #4]
 8029114:	681b      	ldr	r3, [r3, #0]
 8029116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802911a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802911c:	687b      	ldr	r3, [r7, #4]
 802911e:	2220      	movs	r2, #32
 8029120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8029124:	6878      	ldr	r0, [r7, #4]
 8029126:	f7ff ff07 	bl	8028f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802912a:	2300      	movs	r3, #0
}
 802912c:	4618      	mov	r0, r3
 802912e:	3708      	adds	r7, #8
 8029130:	46bd      	mov	sp, r7
 8029132:	bd80      	pop	{r7, pc}

08029134 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8029134:	b580      	push	{r7, lr}
 8029136:	b084      	sub	sp, #16
 8029138:	af00      	add	r7, sp, #0
 802913a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802913c:	687b      	ldr	r3, [r7, #4]
 802913e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8029142:	b2db      	uxtb	r3, r3
 8029144:	2b22      	cmp	r3, #34	; 0x22
 8029146:	d171      	bne.n	802922c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8029148:	687b      	ldr	r3, [r7, #4]
 802914a:	689b      	ldr	r3, [r3, #8]
 802914c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029150:	d123      	bne.n	802919a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8029152:	687b      	ldr	r3, [r7, #4]
 8029154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029156:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8029158:	687b      	ldr	r3, [r7, #4]
 802915a:	691b      	ldr	r3, [r3, #16]
 802915c:	2b00      	cmp	r3, #0
 802915e:	d10e      	bne.n	802917e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8029160:	687b      	ldr	r3, [r7, #4]
 8029162:	681b      	ldr	r3, [r3, #0]
 8029164:	685b      	ldr	r3, [r3, #4]
 8029166:	b29b      	uxth	r3, r3
 8029168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802916c:	b29a      	uxth	r2, r3
 802916e:	68fb      	ldr	r3, [r7, #12]
 8029170:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8029172:	687b      	ldr	r3, [r7, #4]
 8029174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029176:	1c9a      	adds	r2, r3, #2
 8029178:	687b      	ldr	r3, [r7, #4]
 802917a:	629a      	str	r2, [r3, #40]	; 0x28
 802917c:	e029      	b.n	80291d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 802917e:	687b      	ldr	r3, [r7, #4]
 8029180:	681b      	ldr	r3, [r3, #0]
 8029182:	685b      	ldr	r3, [r3, #4]
 8029184:	b29b      	uxth	r3, r3
 8029186:	b2db      	uxtb	r3, r3
 8029188:	b29a      	uxth	r2, r3
 802918a:	68fb      	ldr	r3, [r7, #12]
 802918c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 802918e:	687b      	ldr	r3, [r7, #4]
 8029190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029192:	1c5a      	adds	r2, r3, #1
 8029194:	687b      	ldr	r3, [r7, #4]
 8029196:	629a      	str	r2, [r3, #40]	; 0x28
 8029198:	e01b      	b.n	80291d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 802919a:	687b      	ldr	r3, [r7, #4]
 802919c:	691b      	ldr	r3, [r3, #16]
 802919e:	2b00      	cmp	r3, #0
 80291a0:	d10a      	bne.n	80291b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80291a2:	687b      	ldr	r3, [r7, #4]
 80291a4:	681b      	ldr	r3, [r3, #0]
 80291a6:	6858      	ldr	r0, [r3, #4]
 80291a8:	687b      	ldr	r3, [r7, #4]
 80291aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80291ac:	1c59      	adds	r1, r3, #1
 80291ae:	687a      	ldr	r2, [r7, #4]
 80291b0:	6291      	str	r1, [r2, #40]	; 0x28
 80291b2:	b2c2      	uxtb	r2, r0
 80291b4:	701a      	strb	r2, [r3, #0]
 80291b6:	e00c      	b.n	80291d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80291b8:	687b      	ldr	r3, [r7, #4]
 80291ba:	681b      	ldr	r3, [r3, #0]
 80291bc:	685b      	ldr	r3, [r3, #4]
 80291be:	b2da      	uxtb	r2, r3
 80291c0:	687b      	ldr	r3, [r7, #4]
 80291c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80291c4:	1c58      	adds	r0, r3, #1
 80291c6:	6879      	ldr	r1, [r7, #4]
 80291c8:	6288      	str	r0, [r1, #40]	; 0x28
 80291ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80291ce:	b2d2      	uxtb	r2, r2
 80291d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80291d2:	687b      	ldr	r3, [r7, #4]
 80291d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80291d6:	b29b      	uxth	r3, r3
 80291d8:	3b01      	subs	r3, #1
 80291da:	b29b      	uxth	r3, r3
 80291dc:	687a      	ldr	r2, [r7, #4]
 80291de:	4619      	mov	r1, r3
 80291e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80291e2:	2b00      	cmp	r3, #0
 80291e4:	d120      	bne.n	8029228 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80291e6:	687b      	ldr	r3, [r7, #4]
 80291e8:	681b      	ldr	r3, [r3, #0]
 80291ea:	68da      	ldr	r2, [r3, #12]
 80291ec:	687b      	ldr	r3, [r7, #4]
 80291ee:	681b      	ldr	r3, [r3, #0]
 80291f0:	f022 0220 	bic.w	r2, r2, #32
 80291f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80291f6:	687b      	ldr	r3, [r7, #4]
 80291f8:	681b      	ldr	r3, [r3, #0]
 80291fa:	68da      	ldr	r2, [r3, #12]
 80291fc:	687b      	ldr	r3, [r7, #4]
 80291fe:	681b      	ldr	r3, [r3, #0]
 8029200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8029204:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8029206:	687b      	ldr	r3, [r7, #4]
 8029208:	681b      	ldr	r3, [r3, #0]
 802920a:	695a      	ldr	r2, [r3, #20]
 802920c:	687b      	ldr	r3, [r7, #4]
 802920e:	681b      	ldr	r3, [r3, #0]
 8029210:	f022 0201 	bic.w	r2, r2, #1
 8029214:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8029216:	687b      	ldr	r3, [r7, #4]
 8029218:	2220      	movs	r2, #32
 802921a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 802921e:	6878      	ldr	r0, [r7, #4]
 8029220:	f00b f932 	bl	8034488 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8029224:	2300      	movs	r3, #0
 8029226:	e002      	b.n	802922e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8029228:	2300      	movs	r3, #0
 802922a:	e000      	b.n	802922e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 802922c:	2302      	movs	r3, #2
  }
}
 802922e:	4618      	mov	r0, r3
 8029230:	3710      	adds	r7, #16
 8029232:	46bd      	mov	sp, r7
 8029234:	bd80      	pop	{r7, pc}
	...

08029238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8029238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802923c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8029240:	af00      	add	r7, sp, #0
 8029242:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8029246:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802924a:	681b      	ldr	r3, [r3, #0]
 802924c:	691b      	ldr	r3, [r3, #16]
 802924e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8029252:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029256:	68d9      	ldr	r1, [r3, #12]
 8029258:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802925c:	681a      	ldr	r2, [r3, #0]
 802925e:	ea40 0301 	orr.w	r3, r0, r1
 8029262:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8029264:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029268:	689a      	ldr	r2, [r3, #8]
 802926a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802926e:	691b      	ldr	r3, [r3, #16]
 8029270:	431a      	orrs	r2, r3
 8029272:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029276:	695b      	ldr	r3, [r3, #20]
 8029278:	431a      	orrs	r2, r3
 802927a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802927e:	69db      	ldr	r3, [r3, #28]
 8029280:	4313      	orrs	r3, r2
 8029282:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8029286:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802928a:	681b      	ldr	r3, [r3, #0]
 802928c:	68db      	ldr	r3, [r3, #12]
 802928e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8029292:	f021 010c 	bic.w	r1, r1, #12
 8029296:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802929a:	681a      	ldr	r2, [r3, #0]
 802929c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80292a0:	430b      	orrs	r3, r1
 80292a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80292a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80292a8:	681b      	ldr	r3, [r3, #0]
 80292aa:	695b      	ldr	r3, [r3, #20]
 80292ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80292b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80292b4:	6999      	ldr	r1, [r3, #24]
 80292b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80292ba:	681a      	ldr	r2, [r3, #0]
 80292bc:	ea40 0301 	orr.w	r3, r0, r1
 80292c0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80292c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80292c6:	69db      	ldr	r3, [r3, #28]
 80292c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80292cc:	f040 824a 	bne.w	8029764 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80292d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80292d4:	681a      	ldr	r2, [r3, #0]
 80292d6:	4b96      	ldr	r3, [pc, #600]	; (8029530 <UART_SetConfig+0x2f8>)
 80292d8:	429a      	cmp	r2, r3
 80292da:	d006      	beq.n	80292ea <UART_SetConfig+0xb2>
 80292dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80292e0:	681a      	ldr	r2, [r3, #0]
 80292e2:	4b94      	ldr	r3, [pc, #592]	; (8029534 <UART_SetConfig+0x2fc>)
 80292e4:	429a      	cmp	r2, r3
 80292e6:	f040 8129 	bne.w	802953c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80292ea:	f7fe f8d7 	bl	802749c <HAL_RCC_GetPCLK2Freq>
 80292ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80292f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80292f6:	2200      	movs	r2, #0
 80292f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80292fc:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8029300:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8029304:	4622      	mov	r2, r4
 8029306:	462b      	mov	r3, r5
 8029308:	1891      	adds	r1, r2, r2
 802930a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 802930e:	415b      	adcs	r3, r3
 8029310:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8029314:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8029318:	4621      	mov	r1, r4
 802931a:	1851      	adds	r1, r2, r1
 802931c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8029320:	4629      	mov	r1, r5
 8029322:	414b      	adcs	r3, r1
 8029324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8029328:	f04f 0200 	mov.w	r2, #0
 802932c:	f04f 0300 	mov.w	r3, #0
 8029330:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8029334:	4649      	mov	r1, r9
 8029336:	00cb      	lsls	r3, r1, #3
 8029338:	4641      	mov	r1, r8
 802933a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802933e:	4641      	mov	r1, r8
 8029340:	00ca      	lsls	r2, r1, #3
 8029342:	4610      	mov	r0, r2
 8029344:	4619      	mov	r1, r3
 8029346:	4603      	mov	r3, r0
 8029348:	4622      	mov	r2, r4
 802934a:	189b      	adds	r3, r3, r2
 802934c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8029350:	462b      	mov	r3, r5
 8029352:	460a      	mov	r2, r1
 8029354:	eb42 0303 	adc.w	r3, r2, r3
 8029358:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802935c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029360:	685b      	ldr	r3, [r3, #4]
 8029362:	2200      	movs	r2, #0
 8029364:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8029368:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 802936c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8029370:	460b      	mov	r3, r1
 8029372:	18db      	adds	r3, r3, r3
 8029374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029378:	4613      	mov	r3, r2
 802937a:	eb42 0303 	adc.w	r3, r2, r3
 802937e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8029382:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8029386:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 802938a:	f7f6 ff89 	bl	80202a0 <__aeabi_uldivmod>
 802938e:	4602      	mov	r2, r0
 8029390:	460b      	mov	r3, r1
 8029392:	4b69      	ldr	r3, [pc, #420]	; (8029538 <UART_SetConfig+0x300>)
 8029394:	fba3 2302 	umull	r2, r3, r3, r2
 8029398:	095b      	lsrs	r3, r3, #5
 802939a:	011c      	lsls	r4, r3, #4
 802939c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80293a0:	2200      	movs	r2, #0
 80293a2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80293a6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80293aa:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80293ae:	4642      	mov	r2, r8
 80293b0:	464b      	mov	r3, r9
 80293b2:	1891      	adds	r1, r2, r2
 80293b4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80293b8:	415b      	adcs	r3, r3
 80293ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80293be:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80293c2:	4641      	mov	r1, r8
 80293c4:	1851      	adds	r1, r2, r1
 80293c6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80293ca:	4649      	mov	r1, r9
 80293cc:	414b      	adcs	r3, r1
 80293ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80293d2:	f04f 0200 	mov.w	r2, #0
 80293d6:	f04f 0300 	mov.w	r3, #0
 80293da:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80293de:	4659      	mov	r1, fp
 80293e0:	00cb      	lsls	r3, r1, #3
 80293e2:	4651      	mov	r1, sl
 80293e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80293e8:	4651      	mov	r1, sl
 80293ea:	00ca      	lsls	r2, r1, #3
 80293ec:	4610      	mov	r0, r2
 80293ee:	4619      	mov	r1, r3
 80293f0:	4603      	mov	r3, r0
 80293f2:	4642      	mov	r2, r8
 80293f4:	189b      	adds	r3, r3, r2
 80293f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80293fa:	464b      	mov	r3, r9
 80293fc:	460a      	mov	r2, r1
 80293fe:	eb42 0303 	adc.w	r3, r2, r3
 8029402:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8029406:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802940a:	685b      	ldr	r3, [r3, #4]
 802940c:	2200      	movs	r2, #0
 802940e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8029412:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8029416:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 802941a:	460b      	mov	r3, r1
 802941c:	18db      	adds	r3, r3, r3
 802941e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8029422:	4613      	mov	r3, r2
 8029424:	eb42 0303 	adc.w	r3, r2, r3
 8029428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802942c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8029430:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8029434:	f7f6 ff34 	bl	80202a0 <__aeabi_uldivmod>
 8029438:	4602      	mov	r2, r0
 802943a:	460b      	mov	r3, r1
 802943c:	4611      	mov	r1, r2
 802943e:	4b3e      	ldr	r3, [pc, #248]	; (8029538 <UART_SetConfig+0x300>)
 8029440:	fba3 2301 	umull	r2, r3, r3, r1
 8029444:	095b      	lsrs	r3, r3, #5
 8029446:	2264      	movs	r2, #100	; 0x64
 8029448:	fb02 f303 	mul.w	r3, r2, r3
 802944c:	1acb      	subs	r3, r1, r3
 802944e:	00db      	lsls	r3, r3, #3
 8029450:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8029454:	4b38      	ldr	r3, [pc, #224]	; (8029538 <UART_SetConfig+0x300>)
 8029456:	fba3 2302 	umull	r2, r3, r3, r2
 802945a:	095b      	lsrs	r3, r3, #5
 802945c:	005b      	lsls	r3, r3, #1
 802945e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8029462:	441c      	add	r4, r3
 8029464:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8029468:	2200      	movs	r2, #0
 802946a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 802946e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8029472:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8029476:	4642      	mov	r2, r8
 8029478:	464b      	mov	r3, r9
 802947a:	1891      	adds	r1, r2, r2
 802947c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8029480:	415b      	adcs	r3, r3
 8029482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8029486:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 802948a:	4641      	mov	r1, r8
 802948c:	1851      	adds	r1, r2, r1
 802948e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8029492:	4649      	mov	r1, r9
 8029494:	414b      	adcs	r3, r1
 8029496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802949a:	f04f 0200 	mov.w	r2, #0
 802949e:	f04f 0300 	mov.w	r3, #0
 80294a2:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80294a6:	4659      	mov	r1, fp
 80294a8:	00cb      	lsls	r3, r1, #3
 80294aa:	4651      	mov	r1, sl
 80294ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80294b0:	4651      	mov	r1, sl
 80294b2:	00ca      	lsls	r2, r1, #3
 80294b4:	4610      	mov	r0, r2
 80294b6:	4619      	mov	r1, r3
 80294b8:	4603      	mov	r3, r0
 80294ba:	4642      	mov	r2, r8
 80294bc:	189b      	adds	r3, r3, r2
 80294be:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80294c2:	464b      	mov	r3, r9
 80294c4:	460a      	mov	r2, r1
 80294c6:	eb42 0303 	adc.w	r3, r2, r3
 80294ca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80294ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80294d2:	685b      	ldr	r3, [r3, #4]
 80294d4:	2200      	movs	r2, #0
 80294d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80294da:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80294de:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80294e2:	460b      	mov	r3, r1
 80294e4:	18db      	adds	r3, r3, r3
 80294e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80294ea:	4613      	mov	r3, r2
 80294ec:	eb42 0303 	adc.w	r3, r2, r3
 80294f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80294f4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80294f8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80294fc:	f7f6 fed0 	bl	80202a0 <__aeabi_uldivmod>
 8029500:	4602      	mov	r2, r0
 8029502:	460b      	mov	r3, r1
 8029504:	4b0c      	ldr	r3, [pc, #48]	; (8029538 <UART_SetConfig+0x300>)
 8029506:	fba3 1302 	umull	r1, r3, r3, r2
 802950a:	095b      	lsrs	r3, r3, #5
 802950c:	2164      	movs	r1, #100	; 0x64
 802950e:	fb01 f303 	mul.w	r3, r1, r3
 8029512:	1ad3      	subs	r3, r2, r3
 8029514:	00db      	lsls	r3, r3, #3
 8029516:	3332      	adds	r3, #50	; 0x32
 8029518:	4a07      	ldr	r2, [pc, #28]	; (8029538 <UART_SetConfig+0x300>)
 802951a:	fba2 2303 	umull	r2, r3, r2, r3
 802951e:	095b      	lsrs	r3, r3, #5
 8029520:	f003 0207 	and.w	r2, r3, #7
 8029524:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029528:	681b      	ldr	r3, [r3, #0]
 802952a:	4422      	add	r2, r4
 802952c:	609a      	str	r2, [r3, #8]
 802952e:	e34a      	b.n	8029bc6 <UART_SetConfig+0x98e>
 8029530:	40011000 	.word	0x40011000
 8029534:	40011400 	.word	0x40011400
 8029538:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802953c:	f7fd ff9a 	bl	8027474 <HAL_RCC_GetPCLK1Freq>
 8029540:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8029544:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8029548:	2200      	movs	r2, #0
 802954a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 802954e:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8029552:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8029556:	4622      	mov	r2, r4
 8029558:	462b      	mov	r3, r5
 802955a:	1891      	adds	r1, r2, r2
 802955c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8029560:	415b      	adcs	r3, r3
 8029562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8029566:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 802956a:	4621      	mov	r1, r4
 802956c:	eb12 0a01 	adds.w	sl, r2, r1
 8029570:	4629      	mov	r1, r5
 8029572:	eb43 0b01 	adc.w	fp, r3, r1
 8029576:	f04f 0200 	mov.w	r2, #0
 802957a:	f04f 0300 	mov.w	r3, #0
 802957e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8029582:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8029586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802958a:	4692      	mov	sl, r2
 802958c:	469b      	mov	fp, r3
 802958e:	4623      	mov	r3, r4
 8029590:	eb1a 0303 	adds.w	r3, sl, r3
 8029594:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8029598:	462b      	mov	r3, r5
 802959a:	eb4b 0303 	adc.w	r3, fp, r3
 802959e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80295a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80295a6:	685b      	ldr	r3, [r3, #4]
 80295a8:	2200      	movs	r2, #0
 80295aa:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80295ae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80295b2:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80295b6:	460b      	mov	r3, r1
 80295b8:	18db      	adds	r3, r3, r3
 80295ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80295be:	4613      	mov	r3, r2
 80295c0:	eb42 0303 	adc.w	r3, r2, r3
 80295c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80295c8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80295cc:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80295d0:	f7f6 fe66 	bl	80202a0 <__aeabi_uldivmod>
 80295d4:	4602      	mov	r2, r0
 80295d6:	460b      	mov	r3, r1
 80295d8:	4b61      	ldr	r3, [pc, #388]	; (8029760 <UART_SetConfig+0x528>)
 80295da:	fba3 2302 	umull	r2, r3, r3, r2
 80295de:	095b      	lsrs	r3, r3, #5
 80295e0:	011c      	lsls	r4, r3, #4
 80295e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80295e6:	2200      	movs	r2, #0
 80295e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80295ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80295f0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80295f4:	4642      	mov	r2, r8
 80295f6:	464b      	mov	r3, r9
 80295f8:	1891      	adds	r1, r2, r2
 80295fa:	67b9      	str	r1, [r7, #120]	; 0x78
 80295fc:	415b      	adcs	r3, r3
 80295fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8029600:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8029604:	4641      	mov	r1, r8
 8029606:	1851      	adds	r1, r2, r1
 8029608:	6739      	str	r1, [r7, #112]	; 0x70
 802960a:	4649      	mov	r1, r9
 802960c:	414b      	adcs	r3, r1
 802960e:	677b      	str	r3, [r7, #116]	; 0x74
 8029610:	f04f 0200 	mov.w	r2, #0
 8029614:	f04f 0300 	mov.w	r3, #0
 8029618:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 802961c:	4659      	mov	r1, fp
 802961e:	00cb      	lsls	r3, r1, #3
 8029620:	4651      	mov	r1, sl
 8029622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029626:	4651      	mov	r1, sl
 8029628:	00ca      	lsls	r2, r1, #3
 802962a:	4610      	mov	r0, r2
 802962c:	4619      	mov	r1, r3
 802962e:	4603      	mov	r3, r0
 8029630:	4642      	mov	r2, r8
 8029632:	189b      	adds	r3, r3, r2
 8029634:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8029638:	464b      	mov	r3, r9
 802963a:	460a      	mov	r2, r1
 802963c:	eb42 0303 	adc.w	r3, r2, r3
 8029640:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8029644:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029648:	685b      	ldr	r3, [r3, #4]
 802964a:	2200      	movs	r2, #0
 802964c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8029650:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8029654:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8029658:	460b      	mov	r3, r1
 802965a:	18db      	adds	r3, r3, r3
 802965c:	66bb      	str	r3, [r7, #104]	; 0x68
 802965e:	4613      	mov	r3, r2
 8029660:	eb42 0303 	adc.w	r3, r2, r3
 8029664:	66fb      	str	r3, [r7, #108]	; 0x6c
 8029666:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 802966a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 802966e:	f7f6 fe17 	bl	80202a0 <__aeabi_uldivmod>
 8029672:	4602      	mov	r2, r0
 8029674:	460b      	mov	r3, r1
 8029676:	4611      	mov	r1, r2
 8029678:	4b39      	ldr	r3, [pc, #228]	; (8029760 <UART_SetConfig+0x528>)
 802967a:	fba3 2301 	umull	r2, r3, r3, r1
 802967e:	095b      	lsrs	r3, r3, #5
 8029680:	2264      	movs	r2, #100	; 0x64
 8029682:	fb02 f303 	mul.w	r3, r2, r3
 8029686:	1acb      	subs	r3, r1, r3
 8029688:	00db      	lsls	r3, r3, #3
 802968a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802968e:	4b34      	ldr	r3, [pc, #208]	; (8029760 <UART_SetConfig+0x528>)
 8029690:	fba3 2302 	umull	r2, r3, r3, r2
 8029694:	095b      	lsrs	r3, r3, #5
 8029696:	005b      	lsls	r3, r3, #1
 8029698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802969c:	441c      	add	r4, r3
 802969e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80296a2:	2200      	movs	r2, #0
 80296a4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80296a8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80296ac:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80296b0:	4642      	mov	r2, r8
 80296b2:	464b      	mov	r3, r9
 80296b4:	1891      	adds	r1, r2, r2
 80296b6:	6639      	str	r1, [r7, #96]	; 0x60
 80296b8:	415b      	adcs	r3, r3
 80296ba:	667b      	str	r3, [r7, #100]	; 0x64
 80296bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80296c0:	4641      	mov	r1, r8
 80296c2:	1851      	adds	r1, r2, r1
 80296c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80296c6:	4649      	mov	r1, r9
 80296c8:	414b      	adcs	r3, r1
 80296ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80296cc:	f04f 0200 	mov.w	r2, #0
 80296d0:	f04f 0300 	mov.w	r3, #0
 80296d4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80296d8:	4659      	mov	r1, fp
 80296da:	00cb      	lsls	r3, r1, #3
 80296dc:	4651      	mov	r1, sl
 80296de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80296e2:	4651      	mov	r1, sl
 80296e4:	00ca      	lsls	r2, r1, #3
 80296e6:	4610      	mov	r0, r2
 80296e8:	4619      	mov	r1, r3
 80296ea:	4603      	mov	r3, r0
 80296ec:	4642      	mov	r2, r8
 80296ee:	189b      	adds	r3, r3, r2
 80296f0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80296f4:	464b      	mov	r3, r9
 80296f6:	460a      	mov	r2, r1
 80296f8:	eb42 0303 	adc.w	r3, r2, r3
 80296fc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8029700:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029704:	685b      	ldr	r3, [r3, #4]
 8029706:	2200      	movs	r2, #0
 8029708:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 802970c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8029710:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8029714:	460b      	mov	r3, r1
 8029716:	18db      	adds	r3, r3, r3
 8029718:	653b      	str	r3, [r7, #80]	; 0x50
 802971a:	4613      	mov	r3, r2
 802971c:	eb42 0303 	adc.w	r3, r2, r3
 8029720:	657b      	str	r3, [r7, #84]	; 0x54
 8029722:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8029726:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 802972a:	f7f6 fdb9 	bl	80202a0 <__aeabi_uldivmod>
 802972e:	4602      	mov	r2, r0
 8029730:	460b      	mov	r3, r1
 8029732:	4b0b      	ldr	r3, [pc, #44]	; (8029760 <UART_SetConfig+0x528>)
 8029734:	fba3 1302 	umull	r1, r3, r3, r2
 8029738:	095b      	lsrs	r3, r3, #5
 802973a:	2164      	movs	r1, #100	; 0x64
 802973c:	fb01 f303 	mul.w	r3, r1, r3
 8029740:	1ad3      	subs	r3, r2, r3
 8029742:	00db      	lsls	r3, r3, #3
 8029744:	3332      	adds	r3, #50	; 0x32
 8029746:	4a06      	ldr	r2, [pc, #24]	; (8029760 <UART_SetConfig+0x528>)
 8029748:	fba2 2303 	umull	r2, r3, r2, r3
 802974c:	095b      	lsrs	r3, r3, #5
 802974e:	f003 0207 	and.w	r2, r3, #7
 8029752:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029756:	681b      	ldr	r3, [r3, #0]
 8029758:	4422      	add	r2, r4
 802975a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 802975c:	e233      	b.n	8029bc6 <UART_SetConfig+0x98e>
 802975e:	bf00      	nop
 8029760:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8029764:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029768:	681a      	ldr	r2, [r3, #0]
 802976a:	4b8d      	ldr	r3, [pc, #564]	; (80299a0 <UART_SetConfig+0x768>)
 802976c:	429a      	cmp	r2, r3
 802976e:	d006      	beq.n	802977e <UART_SetConfig+0x546>
 8029770:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029774:	681a      	ldr	r2, [r3, #0]
 8029776:	4b8b      	ldr	r3, [pc, #556]	; (80299a4 <UART_SetConfig+0x76c>)
 8029778:	429a      	cmp	r2, r3
 802977a:	f040 8117 	bne.w	80299ac <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 802977e:	f7fd fe8d 	bl	802749c <HAL_RCC_GetPCLK2Freq>
 8029782:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8029786:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 802978a:	2200      	movs	r2, #0
 802978c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8029790:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8029794:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8029798:	4622      	mov	r2, r4
 802979a:	462b      	mov	r3, r5
 802979c:	1891      	adds	r1, r2, r2
 802979e:	64b9      	str	r1, [r7, #72]	; 0x48
 80297a0:	415b      	adcs	r3, r3
 80297a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80297a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80297a8:	4621      	mov	r1, r4
 80297aa:	eb12 0801 	adds.w	r8, r2, r1
 80297ae:	4629      	mov	r1, r5
 80297b0:	eb43 0901 	adc.w	r9, r3, r1
 80297b4:	f04f 0200 	mov.w	r2, #0
 80297b8:	f04f 0300 	mov.w	r3, #0
 80297bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80297c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80297c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80297c8:	4690      	mov	r8, r2
 80297ca:	4699      	mov	r9, r3
 80297cc:	4623      	mov	r3, r4
 80297ce:	eb18 0303 	adds.w	r3, r8, r3
 80297d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80297d6:	462b      	mov	r3, r5
 80297d8:	eb49 0303 	adc.w	r3, r9, r3
 80297dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80297e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80297e4:	685b      	ldr	r3, [r3, #4]
 80297e6:	2200      	movs	r2, #0
 80297e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80297ec:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80297f0:	f04f 0200 	mov.w	r2, #0
 80297f4:	f04f 0300 	mov.w	r3, #0
 80297f8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80297fc:	4629      	mov	r1, r5
 80297fe:	008b      	lsls	r3, r1, #2
 8029800:	4621      	mov	r1, r4
 8029802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029806:	4621      	mov	r1, r4
 8029808:	008a      	lsls	r2, r1, #2
 802980a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 802980e:	f7f6 fd47 	bl	80202a0 <__aeabi_uldivmod>
 8029812:	4602      	mov	r2, r0
 8029814:	460b      	mov	r3, r1
 8029816:	4b64      	ldr	r3, [pc, #400]	; (80299a8 <UART_SetConfig+0x770>)
 8029818:	fba3 2302 	umull	r2, r3, r3, r2
 802981c:	095b      	lsrs	r3, r3, #5
 802981e:	011c      	lsls	r4, r3, #4
 8029820:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8029824:	2200      	movs	r2, #0
 8029826:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 802982a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 802982e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8029832:	4642      	mov	r2, r8
 8029834:	464b      	mov	r3, r9
 8029836:	1891      	adds	r1, r2, r2
 8029838:	6439      	str	r1, [r7, #64]	; 0x40
 802983a:	415b      	adcs	r3, r3
 802983c:	647b      	str	r3, [r7, #68]	; 0x44
 802983e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8029842:	4641      	mov	r1, r8
 8029844:	1851      	adds	r1, r2, r1
 8029846:	63b9      	str	r1, [r7, #56]	; 0x38
 8029848:	4649      	mov	r1, r9
 802984a:	414b      	adcs	r3, r1
 802984c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802984e:	f04f 0200 	mov.w	r2, #0
 8029852:	f04f 0300 	mov.w	r3, #0
 8029856:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 802985a:	4659      	mov	r1, fp
 802985c:	00cb      	lsls	r3, r1, #3
 802985e:	4651      	mov	r1, sl
 8029860:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029864:	4651      	mov	r1, sl
 8029866:	00ca      	lsls	r2, r1, #3
 8029868:	4610      	mov	r0, r2
 802986a:	4619      	mov	r1, r3
 802986c:	4603      	mov	r3, r0
 802986e:	4642      	mov	r2, r8
 8029870:	189b      	adds	r3, r3, r2
 8029872:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8029876:	464b      	mov	r3, r9
 8029878:	460a      	mov	r2, r1
 802987a:	eb42 0303 	adc.w	r3, r2, r3
 802987e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8029882:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029886:	685b      	ldr	r3, [r3, #4]
 8029888:	2200      	movs	r2, #0
 802988a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 802988e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8029892:	f04f 0200 	mov.w	r2, #0
 8029896:	f04f 0300 	mov.w	r3, #0
 802989a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 802989e:	4649      	mov	r1, r9
 80298a0:	008b      	lsls	r3, r1, #2
 80298a2:	4641      	mov	r1, r8
 80298a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80298a8:	4641      	mov	r1, r8
 80298aa:	008a      	lsls	r2, r1, #2
 80298ac:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80298b0:	f7f6 fcf6 	bl	80202a0 <__aeabi_uldivmod>
 80298b4:	4602      	mov	r2, r0
 80298b6:	460b      	mov	r3, r1
 80298b8:	4611      	mov	r1, r2
 80298ba:	4b3b      	ldr	r3, [pc, #236]	; (80299a8 <UART_SetConfig+0x770>)
 80298bc:	fba3 2301 	umull	r2, r3, r3, r1
 80298c0:	095b      	lsrs	r3, r3, #5
 80298c2:	2264      	movs	r2, #100	; 0x64
 80298c4:	fb02 f303 	mul.w	r3, r2, r3
 80298c8:	1acb      	subs	r3, r1, r3
 80298ca:	011b      	lsls	r3, r3, #4
 80298cc:	3332      	adds	r3, #50	; 0x32
 80298ce:	4a36      	ldr	r2, [pc, #216]	; (80299a8 <UART_SetConfig+0x770>)
 80298d0:	fba2 2303 	umull	r2, r3, r2, r3
 80298d4:	095b      	lsrs	r3, r3, #5
 80298d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80298da:	441c      	add	r4, r3
 80298dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80298e0:	2200      	movs	r2, #0
 80298e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80298e6:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80298ea:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80298ee:	4642      	mov	r2, r8
 80298f0:	464b      	mov	r3, r9
 80298f2:	1891      	adds	r1, r2, r2
 80298f4:	6339      	str	r1, [r7, #48]	; 0x30
 80298f6:	415b      	adcs	r3, r3
 80298f8:	637b      	str	r3, [r7, #52]	; 0x34
 80298fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80298fe:	4641      	mov	r1, r8
 8029900:	1851      	adds	r1, r2, r1
 8029902:	62b9      	str	r1, [r7, #40]	; 0x28
 8029904:	4649      	mov	r1, r9
 8029906:	414b      	adcs	r3, r1
 8029908:	62fb      	str	r3, [r7, #44]	; 0x2c
 802990a:	f04f 0200 	mov.w	r2, #0
 802990e:	f04f 0300 	mov.w	r3, #0
 8029912:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8029916:	4659      	mov	r1, fp
 8029918:	00cb      	lsls	r3, r1, #3
 802991a:	4651      	mov	r1, sl
 802991c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029920:	4651      	mov	r1, sl
 8029922:	00ca      	lsls	r2, r1, #3
 8029924:	4610      	mov	r0, r2
 8029926:	4619      	mov	r1, r3
 8029928:	4603      	mov	r3, r0
 802992a:	4642      	mov	r2, r8
 802992c:	189b      	adds	r3, r3, r2
 802992e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8029932:	464b      	mov	r3, r9
 8029934:	460a      	mov	r2, r1
 8029936:	eb42 0303 	adc.w	r3, r2, r3
 802993a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 802993e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029942:	685b      	ldr	r3, [r3, #4]
 8029944:	2200      	movs	r2, #0
 8029946:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 802994a:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 802994e:	f04f 0200 	mov.w	r2, #0
 8029952:	f04f 0300 	mov.w	r3, #0
 8029956:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 802995a:	4649      	mov	r1, r9
 802995c:	008b      	lsls	r3, r1, #2
 802995e:	4641      	mov	r1, r8
 8029960:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029964:	4641      	mov	r1, r8
 8029966:	008a      	lsls	r2, r1, #2
 8029968:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 802996c:	f7f6 fc98 	bl	80202a0 <__aeabi_uldivmod>
 8029970:	4602      	mov	r2, r0
 8029972:	460b      	mov	r3, r1
 8029974:	4b0c      	ldr	r3, [pc, #48]	; (80299a8 <UART_SetConfig+0x770>)
 8029976:	fba3 1302 	umull	r1, r3, r3, r2
 802997a:	095b      	lsrs	r3, r3, #5
 802997c:	2164      	movs	r1, #100	; 0x64
 802997e:	fb01 f303 	mul.w	r3, r1, r3
 8029982:	1ad3      	subs	r3, r2, r3
 8029984:	011b      	lsls	r3, r3, #4
 8029986:	3332      	adds	r3, #50	; 0x32
 8029988:	4a07      	ldr	r2, [pc, #28]	; (80299a8 <UART_SetConfig+0x770>)
 802998a:	fba2 2303 	umull	r2, r3, r2, r3
 802998e:	095b      	lsrs	r3, r3, #5
 8029990:	f003 020f 	and.w	r2, r3, #15
 8029994:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029998:	681b      	ldr	r3, [r3, #0]
 802999a:	4422      	add	r2, r4
 802999c:	609a      	str	r2, [r3, #8]
 802999e:	e112      	b.n	8029bc6 <UART_SetConfig+0x98e>
 80299a0:	40011000 	.word	0x40011000
 80299a4:	40011400 	.word	0x40011400
 80299a8:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80299ac:	f7fd fd62 	bl	8027474 <HAL_RCC_GetPCLK1Freq>
 80299b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80299b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80299b8:	2200      	movs	r2, #0
 80299ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80299be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80299c2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80299c6:	4642      	mov	r2, r8
 80299c8:	464b      	mov	r3, r9
 80299ca:	1891      	adds	r1, r2, r2
 80299cc:	6239      	str	r1, [r7, #32]
 80299ce:	415b      	adcs	r3, r3
 80299d0:	627b      	str	r3, [r7, #36]	; 0x24
 80299d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80299d6:	4641      	mov	r1, r8
 80299d8:	1854      	adds	r4, r2, r1
 80299da:	4649      	mov	r1, r9
 80299dc:	eb43 0501 	adc.w	r5, r3, r1
 80299e0:	f04f 0200 	mov.w	r2, #0
 80299e4:	f04f 0300 	mov.w	r3, #0
 80299e8:	00eb      	lsls	r3, r5, #3
 80299ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80299ee:	00e2      	lsls	r2, r4, #3
 80299f0:	4614      	mov	r4, r2
 80299f2:	461d      	mov	r5, r3
 80299f4:	4643      	mov	r3, r8
 80299f6:	18e3      	adds	r3, r4, r3
 80299f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80299fc:	464b      	mov	r3, r9
 80299fe:	eb45 0303 	adc.w	r3, r5, r3
 8029a02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8029a06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029a0a:	685b      	ldr	r3, [r3, #4]
 8029a0c:	2200      	movs	r2, #0
 8029a0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8029a12:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8029a16:	f04f 0200 	mov.w	r2, #0
 8029a1a:	f04f 0300 	mov.w	r3, #0
 8029a1e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8029a22:	4629      	mov	r1, r5
 8029a24:	008b      	lsls	r3, r1, #2
 8029a26:	4621      	mov	r1, r4
 8029a28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029a2c:	4621      	mov	r1, r4
 8029a2e:	008a      	lsls	r2, r1, #2
 8029a30:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8029a34:	f7f6 fc34 	bl	80202a0 <__aeabi_uldivmod>
 8029a38:	4602      	mov	r2, r0
 8029a3a:	460b      	mov	r3, r1
 8029a3c:	4b65      	ldr	r3, [pc, #404]	; (8029bd4 <UART_SetConfig+0x99c>)
 8029a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8029a42:	095b      	lsrs	r3, r3, #5
 8029a44:	011c      	lsls	r4, r3, #4
 8029a46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8029a4a:	2200      	movs	r2, #0
 8029a4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8029a50:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8029a54:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8029a58:	4642      	mov	r2, r8
 8029a5a:	464b      	mov	r3, r9
 8029a5c:	1891      	adds	r1, r2, r2
 8029a5e:	61b9      	str	r1, [r7, #24]
 8029a60:	415b      	adcs	r3, r3
 8029a62:	61fb      	str	r3, [r7, #28]
 8029a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8029a68:	4641      	mov	r1, r8
 8029a6a:	1851      	adds	r1, r2, r1
 8029a6c:	6139      	str	r1, [r7, #16]
 8029a6e:	4649      	mov	r1, r9
 8029a70:	414b      	adcs	r3, r1
 8029a72:	617b      	str	r3, [r7, #20]
 8029a74:	f04f 0200 	mov.w	r2, #0
 8029a78:	f04f 0300 	mov.w	r3, #0
 8029a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8029a80:	4659      	mov	r1, fp
 8029a82:	00cb      	lsls	r3, r1, #3
 8029a84:	4651      	mov	r1, sl
 8029a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029a8a:	4651      	mov	r1, sl
 8029a8c:	00ca      	lsls	r2, r1, #3
 8029a8e:	4610      	mov	r0, r2
 8029a90:	4619      	mov	r1, r3
 8029a92:	4603      	mov	r3, r0
 8029a94:	4642      	mov	r2, r8
 8029a96:	189b      	adds	r3, r3, r2
 8029a98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8029a9c:	464b      	mov	r3, r9
 8029a9e:	460a      	mov	r2, r1
 8029aa0:	eb42 0303 	adc.w	r3, r2, r3
 8029aa4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8029aa8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029aac:	685b      	ldr	r3, [r3, #4]
 8029aae:	2200      	movs	r2, #0
 8029ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8029ab4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8029ab8:	f04f 0200 	mov.w	r2, #0
 8029abc:	f04f 0300 	mov.w	r3, #0
 8029ac0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8029ac4:	4649      	mov	r1, r9
 8029ac6:	008b      	lsls	r3, r1, #2
 8029ac8:	4641      	mov	r1, r8
 8029aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029ace:	4641      	mov	r1, r8
 8029ad0:	008a      	lsls	r2, r1, #2
 8029ad2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8029ad6:	f7f6 fbe3 	bl	80202a0 <__aeabi_uldivmod>
 8029ada:	4602      	mov	r2, r0
 8029adc:	460b      	mov	r3, r1
 8029ade:	4611      	mov	r1, r2
 8029ae0:	4b3c      	ldr	r3, [pc, #240]	; (8029bd4 <UART_SetConfig+0x99c>)
 8029ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8029ae6:	095b      	lsrs	r3, r3, #5
 8029ae8:	2264      	movs	r2, #100	; 0x64
 8029aea:	fb02 f303 	mul.w	r3, r2, r3
 8029aee:	1acb      	subs	r3, r1, r3
 8029af0:	011b      	lsls	r3, r3, #4
 8029af2:	3332      	adds	r3, #50	; 0x32
 8029af4:	4a37      	ldr	r2, [pc, #220]	; (8029bd4 <UART_SetConfig+0x99c>)
 8029af6:	fba2 2303 	umull	r2, r3, r2, r3
 8029afa:	095b      	lsrs	r3, r3, #5
 8029afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029b00:	441c      	add	r4, r3
 8029b02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8029b06:	2200      	movs	r2, #0
 8029b08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8029b0c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8029b10:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8029b14:	4642      	mov	r2, r8
 8029b16:	464b      	mov	r3, r9
 8029b18:	1891      	adds	r1, r2, r2
 8029b1a:	60b9      	str	r1, [r7, #8]
 8029b1c:	415b      	adcs	r3, r3
 8029b1e:	60fb      	str	r3, [r7, #12]
 8029b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8029b24:	4641      	mov	r1, r8
 8029b26:	1851      	adds	r1, r2, r1
 8029b28:	6039      	str	r1, [r7, #0]
 8029b2a:	4649      	mov	r1, r9
 8029b2c:	414b      	adcs	r3, r1
 8029b2e:	607b      	str	r3, [r7, #4]
 8029b30:	f04f 0200 	mov.w	r2, #0
 8029b34:	f04f 0300 	mov.w	r3, #0
 8029b38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8029b3c:	4659      	mov	r1, fp
 8029b3e:	00cb      	lsls	r3, r1, #3
 8029b40:	4651      	mov	r1, sl
 8029b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029b46:	4651      	mov	r1, sl
 8029b48:	00ca      	lsls	r2, r1, #3
 8029b4a:	4610      	mov	r0, r2
 8029b4c:	4619      	mov	r1, r3
 8029b4e:	4603      	mov	r3, r0
 8029b50:	4642      	mov	r2, r8
 8029b52:	189b      	adds	r3, r3, r2
 8029b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8029b58:	464b      	mov	r3, r9
 8029b5a:	460a      	mov	r2, r1
 8029b5c:	eb42 0303 	adc.w	r3, r2, r3
 8029b60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8029b64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029b68:	685b      	ldr	r3, [r3, #4]
 8029b6a:	2200      	movs	r2, #0
 8029b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8029b70:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8029b74:	f04f 0200 	mov.w	r2, #0
 8029b78:	f04f 0300 	mov.w	r3, #0
 8029b7c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8029b80:	4649      	mov	r1, r9
 8029b82:	008b      	lsls	r3, r1, #2
 8029b84:	4641      	mov	r1, r8
 8029b86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029b8a:	4641      	mov	r1, r8
 8029b8c:	008a      	lsls	r2, r1, #2
 8029b8e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8029b92:	f7f6 fb85 	bl	80202a0 <__aeabi_uldivmod>
 8029b96:	4602      	mov	r2, r0
 8029b98:	460b      	mov	r3, r1
 8029b9a:	4b0e      	ldr	r3, [pc, #56]	; (8029bd4 <UART_SetConfig+0x99c>)
 8029b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8029ba0:	095b      	lsrs	r3, r3, #5
 8029ba2:	2164      	movs	r1, #100	; 0x64
 8029ba4:	fb01 f303 	mul.w	r3, r1, r3
 8029ba8:	1ad3      	subs	r3, r2, r3
 8029baa:	011b      	lsls	r3, r3, #4
 8029bac:	3332      	adds	r3, #50	; 0x32
 8029bae:	4a09      	ldr	r2, [pc, #36]	; (8029bd4 <UART_SetConfig+0x99c>)
 8029bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8029bb4:	095b      	lsrs	r3, r3, #5
 8029bb6:	f003 020f 	and.w	r2, r3, #15
 8029bba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029bbe:	681b      	ldr	r3, [r3, #0]
 8029bc0:	4422      	add	r2, r4
 8029bc2:	609a      	str	r2, [r3, #8]
}
 8029bc4:	e7ff      	b.n	8029bc6 <UART_SetConfig+0x98e>
 8029bc6:	bf00      	nop
 8029bc8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8029bcc:	46bd      	mov	sp, r7
 8029bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8029bd2:	bf00      	nop
 8029bd4:	51eb851f 	.word	0x51eb851f

08029bd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8029bd8:	b084      	sub	sp, #16
 8029bda:	b580      	push	{r7, lr}
 8029bdc:	b084      	sub	sp, #16
 8029bde:	af00      	add	r7, sp, #0
 8029be0:	6078      	str	r0, [r7, #4]
 8029be2:	f107 001c 	add.w	r0, r7, #28
 8029be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8029bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029bec:	2b01      	cmp	r3, #1
 8029bee:	d122      	bne.n	8029c36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8029bf0:	687b      	ldr	r3, [r7, #4]
 8029bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029bf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029bf8:	687b      	ldr	r3, [r7, #4]
 8029bfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8029bfc:	687b      	ldr	r3, [r7, #4]
 8029bfe:	68db      	ldr	r3, [r3, #12]
 8029c00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8029c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029c08:	687a      	ldr	r2, [r7, #4]
 8029c0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8029c0c:	687b      	ldr	r3, [r7, #4]
 8029c0e:	68db      	ldr	r3, [r3, #12]
 8029c10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8029c14:	687b      	ldr	r3, [r7, #4]
 8029c16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8029c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029c1a:	2b01      	cmp	r3, #1
 8029c1c:	d105      	bne.n	8029c2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8029c1e:	687b      	ldr	r3, [r7, #4]
 8029c20:	68db      	ldr	r3, [r3, #12]
 8029c22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8029c26:	687b      	ldr	r3, [r7, #4]
 8029c28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8029c2a:	6878      	ldr	r0, [r7, #4]
 8029c2c:	f001 fac6 	bl	802b1bc <USB_CoreReset>
 8029c30:	4603      	mov	r3, r0
 8029c32:	73fb      	strb	r3, [r7, #15]
 8029c34:	e01a      	b.n	8029c6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8029c36:	687b      	ldr	r3, [r7, #4]
 8029c38:	68db      	ldr	r3, [r3, #12]
 8029c3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8029c3e:	687b      	ldr	r3, [r7, #4]
 8029c40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8029c42:	6878      	ldr	r0, [r7, #4]
 8029c44:	f001 faba 	bl	802b1bc <USB_CoreReset>
 8029c48:	4603      	mov	r3, r0
 8029c4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8029c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029c4e:	2b00      	cmp	r3, #0
 8029c50:	d106      	bne.n	8029c60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8029c52:	687b      	ldr	r3, [r7, #4]
 8029c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029c56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8029c5a:	687b      	ldr	r3, [r7, #4]
 8029c5c:	639a      	str	r2, [r3, #56]	; 0x38
 8029c5e:	e005      	b.n	8029c6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8029c60:	687b      	ldr	r3, [r7, #4]
 8029c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029c64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029c68:	687b      	ldr	r3, [r7, #4]
 8029c6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8029c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029c6e:	2b01      	cmp	r3, #1
 8029c70:	d10b      	bne.n	8029c8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8029c72:	687b      	ldr	r3, [r7, #4]
 8029c74:	689b      	ldr	r3, [r3, #8]
 8029c76:	f043 0206 	orr.w	r2, r3, #6
 8029c7a:	687b      	ldr	r3, [r7, #4]
 8029c7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8029c7e:	687b      	ldr	r3, [r7, #4]
 8029c80:	689b      	ldr	r3, [r3, #8]
 8029c82:	f043 0220 	orr.w	r2, r3, #32
 8029c86:	687b      	ldr	r3, [r7, #4]
 8029c88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8029c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8029c8c:	4618      	mov	r0, r3
 8029c8e:	3710      	adds	r7, #16
 8029c90:	46bd      	mov	sp, r7
 8029c92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8029c96:	b004      	add	sp, #16
 8029c98:	4770      	bx	lr
	...

08029c9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8029c9c:	b480      	push	{r7}
 8029c9e:	b087      	sub	sp, #28
 8029ca0:	af00      	add	r7, sp, #0
 8029ca2:	60f8      	str	r0, [r7, #12]
 8029ca4:	60b9      	str	r1, [r7, #8]
 8029ca6:	4613      	mov	r3, r2
 8029ca8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8029caa:	79fb      	ldrb	r3, [r7, #7]
 8029cac:	2b02      	cmp	r3, #2
 8029cae:	d165      	bne.n	8029d7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8029cb0:	68bb      	ldr	r3, [r7, #8]
 8029cb2:	4a41      	ldr	r2, [pc, #260]	; (8029db8 <USB_SetTurnaroundTime+0x11c>)
 8029cb4:	4293      	cmp	r3, r2
 8029cb6:	d906      	bls.n	8029cc6 <USB_SetTurnaroundTime+0x2a>
 8029cb8:	68bb      	ldr	r3, [r7, #8]
 8029cba:	4a40      	ldr	r2, [pc, #256]	; (8029dbc <USB_SetTurnaroundTime+0x120>)
 8029cbc:	4293      	cmp	r3, r2
 8029cbe:	d202      	bcs.n	8029cc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8029cc0:	230f      	movs	r3, #15
 8029cc2:	617b      	str	r3, [r7, #20]
 8029cc4:	e062      	b.n	8029d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8029cc6:	68bb      	ldr	r3, [r7, #8]
 8029cc8:	4a3c      	ldr	r2, [pc, #240]	; (8029dbc <USB_SetTurnaroundTime+0x120>)
 8029cca:	4293      	cmp	r3, r2
 8029ccc:	d306      	bcc.n	8029cdc <USB_SetTurnaroundTime+0x40>
 8029cce:	68bb      	ldr	r3, [r7, #8]
 8029cd0:	4a3b      	ldr	r2, [pc, #236]	; (8029dc0 <USB_SetTurnaroundTime+0x124>)
 8029cd2:	4293      	cmp	r3, r2
 8029cd4:	d202      	bcs.n	8029cdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8029cd6:	230e      	movs	r3, #14
 8029cd8:	617b      	str	r3, [r7, #20]
 8029cda:	e057      	b.n	8029d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8029cdc:	68bb      	ldr	r3, [r7, #8]
 8029cde:	4a38      	ldr	r2, [pc, #224]	; (8029dc0 <USB_SetTurnaroundTime+0x124>)
 8029ce0:	4293      	cmp	r3, r2
 8029ce2:	d306      	bcc.n	8029cf2 <USB_SetTurnaroundTime+0x56>
 8029ce4:	68bb      	ldr	r3, [r7, #8]
 8029ce6:	4a37      	ldr	r2, [pc, #220]	; (8029dc4 <USB_SetTurnaroundTime+0x128>)
 8029ce8:	4293      	cmp	r3, r2
 8029cea:	d202      	bcs.n	8029cf2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8029cec:	230d      	movs	r3, #13
 8029cee:	617b      	str	r3, [r7, #20]
 8029cf0:	e04c      	b.n	8029d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8029cf2:	68bb      	ldr	r3, [r7, #8]
 8029cf4:	4a33      	ldr	r2, [pc, #204]	; (8029dc4 <USB_SetTurnaroundTime+0x128>)
 8029cf6:	4293      	cmp	r3, r2
 8029cf8:	d306      	bcc.n	8029d08 <USB_SetTurnaroundTime+0x6c>
 8029cfa:	68bb      	ldr	r3, [r7, #8]
 8029cfc:	4a32      	ldr	r2, [pc, #200]	; (8029dc8 <USB_SetTurnaroundTime+0x12c>)
 8029cfe:	4293      	cmp	r3, r2
 8029d00:	d802      	bhi.n	8029d08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8029d02:	230c      	movs	r3, #12
 8029d04:	617b      	str	r3, [r7, #20]
 8029d06:	e041      	b.n	8029d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8029d08:	68bb      	ldr	r3, [r7, #8]
 8029d0a:	4a2f      	ldr	r2, [pc, #188]	; (8029dc8 <USB_SetTurnaroundTime+0x12c>)
 8029d0c:	4293      	cmp	r3, r2
 8029d0e:	d906      	bls.n	8029d1e <USB_SetTurnaroundTime+0x82>
 8029d10:	68bb      	ldr	r3, [r7, #8]
 8029d12:	4a2e      	ldr	r2, [pc, #184]	; (8029dcc <USB_SetTurnaroundTime+0x130>)
 8029d14:	4293      	cmp	r3, r2
 8029d16:	d802      	bhi.n	8029d1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8029d18:	230b      	movs	r3, #11
 8029d1a:	617b      	str	r3, [r7, #20]
 8029d1c:	e036      	b.n	8029d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8029d1e:	68bb      	ldr	r3, [r7, #8]
 8029d20:	4a2a      	ldr	r2, [pc, #168]	; (8029dcc <USB_SetTurnaroundTime+0x130>)
 8029d22:	4293      	cmp	r3, r2
 8029d24:	d906      	bls.n	8029d34 <USB_SetTurnaroundTime+0x98>
 8029d26:	68bb      	ldr	r3, [r7, #8]
 8029d28:	4a29      	ldr	r2, [pc, #164]	; (8029dd0 <USB_SetTurnaroundTime+0x134>)
 8029d2a:	4293      	cmp	r3, r2
 8029d2c:	d802      	bhi.n	8029d34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8029d2e:	230a      	movs	r3, #10
 8029d30:	617b      	str	r3, [r7, #20]
 8029d32:	e02b      	b.n	8029d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8029d34:	68bb      	ldr	r3, [r7, #8]
 8029d36:	4a26      	ldr	r2, [pc, #152]	; (8029dd0 <USB_SetTurnaroundTime+0x134>)
 8029d38:	4293      	cmp	r3, r2
 8029d3a:	d906      	bls.n	8029d4a <USB_SetTurnaroundTime+0xae>
 8029d3c:	68bb      	ldr	r3, [r7, #8]
 8029d3e:	4a25      	ldr	r2, [pc, #148]	; (8029dd4 <USB_SetTurnaroundTime+0x138>)
 8029d40:	4293      	cmp	r3, r2
 8029d42:	d202      	bcs.n	8029d4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8029d44:	2309      	movs	r3, #9
 8029d46:	617b      	str	r3, [r7, #20]
 8029d48:	e020      	b.n	8029d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8029d4a:	68bb      	ldr	r3, [r7, #8]
 8029d4c:	4a21      	ldr	r2, [pc, #132]	; (8029dd4 <USB_SetTurnaroundTime+0x138>)
 8029d4e:	4293      	cmp	r3, r2
 8029d50:	d306      	bcc.n	8029d60 <USB_SetTurnaroundTime+0xc4>
 8029d52:	68bb      	ldr	r3, [r7, #8]
 8029d54:	4a20      	ldr	r2, [pc, #128]	; (8029dd8 <USB_SetTurnaroundTime+0x13c>)
 8029d56:	4293      	cmp	r3, r2
 8029d58:	d802      	bhi.n	8029d60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8029d5a:	2308      	movs	r3, #8
 8029d5c:	617b      	str	r3, [r7, #20]
 8029d5e:	e015      	b.n	8029d8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8029d60:	68bb      	ldr	r3, [r7, #8]
 8029d62:	4a1d      	ldr	r2, [pc, #116]	; (8029dd8 <USB_SetTurnaroundTime+0x13c>)
 8029d64:	4293      	cmp	r3, r2
 8029d66:	d906      	bls.n	8029d76 <USB_SetTurnaroundTime+0xda>
 8029d68:	68bb      	ldr	r3, [r7, #8]
 8029d6a:	4a1c      	ldr	r2, [pc, #112]	; (8029ddc <USB_SetTurnaroundTime+0x140>)
 8029d6c:	4293      	cmp	r3, r2
 8029d6e:	d202      	bcs.n	8029d76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8029d70:	2307      	movs	r3, #7
 8029d72:	617b      	str	r3, [r7, #20]
 8029d74:	e00a      	b.n	8029d8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8029d76:	2306      	movs	r3, #6
 8029d78:	617b      	str	r3, [r7, #20]
 8029d7a:	e007      	b.n	8029d8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8029d7c:	79fb      	ldrb	r3, [r7, #7]
 8029d7e:	2b00      	cmp	r3, #0
 8029d80:	d102      	bne.n	8029d88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8029d82:	2309      	movs	r3, #9
 8029d84:	617b      	str	r3, [r7, #20]
 8029d86:	e001      	b.n	8029d8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8029d88:	2309      	movs	r3, #9
 8029d8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8029d8c:	68fb      	ldr	r3, [r7, #12]
 8029d8e:	68db      	ldr	r3, [r3, #12]
 8029d90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8029d94:	68fb      	ldr	r3, [r7, #12]
 8029d96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8029d98:	68fb      	ldr	r3, [r7, #12]
 8029d9a:	68da      	ldr	r2, [r3, #12]
 8029d9c:	697b      	ldr	r3, [r7, #20]
 8029d9e:	029b      	lsls	r3, r3, #10
 8029da0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8029da4:	431a      	orrs	r2, r3
 8029da6:	68fb      	ldr	r3, [r7, #12]
 8029da8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8029daa:	2300      	movs	r3, #0
}
 8029dac:	4618      	mov	r0, r3
 8029dae:	371c      	adds	r7, #28
 8029db0:	46bd      	mov	sp, r7
 8029db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029db6:	4770      	bx	lr
 8029db8:	00d8acbf 	.word	0x00d8acbf
 8029dbc:	00e4e1c0 	.word	0x00e4e1c0
 8029dc0:	00f42400 	.word	0x00f42400
 8029dc4:	01067380 	.word	0x01067380
 8029dc8:	011a499f 	.word	0x011a499f
 8029dcc:	01312cff 	.word	0x01312cff
 8029dd0:	014ca43f 	.word	0x014ca43f
 8029dd4:	016e3600 	.word	0x016e3600
 8029dd8:	01a6ab1f 	.word	0x01a6ab1f
 8029ddc:	01e84800 	.word	0x01e84800

08029de0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8029de0:	b480      	push	{r7}
 8029de2:	b083      	sub	sp, #12
 8029de4:	af00      	add	r7, sp, #0
 8029de6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8029de8:	687b      	ldr	r3, [r7, #4]
 8029dea:	689b      	ldr	r3, [r3, #8]
 8029dec:	f043 0201 	orr.w	r2, r3, #1
 8029df0:	687b      	ldr	r3, [r7, #4]
 8029df2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8029df4:	2300      	movs	r3, #0
}
 8029df6:	4618      	mov	r0, r3
 8029df8:	370c      	adds	r7, #12
 8029dfa:	46bd      	mov	sp, r7
 8029dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e00:	4770      	bx	lr

08029e02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8029e02:	b480      	push	{r7}
 8029e04:	b083      	sub	sp, #12
 8029e06:	af00      	add	r7, sp, #0
 8029e08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8029e0a:	687b      	ldr	r3, [r7, #4]
 8029e0c:	689b      	ldr	r3, [r3, #8]
 8029e0e:	f023 0201 	bic.w	r2, r3, #1
 8029e12:	687b      	ldr	r3, [r7, #4]
 8029e14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8029e16:	2300      	movs	r3, #0
}
 8029e18:	4618      	mov	r0, r3
 8029e1a:	370c      	adds	r7, #12
 8029e1c:	46bd      	mov	sp, r7
 8029e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e22:	4770      	bx	lr

08029e24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8029e24:	b580      	push	{r7, lr}
 8029e26:	b082      	sub	sp, #8
 8029e28:	af00      	add	r7, sp, #0
 8029e2a:	6078      	str	r0, [r7, #4]
 8029e2c:	460b      	mov	r3, r1
 8029e2e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8029e30:	687b      	ldr	r3, [r7, #4]
 8029e32:	68db      	ldr	r3, [r3, #12]
 8029e34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8029e38:	687b      	ldr	r3, [r7, #4]
 8029e3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8029e3c:	78fb      	ldrb	r3, [r7, #3]
 8029e3e:	2b01      	cmp	r3, #1
 8029e40:	d106      	bne.n	8029e50 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8029e42:	687b      	ldr	r3, [r7, #4]
 8029e44:	68db      	ldr	r3, [r3, #12]
 8029e46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8029e4a:	687b      	ldr	r3, [r7, #4]
 8029e4c:	60da      	str	r2, [r3, #12]
 8029e4e:	e00b      	b.n	8029e68 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8029e50:	78fb      	ldrb	r3, [r7, #3]
 8029e52:	2b00      	cmp	r3, #0
 8029e54:	d106      	bne.n	8029e64 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8029e56:	687b      	ldr	r3, [r7, #4]
 8029e58:	68db      	ldr	r3, [r3, #12]
 8029e5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8029e5e:	687b      	ldr	r3, [r7, #4]
 8029e60:	60da      	str	r2, [r3, #12]
 8029e62:	e001      	b.n	8029e68 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8029e64:	2301      	movs	r3, #1
 8029e66:	e003      	b.n	8029e70 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8029e68:	2032      	movs	r0, #50	; 0x32
 8029e6a:	f7f7 fe89 	bl	8021b80 <HAL_Delay>

  return HAL_OK;
 8029e6e:	2300      	movs	r3, #0
}
 8029e70:	4618      	mov	r0, r3
 8029e72:	3708      	adds	r7, #8
 8029e74:	46bd      	mov	sp, r7
 8029e76:	bd80      	pop	{r7, pc}

08029e78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8029e78:	b084      	sub	sp, #16
 8029e7a:	b580      	push	{r7, lr}
 8029e7c:	b086      	sub	sp, #24
 8029e7e:	af00      	add	r7, sp, #0
 8029e80:	6078      	str	r0, [r7, #4]
 8029e82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8029e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8029e8a:	2300      	movs	r3, #0
 8029e8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029e8e:	687b      	ldr	r3, [r7, #4]
 8029e90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8029e92:	2300      	movs	r3, #0
 8029e94:	613b      	str	r3, [r7, #16]
 8029e96:	e009      	b.n	8029eac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8029e98:	687a      	ldr	r2, [r7, #4]
 8029e9a:	693b      	ldr	r3, [r7, #16]
 8029e9c:	3340      	adds	r3, #64	; 0x40
 8029e9e:	009b      	lsls	r3, r3, #2
 8029ea0:	4413      	add	r3, r2
 8029ea2:	2200      	movs	r2, #0
 8029ea4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8029ea6:	693b      	ldr	r3, [r7, #16]
 8029ea8:	3301      	adds	r3, #1
 8029eaa:	613b      	str	r3, [r7, #16]
 8029eac:	693b      	ldr	r3, [r7, #16]
 8029eae:	2b0e      	cmp	r3, #14
 8029eb0:	d9f2      	bls.n	8029e98 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8029eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029eb4:	2b00      	cmp	r3, #0
 8029eb6:	d11c      	bne.n	8029ef2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8029eb8:	68fb      	ldr	r3, [r7, #12]
 8029eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029ebe:	685b      	ldr	r3, [r3, #4]
 8029ec0:	68fa      	ldr	r2, [r7, #12]
 8029ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029ec6:	f043 0302 	orr.w	r3, r3, #2
 8029eca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8029ecc:	687b      	ldr	r3, [r7, #4]
 8029ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029ed0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8029ed4:	687b      	ldr	r3, [r7, #4]
 8029ed6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8029ed8:	687b      	ldr	r3, [r7, #4]
 8029eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029edc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8029ee0:	687b      	ldr	r3, [r7, #4]
 8029ee2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8029ee4:	687b      	ldr	r3, [r7, #4]
 8029ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029ee8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8029eec:	687b      	ldr	r3, [r7, #4]
 8029eee:	639a      	str	r2, [r3, #56]	; 0x38
 8029ef0:	e00b      	b.n	8029f0a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8029ef2:	687b      	ldr	r3, [r7, #4]
 8029ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029ef6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8029efa:	687b      	ldr	r3, [r7, #4]
 8029efc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8029efe:	687b      	ldr	r3, [r7, #4]
 8029f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029f02:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8029f06:	687b      	ldr	r3, [r7, #4]
 8029f08:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8029f0a:	68fb      	ldr	r3, [r7, #12]
 8029f0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8029f10:	461a      	mov	r2, r3
 8029f12:	2300      	movs	r3, #0
 8029f14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8029f16:	68fb      	ldr	r3, [r7, #12]
 8029f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029f1c:	4619      	mov	r1, r3
 8029f1e:	68fb      	ldr	r3, [r7, #12]
 8029f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029f24:	461a      	mov	r2, r3
 8029f26:	680b      	ldr	r3, [r1, #0]
 8029f28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8029f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029f2c:	2b01      	cmp	r3, #1
 8029f2e:	d10c      	bne.n	8029f4a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8029f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029f32:	2b00      	cmp	r3, #0
 8029f34:	d104      	bne.n	8029f40 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8029f36:	2100      	movs	r1, #0
 8029f38:	6878      	ldr	r0, [r7, #4]
 8029f3a:	f000 f949 	bl	802a1d0 <USB_SetDevSpeed>
 8029f3e:	e008      	b.n	8029f52 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8029f40:	2101      	movs	r1, #1
 8029f42:	6878      	ldr	r0, [r7, #4]
 8029f44:	f000 f944 	bl	802a1d0 <USB_SetDevSpeed>
 8029f48:	e003      	b.n	8029f52 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8029f4a:	2103      	movs	r1, #3
 8029f4c:	6878      	ldr	r0, [r7, #4]
 8029f4e:	f000 f93f 	bl	802a1d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8029f52:	2110      	movs	r1, #16
 8029f54:	6878      	ldr	r0, [r7, #4]
 8029f56:	f000 f8f3 	bl	802a140 <USB_FlushTxFifo>
 8029f5a:	4603      	mov	r3, r0
 8029f5c:	2b00      	cmp	r3, #0
 8029f5e:	d001      	beq.n	8029f64 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8029f60:	2301      	movs	r3, #1
 8029f62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8029f64:	6878      	ldr	r0, [r7, #4]
 8029f66:	f000 f911 	bl	802a18c <USB_FlushRxFifo>
 8029f6a:	4603      	mov	r3, r0
 8029f6c:	2b00      	cmp	r3, #0
 8029f6e:	d001      	beq.n	8029f74 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8029f70:	2301      	movs	r3, #1
 8029f72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8029f74:	68fb      	ldr	r3, [r7, #12]
 8029f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029f7a:	461a      	mov	r2, r3
 8029f7c:	2300      	movs	r3, #0
 8029f7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8029f80:	68fb      	ldr	r3, [r7, #12]
 8029f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029f86:	461a      	mov	r2, r3
 8029f88:	2300      	movs	r3, #0
 8029f8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8029f8c:	68fb      	ldr	r3, [r7, #12]
 8029f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029f92:	461a      	mov	r2, r3
 8029f94:	2300      	movs	r3, #0
 8029f96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8029f98:	2300      	movs	r3, #0
 8029f9a:	613b      	str	r3, [r7, #16]
 8029f9c:	e043      	b.n	802a026 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8029f9e:	693b      	ldr	r3, [r7, #16]
 8029fa0:	015a      	lsls	r2, r3, #5
 8029fa2:	68fb      	ldr	r3, [r7, #12]
 8029fa4:	4413      	add	r3, r2
 8029fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029faa:	681b      	ldr	r3, [r3, #0]
 8029fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8029fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8029fb4:	d118      	bne.n	8029fe8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8029fb6:	693b      	ldr	r3, [r7, #16]
 8029fb8:	2b00      	cmp	r3, #0
 8029fba:	d10a      	bne.n	8029fd2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8029fbc:	693b      	ldr	r3, [r7, #16]
 8029fbe:	015a      	lsls	r2, r3, #5
 8029fc0:	68fb      	ldr	r3, [r7, #12]
 8029fc2:	4413      	add	r3, r2
 8029fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029fc8:	461a      	mov	r2, r3
 8029fca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8029fce:	6013      	str	r3, [r2, #0]
 8029fd0:	e013      	b.n	8029ffa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8029fd2:	693b      	ldr	r3, [r7, #16]
 8029fd4:	015a      	lsls	r2, r3, #5
 8029fd6:	68fb      	ldr	r3, [r7, #12]
 8029fd8:	4413      	add	r3, r2
 8029fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029fde:	461a      	mov	r2, r3
 8029fe0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8029fe4:	6013      	str	r3, [r2, #0]
 8029fe6:	e008      	b.n	8029ffa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8029fe8:	693b      	ldr	r3, [r7, #16]
 8029fea:	015a      	lsls	r2, r3, #5
 8029fec:	68fb      	ldr	r3, [r7, #12]
 8029fee:	4413      	add	r3, r2
 8029ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029ff4:	461a      	mov	r2, r3
 8029ff6:	2300      	movs	r3, #0
 8029ff8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8029ffa:	693b      	ldr	r3, [r7, #16]
 8029ffc:	015a      	lsls	r2, r3, #5
 8029ffe:	68fb      	ldr	r3, [r7, #12]
 802a000:	4413      	add	r3, r2
 802a002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a006:	461a      	mov	r2, r3
 802a008:	2300      	movs	r3, #0
 802a00a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 802a00c:	693b      	ldr	r3, [r7, #16]
 802a00e:	015a      	lsls	r2, r3, #5
 802a010:	68fb      	ldr	r3, [r7, #12]
 802a012:	4413      	add	r3, r2
 802a014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a018:	461a      	mov	r2, r3
 802a01a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802a01e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802a020:	693b      	ldr	r3, [r7, #16]
 802a022:	3301      	adds	r3, #1
 802a024:	613b      	str	r3, [r7, #16]
 802a026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a028:	693a      	ldr	r2, [r7, #16]
 802a02a:	429a      	cmp	r2, r3
 802a02c:	d3b7      	bcc.n	8029f9e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802a02e:	2300      	movs	r3, #0
 802a030:	613b      	str	r3, [r7, #16]
 802a032:	e043      	b.n	802a0bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802a034:	693b      	ldr	r3, [r7, #16]
 802a036:	015a      	lsls	r2, r3, #5
 802a038:	68fb      	ldr	r3, [r7, #12]
 802a03a:	4413      	add	r3, r2
 802a03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a040:	681b      	ldr	r3, [r3, #0]
 802a042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802a04a:	d118      	bne.n	802a07e <USB_DevInit+0x206>
    {
      if (i == 0U)
 802a04c:	693b      	ldr	r3, [r7, #16]
 802a04e:	2b00      	cmp	r3, #0
 802a050:	d10a      	bne.n	802a068 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 802a052:	693b      	ldr	r3, [r7, #16]
 802a054:	015a      	lsls	r2, r3, #5
 802a056:	68fb      	ldr	r3, [r7, #12]
 802a058:	4413      	add	r3, r2
 802a05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a05e:	461a      	mov	r2, r3
 802a060:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802a064:	6013      	str	r3, [r2, #0]
 802a066:	e013      	b.n	802a090 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 802a068:	693b      	ldr	r3, [r7, #16]
 802a06a:	015a      	lsls	r2, r3, #5
 802a06c:	68fb      	ldr	r3, [r7, #12]
 802a06e:	4413      	add	r3, r2
 802a070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a074:	461a      	mov	r2, r3
 802a076:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802a07a:	6013      	str	r3, [r2, #0]
 802a07c:	e008      	b.n	802a090 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 802a07e:	693b      	ldr	r3, [r7, #16]
 802a080:	015a      	lsls	r2, r3, #5
 802a082:	68fb      	ldr	r3, [r7, #12]
 802a084:	4413      	add	r3, r2
 802a086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a08a:	461a      	mov	r2, r3
 802a08c:	2300      	movs	r3, #0
 802a08e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 802a090:	693b      	ldr	r3, [r7, #16]
 802a092:	015a      	lsls	r2, r3, #5
 802a094:	68fb      	ldr	r3, [r7, #12]
 802a096:	4413      	add	r3, r2
 802a098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a09c:	461a      	mov	r2, r3
 802a09e:	2300      	movs	r3, #0
 802a0a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 802a0a2:	693b      	ldr	r3, [r7, #16]
 802a0a4:	015a      	lsls	r2, r3, #5
 802a0a6:	68fb      	ldr	r3, [r7, #12]
 802a0a8:	4413      	add	r3, r2
 802a0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a0ae:	461a      	mov	r2, r3
 802a0b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802a0b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802a0b6:	693b      	ldr	r3, [r7, #16]
 802a0b8:	3301      	adds	r3, #1
 802a0ba:	613b      	str	r3, [r7, #16]
 802a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0be:	693a      	ldr	r2, [r7, #16]
 802a0c0:	429a      	cmp	r2, r3
 802a0c2:	d3b7      	bcc.n	802a034 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 802a0c4:	68fb      	ldr	r3, [r7, #12]
 802a0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a0ca:	691b      	ldr	r3, [r3, #16]
 802a0cc:	68fa      	ldr	r2, [r7, #12]
 802a0ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802a0d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802a0d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802a0d8:	687b      	ldr	r3, [r7, #4]
 802a0da:	2200      	movs	r2, #0
 802a0dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 802a0de:	687b      	ldr	r3, [r7, #4]
 802a0e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 802a0e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802a0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a0e8:	2b00      	cmp	r3, #0
 802a0ea:	d105      	bne.n	802a0f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802a0ec:	687b      	ldr	r3, [r7, #4]
 802a0ee:	699b      	ldr	r3, [r3, #24]
 802a0f0:	f043 0210 	orr.w	r2, r3, #16
 802a0f4:	687b      	ldr	r3, [r7, #4]
 802a0f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 802a0f8:	687b      	ldr	r3, [r7, #4]
 802a0fa:	699a      	ldr	r2, [r3, #24]
 802a0fc:	4b0f      	ldr	r3, [pc, #60]	; (802a13c <USB_DevInit+0x2c4>)
 802a0fe:	4313      	orrs	r3, r2
 802a100:	687a      	ldr	r2, [r7, #4]
 802a102:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 802a104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a106:	2b00      	cmp	r3, #0
 802a108:	d005      	beq.n	802a116 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 802a10a:	687b      	ldr	r3, [r7, #4]
 802a10c:	699b      	ldr	r3, [r3, #24]
 802a10e:	f043 0208 	orr.w	r2, r3, #8
 802a112:	687b      	ldr	r3, [r7, #4]
 802a114:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 802a116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a118:	2b01      	cmp	r3, #1
 802a11a:	d107      	bne.n	802a12c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 802a11c:	687b      	ldr	r3, [r7, #4]
 802a11e:	699b      	ldr	r3, [r3, #24]
 802a120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a124:	f043 0304 	orr.w	r3, r3, #4
 802a128:	687a      	ldr	r2, [r7, #4]
 802a12a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 802a12c:	7dfb      	ldrb	r3, [r7, #23]
}
 802a12e:	4618      	mov	r0, r3
 802a130:	3718      	adds	r7, #24
 802a132:	46bd      	mov	sp, r7
 802a134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802a138:	b004      	add	sp, #16
 802a13a:	4770      	bx	lr
 802a13c:	803c3800 	.word	0x803c3800

0802a140 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802a140:	b480      	push	{r7}
 802a142:	b085      	sub	sp, #20
 802a144:	af00      	add	r7, sp, #0
 802a146:	6078      	str	r0, [r7, #4]
 802a148:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 802a14a:	2300      	movs	r3, #0
 802a14c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802a14e:	683b      	ldr	r3, [r7, #0]
 802a150:	019b      	lsls	r3, r3, #6
 802a152:	f043 0220 	orr.w	r2, r3, #32
 802a156:	687b      	ldr	r3, [r7, #4]
 802a158:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 802a15a:	68fb      	ldr	r3, [r7, #12]
 802a15c:	3301      	adds	r3, #1
 802a15e:	60fb      	str	r3, [r7, #12]
 802a160:	68fb      	ldr	r3, [r7, #12]
 802a162:	4a09      	ldr	r2, [pc, #36]	; (802a188 <USB_FlushTxFifo+0x48>)
 802a164:	4293      	cmp	r3, r2
 802a166:	d901      	bls.n	802a16c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 802a168:	2303      	movs	r3, #3
 802a16a:	e006      	b.n	802a17a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802a16c:	687b      	ldr	r3, [r7, #4]
 802a16e:	691b      	ldr	r3, [r3, #16]
 802a170:	f003 0320 	and.w	r3, r3, #32
 802a174:	2b20      	cmp	r3, #32
 802a176:	d0f0      	beq.n	802a15a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 802a178:	2300      	movs	r3, #0
}
 802a17a:	4618      	mov	r0, r3
 802a17c:	3714      	adds	r7, #20
 802a17e:	46bd      	mov	sp, r7
 802a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a184:	4770      	bx	lr
 802a186:	bf00      	nop
 802a188:	00030d40 	.word	0x00030d40

0802a18c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802a18c:	b480      	push	{r7}
 802a18e:	b085      	sub	sp, #20
 802a190:	af00      	add	r7, sp, #0
 802a192:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 802a194:	2300      	movs	r3, #0
 802a196:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802a198:	687b      	ldr	r3, [r7, #4]
 802a19a:	2210      	movs	r2, #16
 802a19c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 802a19e:	68fb      	ldr	r3, [r7, #12]
 802a1a0:	3301      	adds	r3, #1
 802a1a2:	60fb      	str	r3, [r7, #12]
 802a1a4:	68fb      	ldr	r3, [r7, #12]
 802a1a6:	4a09      	ldr	r2, [pc, #36]	; (802a1cc <USB_FlushRxFifo+0x40>)
 802a1a8:	4293      	cmp	r3, r2
 802a1aa:	d901      	bls.n	802a1b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 802a1ac:	2303      	movs	r3, #3
 802a1ae:	e006      	b.n	802a1be <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802a1b0:	687b      	ldr	r3, [r7, #4]
 802a1b2:	691b      	ldr	r3, [r3, #16]
 802a1b4:	f003 0310 	and.w	r3, r3, #16
 802a1b8:	2b10      	cmp	r3, #16
 802a1ba:	d0f0      	beq.n	802a19e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 802a1bc:	2300      	movs	r3, #0
}
 802a1be:	4618      	mov	r0, r3
 802a1c0:	3714      	adds	r7, #20
 802a1c2:	46bd      	mov	sp, r7
 802a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1c8:	4770      	bx	lr
 802a1ca:	bf00      	nop
 802a1cc:	00030d40 	.word	0x00030d40

0802a1d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 802a1d0:	b480      	push	{r7}
 802a1d2:	b085      	sub	sp, #20
 802a1d4:	af00      	add	r7, sp, #0
 802a1d6:	6078      	str	r0, [r7, #4]
 802a1d8:	460b      	mov	r3, r1
 802a1da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a1dc:	687b      	ldr	r3, [r7, #4]
 802a1de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 802a1e0:	68fb      	ldr	r3, [r7, #12]
 802a1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a1e6:	681a      	ldr	r2, [r3, #0]
 802a1e8:	78fb      	ldrb	r3, [r7, #3]
 802a1ea:	68f9      	ldr	r1, [r7, #12]
 802a1ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a1f0:	4313      	orrs	r3, r2
 802a1f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 802a1f4:	2300      	movs	r3, #0
}
 802a1f6:	4618      	mov	r0, r3
 802a1f8:	3714      	adds	r7, #20
 802a1fa:	46bd      	mov	sp, r7
 802a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a200:	4770      	bx	lr

0802a202 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802a202:	b480      	push	{r7}
 802a204:	b087      	sub	sp, #28
 802a206:	af00      	add	r7, sp, #0
 802a208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a20a:	687b      	ldr	r3, [r7, #4]
 802a20c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 802a20e:	693b      	ldr	r3, [r7, #16]
 802a210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a214:	689b      	ldr	r3, [r3, #8]
 802a216:	f003 0306 	and.w	r3, r3, #6
 802a21a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 802a21c:	68fb      	ldr	r3, [r7, #12]
 802a21e:	2b00      	cmp	r3, #0
 802a220:	d102      	bne.n	802a228 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 802a222:	2300      	movs	r3, #0
 802a224:	75fb      	strb	r3, [r7, #23]
 802a226:	e00a      	b.n	802a23e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 802a228:	68fb      	ldr	r3, [r7, #12]
 802a22a:	2b02      	cmp	r3, #2
 802a22c:	d002      	beq.n	802a234 <USB_GetDevSpeed+0x32>
 802a22e:	68fb      	ldr	r3, [r7, #12]
 802a230:	2b06      	cmp	r3, #6
 802a232:	d102      	bne.n	802a23a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 802a234:	2302      	movs	r3, #2
 802a236:	75fb      	strb	r3, [r7, #23]
 802a238:	e001      	b.n	802a23e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 802a23a:	230f      	movs	r3, #15
 802a23c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 802a23e:	7dfb      	ldrb	r3, [r7, #23]
}
 802a240:	4618      	mov	r0, r3
 802a242:	371c      	adds	r7, #28
 802a244:	46bd      	mov	sp, r7
 802a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a24a:	4770      	bx	lr

0802a24c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802a24c:	b480      	push	{r7}
 802a24e:	b085      	sub	sp, #20
 802a250:	af00      	add	r7, sp, #0
 802a252:	6078      	str	r0, [r7, #4]
 802a254:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a256:	687b      	ldr	r3, [r7, #4]
 802a258:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802a25a:	683b      	ldr	r3, [r7, #0]
 802a25c:	781b      	ldrb	r3, [r3, #0]
 802a25e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802a260:	683b      	ldr	r3, [r7, #0]
 802a262:	785b      	ldrb	r3, [r3, #1]
 802a264:	2b01      	cmp	r3, #1
 802a266:	d13a      	bne.n	802a2de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 802a268:	68fb      	ldr	r3, [r7, #12]
 802a26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a26e:	69da      	ldr	r2, [r3, #28]
 802a270:	683b      	ldr	r3, [r7, #0]
 802a272:	781b      	ldrb	r3, [r3, #0]
 802a274:	f003 030f 	and.w	r3, r3, #15
 802a278:	2101      	movs	r1, #1
 802a27a:	fa01 f303 	lsl.w	r3, r1, r3
 802a27e:	b29b      	uxth	r3, r3
 802a280:	68f9      	ldr	r1, [r7, #12]
 802a282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a286:	4313      	orrs	r3, r2
 802a288:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 802a28a:	68bb      	ldr	r3, [r7, #8]
 802a28c:	015a      	lsls	r2, r3, #5
 802a28e:	68fb      	ldr	r3, [r7, #12]
 802a290:	4413      	add	r3, r2
 802a292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a296:	681b      	ldr	r3, [r3, #0]
 802a298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802a29c:	2b00      	cmp	r3, #0
 802a29e:	d155      	bne.n	802a34c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802a2a0:	68bb      	ldr	r3, [r7, #8]
 802a2a2:	015a      	lsls	r2, r3, #5
 802a2a4:	68fb      	ldr	r3, [r7, #12]
 802a2a6:	4413      	add	r3, r2
 802a2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a2ac:	681a      	ldr	r2, [r3, #0]
 802a2ae:	683b      	ldr	r3, [r7, #0]
 802a2b0:	689b      	ldr	r3, [r3, #8]
 802a2b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802a2b6:	683b      	ldr	r3, [r7, #0]
 802a2b8:	78db      	ldrb	r3, [r3, #3]
 802a2ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802a2bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802a2be:	68bb      	ldr	r3, [r7, #8]
 802a2c0:	059b      	lsls	r3, r3, #22
 802a2c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802a2c4:	4313      	orrs	r3, r2
 802a2c6:	68ba      	ldr	r2, [r7, #8]
 802a2c8:	0151      	lsls	r1, r2, #5
 802a2ca:	68fa      	ldr	r2, [r7, #12]
 802a2cc:	440a      	add	r2, r1
 802a2ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a2d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a2d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802a2da:	6013      	str	r3, [r2, #0]
 802a2dc:	e036      	b.n	802a34c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 802a2de:	68fb      	ldr	r3, [r7, #12]
 802a2e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a2e4:	69da      	ldr	r2, [r3, #28]
 802a2e6:	683b      	ldr	r3, [r7, #0]
 802a2e8:	781b      	ldrb	r3, [r3, #0]
 802a2ea:	f003 030f 	and.w	r3, r3, #15
 802a2ee:	2101      	movs	r1, #1
 802a2f0:	fa01 f303 	lsl.w	r3, r1, r3
 802a2f4:	041b      	lsls	r3, r3, #16
 802a2f6:	68f9      	ldr	r1, [r7, #12]
 802a2f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a2fc:	4313      	orrs	r3, r2
 802a2fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 802a300:	68bb      	ldr	r3, [r7, #8]
 802a302:	015a      	lsls	r2, r3, #5
 802a304:	68fb      	ldr	r3, [r7, #12]
 802a306:	4413      	add	r3, r2
 802a308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a30c:	681b      	ldr	r3, [r3, #0]
 802a30e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802a312:	2b00      	cmp	r3, #0
 802a314:	d11a      	bne.n	802a34c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802a316:	68bb      	ldr	r3, [r7, #8]
 802a318:	015a      	lsls	r2, r3, #5
 802a31a:	68fb      	ldr	r3, [r7, #12]
 802a31c:	4413      	add	r3, r2
 802a31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a322:	681a      	ldr	r2, [r3, #0]
 802a324:	683b      	ldr	r3, [r7, #0]
 802a326:	689b      	ldr	r3, [r3, #8]
 802a328:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 802a32c:	683b      	ldr	r3, [r7, #0]
 802a32e:	78db      	ldrb	r3, [r3, #3]
 802a330:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802a332:	430b      	orrs	r3, r1
 802a334:	4313      	orrs	r3, r2
 802a336:	68ba      	ldr	r2, [r7, #8]
 802a338:	0151      	lsls	r1, r2, #5
 802a33a:	68fa      	ldr	r2, [r7, #12]
 802a33c:	440a      	add	r2, r1
 802a33e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802a34a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 802a34c:	2300      	movs	r3, #0
}
 802a34e:	4618      	mov	r0, r3
 802a350:	3714      	adds	r7, #20
 802a352:	46bd      	mov	sp, r7
 802a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a358:	4770      	bx	lr
	...

0802a35c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802a35c:	b480      	push	{r7}
 802a35e:	b085      	sub	sp, #20
 802a360:	af00      	add	r7, sp, #0
 802a362:	6078      	str	r0, [r7, #4]
 802a364:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a366:	687b      	ldr	r3, [r7, #4]
 802a368:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802a36a:	683b      	ldr	r3, [r7, #0]
 802a36c:	781b      	ldrb	r3, [r3, #0]
 802a36e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 802a370:	683b      	ldr	r3, [r7, #0]
 802a372:	785b      	ldrb	r3, [r3, #1]
 802a374:	2b01      	cmp	r3, #1
 802a376:	d161      	bne.n	802a43c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802a378:	68bb      	ldr	r3, [r7, #8]
 802a37a:	015a      	lsls	r2, r3, #5
 802a37c:	68fb      	ldr	r3, [r7, #12]
 802a37e:	4413      	add	r3, r2
 802a380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a384:	681b      	ldr	r3, [r3, #0]
 802a386:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a38a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802a38e:	d11f      	bne.n	802a3d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 802a390:	68bb      	ldr	r3, [r7, #8]
 802a392:	015a      	lsls	r2, r3, #5
 802a394:	68fb      	ldr	r3, [r7, #12]
 802a396:	4413      	add	r3, r2
 802a398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a39c:	681b      	ldr	r3, [r3, #0]
 802a39e:	68ba      	ldr	r2, [r7, #8]
 802a3a0:	0151      	lsls	r1, r2, #5
 802a3a2:	68fa      	ldr	r2, [r7, #12]
 802a3a4:	440a      	add	r2, r1
 802a3a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a3aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802a3ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 802a3b0:	68bb      	ldr	r3, [r7, #8]
 802a3b2:	015a      	lsls	r2, r3, #5
 802a3b4:	68fb      	ldr	r3, [r7, #12]
 802a3b6:	4413      	add	r3, r2
 802a3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a3bc:	681b      	ldr	r3, [r3, #0]
 802a3be:	68ba      	ldr	r2, [r7, #8]
 802a3c0:	0151      	lsls	r1, r2, #5
 802a3c2:	68fa      	ldr	r2, [r7, #12]
 802a3c4:	440a      	add	r2, r1
 802a3c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a3ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a3ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802a3d0:	68fb      	ldr	r3, [r7, #12]
 802a3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a3d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802a3d8:	683b      	ldr	r3, [r7, #0]
 802a3da:	781b      	ldrb	r3, [r3, #0]
 802a3dc:	f003 030f 	and.w	r3, r3, #15
 802a3e0:	2101      	movs	r1, #1
 802a3e2:	fa01 f303 	lsl.w	r3, r1, r3
 802a3e6:	b29b      	uxth	r3, r3
 802a3e8:	43db      	mvns	r3, r3
 802a3ea:	68f9      	ldr	r1, [r7, #12]
 802a3ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a3f0:	4013      	ands	r3, r2
 802a3f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802a3f4:	68fb      	ldr	r3, [r7, #12]
 802a3f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a3fa:	69da      	ldr	r2, [r3, #28]
 802a3fc:	683b      	ldr	r3, [r7, #0]
 802a3fe:	781b      	ldrb	r3, [r3, #0]
 802a400:	f003 030f 	and.w	r3, r3, #15
 802a404:	2101      	movs	r1, #1
 802a406:	fa01 f303 	lsl.w	r3, r1, r3
 802a40a:	b29b      	uxth	r3, r3
 802a40c:	43db      	mvns	r3, r3
 802a40e:	68f9      	ldr	r1, [r7, #12]
 802a410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a414:	4013      	ands	r3, r2
 802a416:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 802a418:	68bb      	ldr	r3, [r7, #8]
 802a41a:	015a      	lsls	r2, r3, #5
 802a41c:	68fb      	ldr	r3, [r7, #12]
 802a41e:	4413      	add	r3, r2
 802a420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a424:	681a      	ldr	r2, [r3, #0]
 802a426:	68bb      	ldr	r3, [r7, #8]
 802a428:	0159      	lsls	r1, r3, #5
 802a42a:	68fb      	ldr	r3, [r7, #12]
 802a42c:	440b      	add	r3, r1
 802a42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a432:	4619      	mov	r1, r3
 802a434:	4b35      	ldr	r3, [pc, #212]	; (802a50c <USB_DeactivateEndpoint+0x1b0>)
 802a436:	4013      	ands	r3, r2
 802a438:	600b      	str	r3, [r1, #0]
 802a43a:	e060      	b.n	802a4fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802a43c:	68bb      	ldr	r3, [r7, #8]
 802a43e:	015a      	lsls	r2, r3, #5
 802a440:	68fb      	ldr	r3, [r7, #12]
 802a442:	4413      	add	r3, r2
 802a444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a448:	681b      	ldr	r3, [r3, #0]
 802a44a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a44e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802a452:	d11f      	bne.n	802a494 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802a454:	68bb      	ldr	r3, [r7, #8]
 802a456:	015a      	lsls	r2, r3, #5
 802a458:	68fb      	ldr	r3, [r7, #12]
 802a45a:	4413      	add	r3, r2
 802a45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a460:	681b      	ldr	r3, [r3, #0]
 802a462:	68ba      	ldr	r2, [r7, #8]
 802a464:	0151      	lsls	r1, r2, #5
 802a466:	68fa      	ldr	r2, [r7, #12]
 802a468:	440a      	add	r2, r1
 802a46a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a46e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802a472:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 802a474:	68bb      	ldr	r3, [r7, #8]
 802a476:	015a      	lsls	r2, r3, #5
 802a478:	68fb      	ldr	r3, [r7, #12]
 802a47a:	4413      	add	r3, r2
 802a47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a480:	681b      	ldr	r3, [r3, #0]
 802a482:	68ba      	ldr	r2, [r7, #8]
 802a484:	0151      	lsls	r1, r2, #5
 802a486:	68fa      	ldr	r2, [r7, #12]
 802a488:	440a      	add	r2, r1
 802a48a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a48e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a492:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802a494:	68fb      	ldr	r3, [r7, #12]
 802a496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a49a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802a49c:	683b      	ldr	r3, [r7, #0]
 802a49e:	781b      	ldrb	r3, [r3, #0]
 802a4a0:	f003 030f 	and.w	r3, r3, #15
 802a4a4:	2101      	movs	r1, #1
 802a4a6:	fa01 f303 	lsl.w	r3, r1, r3
 802a4aa:	041b      	lsls	r3, r3, #16
 802a4ac:	43db      	mvns	r3, r3
 802a4ae:	68f9      	ldr	r1, [r7, #12]
 802a4b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a4b4:	4013      	ands	r3, r2
 802a4b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802a4b8:	68fb      	ldr	r3, [r7, #12]
 802a4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a4be:	69da      	ldr	r2, [r3, #28]
 802a4c0:	683b      	ldr	r3, [r7, #0]
 802a4c2:	781b      	ldrb	r3, [r3, #0]
 802a4c4:	f003 030f 	and.w	r3, r3, #15
 802a4c8:	2101      	movs	r1, #1
 802a4ca:	fa01 f303 	lsl.w	r3, r1, r3
 802a4ce:	041b      	lsls	r3, r3, #16
 802a4d0:	43db      	mvns	r3, r3
 802a4d2:	68f9      	ldr	r1, [r7, #12]
 802a4d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a4d8:	4013      	ands	r3, r2
 802a4da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 802a4dc:	68bb      	ldr	r3, [r7, #8]
 802a4de:	015a      	lsls	r2, r3, #5
 802a4e0:	68fb      	ldr	r3, [r7, #12]
 802a4e2:	4413      	add	r3, r2
 802a4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a4e8:	681a      	ldr	r2, [r3, #0]
 802a4ea:	68bb      	ldr	r3, [r7, #8]
 802a4ec:	0159      	lsls	r1, r3, #5
 802a4ee:	68fb      	ldr	r3, [r7, #12]
 802a4f0:	440b      	add	r3, r1
 802a4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a4f6:	4619      	mov	r1, r3
 802a4f8:	4b05      	ldr	r3, [pc, #20]	; (802a510 <USB_DeactivateEndpoint+0x1b4>)
 802a4fa:	4013      	ands	r3, r2
 802a4fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 802a4fe:	2300      	movs	r3, #0
}
 802a500:	4618      	mov	r0, r3
 802a502:	3714      	adds	r7, #20
 802a504:	46bd      	mov	sp, r7
 802a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a50a:	4770      	bx	lr
 802a50c:	ec337800 	.word	0xec337800
 802a510:	eff37800 	.word	0xeff37800

0802a514 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802a514:	b580      	push	{r7, lr}
 802a516:	b08a      	sub	sp, #40	; 0x28
 802a518:	af02      	add	r7, sp, #8
 802a51a:	60f8      	str	r0, [r7, #12]
 802a51c:	60b9      	str	r1, [r7, #8]
 802a51e:	4613      	mov	r3, r2
 802a520:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a522:	68fb      	ldr	r3, [r7, #12]
 802a524:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 802a526:	68bb      	ldr	r3, [r7, #8]
 802a528:	781b      	ldrb	r3, [r3, #0]
 802a52a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 802a52c:	68bb      	ldr	r3, [r7, #8]
 802a52e:	785b      	ldrb	r3, [r3, #1]
 802a530:	2b01      	cmp	r3, #1
 802a532:	f040 815c 	bne.w	802a7ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802a536:	68bb      	ldr	r3, [r7, #8]
 802a538:	695b      	ldr	r3, [r3, #20]
 802a53a:	2b00      	cmp	r3, #0
 802a53c:	d132      	bne.n	802a5a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802a53e:	69bb      	ldr	r3, [r7, #24]
 802a540:	015a      	lsls	r2, r3, #5
 802a542:	69fb      	ldr	r3, [r7, #28]
 802a544:	4413      	add	r3, r2
 802a546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a54a:	691b      	ldr	r3, [r3, #16]
 802a54c:	69ba      	ldr	r2, [r7, #24]
 802a54e:	0151      	lsls	r1, r2, #5
 802a550:	69fa      	ldr	r2, [r7, #28]
 802a552:	440a      	add	r2, r1
 802a554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a558:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802a55c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802a560:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802a562:	69bb      	ldr	r3, [r7, #24]
 802a564:	015a      	lsls	r2, r3, #5
 802a566:	69fb      	ldr	r3, [r7, #28]
 802a568:	4413      	add	r3, r2
 802a56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a56e:	691b      	ldr	r3, [r3, #16]
 802a570:	69ba      	ldr	r2, [r7, #24]
 802a572:	0151      	lsls	r1, r2, #5
 802a574:	69fa      	ldr	r2, [r7, #28]
 802a576:	440a      	add	r2, r1
 802a578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a57c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802a580:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802a582:	69bb      	ldr	r3, [r7, #24]
 802a584:	015a      	lsls	r2, r3, #5
 802a586:	69fb      	ldr	r3, [r7, #28]
 802a588:	4413      	add	r3, r2
 802a58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a58e:	691b      	ldr	r3, [r3, #16]
 802a590:	69ba      	ldr	r2, [r7, #24]
 802a592:	0151      	lsls	r1, r2, #5
 802a594:	69fa      	ldr	r2, [r7, #28]
 802a596:	440a      	add	r2, r1
 802a598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a59c:	0cdb      	lsrs	r3, r3, #19
 802a59e:	04db      	lsls	r3, r3, #19
 802a5a0:	6113      	str	r3, [r2, #16]
 802a5a2:	e074      	b.n	802a68e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802a5a4:	69bb      	ldr	r3, [r7, #24]
 802a5a6:	015a      	lsls	r2, r3, #5
 802a5a8:	69fb      	ldr	r3, [r7, #28]
 802a5aa:	4413      	add	r3, r2
 802a5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a5b0:	691b      	ldr	r3, [r3, #16]
 802a5b2:	69ba      	ldr	r2, [r7, #24]
 802a5b4:	0151      	lsls	r1, r2, #5
 802a5b6:	69fa      	ldr	r2, [r7, #28]
 802a5b8:	440a      	add	r2, r1
 802a5ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a5be:	0cdb      	lsrs	r3, r3, #19
 802a5c0:	04db      	lsls	r3, r3, #19
 802a5c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802a5c4:	69bb      	ldr	r3, [r7, #24]
 802a5c6:	015a      	lsls	r2, r3, #5
 802a5c8:	69fb      	ldr	r3, [r7, #28]
 802a5ca:	4413      	add	r3, r2
 802a5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a5d0:	691b      	ldr	r3, [r3, #16]
 802a5d2:	69ba      	ldr	r2, [r7, #24]
 802a5d4:	0151      	lsls	r1, r2, #5
 802a5d6:	69fa      	ldr	r2, [r7, #28]
 802a5d8:	440a      	add	r2, r1
 802a5da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a5de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802a5e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802a5e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 802a5e8:	69bb      	ldr	r3, [r7, #24]
 802a5ea:	015a      	lsls	r2, r3, #5
 802a5ec:	69fb      	ldr	r3, [r7, #28]
 802a5ee:	4413      	add	r3, r2
 802a5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a5f4:	691a      	ldr	r2, [r3, #16]
 802a5f6:	68bb      	ldr	r3, [r7, #8]
 802a5f8:	6959      	ldr	r1, [r3, #20]
 802a5fa:	68bb      	ldr	r3, [r7, #8]
 802a5fc:	689b      	ldr	r3, [r3, #8]
 802a5fe:	440b      	add	r3, r1
 802a600:	1e59      	subs	r1, r3, #1
 802a602:	68bb      	ldr	r3, [r7, #8]
 802a604:	689b      	ldr	r3, [r3, #8]
 802a606:	fbb1 f3f3 	udiv	r3, r1, r3
 802a60a:	04d9      	lsls	r1, r3, #19
 802a60c:	4b9d      	ldr	r3, [pc, #628]	; (802a884 <USB_EPStartXfer+0x370>)
 802a60e:	400b      	ands	r3, r1
 802a610:	69b9      	ldr	r1, [r7, #24]
 802a612:	0148      	lsls	r0, r1, #5
 802a614:	69f9      	ldr	r1, [r7, #28]
 802a616:	4401      	add	r1, r0
 802a618:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802a61c:	4313      	orrs	r3, r2
 802a61e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802a620:	69bb      	ldr	r3, [r7, #24]
 802a622:	015a      	lsls	r2, r3, #5
 802a624:	69fb      	ldr	r3, [r7, #28]
 802a626:	4413      	add	r3, r2
 802a628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a62c:	691a      	ldr	r2, [r3, #16]
 802a62e:	68bb      	ldr	r3, [r7, #8]
 802a630:	695b      	ldr	r3, [r3, #20]
 802a632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802a636:	69b9      	ldr	r1, [r7, #24]
 802a638:	0148      	lsls	r0, r1, #5
 802a63a:	69f9      	ldr	r1, [r7, #28]
 802a63c:	4401      	add	r1, r0
 802a63e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802a642:	4313      	orrs	r3, r2
 802a644:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 802a646:	68bb      	ldr	r3, [r7, #8]
 802a648:	78db      	ldrb	r3, [r3, #3]
 802a64a:	2b01      	cmp	r3, #1
 802a64c:	d11f      	bne.n	802a68e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 802a64e:	69bb      	ldr	r3, [r7, #24]
 802a650:	015a      	lsls	r2, r3, #5
 802a652:	69fb      	ldr	r3, [r7, #28]
 802a654:	4413      	add	r3, r2
 802a656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a65a:	691b      	ldr	r3, [r3, #16]
 802a65c:	69ba      	ldr	r2, [r7, #24]
 802a65e:	0151      	lsls	r1, r2, #5
 802a660:	69fa      	ldr	r2, [r7, #28]
 802a662:	440a      	add	r2, r1
 802a664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a668:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 802a66c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 802a66e:	69bb      	ldr	r3, [r7, #24]
 802a670:	015a      	lsls	r2, r3, #5
 802a672:	69fb      	ldr	r3, [r7, #28]
 802a674:	4413      	add	r3, r2
 802a676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a67a:	691b      	ldr	r3, [r3, #16]
 802a67c:	69ba      	ldr	r2, [r7, #24]
 802a67e:	0151      	lsls	r1, r2, #5
 802a680:	69fa      	ldr	r2, [r7, #28]
 802a682:	440a      	add	r2, r1
 802a684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a688:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802a68c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 802a68e:	79fb      	ldrb	r3, [r7, #7]
 802a690:	2b01      	cmp	r3, #1
 802a692:	d14b      	bne.n	802a72c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802a694:	68bb      	ldr	r3, [r7, #8]
 802a696:	691b      	ldr	r3, [r3, #16]
 802a698:	2b00      	cmp	r3, #0
 802a69a:	d009      	beq.n	802a6b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802a69c:	69bb      	ldr	r3, [r7, #24]
 802a69e:	015a      	lsls	r2, r3, #5
 802a6a0:	69fb      	ldr	r3, [r7, #28]
 802a6a2:	4413      	add	r3, r2
 802a6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a6a8:	461a      	mov	r2, r3
 802a6aa:	68bb      	ldr	r3, [r7, #8]
 802a6ac:	691b      	ldr	r3, [r3, #16]
 802a6ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 802a6b0:	68bb      	ldr	r3, [r7, #8]
 802a6b2:	78db      	ldrb	r3, [r3, #3]
 802a6b4:	2b01      	cmp	r3, #1
 802a6b6:	d128      	bne.n	802a70a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802a6b8:	69fb      	ldr	r3, [r7, #28]
 802a6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a6be:	689b      	ldr	r3, [r3, #8]
 802a6c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a6c4:	2b00      	cmp	r3, #0
 802a6c6:	d110      	bne.n	802a6ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802a6c8:	69bb      	ldr	r3, [r7, #24]
 802a6ca:	015a      	lsls	r2, r3, #5
 802a6cc:	69fb      	ldr	r3, [r7, #28]
 802a6ce:	4413      	add	r3, r2
 802a6d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a6d4:	681b      	ldr	r3, [r3, #0]
 802a6d6:	69ba      	ldr	r2, [r7, #24]
 802a6d8:	0151      	lsls	r1, r2, #5
 802a6da:	69fa      	ldr	r2, [r7, #28]
 802a6dc:	440a      	add	r2, r1
 802a6de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a6e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802a6e6:	6013      	str	r3, [r2, #0]
 802a6e8:	e00f      	b.n	802a70a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802a6ea:	69bb      	ldr	r3, [r7, #24]
 802a6ec:	015a      	lsls	r2, r3, #5
 802a6ee:	69fb      	ldr	r3, [r7, #28]
 802a6f0:	4413      	add	r3, r2
 802a6f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a6f6:	681b      	ldr	r3, [r3, #0]
 802a6f8:	69ba      	ldr	r2, [r7, #24]
 802a6fa:	0151      	lsls	r1, r2, #5
 802a6fc:	69fa      	ldr	r2, [r7, #28]
 802a6fe:	440a      	add	r2, r1
 802a700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a708:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802a70a:	69bb      	ldr	r3, [r7, #24]
 802a70c:	015a      	lsls	r2, r3, #5
 802a70e:	69fb      	ldr	r3, [r7, #28]
 802a710:	4413      	add	r3, r2
 802a712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a716:	681b      	ldr	r3, [r3, #0]
 802a718:	69ba      	ldr	r2, [r7, #24]
 802a71a:	0151      	lsls	r1, r2, #5
 802a71c:	69fa      	ldr	r2, [r7, #28]
 802a71e:	440a      	add	r2, r1
 802a720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a724:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802a728:	6013      	str	r3, [r2, #0]
 802a72a:	e12f      	b.n	802a98c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802a72c:	69bb      	ldr	r3, [r7, #24]
 802a72e:	015a      	lsls	r2, r3, #5
 802a730:	69fb      	ldr	r3, [r7, #28]
 802a732:	4413      	add	r3, r2
 802a734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a738:	681b      	ldr	r3, [r3, #0]
 802a73a:	69ba      	ldr	r2, [r7, #24]
 802a73c:	0151      	lsls	r1, r2, #5
 802a73e:	69fa      	ldr	r2, [r7, #28]
 802a740:	440a      	add	r2, r1
 802a742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a746:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802a74a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 802a74c:	68bb      	ldr	r3, [r7, #8]
 802a74e:	78db      	ldrb	r3, [r3, #3]
 802a750:	2b01      	cmp	r3, #1
 802a752:	d015      	beq.n	802a780 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 802a754:	68bb      	ldr	r3, [r7, #8]
 802a756:	695b      	ldr	r3, [r3, #20]
 802a758:	2b00      	cmp	r3, #0
 802a75a:	f000 8117 	beq.w	802a98c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802a75e:	69fb      	ldr	r3, [r7, #28]
 802a760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802a766:	68bb      	ldr	r3, [r7, #8]
 802a768:	781b      	ldrb	r3, [r3, #0]
 802a76a:	f003 030f 	and.w	r3, r3, #15
 802a76e:	2101      	movs	r1, #1
 802a770:	fa01 f303 	lsl.w	r3, r1, r3
 802a774:	69f9      	ldr	r1, [r7, #28]
 802a776:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a77a:	4313      	orrs	r3, r2
 802a77c:	634b      	str	r3, [r1, #52]	; 0x34
 802a77e:	e105      	b.n	802a98c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802a780:	69fb      	ldr	r3, [r7, #28]
 802a782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a786:	689b      	ldr	r3, [r3, #8]
 802a788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a78c:	2b00      	cmp	r3, #0
 802a78e:	d110      	bne.n	802a7b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802a790:	69bb      	ldr	r3, [r7, #24]
 802a792:	015a      	lsls	r2, r3, #5
 802a794:	69fb      	ldr	r3, [r7, #28]
 802a796:	4413      	add	r3, r2
 802a798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a79c:	681b      	ldr	r3, [r3, #0]
 802a79e:	69ba      	ldr	r2, [r7, #24]
 802a7a0:	0151      	lsls	r1, r2, #5
 802a7a2:	69fa      	ldr	r2, [r7, #28]
 802a7a4:	440a      	add	r2, r1
 802a7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a7aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802a7ae:	6013      	str	r3, [r2, #0]
 802a7b0:	e00f      	b.n	802a7d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802a7b2:	69bb      	ldr	r3, [r7, #24]
 802a7b4:	015a      	lsls	r2, r3, #5
 802a7b6:	69fb      	ldr	r3, [r7, #28]
 802a7b8:	4413      	add	r3, r2
 802a7ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a7be:	681b      	ldr	r3, [r3, #0]
 802a7c0:	69ba      	ldr	r2, [r7, #24]
 802a7c2:	0151      	lsls	r1, r2, #5
 802a7c4:	69fa      	ldr	r2, [r7, #28]
 802a7c6:	440a      	add	r2, r1
 802a7c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a7cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a7d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 802a7d2:	68bb      	ldr	r3, [r7, #8]
 802a7d4:	68d9      	ldr	r1, [r3, #12]
 802a7d6:	68bb      	ldr	r3, [r7, #8]
 802a7d8:	781a      	ldrb	r2, [r3, #0]
 802a7da:	68bb      	ldr	r3, [r7, #8]
 802a7dc:	695b      	ldr	r3, [r3, #20]
 802a7de:	b298      	uxth	r0, r3
 802a7e0:	79fb      	ldrb	r3, [r7, #7]
 802a7e2:	9300      	str	r3, [sp, #0]
 802a7e4:	4603      	mov	r3, r0
 802a7e6:	68f8      	ldr	r0, [r7, #12]
 802a7e8:	f000 fa2b 	bl	802ac42 <USB_WritePacket>
 802a7ec:	e0ce      	b.n	802a98c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802a7ee:	69bb      	ldr	r3, [r7, #24]
 802a7f0:	015a      	lsls	r2, r3, #5
 802a7f2:	69fb      	ldr	r3, [r7, #28]
 802a7f4:	4413      	add	r3, r2
 802a7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a7fa:	691b      	ldr	r3, [r3, #16]
 802a7fc:	69ba      	ldr	r2, [r7, #24]
 802a7fe:	0151      	lsls	r1, r2, #5
 802a800:	69fa      	ldr	r2, [r7, #28]
 802a802:	440a      	add	r2, r1
 802a804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a808:	0cdb      	lsrs	r3, r3, #19
 802a80a:	04db      	lsls	r3, r3, #19
 802a80c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802a80e:	69bb      	ldr	r3, [r7, #24]
 802a810:	015a      	lsls	r2, r3, #5
 802a812:	69fb      	ldr	r3, [r7, #28]
 802a814:	4413      	add	r3, r2
 802a816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a81a:	691b      	ldr	r3, [r3, #16]
 802a81c:	69ba      	ldr	r2, [r7, #24]
 802a81e:	0151      	lsls	r1, r2, #5
 802a820:	69fa      	ldr	r2, [r7, #28]
 802a822:	440a      	add	r2, r1
 802a824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a828:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802a82c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802a830:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 802a832:	68bb      	ldr	r3, [r7, #8]
 802a834:	695b      	ldr	r3, [r3, #20]
 802a836:	2b00      	cmp	r3, #0
 802a838:	d126      	bne.n	802a888 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 802a83a:	69bb      	ldr	r3, [r7, #24]
 802a83c:	015a      	lsls	r2, r3, #5
 802a83e:	69fb      	ldr	r3, [r7, #28]
 802a840:	4413      	add	r3, r2
 802a842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a846:	691a      	ldr	r2, [r3, #16]
 802a848:	68bb      	ldr	r3, [r7, #8]
 802a84a:	689b      	ldr	r3, [r3, #8]
 802a84c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802a850:	69b9      	ldr	r1, [r7, #24]
 802a852:	0148      	lsls	r0, r1, #5
 802a854:	69f9      	ldr	r1, [r7, #28]
 802a856:	4401      	add	r1, r0
 802a858:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802a85c:	4313      	orrs	r3, r2
 802a85e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802a860:	69bb      	ldr	r3, [r7, #24]
 802a862:	015a      	lsls	r2, r3, #5
 802a864:	69fb      	ldr	r3, [r7, #28]
 802a866:	4413      	add	r3, r2
 802a868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a86c:	691b      	ldr	r3, [r3, #16]
 802a86e:	69ba      	ldr	r2, [r7, #24]
 802a870:	0151      	lsls	r1, r2, #5
 802a872:	69fa      	ldr	r2, [r7, #28]
 802a874:	440a      	add	r2, r1
 802a876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a87a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802a87e:	6113      	str	r3, [r2, #16]
 802a880:	e036      	b.n	802a8f0 <USB_EPStartXfer+0x3dc>
 802a882:	bf00      	nop
 802a884:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 802a888:	68bb      	ldr	r3, [r7, #8]
 802a88a:	695a      	ldr	r2, [r3, #20]
 802a88c:	68bb      	ldr	r3, [r7, #8]
 802a88e:	689b      	ldr	r3, [r3, #8]
 802a890:	4413      	add	r3, r2
 802a892:	1e5a      	subs	r2, r3, #1
 802a894:	68bb      	ldr	r3, [r7, #8]
 802a896:	689b      	ldr	r3, [r3, #8]
 802a898:	fbb2 f3f3 	udiv	r3, r2, r3
 802a89c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 802a89e:	69bb      	ldr	r3, [r7, #24]
 802a8a0:	015a      	lsls	r2, r3, #5
 802a8a2:	69fb      	ldr	r3, [r7, #28]
 802a8a4:	4413      	add	r3, r2
 802a8a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a8aa:	691a      	ldr	r2, [r3, #16]
 802a8ac:	8afb      	ldrh	r3, [r7, #22]
 802a8ae:	04d9      	lsls	r1, r3, #19
 802a8b0:	4b39      	ldr	r3, [pc, #228]	; (802a998 <USB_EPStartXfer+0x484>)
 802a8b2:	400b      	ands	r3, r1
 802a8b4:	69b9      	ldr	r1, [r7, #24]
 802a8b6:	0148      	lsls	r0, r1, #5
 802a8b8:	69f9      	ldr	r1, [r7, #28]
 802a8ba:	4401      	add	r1, r0
 802a8bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802a8c0:	4313      	orrs	r3, r2
 802a8c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 802a8c4:	69bb      	ldr	r3, [r7, #24]
 802a8c6:	015a      	lsls	r2, r3, #5
 802a8c8:	69fb      	ldr	r3, [r7, #28]
 802a8ca:	4413      	add	r3, r2
 802a8cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a8d0:	691a      	ldr	r2, [r3, #16]
 802a8d2:	68bb      	ldr	r3, [r7, #8]
 802a8d4:	689b      	ldr	r3, [r3, #8]
 802a8d6:	8af9      	ldrh	r1, [r7, #22]
 802a8d8:	fb01 f303 	mul.w	r3, r1, r3
 802a8dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802a8e0:	69b9      	ldr	r1, [r7, #24]
 802a8e2:	0148      	lsls	r0, r1, #5
 802a8e4:	69f9      	ldr	r1, [r7, #28]
 802a8e6:	4401      	add	r1, r0
 802a8e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802a8ec:	4313      	orrs	r3, r2
 802a8ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802a8f0:	79fb      	ldrb	r3, [r7, #7]
 802a8f2:	2b01      	cmp	r3, #1
 802a8f4:	d10d      	bne.n	802a912 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802a8f6:	68bb      	ldr	r3, [r7, #8]
 802a8f8:	68db      	ldr	r3, [r3, #12]
 802a8fa:	2b00      	cmp	r3, #0
 802a8fc:	d009      	beq.n	802a912 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802a8fe:	68bb      	ldr	r3, [r7, #8]
 802a900:	68d9      	ldr	r1, [r3, #12]
 802a902:	69bb      	ldr	r3, [r7, #24]
 802a904:	015a      	lsls	r2, r3, #5
 802a906:	69fb      	ldr	r3, [r7, #28]
 802a908:	4413      	add	r3, r2
 802a90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a90e:	460a      	mov	r2, r1
 802a910:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 802a912:	68bb      	ldr	r3, [r7, #8]
 802a914:	78db      	ldrb	r3, [r3, #3]
 802a916:	2b01      	cmp	r3, #1
 802a918:	d128      	bne.n	802a96c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802a91a:	69fb      	ldr	r3, [r7, #28]
 802a91c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a920:	689b      	ldr	r3, [r3, #8]
 802a922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a926:	2b00      	cmp	r3, #0
 802a928:	d110      	bne.n	802a94c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 802a92a:	69bb      	ldr	r3, [r7, #24]
 802a92c:	015a      	lsls	r2, r3, #5
 802a92e:	69fb      	ldr	r3, [r7, #28]
 802a930:	4413      	add	r3, r2
 802a932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a936:	681b      	ldr	r3, [r3, #0]
 802a938:	69ba      	ldr	r2, [r7, #24]
 802a93a:	0151      	lsls	r1, r2, #5
 802a93c:	69fa      	ldr	r2, [r7, #28]
 802a93e:	440a      	add	r2, r1
 802a940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a944:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802a948:	6013      	str	r3, [r2, #0]
 802a94a:	e00f      	b.n	802a96c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 802a94c:	69bb      	ldr	r3, [r7, #24]
 802a94e:	015a      	lsls	r2, r3, #5
 802a950:	69fb      	ldr	r3, [r7, #28]
 802a952:	4413      	add	r3, r2
 802a954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a958:	681b      	ldr	r3, [r3, #0]
 802a95a:	69ba      	ldr	r2, [r7, #24]
 802a95c:	0151      	lsls	r1, r2, #5
 802a95e:	69fa      	ldr	r2, [r7, #28]
 802a960:	440a      	add	r2, r1
 802a962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a96a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802a96c:	69bb      	ldr	r3, [r7, #24]
 802a96e:	015a      	lsls	r2, r3, #5
 802a970:	69fb      	ldr	r3, [r7, #28]
 802a972:	4413      	add	r3, r2
 802a974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a978:	681b      	ldr	r3, [r3, #0]
 802a97a:	69ba      	ldr	r2, [r7, #24]
 802a97c:	0151      	lsls	r1, r2, #5
 802a97e:	69fa      	ldr	r2, [r7, #28]
 802a980:	440a      	add	r2, r1
 802a982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802a98a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802a98c:	2300      	movs	r3, #0
}
 802a98e:	4618      	mov	r0, r3
 802a990:	3720      	adds	r7, #32
 802a992:	46bd      	mov	sp, r7
 802a994:	bd80      	pop	{r7, pc}
 802a996:	bf00      	nop
 802a998:	1ff80000 	.word	0x1ff80000

0802a99c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802a99c:	b480      	push	{r7}
 802a99e:	b087      	sub	sp, #28
 802a9a0:	af00      	add	r7, sp, #0
 802a9a2:	60f8      	str	r0, [r7, #12]
 802a9a4:	60b9      	str	r1, [r7, #8]
 802a9a6:	4613      	mov	r3, r2
 802a9a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a9aa:	68fb      	ldr	r3, [r7, #12]
 802a9ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 802a9ae:	68bb      	ldr	r3, [r7, #8]
 802a9b0:	781b      	ldrb	r3, [r3, #0]
 802a9b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802a9b4:	68bb      	ldr	r3, [r7, #8]
 802a9b6:	785b      	ldrb	r3, [r3, #1]
 802a9b8:	2b01      	cmp	r3, #1
 802a9ba:	f040 80cd 	bne.w	802ab58 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802a9be:	68bb      	ldr	r3, [r7, #8]
 802a9c0:	695b      	ldr	r3, [r3, #20]
 802a9c2:	2b00      	cmp	r3, #0
 802a9c4:	d132      	bne.n	802aa2c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802a9c6:	693b      	ldr	r3, [r7, #16]
 802a9c8:	015a      	lsls	r2, r3, #5
 802a9ca:	697b      	ldr	r3, [r7, #20]
 802a9cc:	4413      	add	r3, r2
 802a9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a9d2:	691b      	ldr	r3, [r3, #16]
 802a9d4:	693a      	ldr	r2, [r7, #16]
 802a9d6:	0151      	lsls	r1, r2, #5
 802a9d8:	697a      	ldr	r2, [r7, #20]
 802a9da:	440a      	add	r2, r1
 802a9dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a9e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802a9e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802a9e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802a9ea:	693b      	ldr	r3, [r7, #16]
 802a9ec:	015a      	lsls	r2, r3, #5
 802a9ee:	697b      	ldr	r3, [r7, #20]
 802a9f0:	4413      	add	r3, r2
 802a9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a9f6:	691b      	ldr	r3, [r3, #16]
 802a9f8:	693a      	ldr	r2, [r7, #16]
 802a9fa:	0151      	lsls	r1, r2, #5
 802a9fc:	697a      	ldr	r2, [r7, #20]
 802a9fe:	440a      	add	r2, r1
 802aa00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802aa04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802aa08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802aa0a:	693b      	ldr	r3, [r7, #16]
 802aa0c:	015a      	lsls	r2, r3, #5
 802aa0e:	697b      	ldr	r3, [r7, #20]
 802aa10:	4413      	add	r3, r2
 802aa12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aa16:	691b      	ldr	r3, [r3, #16]
 802aa18:	693a      	ldr	r2, [r7, #16]
 802aa1a:	0151      	lsls	r1, r2, #5
 802aa1c:	697a      	ldr	r2, [r7, #20]
 802aa1e:	440a      	add	r2, r1
 802aa20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802aa24:	0cdb      	lsrs	r3, r3, #19
 802aa26:	04db      	lsls	r3, r3, #19
 802aa28:	6113      	str	r3, [r2, #16]
 802aa2a:	e04e      	b.n	802aaca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802aa2c:	693b      	ldr	r3, [r7, #16]
 802aa2e:	015a      	lsls	r2, r3, #5
 802aa30:	697b      	ldr	r3, [r7, #20]
 802aa32:	4413      	add	r3, r2
 802aa34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aa38:	691b      	ldr	r3, [r3, #16]
 802aa3a:	693a      	ldr	r2, [r7, #16]
 802aa3c:	0151      	lsls	r1, r2, #5
 802aa3e:	697a      	ldr	r2, [r7, #20]
 802aa40:	440a      	add	r2, r1
 802aa42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802aa46:	0cdb      	lsrs	r3, r3, #19
 802aa48:	04db      	lsls	r3, r3, #19
 802aa4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802aa4c:	693b      	ldr	r3, [r7, #16]
 802aa4e:	015a      	lsls	r2, r3, #5
 802aa50:	697b      	ldr	r3, [r7, #20]
 802aa52:	4413      	add	r3, r2
 802aa54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aa58:	691b      	ldr	r3, [r3, #16]
 802aa5a:	693a      	ldr	r2, [r7, #16]
 802aa5c:	0151      	lsls	r1, r2, #5
 802aa5e:	697a      	ldr	r2, [r7, #20]
 802aa60:	440a      	add	r2, r1
 802aa62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802aa66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802aa6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802aa6e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 802aa70:	68bb      	ldr	r3, [r7, #8]
 802aa72:	695a      	ldr	r2, [r3, #20]
 802aa74:	68bb      	ldr	r3, [r7, #8]
 802aa76:	689b      	ldr	r3, [r3, #8]
 802aa78:	429a      	cmp	r2, r3
 802aa7a:	d903      	bls.n	802aa84 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 802aa7c:	68bb      	ldr	r3, [r7, #8]
 802aa7e:	689a      	ldr	r2, [r3, #8]
 802aa80:	68bb      	ldr	r3, [r7, #8]
 802aa82:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802aa84:	693b      	ldr	r3, [r7, #16]
 802aa86:	015a      	lsls	r2, r3, #5
 802aa88:	697b      	ldr	r3, [r7, #20]
 802aa8a:	4413      	add	r3, r2
 802aa8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aa90:	691b      	ldr	r3, [r3, #16]
 802aa92:	693a      	ldr	r2, [r7, #16]
 802aa94:	0151      	lsls	r1, r2, #5
 802aa96:	697a      	ldr	r2, [r7, #20]
 802aa98:	440a      	add	r2, r1
 802aa9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802aa9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802aaa2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802aaa4:	693b      	ldr	r3, [r7, #16]
 802aaa6:	015a      	lsls	r2, r3, #5
 802aaa8:	697b      	ldr	r3, [r7, #20]
 802aaaa:	4413      	add	r3, r2
 802aaac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aab0:	691a      	ldr	r2, [r3, #16]
 802aab2:	68bb      	ldr	r3, [r7, #8]
 802aab4:	695b      	ldr	r3, [r3, #20]
 802aab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802aaba:	6939      	ldr	r1, [r7, #16]
 802aabc:	0148      	lsls	r0, r1, #5
 802aabe:	6979      	ldr	r1, [r7, #20]
 802aac0:	4401      	add	r1, r0
 802aac2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802aac6:	4313      	orrs	r3, r2
 802aac8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802aaca:	79fb      	ldrb	r3, [r7, #7]
 802aacc:	2b01      	cmp	r3, #1
 802aace:	d11e      	bne.n	802ab0e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802aad0:	68bb      	ldr	r3, [r7, #8]
 802aad2:	691b      	ldr	r3, [r3, #16]
 802aad4:	2b00      	cmp	r3, #0
 802aad6:	d009      	beq.n	802aaec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802aad8:	693b      	ldr	r3, [r7, #16]
 802aada:	015a      	lsls	r2, r3, #5
 802aadc:	697b      	ldr	r3, [r7, #20]
 802aade:	4413      	add	r3, r2
 802aae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aae4:	461a      	mov	r2, r3
 802aae6:	68bb      	ldr	r3, [r7, #8]
 802aae8:	691b      	ldr	r3, [r3, #16]
 802aaea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802aaec:	693b      	ldr	r3, [r7, #16]
 802aaee:	015a      	lsls	r2, r3, #5
 802aaf0:	697b      	ldr	r3, [r7, #20]
 802aaf2:	4413      	add	r3, r2
 802aaf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aaf8:	681b      	ldr	r3, [r3, #0]
 802aafa:	693a      	ldr	r2, [r7, #16]
 802aafc:	0151      	lsls	r1, r2, #5
 802aafe:	697a      	ldr	r2, [r7, #20]
 802ab00:	440a      	add	r2, r1
 802ab02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ab06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802ab0a:	6013      	str	r3, [r2, #0]
 802ab0c:	e092      	b.n	802ac34 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802ab0e:	693b      	ldr	r3, [r7, #16]
 802ab10:	015a      	lsls	r2, r3, #5
 802ab12:	697b      	ldr	r3, [r7, #20]
 802ab14:	4413      	add	r3, r2
 802ab16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ab1a:	681b      	ldr	r3, [r3, #0]
 802ab1c:	693a      	ldr	r2, [r7, #16]
 802ab1e:	0151      	lsls	r1, r2, #5
 802ab20:	697a      	ldr	r2, [r7, #20]
 802ab22:	440a      	add	r2, r1
 802ab24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ab28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802ab2c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 802ab2e:	68bb      	ldr	r3, [r7, #8]
 802ab30:	695b      	ldr	r3, [r3, #20]
 802ab32:	2b00      	cmp	r3, #0
 802ab34:	d07e      	beq.n	802ac34 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802ab36:	697b      	ldr	r3, [r7, #20]
 802ab38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ab3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802ab3e:	68bb      	ldr	r3, [r7, #8]
 802ab40:	781b      	ldrb	r3, [r3, #0]
 802ab42:	f003 030f 	and.w	r3, r3, #15
 802ab46:	2101      	movs	r1, #1
 802ab48:	fa01 f303 	lsl.w	r3, r1, r3
 802ab4c:	6979      	ldr	r1, [r7, #20]
 802ab4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802ab52:	4313      	orrs	r3, r2
 802ab54:	634b      	str	r3, [r1, #52]	; 0x34
 802ab56:	e06d      	b.n	802ac34 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802ab58:	693b      	ldr	r3, [r7, #16]
 802ab5a:	015a      	lsls	r2, r3, #5
 802ab5c:	697b      	ldr	r3, [r7, #20]
 802ab5e:	4413      	add	r3, r2
 802ab60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ab64:	691b      	ldr	r3, [r3, #16]
 802ab66:	693a      	ldr	r2, [r7, #16]
 802ab68:	0151      	lsls	r1, r2, #5
 802ab6a:	697a      	ldr	r2, [r7, #20]
 802ab6c:	440a      	add	r2, r1
 802ab6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ab72:	0cdb      	lsrs	r3, r3, #19
 802ab74:	04db      	lsls	r3, r3, #19
 802ab76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802ab78:	693b      	ldr	r3, [r7, #16]
 802ab7a:	015a      	lsls	r2, r3, #5
 802ab7c:	697b      	ldr	r3, [r7, #20]
 802ab7e:	4413      	add	r3, r2
 802ab80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ab84:	691b      	ldr	r3, [r3, #16]
 802ab86:	693a      	ldr	r2, [r7, #16]
 802ab88:	0151      	lsls	r1, r2, #5
 802ab8a:	697a      	ldr	r2, [r7, #20]
 802ab8c:	440a      	add	r2, r1
 802ab8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ab92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802ab96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802ab9a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 802ab9c:	68bb      	ldr	r3, [r7, #8]
 802ab9e:	695b      	ldr	r3, [r3, #20]
 802aba0:	2b00      	cmp	r3, #0
 802aba2:	d003      	beq.n	802abac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 802aba4:	68bb      	ldr	r3, [r7, #8]
 802aba6:	689a      	ldr	r2, [r3, #8]
 802aba8:	68bb      	ldr	r3, [r7, #8]
 802abaa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802abac:	693b      	ldr	r3, [r7, #16]
 802abae:	015a      	lsls	r2, r3, #5
 802abb0:	697b      	ldr	r3, [r7, #20]
 802abb2:	4413      	add	r3, r2
 802abb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802abb8:	691b      	ldr	r3, [r3, #16]
 802abba:	693a      	ldr	r2, [r7, #16]
 802abbc:	0151      	lsls	r1, r2, #5
 802abbe:	697a      	ldr	r2, [r7, #20]
 802abc0:	440a      	add	r2, r1
 802abc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802abc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802abca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 802abcc:	693b      	ldr	r3, [r7, #16]
 802abce:	015a      	lsls	r2, r3, #5
 802abd0:	697b      	ldr	r3, [r7, #20]
 802abd2:	4413      	add	r3, r2
 802abd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802abd8:	691a      	ldr	r2, [r3, #16]
 802abda:	68bb      	ldr	r3, [r7, #8]
 802abdc:	689b      	ldr	r3, [r3, #8]
 802abde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802abe2:	6939      	ldr	r1, [r7, #16]
 802abe4:	0148      	lsls	r0, r1, #5
 802abe6:	6979      	ldr	r1, [r7, #20]
 802abe8:	4401      	add	r1, r0
 802abea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802abee:	4313      	orrs	r3, r2
 802abf0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 802abf2:	79fb      	ldrb	r3, [r7, #7]
 802abf4:	2b01      	cmp	r3, #1
 802abf6:	d10d      	bne.n	802ac14 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802abf8:	68bb      	ldr	r3, [r7, #8]
 802abfa:	68db      	ldr	r3, [r3, #12]
 802abfc:	2b00      	cmp	r3, #0
 802abfe:	d009      	beq.n	802ac14 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802ac00:	68bb      	ldr	r3, [r7, #8]
 802ac02:	68d9      	ldr	r1, [r3, #12]
 802ac04:	693b      	ldr	r3, [r7, #16]
 802ac06:	015a      	lsls	r2, r3, #5
 802ac08:	697b      	ldr	r3, [r7, #20]
 802ac0a:	4413      	add	r3, r2
 802ac0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ac10:	460a      	mov	r2, r1
 802ac12:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802ac14:	693b      	ldr	r3, [r7, #16]
 802ac16:	015a      	lsls	r2, r3, #5
 802ac18:	697b      	ldr	r3, [r7, #20]
 802ac1a:	4413      	add	r3, r2
 802ac1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ac20:	681b      	ldr	r3, [r3, #0]
 802ac22:	693a      	ldr	r2, [r7, #16]
 802ac24:	0151      	lsls	r1, r2, #5
 802ac26:	697a      	ldr	r2, [r7, #20]
 802ac28:	440a      	add	r2, r1
 802ac2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ac2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802ac32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802ac34:	2300      	movs	r3, #0
}
 802ac36:	4618      	mov	r0, r3
 802ac38:	371c      	adds	r7, #28
 802ac3a:	46bd      	mov	sp, r7
 802ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac40:	4770      	bx	lr

0802ac42 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802ac42:	b480      	push	{r7}
 802ac44:	b089      	sub	sp, #36	; 0x24
 802ac46:	af00      	add	r7, sp, #0
 802ac48:	60f8      	str	r0, [r7, #12]
 802ac4a:	60b9      	str	r1, [r7, #8]
 802ac4c:	4611      	mov	r1, r2
 802ac4e:	461a      	mov	r2, r3
 802ac50:	460b      	mov	r3, r1
 802ac52:	71fb      	strb	r3, [r7, #7]
 802ac54:	4613      	mov	r3, r2
 802ac56:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ac58:	68fb      	ldr	r3, [r7, #12]
 802ac5a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 802ac5c:	68bb      	ldr	r3, [r7, #8]
 802ac5e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 802ac60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802ac64:	2b00      	cmp	r3, #0
 802ac66:	d11a      	bne.n	802ac9e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802ac68:	88bb      	ldrh	r3, [r7, #4]
 802ac6a:	3303      	adds	r3, #3
 802ac6c:	089b      	lsrs	r3, r3, #2
 802ac6e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802ac70:	2300      	movs	r3, #0
 802ac72:	61bb      	str	r3, [r7, #24]
 802ac74:	e00f      	b.n	802ac96 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802ac76:	79fb      	ldrb	r3, [r7, #7]
 802ac78:	031a      	lsls	r2, r3, #12
 802ac7a:	697b      	ldr	r3, [r7, #20]
 802ac7c:	4413      	add	r3, r2
 802ac7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802ac82:	461a      	mov	r2, r3
 802ac84:	69fb      	ldr	r3, [r7, #28]
 802ac86:	681b      	ldr	r3, [r3, #0]
 802ac88:	6013      	str	r3, [r2, #0]
      pSrc++;
 802ac8a:	69fb      	ldr	r3, [r7, #28]
 802ac8c:	3304      	adds	r3, #4
 802ac8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802ac90:	69bb      	ldr	r3, [r7, #24]
 802ac92:	3301      	adds	r3, #1
 802ac94:	61bb      	str	r3, [r7, #24]
 802ac96:	69ba      	ldr	r2, [r7, #24]
 802ac98:	693b      	ldr	r3, [r7, #16]
 802ac9a:	429a      	cmp	r2, r3
 802ac9c:	d3eb      	bcc.n	802ac76 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802ac9e:	2300      	movs	r3, #0
}
 802aca0:	4618      	mov	r0, r3
 802aca2:	3724      	adds	r7, #36	; 0x24
 802aca4:	46bd      	mov	sp, r7
 802aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acaa:	4770      	bx	lr

0802acac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802acac:	b480      	push	{r7}
 802acae:	b089      	sub	sp, #36	; 0x24
 802acb0:	af00      	add	r7, sp, #0
 802acb2:	60f8      	str	r0, [r7, #12]
 802acb4:	60b9      	str	r1, [r7, #8]
 802acb6:	4613      	mov	r3, r2
 802acb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802acba:	68fb      	ldr	r3, [r7, #12]
 802acbc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 802acbe:	68bb      	ldr	r3, [r7, #8]
 802acc0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 802acc2:	88fb      	ldrh	r3, [r7, #6]
 802acc4:	3303      	adds	r3, #3
 802acc6:	089b      	lsrs	r3, r3, #2
 802acc8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 802acca:	2300      	movs	r3, #0
 802accc:	61bb      	str	r3, [r7, #24]
 802acce:	e00b      	b.n	802ace8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802acd0:	697b      	ldr	r3, [r7, #20]
 802acd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802acd6:	681a      	ldr	r2, [r3, #0]
 802acd8:	69fb      	ldr	r3, [r7, #28]
 802acda:	601a      	str	r2, [r3, #0]
    pDest++;
 802acdc:	69fb      	ldr	r3, [r7, #28]
 802acde:	3304      	adds	r3, #4
 802ace0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 802ace2:	69bb      	ldr	r3, [r7, #24]
 802ace4:	3301      	adds	r3, #1
 802ace6:	61bb      	str	r3, [r7, #24]
 802ace8:	69ba      	ldr	r2, [r7, #24]
 802acea:	693b      	ldr	r3, [r7, #16]
 802acec:	429a      	cmp	r2, r3
 802acee:	d3ef      	bcc.n	802acd0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 802acf0:	69fb      	ldr	r3, [r7, #28]
}
 802acf2:	4618      	mov	r0, r3
 802acf4:	3724      	adds	r7, #36	; 0x24
 802acf6:	46bd      	mov	sp, r7
 802acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acfc:	4770      	bx	lr

0802acfe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802acfe:	b480      	push	{r7}
 802ad00:	b085      	sub	sp, #20
 802ad02:	af00      	add	r7, sp, #0
 802ad04:	6078      	str	r0, [r7, #4]
 802ad06:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ad08:	687b      	ldr	r3, [r7, #4]
 802ad0a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802ad0c:	683b      	ldr	r3, [r7, #0]
 802ad0e:	781b      	ldrb	r3, [r3, #0]
 802ad10:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802ad12:	683b      	ldr	r3, [r7, #0]
 802ad14:	785b      	ldrb	r3, [r3, #1]
 802ad16:	2b01      	cmp	r3, #1
 802ad18:	d12c      	bne.n	802ad74 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 802ad1a:	68bb      	ldr	r3, [r7, #8]
 802ad1c:	015a      	lsls	r2, r3, #5
 802ad1e:	68fb      	ldr	r3, [r7, #12]
 802ad20:	4413      	add	r3, r2
 802ad22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ad26:	681b      	ldr	r3, [r3, #0]
 802ad28:	2b00      	cmp	r3, #0
 802ad2a:	db12      	blt.n	802ad52 <USB_EPSetStall+0x54>
 802ad2c:	68bb      	ldr	r3, [r7, #8]
 802ad2e:	2b00      	cmp	r3, #0
 802ad30:	d00f      	beq.n	802ad52 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 802ad32:	68bb      	ldr	r3, [r7, #8]
 802ad34:	015a      	lsls	r2, r3, #5
 802ad36:	68fb      	ldr	r3, [r7, #12]
 802ad38:	4413      	add	r3, r2
 802ad3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ad3e:	681b      	ldr	r3, [r3, #0]
 802ad40:	68ba      	ldr	r2, [r7, #8]
 802ad42:	0151      	lsls	r1, r2, #5
 802ad44:	68fa      	ldr	r2, [r7, #12]
 802ad46:	440a      	add	r2, r1
 802ad48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ad4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802ad50:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 802ad52:	68bb      	ldr	r3, [r7, #8]
 802ad54:	015a      	lsls	r2, r3, #5
 802ad56:	68fb      	ldr	r3, [r7, #12]
 802ad58:	4413      	add	r3, r2
 802ad5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ad5e:	681b      	ldr	r3, [r3, #0]
 802ad60:	68ba      	ldr	r2, [r7, #8]
 802ad62:	0151      	lsls	r1, r2, #5
 802ad64:	68fa      	ldr	r2, [r7, #12]
 802ad66:	440a      	add	r2, r1
 802ad68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ad6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802ad70:	6013      	str	r3, [r2, #0]
 802ad72:	e02b      	b.n	802adcc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 802ad74:	68bb      	ldr	r3, [r7, #8]
 802ad76:	015a      	lsls	r2, r3, #5
 802ad78:	68fb      	ldr	r3, [r7, #12]
 802ad7a:	4413      	add	r3, r2
 802ad7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ad80:	681b      	ldr	r3, [r3, #0]
 802ad82:	2b00      	cmp	r3, #0
 802ad84:	db12      	blt.n	802adac <USB_EPSetStall+0xae>
 802ad86:	68bb      	ldr	r3, [r7, #8]
 802ad88:	2b00      	cmp	r3, #0
 802ad8a:	d00f      	beq.n	802adac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 802ad8c:	68bb      	ldr	r3, [r7, #8]
 802ad8e:	015a      	lsls	r2, r3, #5
 802ad90:	68fb      	ldr	r3, [r7, #12]
 802ad92:	4413      	add	r3, r2
 802ad94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ad98:	681b      	ldr	r3, [r3, #0]
 802ad9a:	68ba      	ldr	r2, [r7, #8]
 802ad9c:	0151      	lsls	r1, r2, #5
 802ad9e:	68fa      	ldr	r2, [r7, #12]
 802ada0:	440a      	add	r2, r1
 802ada2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ada6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802adaa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 802adac:	68bb      	ldr	r3, [r7, #8]
 802adae:	015a      	lsls	r2, r3, #5
 802adb0:	68fb      	ldr	r3, [r7, #12]
 802adb2:	4413      	add	r3, r2
 802adb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802adb8:	681b      	ldr	r3, [r3, #0]
 802adba:	68ba      	ldr	r2, [r7, #8]
 802adbc:	0151      	lsls	r1, r2, #5
 802adbe:	68fa      	ldr	r2, [r7, #12]
 802adc0:	440a      	add	r2, r1
 802adc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802adc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802adca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802adcc:	2300      	movs	r3, #0
}
 802adce:	4618      	mov	r0, r3
 802add0:	3714      	adds	r7, #20
 802add2:	46bd      	mov	sp, r7
 802add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802add8:	4770      	bx	lr

0802adda <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802adda:	b480      	push	{r7}
 802addc:	b085      	sub	sp, #20
 802adde:	af00      	add	r7, sp, #0
 802ade0:	6078      	str	r0, [r7, #4]
 802ade2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ade4:	687b      	ldr	r3, [r7, #4]
 802ade6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802ade8:	683b      	ldr	r3, [r7, #0]
 802adea:	781b      	ldrb	r3, [r3, #0]
 802adec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802adee:	683b      	ldr	r3, [r7, #0]
 802adf0:	785b      	ldrb	r3, [r3, #1]
 802adf2:	2b01      	cmp	r3, #1
 802adf4:	d128      	bne.n	802ae48 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802adf6:	68bb      	ldr	r3, [r7, #8]
 802adf8:	015a      	lsls	r2, r3, #5
 802adfa:	68fb      	ldr	r3, [r7, #12]
 802adfc:	4413      	add	r3, r2
 802adfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ae02:	681b      	ldr	r3, [r3, #0]
 802ae04:	68ba      	ldr	r2, [r7, #8]
 802ae06:	0151      	lsls	r1, r2, #5
 802ae08:	68fa      	ldr	r2, [r7, #12]
 802ae0a:	440a      	add	r2, r1
 802ae0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ae10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802ae14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802ae16:	683b      	ldr	r3, [r7, #0]
 802ae18:	78db      	ldrb	r3, [r3, #3]
 802ae1a:	2b03      	cmp	r3, #3
 802ae1c:	d003      	beq.n	802ae26 <USB_EPClearStall+0x4c>
 802ae1e:	683b      	ldr	r3, [r7, #0]
 802ae20:	78db      	ldrb	r3, [r3, #3]
 802ae22:	2b02      	cmp	r3, #2
 802ae24:	d138      	bne.n	802ae98 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802ae26:	68bb      	ldr	r3, [r7, #8]
 802ae28:	015a      	lsls	r2, r3, #5
 802ae2a:	68fb      	ldr	r3, [r7, #12]
 802ae2c:	4413      	add	r3, r2
 802ae2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ae32:	681b      	ldr	r3, [r3, #0]
 802ae34:	68ba      	ldr	r2, [r7, #8]
 802ae36:	0151      	lsls	r1, r2, #5
 802ae38:	68fa      	ldr	r2, [r7, #12]
 802ae3a:	440a      	add	r2, r1
 802ae3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ae40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802ae44:	6013      	str	r3, [r2, #0]
 802ae46:	e027      	b.n	802ae98 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802ae48:	68bb      	ldr	r3, [r7, #8]
 802ae4a:	015a      	lsls	r2, r3, #5
 802ae4c:	68fb      	ldr	r3, [r7, #12]
 802ae4e:	4413      	add	r3, r2
 802ae50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ae54:	681b      	ldr	r3, [r3, #0]
 802ae56:	68ba      	ldr	r2, [r7, #8]
 802ae58:	0151      	lsls	r1, r2, #5
 802ae5a:	68fa      	ldr	r2, [r7, #12]
 802ae5c:	440a      	add	r2, r1
 802ae5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ae62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802ae66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802ae68:	683b      	ldr	r3, [r7, #0]
 802ae6a:	78db      	ldrb	r3, [r3, #3]
 802ae6c:	2b03      	cmp	r3, #3
 802ae6e:	d003      	beq.n	802ae78 <USB_EPClearStall+0x9e>
 802ae70:	683b      	ldr	r3, [r7, #0]
 802ae72:	78db      	ldrb	r3, [r3, #3]
 802ae74:	2b02      	cmp	r3, #2
 802ae76:	d10f      	bne.n	802ae98 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802ae78:	68bb      	ldr	r3, [r7, #8]
 802ae7a:	015a      	lsls	r2, r3, #5
 802ae7c:	68fb      	ldr	r3, [r7, #12]
 802ae7e:	4413      	add	r3, r2
 802ae80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ae84:	681b      	ldr	r3, [r3, #0]
 802ae86:	68ba      	ldr	r2, [r7, #8]
 802ae88:	0151      	lsls	r1, r2, #5
 802ae8a:	68fa      	ldr	r2, [r7, #12]
 802ae8c:	440a      	add	r2, r1
 802ae8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ae92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802ae96:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 802ae98:	2300      	movs	r3, #0
}
 802ae9a:	4618      	mov	r0, r3
 802ae9c:	3714      	adds	r7, #20
 802ae9e:	46bd      	mov	sp, r7
 802aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aea4:	4770      	bx	lr

0802aea6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 802aea6:	b480      	push	{r7}
 802aea8:	b085      	sub	sp, #20
 802aeaa:	af00      	add	r7, sp, #0
 802aeac:	6078      	str	r0, [r7, #4]
 802aeae:	460b      	mov	r3, r1
 802aeb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802aeb2:	687b      	ldr	r3, [r7, #4]
 802aeb4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 802aeb6:	68fb      	ldr	r3, [r7, #12]
 802aeb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802aebc:	681b      	ldr	r3, [r3, #0]
 802aebe:	68fa      	ldr	r2, [r7, #12]
 802aec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802aec4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802aec8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 802aeca:	68fb      	ldr	r3, [r7, #12]
 802aecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802aed0:	681a      	ldr	r2, [r3, #0]
 802aed2:	78fb      	ldrb	r3, [r7, #3]
 802aed4:	011b      	lsls	r3, r3, #4
 802aed6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 802aeda:	68f9      	ldr	r1, [r7, #12]
 802aedc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802aee0:	4313      	orrs	r3, r2
 802aee2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 802aee4:	2300      	movs	r3, #0
}
 802aee6:	4618      	mov	r0, r3
 802aee8:	3714      	adds	r7, #20
 802aeea:	46bd      	mov	sp, r7
 802aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aef0:	4770      	bx	lr

0802aef2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 802aef2:	b480      	push	{r7}
 802aef4:	b085      	sub	sp, #20
 802aef6:	af00      	add	r7, sp, #0
 802aef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802aefa:	687b      	ldr	r3, [r7, #4]
 802aefc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802aefe:	68fb      	ldr	r3, [r7, #12]
 802af00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802af04:	681b      	ldr	r3, [r3, #0]
 802af06:	68fa      	ldr	r2, [r7, #12]
 802af08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802af0c:	f023 0303 	bic.w	r3, r3, #3
 802af10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 802af12:	68fb      	ldr	r3, [r7, #12]
 802af14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802af18:	685b      	ldr	r3, [r3, #4]
 802af1a:	68fa      	ldr	r2, [r7, #12]
 802af1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802af20:	f023 0302 	bic.w	r3, r3, #2
 802af24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802af26:	2300      	movs	r3, #0
}
 802af28:	4618      	mov	r0, r3
 802af2a:	3714      	adds	r7, #20
 802af2c:	46bd      	mov	sp, r7
 802af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af32:	4770      	bx	lr

0802af34 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 802af34:	b480      	push	{r7}
 802af36:	b085      	sub	sp, #20
 802af38:	af00      	add	r7, sp, #0
 802af3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802af3c:	687b      	ldr	r3, [r7, #4]
 802af3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802af40:	68fb      	ldr	r3, [r7, #12]
 802af42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802af46:	681b      	ldr	r3, [r3, #0]
 802af48:	68fa      	ldr	r2, [r7, #12]
 802af4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802af4e:	f023 0303 	bic.w	r3, r3, #3
 802af52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802af54:	68fb      	ldr	r3, [r7, #12]
 802af56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802af5a:	685b      	ldr	r3, [r3, #4]
 802af5c:	68fa      	ldr	r2, [r7, #12]
 802af5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802af62:	f043 0302 	orr.w	r3, r3, #2
 802af66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802af68:	2300      	movs	r3, #0
}
 802af6a:	4618      	mov	r0, r3
 802af6c:	3714      	adds	r7, #20
 802af6e:	46bd      	mov	sp, r7
 802af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af74:	4770      	bx	lr

0802af76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802af76:	b480      	push	{r7}
 802af78:	b085      	sub	sp, #20
 802af7a:	af00      	add	r7, sp, #0
 802af7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802af7e:	687b      	ldr	r3, [r7, #4]
 802af80:	695b      	ldr	r3, [r3, #20]
 802af82:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802af84:	687b      	ldr	r3, [r7, #4]
 802af86:	699b      	ldr	r3, [r3, #24]
 802af88:	68fa      	ldr	r2, [r7, #12]
 802af8a:	4013      	ands	r3, r2
 802af8c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802af8e:	68fb      	ldr	r3, [r7, #12]
}
 802af90:	4618      	mov	r0, r3
 802af92:	3714      	adds	r7, #20
 802af94:	46bd      	mov	sp, r7
 802af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af9a:	4770      	bx	lr

0802af9c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802af9c:	b480      	push	{r7}
 802af9e:	b085      	sub	sp, #20
 802afa0:	af00      	add	r7, sp, #0
 802afa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802afa4:	687b      	ldr	r3, [r7, #4]
 802afa6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802afa8:	68fb      	ldr	r3, [r7, #12]
 802afaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802afae:	699b      	ldr	r3, [r3, #24]
 802afb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802afb2:	68fb      	ldr	r3, [r7, #12]
 802afb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802afb8:	69db      	ldr	r3, [r3, #28]
 802afba:	68ba      	ldr	r2, [r7, #8]
 802afbc:	4013      	ands	r3, r2
 802afbe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 802afc0:	68bb      	ldr	r3, [r7, #8]
 802afc2:	0c1b      	lsrs	r3, r3, #16
}
 802afc4:	4618      	mov	r0, r3
 802afc6:	3714      	adds	r7, #20
 802afc8:	46bd      	mov	sp, r7
 802afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802afce:	4770      	bx	lr

0802afd0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802afd0:	b480      	push	{r7}
 802afd2:	b085      	sub	sp, #20
 802afd4:	af00      	add	r7, sp, #0
 802afd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802afd8:	687b      	ldr	r3, [r7, #4]
 802afda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802afdc:	68fb      	ldr	r3, [r7, #12]
 802afde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802afe2:	699b      	ldr	r3, [r3, #24]
 802afe4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802afe6:	68fb      	ldr	r3, [r7, #12]
 802afe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802afec:	69db      	ldr	r3, [r3, #28]
 802afee:	68ba      	ldr	r2, [r7, #8]
 802aff0:	4013      	ands	r3, r2
 802aff2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 802aff4:	68bb      	ldr	r3, [r7, #8]
 802aff6:	b29b      	uxth	r3, r3
}
 802aff8:	4618      	mov	r0, r3
 802affa:	3714      	adds	r7, #20
 802affc:	46bd      	mov	sp, r7
 802affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b002:	4770      	bx	lr

0802b004 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802b004:	b480      	push	{r7}
 802b006:	b085      	sub	sp, #20
 802b008:	af00      	add	r7, sp, #0
 802b00a:	6078      	str	r0, [r7, #4]
 802b00c:	460b      	mov	r3, r1
 802b00e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b010:	687b      	ldr	r3, [r7, #4]
 802b012:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 802b014:	78fb      	ldrb	r3, [r7, #3]
 802b016:	015a      	lsls	r2, r3, #5
 802b018:	68fb      	ldr	r3, [r7, #12]
 802b01a:	4413      	add	r3, r2
 802b01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b020:	689b      	ldr	r3, [r3, #8]
 802b022:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 802b024:	68fb      	ldr	r3, [r7, #12]
 802b026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802b02a:	695b      	ldr	r3, [r3, #20]
 802b02c:	68ba      	ldr	r2, [r7, #8]
 802b02e:	4013      	ands	r3, r2
 802b030:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802b032:	68bb      	ldr	r3, [r7, #8]
}
 802b034:	4618      	mov	r0, r3
 802b036:	3714      	adds	r7, #20
 802b038:	46bd      	mov	sp, r7
 802b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b03e:	4770      	bx	lr

0802b040 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802b040:	b480      	push	{r7}
 802b042:	b087      	sub	sp, #28
 802b044:	af00      	add	r7, sp, #0
 802b046:	6078      	str	r0, [r7, #4]
 802b048:	460b      	mov	r3, r1
 802b04a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b04c:	687b      	ldr	r3, [r7, #4]
 802b04e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 802b050:	697b      	ldr	r3, [r7, #20]
 802b052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802b056:	691b      	ldr	r3, [r3, #16]
 802b058:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 802b05a:	697b      	ldr	r3, [r7, #20]
 802b05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802b060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b062:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 802b064:	78fb      	ldrb	r3, [r7, #3]
 802b066:	f003 030f 	and.w	r3, r3, #15
 802b06a:	68fa      	ldr	r2, [r7, #12]
 802b06c:	fa22 f303 	lsr.w	r3, r2, r3
 802b070:	01db      	lsls	r3, r3, #7
 802b072:	b2db      	uxtb	r3, r3
 802b074:	693a      	ldr	r2, [r7, #16]
 802b076:	4313      	orrs	r3, r2
 802b078:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 802b07a:	78fb      	ldrb	r3, [r7, #3]
 802b07c:	015a      	lsls	r2, r3, #5
 802b07e:	697b      	ldr	r3, [r7, #20]
 802b080:	4413      	add	r3, r2
 802b082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802b086:	689b      	ldr	r3, [r3, #8]
 802b088:	693a      	ldr	r2, [r7, #16]
 802b08a:	4013      	ands	r3, r2
 802b08c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802b08e:	68bb      	ldr	r3, [r7, #8]
}
 802b090:	4618      	mov	r0, r3
 802b092:	371c      	adds	r7, #28
 802b094:	46bd      	mov	sp, r7
 802b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b09a:	4770      	bx	lr

0802b09c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802b09c:	b480      	push	{r7}
 802b09e:	b083      	sub	sp, #12
 802b0a0:	af00      	add	r7, sp, #0
 802b0a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802b0a4:	687b      	ldr	r3, [r7, #4]
 802b0a6:	695b      	ldr	r3, [r3, #20]
 802b0a8:	f003 0301 	and.w	r3, r3, #1
}
 802b0ac:	4618      	mov	r0, r3
 802b0ae:	370c      	adds	r7, #12
 802b0b0:	46bd      	mov	sp, r7
 802b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0b6:	4770      	bx	lr

0802b0b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 802b0b8:	b480      	push	{r7}
 802b0ba:	b085      	sub	sp, #20
 802b0bc:	af00      	add	r7, sp, #0
 802b0be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b0c0:	687b      	ldr	r3, [r7, #4]
 802b0c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 802b0c4:	68fb      	ldr	r3, [r7, #12]
 802b0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802b0ca:	681b      	ldr	r3, [r3, #0]
 802b0cc:	68fa      	ldr	r2, [r7, #12]
 802b0ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802b0d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802b0d6:	f023 0307 	bic.w	r3, r3, #7
 802b0da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 802b0dc:	68fb      	ldr	r3, [r7, #12]
 802b0de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802b0e2:	685b      	ldr	r3, [r3, #4]
 802b0e4:	68fa      	ldr	r2, [r7, #12]
 802b0e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802b0ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b0ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802b0f0:	2300      	movs	r3, #0
}
 802b0f2:	4618      	mov	r0, r3
 802b0f4:	3714      	adds	r7, #20
 802b0f6:	46bd      	mov	sp, r7
 802b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0fc:	4770      	bx	lr
	...

0802b100 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 802b100:	b480      	push	{r7}
 802b102:	b087      	sub	sp, #28
 802b104:	af00      	add	r7, sp, #0
 802b106:	60f8      	str	r0, [r7, #12]
 802b108:	460b      	mov	r3, r1
 802b10a:	607a      	str	r2, [r7, #4]
 802b10c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b10e:	68fb      	ldr	r3, [r7, #12]
 802b110:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802b112:	68fb      	ldr	r3, [r7, #12]
 802b114:	333c      	adds	r3, #60	; 0x3c
 802b116:	3304      	adds	r3, #4
 802b118:	681b      	ldr	r3, [r3, #0]
 802b11a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 802b11c:	693b      	ldr	r3, [r7, #16]
 802b11e:	4a26      	ldr	r2, [pc, #152]	; (802b1b8 <USB_EP0_OutStart+0xb8>)
 802b120:	4293      	cmp	r3, r2
 802b122:	d90a      	bls.n	802b13a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802b124:	697b      	ldr	r3, [r7, #20]
 802b126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b12a:	681b      	ldr	r3, [r3, #0]
 802b12c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b134:	d101      	bne.n	802b13a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 802b136:	2300      	movs	r3, #0
 802b138:	e037      	b.n	802b1aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 802b13a:	697b      	ldr	r3, [r7, #20]
 802b13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b140:	461a      	mov	r2, r3
 802b142:	2300      	movs	r3, #0
 802b144:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802b146:	697b      	ldr	r3, [r7, #20]
 802b148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b14c:	691b      	ldr	r3, [r3, #16]
 802b14e:	697a      	ldr	r2, [r7, #20]
 802b150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802b154:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802b158:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 802b15a:	697b      	ldr	r3, [r7, #20]
 802b15c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b160:	691b      	ldr	r3, [r3, #16]
 802b162:	697a      	ldr	r2, [r7, #20]
 802b164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802b168:	f043 0318 	orr.w	r3, r3, #24
 802b16c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 802b16e:	697b      	ldr	r3, [r7, #20]
 802b170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b174:	691b      	ldr	r3, [r3, #16]
 802b176:	697a      	ldr	r2, [r7, #20]
 802b178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802b17c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 802b180:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 802b182:	7afb      	ldrb	r3, [r7, #11]
 802b184:	2b01      	cmp	r3, #1
 802b186:	d10f      	bne.n	802b1a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 802b188:	697b      	ldr	r3, [r7, #20]
 802b18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b18e:	461a      	mov	r2, r3
 802b190:	687b      	ldr	r3, [r7, #4]
 802b192:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 802b194:	697b      	ldr	r3, [r7, #20]
 802b196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b19a:	681b      	ldr	r3, [r3, #0]
 802b19c:	697a      	ldr	r2, [r7, #20]
 802b19e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802b1a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 802b1a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802b1a8:	2300      	movs	r3, #0
}
 802b1aa:	4618      	mov	r0, r3
 802b1ac:	371c      	adds	r7, #28
 802b1ae:	46bd      	mov	sp, r7
 802b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1b4:	4770      	bx	lr
 802b1b6:	bf00      	nop
 802b1b8:	4f54300a 	.word	0x4f54300a

0802b1bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802b1bc:	b480      	push	{r7}
 802b1be:	b085      	sub	sp, #20
 802b1c0:	af00      	add	r7, sp, #0
 802b1c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 802b1c4:	2300      	movs	r3, #0
 802b1c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 802b1c8:	68fb      	ldr	r3, [r7, #12]
 802b1ca:	3301      	adds	r3, #1
 802b1cc:	60fb      	str	r3, [r7, #12]
 802b1ce:	68fb      	ldr	r3, [r7, #12]
 802b1d0:	4a13      	ldr	r2, [pc, #76]	; (802b220 <USB_CoreReset+0x64>)
 802b1d2:	4293      	cmp	r3, r2
 802b1d4:	d901      	bls.n	802b1da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802b1d6:	2303      	movs	r3, #3
 802b1d8:	e01b      	b.n	802b212 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802b1da:	687b      	ldr	r3, [r7, #4]
 802b1dc:	691b      	ldr	r3, [r3, #16]
 802b1de:	2b00      	cmp	r3, #0
 802b1e0:	daf2      	bge.n	802b1c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802b1e2:	2300      	movs	r3, #0
 802b1e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802b1e6:	687b      	ldr	r3, [r7, #4]
 802b1e8:	691b      	ldr	r3, [r3, #16]
 802b1ea:	f043 0201 	orr.w	r2, r3, #1
 802b1ee:	687b      	ldr	r3, [r7, #4]
 802b1f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 802b1f2:	68fb      	ldr	r3, [r7, #12]
 802b1f4:	3301      	adds	r3, #1
 802b1f6:	60fb      	str	r3, [r7, #12]
 802b1f8:	68fb      	ldr	r3, [r7, #12]
 802b1fa:	4a09      	ldr	r2, [pc, #36]	; (802b220 <USB_CoreReset+0x64>)
 802b1fc:	4293      	cmp	r3, r2
 802b1fe:	d901      	bls.n	802b204 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802b200:	2303      	movs	r3, #3
 802b202:	e006      	b.n	802b212 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802b204:	687b      	ldr	r3, [r7, #4]
 802b206:	691b      	ldr	r3, [r3, #16]
 802b208:	f003 0301 	and.w	r3, r3, #1
 802b20c:	2b01      	cmp	r3, #1
 802b20e:	d0f0      	beq.n	802b1f2 <USB_CoreReset+0x36>

  return HAL_OK;
 802b210:	2300      	movs	r3, #0
}
 802b212:	4618      	mov	r0, r3
 802b214:	3714      	adds	r7, #20
 802b216:	46bd      	mov	sp, r7
 802b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b21c:	4770      	bx	lr
 802b21e:	bf00      	nop
 802b220:	00030d40 	.word	0x00030d40

0802b224 <_ZN12Adafruit_GFXC1Ess>:


 #define pgm_read_byte(addr) (*(const unsigned char *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 802b224:	b480      	push	{r7}
 802b226:	b083      	sub	sp, #12
 802b228:	af00      	add	r7, sp, #0
 802b22a:	6078      	str	r0, [r7, #4]
 802b22c:	460b      	mov	r3, r1
 802b22e:	807b      	strh	r3, [r7, #2]
 802b230:	4613      	mov	r3, r2
 802b232:	803b      	strh	r3, [r7, #0]
  WIDTH(w), HEIGHT(h)
 802b234:	4a19      	ldr	r2, [pc, #100]	; (802b29c <_ZN12Adafruit_GFXC1Ess+0x78>)
 802b236:	687b      	ldr	r3, [r7, #4]
 802b238:	601a      	str	r2, [r3, #0]
 802b23a:	687b      	ldr	r3, [r7, #4]
 802b23c:	887a      	ldrh	r2, [r7, #2]
 802b23e:	809a      	strh	r2, [r3, #4]
 802b240:	687b      	ldr	r3, [r7, #4]
 802b242:	883a      	ldrh	r2, [r7, #0]
 802b244:	80da      	strh	r2, [r3, #6]
{
  _width    = WIDTH;
 802b246:	687b      	ldr	r3, [r7, #4]
 802b248:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 802b24c:	687b      	ldr	r3, [r7, #4]
 802b24e:	811a      	strh	r2, [r3, #8]
  _height   = HEIGHT;
 802b250:	687b      	ldr	r3, [r7, #4]
 802b252:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 802b256:	687b      	ldr	r3, [r7, #4]
 802b258:	815a      	strh	r2, [r3, #10]
  rotation  = 0;
 802b25a:	687b      	ldr	r3, [r7, #4]
 802b25c:	2200      	movs	r2, #0
 802b25e:	755a      	strb	r2, [r3, #21]
  cursor_y  = cursor_x    = 0;
 802b260:	687b      	ldr	r3, [r7, #4]
 802b262:	2200      	movs	r2, #0
 802b264:	819a      	strh	r2, [r3, #12]
 802b266:	687b      	ldr	r3, [r7, #4]
 802b268:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b26c:	687b      	ldr	r3, [r7, #4]
 802b26e:	81da      	strh	r2, [r3, #14]
  textsize  = 1;
 802b270:	687b      	ldr	r3, [r7, #4]
 802b272:	2201      	movs	r2, #1
 802b274:	751a      	strb	r2, [r3, #20]
  textcolor = textbgcolor = 0xFFFF;
 802b276:	687b      	ldr	r3, [r7, #4]
 802b278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802b27c:	825a      	strh	r2, [r3, #18]
 802b27e:	687b      	ldr	r3, [r7, #4]
 802b280:	8a5a      	ldrh	r2, [r3, #18]
 802b282:	687b      	ldr	r3, [r7, #4]
 802b284:	821a      	strh	r2, [r3, #16]
  wrap      = true;
 802b286:	687b      	ldr	r3, [r7, #4]
 802b288:	2201      	movs	r2, #1
 802b28a:	759a      	strb	r2, [r3, #22]
}
 802b28c:	687b      	ldr	r3, [r7, #4]
 802b28e:	4618      	mov	r0, r3
 802b290:	370c      	adds	r7, #12
 802b292:	46bd      	mov	sp, r7
 802b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b298:	4770      	bx	lr
 802b29a:	bf00      	nop
 802b29c:	0803b690 	.word	0x0803b690

0802b2a0 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 802b2a0:	b590      	push	{r4, r7, lr}
 802b2a2:	b08b      	sub	sp, #44	; 0x2c
 802b2a4:	af00      	add	r7, sp, #0
 802b2a6:	60f8      	str	r0, [r7, #12]
 802b2a8:	4608      	mov	r0, r1
 802b2aa:	4611      	mov	r1, r2
 802b2ac:	461a      	mov	r2, r3
 802b2ae:	4603      	mov	r3, r0
 802b2b0:	817b      	strh	r3, [r7, #10]
 802b2b2:	460b      	mov	r3, r1
 802b2b4:	813b      	strh	r3, [r7, #8]
 802b2b6:	4613      	mov	r3, r2
 802b2b8:	80fb      	strh	r3, [r7, #6]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 802b2ba:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 802b2be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b2c2:	1ad3      	subs	r3, r2, r3
 802b2c4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 802b2c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 802b2cc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 802b2d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 802b2d4:	1acb      	subs	r3, r1, r3
 802b2d6:	2b00      	cmp	r3, #0
 802b2d8:	bfb8      	it	lt
 802b2da:	425b      	neglt	r3, r3
 802b2dc:	429a      	cmp	r2, r3
 802b2de:	bfcc      	ite	gt
 802b2e0:	2301      	movgt	r3, #1
 802b2e2:	2300      	movle	r3, #0
 802b2e4:	b2db      	uxtb	r3, r3
 802b2e6:	847b      	strh	r3, [r7, #34]	; 0x22
  int16_t dx, dy;
  int16_t err;
  int16_t ystep;

  if (steep) {
 802b2e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802b2ec:	2b00      	cmp	r3, #0
 802b2ee:	d00b      	beq.n	802b308 <_ZN12Adafruit_GFX8drawLineEsssst+0x68>
    swap(x0, y0);
 802b2f0:	897b      	ldrh	r3, [r7, #10]
 802b2f2:	843b      	strh	r3, [r7, #32]
 802b2f4:	893b      	ldrh	r3, [r7, #8]
 802b2f6:	817b      	strh	r3, [r7, #10]
 802b2f8:	8c3b      	ldrh	r3, [r7, #32]
 802b2fa:	813b      	strh	r3, [r7, #8]
    swap(x1, y1);
 802b2fc:	88fb      	ldrh	r3, [r7, #6]
 802b2fe:	83fb      	strh	r3, [r7, #30]
 802b300:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 802b302:	80fb      	strh	r3, [r7, #6]
 802b304:	8bfb      	ldrh	r3, [r7, #30]
 802b306:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  if (x0 > x1) {
 802b308:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b30c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b310:	429a      	cmp	r2, r3
 802b312:	dd0b      	ble.n	802b32c <_ZN12Adafruit_GFX8drawLineEsssst+0x8c>
    swap(x0, x1);
 802b314:	897b      	ldrh	r3, [r7, #10]
 802b316:	83bb      	strh	r3, [r7, #28]
 802b318:	88fb      	ldrh	r3, [r7, #6]
 802b31a:	817b      	strh	r3, [r7, #10]
 802b31c:	8bbb      	ldrh	r3, [r7, #28]
 802b31e:	80fb      	strh	r3, [r7, #6]
    swap(y0, y1);
 802b320:	893b      	ldrh	r3, [r7, #8]
 802b322:	837b      	strh	r3, [r7, #26]
 802b324:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 802b326:	813b      	strh	r3, [r7, #8]
 802b328:	8b7b      	ldrh	r3, [r7, #26]
 802b32a:	873b      	strh	r3, [r7, #56]	; 0x38
  }


  dx = x1 - x0;
 802b32c:	88fa      	ldrh	r2, [r7, #6]
 802b32e:	897b      	ldrh	r3, [r7, #10]
 802b330:	1ad3      	subs	r3, r2, r3
 802b332:	b29b      	uxth	r3, r3
 802b334:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 802b336:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 802b33a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b33e:	1ad3      	subs	r3, r2, r3
 802b340:	2b00      	cmp	r3, #0
 802b342:	bfb8      	it	lt
 802b344:	425b      	neglt	r3, r3
 802b346:	82fb      	strh	r3, [r7, #22]

  err = dx / 2;
 802b348:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 802b34c:	0fda      	lsrs	r2, r3, #31
 802b34e:	4413      	add	r3, r2
 802b350:	105b      	asrs	r3, r3, #1
 802b352:	84fb      	strh	r3, [r7, #38]	; 0x26
  

  if (y0 < y1) {
 802b354:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b358:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 802b35c:	429a      	cmp	r2, r3
 802b35e:	da02      	bge.n	802b366 <_ZN12Adafruit_GFX8drawLineEsssst+0xc6>
    ystep = 1;
 802b360:	2301      	movs	r3, #1
 802b362:	84bb      	strh	r3, [r7, #36]	; 0x24
 802b364:	e035      	b.n	802b3d2 <_ZN12Adafruit_GFX8drawLineEsssst+0x132>
  } else {
    ystep = -1;
 802b366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b36a:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0<=x1; x0++) {
 802b36c:	e031      	b.n	802b3d2 <_ZN12Adafruit_GFX8drawLineEsssst+0x132>
    if (steep) {
 802b36e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802b372:	2b00      	cmp	r3, #0
 802b374:	d00a      	beq.n	802b38c <_ZN12Adafruit_GFX8drawLineEsssst+0xec>
      drawPixel(y0, x0, color);
 802b376:	68fb      	ldr	r3, [r7, #12]
 802b378:	681b      	ldr	r3, [r3, #0]
 802b37a:	681c      	ldr	r4, [r3, #0]
 802b37c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802b37e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b382:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 802b386:	68f8      	ldr	r0, [r7, #12]
 802b388:	47a0      	blx	r4
 802b38a:	e009      	b.n	802b3a0 <_ZN12Adafruit_GFX8drawLineEsssst+0x100>
    } else {
      drawPixel(x0, y0, color);
 802b38c:	68fb      	ldr	r3, [r7, #12]
 802b38e:	681b      	ldr	r3, [r3, #0]
 802b390:	681c      	ldr	r4, [r3, #0]
 802b392:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802b394:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b398:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b39c:	68f8      	ldr	r0, [r7, #12]
 802b39e:	47a0      	blx	r4
    }
    err -= dy;
 802b3a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802b3a2:	8afb      	ldrh	r3, [r7, #22]
 802b3a4:	1ad3      	subs	r3, r2, r3
 802b3a6:	b29b      	uxth	r3, r3
 802b3a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 802b3aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 802b3ae:	2b00      	cmp	r3, #0
 802b3b0:	da09      	bge.n	802b3c6 <_ZN12Adafruit_GFX8drawLineEsssst+0x126>
      y0 += ystep;
 802b3b2:	893a      	ldrh	r2, [r7, #8]
 802b3b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802b3b6:	4413      	add	r3, r2
 802b3b8:	b29b      	uxth	r3, r3
 802b3ba:	813b      	strh	r3, [r7, #8]
      err += dx;
 802b3bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802b3be:	8b3b      	ldrh	r3, [r7, #24]
 802b3c0:	4413      	add	r3, r2
 802b3c2:	b29b      	uxth	r3, r3
 802b3c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0<=x1; x0++) {
 802b3c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 802b3ca:	b29b      	uxth	r3, r3
 802b3cc:	3301      	adds	r3, #1
 802b3ce:	b29b      	uxth	r3, r3
 802b3d0:	817b      	strh	r3, [r7, #10]
 802b3d2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b3d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b3da:	429a      	cmp	r2, r3
 802b3dc:	ddc7      	ble.n	802b36e <_ZN12Adafruit_GFX8drawLineEsssst+0xce>
    }
  }
}
 802b3de:	bf00      	nop
 802b3e0:	bf00      	nop
 802b3e2:	372c      	adds	r7, #44	; 0x2c
 802b3e4:	46bd      	mov	sp, r7
 802b3e6:	bd90      	pop	{r4, r7, pc}

0802b3e8 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 802b3e8:	b590      	push	{r4, r7, lr}
 802b3ea:	b087      	sub	sp, #28
 802b3ec:	af02      	add	r7, sp, #8
 802b3ee:	60f8      	str	r0, [r7, #12]
 802b3f0:	4608      	mov	r0, r1
 802b3f2:	4611      	mov	r1, r2
 802b3f4:	461a      	mov	r2, r3
 802b3f6:	4603      	mov	r3, r0
 802b3f8:	817b      	strh	r3, [r7, #10]
 802b3fa:	460b      	mov	r3, r1
 802b3fc:	813b      	strh	r3, [r7, #8]
 802b3fe:	4613      	mov	r3, r2
 802b400:	80fb      	strh	r3, [r7, #6]
  drawFastHLine(x, y, w, color);
 802b402:	68fb      	ldr	r3, [r7, #12]
 802b404:	681b      	ldr	r3, [r3, #0]
 802b406:	330c      	adds	r3, #12
 802b408:	681c      	ldr	r4, [r3, #0]
 802b40a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 802b40e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b412:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802b418:	9300      	str	r3, [sp, #0]
 802b41a:	4603      	mov	r3, r0
 802b41c:	68f8      	ldr	r0, [r7, #12]
 802b41e:	47a0      	blx	r4
  drawFastHLine(x, y+h-1, w, color);
 802b420:	68fb      	ldr	r3, [r7, #12]
 802b422:	681b      	ldr	r3, [r3, #0]
 802b424:	330c      	adds	r3, #12
 802b426:	681c      	ldr	r4, [r3, #0]
 802b428:	893a      	ldrh	r2, [r7, #8]
 802b42a:	8c3b      	ldrh	r3, [r7, #32]
 802b42c:	4413      	add	r3, r2
 802b42e:	b29b      	uxth	r3, r3
 802b430:	3b01      	subs	r3, #1
 802b432:	b29b      	uxth	r3, r3
 802b434:	b21a      	sxth	r2, r3
 802b436:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 802b43a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b43e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802b440:	9300      	str	r3, [sp, #0]
 802b442:	4603      	mov	r3, r0
 802b444:	68f8      	ldr	r0, [r7, #12]
 802b446:	47a0      	blx	r4
  drawFastVLine(x, y, h, color);
 802b448:	68fb      	ldr	r3, [r7, #12]
 802b44a:	681b      	ldr	r3, [r3, #0]
 802b44c:	3308      	adds	r3, #8
 802b44e:	681c      	ldr	r4, [r3, #0]
 802b450:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 802b454:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b458:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b45c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802b45e:	9300      	str	r3, [sp, #0]
 802b460:	4603      	mov	r3, r0
 802b462:	68f8      	ldr	r0, [r7, #12]
 802b464:	47a0      	blx	r4
  drawFastVLine(x+w-1, y, h, color);
 802b466:	68fb      	ldr	r3, [r7, #12]
 802b468:	681b      	ldr	r3, [r3, #0]
 802b46a:	3308      	adds	r3, #8
 802b46c:	681c      	ldr	r4, [r3, #0]
 802b46e:	897a      	ldrh	r2, [r7, #10]
 802b470:	88fb      	ldrh	r3, [r7, #6]
 802b472:	4413      	add	r3, r2
 802b474:	b29b      	uxth	r3, r3
 802b476:	3b01      	subs	r3, #1
 802b478:	b29b      	uxth	r3, r3
 802b47a:	b219      	sxth	r1, r3
 802b47c:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 802b480:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802b486:	9300      	str	r3, [sp, #0]
 802b488:	4603      	mov	r3, r0
 802b48a:	68f8      	ldr	r0, [r7, #12]
 802b48c:	47a0      	blx	r4
}
 802b48e:	bf00      	nop
 802b490:	3714      	adds	r7, #20
 802b492:	46bd      	mov	sp, r7
 802b494:	bd90      	pop	{r4, r7, pc}

0802b496 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 802b496:	b5b0      	push	{r4, r5, r7, lr}
 802b498:	b086      	sub	sp, #24
 802b49a:	af02      	add	r7, sp, #8
 802b49c:	60f8      	str	r0, [r7, #12]
 802b49e:	4608      	mov	r0, r1
 802b4a0:	4611      	mov	r1, r2
 802b4a2:	461a      	mov	r2, r3
 802b4a4:	4603      	mov	r3, r0
 802b4a6:	817b      	strh	r3, [r7, #10]
 802b4a8:	460b      	mov	r3, r1
 802b4aa:	813b      	strh	r3, [r7, #8]
 802b4ac:	4613      	mov	r3, r2
 802b4ae:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 802b4b0:	68fb      	ldr	r3, [r7, #12]
 802b4b2:	681b      	ldr	r3, [r3, #0]
 802b4b4:	3304      	adds	r3, #4
 802b4b6:	681c      	ldr	r4, [r3, #0]
 802b4b8:	893a      	ldrh	r2, [r7, #8]
 802b4ba:	88fb      	ldrh	r3, [r7, #6]
 802b4bc:	4413      	add	r3, r2
 802b4be:	b29b      	uxth	r3, r3
 802b4c0:	3b01      	subs	r3, #1
 802b4c2:	b29b      	uxth	r3, r3
 802b4c4:	b21b      	sxth	r3, r3
 802b4c6:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 802b4ca:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 802b4ce:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b4d2:	8c3a      	ldrh	r2, [r7, #32]
 802b4d4:	9201      	str	r2, [sp, #4]
 802b4d6:	9300      	str	r3, [sp, #0]
 802b4d8:	462b      	mov	r3, r5
 802b4da:	4602      	mov	r2, r0
 802b4dc:	68f8      	ldr	r0, [r7, #12]
 802b4de:	47a0      	blx	r4
}
 802b4e0:	bf00      	nop
 802b4e2:	3710      	adds	r7, #16
 802b4e4:	46bd      	mov	sp, r7
 802b4e6:	bdb0      	pop	{r4, r5, r7, pc}

0802b4e8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 802b4e8:	b590      	push	{r4, r7, lr}
 802b4ea:	b087      	sub	sp, #28
 802b4ec:	af02      	add	r7, sp, #8
 802b4ee:	60f8      	str	r0, [r7, #12]
 802b4f0:	4608      	mov	r0, r1
 802b4f2:	4611      	mov	r1, r2
 802b4f4:	461a      	mov	r2, r3
 802b4f6:	4603      	mov	r3, r0
 802b4f8:	817b      	strh	r3, [r7, #10]
 802b4fa:	460b      	mov	r3, r1
 802b4fc:	813b      	strh	r3, [r7, #8]
 802b4fe:	4613      	mov	r3, r2
 802b500:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 802b502:	68fb      	ldr	r3, [r7, #12]
 802b504:	681b      	ldr	r3, [r3, #0]
 802b506:	3304      	adds	r3, #4
 802b508:	681c      	ldr	r4, [r3, #0]
 802b50a:	897a      	ldrh	r2, [r7, #10]
 802b50c:	88fb      	ldrh	r3, [r7, #6]
 802b50e:	4413      	add	r3, r2
 802b510:	b29b      	uxth	r3, r3
 802b512:	3b01      	subs	r3, #1
 802b514:	b29b      	uxth	r3, r3
 802b516:	b218      	sxth	r0, r3
 802b518:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b51c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b520:	8c3b      	ldrh	r3, [r7, #32]
 802b522:	9301      	str	r3, [sp, #4]
 802b524:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b528:	9300      	str	r3, [sp, #0]
 802b52a:	4603      	mov	r3, r0
 802b52c:	68f8      	ldr	r0, [r7, #12]
 802b52e:	47a0      	blx	r4
}
 802b530:	bf00      	nop
 802b532:	3714      	adds	r7, #20
 802b534:	46bd      	mov	sp, r7
 802b536:	bd90      	pop	{r4, r7, pc}

0802b538 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 802b538:	b590      	push	{r4, r7, lr}
 802b53a:	b089      	sub	sp, #36	; 0x24
 802b53c:	af02      	add	r7, sp, #8
 802b53e:	60f8      	str	r0, [r7, #12]
 802b540:	4608      	mov	r0, r1
 802b542:	4611      	mov	r1, r2
 802b544:	461a      	mov	r2, r3
 802b546:	4603      	mov	r3, r0
 802b548:	817b      	strh	r3, [r7, #10]
 802b54a:	460b      	mov	r3, r1
 802b54c:	813b      	strh	r3, [r7, #8]
 802b54e:	4613      	mov	r3, r2
 802b550:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 802b552:	897b      	ldrh	r3, [r7, #10]
 802b554:	82fb      	strh	r3, [r7, #22]
 802b556:	e014      	b.n	802b582 <_ZN12Adafruit_GFX8fillRectEsssst+0x4a>
    drawFastVLine(i, y, h, color);
 802b558:	68fb      	ldr	r3, [r7, #12]
 802b55a:	681b      	ldr	r3, [r3, #0]
 802b55c:	3308      	adds	r3, #8
 802b55e:	681c      	ldr	r4, [r3, #0]
 802b560:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 802b564:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b568:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 802b56c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802b56e:	9300      	str	r3, [sp, #0]
 802b570:	4603      	mov	r3, r0
 802b572:	68f8      	ldr	r0, [r7, #12]
 802b574:	47a0      	blx	r4
  for (int16_t i=x; i<x+w; i++) {
 802b576:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802b57a:	b29b      	uxth	r3, r3
 802b57c:	3301      	adds	r3, #1
 802b57e:	b29b      	uxth	r3, r3
 802b580:	82fb      	strh	r3, [r7, #22]
 802b582:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802b586:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b58a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b58e:	440b      	add	r3, r1
 802b590:	429a      	cmp	r2, r3
 802b592:	dbe1      	blt.n	802b558 <_ZN12Adafruit_GFX8fillRectEsssst+0x20>
  }
}
 802b594:	bf00      	nop
 802b596:	bf00      	nop
 802b598:	371c      	adds	r7, #28
 802b59a:	46bd      	mov	sp, r7
 802b59c:	bd90      	pop	{r4, r7, pc}

0802b59e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 802b59e:	b590      	push	{r4, r7, lr}
 802b5a0:	b085      	sub	sp, #20
 802b5a2:	af02      	add	r7, sp, #8
 802b5a4:	6078      	str	r0, [r7, #4]
 802b5a6:	460b      	mov	r3, r1
 802b5a8:	807b      	strh	r3, [r7, #2]
  fillRect(0, 0, _width, _height, color);
 802b5aa:	687b      	ldr	r3, [r7, #4]
 802b5ac:	681b      	ldr	r3, [r3, #0]
 802b5ae:	3314      	adds	r3, #20
 802b5b0:	681c      	ldr	r4, [r3, #0]
 802b5b2:	687b      	ldr	r3, [r7, #4]
 802b5b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b5b8:	687b      	ldr	r3, [r7, #4]
 802b5ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 802b5be:	887a      	ldrh	r2, [r7, #2]
 802b5c0:	9201      	str	r2, [sp, #4]
 802b5c2:	9300      	str	r3, [sp, #0]
 802b5c4:	460b      	mov	r3, r1
 802b5c6:	2200      	movs	r2, #0
 802b5c8:	2100      	movs	r1, #0
 802b5ca:	6878      	ldr	r0, [r7, #4]
 802b5cc:	47a0      	blx	r4
}
 802b5ce:	bf00      	nop
 802b5d0:	370c      	adds	r7, #12
 802b5d2:	46bd      	mov	sp, r7
 802b5d4:	bd90      	pop	{r4, r7, pc}

0802b5d6 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt>:
//			...
//	[7][7][7][7][7][7][7]		[7]
void Adafruit_GFX::drawBitBuf( int16_t x, int16_t y,
    const uint8_t *bitBuf, int16_t w, int16_t h,
    uint16_t color, uint16_t bg )
{
 802b5d6:	b590      	push	{r4, r7, lr}
 802b5d8:	b087      	sub	sp, #28
 802b5da:	af00      	add	r7, sp, #0
 802b5dc:	60f8      	str	r0, [r7, #12]
 802b5de:	607b      	str	r3, [r7, #4]
 802b5e0:	460b      	mov	r3, r1
 802b5e2:	817b      	strh	r3, [r7, #10]
 802b5e4:	4613      	mov	r3, r2
 802b5e6:	813b      	strh	r3, [r7, #8]

    int16_t i, j;
    int16_t byteWidth = ( w + 7 ) / 8;
 802b5e8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 802b5ec:	3307      	adds	r3, #7
 802b5ee:	2b00      	cmp	r3, #0
 802b5f0:	da00      	bge.n	802b5f4 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0x1e>
 802b5f2:	3307      	adds	r3, #7
 802b5f4:	10db      	asrs	r3, r3, #3
 802b5f6:	827b      	strh	r3, [r7, #18]

    for ( j = 0; j < h; j++ )
 802b5f8:	2300      	movs	r3, #0
 802b5fa:	82bb      	strh	r3, [r7, #20]
 802b5fc:	e058      	b.n	802b6b0 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0xda>
    {
        for ( i = 0; i < w; i++ )
 802b5fe:	2300      	movs	r3, #0
 802b600:	82fb      	strh	r3, [r7, #22]
 802b602:	e049      	b.n	802b698 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0xc2>
        {
//            if ( pgm_read_byte( bitBuf + j * byteWidth + i / 8 ) & ( 128 >> ( i & 7 ) ) )
            if ( ( pgm_read_byte( bitBuf + w * (j/8) + i ) >> ( j % 8 ) ) & 0x1 )
 802b604:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 802b608:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802b60c:	2b00      	cmp	r3, #0
 802b60e:	da00      	bge.n	802b612 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0x3c>
 802b610:	3307      	adds	r3, #7
 802b612:	10db      	asrs	r3, r3, #3
 802b614:	b21b      	sxth	r3, r3
 802b616:	fb02 f303 	mul.w	r3, r2, r3
 802b61a:	461a      	mov	r2, r3
 802b61c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802b620:	4413      	add	r3, r2
 802b622:	687a      	ldr	r2, [r7, #4]
 802b624:	4413      	add	r3, r2
 802b626:	781b      	ldrb	r3, [r3, #0]
 802b628:	4619      	mov	r1, r3
 802b62a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802b62e:	425a      	negs	r2, r3
 802b630:	f003 0307 	and.w	r3, r3, #7
 802b634:	f002 0207 	and.w	r2, r2, #7
 802b638:	bf58      	it	pl
 802b63a:	4253      	negpl	r3, r2
 802b63c:	b21b      	sxth	r3, r3
 802b63e:	fa41 f303 	asr.w	r3, r1, r3
 802b642:	f003 0301 	and.w	r3, r3, #1
 802b646:	2b00      	cmp	r3, #0
 802b648:	d010      	beq.n	802b66c <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0x96>
            {
                drawPixel( x + i, y + j, color );
 802b64a:	68fb      	ldr	r3, [r7, #12]
 802b64c:	681b      	ldr	r3, [r3, #0]
 802b64e:	681c      	ldr	r4, [r3, #0]
 802b650:	897a      	ldrh	r2, [r7, #10]
 802b652:	8afb      	ldrh	r3, [r7, #22]
 802b654:	4413      	add	r3, r2
 802b656:	b29b      	uxth	r3, r3
 802b658:	b219      	sxth	r1, r3
 802b65a:	893a      	ldrh	r2, [r7, #8]
 802b65c:	8abb      	ldrh	r3, [r7, #20]
 802b65e:	4413      	add	r3, r2
 802b660:	b29b      	uxth	r3, r3
 802b662:	b21a      	sxth	r2, r3
 802b664:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802b666:	68f8      	ldr	r0, [r7, #12]
 802b668:	47a0      	blx	r4
 802b66a:	e00f      	b.n	802b68c <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0xb6>
            }
            else
            {
                drawPixel( x + i, y + j, bg );
 802b66c:	68fb      	ldr	r3, [r7, #12]
 802b66e:	681b      	ldr	r3, [r3, #0]
 802b670:	681c      	ldr	r4, [r3, #0]
 802b672:	897a      	ldrh	r2, [r7, #10]
 802b674:	8afb      	ldrh	r3, [r7, #22]
 802b676:	4413      	add	r3, r2
 802b678:	b29b      	uxth	r3, r3
 802b67a:	b219      	sxth	r1, r3
 802b67c:	893a      	ldrh	r2, [r7, #8]
 802b67e:	8abb      	ldrh	r3, [r7, #20]
 802b680:	4413      	add	r3, r2
 802b682:	b29b      	uxth	r3, r3
 802b684:	b21a      	sxth	r2, r3
 802b686:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802b688:	68f8      	ldr	r0, [r7, #12]
 802b68a:	47a0      	blx	r4
        for ( i = 0; i < w; i++ )
 802b68c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802b690:	b29b      	uxth	r3, r3
 802b692:	3301      	adds	r3, #1
 802b694:	b29b      	uxth	r3, r3
 802b696:	82fb      	strh	r3, [r7, #22]
 802b698:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802b69c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 802b6a0:	429a      	cmp	r2, r3
 802b6a2:	dbaf      	blt.n	802b604 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0x2e>
    for ( j = 0; j < h; j++ )
 802b6a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802b6a8:	b29b      	uxth	r3, r3
 802b6aa:	3301      	adds	r3, #1
 802b6ac:	b29b      	uxth	r3, r3
 802b6ae:	82bb      	strh	r3, [r7, #20]
 802b6b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802b6b4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 802b6b8:	429a      	cmp	r2, r3
 802b6ba:	dba0      	blt.n	802b5fe <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0x28>
            }
        }
    }
}
 802b6bc:	bf00      	nop
 802b6be:	bf00      	nop
 802b6c0:	371c      	adds	r7, #28
 802b6c2:	46bd      	mov	sp, r7
 802b6c4:	bd90      	pop	{r4, r7, pc}

0802b6c6 <_ZN12Adafruit_GFX9setCursorEss>:
//      line >>= 1;
//    }
//  }
//}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
 802b6c6:	b480      	push	{r7}
 802b6c8:	b083      	sub	sp, #12
 802b6ca:	af00      	add	r7, sp, #0
 802b6cc:	6078      	str	r0, [r7, #4]
 802b6ce:	460b      	mov	r3, r1
 802b6d0:	807b      	strh	r3, [r7, #2]
 802b6d2:	4613      	mov	r3, r2
 802b6d4:	803b      	strh	r3, [r7, #0]
  cursor_x = x;
 802b6d6:	687b      	ldr	r3, [r7, #4]
 802b6d8:	887a      	ldrh	r2, [r7, #2]
 802b6da:	819a      	strh	r2, [r3, #12]
  cursor_y = y;
 802b6dc:	687b      	ldr	r3, [r7, #4]
 802b6de:	883a      	ldrh	r2, [r7, #0]
 802b6e0:	81da      	strh	r2, [r3, #14]
}
 802b6e2:	bf00      	nop
 802b6e4:	370c      	adds	r7, #12
 802b6e6:	46bd      	mov	sp, r7
 802b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6ec:	4770      	bx	lr

0802b6ee <_ZN12Adafruit_GFX9getCursorEPsS0_>:

void Adafruit_GFX::getCursor( int16_t *pX, int16_t *pY ) {
 802b6ee:	b480      	push	{r7}
 802b6f0:	b085      	sub	sp, #20
 802b6f2:	af00      	add	r7, sp, #0
 802b6f4:	60f8      	str	r0, [r7, #12]
 802b6f6:	60b9      	str	r1, [r7, #8]
 802b6f8:	607a      	str	r2, [r7, #4]
    if( pX )     *pX = cursor_x;
 802b6fa:	68bb      	ldr	r3, [r7, #8]
 802b6fc:	2b00      	cmp	r3, #0
 802b6fe:	d004      	beq.n	802b70a <_ZN12Adafruit_GFX9getCursorEPsS0_+0x1c>
 802b700:	68fb      	ldr	r3, [r7, #12]
 802b702:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b706:	68bb      	ldr	r3, [r7, #8]
 802b708:	801a      	strh	r2, [r3, #0]
    if( pY )     *pY = cursor_y;
 802b70a:	687b      	ldr	r3, [r7, #4]
 802b70c:	2b00      	cmp	r3, #0
 802b70e:	d004      	beq.n	802b71a <_ZN12Adafruit_GFX9getCursorEPsS0_+0x2c>
 802b710:	68fb      	ldr	r3, [r7, #12]
 802b712:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 802b716:	687b      	ldr	r3, [r7, #4]
 802b718:	801a      	strh	r2, [r3, #0]
}
 802b71a:	bf00      	nop
 802b71c:	3714      	adds	r7, #20
 802b71e:	46bd      	mov	sp, r7
 802b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b724:	4770      	bx	lr

0802b726 <_ZNK12Adafruit_GFX11getRotationEv>:

void Adafruit_GFX::setTextWrap(bool w) {
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) const {
 802b726:	b480      	push	{r7}
 802b728:	b083      	sub	sp, #12
 802b72a:	af00      	add	r7, sp, #0
 802b72c:	6078      	str	r0, [r7, #4]
  return rotation;
 802b72e:	687b      	ldr	r3, [r7, #4]
 802b730:	7d5b      	ldrb	r3, [r3, #21]
}
 802b732:	4618      	mov	r0, r3
 802b734:	370c      	adds	r7, #12
 802b736:	46bd      	mov	sp, r7
 802b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b73c:	4770      	bx	lr

0802b73e <_ZNK12Adafruit_GFX5widthEv>:
    break;
  }
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
 802b73e:	b480      	push	{r7}
 802b740:	b083      	sub	sp, #12
 802b742:	af00      	add	r7, sp, #0
 802b744:	6078      	str	r0, [r7, #4]
  return _width;
 802b746:	687b      	ldr	r3, [r7, #4]
 802b748:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 802b74c:	4618      	mov	r0, r3
 802b74e:	370c      	adds	r7, #12
 802b750:	46bd      	mov	sp, r7
 802b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b756:	4770      	bx	lr

0802b758 <_ZNK12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) const {
 802b758:	b480      	push	{r7}
 802b75a:	b083      	sub	sp, #12
 802b75c:	af00      	add	r7, sp, #0
 802b75e:	6078      	str	r0, [r7, #4]
  return _height;
 802b760:	687b      	ldr	r3, [r7, #4]
 802b762:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 802b766:	4618      	mov	r0, r3
 802b768:	370c      	adds	r7, #12
 802b76a:	46bd      	mov	sp, r7
 802b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b770:	4770      	bx	lr

0802b772 <_ZN16Adafruit_SSD13065debugEi>:
  virtual void drawPixel(int16_t x, int16_t y, uint16_t color);

  virtual void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
  virtual void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);

  void debug( int bEnable ){ dbg = bEnable; }
 802b772:	b480      	push	{r7}
 802b774:	b083      	sub	sp, #12
 802b776:	af00      	add	r7, sp, #0
 802b778:	6078      	str	r0, [r7, #4]
 802b77a:	6039      	str	r1, [r7, #0]
 802b77c:	683b      	ldr	r3, [r7, #0]
 802b77e:	b25a      	sxtb	r2, r3
 802b780:	687b      	ldr	r3, [r7, #4]
 802b782:	779a      	strb	r2, [r3, #30]
 802b784:	bf00      	nop
 802b786:	370c      	adds	r7, #12
 802b788:	46bd      	mov	sp, r7
 802b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b78e:	4770      	bx	lr

0802b790 <_ZN16Adafruit_SSD13069drawPixelEsst>:

#endif

// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel( int16_t x, int16_t y, uint16_t color )
{
 802b790:	b580      	push	{r7, lr}
 802b792:	b086      	sub	sp, #24
 802b794:	af00      	add	r7, sp, #0
 802b796:	60f8      	str	r0, [r7, #12]
 802b798:	4608      	mov	r0, r1
 802b79a:	4611      	mov	r1, r2
 802b79c:	461a      	mov	r2, r3
 802b79e:	4603      	mov	r3, r0
 802b7a0:	817b      	strh	r3, [r7, #10]
 802b7a2:	460b      	mov	r3, r1
 802b7a4:	813b      	strh	r3, [r7, #8]
 802b7a6:	4613      	mov	r3, r2
 802b7a8:	80fb      	strh	r3, [r7, #6]
    if ( ( x < 0 ) || ( x >= width() ) || ( y < 0 ) || ( y >= height() ) )
 802b7aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 802b7ae:	2b00      	cmp	r3, #0
 802b7b0:	db17      	blt.n	802b7e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x52>
 802b7b2:	68fb      	ldr	r3, [r7, #12]
 802b7b4:	4618      	mov	r0, r3
 802b7b6:	f7ff ffc2 	bl	802b73e <_ZNK12Adafruit_GFX5widthEv>
 802b7ba:	4603      	mov	r3, r0
 802b7bc:	461a      	mov	r2, r3
 802b7be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 802b7c2:	4293      	cmp	r3, r2
 802b7c4:	da0d      	bge.n	802b7e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x52>
 802b7c6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b7ca:	2b00      	cmp	r3, #0
 802b7cc:	db09      	blt.n	802b7e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x52>
 802b7ce:	68fb      	ldr	r3, [r7, #12]
 802b7d0:	4618      	mov	r0, r3
 802b7d2:	f7ff ffc1 	bl	802b758 <_ZNK12Adafruit_GFX6heightEv>
 802b7d6:	4603      	mov	r3, r0
 802b7d8:	461a      	mov	r2, r3
 802b7da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b7de:	4293      	cmp	r3, r2
 802b7e0:	db01      	blt.n	802b7e6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x56>
 802b7e2:	2301      	movs	r3, #1
 802b7e4:	e000      	b.n	802b7e8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x58>
 802b7e6:	2300      	movs	r3, #0
 802b7e8:	2b00      	cmp	r3, #0
 802b7ea:	f040 80b3 	bne.w	802b954 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c4>
        return;

    // check rotation, move pixel around if necessary
    switch ( getRotation() )
 802b7ee:	68fb      	ldr	r3, [r7, #12]
 802b7f0:	4618      	mov	r0, r3
 802b7f2:	f7ff ff98 	bl	802b726 <_ZNK12Adafruit_GFX11getRotationEv>
 802b7f6:	4603      	mov	r3, r0
 802b7f8:	2b03      	cmp	r3, #3
 802b7fa:	d02c      	beq.n	802b856 <_ZN16Adafruit_SSD13069drawPixelEsst+0xc6>
 802b7fc:	2b03      	cmp	r3, #3
 802b7fe:	dc3b      	bgt.n	802b878 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
 802b800:	2b01      	cmp	r3, #1
 802b802:	d002      	beq.n	802b80a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7a>
 802b804:	2b02      	cmp	r3, #2
 802b806:	d011      	beq.n	802b82c <_ZN16Adafruit_SSD13069drawPixelEsst+0x9c>
 802b808:	e036      	b.n	802b878 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
    {
    case 1:
        ssd1306_swap( x, y );
 802b80a:	897b      	ldrh	r3, [r7, #10]
 802b80c:	82bb      	strh	r3, [r7, #20]
 802b80e:	893b      	ldrh	r3, [r7, #8]
 802b810:	817b      	strh	r3, [r7, #10]
 802b812:	8abb      	ldrh	r3, [r7, #20]
 802b814:	813b      	strh	r3, [r7, #8]
        x = WIDTH - x - 1;
 802b816:	68fb      	ldr	r3, [r7, #12]
 802b818:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802b81c:	b29a      	uxth	r2, r3
 802b81e:	897b      	ldrh	r3, [r7, #10]
 802b820:	1ad3      	subs	r3, r2, r3
 802b822:	b29b      	uxth	r3, r3
 802b824:	3b01      	subs	r3, #1
 802b826:	b29b      	uxth	r3, r3
 802b828:	817b      	strh	r3, [r7, #10]
        break;
 802b82a:	e025      	b.n	802b878 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
    case 2:
        x = WIDTH - x - 1;
 802b82c:	68fb      	ldr	r3, [r7, #12]
 802b82e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802b832:	b29a      	uxth	r2, r3
 802b834:	897b      	ldrh	r3, [r7, #10]
 802b836:	1ad3      	subs	r3, r2, r3
 802b838:	b29b      	uxth	r3, r3
 802b83a:	3b01      	subs	r3, #1
 802b83c:	b29b      	uxth	r3, r3
 802b83e:	817b      	strh	r3, [r7, #10]
        y = HEIGHT - y - 1;
 802b840:	68fb      	ldr	r3, [r7, #12]
 802b842:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802b846:	b29a      	uxth	r2, r3
 802b848:	893b      	ldrh	r3, [r7, #8]
 802b84a:	1ad3      	subs	r3, r2, r3
 802b84c:	b29b      	uxth	r3, r3
 802b84e:	3b01      	subs	r3, #1
 802b850:	b29b      	uxth	r3, r3
 802b852:	813b      	strh	r3, [r7, #8]
        break;
 802b854:	e010      	b.n	802b878 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
    case 3:
        ssd1306_swap( x, y );
 802b856:	897b      	ldrh	r3, [r7, #10]
 802b858:	82fb      	strh	r3, [r7, #22]
 802b85a:	893b      	ldrh	r3, [r7, #8]
 802b85c:	817b      	strh	r3, [r7, #10]
 802b85e:	8afb      	ldrh	r3, [r7, #22]
 802b860:	813b      	strh	r3, [r7, #8]
        y = HEIGHT - y - 1;
 802b862:	68fb      	ldr	r3, [r7, #12]
 802b864:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802b868:	b29a      	uxth	r2, r3
 802b86a:	893b      	ldrh	r3, [r7, #8]
 802b86c:	1ad3      	subs	r3, r2, r3
 802b86e:	b29b      	uxth	r3, r3
 802b870:	3b01      	subs	r3, #1
 802b872:	b29b      	uxth	r3, r3
 802b874:	813b      	strh	r3, [r7, #8]
        break;
 802b876:	bf00      	nop
    }

    // x is which column
    switch ( color )
 802b878:	88fb      	ldrh	r3, [r7, #6]
 802b87a:	2b02      	cmp	r3, #2
 802b87c:	d049      	beq.n	802b912 <_ZN16Adafruit_SSD13069drawPixelEsst+0x182>
 802b87e:	2b02      	cmp	r3, #2
 802b880:	dc69      	bgt.n	802b956 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
 802b882:	2b00      	cmp	r3, #0
 802b884:	d022      	beq.n	802b8cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x13c>
 802b886:	2b01      	cmp	r3, #1
 802b888:	d165      	bne.n	802b956 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
    {
    case WHITE:   buffer[x + ( y / 8 ) * SSD1306_LCDWIDTH] |= ( 1 << ( y & 7 ) ); break;
 802b88a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b88e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b892:	2b00      	cmp	r3, #0
 802b894:	da00      	bge.n	802b898 <_ZN16Adafruit_SSD13069drawPixelEsst+0x108>
 802b896:	3307      	adds	r3, #7
 802b898:	10db      	asrs	r3, r3, #3
 802b89a:	b218      	sxth	r0, r3
 802b89c:	4603      	mov	r3, r0
 802b89e:	01db      	lsls	r3, r3, #7
 802b8a0:	4413      	add	r3, r2
 802b8a2:	4a2e      	ldr	r2, [pc, #184]	; (802b95c <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 802b8a4:	5cd3      	ldrb	r3, [r2, r3]
 802b8a6:	b25a      	sxtb	r2, r3
 802b8a8:	893b      	ldrh	r3, [r7, #8]
 802b8aa:	f003 0307 	and.w	r3, r3, #7
 802b8ae:	2101      	movs	r1, #1
 802b8b0:	fa01 f303 	lsl.w	r3, r1, r3
 802b8b4:	b25b      	sxtb	r3, r3
 802b8b6:	4313      	orrs	r3, r2
 802b8b8:	b259      	sxtb	r1, r3
 802b8ba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b8be:	4603      	mov	r3, r0
 802b8c0:	01db      	lsls	r3, r3, #7
 802b8c2:	4413      	add	r3, r2
 802b8c4:	b2c9      	uxtb	r1, r1
 802b8c6:	4a25      	ldr	r2, [pc, #148]	; (802b95c <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 802b8c8:	54d1      	strb	r1, [r2, r3]
 802b8ca:	e044      	b.n	802b956 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
    case BLACK:   buffer[x + ( y / 8 ) * SSD1306_LCDWIDTH] &= ~( 1 << ( y & 7 ) ); break;
 802b8cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b8d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b8d4:	2b00      	cmp	r3, #0
 802b8d6:	da00      	bge.n	802b8da <_ZN16Adafruit_SSD13069drawPixelEsst+0x14a>
 802b8d8:	3307      	adds	r3, #7
 802b8da:	10db      	asrs	r3, r3, #3
 802b8dc:	b218      	sxth	r0, r3
 802b8de:	4603      	mov	r3, r0
 802b8e0:	01db      	lsls	r3, r3, #7
 802b8e2:	4413      	add	r3, r2
 802b8e4:	4a1d      	ldr	r2, [pc, #116]	; (802b95c <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 802b8e6:	5cd3      	ldrb	r3, [r2, r3]
 802b8e8:	b25a      	sxtb	r2, r3
 802b8ea:	893b      	ldrh	r3, [r7, #8]
 802b8ec:	f003 0307 	and.w	r3, r3, #7
 802b8f0:	2101      	movs	r1, #1
 802b8f2:	fa01 f303 	lsl.w	r3, r1, r3
 802b8f6:	b25b      	sxtb	r3, r3
 802b8f8:	43db      	mvns	r3, r3
 802b8fa:	b25b      	sxtb	r3, r3
 802b8fc:	4013      	ands	r3, r2
 802b8fe:	b259      	sxtb	r1, r3
 802b900:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b904:	4603      	mov	r3, r0
 802b906:	01db      	lsls	r3, r3, #7
 802b908:	4413      	add	r3, r2
 802b90a:	b2c9      	uxtb	r1, r1
 802b90c:	4a13      	ldr	r2, [pc, #76]	; (802b95c <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 802b90e:	54d1      	strb	r1, [r2, r3]
 802b910:	e021      	b.n	802b956 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
    case INVERSE: buffer[x + ( y / 8 ) * SSD1306_LCDWIDTH] ^= ( 1 << ( y & 7 ) ); break;
 802b912:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b916:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b91a:	2b00      	cmp	r3, #0
 802b91c:	da00      	bge.n	802b920 <_ZN16Adafruit_SSD13069drawPixelEsst+0x190>
 802b91e:	3307      	adds	r3, #7
 802b920:	10db      	asrs	r3, r3, #3
 802b922:	b218      	sxth	r0, r3
 802b924:	4603      	mov	r3, r0
 802b926:	01db      	lsls	r3, r3, #7
 802b928:	4413      	add	r3, r2
 802b92a:	4a0c      	ldr	r2, [pc, #48]	; (802b95c <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 802b92c:	5cd3      	ldrb	r3, [r2, r3]
 802b92e:	b25a      	sxtb	r2, r3
 802b930:	893b      	ldrh	r3, [r7, #8]
 802b932:	f003 0307 	and.w	r3, r3, #7
 802b936:	2101      	movs	r1, #1
 802b938:	fa01 f303 	lsl.w	r3, r1, r3
 802b93c:	b25b      	sxtb	r3, r3
 802b93e:	4053      	eors	r3, r2
 802b940:	b259      	sxtb	r1, r3
 802b942:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b946:	4603      	mov	r3, r0
 802b948:	01db      	lsls	r3, r3, #7
 802b94a:	4413      	add	r3, r2
 802b94c:	b2c9      	uxtb	r1, r1
 802b94e:	4a03      	ldr	r2, [pc, #12]	; (802b95c <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 802b950:	54d1      	strb	r1, [r2, r3]
 802b952:	e000      	b.n	802b956 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
        return;
 802b954:	bf00      	nop
    }
}
 802b956:	3718      	adds	r7, #24
 802b958:	46bd      	mov	sp, r7
 802b95a:	bd80      	pop	{r7, pc}
 802b95c:	20000294 	.word	0x20000294

0802b960 <_ZN16Adafruit_SSD1306C1Ea>:


// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
 802b960:	b580      	push	{r7, lr}
 802b962:	b082      	sub	sp, #8
 802b964:	af00      	add	r7, sp, #0
 802b966:	6078      	str	r0, [r7, #4]
 802b968:	460b      	mov	r3, r1
 802b96a:	70fb      	strb	r3, [r7, #3]
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT)
 802b96c:	687b      	ldr	r3, [r7, #4]
 802b96e:	2220      	movs	r2, #32
 802b970:	2180      	movs	r1, #128	; 0x80
 802b972:	4618      	mov	r0, r3
 802b974:	f7ff fc56 	bl	802b224 <_ZN12Adafruit_GFXC1Ess>
 802b978:	4a0f      	ldr	r2, [pc, #60]	; (802b9b8 <_ZN16Adafruit_SSD1306C1Ea+0x58>)
 802b97a:	687b      	ldr	r3, [r7, #4]
 802b97c:	601a      	str	r2, [r3, #0]
{
  sclk = dc = cs = sid = -1;
 802b97e:	687b      	ldr	r3, [r7, #4]
 802b980:	22ff      	movs	r2, #255	; 0xff
 802b982:	765a      	strb	r2, [r3, #25]
 802b984:	687b      	ldr	r3, [r7, #4]
 802b986:	f993 2019 	ldrsb.w	r2, [r3, #25]
 802b98a:	687b      	ldr	r3, [r7, #4]
 802b98c:	775a      	strb	r2, [r3, #29]
 802b98e:	687b      	ldr	r3, [r7, #4]
 802b990:	f993 201d 	ldrsb.w	r2, [r3, #29]
 802b994:	687b      	ldr	r3, [r7, #4]
 802b996:	76da      	strb	r2, [r3, #27]
 802b998:	687b      	ldr	r3, [r7, #4]
 802b99a:	f993 201b 	ldrsb.w	r2, [r3, #27]
 802b99e:	687b      	ldr	r3, [r7, #4]
 802b9a0:	769a      	strb	r2, [r3, #26]
  dbg = 1;		//	Default Enable Debug Print
 802b9a2:	687b      	ldr	r3, [r7, #4]
 802b9a4:	2201      	movs	r2, #1
 802b9a6:	779a      	strb	r2, [r3, #30]
  rst = reset;
 802b9a8:	687b      	ldr	r3, [r7, #4]
 802b9aa:	78fa      	ldrb	r2, [r7, #3]
 802b9ac:	771a      	strb	r2, [r3, #28]
}
 802b9ae:	687b      	ldr	r3, [r7, #4]
 802b9b0:	4618      	mov	r0, r3
 802b9b2:	3708      	adds	r7, #8
 802b9b4:	46bd      	mov	sp, r7
 802b9b6:	bd80      	pop	{r7, pc}
 802b9b8:	0803b6f4 	.word	0x0803b6f4

0802b9bc <_ZN16Adafruit_SSD13065beginEhhb>:


void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset)
{
 802b9bc:	b580      	push	{r7, lr}
 802b9be:	b082      	sub	sp, #8
 802b9c0:	af00      	add	r7, sp, #0
 802b9c2:	6078      	str	r0, [r7, #4]
 802b9c4:	4608      	mov	r0, r1
 802b9c6:	4611      	mov	r1, r2
 802b9c8:	461a      	mov	r2, r3
 802b9ca:	4603      	mov	r3, r0
 802b9cc:	70fb      	strb	r3, [r7, #3]
 802b9ce:	460b      	mov	r3, r1
 802b9d0:	70bb      	strb	r3, [r7, #2]
 802b9d2:	4613      	mov	r3, r2
 802b9d4:	707b      	strb	r3, [r7, #1]
  _vccstate = vccstate;
 802b9d6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 802b9da:	687b      	ldr	r3, [r7, #4]
 802b9dc:	761a      	strb	r2, [r3, #24]
  _i2caddr = i2caddr;
 802b9de:	f997 2002 	ldrsb.w	r2, [r7, #2]
 802b9e2:	687b      	ldr	r3, [r7, #4]
 802b9e4:	75da      	strb	r2, [r3, #23]

  // Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 802b9e6:	21ae      	movs	r1, #174	; 0xae
 802b9e8:	6878      	ldr	r0, [r7, #4]
 802b9ea:	f000 f879 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 802b9ee:	21d5      	movs	r1, #213	; 0xd5
 802b9f0:	6878      	ldr	r0, [r7, #4]
 802b9f2:	f000 f875 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 802b9f6:	2180      	movs	r1, #128	; 0x80
 802b9f8:	6878      	ldr	r0, [r7, #4]
 802b9fa:	f000 f871 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 802b9fe:	21a8      	movs	r1, #168	; 0xa8
 802ba00:	6878      	ldr	r0, [r7, #4]
 802ba02:	f000 f86d 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 802ba06:	211f      	movs	r1, #31
 802ba08:	6878      	ldr	r0, [r7, #4]
 802ba0a:	f000 f869 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 802ba0e:	21d3      	movs	r1, #211	; 0xd3
 802ba10:	6878      	ldr	r0, [r7, #4]
 802ba12:	f000 f865 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x0);                                   // no offset
 802ba16:	2100      	movs	r1, #0
 802ba18:	6878      	ldr	r0, [r7, #4]
 802ba1a:	f000 f861 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 802ba1e:	2140      	movs	r1, #64	; 0x40
 802ba20:	6878      	ldr	r0, [r7, #4]
 802ba22:	f000 f85d 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 802ba26:	218d      	movs	r1, #141	; 0x8d
 802ba28:	6878      	ldr	r0, [r7, #4]
 802ba2a:	f000 f859 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (vccstate == SSD1306_EXTERNALVCC)
 802ba2e:	78fb      	ldrb	r3, [r7, #3]
 802ba30:	2b01      	cmp	r3, #1
 802ba32:	d104      	bne.n	802ba3e <_ZN16Adafruit_SSD13065beginEhhb+0x82>
    { ssd1306_command(0x10); }
 802ba34:	2110      	movs	r1, #16
 802ba36:	6878      	ldr	r0, [r7, #4]
 802ba38:	f000 f852 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
 802ba3c:	e003      	b.n	802ba46 <_ZN16Adafruit_SSD13065beginEhhb+0x8a>
  else
    { ssd1306_command(0x14); }
 802ba3e:	2114      	movs	r1, #20
 802ba40:	6878      	ldr	r0, [r7, #4]
 802ba42:	f000 f84d 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 802ba46:	2120      	movs	r1, #32
 802ba48:	6878      	ldr	r0, [r7, #4]
 802ba4a:	f000 f849 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 802ba4e:	2100      	movs	r1, #0
 802ba50:	6878      	ldr	r0, [r7, #4]
 802ba52:	f000 f845 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 802ba56:	21a1      	movs	r1, #161	; 0xa1
 802ba58:	6878      	ldr	r0, [r7, #4]
 802ba5a:	f000 f841 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_COMSCANDEC);
 802ba5e:	21c8      	movs	r1, #200	; 0xc8
 802ba60:	6878      	ldr	r0, [r7, #4]
 802ba62:	f000 f83d 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 802ba66:	21da      	movs	r1, #218	; 0xda
 802ba68:	6878      	ldr	r0, [r7, #4]
 802ba6a:	f000 f839 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x02);
 802ba6e:	2102      	movs	r1, #2
 802ba70:	6878      	ldr	r0, [r7, #4]
 802ba72:	f000 f835 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 802ba76:	2181      	movs	r1, #129	; 0x81
 802ba78:	6878      	ldr	r0, [r7, #4]
 802ba7a:	f000 f831 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x8F);
 802ba7e:	218f      	movs	r1, #143	; 0x8f
 802ba80:	6878      	ldr	r0, [r7, #4]
 802ba82:	f000 f82d 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 802ba86:	21d9      	movs	r1, #217	; 0xd9
 802ba88:	6878      	ldr	r0, [r7, #4]
 802ba8a:	f000 f829 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (vccstate == SSD1306_EXTERNALVCC)
 802ba8e:	78fb      	ldrb	r3, [r7, #3]
 802ba90:	2b01      	cmp	r3, #1
 802ba92:	d104      	bne.n	802ba9e <_ZN16Adafruit_SSD13065beginEhhb+0xe2>
    { ssd1306_command(0x22); }
 802ba94:	2122      	movs	r1, #34	; 0x22
 802ba96:	6878      	ldr	r0, [r7, #4]
 802ba98:	f000 f822 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
 802ba9c:	e003      	b.n	802baa6 <_ZN16Adafruit_SSD13065beginEhhb+0xea>
  else
    { ssd1306_command(0xF1); }
 802ba9e:	21f1      	movs	r1, #241	; 0xf1
 802baa0:	6878      	ldr	r0, [r7, #4]
 802baa2:	f000 f81d 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 802baa6:	21db      	movs	r1, #219	; 0xdb
 802baa8:	6878      	ldr	r0, [r7, #4]
 802baaa:	f000 f819 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x40);
 802baae:	2140      	movs	r1, #64	; 0x40
 802bab0:	6878      	ldr	r0, [r7, #4]
 802bab2:	f000 f815 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 802bab6:	21a4      	movs	r1, #164	; 0xa4
 802bab8:	6878      	ldr	r0, [r7, #4]
 802baba:	f000 f811 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 802babe:	21a6      	movs	r1, #166	; 0xa6
 802bac0:	6878      	ldr	r0, [r7, #4]
 802bac2:	f000 f80d 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 802bac6:	212e      	movs	r1, #46	; 0x2e
 802bac8:	6878      	ldr	r0, [r7, #4]
 802baca:	f000 f809 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 802bace:	21af      	movs	r1, #175	; 0xaf
 802bad0:	6878      	ldr	r0, [r7, #4]
 802bad2:	f000 f805 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
}
 802bad6:	bf00      	nop
 802bad8:	3708      	adds	r7, #8
 802bada:	46bd      	mov	sp, r7
 802badc:	bd80      	pop	{r7, pc}
	...

0802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c)
{
 802bae0:	b580      	push	{r7, lr}
 802bae2:	b084      	sub	sp, #16
 802bae4:	af02      	add	r7, sp, #8
 802bae6:	6078      	str	r0, [r7, #4]
 802bae8:	460b      	mov	r3, r1
 802baea:	70fb      	strb	r3, [r7, #3]
  Buffer_CMD[1] = c;
 802baec:	4a0d      	ldr	r2, [pc, #52]	; (802bb24 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>)
 802baee:	78fb      	ldrb	r3, [r7, #3]
 802baf0:	7053      	strb	r3, [r2, #1]
#if defined(_WIN32)
#else   //  STM32
  while(HAL_I2C_Master_Transmit(&hi2c3,_i2caddr,Buffer_CMD,0x02,0x10) != HAL_OK)
 802baf2:	bf00      	nop
 802baf4:	687b      	ldr	r3, [r7, #4]
 802baf6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 802bafa:	b299      	uxth	r1, r3
 802bafc:	2310      	movs	r3, #16
 802bafe:	9300      	str	r3, [sp, #0]
 802bb00:	2302      	movs	r3, #2
 802bb02:	4a08      	ldr	r2, [pc, #32]	; (802bb24 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>)
 802bb04:	4808      	ldr	r0, [pc, #32]	; (802bb28 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x48>)
 802bb06:	f7f7 fe99 	bl	802383c <HAL_I2C_Master_Transmit>
 802bb0a:	4603      	mov	r3, r0
 802bb0c:	2b00      	cmp	r3, #0
 802bb0e:	bf14      	ite	ne
 802bb10:	2301      	movne	r3, #1
 802bb12:	2300      	moveq	r3, #0
 802bb14:	b2db      	uxtb	r3, r3
 802bb16:	2b00      	cmp	r3, #0
 802bb18:	d1ec      	bne.n	802baf4 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x14>
  {

  }
#endif
}
 802bb1a:	bf00      	nop
 802bb1c:	bf00      	nop
 802bb1e:	3708      	adds	r7, #8
 802bb20:	46bd      	mov	sp, r7
 802bb22:	bd80      	pop	{r7, pc}
 802bb24:	20001288 	.word	0x20001288
 802bb28:	20000e80 	.word	0x20000e80

0802bb2c <_ZN16Adafruit_SSD130612ssd1306_dataEt>:

void Adafruit_SSD1306::ssd1306_data(uint16_t a)
{
 802bb2c:	b580      	push	{r7, lr}
 802bb2e:	b086      	sub	sp, #24
 802bb30:	af02      	add	r7, sp, #8
 802bb32:	6078      	str	r0, [r7, #4]
 802bb34:	460b      	mov	r3, r1
 802bb36:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  
  for(i = 0; i < 128 ; i++)
 802bb38:	2300      	movs	r3, #0
 802bb3a:	73fb      	strb	r3, [r7, #15]
 802bb3c:	e00b      	b.n	802bb56 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x2a>
  {
    Buffer_DATA[i+1] = buffer[a+i];
 802bb3e:	887a      	ldrh	r2, [r7, #2]
 802bb40:	7bfb      	ldrb	r3, [r7, #15]
 802bb42:	441a      	add	r2, r3
 802bb44:	7bfb      	ldrb	r3, [r7, #15]
 802bb46:	3301      	adds	r3, #1
 802bb48:	4911      	ldr	r1, [pc, #68]	; (802bb90 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x64>)
 802bb4a:	5c89      	ldrb	r1, [r1, r2]
 802bb4c:	4a11      	ldr	r2, [pc, #68]	; (802bb94 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x68>)
 802bb4e:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 128 ; i++)
 802bb50:	7bfb      	ldrb	r3, [r7, #15]
 802bb52:	3301      	adds	r3, #1
 802bb54:	73fb      	strb	r3, [r7, #15]
 802bb56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802bb5a:	2b00      	cmp	r3, #0
 802bb5c:	daef      	bge.n	802bb3e <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x12>
  }

#if defined(_WIN32)
#else   //  STM32
  while(HAL_I2C_Master_Transmit(&hi2c3,_i2caddr,Buffer_DATA,129,0x10) != HAL_OK)
 802bb5e:	bf00      	nop
 802bb60:	687b      	ldr	r3, [r7, #4]
 802bb62:	f993 3017 	ldrsb.w	r3, [r3, #23]
 802bb66:	b299      	uxth	r1, r3
 802bb68:	2310      	movs	r3, #16
 802bb6a:	9300      	str	r3, [sp, #0]
 802bb6c:	2381      	movs	r3, #129	; 0x81
 802bb6e:	4a09      	ldr	r2, [pc, #36]	; (802bb94 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x68>)
 802bb70:	4809      	ldr	r0, [pc, #36]	; (802bb98 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x6c>)
 802bb72:	f7f7 fe63 	bl	802383c <HAL_I2C_Master_Transmit>
 802bb76:	4603      	mov	r3, r0
 802bb78:	2b00      	cmp	r3, #0
 802bb7a:	bf14      	ite	ne
 802bb7c:	2301      	movne	r3, #1
 802bb7e:	2300      	moveq	r3, #0
 802bb80:	b2db      	uxtb	r3, r3
 802bb82:	2b00      	cmp	r3, #0
 802bb84:	d1ec      	bne.n	802bb60 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x34>
  {

  }
#endif
}
 802bb86:	bf00      	nop
 802bb88:	bf00      	nop
 802bb8a:	3710      	adds	r7, #16
 802bb8c:	46bd      	mov	sp, r7
 802bb8e:	bd80      	pop	{r7, pc}
 802bb90:	20000294 	.word	0x20000294
 802bb94:	20000010 	.word	0x20000010
 802bb98:	20000e80 	.word	0x20000e80

0802bb9c <_ZN16Adafruit_SSD13067displayEv>:
  ssd1306_command(SSD1306_SETCONTRAST);
  ssd1306_command(contrast);
}

void Adafruit_SSD1306::display(void) 
{
 802bb9c:	b580      	push	{r7, lr}
 802bb9e:	b084      	sub	sp, #16
 802bba0:	af00      	add	r7, sp, #0
 802bba2:	6078      	str	r0, [r7, #4]
  ssd1306_command(SSD1306_COLUMNADDR);
 802bba4:	2121      	movs	r1, #33	; 0x21
 802bba6:	6878      	ldr	r0, [r7, #4]
 802bba8:	f7ff ff9a 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
 802bbac:	2100      	movs	r1, #0
 802bbae:	6878      	ldr	r0, [r7, #4]
 802bbb0:	f7ff ff96 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 802bbb4:	217f      	movs	r1, #127	; 0x7f
 802bbb6:	6878      	ldr	r0, [r7, #4]
 802bbb8:	f7ff ff92 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
 802bbbc:	2122      	movs	r1, #34	; 0x22
 802bbbe:	6878      	ldr	r0, [r7, #4]
 802bbc0:	f7ff ff8e 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
 802bbc4:	2100      	movs	r1, #0
 802bbc6:	6878      	ldr	r0, [r7, #4]
 802bbc8:	f7ff ff8a 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #if SSD1306_LCDHEIGHT == 64
    ssd1306_command(7); // Page end address
  #endif
  #if SSD1306_LCDHEIGHT == 32
    ssd1306_command(3); // Page end address
 802bbcc:	2103      	movs	r1, #3
 802bbce:	6878      	ldr	r0, [r7, #4]
 802bbd0:	f7ff ff86 	bl	802bae0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  uint8_t twbrbackup = TWBR;
  TWBR = 12; // upgrade to 400KHz!
#endif

//I2C write
  for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i += 128) 
 802bbd4:	2300      	movs	r3, #0
 802bbd6:	81fb      	strh	r3, [r7, #14]
 802bbd8:	e007      	b.n	802bbea <_ZN16Adafruit_SSD13067displayEv+0x4e>
  {
    
    ssd1306_data(i);
 802bbda:	89fb      	ldrh	r3, [r7, #14]
 802bbdc:	4619      	mov	r1, r3
 802bbde:	6878      	ldr	r0, [r7, #4]
 802bbe0:	f7ff ffa4 	bl	802bb2c <_ZN16Adafruit_SSD130612ssd1306_dataEt>
  for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i += 128) 
 802bbe4:	89fb      	ldrh	r3, [r7, #14]
 802bbe6:	3380      	adds	r3, #128	; 0x80
 802bbe8:	81fb      	strh	r3, [r7, #14]
 802bbea:	89fb      	ldrh	r3, [r7, #14]
 802bbec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802bbf0:	d3f3      	bcc.n	802bbda <_ZN16Adafruit_SSD13067displayEv+0x3e>

#ifdef TWBR
    TWBR = twbrbackup;
#endif
  
}
 802bbf2:	bf00      	nop
 802bbf4:	bf00      	nop
 802bbf6:	3710      	adds	r7, #16
 802bbf8:	46bd      	mov	sp, r7
 802bbfa:	bd80      	pop	{r7, pc}

0802bbfc <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void)
{
 802bbfc:	b580      	push	{r7, lr}
 802bbfe:	b082      	sub	sp, #8
 802bc00:	af00      	add	r7, sp, #0
 802bc02:	6078      	str	r0, [r7, #4]
  
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
 802bc04:	f44f 7300 	mov.w	r3, #512	; 0x200
 802bc08:	2200      	movs	r2, #0
 802bc0a:	4904      	ldr	r1, [pc, #16]	; (802bc1c <_ZN16Adafruit_SSD130612clearDisplayEv+0x20>)
 802bc0c:	6878      	ldr	r0, [r7, #4]
 802bc0e:	f000 fbd9 	bl	802c3c4 <_ZN16Adafruit_SSD13066memsetEPhtt>
}
 802bc12:	bf00      	nop
 802bc14:	3708      	adds	r7, #8
 802bc16:	46bd      	mov	sp, r7
 802bc18:	bd80      	pop	{r7, pc}
 802bc1a:	bf00      	nop
 802bc1c:	20000294 	.word	0x20000294

0802bc20 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:


void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 802bc20:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 802bc24:	b08d      	sub	sp, #52	; 0x34
 802bc26:	af00      	add	r7, sp, #0
 802bc28:	60f8      	str	r0, [r7, #12]
 802bc2a:	4608      	mov	r0, r1
 802bc2c:	4611      	mov	r1, r2
 802bc2e:	461a      	mov	r2, r3
 802bc30:	4603      	mov	r3, r0
 802bc32:	817b      	strh	r3, [r7, #10]
 802bc34:	460b      	mov	r3, r1
 802bc36:	813b      	strh	r3, [r7, #8]
 802bc38:	4613      	mov	r3, r2
 802bc3a:	80fb      	strh	r3, [r7, #6]
  bool bSwap = false;
 802bc3c:	2300      	movs	r3, #0
 802bc3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  switch(rotation)
 802bc42:	68fb      	ldr	r3, [r7, #12]
 802bc44:	7d5b      	ldrb	r3, [r3, #21]
 802bc46:	2b03      	cmp	r3, #3
 802bc48:	d855      	bhi.n	802bcf6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd6>
 802bc4a:	a201      	add	r2, pc, #4	; (adr r2, 802bc50 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>)
 802bc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802bc50:	0802bcf7 	.word	0x0802bcf7
 802bc54:	0802bc61 	.word	0x0802bc61
 802bc58:	0802bc89 	.word	0x0802bc89
 802bc5c:	0802bcc1 	.word	0x0802bcc1
    case 0:
      // 0 degree rotation, do nothing
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
 802bc60:	2301      	movs	r3, #1
 802bc62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 802bc66:	897b      	ldrh	r3, [r7, #10]
 802bc68:	857b      	strh	r3, [r7, #42]	; 0x2a
 802bc6a:	893b      	ldrh	r3, [r7, #8]
 802bc6c:	817b      	strh	r3, [r7, #10]
 802bc6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802bc70:	813b      	strh	r3, [r7, #8]
      x = WIDTH - x - 1;
 802bc72:	68fb      	ldr	r3, [r7, #12]
 802bc74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802bc78:	b29a      	uxth	r2, r3
 802bc7a:	897b      	ldrh	r3, [r7, #10]
 802bc7c:	1ad3      	subs	r3, r2, r3
 802bc7e:	b29b      	uxth	r3, r3
 802bc80:	3b01      	subs	r3, #1
 802bc82:	b29b      	uxth	r3, r3
 802bc84:	817b      	strh	r3, [r7, #10]
      break;
 802bc86:	e036      	b.n	802bcf6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd6>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 802bc88:	68fb      	ldr	r3, [r7, #12]
 802bc8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802bc8e:	b29a      	uxth	r2, r3
 802bc90:	897b      	ldrh	r3, [r7, #10]
 802bc92:	1ad3      	subs	r3, r2, r3
 802bc94:	b29b      	uxth	r3, r3
 802bc96:	3b01      	subs	r3, #1
 802bc98:	b29b      	uxth	r3, r3
 802bc9a:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - y - 1;
 802bc9c:	68fb      	ldr	r3, [r7, #12]
 802bc9e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802bca2:	b29a      	uxth	r2, r3
 802bca4:	893b      	ldrh	r3, [r7, #8]
 802bca6:	1ad3      	subs	r3, r2, r3
 802bca8:	b29b      	uxth	r3, r3
 802bcaa:	3b01      	subs	r3, #1
 802bcac:	b29b      	uxth	r3, r3
 802bcae:	813b      	strh	r3, [r7, #8]
      x -= (w-1);
 802bcb0:	897a      	ldrh	r2, [r7, #10]
 802bcb2:	88fb      	ldrh	r3, [r7, #6]
 802bcb4:	1ad3      	subs	r3, r2, r3
 802bcb6:	b29b      	uxth	r3, r3
 802bcb8:	3301      	adds	r3, #1
 802bcba:	b29b      	uxth	r3, r3
 802bcbc:	817b      	strh	r3, [r7, #10]
      break;
 802bcbe:	e01a      	b.n	802bcf6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
 802bcc0:	2301      	movs	r3, #1
 802bcc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 802bcc6:	897b      	ldrh	r3, [r7, #10]
 802bcc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 802bcca:	893b      	ldrh	r3, [r7, #8]
 802bccc:	817b      	strh	r3, [r7, #10]
 802bcce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802bcd0:	813b      	strh	r3, [r7, #8]
      y = HEIGHT - y - 1;
 802bcd2:	68fb      	ldr	r3, [r7, #12]
 802bcd4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802bcd8:	b29a      	uxth	r2, r3
 802bcda:	893b      	ldrh	r3, [r7, #8]
 802bcdc:	1ad3      	subs	r3, r2, r3
 802bcde:	b29b      	uxth	r3, r3
 802bce0:	3b01      	subs	r3, #1
 802bce2:	b29b      	uxth	r3, r3
 802bce4:	813b      	strh	r3, [r7, #8]
      y -= (w-1);
 802bce6:	893a      	ldrh	r2, [r7, #8]
 802bce8:	88fb      	ldrh	r3, [r7, #6]
 802bcea:	1ad3      	subs	r3, r2, r3
 802bcec:	b29b      	uxth	r3, r3
 802bcee:	3301      	adds	r3, #1
 802bcf0:	b29b      	uxth	r3, r3
 802bcf2:	813b      	strh	r3, [r7, #8]
      break;
 802bcf4:	bf00      	nop
  }

  if(bSwap)
 802bcf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bcfa:	2b00      	cmp	r3, #0
 802bcfc:	f000 80ce 	beq.w	802be9c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x27c>
 802bd00:	68fb      	ldr	r3, [r7, #12]
 802bd02:	627b      	str	r3, [r7, #36]	; 0x24
 802bd04:	897b      	ldrh	r3, [r7, #10]
 802bd06:	847b      	strh	r3, [r7, #34]	; 0x22
 802bd08:	893b      	ldrh	r3, [r7, #8]
 802bd0a:	843b      	strh	r3, [r7, #32]
 802bd0c:	88fb      	ldrh	r3, [r7, #6]
 802bd0e:	83fb      	strh	r3, [r7, #30]
 802bd10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802bd14:	83bb      	strh	r3, [r7, #28]

void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 802bd16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802bd1a:	2b00      	cmp	r3, #0
 802bd1c:	f2c0 8154 	blt.w	802bfc8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a8>
 802bd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802bd26:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 802bd2a:	429a      	cmp	r2, r3
 802bd2c:	f280 814c 	bge.w	802bfc8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a8>

  // make sure we don't try to draw below 0
  if(__y < 0)
 802bd30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802bd34:	2b00      	cmp	r3, #0
 802bd36:	da06      	bge.n	802bd46 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x126>
  {
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 802bd38:	8bfa      	ldrh	r2, [r7, #30]
 802bd3a:	8c3b      	ldrh	r3, [r7, #32]
 802bd3c:	4413      	add	r3, r2
 802bd3e:	b29b      	uxth	r3, r3
 802bd40:	83fb      	strh	r3, [r7, #30]
    __y = 0;
 802bd42:	2300      	movs	r3, #0
 802bd44:	843b      	strh	r3, [r7, #32]

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT)
 802bd46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802bd4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802bd4e:	4413      	add	r3, r2
 802bd50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802bd52:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 802bd56:	4293      	cmp	r3, r2
 802bd58:	dd07      	ble.n	802bd6a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14a>
  {
    __h = (HEIGHT - __y);
 802bd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802bd60:	b29a      	uxth	r2, r3
 802bd62:	8c3b      	ldrh	r3, [r7, #32]
 802bd64:	1ad3      	subs	r3, r2, r3
 802bd66:	b29b      	uxth	r3, r3
 802bd68:	83fb      	strh	r3, [r7, #30]
  }

  // if our height is now negative, punt
  if(__h <= 0)
 802bd6a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802bd6e:	2b00      	cmp	r3, #0
 802bd70:	f340 812c 	ble.w	802bfcc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ac>
  {
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 802bd74:	8c3b      	ldrh	r3, [r7, #32]
 802bd76:	b2de      	uxtb	r6, r3
  register uint8_t h = __h;
 802bd78:	8bfb      	ldrh	r3, [r7, #30]
 802bd7a:	b2dd      	uxtb	r5, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
 802bd7c:	4c9a      	ldr	r4, [pc, #616]	; (802bfe8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c8>)
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 802bd7e:	08f3      	lsrs	r3, r6, #3
 802bd80:	b2db      	uxtb	r3, r3
 802bd82:	01db      	lsls	r3, r3, #7
 802bd84:	441c      	add	r4, r3
  // and offset x columns in
  pBuf += x;
 802bd86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802bd8a:	441c      	add	r4, r3

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
 802bd8c:	f006 0307 	and.w	r3, r6, #7
 802bd90:	b2de      	uxtb	r6, r3
  if(mod)
 802bd92:	2e00      	cmp	r6, #0
 802bd94:	d03b      	beq.n	802be0e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ee>
  {
    // mask off the high n bits we want to set
    mod = 8-mod;
 802bd96:	f1c6 0308 	rsb	r3, r6, #8
 802bd9a:	b2de      	uxtb	r6, r3

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 802bd9c:	4632      	mov	r2, r6
 802bd9e:	4b93      	ldr	r3, [pc, #588]	; (802bfec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3cc>)
 802bda0:	f813 8002 	ldrb.w	r8, [r3, r2]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) 
 802bda4:	42b5      	cmp	r5, r6
 802bda6:	d20c      	bcs.n	802bdc2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1a2>
    {
      mask &= (0XFF >> (mod-h));
 802bda8:	4632      	mov	r2, r6
 802bdaa:	462b      	mov	r3, r5
 802bdac:	1ad3      	subs	r3, r2, r3
 802bdae:	22ff      	movs	r2, #255	; 0xff
 802bdb0:	fa42 f303 	asr.w	r3, r2, r3
 802bdb4:	b25a      	sxtb	r2, r3
 802bdb6:	fa4f f388 	sxtb.w	r3, r8
 802bdba:	4013      	ands	r3, r2
 802bdbc:	b25b      	sxtb	r3, r3
 802bdbe:	fa5f f883 	uxtb.w	r8, r3
    }

  switch (color)
 802bdc2:	8bbb      	ldrh	r3, [r7, #28]
 802bdc4:	2b02      	cmp	r3, #2
 802bdc6:	d016      	beq.n	802bdf6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1d6>
 802bdc8:	2b02      	cmp	r3, #2
 802bdca:	dc1a      	bgt.n	802be02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
 802bdcc:	2b00      	cmp	r3, #0
 802bdce:	d007      	beq.n	802bde0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1c0>
 802bdd0:	2b01      	cmp	r3, #1
 802bdd2:	d116      	bne.n	802be02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
    {
    case WHITE:   *pBuf |=  mask;  break;
 802bdd4:	7823      	ldrb	r3, [r4, #0]
 802bdd6:	ea43 0308 	orr.w	r3, r3, r8
 802bdda:	b2db      	uxtb	r3, r3
 802bddc:	7023      	strb	r3, [r4, #0]
 802bdde:	e010      	b.n	802be02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
    case BLACK:   *pBuf &= ~mask;  break;
 802bde0:	7823      	ldrb	r3, [r4, #0]
 802bde2:	b25a      	sxtb	r2, r3
 802bde4:	fa4f f388 	sxtb.w	r3, r8
 802bde8:	43db      	mvns	r3, r3
 802bdea:	b25b      	sxtb	r3, r3
 802bdec:	4013      	ands	r3, r2
 802bdee:	b25b      	sxtb	r3, r3
 802bdf0:	b2db      	uxtb	r3, r3
 802bdf2:	7023      	strb	r3, [r4, #0]
 802bdf4:	e005      	b.n	802be02 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
    case INVERSE: *pBuf ^=  mask;  break;
 802bdf6:	7823      	ldrb	r3, [r4, #0]
 802bdf8:	ea88 0303 	eor.w	r3, r8, r3
 802bdfc:	b2db      	uxtb	r3, r3
 802bdfe:	7023      	strb	r3, [r4, #0]
 802be00:	bf00      	nop
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 802be02:	42b5      	cmp	r5, r6
 802be04:	f0c0 80e4 	bcc.w	802bfd0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b0>

    h -= mod;
 802be08:	1bab      	subs	r3, r5, r6
 802be0a:	b2dd      	uxtb	r5, r3

    pBuf += SSD1306_LCDWIDTH;
 802be0c:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8)
 802be0e:	2d07      	cmp	r5, #7
 802be10:	d91c      	bls.n	802be4c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x22c>
  {
    if (color == INVERSE) 
 802be12:	8bbb      	ldrh	r3, [r7, #28]
 802be14:	2b02      	cmp	r3, #2
 802be16:	d10a      	bne.n	802be2e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x20e>
    {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do
      {
      *pBuf=~(*pBuf);
 802be18:	7823      	ldrb	r3, [r4, #0]
 802be1a:	43db      	mvns	r3, r3
 802be1c:	b2db      	uxtb	r3, r3
 802be1e:	7023      	strb	r3, [r4, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
 802be20:	3480      	adds	r4, #128	; 0x80

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
 802be22:	f1a5 0308 	sub.w	r3, r5, #8
 802be26:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 802be28:	2d07      	cmp	r5, #7
 802be2a:	d8f5      	bhi.n	802be18 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1f8>
 802be2c:	e00e      	b.n	802be4c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x22c>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
 802be2e:	8bbb      	ldrh	r3, [r7, #28]
 802be30:	2b01      	cmp	r3, #1
 802be32:	d101      	bne.n	802be38 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x218>
 802be34:	23ff      	movs	r3, #255	; 0xff
 802be36:	e000      	b.n	802be3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x21a>
 802be38:	2300      	movs	r3, #0
 802be3a:	461e      	mov	r6, r3

      do  {
        // write our value in
      *pBuf = val;
 802be3c:	4633      	mov	r3, r6
 802be3e:	7023      	strb	r3, [r4, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
 802be40:	3480      	adds	r4, #128	; 0x80

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
 802be42:	f1a5 0308 	sub.w	r3, r5, #8
 802be46:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 802be48:	2d07      	cmp	r5, #7
 802be4a:	d8f7      	bhi.n	802be3c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x21c>
      }
    }

  // now do the final partial byte, if necessary
  if(h)
 802be4c:	2d00      	cmp	r5, #0
 802be4e:	f000 80c4 	beq.w	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
  {
    mod = h & 7;
 802be52:	f005 0307 	and.w	r3, r5, #7
 802be56:	b2de      	uxtb	r6, r3
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 802be58:	4632      	mov	r2, r6
 802be5a:	4b65      	ldr	r3, [pc, #404]	; (802bff0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d0>)
 802be5c:	5c9d      	ldrb	r5, [r3, r2]
    switch (color)
 802be5e:	8bbb      	ldrh	r3, [r7, #28]
 802be60:	2b02      	cmp	r3, #2
 802be62:	d016      	beq.n	802be92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x272>
 802be64:	2b02      	cmp	r3, #2
 802be66:	f300 80b8 	bgt.w	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
 802be6a:	2b00      	cmp	r3, #0
 802be6c:	d007      	beq.n	802be7e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x25e>
 802be6e:	2b01      	cmp	r3, #1
 802be70:	f040 80b3 	bne.w	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
    {
      case WHITE:   *pBuf |=  mask;  break;
 802be74:	7823      	ldrb	r3, [r4, #0]
 802be76:	432b      	orrs	r3, r5
 802be78:	b2db      	uxtb	r3, r3
 802be7a:	7023      	strb	r3, [r4, #0]
 802be7c:	e0ad      	b.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
      case BLACK:   *pBuf &= ~mask;  break;
 802be7e:	7823      	ldrb	r3, [r4, #0]
 802be80:	b25a      	sxtb	r2, r3
 802be82:	b26b      	sxtb	r3, r5
 802be84:	43db      	mvns	r3, r3
 802be86:	b25b      	sxtb	r3, r3
 802be88:	4013      	ands	r3, r2
 802be8a:	b25b      	sxtb	r3, r3
 802be8c:	b2db      	uxtb	r3, r3
 802be8e:	7023      	strb	r3, [r4, #0]
 802be90:	e0a3      	b.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
      case INVERSE: *pBuf ^=  mask;  break;
 802be92:	7823      	ldrb	r3, [r4, #0]
 802be94:	406b      	eors	r3, r5
 802be96:	b2db      	uxtb	r3, r3
 802be98:	7023      	strb	r3, [r4, #0]
 802be9a:	e09e      	b.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
 802be9c:	68fb      	ldr	r3, [r7, #12]
 802be9e:	61bb      	str	r3, [r7, #24]
 802bea0:	897b      	ldrh	r3, [r7, #10]
 802bea2:	82fb      	strh	r3, [r7, #22]
 802bea4:	893b      	ldrh	r3, [r7, #8]
 802bea6:	82bb      	strh	r3, [r7, #20]
 802bea8:	88fb      	ldrh	r3, [r7, #6]
 802beaa:	827b      	strh	r3, [r7, #18]
 802beac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802beb0:	823b      	strh	r3, [r7, #16]
  if(y < 0 || y >= HEIGHT) { return; }
 802beb2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802beb6:	2b00      	cmp	r3, #0
 802beb8:	f2c0 808c 	blt.w	802bfd4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b4>
 802bebc:	69bb      	ldr	r3, [r7, #24]
 802bebe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802bec2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802bec6:	429a      	cmp	r2, r3
 802bec8:	f280 8084 	bge.w	802bfd4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b4>
  if(x < 0)
 802becc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802bed0:	2b00      	cmp	r3, #0
 802bed2:	da06      	bge.n	802bee2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2c2>
    w += x;
 802bed4:	8a7a      	ldrh	r2, [r7, #18]
 802bed6:	8afb      	ldrh	r3, [r7, #22]
 802bed8:	4413      	add	r3, r2
 802beda:	b29b      	uxth	r3, r3
 802bedc:	827b      	strh	r3, [r7, #18]
    x = 0;
 802bede:	2300      	movs	r3, #0
 802bee0:	82fb      	strh	r3, [r7, #22]
  if( (x + w) > WIDTH)
 802bee2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802bee6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802beea:	4413      	add	r3, r2
 802beec:	69ba      	ldr	r2, [r7, #24]
 802beee:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 802bef2:	4293      	cmp	r3, r2
 802bef4:	dd07      	ble.n	802bf06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2e6>
    w = (WIDTH - x);
 802bef6:	69bb      	ldr	r3, [r7, #24]
 802bef8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802befc:	b29a      	uxth	r2, r3
 802befe:	8afb      	ldrh	r3, [r7, #22]
 802bf00:	1ad3      	subs	r3, r2, r3
 802bf02:	b29b      	uxth	r3, r3
 802bf04:	827b      	strh	r3, [r7, #18]
  if(w <= 0) { return; }
 802bf06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802bf0a:	2b00      	cmp	r3, #0
 802bf0c:	dd64      	ble.n	802bfd8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b8>
  register uint8_t *pBuf = buffer;
 802bf0e:	4c36      	ldr	r4, [pc, #216]	; (802bfe8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c8>)
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 802bf10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802bf14:	2b00      	cmp	r3, #0
 802bf16:	da00      	bge.n	802bf1a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2fa>
 802bf18:	3307      	adds	r3, #7
 802bf1a:	10db      	asrs	r3, r3, #3
 802bf1c:	b21b      	sxth	r3, r3
 802bf1e:	01db      	lsls	r3, r3, #7
 802bf20:	441c      	add	r4, r3
  pBuf += x;
 802bf22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802bf26:	441c      	add	r4, r3
  register uint8_t mask = 1 << (y&7);
 802bf28:	8abb      	ldrh	r3, [r7, #20]
 802bf2a:	f003 0307 	and.w	r3, r3, #7
 802bf2e:	2201      	movs	r2, #1
 802bf30:	fa02 f303 	lsl.w	r3, r2, r3
 802bf34:	b2dd      	uxtb	r5, r3
  switch (color)
 802bf36:	8a3b      	ldrh	r3, [r7, #16]
 802bf38:	2b02      	cmp	r3, #2
 802bf3a:	d037      	beq.n	802bfac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38c>
 802bf3c:	2b02      	cmp	r3, #2
 802bf3e:	dc4c      	bgt.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
 802bf40:	2b00      	cmp	r3, #0
 802bf42:	d016      	beq.n	802bf72 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x352>
 802bf44:	2b01      	cmp	r3, #1
 802bf46:	d148      	bne.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 802bf48:	e005      	b.n	802bf56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x336>
 802bf4a:	4623      	mov	r3, r4
 802bf4c:	1c5c      	adds	r4, r3, #1
 802bf4e:	781a      	ldrb	r2, [r3, #0]
 802bf50:	432a      	orrs	r2, r5
 802bf52:	b2d2      	uxtb	r2, r2
 802bf54:	701a      	strb	r2, [r3, #0]
 802bf56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802bf5a:	b29a      	uxth	r2, r3
 802bf5c:	3a01      	subs	r2, #1
 802bf5e:	b292      	uxth	r2, r2
 802bf60:	827a      	strh	r2, [r7, #18]
 802bf62:	2b00      	cmp	r3, #0
 802bf64:	bf14      	ite	ne
 802bf66:	2301      	movne	r3, #1
 802bf68:	2300      	moveq	r3, #0
 802bf6a:	b2db      	uxtb	r3, r3
 802bf6c:	2b00      	cmp	r3, #0
 802bf6e:	d1ec      	bne.n	802bf4a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x32a>
 802bf70:	e033      	b.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 802bf72:	43eb      	mvns	r3, r5
 802bf74:	b2dd      	uxtb	r5, r3
 802bf76:	e005      	b.n	802bf84 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x364>
 802bf78:	4623      	mov	r3, r4
 802bf7a:	1c5c      	adds	r4, r3, #1
 802bf7c:	781a      	ldrb	r2, [r3, #0]
 802bf7e:	402a      	ands	r2, r5
 802bf80:	b2d2      	uxtb	r2, r2
 802bf82:	701a      	strb	r2, [r3, #0]
 802bf84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802bf88:	b29a      	uxth	r2, r3
 802bf8a:	3a01      	subs	r2, #1
 802bf8c:	b292      	uxth	r2, r2
 802bf8e:	827a      	strh	r2, [r7, #18]
 802bf90:	2b00      	cmp	r3, #0
 802bf92:	bf14      	ite	ne
 802bf94:	2301      	movne	r3, #1
 802bf96:	2300      	moveq	r3, #0
 802bf98:	b2db      	uxtb	r3, r3
 802bf9a:	2b00      	cmp	r3, #0
 802bf9c:	d1ec      	bne.n	802bf78 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x358>
 802bf9e:	e01c      	b.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 802bfa0:	4623      	mov	r3, r4
 802bfa2:	1c5c      	adds	r4, r3, #1
 802bfa4:	781a      	ldrb	r2, [r3, #0]
 802bfa6:	406a      	eors	r2, r5
 802bfa8:	b2d2      	uxtb	r2, r2
 802bfaa:	701a      	strb	r2, [r3, #0]
 802bfac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802bfb0:	b29a      	uxth	r2, r3
 802bfb2:	3a01      	subs	r2, #1
 802bfb4:	b292      	uxth	r2, r2
 802bfb6:	827a      	strh	r2, [r7, #18]
 802bfb8:	2b00      	cmp	r3, #0
 802bfba:	bf14      	ite	ne
 802bfbc:	2301      	movne	r3, #1
 802bfbe:	2300      	moveq	r3, #0
 802bfc0:	b2db      	uxtb	r3, r3
 802bfc2:	2b00      	cmp	r3, #0
 802bfc4:	d1ec      	bne.n	802bfa0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x380>
 802bfc6:	e008      	b.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
  if(x < 0 || x >= WIDTH) { return; }
 802bfc8:	bf00      	nop
 802bfca:	e006      	b.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
    return;
 802bfcc:	bf00      	nop
 802bfce:	e004      	b.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
    if(h<mod) { return; }
 802bfd0:	bf00      	nop
 802bfd2:	e002      	b.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
  if(y < 0 || y >= HEIGHT) { return; }
 802bfd4:	bf00      	nop
 802bfd6:	e000      	b.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
  if(w <= 0) { return; }
 802bfd8:	bf00      	nop
}
 802bfda:	bf00      	nop
 802bfdc:	3734      	adds	r7, #52	; 0x34
 802bfde:	46bd      	mov	sp, r7
 802bfe0:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 802bfe4:	4770      	bx	lr
 802bfe6:	bf00      	nop
 802bfe8:	20000294 	.word	0x20000294
 802bfec:	20000494 	.word	0x20000494
 802bff0:	2000049c 	.word	0x2000049c

0802bff4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
{
 802bff4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 802bff8:	b08d      	sub	sp, #52	; 0x34
 802bffa:	af00      	add	r7, sp, #0
 802bffc:	60f8      	str	r0, [r7, #12]
 802bffe:	4608      	mov	r0, r1
 802c000:	4611      	mov	r1, r2
 802c002:	461a      	mov	r2, r3
 802c004:	4603      	mov	r3, r0
 802c006:	817b      	strh	r3, [r7, #10]
 802c008:	460b      	mov	r3, r1
 802c00a:	813b      	strh	r3, [r7, #8]
 802c00c:	4613      	mov	r3, r2
 802c00e:	80fb      	strh	r3, [r7, #6]
  bool bSwap = false;
 802c010:	2300      	movs	r3, #0
 802c012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  switch(rotation)
 802c016:	68fb      	ldr	r3, [r7, #12]
 802c018:	7d5b      	ldrb	r3, [r3, #21]
 802c01a:	2b03      	cmp	r3, #3
 802c01c:	d855      	bhi.n	802c0ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
 802c01e:	a201      	add	r2, pc, #4	; (adr r2, 802c024 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>)
 802c020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c024:	0802c0cb 	.word	0x0802c0cb
 802c028:	0802c035 	.word	0x0802c035
 802c02c:	0802c06b 	.word	0x0802c06b
 802c030:	0802c0a3 	.word	0x0802c0a3
      bSwap = true;
 802c034:	2301      	movs	r3, #1
 802c036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 802c03a:	897b      	ldrh	r3, [r7, #10]
 802c03c:	857b      	strh	r3, [r7, #42]	; 0x2a
 802c03e:	893b      	ldrh	r3, [r7, #8]
 802c040:	817b      	strh	r3, [r7, #10]
 802c042:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802c044:	813b      	strh	r3, [r7, #8]
      x = WIDTH - x - 1;
 802c046:	68fb      	ldr	r3, [r7, #12]
 802c048:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802c04c:	b29a      	uxth	r2, r3
 802c04e:	897b      	ldrh	r3, [r7, #10]
 802c050:	1ad3      	subs	r3, r2, r3
 802c052:	b29b      	uxth	r3, r3
 802c054:	3b01      	subs	r3, #1
 802c056:	b29b      	uxth	r3, r3
 802c058:	817b      	strh	r3, [r7, #10]
      x -= (h-1);
 802c05a:	897a      	ldrh	r2, [r7, #10]
 802c05c:	88fb      	ldrh	r3, [r7, #6]
 802c05e:	1ad3      	subs	r3, r2, r3
 802c060:	b29b      	uxth	r3, r3
 802c062:	3301      	adds	r3, #1
 802c064:	b29b      	uxth	r3, r3
 802c066:	817b      	strh	r3, [r7, #10]
      break;
 802c068:	e02f      	b.n	802c0ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
      x = WIDTH - x - 1;
 802c06a:	68fb      	ldr	r3, [r7, #12]
 802c06c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802c070:	b29a      	uxth	r2, r3
 802c072:	897b      	ldrh	r3, [r7, #10]
 802c074:	1ad3      	subs	r3, r2, r3
 802c076:	b29b      	uxth	r3, r3
 802c078:	3b01      	subs	r3, #1
 802c07a:	b29b      	uxth	r3, r3
 802c07c:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - y - 1;
 802c07e:	68fb      	ldr	r3, [r7, #12]
 802c080:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802c084:	b29a      	uxth	r2, r3
 802c086:	893b      	ldrh	r3, [r7, #8]
 802c088:	1ad3      	subs	r3, r2, r3
 802c08a:	b29b      	uxth	r3, r3
 802c08c:	3b01      	subs	r3, #1
 802c08e:	b29b      	uxth	r3, r3
 802c090:	813b      	strh	r3, [r7, #8]
      y -= (h-1);
 802c092:	893a      	ldrh	r2, [r7, #8]
 802c094:	88fb      	ldrh	r3, [r7, #6]
 802c096:	1ad3      	subs	r3, r2, r3
 802c098:	b29b      	uxth	r3, r3
 802c09a:	3301      	adds	r3, #1
 802c09c:	b29b      	uxth	r3, r3
 802c09e:	813b      	strh	r3, [r7, #8]
      break;
 802c0a0:	e013      	b.n	802c0ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
      bSwap = true;
 802c0a2:	2301      	movs	r3, #1
 802c0a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 802c0a8:	897b      	ldrh	r3, [r7, #10]
 802c0aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 802c0ac:	893b      	ldrh	r3, [r7, #8]
 802c0ae:	817b      	strh	r3, [r7, #10]
 802c0b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802c0b2:	813b      	strh	r3, [r7, #8]
      y = HEIGHT - y - 1;
 802c0b4:	68fb      	ldr	r3, [r7, #12]
 802c0b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802c0ba:	b29a      	uxth	r2, r3
 802c0bc:	893b      	ldrh	r3, [r7, #8]
 802c0be:	1ad3      	subs	r3, r2, r3
 802c0c0:	b29b      	uxth	r3, r3
 802c0c2:	3b01      	subs	r3, #1
 802c0c4:	b29b      	uxth	r3, r3
 802c0c6:	813b      	strh	r3, [r7, #8]
      break;
 802c0c8:	bf00      	nop
  if(bSwap)
 802c0ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802c0ce:	2b00      	cmp	r3, #0
 802c0d0:	f000 8099 	beq.w	802c206 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x212>
 802c0d4:	68fb      	ldr	r3, [r7, #12]
 802c0d6:	627b      	str	r3, [r7, #36]	; 0x24
 802c0d8:	897b      	ldrh	r3, [r7, #10]
 802c0da:	847b      	strh	r3, [r7, #34]	; 0x22
 802c0dc:	893b      	ldrh	r3, [r7, #8]
 802c0de:	843b      	strh	r3, [r7, #32]
 802c0e0:	88fb      	ldrh	r3, [r7, #6]
 802c0e2:	83fb      	strh	r3, [r7, #30]
 802c0e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802c0e8:	83bb      	strh	r3, [r7, #28]
  if(y < 0 || y >= HEIGHT) { return; }
 802c0ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802c0ee:	2b00      	cmp	r3, #0
 802c0f0:	f2c0 8153 	blt.w	802c39a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a6>
 802c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c0f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802c0fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802c0fe:	429a      	cmp	r2, r3
 802c100:	f280 814b 	bge.w	802c39a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a6>
  if(x < 0)
 802c104:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802c108:	2b00      	cmp	r3, #0
 802c10a:	da06      	bge.n	802c11a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x126>
    w += x;
 802c10c:	8bfa      	ldrh	r2, [r7, #30]
 802c10e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802c110:	4413      	add	r3, r2
 802c112:	b29b      	uxth	r3, r3
 802c114:	83fb      	strh	r3, [r7, #30]
    x = 0;
 802c116:	2300      	movs	r3, #0
 802c118:	847b      	strh	r3, [r7, #34]	; 0x22
  if( (x + w) > WIDTH)
 802c11a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 802c11e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802c122:	4413      	add	r3, r2
 802c124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c126:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 802c12a:	4293      	cmp	r3, r2
 802c12c:	dd07      	ble.n	802c13e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
    w = (WIDTH - x);
 802c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c130:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802c134:	b29a      	uxth	r2, r3
 802c136:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802c138:	1ad3      	subs	r3, r2, r3
 802c13a:	b29b      	uxth	r3, r3
 802c13c:	83fb      	strh	r3, [r7, #30]
  if(w <= 0) { return; }
 802c13e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802c142:	2b00      	cmp	r3, #0
 802c144:	f340 812b 	ble.w	802c39e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3aa>
  register uint8_t *pBuf = buffer;
 802c148:	4c9b      	ldr	r4, [pc, #620]	; (802c3b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c4>)
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 802c14a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802c14e:	2b00      	cmp	r3, #0
 802c150:	da00      	bge.n	802c154 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x160>
 802c152:	3307      	adds	r3, #7
 802c154:	10db      	asrs	r3, r3, #3
 802c156:	b21b      	sxth	r3, r3
 802c158:	01db      	lsls	r3, r3, #7
 802c15a:	441c      	add	r4, r3
  pBuf += x;
 802c15c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802c160:	441c      	add	r4, r3
  register uint8_t mask = 1 << (y&7);
 802c162:	8c3b      	ldrh	r3, [r7, #32]
 802c164:	f003 0307 	and.w	r3, r3, #7
 802c168:	2201      	movs	r2, #1
 802c16a:	fa02 f303 	lsl.w	r3, r2, r3
 802c16e:	b2dd      	uxtb	r5, r3
  switch (color)
 802c170:	8bbb      	ldrh	r3, [r7, #28]
 802c172:	2b02      	cmp	r3, #2
 802c174:	d039      	beq.n	802c1ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1f6>
 802c176:	2b02      	cmp	r3, #2
 802c178:	f300 8118 	bgt.w	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
 802c17c:	2b00      	cmp	r3, #0
 802c17e:	d017      	beq.n	802c1b0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1bc>
 802c180:	2b01      	cmp	r3, #1
 802c182:	f040 8113 	bne.w	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 802c186:	e005      	b.n	802c194 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1a0>
 802c188:	4623      	mov	r3, r4
 802c18a:	1c5c      	adds	r4, r3, #1
 802c18c:	781a      	ldrb	r2, [r3, #0]
 802c18e:	432a      	orrs	r2, r5
 802c190:	b2d2      	uxtb	r2, r2
 802c192:	701a      	strb	r2, [r3, #0]
 802c194:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802c198:	b29a      	uxth	r2, r3
 802c19a:	3a01      	subs	r2, #1
 802c19c:	b292      	uxth	r2, r2
 802c19e:	83fa      	strh	r2, [r7, #30]
 802c1a0:	2b00      	cmp	r3, #0
 802c1a2:	bf14      	ite	ne
 802c1a4:	2301      	movne	r3, #1
 802c1a6:	2300      	moveq	r3, #0
 802c1a8:	b2db      	uxtb	r3, r3
 802c1aa:	2b00      	cmp	r3, #0
 802c1ac:	d1ec      	bne.n	802c188 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x194>
 802c1ae:	e0fd      	b.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 802c1b0:	43eb      	mvns	r3, r5
 802c1b2:	b2dd      	uxtb	r5, r3
 802c1b4:	e005      	b.n	802c1c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ce>
 802c1b6:	4623      	mov	r3, r4
 802c1b8:	1c5c      	adds	r4, r3, #1
 802c1ba:	781a      	ldrb	r2, [r3, #0]
 802c1bc:	402a      	ands	r2, r5
 802c1be:	b2d2      	uxtb	r2, r2
 802c1c0:	701a      	strb	r2, [r3, #0]
 802c1c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802c1c6:	b29a      	uxth	r2, r3
 802c1c8:	3a01      	subs	r2, #1
 802c1ca:	b292      	uxth	r2, r2
 802c1cc:	83fa      	strh	r2, [r7, #30]
 802c1ce:	2b00      	cmp	r3, #0
 802c1d0:	bf14      	ite	ne
 802c1d2:	2301      	movne	r3, #1
 802c1d4:	2300      	moveq	r3, #0
 802c1d6:	b2db      	uxtb	r3, r3
 802c1d8:	2b00      	cmp	r3, #0
 802c1da:	d1ec      	bne.n	802c1b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1c2>
 802c1dc:	e0e6      	b.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 802c1de:	4623      	mov	r3, r4
 802c1e0:	1c5c      	adds	r4, r3, #1
 802c1e2:	781a      	ldrb	r2, [r3, #0]
 802c1e4:	406a      	eors	r2, r5
 802c1e6:	b2d2      	uxtb	r2, r2
 802c1e8:	701a      	strb	r2, [r3, #0]
 802c1ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802c1ee:	b29a      	uxth	r2, r3
 802c1f0:	3a01      	subs	r2, #1
 802c1f2:	b292      	uxth	r2, r2
 802c1f4:	83fa      	strh	r2, [r7, #30]
 802c1f6:	2b00      	cmp	r3, #0
 802c1f8:	bf14      	ite	ne
 802c1fa:	2301      	movne	r3, #1
 802c1fc:	2300      	moveq	r3, #0
 802c1fe:	b2db      	uxtb	r3, r3
 802c200:	2b00      	cmp	r3, #0
 802c202:	d1ec      	bne.n	802c1de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ea>
 802c204:	e0d2      	b.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
 802c206:	68fb      	ldr	r3, [r7, #12]
 802c208:	61bb      	str	r3, [r7, #24]
 802c20a:	897b      	ldrh	r3, [r7, #10]
 802c20c:	82fb      	strh	r3, [r7, #22]
 802c20e:	893b      	ldrh	r3, [r7, #8]
 802c210:	82bb      	strh	r3, [r7, #20]
 802c212:	88fb      	ldrh	r3, [r7, #6]
 802c214:	827b      	strh	r3, [r7, #18]
 802c216:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802c21a:	823b      	strh	r3, [r7, #16]
  if(x < 0 || x >= WIDTH) { return; }
 802c21c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802c220:	2b00      	cmp	r3, #0
 802c222:	f2c0 80be 	blt.w	802c3a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3ae>
 802c226:	69bb      	ldr	r3, [r7, #24]
 802c228:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802c22c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802c230:	429a      	cmp	r2, r3
 802c232:	f280 80b6 	bge.w	802c3a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3ae>
  if(__y < 0)
 802c236:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802c23a:	2b00      	cmp	r3, #0
 802c23c:	da06      	bge.n	802c24c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x258>
    __h += __y;
 802c23e:	8a7a      	ldrh	r2, [r7, #18]
 802c240:	8abb      	ldrh	r3, [r7, #20]
 802c242:	4413      	add	r3, r2
 802c244:	b29b      	uxth	r3, r3
 802c246:	827b      	strh	r3, [r7, #18]
    __y = 0;
 802c248:	2300      	movs	r3, #0
 802c24a:	82bb      	strh	r3, [r7, #20]
  if( (__y + __h) > HEIGHT)
 802c24c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802c250:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802c254:	4413      	add	r3, r2
 802c256:	69ba      	ldr	r2, [r7, #24]
 802c258:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 802c25c:	4293      	cmp	r3, r2
 802c25e:	dd07      	ble.n	802c270 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x27c>
    __h = (HEIGHT - __y);
 802c260:	69bb      	ldr	r3, [r7, #24]
 802c262:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802c266:	b29a      	uxth	r2, r3
 802c268:	8abb      	ldrh	r3, [r7, #20]
 802c26a:	1ad3      	subs	r3, r2, r3
 802c26c:	b29b      	uxth	r3, r3
 802c26e:	827b      	strh	r3, [r7, #18]
  if(__h <= 0)
 802c270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802c274:	2b00      	cmp	r3, #0
 802c276:	f340 8096 	ble.w	802c3a6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b2>
  register uint8_t y = __y;
 802c27a:	8abb      	ldrh	r3, [r7, #20]
 802c27c:	b2de      	uxtb	r6, r3
  register uint8_t h = __h;
 802c27e:	8a7b      	ldrh	r3, [r7, #18]
 802c280:	b2dd      	uxtb	r5, r3
  register uint8_t *pBuf = buffer;
 802c282:	4c4d      	ldr	r4, [pc, #308]	; (802c3b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c4>)
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 802c284:	08f3      	lsrs	r3, r6, #3
 802c286:	b2db      	uxtb	r3, r3
 802c288:	01db      	lsls	r3, r3, #7
 802c28a:	441c      	add	r4, r3
  pBuf += x;
 802c28c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802c290:	441c      	add	r4, r3
  register uint8_t mod = (y&7);
 802c292:	f006 0307 	and.w	r3, r6, #7
 802c296:	b2de      	uxtb	r6, r3
  if(mod)
 802c298:	2e00      	cmp	r6, #0
 802c29a:	d03a      	beq.n	802c312 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x31e>
    mod = 8-mod;
 802c29c:	f1c6 0308 	rsb	r3, r6, #8
 802c2a0:	b2de      	uxtb	r6, r3
    register uint8_t mask = premask[mod];
 802c2a2:	4632      	mov	r2, r6
 802c2a4:	4b45      	ldr	r3, [pc, #276]	; (802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>)
 802c2a6:	f813 8002 	ldrb.w	r8, [r3, r2]
    if( h < mod) 
 802c2aa:	42b5      	cmp	r5, r6
 802c2ac:	d20c      	bcs.n	802c2c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2d4>
      mask &= (0XFF >> (mod-h));
 802c2ae:	4632      	mov	r2, r6
 802c2b0:	462b      	mov	r3, r5
 802c2b2:	1ad3      	subs	r3, r2, r3
 802c2b4:	22ff      	movs	r2, #255	; 0xff
 802c2b6:	fa42 f303 	asr.w	r3, r2, r3
 802c2ba:	b25a      	sxtb	r2, r3
 802c2bc:	fa4f f388 	sxtb.w	r3, r8
 802c2c0:	4013      	ands	r3, r2
 802c2c2:	b25b      	sxtb	r3, r3
 802c2c4:	fa5f f883 	uxtb.w	r8, r3
  switch (color)
 802c2c8:	8a3b      	ldrh	r3, [r7, #16]
 802c2ca:	2b02      	cmp	r3, #2
 802c2cc:	d016      	beq.n	802c2fc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x308>
 802c2ce:	2b02      	cmp	r3, #2
 802c2d0:	dc1a      	bgt.n	802c308 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x314>
 802c2d2:	2b00      	cmp	r3, #0
 802c2d4:	d007      	beq.n	802c2e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2f2>
 802c2d6:	2b01      	cmp	r3, #1
 802c2d8:	d116      	bne.n	802c308 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x314>
    case WHITE:   *pBuf |=  mask;  break;
 802c2da:	7823      	ldrb	r3, [r4, #0]
 802c2dc:	ea43 0308 	orr.w	r3, r3, r8
 802c2e0:	b2db      	uxtb	r3, r3
 802c2e2:	7023      	strb	r3, [r4, #0]
 802c2e4:	e010      	b.n	802c308 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x314>
    case BLACK:   *pBuf &= ~mask;  break;
 802c2e6:	7823      	ldrb	r3, [r4, #0]
 802c2e8:	b25a      	sxtb	r2, r3
 802c2ea:	fa4f f388 	sxtb.w	r3, r8
 802c2ee:	43db      	mvns	r3, r3
 802c2f0:	b25b      	sxtb	r3, r3
 802c2f2:	4013      	ands	r3, r2
 802c2f4:	b25b      	sxtb	r3, r3
 802c2f6:	b2db      	uxtb	r3, r3
 802c2f8:	7023      	strb	r3, [r4, #0]
 802c2fa:	e005      	b.n	802c308 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x314>
    case INVERSE: *pBuf ^=  mask;  break;
 802c2fc:	7823      	ldrb	r3, [r4, #0]
 802c2fe:	ea88 0303 	eor.w	r3, r8, r3
 802c302:	b2db      	uxtb	r3, r3
 802c304:	7023      	strb	r3, [r4, #0]
 802c306:	bf00      	nop
    if(h<mod) { return; }
 802c308:	42b5      	cmp	r5, r6
 802c30a:	d34e      	bcc.n	802c3aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b6>
    h -= mod;
 802c30c:	1bab      	subs	r3, r5, r6
 802c30e:	b2dd      	uxtb	r5, r3
    pBuf += SSD1306_LCDWIDTH;
 802c310:	3480      	adds	r4, #128	; 0x80
  if(h >= 8)
 802c312:	2d07      	cmp	r5, #7
 802c314:	d91c      	bls.n	802c350 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x35c>
    if (color == INVERSE) 
 802c316:	8a3b      	ldrh	r3, [r7, #16]
 802c318:	2b02      	cmp	r3, #2
 802c31a:	d10a      	bne.n	802c332 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x33e>
      *pBuf=~(*pBuf);
 802c31c:	7823      	ldrb	r3, [r4, #0]
 802c31e:	43db      	mvns	r3, r3
 802c320:	b2db      	uxtb	r3, r3
 802c322:	7023      	strb	r3, [r4, #0]
        pBuf += SSD1306_LCDWIDTH;
 802c324:	3480      	adds	r4, #128	; 0x80
        h -= 8;
 802c326:	f1a5 0308 	sub.w	r3, r5, #8
 802c32a:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 802c32c:	2d07      	cmp	r5, #7
 802c32e:	d8f5      	bhi.n	802c31c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x328>
 802c330:	e00e      	b.n	802c350 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x35c>
      register uint8_t val = (color == WHITE) ? 255 : 0;
 802c332:	8a3b      	ldrh	r3, [r7, #16]
 802c334:	2b01      	cmp	r3, #1
 802c336:	d101      	bne.n	802c33c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x348>
 802c338:	23ff      	movs	r3, #255	; 0xff
 802c33a:	e000      	b.n	802c33e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x34a>
 802c33c:	2300      	movs	r3, #0
 802c33e:	461e      	mov	r6, r3
      *pBuf = val;
 802c340:	4633      	mov	r3, r6
 802c342:	7023      	strb	r3, [r4, #0]
        pBuf += SSD1306_LCDWIDTH;
 802c344:	3480      	adds	r4, #128	; 0x80
        h -= 8;
 802c346:	f1a5 0308 	sub.w	r3, r5, #8
 802c34a:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 802c34c:	2d07      	cmp	r5, #7
 802c34e:	d8f7      	bhi.n	802c340 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x34c>
  if(h)
 802c350:	2d00      	cmp	r5, #0
 802c352:	d02b      	beq.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
    mod = h & 7;
 802c354:	f005 0307 	and.w	r3, r5, #7
 802c358:	b2de      	uxtb	r6, r3
    register uint8_t mask = postmask[mod];
 802c35a:	4632      	mov	r2, r6
 802c35c:	4b18      	ldr	r3, [pc, #96]	; (802c3c0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3cc>)
 802c35e:	5c9d      	ldrb	r5, [r3, r2]
    switch (color)
 802c360:	8a3b      	ldrh	r3, [r7, #16]
 802c362:	2b02      	cmp	r3, #2
 802c364:	d014      	beq.n	802c390 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x39c>
 802c366:	2b02      	cmp	r3, #2
 802c368:	dc20      	bgt.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
 802c36a:	2b00      	cmp	r3, #0
 802c36c:	d006      	beq.n	802c37c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x388>
 802c36e:	2b01      	cmp	r3, #1
 802c370:	d11c      	bne.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
      case WHITE:   *pBuf |=  mask;  break;
 802c372:	7823      	ldrb	r3, [r4, #0]
 802c374:	432b      	orrs	r3, r5
 802c376:	b2db      	uxtb	r3, r3
 802c378:	7023      	strb	r3, [r4, #0]
 802c37a:	e017      	b.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
      case BLACK:   *pBuf &= ~mask;  break;
 802c37c:	7823      	ldrb	r3, [r4, #0]
 802c37e:	b25a      	sxtb	r2, r3
 802c380:	b26b      	sxtb	r3, r5
 802c382:	43db      	mvns	r3, r3
 802c384:	b25b      	sxtb	r3, r3
 802c386:	4013      	ands	r3, r2
 802c388:	b25b      	sxtb	r3, r3
 802c38a:	b2db      	uxtb	r3, r3
 802c38c:	7023      	strb	r3, [r4, #0]
 802c38e:	e00d      	b.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
      case INVERSE: *pBuf ^=  mask;  break;
 802c390:	7823      	ldrb	r3, [r4, #0]
 802c392:	406b      	eors	r3, r5
 802c394:	b2db      	uxtb	r3, r3
 802c396:	7023      	strb	r3, [r4, #0]
 802c398:	e008      	b.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
  if(y < 0 || y >= HEIGHT) { return; }
 802c39a:	bf00      	nop
 802c39c:	e006      	b.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
  if(w <= 0) { return; }
 802c39e:	bf00      	nop
 802c3a0:	e004      	b.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
  if(x < 0 || x >= WIDTH) { return; }
 802c3a2:	bf00      	nop
 802c3a4:	e002      	b.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
    return;
 802c3a6:	bf00      	nop
 802c3a8:	e000      	b.n	802c3ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b8>
    if(h<mod) { return; }
 802c3aa:	bf00      	nop
}
 802c3ac:	bf00      	nop
 802c3ae:	3734      	adds	r7, #52	; 0x34
 802c3b0:	46bd      	mov	sp, r7
 802c3b2:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 802c3b6:	4770      	bx	lr
 802c3b8:	20000294 	.word	0x20000294
 802c3bc:	20000494 	.word	0x20000494
 802c3c0:	2000049c 	.word	0x2000049c

0802c3c4 <_ZN16Adafruit_SSD13066memsetEPhtt>:
    }
  }
}

void Adafruit_SSD1306::memset(uint8_t buffer[], uint16_t start_address, uint16_t destination_address)
{
 802c3c4:	b480      	push	{r7}
 802c3c6:	b087      	sub	sp, #28
 802c3c8:	af00      	add	r7, sp, #0
 802c3ca:	60f8      	str	r0, [r7, #12]
 802c3cc:	60b9      	str	r1, [r7, #8]
 802c3ce:	4611      	mov	r1, r2
 802c3d0:	461a      	mov	r2, r3
 802c3d2:	460b      	mov	r3, r1
 802c3d4:	80fb      	strh	r3, [r7, #6]
 802c3d6:	4613      	mov	r3, r2
 802c3d8:	80bb      	strh	r3, [r7, #4]
  uint16_t x;
  
  for(x = start_address; x < destination_address; x++)
 802c3da:	88fb      	ldrh	r3, [r7, #6]
 802c3dc:	82fb      	strh	r3, [r7, #22]
 802c3de:	e007      	b.n	802c3f0 <_ZN16Adafruit_SSD13066memsetEPhtt+0x2c>
  {
    buffer[x] = 0x00;
 802c3e0:	8afb      	ldrh	r3, [r7, #22]
 802c3e2:	68ba      	ldr	r2, [r7, #8]
 802c3e4:	4413      	add	r3, r2
 802c3e6:	2200      	movs	r2, #0
 802c3e8:	701a      	strb	r2, [r3, #0]
  for(x = start_address; x < destination_address; x++)
 802c3ea:	8afb      	ldrh	r3, [r7, #22]
 802c3ec:	3301      	adds	r3, #1
 802c3ee:	82fb      	strh	r3, [r7, #22]
 802c3f0:	8afa      	ldrh	r2, [r7, #22]
 802c3f2:	88bb      	ldrh	r3, [r7, #4]
 802c3f4:	429a      	cmp	r2, r3
 802c3f6:	d3f3      	bcc.n	802c3e0 <_ZN16Adafruit_SSD13066memsetEPhtt+0x1c>
  }
}
 802c3f8:	bf00      	nop
 802c3fa:	bf00      	nop
 802c3fc:	371c      	adds	r7, #28
 802c3fe:	46bd      	mov	sp, r7
 802c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c404:	4770      	bx	lr
	...

0802c408 <_ZN16Adafruit_SSD13066printfEPKc>:


//========================================================================
void Adafruit_SSD1306::printf( const char* _format )
//========================================================================
{
 802c408:	b590      	push	{r4, r7, lr}
 802c40a:	b0b3      	sub	sp, #204	; 0xcc
 802c40c:	af00      	add	r7, sp, #0
 802c40e:	6078      	str	r0, [r7, #4]
 802c410:	6039      	str	r1, [r7, #0]
    uint16_t i, j;
    uint8_t page;

    int bIsCharHan;

    page = cursor_y / 8;
 802c412:	687b      	ldr	r3, [r7, #4]
 802c414:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 802c418:	2b00      	cmp	r3, #0
 802c41a:	da00      	bge.n	802c41e <_ZN16Adafruit_SSD13066printfEPKc+0x16>
 802c41c:	3307      	adds	r3, #7
 802c41e:	10db      	asrs	r3, r3, #3
 802c420:	b21b      	sxth	r3, r3
 802c422:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    format = _format;
#else

    //	한글폰트 사용시. 문자코드 변환 사용.
    char format[128];
    memset( (uint8_t *)format, 0, 128 );
 802c426:	f107 010c 	add.w	r1, r7, #12
 802c42a:	2380      	movs	r3, #128	; 0x80
 802c42c:	2200      	movs	r2, #0
 802c42e:	6878      	ldr	r0, [r7, #4]
 802c430:	f7ff ffc8 	bl	802c3c4 <_ZN16Adafruit_SSD13066memsetEPhtt>
    UTF8ToCP949( _format, format );
 802c434:	f107 030c 	add.w	r3, r7, #12
 802c438:	4619      	mov	r1, r3
 802c43a:	6838      	ldr	r0, [r7, #0]
 802c43c:	f008 fb06 	bl	8034a4c <UTF8ToCP949>

#endif

    if ( dbg )
 802c440:	687b      	ldr	r3, [r7, #4]
 802c442:	f993 301e 	ldrsb.w	r3, [r3, #30]
 802c446:	2b00      	cmp	r3, #0
 802c448:	d006      	beq.n	802c458 <_ZN16Adafruit_SSD13066printfEPKc+0x50>
    {
    	::printf( "%s - Text:%s\n", __func__, format );
 802c44a:	f107 030c 	add.w	r3, r7, #12
 802c44e:	461a      	mov	r2, r3
 802c450:	499f      	ldr	r1, [pc, #636]	; (802c6d0 <_ZN16Adafruit_SSD13066printfEPKc+0x2c8>)
 802c452:	48a0      	ldr	r0, [pc, #640]	; (802c6d4 <_ZN16Adafruit_SSD13066printfEPKc+0x2cc>)
 802c454:	f00b f824 	bl	80374a0 <iprintf>
    }

    for ( i = 0; format[i] != '\0'; i++ )
 802c458:	2300      	movs	r3, #0
 802c45a:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 802c45e:	e129      	b.n	802c6b4 <_ZN16Adafruit_SSD13066printfEPKc+0x2ac>
    {
        //  한글체크
        if ( (uint8_t)format[i] > 0x80 )		//	문자.
 802c460:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c464:	33c8      	adds	r3, #200	; 0xc8
 802c466:	443b      	add	r3, r7
 802c468:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 802c46c:	2b80      	cmp	r3, #128	; 0x80
 802c46e:	f240 808b 	bls.w	802c588 <_ZN16Adafruit_SSD13066printfEPKc+0x180>
        {
            bIsCharHan = 1;
 802c472:	2301      	movs	r3, #1
 802c474:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            //	한글폰트
            PHan_HanFontLoad( (const uint8_t *)&format[i], &FontPtr );
 802c478:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c47c:	f107 020c 	add.w	r2, r7, #12
 802c480:	4413      	add	r3, r2
 802c482:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 802c486:	4611      	mov	r1, r2
 802c488:	4618      	mov	r0, r3
 802c48a:	f000 fb55 	bl	802cb38 <PHan_HanFontLoad>

            for ( j = 0; j < 16; j++ )
 802c48e:	2300      	movs	r3, #0
 802c490:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 802c494:	e073      	b.n	802c57e <_ZN16Adafruit_SSD13066printfEPKc+0x176>
            {
                uint16_t	dotByte;
                int bIdx;

                //	2 Byte - 한글
                dotByte = FontPtr.FontBuffer[j * 2];
 802c496:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c49a:	005b      	lsls	r3, r3, #1
 802c49c:	33c8      	adds	r3, #200	; 0xc8
 802c49e:	443b      	add	r3, r7
 802c4a0:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 802c4a4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
                dotByte |= ( FontPtr.FontBuffer[( j * 2 ) + 1] ) << 8;
 802c4a8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c4ac:	005b      	lsls	r3, r3, #1
 802c4ae:	3301      	adds	r3, #1
 802c4b0:	33c8      	adds	r3, #200	; 0xc8
 802c4b2:	443b      	add	r3, r7
 802c4b4:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 802c4b8:	021b      	lsls	r3, r3, #8
 802c4ba:	b21a      	sxth	r2, r3
 802c4bc:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 802c4c0:	4313      	orrs	r3, r2
 802c4c2:	b21b      	sxth	r3, r3
 802c4c4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2

                //  16 X 16 Font ( 한글 )
                for ( bIdx = 0; bIdx < 16; bIdx++ )
 802c4c8:	2300      	movs	r3, #0
 802c4ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802c4ce:	e04d      	b.n	802c56c <_ZN16Adafruit_SSD13066printfEPKc+0x164>
                {
                    if ( dotByte & bitval_r[bIdx] )
 802c4d0:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 802c4d4:	4980      	ldr	r1, [pc, #512]	; (802c6d8 <_ZN16Adafruit_SSD13066printfEPKc+0x2d0>)
 802c4d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802c4da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802c4de:	4013      	ands	r3, r2
 802c4e0:	2b00      	cmp	r3, #0
 802c4e2:	d01f      	beq.n	802c524 <_ZN16Adafruit_SSD13066printfEPKc+0x11c>
                    {
                        drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 1 );
 802c4e4:	687b      	ldr	r3, [r7, #4]
 802c4e6:	681b      	ldr	r3, [r3, #0]
 802c4e8:	681c      	ldr	r4, [r3, #0]
 802c4ea:	687b      	ldr	r3, [r7, #4]
 802c4ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 802c4f0:	b29a      	uxth	r2, r3
 802c4f2:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c4f6:	00db      	lsls	r3, r3, #3
 802c4f8:	b29b      	uxth	r3, r3
 802c4fa:	4413      	add	r3, r2
 802c4fc:	b29a      	uxth	r2, r3
 802c4fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802c502:	b29b      	uxth	r3, r3
 802c504:	4413      	add	r3, r2
 802c506:	b29b      	uxth	r3, r3
 802c508:	b219      	sxth	r1, r3
 802c50a:	687b      	ldr	r3, [r7, #4]
 802c50c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 802c510:	b29a      	uxth	r2, r3
 802c512:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c516:	4413      	add	r3, r2
 802c518:	b29b      	uxth	r3, r3
 802c51a:	b21a      	sxth	r2, r3
 802c51c:	2301      	movs	r3, #1
 802c51e:	6878      	ldr	r0, [r7, #4]
 802c520:	47a0      	blx	r4
 802c522:	e01e      	b.n	802c562 <_ZN16Adafruit_SSD13066printfEPKc+0x15a>
                    }
                    else
                    {
                        drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 0 );
 802c524:	687b      	ldr	r3, [r7, #4]
 802c526:	681b      	ldr	r3, [r3, #0]
 802c528:	681c      	ldr	r4, [r3, #0]
 802c52a:	687b      	ldr	r3, [r7, #4]
 802c52c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 802c530:	b29a      	uxth	r2, r3
 802c532:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c536:	00db      	lsls	r3, r3, #3
 802c538:	b29b      	uxth	r3, r3
 802c53a:	4413      	add	r3, r2
 802c53c:	b29a      	uxth	r2, r3
 802c53e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802c542:	b29b      	uxth	r3, r3
 802c544:	4413      	add	r3, r2
 802c546:	b29b      	uxth	r3, r3
 802c548:	b219      	sxth	r1, r3
 802c54a:	687b      	ldr	r3, [r7, #4]
 802c54c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 802c550:	b29a      	uxth	r2, r3
 802c552:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c556:	4413      	add	r3, r2
 802c558:	b29b      	uxth	r3, r3
 802c55a:	b21a      	sxth	r2, r3
 802c55c:	2300      	movs	r3, #0
 802c55e:	6878      	ldr	r0, [r7, #4]
 802c560:	47a0      	blx	r4
                for ( bIdx = 0; bIdx < 16; bIdx++ )
 802c562:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802c566:	3301      	adds	r3, #1
 802c568:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802c56c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802c570:	2b0f      	cmp	r3, #15
 802c572:	ddad      	ble.n	802c4d0 <_ZN16Adafruit_SSD13066printfEPKc+0xc8>
            for ( j = 0; j < 16; j++ )
 802c574:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c578:	3301      	adds	r3, #1
 802c57a:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 802c57e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c582:	2b0f      	cmp	r3, #15
 802c584:	d987      	bls.n	802c496 <_ZN16Adafruit_SSD13066printfEPKc+0x8e>
 802c586:	e087      	b.n	802c698 <_ZN16Adafruit_SSD13066printfEPKc+0x290>
                }
            }
        }
        else
        {
            bIsCharHan = 0;
 802c588:	2300      	movs	r3, #0
 802c58a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            //	영문폰트
            //*
            PHan_EngFontLoad( (const uint8_t*)&format[i], &FontPtr );
 802c58e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c592:	f107 020c 	add.w	r2, r7, #12
 802c596:	4413      	add	r3, r2
 802c598:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 802c59c:	4611      	mov	r1, r2
 802c59e:	4618      	mov	r0, r3
 802c5a0:	f000 fbce 	bl	802cd40 <PHan_EngFontLoad>

            for ( j = 0; j < 16; j++ )
 802c5a4:	2300      	movs	r3, #0
 802c5a6:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 802c5aa:	e071      	b.n	802c690 <_ZN16Adafruit_SSD13066printfEPKc+0x288>
            {
                uint16_t	dotByte;
                int bIdx;

                dotByte = FontPtr.FontBuffer[j];
 802c5ac:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c5b0:	33c8      	adds	r3, #200	; 0xc8
 802c5b2:	443b      	add	r3, r7
 802c5b4:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 802c5b8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                dotByte |= ( FontPtr.FontBuffer[j + 1] ) << 8;
 802c5bc:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c5c0:	3301      	adds	r3, #1
 802c5c2:	33c8      	adds	r3, #200	; 0xc8
 802c5c4:	443b      	add	r3, r7
 802c5c6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 802c5ca:	021b      	lsls	r3, r3, #8
 802c5cc:	b21a      	sxth	r2, r3
 802c5ce:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 802c5d2:	4313      	orrs	r3, r2
 802c5d4:	b21b      	sxth	r3, r3
 802c5d6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

                //  8 X 16 Font ( 영문 )
                for ( bIdx = 0; bIdx < 8; bIdx++ )
 802c5da:	2300      	movs	r3, #0
 802c5dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802c5e0:	e04d      	b.n	802c67e <_ZN16Adafruit_SSD13066printfEPKc+0x276>
                {
                    if ( dotByte & bitval_r[bIdx] )
 802c5e2:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 802c5e6:	493c      	ldr	r1, [pc, #240]	; (802c6d8 <_ZN16Adafruit_SSD13066printfEPKc+0x2d0>)
 802c5e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802c5ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802c5f0:	4013      	ands	r3, r2
 802c5f2:	2b00      	cmp	r3, #0
 802c5f4:	d01f      	beq.n	802c636 <_ZN16Adafruit_SSD13066printfEPKc+0x22e>
                    {
                        drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 1 );
 802c5f6:	687b      	ldr	r3, [r7, #4]
 802c5f8:	681b      	ldr	r3, [r3, #0]
 802c5fa:	681c      	ldr	r4, [r3, #0]
 802c5fc:	687b      	ldr	r3, [r7, #4]
 802c5fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 802c602:	b29a      	uxth	r2, r3
 802c604:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c608:	00db      	lsls	r3, r3, #3
 802c60a:	b29b      	uxth	r3, r3
 802c60c:	4413      	add	r3, r2
 802c60e:	b29a      	uxth	r2, r3
 802c610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802c614:	b29b      	uxth	r3, r3
 802c616:	4413      	add	r3, r2
 802c618:	b29b      	uxth	r3, r3
 802c61a:	b219      	sxth	r1, r3
 802c61c:	687b      	ldr	r3, [r7, #4]
 802c61e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 802c622:	b29a      	uxth	r2, r3
 802c624:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c628:	4413      	add	r3, r2
 802c62a:	b29b      	uxth	r3, r3
 802c62c:	b21a      	sxth	r2, r3
 802c62e:	2301      	movs	r3, #1
 802c630:	6878      	ldr	r0, [r7, #4]
 802c632:	47a0      	blx	r4
 802c634:	e01e      	b.n	802c674 <_ZN16Adafruit_SSD13066printfEPKc+0x26c>
                    }
                    else
                    {
                        drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 0 );
 802c636:	687b      	ldr	r3, [r7, #4]
 802c638:	681b      	ldr	r3, [r3, #0]
 802c63a:	681c      	ldr	r4, [r3, #0]
 802c63c:	687b      	ldr	r3, [r7, #4]
 802c63e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 802c642:	b29a      	uxth	r2, r3
 802c644:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c648:	00db      	lsls	r3, r3, #3
 802c64a:	b29b      	uxth	r3, r3
 802c64c:	4413      	add	r3, r2
 802c64e:	b29a      	uxth	r2, r3
 802c650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802c654:	b29b      	uxth	r3, r3
 802c656:	4413      	add	r3, r2
 802c658:	b29b      	uxth	r3, r3
 802c65a:	b219      	sxth	r1, r3
 802c65c:	687b      	ldr	r3, [r7, #4]
 802c65e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 802c662:	b29a      	uxth	r2, r3
 802c664:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c668:	4413      	add	r3, r2
 802c66a:	b29b      	uxth	r3, r3
 802c66c:	b21a      	sxth	r2, r3
 802c66e:	2300      	movs	r3, #0
 802c670:	6878      	ldr	r0, [r7, #4]
 802c672:	47a0      	blx	r4
                for ( bIdx = 0; bIdx < 8; bIdx++ )
 802c674:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802c678:	3301      	adds	r3, #1
 802c67a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802c67e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802c682:	2b07      	cmp	r3, #7
 802c684:	ddad      	ble.n	802c5e2 <_ZN16Adafruit_SSD13066printfEPKc+0x1da>
            for ( j = 0; j < 16; j++ )
 802c686:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c68a:	3301      	adds	r3, #1
 802c68c:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 802c690:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c694:	2b0f      	cmp	r3, #15
 802c696:	d989      	bls.n	802c5ac <_ZN16Adafruit_SSD13066printfEPKc+0x1a4>
            }
            //  */
        }


        if ( bIsCharHan )
 802c698:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 802c69c:	2b00      	cmp	r3, #0
 802c69e:	d004      	beq.n	802c6aa <_ZN16Adafruit_SSD13066printfEPKc+0x2a2>
        {
            //  한글인경우 2 Byte
            i++;
 802c6a0:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c6a4:	3301      	adds	r3, #1
 802c6a6:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
    for ( i = 0; format[i] != '\0'; i++ )
 802c6aa:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c6ae:	3301      	adds	r3, #1
 802c6b0:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 802c6b4:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c6b8:	33c8      	adds	r3, #200	; 0xc8
 802c6ba:	443b      	add	r3, r7
 802c6bc:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 802c6c0:	2b00      	cmp	r3, #0
 802c6c2:	f47f aecd 	bne.w	802c460 <_ZN16Adafruit_SSD13066printfEPKc+0x58>
        }

    }
}
 802c6c6:	bf00      	nop
 802c6c8:	bf00      	nop
 802c6ca:	37cc      	adds	r7, #204	; 0xcc
 802c6cc:	46bd      	mov	sp, r7
 802c6ce:	bd90      	pop	{r4, r7, pc}
 802c6d0:	08039238 	.word	0x08039238
 802c6d4:	08039240 	.word	0x08039240
 802c6d8:	0803b6ac 	.word	0x0803b6ac

0802c6dc <LCDInit>:
int g_bInitLCD = 0;

//========================================================================
int LCDInit( void )
//========================================================================
{
 802c6dc:	b580      	push	{r7, lr}
 802c6de:	af00      	add	r7, sp, #0
    display.begin( SSD1306_SWITCHCAPVCC, 0x78 );
 802c6e0:	2301      	movs	r3, #1
 802c6e2:	2278      	movs	r2, #120	; 0x78
 802c6e4:	2102      	movs	r1, #2
 802c6e6:	4804      	ldr	r0, [pc, #16]	; (802c6f8 <LCDInit+0x1c>)
 802c6e8:	f7ff f968 	bl	802b9bc <_ZN16Adafruit_SSD13065beginEhhb>

    g_bInitLCD = 1;
 802c6ec:	4b03      	ldr	r3, [pc, #12]	; (802c6fc <LCDInit+0x20>)
 802c6ee:	2201      	movs	r2, #1
 802c6f0:	601a      	str	r2, [r3, #0]

    return 0;
 802c6f2:	2300      	movs	r3, #0
}
 802c6f4:	4618      	mov	r0, r3
 802c6f6:	bd80      	pop	{r7, pc}
 802c6f8:	2000128c 	.word	0x2000128c
 802c6fc:	200012ac 	.word	0x200012ac

0802c700 <LCDBattery>:


//========================================================================
void LCDBattery( int nLevel )
//========================================================================
{
 802c700:	b580      	push	{r7, lr}
 802c702:	b0a4      	sub	sp, #144	; 0x90
 802c704:	af04      	add	r7, sp, #16
 802c706:	6078      	str	r0, [r7, #4]
    if ( g_bInitLCD == false ) return;
 802c708:	4b16      	ldr	r3, [pc, #88]	; (802c764 <LCDBattery+0x64>)
 802c70a:	681b      	ldr	r3, [r3, #0]
 802c70c:	2b00      	cmp	r3, #0
 802c70e:	d024      	beq.n	802c75a <LCDBattery+0x5a>

    //  Size : 17 x 7
    //  Area : ( 110, 1 ) ~ ( 127, 7 )
    //  Level : 0 ~ 6   ( Battery )

    const uint8_t bmpRSSI[7][17] = {
 802c710:	4a15      	ldr	r2, [pc, #84]	; (802c768 <LCDBattery+0x68>)
 802c712:	f107 0308 	add.w	r3, r7, #8
 802c716:	4611      	mov	r1, r2
 802c718:	2277      	movs	r2, #119	; 0x77
 802c71a:	4618      	mov	r0, r3
 802c71c:	f00b fa30 	bl	8037b80 <memcpy>
        { 0x3C, 0x24, 0x7F, 0x41, 0x41, 0x41, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x7F },  // -[   0 0 0 ]
        { 0x3C, 0x24, 0x7F, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x7F },  // -[ 0 0 0 0 ]
        { 0x3C, 0x24, 0x7F, 0x41, 0x41, 0x41, 0x51, 0x49, 0x4D, 0x7F, 0x59, 0x49, 0x45, 0x41, 0x41, 0x41, 0x7F },  // -[    z    ] - 충전중
    };

    if ( nLevel > 6 ) nLevel = 6;
 802c720:	687b      	ldr	r3, [r7, #4]
 802c722:	2b06      	cmp	r3, #6
 802c724:	dd01      	ble.n	802c72a <LCDBattery+0x2a>
 802c726:	2306      	movs	r3, #6
 802c728:	607b      	str	r3, [r7, #4]

    display.drawBitBuf( 110, 1, bmpRSSI[nLevel], 17, 7, WHITE, BLACK );
 802c72a:	f107 0108 	add.w	r1, r7, #8
 802c72e:	687a      	ldr	r2, [r7, #4]
 802c730:	4613      	mov	r3, r2
 802c732:	011b      	lsls	r3, r3, #4
 802c734:	4413      	add	r3, r2
 802c736:	440b      	add	r3, r1
 802c738:	2200      	movs	r2, #0
 802c73a:	9203      	str	r2, [sp, #12]
 802c73c:	2201      	movs	r2, #1
 802c73e:	9202      	str	r2, [sp, #8]
 802c740:	2207      	movs	r2, #7
 802c742:	9201      	str	r2, [sp, #4]
 802c744:	2211      	movs	r2, #17
 802c746:	9200      	str	r2, [sp, #0]
 802c748:	2201      	movs	r2, #1
 802c74a:	216e      	movs	r1, #110	; 0x6e
 802c74c:	4807      	ldr	r0, [pc, #28]	; (802c76c <LCDBattery+0x6c>)
 802c74e:	f7fe ff42 	bl	802b5d6 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt>
    display.display();
 802c752:	4806      	ldr	r0, [pc, #24]	; (802c76c <LCDBattery+0x6c>)
 802c754:	f7ff fa22 	bl	802bb9c <_ZN16Adafruit_SSD13067displayEv>
 802c758:	e000      	b.n	802c75c <LCDBattery+0x5c>
    if ( g_bInitLCD == false ) return;
 802c75a:	bf00      	nop
}
 802c75c:	3780      	adds	r7, #128	; 0x80
 802c75e:	46bd      	mov	sp, r7
 802c760:	bd80      	pop	{r7, pc}
 802c762:	bf00      	nop
 802c764:	200012ac 	.word	0x200012ac
 802c768:	08039250 	.word	0x08039250
 802c76c:	2000128c 	.word	0x2000128c

0802c770 <LCDLight>:


//========================================================================
void LCDLight( int bOnOff )
//========================================================================
{
 802c770:	b590      	push	{r4, r7, lr}
 802c772:	b08d      	sub	sp, #52	; 0x34
 802c774:	af04      	add	r7, sp, #16
 802c776:	6078      	str	r0, [r7, #4]
    if ( g_bInitLCD == false ) return;
 802c778:	4b16      	ldr	r3, [pc, #88]	; (802c7d4 <LCDLight+0x64>)
 802c77a:	681b      	ldr	r3, [r3, #0]
 802c77c:	2b00      	cmp	r3, #0
 802c77e:	d024      	beq.n	802c7ca <LCDLight+0x5a>

    //  Area : ( 1, 1 ) ~ ( 11, 7 )
    //  Level : 0(Off) / 1(On) ( Light On/Off )

    const uint8_t bmpLight[2][7] = {
 802c780:	4b15      	ldr	r3, [pc, #84]	; (802c7d8 <LCDLight+0x68>)
 802c782:	f107 040c 	add.w	r4, r7, #12
 802c786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802c788:	c407      	stmia	r4!, {r0, r1, r2}
 802c78a:	8023      	strh	r3, [r4, #0]
        { 0x00, 0x10, 0xF0, 0xF0, 0xF0, 0x10, 0x00, },      // Light Off
        { 0x02, 0x14, 0xF0, 0xF7, 0xF0, 0x14, 0x02, },      // Light On
    };

    const uint8_t *pBmp = NULL;
 802c78c:	2300      	movs	r3, #0
 802c78e:	61fb      	str	r3, [r7, #28]

    if ( bOnOff )
 802c790:	687b      	ldr	r3, [r7, #4]
 802c792:	2b00      	cmp	r3, #0
 802c794:	d004      	beq.n	802c7a0 <LCDLight+0x30>
    {
        //  On
        pBmp = bmpLight[1];
 802c796:	f107 030c 	add.w	r3, r7, #12
 802c79a:	3307      	adds	r3, #7
 802c79c:	61fb      	str	r3, [r7, #28]
 802c79e:	e002      	b.n	802c7a6 <LCDLight+0x36>
    }
    else
    {
        //  Off
        pBmp = bmpLight[0];
 802c7a0:	f107 030c 	add.w	r3, r7, #12
 802c7a4:	61fb      	str	r3, [r7, #28]
    }

    display.drawBitBuf( 90, 0, pBmp, 7, 8, WHITE, BLACK );
 802c7a6:	2300      	movs	r3, #0
 802c7a8:	9303      	str	r3, [sp, #12]
 802c7aa:	2301      	movs	r3, #1
 802c7ac:	9302      	str	r3, [sp, #8]
 802c7ae:	2308      	movs	r3, #8
 802c7b0:	9301      	str	r3, [sp, #4]
 802c7b2:	2307      	movs	r3, #7
 802c7b4:	9300      	str	r3, [sp, #0]
 802c7b6:	69fb      	ldr	r3, [r7, #28]
 802c7b8:	2200      	movs	r2, #0
 802c7ba:	215a      	movs	r1, #90	; 0x5a
 802c7bc:	4807      	ldr	r0, [pc, #28]	; (802c7dc <LCDLight+0x6c>)
 802c7be:	f7fe ff0a 	bl	802b5d6 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt>
    display.display();
 802c7c2:	4806      	ldr	r0, [pc, #24]	; (802c7dc <LCDLight+0x6c>)
 802c7c4:	f7ff f9ea 	bl	802bb9c <_ZN16Adafruit_SSD13067displayEv>
 802c7c8:	e000      	b.n	802c7cc <LCDLight+0x5c>
    if ( g_bInitLCD == false ) return;
 802c7ca:	bf00      	nop
}
 802c7cc:	3724      	adds	r7, #36	; 0x24
 802c7ce:	46bd      	mov	sp, r7
 802c7d0:	bd90      	pop	{r4, r7, pc}
 802c7d2:	bf00      	nop
 802c7d4:	200012ac 	.word	0x200012ac
 802c7d8:	0803930c 	.word	0x0803930c
 802c7dc:	2000128c 	.word	0x2000128c

0802c7e0 <LCDSpeaker>:


//========================================================================
void LCDSpeaker( int nLevel )
//========================================================================
{
 802c7e0:	b580      	push	{r7, lr}
 802c7e2:	b09e      	sub	sp, #120	; 0x78
 802c7e4:	af04      	add	r7, sp, #16
 802c7e6:	6078      	str	r0, [r7, #4]
    if ( g_bInitLCD == false ) return;
 802c7e8:	4b19      	ldr	r3, [pc, #100]	; (802c850 <LCDSpeaker+0x70>)
 802c7ea:	681b      	ldr	r3, [r3, #0]
 802c7ec:	2b00      	cmp	r3, #0
 802c7ee:	d02b      	beq.n	802c848 <LCDSpeaker+0x68>

    //  Area : ( 1, 1 ) ~ ( 11, 7 )
    //  Level : 0(Off) / 1(On) ( Light On/Off )

    //  Speaker Icon ( 11 X 9 )
    const uint8_t bmpSpk[4][22] = {
 802c7f0:	4a18      	ldr	r2, [pc, #96]	; (802c854 <LCDSpeaker+0x74>)
 802c7f2:	f107 030c 	add.w	r3, r7, #12
 802c7f6:	4611      	mov	r1, r2
 802c7f8:	2258      	movs	r2, #88	; 0x58
 802c7fa:	4618      	mov	r0, r3
 802c7fc:	f00b f9c0 	bl	8037b80 <memcpy>
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  },   // Speaker On ( Level 2 )
        { 0x38, 0x38, 0x7C, 0xFE, 0x00, 0x38, 0x82, 0x7C, 0x01, 0x82, 0x7C,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  },   // Speaker On ( Level 3 )
    };

    const uint8_t *pBmp = NULL;
 802c800:	2300      	movs	r3, #0
 802c802:	667b      	str	r3, [r7, #100]	; 0x64

    if ( nLevel < 0 && nLevel > 3 ) nLevel = 0;
 802c804:	687b      	ldr	r3, [r7, #4]
 802c806:	2b00      	cmp	r3, #0
 802c808:	da04      	bge.n	802c814 <LCDSpeaker+0x34>
 802c80a:	687b      	ldr	r3, [r7, #4]
 802c80c:	2b03      	cmp	r3, #3
 802c80e:	dd01      	ble.n	802c814 <LCDSpeaker+0x34>
 802c810:	2300      	movs	r3, #0
 802c812:	607b      	str	r3, [r7, #4]

    //========================================================================
    pBmp = bmpSpk[nLevel];
 802c814:	f107 020c 	add.w	r2, r7, #12
 802c818:	687b      	ldr	r3, [r7, #4]
 802c81a:	2116      	movs	r1, #22
 802c81c:	fb01 f303 	mul.w	r3, r1, r3
 802c820:	4413      	add	r3, r2
 802c822:	667b      	str	r3, [r7, #100]	; 0x64
    //========================================================================

    display.drawBitBuf( 50, 0, pBmp, 11, 9, WHITE, BLACK );
 802c824:	2300      	movs	r3, #0
 802c826:	9303      	str	r3, [sp, #12]
 802c828:	2301      	movs	r3, #1
 802c82a:	9302      	str	r3, [sp, #8]
 802c82c:	2309      	movs	r3, #9
 802c82e:	9301      	str	r3, [sp, #4]
 802c830:	230b      	movs	r3, #11
 802c832:	9300      	str	r3, [sp, #0]
 802c834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802c836:	2200      	movs	r2, #0
 802c838:	2132      	movs	r1, #50	; 0x32
 802c83a:	4807      	ldr	r0, [pc, #28]	; (802c858 <LCDSpeaker+0x78>)
 802c83c:	f7fe fecb 	bl	802b5d6 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt>
    display.display();
 802c840:	4805      	ldr	r0, [pc, #20]	; (802c858 <LCDSpeaker+0x78>)
 802c842:	f7ff f9ab 	bl	802bb9c <_ZN16Adafruit_SSD13067displayEv>
 802c846:	e000      	b.n	802c84a <LCDSpeaker+0x6a>
    if ( g_bInitLCD == false ) return;
 802c848:	bf00      	nop
}
 802c84a:	3768      	adds	r7, #104	; 0x68
 802c84c:	46bd      	mov	sp, r7
 802c84e:	bd80      	pop	{r7, pc}
 802c850:	200012ac 	.word	0x200012ac
 802c854:	0803931c 	.word	0x0803931c
 802c858:	2000128c 	.word	0x2000128c

0802c85c <LCDMenu>:


//========================================================================
void LCDMenu( void )
//========================================================================
{
 802c85c:	b580      	push	{r7, lr}
 802c85e:	af00      	add	r7, sp, #0
    if ( g_bInitLCD == false ) return;
 802c860:	4b09      	ldr	r3, [pc, #36]	; (802c888 <LCDMenu+0x2c>)
 802c862:	681b      	ldr	r3, [r3, #0]
 802c864:	2b00      	cmp	r3, #0
 802c866:	d00c      	beq.n	802c882 <LCDMenu+0x26>

    memcpy( buffer, bufMenu, sizeof( bufMenu ) );
 802c868:	4a08      	ldr	r2, [pc, #32]	; (802c88c <LCDMenu+0x30>)
 802c86a:	4b09      	ldr	r3, [pc, #36]	; (802c890 <LCDMenu+0x34>)
 802c86c:	4610      	mov	r0, r2
 802c86e:	4619      	mov	r1, r3
 802c870:	f44f 7300 	mov.w	r3, #512	; 0x200
 802c874:	461a      	mov	r2, r3
 802c876:	f00b f983 	bl	8037b80 <memcpy>
    display.display();
 802c87a:	4806      	ldr	r0, [pc, #24]	; (802c894 <LCDMenu+0x38>)
 802c87c:	f7ff f98e 	bl	802bb9c <_ZN16Adafruit_SSD13067displayEv>
 802c880:	e000      	b.n	802c884 <LCDMenu+0x28>
    if ( g_bInitLCD == false ) return;
 802c882:	bf00      	nop
}
 802c884:	bd80      	pop	{r7, pc}
 802c886:	bf00      	nop
 802c888:	200012ac 	.word	0x200012ac
 802c88c:	20000294 	.word	0x20000294
 802c890:	20000094 	.word	0x20000094
 802c894:	2000128c 	.word	0x2000128c

0802c898 <LCDMenuUpDown>:


//========================================================================
void    LCDMenuUpDown       ( int nUpDown ) //  0( Off ) / 1( ▲Up ) / 2( ▼Down ) / 3( ▲Up/▼Down ) 
//========================================================================
{
 802c898:	b580      	push	{r7, lr}
 802c89a:	b09e      	sub	sp, #120	; 0x78
 802c89c:	af04      	add	r7, sp, #16
 802c89e:	6078      	str	r0, [r7, #4]
    //  0( Off ) / 1( ▲Up ) / 2(       ) / 3( ▲Up   ) 
    //                           ▼Down        ▼Down 

    if ( g_bInitLCD == false ) return;
 802c8a0:	4b19      	ldr	r3, [pc, #100]	; (802c908 <LCDMenuUpDown+0x70>)
 802c8a2:	681b      	ldr	r3, [r3, #0]
 802c8a4:	2b00      	cmp	r3, #0
 802c8a6:	d02b      	beq.n	802c900 <LCDMenuUpDown+0x68>

    //  Area : ( 2, 16 ) ~ ( 13, 32 )
    //  Level : 0(Off) / 1(On) ( Light On/Off )

    //  Speaker Icon ( 11 X 16 )
    const uint8_t bmpMenuUpDown[4][22] = {
 802c8a8:	4a18      	ldr	r2, [pc, #96]	; (802c90c <LCDMenuUpDown+0x74>)
 802c8aa:	f107 030c 	add.w	r3, r7, #12
 802c8ae:	4611      	mov	r1, r2
 802c8b0:	2258      	movs	r2, #88	; 0x58
 802c8b2:	4618      	mov	r0, r3
 802c8b4:	f00b f964 	bl	8037b80 <memcpy>
          0x02, 0x06, 0x0E, 0x1E, 0x3E, 0x7E, 0x3E, 0x1E, 0x0E, 0x06, 0x02 },           //  2 ( ▼Down )
        { 0x40, 0x60, 0x70, 0x78, 0x7C, 0x7E, 0x7C, 0x78, 0x70, 0x60, 0x40,             //  3 ( ▲Up )
          0x02, 0x06, 0x0E, 0x1E, 0x3E, 0x7E, 0x3E, 0x1E, 0x0E, 0x06, 0x02 },           //    ( ▼Down )
    };

    const uint8_t* pBmp = NULL;
 802c8b8:	2300      	movs	r3, #0
 802c8ba:	667b      	str	r3, [r7, #100]	; 0x64

    if ( nUpDown < 0 && nUpDown > 3 ) nUpDown = 0;
 802c8bc:	687b      	ldr	r3, [r7, #4]
 802c8be:	2b00      	cmp	r3, #0
 802c8c0:	da04      	bge.n	802c8cc <LCDMenuUpDown+0x34>
 802c8c2:	687b      	ldr	r3, [r7, #4]
 802c8c4:	2b03      	cmp	r3, #3
 802c8c6:	dd01      	ble.n	802c8cc <LCDMenuUpDown+0x34>
 802c8c8:	2300      	movs	r3, #0
 802c8ca:	607b      	str	r3, [r7, #4]

    pBmp = bmpMenuUpDown[nUpDown];
 802c8cc:	f107 020c 	add.w	r2, r7, #12
 802c8d0:	687b      	ldr	r3, [r7, #4]
 802c8d2:	2116      	movs	r1, #22
 802c8d4:	fb01 f303 	mul.w	r3, r1, r3
 802c8d8:	4413      	add	r3, r2
 802c8da:	667b      	str	r3, [r7, #100]	; 0x64

    display.drawBitBuf( 5, 13, pBmp, 11, 16, WHITE, BLACK );
 802c8dc:	2300      	movs	r3, #0
 802c8de:	9303      	str	r3, [sp, #12]
 802c8e0:	2301      	movs	r3, #1
 802c8e2:	9302      	str	r3, [sp, #8]
 802c8e4:	2310      	movs	r3, #16
 802c8e6:	9301      	str	r3, [sp, #4]
 802c8e8:	230b      	movs	r3, #11
 802c8ea:	9300      	str	r3, [sp, #0]
 802c8ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802c8ee:	220d      	movs	r2, #13
 802c8f0:	2105      	movs	r1, #5
 802c8f2:	4807      	ldr	r0, [pc, #28]	; (802c910 <LCDMenuUpDown+0x78>)
 802c8f4:	f7fe fe6f 	bl	802b5d6 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt>
    display.display();
 802c8f8:	4805      	ldr	r0, [pc, #20]	; (802c910 <LCDMenuUpDown+0x78>)
 802c8fa:	f7ff f94f 	bl	802bb9c <_ZN16Adafruit_SSD13067displayEv>
 802c8fe:	e000      	b.n	802c902 <LCDMenuUpDown+0x6a>
    if ( g_bInitLCD == false ) return;
 802c900:	bf00      	nop
}
 802c902:	3768      	adds	r7, #104	; 0x68
 802c904:	46bd      	mov	sp, r7
 802c906:	bd80      	pop	{r7, pc}
 802c908:	200012ac 	.word	0x200012ac
 802c90c:	08039374 	.word	0x08039374
 802c910:	2000128c 	.word	0x2000128c

0802c914 <LCDSetCursor>:


//========================================================================
void LCDSetCursor( int x, int y )
//========================================================================
{
 802c914:	b580      	push	{r7, lr}
 802c916:	b082      	sub	sp, #8
 802c918:	af00      	add	r7, sp, #0
 802c91a:	6078      	str	r0, [r7, #4]
 802c91c:	6039      	str	r1, [r7, #0]
    if ( g_bInitLCD == false ) return;
 802c91e:	4b08      	ldr	r3, [pc, #32]	; (802c940 <LCDSetCursor+0x2c>)
 802c920:	681b      	ldr	r3, [r3, #0]
 802c922:	2b00      	cmp	r3, #0
 802c924:	d008      	beq.n	802c938 <LCDSetCursor+0x24>

    display.setCursor( x, y );
 802c926:	687b      	ldr	r3, [r7, #4]
 802c928:	b21b      	sxth	r3, r3
 802c92a:	683a      	ldr	r2, [r7, #0]
 802c92c:	b212      	sxth	r2, r2
 802c92e:	4619      	mov	r1, r3
 802c930:	4804      	ldr	r0, [pc, #16]	; (802c944 <LCDSetCursor+0x30>)
 802c932:	f7fe fec8 	bl	802b6c6 <_ZN12Adafruit_GFX9setCursorEss>
 802c936:	e000      	b.n	802c93a <LCDSetCursor+0x26>
    if ( g_bInitLCD == false ) return;
 802c938:	bf00      	nop
}
 802c93a:	3708      	adds	r7, #8
 802c93c:	46bd      	mov	sp, r7
 802c93e:	bd80      	pop	{r7, pc}
 802c940:	200012ac 	.word	0x200012ac
 802c944:	2000128c 	.word	0x2000128c

0802c948 <LCDEnableDebug>:

//========================================================================
void    LCDEnableDebug		( int bEnable )  		//  print LCD Display
//========================================================================
{
 802c948:	b580      	push	{r7, lr}
 802c94a:	b082      	sub	sp, #8
 802c94c:	af00      	add	r7, sp, #0
 802c94e:	6078      	str	r0, [r7, #4]
    if ( g_bInitLCD == false ) return;
 802c950:	4b06      	ldr	r3, [pc, #24]	; (802c96c <LCDEnableDebug+0x24>)
 802c952:	681b      	ldr	r3, [r3, #0]
 802c954:	2b00      	cmp	r3, #0
 802c956:	d004      	beq.n	802c962 <LCDEnableDebug+0x1a>

    display.debug(bEnable);		//	LCD Debug Print
 802c958:	6879      	ldr	r1, [r7, #4]
 802c95a:	4805      	ldr	r0, [pc, #20]	; (802c970 <LCDEnableDebug+0x28>)
 802c95c:	f7fe ff09 	bl	802b772 <_ZN16Adafruit_SSD13065debugEi>
 802c960:	e000      	b.n	802c964 <LCDEnableDebug+0x1c>
    if ( g_bInitLCD == false ) return;
 802c962:	bf00      	nop
}
 802c964:	3708      	adds	r7, #8
 802c966:	46bd      	mov	sp, r7
 802c968:	bd80      	pop	{r7, pc}
 802c96a:	bf00      	nop
 802c96c:	200012ac 	.word	0x200012ac
 802c970:	2000128c 	.word	0x2000128c

0802c974 <LCDPrintf>:

//========================================================================
void LCDPrintf( char * str )
//========================================================================
{
 802c974:	b580      	push	{r7, lr}
 802c976:	b086      	sub	sp, #24
 802c978:	af02      	add	r7, sp, #8
 802c97a:	6078      	str	r0, [r7, #4]
    if ( g_bInitLCD == false ) return;
 802c97c:	4b14      	ldr	r3, [pc, #80]	; (802c9d0 <LCDPrintf+0x5c>)
 802c97e:	681b      	ldr	r3, [r3, #0]
 802c980:	2b00      	cmp	r3, #0
 802c982:	d020      	beq.n	802c9c6 <LCDPrintf+0x52>
//    display.clearDisplay();

    //  (0, 11) ~ (128, 32 )
    int16_t x, y;

    display.getCursor( &x, &y );
 802c984:	f107 020c 	add.w	r2, r7, #12
 802c988:	f107 030e 	add.w	r3, r7, #14
 802c98c:	4619      	mov	r1, r3
 802c98e:	4811      	ldr	r0, [pc, #68]	; (802c9d4 <LCDPrintf+0x60>)
 802c990:	f7fe fead 	bl	802b6ee <_ZN12Adafruit_GFX9getCursorEPsS0_>

    //	글씨 출력 영역 Clear
    display.fillRect( x, 11, 128 - x, 21, 0 );    //  Clear
 802c994:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 802c998:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802c99c:	b29b      	uxth	r3, r3
 802c99e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 802c9a2:	b29b      	uxth	r3, r3
 802c9a4:	b21b      	sxth	r3, r3
 802c9a6:	2200      	movs	r2, #0
 802c9a8:	9201      	str	r2, [sp, #4]
 802c9aa:	2215      	movs	r2, #21
 802c9ac:	9200      	str	r2, [sp, #0]
 802c9ae:	220b      	movs	r2, #11
 802c9b0:	4808      	ldr	r0, [pc, #32]	; (802c9d4 <LCDPrintf+0x60>)
 802c9b2:	f7fe fdc1 	bl	802b538 <_ZN12Adafruit_GFX8fillRectEsssst>

//    display.setCursor( 28, 8 );
    display.printf( str );
 802c9b6:	6879      	ldr	r1, [r7, #4]
 802c9b8:	4806      	ldr	r0, [pc, #24]	; (802c9d4 <LCDPrintf+0x60>)
 802c9ba:	f7ff fd25 	bl	802c408 <_ZN16Adafruit_SSD13066printfEPKc>
    display.display();
 802c9be:	4805      	ldr	r0, [pc, #20]	; (802c9d4 <LCDPrintf+0x60>)
 802c9c0:	f7ff f8ec 	bl	802bb9c <_ZN16Adafruit_SSD13067displayEv>
 802c9c4:	e000      	b.n	802c9c8 <LCDPrintf+0x54>
    if ( g_bInitLCD == false ) return;
 802c9c6:	bf00      	nop
}
 802c9c8:	3710      	adds	r7, #16
 802c9ca:	46bd      	mov	sp, r7
 802c9cc:	bd80      	pop	{r7, pc}
 802c9ce:	bf00      	nop
 802c9d0:	200012ac 	.word	0x200012ac
 802c9d4:	2000128c 	.word	0x2000128c

0802c9d8 <LCDPrintfXY>:

//========================================================================
void    LCDPrintfXY         ( int x, int y, char *str )  //  print LCD Display
//========================================================================
{
 802c9d8:	b580      	push	{r7, lr}
 802c9da:	b084      	sub	sp, #16
 802c9dc:	af00      	add	r7, sp, #0
 802c9de:	60f8      	str	r0, [r7, #12]
 802c9e0:	60b9      	str	r1, [r7, #8]
 802c9e2:	607a      	str	r2, [r7, #4]
    if ( g_bInitLCD == false ) return;
 802c9e4:	4b08      	ldr	r3, [pc, #32]	; (802ca08 <LCDPrintfXY+0x30>)
 802c9e6:	681b      	ldr	r3, [r3, #0]
 802c9e8:	2b00      	cmp	r3, #0
 802c9ea:	d009      	beq.n	802ca00 <LCDPrintfXY+0x28>

	//  Main화면 Clear
	LCDClearMain();
 802c9ec:	f000 f822 	bl	802ca34 <LCDClearMain>

    LCDSetCursor( x, y );
 802c9f0:	68b9      	ldr	r1, [r7, #8]
 802c9f2:	68f8      	ldr	r0, [r7, #12]
 802c9f4:	f7ff ff8e 	bl	802c914 <LCDSetCursor>

    LCDPrintf( str );
 802c9f8:	6878      	ldr	r0, [r7, #4]
 802c9fa:	f7ff ffbb 	bl	802c974 <LCDPrintf>
 802c9fe:	e000      	b.n	802ca02 <LCDPrintfXY+0x2a>
    if ( g_bInitLCD == false ) return;
 802ca00:	bf00      	nop
}
 802ca02:	3710      	adds	r7, #16
 802ca04:	46bd      	mov	sp, r7
 802ca06:	bd80      	pop	{r7, pc}
 802ca08:	200012ac 	.word	0x200012ac

0802ca0c <LCDClear>:

//========================================================================
void LCDClear( void )
//========================================================================
{
 802ca0c:	b580      	push	{r7, lr}
 802ca0e:	af00      	add	r7, sp, #0
    if ( g_bInitLCD == false ) return;
 802ca10:	4b06      	ldr	r3, [pc, #24]	; (802ca2c <LCDClear+0x20>)
 802ca12:	681b      	ldr	r3, [r3, #0]
 802ca14:	2b00      	cmp	r3, #0
 802ca16:	d006      	beq.n	802ca26 <LCDClear+0x1a>

    display.clearDisplay();
 802ca18:	4805      	ldr	r0, [pc, #20]	; (802ca30 <LCDClear+0x24>)
 802ca1a:	f7ff f8ef 	bl	802bbfc <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.display();
 802ca1e:	4804      	ldr	r0, [pc, #16]	; (802ca30 <LCDClear+0x24>)
 802ca20:	f7ff f8bc 	bl	802bb9c <_ZN16Adafruit_SSD13067displayEv>
 802ca24:	e000      	b.n	802ca28 <LCDClear+0x1c>
    if ( g_bInitLCD == false ) return;
 802ca26:	bf00      	nop
}
 802ca28:	bd80      	pop	{r7, pc}
 802ca2a:	bf00      	nop
 802ca2c:	200012ac 	.word	0x200012ac
 802ca30:	2000128c 	.word	0x2000128c

0802ca34 <LCDClearMain>:
}

//========================================================================
void LCDClearMain( void )
//========================================================================
{
 802ca34:	b580      	push	{r7, lr}
 802ca36:	b082      	sub	sp, #8
 802ca38:	af02      	add	r7, sp, #8
    //  Main 영역 Clear
    if ( g_bInitLCD == false ) return;
 802ca3a:	4b09      	ldr	r3, [pc, #36]	; (802ca60 <LCDClearMain+0x2c>)
 802ca3c:	681b      	ldr	r3, [r3, #0]
 802ca3e:	2b00      	cmp	r3, #0
 802ca40:	d00a      	beq.n	802ca58 <LCDClearMain+0x24>

    display.fillRect( 0, 10, 128, 22, BLACK );
 802ca42:	2300      	movs	r3, #0
 802ca44:	9301      	str	r3, [sp, #4]
 802ca46:	2316      	movs	r3, #22
 802ca48:	9300      	str	r3, [sp, #0]
 802ca4a:	2380      	movs	r3, #128	; 0x80
 802ca4c:	220a      	movs	r2, #10
 802ca4e:	2100      	movs	r1, #0
 802ca50:	4804      	ldr	r0, [pc, #16]	; (802ca64 <LCDClearMain+0x30>)
 802ca52:	f7fe fd71 	bl	802b538 <_ZN12Adafruit_GFX8fillRectEsssst>
 802ca56:	e000      	b.n	802ca5a <LCDClearMain+0x26>
    if ( g_bInitLCD == false ) return;
 802ca58:	bf00      	nop
//    display.display();
}
 802ca5a:	46bd      	mov	sp, r7
 802ca5c:	bd80      	pop	{r7, pc}
 802ca5e:	bf00      	nop
 802ca60:	200012ac 	.word	0x200012ac
 802ca64:	2000128c 	.word	0x2000128c

0802ca68 <LCDDrawRect>:

//========================================================================
void    LCDDrawRect        ( int x, int y, int w, int h, int color )  //  Clear LCD Display
//========================================================================
{
 802ca68:	b590      	push	{r4, r7, lr}
 802ca6a:	b087      	sub	sp, #28
 802ca6c:	af02      	add	r7, sp, #8
 802ca6e:	60f8      	str	r0, [r7, #12]
 802ca70:	60b9      	str	r1, [r7, #8]
 802ca72:	607a      	str	r2, [r7, #4]
 802ca74:	603b      	str	r3, [r7, #0]
    display.fillRect( x, y, w, h, color );
 802ca76:	68fb      	ldr	r3, [r7, #12]
 802ca78:	b219      	sxth	r1, r3
 802ca7a:	68bb      	ldr	r3, [r7, #8]
 802ca7c:	b218      	sxth	r0, r3
 802ca7e:	687b      	ldr	r3, [r7, #4]
 802ca80:	b21c      	sxth	r4, r3
 802ca82:	683b      	ldr	r3, [r7, #0]
 802ca84:	b21b      	sxth	r3, r3
 802ca86:	6a3a      	ldr	r2, [r7, #32]
 802ca88:	b292      	uxth	r2, r2
 802ca8a:	9201      	str	r2, [sp, #4]
 802ca8c:	9300      	str	r3, [sp, #0]
 802ca8e:	4623      	mov	r3, r4
 802ca90:	4602      	mov	r2, r0
 802ca92:	4805      	ldr	r0, [pc, #20]	; (802caa8 <LCDDrawRect+0x40>)
 802ca94:	f7fe fd50 	bl	802b538 <_ZN12Adafruit_GFX8fillRectEsssst>
    display.display();
 802ca98:	4803      	ldr	r0, [pc, #12]	; (802caa8 <LCDDrawRect+0x40>)
 802ca9a:	f7ff f87f 	bl	802bb9c <_ZN16Adafruit_SSD13067displayEv>
}
 802ca9e:	bf00      	nop
 802caa0:	3714      	adds	r7, #20
 802caa2:	46bd      	mov	sp, r7
 802caa4:	bd90      	pop	{r4, r7, pc}
 802caa6:	bf00      	nop
 802caa8:	2000128c 	.word	0x2000128c

0802caac <_Z41__static_initialization_and_destruction_0ii>:
    display.drawBitmap( 30, 16, logo16_glcd_bmp, 16, 16, 1 );
    display.display();
    HAL_Delay( 500 );
#endif

}
 802caac:	b580      	push	{r7, lr}
 802caae:	b082      	sub	sp, #8
 802cab0:	af00      	add	r7, sp, #0
 802cab2:	6078      	str	r0, [r7, #4]
 802cab4:	6039      	str	r1, [r7, #0]
 802cab6:	687b      	ldr	r3, [r7, #4]
 802cab8:	2b01      	cmp	r3, #1
 802caba:	d108      	bne.n	802cace <_Z41__static_initialization_and_destruction_0ii+0x22>
 802cabc:	683b      	ldr	r3, [r7, #0]
 802cabe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802cac2:	4293      	cmp	r3, r2
 802cac4:	d103      	bne.n	802cace <_Z41__static_initialization_and_destruction_0ii+0x22>
Adafruit_SSD1306 display( OLED_RESET );
 802cac6:	2100      	movs	r1, #0
 802cac8:	4803      	ldr	r0, [pc, #12]	; (802cad8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 802caca:	f7fe ff49 	bl	802b960 <_ZN16Adafruit_SSD1306C1Ea>
}
 802cace:	bf00      	nop
 802cad0:	3708      	adds	r7, #8
 802cad2:	46bd      	mov	sp, r7
 802cad4:	bd80      	pop	{r7, pc}
 802cad6:	bf00      	nop
 802cad8:	2000128c 	.word	0x2000128c

0802cadc <_GLOBAL__sub_I_Buffer_CMD>:
 802cadc:	b580      	push	{r7, lr}
 802cade:	af00      	add	r7, sp, #0
 802cae0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802cae4:	2001      	movs	r0, #1
 802cae6:	f7ff ffe1 	bl	802caac <_Z41__static_initialization_and_destruction_0ii>
 802caea:	bd80      	pop	{r7, pc}

0802caec <PHan_CnvCodeWan2Johab>:
//========================================================================

//========================================================================
uint16_t PHan_CnvCodeWan2Johab(uint16_t WanCode)
//========================================================================
{
 802caec:	b480      	push	{r7}
 802caee:	b085      	sub	sp, #20
 802caf0:	af00      	add	r7, sp, #0
 802caf2:	4603      	mov	r3, r0
 802caf4:	80fb      	strh	r3, [r7, #6]
	uint16_t	index;
	uint16_t	hcode, lcode;

	hcode = (WanCode >> 8) & 0xFF;
 802caf6:	88fb      	ldrh	r3, [r7, #6]
 802caf8:	0a1b      	lsrs	r3, r3, #8
 802cafa:	81fb      	strh	r3, [r7, #14]
	lcode = WanCode & 0x0ff;
 802cafc:	88fb      	ldrh	r3, [r7, #6]
 802cafe:	b2db      	uxtb	r3, r3
 802cb00:	81bb      	strh	r3, [r7, #12]

	index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 802cb02:	89fb      	ldrh	r3, [r7, #14]
 802cb04:	461a      	mov	r2, r3
 802cb06:	0052      	lsls	r2, r2, #1
 802cb08:	441a      	add	r2, r3
 802cb0a:	0112      	lsls	r2, r2, #4
 802cb0c:	1ad3      	subs	r3, r2, r3
 802cb0e:	005b      	lsls	r3, r3, #1
 802cb10:	b29a      	uxth	r2, r3
 802cb12:	89bb      	ldrh	r3, [r7, #12]
 802cb14:	4413      	add	r3, r2
 802cb16:	b29b      	uxth	r3, r3
 802cb18:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 802cb1c:	3b41      	subs	r3, #65	; 0x41
 802cb1e:	817b      	strh	r3, [r7, #10]

	return wWanToJohabTable[index];
 802cb20:	897b      	ldrh	r3, [r7, #10]
 802cb22:	4a04      	ldr	r2, [pc, #16]	; (802cb34 <PHan_CnvCodeWan2Johab+0x48>)
 802cb24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 802cb28:	4618      	mov	r0, r3
 802cb2a:	3714      	adds	r7, #20
 802cb2c:	46bd      	mov	sp, r7
 802cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb32:	4770      	bx	lr
 802cb34:	0803b7b8 	.word	0x0803b7b8

0802cb38 <PHan_HanFontLoad>:
static uint8_t uChoType, uJooType, uJonType;

//========================================================================
void PHan_HanFontLoad( const uint8_t *HanCode, PHAN_FONT_OBJ *FontPtr )   /* 한글 일반 폰트 생성 */
//========================================================================
{
 802cb38:	b580      	push	{r7, lr}
 802cb3a:	b084      	sub	sp, #16
 802cb3c:	af00      	add	r7, sp, #0
 802cb3e:	6078      	str	r0, [r7, #4]
 802cb40:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint16_t wHanCode;

	FontPtr->Code_Type = PHAN_HANGUL_CODE;
 802cb42:	683b      	ldr	r3, [r7, #0]
 802cb44:	2201      	movs	r2, #1
 802cb46:	70da      	strb	r2, [r3, #3]
	FontPtr->Size_Char = 2;
 802cb48:	683b      	ldr	r3, [r7, #0]
 802cb4a:	2202      	movs	r2, #2
 802cb4c:	709a      	strb	r2, [r3, #2]

	wHanCode = (uint16_t)HanCode[0] << 8 | (uint16_t)HanCode[1] & 0x00FF;
 802cb4e:	687b      	ldr	r3, [r7, #4]
 802cb50:	781b      	ldrb	r3, [r3, #0]
 802cb52:	021b      	lsls	r3, r3, #8
 802cb54:	b21a      	sxth	r2, r3
 802cb56:	687b      	ldr	r3, [r7, #4]
 802cb58:	3301      	adds	r3, #1
 802cb5a:	781b      	ldrb	r3, [r3, #0]
 802cb5c:	b21b      	sxth	r3, r3
 802cb5e:	4313      	orrs	r3, r2
 802cb60:	b21b      	sxth	r3, r3
 802cb62:	81bb      	strh	r3, [r7, #12]

//	printf("%c%c : 0x%02X%02X\n", HanCode[0], HanCode[1], HanCode[0], HanCode[1] );

	wHanCode = PHan_CnvCodeWan2Johab( wHanCode );
 802cb64:	89bb      	ldrh	r3, [r7, #12]
 802cb66:	4618      	mov	r0, r3
 802cb68:	f7ff ffc0 	bl	802caec <PHan_CnvCodeWan2Johab>
 802cb6c:	4603      	mov	r3, r0
 802cb6e:	81bb      	strh	r3, [r7, #12]
	//printf("a %x \n", wHanCode );

	//seperate phoneme code
	_uChosung	=	( wHanCode >> 10 ) & 0x001F;	//	Chosung code
 802cb70:	89bb      	ldrh	r3, [r7, #12]
 802cb72:	0a9b      	lsrs	r3, r3, #10
 802cb74:	b29b      	uxth	r3, r3
 802cb76:	b2db      	uxtb	r3, r3
 802cb78:	f003 031f 	and.w	r3, r3, #31
 802cb7c:	b2da      	uxtb	r2, r3
 802cb7e:	4b60      	ldr	r3, [pc, #384]	; (802cd00 <PHan_HanFontLoad+0x1c8>)
 802cb80:	701a      	strb	r2, [r3, #0]
	_uJoongsung	=	( wHanCode >> 5 ) & 0x001F;		//	Joongsung code
 802cb82:	89bb      	ldrh	r3, [r7, #12]
 802cb84:	095b      	lsrs	r3, r3, #5
 802cb86:	b29b      	uxth	r3, r3
 802cb88:	b2db      	uxtb	r3, r3
 802cb8a:	f003 031f 	and.w	r3, r3, #31
 802cb8e:	b2da      	uxtb	r2, r3
 802cb90:	4b5c      	ldr	r3, [pc, #368]	; (802cd04 <PHan_HanFontLoad+0x1cc>)
 802cb92:	701a      	strb	r2, [r3, #0]
	_uJongsung	=	wHanCode & 0x001F;				//	Jongsung code
 802cb94:	89bb      	ldrh	r3, [r7, #12]
 802cb96:	b2db      	uxtb	r3, r3
 802cb98:	f003 031f 	and.w	r3, r3, #31
 802cb9c:	b2da      	uxtb	r2, r3
 802cb9e:	4b5a      	ldr	r3, [pc, #360]	; (802cd08 <PHan_HanFontLoad+0x1d0>)
 802cba0:	701a      	strb	r2, [r3, #0]

	//make font index
	uChosung	=	ChoIdxTbl[_uChosung];			//	Chosung index
 802cba2:	4b57      	ldr	r3, [pc, #348]	; (802cd00 <PHan_HanFontLoad+0x1c8>)
 802cba4:	781b      	ldrb	r3, [r3, #0]
 802cba6:	461a      	mov	r2, r3
 802cba8:	4b58      	ldr	r3, [pc, #352]	; (802cd0c <PHan_HanFontLoad+0x1d4>)
 802cbaa:	5c9a      	ldrb	r2, [r3, r2]
 802cbac:	4b58      	ldr	r3, [pc, #352]	; (802cd10 <PHan_HanFontLoad+0x1d8>)
 802cbae:	701a      	strb	r2, [r3, #0]
	uJoongsung	=	JooIdxTbl[_uJoongsung];			//	Joongsung index
 802cbb0:	4b54      	ldr	r3, [pc, #336]	; (802cd04 <PHan_HanFontLoad+0x1cc>)
 802cbb2:	781b      	ldrb	r3, [r3, #0]
 802cbb4:	461a      	mov	r2, r3
 802cbb6:	4b57      	ldr	r3, [pc, #348]	; (802cd14 <PHan_HanFontLoad+0x1dc>)
 802cbb8:	5c9a      	ldrb	r2, [r3, r2]
 802cbba:	4b57      	ldr	r3, [pc, #348]	; (802cd18 <PHan_HanFontLoad+0x1e0>)
 802cbbc:	701a      	strb	r2, [r3, #0]
	uJongsung	=	JonIdxTbl[_uJongsung];			//	Jongsung index
 802cbbe:	4b52      	ldr	r3, [pc, #328]	; (802cd08 <PHan_HanFontLoad+0x1d0>)
 802cbc0:	781b      	ldrb	r3, [r3, #0]
 802cbc2:	461a      	mov	r2, r3
 802cbc4:	4b55      	ldr	r3, [pc, #340]	; (802cd1c <PHan_HanFontLoad+0x1e4>)
 802cbc6:	5c9a      	ldrb	r2, [r3, r2]
 802cbc8:	4b55      	ldr	r3, [pc, #340]	; (802cd20 <PHan_HanFontLoad+0x1e8>)
 802cbca:	701a      	strb	r2, [r3, #0]

	//decide a character type (몇번째 벌을 사용할지 결정)
	uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung] : ChoTypeCaseJongNo[uJoongsung];
 802cbcc:	4b54      	ldr	r3, [pc, #336]	; (802cd20 <PHan_HanFontLoad+0x1e8>)
 802cbce:	781b      	ldrb	r3, [r3, #0]
 802cbd0:	2b00      	cmp	r3, #0
 802cbd2:	d005      	beq.n	802cbe0 <PHan_HanFontLoad+0xa8>
 802cbd4:	4b50      	ldr	r3, [pc, #320]	; (802cd18 <PHan_HanFontLoad+0x1e0>)
 802cbd6:	781b      	ldrb	r3, [r3, #0]
 802cbd8:	461a      	mov	r2, r3
 802cbda:	4b52      	ldr	r3, [pc, #328]	; (802cd24 <PHan_HanFontLoad+0x1ec>)
 802cbdc:	5c9b      	ldrb	r3, [r3, r2]
 802cbde:	e004      	b.n	802cbea <PHan_HanFontLoad+0xb2>
 802cbe0:	4b4d      	ldr	r3, [pc, #308]	; (802cd18 <PHan_HanFontLoad+0x1e0>)
 802cbe2:	781b      	ldrb	r3, [r3, #0]
 802cbe4:	461a      	mov	r2, r3
 802cbe6:	4b50      	ldr	r3, [pc, #320]	; (802cd28 <PHan_HanFontLoad+0x1f0>)
 802cbe8:	5c9b      	ldrb	r3, [r3, r2]
 802cbea:	4a50      	ldr	r2, [pc, #320]	; (802cd2c <PHan_HanFontLoad+0x1f4>)
 802cbec:	7013      	strb	r3, [r2, #0]
	//'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
	uJooType	=	( ( uChosung == 0 || uChosung == 1 || uChosung == 16 ) ? 0 : 1 ) + ( uJongsung ? 2 : 0 );
 802cbee:	4b48      	ldr	r3, [pc, #288]	; (802cd10 <PHan_HanFontLoad+0x1d8>)
 802cbf0:	781b      	ldrb	r3, [r3, #0]
 802cbf2:	2b00      	cmp	r3, #0
 802cbf4:	d009      	beq.n	802cc0a <PHan_HanFontLoad+0xd2>
 802cbf6:	4b46      	ldr	r3, [pc, #280]	; (802cd10 <PHan_HanFontLoad+0x1d8>)
 802cbf8:	781b      	ldrb	r3, [r3, #0]
 802cbfa:	2b01      	cmp	r3, #1
 802cbfc:	d005      	beq.n	802cc0a <PHan_HanFontLoad+0xd2>
 802cbfe:	4b44      	ldr	r3, [pc, #272]	; (802cd10 <PHan_HanFontLoad+0x1d8>)
 802cc00:	781b      	ldrb	r3, [r3, #0]
 802cc02:	2b10      	cmp	r3, #16
 802cc04:	d001      	beq.n	802cc0a <PHan_HanFontLoad+0xd2>
 802cc06:	2301      	movs	r3, #1
 802cc08:	e000      	b.n	802cc0c <PHan_HanFontLoad+0xd4>
 802cc0a:	2300      	movs	r3, #0
 802cc0c:	b2db      	uxtb	r3, r3
 802cc0e:	4a44      	ldr	r2, [pc, #272]	; (802cd20 <PHan_HanFontLoad+0x1e8>)
 802cc10:	7812      	ldrb	r2, [r2, #0]
 802cc12:	2a00      	cmp	r2, #0
 802cc14:	d001      	beq.n	802cc1a <PHan_HanFontLoad+0xe2>
 802cc16:	2202      	movs	r2, #2
 802cc18:	e000      	b.n	802cc1c <PHan_HanFontLoad+0xe4>
 802cc1a:	2200      	movs	r2, #0
 802cc1c:	4413      	add	r3, r2
 802cc1e:	b2da      	uxtb	r2, r3
 802cc20:	4b43      	ldr	r3, [pc, #268]	; (802cd30 <PHan_HanFontLoad+0x1f8>)
 802cc22:	701a      	strb	r2, [r3, #0]
	uJonType	=	JonType[uJoongsung];
 802cc24:	4b3c      	ldr	r3, [pc, #240]	; (802cd18 <PHan_HanFontLoad+0x1e0>)
 802cc26:	781b      	ldrb	r3, [r3, #0]
 802cc28:	461a      	mov	r2, r3
 802cc2a:	4b42      	ldr	r3, [pc, #264]	; (802cd34 <PHan_HanFontLoad+0x1fc>)
 802cc2c:	5c9a      	ldrb	r2, [r3, r2]
 802cc2e:	4b42      	ldr	r3, [pc, #264]	; (802cd38 <PHan_HanFontLoad+0x200>)
 802cc30:	701a      	strb	r2, [r3, #0]
	//		HanCode[0], HanCode[1], HanCode[0], HanCode[1],
	//		wHanCode, 
	//		_uChosung, _uJoongsung, _uJongsung,
	//		uChosung, uJoongsung, uJongsung );

	for ( i = 0; i < 32; i++ )
 802cc32:	2300      	movs	r3, #0
 802cc34:	73fb      	strb	r3, [r7, #15]
 802cc36:	e033      	b.n	802cca0 <PHan_HanFontLoad+0x168>
	{
		FontPtr->FontBuffer[i] = K_font[uChoType * 20 + uChosung][i];
 802cc38:	4b3c      	ldr	r3, [pc, #240]	; (802cd2c <PHan_HanFontLoad+0x1f4>)
 802cc3a:	781b      	ldrb	r3, [r3, #0]
 802cc3c:	461a      	mov	r2, r3
 802cc3e:	4613      	mov	r3, r2
 802cc40:	009b      	lsls	r3, r3, #2
 802cc42:	4413      	add	r3, r2
 802cc44:	009b      	lsls	r3, r3, #2
 802cc46:	461a      	mov	r2, r3
 802cc48:	4b31      	ldr	r3, [pc, #196]	; (802cd10 <PHan_HanFontLoad+0x1d8>)
 802cc4a:	781b      	ldrb	r3, [r3, #0]
 802cc4c:	18d1      	adds	r1, r2, r3
 802cc4e:	7bfa      	ldrb	r2, [r7, #15]
 802cc50:	7bfb      	ldrb	r3, [r7, #15]
 802cc52:	483a      	ldr	r0, [pc, #232]	; (802cd3c <PHan_HanFontLoad+0x204>)
 802cc54:	0149      	lsls	r1, r1, #5
 802cc56:	4401      	add	r1, r0
 802cc58:	440a      	add	r2, r1
 802cc5a:	7811      	ldrb	r1, [r2, #0]
 802cc5c:	683a      	ldr	r2, [r7, #0]
 802cc5e:	4413      	add	r3, r2
 802cc60:	460a      	mov	r2, r1
 802cc62:	711a      	strb	r2, [r3, #4]
		FontPtr->FontBuffer[i] |= K_font[160 + uJooType * 22 + uJoongsung][i];
 802cc64:	7bfb      	ldrb	r3, [r7, #15]
 802cc66:	683a      	ldr	r2, [r7, #0]
 802cc68:	4413      	add	r3, r2
 802cc6a:	7919      	ldrb	r1, [r3, #4]
 802cc6c:	4b30      	ldr	r3, [pc, #192]	; (802cd30 <PHan_HanFontLoad+0x1f8>)
 802cc6e:	781b      	ldrb	r3, [r3, #0]
 802cc70:	461a      	mov	r2, r3
 802cc72:	2316      	movs	r3, #22
 802cc74:	fb02 f303 	mul.w	r3, r2, r3
 802cc78:	33a0      	adds	r3, #160	; 0xa0
 802cc7a:	4a27      	ldr	r2, [pc, #156]	; (802cd18 <PHan_HanFontLoad+0x1e0>)
 802cc7c:	7812      	ldrb	r2, [r2, #0]
 802cc7e:	441a      	add	r2, r3
 802cc80:	7bfb      	ldrb	r3, [r7, #15]
 802cc82:	482e      	ldr	r0, [pc, #184]	; (802cd3c <PHan_HanFontLoad+0x204>)
 802cc84:	0152      	lsls	r2, r2, #5
 802cc86:	4402      	add	r2, r0
 802cc88:	4413      	add	r3, r2
 802cc8a:	781a      	ldrb	r2, [r3, #0]
 802cc8c:	7bfb      	ldrb	r3, [r7, #15]
 802cc8e:	430a      	orrs	r2, r1
 802cc90:	b2d1      	uxtb	r1, r2
 802cc92:	683a      	ldr	r2, [r7, #0]
 802cc94:	4413      	add	r3, r2
 802cc96:	460a      	mov	r2, r1
 802cc98:	711a      	strb	r2, [r3, #4]
	for ( i = 0; i < 32; i++ )
 802cc9a:	7bfb      	ldrb	r3, [r7, #15]
 802cc9c:	3301      	adds	r3, #1
 802cc9e:	73fb      	strb	r3, [r7, #15]
 802cca0:	7bfb      	ldrb	r3, [r7, #15]
 802cca2:	2b1f      	cmp	r3, #31
 802cca4:	d9c8      	bls.n	802cc38 <PHan_HanFontLoad+0x100>
	}

	//combine Jongsung
	if ( uJongsung )
 802cca6:	4b1e      	ldr	r3, [pc, #120]	; (802cd20 <PHan_HanFontLoad+0x1e8>)
 802cca8:	781b      	ldrb	r3, [r3, #0]
 802ccaa:	2b00      	cmp	r3, #0
 802ccac:	d024      	beq.n	802ccf8 <PHan_HanFontLoad+0x1c0>
	{
		for ( i = 0; i < 32; i++ )	FontPtr->FontBuffer[i] |= K_font[248 + uJonType * 28 + uJongsung][i];
 802ccae:	2300      	movs	r3, #0
 802ccb0:	73fb      	strb	r3, [r7, #15]
 802ccb2:	e01e      	b.n	802ccf2 <PHan_HanFontLoad+0x1ba>
 802ccb4:	7bfb      	ldrb	r3, [r7, #15]
 802ccb6:	683a      	ldr	r2, [r7, #0]
 802ccb8:	4413      	add	r3, r2
 802ccba:	7919      	ldrb	r1, [r3, #4]
 802ccbc:	4b1e      	ldr	r3, [pc, #120]	; (802cd38 <PHan_HanFontLoad+0x200>)
 802ccbe:	781b      	ldrb	r3, [r3, #0]
 802ccc0:	461a      	mov	r2, r3
 802ccc2:	4613      	mov	r3, r2
 802ccc4:	00db      	lsls	r3, r3, #3
 802ccc6:	1a9b      	subs	r3, r3, r2
 802ccc8:	009b      	lsls	r3, r3, #2
 802ccca:	33f8      	adds	r3, #248	; 0xf8
 802cccc:	4a14      	ldr	r2, [pc, #80]	; (802cd20 <PHan_HanFontLoad+0x1e8>)
 802ccce:	7812      	ldrb	r2, [r2, #0]
 802ccd0:	441a      	add	r2, r3
 802ccd2:	7bfb      	ldrb	r3, [r7, #15]
 802ccd4:	4819      	ldr	r0, [pc, #100]	; (802cd3c <PHan_HanFontLoad+0x204>)
 802ccd6:	0152      	lsls	r2, r2, #5
 802ccd8:	4402      	add	r2, r0
 802ccda:	4413      	add	r3, r2
 802ccdc:	781a      	ldrb	r2, [r3, #0]
 802ccde:	7bfb      	ldrb	r3, [r7, #15]
 802cce0:	430a      	orrs	r2, r1
 802cce2:	b2d1      	uxtb	r1, r2
 802cce4:	683a      	ldr	r2, [r7, #0]
 802cce6:	4413      	add	r3, r2
 802cce8:	460a      	mov	r2, r1
 802ccea:	711a      	strb	r2, [r3, #4]
 802ccec:	7bfb      	ldrb	r3, [r7, #15]
 802ccee:	3301      	adds	r3, #1
 802ccf0:	73fb      	strb	r3, [r7, #15]
 802ccf2:	7bfb      	ldrb	r3, [r7, #15]
 802ccf4:	2b1f      	cmp	r3, #31
 802ccf6:	d9dd      	bls.n	802ccb4 <PHan_HanFontLoad+0x17c>
	}
}
 802ccf8:	bf00      	nop
 802ccfa:	3710      	adds	r7, #16
 802ccfc:	46bd      	mov	sp, r7
 802ccfe:	bd80      	pop	{r7, pc}
 802cd00:	200012b0 	.word	0x200012b0
 802cd04:	200012b1 	.word	0x200012b1
 802cd08:	200012b2 	.word	0x200012b2
 802cd0c:	0803b710 	.word	0x0803b710
 802cd10:	200012b3 	.word	0x200012b3
 802cd14:	0803b730 	.word	0x0803b730
 802cd18:	200012b4 	.word	0x200012b4
 802cd1c:	0803b750 	.word	0x0803b750
 802cd20:	200012b5 	.word	0x200012b5
 802cd24:	0803b788 	.word	0x0803b788
 802cd28:	0803b770 	.word	0x0803b770
 802cd2c:	200012b6 	.word	0x200012b6
 802cd30:	200012b7 	.word	0x200012b7
 802cd34:	0803b7a0 	.word	0x0803b7a0
 802cd38:	200012b8 	.word	0x200012b8
 802cd3c:	0803ca14 	.word	0x0803ca14

0802cd40 <PHan_EngFontLoad>:
//========================================================================

//========================================================================
void PHan_EngFontLoad( const uint8_t *HanCode, PHAN_FONT_OBJ *FontPtr ) 
//========================================================================
{
 802cd40:	b480      	push	{r7}
 802cd42:	b085      	sub	sp, #20
 802cd44:	af00      	add	r7, sp, #0
 802cd46:	6078      	str	r0, [r7, #4]
 802cd48:	6039      	str	r1, [r7, #0]
	uint16_t i;
	char EngCode;

	FontPtr->Code_Type = PHAN_ENG_CODE;
 802cd4a:	683b      	ldr	r3, [r7, #0]
 802cd4c:	2202      	movs	r2, #2
 802cd4e:	70da      	strb	r2, [r3, #3]
	FontPtr->Size_Char = 1;
 802cd50:	683b      	ldr	r3, [r7, #0]
 802cd52:	2201      	movs	r2, #1
 802cd54:	709a      	strb	r2, [r3, #2]

	EngCode = *HanCode;
 802cd56:	687b      	ldr	r3, [r7, #4]
 802cd58:	781b      	ldrb	r3, [r3, #0]
 802cd5a:	737b      	strb	r3, [r7, #13]

	EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 802cd5c:	7b7b      	ldrb	r3, [r7, #13]
 802cd5e:	3b20      	subs	r3, #32
 802cd60:	737b      	strb	r3, [r7, #13]

	for ( i = 0 ; i < 16 ; i++ )
 802cd62:	2300      	movs	r3, #0
 802cd64:	81fb      	strh	r3, [r7, #14]
 802cd66:	e00f      	b.n	802cd88 <PHan_EngFontLoad+0x48>
	{
		 FontPtr->FontBuffer[ i ] = wEngFon[EngCode][i];		
 802cd68:	7b7a      	ldrb	r2, [r7, #13]
 802cd6a:	89fb      	ldrh	r3, [r7, #14]
 802cd6c:	490b      	ldr	r1, [pc, #44]	; (802cd9c <PHan_EngFontLoad+0x5c>)
 802cd6e:	0112      	lsls	r2, r2, #4
 802cd70:	4413      	add	r3, r2
 802cd72:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 802cd76:	89fb      	ldrh	r3, [r7, #14]
 802cd78:	b2d1      	uxtb	r1, r2
 802cd7a:	683a      	ldr	r2, [r7, #0]
 802cd7c:	4413      	add	r3, r2
 802cd7e:	460a      	mov	r2, r1
 802cd80:	711a      	strb	r2, [r3, #4]
	for ( i = 0 ; i < 16 ; i++ )
 802cd82:	89fb      	ldrh	r3, [r7, #14]
 802cd84:	3301      	adds	r3, #1
 802cd86:	81fb      	strh	r3, [r7, #14]
 802cd88:	89fb      	ldrh	r3, [r7, #14]
 802cd8a:	2b0f      	cmp	r3, #15
 802cd8c:	d9ec      	bls.n	802cd68 <PHan_EngFontLoad+0x28>
	}
}
 802cd8e:	bf00      	nop
 802cd90:	bf00      	nop
 802cd92:	3714      	adds	r7, #20
 802cd94:	46bd      	mov	sp, r7
 802cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd9a:	4770      	bx	lr
 802cd9c:	0803f714 	.word	0x0803f714

0802cda0 <si446x_reset>:
 * releasing it.  After this function @ref si446x_boot should be called.  You
 * can check if POR has completed by waiting 4 ms or by polling GPIO 0, 2, or 3.
 * When these GPIOs are high, it is safe to call @ref si446x_boot.
 */
void si446x_reset(void)
{
 802cda0:	b580      	push	{r7, lr}
 802cda2:	af00      	add	r7, sp, #0
    U8 loopCount;

    /* Put radio in shutdown, wait then release */
    radio_hal_AssertShutdown();
 802cda4:	f000 fc3c 	bl	802d620 <radio_hal_AssertShutdown>
    //! @todo this needs to be a better delay function.
//    for (loopCount = 255; loopCount != 0; loopCount--);
    HAL_Delay(20);
 802cda8:	2014      	movs	r0, #20
 802cdaa:	f7f4 fee9 	bl	8021b80 <HAL_Delay>
    radio_hal_DeassertShutdown();
 802cdae:	f000 fc4d 	bl	802d64c <radio_hal_DeassertShutdown>
//    for (loopCount = 255; loopCount != 0; loopCount--);
    HAL_Delay(5);
 802cdb2:	2005      	movs	r0, #5
 802cdb4:	f7f4 fee4 	bl	8021b80 <HAL_Delay>
    radio_comm_ClearCTS();
 802cdb8:	f000 fc0e 	bl	802d5d8 <radio_comm_ClearCTS>
}
 802cdbc:	bf00      	nop
 802cdbe:	bd80      	pop	{r7, pc}

0802cdc0 <si446x_configuration_init>:
/*!
 * This function is used to load all properties and commands with a list of NULL terminated commands.
 * Before this function @si446x_reset should be called.
 */
U8 si446x_configuration_init(const U8* pSetPropCmd)
{
 802cdc0:	b580      	push	{r7, lr}
 802cdc2:	b084      	sub	sp, #16
 802cdc4:	af00      	add	r7, sp, #0
 802cdc6:	6078      	str	r0, [r7, #4]
  SEGMENT_VARIABLE(col, U8, SEG_DATA);
  SEGMENT_VARIABLE(numOfBytes, U8, SEG_DATA);

  /* While cycle as far as the pointer points to a command */
  while (*pSetPropCmd != 0x00)
 802cdc8:	e038      	b.n	802ce3c <si446x_configuration_init+0x7c>
    /* Commands structure in the array:
     * --------------------------------
     * LEN | <LEN length of data>
     */

    numOfBytes = *pSetPropCmd++;
 802cdca:	687b      	ldr	r3, [r7, #4]
 802cdcc:	1c5a      	adds	r2, r3, #1
 802cdce:	607a      	str	r2, [r7, #4]
 802cdd0:	781b      	ldrb	r3, [r3, #0]
 802cdd2:	73bb      	strb	r3, [r7, #14]

    if (numOfBytes > 16u)
 802cdd4:	7bbb      	ldrb	r3, [r7, #14]
 802cdd6:	2b10      	cmp	r3, #16
 802cdd8:	d901      	bls.n	802cdde <si446x_configuration_init+0x1e>
    {
      /* Number of command bytes exceeds maximal allowable length */
      return SI446X_COMMAND_ERROR;
 802cdda:	2304      	movs	r3, #4
 802cddc:	e033      	b.n	802ce46 <si446x_configuration_init+0x86>
    }

    for (col = 0u; col < numOfBytes; col++)
 802cdde:	2300      	movs	r3, #0
 802cde0:	73fb      	strb	r3, [r7, #15]
 802cde2:	e00a      	b.n	802cdfa <si446x_configuration_init+0x3a>
    {
      Pro2Cmd[col] = *pSetPropCmd;
 802cde4:	7bfb      	ldrb	r3, [r7, #15]
 802cde6:	687a      	ldr	r2, [r7, #4]
 802cde8:	7811      	ldrb	r1, [r2, #0]
 802cdea:	4a19      	ldr	r2, [pc, #100]	; (802ce50 <si446x_configuration_init+0x90>)
 802cdec:	54d1      	strb	r1, [r2, r3]
      pSetPropCmd++;
 802cdee:	687b      	ldr	r3, [r7, #4]
 802cdf0:	3301      	adds	r3, #1
 802cdf2:	607b      	str	r3, [r7, #4]
    for (col = 0u; col < numOfBytes; col++)
 802cdf4:	7bfb      	ldrb	r3, [r7, #15]
 802cdf6:	3301      	adds	r3, #1
 802cdf8:	73fb      	strb	r3, [r7, #15]
 802cdfa:	7bfa      	ldrb	r2, [r7, #15]
 802cdfc:	7bbb      	ldrb	r3, [r7, #14]
 802cdfe:	429a      	cmp	r2, r3
 802ce00:	d3f0      	bcc.n	802cde4 <si446x_configuration_init+0x24>
    }

    if (radio_comm_SendCmdGetResp(numOfBytes, Pro2Cmd, 0, 0) != 0xFF)
 802ce02:	7bb8      	ldrb	r0, [r7, #14]
 802ce04:	2300      	movs	r3, #0
 802ce06:	2200      	movs	r2, #0
 802ce08:	4911      	ldr	r1, [pc, #68]	; (802ce50 <si446x_configuration_init+0x90>)
 802ce0a:	f000 fbf1 	bl	802d5f0 <radio_comm_SendCmdGetResp>
 802ce0e:	4603      	mov	r3, r0
 802ce10:	2bff      	cmp	r3, #255	; 0xff
 802ce12:	d001      	beq.n	802ce18 <si446x_configuration_init+0x58>
    {
      /* Timeout occured */
      return SI446X_CTS_TIMEOUT;
 802ce14:	2302      	movs	r3, #2
 802ce16:	e016      	b.n	802ce46 <si446x_configuration_init+0x86>
    }

    if (radio_hal_NirqLevel() == 0)
 802ce18:	f000 fc42 	bl	802d6a0 <radio_hal_NirqLevel>
 802ce1c:	4603      	mov	r3, r0
 802ce1e:	2b00      	cmp	r3, #0
 802ce20:	d10c      	bne.n	802ce3c <si446x_configuration_init+0x7c>
    {
      /* Get and clear all interrupts.  An error has occured... */
      si446x_get_int_status(0, 0, 0);
 802ce22:	2200      	movs	r2, #0
 802ce24:	2100      	movs	r1, #0
 802ce26:	2000      	movs	r0, #0
 802ce28:	f000 f8ac 	bl	802cf84 <si446x_get_int_status>
      if (Si446xCmd.GET_INT_STATUS.CHIP_PEND & SI446X_CMD_GET_CHIP_STATUS_REP_CHIP_PEND_CMD_ERROR_PEND_MASK)
 802ce2c:	4b09      	ldr	r3, [pc, #36]	; (802ce54 <si446x_configuration_init+0x94>)
 802ce2e:	799b      	ldrb	r3, [r3, #6]
 802ce30:	f003 0308 	and.w	r3, r3, #8
 802ce34:	2b00      	cmp	r3, #0
 802ce36:	d001      	beq.n	802ce3c <si446x_configuration_init+0x7c>
      {
        return SI446X_COMMAND_ERROR;
 802ce38:	2304      	movs	r3, #4
 802ce3a:	e004      	b.n	802ce46 <si446x_configuration_init+0x86>
  while (*pSetPropCmd != 0x00)
 802ce3c:	687b      	ldr	r3, [r7, #4]
 802ce3e:	781b      	ldrb	r3, [r3, #0]
 802ce40:	2b00      	cmp	r3, #0
 802ce42:	d1c2      	bne.n	802cdca <si446x_configuration_init+0xa>
      }
    }
  }

  return SI446X_SUCCESS;
 802ce44:	2300      	movs	r3, #0
}
 802ce46:	4618      	mov	r0, r3
 802ce48:	3710      	adds	r7, #16
 802ce4a:	46bd      	mov	sp, r7
 802ce4c:	bd80      	pop	{r7, pc}
 802ce4e:	bf00      	nop
 802ce50:	200012d0 	.word	0x200012d0
 802ce54:	200012bc 	.word	0x200012bc

0802ce58 <si446x_part_info>:

/*! This function sends the PART_INFO command to the radio and receives the answer
 *  into @Si446xCmd union.
 */
void si446x_part_info(void)
{
 802ce58:	b580      	push	{r7, lr}
 802ce5a:	af00      	add	r7, sp, #0
    Pro2Cmd[0] = SI446X_CMD_ID_PART_INFO;
 802ce5c:	4b1a      	ldr	r3, [pc, #104]	; (802cec8 <si446x_part_info+0x70>)
 802ce5e:	2201      	movs	r2, #1
 802ce60:	701a      	strb	r2, [r3, #0]

    radio_comm_SendCmdGetResp( SI446X_CMD_ARG_COUNT_PART_INFO,
 802ce62:	4b19      	ldr	r3, [pc, #100]	; (802cec8 <si446x_part_info+0x70>)
 802ce64:	2208      	movs	r2, #8
 802ce66:	4918      	ldr	r1, [pc, #96]	; (802cec8 <si446x_part_info+0x70>)
 802ce68:	2001      	movs	r0, #1
 802ce6a:	f000 fbc1 	bl	802d5f0 <radio_comm_SendCmdGetResp>
                              Pro2Cmd,
                              SI446X_CMD_REPLY_COUNT_PART_INFO,
                              Pro2Cmd );

    Si446xCmd.PART_INFO.CHIPREV         = Pro2Cmd[0];
 802ce6e:	4b16      	ldr	r3, [pc, #88]	; (802cec8 <si446x_part_info+0x70>)
 802ce70:	781a      	ldrb	r2, [r3, #0]
 802ce72:	4b16      	ldr	r3, [pc, #88]	; (802cecc <si446x_part_info+0x74>)
 802ce74:	701a      	strb	r2, [r3, #0]
    Si446xCmd.PART_INFO.PART            = ((U16)Pro2Cmd[1] << 8) & 0xFF00;
 802ce76:	4b14      	ldr	r3, [pc, #80]	; (802cec8 <si446x_part_info+0x70>)
 802ce78:	785b      	ldrb	r3, [r3, #1]
 802ce7a:	021b      	lsls	r3, r3, #8
 802ce7c:	b29b      	uxth	r3, r3
 802ce7e:	4a13      	ldr	r2, [pc, #76]	; (802cecc <si446x_part_info+0x74>)
 802ce80:	6053      	str	r3, [r2, #4]
    Si446xCmd.PART_INFO.PART           |= (U16)Pro2Cmd[2] & 0x00FF;
 802ce82:	4b12      	ldr	r3, [pc, #72]	; (802cecc <si446x_part_info+0x74>)
 802ce84:	685b      	ldr	r3, [r3, #4]
 802ce86:	4a10      	ldr	r2, [pc, #64]	; (802cec8 <si446x_part_info+0x70>)
 802ce88:	7892      	ldrb	r2, [r2, #2]
 802ce8a:	4313      	orrs	r3, r2
 802ce8c:	4a0f      	ldr	r2, [pc, #60]	; (802cecc <si446x_part_info+0x74>)
 802ce8e:	6053      	str	r3, [r2, #4]
    Si446xCmd.PART_INFO.PBUILD          = Pro2Cmd[3];
 802ce90:	4b0d      	ldr	r3, [pc, #52]	; (802cec8 <si446x_part_info+0x70>)
 802ce92:	78da      	ldrb	r2, [r3, #3]
 802ce94:	4b0d      	ldr	r3, [pc, #52]	; (802cecc <si446x_part_info+0x74>)
 802ce96:	721a      	strb	r2, [r3, #8]
    Si446xCmd.PART_INFO.ID              = ((U16)Pro2Cmd[4] << 8) & 0xFF00;
 802ce98:	4b0b      	ldr	r3, [pc, #44]	; (802cec8 <si446x_part_info+0x70>)
 802ce9a:	791b      	ldrb	r3, [r3, #4]
 802ce9c:	021b      	lsls	r3, r3, #8
 802ce9e:	b29b      	uxth	r3, r3
 802cea0:	4a0a      	ldr	r2, [pc, #40]	; (802cecc <si446x_part_info+0x74>)
 802cea2:	60d3      	str	r3, [r2, #12]
    Si446xCmd.PART_INFO.ID             |= (U16)Pro2Cmd[5] & 0x00FF;
 802cea4:	4b09      	ldr	r3, [pc, #36]	; (802cecc <si446x_part_info+0x74>)
 802cea6:	68db      	ldr	r3, [r3, #12]
 802cea8:	4a07      	ldr	r2, [pc, #28]	; (802cec8 <si446x_part_info+0x70>)
 802ceaa:	7952      	ldrb	r2, [r2, #5]
 802ceac:	4313      	orrs	r3, r2
 802ceae:	4a07      	ldr	r2, [pc, #28]	; (802cecc <si446x_part_info+0x74>)
 802ceb0:	60d3      	str	r3, [r2, #12]
    Si446xCmd.PART_INFO.CUSTOMER        = Pro2Cmd[6];
 802ceb2:	4b05      	ldr	r3, [pc, #20]	; (802cec8 <si446x_part_info+0x70>)
 802ceb4:	799a      	ldrb	r2, [r3, #6]
 802ceb6:	4b05      	ldr	r3, [pc, #20]	; (802cecc <si446x_part_info+0x74>)
 802ceb8:	741a      	strb	r2, [r3, #16]
    Si446xCmd.PART_INFO.ROMID           = Pro2Cmd[7];
 802ceba:	4b03      	ldr	r3, [pc, #12]	; (802cec8 <si446x_part_info+0x70>)
 802cebc:	79da      	ldrb	r2, [r3, #7]
 802cebe:	4b03      	ldr	r3, [pc, #12]	; (802cecc <si446x_part_info+0x74>)
 802cec0:	745a      	strb	r2, [r3, #17]
}
 802cec2:	bf00      	nop
 802cec4:	bd80      	pop	{r7, pc}
 802cec6:	bf00      	nop
 802cec8:	200012d0 	.word	0x200012d0
 802cecc:	200012bc 	.word	0x200012bc

0802ced0 <si446x_start_tx>:
 * @param CHANNEL   Channel number.
 * @param CONDITION Start TX condition.
 * @param TX_LEN    Payload length (exclude the PH generated CRC).
 */
void si446x_start_tx(U8 CHANNEL, U8 CONDITION, U16 TX_LEN)
{
 802ced0:	b580      	push	{r7, lr}
 802ced2:	b082      	sub	sp, #8
 802ced4:	af00      	add	r7, sp, #0
 802ced6:	4603      	mov	r3, r0
 802ced8:	603a      	str	r2, [r7, #0]
 802ceda:	71fb      	strb	r3, [r7, #7]
 802cedc:	460b      	mov	r3, r1
 802cede:	71bb      	strb	r3, [r7, #6]
    Pro2Cmd[0] = SI446X_CMD_ID_START_TX;
 802cee0:	4b0f      	ldr	r3, [pc, #60]	; (802cf20 <si446x_start_tx+0x50>)
 802cee2:	2231      	movs	r2, #49	; 0x31
 802cee4:	701a      	strb	r2, [r3, #0]
    Pro2Cmd[1] = CHANNEL;
 802cee6:	4a0e      	ldr	r2, [pc, #56]	; (802cf20 <si446x_start_tx+0x50>)
 802cee8:	79fb      	ldrb	r3, [r7, #7]
 802ceea:	7053      	strb	r3, [r2, #1]
    Pro2Cmd[2] = CONDITION;
 802ceec:	4a0c      	ldr	r2, [pc, #48]	; (802cf20 <si446x_start_tx+0x50>)
 802ceee:	79bb      	ldrb	r3, [r7, #6]
 802cef0:	7093      	strb	r3, [r2, #2]
    Pro2Cmd[3] = (U8)(TX_LEN >> 8);
 802cef2:	683b      	ldr	r3, [r7, #0]
 802cef4:	0a1b      	lsrs	r3, r3, #8
 802cef6:	b2da      	uxtb	r2, r3
 802cef8:	4b09      	ldr	r3, [pc, #36]	; (802cf20 <si446x_start_tx+0x50>)
 802cefa:	70da      	strb	r2, [r3, #3]
    Pro2Cmd[4] = (U8)(TX_LEN);
 802cefc:	683b      	ldr	r3, [r7, #0]
 802cefe:	b2da      	uxtb	r2, r3
 802cf00:	4b07      	ldr	r3, [pc, #28]	; (802cf20 <si446x_start_tx+0x50>)
 802cf02:	711a      	strb	r2, [r3, #4]
    Pro2Cmd[5] = 0x00;
 802cf04:	4b06      	ldr	r3, [pc, #24]	; (802cf20 <si446x_start_tx+0x50>)
 802cf06:	2200      	movs	r2, #0
 802cf08:	715a      	strb	r2, [r3, #5]

    // Don't repeat the packet, 
    // ie. transmit the packet only once
    Pro2Cmd[6] = 0x00;
 802cf0a:	4b05      	ldr	r3, [pc, #20]	; (802cf20 <si446x_start_tx+0x50>)
 802cf0c:	2200      	movs	r2, #0
 802cf0e:	719a      	strb	r2, [r3, #6]

    radio_comm_SendCmd( SI446X_CMD_ARG_COUNT_START_TX, Pro2Cmd );
 802cf10:	4903      	ldr	r1, [pc, #12]	; (802cf20 <si446x_start_tx+0x50>)
 802cf12:	2007      	movs	r0, #7
 802cf14:	f000 fae2 	bl	802d4dc <radio_comm_SendCmd>
}
 802cf18:	bf00      	nop
 802cf1a:	3708      	adds	r7, #8
 802cf1c:	46bd      	mov	sp, r7
 802cf1e:	bd80      	pop	{r7, pc}
 802cf20:	200012d0 	.word	0x200012d0

0802cf24 <si446x_start_rx>:
 * @param NEXT_STATE1 Next state when Preamble Timeout occurs.
 * @param NEXT_STATE2 Next state when a valid packet received.
 * @param NEXT_STATE3 Next state when invalid packet received (e.g. CRC error).
 */
void si446x_start_rx(U8 CHANNEL, U8 CONDITION, U16 RX_LEN, U8 NEXT_STATE1, U8 NEXT_STATE2, U8 NEXT_STATE3)
{
 802cf24:	b580      	push	{r7, lr}
 802cf26:	b082      	sub	sp, #8
 802cf28:	af00      	add	r7, sp, #0
 802cf2a:	603a      	str	r2, [r7, #0]
 802cf2c:	461a      	mov	r2, r3
 802cf2e:	4603      	mov	r3, r0
 802cf30:	71fb      	strb	r3, [r7, #7]
 802cf32:	460b      	mov	r3, r1
 802cf34:	71bb      	strb	r3, [r7, #6]
 802cf36:	4613      	mov	r3, r2
 802cf38:	717b      	strb	r3, [r7, #5]
    Pro2Cmd[0] = SI446X_CMD_ID_START_RX;
 802cf3a:	4b11      	ldr	r3, [pc, #68]	; (802cf80 <si446x_start_rx+0x5c>)
 802cf3c:	2232      	movs	r2, #50	; 0x32
 802cf3e:	701a      	strb	r2, [r3, #0]
    Pro2Cmd[1] = CHANNEL;
 802cf40:	4a0f      	ldr	r2, [pc, #60]	; (802cf80 <si446x_start_rx+0x5c>)
 802cf42:	79fb      	ldrb	r3, [r7, #7]
 802cf44:	7053      	strb	r3, [r2, #1]
    Pro2Cmd[2] = CONDITION;
 802cf46:	4a0e      	ldr	r2, [pc, #56]	; (802cf80 <si446x_start_rx+0x5c>)
 802cf48:	79bb      	ldrb	r3, [r7, #6]
 802cf4a:	7093      	strb	r3, [r2, #2]
    Pro2Cmd[3] = (U8)(RX_LEN >> 8);
 802cf4c:	683b      	ldr	r3, [r7, #0]
 802cf4e:	0a1b      	lsrs	r3, r3, #8
 802cf50:	b2da      	uxtb	r2, r3
 802cf52:	4b0b      	ldr	r3, [pc, #44]	; (802cf80 <si446x_start_rx+0x5c>)
 802cf54:	70da      	strb	r2, [r3, #3]
    Pro2Cmd[4] = (U8)(RX_LEN);
 802cf56:	683b      	ldr	r3, [r7, #0]
 802cf58:	b2da      	uxtb	r2, r3
 802cf5a:	4b09      	ldr	r3, [pc, #36]	; (802cf80 <si446x_start_rx+0x5c>)
 802cf5c:	711a      	strb	r2, [r3, #4]
    Pro2Cmd[5] = NEXT_STATE1;
 802cf5e:	4a08      	ldr	r2, [pc, #32]	; (802cf80 <si446x_start_rx+0x5c>)
 802cf60:	797b      	ldrb	r3, [r7, #5]
 802cf62:	7153      	strb	r3, [r2, #5]
    Pro2Cmd[6] = NEXT_STATE2;
 802cf64:	4a06      	ldr	r2, [pc, #24]	; (802cf80 <si446x_start_rx+0x5c>)
 802cf66:	7c3b      	ldrb	r3, [r7, #16]
 802cf68:	7193      	strb	r3, [r2, #6]
    Pro2Cmd[7] = NEXT_STATE3;
 802cf6a:	4a05      	ldr	r2, [pc, #20]	; (802cf80 <si446x_start_rx+0x5c>)
 802cf6c:	7d3b      	ldrb	r3, [r7, #20]
 802cf6e:	71d3      	strb	r3, [r2, #7]

    radio_comm_SendCmd( SI446X_CMD_ARG_COUNT_START_RX, Pro2Cmd );
 802cf70:	4903      	ldr	r1, [pc, #12]	; (802cf80 <si446x_start_rx+0x5c>)
 802cf72:	2008      	movs	r0, #8
 802cf74:	f000 fab2 	bl	802d4dc <radio_comm_SendCmd>
}
 802cf78:	bf00      	nop
 802cf7a:	3708      	adds	r7, #8
 802cf7c:	46bd      	mov	sp, r7
 802cf7e:	bd80      	pop	{r7, pc}
 802cf80:	200012d0 	.word	0x200012d0

0802cf84 <si446x_get_int_status>:
 * @param PH_CLR_PEND     Packet Handler pending flags clear.
 * @param MODEM_CLR_PEND  Modem Status pending flags clear.
 * @param CHIP_CLR_PEND   Chip State pending flags clear.
 */
void si446x_get_int_status(U8 PH_CLR_PEND, U8 MODEM_CLR_PEND, U8 CHIP_CLR_PEND)
{
 802cf84:	b580      	push	{r7, lr}
 802cf86:	b082      	sub	sp, #8
 802cf88:	af00      	add	r7, sp, #0
 802cf8a:	4603      	mov	r3, r0
 802cf8c:	71fb      	strb	r3, [r7, #7]
 802cf8e:	460b      	mov	r3, r1
 802cf90:	71bb      	strb	r3, [r7, #6]
 802cf92:	4613      	mov	r3, r2
 802cf94:	717b      	strb	r3, [r7, #5]
    Pro2Cmd[0] = SI446X_CMD_ID_GET_INT_STATUS;
 802cf96:	4b1b      	ldr	r3, [pc, #108]	; (802d004 <si446x_get_int_status+0x80>)
 802cf98:	2220      	movs	r2, #32
 802cf9a:	701a      	strb	r2, [r3, #0]
    Pro2Cmd[1] = PH_CLR_PEND;
 802cf9c:	4a19      	ldr	r2, [pc, #100]	; (802d004 <si446x_get_int_status+0x80>)
 802cf9e:	79fb      	ldrb	r3, [r7, #7]
 802cfa0:	7053      	strb	r3, [r2, #1]
    Pro2Cmd[2] = MODEM_CLR_PEND;
 802cfa2:	4a18      	ldr	r2, [pc, #96]	; (802d004 <si446x_get_int_status+0x80>)
 802cfa4:	79bb      	ldrb	r3, [r7, #6]
 802cfa6:	7093      	strb	r3, [r2, #2]
    Pro2Cmd[3] = CHIP_CLR_PEND;
 802cfa8:	4a16      	ldr	r2, [pc, #88]	; (802d004 <si446x_get_int_status+0x80>)
 802cfaa:	797b      	ldrb	r3, [r7, #5]
 802cfac:	70d3      	strb	r3, [r2, #3]

    radio_comm_SendCmdGetResp( SI446X_CMD_ARG_COUNT_GET_INT_STATUS,
 802cfae:	4b15      	ldr	r3, [pc, #84]	; (802d004 <si446x_get_int_status+0x80>)
 802cfb0:	2208      	movs	r2, #8
 802cfb2:	4914      	ldr	r1, [pc, #80]	; (802d004 <si446x_get_int_status+0x80>)
 802cfb4:	2004      	movs	r0, #4
 802cfb6:	f000 fb1b 	bl	802d5f0 <radio_comm_SendCmdGetResp>
                              Pro2Cmd,
                              SI446X_CMD_REPLY_COUNT_GET_INT_STATUS,
                              Pro2Cmd );

    Si446xCmd.GET_INT_STATUS.INT_PEND       = Pro2Cmd[0];
 802cfba:	4b12      	ldr	r3, [pc, #72]	; (802d004 <si446x_get_int_status+0x80>)
 802cfbc:	781a      	ldrb	r2, [r3, #0]
 802cfbe:	4b12      	ldr	r3, [pc, #72]	; (802d008 <si446x_get_int_status+0x84>)
 802cfc0:	701a      	strb	r2, [r3, #0]
    Si446xCmd.GET_INT_STATUS.INT_STATUS     = Pro2Cmd[1];
 802cfc2:	4b10      	ldr	r3, [pc, #64]	; (802d004 <si446x_get_int_status+0x80>)
 802cfc4:	785a      	ldrb	r2, [r3, #1]
 802cfc6:	4b10      	ldr	r3, [pc, #64]	; (802d008 <si446x_get_int_status+0x84>)
 802cfc8:	705a      	strb	r2, [r3, #1]
    Si446xCmd.GET_INT_STATUS.PH_PEND        = Pro2Cmd[2];
 802cfca:	4b0e      	ldr	r3, [pc, #56]	; (802d004 <si446x_get_int_status+0x80>)
 802cfcc:	789a      	ldrb	r2, [r3, #2]
 802cfce:	4b0e      	ldr	r3, [pc, #56]	; (802d008 <si446x_get_int_status+0x84>)
 802cfd0:	709a      	strb	r2, [r3, #2]
    Si446xCmd.GET_INT_STATUS.PH_STATUS      = Pro2Cmd[3];
 802cfd2:	4b0c      	ldr	r3, [pc, #48]	; (802d004 <si446x_get_int_status+0x80>)
 802cfd4:	78da      	ldrb	r2, [r3, #3]
 802cfd6:	4b0c      	ldr	r3, [pc, #48]	; (802d008 <si446x_get_int_status+0x84>)
 802cfd8:	70da      	strb	r2, [r3, #3]
    Si446xCmd.GET_INT_STATUS.MODEM_PEND     = Pro2Cmd[4];
 802cfda:	4b0a      	ldr	r3, [pc, #40]	; (802d004 <si446x_get_int_status+0x80>)
 802cfdc:	791a      	ldrb	r2, [r3, #4]
 802cfde:	4b0a      	ldr	r3, [pc, #40]	; (802d008 <si446x_get_int_status+0x84>)
 802cfe0:	711a      	strb	r2, [r3, #4]
    Si446xCmd.GET_INT_STATUS.MODEM_STATUS   = Pro2Cmd[5];
 802cfe2:	4b08      	ldr	r3, [pc, #32]	; (802d004 <si446x_get_int_status+0x80>)
 802cfe4:	795a      	ldrb	r2, [r3, #5]
 802cfe6:	4b08      	ldr	r3, [pc, #32]	; (802d008 <si446x_get_int_status+0x84>)
 802cfe8:	715a      	strb	r2, [r3, #5]
    Si446xCmd.GET_INT_STATUS.CHIP_PEND      = Pro2Cmd[6];
 802cfea:	4b06      	ldr	r3, [pc, #24]	; (802d004 <si446x_get_int_status+0x80>)
 802cfec:	799a      	ldrb	r2, [r3, #6]
 802cfee:	4b06      	ldr	r3, [pc, #24]	; (802d008 <si446x_get_int_status+0x84>)
 802cff0:	719a      	strb	r2, [r3, #6]
    Si446xCmd.GET_INT_STATUS.CHIP_STATUS    = Pro2Cmd[7];
 802cff2:	4b04      	ldr	r3, [pc, #16]	; (802d004 <si446x_get_int_status+0x80>)
 802cff4:	79da      	ldrb	r2, [r3, #7]
 802cff6:	4b04      	ldr	r3, [pc, #16]	; (802d008 <si446x_get_int_status+0x84>)
 802cff8:	71da      	strb	r2, [r3, #7]
}
 802cffa:	bf00      	nop
 802cffc:	3708      	adds	r7, #8
 802cffe:	46bd      	mov	sp, r7
 802d000:	bd80      	pop	{r7, pc}
 802d002:	bf00      	nop
 802d004:	200012d0 	.word	0x200012d0
 802d008:	200012bc 	.word	0x200012bc

0802d00c <si446x_set_property>:
 */
#ifdef __C51__
#pragma maxargs (13)  /* allow 13 bytes for parameters */
#endif
void si446x_set_property( U8 GROUP, U8 NUM_PROPS, U8 START_PROP, ... )
{
 802d00c:	b40c      	push	{r2, r3}
 802d00e:	b580      	push	{r7, lr}
 802d010:	b084      	sub	sp, #16
 802d012:	af00      	add	r7, sp, #0
 802d014:	4603      	mov	r3, r0
 802d016:	460a      	mov	r2, r1
 802d018:	71fb      	strb	r3, [r7, #7]
 802d01a:	4613      	mov	r3, r2
 802d01c:	71bb      	strb	r3, [r7, #6]
    va_list argList;
    U8 cmdIndex;

    Pro2Cmd[0] = SI446X_CMD_ID_SET_PROPERTY;
 802d01e:	4b17      	ldr	r3, [pc, #92]	; (802d07c <si446x_set_property+0x70>)
 802d020:	2211      	movs	r2, #17
 802d022:	701a      	strb	r2, [r3, #0]
    Pro2Cmd[1] = GROUP;
 802d024:	4a15      	ldr	r2, [pc, #84]	; (802d07c <si446x_set_property+0x70>)
 802d026:	79fb      	ldrb	r3, [r7, #7]
 802d028:	7053      	strb	r3, [r2, #1]
    Pro2Cmd[2] = NUM_PROPS;
 802d02a:	4a14      	ldr	r2, [pc, #80]	; (802d07c <si446x_set_property+0x70>)
 802d02c:	79bb      	ldrb	r3, [r7, #6]
 802d02e:	7093      	strb	r3, [r2, #2]
    Pro2Cmd[3] = START_PROP;
 802d030:	4a12      	ldr	r2, [pc, #72]	; (802d07c <si446x_set_property+0x70>)
 802d032:	7e3b      	ldrb	r3, [r7, #24]
 802d034:	70d3      	strb	r3, [r2, #3]

    va_start (argList, START_PROP);
 802d036:	f107 031c 	add.w	r3, r7, #28
 802d03a:	60bb      	str	r3, [r7, #8]
    cmdIndex = 4;
 802d03c:	2304      	movs	r3, #4
 802d03e:	73fb      	strb	r3, [r7, #15]
    while(NUM_PROPS--)
 802d040:	e00a      	b.n	802d058 <si446x_set_property+0x4c>
#ifdef __C51__  //  Keil Compiler
        Pro2Cmd[cmdIndex] = va_arg (argList, U8);
#else
        //‘char’ is promoted to ‘int’ when passed through ‘...’
        //  gcc : 가변인자는 char -> int로 확장됨.
        Pro2Cmd[cmdIndex] = va_arg ( argList, int );
 802d042:	68bb      	ldr	r3, [r7, #8]
 802d044:	1d1a      	adds	r2, r3, #4
 802d046:	60ba      	str	r2, [r7, #8]
 802d048:	681a      	ldr	r2, [r3, #0]
 802d04a:	7bfb      	ldrb	r3, [r7, #15]
 802d04c:	b2d1      	uxtb	r1, r2
 802d04e:	4a0b      	ldr	r2, [pc, #44]	; (802d07c <si446x_set_property+0x70>)
 802d050:	54d1      	strb	r1, [r2, r3]
#endif
        cmdIndex++;
 802d052:	7bfb      	ldrb	r3, [r7, #15]
 802d054:	3301      	adds	r3, #1
 802d056:	73fb      	strb	r3, [r7, #15]
    while(NUM_PROPS--)
 802d058:	79bb      	ldrb	r3, [r7, #6]
 802d05a:	1e5a      	subs	r2, r3, #1
 802d05c:	71ba      	strb	r2, [r7, #6]
 802d05e:	2b00      	cmp	r3, #0
 802d060:	d1ef      	bne.n	802d042 <si446x_set_property+0x36>
    }
    va_end(argList);

    radio_comm_SendCmd( cmdIndex, Pro2Cmd );
 802d062:	7bfb      	ldrb	r3, [r7, #15]
 802d064:	4905      	ldr	r1, [pc, #20]	; (802d07c <si446x_set_property+0x70>)
 802d066:	4618      	mov	r0, r3
 802d068:	f000 fa38 	bl	802d4dc <radio_comm_SendCmd>
}
 802d06c:	bf00      	nop
 802d06e:	3710      	adds	r7, #16
 802d070:	46bd      	mov	sp, r7
 802d072:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802d076:	b002      	add	sp, #8
 802d078:	4770      	bx	lr
 802d07a:	bf00      	nop
 802d07c:	200012d0 	.word	0x200012d0

0802d080 <si446x_change_state>:
 * Issue a change state command to the radio.
 *
 * @param NEXT_STATE1 Next state.
 */
void si446x_change_state(U8 NEXT_STATE1)
{
 802d080:	b580      	push	{r7, lr}
 802d082:	b082      	sub	sp, #8
 802d084:	af00      	add	r7, sp, #0
 802d086:	4603      	mov	r3, r0
 802d088:	71fb      	strb	r3, [r7, #7]
    Pro2Cmd[0] = SI446X_CMD_ID_CHANGE_STATE;
 802d08a:	4b07      	ldr	r3, [pc, #28]	; (802d0a8 <si446x_change_state+0x28>)
 802d08c:	2234      	movs	r2, #52	; 0x34
 802d08e:	701a      	strb	r2, [r3, #0]
    Pro2Cmd[1] = NEXT_STATE1;
 802d090:	4a05      	ldr	r2, [pc, #20]	; (802d0a8 <si446x_change_state+0x28>)
 802d092:	79fb      	ldrb	r3, [r7, #7]
 802d094:	7053      	strb	r3, [r2, #1]

    radio_comm_SendCmd( SI446X_CMD_ARG_COUNT_CHANGE_STATE, Pro2Cmd );
 802d096:	4904      	ldr	r1, [pc, #16]	; (802d0a8 <si446x_change_state+0x28>)
 802d098:	2002      	movs	r0, #2
 802d09a:	f000 fa1f 	bl	802d4dc <radio_comm_SendCmd>
}
 802d09e:	bf00      	nop
 802d0a0:	3708      	adds	r7, #8
 802d0a2:	46bd      	mov	sp, r7
 802d0a4:	bd80      	pop	{r7, pc}
 802d0a6:	bf00      	nop
 802d0a8:	200012d0 	.word	0x200012d0

0802d0ac <si446x_fifo_info>:
 * into @Si446xCmd.
 *
 * @param FIFO  RX/TX FIFO reset flags.
 */
void si446x_fifo_info(U8 FIFO)
{
 802d0ac:	b580      	push	{r7, lr}
 802d0ae:	b082      	sub	sp, #8
 802d0b0:	af00      	add	r7, sp, #0
 802d0b2:	4603      	mov	r3, r0
 802d0b4:	71fb      	strb	r3, [r7, #7]
    Pro2Cmd[0] = SI446X_CMD_ID_FIFO_INFO;
 802d0b6:	4b0c      	ldr	r3, [pc, #48]	; (802d0e8 <si446x_fifo_info+0x3c>)
 802d0b8:	2215      	movs	r2, #21
 802d0ba:	701a      	strb	r2, [r3, #0]
    Pro2Cmd[1] = FIFO;
 802d0bc:	4a0a      	ldr	r2, [pc, #40]	; (802d0e8 <si446x_fifo_info+0x3c>)
 802d0be:	79fb      	ldrb	r3, [r7, #7]
 802d0c0:	7053      	strb	r3, [r2, #1]

    radio_comm_SendCmdGetResp( SI446X_CMD_ARG_COUNT_FIFO_INFO,
 802d0c2:	4b09      	ldr	r3, [pc, #36]	; (802d0e8 <si446x_fifo_info+0x3c>)
 802d0c4:	2202      	movs	r2, #2
 802d0c6:	4908      	ldr	r1, [pc, #32]	; (802d0e8 <si446x_fifo_info+0x3c>)
 802d0c8:	2002      	movs	r0, #2
 802d0ca:	f000 fa91 	bl	802d5f0 <radio_comm_SendCmdGetResp>
                              Pro2Cmd,
                              SI446X_CMD_REPLY_COUNT_FIFO_INFO,
                              Pro2Cmd );

    Si446xCmd.FIFO_INFO.RX_FIFO_COUNT   = Pro2Cmd[0];
 802d0ce:	4b06      	ldr	r3, [pc, #24]	; (802d0e8 <si446x_fifo_info+0x3c>)
 802d0d0:	781a      	ldrb	r2, [r3, #0]
 802d0d2:	4b06      	ldr	r3, [pc, #24]	; (802d0ec <si446x_fifo_info+0x40>)
 802d0d4:	701a      	strb	r2, [r3, #0]
    Si446xCmd.FIFO_INFO.TX_FIFO_SPACE   = Pro2Cmd[1];
 802d0d6:	4b04      	ldr	r3, [pc, #16]	; (802d0e8 <si446x_fifo_info+0x3c>)
 802d0d8:	785a      	ldrb	r2, [r3, #1]
 802d0da:	4b04      	ldr	r3, [pc, #16]	; (802d0ec <si446x_fifo_info+0x40>)
 802d0dc:	705a      	strb	r2, [r3, #1]
}
 802d0de:	bf00      	nop
 802d0e0:	3708      	adds	r7, #8
 802d0e2:	46bd      	mov	sp, r7
 802d0e4:	bd80      	pop	{r7, pc}
 802d0e6:	bf00      	nop
 802d0e8:	200012d0 	.word	0x200012d0
 802d0ec:	200012bc 	.word	0x200012bc

0802d0f0 <si446x_write_tx_fifo>:
 *
 * @param numBytes  Data length to be load.
 * @param pTxData   Pointer to the data (U8*).
 */
void si446x_write_tx_fifo(U8 numBytes, U8* pTxData)
{
 802d0f0:	b580      	push	{r7, lr}
 802d0f2:	b082      	sub	sp, #8
 802d0f4:	af00      	add	r7, sp, #0
 802d0f6:	4603      	mov	r3, r0
 802d0f8:	6039      	str	r1, [r7, #0]
 802d0fa:	71fb      	strb	r3, [r7, #7]
  radio_comm_WriteData( SI446X_CMD_ID_WRITE_TX_FIFO, 0, numBytes, pTxData );
 802d0fc:	79fa      	ldrb	r2, [r7, #7]
 802d0fe:	683b      	ldr	r3, [r7, #0]
 802d100:	2100      	movs	r1, #0
 802d102:	2066      	movs	r0, #102	; 0x66
 802d104:	f000 fa34 	bl	802d570 <radio_comm_WriteData>
}
 802d108:	bf00      	nop
 802d10a:	3708      	adds	r7, #8
 802d10c:	46bd      	mov	sp, r7
 802d10e:	bd80      	pop	{r7, pc}

0802d110 <si446x_read_rx_fifo>:
 *
 * @param numBytes  Data length to be read.
 * @param pRxData   Pointer to the buffer location.
 */
void si446x_read_rx_fifo(U8 numBytes, U8* pRxData)
{
 802d110:	b580      	push	{r7, lr}
 802d112:	b082      	sub	sp, #8
 802d114:	af00      	add	r7, sp, #0
 802d116:	4603      	mov	r3, r0
 802d118:	6039      	str	r1, [r7, #0]
 802d11a:	71fb      	strb	r3, [r7, #7]
  radio_comm_ReadData( SI446X_CMD_ID_READ_RX_FIFO, 0, numBytes, pRxData );
 802d11c:	79fa      	ldrb	r2, [r7, #7]
 802d11e:	683b      	ldr	r3, [r7, #0]
 802d120:	2100      	movs	r1, #0
 802d122:	2077      	movs	r0, #119	; 0x77
 802d124:	f000 f9fa 	bl	802d51c <radio_comm_ReadData>
}
 802d128:	bf00      	nop
 802d12a:	3708      	adds	r7, #8
 802d12c:	46bd      	mov	sp, r7
 802d12e:	bd80      	pop	{r7, pc}

0802d130 <si446x_frr_b_read>:
 * Reads the Fast Response Registers starting with B register into @Si446xCmd union.
 *
 * @param respByteCount Number of Fast Response Registers to be read.
 */
void si446x_frr_b_read(U8 respByteCount)
{
 802d130:	b580      	push	{r7, lr}
 802d132:	b082      	sub	sp, #8
 802d134:	af00      	add	r7, sp, #0
 802d136:	4603      	mov	r3, r0
 802d138:	71fb      	strb	r3, [r7, #7]
    radio_comm_ReadData(SI446X_CMD_ID_FRR_B_READ,
 802d13a:	79fa      	ldrb	r2, [r7, #7]
 802d13c:	4b0c      	ldr	r3, [pc, #48]	; (802d170 <si446x_frr_b_read+0x40>)
 802d13e:	2100      	movs	r1, #0
 802d140:	2051      	movs	r0, #81	; 0x51
 802d142:	f000 f9eb 	bl	802d51c <radio_comm_ReadData>
                            0,
                        respByteCount,
                        Pro2Cmd);

    Si446xCmd.FRR_B_READ.FRR_B_VALUE = Pro2Cmd[0];
 802d146:	4b0a      	ldr	r3, [pc, #40]	; (802d170 <si446x_frr_b_read+0x40>)
 802d148:	781a      	ldrb	r2, [r3, #0]
 802d14a:	4b0a      	ldr	r3, [pc, #40]	; (802d174 <si446x_frr_b_read+0x44>)
 802d14c:	701a      	strb	r2, [r3, #0]
    Si446xCmd.FRR_B_READ.FRR_C_VALUE = Pro2Cmd[1];
 802d14e:	4b08      	ldr	r3, [pc, #32]	; (802d170 <si446x_frr_b_read+0x40>)
 802d150:	785a      	ldrb	r2, [r3, #1]
 802d152:	4b08      	ldr	r3, [pc, #32]	; (802d174 <si446x_frr_b_read+0x44>)
 802d154:	705a      	strb	r2, [r3, #1]
    Si446xCmd.FRR_B_READ.FRR_D_VALUE = Pro2Cmd[2];
 802d156:	4b06      	ldr	r3, [pc, #24]	; (802d170 <si446x_frr_b_read+0x40>)
 802d158:	789a      	ldrb	r2, [r3, #2]
 802d15a:	4b06      	ldr	r3, [pc, #24]	; (802d174 <si446x_frr_b_read+0x44>)
 802d15c:	709a      	strb	r2, [r3, #2]
    Si446xCmd.FRR_B_READ.FRR_A_VALUE = Pro2Cmd[3];
 802d15e:	4b04      	ldr	r3, [pc, #16]	; (802d170 <si446x_frr_b_read+0x40>)
 802d160:	78da      	ldrb	r2, [r3, #3]
 802d162:	4b04      	ldr	r3, [pc, #16]	; (802d174 <si446x_frr_b_read+0x44>)
 802d164:	70da      	strb	r2, [r3, #3]
}
 802d166:	bf00      	nop
 802d168:	3708      	adds	r7, #8
 802d16a:	46bd      	mov	sp, r7
 802d16c:	bd80      	pop	{r7, pc}
 802d16e:	bf00      	nop
 802d170:	200012d0 	.word	0x200012d0
 802d174:	200012bc 	.word	0x200012bc

0802d178 <si446x_get_int_status_fast_clear_read>:
/*!
 * Clear and read all Interrupt status/pending flags
 *
 */
void si446x_get_int_status_fast_clear_read(void)
{
 802d178:	b580      	push	{r7, lr}
 802d17a:	af00      	add	r7, sp, #0
    Pro2Cmd[0] = SI446X_CMD_ID_GET_INT_STATUS;
 802d17c:	4b15      	ldr	r3, [pc, #84]	; (802d1d4 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d17e:	2220      	movs	r2, #32
 802d180:	701a      	strb	r2, [r3, #0]

    radio_comm_SendCmdGetResp( 1,
 802d182:	4b14      	ldr	r3, [pc, #80]	; (802d1d4 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d184:	2208      	movs	r2, #8
 802d186:	4913      	ldr	r1, [pc, #76]	; (802d1d4 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d188:	2001      	movs	r0, #1
 802d18a:	f000 fa31 	bl	802d5f0 <radio_comm_SendCmdGetResp>
                              Pro2Cmd,
                              SI446X_CMD_REPLY_COUNT_GET_INT_STATUS,
                              Pro2Cmd );

    Si446xCmd.GET_INT_STATUS.INT_PEND       = Pro2Cmd[0];
 802d18e:	4b11      	ldr	r3, [pc, #68]	; (802d1d4 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d190:	781a      	ldrb	r2, [r3, #0]
 802d192:	4b11      	ldr	r3, [pc, #68]	; (802d1d8 <si446x_get_int_status_fast_clear_read+0x60>)
 802d194:	701a      	strb	r2, [r3, #0]
    Si446xCmd.GET_INT_STATUS.INT_STATUS     = Pro2Cmd[1];
 802d196:	4b0f      	ldr	r3, [pc, #60]	; (802d1d4 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d198:	785a      	ldrb	r2, [r3, #1]
 802d19a:	4b0f      	ldr	r3, [pc, #60]	; (802d1d8 <si446x_get_int_status_fast_clear_read+0x60>)
 802d19c:	705a      	strb	r2, [r3, #1]
    Si446xCmd.GET_INT_STATUS.PH_PEND        = Pro2Cmd[2];
 802d19e:	4b0d      	ldr	r3, [pc, #52]	; (802d1d4 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1a0:	789a      	ldrb	r2, [r3, #2]
 802d1a2:	4b0d      	ldr	r3, [pc, #52]	; (802d1d8 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1a4:	709a      	strb	r2, [r3, #2]
    Si446xCmd.GET_INT_STATUS.PH_STATUS      = Pro2Cmd[3];
 802d1a6:	4b0b      	ldr	r3, [pc, #44]	; (802d1d4 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1a8:	78da      	ldrb	r2, [r3, #3]
 802d1aa:	4b0b      	ldr	r3, [pc, #44]	; (802d1d8 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1ac:	70da      	strb	r2, [r3, #3]
    Si446xCmd.GET_INT_STATUS.MODEM_PEND     = Pro2Cmd[4];
 802d1ae:	4b09      	ldr	r3, [pc, #36]	; (802d1d4 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1b0:	791a      	ldrb	r2, [r3, #4]
 802d1b2:	4b09      	ldr	r3, [pc, #36]	; (802d1d8 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1b4:	711a      	strb	r2, [r3, #4]
    Si446xCmd.GET_INT_STATUS.MODEM_STATUS   = Pro2Cmd[5];
 802d1b6:	4b07      	ldr	r3, [pc, #28]	; (802d1d4 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1b8:	795a      	ldrb	r2, [r3, #5]
 802d1ba:	4b07      	ldr	r3, [pc, #28]	; (802d1d8 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1bc:	715a      	strb	r2, [r3, #5]
    Si446xCmd.GET_INT_STATUS.CHIP_PEND      = Pro2Cmd[6];
 802d1be:	4b05      	ldr	r3, [pc, #20]	; (802d1d4 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1c0:	799a      	ldrb	r2, [r3, #6]
 802d1c2:	4b05      	ldr	r3, [pc, #20]	; (802d1d8 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1c4:	719a      	strb	r2, [r3, #6]
    Si446xCmd.GET_INT_STATUS.CHIP_STATUS    = Pro2Cmd[7];
 802d1c6:	4b03      	ldr	r3, [pc, #12]	; (802d1d4 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1c8:	79da      	ldrb	r2, [r3, #7]
 802d1ca:	4b03      	ldr	r3, [pc, #12]	; (802d1d8 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1cc:	71da      	strb	r2, [r3, #7]
}
 802d1ce:	bf00      	nop
 802d1d0:	bd80      	pop	{r7, pc}
 802d1d2:	bf00      	nop
 802d1d4:	200012d0 	.word	0x200012d0
 802d1d8:	200012bc 	.word	0x200012bc

0802d1dc <vRadio_PowerUp>:
 *
 *  @note
 *
 */
void vRadio_PowerUp(void)
{
 802d1dc:	b580      	push	{r7, lr}
 802d1de:	b082      	sub	sp, #8
 802d1e0:	af00      	add	r7, sp, #0
	SEGMENT_VARIABLE(wDelay,  U16, SEG_XDATA) = 0u;
 802d1e2:	2300      	movs	r3, #0
 802d1e4:	607b      	str	r3, [r7, #4]

	/* Hardware reset the chip */
	si446x_reset();
 802d1e6:	f7ff fddb 	bl	802cda0 <si446x_reset>

	/* Wait until reset timeout or Reset IT signal */
	//  for (; wDelay < pRadioConfiguration->Radio_Delay_Cnt_After_Reset; wDelay++);
	HAL_Delay(10);
 802d1ea:	200a      	movs	r0, #10
 802d1ec:	f7f4 fcc8 	bl	8021b80 <HAL_Delay>
}
 802d1f0:	bf00      	nop
 802d1f2:	3708      	adds	r7, #8
 802d1f4:	46bd      	mov	sp, r7
 802d1f6:	bd80      	pop	{r7, pc}

0802d1f8 <vRadio_Init>:
 *
 *  @note
 *
 */
void vRadio_Init(void)
{
 802d1f8:	b580      	push	{r7, lr}
 802d1fa:	af00      	add	r7, sp, #0
	U16 wDelay;

	/* Power Up the radio chip */
	vRadio_PowerUp();
 802d1fc:	f7ff ffee 	bl	802d1dc <vRadio_PowerUp>

	HAL_Delay(200);
 802d200:	20c8      	movs	r0, #200	; 0xc8
 802d202:	f7f4 fcbd 	bl	8021b80 <HAL_Delay>

	/* Load radio configuration */
	while (SI446X_SUCCESS != si446x_configuration_init(pRadioConfiguration->Radio_ConfigurationArray))
 802d206:	e005      	b.n	802d214 <vRadio_Init+0x1c>
	{
		/* Error hook */
		//    for (wDelay = 0x7FFF; wDelay--; ) ;
		HAL_Delay(500);
 802d208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 802d20c:	f7f4 fcb8 	bl	8021b80 <HAL_Delay>

		/* Power Up the radio chip */
		vRadio_PowerUp();
 802d210:	f7ff ffe4 	bl	802d1dc <vRadio_PowerUp>
	while (SI446X_SUCCESS != si446x_configuration_init(pRadioConfiguration->Radio_ConfigurationArray))
 802d214:	4b09      	ldr	r3, [pc, #36]	; (802d23c <vRadio_Init+0x44>)
 802d216:	681b      	ldr	r3, [r3, #0]
 802d218:	681b      	ldr	r3, [r3, #0]
 802d21a:	4618      	mov	r0, r3
 802d21c:	f7ff fdd0 	bl	802cdc0 <si446x_configuration_init>
 802d220:	4603      	mov	r3, r0
 802d222:	2b00      	cmp	r3, #0
 802d224:	d1f0      	bne.n	802d208 <vRadio_Init+0x10>
	}

	HAL_Delay(100);
 802d226:	2064      	movs	r0, #100	; 0x64
 802d228:	f7f4 fcaa 	bl	8021b80 <HAL_Delay>

	// Read ITs, clear pending ones
	si446x_get_int_status(0u, 0u, 0u);
 802d22c:	2200      	movs	r2, #0
 802d22e:	2100      	movs	r1, #0
 802d230:	2000      	movs	r0, #0
 802d232:	f7ff fea7 	bl	802cf84 <si446x_get_int_status>

}
 802d236:	bf00      	nop
 802d238:	bd80      	pop	{r7, pc}
 802d23a:	bf00      	nop
 802d23c:	200004f0 	.word	0x200004f0

0802d240 <bRadio_Check_Tx_RX>:
 *
 *  @note
 *
 */
U8 bRadio_Check_Tx_RX(void)
{
 802d240:	b580      	push	{r7, lr}
 802d242:	b082      	sub	sp, #8
 802d244:	af00      	add	r7, sp, #0
	int ret = 0;
 802d246:	2300      	movs	r3, #0
 802d248:	607b      	str	r3, [r7, #4]
	static int s_idxRxPkt = 0;

	if (RF_NIRQ == FALSE)
 802d24a:	4b47      	ldr	r3, [pc, #284]	; (802d368 <bRadio_Check_Tx_RX+0x128>)
 802d24c:	781b      	ldrb	r3, [r3, #0]
 802d24e:	2b00      	cmp	r3, #0
 802d250:	f040 8084 	bne.w	802d35c <bRadio_Check_Tx_RX+0x11c>
	{
		//	  printf("!\n");
		/* Read ITs, clear pending ones */
		si446x_get_int_status_fast_clear_read();
 802d254:	f7ff ff90 	bl	802d178 <si446x_get_int_status_fast_clear_read>

		if (Si446xCmd.GET_INT_STATUS.CHIP_PEND & SI446X_CMD_GET_CHIP_STATUS_REP_CHIP_PEND_CMD_ERROR_PEND_BIT)
 802d258:	4b44      	ldr	r3, [pc, #272]	; (802d36c <bRadio_Check_Tx_RX+0x12c>)
 802d25a:	799b      	ldrb	r3, [r3, #6]
 802d25c:	f003 0308 	and.w	r3, r3, #8
 802d260:	2b00      	cmp	r3, #0
 802d262:	d011      	beq.n	802d288 <bRadio_Check_Tx_RX+0x48>
		{
			/* State change to */
			si446x_change_state(SI446X_CMD_CHANGE_STATE_ARG_NEXT_STATE1_NEW_STATE_ENUM_SLEEP);
 802d264:	2001      	movs	r0, #1
 802d266:	f7ff ff0b 	bl	802d080 <si446x_change_state>

			/* Reset FIFO */
			si446x_fifo_info(SI446X_CMD_FIFO_INFO_ARG_FIFO_RX_BIT);
 802d26a:	2002      	movs	r0, #2
 802d26c:	f7ff ff1e 	bl	802d0ac <si446x_fifo_info>

			/* State change to */
			si446x_change_state(SI446X_CMD_CHANGE_STATE_ARG_NEXT_STATE1_NEW_STATE_ENUM_RX);
 802d270:	2008      	movs	r0, #8
 802d272:	f7ff ff05 	bl	802d080 <si446x_change_state>

			nRxErr++;
 802d276:	4b3e      	ldr	r3, [pc, #248]	; (802d370 <bRadio_Check_Tx_RX+0x130>)
 802d278:	681b      	ldr	r3, [r3, #0]
 802d27a:	3301      	adds	r3, #1
 802d27c:	4a3c      	ldr	r2, [pc, #240]	; (802d370 <bRadio_Check_Tx_RX+0x130>)
 802d27e:	6013      	str	r3, [r2, #0]

			ret |= SI446X_CMD_GET_CHIP_STATUS_REP_CHIP_PEND_CMD_ERROR_PEND_BIT;
 802d280:	687b      	ldr	r3, [r7, #4]
 802d282:	f043 0308 	orr.w	r3, r3, #8
 802d286:	607b      	str	r3, [r7, #4]
		}

		if (Si446xCmd.GET_INT_STATUS.PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_PH_STATUS_CRC_ERROR_BIT)
 802d288:	4b38      	ldr	r3, [pc, #224]	; (802d36c <bRadio_Check_Tx_RX+0x12c>)
 802d28a:	789b      	ldrb	r3, [r3, #2]
 802d28c:	f003 0308 	and.w	r3, r3, #8
 802d290:	2b00      	cmp	r3, #0
 802d292:	d00b      	beq.n	802d2ac <bRadio_Check_Tx_RX+0x6c>
		{
			/* Reset FIFO */
			si446x_fifo_info(SI446X_CMD_FIFO_INFO_ARG_FIFO_RX_BIT);
 802d294:	2002      	movs	r0, #2
 802d296:	f7ff ff09 	bl	802d0ac <si446x_fifo_info>

			nCrcErr++;
 802d29a:	4b36      	ldr	r3, [pc, #216]	; (802d374 <bRadio_Check_Tx_RX+0x134>)
 802d29c:	681b      	ldr	r3, [r3, #0]
 802d29e:	3301      	adds	r3, #1
 802d2a0:	4a34      	ldr	r2, [pc, #208]	; (802d374 <bRadio_Check_Tx_RX+0x134>)
 802d2a2:	6013      	str	r3, [r2, #0]

			ret |= SI446X_CMD_GET_INT_STATUS_REP_PH_STATUS_CRC_ERROR_BIT;
 802d2a4:	687b      	ldr	r3, [r7, #4]
 802d2a6:	f043 0308 	orr.w	r3, r3, #8
 802d2aa:	607b      	str	r3, [r7, #4]
		}

		if(Si446xCmd.GET_INT_STATUS.PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_SENT_PEND_BIT)
 802d2ac:	4b2f      	ldr	r3, [pc, #188]	; (802d36c <bRadio_Check_Tx_RX+0x12c>)
 802d2ae:	789b      	ldrb	r3, [r3, #2]
 802d2b0:	f003 0320 	and.w	r3, r3, #32
 802d2b4:	2b00      	cmp	r3, #0
 802d2b6:	d00d      	beq.n	802d2d4 <bRadio_Check_Tx_RX+0x94>
			//        printf("tx\n");
			//        printf("\n[tx]");
			// Configure PKT_CONFIG1 for RX

			//	수신기
			vRadio_StartRX (
 802d2b8:	4b2f      	ldr	r3, [pc, #188]	; (802d378 <bRadio_Check_Tx_RX+0x138>)
 802d2ba:	681b      	ldr	r3, [r3, #0]
 802d2bc:	b2da      	uxtb	r2, r3
				g_nChRx,	//g_idxTrainSet,	//	pRadioConfiguration->Radio_ChannelNumber,
				pRadioConfiguration->Radio_PacketLength );
 802d2be:	4b2f      	ldr	r3, [pc, #188]	; (802d37c <bRadio_Check_Tx_RX+0x13c>)
 802d2c0:	681b      	ldr	r3, [r3, #0]
			vRadio_StartRX (
 802d2c2:	795b      	ldrb	r3, [r3, #5]
 802d2c4:	4619      	mov	r1, r3
 802d2c6:	4610      	mov	r0, r2
 802d2c8:	f000 f864 	bl	802d394 <vRadio_StartRX>

			ret |= SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_SENT_PEND_BIT;
 802d2cc:	687b      	ldr	r3, [r7, #4]
 802d2ce:	f043 0320 	orr.w	r3, r3, #32
 802d2d2:	607b      	str	r3, [r7, #4]
		}

		if(Si446xCmd.GET_INT_STATUS.PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_RX_PEND_BIT)
 802d2d4:	4b25      	ldr	r3, [pc, #148]	; (802d36c <bRadio_Check_Tx_RX+0x12c>)
 802d2d6:	789b      	ldrb	r3, [r3, #2]
 802d2d8:	f003 0310 	and.w	r3, r3, #16
 802d2dc:	2b00      	cmp	r3, #0
 802d2de:	d03d      	beq.n	802d35c <bRadio_Check_Tx_RX+0x11c>
		{
			/* Packet RX */

			/* Get payload length */
            si446x_fifo_info ( 0x00 );
 802d2e0:	2000      	movs	r0, #0
 802d2e2:	f7ff fee3 	bl	802d0ac <si446x_fifo_info>

//			si446x_read_rx_fifo(Si446xCmd.FIFO_INFO.RX_FIFO_COUNT, &customRadioPacket[0]);
        	s_idxRxPkt = ( s_idxRxPkt + 1 )%2;
 802d2e6:	4b26      	ldr	r3, [pc, #152]	; (802d380 <bRadio_Check_Tx_RX+0x140>)
 802d2e8:	681b      	ldr	r3, [r3, #0]
 802d2ea:	3301      	adds	r3, #1
 802d2ec:	2b00      	cmp	r3, #0
 802d2ee:	f003 0301 	and.w	r3, r3, #1
 802d2f2:	bfb8      	it	lt
 802d2f4:	425b      	neglt	r3, r3
 802d2f6:	4a22      	ldr	r2, [pc, #136]	; (802d380 <bRadio_Check_Tx_RX+0x140>)
 802d2f8:	6013      	str	r3, [r2, #0]
        	g_pRadioRxPkt = &g_RadioRxPkt[s_idxRxPkt][0];
 802d2fa:	4b21      	ldr	r3, [pc, #132]	; (802d380 <bRadio_Check_Tx_RX+0x140>)
 802d2fc:	681b      	ldr	r3, [r3, #0]
 802d2fe:	019b      	lsls	r3, r3, #6
 802d300:	4a20      	ldr	r2, [pc, #128]	; (802d384 <bRadio_Check_Tx_RX+0x144>)
 802d302:	4413      	add	r3, r2
 802d304:	4a20      	ldr	r2, [pc, #128]	; (802d388 <bRadio_Check_Tx_RX+0x148>)
 802d306:	6013      	str	r3, [r2, #0]
			si446x_read_rx_fifo(Si446xCmd.FIFO_INFO.RX_FIFO_COUNT, g_pRadioRxPkt);
 802d308:	4b18      	ldr	r3, [pc, #96]	; (802d36c <bRadio_Check_Tx_RX+0x12c>)
 802d30a:	781b      	ldrb	r3, [r3, #0]
 802d30c:	461a      	mov	r2, r3
 802d30e:	4b1e      	ldr	r3, [pc, #120]	; (802d388 <bRadio_Check_Tx_RX+0x148>)
 802d310:	681b      	ldr	r3, [r3, #0]
 802d312:	4619      	mov	r1, r3
 802d314:	4610      	mov	r0, r2
 802d316:	f7ff fefb 	bl	802d110 <si446x_read_rx_fifo>

			//========================================================================
			si446x_frr_b_read(1);
 802d31a:	2001      	movs	r0, #1
 802d31c:	f7ff ff08 	bl	802d130 <si446x_frr_b_read>

			g_nRSSI = Si446xCmd.FRR_B_READ.FRR_B_VALUE;		//	RSSI Value
 802d320:	4b12      	ldr	r3, [pc, #72]	; (802d36c <bRadio_Check_Tx_RX+0x12c>)
 802d322:	781b      	ldrb	r3, [r3, #0]
 802d324:	461a      	mov	r2, r3
 802d326:	4b19      	ldr	r3, [pc, #100]	; (802d38c <bRadio_Check_Tx_RX+0x14c>)
 802d328:	601a      	str	r2, [r3, #0]

			if( GetDbg() > 2 )
 802d32a:	f003 fde9 	bl	8030f00 <GetDbg>
 802d32e:	4603      	mov	r3, r0
 802d330:	2b02      	cmp	r3, #2
 802d332:	dd05      	ble.n	802d340 <bRadio_Check_Tx_RX+0x100>
				printf("Latch RSSI : %02d\n",Si446xCmd.FRR_B_READ.FRR_B_VALUE);
 802d334:	4b0d      	ldr	r3, [pc, #52]	; (802d36c <bRadio_Check_Tx_RX+0x12c>)
 802d336:	781b      	ldrb	r3, [r3, #0]
 802d338:	4619      	mov	r1, r3
 802d33a:	4815      	ldr	r0, [pc, #84]	; (802d390 <bRadio_Check_Tx_RX+0x150>)
 802d33c:	f00a f8b0 	bl	80374a0 <iprintf>
			//========================================================================

			//      printf("rx");
			// Configure PKT_CONFIG1 for RX
			vRadio_StartRX (
 802d340:	4b0d      	ldr	r3, [pc, #52]	; (802d378 <bRadio_Check_Tx_RX+0x138>)
 802d342:	681b      	ldr	r3, [r3, #0]
 802d344:	b2da      	uxtb	r2, r3
				g_nChRx, //g_idxTrainSet,	//				pRadioConfiguration->Radio_ChannelNumber,
				pRadioConfiguration->Radio_PacketLength );
 802d346:	4b0d      	ldr	r3, [pc, #52]	; (802d37c <bRadio_Check_Tx_RX+0x13c>)
 802d348:	681b      	ldr	r3, [r3, #0]
			vRadio_StartRX (
 802d34a:	795b      	ldrb	r3, [r3, #5]
 802d34c:	4619      	mov	r1, r3
 802d34e:	4610      	mov	r0, r2
 802d350:	f000 f820 	bl	802d394 <vRadio_StartRX>

			ret |= SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_RX_PEND_BIT;
 802d354:	687b      	ldr	r3, [r7, #4]
 802d356:	f043 0310 	orr.w	r3, r3, #16
 802d35a:	607b      	str	r3, [r7, #4]
		}

	}

	return ret;
 802d35c:	687b      	ldr	r3, [r7, #4]
 802d35e:	b2db      	uxtb	r3, r3
}
 802d360:	4618      	mov	r0, r3
 802d362:	3708      	adds	r7, #8
 802d364:	46bd      	mov	sp, r7
 802d366:	bd80      	pop	{r7, pc}
 802d368:	20001218 	.word	0x20001218
 802d36c:	200012bc 	.word	0x200012bc
 802d370:	2000137c 	.word	0x2000137c
 802d374:	20001380 	.word	0x20001380
 802d378:	20000be8 	.word	0x20000be8
 802d37c:	200004f0 	.word	0x200004f0
 802d380:	20001364 	.word	0x20001364
 802d384:	200012e4 	.word	0x200012e4
 802d388:	200012e0 	.word	0x200012e0
 802d38c:	20002340 	.word	0x20002340
 802d390:	08039438 	.word	0x08039438

0802d394 <vRadio_StartRX>:
 *
 *  @note
 *
 */
void vRadio_StartRX(U8 channel, U8 packetLenght )
{
 802d394:	b580      	push	{r7, lr}
 802d396:	b084      	sub	sp, #16
 802d398:	af02      	add	r7, sp, #8
 802d39a:	4603      	mov	r3, r0
 802d39c:	460a      	mov	r2, r1
 802d39e:	71fb      	strb	r3, [r7, #7]
 802d3a0:	4613      	mov	r3, r2
 802d3a2:	71bb      	strb	r3, [r7, #6]
	// Read ITs, clear pending ones
	si446x_get_int_status(0u, 0u, 0u);
 802d3a4:	2200      	movs	r2, #0
 802d3a6:	2100      	movs	r1, #0
 802d3a8:	2000      	movs	r0, #0
 802d3aa:	f7ff fdeb 	bl	802cf84 <si446x_get_int_status>

	// Reset the Rx Fifo
	si446x_fifo_info(SI446X_CMD_FIFO_INFO_ARG_FIFO_RX_BIT);
 802d3ae:	2002      	movs	r0, #2
 802d3b0:	f7ff fe7c 	bl	802d0ac <si446x_fifo_info>

	/* Start Receiving packet, channel 0, START immediately, Packet length used or not according to packetLength */
	si446x_start_rx(channel, 0u, packetLenght,
 802d3b4:	79ba      	ldrb	r2, [r7, #6]
 802d3b6:	79f8      	ldrb	r0, [r7, #7]
 802d3b8:	2308      	movs	r3, #8
 802d3ba:	9301      	str	r3, [sp, #4]
 802d3bc:	2303      	movs	r3, #3
 802d3be:	9300      	str	r3, [sp, #0]
 802d3c0:	2300      	movs	r3, #0
 802d3c2:	2100      	movs	r1, #0
 802d3c4:	f7ff fdae 	bl	802cf24 <si446x_start_rx>
			SI446X_CMD_START_RX_ARG_NEXT_STATE1_RXTIMEOUT_STATE_ENUM_NOCHANGE,
			SI446X_CMD_START_RX_ARG_NEXT_STATE2_RXVALID_STATE_ENUM_READY,
			SI446X_CMD_START_RX_ARG_NEXT_STATE3_RXINVALID_STATE_ENUM_RX );
}
 802d3c8:	bf00      	nop
 802d3ca:	3708      	adds	r7, #8
 802d3cc:	46bd      	mov	sp, r7
 802d3ce:	bd80      	pop	{r7, pc}

0802d3d0 <get_CCA>:


U8 get_CCA(void)
{
 802d3d0:	b580      	push	{r7, lr}
 802d3d2:	af00      	add	r7, sp, #0
#if 1
	//	CCA - GPIO1 ( CCA )

	//	Si4463 - GPIO1 ( 0 : Clear / 1 : Busy )

	return !( HAL_GPIO_ReadPin( GPIO1_GPIO_Port, GPIO1_Pin ) );
 802d3d4:	2140      	movs	r1, #64	; 0x40
 802d3d6:	4805      	ldr	r0, [pc, #20]	; (802d3ec <get_CCA+0x1c>)
 802d3d8:	f7f6 f888 	bl	80234ec <HAL_GPIO_ReadPin>
 802d3dc:	4603      	mov	r3, r0
 802d3de:	2b00      	cmp	r3, #0
 802d3e0:	bf0c      	ite	eq
 802d3e2:	2301      	moveq	r3, #1
 802d3e4:	2300      	movne	r3, #0
 802d3e6:	b2db      	uxtb	r3, r3
	}

	//	return tmp[3] > 0xa0 ? 1 : 0;
	//	return gpio_get_value(GPIO0)>0 ? 1 : 0;
#endif
}
 802d3e8:	4618      	mov	r0, r3
 802d3ea:	bd80      	pop	{r7, pc}
 802d3ec:	40021000 	.word	0x40021000

0802d3f0 <vRadio_Set_TxPower>:


//=============================================================================
void vRadio_Set_TxPower( U8 powerlvl )
//=============================================================================
{
 802d3f0:	b580      	push	{r7, lr}
 802d3f2:	b082      	sub	sp, #8
 802d3f4:	af00      	add	r7, sp, #0
 802d3f6:	4603      	mov	r3, r0
 802d3f8:	71fb      	strb	r3, [r7, #7]
	//	dBm			powerlvl
	//	20 dBm	-	0x7F		Max
	//	0 dBm	-	0x07		환경시험
	si446x_set_property( 0x22, 0x01, 0x01, powerlvl );
 802d3fa:	79fb      	ldrb	r3, [r7, #7]
 802d3fc:	2201      	movs	r2, #1
 802d3fe:	2101      	movs	r1, #1
 802d400:	2022      	movs	r0, #34	; 0x22
 802d402:	f7ff fe03 	bl	802d00c <si446x_set_property>
}
 802d406:	bf00      	nop
 802d408:	3708      	adds	r7, #8
 802d40a:	46bd      	mov	sp, r7
 802d40c:	bd80      	pop	{r7, pc}

0802d40e <vRadio_StartTx_Variable_Packet>:
 *
 *  @note
 *
 */
void vRadio_StartTx_Variable_Packet(U8 channel, U8 *pioRadioPacket, U8 length)
{
 802d40e:	b580      	push	{r7, lr}
 802d410:	b082      	sub	sp, #8
 802d412:	af00      	add	r7, sp, #0
 802d414:	4603      	mov	r3, r0
 802d416:	6039      	str	r1, [r7, #0]
 802d418:	71fb      	strb	r3, [r7, #7]
 802d41a:	4613      	mov	r3, r2
 802d41c:	71bb      	strb	r3, [r7, #6]
	/* Leave RX state */
	si446x_change_state(SI446X_CMD_CHANGE_STATE_ARG_NEXT_STATE1_NEW_STATE_ENUM_READY);
 802d41e:	2003      	movs	r0, #3
 802d420:	f7ff fe2e 	bl	802d080 <si446x_change_state>

	/* Read ITs, clear pending ones */
	si446x_get_int_status(0u, 0u, 0u);
 802d424:	2200      	movs	r2, #0
 802d426:	2100      	movs	r1, #0
 802d428:	2000      	movs	r0, #0
 802d42a:	f7ff fdab 	bl	802cf84 <si446x_get_int_status>

	/* Reset the Tx Fifo */
	si446x_fifo_info(SI446X_CMD_FIFO_INFO_ARG_FIFO_TX_BIT);
 802d42e:	2001      	movs	r0, #1
 802d430:	f7ff fe3c 	bl	802d0ac <si446x_fifo_info>

	/* Fill the TX fifo with datas */
	si446x_write_tx_fifo(length, pioRadioPacket);
 802d434:	79bb      	ldrb	r3, [r7, #6]
 802d436:	6839      	ldr	r1, [r7, #0]
 802d438:	4618      	mov	r0, r3
 802d43a:	f7ff fe59 	bl	802d0f0 <si446x_write_tx_fifo>

	//	CCA ( Clear Channel Assessment )
	//	Wait CCA
	while (!get_CCA())
 802d43e:	e002      	b.n	802d446 <vRadio_StartTx_Variable_Packet+0x38>
	{
		//			ndelay(1000);
		//			tx_approved = 0;
		//			add_timer(&tx_withdraw_timer);
		//			wait_event_interruptible(wait_withdraw, tx_approved);
		HAL_Delay(1);
 802d440:	2001      	movs	r0, #1
 802d442:	f7f4 fb9d 	bl	8021b80 <HAL_Delay>
	while (!get_CCA())
 802d446:	f7ff ffc3 	bl	802d3d0 <get_CCA>
 802d44a:	4603      	mov	r3, r0
 802d44c:	2b00      	cmp	r3, #0
 802d44e:	d0f7      	beq.n	802d440 <vRadio_StartTx_Variable_Packet+0x32>
		//		goto again;
	}

	/* Start sending packet, channel 0, START immediately */
	si446x_start_tx(channel, 0x80, length);
 802d450:	79ba      	ldrb	r2, [r7, #6]
 802d452:	79fb      	ldrb	r3, [r7, #7]
 802d454:	2180      	movs	r1, #128	; 0x80
 802d456:	4618      	mov	r0, r3
 802d458:	f7ff fd3a 	bl	802ced0 <si446x_start_tx>
}
 802d45c:	bf00      	nop
 802d45e:	3708      	adds	r7, #8
 802d460:	46bd      	mov	sp, r7
 802d462:	bd80      	pop	{r7, pc}

0802d464 <radio_comm_GetResp>:
 * @param pData         Pointer to where to put the data
 *
 * @return CTS value
 */
U8 radio_comm_GetResp(U8 byteCount, U8* pData)
{
 802d464:	b580      	push	{r7, lr}
 802d466:	b084      	sub	sp, #16
 802d468:	af00      	add	r7, sp, #0
 802d46a:	4603      	mov	r3, r0
 802d46c:	6039      	str	r1, [r7, #0]
 802d46e:	71fb      	strb	r3, [r7, #7]
  SEGMENT_VARIABLE(ctsVal = 0u, U8, SEG_DATA);
 802d470:	2300      	movs	r3, #0
 802d472:	73fb      	strb	r3, [r7, #15]
  SEGMENT_VARIABLE(errCnt = RADIO_CTS_TIMEOUT, U16, SEG_DATA);
 802d474:	f242 7310 	movw	r3, #10000	; 0x2710
 802d478:	60bb      	str	r3, [r7, #8]

  while (errCnt != 0)      //wait until radio IC is ready with the data
 802d47a:	e01b      	b.n	802d4b4 <radio_comm_GetResp+0x50>
  {
    radio_hal_ClearNsel();
 802d47c:	f000 f8f8 	bl	802d670 <radio_hal_ClearNsel>
    radio_hal_SpiWriteByte(0x44);    //read CMD buffer
 802d480:	2044      	movs	r0, #68	; 0x44
 802d482:	f000 f97b 	bl	802d77c <radio_hal_SpiWriteByte>
    ctsVal = radio_hal_SpiReadByte();
 802d486:	f000 f986 	bl	802d796 <radio_hal_SpiReadByte>
 802d48a:	4603      	mov	r3, r0
 802d48c:	73fb      	strb	r3, [r7, #15]
    if (ctsVal == 0xFF)
 802d48e:	7bfb      	ldrb	r3, [r7, #15]
 802d490:	2bff      	cmp	r3, #255	; 0xff
 802d492:	d10a      	bne.n	802d4aa <radio_comm_GetResp+0x46>
    {
      if (byteCount)
 802d494:	79fb      	ldrb	r3, [r7, #7]
 802d496:	2b00      	cmp	r3, #0
 802d498:	d004      	beq.n	802d4a4 <radio_comm_GetResp+0x40>
      {
        radio_hal_SpiReadData(byteCount, pData);
 802d49a:	79fb      	ldrb	r3, [r7, #7]
 802d49c:	6839      	ldr	r1, [r7, #0]
 802d49e:	4618      	mov	r0, r3
 802d4a0:	f000 f990 	bl	802d7c4 <radio_hal_SpiReadData>
      }
      radio_hal_SetNsel();
 802d4a4:	f000 f8f0 	bl	802d688 <radio_hal_SetNsel>
      break;
 802d4a8:	e007      	b.n	802d4ba <radio_comm_GetResp+0x56>
    }
    radio_hal_SetNsel();
 802d4aa:	f000 f8ed 	bl	802d688 <radio_hal_SetNsel>
    errCnt--;
 802d4ae:	68bb      	ldr	r3, [r7, #8]
 802d4b0:	3b01      	subs	r3, #1
 802d4b2:	60bb      	str	r3, [r7, #8]
  while (errCnt != 0)      //wait until radio IC is ready with the data
 802d4b4:	68bb      	ldr	r3, [r7, #8]
 802d4b6:	2b00      	cmp	r3, #0
 802d4b8:	d1e0      	bne.n	802d47c <radio_comm_GetResp+0x18>
  }

  if (errCnt == 0)
 802d4ba:	68bb      	ldr	r3, [r7, #8]
 802d4bc:	2b00      	cmp	r3, #0
 802d4be:	d100      	bne.n	802d4c2 <radio_comm_GetResp+0x5e>
  {
    while(1)
 802d4c0:	e7fe      	b.n	802d4c0 <radio_comm_GetResp+0x5c>
        RADIO_COMM_ERROR_CALLBACK();
      #endif
    }
  }

  if (ctsVal == 0xFF)
 802d4c2:	7bfb      	ldrb	r3, [r7, #15]
 802d4c4:	2bff      	cmp	r3, #255	; 0xff
 802d4c6:	d102      	bne.n	802d4ce <radio_comm_GetResp+0x6a>
  {
    ctsWentHigh = 1;
 802d4c8:	4b03      	ldr	r3, [pc, #12]	; (802d4d8 <radio_comm_GetResp+0x74>)
 802d4ca:	2201      	movs	r2, #1
 802d4cc:	701a      	strb	r2, [r3, #0]
  }

  return ctsVal;
 802d4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 802d4d0:	4618      	mov	r0, r3
 802d4d2:	3710      	adds	r7, #16
 802d4d4:	46bd      	mov	sp, r7
 802d4d6:	bd80      	pop	{r7, pc}
 802d4d8:	20001368 	.word	0x20001368

0802d4dc <radio_comm_SendCmd>:
 *
 * @param byteCount     Number of bytes in the command to send to the radio device
 * @param pData         Pointer to the command to send.
 */
void radio_comm_SendCmd(U8 byteCount, U8* pData)
{
 802d4dc:	b580      	push	{r7, lr}
 802d4de:	b082      	sub	sp, #8
 802d4e0:	af00      	add	r7, sp, #0
 802d4e2:	4603      	mov	r3, r0
 802d4e4:	6039      	str	r1, [r7, #0]
 802d4e6:	71fb      	strb	r3, [r7, #7]
    while (!ctsWentHigh)
 802d4e8:	e001      	b.n	802d4ee <radio_comm_SendCmd+0x12>
    {
        radio_comm_PollCTS();
 802d4ea:	f000 f86b 	bl	802d5c4 <radio_comm_PollCTS>
    while (!ctsWentHigh)
 802d4ee:	4b0a      	ldr	r3, [pc, #40]	; (802d518 <radio_comm_SendCmd+0x3c>)
 802d4f0:	781b      	ldrb	r3, [r3, #0]
 802d4f2:	2b00      	cmp	r3, #0
 802d4f4:	d0f9      	beq.n	802d4ea <radio_comm_SendCmd+0xe>
    }
    radio_hal_ClearNsel();
 802d4f6:	f000 f8bb 	bl	802d670 <radio_hal_ClearNsel>
    radio_hal_SpiWriteData(byteCount, pData);
 802d4fa:	79fb      	ldrb	r3, [r7, #7]
 802d4fc:	6839      	ldr	r1, [r7, #0]
 802d4fe:	4618      	mov	r0, r3
 802d500:	f000 f951 	bl	802d7a6 <radio_hal_SpiWriteData>
    radio_hal_SetNsel();
 802d504:	f000 f8c0 	bl	802d688 <radio_hal_SetNsel>
    ctsWentHigh = 0;
 802d508:	4b03      	ldr	r3, [pc, #12]	; (802d518 <radio_comm_SendCmd+0x3c>)
 802d50a:	2200      	movs	r2, #0
 802d50c:	701a      	strb	r2, [r3, #0]
}
 802d50e:	bf00      	nop
 802d510:	3708      	adds	r7, #8
 802d512:	46bd      	mov	sp, r7
 802d514:	bd80      	pop	{r7, pc}
 802d516:	bf00      	nop
 802d518:	20001368 	.word	0x20001368

0802d51c <radio_comm_ReadData>:
 * @param pollCts       Set to poll CTS
 * @param byteCount     Number of bytes to get from the radio chip.
 * @param pData         Pointer to where to put the data.
 */
void radio_comm_ReadData(U8 cmd, BIT pollCts, U8 byteCount, U8* pData)
{
 802d51c:	b580      	push	{r7, lr}
 802d51e:	b082      	sub	sp, #8
 802d520:	af00      	add	r7, sp, #0
 802d522:	603b      	str	r3, [r7, #0]
 802d524:	4603      	mov	r3, r0
 802d526:	71fb      	strb	r3, [r7, #7]
 802d528:	460b      	mov	r3, r1
 802d52a:	71bb      	strb	r3, [r7, #6]
 802d52c:	4613      	mov	r3, r2
 802d52e:	717b      	strb	r3, [r7, #5]
    if(pollCts)
 802d530:	79bb      	ldrb	r3, [r7, #6]
 802d532:	2b00      	cmp	r3, #0
 802d534:	d006      	beq.n	802d544 <radio_comm_ReadData+0x28>
    {
        while(!ctsWentHigh)
 802d536:	e001      	b.n	802d53c <radio_comm_ReadData+0x20>
        {
            radio_comm_PollCTS();
 802d538:	f000 f844 	bl	802d5c4 <radio_comm_PollCTS>
        while(!ctsWentHigh)
 802d53c:	4b0b      	ldr	r3, [pc, #44]	; (802d56c <radio_comm_ReadData+0x50>)
 802d53e:	781b      	ldrb	r3, [r3, #0]
 802d540:	2b00      	cmp	r3, #0
 802d542:	d0f9      	beq.n	802d538 <radio_comm_ReadData+0x1c>
        }
    }
    radio_hal_ClearNsel();
 802d544:	f000 f894 	bl	802d670 <radio_hal_ClearNsel>
    radio_hal_SpiWriteByte(cmd);
 802d548:	79fb      	ldrb	r3, [r7, #7]
 802d54a:	4618      	mov	r0, r3
 802d54c:	f000 f916 	bl	802d77c <radio_hal_SpiWriteByte>
    radio_hal_SpiReadData(byteCount, pData);
 802d550:	797b      	ldrb	r3, [r7, #5]
 802d552:	6839      	ldr	r1, [r7, #0]
 802d554:	4618      	mov	r0, r3
 802d556:	f000 f935 	bl	802d7c4 <radio_hal_SpiReadData>
    radio_hal_SetNsel();
 802d55a:	f000 f895 	bl	802d688 <radio_hal_SetNsel>
    ctsWentHigh = 0;
 802d55e:	4b03      	ldr	r3, [pc, #12]	; (802d56c <radio_comm_ReadData+0x50>)
 802d560:	2200      	movs	r2, #0
 802d562:	701a      	strb	r2, [r3, #0]
}
 802d564:	bf00      	nop
 802d566:	3708      	adds	r7, #8
 802d568:	46bd      	mov	sp, r7
 802d56a:	bd80      	pop	{r7, pc}
 802d56c:	20001368 	.word	0x20001368

0802d570 <radio_comm_WriteData>:
 * @param pollCts       Set to poll CTS
 * @param byteCount     Number of bytes to get from the radio chip
 * @param pData         Pointer to where to put the data
 */
void radio_comm_WriteData(U8 cmd, BIT pollCts, U8 byteCount, U8* pData)
{
 802d570:	b580      	push	{r7, lr}
 802d572:	b082      	sub	sp, #8
 802d574:	af00      	add	r7, sp, #0
 802d576:	603b      	str	r3, [r7, #0]
 802d578:	4603      	mov	r3, r0
 802d57a:	71fb      	strb	r3, [r7, #7]
 802d57c:	460b      	mov	r3, r1
 802d57e:	71bb      	strb	r3, [r7, #6]
 802d580:	4613      	mov	r3, r2
 802d582:	717b      	strb	r3, [r7, #5]
    if(pollCts)
 802d584:	79bb      	ldrb	r3, [r7, #6]
 802d586:	2b00      	cmp	r3, #0
 802d588:	d006      	beq.n	802d598 <radio_comm_WriteData+0x28>
    {
        while(!ctsWentHigh)
 802d58a:	e001      	b.n	802d590 <radio_comm_WriteData+0x20>
        {
            radio_comm_PollCTS();
 802d58c:	f000 f81a 	bl	802d5c4 <radio_comm_PollCTS>
        while(!ctsWentHigh)
 802d590:	4b0b      	ldr	r3, [pc, #44]	; (802d5c0 <radio_comm_WriteData+0x50>)
 802d592:	781b      	ldrb	r3, [r3, #0]
 802d594:	2b00      	cmp	r3, #0
 802d596:	d0f9      	beq.n	802d58c <radio_comm_WriteData+0x1c>
        }
    }
    radio_hal_ClearNsel();
 802d598:	f000 f86a 	bl	802d670 <radio_hal_ClearNsel>
    radio_hal_SpiWriteByte(cmd);
 802d59c:	79fb      	ldrb	r3, [r7, #7]
 802d59e:	4618      	mov	r0, r3
 802d5a0:	f000 f8ec 	bl	802d77c <radio_hal_SpiWriteByte>
    radio_hal_SpiWriteData(byteCount, pData);
 802d5a4:	797b      	ldrb	r3, [r7, #5]
 802d5a6:	6839      	ldr	r1, [r7, #0]
 802d5a8:	4618      	mov	r0, r3
 802d5aa:	f000 f8fc 	bl	802d7a6 <radio_hal_SpiWriteData>
    radio_hal_SetNsel();
 802d5ae:	f000 f86b 	bl	802d688 <radio_hal_SetNsel>
    ctsWentHigh = 0;
 802d5b2:	4b03      	ldr	r3, [pc, #12]	; (802d5c0 <radio_comm_WriteData+0x50>)
 802d5b4:	2200      	movs	r2, #0
 802d5b6:	701a      	strb	r2, [r3, #0]
}
 802d5b8:	bf00      	nop
 802d5ba:	3708      	adds	r7, #8
 802d5bc:	46bd      	mov	sp, r7
 802d5be:	bd80      	pop	{r7, pc}
 802d5c0:	20001368 	.word	0x20001368

0802d5c4 <radio_comm_PollCTS>:
 * Waits for CTS to be high
 *
 * @return CTS value
 */
U8 radio_comm_PollCTS(void)
{
 802d5c4:	b580      	push	{r7, lr}
 802d5c6:	af00      	add	r7, sp, #0
        /* Wait...*/
    }
    ctsWentHigh = 1;
    return 0xFF;
#else
    return radio_comm_GetResp(0, 0);
 802d5c8:	2100      	movs	r1, #0
 802d5ca:	2000      	movs	r0, #0
 802d5cc:	f7ff ff4a 	bl	802d464 <radio_comm_GetResp>
 802d5d0:	4603      	mov	r3, r0
#endif
}
 802d5d2:	4618      	mov	r0, r3
 802d5d4:	bd80      	pop	{r7, pc}
	...

0802d5d8 <radio_comm_ClearCTS>:

/**
 * Clears the CTS state variable.
 */
void radio_comm_ClearCTS()
{
 802d5d8:	b480      	push	{r7}
 802d5da:	af00      	add	r7, sp, #0
  ctsWentHigh = 0;
 802d5dc:	4b03      	ldr	r3, [pc, #12]	; (802d5ec <radio_comm_ClearCTS+0x14>)
 802d5de:	2200      	movs	r2, #0
 802d5e0:	701a      	strb	r2, [r3, #0]
}
 802d5e2:	bf00      	nop
 802d5e4:	46bd      	mov	sp, r7
 802d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d5ea:	4770      	bx	lr
 802d5ec:	20001368 	.word	0x20001368

0802d5f0 <radio_comm_SendCmdGetResp>:
 * @param pRespData     Pointer to where to put the response data
 *
 * @return CTS value
 */
U8 radio_comm_SendCmdGetResp(U8 cmdByteCount, U8* pCmdData, U8 respByteCount, U8* pRespData)
{
 802d5f0:	b580      	push	{r7, lr}
 802d5f2:	b084      	sub	sp, #16
 802d5f4:	af00      	add	r7, sp, #0
 802d5f6:	60b9      	str	r1, [r7, #8]
 802d5f8:	607b      	str	r3, [r7, #4]
 802d5fa:	4603      	mov	r3, r0
 802d5fc:	73fb      	strb	r3, [r7, #15]
 802d5fe:	4613      	mov	r3, r2
 802d600:	73bb      	strb	r3, [r7, #14]
    radio_comm_SendCmd(cmdByteCount, pCmdData);
 802d602:	7bfb      	ldrb	r3, [r7, #15]
 802d604:	68b9      	ldr	r1, [r7, #8]
 802d606:	4618      	mov	r0, r3
 802d608:	f7ff ff68 	bl	802d4dc <radio_comm_SendCmd>
    return radio_comm_GetResp(respByteCount, pRespData);
 802d60c:	7bbb      	ldrb	r3, [r7, #14]
 802d60e:	6879      	ldr	r1, [r7, #4]
 802d610:	4618      	mov	r0, r3
 802d612:	f7ff ff27 	bl	802d464 <radio_comm_GetResp>
 802d616:	4603      	mov	r3, r0
}
 802d618:	4618      	mov	r0, r3
 802d61a:	3710      	adds	r7, #16
 802d61c:	46bd      	mov	sp, r7
 802d61e:	bd80      	pop	{r7, pc}

0802d620 <radio_hal_AssertShutdown>:
                /* ======================================= *
                 *     P U B L I C   F U N C T I O N S     *
                 * ======================================= */

void radio_hal_AssertShutdown(void)
{
 802d620:	b580      	push	{r7, lr}
 802d622:	af00      	add	r7, sp, #0
//  PWRDN = 1;
	/*
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_SET);
	/*/
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PWR_RF_GPIO_Port, PWR_RF_Pin, GPIO_PIN_RESET);
 802d624:	2200      	movs	r2, #0
 802d626:	2104      	movs	r1, #4
 802d628:	4806      	ldr	r0, [pc, #24]	; (802d644 <radio_hal_AssertShutdown+0x24>)
 802d62a:	f7f5 ff77 	bl	802351c <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(PWR_RF_GPIO_Port, PWR_RF_Pin, GPIO_PIN_SET);
  HAL_Delay(1);
 802d62e:	2001      	movs	r0, #1
 802d630:	f7f4 faa6 	bl	8021b80 <HAL_Delay>
  HAL_GPIO_WritePin(TRN_RST_GPIO_Port,TRN_RST_Pin,GPIO_PIN_SET);
 802d634:	2201      	movs	r2, #1
 802d636:	2120      	movs	r1, #32
 802d638:	4803      	ldr	r0, [pc, #12]	; (802d648 <radio_hal_AssertShutdown+0x28>)
 802d63a:	f7f5 ff6f 	bl	802351c <HAL_GPIO_WritePin>
	//	*/
}
 802d63e:	bf00      	nop
 802d640:	bd80      	pop	{r7, pc}
 802d642:	bf00      	nop
 802d644:	40021000 	.word	0x40021000
 802d648:	40020800 	.word	0x40020800

0802d64c <radio_hal_DeassertShutdown>:

void radio_hal_DeassertShutdown(void)
{
 802d64c:	b580      	push	{r7, lr}
 802d64e:	af00      	add	r7, sp, #0
//  PWRDN = 0;
	/*
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
	/*/
	HAL_GPIO_WritePin(PWR_RF_GPIO_Port, PWR_RF_Pin, GPIO_PIN_SET);
 802d650:	2201      	movs	r2, #1
 802d652:	2104      	movs	r1, #4
 802d654:	4804      	ldr	r0, [pc, #16]	; (802d668 <radio_hal_DeassertShutdown+0x1c>)
 802d656:	f7f5 ff61 	bl	802351c <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(TRN_RST_GPIO_Port,TRN_RST_Pin,GPIO_PIN_RESET);
 802d65a:	2200      	movs	r2, #0
 802d65c:	2120      	movs	r1, #32
 802d65e:	4803      	ldr	r0, [pc, #12]	; (802d66c <radio_hal_DeassertShutdown+0x20>)
 802d660:	f7f5 ff5c 	bl	802351c <HAL_GPIO_WritePin>
	//	*/
}
 802d664:	bf00      	nop
 802d666:	bd80      	pop	{r7, pc}
 802d668:	40021000 	.word	0x40021000
 802d66c:	40020800 	.word	0x40020800

0802d670 <radio_hal_ClearNsel>:

void radio_hal_ClearNsel(void)
{
 802d670:	b580      	push	{r7, lr}
 802d672:	af00      	add	r7, sp, #0
//    RF_NSEL = 0;
    HAL_GPIO_WritePin(SPI_CSN_GPIO_Port,SPI_CSN_Pin,GPIO_PIN_RESET);
 802d674:	2200      	movs	r2, #0
 802d676:	2110      	movs	r1, #16
 802d678:	4802      	ldr	r0, [pc, #8]	; (802d684 <radio_hal_ClearNsel+0x14>)
 802d67a:	f7f5 ff4f 	bl	802351c <HAL_GPIO_WritePin>
}
 802d67e:	bf00      	nop
 802d680:	bd80      	pop	{r7, pc}
 802d682:	bf00      	nop
 802d684:	40020000 	.word	0x40020000

0802d688 <radio_hal_SetNsel>:

void radio_hal_SetNsel(void)
{
 802d688:	b580      	push	{r7, lr}
 802d68a:	af00      	add	r7, sp, #0
//    RF_NSEL = 1;
     HAL_GPIO_WritePin(SPI_CSN_GPIO_Port,SPI_CSN_Pin,GPIO_PIN_SET);
 802d68c:	2201      	movs	r2, #1
 802d68e:	2110      	movs	r1, #16
 802d690:	4802      	ldr	r0, [pc, #8]	; (802d69c <radio_hal_SetNsel+0x14>)
 802d692:	f7f5 ff43 	bl	802351c <HAL_GPIO_WritePin>
}
 802d696:	bf00      	nop
 802d698:	bd80      	pop	{r7, pc}
 802d69a:	bf00      	nop
 802d69c:	40020000 	.word	0x40020000

0802d6a0 <radio_hal_NirqLevel>:

BIT radio_hal_NirqLevel(void)
{
 802d6a0:	b580      	push	{r7, lr}
 802d6a2:	af00      	add	r7, sp, #0
//	return (GPIO_PinState) RF_NIRQ;
    return HAL_GPIO_ReadPin(RF_INT_GPIO_Port,RF_INT_Pin);
 802d6a4:	2110      	movs	r1, #16
 802d6a6:	4803      	ldr	r0, [pc, #12]	; (802d6b4 <radio_hal_NirqLevel+0x14>)
 802d6a8:	f7f5 ff20 	bl	80234ec <HAL_GPIO_ReadPin>
 802d6ac:	4603      	mov	r3, r0
}
 802d6ae:	4618      	mov	r0, r3
 802d6b0:	bd80      	pop	{r7, pc}
 802d6b2:	bf00      	nop
 802d6b4:	40020800 	.word	0x40020800

0802d6b8 <SpiReadWrite>:
  
}


U8 SpiReadWrite( U8 byteToWrite )
{
 802d6b8:	b580      	push	{r7, lr}
 802d6ba:	b0a6      	sub	sp, #152	; 0x98
 802d6bc:	af02      	add	r7, sp, #8
 802d6be:	4603      	mov	r3, r0
 802d6c0:	71fb      	strb	r3, [r7, #7]
	U8 wdata[64];
	U8 rdata[64];

	uint16_t byteCount;

	wdata[0] = byteToWrite;	//	0xFF;
 802d6c2:	79fb      	ldrb	r3, [r7, #7]
 802d6c4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	rdata[0] = 0;
 802d6c8:	2300      	movs	r3, #0
 802d6ca:	733b      	strb	r3, [r7, #12]

	byteCount = 1;
 802d6cc:	2301      	movs	r3, #1
 802d6ce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	}

	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
#else

	HAL_SPI_TransmitReceive(&hspi1, wdata, rdata, byteCount,HAL_MAX_DELAY);
 802d6d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 802d6d6:	f107 020c 	add.w	r2, r7, #12
 802d6da:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802d6de:	f04f 30ff 	mov.w	r0, #4294967295
 802d6e2:	9000      	str	r0, [sp, #0]
 802d6e4:	4803      	ldr	r0, [pc, #12]	; (802d6f4 <SpiReadWrite+0x3c>)
 802d6e6:	f7fa f991 	bl	8027a0c <HAL_SPI_TransmitReceive>

#endif

	return rdata[0];
 802d6ea:	7b3b      	ldrb	r3, [r7, #12]
}
 802d6ec:	4618      	mov	r0, r3
 802d6ee:	3790      	adds	r7, #144	; 0x90
 802d6f0:	46bd      	mov	sp, r7
 802d6f2:	bd80      	pop	{r7, pc}
 802d6f4:	20000fe8 	.word	0x20000fe8

0802d6f8 <SpiWriteData>:


U8 *SpiWriteData( U16 byteCount, U8 *byteToWrite )
{
 802d6f8:	b580      	push	{r7, lr}
 802d6fa:	b096      	sub	sp, #88	; 0x58
 802d6fc:	af02      	add	r7, sp, #8
 802d6fe:	6078      	str	r0, [r7, #4]
 802d700:	6039      	str	r1, [r7, #0]
	U8 rdata[64];
	U8 *wdata = byteToWrite;
 802d702:	683b      	ldr	r3, [r7, #0]
 802d704:	64fb      	str	r3, [r7, #76]	; 0x4c

	rdata[0] = 0;
 802d706:	2300      	movs	r3, #0
 802d708:	733b      	strb	r3, [r7, #12]

	memset( rdata, 0, sizeof(rdata) );
 802d70a:	f107 030c 	add.w	r3, r7, #12
 802d70e:	2240      	movs	r2, #64	; 0x40
 802d710:	2100      	movs	r1, #0
 802d712:	4618      	mov	r0, r3
 802d714:	f00a f926 	bl	8037964 <memset>
	}

	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
#else

	HAL_SPI_TransmitReceive(&hspi1, wdata, rdata, byteCount,HAL_MAX_DELAY);
 802d718:	687b      	ldr	r3, [r7, #4]
 802d71a:	b29b      	uxth	r3, r3
 802d71c:	f107 020c 	add.w	r2, r7, #12
 802d720:	f04f 31ff 	mov.w	r1, #4294967295
 802d724:	9100      	str	r1, [sp, #0]
 802d726:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 802d728:	4803      	ldr	r0, [pc, #12]	; (802d738 <SpiWriteData+0x40>)
 802d72a:	f7fa f96f 	bl	8027a0c <HAL_SPI_TransmitReceive>

#endif

	return byteToWrite;
 802d72e:	683b      	ldr	r3, [r7, #0]
}
 802d730:	4618      	mov	r0, r3
 802d732:	3750      	adds	r7, #80	; 0x50
 802d734:	46bd      	mov	sp, r7
 802d736:	bd80      	pop	{r7, pc}
 802d738:	20000fe8 	.word	0x20000fe8

0802d73c <SpiReadData>:


U8 *SpiReadData( U16 byteCount, U8 *byteToWrite )
{
 802d73c:	b580      	push	{r7, lr}
 802d73e:	b096      	sub	sp, #88	; 0x58
 802d740:	af02      	add	r7, sp, #8
 802d742:	6078      	str	r0, [r7, #4]
 802d744:	6039      	str	r1, [r7, #0]

	U8 wdata[64];
	U8 *rdata = byteToWrite;
 802d746:	683b      	ldr	r3, [r7, #0]
 802d748:	64fb      	str	r3, [r7, #76]	; 0x4c

	memset(wdata, 0xFF, byteCount);
 802d74a:	f107 030c 	add.w	r3, r7, #12
 802d74e:	687a      	ldr	r2, [r7, #4]
 802d750:	21ff      	movs	r1, #255	; 0xff
 802d752:	4618      	mov	r0, r3
 802d754:	f00a f906 	bl	8037964 <memset>
	}

	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
#else

	HAL_SPI_TransmitReceive(&hspi1, wdata, rdata, byteCount,HAL_MAX_DELAY);
 802d758:	687b      	ldr	r3, [r7, #4]
 802d75a:	b29b      	uxth	r3, r3
 802d75c:	f107 010c 	add.w	r1, r7, #12
 802d760:	f04f 32ff 	mov.w	r2, #4294967295
 802d764:	9200      	str	r2, [sp, #0]
 802d766:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802d768:	4803      	ldr	r0, [pc, #12]	; (802d778 <SpiReadData+0x3c>)
 802d76a:	f7fa f94f 	bl	8027a0c <HAL_SPI_TransmitReceive>

#endif

	return byteToWrite;
 802d76e:	683b      	ldr	r3, [r7, #0]
}
 802d770:	4618      	mov	r0, r3
 802d772:	3750      	adds	r7, #80	; 0x50
 802d774:	46bd      	mov	sp, r7
 802d776:	bd80      	pop	{r7, pc}
 802d778:	20000fe8 	.word	0x20000fe8

0802d77c <radio_hal_SpiWriteByte>:

void radio_hal_SpiWriteByte(U8 byteToWrite)
{
 802d77c:	b580      	push	{r7, lr}
 802d77e:	b082      	sub	sp, #8
 802d780:	af00      	add	r7, sp, #0
 802d782:	4603      	mov	r3, r0
 802d784:	71fb      	strb	r3, [r7, #7]
#if (defined SILABS_PLATFORM_RFSTICK) || (defined SILABS_PLATFORM_LCDBB) || (defined SILABS_PLATFORM_WMB)
  bSpi_ReadWriteSpi1(byteToWrite);
#else
  SpiReadWrite(byteToWrite);
 802d786:	79fb      	ldrb	r3, [r7, #7]
 802d788:	4618      	mov	r0, r3
 802d78a:	f7ff ff95 	bl	802d6b8 <SpiReadWrite>
#endif
}
 802d78e:	bf00      	nop
 802d790:	3708      	adds	r7, #8
 802d792:	46bd      	mov	sp, r7
 802d794:	bd80      	pop	{r7, pc}

0802d796 <radio_hal_SpiReadByte>:

U8 radio_hal_SpiReadByte(void)
{
 802d796:	b580      	push	{r7, lr}
 802d798:	af00      	add	r7, sp, #0
#if (defined SILABS_PLATFORM_RFSTICK) || (defined SILABS_PLATFORM_LCDBB) || (defined SILABS_PLATFORM_WMB)
  return bSpi_ReadWriteSpi1(0xFF);
#else
  return SpiReadWrite(0xFF);
 802d79a:	20ff      	movs	r0, #255	; 0xff
 802d79c:	f7ff ff8c 	bl	802d6b8 <SpiReadWrite>
 802d7a0:	4603      	mov	r3, r0
#endif
}
 802d7a2:	4618      	mov	r0, r3
 802d7a4:	bd80      	pop	{r7, pc}

0802d7a6 <radio_hal_SpiWriteData>:

void radio_hal_SpiWriteData(U8 byteCount, U8* pData)
{
 802d7a6:	b580      	push	{r7, lr}
 802d7a8:	b082      	sub	sp, #8
 802d7aa:	af00      	add	r7, sp, #0
 802d7ac:	4603      	mov	r3, r0
 802d7ae:	6039      	str	r1, [r7, #0]
 802d7b0:	71fb      	strb	r3, [r7, #7]
#if (defined SILABS_PLATFORM_RFSTICK) || (defined SILABS_PLATFORM_LCDBB) || (defined SILABS_PLATFORM_WMB)
  vSpi_WriteDataSpi1(byteCount, pData);
#else
  SpiWriteData(byteCount, pData);
 802d7b2:	79fb      	ldrb	r3, [r7, #7]
 802d7b4:	6839      	ldr	r1, [r7, #0]
 802d7b6:	4618      	mov	r0, r3
 802d7b8:	f7ff ff9e 	bl	802d6f8 <SpiWriteData>
#endif
}
 802d7bc:	bf00      	nop
 802d7be:	3708      	adds	r7, #8
 802d7c0:	46bd      	mov	sp, r7
 802d7c2:	bd80      	pop	{r7, pc}

0802d7c4 <radio_hal_SpiReadData>:

void radio_hal_SpiReadData(U8 byteCount, U8* pData)
{
 802d7c4:	b580      	push	{r7, lr}
 802d7c6:	b082      	sub	sp, #8
 802d7c8:	af00      	add	r7, sp, #0
 802d7ca:	4603      	mov	r3, r0
 802d7cc:	6039      	str	r1, [r7, #0]
 802d7ce:	71fb      	strb	r3, [r7, #7]
#if (defined SILABS_PLATFORM_RFSTICK) || (defined SILABS_PLATFORM_LCDBB) || (defined SILABS_PLATFORM_WMB)
  vSpi_ReadDataSpi1(byteCount, pData);
#else
  SpiReadData(byteCount, pData);
 802d7d0:	79fb      	ldrb	r3, [r7, #7]
 802d7d2:	6839      	ldr	r1, [r7, #0]
 802d7d4:	4618      	mov	r0, r3
 802d7d6:	f7ff ffb1 	bl	802d73c <SpiReadData>
#endif
}
 802d7da:	bf00      	nop
 802d7dc:	3708      	adds	r7, #8
 802d7de:	46bd      	mov	sp, r7
 802d7e0:	bd80      	pop	{r7, pc}
	...

0802d7e4 <Dump>:
/*------------------------------------------------------------------------*/

//========================================================================
void Dump( const char *sTitle, const char *sBuf, int nSize )
//========================================================================
{
 802d7e4:	b580      	push	{r7, lr}
 802d7e6:	b086      	sub	sp, #24
 802d7e8:	af00      	add	r7, sp, #0
 802d7ea:	60f8      	str	r0, [r7, #12]
 802d7ec:	60b9      	str	r1, [r7, #8]
 802d7ee:	607a      	str	r2, [r7, #4]
	if ( GetDbg() < 2 )	return;
 802d7f0:	f003 fb86 	bl	8030f00 <GetDbg>
 802d7f4:	4603      	mov	r3, r0
 802d7f6:	2b01      	cmp	r3, #1
 802d7f8:	dd19      	ble.n	802d82e <Dump+0x4a>

	printf( "%s : ", sTitle );
 802d7fa:	68f9      	ldr	r1, [r7, #12]
 802d7fc:	480e      	ldr	r0, [pc, #56]	; (802d838 <Dump+0x54>)
 802d7fe:	f009 fe4f 	bl	80374a0 <iprintf>

	int i;

	for( i = 0; i < nSize; i++ )
 802d802:	2300      	movs	r3, #0
 802d804:	617b      	str	r3, [r7, #20]
 802d806:	e00a      	b.n	802d81e <Dump+0x3a>
	{
		printf("%02X ", sBuf[i]);
 802d808:	697b      	ldr	r3, [r7, #20]
 802d80a:	68ba      	ldr	r2, [r7, #8]
 802d80c:	4413      	add	r3, r2
 802d80e:	781b      	ldrb	r3, [r3, #0]
 802d810:	4619      	mov	r1, r3
 802d812:	480a      	ldr	r0, [pc, #40]	; (802d83c <Dump+0x58>)
 802d814:	f009 fe44 	bl	80374a0 <iprintf>
	for( i = 0; i < nSize; i++ )
 802d818:	697b      	ldr	r3, [r7, #20]
 802d81a:	3301      	adds	r3, #1
 802d81c:	617b      	str	r3, [r7, #20]
 802d81e:	697a      	ldr	r2, [r7, #20]
 802d820:	687b      	ldr	r3, [r7, #4]
 802d822:	429a      	cmp	r2, r3
 802d824:	dbf0      	blt.n	802d808 <Dump+0x24>
	}

	printf("\n");
 802d826:	200a      	movs	r0, #10
 802d828:	f009 fe4c 	bl	80374c4 <putchar>
 802d82c:	e000      	b.n	802d830 <Dump+0x4c>
	if ( GetDbg() < 2 )	return;
 802d82e:	bf00      	nop
}
 802d830:	3718      	adds	r7, #24
 802d832:	46bd      	mov	sp, r7
 802d834:	bd80      	pop	{r7, pc}
 802d836:	bf00      	nop
 802d838:	0803944c 	.word	0x0803944c
 802d83c:	08039454 	.word	0x08039454

0802d840 <InitProcPkt>:
}

//========================================================================
int	InitProcPkt ( void )
//========================================================================
{
 802d840:	b580      	push	{r7, lr}
 802d842:	af00      	add	r7, sp, #0
	vRadio_StartRX(pRadioConfiguration->Radio_ChannelNumber,0u);

#else

	//  RF 수신 Start
	g_nChRx = GetChRx();	//	ChTS1_1 + g_idxTrainSet * 2 + ((g_nCarNo+1) % 2);	// 현재 호차 채널
 802d844:	f004 ffe6 	bl	8032814 <GetChRx>
 802d848:	4603      	mov	r3, r0
 802d84a:	4a07      	ldr	r2, [pc, #28]	; (802d868 <InitProcPkt+0x28>)
 802d84c:	6013      	str	r3, [r2, #0]

	vRadio_StartRX(
 802d84e:	4b06      	ldr	r3, [pc, #24]	; (802d868 <InitProcPkt+0x28>)
 802d850:	681b      	ldr	r3, [r3, #0]
 802d852:	b2da      	uxtb	r2, r3
		g_nChRx,	//g_idxTrainSet,	//		pRadioConfiguration->Radio_ChannelNumber,
		pRadioConfiguration->Radio_PacketLength );
 802d854:	4b05      	ldr	r3, [pc, #20]	; (802d86c <InitProcPkt+0x2c>)
 802d856:	681b      	ldr	r3, [r3, #0]
	vRadio_StartRX(
 802d858:	795b      	ldrb	r3, [r3, #5]
 802d85a:	4619      	mov	r1, r3
 802d85c:	4610      	mov	r0, r2
 802d85e:	f7ff fd99 	bl	802d394 <vRadio_StartRX>

#endif

	return TRUE;
 802d862:	2301      	movs	r3, #1
}
 802d864:	4618      	mov	r0, r3
 802d866:	bd80      	pop	{r7, pc}
 802d868:	20000be8 	.word	0x20000be8
 802d86c:	200004f0 	.word	0x200004f0

0802d870 <_ChkDropPktSeq>:

//========================================================================
int _ChkDropPktSeq( uint8_t _nRxSeq, uint8_t _currSeq )
//========================================================================
{
 802d870:	b480      	push	{r7}
 802d872:	b085      	sub	sp, #20
 802d874:	af00      	add	r7, sp, #0
 802d876:	4603      	mov	r3, r0
 802d878:	460a      	mov	r2, r1
 802d87a:	71fb      	strb	r3, [r7, #7]
 802d87c:	4613      	mov	r3, r2
 802d87e:	71bb      	strb	r3, [r7, #6]
	//	현재 받은 Packet Sequence가 새로운 패킷인지 확인.
	//		-> 이전 Packet인 경우 Drop

	if ( _nRxSeq == _currSeq )		//	Seq가 같은 Packet 수신시 Drop
 802d880:	79fa      	ldrb	r2, [r7, #7]
 802d882:	79bb      	ldrb	r3, [r7, #6]
 802d884:	429a      	cmp	r2, r3
 802d886:	d101      	bne.n	802d88c <_ChkDropPktSeq+0x1c>
	{
		return 1;	//	Pkt Drop
 802d888:	2301      	movs	r3, #1
 802d88a:	e029      	b.n	802d8e0 <_ChkDropPktSeq+0x70>
	}

	//	Rx Packet이 currPkt보다 1크면 처리.
	uint8_t currSeq = _currSeq;
 802d88c:	79bb      	ldrb	r3, [r7, #6]
 802d88e:	73fb      	strb	r3, [r7, #15]
	if ( ++currSeq == 0 )	currSeq++;
 802d890:	7bfb      	ldrb	r3, [r7, #15]
 802d892:	3301      	adds	r3, #1
 802d894:	73fb      	strb	r3, [r7, #15]
 802d896:	7bfb      	ldrb	r3, [r7, #15]
 802d898:	2b00      	cmp	r3, #0
 802d89a:	d102      	bne.n	802d8a2 <_ChkDropPktSeq+0x32>
 802d89c:	7bfb      	ldrb	r3, [r7, #15]
 802d89e:	3301      	adds	r3, #1
 802d8a0:	73fb      	strb	r3, [r7, #15]
	if ( _nRxSeq == currSeq )		//	Seq가 같은 Packet 수신시 Drop
 802d8a2:	79fa      	ldrb	r2, [r7, #7]
 802d8a4:	7bfb      	ldrb	r3, [r7, #15]
 802d8a6:	429a      	cmp	r2, r3
 802d8a8:	d101      	bne.n	802d8ae <_ChkDropPktSeq+0x3e>
	{
		return 0;	//	Valid Pkt
 802d8aa:	2300      	movs	r3, #0
 802d8ac:	e018      	b.n	802d8e0 <_ChkDropPktSeq+0x70>
	}

	//	현재 패킷보다 이전에 받은 5개 패킷은 Drop
	for( int i = 0; i < 5; i++ )
 802d8ae:	2300      	movs	r3, #0
 802d8b0:	60bb      	str	r3, [r7, #8]
 802d8b2:	e011      	b.n	802d8d8 <_ChkDropPktSeq+0x68>
	{
		if ( ++_nRxSeq == 0 )	_nRxSeq++;
 802d8b4:	79fb      	ldrb	r3, [r7, #7]
 802d8b6:	3301      	adds	r3, #1
 802d8b8:	71fb      	strb	r3, [r7, #7]
 802d8ba:	79fb      	ldrb	r3, [r7, #7]
 802d8bc:	2b00      	cmp	r3, #0
 802d8be:	d102      	bne.n	802d8c6 <_ChkDropPktSeq+0x56>
 802d8c0:	79fb      	ldrb	r3, [r7, #7]
 802d8c2:	3301      	adds	r3, #1
 802d8c4:	71fb      	strb	r3, [r7, #7]
		if ( _nRxSeq == _currSeq )		//	Seq가 같은 Packet 수신시 Drop
 802d8c6:	79fa      	ldrb	r2, [r7, #7]
 802d8c8:	79bb      	ldrb	r3, [r7, #6]
 802d8ca:	429a      	cmp	r2, r3
 802d8cc:	d101      	bne.n	802d8d2 <_ChkDropPktSeq+0x62>
		{
			return 1;	//	Pkt Drop
 802d8ce:	2301      	movs	r3, #1
 802d8d0:	e006      	b.n	802d8e0 <_ChkDropPktSeq+0x70>
	for( int i = 0; i < 5; i++ )
 802d8d2:	68bb      	ldr	r3, [r7, #8]
 802d8d4:	3301      	adds	r3, #1
 802d8d6:	60bb      	str	r3, [r7, #8]
 802d8d8:	68bb      	ldr	r3, [r7, #8]
 802d8da:	2b04      	cmp	r3, #4
 802d8dc:	ddea      	ble.n	802d8b4 <_ChkDropPktSeq+0x44>
		}
	}

	return 0;	//	Valid Pkt
 802d8de:	2300      	movs	r3, #0
}
 802d8e0:	4618      	mov	r0, r3
 802d8e2:	3714      	adds	r7, #20
 802d8e4:	46bd      	mov	sp, r7
 802d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d8ea:	4770      	bx	lr

0802d8ec <ProcPktHdr1>:

//========================================================================
int ProcPktHdr1( const RFMPkt *pRFPkt, int nSize  )
//========================================================================
{
 802d8ec:	b580      	push	{r7, lr}
 802d8ee:	b082      	sub	sp, #8
 802d8f0:	af00      	add	r7, sp, #0
 802d8f2:	6078      	str	r0, [r7, #4]
 802d8f4:	6039      	str	r1, [r7, #0]

#if defined(USE_HOPPING)
	//========================================================================
	//	Packet Filtering
	//		- Pkt 처리 여부 확인.
	if	(	pRFPkt->hdr.nSeq != 0 &&
 802d8f6:	687b      	ldr	r3, [r7, #4]
 802d8f8:	789b      	ldrb	r3, [r3, #2]
 802d8fa:	2b00      	cmp	r3, #0
 802d8fc:	d016      	beq.n	802d92c <ProcPktHdr1+0x40>
			(
//				(pRFPkt->hdr.nSeq == g_nPktSeq)		//	Seq가 같은 Packet 수신시 Drop
				_ChkDropPktSeq(pRFPkt->hdr.nSeq, g_nPktSeq)		//	Seq가 같은 Packet 수신시 Drop
 802d8fe:	687b      	ldr	r3, [r7, #4]
 802d900:	789b      	ldrb	r3, [r3, #2]
 802d902:	4a11      	ldr	r2, [pc, #68]	; (802d948 <ProcPktHdr1+0x5c>)
 802d904:	7812      	ldrb	r2, [r2, #0]
 802d906:	4611      	mov	r1, r2
 802d908:	4618      	mov	r0, r3
 802d90a:	f7ff ffb1 	bl	802d870 <_ChkDropPktSeq>
 802d90e:	4603      	mov	r3, r0
	if	(	pRFPkt->hdr.nSeq != 0 &&
 802d910:	2b00      	cmp	r3, #0
 802d912:	d104      	bne.n	802d91e <ProcPktHdr1+0x32>
				|| GetRFMMode() == RFMModeTx		//	송신모드에서는 Packet Drop
 802d914:	f004 fef8 	bl	8032708 <GetRFMMode>
 802d918:	4603      	mov	r3, r0
 802d91a:	2b01      	cmp	r3, #1
 802d91c:	d106      	bne.n	802d92c <ProcPktHdr1+0x40>
			)
		)
	{
		//	이미 처리된 Packet Skip.
		nDropPkt++;
 802d91e:	4b0b      	ldr	r3, [pc, #44]	; (802d94c <ProcPktHdr1+0x60>)
 802d920:	681b      	ldr	r3, [r3, #0]
 802d922:	3301      	adds	r3, #1
 802d924:	4a09      	ldr	r2, [pc, #36]	; (802d94c <ProcPktHdr1+0x60>)
 802d926:	6013      	str	r3, [r2, #0]
		return 0;		//	Skip
 802d928:	2300      	movs	r3, #0
 802d92a:	e008      	b.n	802d93e <ProcPktHdr1+0x52>
		//==========================================================================
	}

#endif	//	defined(USE_CH_ISO_DEV)

	if ( pRFPkt->hdr.nSeq != 0 )
 802d92c:	687b      	ldr	r3, [r7, #4]
 802d92e:	789b      	ldrb	r3, [r3, #2]
 802d930:	2b00      	cmp	r3, #0
 802d932:	d003      	beq.n	802d93c <ProcPktHdr1+0x50>
	{
		//	Seq No. 가 0이 아닌경우 Seq 갱신.
		g_nPktSeq = pRFPkt->hdr.nSeq;	//	Packet Seq 갱신.
 802d934:	687b      	ldr	r3, [r7, #4]
 802d936:	789a      	ldrb	r2, [r3, #2]
 802d938:	4b03      	ldr	r3, [pc, #12]	; (802d948 <ProcPktHdr1+0x5c>)
 802d93a:	701a      	strb	r2, [r3, #0]
	//	Device ID Flag 확인.

#endif	//	defined(USE_HOPPING)
	//========================================================================

	return 1;
 802d93c:	2301      	movs	r3, #1
}
 802d93e:	4618      	mov	r0, r3
 802d940:	3708      	adds	r7, #8
 802d942:	46bd      	mov	sp, r7
 802d944:	bd80      	pop	{r7, pc}
 802d946:	bf00      	nop
 802d948:	20001396 	.word	0x20001396
 802d94c:	20001378 	.word	0x20001378

0802d950 <ProcPktHdr2>:


//========================================================================
int ProcPktHdr2( const RFMPkt *pRFPkt, int nSize  )
//========================================================================
{
 802d950:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d952:	b097      	sub	sp, #92	; 0x5c
 802d954:	af00      	add	r7, sp, #0
 802d956:	6078      	str	r0, [r7, #4]
 802d958:	6039      	str	r1, [r7, #0]
	//	편성번호가 다른경우 Skip

	const RFMPktHdr2 *pHdr = &pRFPkt->hdr2;
 802d95a:	687b      	ldr	r3, [r7, #4]
 802d95c:	657b      	str	r3, [r7, #84]	; 0x54

	char buf[64];

	if ( pHdr->nTS != GetTrainSetIdx() )
 802d95e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d960:	781b      	ldrb	r3, [r3, #0]
 802d962:	f3c3 0305 	ubfx	r3, r3, #0, #6
 802d966:	b2db      	uxtb	r3, r3
 802d968:	461c      	mov	r4, r3
 802d96a:	f005 f905 	bl	8032b78 <GetTrainSetIdx>
 802d96e:	4603      	mov	r3, r0
 802d970:	429c      	cmp	r4, r3
 802d972:	d001      	beq.n	802d978 <ProcPktHdr2+0x28>
	{
		//	열차번호가 다른경우 : Skip
		return 0;	//	Skip
 802d974:	2300      	movs	r3, #0
 802d976:	e1aa      	b.n	802dcce <ProcPktHdr2+0x37e>
	}

#if defined(USE_HOPPING)

	if ( GetDevID() == DevRF900T )
 802d978:	f004 fe9a 	bl	80326b0 <GetDevID>
 802d97c:	4603      	mov	r3, r0
 802d97e:	2b02      	cmp	r3, #2
 802d980:	d101      	bne.n	802d986 <ProcPktHdr2+0x36>
	{
		//	송신기의 경우 중계하지 않음.
		return 1;
 802d982:	2301      	movs	r3, #1
 802d984:	e1a3      	b.n	802dcce <ProcPktHdr2+0x37e>
	}
	else if ( GetDevID() == DevRF900M )
 802d986:	f004 fe93 	bl	80326b0 <GetDevID>
 802d98a:	4603      	mov	r3, r0
 802d98c:	2b01      	cmp	r3, #1
 802d98e:	f040 819e 	bne.w	802dcce <ProcPktHdr2+0x37e>
	{
		//	송신기로부터 Data 수신 시
		if( pHdr->nSrcCh == ChTx_1 || pHdr->nSrcCh == ChTx_2 )
 802d992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d994:	785b      	ldrb	r3, [r3, #1]
 802d996:	f3c3 0305 	ubfx	r3, r3, #0, #6
 802d99a:	b2db      	uxtb	r3, r3
 802d99c:	461a      	mov	r2, r3
 802d99e:	4ba4      	ldr	r3, [pc, #656]	; (802dc30 <ProcPktHdr2+0x2e0>)
 802d9a0:	681b      	ldr	r3, [r3, #0]
 802d9a2:	429a      	cmp	r2, r3
 802d9a4:	d009      	beq.n	802d9ba <ProcPktHdr2+0x6a>
 802d9a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d9a8:	785b      	ldrb	r3, [r3, #1]
 802d9aa:	f3c3 0305 	ubfx	r3, r3, #0, #6
 802d9ae:	b2db      	uxtb	r3, r3
 802d9b0:	461a      	mov	r2, r3
 802d9b2:	4ba0      	ldr	r3, [pc, #640]	; (802dc34 <ProcPktHdr2+0x2e4>)
 802d9b4:	681b      	ldr	r3, [r3, #0]
 802d9b6:	429a      	cmp	r2, r3
 802d9b8:	d15f      	bne.n	802da7a <ProcPktHdr2+0x12a>
		{
			//	상위 / 하위 채널로 중계.
			//	1 <= 2 => 3
			nHopPkt++;
 802d9ba:	4b9f      	ldr	r3, [pc, #636]	; (802dc38 <ProcPktHdr2+0x2e8>)
 802d9bc:	681b      	ldr	r3, [r3, #0]
 802d9be:	3301      	adds	r3, #1
 802d9c0:	4a9d      	ldr	r2, [pc, #628]	; (802dc38 <ProcPktHdr2+0x2e8>)
 802d9c2:	6013      	str	r3, [r2, #0]
			memcpy( buf, pRFPkt, 64 );
 802d9c4:	687b      	ldr	r3, [r7, #4]
 802d9c6:	461c      	mov	r4, r3
 802d9c8:	f107 0608 	add.w	r6, r7, #8
 802d9cc:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 802d9d0:	4635      	mov	r5, r6
 802d9d2:	4623      	mov	r3, r4
 802d9d4:	6818      	ldr	r0, [r3, #0]
 802d9d6:	6859      	ldr	r1, [r3, #4]
 802d9d8:	689a      	ldr	r2, [r3, #8]
 802d9da:	68db      	ldr	r3, [r3, #12]
 802d9dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802d9de:	3410      	adds	r4, #16
 802d9e0:	3610      	adds	r6, #16
 802d9e2:	4564      	cmp	r4, ip
 802d9e4:	d1f4      	bne.n	802d9d0 <ProcPktHdr2+0x80>
			RFMPkt	*pSendPkt = (RFMPkt *)buf;
 802d9e6:	f107 0308 	add.w	r3, r7, #8
 802d9ea:	64bb      	str	r3, [r7, #72]	; 0x48
			pSendPkt->hdr2.nSrcCh = GetChRx();
 802d9ec:	f004 ff12 	bl	8032814 <GetChRx>
 802d9f0:	4603      	mov	r3, r0
 802d9f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802d9f6:	b2d9      	uxtb	r1, r3
 802d9f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802d9fa:	7853      	ldrb	r3, [r2, #1]
 802d9fc:	f361 0305 	bfi	r3, r1, #0, #6
 802da00:	7053      	strb	r3, [r2, #1]


			if( g_nRFMode == RFMode2 )//#if defined(USE_COMM_MODE_CH_GRP)	//	그룹주파수 모드. - [ 1, 2 ] [ 3, 4 ] ...
 802da02:	4b8e      	ldr	r3, [pc, #568]	; (802dc3c <ProcPktHdr2+0x2ec>)
 802da04:	681b      	ldr	r3, [r3, #0]
 802da06:	2b02      	cmp	r3, #2
 802da08:	d11b      	bne.n	802da42 <ProcPktHdr2+0xf2>
			{
				if ( g_nCarNo % 2 == 0 )	SendPktCh( GetChRx() + ChGap, buf, nSize ); //	짝수 Car
 802da0a:	4b8d      	ldr	r3, [pc, #564]	; (802dc40 <ProcPktHdr2+0x2f0>)
 802da0c:	681b      	ldr	r3, [r3, #0]
 802da0e:	f003 0301 	and.w	r3, r3, #1
 802da12:	2b00      	cmp	r3, #0
 802da14:	d10a      	bne.n	802da2c <ProcPktHdr2+0xdc>
 802da16:	f004 fefd 	bl	8032814 <GetChRx>
 802da1a:	4603      	mov	r3, r0
 802da1c:	3304      	adds	r3, #4
 802da1e:	f107 0108 	add.w	r1, r7, #8
 802da22:	683a      	ldr	r2, [r7, #0]
 802da24:	4618      	mov	r0, r3
 802da26:	f000 fb19 	bl	802e05c <SendPktCh>
		{
 802da2a:	e14f      	b.n	802dccc <ProcPktHdr2+0x37c>
				else						SendPktCh( GetChRx() - ChGap, buf, nSize ); //	홀수 Car
 802da2c:	f004 fef2 	bl	8032814 <GetChRx>
 802da30:	4603      	mov	r3, r0
 802da32:	3b04      	subs	r3, #4
 802da34:	f107 0108 	add.w	r1, r7, #8
 802da38:	683a      	ldr	r2, [r7, #0]
 802da3a:	4618      	mov	r0, r3
 802da3c:	f000 fb0e 	bl	802e05c <SendPktCh>
		{
 802da40:	e144      	b.n	802dccc <ProcPktHdr2+0x37c>
			}
			else	//#else
			{
				//	현재 동작중인 상위 / 하위 채널로 중계.
#if defined(USE_ROUTE_REQ)
				if( GetChRFMUp() )		SendPktCh( GetChRFMUp(), buf, nSize );
 802da42:	f005 f81d 	bl	8032a80 <GetChRFMUp>
 802da46:	4603      	mov	r3, r0
 802da48:	2b00      	cmp	r3, #0
 802da4a:	d007      	beq.n	802da5c <ProcPktHdr2+0x10c>
 802da4c:	f005 f818 	bl	8032a80 <GetChRFMUp>
 802da50:	f107 0308 	add.w	r3, r7, #8
 802da54:	683a      	ldr	r2, [r7, #0]
 802da56:	4619      	mov	r1, r3
 802da58:	f000 fb00 	bl	802e05c <SendPktCh>

				if( GetChRFMDown() )	SendPktCh( GetChRFMDown(), buf, nSize );
 802da5c:	f005 f82c 	bl	8032ab8 <GetChRFMDown>
 802da60:	4603      	mov	r3, r0
 802da62:	2b00      	cmp	r3, #0
 802da64:	f000 8132 	beq.w	802dccc <ProcPktHdr2+0x37c>
 802da68:	f005 f826 	bl	8032ab8 <GetChRFMDown>
 802da6c:	f107 0308 	add.w	r3, r7, #8
 802da70:	683a      	ldr	r2, [r7, #0]
 802da72:	4619      	mov	r1, r3
 802da74:	f000 faf2 	bl	802e05c <SendPktCh>
		{
 802da78:	e128      	b.n	802dccc <ProcPktHdr2+0x37c>
#endif
			}//#endif
		}
		//	수신기로부터 Data 수신 시
#if defined(USE_ROUTE_REQ)
		else if( pHdr->nSrcCh <= ( GetChRx() - ChGap ) )
 802da7a:	f004 fecb 	bl	8032814 <GetChRx>
 802da7e:	4603      	mov	r3, r0
 802da80:	3b03      	subs	r3, #3
 802da82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802da84:	7852      	ldrb	r2, [r2, #1]
 802da86:	f3c2 0205 	ubfx	r2, r2, #0, #6
 802da8a:	b2d2      	uxtb	r2, r2
 802da8c:	4293      	cmp	r3, r2
 802da8e:	f340 8082 	ble.w	802db96 <ProcPktHdr2+0x246>
		else if( pHdr->nSrcCh == ( GetChRx() - ChGap ) )
#endif
		{
			//	상위 채널로 중계.
			//	1 -> 2 => 3
			nHopPkt++;
 802da92:	4b69      	ldr	r3, [pc, #420]	; (802dc38 <ProcPktHdr2+0x2e8>)
 802da94:	681b      	ldr	r3, [r3, #0]
 802da96:	3301      	adds	r3, #1
 802da98:	4a67      	ldr	r2, [pc, #412]	; (802dc38 <ProcPktHdr2+0x2e8>)
 802da9a:	6013      	str	r3, [r2, #0]
			memcpy( buf, pRFPkt, 64 );
 802da9c:	687b      	ldr	r3, [r7, #4]
 802da9e:	461c      	mov	r4, r3
 802daa0:	f107 0608 	add.w	r6, r7, #8
 802daa4:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 802daa8:	4635      	mov	r5, r6
 802daaa:	4623      	mov	r3, r4
 802daac:	6818      	ldr	r0, [r3, #0]
 802daae:	6859      	ldr	r1, [r3, #4]
 802dab0:	689a      	ldr	r2, [r3, #8]
 802dab2:	68db      	ldr	r3, [r3, #12]
 802dab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802dab6:	3410      	adds	r4, #16
 802dab8:	3610      	adds	r6, #16
 802daba:	4564      	cmp	r4, ip
 802dabc:	d1f4      	bne.n	802daa8 <ProcPktHdr2+0x158>
			RFMPkt	*pSendPkt = (RFMPkt *)buf;
 802dabe:	f107 0308 	add.w	r3, r7, #8
 802dac2:	64fb      	str	r3, [r7, #76]	; 0x4c
			pSendPkt->hdr2.nSrcCh = GetChRx();
 802dac4:	f004 fea6 	bl	8032814 <GetChRx>
 802dac8:	4603      	mov	r3, r0
 802daca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802dace:	b2d9      	uxtb	r1, r3
 802dad0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802dad2:	7853      	ldrb	r3, [r2, #1]
 802dad4:	f361 0305 	bfi	r3, r1, #0, #6
 802dad8:	7053      	strb	r3, [r2, #1]

#if defined(USE_ROUTE_NEAREST_RFM)	//	수신기 -> 송신기 중계 연결. ( 가장가까운 수신기에서 송신기로 중계 )
			if ( g_devStat[RFTCarNo1].nNearCh == GetChRx()		//	송신기의 가까운 채널이 자신의 채널이면 송신기로 중계.
 802dada:	4b5a      	ldr	r3, [pc, #360]	; (802dc44 <ProcPktHdr2+0x2f4>)
 802dadc:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 802dae0:	f004 fe98 	bl	8032814 <GetChRx>
 802dae4:	4603      	mov	r3, r0
 802dae6:	429c      	cmp	r4, r3
 802dae8:	d114      	bne.n	802db14 <ProcPktHdr2+0x1c4>
					&& pSendPkt->hdr2.bRFT1 == 0 )
 802daea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802daec:	785b      	ldrb	r3, [r3, #1]
 802daee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802daf2:	b2db      	uxtb	r3, r3
 802daf4:	2b00      	cmp	r3, #0
 802daf6:	d10d      	bne.n	802db14 <ProcPktHdr2+0x1c4>
			{
				pSendPkt->hdr2.bRFT1 = 1;
 802daf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802dafa:	7853      	ldrb	r3, [r2, #1]
 802dafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802db00:	7053      	strb	r3, [r2, #1]
				SendPktCh( ChTx_1, buf, nSize );
 802db02:	4b4b      	ldr	r3, [pc, #300]	; (802dc30 <ProcPktHdr2+0x2e0>)
 802db04:	681b      	ldr	r3, [r3, #0]
 802db06:	f107 0108 	add.w	r1, r7, #8
 802db0a:	683a      	ldr	r2, [r7, #0]
 802db0c:	4618      	mov	r0, r3
 802db0e:	f000 faa5 	bl	802e05c <SendPktCh>
 802db12:	e01b      	b.n	802db4c <ProcPktHdr2+0x1fc>
			}
			else if ( g_devStat[RFTCarNo2].nNearCh == GetChRx()	//	송신기의 가까운 채널이 자신의 채널이면 송신기로 중계.
 802db14:	4b4b      	ldr	r3, [pc, #300]	; (802dc44 <ProcPktHdr2+0x2f4>)
 802db16:	f8d3 41dd 	ldr.w	r4, [r3, #477]	; 0x1dd
 802db1a:	f004 fe7b 	bl	8032814 <GetChRx>
 802db1e:	4603      	mov	r3, r0
 802db20:	429c      	cmp	r4, r3
 802db22:	d113      	bne.n	802db4c <ProcPktHdr2+0x1fc>
					&& pSendPkt->hdr2.bRFT2 == 0 )
 802db24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802db26:	785b      	ldrb	r3, [r3, #1]
 802db28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802db2c:	b2db      	uxtb	r3, r3
 802db2e:	2b00      	cmp	r3, #0
 802db30:	d10c      	bne.n	802db4c <ProcPktHdr2+0x1fc>
			{
				pSendPkt->hdr2.bRFT2 = 1;
 802db32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802db34:	7853      	ldrb	r3, [r2, #1]
 802db36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802db3a:	7053      	strb	r3, [r2, #1]
				SendPktCh( ChTx_2, buf, nSize );
 802db3c:	4b3d      	ldr	r3, [pc, #244]	; (802dc34 <ProcPktHdr2+0x2e4>)
 802db3e:	681b      	ldr	r3, [r3, #0]
 802db40:	f107 0108 	add.w	r1, r7, #8
 802db44:	683a      	ldr	r2, [r7, #0]
 802db46:	4618      	mov	r0, r3
 802db48:	f000 fa88 	bl	802e05c <SendPktCh>
				pSendPkt->hdr2.bRFT2 = 1;
				SendPktCh( ChTx_2, buf, nSize );
			}
#endif	//	defined(USE_RFT_REG_TO_RFM)

			if( g_nRFMode == RFMode2 )//#if defined(USE_COMM_MODE_CH_GRP)	//	그룹주파수 모드. - [ 1, 2 ] [ 3, 4 ] ...
 802db4c:	4b3b      	ldr	r3, [pc, #236]	; (802dc3c <ProcPktHdr2+0x2ec>)
 802db4e:	681b      	ldr	r3, [r3, #0]
 802db50:	2b02      	cmp	r3, #2
 802db52:	d111      	bne.n	802db78 <ProcPktHdr2+0x228>
			{
				if ( g_nCarNo % 2 == 0 )	SendPktCh( GetChRx() + ChGap, buf, nSize ); //	짝수 Car
 802db54:	4b3a      	ldr	r3, [pc, #232]	; (802dc40 <ProcPktHdr2+0x2f0>)
 802db56:	681b      	ldr	r3, [r3, #0]
 802db58:	f003 0301 	and.w	r3, r3, #1
 802db5c:	2b00      	cmp	r3, #0
 802db5e:	f040 80b6 	bne.w	802dcce <ProcPktHdr2+0x37e>
 802db62:	f004 fe57 	bl	8032814 <GetChRx>
 802db66:	4603      	mov	r3, r0
 802db68:	3304      	adds	r3, #4
 802db6a:	f107 0108 	add.w	r1, r7, #8
 802db6e:	683a      	ldr	r2, [r7, #0]
 802db70:	4618      	mov	r0, r3
 802db72:	f000 fa73 	bl	802e05c <SendPktCh>
 802db76:	e0aa      	b.n	802dcce <ProcPktHdr2+0x37e>
			}
			else	//	#else
			{
#if defined(USE_ROUTE_REQ)
				//	현재 동작중인 상위 채널로 중계
				if( GetChRFMUp() )	SendPktCh( GetChRFMUp(), buf, nSize );
 802db78:	f004 ff82 	bl	8032a80 <GetChRFMUp>
 802db7c:	4603      	mov	r3, r0
 802db7e:	2b00      	cmp	r3, #0
 802db80:	f000 80a5 	beq.w	802dcce <ProcPktHdr2+0x37e>
 802db84:	f004 ff7c 	bl	8032a80 <GetChRFMUp>
 802db88:	f107 0308 	add.w	r3, r7, #8
 802db8c:	683a      	ldr	r2, [r7, #0]
 802db8e:	4619      	mov	r1, r3
 802db90:	f000 fa64 	bl	802e05c <SendPktCh>
 802db94:	e09b      	b.n	802dcce <ProcPktHdr2+0x37e>
				SendPktCh( GetChRx() + ChGap, buf, nSize );
#endif
			}//#endif
		}
#if defined(USE_ROUTE_REQ)
		else if( pHdr->nSrcCh >= ( GetChRx() + ChGap ) )
 802db96:	f004 fe3d 	bl	8032814 <GetChRx>
 802db9a:	4603      	mov	r3, r0
 802db9c:	3303      	adds	r3, #3
 802db9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802dba0:	7852      	ldrb	r2, [r2, #1]
 802dba2:	f3c2 0205 	ubfx	r2, r2, #0, #6
 802dba6:	b2d2      	uxtb	r2, r2
 802dba8:	4293      	cmp	r3, r2
 802dbaa:	f280 8090 	bge.w	802dcce <ProcPktHdr2+0x37e>
		else if( pHdr->nSrcCh == ( GetChRx() + ChGap ) )
#endif
		{
			//	하위 채널로 중계.
			//	1 <= 2 <- 3
			nHopPkt++;
 802dbae:	4b22      	ldr	r3, [pc, #136]	; (802dc38 <ProcPktHdr2+0x2e8>)
 802dbb0:	681b      	ldr	r3, [r3, #0]
 802dbb2:	3301      	adds	r3, #1
 802dbb4:	4a20      	ldr	r2, [pc, #128]	; (802dc38 <ProcPktHdr2+0x2e8>)
 802dbb6:	6013      	str	r3, [r2, #0]
			memcpy( buf, pRFPkt, 64 );
 802dbb8:	687b      	ldr	r3, [r7, #4]
 802dbba:	461c      	mov	r4, r3
 802dbbc:	f107 0608 	add.w	r6, r7, #8
 802dbc0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 802dbc4:	4635      	mov	r5, r6
 802dbc6:	4623      	mov	r3, r4
 802dbc8:	6818      	ldr	r0, [r3, #0]
 802dbca:	6859      	ldr	r1, [r3, #4]
 802dbcc:	689a      	ldr	r2, [r3, #8]
 802dbce:	68db      	ldr	r3, [r3, #12]
 802dbd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802dbd2:	3410      	adds	r4, #16
 802dbd4:	3610      	adds	r6, #16
 802dbd6:	4564      	cmp	r4, ip
 802dbd8:	d1f4      	bne.n	802dbc4 <ProcPktHdr2+0x274>
			RFMPkt	*pSendPkt = (RFMPkt *)buf;
 802dbda:	f107 0308 	add.w	r3, r7, #8
 802dbde:	653b      	str	r3, [r7, #80]	; 0x50
			pSendPkt->hdr2.nSrcCh = GetChRx();
 802dbe0:	f004 fe18 	bl	8032814 <GetChRx>
 802dbe4:	4603      	mov	r3, r0
 802dbe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802dbea:	b2d9      	uxtb	r1, r3
 802dbec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802dbee:	7853      	ldrb	r3, [r2, #1]
 802dbf0:	f361 0305 	bfi	r3, r1, #0, #6
 802dbf4:	7053      	strb	r3, [r2, #1]

#if defined(USE_ROUTE_NEAREST_RFM)	//	수신기 -> 송신기 중계 연결. ( 가장가까운 수신기에서 송신기로 중계 )
			if ( g_devStat[RFTCarNo1].nNearCh == GetChRx()		//	송신기의 가까운 채널이 자신의 채널이면 송신기로 중계.
 802dbf6:	4b13      	ldr	r3, [pc, #76]	; (802dc44 <ProcPktHdr2+0x2f4>)
 802dbf8:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 802dbfc:	f004 fe0a 	bl	8032814 <GetChRx>
 802dc00:	4603      	mov	r3, r0
 802dc02:	429c      	cmp	r4, r3
 802dc04:	d120      	bne.n	802dc48 <ProcPktHdr2+0x2f8>
					&& pSendPkt->hdr2.bRFT1 == 0 )
 802dc06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802dc08:	785b      	ldrb	r3, [r3, #1]
 802dc0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802dc0e:	b2db      	uxtb	r3, r3
 802dc10:	2b00      	cmp	r3, #0
 802dc12:	d119      	bne.n	802dc48 <ProcPktHdr2+0x2f8>
			{
				pSendPkt->hdr2.bRFT1 = 1;
 802dc14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802dc16:	7853      	ldrb	r3, [r2, #1]
 802dc18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802dc1c:	7053      	strb	r3, [r2, #1]
				SendPktCh( ChTx_1, buf, nSize );
 802dc1e:	4b04      	ldr	r3, [pc, #16]	; (802dc30 <ProcPktHdr2+0x2e0>)
 802dc20:	681b      	ldr	r3, [r3, #0]
 802dc22:	f107 0108 	add.w	r1, r7, #8
 802dc26:	683a      	ldr	r2, [r7, #0]
 802dc28:	4618      	mov	r0, r3
 802dc2a:	f000 fa17 	bl	802e05c <SendPktCh>
 802dc2e:	e027      	b.n	802dc80 <ProcPktHdr2+0x330>
 802dc30:	200004f4 	.word	0x200004f4
 802dc34:	200004f8 	.word	0x200004f8
 802dc38:	20001374 	.word	0x20001374
 802dc3c:	20002344 	.word	0x20002344
 802dc40:	20002330 	.word	0x20002330
 802dc44:	2000234c 	.word	0x2000234c
			}
			else if ( g_devStat[RFTCarNo2].nNearCh == GetChRx()	//	송신기의 가까운 채널이 자신의 채널이면 송신기로 중계.
 802dc48:	4b23      	ldr	r3, [pc, #140]	; (802dcd8 <ProcPktHdr2+0x388>)
 802dc4a:	f8d3 41dd 	ldr.w	r4, [r3, #477]	; 0x1dd
 802dc4e:	f004 fde1 	bl	8032814 <GetChRx>
 802dc52:	4603      	mov	r3, r0
 802dc54:	429c      	cmp	r4, r3
 802dc56:	d113      	bne.n	802dc80 <ProcPktHdr2+0x330>
					&& pSendPkt->hdr2.bRFT2 == 0 )
 802dc58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802dc5a:	785b      	ldrb	r3, [r3, #1]
 802dc5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802dc60:	b2db      	uxtb	r3, r3
 802dc62:	2b00      	cmp	r3, #0
 802dc64:	d10c      	bne.n	802dc80 <ProcPktHdr2+0x330>
			{
				pSendPkt->hdr2.bRFT2 = 1;
 802dc66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802dc68:	7853      	ldrb	r3, [r2, #1]
 802dc6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802dc6e:	7053      	strb	r3, [r2, #1]
				SendPktCh( ChTx_2, buf, nSize );
 802dc70:	4b1a      	ldr	r3, [pc, #104]	; (802dcdc <ProcPktHdr2+0x38c>)
 802dc72:	681b      	ldr	r3, [r3, #0]
 802dc74:	f107 0108 	add.w	r1, r7, #8
 802dc78:	683a      	ldr	r2, [r7, #0]
 802dc7a:	4618      	mov	r0, r3
 802dc7c:	f000 f9ee 	bl	802e05c <SendPktCh>
				pSendPkt->hdr2.bRFT2 = 1;
				SendPktCh( GetChPARFT(), buf, nSize );
			}
#endif	//	defined(USE_RFT_REG_TO_RFM)

			if( g_nRFMode == RFMode2 )	//#if defined(USE_COMM_MODE_CH_GRP)	//	그룹주파수 모드. - [ 1, 2 ] [ 3, 4 ] ...
 802dc80:	4b17      	ldr	r3, [pc, #92]	; (802dce0 <ProcPktHdr2+0x390>)
 802dc82:	681b      	ldr	r3, [r3, #0]
 802dc84:	2b02      	cmp	r3, #2
 802dc86:	d113      	bne.n	802dcb0 <ProcPktHdr2+0x360>
			{
				if ( g_nCarNo % 2 == 1 )	SendPktCh( GetChRx() - ChGap, buf, nSize ); //	홀수 Car
 802dc88:	4b16      	ldr	r3, [pc, #88]	; (802dce4 <ProcPktHdr2+0x394>)
 802dc8a:	681b      	ldr	r3, [r3, #0]
 802dc8c:	2b00      	cmp	r3, #0
 802dc8e:	f003 0301 	and.w	r3, r3, #1
 802dc92:	bfb8      	it	lt
 802dc94:	425b      	neglt	r3, r3
 802dc96:	2b01      	cmp	r3, #1
 802dc98:	d119      	bne.n	802dcce <ProcPktHdr2+0x37e>
 802dc9a:	f004 fdbb 	bl	8032814 <GetChRx>
 802dc9e:	4603      	mov	r3, r0
 802dca0:	3b04      	subs	r3, #4
 802dca2:	f107 0108 	add.w	r1, r7, #8
 802dca6:	683a      	ldr	r2, [r7, #0]
 802dca8:	4618      	mov	r0, r3
 802dcaa:	f000 f9d7 	bl	802e05c <SendPktCh>
 802dcae:	e00e      	b.n	802dcce <ProcPktHdr2+0x37e>
			}
			else//#else
			{
#if defined(USE_ROUTE_REQ)
				//	현재 동작중인 하위 채널로 중계
				if( GetChRFMDown() )	SendPktCh( GetChRFMDown(), buf, nSize );
 802dcb0:	f004 ff02 	bl	8032ab8 <GetChRFMDown>
 802dcb4:	4603      	mov	r3, r0
 802dcb6:	2b00      	cmp	r3, #0
 802dcb8:	d009      	beq.n	802dcce <ProcPktHdr2+0x37e>
 802dcba:	f004 fefd 	bl	8032ab8 <GetChRFMDown>
 802dcbe:	f107 0308 	add.w	r3, r7, #8
 802dcc2:	683a      	ldr	r2, [r7, #0]
 802dcc4:	4619      	mov	r1, r3
 802dcc6:	f000 f9c9 	bl	802e05c <SendPktCh>
 802dcca:	e000      	b.n	802dcce <ProcPktHdr2+0x37e>
		{
 802dccc:	bf00      	nop
#endif
			}//#endif
		}
	}
#endif	//	defined(USE_HOPPING)
}
 802dcce:	4618      	mov	r0, r3
 802dcd0:	375c      	adds	r7, #92	; 0x5c
 802dcd2:	46bd      	mov	sp, r7
 802dcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802dcd6:	bf00      	nop
 802dcd8:	2000234c 	.word	0x2000234c
 802dcdc:	200004f8 	.word	0x200004f8
 802dce0:	20002344 	.word	0x20002344
 802dce4:	20002330 	.word	0x20002330

0802dce8 <CallbackRecvPacket>:
//}

//========================================================================
void CallbackRecvPacket( const char *pData, int nSize )
//========================================================================
{
 802dce8:	b580      	push	{r7, lr}
 802dcea:	b084      	sub	sp, #16
 802dcec:	af00      	add	r7, sp, #0
 802dcee:	6078      	str	r0, [r7, #4]
 802dcf0:	6039      	str	r1, [r7, #0]
	const RFMPkt	*pRFPkt = (const RFMPkt *)pData;
 802dcf2:	687b      	ldr	r3, [r7, #4]
 802dcf4:	60fb      	str	r3, [r7, #12]

	//========================================================================
	//	Header
	//if ( ( pRFPkt->hdr2.nTS & 0xC0 ) == 0x00 )	//	[7:6] 00 : Hdr#1 / 01 : Hdr#2
	if ( pRFPkt->hdr2.bHdrID == 0 )
 802dcf6:	68fb      	ldr	r3, [r7, #12]
 802dcf8:	781b      	ldrb	r3, [r3, #0]
 802dcfa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802dcfe:	b2db      	uxtb	r3, r3
 802dd00:	2b00      	cmp	r3, #0
 802dd02:	d107      	bne.n	802dd14 <CallbackRecvPacket+0x2c>
	{
		//	Header #1
		if ( ProcPktHdr1( pRFPkt, nSize ) == 0 )
 802dd04:	6839      	ldr	r1, [r7, #0]
 802dd06:	68f8      	ldr	r0, [r7, #12]
 802dd08:	f7ff fdf0 	bl	802d8ec <ProcPktHdr1>
 802dd0c:	4603      	mov	r3, r0
 802dd0e:	2b00      	cmp	r3, #0
 802dd10:	d113      	bne.n	802dd3a <CallbackRecvPacket+0x52>
		{
			return;
 802dd12:	e0cd      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
		}
	}
	else if ( pRFPkt->hdr2.bHdrID == 0x01 )
 802dd14:	68fb      	ldr	r3, [r7, #12]
 802dd16:	781b      	ldrb	r3, [r3, #0]
 802dd18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802dd1c:	b2db      	uxtb	r3, r3
 802dd1e:	2b40      	cmp	r3, #64	; 0x40
 802dd20:	d107      	bne.n	802dd32 <CallbackRecvPacket+0x4a>
	{
		//	Header #2
		if ( ProcPktHdr2( pRFPkt, nSize ) == 0 )
 802dd22:	6839      	ldr	r1, [r7, #0]
 802dd24:	68f8      	ldr	r0, [r7, #12]
 802dd26:	f7ff fe13 	bl	802d950 <ProcPktHdr2>
 802dd2a:	4603      	mov	r3, r0
 802dd2c:	2b00      	cmp	r3, #0
 802dd2e:	d104      	bne.n	802dd3a <CallbackRecvPacket+0x52>
		{
			return;
 802dd30:	e0be      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
		}
	}
	else
	{
		printf( "H" );	//	Packet Header Error
 802dd32:	2048      	movs	r0, #72	; 0x48
 802dd34:	f009 fbc6 	bl	80374c4 <putchar>
		return ;
 802dd38:	e0ba      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
	}

	//========================================================================
	//	Proc Packet
	switch ( pRFPkt->hdr.nPktCmd )
 802dd3a:	68fb      	ldr	r3, [r7, #12]
 802dd3c:	78db      	ldrb	r3, [r3, #3]
 802dd3e:	3b01      	subs	r3, #1
 802dd40:	2b40      	cmp	r3, #64	; 0x40
 802dd42:	f200 80b1 	bhi.w	802dea8 <CallbackRecvPacket+0x1c0>
 802dd46:	a201      	add	r2, pc, #4	; (adr r2, 802dd4c <CallbackRecvPacket+0x64>)
 802dd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dd4c:	0802de61 	.word	0x0802de61
 802dd50:	0802de59 	.word	0x0802de59
 802dd54:	0802de51 	.word	0x0802de51
 802dd58:	0802de71 	.word	0x0802de71
 802dd5c:	0802dea9 	.word	0x0802dea9
 802dd60:	0802dea9 	.word	0x0802dea9
 802dd64:	0802dea9 	.word	0x0802dea9
 802dd68:	0802de79 	.word	0x0802de79
 802dd6c:	0802dea9 	.word	0x0802dea9
 802dd70:	0802dea9 	.word	0x0802dea9
 802dd74:	0802dea9 	.word	0x0802dea9
 802dd78:	0802dea9 	.word	0x0802dea9
 802dd7c:	0802dea9 	.word	0x0802dea9
 802dd80:	0802dea9 	.word	0x0802dea9
 802dd84:	0802dea9 	.word	0x0802dea9
 802dd88:	0802dea9 	.word	0x0802dea9
 802dd8c:	0802de69 	.word	0x0802de69
 802dd90:	0802dea9 	.word	0x0802dea9
 802dd94:	0802dea9 	.word	0x0802dea9
 802dd98:	0802dea9 	.word	0x0802dea9
 802dd9c:	0802dea9 	.word	0x0802dea9
 802dda0:	0802dea9 	.word	0x0802dea9
 802dda4:	0802dea9 	.word	0x0802dea9
 802dda8:	0802dea9 	.word	0x0802dea9
 802ddac:	0802dea9 	.word	0x0802dea9
 802ddb0:	0802dea9 	.word	0x0802dea9
 802ddb4:	0802dea9 	.word	0x0802dea9
 802ddb8:	0802dea9 	.word	0x0802dea9
 802ddbc:	0802dea9 	.word	0x0802dea9
 802ddc0:	0802dea9 	.word	0x0802dea9
 802ddc4:	0802dea9 	.word	0x0802dea9
 802ddc8:	0802de81 	.word	0x0802de81
 802ddcc:	0802dea9 	.word	0x0802dea9
 802ddd0:	0802dea9 	.word	0x0802dea9
 802ddd4:	0802dea9 	.word	0x0802dea9
 802ddd8:	0802dea9 	.word	0x0802dea9
 802dddc:	0802dea9 	.word	0x0802dea9
 802dde0:	0802dea9 	.word	0x0802dea9
 802dde4:	0802dea9 	.word	0x0802dea9
 802dde8:	0802dea9 	.word	0x0802dea9
 802ddec:	0802dea9 	.word	0x0802dea9
 802ddf0:	0802dea9 	.word	0x0802dea9
 802ddf4:	0802dea9 	.word	0x0802dea9
 802ddf8:	0802dea9 	.word	0x0802dea9
 802ddfc:	0802dea9 	.word	0x0802dea9
 802de00:	0802dea9 	.word	0x0802dea9
 802de04:	0802dea9 	.word	0x0802dea9
 802de08:	0802dea9 	.word	0x0802dea9
 802de0c:	0802de99 	.word	0x0802de99
 802de10:	0802dea1 	.word	0x0802dea1
 802de14:	0802dea9 	.word	0x0802dea9
 802de18:	0802dea9 	.word	0x0802dea9
 802de1c:	0802dea9 	.word	0x0802dea9
 802de20:	0802dea9 	.word	0x0802dea9
 802de24:	0802dea9 	.word	0x0802dea9
 802de28:	0802dea9 	.word	0x0802dea9
 802de2c:	0802dea9 	.word	0x0802dea9
 802de30:	0802dea9 	.word	0x0802dea9
 802de34:	0802dea9 	.word	0x0802dea9
 802de38:	0802dea9 	.word	0x0802dea9
 802de3c:	0802dea9 	.word	0x0802dea9
 802de40:	0802dea9 	.word	0x0802dea9
 802de44:	0802dea9 	.word	0x0802dea9
 802de48:	0802de89 	.word	0x0802de89
 802de4c:	0802de91 	.word	0x0802de91
	{
	case PktCall:		ProcPktCall			( pRFPkt );		break;
 802de50:	68f8      	ldr	r0, [r7, #12]
 802de52:	f001 f96d 	bl	802f130 <ProcPktCall>
 802de56:	e02b      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
	case PktPA:			ProcPktPA			( pRFPkt );		break;
 802de58:	68f8      	ldr	r0, [r7, #12]
 802de5a:	f001 f90f 	bl	802f07c <ProcPktPA>
 802de5e:	e027      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
	case PktStat:		ProcPktStat			( pRFPkt );		break;
 802de60:	68f8      	ldr	r0, [r7, #12]
 802de62:	f000 ffb7 	bl	802edd4 <ProcPktStat>
 802de66:	e023      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
	case PktStatReq:	ProcPktStatReq		( pRFPkt );		break;
 802de68:	68f8      	ldr	r0, [r7, #12]
 802de6a:	f000 ff4d 	bl	802ed08 <ProcPktStatReq>
 802de6e:	e01f      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
	case PktLight:		ProcPktLight		( pRFPkt );		break;
 802de70:	68f8      	ldr	r0, [r7, #12]
 802de72:	f001 f9a3 	bl	802f1bc <ProcPktLight>
 802de76:	e01b      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
	case PktCtrlPaCall:	ProcPktCtrlPaCall	( pRFPkt );		break;
 802de78:	68f8      	ldr	r0, [r7, #12]
 802de7a:	f001 f883 	bl	802ef84 <ProcPktCtrlPaCall>
 802de7e:	e017      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
	case PktCmd:		ProcPktCmd			( pRFPkt );		break;
 802de80:	68f8      	ldr	r0, [r7, #12]
 802de82:	f001 f9d3 	bl	802f22c <ProcPktCmd>
 802de86:	e013      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
	case PktUpgr:		ProcPktUpgr			( pRFPkt );		break;
 802de88:	68f8      	ldr	r0, [r7, #12]
 802de8a:	f001 fa01 	bl	802f290 <ProcPktUpgr>
 802de8e:	e00f      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
	case PktUpgrStat:	ProcPktUpgrStat		( pRFPkt );		break;
 802de90:	68f8      	ldr	r0, [r7, #12]
 802de92:	f001 fbb9 	bl	802f608 <ProcPktUpgrStat>
 802de96:	e00b      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
	case PktRouteReq:	ProcPktRouteReq		( pRFPkt );		break;
 802de98:	68f8      	ldr	r0, [r7, #12]
 802de9a:	f000 ffd7 	bl	802ee4c <ProcPktRouteReq>
 802de9e:	e007      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
	case PktRouteRsp:	ProcPktRouteRsp		( pRFPkt );		break;
 802dea0:	68f8      	ldr	r0, [r7, #12]
 802dea2:	f001 f81d 	bl	802eee0 <ProcPktRouteRsp>
 802dea6:	e003      	b.n	802deb0 <CallbackRecvPacket+0x1c8>
	default:
//		printf( "%s(%d) - Invalid Value(%d)\n", __func__, __LINE__, pRFPkt->hdr.nPktCmd );
		printf( "E\n" );	//	Packet Error
 802dea8:	4803      	ldr	r0, [pc, #12]	; (802deb8 <CallbackRecvPacket+0x1d0>)
 802deaa:	f009 fb67 	bl	803757c <puts>
		break;
 802deae:	bf00      	nop
	}
}
 802deb0:	3710      	adds	r7, #16
 802deb2:	46bd      	mov	sp, r7
 802deb4:	bd80      	pop	{r7, pc}
 802deb6:	bf00      	nop
 802deb8:	0803945c 	.word	0x0803945c

0802debc <LoopProcPkt>:
 *
 */
//========================================================================
void LoopProcPkt( int nTick )
//========================================================================
{
 802debc:	b5f0      	push	{r4, r5, r6, r7, lr}
 802debe:	b089      	sub	sp, #36	; 0x24
 802dec0:	af06      	add	r7, sp, #24
 802dec2:	6078      	str	r0, [r7, #4]
	bMain_IT_Status = bRadio_Check_Tx_RX();
 802dec4:	f7ff f9bc 	bl	802d240 <bRadio_Check_Tx_RX>
 802dec8:	4603      	mov	r3, r0
 802deca:	461a      	mov	r2, r3
 802decc:	4b51      	ldr	r3, [pc, #324]	; (802e014 <LoopProcPkt+0x158>)
 802dece:	701a      	strb	r2, [r3, #0]

	if( ( bMain_IT_Status & SI446X_CMD_GET_CHIP_STATUS_REP_CHIP_PEND_CMD_ERROR_PEND_BIT )
 802ded0:	4b50      	ldr	r3, [pc, #320]	; (802e014 <LoopProcPkt+0x158>)
 802ded2:	781b      	ldrb	r3, [r3, #0]
 802ded4:	f003 0308 	and.w	r3, r3, #8
 802ded8:	2b00      	cmp	r3, #0
 802deda:	d105      	bne.n	802dee8 <LoopProcPkt+0x2c>
			|| ( bMain_IT_Status & SI446X_CMD_GET_INT_STATUS_REP_PH_STATUS_CRC_ERROR_BIT ) )
 802dedc:	4b4d      	ldr	r3, [pc, #308]	; (802e014 <LoopProcPkt+0x158>)
 802dede:	781b      	ldrb	r3, [r3, #0]
 802dee0:	f003 0308 	and.w	r3, r3, #8
 802dee4:	2b00      	cmp	r3, #0
 802dee6:	d003      	beq.n	802def0 <LoopProcPkt+0x34>
	{
		//	Rx Packet Error or CRC Error
		printf ( "E" );
 802dee8:	2045      	movs	r0, #69	; 0x45
 802deea:	f009 faeb 	bl	80374c4 <putchar>
	{
 802deee:	e03a      	b.n	802df66 <LoopProcPkt+0xaa>
	}
	else if( bMain_IT_Status & SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_RX_PEND_BIT )
 802def0:	4b48      	ldr	r3, [pc, #288]	; (802e014 <LoopProcPkt+0x158>)
 802def2:	781b      	ldrb	r3, [r3, #0]
 802def4:	f003 0310 	and.w	r3, r3, #16
 802def8:	2b00      	cmp	r3, #0
 802defa:	d034      	beq.n	802df66 <LoopProcPkt+0xaa>
	{
		//	Rx Packet Receive Complete
		HAL_GPIO_TogglePin ( LED_ST_GPIO_Port, LED_ST_Pin );
 802defc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802df00:	4845      	ldr	r0, [pc, #276]	; (802e018 <LoopProcPkt+0x15c>)
 802df02:	f7f5 fb24 	bl	802354e <HAL_GPIO_TogglePin>

		nRxPkt++;
 802df06:	4b45      	ldr	r3, [pc, #276]	; (802e01c <LoopProcPkt+0x160>)
 802df08:	681b      	ldr	r3, [r3, #0]
 802df0a:	3301      	adds	r3, #1
 802df0c:	4a43      	ldr	r2, [pc, #268]	; (802e01c <LoopProcPkt+0x160>)
 802df0e:	6013      	str	r3, [r2, #0]
		nRxStamp = HAL_GetTick();
 802df10:	f7f3 fe2a 	bl	8021b68 <HAL_GetTick>
 802df14:	4603      	mov	r3, r0
 802df16:	461a      	mov	r2, r3
 802df18:	4b41      	ldr	r3, [pc, #260]	; (802e020 <LoopProcPkt+0x164>)
 802df1a:	601a      	str	r2, [r3, #0]

		Dump("Rx", g_pRadioRxPkt, 0x40);
 802df1c:	4b41      	ldr	r3, [pc, #260]	; (802e024 <LoopProcPkt+0x168>)
 802df1e:	681b      	ldr	r3, [r3, #0]
 802df20:	2240      	movs	r2, #64	; 0x40
 802df22:	4619      	mov	r1, r3
 802df24:	4840      	ldr	r0, [pc, #256]	; (802e028 <LoopProcPkt+0x16c>)
 802df26:	f7ff fc5d 	bl	802d7e4 <Dump>
		if ( nRxPkt % 250 == 0 )
 802df2a:	4b3c      	ldr	r3, [pc, #240]	; (802e01c <LoopProcPkt+0x160>)
 802df2c:	681a      	ldr	r2, [r3, #0]
 802df2e:	4b3f      	ldr	r3, [pc, #252]	; (802e02c <LoopProcPkt+0x170>)
 802df30:	fb83 1302 	smull	r1, r3, r3, r2
 802df34:	1119      	asrs	r1, r3, #4
 802df36:	17d3      	asrs	r3, r2, #31
 802df38:	1acb      	subs	r3, r1, r3
 802df3a:	21fa      	movs	r1, #250	; 0xfa
 802df3c:	fb01 f303 	mul.w	r3, r1, r3
 802df40:	1ad3      	subs	r3, r2, r3
 802df42:	2b00      	cmp	r3, #0
 802df44:	d102      	bne.n	802df4c <LoopProcPkt+0x90>
		{
			printf ( "R" );
 802df46:	2052      	movs	r0, #82	; 0x52
 802df48:	f009 fabc 	bl	80374c4 <putchar>
		}

		CallbackRecvPacket( g_pRadioRxPkt, 0x40 );
 802df4c:	4b35      	ldr	r3, [pc, #212]	; (802e024 <LoopProcPkt+0x168>)
 802df4e:	681b      	ldr	r3, [r3, #0]
 802df50:	2140      	movs	r1, #64	; 0x40
 802df52:	4618      	mov	r0, r3
 802df54:	f7ff fec8 	bl	802dce8 <CallbackRecvPacket>
		memset( g_pRadioRxPkt, 0, 0x40 );			//	Buffer Clear
 802df58:	4b32      	ldr	r3, [pc, #200]	; (802e024 <LoopProcPkt+0x168>)
 802df5a:	681b      	ldr	r3, [r3, #0]
 802df5c:	2240      	movs	r2, #64	; 0x40
 802df5e:	2100      	movs	r1, #0
 802df60:	4618      	mov	r0, r3
 802df62:	f009 fcff 	bl	8037964 <memset>
	}

	if( bMain_IT_Status & SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_SENT_PEND_BIT )
 802df66:	4b2b      	ldr	r3, [pc, #172]	; (802e014 <LoopProcPkt+0x158>)
 802df68:	781b      	ldrb	r3, [r3, #0]
 802df6a:	f003 0320 	and.w	r3, r3, #32
 802df6e:	2b00      	cmp	r3, #0
 802df70:	d020      	beq.n	802dfb4 <LoopProcPkt+0xf8>
	{
		HAL_GPIO_TogglePin ( LED_ST_GPIO_Port, LED_ST_Pin );
 802df72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802df76:	4828      	ldr	r0, [pc, #160]	; (802e018 <LoopProcPkt+0x15c>)
 802df78:	f7f5 fae9 	bl	802354e <HAL_GPIO_TogglePin>

		nTxPkt++;
 802df7c:	4b2c      	ldr	r3, [pc, #176]	; (802e030 <LoopProcPkt+0x174>)
 802df7e:	681b      	ldr	r3, [r3, #0]
 802df80:	3301      	adds	r3, #1
 802df82:	4a2b      	ldr	r2, [pc, #172]	; (802e030 <LoopProcPkt+0x174>)
 802df84:	6013      	str	r3, [r2, #0]
		nTxStampComp = HAL_GetTick();	//	송신완료 Stamp
 802df86:	f7f3 fdef 	bl	8021b68 <HAL_GetTick>
 802df8a:	4603      	mov	r3, r0
 802df8c:	461a      	mov	r2, r3
 802df8e:	4b29      	ldr	r3, [pc, #164]	; (802e034 <LoopProcPkt+0x178>)
 802df90:	601a      	str	r2, [r3, #0]

		// Custom message sent successfully
		if ( nTxPkt % 250 == 0 )
 802df92:	4b27      	ldr	r3, [pc, #156]	; (802e030 <LoopProcPkt+0x174>)
 802df94:	681a      	ldr	r2, [r3, #0]
 802df96:	4b25      	ldr	r3, [pc, #148]	; (802e02c <LoopProcPkt+0x170>)
 802df98:	fb83 1302 	smull	r1, r3, r3, r2
 802df9c:	1119      	asrs	r1, r3, #4
 802df9e:	17d3      	asrs	r3, r2, #31
 802dfa0:	1acb      	subs	r3, r1, r3
 802dfa2:	21fa      	movs	r1, #250	; 0xfa
 802dfa4:	fb01 f303 	mul.w	r3, r1, r3
 802dfa8:	1ad3      	subs	r3, r2, r3
 802dfaa:	2b00      	cmp	r3, #0
 802dfac:	d102      	bne.n	802dfb4 <LoopProcPkt+0xf8>
		{
			printf ( "T" );
 802dfae:	2054      	movs	r0, #84	; 0x54
 802dfb0:	f009 fa88 	bl	80374c4 <putchar>

#if defined(USE_SHOW_PKT)

	static int s_oldTick = 0;

	if ( s_bShowPkt != 0 &&
 802dfb4:	4b20      	ldr	r3, [pc, #128]	; (802e038 <LoopProcPkt+0x17c>)
 802dfb6:	681b      	ldr	r3, [r3, #0]
 802dfb8:	2b00      	cmp	r3, #0
 802dfba:	d026      	beq.n	802e00a <LoopProcPkt+0x14e>
		( nTick - s_oldTick ) >= 1000 )
 802dfbc:	4b1f      	ldr	r3, [pc, #124]	; (802e03c <LoopProcPkt+0x180>)
 802dfbe:	681b      	ldr	r3, [r3, #0]
 802dfc0:	687a      	ldr	r2, [r7, #4]
 802dfc2:	1ad3      	subs	r3, r2, r3
	if ( s_bShowPkt != 0 &&
 802dfc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802dfc8:	db1f      	blt.n	802e00a <LoopProcPkt+0x14e>
	{
		//	1 sec

		printf("PKT : Tx(%d) / Rx(%d) / Hop(%d) / Drop(%d) / RspID( 0x%04X ) / RxErr(%d) / Crc(%d) / RSSI(%d)\n", //__func__,
 802dfca:	4b19      	ldr	r3, [pc, #100]	; (802e030 <LoopProcPkt+0x174>)
 802dfcc:	681c      	ldr	r4, [r3, #0]
 802dfce:	4b13      	ldr	r3, [pc, #76]	; (802e01c <LoopProcPkt+0x160>)
 802dfd0:	681d      	ldr	r5, [r3, #0]
 802dfd2:	4b1b      	ldr	r3, [pc, #108]	; (802e040 <LoopProcPkt+0x184>)
 802dfd4:	681e      	ldr	r6, [r3, #0]
 802dfd6:	4b1b      	ldr	r3, [pc, #108]	; (802e044 <LoopProcPkt+0x188>)
 802dfd8:	681b      	ldr	r3, [r3, #0]
 802dfda:	4a1b      	ldr	r2, [pc, #108]	; (802e048 <LoopProcPkt+0x18c>)
 802dfdc:	8812      	ldrh	r2, [r2, #0]
 802dfde:	603a      	str	r2, [r7, #0]
 802dfe0:	4a1a      	ldr	r2, [pc, #104]	; (802e04c <LoopProcPkt+0x190>)
 802dfe2:	6812      	ldr	r2, [r2, #0]
 802dfe4:	491a      	ldr	r1, [pc, #104]	; (802e050 <LoopProcPkt+0x194>)
 802dfe6:	6809      	ldr	r1, [r1, #0]
 802dfe8:	481a      	ldr	r0, [pc, #104]	; (802e054 <LoopProcPkt+0x198>)
 802dfea:	6800      	ldr	r0, [r0, #0]
 802dfec:	9004      	str	r0, [sp, #16]
 802dfee:	9103      	str	r1, [sp, #12]
 802dff0:	9202      	str	r2, [sp, #8]
 802dff2:	683a      	ldr	r2, [r7, #0]
 802dff4:	9201      	str	r2, [sp, #4]
 802dff6:	9300      	str	r3, [sp, #0]
 802dff8:	4633      	mov	r3, r6
 802dffa:	462a      	mov	r2, r5
 802dffc:	4621      	mov	r1, r4
 802dffe:	4816      	ldr	r0, [pc, #88]	; (802e058 <LoopProcPkt+0x19c>)
 802e000:	f009 fa4e 	bl	80374a0 <iprintf>
				nTxPkt, nRxPkt, nHopPkt, nDropPkt, g_flagRspID, nRxErr, nCrcErr, g_nRSSI );

		s_oldTick = nTick;
 802e004:	4a0d      	ldr	r2, [pc, #52]	; (802e03c <LoopProcPkt+0x180>)
 802e006:	687b      	ldr	r3, [r7, #4]
 802e008:	6013      	str	r3, [r2, #0]
	}
#endif
}
 802e00a:	bf00      	nop
 802e00c:	370c      	adds	r7, #12
 802e00e:	46bd      	mov	sp, r7
 802e010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e012:	bf00      	nop
 802e014:	20001369 	.word	0x20001369
 802e018:	40020c00 	.word	0x40020c00
 802e01c:	20001370 	.word	0x20001370
 802e020:	2000138c 	.word	0x2000138c
 802e024:	200012e0 	.word	0x200012e0
 802e028:	08039460 	.word	0x08039460
 802e02c:	10624dd3 	.word	0x10624dd3
 802e030:	2000136c 	.word	0x2000136c
 802e034:	20001388 	.word	0x20001388
 802e038:	20001398 	.word	0x20001398
 802e03c:	2000139c 	.word	0x2000139c
 802e040:	20001374 	.word	0x20001374
 802e044:	20001378 	.word	0x20001378
 802e048:	20001394 	.word	0x20001394
 802e04c:	2000137c 	.word	0x2000137c
 802e050:	20001380 	.word	0x20001380
 802e054:	20002340 	.word	0x20002340
 802e058:	08039464 	.word	0x08039464

0802e05c <SendPktCh>:
}

//========================================================================
int SendPktCh	( int nCh, const char *sBuf, int nSize )
//========================================================================
{
 802e05c:	b580      	push	{r7, lr}
 802e05e:	b084      	sub	sp, #16
 802e060:	af00      	add	r7, sp, #0
 802e062:	60f8      	str	r0, [r7, #12]
 802e064:	60b9      	str	r1, [r7, #8]
 802e066:	607a      	str	r2, [r7, #4]
	Dump("Tx", sBuf, 0x40);
 802e068:	2240      	movs	r2, #64	; 0x40
 802e06a:	68b9      	ldr	r1, [r7, #8]
 802e06c:	480f      	ldr	r0, [pc, #60]	; (802e0ac <SendPktCh+0x50>)
 802e06e:	f7ff fbb9 	bl	802d7e4 <Dump>

	//========================================================================
//	while( ( HAL_GetTick() - nTxStamp) <= 3 )	;	//	Tx 시작 후 완료까지 : 3msec
	while( ( HAL_GetTick() - nTxStamp) <= 4 )	;	//	Tx 시작 후 완료까지 : 3msec
 802e072:	bf00      	nop
 802e074:	f7f3 fd78 	bl	8021b68 <HAL_GetTick>
 802e078:	4603      	mov	r3, r0
 802e07a:	4a0d      	ldr	r2, [pc, #52]	; (802e0b0 <SendPktCh+0x54>)
 802e07c:	6812      	ldr	r2, [r2, #0]
 802e07e:	1a9b      	subs	r3, r3, r2
 802e080:	2b04      	cmp	r3, #4
 802e082:	d9f7      	bls.n	802e074 <SendPktCh+0x18>
	//========================================================================

	vRadio_StartTx_Variable_Packet (
 802e084:	68fb      	ldr	r3, [r7, #12]
 802e086:	b2d8      	uxtb	r0, r3
		nCh,	//		pRadioConfiguration->Radio_ChannelNumber,
		(U8 *)&sBuf[0],
		pRadioConfiguration->Radio_PacketLength );
 802e088:	4b0a      	ldr	r3, [pc, #40]	; (802e0b4 <SendPktCh+0x58>)
 802e08a:	681b      	ldr	r3, [r3, #0]
	vRadio_StartTx_Variable_Packet (
 802e08c:	795b      	ldrb	r3, [r3, #5]
 802e08e:	461a      	mov	r2, r3
 802e090:	68b9      	ldr	r1, [r7, #8]
 802e092:	f7ff f9bc 	bl	802d40e <vRadio_StartTx_Variable_Packet>

	//========================================================================
	nTxStamp = HAL_GetTick();
 802e096:	f7f3 fd67 	bl	8021b68 <HAL_GetTick>
 802e09a:	4603      	mov	r3, r0
 802e09c:	461a      	mov	r2, r3
 802e09e:	4b04      	ldr	r3, [pc, #16]	; (802e0b0 <SendPktCh+0x54>)
 802e0a0:	601a      	str	r2, [r3, #0]
	//========================================================================

	return TRUE;
 802e0a2:	2301      	movs	r3, #1
}
 802e0a4:	4618      	mov	r0, r3
 802e0a6:	3710      	adds	r7, #16
 802e0a8:	46bd      	mov	sp, r7
 802e0aa:	bd80      	pop	{r7, pc}
 802e0ac:	080394c4 	.word	0x080394c4
 802e0b0:	20001384 	.word	0x20001384
 802e0b4:	200004f0 	.word	0x200004f0

0802e0b8 <cmd_pktmon>:


//========================================================================
int cmd_pktmon      ( int argc, char * argv[] )
//========================================================================
{
 802e0b8:	b580      	push	{r7, lr}
 802e0ba:	b084      	sub	sp, #16
 802e0bc:	af00      	add	r7, sp, #0
 802e0be:	6078      	str	r0, [r7, #4]
 802e0c0:	6039      	str	r1, [r7, #0]
	//	bEnable ( 1 / 0 )
	int bEnable = 1;	//	Default : Enable
 802e0c2:	2301      	movs	r3, #1
 802e0c4:	60fb      	str	r3, [r7, #12]

	switch ( argc )
 802e0c6:	687b      	ldr	r3, [r7, #4]
 802e0c8:	2b02      	cmp	r3, #2
 802e0ca:	d109      	bne.n	802e0e0 <cmd_pktmon+0x28>
	{
	case 2:		sscanf( argv[1], "%d", &bEnable );	//	cmd [Enable]
 802e0cc:	683b      	ldr	r3, [r7, #0]
 802e0ce:	3304      	adds	r3, #4
 802e0d0:	681b      	ldr	r3, [r3, #0]
 802e0d2:	f107 020c 	add.w	r2, r7, #12
 802e0d6:	490a      	ldr	r1, [pc, #40]	; (802e100 <cmd_pktmon+0x48>)
 802e0d8:	4618      	mov	r0, r3
 802e0da:	f009 fb2d 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];					//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
		break;
 802e0de:	bf00      	nop
	}

	printf( "%s(%d) - En(%d)\n", __func__, __LINE__, bEnable );
 802e0e0:	68fb      	ldr	r3, [r7, #12]
 802e0e2:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 802e0e6:	4907      	ldr	r1, [pc, #28]	; (802e104 <cmd_pktmon+0x4c>)
 802e0e8:	4807      	ldr	r0, [pc, #28]	; (802e108 <cmd_pktmon+0x50>)
 802e0ea:	f009 f9d9 	bl	80374a0 <iprintf>

	s_bShowPkt = bEnable;
 802e0ee:	68fb      	ldr	r3, [r7, #12]
 802e0f0:	4a06      	ldr	r2, [pc, #24]	; (802e10c <cmd_pktmon+0x54>)
 802e0f2:	6013      	str	r3, [r2, #0]
}
 802e0f4:	bf00      	nop
 802e0f6:	4618      	mov	r0, r3
 802e0f8:	3710      	adds	r7, #16
 802e0fa:	46bd      	mov	sp, r7
 802e0fc:	bd80      	pop	{r7, pc}
 802e0fe:	bf00      	nop
 802e100:	080394c8 	.word	0x080394c8
 802e104:	080412e0 	.word	0x080412e0
 802e108:	080394cc 	.word	0x080394cc
 802e10c:	20001398 	.word	0x20001398

0802e110 <init_queue>:


//===========================================================================
void init_queue( Queue_t *q )
//===========================================================================
{
 802e110:	b480      	push	{r7}
 802e112:	b083      	sub	sp, #12
 802e114:	af00      	add	r7, sp, #0
 802e116:	6078      	str	r0, [r7, #4]
	q->front = q->rear = 0;
 802e118:	687b      	ldr	r3, [r7, #4]
 802e11a:	2200      	movs	r2, #0
 802e11c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 802e120:	687b      	ldr	r3, [r7, #4]
 802e122:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 802e126:	687b      	ldr	r3, [r7, #4]
 802e128:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 802e12c:	bf00      	nop
 802e12e:	370c      	adds	r7, #12
 802e130:	46bd      	mov	sp, r7
 802e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e136:	4770      	bx	lr

0802e138 <qcount>:
}

//===========================================================================
int qcount( Queue_t *q )
//===========================================================================
{
 802e138:	b480      	push	{r7}
 802e13a:	b083      	sub	sp, #12
 802e13c:	af00      	add	r7, sp, #0
 802e13e:	6078      	str	r0, [r7, #4]
	return (((q->rear+QMAX)-q->front) % QMAX);
 802e140:	687b      	ldr	r3, [r7, #4]
 802e142:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 802e146:	f503 7280 	add.w	r2, r3, #256	; 0x100
 802e14a:	687b      	ldr	r3, [r7, #4]
 802e14c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802e150:	1ad3      	subs	r3, r2, r3
 802e152:	425a      	negs	r2, r3
 802e154:	b2db      	uxtb	r3, r3
 802e156:	b2d2      	uxtb	r2, r2
 802e158:	bf58      	it	pl
 802e15a:	4253      	negpl	r3, r2
}
 802e15c:	4618      	mov	r0, r3
 802e15e:	370c      	adds	r7, #12
 802e160:	46bd      	mov	sp, r7
 802e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e166:	4770      	bx	lr

0802e168 <qput>:

//===========================================================================
int qput( Queue_t *q, unsigned char k )
//===========================================================================
{
 802e168:	b480      	push	{r7}
 802e16a:	b083      	sub	sp, #12
 802e16c:	af00      	add	r7, sp, #0
 802e16e:	6078      	str	r0, [r7, #4]
 802e170:	460b      	mov	r3, r1
 802e172:	70fb      	strb	r3, [r7, #3]
	if ( (q->rear + 1) % QMAX == q->front )
 802e174:	687b      	ldr	r3, [r7, #4]
 802e176:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 802e17a:	3301      	adds	r3, #1
 802e17c:	425a      	negs	r2, r3
 802e17e:	b2db      	uxtb	r3, r3
 802e180:	b2d2      	uxtb	r2, r2
 802e182:	bf58      	it	pl
 802e184:	4253      	negpl	r3, r2
 802e186:	687a      	ldr	r2, [r7, #4]
 802e188:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 802e18c:	4293      	cmp	r3, r2
 802e18e:	d102      	bne.n	802e196 <qput+0x2e>
	{
//		printf( "\n\tCircular Queue Overflow." );
//		printf( "\n\tQOver" );
		return -1;
 802e190:	f04f 33ff 	mov.w	r3, #4294967295
 802e194:	e012      	b.n	802e1bc <qput+0x54>
	}
	q->queue[q->rear] = k;
 802e196:	687b      	ldr	r3, [r7, #4]
 802e198:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 802e19c:	687a      	ldr	r2, [r7, #4]
 802e19e:	78f9      	ldrb	r1, [r7, #3]
 802e1a0:	54d1      	strb	r1, [r2, r3]
	q->rear = (q->rear + 1) % QMAX;
 802e1a2:	687b      	ldr	r3, [r7, #4]
 802e1a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 802e1a8:	3301      	adds	r3, #1
 802e1aa:	425a      	negs	r2, r3
 802e1ac:	b2db      	uxtb	r3, r3
 802e1ae:	b2d2      	uxtb	r2, r2
 802e1b0:	bf58      	it	pl
 802e1b2:	4253      	negpl	r3, r2
 802e1b4:	687a      	ldr	r2, [r7, #4]
 802e1b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	return k;
 802e1ba:	78fb      	ldrb	r3, [r7, #3]
}
 802e1bc:	4618      	mov	r0, r3
 802e1be:	370c      	adds	r7, #12
 802e1c0:	46bd      	mov	sp, r7
 802e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e1c6:	4770      	bx	lr

0802e1c8 <qget>:

//===========================================================================
unsigned char qget( Queue_t *q )
//===========================================================================
{
 802e1c8:	b480      	push	{r7}
 802e1ca:	b085      	sub	sp, #20
 802e1cc:	af00      	add	r7, sp, #0
 802e1ce:	6078      	str	r0, [r7, #4]
	if(front == rear){
		printf("\n\tCircular Queue Underflow.");
		return -1;
	}
	*/
	i = q->queue[q->front];
 802e1d0:	687b      	ldr	r3, [r7, #4]
 802e1d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802e1d6:	687a      	ldr	r2, [r7, #4]
 802e1d8:	5cd3      	ldrb	r3, [r2, r3]
 802e1da:	73fb      	strb	r3, [r7, #15]
	q->front = (q->front + 1) % QMAX;
 802e1dc:	687b      	ldr	r3, [r7, #4]
 802e1de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802e1e2:	3301      	adds	r3, #1
 802e1e4:	425a      	negs	r2, r3
 802e1e6:	b2db      	uxtb	r3, r3
 802e1e8:	b2d2      	uxtb	r2, r2
 802e1ea:	bf58      	it	pl
 802e1ec:	4253      	negpl	r3, r2
 802e1ee:	687a      	ldr	r2, [r7, #4]
 802e1f0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	return i;
 802e1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 802e1f6:	4618      	mov	r0, r3
 802e1f8:	3714      	adds	r7, #20
 802e1fa:	46bd      	mov	sp, r7
 802e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e200:	4770      	bx	lr

0802e202 <qBufInit>:


//===========================================================================
void qBufInit( QBuf_t *q, uint8_t *_qBuf, int _size )
//===========================================================================
{
 802e202:	b480      	push	{r7}
 802e204:	b085      	sub	sp, #20
 802e206:	af00      	add	r7, sp, #0
 802e208:	60f8      	str	r0, [r7, #12]
 802e20a:	60b9      	str	r1, [r7, #8]
 802e20c:	607a      	str	r2, [r7, #4]
	q->front = q->rear = 0;
 802e20e:	68fb      	ldr	r3, [r7, #12]
 802e210:	2200      	movs	r2, #0
 802e212:	60da      	str	r2, [r3, #12]
 802e214:	68fb      	ldr	r3, [r7, #12]
 802e216:	68da      	ldr	r2, [r3, #12]
 802e218:	68fb      	ldr	r3, [r7, #12]
 802e21a:	609a      	str	r2, [r3, #8]

	q->qBuf = _qBuf;
 802e21c:	68fb      	ldr	r3, [r7, #12]
 802e21e:	68ba      	ldr	r2, [r7, #8]
 802e220:	601a      	str	r2, [r3, #0]
	q->size = _size;
 802e222:	68fb      	ldr	r3, [r7, #12]
 802e224:	687a      	ldr	r2, [r7, #4]
 802e226:	605a      	str	r2, [r3, #4]

//	printf( "%s(%d) - q(%p) / _qBuf(%p) / _size(%d)\n", __func__, __LINE__,
//		q, _qBuf, _size);
}
 802e228:	bf00      	nop
 802e22a:	3714      	adds	r7, #20
 802e22c:	46bd      	mov	sp, r7
 802e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e232:	4770      	bx	lr

0802e234 <qBufClear>:

//===========================================================================
void qBufClear( QBuf_t *q )
//===========================================================================
{
 802e234:	b480      	push	{r7}
 802e236:	b083      	sub	sp, #12
 802e238:	af00      	add	r7, sp, #0
 802e23a:	6078      	str	r0, [r7, #4]
	q->front = q->rear;
 802e23c:	687b      	ldr	r3, [r7, #4]
 802e23e:	68da      	ldr	r2, [r3, #12]
 802e240:	687b      	ldr	r3, [r7, #4]
 802e242:	609a      	str	r2, [r3, #8]
}
 802e244:	bf00      	nop
 802e246:	370c      	adds	r7, #12
 802e248:	46bd      	mov	sp, r7
 802e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e24e:	4770      	bx	lr

0802e250 <qBufCnt>:

//===========================================================================
int qBufCnt( QBuf_t *q )
//===========================================================================
{
 802e250:	b480      	push	{r7}
 802e252:	b083      	sub	sp, #12
 802e254:	af00      	add	r7, sp, #0
 802e256:	6078      	str	r0, [r7, #4]
	return ( ( ( q->rear + q->size ) - q->front ) % q->size );
 802e258:	687b      	ldr	r3, [r7, #4]
 802e25a:	68da      	ldr	r2, [r3, #12]
 802e25c:	687b      	ldr	r3, [r7, #4]
 802e25e:	685b      	ldr	r3, [r3, #4]
 802e260:	441a      	add	r2, r3
 802e262:	687b      	ldr	r3, [r7, #4]
 802e264:	689b      	ldr	r3, [r3, #8]
 802e266:	1ad3      	subs	r3, r2, r3
 802e268:	687a      	ldr	r2, [r7, #4]
 802e26a:	6852      	ldr	r2, [r2, #4]
 802e26c:	fb93 f1f2 	sdiv	r1, r3, r2
 802e270:	fb01 f202 	mul.w	r2, r1, r2
 802e274:	1a9b      	subs	r3, r3, r2
}
 802e276:	4618      	mov	r0, r3
 802e278:	370c      	adds	r7, #12
 802e27a:	46bd      	mov	sp, r7
 802e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e280:	4770      	bx	lr

0802e282 <qBufPut>:

//===========================================================================
int qBufPut( QBuf_t *q, uint8_t *pBuf, int size )
//===========================================================================
{
 802e282:	b580      	push	{r7, lr}
 802e284:	b084      	sub	sp, #16
 802e286:	af00      	add	r7, sp, #0
 802e288:	60f8      	str	r0, [r7, #12]
 802e28a:	60b9      	str	r1, [r7, #8]
 802e28c:	607a      	str	r2, [r7, #4]
	if ( ( q->rear + size ) % q->size == q->front )
 802e28e:	68fb      	ldr	r3, [r7, #12]
 802e290:	68da      	ldr	r2, [r3, #12]
 802e292:	687b      	ldr	r3, [r7, #4]
 802e294:	4413      	add	r3, r2
 802e296:	68fa      	ldr	r2, [r7, #12]
 802e298:	6852      	ldr	r2, [r2, #4]
 802e29a:	fb93 f1f2 	sdiv	r1, r3, r2
 802e29e:	fb01 f202 	mul.w	r2, r1, r2
 802e2a2:	1a9a      	subs	r2, r3, r2
 802e2a4:	68fb      	ldr	r3, [r7, #12]
 802e2a6:	689b      	ldr	r3, [r3, #8]
 802e2a8:	429a      	cmp	r2, r3
 802e2aa:	d102      	bne.n	802e2b2 <qBufPut+0x30>
	{
//		printf( "\n\tCircular Queue Overflow." );
		return -1;
 802e2ac:	f04f 33ff 	mov.w	r3, #4294967295
 802e2b0:	e017      	b.n	802e2e2 <qBufPut+0x60>
	}

	memcpy( &q->qBuf[q->rear], pBuf, size );
 802e2b2:	68fb      	ldr	r3, [r7, #12]
 802e2b4:	681b      	ldr	r3, [r3, #0]
 802e2b6:	68fa      	ldr	r2, [r7, #12]
 802e2b8:	68d2      	ldr	r2, [r2, #12]
 802e2ba:	4413      	add	r3, r2
 802e2bc:	687a      	ldr	r2, [r7, #4]
 802e2be:	68b9      	ldr	r1, [r7, #8]
 802e2c0:	4618      	mov	r0, r3
 802e2c2:	f009 fc5d 	bl	8037b80 <memcpy>
//	q->qBuf[q->rear] = k;
	q->rear = ( q->rear + size ) % q->size;
 802e2c6:	68fb      	ldr	r3, [r7, #12]
 802e2c8:	68da      	ldr	r2, [r3, #12]
 802e2ca:	687b      	ldr	r3, [r7, #4]
 802e2cc:	4413      	add	r3, r2
 802e2ce:	68fa      	ldr	r2, [r7, #12]
 802e2d0:	6852      	ldr	r2, [r2, #4]
 802e2d2:	fb93 f1f2 	sdiv	r1, r3, r2
 802e2d6:	fb01 f202 	mul.w	r2, r1, r2
 802e2da:	1a9a      	subs	r2, r3, r2
 802e2dc:	68fb      	ldr	r3, [r7, #12]
 802e2de:	60da      	str	r2, [r3, #12]

//	printf( "%s(%d) - q(%p) / q->rear(%d) / q->front(%d)\n", __func__, __LINE__,
//		q, q->rear, q->front );

	return size;
 802e2e0:	687b      	ldr	r3, [r7, #4]
}
 802e2e2:	4618      	mov	r0, r3
 802e2e4:	3710      	adds	r7, #16
 802e2e6:	46bd      	mov	sp, r7
 802e2e8:	bd80      	pop	{r7, pc}

0802e2ea <qBufGet>:

//===========================================================================
int qBufGet( QBuf_t *q, uint8_t *pBuf, int size )
//===========================================================================
{
 802e2ea:	b580      	push	{r7, lr}
 802e2ec:	b084      	sub	sp, #16
 802e2ee:	af00      	add	r7, sp, #0
 802e2f0:	60f8      	str	r0, [r7, #12]
 802e2f2:	60b9      	str	r1, [r7, #8]
 802e2f4:	607a      	str	r2, [r7, #4]
	//*
	if ( q->front == q->rear )
 802e2f6:	68fb      	ldr	r3, [r7, #12]
 802e2f8:	689a      	ldr	r2, [r3, #8]
 802e2fa:	68fb      	ldr	r3, [r7, #12]
 802e2fc:	68db      	ldr	r3, [r3, #12]
 802e2fe:	429a      	cmp	r2, r3
 802e300:	d102      	bne.n	802e308 <qBufGet+0x1e>
	{
//		printf( "\n\tCircular Queue Underflow." );
		return -1;
 802e302:	f04f 33ff 	mov.w	r3, #4294967295
 802e306:	e017      	b.n	802e338 <qBufGet+0x4e>
	}
	//	*/

	memcpy( pBuf, &q->qBuf[q->front], size );
 802e308:	68fb      	ldr	r3, [r7, #12]
 802e30a:	681b      	ldr	r3, [r3, #0]
 802e30c:	68fa      	ldr	r2, [r7, #12]
 802e30e:	6892      	ldr	r2, [r2, #8]
 802e310:	4413      	add	r3, r2
 802e312:	687a      	ldr	r2, [r7, #4]
 802e314:	4619      	mov	r1, r3
 802e316:	68b8      	ldr	r0, [r7, #8]
 802e318:	f009 fc32 	bl	8037b80 <memcpy>

	q->front = ( q->front + size ) % q->size;
 802e31c:	68fb      	ldr	r3, [r7, #12]
 802e31e:	689a      	ldr	r2, [r3, #8]
 802e320:	687b      	ldr	r3, [r7, #4]
 802e322:	4413      	add	r3, r2
 802e324:	68fa      	ldr	r2, [r7, #12]
 802e326:	6852      	ldr	r2, [r2, #4]
 802e328:	fb93 f1f2 	sdiv	r1, r3, r2
 802e32c:	fb01 f202 	mul.w	r2, r1, r2
 802e330:	1a9a      	subs	r2, r3, r2
 802e332:	68fb      	ldr	r3, [r7, #12]
 802e334:	609a      	str	r2, [r3, #8]

//	printf( "%s(%d) - q(%p) / q->rear(%d) / q->front(%d)\n", __func__, __LINE__,
//		q, q->rear, q->front );

	return size;
 802e336:	687b      	ldr	r3, [r7, #4]
}
 802e338:	4618      	mov	r0, r3
 802e33a:	3710      	adds	r7, #16
 802e33c:	46bd      	mov	sp, r7
 802e33e:	bd80      	pop	{r7, pc}

0802e340 <_MakePktHdr>:
//==========================================================================

//========================================================================
void _MakePktHdr	( RFMPkt *pPkt, int addrSrc, int addrDest, int nLen, int nPktCmd )
//========================================================================
{
 802e340:	b580      	push	{r7, lr}
 802e342:	b084      	sub	sp, #16
 802e344:	af00      	add	r7, sp, #0
 802e346:	60f8      	str	r0, [r7, #12]
 802e348:	60b9      	str	r1, [r7, #8]
 802e34a:	607a      	str	r2, [r7, #4]
 802e34c:	603b      	str	r3, [r7, #0]
#if	defined(USE_HOPPING)

	if ( nPktCmd == PktStat
 802e34e:	69bb      	ldr	r3, [r7, #24]
 802e350:	2b01      	cmp	r3, #1
 802e352:	d00e      	beq.n	802e372 <_MakePktHdr+0x32>
		|| nPktCmd == PktStatReq
 802e354:	69bb      	ldr	r3, [r7, #24]
 802e356:	2b11      	cmp	r3, #17
 802e358:	d00b      	beq.n	802e372 <_MakePktHdr+0x32>
		|| nPktCmd == PktCmd
 802e35a:	69bb      	ldr	r3, [r7, #24]
 802e35c:	2b20      	cmp	r3, #32
 802e35e:	d008      	beq.n	802e372 <_MakePktHdr+0x32>
		|| nPktCmd == PktUpgr
 802e360:	69bb      	ldr	r3, [r7, #24]
 802e362:	2b40      	cmp	r3, #64	; 0x40
 802e364:	d005      	beq.n	802e372 <_MakePktHdr+0x32>
		|| nPktCmd == PktRouteReq
 802e366:	69bb      	ldr	r3, [r7, #24]
 802e368:	2b31      	cmp	r3, #49	; 0x31
 802e36a:	d002      	beq.n	802e372 <_MakePktHdr+0x32>
		|| nPktCmd == PktRouteRsp
 802e36c:	69bb      	ldr	r3, [r7, #24]
 802e36e:	2b32      	cmp	r3, #50	; 0x32
 802e370:	d10f      	bne.n	802e392 <_MakePktHdr+0x52>
		)
	{
		//	상태정보의 경우 Seq / ID : 0x00
		pPkt->hdr.bHdrID		=	HdrID1;		//	Header ID #1
 802e372:	68fa      	ldr	r2, [r7, #12]
 802e374:	7853      	ldrb	r3, [r2, #1]
 802e376:	f36f 1387 	bfc	r3, #6, #2
 802e37a:	7053      	strb	r3, [r2, #1]
		pPkt->hdr.nSeq			=	0x00;		//	Sequence
 802e37c:	68fb      	ldr	r3, [r7, #12]
 802e37e:	2200      	movs	r2, #0
 802e380:	709a      	strb	r2, [r3, #2]
		pPkt->hdr.nIDFlag		=	0x00;		//	ID Flag
 802e382:	68fb      	ldr	r3, [r7, #12]
 802e384:	2200      	movs	r2, #0
 802e386:	701a      	strb	r2, [r3, #0]
 802e388:	785a      	ldrb	r2, [r3, #1]
 802e38a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 802e38e:	705a      	strb	r2, [r3, #1]
 802e390:	e04b      	b.n	802e42a <_MakePktHdr+0xea>
	}
	else
	{
		g_nPktSeq++;
 802e392:	4b2a      	ldr	r3, [pc, #168]	; (802e43c <_MakePktHdr+0xfc>)
 802e394:	781b      	ldrb	r3, [r3, #0]
 802e396:	3301      	adds	r3, #1
 802e398:	b2da      	uxtb	r2, r3
 802e39a:	4b28      	ldr	r3, [pc, #160]	; (802e43c <_MakePktHdr+0xfc>)
 802e39c:	701a      	strb	r2, [r3, #0]
		if ( g_nPktSeq == 0 )	g_nPktSeq++;
 802e39e:	4b27      	ldr	r3, [pc, #156]	; (802e43c <_MakePktHdr+0xfc>)
 802e3a0:	781b      	ldrb	r3, [r3, #0]
 802e3a2:	2b00      	cmp	r3, #0
 802e3a4:	d105      	bne.n	802e3b2 <_MakePktHdr+0x72>
 802e3a6:	4b25      	ldr	r3, [pc, #148]	; (802e43c <_MakePktHdr+0xfc>)
 802e3a8:	781b      	ldrb	r3, [r3, #0]
 802e3aa:	3301      	adds	r3, #1
 802e3ac:	b2da      	uxtb	r2, r3
 802e3ae:	4b23      	ldr	r3, [pc, #140]	; (802e43c <_MakePktHdr+0xfc>)
 802e3b0:	701a      	strb	r2, [r3, #0]
		pPkt->hdr.nSeq			=	g_nPktSeq;			//
 802e3b2:	4b22      	ldr	r3, [pc, #136]	; (802e43c <_MakePktHdr+0xfc>)
 802e3b4:	781a      	ldrb	r2, [r3, #0]
 802e3b6:	68fb      	ldr	r3, [r7, #12]
 802e3b8:	709a      	strb	r2, [r3, #2]

		if ( GetDevID() == DevRF900T )
 802e3ba:	f004 f979 	bl	80326b0 <GetDevID>
 802e3be:	4603      	mov	r3, r0
 802e3c0:	2b02      	cmp	r3, #2
 802e3c2:	d11b      	bne.n	802e3fc <_MakePktHdr+0xbc>
		{
			//	송신기.
			//		송신기의 송/수신반경과 수신기의 송/수신반경의 차이로 
			//		송신기가 상태정보를 수신후에 수신기에 송신을 할때 범위에 도달하지 못하는 경우가 있으므로, 
			//		수신기에서 중계를 할 수 있도록 송신기 ID만 설정하여 송신함.
			pPkt->hdr.nIDFlag		=	(0x1 << GetCarNo());	//	송신기는 자신의 ID만 Set하여 전송.
 802e3c4:	f004 fd4a 	bl	8032e5c <GetCarNo>
 802e3c8:	4603      	mov	r3, r0
 802e3ca:	2201      	movs	r2, #1
 802e3cc:	fa02 f303 	lsl.w	r3, r2, r3
 802e3d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 802e3d4:	b29a      	uxth	r2, r3
 802e3d6:	68fb      	ldr	r3, [r7, #12]
 802e3d8:	b2d1      	uxtb	r1, r2
 802e3da:	2000      	movs	r0, #0
 802e3dc:	4301      	orrs	r1, r0
 802e3de:	7019      	strb	r1, [r3, #0]
 802e3e0:	0a12      	lsrs	r2, r2, #8
 802e3e2:	b292      	uxth	r2, r2
 802e3e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 802e3e8:	f002 003f 	and.w	r0, r2, #63	; 0x3f
 802e3ec:	785a      	ldrb	r2, [r3, #1]
 802e3ee:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 802e3f2:	4611      	mov	r1, r2
 802e3f4:	4602      	mov	r2, r0
 802e3f6:	430a      	orrs	r2, r1
 802e3f8:	705a      	strb	r2, [r3, #1]
 802e3fa:	e016      	b.n	802e42a <_MakePktHdr+0xea>
		}
		else
		{
			//	수신기.
			pPkt->hdr.nIDFlag		=	g_flagRspID;		//
 802e3fc:	4b10      	ldr	r3, [pc, #64]	; (802e440 <_MakePktHdr+0x100>)
 802e3fe:	881b      	ldrh	r3, [r3, #0]
 802e400:	f3c3 030d 	ubfx	r3, r3, #0, #14
 802e404:	b29a      	uxth	r2, r3
 802e406:	68fb      	ldr	r3, [r7, #12]
 802e408:	b2d1      	uxtb	r1, r2
 802e40a:	2000      	movs	r0, #0
 802e40c:	4301      	orrs	r1, r0
 802e40e:	7019      	strb	r1, [r3, #0]
 802e410:	0a12      	lsrs	r2, r2, #8
 802e412:	b292      	uxth	r2, r2
 802e414:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 802e418:	f002 003f 	and.w	r0, r2, #63	; 0x3f
 802e41c:	785a      	ldrb	r2, [r3, #1]
 802e41e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 802e422:	4611      	mov	r1, r2
 802e424:	4602      	mov	r2, r0
 802e426:	430a      	orrs	r2, r1
 802e428:	705a      	strb	r2, [r3, #1]
	pPkt->hdr.addrDest		=	addrDest;		//	Broadcast
	pPkt->hdr.nLen			=	nLen;			//	Length

#endif

	pPkt->hdr.nPktCmd		=	nPktCmd;		//	Status
 802e42a:	69bb      	ldr	r3, [r7, #24]
 802e42c:	b2da      	uxtb	r2, r3
 802e42e:	68fb      	ldr	r3, [r7, #12]
 802e430:	70da      	strb	r2, [r3, #3]
}
 802e432:	bf00      	nop
 802e434:	3710      	adds	r7, #16
 802e436:	46bd      	mov	sp, r7
 802e438:	bd80      	pop	{r7, pc}
 802e43a:	bf00      	nop
 802e43c:	20001396 	.word	0x20001396
 802e440:	20001394 	.word	0x20001394

0802e444 <_MakePktHdr2>:
#if defined(USE_CH_ISO_DEV)		//	장치별 채널분리.

//========================================================================
void _MakePktHdr2	( RFMPkt *pPkt, int nPktCmd )
//========================================================================
{
 802e444:	b580      	push	{r7, lr}
 802e446:	b082      	sub	sp, #8
 802e448:	af00      	add	r7, sp, #0
 802e44a:	6078      	str	r0, [r7, #4]
 802e44c:	6039      	str	r1, [r7, #0]
	//	상태정보의 경우 Seq / ID : 0x00
	pPkt->hdr2.bHdrID		=	HdrID2;				//	Header ID #1
 802e44e:	687a      	ldr	r2, [r7, #4]
 802e450:	7813      	ldrb	r3, [r2, #0]
 802e452:	2101      	movs	r1, #1
 802e454:	f361 1387 	bfi	r3, r1, #6, #2
 802e458:	7013      	strb	r3, [r2, #0]
	pPkt->hdr2.nSrcCh		=	GetChRx();			//	Source Channel
 802e45a:	f004 f9db 	bl	8032814 <GetChRx>
 802e45e:	4603      	mov	r3, r0
 802e460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802e464:	b2d9      	uxtb	r1, r3
 802e466:	687a      	ldr	r2, [r7, #4]
 802e468:	7853      	ldrb	r3, [r2, #1]
 802e46a:	f361 0305 	bfi	r3, r1, #0, #6
 802e46e:	7053      	strb	r3, [r2, #1]
	pPkt->hdr2.nTS			=	GetTrainSetIdx();	//	ID Flag
 802e470:	f004 fb82 	bl	8032b78 <GetTrainSetIdx>
 802e474:	4603      	mov	r3, r0
 802e476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802e47a:	b2d9      	uxtb	r1, r3
 802e47c:	687a      	ldr	r2, [r7, #4]
 802e47e:	7813      	ldrb	r3, [r2, #0]
 802e480:	f361 0305 	bfi	r3, r1, #0, #6
 802e484:	7013      	strb	r3, [r2, #0]
	pPkt->hdr2.nPktCmd		=	nPktCmd;			//	Status
 802e486:	683b      	ldr	r3, [r7, #0]
 802e488:	b2da      	uxtb	r2, r3
 802e48a:	687b      	ldr	r3, [r7, #4]
 802e48c:	70da      	strb	r2, [r3, #3]
//	CLEAR_BIT(pPkt->hdr2.nTS, (0x1<<7));
//	SET_BIT(pPkt->hdr2.nTS, (0x1<<6));

#if defined( USE_RFT_REG_TO_RFM )
	//	자신의 송신기 ID Flag 설정.	-	재수신 받지 않음.
	if( GetRFTID() == 1 )
 802e48e:	f004 f9ab 	bl	80327e8 <GetRFTID>
 802e492:	4603      	mov	r3, r0
 802e494:	2b01      	cmp	r3, #1
 802e496:	d10f      	bne.n	802e4b8 <_MakePktHdr2+0x74>
	{
		pPkt->hdr2.bRFT1	=	1;	//	SET_BIT( pPkt->hdr2.nSrcCh, (0x1<<6) );	//
 802e498:	687a      	ldr	r2, [r7, #4]
 802e49a:	7853      	ldrb	r3, [r2, #1]
 802e49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e4a0:	7053      	strb	r3, [r2, #1]
		if( GetChPARFT() != 0 )	pPkt->hdr2.bRFT2	=	1;	//	송신기에 직접 전송하는경우.
 802e4a2:	f004 fad1 	bl	8032a48 <GetChPARFT>
 802e4a6:	4603      	mov	r3, r0
 802e4a8:	2b00      	cmp	r3, #0
 802e4aa:	d019      	beq.n	802e4e0 <_MakePktHdr2+0x9c>
 802e4ac:	687a      	ldr	r2, [r7, #4]
 802e4ae:	7853      	ldrb	r3, [r2, #1]
 802e4b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e4b4:	7053      	strb	r3, [r2, #1]
		pPkt->hdr2.bRFT2	=	1;	//	SET_BIT( pPkt->hdr2.nSrcCh, (0x1<<7) );//
		if( GetChPARFT() != 0 )	pPkt->hdr2.bRFT1	=	1;	//	송신기에 직접 전송하는경우.
	}

#endif
}
 802e4b6:	e013      	b.n	802e4e0 <_MakePktHdr2+0x9c>
	else if( GetRFTID() == 2 )
 802e4b8:	f004 f996 	bl	80327e8 <GetRFTID>
 802e4bc:	4603      	mov	r3, r0
 802e4be:	2b02      	cmp	r3, #2
 802e4c0:	d10e      	bne.n	802e4e0 <_MakePktHdr2+0x9c>
		pPkt->hdr2.bRFT2	=	1;	//	SET_BIT( pPkt->hdr2.nSrcCh, (0x1<<7) );//
 802e4c2:	687a      	ldr	r2, [r7, #4]
 802e4c4:	7853      	ldrb	r3, [r2, #1]
 802e4c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e4ca:	7053      	strb	r3, [r2, #1]
		if( GetChPARFT() != 0 )	pPkt->hdr2.bRFT1	=	1;	//	송신기에 직접 전송하는경우.
 802e4cc:	f004 fabc 	bl	8032a48 <GetChPARFT>
 802e4d0:	4603      	mov	r3, r0
 802e4d2:	2b00      	cmp	r3, #0
 802e4d4:	d004      	beq.n	802e4e0 <_MakePktHdr2+0x9c>
 802e4d6:	687a      	ldr	r2, [r7, #4]
 802e4d8:	7853      	ldrb	r3, [r2, #1]
 802e4da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e4de:	7053      	strb	r3, [r2, #1]
}
 802e4e0:	bf00      	nop
 802e4e2:	3708      	adds	r7, #8
 802e4e4:	46bd      	mov	sp, r7
 802e4e6:	bd80      	pop	{r7, pc}

0802e4e8 <_MakeRFCmd>:
#endif	//	defined(USE_CH_ISO_DEV)		//	장치별 채널분리.

//==========================================================================
void _MakeRFCmd( RFMPkt	*pPkt, char *sCmd, int nRSSI )
//==========================================================================
{
 802e4e8:	b580      	push	{r7, lr}
 802e4ea:	b086      	sub	sp, #24
 802e4ec:	af02      	add	r7, sp, #8
 802e4ee:	60f8      	str	r0, [r7, #12]
 802e4f0:	60b9      	str	r1, [r7, #8]
 802e4f2:	607a      	str	r2, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802e4f4:	229a      	movs	r2, #154	; 0x9a
 802e4f6:	4910      	ldr	r1, [pc, #64]	; (802e538 <_MakeRFCmd+0x50>)
 802e4f8:	4810      	ldr	r0, [pc, #64]	; (802e53c <_MakeRFCmd+0x54>)
 802e4fa:	f008 ffd1 	bl	80374a0 <iprintf>

	memset( pPkt, 0, sizeof( RFMPkt ) );
 802e4fe:	2240      	movs	r2, #64	; 0x40
 802e500:	2100      	movs	r1, #0
 802e502:	68f8      	ldr	r0, [r7, #12]
 802e504:	f009 fa2e 	bl	8037964 <memset>

	//========================================================================
	//	Packet Header
	_MakePktHdr( pPkt, GetDevID(), 0xFF, RFPktDataLen, PktCmd );
 802e508:	f004 f8d2 	bl	80326b0 <GetDevID>
 802e50c:	4601      	mov	r1, r0
 802e50e:	2320      	movs	r3, #32
 802e510:	9300      	str	r3, [sp, #0]
 802e512:	233c      	movs	r3, #60	; 0x3c
 802e514:	22ff      	movs	r2, #255	; 0xff
 802e516:	68f8      	ldr	r0, [r7, #12]
 802e518:	f7ff ff12 	bl	802e340 <_MakePktHdr>

	//========================================================================
	//	Command
	pPkt->dat.cmd.nRSSIOver = nRSSI;		//	명령 동작 RSSI 범위.
 802e51c:	687b      	ldr	r3, [r7, #4]
 802e51e:	b25a      	sxtb	r2, r3
 802e520:	68fb      	ldr	r3, [r7, #12]
 802e522:	711a      	strb	r2, [r3, #4]
	strcpy( pPkt->dat.cmd.sCmd, sCmd );		//	명령 전송.
 802e524:	68fb      	ldr	r3, [r7, #12]
 802e526:	3308      	adds	r3, #8
 802e528:	68b9      	ldr	r1, [r7, #8]
 802e52a:	4618      	mov	r0, r3
 802e52c:	f009 fb20 	bl	8037b70 <strcpy>

	//========================================================================
}
 802e530:	bf00      	nop
 802e532:	3710      	adds	r7, #16
 802e534:	46bd      	mov	sp, r7
 802e536:	bd80      	pop	{r7, pc}
 802e538:	080412ec 	.word	0x080412ec
 802e53c:	080394e0 	.word	0x080394e0

0802e540 <SendStatReq>:


//========================================================================
void SendStatReq( int nDestCh )
//========================================================================
{
 802e540:	b580      	push	{r7, lr}
 802e542:	b096      	sub	sp, #88	; 0x58
 802e544:	af02      	add	r7, sp, #8
 802e546:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )	printf( "%s(%d)\n", __func__, __LINE__ );
 802e548:	f002 fcda 	bl	8030f00 <GetDbg>
 802e54c:	4603      	mov	r3, r0
 802e54e:	2b00      	cmp	r3, #0
 802e550:	d004      	beq.n	802e55c <SendStatReq+0x1c>
 802e552:	22af      	movs	r2, #175	; 0xaf
 802e554:	491e      	ldr	r1, [pc, #120]	; (802e5d0 <SendStatReq+0x90>)
 802e556:	481f      	ldr	r0, [pc, #124]	; (802e5d4 <SendStatReq+0x94>)
 802e558:	f008 ffa2 	bl	80374a0 <iprintf>

	RFMPkt			stPkt;
	RFMPktStatReq	*pStatReq;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e55c:	f107 030c 	add.w	r3, r7, #12
 802e560:	2240      	movs	r2, #64	; 0x40
 802e562:	2100      	movs	r1, #0
 802e564:	4618      	mov	r0, r3
 802e566:	f009 f9fd 	bl	8037964 <memset>
	pStatReq = (RFMPktStatReq *)&stPkt.dat.statReq;
 802e56a:	f107 030c 	add.w	r3, r7, #12
 802e56e:	3304      	adds	r3, #4
 802e570:	64fb      	str	r3, [r7, #76]	; 0x4c

	//========================================================================
	//	Packet Header
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktStatReq ), PktStatReq );
 802e572:	f004 f89d 	bl	80326b0 <GetDevID>
 802e576:	4601      	mov	r1, r0
 802e578:	f107 000c 	add.w	r0, r7, #12
 802e57c:	2311      	movs	r3, #17
 802e57e:	9300      	str	r3, [sp, #0]
 802e580:	230c      	movs	r3, #12
 802e582:	22ff      	movs	r2, #255	; 0xff
 802e584:	f7ff fedc 	bl	802e340 <_MakePktHdr>

	//========================================================================
	//	Packet Body
	pStatReq->nSrcCh	=	GetChRx();			//	수신받을 채널
 802e588:	f004 f944 	bl	8032814 <GetChRx>
 802e58c:	4603      	mov	r3, r0
 802e58e:	b2da      	uxtb	r2, r3
 802e590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e592:	701a      	strb	r2, [r3, #0]

	pStatReq->nCarNo	=	GetCarNo();			//	호차번호.
 802e594:	f004 fc62 	bl	8032e5c <GetCarNo>
 802e598:	4603      	mov	r3, r0
 802e59a:	b2da      	uxtb	r2, r3
 802e59c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e59e:	715a      	strb	r2, [r3, #5]
	pStatReq->nTrainNo	=	GetTrainSetIdx();	//	편성번호.
 802e5a0:	f004 faea 	bl	8032b78 <GetTrainSetIdx>
 802e5a4:	4603      	mov	r3, r0
 802e5a6:	b2da      	uxtb	r2, r3
 802e5a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e5aa:	711a      	strb	r2, [r3, #4]

#if defined(USE_ROUTE_NEAREST_RFM)

	pStatReq->nNearCh	=	GetChNearRFM();		//	가장 가까운 수신기(RFM) 채널
 802e5ac:	f004 f9b2 	bl	8032914 <GetChNearRFM>
 802e5b0:	4603      	mov	r3, r0
 802e5b2:	b2da      	uxtb	r2, r3
 802e5b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e5b6:	721a      	strb	r2, [r3, #8]

#endif	//	 defined(USE_ROUTE_NEAREST_RFM)

	//========================================================================
	//	Send RF
	SendPktCh( nDestCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktStatReq ) );
 802e5b8:	f107 030c 	add.w	r3, r7, #12
 802e5bc:	2210      	movs	r2, #16
 802e5be:	4619      	mov	r1, r3
 802e5c0:	6878      	ldr	r0, [r7, #4]
 802e5c2:	f7ff fd4b 	bl	802e05c <SendPktCh>
}
 802e5c6:	bf00      	nop
 802e5c8:	3750      	adds	r7, #80	; 0x50
 802e5ca:	46bd      	mov	sp, r7
 802e5cc:	bd80      	pop	{r7, pc}
 802e5ce:	bf00      	nop
 802e5d0:	080412f8 	.word	0x080412f8
 802e5d4:	080394e0 	.word	0x080394e0

0802e5d8 <SendStat>:

//========================================================================
void SendStat( int nDestCh )
//========================================================================
{
 802e5d8:	b580      	push	{r7, lr}
 802e5da:	b096      	sub	sp, #88	; 0x58
 802e5dc:	af02      	add	r7, sp, #8
 802e5de:	6078      	str	r0, [r7, #4]
	//	RF Mode가 RFMModeNormal인 경우.
	//		상태정보 전송.

	if ( GetDbg() )	printf( "%s(%d)\n", __func__, __LINE__ );
 802e5e0:	f002 fc8e 	bl	8030f00 <GetDbg>
 802e5e4:	4603      	mov	r3, r0
 802e5e6:	2b00      	cmp	r3, #0
 802e5e8:	d004      	beq.n	802e5f4 <SendStat+0x1c>
 802e5ea:	22d4      	movs	r2, #212	; 0xd4
 802e5ec:	4944      	ldr	r1, [pc, #272]	; (802e700 <SendStat+0x128>)
 802e5ee:	4845      	ldr	r0, [pc, #276]	; (802e704 <SendStat+0x12c>)
 802e5f0:	f008 ff56 	bl	80374a0 <iprintf>

	RFMPkt		stPkt;
	RFMPktStat	*pStat;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e5f4:	f107 0308 	add.w	r3, r7, #8
 802e5f8:	2240      	movs	r2, #64	; 0x40
 802e5fa:	2100      	movs	r1, #0
 802e5fc:	4618      	mov	r0, r3
 802e5fe:	f009 f9b1 	bl	8037964 <memset>
	pStat = (RFMPktStat *)&stPkt.dat.stat;
 802e602:	f107 0308 	add.w	r3, r7, #8
 802e606:	3304      	adds	r3, #4
 802e608:	64bb      	str	r3, [r7, #72]	; 0x48

	//========================================================================
	//	Packet Header
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktStat ), PktStat );
 802e60a:	f004 f851 	bl	80326b0 <GetDevID>
 802e60e:	4601      	mov	r1, r0
 802e610:	f107 0008 	add.w	r0, r7, #8
 802e614:	2301      	movs	r3, #1
 802e616:	9300      	str	r3, [sp, #0]
 802e618:	2319      	movs	r3, #25
 802e61a:	22ff      	movs	r2, #255	; 0xff
 802e61c:	f7ff fe90 	bl	802e340 <_MakePktHdr>

	//========================================================================
	//	Status Data
	pStat->ver_main		=	APP_MAIN_VER;		//	1;
 802e620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e622:	2202      	movs	r2, #2
 802e624:	739a      	strb	r2, [r3, #14]
	pStat->ver_sub		=	APP_SUB_VER;		//	0;
 802e626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e628:	2200      	movs	r2, #0
 802e62a:	73da      	strb	r2, [r3, #15]
	pStat->ver_det		=	APP_DETAIL_VER;		//	0;
 802e62c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e62e:	2200      	movs	r2, #0
 802e630:	741a      	strb	r2, [r3, #16]
 802e632:	2200      	movs	r2, #0
 802e634:	745a      	strb	r2, [r3, #17]
	pStat->ver_build	=	APP_BUILD_VER;		//	0;
 802e636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e638:	2200      	movs	r2, #0
 802e63a:	f042 024b 	orr.w	r2, r2, #75	; 0x4b
 802e63e:	749a      	strb	r2, [r3, #18]
 802e640:	2200      	movs	r2, #0
 802e642:	f042 0201 	orr.w	r2, r2, #1
 802e646:	74da      	strb	r2, [r3, #19]

	pStat->nMagicNum	=	0xAA55;				//	패킷 요류검출용.
 802e648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e64a:	2200      	movs	r2, #0
 802e64c:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 802e650:	709a      	strb	r2, [r3, #2]
 802e652:	2200      	movs	r2, #0
 802e654:	f062 0255 	orn	r2, r2, #85	; 0x55
 802e658:	70da      	strb	r2, [r3, #3]

	pStat->nCarNo		=	GetCarNo();
 802e65a:	f004 fbff 	bl	8032e5c <GetCarNo>
 802e65e:	4603      	mov	r3, r0
 802e660:	b2da      	uxtb	r2, r3
 802e662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e664:	735a      	strb	r2, [r3, #13]
	pStat->nDevID		=	GetDevID();
 802e666:	f004 f823 	bl	80326b0 <GetDevID>
 802e66a:	4603      	mov	r3, r0
 802e66c:	b2da      	uxtb	r2, r3
 802e66e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e670:	705a      	strb	r2, [r3, #1]

	pStat->nTrainNo		=	GetTrainSetIdx();	//	편성번호.
 802e672:	f004 fa81 	bl	8032b78 <GetTrainSetIdx>
 802e676:	4603      	mov	r3, r0
 802e678:	b2da      	uxtb	r2, r3
 802e67a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e67c:	731a      	strb	r2, [r3, #12]

	pStat->upTime		=	HAL_GetTick();
 802e67e:	f7f3 fa73 	bl	8021b68 <HAL_GetTick>
 802e682:	4602      	mov	r2, r0
 802e684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e686:	605a      	str	r2, [r3, #4]

	pStat->rspID		=	g_flagRspID;		//	Rsp ID Flag
 802e688:	4b1f      	ldr	r3, [pc, #124]	; (802e708 <SendStat+0x130>)
 802e68a:	881a      	ldrh	r2, [r3, #0]
 802e68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e68e:	829a      	strh	r2, [r3, #20]

	pStat->nManHop		=	g_nManHopping;		//	Manual Hopping Setting
 802e690:	4b1e      	ldr	r3, [pc, #120]	; (802e70c <SendStat+0x134>)
 802e692:	681b      	ldr	r3, [r3, #0]
 802e694:	b2da      	uxtb	r2, r3
 802e696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e698:	759a      	strb	r2, [r3, #22]
	pStat->nRFMode		=	g_nRFMode;			//	RFMode
 802e69a:	4b1d      	ldr	r3, [pc, #116]	; (802e710 <SendStat+0x138>)
 802e69c:	681b      	ldr	r3, [r3, #0]
 802e69e:	b2da      	uxtb	r2, r3
 802e6a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e6a2:	75da      	strb	r2, [r3, #23]

	pStat->nDevFlag		=	g_nDevFlag;			//	Device Flag : 조명 상태 등.
 802e6a4:	4b1b      	ldr	r3, [pc, #108]	; (802e714 <SendStat+0x13c>)
 802e6a6:	681b      	ldr	r3, [r3, #0]
 802e6a8:	b2da      	uxtb	r2, r3
 802e6aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e6ac:	761a      	strb	r2, [r3, #24]

	pStat->nChRx		=	GetChRx();			//	수신 채널
 802e6ae:	f004 f8b1 	bl	8032814 <GetChRx>
 802e6b2:	4603      	mov	r3, r0
 802e6b4:	b2da      	uxtb	r2, r3
 802e6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e6b8:	729a      	strb	r2, [r3, #10]

	//========================================================================
	//	Send RF

	if( g_nRFMode == RFMode2 )//#if defined(USE_COMM_MODE_CH_GRP)	//	그룹주파수 모드. - [ 1, 2 ] [ 3, 4 ] ...
 802e6ba:	4b15      	ldr	r3, [pc, #84]	; (802e710 <SendStat+0x138>)
 802e6bc:	681b      	ldr	r3, [r3, #0]
 802e6be:	2b02      	cmp	r3, #2
 802e6c0:	d109      	bne.n	802e6d6 <SendStat+0xfe>
	{
		//	짝수 호차는 3msec Delay ( 송신시 충돌 방지 )
		if( pStat->nCarNo % 2 == 0 ) HAL_Delay( 3 );
 802e6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e6c4:	7b5b      	ldrb	r3, [r3, #13]
 802e6c6:	f003 0301 	and.w	r3, r3, #1
 802e6ca:	b2db      	uxtb	r3, r3
 802e6cc:	2b00      	cmp	r3, #0
 802e6ce:	d102      	bne.n	802e6d6 <SendStat+0xfe>
 802e6d0:	2003      	movs	r0, #3
 802e6d2:	f7f3 fa55 	bl	8021b80 <HAL_Delay>
#if defined(USE_CH_ISO_DEV)
	//	상태정보는 송신기로 전송.
	int nCh;

	//========================================================================
	if ( nDestCh == 0 )	nCh = ChTx_1;	//	Default
 802e6d6:	687b      	ldr	r3, [r7, #4]
 802e6d8:	2b00      	cmp	r3, #0
 802e6da:	d103      	bne.n	802e6e4 <SendStat+0x10c>
 802e6dc:	4b0e      	ldr	r3, [pc, #56]	; (802e718 <SendStat+0x140>)
 802e6de:	681b      	ldr	r3, [r3, #0]
 802e6e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 802e6e2:	e001      	b.n	802e6e8 <SendStat+0x110>
	else				nCh = nDestCh;
 802e6e4:	687b      	ldr	r3, [r7, #4]
 802e6e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	//========================================================================

	SendPktCh(nCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktStat ) );
 802e6e8:	f107 0308 	add.w	r3, r7, #8
 802e6ec:	221d      	movs	r2, #29
 802e6ee:	4619      	mov	r1, r3
 802e6f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802e6f2:	f7ff fcb3 	bl	802e05c <SendPktCh>
#else
	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktStat ) );
#endif
	//========================================================================
}
 802e6f6:	bf00      	nop
 802e6f8:	3750      	adds	r7, #80	; 0x50
 802e6fa:	46bd      	mov	sp, r7
 802e6fc:	bd80      	pop	{r7, pc}
 802e6fe:	bf00      	nop
 802e700:	08041304 	.word	0x08041304
 802e704:	080394e0 	.word	0x080394e0
 802e708:	20001394 	.word	0x20001394
 802e70c:	20002348 	.word	0x20002348
 802e710:	20002344 	.word	0x20002344
 802e714:	20002328 	.word	0x20002328
 802e718:	200004f4 	.word	0x200004f4

0802e71c <SendRouteReq>:


//========================================================================
void SendRouteReq( int nDestCh )
//========================================================================
{
 802e71c:	b580      	push	{r7, lr}
 802e71e:	b096      	sub	sp, #88	; 0x58
 802e720:	af02      	add	r7, sp, #8
 802e722:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )	printf( "%s(%d)\n", __func__, __LINE__ );
 802e724:	f002 fbec 	bl	8030f00 <GetDbg>
 802e728:	4603      	mov	r3, r0
 802e72a:	2b00      	cmp	r3, #0
 802e72c:	d005      	beq.n	802e73a <SendRouteReq+0x1e>
 802e72e:	f240 1217 	movw	r2, #279	; 0x117
 802e732:	491e      	ldr	r1, [pc, #120]	; (802e7ac <SendRouteReq+0x90>)
 802e734:	481e      	ldr	r0, [pc, #120]	; (802e7b0 <SendRouteReq+0x94>)
 802e736:	f008 feb3 	bl	80374a0 <iprintf>

	RFMPkt			stPkt;
	RFMPktRoute		*pRouteReq;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e73a:	f107 030c 	add.w	r3, r7, #12
 802e73e:	2240      	movs	r2, #64	; 0x40
 802e740:	2100      	movs	r1, #0
 802e742:	4618      	mov	r0, r3
 802e744:	f009 f90e 	bl	8037964 <memset>
	pRouteReq = (RFMPktRoute *)&stPkt.dat.routeReq;
 802e748:	f107 030c 	add.w	r3, r7, #12
 802e74c:	3304      	adds	r3, #4
 802e74e:	64fb      	str	r3, [r7, #76]	; 0x4c

	//========================================================================
	//	Packet Header
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktRoute ), PktRouteReq );
 802e750:	f003 ffae 	bl	80326b0 <GetDevID>
 802e754:	4601      	mov	r1, r0
 802e756:	f107 000c 	add.w	r0, r7, #12
 802e75a:	2331      	movs	r3, #49	; 0x31
 802e75c:	9300      	str	r3, [sp, #0]
 802e75e:	2307      	movs	r3, #7
 802e760:	22ff      	movs	r2, #255	; 0xff
 802e762:	f7ff fded 	bl	802e340 <_MakePktHdr>

	//========================================================================
	//	Packet Body
	pRouteReq->nSrcCh	=	GetChRx();			//	수신받을 채널
 802e766:	f004 f855 	bl	8032814 <GetChRx>
 802e76a:	4603      	mov	r3, r0
 802e76c:	b2da      	uxtb	r2, r3
 802e76e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e770:	701a      	strb	r2, [r3, #0]
	pRouteReq->nSrcDev	=	GetDevID();			//	RFT / RFM
 802e772:	f003 ff9d 	bl	80326b0 <GetDevID>
 802e776:	4603      	mov	r3, r0
 802e778:	b2da      	uxtb	r2, r3
 802e77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e77c:	705a      	strb	r2, [r3, #1]

	pRouteReq->nCarNo	=	GetCarNo();			//	호차번호.
 802e77e:	f004 fb6d 	bl	8032e5c <GetCarNo>
 802e782:	4603      	mov	r3, r0
 802e784:	b2da      	uxtb	r2, r3
 802e786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e788:	719a      	strb	r2, [r3, #6]
	pRouteReq->nTrainNo	=	GetTrainSetIdx();	//	편성번호.
 802e78a:	f004 f9f5 	bl	8032b78 <GetTrainSetIdx>
 802e78e:	4603      	mov	r3, r0
 802e790:	b2da      	uxtb	r2, r3
 802e792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e794:	715a      	strb	r2, [r3, #5]

	//========================================================================
	//	Send RF
	SendPktCh( nDestCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktRoute ) );
 802e796:	f107 030c 	add.w	r3, r7, #12
 802e79a:	220b      	movs	r2, #11
 802e79c:	4619      	mov	r1, r3
 802e79e:	6878      	ldr	r0, [r7, #4]
 802e7a0:	f7ff fc5c 	bl	802e05c <SendPktCh>
}
 802e7a4:	bf00      	nop
 802e7a6:	3750      	adds	r7, #80	; 0x50
 802e7a8:	46bd      	mov	sp, r7
 802e7aa:	bd80      	pop	{r7, pc}
 802e7ac:	08041310 	.word	0x08041310
 802e7b0:	080394e0 	.word	0x080394e0

0802e7b4 <SendRouteRsp>:

//========================================================================
void SendRouteRsp( int nDestCh )
//========================================================================
{
 802e7b4:	b580      	push	{r7, lr}
 802e7b6:	b096      	sub	sp, #88	; 0x58
 802e7b8:	af02      	add	r7, sp, #8
 802e7ba:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )	printf( "%s(%d)\n", __func__, __LINE__ );
 802e7bc:	f002 fba0 	bl	8030f00 <GetDbg>
 802e7c0:	4603      	mov	r3, r0
 802e7c2:	2b00      	cmp	r3, #0
 802e7c4:	d005      	beq.n	802e7d2 <SendRouteRsp+0x1e>
 802e7c6:	f44f 729a 	mov.w	r2, #308	; 0x134
 802e7ca:	491e      	ldr	r1, [pc, #120]	; (802e844 <SendRouteRsp+0x90>)
 802e7cc:	481e      	ldr	r0, [pc, #120]	; (802e848 <SendRouteRsp+0x94>)
 802e7ce:	f008 fe67 	bl	80374a0 <iprintf>

	RFMPkt			stPkt;
	RFMPktRoute	*pRouteRsp;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e7d2:	f107 030c 	add.w	r3, r7, #12
 802e7d6:	2240      	movs	r2, #64	; 0x40
 802e7d8:	2100      	movs	r1, #0
 802e7da:	4618      	mov	r0, r3
 802e7dc:	f009 f8c2 	bl	8037964 <memset>
	pRouteRsp = (RFMPktRoute *)&stPkt.dat.routeRsp;
 802e7e0:	f107 030c 	add.w	r3, r7, #12
 802e7e4:	3304      	adds	r3, #4
 802e7e6:	64fb      	str	r3, [r7, #76]	; 0x4c

	//========================================================================
	//	Packet Header
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktRoute ), PktRouteRsp );
 802e7e8:	f003 ff62 	bl	80326b0 <GetDevID>
 802e7ec:	4601      	mov	r1, r0
 802e7ee:	f107 000c 	add.w	r0, r7, #12
 802e7f2:	2332      	movs	r3, #50	; 0x32
 802e7f4:	9300      	str	r3, [sp, #0]
 802e7f6:	2307      	movs	r3, #7
 802e7f8:	22ff      	movs	r2, #255	; 0xff
 802e7fa:	f7ff fda1 	bl	802e340 <_MakePktHdr>

	//========================================================================
	//	Packet Body
	pRouteRsp->nSrcCh	=	GetChRx();			//	수신받을 채널
 802e7fe:	f004 f809 	bl	8032814 <GetChRx>
 802e802:	4603      	mov	r3, r0
 802e804:	b2da      	uxtb	r2, r3
 802e806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e808:	701a      	strb	r2, [r3, #0]
	pRouteRsp->nSrcDev	=	GetDevID();			//	RFT / RFM
 802e80a:	f003 ff51 	bl	80326b0 <GetDevID>
 802e80e:	4603      	mov	r3, r0
 802e810:	b2da      	uxtb	r2, r3
 802e812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e814:	705a      	strb	r2, [r3, #1]

	pRouteRsp->nCarNo	=	GetCarNo();			//	호차번호.
 802e816:	f004 fb21 	bl	8032e5c <GetCarNo>
 802e81a:	4603      	mov	r3, r0
 802e81c:	b2da      	uxtb	r2, r3
 802e81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e820:	719a      	strb	r2, [r3, #6]
	pRouteRsp->nTrainNo	=	GetTrainSetIdx();	//	편성번호.
 802e822:	f004 f9a9 	bl	8032b78 <GetTrainSetIdx>
 802e826:	4603      	mov	r3, r0
 802e828:	b2da      	uxtb	r2, r3
 802e82a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e82c:	715a      	strb	r2, [r3, #5]

	//========================================================================
	//	Send RF
	SendPktCh( nDestCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktRoute ) );
 802e82e:	f107 030c 	add.w	r3, r7, #12
 802e832:	220b      	movs	r2, #11
 802e834:	4619      	mov	r1, r3
 802e836:	6878      	ldr	r0, [r7, #4]
 802e838:	f7ff fc10 	bl	802e05c <SendPktCh>
}
 802e83c:	bf00      	nop
 802e83e:	3750      	adds	r7, #80	; 0x50
 802e840:	46bd      	mov	sp, r7
 802e842:	bd80      	pop	{r7, pc}
 802e844:	08041320 	.word	0x08041320
 802e848:	080394e0 	.word	0x080394e0

0802e84c <SendPA>:


//========================================================================
void SendPA( int nStartStop )
//========================================================================
{
 802e84c:	b580      	push	{r7, lr}
 802e84e:	b094      	sub	sp, #80	; 0x50
 802e850:	af00      	add	r7, sp, #0
 802e852:	6078      	str	r0, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802e854:	f44f 72a9 	mov.w	r2, #338	; 0x152
 802e858:	491a      	ldr	r1, [pc, #104]	; (802e8c4 <SendPA+0x78>)
 802e85a:	481b      	ldr	r0, [pc, #108]	; (802e8c8 <SendPA+0x7c>)
 802e85c:	f008 fe20 	bl	80374a0 <iprintf>

	RFMPkt				stPkt;
	RFMPktCtrlPACall	*pPACall;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e860:	f107 030c 	add.w	r3, r7, #12
 802e864:	2240      	movs	r2, #64	; 0x40
 802e866:	2100      	movs	r1, #0
 802e868:	4618      	mov	r0, r3
 802e86a:	f009 f87b 	bl	8037964 <memset>
	pPACall = (RFMPktCtrlPACall *)&stPkt.dat.pacall;
 802e86e:	f107 030c 	add.w	r3, r7, #12
 802e872:	3304      	adds	r3, #4
 802e874:	64fb      	str	r3, [r7, #76]	; 0x4c

	//========================================================================
	//	Packet Header
#if defined(USE_CH_ISO_DEV)
	_MakePktHdr2( &stPkt, PktCtrlPaCall );
 802e876:	f107 030c 	add.w	r3, r7, #12
 802e87a:	2108      	movs	r1, #8
 802e87c:	4618      	mov	r0, r3
 802e87e:	f7ff fde1 	bl	802e444 <_MakePktHdr2>
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktCtrlPACall ), PktCtrlPaCall );
#endif

	//========================================================================
	//	Status Data
	pPACall->nStartStop		=	nStartStop;
 802e882:	687b      	ldr	r3, [r7, #4]
 802e884:	b2da      	uxtb	r2, r3
 802e886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e888:	701a      	strb	r2, [r3, #0]

	pPACall->nTypePACall	=	CtrlPA;
 802e88a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e88c:	2201      	movs	r2, #1
 802e88e:	705a      	strb	r2, [r3, #1]
	//========================================================================
	//	Send RF

#if defined(USE_CH_ISO_DEV)

	if ( GetChPARFT() != 0 )
 802e890:	f004 f8da 	bl	8032a48 <GetChPARFT>
 802e894:	4603      	mov	r3, r0
 802e896:	2b00      	cmp	r3, #0
 802e898:	d007      	beq.n	802e8aa <SendPA+0x5e>
	{
		//	송신기에 전송.
		SendPktCh( GetChPARFT(), (uint8_t *)&stPkt,
 802e89a:	f004 f8d5 	bl	8032a48 <GetChPARFT>
 802e89e:	f107 030c 	add.w	r3, r7, #12
 802e8a2:	2208      	movs	r2, #8
 802e8a4:	4619      	mov	r1, r3
 802e8a6:	f7ff fbd9 	bl	802e05c <SendPktCh>
			(U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );
	}

	//	수신기에 전송
	SendPktCh( GetChPA(), (uint8_t *)&stPkt,
 802e8aa:	f004 f885 	bl	80329b8 <GetChPA>
 802e8ae:	f107 030c 	add.w	r3, r7, #12
 802e8b2:	2208      	movs	r2, #8
 802e8b4:	4619      	mov	r1, r3
 802e8b6:	f7ff fbd1 	bl	802e05c <SendPktCh>
#else
	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );
#endif

	//========================================================================
}
 802e8ba:	bf00      	nop
 802e8bc:	3750      	adds	r7, #80	; 0x50
 802e8be:	46bd      	mov	sp, r7
 802e8c0:	bd80      	pop	{r7, pc}
 802e8c2:	bf00      	nop
 802e8c4:	08041330 	.word	0x08041330
 802e8c8:	080394e0 	.word	0x080394e0

0802e8cc <SendCall>:


//========================================================================
void SendCall( int nStartStop )
//========================================================================
{
 802e8cc:	b580      	push	{r7, lr}
 802e8ce:	b094      	sub	sp, #80	; 0x50
 802e8d0:	af00      	add	r7, sp, #0
 802e8d2:	6078      	str	r0, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802e8d4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 802e8d8:	491a      	ldr	r1, [pc, #104]	; (802e944 <SendCall+0x78>)
 802e8da:	481b      	ldr	r0, [pc, #108]	; (802e948 <SendCall+0x7c>)
 802e8dc:	f008 fde0 	bl	80374a0 <iprintf>

	RFMPkt			stPkt;
	RFMPktCtrlPACall	*pPACall;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e8e0:	f107 030c 	add.w	r3, r7, #12
 802e8e4:	2240      	movs	r2, #64	; 0x40
 802e8e6:	2100      	movs	r1, #0
 802e8e8:	4618      	mov	r0, r3
 802e8ea:	f009 f83b 	bl	8037964 <memset>
	pPACall = (RFMPktCtrlPACall *)&stPkt.dat.pacall;
 802e8ee:	f107 030c 	add.w	r3, r7, #12
 802e8f2:	3304      	adds	r3, #4
 802e8f4:	64fb      	str	r3, [r7, #76]	; 0x4c

	//========================================================================
	//	Packet Header
#if defined(USE_CH_ISO_DEV)
	_MakePktHdr2( &stPkt, PktCtrlPaCall );
 802e8f6:	f107 030c 	add.w	r3, r7, #12
 802e8fa:	2108      	movs	r1, #8
 802e8fc:	4618      	mov	r0, r3
 802e8fe:	f7ff fda1 	bl	802e444 <_MakePktHdr2>
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktCtrlPACall ), PktCtrlPaCall );
#endif

	//========================================================================
	//	Status Data
	pPACall->nStartStop		=	nStartStop;
 802e902:	687b      	ldr	r3, [r7, #4]
 802e904:	b2da      	uxtb	r2, r3
 802e906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e908:	701a      	strb	r2, [r3, #0]

	pPACall->nTypePACall	=	CtrlCall;
 802e90a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e90c:	2202      	movs	r2, #2
 802e90e:	705a      	strb	r2, [r3, #1]
	//========================================================================
	//	Send RF

#if defined(USE_CH_ISO_DEV)

	if ( GetChPARFT() != 0 )
 802e910:	f004 f89a 	bl	8032a48 <GetChPARFT>
 802e914:	4603      	mov	r3, r0
 802e916:	2b00      	cmp	r3, #0
 802e918:	d008      	beq.n	802e92c <SendCall+0x60>
	{
		//	송신기에 직접 전송.
		SendPktCh( GetChPARFT(), (uint8_t *)&stPkt,
 802e91a:	f004 f895 	bl	8032a48 <GetChPARFT>
 802e91e:	f107 030c 	add.w	r3, r7, #12
 802e922:	2208      	movs	r2, #8
 802e924:	4619      	mov	r1, r3
 802e926:	f7ff fb99 	bl	802e05c <SendPktCh>
	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );

#endif

	//========================================================================
}
 802e92a:	e007      	b.n	802e93c <SendCall+0x70>
		SendPktCh( GetChPA(),	//GetChOtherRFT(),
 802e92c:	f004 f844 	bl	80329b8 <GetChPA>
 802e930:	f107 030c 	add.w	r3, r7, #12
 802e934:	2208      	movs	r2, #8
 802e936:	4619      	mov	r1, r3
 802e938:	f7ff fb90 	bl	802e05c <SendPktCh>
}
 802e93c:	bf00      	nop
 802e93e:	3750      	adds	r7, #80	; 0x50
 802e940:	46bd      	mov	sp, r7
 802e942:	bd80      	pop	{r7, pc}
 802e944:	08041338 	.word	0x08041338
 802e948:	080394e0 	.word	0x080394e0

0802e94c <SendLight>:


//========================================================================
void SendLight( int nOnOff )
//========================================================================
{
 802e94c:	b580      	push	{r7, lr}
 802e94e:	b094      	sub	sp, #80	; 0x50
 802e950:	af00      	add	r7, sp, #0
 802e952:	6078      	str	r0, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802e954:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 802e958:	4912      	ldr	r1, [pc, #72]	; (802e9a4 <SendLight+0x58>)
 802e95a:	4813      	ldr	r0, [pc, #76]	; (802e9a8 <SendLight+0x5c>)
 802e95c:	f008 fda0 	bl	80374a0 <iprintf>

	RFMPkt			stPkt;
	RFMPktLight		*pLight;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e960:	f107 030c 	add.w	r3, r7, #12
 802e964:	2240      	movs	r2, #64	; 0x40
 802e966:	2100      	movs	r1, #0
 802e968:	4618      	mov	r0, r3
 802e96a:	f008 fffb 	bl	8037964 <memset>
	pLight = (RFMPktLight *)&stPkt.dat.light;
 802e96e:	f107 030c 	add.w	r3, r7, #12
 802e972:	3304      	adds	r3, #4
 802e974:	64fb      	str	r3, [r7, #76]	; 0x4c

	//========================================================================
	//	Packet Header
#if defined(USE_CH_ISO_DEV)

	_MakePktHdr2( &stPkt, PktLight );
 802e976:	f107 030c 	add.w	r3, r7, #12
 802e97a:	2104      	movs	r1, #4
 802e97c:	4618      	mov	r0, r3
 802e97e:	f7ff fd61 	bl	802e444 <_MakePktHdr2>

#endif

	//========================================================================
	//	Status Data
	pLight->nOnOff = nOnOff;
 802e982:	687b      	ldr	r3, [r7, #4]
 802e984:	b2da      	uxtb	r2, r3
 802e986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e988:	701a      	strb	r2, [r3, #0]

	//========================================================================
	//	Send RF
#if defined(USE_CH_ISO_DEV)

	SendPktCh( GetChPA(), (uint8_t *)&stPkt,
 802e98a:	f004 f815 	bl	80329b8 <GetChPA>
 802e98e:	f107 030c 	add.w	r3, r7, #12
 802e992:	2208      	movs	r2, #8
 802e994:	4619      	mov	r1, r3
 802e996:	f7ff fb61 	bl	802e05c <SendPktCh>
	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktLight ) );

#endif

	//========================================================================
}
 802e99a:	bf00      	nop
 802e99c:	3750      	adds	r7, #80	; 0x50
 802e99e:	46bd      	mov	sp, r7
 802e9a0:	bd80      	pop	{r7, pc}
 802e9a2:	bf00      	nop
 802e9a4:	08041344 	.word	0x08041344
 802e9a8:	080394e0 	.word	0x080394e0

0802e9ac <SendLightOn>:

//==========================================================================
void SendLightOn( void )
//==========================================================================
{
 802e9ac:	b580      	push	{r7, lr}
 802e9ae:	af00      	add	r7, sp, #0
	SendLight( 1 );		//	Light On
 802e9b0:	2001      	movs	r0, #1
 802e9b2:	f7ff ffcb 	bl	802e94c <SendLight>
}
 802e9b6:	bf00      	nop
 802e9b8:	bd80      	pop	{r7, pc}

0802e9ba <SendLightOff>:

//==========================================================================
void SendLightOff( void )
//==========================================================================
{
 802e9ba:	b580      	push	{r7, lr}
 802e9bc:	af00      	add	r7, sp, #0
	SendLight( 0 );		//	Light Off
 802e9be:	2000      	movs	r0, #0
 802e9c0:	f7ff ffc4 	bl	802e94c <SendLight>
}
 802e9c4:	bf00      	nop
 802e9c6:	bd80      	pop	{r7, pc}

0802e9c8 <SendRFCmdCh>:

//==========================================================================
void SendRFCmdCh( int nCh, char *sCmd, int nRSSI )
//==========================================================================
{
 802e9c8:	b580      	push	{r7, lr}
 802e9ca:	b094      	sub	sp, #80	; 0x50
 802e9cc:	af00      	add	r7, sp, #0
 802e9ce:	60f8      	str	r0, [r7, #12]
 802e9d0:	60b9      	str	r1, [r7, #8]
 802e9d2:	607a      	str	r2, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802e9d4:	f240 2226 	movw	r2, #550	; 0x226
 802e9d8:	490a      	ldr	r1, [pc, #40]	; (802ea04 <SendRFCmdCh+0x3c>)
 802e9da:	480b      	ldr	r0, [pc, #44]	; (802ea08 <SendRFCmdCh+0x40>)
 802e9dc:	f008 fd60 	bl	80374a0 <iprintf>
	//========================================================================
	RFMPkt			stPkt;
	_MakeRFCmd( &stPkt, sCmd, nRSSI );
 802e9e0:	f107 0310 	add.w	r3, r7, #16
 802e9e4:	687a      	ldr	r2, [r7, #4]
 802e9e6:	68b9      	ldr	r1, [r7, #8]
 802e9e8:	4618      	mov	r0, r3
 802e9ea:	f7ff fd7d 	bl	802e4e8 <_MakeRFCmd>

	//========================================================================
	//	Send RF
	SendPktCh( nCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
 802e9ee:	f107 0310 	add.w	r3, r7, #16
 802e9f2:	2240      	movs	r2, #64	; 0x40
 802e9f4:	4619      	mov	r1, r3
 802e9f6:	68f8      	ldr	r0, [r7, #12]
 802e9f8:	f7ff fb30 	bl	802e05c <SendPktCh>
	//========================================================================
}
 802e9fc:	bf00      	nop
 802e9fe:	3750      	adds	r7, #80	; 0x50
 802ea00:	46bd      	mov	sp, r7
 802ea02:	bd80      	pop	{r7, pc}
 802ea04:	08041350 	.word	0x08041350
 802ea08:	080394e0 	.word	0x080394e0

0802ea0c <SendRFCmd>:

//==========================================================================
void SendRFCmd( char *sCmd, int nRSSI )
//==========================================================================
{
 802ea0c:	b580      	push	{r7, lr}
 802ea0e:	b094      	sub	sp, #80	; 0x50
 802ea10:	af00      	add	r7, sp, #0
 802ea12:	6078      	str	r0, [r7, #4]
 802ea14:	6039      	str	r1, [r7, #0]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802ea16:	f240 2235 	movw	r2, #565	; 0x235
 802ea1a:	4911      	ldr	r1, [pc, #68]	; (802ea60 <SendRFCmd+0x54>)
 802ea1c:	4811      	ldr	r0, [pc, #68]	; (802ea64 <SendRFCmd+0x58>)
 802ea1e:	f008 fd3f 	bl	80374a0 <iprintf>
	//========================================================================
	RFMPkt			stPkt;
	_MakeRFCmd( &stPkt, sCmd, nRSSI );
 802ea22:	f107 030c 	add.w	r3, r7, #12
 802ea26:	683a      	ldr	r2, [r7, #0]
 802ea28:	6879      	ldr	r1, [r7, #4]
 802ea2a:	4618      	mov	r0, r3
 802ea2c:	f7ff fd5c 	bl	802e4e8 <_MakeRFCmd>
//	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );

	//========================================================================
	//	모든 수신기로 전송.
//	for ( int nCh = ChTS_base; nCh < ChTS1_1 + (ChGap * 10); nCh++ )
	for ( int nCh = ChTS_base; nCh < ChMax; nCh++ )
 802ea30:	230b      	movs	r3, #11
 802ea32:	64fb      	str	r3, [r7, #76]	; 0x4c
 802ea34:	e00c      	b.n	802ea50 <SendRFCmd+0x44>
	{
		SendPktCh( nCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
 802ea36:	f107 030c 	add.w	r3, r7, #12
 802ea3a:	2240      	movs	r2, #64	; 0x40
 802ea3c:	4619      	mov	r1, r3
 802ea3e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802ea40:	f7ff fb0c 	bl	802e05c <SendPktCh>

		HAL_Delay(3);	//	Tx Delay
 802ea44:	2003      	movs	r0, #3
 802ea46:	f7f3 f89b 	bl	8021b80 <HAL_Delay>
	for ( int nCh = ChTS_base; nCh < ChMax; nCh++ )
 802ea4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ea4c:	3301      	adds	r3, #1
 802ea4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 802ea50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ea52:	2b3f      	cmp	r3, #63	; 0x3f
 802ea54:	ddef      	ble.n	802ea36 <SendRFCmd+0x2a>
	}
	//========================================================================
}
 802ea56:	bf00      	nop
 802ea58:	bf00      	nop
 802ea5a:	3750      	adds	r7, #80	; 0x50
 802ea5c:	46bd      	mov	sp, r7
 802ea5e:	bd80      	pop	{r7, pc}
 802ea60:	0804135c 	.word	0x0804135c
 802ea64:	080394e0 	.word	0x080394e0

0802ea68 <SendRFCmdReset>:

//==========================================================================
void SendRFCmdReset( void )
//==========================================================================
{
 802ea68:	b580      	push	{r7, lr}
 802ea6a:	b090      	sub	sp, #64	; 0x40
 802ea6c:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 802ea6e:	f240 224e 	movw	r2, #590	; 0x24e
 802ea72:	490c      	ldr	r1, [pc, #48]	; (802eaa4 <SendRFCmdReset+0x3c>)
 802ea74:	480c      	ldr	r0, [pc, #48]	; (802eaa8 <SendRFCmdReset+0x40>)
 802ea76:	f008 fd13 	bl	80374a0 <iprintf>

	SendRFCmd( "reset", 190 );
 802ea7a:	21be      	movs	r1, #190	; 0xbe
 802ea7c:	480b      	ldr	r0, [pc, #44]	; (802eaac <SendRFCmdReset+0x44>)
 802ea7e:	f7ff ffc5 	bl	802ea0c <SendRFCmd>

	//========================================================================
	//	Reset시 Upgrade채널도 reset
	RFMPkt			stPkt;
	_MakeRFCmd( &stPkt, "reset", 190 );
 802ea82:	463b      	mov	r3, r7
 802ea84:	22be      	movs	r2, #190	; 0xbe
 802ea86:	4909      	ldr	r1, [pc, #36]	; (802eaac <SendRFCmdReset+0x44>)
 802ea88:	4618      	mov	r0, r3
 802ea8a:	f7ff fd2d 	bl	802e4e8 <_MakeRFCmd>
	SendPktCh( ChUpgrDst, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
 802ea8e:	463b      	mov	r3, r7
 802ea90:	2240      	movs	r2, #64	; 0x40
 802ea92:	4619      	mov	r1, r3
 802ea94:	2003      	movs	r0, #3
 802ea96:	f7ff fae1 	bl	802e05c <SendPktCh>
	//========================================================================
}
 802ea9a:	bf00      	nop
 802ea9c:	3740      	adds	r7, #64	; 0x40
 802ea9e:	46bd      	mov	sp, r7
 802eaa0:	bd80      	pop	{r7, pc}
 802eaa2:	bf00      	nop
 802eaa4:	08041368 	.word	0x08041368
 802eaa8:	080394e0 	.word	0x080394e0
 802eaac:	080394e8 	.word	0x080394e8

0802eab0 <SendRFCmdCar>:

//==========================================================================
void SendRFCmdCar( int nCar )
//==========================================================================
{
 802eab0:	b580      	push	{r7, lr}
 802eab2:	b09c      	sub	sp, #112	; 0x70
 802eab4:	af00      	add	r7, sp, #0
 802eab6:	6078      	str	r0, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802eab8:	f240 225e 	movw	r2, #606	; 0x25e
 802eabc:	490a      	ldr	r1, [pc, #40]	; (802eae8 <SendRFCmdCar+0x38>)
 802eabe:	480b      	ldr	r0, [pc, #44]	; (802eaec <SendRFCmdCar+0x3c>)
 802eac0:	f008 fcee 	bl	80374a0 <iprintf>

	char sBuf[100];
	sprintf(sBuf, "car %d", nCar );
 802eac4:	f107 030c 	add.w	r3, r7, #12
 802eac8:	687a      	ldr	r2, [r7, #4]
 802eaca:	4909      	ldr	r1, [pc, #36]	; (802eaf0 <SendRFCmdCar+0x40>)
 802eacc:	4618      	mov	r0, r3
 802eace:	f008 fe13 	bl	80376f8 <siprintf>

	SendRFCmd( sBuf, 190 );
 802ead2:	f107 030c 	add.w	r3, r7, #12
 802ead6:	21be      	movs	r1, #190	; 0xbe
 802ead8:	4618      	mov	r0, r3
 802eada:	f7ff ff97 	bl	802ea0c <SendRFCmd>
}
 802eade:	bf00      	nop
 802eae0:	3770      	adds	r7, #112	; 0x70
 802eae2:	46bd      	mov	sp, r7
 802eae4:	bd80      	pop	{r7, pc}
 802eae6:	bf00      	nop
 802eae8:	08041378 	.word	0x08041378
 802eaec:	080394e0 	.word	0x080394e0
 802eaf0:	080394f0 	.word	0x080394f0

0802eaf4 <SendRFCmdTS>:

//==========================================================================
void SendRFCmdTS( int nIdx )
//==========================================================================
{
 802eaf4:	b580      	push	{r7, lr}
 802eaf6:	b09c      	sub	sp, #112	; 0x70
 802eaf8:	af00      	add	r7, sp, #0
 802eafa:	6078      	str	r0, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802eafc:	f240 226a 	movw	r2, #618	; 0x26a
 802eb00:	490a      	ldr	r1, [pc, #40]	; (802eb2c <SendRFCmdTS+0x38>)
 802eb02:	480b      	ldr	r0, [pc, #44]	; (802eb30 <SendRFCmdTS+0x3c>)
 802eb04:	f008 fccc 	bl	80374a0 <iprintf>

	char sBuf[100];
	sprintf(sBuf, "ts %d", nIdx );
 802eb08:	f107 030c 	add.w	r3, r7, #12
 802eb0c:	687a      	ldr	r2, [r7, #4]
 802eb0e:	4909      	ldr	r1, [pc, #36]	; (802eb34 <SendRFCmdTS+0x40>)
 802eb10:	4618      	mov	r0, r3
 802eb12:	f008 fdf1 	bl	80376f8 <siprintf>

	SendRFCmd( sBuf, 190 );
 802eb16:	f107 030c 	add.w	r3, r7, #12
 802eb1a:	21be      	movs	r1, #190	; 0xbe
 802eb1c:	4618      	mov	r0, r3
 802eb1e:	f7ff ff75 	bl	802ea0c <SendRFCmd>
}
 802eb22:	bf00      	nop
 802eb24:	3770      	adds	r7, #112	; 0x70
 802eb26:	46bd      	mov	sp, r7
 802eb28:	bd80      	pop	{r7, pc}
 802eb2a:	bf00      	nop
 802eb2c:	08041388 	.word	0x08041388
 802eb30:	080394e0 	.word	0x080394e0
 802eb34:	080394f8 	.word	0x080394f8

0802eb38 <SendRFCmdRFMode>:

//==========================================================================
void SendRFCmdRFMode( int nMode )
//==========================================================================
{
 802eb38:	b580      	push	{r7, lr}
 802eb3a:	b09c      	sub	sp, #112	; 0x70
 802eb3c:	af00      	add	r7, sp, #0
 802eb3e:	6078      	str	r0, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802eb40:	f240 2276 	movw	r2, #630	; 0x276
 802eb44:	490a      	ldr	r1, [pc, #40]	; (802eb70 <SendRFCmdRFMode+0x38>)
 802eb46:	480b      	ldr	r0, [pc, #44]	; (802eb74 <SendRFCmdRFMode+0x3c>)
 802eb48:	f008 fcaa 	bl	80374a0 <iprintf>

	char sBuf[100];
	sprintf(sBuf, "rfmod %d", nMode );
 802eb4c:	f107 030c 	add.w	r3, r7, #12
 802eb50:	687a      	ldr	r2, [r7, #4]
 802eb52:	4909      	ldr	r1, [pc, #36]	; (802eb78 <SendRFCmdRFMode+0x40>)
 802eb54:	4618      	mov	r0, r3
 802eb56:	f008 fdcf 	bl	80376f8 <siprintf>

	SendRFCmd( sBuf, 190 );
 802eb5a:	f107 030c 	add.w	r3, r7, #12
 802eb5e:	21be      	movs	r1, #190	; 0xbe
 802eb60:	4618      	mov	r0, r3
 802eb62:	f7ff ff53 	bl	802ea0c <SendRFCmd>
}
 802eb66:	bf00      	nop
 802eb68:	3770      	adds	r7, #112	; 0x70
 802eb6a:	46bd      	mov	sp, r7
 802eb6c:	bd80      	pop	{r7, pc}
 802eb6e:	bf00      	nop
 802eb70:	08041394 	.word	0x08041394
 802eb74:	080394e0 	.word	0x080394e0
 802eb78:	08039500 	.word	0x08039500

0802eb7c <SendRFCmdUpgrade>:
}

//==========================================================================
void SendRFCmdUpgrade( int bRetry )
//==========================================================================
{
 802eb7c:	b580      	push	{r7, lr}
 802eb7e:	b082      	sub	sp, #8
 802eb80:	af00      	add	r7, sp, #0
 802eb82:	6078      	str	r0, [r7, #4]
	//==========================================================================
	//	송신기에서 Upgrade 명령 전송.
	//==========================================================================

	printf( "%s(%d)\n", __func__, __LINE__ );
 802eb84:	f44f 7224 	mov.w	r2, #656	; 0x290
 802eb88:	490e      	ldr	r1, [pc, #56]	; (802ebc4 <SendRFCmdUpgrade+0x48>)
 802eb8a:	480f      	ldr	r0, [pc, #60]	; (802ebc8 <SendRFCmdUpgrade+0x4c>)
 802eb8c:	f008 fc88 	bl	80374a0 <iprintf>
	//==========================================================================
	//	Upgrade Start Command

	if ( bRetry )
 802eb90:	687b      	ldr	r3, [r7, #4]
 802eb92:	2b00      	cmp	r3, #0
 802eb94:	d005      	beq.n	802eba2 <SendRFCmdUpgrade+0x26>
	{
		//	Upgrade 채널로 전송
		//	Upgrade Mode로 변경.
		SendRFCmdCh( ChUpgrDst, "upgrade 1", 200 );	//	DFU모드의 경우 근접(RSSI-200)하지 않으면 동작하지 않도록 한다!!!
 802eb96:	22c8      	movs	r2, #200	; 0xc8
 802eb98:	490c      	ldr	r1, [pc, #48]	; (802ebcc <SendRFCmdUpgrade+0x50>)
 802eb9a:	2003      	movs	r0, #3
 802eb9c:	f7ff ff14 	bl	802e9c8 <SendRFCmdCh>
 802eba0:	e003      	b.n	802ebaa <SendRFCmdUpgrade+0x2e>
	}
	else
	{
		//	Upgrade Mode로 변경.
		SendRFCmd( "upgrade 1", 200 );	//	DFU모드의 경우 근접(RSSI-200)하지 않으면 동작하지 않도록 한다!!!
 802eba2:	21c8      	movs	r1, #200	; 0xc8
 802eba4:	4809      	ldr	r0, [pc, #36]	; (802ebcc <SendRFCmdUpgrade+0x50>)
 802eba6:	f7ff ff31 	bl	802ea0c <SendRFCmd>
	}
	//==========================================================================

	SetUpgrReTry( bRetry );			//	Retry 설정.
 802ebaa:	6878      	ldr	r0, [r7, #4]
 802ebac:	f005 ff6c 	bl	8034a88 <SetUpgrReTry>

	HAL_Delay( 500 );	//	sleep 200 msec
 802ebb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 802ebb4:	f7f2 ffe4 	bl	8021b80 <HAL_Delay>

	//========================================================================
	//	Upgrade Image 전송.
	UpgrSendImageApp();
 802ebb8:	f006 f860 	bl	8034c7c <UpgrSendImageApp>

	//==========================================================================
	//	Upgrade End Command
//DEL	SendRFCmd( "upgrade 0", 200 );	//	DFU모드의 경우 근접(RSSI-200)하지 않으면 동작하지 않도록 한다!!!
	//==========================================================================
}
 802ebbc:	bf00      	nop
 802ebbe:	3708      	adds	r7, #8
 802ebc0:	46bd      	mov	sp, r7
 802ebc2:	bd80      	pop	{r7, pc}
 802ebc4:	080413a4 	.word	0x080413a4
 802ebc8:	080394e0 	.word	0x080394e0
 802ebcc:	08039514 	.word	0x08039514

0802ebd0 <SendUpgrData>:

//==========================================================================
void	SendUpgrData		( uint32_t nAddrTarget, int nPktTot, int nPktIdx, uint8_t *sBuf, int nSize )	//	Send Upgrade Data
//==========================================================================
{
 802ebd0:	b580      	push	{r7, lr}
 802ebd2:	b098      	sub	sp, #96	; 0x60
 802ebd4:	af02      	add	r7, sp, #8
 802ebd6:	60f8      	str	r0, [r7, #12]
 802ebd8:	60b9      	str	r1, [r7, #8]
 802ebda:	607a      	str	r2, [r7, #4]
 802ebdc:	603b      	str	r3, [r7, #0]
//	printf( "%s(%d)\n", __func__, __LINE__ );

	RFMPkt			stPkt;
	memset( &stPkt, 0, sizeof( stPkt ) );
 802ebde:	f107 0314 	add.w	r3, r7, #20
 802ebe2:	2240      	movs	r2, #64	; 0x40
 802ebe4:	2100      	movs	r1, #0
 802ebe6:	4618      	mov	r0, r3
 802ebe8:	f008 febc 	bl	8037964 <memset>

	//========================================================================
	//	Packet Header
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, RFPktDataLen, PktUpgr );
 802ebec:	f003 fd60 	bl	80326b0 <GetDevID>
 802ebf0:	4601      	mov	r1, r0
 802ebf2:	f107 0014 	add.w	r0, r7, #20
 802ebf6:	2340      	movs	r3, #64	; 0x40
 802ebf8:	9300      	str	r3, [sp, #0]
 802ebfa:	233c      	movs	r3, #60	; 0x3c
 802ebfc:	22ff      	movs	r2, #255	; 0xff
 802ebfe:	f7ff fb9f 	bl	802e340 <_MakePktHdr>

	//========================================================================
	//	Packet Body
	RFMPktUpgr	*pUpgr = (RFMPktUpgr *)&stPkt.dat.upgr;
 802ec02:	f107 0314 	add.w	r3, r7, #20
 802ec06:	3304      	adds	r3, #4
 802ec08:	657b      	str	r3, [r7, #84]	; 0x54

	pUpgr->baseAddr		=	nAddrTarget;
 802ec0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec0c:	68fa      	ldr	r2, [r7, #12]
 802ec0e:	601a      	str	r2, [r3, #0]
	pUpgr->totPkt		=	nPktTot;
 802ec10:	68bb      	ldr	r3, [r7, #8]
 802ec12:	b29a      	uxth	r2, r3
 802ec14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec16:	809a      	strh	r2, [r3, #4]
	pUpgr->idxPkt		=	nPktIdx;
 802ec18:	687b      	ldr	r3, [r7, #4]
 802ec1a:	b29a      	uxth	r2, r3
 802ec1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec1e:	80da      	strh	r2, [r3, #6]
	pUpgr->nSize		=	nSize;
 802ec20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802ec22:	b2da      	uxtb	r2, r3
 802ec24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec26:	721a      	strb	r2, [r3, #8]

	if( GetUpgrReTry() ) pUpgr->bFlag	|=	PktUpgrFlagRetry;	//	Retry Flag
 802ec28:	f005 ff3e 	bl	8034aa8 <GetUpgrReTry>
 802ec2c:	4603      	mov	r3, r0
 802ec2e:	2b00      	cmp	r3, #0
 802ec30:	d006      	beq.n	802ec40 <SendUpgrData+0x70>
 802ec32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec34:	7a5b      	ldrb	r3, [r3, #9]
 802ec36:	f043 0301 	orr.w	r3, r3, #1
 802ec3a:	b2da      	uxtb	r2, r3
 802ec3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec3e:	725a      	strb	r2, [r3, #9]

	memcpy( pUpgr->data, sBuf, nSize );
 802ec40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec42:	330a      	adds	r3, #10
 802ec44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802ec46:	6839      	ldr	r1, [r7, #0]
 802ec48:	4618      	mov	r0, r3
 802ec4a:	f008 ff99 	bl	8037b80 <memcpy>

	//========================================================================
	//	Send RF
	SendPktCh( ChUpgrDst, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
 802ec4e:	f107 0314 	add.w	r3, r7, #20
 802ec52:	2240      	movs	r2, #64	; 0x40
 802ec54:	4619      	mov	r1, r3
 802ec56:	2003      	movs	r0, #3
 802ec58:	f7ff fa00 	bl	802e05c <SendPktCh>

	//========================================================================
}
 802ec5c:	bf00      	nop
 802ec5e:	3758      	adds	r7, #88	; 0x58
 802ec60:	46bd      	mov	sp, r7
 802ec62:	bd80      	pop	{r7, pc}

0802ec64 <SendUpgrStat>:

//==========================================================================
void	SendUpgrStat		( int nUpgrResult )	//	Send Upgrade Data
//==========================================================================
{
 802ec64:	b580      	push	{r7, lr}
 802ec66:	b096      	sub	sp, #88	; 0x58
 802ec68:	af02      	add	r7, sp, #8
 802ec6a:	6078      	str	r0, [r7, #4]
	printf( "%s(%d) - %d\n", __func__, __LINE__, nUpgrResult );
 802ec6c:	687b      	ldr	r3, [r7, #4]
 802ec6e:	f240 22d5 	movw	r2, #725	; 0x2d5
 802ec72:	491f      	ldr	r1, [pc, #124]	; (802ecf0 <SendUpgrStat+0x8c>)
 802ec74:	481f      	ldr	r0, [pc, #124]	; (802ecf4 <SendUpgrStat+0x90>)
 802ec76:	f008 fc13 	bl	80374a0 <iprintf>

	RFMPkt			stPkt;
	memset( &stPkt, 0, sizeof( stPkt ) );
 802ec7a:	f107 030c 	add.w	r3, r7, #12
 802ec7e:	2240      	movs	r2, #64	; 0x40
 802ec80:	2100      	movs	r1, #0
 802ec82:	4618      	mov	r0, r3
 802ec84:	f008 fe6e 	bl	8037964 <memset>

	//========================================================================
	//	Packet Header
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, RFPktDataLen, PktUpgrStat );
 802ec88:	f003 fd12 	bl	80326b0 <GetDevID>
 802ec8c:	4601      	mov	r1, r0
 802ec8e:	f107 000c 	add.w	r0, r7, #12
 802ec92:	2341      	movs	r3, #65	; 0x41
 802ec94:	9300      	str	r3, [sp, #0]
 802ec96:	233c      	movs	r3, #60	; 0x3c
 802ec98:	22ff      	movs	r2, #255	; 0xff
 802ec9a:	f7ff fb51 	bl	802e340 <_MakePktHdr>

	//========================================================================
	//	Packet Body
	RFMPktUpgrStat	*pUpgrStat = (RFMPktUpgrStat *)&stPkt.dat.upgrStat;
 802ec9e:	f107 030c 	add.w	r3, r7, #12
 802eca2:	3304      	adds	r3, #4
 802eca4:	64fb      	str	r3, [r7, #76]	; 0x4c

	pUpgrStat->nResult		=	nUpgrResult;
 802eca6:	687b      	ldr	r3, [r7, #4]
 802eca8:	b2da      	uxtb	r2, r3
 802ecaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ecac:	701a      	strb	r2, [r3, #0]
	pUpgrStat->nTrainSet	=	g_idxTrainSet;
 802ecae:	4b12      	ldr	r3, [pc, #72]	; (802ecf8 <SendUpgrStat+0x94>)
 802ecb0:	681b      	ldr	r3, [r3, #0]
 802ecb2:	b2da      	uxtb	r2, r3
 802ecb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ecb6:	711a      	strb	r2, [r3, #4]
	pUpgrStat->nCarNo 		=	g_nCarNo;
 802ecb8:	4b10      	ldr	r3, [pc, #64]	; (802ecfc <SendUpgrStat+0x98>)
 802ecba:	681b      	ldr	r3, [r3, #0]
 802ecbc:	b2da      	uxtb	r2, r3
 802ecbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ecc0:	715a      	strb	r2, [r3, #5]
	//========================================================================
	//	Send RF
#if defined( USE_CH_ISO_DEV )

	//	송신기#1
	SendPktCh( ChTx_1, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
 802ecc2:	4b0f      	ldr	r3, [pc, #60]	; (802ed00 <SendUpgrStat+0x9c>)
 802ecc4:	681b      	ldr	r3, [r3, #0]
 802ecc6:	f107 010c 	add.w	r1, r7, #12
 802ecca:	2240      	movs	r2, #64	; 0x40
 802eccc:	4618      	mov	r0, r3
 802ecce:	f7ff f9c5 	bl	802e05c <SendPktCh>

	HAL_Delay(3);	//	재전송 전 Delay
 802ecd2:	2003      	movs	r0, #3
 802ecd4:	f7f2 ff54 	bl	8021b80 <HAL_Delay>

	//	송신기#2
	SendPktCh( ChTx_2, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
 802ecd8:	4b0a      	ldr	r3, [pc, #40]	; (802ed04 <SendUpgrStat+0xa0>)
 802ecda:	681b      	ldr	r3, [r3, #0]
 802ecdc:	f107 010c 	add.w	r1, r7, #12
 802ece0:	2240      	movs	r2, #64	; 0x40
 802ece2:	4618      	mov	r0, r3
 802ece4:	f7ff f9ba 	bl	802e05c <SendPktCh>
	nCh = ChTS1_1 + g_idxTrainSet * 2 + ((g_nCarNo+1) % 2);	// 현재 호차 채널
	SendPktCh( nCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
#endif

	//========================================================================
}
 802ece8:	bf00      	nop
 802ecea:	3750      	adds	r7, #80	; 0x50
 802ecec:	46bd      	mov	sp, r7
 802ecee:	bd80      	pop	{r7, pc}
 802ecf0:	080413b8 	.word	0x080413b8
 802ecf4:	08039520 	.word	0x08039520
 802ecf8:	2000232c 	.word	0x2000232c
 802ecfc:	20002330 	.word	0x20002330
 802ed00:	200004f4 	.word	0x200004f4
 802ed04:	200004f8 	.word	0x200004f8

0802ed08 <ProcPktStatReq>:


//========================================================================
int	ProcPktStatReq		( const RFMPkt *pRFPkt )
//========================================================================
{
 802ed08:	b580      	push	{r7, lr}
 802ed0a:	b084      	sub	sp, #16
 802ed0c:	af00      	add	r7, sp, #0
 802ed0e:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802ed10:	f002 f8f6 	bl	8030f00 <GetDbg>
 802ed14:	4603      	mov	r3, r0
 802ed16:	2b00      	cmp	r3, #0
 802ed18:	d005      	beq.n	802ed26 <ProcPktStatReq+0x1e>
 802ed1a:	f240 3209 	movw	r2, #777	; 0x309
 802ed1e:	4929      	ldr	r1, [pc, #164]	; (802edc4 <ProcPktStatReq+0xbc>)
 802ed20:	4829      	ldr	r0, [pc, #164]	; (802edc8 <ProcPktStatReq+0xc0>)
 802ed22:	f008 fbbd 	bl	80374a0 <iprintf>

	const RFMPktStatReq *pStatReq = &pRFPkt->dat.statReq;
 802ed26:	687b      	ldr	r3, [r7, #4]
 802ed28:	3304      	adds	r3, #4
 802ed2a:	60fb      	str	r3, [r7, #12]

	//	수신기의 경우 송신기 상태정보 갱신.
	//		-> 상태정보 요청한 송신기의 상태정보를 갱신한다.
	if ( GetDevID() == DevRF900M )
 802ed2c:	f003 fcc0 	bl	80326b0 <GetDevID>
 802ed30:	4603      	mov	r3, r0
 802ed32:	2b01      	cmp	r3, #1
 802ed34:	d13c      	bne.n	802edb0 <ProcPktStatReq+0xa8>
	{
		int idx = pStatReq->nCarNo;
 802ed36:	68fb      	ldr	r3, [r7, #12]
 802ed38:	795b      	ldrb	r3, [r3, #5]
 802ed3a:	60bb      	str	r3, [r7, #8]

		//========================================================================
		//	장치 응답 Flag 설정.
		SetStat( idx );		//	상태정보 설정.
 802ed3c:	68b8      	ldr	r0, [r7, #8]
 802ed3e:	f005 fa79 	bl	8034234 <SetStat>

		//========================================================================
		//	RSSI 갱신
		g_devStat[idx].stat.nChRx 	= pStatReq->nSrcCh;
 802ed42:	68fb      	ldr	r3, [r7, #12]
 802ed44:	7818      	ldrb	r0, [r3, #0]
 802ed46:	4921      	ldr	r1, [pc, #132]	; (802edcc <ProcPktStatReq+0xc4>)
 802ed48:	68ba      	ldr	r2, [r7, #8]
 802ed4a:	4613      	mov	r3, r2
 802ed4c:	00db      	lsls	r3, r3, #3
 802ed4e:	4413      	add	r3, r2
 802ed50:	009b      	lsls	r3, r3, #2
 802ed52:	4413      	add	r3, r2
 802ed54:	440b      	add	r3, r1
 802ed56:	330a      	adds	r3, #10
 802ed58:	4602      	mov	r2, r0
 802ed5a:	701a      	strb	r2, [r3, #0]
		g_devStat[idx].stampRx 		= HAL_GetTick();
 802ed5c:	f7f2 ff04 	bl	8021b68 <HAL_GetTick>
 802ed60:	4603      	mov	r3, r0
 802ed62:	4618      	mov	r0, r3
 802ed64:	4919      	ldr	r1, [pc, #100]	; (802edcc <ProcPktStatReq+0xc4>)
 802ed66:	68ba      	ldr	r2, [r7, #8]
 802ed68:	4613      	mov	r3, r2
 802ed6a:	00db      	lsls	r3, r3, #3
 802ed6c:	4413      	add	r3, r2
 802ed6e:	009b      	lsls	r3, r3, #2
 802ed70:	4413      	add	r3, r2
 802ed72:	440b      	add	r3, r1
 802ed74:	3318      	adds	r3, #24
 802ed76:	f8c3 0001 	str.w	r0, [r3, #1]
		g_devStat[idx].nRSSI 		= g_nRSSI;
 802ed7a:	4b15      	ldr	r3, [pc, #84]	; (802edd0 <ProcPktStatReq+0xc8>)
 802ed7c:	6819      	ldr	r1, [r3, #0]
 802ed7e:	4813      	ldr	r0, [pc, #76]	; (802edcc <ProcPktStatReq+0xc4>)
 802ed80:	68ba      	ldr	r2, [r7, #8]
 802ed82:	4613      	mov	r3, r2
 802ed84:	00db      	lsls	r3, r3, #3
 802ed86:	4413      	add	r3, r2
 802ed88:	009b      	lsls	r3, r3, #2
 802ed8a:	4413      	add	r3, r2
 802ed8c:	4403      	add	r3, r0
 802ed8e:	3318      	adds	r3, #24
 802ed90:	f8c3 1005 	str.w	r1, [r3, #5]
#if defined(USE_ROUTE_NEAREST_RFM)	//	수신기 -> 송신기 중계 연결. ( 가장가까운 수신기에서 송신기로 중계 )
		g_devStat[idx].nNearCh 		= pStatReq->nNearCh;	//	송신기 입장에서 가까운 수신기(RFM)채널.
 802ed94:	68fb      	ldr	r3, [r7, #12]
 802ed96:	7a1b      	ldrb	r3, [r3, #8]
 802ed98:	4618      	mov	r0, r3
 802ed9a:	490c      	ldr	r1, [pc, #48]	; (802edcc <ProcPktStatReq+0xc4>)
 802ed9c:	68ba      	ldr	r2, [r7, #8]
 802ed9e:	4613      	mov	r3, r2
 802eda0:	00db      	lsls	r3, r3, #3
 802eda2:	4413      	add	r3, r2
 802eda4:	009b      	lsls	r3, r3, #2
 802eda6:	4413      	add	r3, r2
 802eda8:	440b      	add	r3, r1
 802edaa:	3320      	adds	r3, #32
 802edac:	f8c3 0001 	str.w	r0, [r3, #1]
#endif	//	defined(USE_ROUTE_NEAREST_RFM)
	}

	//	Source Channel로 상태정보 송신.
	SendStat( pStatReq->nSrcCh );
 802edb0:	68fb      	ldr	r3, [r7, #12]
 802edb2:	781b      	ldrb	r3, [r3, #0]
 802edb4:	4618      	mov	r0, r3
 802edb6:	f7ff fc0f 	bl	802e5d8 <SendStat>
}
 802edba:	bf00      	nop
 802edbc:	4618      	mov	r0, r3
 802edbe:	3710      	adds	r7, #16
 802edc0:	46bd      	mov	sp, r7
 802edc2:	bd80      	pop	{r7, pc}
 802edc4:	080413c8 	.word	0x080413c8
 802edc8:	080394e0 	.word	0x080394e0
 802edcc:	2000234c 	.word	0x2000234c
 802edd0:	20002340 	.word	0x20002340

0802edd4 <ProcPktStat>:


//========================================================================
int	ProcPktStat			( const RFMPkt *pRFPkt )
//========================================================================
{
 802edd4:	b580      	push	{r7, lr}
 802edd6:	b084      	sub	sp, #16
 802edd8:	af00      	add	r7, sp, #0
 802edda:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802eddc:	f002 f890 	bl	8030f00 <GetDbg>
 802ede0:	4603      	mov	r3, r0
 802ede2:	2b00      	cmp	r3, #0
 802ede4:	d005      	beq.n	802edf2 <ProcPktStat+0x1e>
 802ede6:	f240 322a 	movw	r2, #810	; 0x32a
 802edea:	4915      	ldr	r1, [pc, #84]	; (802ee40 <ProcPktStat+0x6c>)
 802edec:	4815      	ldr	r0, [pc, #84]	; (802ee44 <ProcPktStat+0x70>)
 802edee:	f008 fb57 	bl	80374a0 <iprintf>

	int nRspID = pRFPkt->dat.stat.nCarNo;
 802edf2:	687b      	ldr	r3, [r7, #4]
 802edf4:	7c5b      	ldrb	r3, [r3, #17]
 802edf6:	60fb      	str	r3, [r7, #12]
	const RFMPktStat *pStat = &pRFPkt->dat.stat;
 802edf8:	687b      	ldr	r3, [r7, #4]
 802edfa:	3304      	adds	r3, #4
 802edfc:	60bb      	str	r3, [r7, #8]
	//	상태정보 수신.
//		printf ( "[Stat] Car:%d\n", pRFPkt->dat.stat.nCarNo );

	if( nRspID < MaxCarNo	//	MaxCarNo(13)
 802edfe:	68fb      	ldr	r3, [r7, #12]
 802ee00:	2b0c      	cmp	r3, #12
 802ee02:	dc18      	bgt.n	802ee36 <ProcPktStat+0x62>
		&& ( pStat->nDevID == DevRF900M || pStat->nDevID == DevRF900T )
 802ee04:	68bb      	ldr	r3, [r7, #8]
 802ee06:	785b      	ldrb	r3, [r3, #1]
 802ee08:	2b01      	cmp	r3, #1
 802ee0a:	d003      	beq.n	802ee14 <ProcPktStat+0x40>
 802ee0c:	68bb      	ldr	r3, [r7, #8]
 802ee0e:	785b      	ldrb	r3, [r3, #1]
 802ee10:	2b02      	cmp	r3, #2
 802ee12:	d110      	bne.n	802ee36 <ProcPktStat+0x62>
		&& pStat->nMagicNum == 0xAA55
 802ee14:	68bb      	ldr	r3, [r7, #8]
 802ee16:	885b      	ldrh	r3, [r3, #2]
 802ee18:	b29b      	uxth	r3, r3
 802ee1a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 802ee1e:	4293      	cmp	r3, r2
 802ee20:	d109      	bne.n	802ee36 <ProcPktStat+0x62>
		&& g_bSetRspIDManual == 0		//	수동설정모드가 아닌경우.
 802ee22:	4b09      	ldr	r3, [pc, #36]	; (802ee48 <ProcPktStat+0x74>)
 802ee24:	681b      	ldr	r3, [r3, #0]
 802ee26:	2b00      	cmp	r3, #0
 802ee28:	d105      	bne.n	802ee36 <ProcPktStat+0x62>
		)
	{
		//	장치 응답 Flag 설정.
		SetStat( nRspID );		//	상태정보 설정.
 802ee2a:	68f8      	ldr	r0, [r7, #12]
 802ee2c:	f005 fa02 	bl	8034234 <SetStat>

		UpdateStat( pStat );	//	상태정보 Update. ( 버전정보 갱신 등 )
 802ee30:	68b8      	ldr	r0, [r7, #8]
 802ee32:	f005 f9a5 	bl	8034180 <UpdateStat>
			HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_RESET );
		}
	}
#endif
	//========================================================================
}
 802ee36:	bf00      	nop
 802ee38:	4618      	mov	r0, r3
 802ee3a:	3710      	adds	r7, #16
 802ee3c:	46bd      	mov	sp, r7
 802ee3e:	bd80      	pop	{r7, pc}
 802ee40:	080413d8 	.word	0x080413d8
 802ee44:	080394e0 	.word	0x080394e0
 802ee48:	20001390 	.word	0x20001390

0802ee4c <ProcPktRouteReq>:


//========================================================================
int	ProcPktRouteReq		( const RFMPkt *pRFPkt )
//========================================================================
{
 802ee4c:	b590      	push	{r4, r7, lr}
 802ee4e:	b085      	sub	sp, #20
 802ee50:	af00      	add	r7, sp, #0
 802ee52:	6078      	str	r0, [r7, #4]
	//	Source Channel로 Route 응답.
	const RFMPktRoute *pRouteReq = &pRFPkt->dat.routeReq;
 802ee54:	687b      	ldr	r3, [r7, #4]
 802ee56:	3304      	adds	r3, #4
 802ee58:	60fb      	str	r3, [r7, #12]

	if ( GetDbg() )		printf( "%s(%d) - %d\n", __func__, __LINE__, pRouteReq->nSrcCh );
 802ee5a:	f002 f851 	bl	8030f00 <GetDbg>
 802ee5e:	4603      	mov	r3, r0
 802ee60:	2b00      	cmp	r3, #0
 802ee62:	d007      	beq.n	802ee74 <ProcPktRouteReq+0x28>
 802ee64:	68fb      	ldr	r3, [r7, #12]
 802ee66:	781b      	ldrb	r3, [r3, #0]
 802ee68:	f44f 7257 	mov.w	r2, #860	; 0x35c
 802ee6c:	491a      	ldr	r1, [pc, #104]	; (802eed8 <ProcPktRouteReq+0x8c>)
 802ee6e:	481b      	ldr	r0, [pc, #108]	; (802eedc <ProcPktRouteReq+0x90>)
 802ee70:	f008 fb16 	bl	80374a0 <iprintf>

	if ( GetDevID() == DevRF900M )
 802ee74:	f003 fc1c 	bl	80326b0 <GetDevID>
 802ee78:	4603      	mov	r3, r0
 802ee7a:	2b01      	cmp	r3, #1
 802ee7c:	d121      	bne.n	802eec2 <ProcPktRouteReq+0x76>
	{
		//	수신기의 경우 Route경로 설정.
		int idx = pRouteReq->nCarNo;
 802ee7e:	68fb      	ldr	r3, [r7, #12]
 802ee80:	799b      	ldrb	r3, [r3, #6]
 802ee82:	60bb      	str	r3, [r7, #8]

		if( pRouteReq->nSrcDev == DevRF900M )
 802ee84:	68fb      	ldr	r3, [r7, #12]
 802ee86:	785b      	ldrb	r3, [r3, #1]
 802ee88:	2b01      	cmp	r3, #1
 802ee8a:	d11a      	bne.n	802eec2 <ProcPktRouteReq+0x76>
		{
			//	1. 인접한 송신기로 등록.

			//	2. 가까운 수신기에 Route정보 요청.

			if ( pRouteReq->nSrcCh < GetChRx() )
 802ee8c:	68fb      	ldr	r3, [r7, #12]
 802ee8e:	781b      	ldrb	r3, [r3, #0]
 802ee90:	461c      	mov	r4, r3
 802ee92:	f003 fcbf 	bl	8032814 <GetChRx>
 802ee96:	4603      	mov	r3, r0
 802ee98:	429c      	cmp	r4, r3
 802ee9a:	da05      	bge.n	802eea8 <ProcPktRouteReq+0x5c>
			{
				//	1 -> 2 ...
				SetChRFMDown( pRouteReq->nSrcCh );
 802ee9c:	68fb      	ldr	r3, [r7, #12]
 802ee9e:	781b      	ldrb	r3, [r3, #0]
 802eea0:	4618      	mov	r0, r3
 802eea2:	f003 fdf9 	bl	8032a98 <SetChRFMDown>
 802eea6:	e00c      	b.n	802eec2 <ProcPktRouteReq+0x76>
#else
				//	다음 수신기로 Route 요청.
				SendRouteReq( GetChRx() + ChGap );
#endif
			}
			else if ( pRouteReq->nSrcCh > GetChRx() )
 802eea8:	68fb      	ldr	r3, [r7, #12]
 802eeaa:	781b      	ldrb	r3, [r3, #0]
 802eeac:	461c      	mov	r4, r3
 802eeae:	f003 fcb1 	bl	8032814 <GetChRx>
 802eeb2:	4603      	mov	r3, r0
 802eeb4:	429c      	cmp	r4, r3
 802eeb6:	dd04      	ble.n	802eec2 <ProcPktRouteReq+0x76>
			{
				//	... 3 <- 4
				SetChRFMUp( pRouteReq->nSrcCh );
 802eeb8:	68fb      	ldr	r3, [r7, #12]
 802eeba:	781b      	ldrb	r3, [r3, #0]
 802eebc:	4618      	mov	r0, r3
 802eebe:	f003 fdcf 	bl	8032a60 <SetChRFMUp>
		//	Route 정보 갱신
	}

	//	Resp Delay
//	HAL_Delay( 3 );	//	Route 응답 Delay
	SendRouteRsp( pRouteReq->nSrcCh );
 802eec2:	68fb      	ldr	r3, [r7, #12]
 802eec4:	781b      	ldrb	r3, [r3, #0]
 802eec6:	4618      	mov	r0, r3
 802eec8:	f7ff fc74 	bl	802e7b4 <SendRouteRsp>
}
 802eecc:	bf00      	nop
 802eece:	4618      	mov	r0, r3
 802eed0:	3714      	adds	r7, #20
 802eed2:	46bd      	mov	sp, r7
 802eed4:	bd90      	pop	{r4, r7, pc}
 802eed6:	bf00      	nop
 802eed8:	080413e4 	.word	0x080413e4
 802eedc:	08039520 	.word	0x08039520

0802eee0 <ProcPktRouteRsp>:


//========================================================================
int	ProcPktRouteRsp		( const RFMPkt *pRFPkt )
//========================================================================
{
 802eee0:	b590      	push	{r4, r7, lr}
 802eee2:	b085      	sub	sp, #20
 802eee4:	af00      	add	r7, sp, #0
 802eee6:	6078      	str	r0, [r7, #4]
	const RFMPktRoute *pRouteRsp = &pRFPkt->dat.routeRsp;
 802eee8:	687b      	ldr	r3, [r7, #4]
 802eeea:	3304      	adds	r3, #4
 802eeec:	60fb      	str	r3, [r7, #12]

	g_nStampRouteRsp = HAL_GetTick();		//	응답 시간 저장.
 802eeee:	f7f2 fe3b 	bl	8021b68 <HAL_GetTick>
 802eef2:	4603      	mov	r3, r0
 802eef4:	461a      	mov	r2, r3
 802eef6:	4b1f      	ldr	r3, [pc, #124]	; (802ef74 <ProcPktRouteRsp+0x94>)
 802eef8:	601a      	str	r2, [r3, #0]
	g_nIdxRouteFindNext = 0;				//	Find Index 초기화.
 802eefa:	4b1f      	ldr	r3, [pc, #124]	; (802ef78 <ProcPktRouteRsp+0x98>)
 802eefc:	2200      	movs	r2, #0
 802eefe:	601a      	str	r2, [r3, #0]

	if ( GetDbg() )		printf( "%s(%d) - %d\n", __func__, __LINE__, pRouteRsp->nSrcCh );
 802ef00:	f001 fffe 	bl	8030f00 <GetDbg>
 802ef04:	4603      	mov	r3, r0
 802ef06:	2b00      	cmp	r3, #0
 802ef08:	d007      	beq.n	802ef1a <ProcPktRouteRsp+0x3a>
 802ef0a:	68fb      	ldr	r3, [r7, #12]
 802ef0c:	781b      	ldrb	r3, [r3, #0]
 802ef0e:	f240 32a6 	movw	r2, #934	; 0x3a6
 802ef12:	491a      	ldr	r1, [pc, #104]	; (802ef7c <ProcPktRouteRsp+0x9c>)
 802ef14:	481a      	ldr	r0, [pc, #104]	; (802ef80 <ProcPktRouteRsp+0xa0>)
 802ef16:	f008 fac3 	bl	80374a0 <iprintf>

	if ( GetDevID() == DevRF900M )
 802ef1a:	f003 fbc9 	bl	80326b0 <GetDevID>
 802ef1e:	4603      	mov	r3, r0
 802ef20:	2b01      	cmp	r3, #1
 802ef22:	d121      	bne.n	802ef68 <ProcPktRouteRsp+0x88>
	{
		//	수신기의 경우 Route경로 설정.
		int idx = pRouteRsp->nCarNo;
 802ef24:	68fb      	ldr	r3, [r7, #12]
 802ef26:	799b      	ldrb	r3, [r3, #6]
 802ef28:	60bb      	str	r3, [r7, #8]

		if( pRouteRsp->nSrcDev == DevRF900M )
 802ef2a:	68fb      	ldr	r3, [r7, #12]
 802ef2c:	785b      	ldrb	r3, [r3, #1]
 802ef2e:	2b01      	cmp	r3, #1
 802ef30:	d11a      	bne.n	802ef68 <ProcPktRouteRsp+0x88>
		{
			//	1. 인접한 송신기로 등록.

			//	2. 가까운 수신기에 Route정보 요청.

			if ( pRouteRsp->nSrcCh < GetChRx() )
 802ef32:	68fb      	ldr	r3, [r7, #12]
 802ef34:	781b      	ldrb	r3, [r3, #0]
 802ef36:	461c      	mov	r4, r3
 802ef38:	f003 fc6c 	bl	8032814 <GetChRx>
 802ef3c:	4603      	mov	r3, r0
 802ef3e:	429c      	cmp	r4, r3
 802ef40:	da05      	bge.n	802ef4e <ProcPktRouteRsp+0x6e>
			{
				//	1 -> 2 ...
				SetChRFMDown( pRouteRsp->nSrcCh );
 802ef42:	68fb      	ldr	r3, [r7, #12]
 802ef44:	781b      	ldrb	r3, [r3, #0]
 802ef46:	4618      	mov	r0, r3
 802ef48:	f003 fda6 	bl	8032a98 <SetChRFMDown>
 802ef4c:	e00c      	b.n	802ef68 <ProcPktRouteRsp+0x88>

				//	다음 수신기로 Route 요청.
			}
			else if ( pRouteRsp->nSrcCh > GetChRx() )
 802ef4e:	68fb      	ldr	r3, [r7, #12]
 802ef50:	781b      	ldrb	r3, [r3, #0]
 802ef52:	461c      	mov	r4, r3
 802ef54:	f003 fc5e 	bl	8032814 <GetChRx>
 802ef58:	4603      	mov	r3, r0
 802ef5a:	429c      	cmp	r4, r3
 802ef5c:	dd04      	ble.n	802ef68 <ProcPktRouteRsp+0x88>
			{
				//	... 3 <- 4
				SetChRFMUp( pRouteRsp->nSrcCh );
 802ef5e:	68fb      	ldr	r3, [r7, #12]
 802ef60:	781b      	ldrb	r3, [r3, #0]
 802ef62:	4618      	mov	r0, r3
 802ef64:	f003 fd7c 	bl	8032a60 <SetChRFMUp>
		}

		//========================================================================
		//	Route 정보 갱신
	}
}
 802ef68:	bf00      	nop
 802ef6a:	4618      	mov	r0, r3
 802ef6c:	3714      	adds	r7, #20
 802ef6e:	46bd      	mov	sp, r7
 802ef70:	bd90      	pop	{r4, r7, pc}
 802ef72:	bf00      	nop
 802ef74:	2000253c 	.word	0x2000253c
 802ef78:	20002540 	.word	0x20002540
 802ef7c:	080413f4 	.word	0x080413f4
 802ef80:	08039520 	.word	0x08039520

0802ef84 <ProcPktCtrlPaCall>:


//========================================================================
int	ProcPktCtrlPaCall	( const RFMPkt *pRFPkt )
//========================================================================
{
 802ef84:	b580      	push	{r7, lr}
 802ef86:	b084      	sub	sp, #16
 802ef88:	af00      	add	r7, sp, #0
 802ef8a:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802ef8c:	f001 ffb8 	bl	8030f00 <GetDbg>
 802ef90:	4603      	mov	r3, r0
 802ef92:	2b00      	cmp	r3, #0
 802ef94:	d005      	beq.n	802efa2 <ProcPktCtrlPaCall+0x1e>
 802ef96:	f240 32d5 	movw	r2, #981	; 0x3d5
 802ef9a:	492e      	ldr	r1, [pc, #184]	; (802f054 <ProcPktCtrlPaCall+0xd0>)
 802ef9c:	482e      	ldr	r0, [pc, #184]	; (802f058 <ProcPktCtrlPaCall+0xd4>)
 802ef9e:	f008 fa7f 	bl	80374a0 <iprintf>

	//	방송/통화 시작 종료 명령.
	const RFMPktCtrlPACall	*pCtrl = &pRFPkt->dat.pacall;
 802efa2:	687b      	ldr	r3, [r7, #4]
 802efa4:	3304      	adds	r3, #4
 802efa6:	60fb      	str	r3, [r7, #12]

	switch ( pCtrl->nStartStop )
 802efa8:	68fb      	ldr	r3, [r7, #12]
 802efaa:	781b      	ldrb	r3, [r3, #0]
 802efac:	2b00      	cmp	r3, #0
 802efae:	d008      	beq.n	802efc2 <ProcPktCtrlPaCall+0x3e>
 802efb0:	2b01      	cmp	r3, #1
 802efb2:	d113      	bne.n	802efdc <ProcPktCtrlPaCall+0x58>
	{
	case CtrlStart:
		printf("[Start]");
 802efb4:	4829      	ldr	r0, [pc, #164]	; (802f05c <ProcPktCtrlPaCall+0xd8>)
 802efb6:	f008 fa73 	bl	80374a0 <iprintf>
		SetRFMMode( RFMModeRx );
 802efba:	2002      	movs	r0, #2
 802efbc:	f003 fbb0 	bl	8032720 <SetRFMMode>
		break;
 802efc0:	e012      	b.n	802efe8 <ProcPktCtrlPaCall+0x64>
	case CtrlStop:
		printf("[Stop]");
 802efc2:	4827      	ldr	r0, [pc, #156]	; (802f060 <ProcPktCtrlPaCall+0xdc>)
 802efc4:	f008 fa6c 	bl	80374a0 <iprintf>
		SetRFMMode( RFMModeNormal );
 802efc8:	2000      	movs	r0, #0
 802efca:	f003 fba9 	bl	8032720 <SetRFMMode>
		//  송신기 & 수신기 Spk Relay Off
		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_RESET );
 802efce:	2200      	movs	r2, #0
 802efd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 802efd4:	4823      	ldr	r0, [pc, #140]	; (802f064 <ProcPktCtrlPaCall+0xe0>)
 802efd6:	f7f4 faa1 	bl	802351c <HAL_GPIO_WritePin>
		break;
 802efda:	e005      	b.n	802efe8 <ProcPktCtrlPaCall+0x64>
	default:			printf("%s:Invalid\n", __func__);	return 0;
 802efdc:	491d      	ldr	r1, [pc, #116]	; (802f054 <ProcPktCtrlPaCall+0xd0>)
 802efde:	4822      	ldr	r0, [pc, #136]	; (802f068 <ProcPktCtrlPaCall+0xe4>)
 802efe0:	f008 fa5e 	bl	80374a0 <iprintf>
 802efe4:	2300      	movs	r3, #0
 802efe6:	e031      	b.n	802f04c <ProcPktCtrlPaCall+0xc8>
	}

	switch ( pCtrl->nTypePACall )
 802efe8:	68fb      	ldr	r3, [r7, #12]
 802efea:	785b      	ldrb	r3, [r3, #1]
 802efec:	2b03      	cmp	r3, #3
 802efee:	d00e      	beq.n	802f00e <ProcPktCtrlPaCall+0x8a>
 802eff0:	2b03      	cmp	r3, #3
 802eff2:	dc10      	bgt.n	802f016 <ProcPktCtrlPaCall+0x92>
 802eff4:	2b01      	cmp	r3, #1
 802eff6:	d002      	beq.n	802effe <ProcPktCtrlPaCall+0x7a>
 802eff8:	2b02      	cmp	r3, #2
 802effa:	d004      	beq.n	802f006 <ProcPktCtrlPaCall+0x82>
 802effc:	e00b      	b.n	802f016 <ProcPktCtrlPaCall+0x92>
	{
	case CtrlPA:		printf("[PA]");						break;
 802effe:	481b      	ldr	r0, [pc, #108]	; (802f06c <ProcPktCtrlPaCall+0xe8>)
 802f000:	f008 fa4e 	bl	80374a0 <iprintf>
 802f004:	e00d      	b.n	802f022 <ProcPktCtrlPaCall+0x9e>
	case CtrlCall:		printf("[Call]");					break;
 802f006:	481a      	ldr	r0, [pc, #104]	; (802f070 <ProcPktCtrlPaCall+0xec>)
 802f008:	f008 fa4a 	bl	80374a0 <iprintf>
 802f00c:	e009      	b.n	802f022 <ProcPktCtrlPaCall+0x9e>
	case CtrlOccPa:		printf("[OccPa]");					break;
 802f00e:	4819      	ldr	r0, [pc, #100]	; (802f074 <ProcPktCtrlPaCall+0xf0>)
 802f010:	f008 fa46 	bl	80374a0 <iprintf>
 802f014:	e005      	b.n	802f022 <ProcPktCtrlPaCall+0x9e>
	default:			printf("%s:Invalid\n", __func__);	return 0;
 802f016:	490f      	ldr	r1, [pc, #60]	; (802f054 <ProcPktCtrlPaCall+0xd0>)
 802f018:	4813      	ldr	r0, [pc, #76]	; (802f068 <ProcPktCtrlPaCall+0xe4>)
 802f01a:	f008 fa41 	bl	80374a0 <iprintf>
 802f01e:	2300      	movs	r3, #0
 802f020:	e014      	b.n	802f04c <ProcPktCtrlPaCall+0xc8>
	}

	printf("\n");
 802f022:	200a      	movs	r0, #10
 802f024:	f008 fa4e 	bl	80374c4 <putchar>

	if ( GetDevID() == DevRF900M )
 802f028:	f003 fb42 	bl	80326b0 <GetDevID>
 802f02c:	4603      	mov	r3, r0
 802f02e:	2b01      	cmp	r3, #1
 802f030:	d106      	bne.n	802f040 <ProcPktCtrlPaCall+0xbc>
	{
		//	수신기

		//	가까이 있는 송신기 설정. ( 수신기 -> 송신기 중계시 사용 )
		SetChPARFT( GetChNearRFT( 190 ) );	//	RSSI 190 이상인경우 : 수신기 -> 송신기 중계
 802f032:	20be      	movs	r0, #190	; 0xbe
 802f034:	f003 fc28 	bl	8032888 <GetChNearRFT>
 802f038:	4603      	mov	r3, r0
 802f03a:	4618      	mov	r0, r3
 802f03c:	f003 fcf4 	bl	8032a28 <SetChPARFT>
	}

	g_nStampRxPkt = HAL_GetTick();		//	방송/통화 Stamp
 802f040:	f7f2 fd92 	bl	8021b68 <HAL_GetTick>
 802f044:	4603      	mov	r3, r0
 802f046:	461a      	mov	r2, r3
 802f048:	4b0b      	ldr	r3, [pc, #44]	; (802f078 <ProcPktCtrlPaCall+0xf4>)
 802f04a:	601a      	str	r2, [r3, #0]
}
 802f04c:	4618      	mov	r0, r3
 802f04e:	3710      	adds	r7, #16
 802f050:	46bd      	mov	sp, r7
 802f052:	bd80      	pop	{r7, pc}
 802f054:	08041404 	.word	0x08041404
 802f058:	080394e0 	.word	0x080394e0
 802f05c:	08039530 	.word	0x08039530
 802f060:	08039538 	.word	0x08039538
 802f064:	40021000 	.word	0x40021000
 802f068:	08039540 	.word	0x08039540
 802f06c:	0803954c 	.word	0x0803954c
 802f070:	08039554 	.word	0x08039554
 802f074:	0803955c 	.word	0x0803955c
 802f078:	2000233c 	.word	0x2000233c

0802f07c <ProcPktPA>:

//========================================================================
int	ProcPktPA			( const RFMPkt *pRFPkt )
//========================================================================
{
 802f07c:	b580      	push	{r7, lr}
 802f07e:	b084      	sub	sp, #16
 802f080:	af00      	add	r7, sp, #0
 802f082:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802f084:	f001 ff3c 	bl	8030f00 <GetDbg>
 802f088:	4603      	mov	r3, r0
 802f08a:	2b00      	cmp	r3, #0
 802f08c:	d005      	beq.n	802f09a <ProcPktPA+0x1e>
 802f08e:	f240 4202 	movw	r2, #1026	; 0x402
 802f092:	4921      	ldr	r1, [pc, #132]	; (802f118 <ProcPktPA+0x9c>)
 802f094:	4821      	ldr	r0, [pc, #132]	; (802f11c <ProcPktPA+0xa0>)
 802f096:	f008 fa03 	bl	80374a0 <iprintf>

	//========================================================================
	//  방송 ( PTT )
	if ( GetDevID() == DevRF900M )
 802f09a:	f003 fb09 	bl	80326b0 <GetDevID>
 802f09e:	4603      	mov	r3, r0
 802f0a0:	2b01      	cmp	r3, #1
 802f0a2:	d11a      	bne.n	802f0da <ProcPktPA+0x5e>
	{
		//  수신기
		uint16_t	 *pAudioBuf = (uint16_t*)pRFPkt->dat.data;
 802f0a4:	687b      	ldr	r3, [r7, #4]
 802f0a6:	3304      	adds	r3, #4
 802f0a8:	60bb      	str	r3, [r7, #8]

		//  방송 : 송신기 -> 수신기
		qBufPut( &g_qBufAudioRx, (uint8_t*)pAudioBuf, ( I2S_DMA_LOOP_SIZE * 2 ) );
 802f0aa:	223c      	movs	r2, #60	; 0x3c
 802f0ac:	68b9      	ldr	r1, [r7, #8]
 802f0ae:	481c      	ldr	r0, [pc, #112]	; (802f120 <ProcPktPA+0xa4>)
 802f0b0:	f7ff f8e7 	bl	802e282 <qBufPut>

		// 조명 On
		HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
 802f0b4:	2201      	movs	r2, #1
 802f0b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 802f0ba:	481a      	ldr	r0, [pc, #104]	; (802f124 <ProcPktPA+0xa8>)
 802f0bc:	f7f4 fa2e 	bl	802351c <HAL_GPIO_WritePin>

		SetRFMMode( RFMModeRx );
 802f0c0:	2002      	movs	r0, #2
 802f0c2:	f003 fb2d 	bl	8032720 <SetRFMMode>

		//	Codec Speaker On
		RFM_Spk(1);
 802f0c6:	2001      	movs	r0, #1
 802f0c8:	f003 fff6 	bl	80330b8 <RFM_Spk>
		//  수신기 Spk Relay On
		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_SET );
 802f0cc:	2201      	movs	r2, #1
 802f0ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 802f0d2:	4814      	ldr	r0, [pc, #80]	; (802f124 <ProcPktPA+0xa8>)
 802f0d4:	f7f4 fa22 	bl	802351c <HAL_GPIO_WritePin>
 802f0d8:	e013      	b.n	802f102 <ProcPktPA+0x86>
	}
	else
	{
		//========================================================================
		uint16_t	 *pAudioBuf = (uint16_t*)pRFPkt->dat.data;
 802f0da:	687b      	ldr	r3, [r7, #4]
 802f0dc:	3304      	adds	r3, #4
 802f0de:	60fb      	str	r3, [r7, #12]

#if defined(USE_RFT_ONLY_RX_SPK_ON)
		//  송신기 : 수신중인 경우 SPK ON
//			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
		RFM_Spk(1);
 802f0e0:	2001      	movs	r0, #1
 802f0e2:	f003 ffe9 	bl	80330b8 <RFM_Spk>
#endif

		//  방송 : 송신기 -> 수신기
		qBufPut( &g_qBufAudioRx, (uint8_t*)pAudioBuf, ( I2S_DMA_LOOP_SIZE * 2 ) );
 802f0e6:	223c      	movs	r2, #60	; 0x3c
 802f0e8:	68f9      	ldr	r1, [r7, #12]
 802f0ea:	480d      	ldr	r0, [pc, #52]	; (802f120 <ProcPktPA+0xa4>)
 802f0ec:	f7ff f8c9 	bl	802e282 <qBufPut>
		//========================================================================

		//  송신기
		SetRFMMode( RFMModeRx );
 802f0f0:	2002      	movs	r0, #2
 802f0f2:	f003 fb15 	bl	8032720 <SetRFMMode>

		//  Red LED On
		HAL_GPIO_WritePin ( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_SET ); //  RED LED
 802f0f6:	2201      	movs	r2, #1
 802f0f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802f0fc:	480a      	ldr	r0, [pc, #40]	; (802f128 <ProcPktPA+0xac>)
 802f0fe:	f7f4 fa0d 	bl	802351c <HAL_GPIO_WritePin>
	}
	g_nStampRxPkt = HAL_GetTick();		//	방송/통화 Stamp
 802f102:	f7f2 fd31 	bl	8021b68 <HAL_GetTick>
 802f106:	4603      	mov	r3, r0
 802f108:	461a      	mov	r2, r3
 802f10a:	4b08      	ldr	r3, [pc, #32]	; (802f12c <ProcPktPA+0xb0>)
 802f10c:	601a      	str	r2, [r3, #0]
}
 802f10e:	bf00      	nop
 802f110:	4618      	mov	r0, r3
 802f112:	3710      	adds	r7, #16
 802f114:	46bd      	mov	sp, r7
 802f116:	bd80      	pop	{r7, pc}
 802f118:	08041418 	.word	0x08041418
 802f11c:	080394e0 	.word	0x080394e0
 802f120:	20001d7c 	.word	0x20001d7c
 802f124:	40021000 	.word	0x40021000
 802f128:	40020400 	.word	0x40020400
 802f12c:	2000233c 	.word	0x2000233c

0802f130 <ProcPktCall>:

//========================================================================
int	ProcPktCall			( const RFMPkt *pRFPkt )
//========================================================================
{
 802f130:	b580      	push	{r7, lr}
 802f132:	b084      	sub	sp, #16
 802f134:	af00      	add	r7, sp, #0
 802f136:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802f138:	f001 fee2 	bl	8030f00 <GetDbg>
 802f13c:	4603      	mov	r3, r0
 802f13e:	2b00      	cmp	r3, #0
 802f140:	d005      	beq.n	802f14e <ProcPktCall+0x1e>
 802f142:	f240 4234 	movw	r2, #1076	; 0x434
 802f146:	4918      	ldr	r1, [pc, #96]	; (802f1a8 <ProcPktCall+0x78>)
 802f148:	4818      	ldr	r0, [pc, #96]	; (802f1ac <ProcPktCall+0x7c>)
 802f14a:	f008 f9a9 	bl	80374a0 <iprintf>

	if( GetDevID() == DevRF900T )
 802f14e:	f003 faaf 	bl	80326b0 <GetDevID>
 802f152:	4603      	mov	r3, r0
 802f154:	2b02      	cmp	r3, #2
 802f156:	d114      	bne.n	802f182 <ProcPktCall+0x52>
	{
		//	송신기

		//========================================================================
		//  통화 ( SOS )
		uint16_t	 *pAudioBuf = (uint16_t*)pRFPkt->dat.data;
 802f158:	687b      	ldr	r3, [r7, #4]
 802f15a:	3304      	adds	r3, #4
 802f15c:	60fb      	str	r3, [r7, #12]

		SetRFMMode( RFMModeRx );
 802f15e:	2002      	movs	r0, #2
 802f160:	f003 fade 	bl	8032720 <SetRFMMode>

#if defined(USE_RFT_ONLY_RX_SPK_ON)
		//  송신기 : 수신중인 경우 SPK ON
//		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
		RFM_Spk(1);
 802f164:	2001      	movs	r0, #1
 802f166:	f003 ffa7 	bl	80330b8 <RFM_Spk>
#endif

		//  Red LED On
		HAL_GPIO_WritePin ( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_SET ); //  RED LED
 802f16a:	2201      	movs	r2, #1
 802f16c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802f170:	480f      	ldr	r0, [pc, #60]	; (802f1b0 <ProcPktCall+0x80>)
 802f172:	f7f4 f9d3 	bl	802351c <HAL_GPIO_WritePin>

		//  통화 : 송신기 -> 송신기

		qBufPut( &g_qBufAudioRx, (uint8_t*)pAudioBuf, ( I2S_DMA_LOOP_SIZE * 2 ) );
 802f176:	223c      	movs	r2, #60	; 0x3c
 802f178:	68f9      	ldr	r1, [r7, #12]
 802f17a:	480e      	ldr	r0, [pc, #56]	; (802f1b4 <ProcPktCall+0x84>)
 802f17c:	f7ff f881 	bl	802e282 <qBufPut>
 802f180:	e007      	b.n	802f192 <ProcPktCall+0x62>
	}
	else if ( GetDevID() == DevRF900M )
 802f182:	f003 fa95 	bl	80326b0 <GetDevID>
 802f186:	4603      	mov	r3, r0
 802f188:	2b01      	cmp	r3, #1
 802f18a:	d102      	bne.n	802f192 <ProcPktCall+0x62>
	{
		//	수신기

		SetRFMMode( RFMModeRx );
 802f18c:	2002      	movs	r0, #2
 802f18e:	f003 fac7 	bl	8032720 <SetRFMMode>
	}

	g_nStampRxPkt = HAL_GetTick();		//	방송/통화 Stamp
 802f192:	f7f2 fce9 	bl	8021b68 <HAL_GetTick>
 802f196:	4603      	mov	r3, r0
 802f198:	461a      	mov	r2, r3
 802f19a:	4b07      	ldr	r3, [pc, #28]	; (802f1b8 <ProcPktCall+0x88>)
 802f19c:	601a      	str	r2, [r3, #0]
}
 802f19e:	bf00      	nop
 802f1a0:	4618      	mov	r0, r3
 802f1a2:	3710      	adds	r7, #16
 802f1a4:	46bd      	mov	sp, r7
 802f1a6:	bd80      	pop	{r7, pc}
 802f1a8:	08041424 	.word	0x08041424
 802f1ac:	080394e0 	.word	0x080394e0
 802f1b0:	40020400 	.word	0x40020400
 802f1b4:	20001d7c 	.word	0x20001d7c
 802f1b8:	2000233c 	.word	0x2000233c

0802f1bc <ProcPktLight>:
}

//========================================================================
int	ProcPktLight		( const RFMPkt *pRFPkt )
//========================================================================
{
 802f1bc:	b580      	push	{r7, lr}
 802f1be:	b082      	sub	sp, #8
 802f1c0:	af00      	add	r7, sp, #0
 802f1c2:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802f1c4:	f001 fe9c 	bl	8030f00 <GetDbg>
 802f1c8:	4603      	mov	r3, r0
 802f1ca:	2b00      	cmp	r3, #0
 802f1cc:	d005      	beq.n	802f1da <ProcPktLight+0x1e>
 802f1ce:	f240 4273 	movw	r2, #1139	; 0x473
 802f1d2:	4913      	ldr	r1, [pc, #76]	; (802f220 <ProcPktLight+0x64>)
 802f1d4:	4813      	ldr	r0, [pc, #76]	; (802f224 <ProcPktLight+0x68>)
 802f1d6:	f008 f963 	bl	80374a0 <iprintf>

	if ( GetDevID() == DevRF900M && pRFPkt->hdr.nPktCmd == PktLight )
 802f1da:	f003 fa69 	bl	80326b0 <GetDevID>
 802f1de:	4603      	mov	r3, r0
 802f1e0:	2b01      	cmp	r3, #1
 802f1e2:	d118      	bne.n	802f216 <ProcPktLight+0x5a>
 802f1e4:	687b      	ldr	r3, [r7, #4]
 802f1e6:	78db      	ldrb	r3, [r3, #3]
 802f1e8:	2b04      	cmp	r3, #4
 802f1ea:	d114      	bne.n	802f216 <ProcPktLight+0x5a>
	{
		//  수신기 조명제어.
		if ( pRFPkt->dat.light.nOnOff == 0 )
 802f1ec:	687b      	ldr	r3, [r7, #4]
 802f1ee:	791b      	ldrb	r3, [r3, #4]
 802f1f0:	2b00      	cmp	r3, #0
 802f1f2:	d106      	bne.n	802f202 <ProcPktLight+0x46>
		{
			// 조명 Off 명령 수신시.
			HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_RESET );
 802f1f4:	2200      	movs	r2, #0
 802f1f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 802f1fa:	480b      	ldr	r0, [pc, #44]	; (802f228 <ProcPktLight+0x6c>)
 802f1fc:	f7f4 f98e 	bl	802351c <HAL_GPIO_WritePin>
 802f200:	e009      	b.n	802f216 <ProcPktLight+0x5a>
		}
		else if ( pRFPkt->dat.light.nOnOff == 1 )
 802f202:	687b      	ldr	r3, [r7, #4]
 802f204:	791b      	ldrb	r3, [r3, #4]
 802f206:	2b01      	cmp	r3, #1
 802f208:	d105      	bne.n	802f216 <ProcPktLight+0x5a>
		{
			// 조명 On 명령 수신시.
			HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
 802f20a:	2201      	movs	r2, #1
 802f20c:	f44f 7100 	mov.w	r1, #512	; 0x200
 802f210:	4805      	ldr	r0, [pc, #20]	; (802f228 <ProcPktLight+0x6c>)
 802f212:	f7f4 f983 	bl	802351c <HAL_GPIO_WritePin>
		}
	}
}
 802f216:	bf00      	nop
 802f218:	4618      	mov	r0, r3
 802f21a:	3708      	adds	r7, #8
 802f21c:	46bd      	mov	sp, r7
 802f21e:	bd80      	pop	{r7, pc}
 802f220:	08041430 	.word	0x08041430
 802f224:	080394e0 	.word	0x080394e0
 802f228:	40021000 	.word	0x40021000

0802f22c <ProcPktCmd>:


//========================================================================
int	ProcPktCmd			( const RFMPkt *pRFPkt )
//========================================================================
{
 802f22c:	b580      	push	{r7, lr}
 802f22e:	b082      	sub	sp, #8
 802f230:	af00      	add	r7, sp, #0
 802f232:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802f234:	f001 fe64 	bl	8030f00 <GetDbg>
 802f238:	4603      	mov	r3, r0
 802f23a:	2b00      	cmp	r3, #0
 802f23c:	d005      	beq.n	802f24a <ProcPktCmd+0x1e>
 802f23e:	f240 428a 	movw	r2, #1162	; 0x48a
 802f242:	490f      	ldr	r1, [pc, #60]	; (802f280 <ProcPktCmd+0x54>)
 802f244:	480f      	ldr	r0, [pc, #60]	; (802f284 <ProcPktCmd+0x58>)
 802f246:	f008 f92b 	bl	80374a0 <iprintf>

	//	RSSI Check
	printf( "%s(%d) - %s\n", __func__, __LINE__, pRFPkt->dat.cmd.sCmd );
 802f24a:	687b      	ldr	r3, [r7, #4]
 802f24c:	3308      	adds	r3, #8
 802f24e:	f240 428d 	movw	r2, #1165	; 0x48d
 802f252:	490b      	ldr	r1, [pc, #44]	; (802f280 <ProcPktCmd+0x54>)
 802f254:	480c      	ldr	r0, [pc, #48]	; (802f288 <ProcPktCmd+0x5c>)
 802f256:	f008 f923 	bl	80374a0 <iprintf>

	if ( g_nRSSI >= pRFPkt->dat.cmd.nRSSIOver )
 802f25a:	687b      	ldr	r3, [r7, #4]
 802f25c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 802f260:	461a      	mov	r2, r3
 802f262:	4b0a      	ldr	r3, [pc, #40]	; (802f28c <ProcPktCmd+0x60>)
 802f264:	681b      	ldr	r3, [r3, #0]
 802f266:	429a      	cmp	r2, r3
 802f268:	dc04      	bgt.n	802f274 <ProcPktCmd+0x48>

			//	ToDo
		}

		//	RSSI값 확인 후 해당 범위 내에 있는 경우 명령 동작.
		ProcessCommand( pRFPkt->dat.cmd.sCmd );
 802f26a:	687b      	ldr	r3, [r7, #4]
 802f26c:	3308      	adds	r3, #8
 802f26e:	4618      	mov	r0, r3
 802f270:	f001 f930 	bl	80304d4 <ProcessCommand>
	}
}
 802f274:	bf00      	nop
 802f276:	4618      	mov	r0, r3
 802f278:	3708      	adds	r7, #8
 802f27a:	46bd      	mov	sp, r7
 802f27c:	bd80      	pop	{r7, pc}
 802f27e:	bf00      	nop
 802f280:	08041440 	.word	0x08041440
 802f284:	080394e0 	.word	0x080394e0
 802f288:	08039564 	.word	0x08039564
 802f28c:	20002340 	.word	0x20002340

0802f290 <ProcPktUpgr>:
//========================================================================

//========================================================================
int	ProcPktUpgr			( const RFMPkt *pRFPkt )
//========================================================================
{
 802f290:	b580      	push	{r7, lr}
 802f292:	b08c      	sub	sp, #48	; 0x30
 802f294:	af02      	add	r7, sp, #8
 802f296:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	Upgrade Flash Image
	//========================================================================

	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802f298:	f001 fe32 	bl	8030f00 <GetDbg>
 802f29c:	4603      	mov	r3, r0
 802f29e:	2b00      	cmp	r3, #0
 802f2a0:	d005      	beq.n	802f2ae <ProcPktUpgr+0x1e>
 802f2a2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 802f2a6:	4977      	ldr	r1, [pc, #476]	; (802f484 <ProcPktUpgr+0x1f4>)
 802f2a8:	4877      	ldr	r0, [pc, #476]	; (802f488 <ProcPktUpgr+0x1f8>)
 802f2aa:	f008 f8f9 	bl	80374a0 <iprintf>

	//========================================================================
	//	Data Flash영역에 Write
	const RFMPktUpgr	*pUpgr = &pRFPkt->dat.upgr;
 802f2ae:	687b      	ldr	r3, [r7, #4]
 802f2b0:	3304      	adds	r3, #4
 802f2b2:	61fb      	str	r3, [r7, #28]

	if ( pUpgr->baseAddr < 0x08080000 || 0x080FFFFF < pUpgr->baseAddr )
 802f2b4:	69fb      	ldr	r3, [r7, #28]
 802f2b6:	681b      	ldr	r3, [r3, #0]
 802f2b8:	4a74      	ldr	r2, [pc, #464]	; (802f48c <ProcPktUpgr+0x1fc>)
 802f2ba:	4293      	cmp	r3, r2
 802f2bc:	d904      	bls.n	802f2c8 <ProcPktUpgr+0x38>
 802f2be:	69fb      	ldr	r3, [r7, #28]
 802f2c0:	681b      	ldr	r3, [r3, #0]
 802f2c2:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 802f2c6:	d309      	bcc.n	802f2dc <ProcPktUpgr+0x4c>
	{
		printf("%s(%d) - Out Of Range - baseAddr(0x%08X)\n", __func__, __LINE__, pUpgr->baseAddr );
 802f2c8:	69fb      	ldr	r3, [r7, #28]
 802f2ca:	681b      	ldr	r3, [r3, #0]
 802f2cc:	f240 42bd 	movw	r2, #1213	; 0x4bd
 802f2d0:	496c      	ldr	r1, [pc, #432]	; (802f484 <ProcPktUpgr+0x1f4>)
 802f2d2:	486f      	ldr	r0, [pc, #444]	; (802f490 <ProcPktUpgr+0x200>)
 802f2d4:	f008 f8e4 	bl	80374a0 <iprintf>
		return 0;
 802f2d8:	2300      	movs	r3, #0
 802f2da:	e187      	b.n	802f5ec <ProcPktUpgr+0x35c>
//	memcpy( pUpgr->data, sBuf, nSize );

	//========================================================================
	static int	s_rxPkt;

	if ( pUpgr->idxPkt == 0 )
 802f2dc:	69fb      	ldr	r3, [r7, #28]
 802f2de:	88db      	ldrh	r3, [r3, #6]
 802f2e0:	b29b      	uxth	r3, r3
 802f2e2:	2b00      	cmp	r3, #0
 802f2e4:	d133      	bne.n	802f34e <ProcPktUpgr+0xbe>
	{
		//	Start Uprade
		printf("%s(%d) - Start Upgrade\n", __func__, __LINE__ );
 802f2e6:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
 802f2ea:	4966      	ldr	r1, [pc, #408]	; (802f484 <ProcPktUpgr+0x1f4>)
 802f2ec:	4869      	ldr	r0, [pc, #420]	; (802f494 <ProcPktUpgr+0x204>)
 802f2ee:	f008 f8d7 	bl	80374a0 <iprintf>

		if( pUpgr->bFlag & PktUpgrFlagRetry )
 802f2f2:	69fb      	ldr	r3, [r7, #28]
 802f2f4:	7a5b      	ldrb	r3, [r3, #9]
 802f2f6:	f003 0301 	and.w	r3, r3, #1
 802f2fa:	2b00      	cmp	r3, #0
 802f2fc:	d007      	beq.n	802f30e <ProcPktUpgr+0x7e>
		{
			//	No Erase
			printf( "[%08d] Flash Erase - Skip ( Retry - Upgrade )\n", HAL_GetTick() );
 802f2fe:	f7f2 fc33 	bl	8021b68 <HAL_GetTick>
 802f302:	4603      	mov	r3, r0
 802f304:	4619      	mov	r1, r3
 802f306:	4864      	ldr	r0, [pc, #400]	; (802f498 <ProcPktUpgr+0x208>)
 802f308:	f008 f8ca 	bl	80374a0 <iprintf>
 802f30c:	e01c      	b.n	802f348 <ProcPktUpgr+0xb8>
		else
		{
			//========================================================================
			//	Flash Erase
	//		 __HAL_RCC_DBGMCU_CLK_ENABLE();
			 __HAL_DBGMCU_FREEZE_IWDG();
 802f30e:	4b63      	ldr	r3, [pc, #396]	; (802f49c <ProcPktUpgr+0x20c>)
 802f310:	689b      	ldr	r3, [r3, #8]
 802f312:	4a62      	ldr	r2, [pc, #392]	; (802f49c <ProcPktUpgr+0x20c>)
 802f314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802f318:	6093      	str	r3, [r2, #8]
	//		MX_IWDG_Disable();		//	Disable Watchdog
			printf( "[%08d] Flash Erase - Start\n", HAL_GetTick() );
 802f31a:	f7f2 fc25 	bl	8021b68 <HAL_GetTick>
 802f31e:	4603      	mov	r3, r0
 802f320:	4619      	mov	r1, r3
 802f322:	485f      	ldr	r0, [pc, #380]	; (802f4a0 <ProcPktUpgr+0x210>)
 802f324:	f008 f8bc 	bl	80374a0 <iprintf>
	//        FLASH_If_Erase( ADDR_FLASH_IMGAPP );
			FLASH_If_Erase( ADDR_FLASH_IMGBOOT );		//	0x08080000
 802f328:	485e      	ldr	r0, [pc, #376]	; (802f4a4 <ProcPktUpgr+0x214>)
 802f32a:	f002 f80b 	bl	8031344 <FLASH_If_Erase>
			printf( "[%08d] Flash Erase - End\n", HAL_GetTick() );
 802f32e:	f7f2 fc1b 	bl	8021b68 <HAL_GetTick>
 802f332:	4603      	mov	r3, r0
 802f334:	4619      	mov	r1, r3
 802f336:	485c      	ldr	r0, [pc, #368]	; (802f4a8 <ProcPktUpgr+0x218>)
 802f338:	f008 f8b2 	bl	80374a0 <iprintf>
	    	//========================================================================

			memset( s_bUpgrDataValid, 0, sizeof(s_bUpgrDataValid) );
 802f33c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802f340:	2100      	movs	r1, #0
 802f342:	485a      	ldr	r0, [pc, #360]	; (802f4ac <ProcPktUpgr+0x21c>)
 802f344:	f008 fb0e 	bl	8037964 <memset>
		}

		s_rxPkt = 0;
 802f348:	4b59      	ldr	r3, [pc, #356]	; (802f4b0 <ProcPktUpgr+0x220>)
 802f34a:	2200      	movs	r2, #0
 802f34c:	601a      	str	r2, [r3, #0]
	}

	s_rxPkt++;
 802f34e:	4b58      	ldr	r3, [pc, #352]	; (802f4b0 <ProcPktUpgr+0x220>)
 802f350:	681b      	ldr	r3, [r3, #0]
 802f352:	3301      	adds	r3, #1
 802f354:	4a56      	ldr	r2, [pc, #344]	; (802f4b0 <ProcPktUpgr+0x220>)
 802f356:	6013      	str	r3, [r2, #0]

	//========================================================================
	//	Write Upgrade Image Data

	if ( FLASH_If_Write( pUpgr->baseAddr + (pUpgr->idxPkt * PktUpgrDataSize),
 802f358:	69fb      	ldr	r3, [r7, #28]
 802f35a:	681a      	ldr	r2, [r3, #0]
 802f35c:	69fb      	ldr	r3, [r7, #28]
 802f35e:	88db      	ldrh	r3, [r3, #6]
 802f360:	b29b      	uxth	r3, r3
 802f362:	4619      	mov	r1, r3
 802f364:	460b      	mov	r3, r1
 802f366:	005b      	lsls	r3, r3, #1
 802f368:	440b      	add	r3, r1
 802f36a:	011b      	lsls	r3, r3, #4
 802f36c:	18d0      	adds	r0, r2, r3
						(uint32_t *)pUpgr->data,
 802f36e:	69fb      	ldr	r3, [r7, #28]
 802f370:	f103 010a 	add.w	r1, r3, #10
						pUpgr->nSize / 4 ) == FLASHIF_OK )
 802f374:	69fb      	ldr	r3, [r7, #28]
 802f376:	7a1b      	ldrb	r3, [r3, #8]
	if ( FLASH_If_Write( pUpgr->baseAddr + (pUpgr->idxPkt * PktUpgrDataSize),
 802f378:	089b      	lsrs	r3, r3, #2
 802f37a:	b2db      	uxtb	r3, r3
 802f37c:	461a      	mov	r2, r3
 802f37e:	f002 f805 	bl	803138c <FLASH_If_Write>
 802f382:	4603      	mov	r3, r0
 802f384:	2b00      	cmp	r3, #0
 802f386:	d11d      	bne.n	802f3c4 <ProcPktUpgr+0x134>
	{
		//	Valid Check Data
		SET_BIT( s_bUpgrDataValid[pUpgr->idxPkt/8], (0x1 << (pUpgr->idxPkt % 8)) );
 802f388:	69fb      	ldr	r3, [r7, #28]
 802f38a:	88db      	ldrh	r3, [r3, #6]
 802f38c:	b29b      	uxth	r3, r3
 802f38e:	08db      	lsrs	r3, r3, #3
 802f390:	b29b      	uxth	r3, r3
 802f392:	461a      	mov	r2, r3
 802f394:	4b45      	ldr	r3, [pc, #276]	; (802f4ac <ProcPktUpgr+0x21c>)
 802f396:	5c9b      	ldrb	r3, [r3, r2]
 802f398:	b25a      	sxtb	r2, r3
 802f39a:	69fb      	ldr	r3, [r7, #28]
 802f39c:	88db      	ldrh	r3, [r3, #6]
 802f39e:	b29b      	uxth	r3, r3
 802f3a0:	f003 0307 	and.w	r3, r3, #7
 802f3a4:	2101      	movs	r1, #1
 802f3a6:	fa01 f303 	lsl.w	r3, r1, r3
 802f3aa:	b25b      	sxtb	r3, r3
 802f3ac:	4313      	orrs	r3, r2
 802f3ae:	b259      	sxtb	r1, r3
 802f3b0:	69fb      	ldr	r3, [r7, #28]
 802f3b2:	88db      	ldrh	r3, [r3, #6]
 802f3b4:	b29b      	uxth	r3, r3
 802f3b6:	08db      	lsrs	r3, r3, #3
 802f3b8:	b29b      	uxth	r3, r3
 802f3ba:	461a      	mov	r2, r3
 802f3bc:	b2c9      	uxtb	r1, r1
 802f3be:	4b3b      	ldr	r3, [pc, #236]	; (802f4ac <ProcPktUpgr+0x21c>)
 802f3c0:	5499      	strb	r1, [r3, r2]
 802f3c2:	e027      	b.n	802f414 <ProcPktUpgr+0x184>
	}
	else /* An error occurred while writing to Flash memory */
	{
		/* End session */
		printf("%s(%d) - Error idx(%d)\n", __func__, __LINE__, pUpgr->idxPkt );
 802f3c4:	69fb      	ldr	r3, [r7, #28]
 802f3c6:	88db      	ldrh	r3, [r3, #6]
 802f3c8:	b29b      	uxth	r3, r3
 802f3ca:	f240 42f9 	movw	r2, #1273	; 0x4f9
 802f3ce:	492d      	ldr	r1, [pc, #180]	; (802f484 <ProcPktUpgr+0x1f4>)
 802f3d0:	4838      	ldr	r0, [pc, #224]	; (802f4b4 <ProcPktUpgr+0x224>)
 802f3d2:	f008 f865 	bl	80374a0 <iprintf>
		CLEAR_BIT( s_bUpgrDataValid[pUpgr->idxPkt/8], (0x1 << (pUpgr->idxPkt % 8)) );	//	Clear
 802f3d6:	69fb      	ldr	r3, [r7, #28]
 802f3d8:	88db      	ldrh	r3, [r3, #6]
 802f3da:	b29b      	uxth	r3, r3
 802f3dc:	08db      	lsrs	r3, r3, #3
 802f3de:	b29b      	uxth	r3, r3
 802f3e0:	461a      	mov	r2, r3
 802f3e2:	4b32      	ldr	r3, [pc, #200]	; (802f4ac <ProcPktUpgr+0x21c>)
 802f3e4:	5c9b      	ldrb	r3, [r3, r2]
 802f3e6:	b25a      	sxtb	r2, r3
 802f3e8:	69fb      	ldr	r3, [r7, #28]
 802f3ea:	88db      	ldrh	r3, [r3, #6]
 802f3ec:	b29b      	uxth	r3, r3
 802f3ee:	f003 0307 	and.w	r3, r3, #7
 802f3f2:	2101      	movs	r1, #1
 802f3f4:	fa01 f303 	lsl.w	r3, r1, r3
 802f3f8:	b25b      	sxtb	r3, r3
 802f3fa:	43db      	mvns	r3, r3
 802f3fc:	b25b      	sxtb	r3, r3
 802f3fe:	4013      	ands	r3, r2
 802f400:	b259      	sxtb	r1, r3
 802f402:	69fb      	ldr	r3, [r7, #28]
 802f404:	88db      	ldrh	r3, [r3, #6]
 802f406:	b29b      	uxth	r3, r3
 802f408:	08db      	lsrs	r3, r3, #3
 802f40a:	b29b      	uxth	r3, r3
 802f40c:	461a      	mov	r2, r3
 802f40e:	b2c9      	uxtb	r1, r1
 802f410:	4b26      	ldr	r3, [pc, #152]	; (802f4ac <ProcPktUpgr+0x21c>)
 802f412:	5499      	strb	r1, [r3, r2]
	}

	g_nStampRxPkt = HAL_GetTick();		//	Rx Pkt Stamp
 802f414:	f7f2 fba8 	bl	8021b68 <HAL_GetTick>
 802f418:	4603      	mov	r3, r0
 802f41a:	461a      	mov	r2, r3
 802f41c:	4b26      	ldr	r3, [pc, #152]	; (802f4b8 <ProcPktUpgr+0x228>)
 802f41e:	601a      	str	r2, [r3, #0]
	//========================================================================

	//========================================================================
	if ( pUpgr->idxPkt == (pUpgr->totPkt - 1) )
 802f420:	69fb      	ldr	r3, [r7, #28]
 802f422:	88db      	ldrh	r3, [r3, #6]
 802f424:	b29b      	uxth	r3, r3
 802f426:	461a      	mov	r2, r3
 802f428:	69fb      	ldr	r3, [r7, #28]
 802f42a:	889b      	ldrh	r3, [r3, #4]
 802f42c:	b29b      	uxth	r3, r3
 802f42e:	3b01      	subs	r3, #1
 802f430:	429a      	cmp	r2, r3
 802f432:	f040 80db 	bne.w	802f5ec <ProcPktUpgr+0x35c>
	{
		//	End Upgrade
//		s_rxPkt++;

		printf("%s(%d) - End Upgrade ( rxPkt : %d / totPkt : %d )\n", __func__, __LINE__,
 802f436:	4b1e      	ldr	r3, [pc, #120]	; (802f4b0 <ProcPktUpgr+0x220>)
 802f438:	681a      	ldr	r2, [r3, #0]
					s_rxPkt, pUpgr->totPkt );
 802f43a:	69fb      	ldr	r3, [r7, #28]
 802f43c:	889b      	ldrh	r3, [r3, #4]
 802f43e:	b29b      	uxth	r3, r3
		printf("%s(%d) - End Upgrade ( rxPkt : %d / totPkt : %d )\n", __func__, __LINE__,
 802f440:	9300      	str	r3, [sp, #0]
 802f442:	4613      	mov	r3, r2
 802f444:	f240 5206 	movw	r2, #1286	; 0x506
 802f448:	490e      	ldr	r1, [pc, #56]	; (802f484 <ProcPktUpgr+0x1f4>)
 802f44a:	481c      	ldr	r0, [pc, #112]	; (802f4bc <ProcPktUpgr+0x22c>)
 802f44c:	f008 f828 	bl	80374a0 <iprintf>

		int result = UpgrStatSuccess;
 802f450:	2301      	movs	r3, #1
 802f452:	627b      	str	r3, [r7, #36]	; 0x24
		for( int i = 0; i < pUpgr->totPkt; i++ )
 802f454:	2300      	movs	r3, #0
 802f456:	623b      	str	r3, [r7, #32]
 802f458:	e035      	b.n	802f4c6 <ProcPktUpgr+0x236>
		{
			if( READ_BIT( s_bUpgrDataValid[i / 8], (0x1 << (i % 8)) ) == 0 )
 802f45a:	6a3b      	ldr	r3, [r7, #32]
 802f45c:	2b00      	cmp	r3, #0
 802f45e:	da00      	bge.n	802f462 <ProcPktUpgr+0x1d2>
 802f460:	3307      	adds	r3, #7
 802f462:	10db      	asrs	r3, r3, #3
 802f464:	461a      	mov	r2, r3
 802f466:	4b11      	ldr	r3, [pc, #68]	; (802f4ac <ProcPktUpgr+0x21c>)
 802f468:	5c9b      	ldrb	r3, [r3, r2]
 802f46a:	461a      	mov	r2, r3
 802f46c:	6a3b      	ldr	r3, [r7, #32]
 802f46e:	f003 0307 	and.w	r3, r3, #7
 802f472:	fa42 f303 	asr.w	r3, r2, r3
 802f476:	f003 0301 	and.w	r3, r3, #1
 802f47a:	2b00      	cmp	r3, #0
 802f47c:	d120      	bne.n	802f4c0 <ProcPktUpgr+0x230>
			{
				result = UpgrStatFailed;
 802f47e:	2300      	movs	r3, #0
 802f480:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 802f482:	e027      	b.n	802f4d4 <ProcPktUpgr+0x244>
 802f484:	0804144c 	.word	0x0804144c
 802f488:	080394e0 	.word	0x080394e0
 802f48c:	0807ffff 	.word	0x0807ffff
 802f490:	08039574 	.word	0x08039574
 802f494:	080395a0 	.word	0x080395a0
 802f498:	080395b8 	.word	0x080395b8
 802f49c:	e0042000 	.word	0xe0042000
 802f4a0:	080395e8 	.word	0x080395e8
 802f4a4:	08080000 	.word	0x08080000
 802f4a8:	08039604 	.word	0x08039604
 802f4ac:	200013a0 	.word	0x200013a0
 802f4b0:	200017a0 	.word	0x200017a0
 802f4b4:	08039620 	.word	0x08039620
 802f4b8:	2000233c 	.word	0x2000233c
 802f4bc:	08039638 	.word	0x08039638
		for( int i = 0; i < pUpgr->totPkt; i++ )
 802f4c0:	6a3b      	ldr	r3, [r7, #32]
 802f4c2:	3301      	adds	r3, #1
 802f4c4:	623b      	str	r3, [r7, #32]
 802f4c6:	69fb      	ldr	r3, [r7, #28]
 802f4c8:	889b      	ldrh	r3, [r3, #4]
 802f4ca:	b29b      	uxth	r3, r3
 802f4cc:	461a      	mov	r2, r3
 802f4ce:	6a3b      	ldr	r3, [r7, #32]
 802f4d0:	4293      	cmp	r3, r2
 802f4d2:	dbc2      	blt.n	802f45a <ProcPktUpgr+0x1ca>
			}
		}

		//========================================================================
		if ( result == UpgrStatSuccess )//( s_rxPkt == pUpgr->totPkt )
 802f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f4d6:	2b01      	cmp	r3, #1
 802f4d8:	d16c      	bne.n	802f5b4 <ProcPktUpgr+0x324>
		{
			//	Upgrade Success

			char buf[10];
			int filesize = pUpgr->totPkt * PktUpgrDataSize;
 802f4da:	69fb      	ldr	r3, [r7, #28]
 802f4dc:	889b      	ldrh	r3, [r3, #4]
 802f4de:	b29b      	uxth	r3, r3
 802f4e0:	461a      	mov	r2, r3
 802f4e2:	4613      	mov	r3, r2
 802f4e4:	005b      	lsls	r3, r3, #1
 802f4e6:	4413      	add	r3, r2
 802f4e8:	011b      	lsls	r3, r3, #4
 802f4ea:	61bb      	str	r3, [r7, #24]

			printf("%s(%d) - Upgrade Success ( Size : %d )\n", __func__, __LINE__, filesize );
 802f4ec:	69bb      	ldr	r3, [r7, #24]
 802f4ee:	f240 521b 	movw	r2, #1307	; 0x51b
 802f4f2:	4940      	ldr	r1, [pc, #256]	; (802f5f4 <ProcPktUpgr+0x364>)
 802f4f4:	4840      	ldr	r0, [pc, #256]	; (802f5f8 <ProcPktUpgr+0x368>)
 802f4f6:	f007 ffd3 	bl	80374a0 <iprintf>

			memset( buf, 0, sizeof( buf ) );
 802f4fa:	f107 030c 	add.w	r3, r7, #12
 802f4fe:	220a      	movs	r2, #10
 802f500:	2100      	movs	r1, #0
 802f502:	4618      	mov	r0, r3
 802f504:	f008 fa2e 	bl	8037964 <memset>

			buf[0] = 0xaa;
 802f508:	23aa      	movs	r3, #170	; 0xaa
 802f50a:	733b      	strb	r3, [r7, #12]
			buf[1] = 0x55;
 802f50c:	2355      	movs	r3, #85	; 0x55
 802f50e:	737b      	strb	r3, [r7, #13]
			buf[2] = ( filesize >> 16 ) & 0xFF;
 802f510:	69bb      	ldr	r3, [r7, #24]
 802f512:	141b      	asrs	r3, r3, #16
 802f514:	b2db      	uxtb	r3, r3
 802f516:	73bb      	strb	r3, [r7, #14]
			buf[3] = ( filesize >> 8 ) & 0xFF;
 802f518:	69bb      	ldr	r3, [r7, #24]
 802f51a:	121b      	asrs	r3, r3, #8
 802f51c:	b2db      	uxtb	r3, r3
 802f51e:	73fb      	strb	r3, [r7, #15]
			buf[4] = ( filesize >> 0 ) & 0xFF;
 802f520:	69bb      	ldr	r3, [r7, #24]
 802f522:	b2db      	uxtb	r3, r3
 802f524:	743b      	strb	r3, [r7, #16]

		    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPUpgrMGN1, (uint8_t *)buf, 5 );
 802f526:	f107 030c 	add.w	r3, r7, #12
 802f52a:	2205      	movs	r2, #5
 802f52c:	9200      	str	r2, [sp, #0]
 802f52e:	2220      	movs	r2, #32
 802f530:	21a0      	movs	r1, #160	; 0xa0
 802f532:	4832      	ldr	r0, [pc, #200]	; (802f5fc <ProcPktUpgr+0x36c>)
 802f534:	f001 fdb4 	bl	80310a0 <M24_HAL_WriteBytes>

			memset( buf, 0, sizeof( buf ) );
 802f538:	f107 030c 	add.w	r3, r7, #12
 802f53c:	220a      	movs	r2, #10
 802f53e:	2100      	movs	r1, #0
 802f540:	4618      	mov	r0, r3
 802f542:	f008 fa0f 	bl	8037964 <memset>

		    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPUpgrMGN1, (uint8_t *)buf, 5 );
 802f546:	f107 030c 	add.w	r3, r7, #12
 802f54a:	2205      	movs	r2, #5
 802f54c:	9200      	str	r2, [sp, #0]
 802f54e:	2220      	movs	r2, #32
 802f550:	21a0      	movs	r1, #160	; 0xa0
 802f552:	482a      	ldr	r0, [pc, #168]	; (802f5fc <ProcPktUpgr+0x36c>)
 802f554:	f001 fdc6 	bl	80310e4 <M24_HAL_ReadBytes>

		    filesize = ( buf[2] << 16 ) | ( buf[3] << 8 ) | ( buf[4] );
 802f558:	7bbb      	ldrb	r3, [r7, #14]
 802f55a:	041a      	lsls	r2, r3, #16
 802f55c:	7bfb      	ldrb	r3, [r7, #15]
 802f55e:	021b      	lsls	r3, r3, #8
 802f560:	4313      	orrs	r3, r2
 802f562:	7c3a      	ldrb	r2, [r7, #16]
 802f564:	4313      	orrs	r3, r2
 802f566:	61bb      	str	r3, [r7, #24]

			printf( "%s(%d) - EEPROM [0,1] : 0x%02X 0x%02X / ( bin size : %d )\n", __func__, __LINE__, buf[0], buf[1], filesize );
 802f568:	7b3b      	ldrb	r3, [r7, #12]
 802f56a:	4619      	mov	r1, r3
 802f56c:	7b7b      	ldrb	r3, [r7, #13]
 802f56e:	461a      	mov	r2, r3
 802f570:	69bb      	ldr	r3, [r7, #24]
 802f572:	9301      	str	r3, [sp, #4]
 802f574:	9200      	str	r2, [sp, #0]
 802f576:	460b      	mov	r3, r1
 802f578:	f240 522d 	movw	r2, #1325	; 0x52d
 802f57c:	491d      	ldr	r1, [pc, #116]	; (802f5f4 <ProcPktUpgr+0x364>)
 802f57e:	4820      	ldr	r0, [pc, #128]	; (802f600 <ProcPktUpgr+0x370>)
 802f580:	f007 ff8e 	bl	80374a0 <iprintf>

			HAL_Delay( 2000 );	//	Upgrade 결과전송 전 Delay
 802f584:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 802f588:	f7f2 fafa 	bl	8021b80 <HAL_Delay>

			//===========================================================================
			//	Send Upgrade Result
			SendUpgrStat( UpgrStatSuccess );	//	Upgrade 결과전송.
 802f58c:	2001      	movs	r0, #1
 802f58e:	f7ff fb69 	bl	802ec64 <SendUpgrStat>
			HAL_Delay( 100 );	//	Upgrade 결과전송 전 Delay
 802f592:	2064      	movs	r0, #100	; 0x64
 802f594:	f7f2 faf4 	bl	8021b80 <HAL_Delay>
			SendUpgrStat( UpgrStatSuccess );	//	Upgrade 결과전송.
 802f598:	2001      	movs	r0, #1
 802f59a:	f7ff fb63 	bl	802ec64 <SendUpgrStat>
			HAL_Delay( 100 );	//	Upgrade 결과전송 전 Delay
 802f59e:	2064      	movs	r0, #100	; 0x64
 802f5a0:	f7f2 faee 	bl	8021b80 <HAL_Delay>
			SendUpgrStat( UpgrStatSuccess );	//	Upgrade 결과전송.
 802f5a4:	2001      	movs	r0, #1
 802f5a6:	f7ff fb5d 	bl	802ec64 <SendUpgrStat>

			//===========================================================================
			//	Reset
			cmd_reset(0, 0);
 802f5aa:	2100      	movs	r1, #0
 802f5ac:	2000      	movs	r0, #0
 802f5ae:	f001 faa3 	bl	8030af8 <cmd_reset>
 802f5b2:	e018      	b.n	802f5e6 <ProcPktUpgr+0x356>
			//===========================================================================
		}
		else
		{
			HAL_Delay( 2000 );	//	Upgrade 결과전송 전 Delay
 802f5b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 802f5b8:	f7f2 fae2 	bl	8021b80 <HAL_Delay>

			//===========================================================================
			//	Send Upgrade Result
			SendUpgrStat( UpgrStatFailed );		//	Upgrade 결과전송.
 802f5bc:	2000      	movs	r0, #0
 802f5be:	f7ff fb51 	bl	802ec64 <SendUpgrStat>
			HAL_Delay( 100 );	//	Upgrade 결과전송 전 Delay
 802f5c2:	2064      	movs	r0, #100	; 0x64
 802f5c4:	f7f2 fadc 	bl	8021b80 <HAL_Delay>
			SendUpgrStat( UpgrStatFailed );	//	Upgrade 결과전송.
 802f5c8:	2000      	movs	r0, #0
 802f5ca:	f7ff fb4b 	bl	802ec64 <SendUpgrStat>
			HAL_Delay( 100 );	//	Upgrade 결과전송 전 Delay
 802f5ce:	2064      	movs	r0, #100	; 0x64
 802f5d0:	f7f2 fad6 	bl	8021b80 <HAL_Delay>
			SendUpgrStat( UpgrStatFailed );	//	Upgrade 결과전송.
 802f5d4:	2000      	movs	r0, #0
 802f5d6:	f7ff fb45 	bl	802ec64 <SendUpgrStat>

			//	Upgrade Failed
			printf("%s(%d) - Upgrade Failed\n", __func__, __LINE__ );
 802f5da:	f240 524b 	movw	r2, #1355	; 0x54b
 802f5de:	4905      	ldr	r1, [pc, #20]	; (802f5f4 <ProcPktUpgr+0x364>)
 802f5e0:	4808      	ldr	r0, [pc, #32]	; (802f604 <ProcPktUpgr+0x374>)
 802f5e2:	f007 ff5d 	bl	80374a0 <iprintf>
		}
		//========================================================================

		//========================================================================
		SetRFMMode( RFMModeNormal );	//	Normal 모드로 설정.
 802f5e6:	2000      	movs	r0, #0
 802f5e8:	f003 f89a 	bl	8032720 <SetRFMMode>
		//========================================================================
	}
}
 802f5ec:	4618      	mov	r0, r3
 802f5ee:	3728      	adds	r7, #40	; 0x28
 802f5f0:	46bd      	mov	sp, r7
 802f5f2:	bd80      	pop	{r7, pc}
 802f5f4:	0804144c 	.word	0x0804144c
 802f5f8:	0803966c 	.word	0x0803966c
 802f5fc:	20000e2c 	.word	0x20000e2c
 802f600:	08039694 	.word	0x08039694
 802f604:	080396d0 	.word	0x080396d0

0802f608 <ProcPktUpgrStat>:


//========================================================================
int	ProcPktUpgrStat			( const RFMPkt *pRFPkt )
//========================================================================
{
 802f608:	b580      	push	{r7, lr}
 802f60a:	b090      	sub	sp, #64	; 0x40
 802f60c:	af00      	add	r7, sp, #0
 802f60e:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	Upgrade Status
	//========================================================================

	//	Upgrade 결과 수신후 수신기 LCD창에 표시.
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802f610:	f001 fc76 	bl	8030f00 <GetDbg>
 802f614:	4603      	mov	r3, r0
 802f616:	2b00      	cmp	r3, #0
 802f618:	d005      	beq.n	802f626 <ProcPktUpgrStat+0x1e>
 802f61a:	f240 525f 	movw	r2, #1375	; 0x55f
 802f61e:	491f      	ldr	r1, [pc, #124]	; (802f69c <ProcPktUpgrStat+0x94>)
 802f620:	481f      	ldr	r0, [pc, #124]	; (802f6a0 <ProcPktUpgrStat+0x98>)
 802f622:	f007 ff3d 	bl	80374a0 <iprintf>

	char sBuf[50];

	//========================================================================
	//	Data Flash영역에 Write
	RFMPktUpgrStat	*pUpgrStat = (RFMPktUpgrStat *)&pRFPkt->dat.upgrStat;
 802f626:	687b      	ldr	r3, [r7, #4]
 802f628:	3304      	adds	r3, #4
 802f62a:	63fb      	str	r3, [r7, #60]	; 0x3c

	printf( "%s(%d) - %d\n", __func__, __LINE__, pUpgrStat->nResult );
 802f62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f62e:	781b      	ldrb	r3, [r3, #0]
 802f630:	f240 5267 	movw	r2, #1383	; 0x567
 802f634:	4919      	ldr	r1, [pc, #100]	; (802f69c <ProcPktUpgrStat+0x94>)
 802f636:	481b      	ldr	r0, [pc, #108]	; (802f6a4 <ProcPktUpgrStat+0x9c>)
 802f638:	f007 ff32 	bl	80374a0 <iprintf>

	if ( pUpgrStat->nResult == UpgrStatSuccess )
 802f63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f63e:	781b      	ldrb	r3, [r3, #0]
 802f640:	2b01      	cmp	r3, #1
 802f642:	d111      	bne.n	802f668 <ProcPktUpgrStat+0x60>
	{
		//	송신기 : Upgr Success

		sprintf(sBuf, "Success(%d/%d)", pUpgrStat->nTrainSet, pUpgrStat->nCarNo);
 802f644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f646:	791b      	ldrb	r3, [r3, #4]
 802f648:	461a      	mov	r2, r3
 802f64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f64c:	795b      	ldrb	r3, [r3, #5]
 802f64e:	f107 0008 	add.w	r0, r7, #8
 802f652:	4915      	ldr	r1, [pc, #84]	; (802f6a8 <ProcPktUpgrStat+0xa0>)
 802f654:	f008 f850 	bl	80376f8 <siprintf>
		LCDPrintfXY( 0, 13, sBuf );
 802f658:	f107 0308 	add.w	r3, r7, #8
 802f65c:	461a      	mov	r2, r3
 802f65e:	210d      	movs	r1, #13
 802f660:	2000      	movs	r0, #0
 802f662:	f7fd f9b9 	bl	802c9d8 <LCDPrintfXY>
 802f666:	e014      	b.n	802f692 <ProcPktUpgrStat+0x8a>

//		HAL_Delay(2000);
	}
	else if( pUpgrStat->nResult == UpgrStatFailed )
 802f668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f66a:	781b      	ldrb	r3, [r3, #0]
 802f66c:	2b00      	cmp	r3, #0
 802f66e:	d110      	bne.n	802f692 <ProcPktUpgrStat+0x8a>
	{
		//	송신기 : Upgr Failed

		sprintf(sBuf, "Failed(%d/%d)", pUpgrStat->nTrainSet, pUpgrStat->nCarNo);
 802f670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f672:	791b      	ldrb	r3, [r3, #4]
 802f674:	461a      	mov	r2, r3
 802f676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f678:	795b      	ldrb	r3, [r3, #5]
 802f67a:	f107 0008 	add.w	r0, r7, #8
 802f67e:	490b      	ldr	r1, [pc, #44]	; (802f6ac <ProcPktUpgrStat+0xa4>)
 802f680:	f008 f83a 	bl	80376f8 <siprintf>
		LCDPrintfXY( 0, 13, sBuf );
 802f684:	f107 0308 	add.w	r3, r7, #8
 802f688:	461a      	mov	r2, r3
 802f68a:	210d      	movs	r1, #13
 802f68c:	2000      	movs	r0, #0
 802f68e:	f7fd f9a3 	bl	802c9d8 <LCDPrintfXY>

//		HAL_Delay(2000);
	}

	return 1;
 802f692:	2301      	movs	r3, #1
}
 802f694:	4618      	mov	r0, r3
 802f696:	3740      	adds	r7, #64	; 0x40
 802f698:	46bd      	mov	sp, r7
 802f69a:	bd80      	pop	{r7, pc}
 802f69c:	08041458 	.word	0x08041458
 802f6a0:	080394e0 	.word	0x080394e0
 802f6a4:	08039520 	.word	0x08039520
 802f6a8:	080396ec 	.word	0x080396ec
 802f6ac:	080396fc 	.word	0x080396fc

0802f6b0 <Adc_Power>:
// Function

//========================================================================
void Adc_Power( void )
//========================================================================
{
 802f6b0:	b580      	push	{r7, lr}
 802f6b2:	b082      	sub	sp, #8
 802f6b4:	af00      	add	r7, sp, #0
    int adc_pwr;

    static int  bOldIsCharge = 0;        //  충전중.
    int         bIsCharge;       //  충전중.

    HAL_ADC_Start( &hadc1 );
 802f6b6:	484f      	ldr	r0, [pc, #316]	; (802f7f4 <Adc_Power+0x144>)
 802f6b8:	f7f2 faca 	bl	8021c50 <HAL_ADC_Start>
    HAL_ADC_PollForConversion( &hadc1, 100 );
 802f6bc:	2164      	movs	r1, #100	; 0x64
 802f6be:	484d      	ldr	r0, [pc, #308]	; (802f7f4 <Adc_Power+0x144>)
 802f6c0:	f7f2 fb8c 	bl	8021ddc <HAL_ADC_PollForConversion>

    adc_pwr = HAL_ADC_GetValue( &hadc1 );
 802f6c4:	484b      	ldr	r0, [pc, #300]	; (802f7f4 <Adc_Power+0x144>)
 802f6c6:	f7f2 fc0d 	bl	8021ee4 <HAL_ADC_GetValue>
 802f6ca:	4603      	mov	r3, r0
 802f6cc:	607b      	str	r3, [r7, #4]

    //  충전중인지 검사.
    bIsCharge = ( HAL_GPIO_ReadPin( BAT_CHRG_GPIO_Port, BAT_CHRG_Pin ) ) ? 0 : 1;
 802f6ce:	2101      	movs	r1, #1
 802f6d0:	4849      	ldr	r0, [pc, #292]	; (802f7f8 <Adc_Power+0x148>)
 802f6d2:	f7f3 ff0b 	bl	80234ec <HAL_GPIO_ReadPin>
 802f6d6:	4603      	mov	r3, r0
 802f6d8:	2b00      	cmp	r3, #0
 802f6da:	bf0c      	ite	eq
 802f6dc:	2301      	moveq	r3, #1
 802f6de:	2300      	movne	r3, #0
 802f6e0:	b2db      	uxtb	r3, r3
 802f6e2:	603b      	str	r3, [r7, #0]
            adc_pwr, old_adc_pwr,
            bIsCharge
        );
    }

    if ( bOldIsCharge != bIsCharge )
 802f6e4:	4b45      	ldr	r3, [pc, #276]	; (802f7fc <Adc_Power+0x14c>)
 802f6e6:	681b      	ldr	r3, [r3, #0]
 802f6e8:	683a      	ldr	r2, [r7, #0]
 802f6ea:	429a      	cmp	r2, r3
 802f6ec:	d011      	beq.n	802f712 <Adc_Power+0x62>
    {
        if ( bIsCharge == 0 )
 802f6ee:	683b      	ldr	r3, [r7, #0]
 802f6f0:	2b00      	cmp	r3, #0
 802f6f2:	d10b      	bne.n	802f70c <Adc_Power+0x5c>
        {
            //  충전 단자 제거시 -  LED Off
            HAL_GPIO_WritePin( LED_ON_A_GPIO_Port, LED_ON_A_Pin, GPIO_PIN_RESET );  //  Green
 802f6f4:	2200      	movs	r2, #0
 802f6f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802f6fa:	4841      	ldr	r0, [pc, #260]	; (802f800 <Adc_Power+0x150>)
 802f6fc:	f7f3 ff0e 	bl	802351c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_RESET );  //  Red
 802f700:	2200      	movs	r2, #0
 802f702:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802f706:	483e      	ldr	r0, [pc, #248]	; (802f800 <Adc_Power+0x150>)
 802f708:	f7f3 ff08 	bl	802351c <HAL_GPIO_WritePin>
        }

        bOldIsCharge = bIsCharge;
 802f70c:	4a3b      	ldr	r2, [pc, #236]	; (802f7fc <Adc_Power+0x14c>)
 802f70e:	683b      	ldr	r3, [r7, #0]
 802f710:	6013      	str	r3, [r2, #0]
    }

    if( bIsCharge )
 802f712:	683b      	ldr	r3, [r7, #0]
 802f714:	2b00      	cmp	r3, #0
 802f716:	d021      	beq.n	802f75c <Adc_Power+0xac>
    {
        //  충전중. - Charging Start.

        LCDBattery( 6 );
 802f718:	2006      	movs	r0, #6
 802f71a:	f7fc fff1 	bl	802c700 <LCDBattery>

        //  LED 상태. - 충전중 Red / 충전완료 : Green

        if ( adc_pwr < 2550 )
 802f71e:	687b      	ldr	r3, [r7, #4]
 802f720:	f640 12f5 	movw	r2, #2549	; 0x9f5
 802f724:	4293      	cmp	r3, r2
 802f726:	dc0c      	bgt.n	802f742 <Adc_Power+0x92>
        {
            //  충전중.
            //  Red LED
            HAL_GPIO_WritePin( LED_ON_A_GPIO_Port, LED_ON_A_Pin, GPIO_PIN_RESET );  //  Green
 802f728:	2200      	movs	r2, #0
 802f72a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802f72e:	4834      	ldr	r0, [pc, #208]	; (802f800 <Adc_Power+0x150>)
 802f730:	f7f3 fef4 	bl	802351c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_SET );    //  Red
 802f734:	2201      	movs	r2, #1
 802f736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802f73a:	4831      	ldr	r0, [pc, #196]	; (802f800 <Adc_Power+0x150>)
 802f73c:	f7f3 feee 	bl	802351c <HAL_GPIO_WritePin>
 802f740:	e051      	b.n	802f7e6 <Adc_Power+0x136>
        }
        else
        {
            //  충전완료.
            //  Green LED
            HAL_GPIO_WritePin( LED_ON_A_GPIO_Port, LED_ON_A_Pin, GPIO_PIN_SET );    //  Green
 802f742:	2201      	movs	r2, #1
 802f744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802f748:	482d      	ldr	r0, [pc, #180]	; (802f800 <Adc_Power+0x150>)
 802f74a:	f7f3 fee7 	bl	802351c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_RESET );  //  Red
 802f74e:	2200      	movs	r2, #0
 802f750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802f754:	482a      	ldr	r0, [pc, #168]	; (802f800 <Adc_Power+0x150>)
 802f756:	f7f3 fee1 	bl	802351c <HAL_GPIO_WritePin>
 802f75a:	e044      	b.n	802f7e6 <Adc_Power+0x136>
        }
    }
    else
    {
        if ( adc_pwr > 2450 )                           LCDBattery( 5 );
 802f75c:	687b      	ldr	r3, [r7, #4]
 802f75e:	f640 1292 	movw	r2, #2450	; 0x992
 802f762:	4293      	cmp	r3, r2
 802f764:	dd03      	ble.n	802f76e <Adc_Power+0xbe>
 802f766:	2005      	movs	r0, #5
 802f768:	f7fc ffca 	bl	802c700 <LCDBattery>
 802f76c:	e03b      	b.n	802f7e6 <Adc_Power+0x136>
        else if ( 2400 < adc_pwr && adc_pwr <= 2450 )   LCDBattery( 4 );
 802f76e:	687b      	ldr	r3, [r7, #4]
 802f770:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 802f774:	dd08      	ble.n	802f788 <Adc_Power+0xd8>
 802f776:	687b      	ldr	r3, [r7, #4]
 802f778:	f640 1292 	movw	r2, #2450	; 0x992
 802f77c:	4293      	cmp	r3, r2
 802f77e:	dc03      	bgt.n	802f788 <Adc_Power+0xd8>
 802f780:	2004      	movs	r0, #4
 802f782:	f7fc ffbd 	bl	802c700 <LCDBattery>
 802f786:	e02e      	b.n	802f7e6 <Adc_Power+0x136>
        else if ( 2350 < adc_pwr && adc_pwr <= 2400 )   LCDBattery( 3 );
 802f788:	687b      	ldr	r3, [r7, #4]
 802f78a:	f640 122e 	movw	r2, #2350	; 0x92e
 802f78e:	4293      	cmp	r3, r2
 802f790:	dd07      	ble.n	802f7a2 <Adc_Power+0xf2>
 802f792:	687b      	ldr	r3, [r7, #4]
 802f794:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 802f798:	dc03      	bgt.n	802f7a2 <Adc_Power+0xf2>
 802f79a:	2003      	movs	r0, #3
 802f79c:	f7fc ffb0 	bl	802c700 <LCDBattery>
 802f7a0:	e021      	b.n	802f7e6 <Adc_Power+0x136>
        else if ( 2200 < adc_pwr && adc_pwr <= 2350 )   LCDBattery( 2 );
 802f7a2:	687b      	ldr	r3, [r7, #4]
 802f7a4:	f640 0298 	movw	r2, #2200	; 0x898
 802f7a8:	4293      	cmp	r3, r2
 802f7aa:	dd08      	ble.n	802f7be <Adc_Power+0x10e>
 802f7ac:	687b      	ldr	r3, [r7, #4]
 802f7ae:	f640 122e 	movw	r2, #2350	; 0x92e
 802f7b2:	4293      	cmp	r3, r2
 802f7b4:	dc03      	bgt.n	802f7be <Adc_Power+0x10e>
 802f7b6:	2002      	movs	r0, #2
 802f7b8:	f7fc ffa2 	bl	802c700 <LCDBattery>
 802f7bc:	e013      	b.n	802f7e6 <Adc_Power+0x136>
        else if ( 1000 < adc_pwr && adc_pwr <= 2200 )   LCDBattery( 1 );
 802f7be:	687b      	ldr	r3, [r7, #4]
 802f7c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802f7c4:	dd08      	ble.n	802f7d8 <Adc_Power+0x128>
 802f7c6:	687b      	ldr	r3, [r7, #4]
 802f7c8:	f640 0298 	movw	r2, #2200	; 0x898
 802f7cc:	4293      	cmp	r3, r2
 802f7ce:	dc03      	bgt.n	802f7d8 <Adc_Power+0x128>
 802f7d0:	2001      	movs	r0, #1
 802f7d2:	f7fc ff95 	bl	802c700 <LCDBattery>
 802f7d6:	e006      	b.n	802f7e6 <Adc_Power+0x136>
        else if ( adc_pwr <= 1000 )                     LCDBattery( 0 );
 802f7d8:	687b      	ldr	r3, [r7, #4]
 802f7da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802f7de:	dc02      	bgt.n	802f7e6 <Adc_Power+0x136>
 802f7e0:	2000      	movs	r0, #0
 802f7e2:	f7fc ff8d 	bl	802c700 <LCDBattery>
    }

    old_adc_pwr = adc_pwr;
 802f7e6:	4a07      	ldr	r2, [pc, #28]	; (802f804 <Adc_Power+0x154>)
 802f7e8:	687b      	ldr	r3, [r7, #4]
 802f7ea:	6013      	str	r3, [r2, #0]
}
 802f7ec:	bf00      	nop
 802f7ee:	3708      	adds	r7, #8
 802f7f0:	46bd      	mov	sp, r7
 802f7f2:	bd80      	pop	{r7, pc}
 802f7f4:	20000de4 	.word	0x20000de4
 802f7f8:	40020800 	.word	0x40020800
 802f7fc:	200017a4 	.word	0x200017a4
 802f800:	40020400 	.word	0x40020400
 802f804:	20000500 	.word	0x20000500

0802f808 <LoopProcAdc>:

//========================================================================
void LoopProcAdc( int nTick )
//========================================================================
{
 802f808:	b580      	push	{r7, lr}
 802f80a:	b082      	sub	sp, #8
 802f80c:	af00      	add	r7, sp, #0
 802f80e:	6078      	str	r0, [r7, #4]
	//  ADC_Power
	//  Normal Mode 일때 Battery 체크.
	//	RSSI 수신감도 체크.
	static int oldTick = 0;

	if ( nTick - oldTick > 1000 )
 802f810:	4b0a      	ldr	r3, [pc, #40]	; (802f83c <LoopProcAdc+0x34>)
 802f812:	681b      	ldr	r3, [r3, #0]
 802f814:	687a      	ldr	r2, [r7, #4]
 802f816:	1ad3      	subs	r3, r2, r3
 802f818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802f81c:	dd09      	ble.n	802f832 <LoopProcAdc+0x2a>
	{
		//  Period : 1 sec
		if ( GetRFMMode() == RFMModeNormal )
 802f81e:	f002 ff73 	bl	8032708 <GetRFMMode>
 802f822:	4603      	mov	r3, r0
 802f824:	2b00      	cmp	r3, #0
 802f826:	d101      	bne.n	802f82c <LoopProcAdc+0x24>
		{
			Adc_Power();
 802f828:	f7ff ff42 	bl	802f6b0 <Adc_Power>
		}

		oldTick = nTick;
 802f82c:	4a03      	ldr	r2, [pc, #12]	; (802f83c <LoopProcAdc+0x34>)
 802f82e:	687b      	ldr	r3, [r7, #4]
 802f830:	6013      	str	r3, [r2, #0]
	}
}
 802f832:	bf00      	nop
 802f834:	3708      	adds	r7, #8
 802f836:	46bd      	mov	sp, r7
 802f838:	bd80      	pop	{r7, pc}
 802f83a:	bf00      	nop
 802f83c:	200017a8 	.word	0x200017a8

0802f840 <ADPCM_ClearEncodeBuf>:
static int32_t predsampleDec 	= 	0;

//========================================================================

void	ADPCM_ClearEncodeBuf( void )
{
 802f840:	b480      	push	{r7}
 802f842:	af00      	add	r7, sp, #0
	indexEn 		= 	0;
 802f844:	4b05      	ldr	r3, [pc, #20]	; (802f85c <ADPCM_ClearEncodeBuf+0x1c>)
 802f846:	2200      	movs	r2, #0
 802f848:	801a      	strh	r2, [r3, #0]
	predsampleEn 	= 	0;
 802f84a:	4b05      	ldr	r3, [pc, #20]	; (802f860 <ADPCM_ClearEncodeBuf+0x20>)
 802f84c:	2200      	movs	r2, #0
 802f84e:	601a      	str	r2, [r3, #0]
}
 802f850:	bf00      	nop
 802f852:	46bd      	mov	sp, r7
 802f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f858:	4770      	bx	lr
 802f85a:	bf00      	nop
 802f85c:	200017ac 	.word	0x200017ac
 802f860:	200017b0 	.word	0x200017b0

0802f864 <ADPCM_ClearDecodeBuf>:

void	ADPCM_ClearDecodeBuf( void )
{
 802f864:	b480      	push	{r7}
 802f866:	af00      	add	r7, sp, #0
	indexDec 		= 	0;
 802f868:	4b05      	ldr	r3, [pc, #20]	; (802f880 <ADPCM_ClearDecodeBuf+0x1c>)
 802f86a:	2200      	movs	r2, #0
 802f86c:	801a      	strh	r2, [r3, #0]
	predsampleDec 	= 	0;
 802f86e:	4b05      	ldr	r3, [pc, #20]	; (802f884 <ADPCM_ClearDecodeBuf+0x20>)
 802f870:	2200      	movs	r2, #0
 802f872:	601a      	str	r2, [r3, #0]
}
 802f874:	bf00      	nop
 802f876:	46bd      	mov	sp, r7
 802f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f87c:	4770      	bx	lr
 802f87e:	bf00      	nop
 802f880:	200017b4 	.word	0x200017b4
 802f884:	200017b8 	.word	0x200017b8

0802f888 <ADPCM_Encode>:
  * @brief  ADPCM_Encode.
  * @param sample: a 16-bit PCM sample
  * @retval : a 4-bit ADPCM sample
  */
uint8_t ADPCM_Encode(int32_t sample)
{
 802f888:	b480      	push	{r7}
 802f88a:	b087      	sub	sp, #28
 802f88c:	af00      	add	r7, sp, #0
 802f88e:	6078      	str	r0, [r7, #4]
  uint8_t code=0;
 802f890:	2300      	movs	r3, #0
 802f892:	75fb      	strb	r3, [r7, #23]
  uint16_t tmpstep=0;
 802f894:	2300      	movs	r3, #0
 802f896:	817b      	strh	r3, [r7, #10]
  int32_t diff=0;
 802f898:	2300      	movs	r3, #0
 802f89a:	613b      	str	r3, [r7, #16]
  int32_t diffq=0;
 802f89c:	2300      	movs	r3, #0
 802f89e:	60fb      	str	r3, [r7, #12]
  uint16_t step=0;
 802f8a0:	2300      	movs	r3, #0
 802f8a2:	813b      	strh	r3, [r7, #8]
  
  step = StepSizeTable[indexEn];
 802f8a4:	4b4f      	ldr	r3, [pc, #316]	; (802f9e4 <ADPCM_Encode+0x15c>)
 802f8a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 802f8aa:	461a      	mov	r2, r3
 802f8ac:	4b4e      	ldr	r3, [pc, #312]	; (802f9e8 <ADPCM_Encode+0x160>)
 802f8ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802f8b2:	813b      	strh	r3, [r7, #8]

  /* 2. compute diff and record sign and absolut value */
  diff = sample - predsampleEn;
 802f8b4:	4b4d      	ldr	r3, [pc, #308]	; (802f9ec <ADPCM_Encode+0x164>)
 802f8b6:	681b      	ldr	r3, [r3, #0]
 802f8b8:	687a      	ldr	r2, [r7, #4]
 802f8ba:	1ad3      	subs	r3, r2, r3
 802f8bc:	613b      	str	r3, [r7, #16]
  if (diff < 0)  
 802f8be:	693b      	ldr	r3, [r7, #16]
 802f8c0:	2b00      	cmp	r3, #0
 802f8c2:	da04      	bge.n	802f8ce <ADPCM_Encode+0x46>
  {
    code=8;
 802f8c4:	2308      	movs	r3, #8
 802f8c6:	75fb      	strb	r3, [r7, #23]
    diff = -diff;
 802f8c8:	693b      	ldr	r3, [r7, #16]
 802f8ca:	425b      	negs	r3, r3
 802f8cc:	613b      	str	r3, [r7, #16]
  }    
  
  /* 3. quantize the diff into ADPCM code */
  /* 4. inverse quantize the code into a predicted diff */
  tmpstep = step;
 802f8ce:	893b      	ldrh	r3, [r7, #8]
 802f8d0:	817b      	strh	r3, [r7, #10]
  diffq = (step >> 3);
 802f8d2:	893b      	ldrh	r3, [r7, #8]
 802f8d4:	08db      	lsrs	r3, r3, #3
 802f8d6:	b29b      	uxth	r3, r3
 802f8d8:	60fb      	str	r3, [r7, #12]

  if (diff >= tmpstep)
 802f8da:	897b      	ldrh	r3, [r7, #10]
 802f8dc:	693a      	ldr	r2, [r7, #16]
 802f8de:	429a      	cmp	r2, r3
 802f8e0:	db0b      	blt.n	802f8fa <ADPCM_Encode+0x72>
  {
    code |= 0x04;
 802f8e2:	7dfb      	ldrb	r3, [r7, #23]
 802f8e4:	f043 0304 	orr.w	r3, r3, #4
 802f8e8:	75fb      	strb	r3, [r7, #23]
    diff -= tmpstep;
 802f8ea:	897b      	ldrh	r3, [r7, #10]
 802f8ec:	693a      	ldr	r2, [r7, #16]
 802f8ee:	1ad3      	subs	r3, r2, r3
 802f8f0:	613b      	str	r3, [r7, #16]
    diffq += step;
 802f8f2:	893b      	ldrh	r3, [r7, #8]
 802f8f4:	68fa      	ldr	r2, [r7, #12]
 802f8f6:	4413      	add	r3, r2
 802f8f8:	60fb      	str	r3, [r7, #12]
  }
  
  tmpstep = tmpstep >> 1;
 802f8fa:	897b      	ldrh	r3, [r7, #10]
 802f8fc:	085b      	lsrs	r3, r3, #1
 802f8fe:	817b      	strh	r3, [r7, #10]

  if (diff >= tmpstep)
 802f900:	897b      	ldrh	r3, [r7, #10]
 802f902:	693a      	ldr	r2, [r7, #16]
 802f904:	429a      	cmp	r2, r3
 802f906:	db0e      	blt.n	802f926 <ADPCM_Encode+0x9e>
  {
    code |= 0x02;
 802f908:	7dfb      	ldrb	r3, [r7, #23]
 802f90a:	f043 0302 	orr.w	r3, r3, #2
 802f90e:	75fb      	strb	r3, [r7, #23]
    diff -= tmpstep;
 802f910:	897b      	ldrh	r3, [r7, #10]
 802f912:	693a      	ldr	r2, [r7, #16]
 802f914:	1ad3      	subs	r3, r2, r3
 802f916:	613b      	str	r3, [r7, #16]
    diffq+=(step >> 1);
 802f918:	893b      	ldrh	r3, [r7, #8]
 802f91a:	085b      	lsrs	r3, r3, #1
 802f91c:	b29b      	uxth	r3, r3
 802f91e:	461a      	mov	r2, r3
 802f920:	68fb      	ldr	r3, [r7, #12]
 802f922:	4413      	add	r3, r2
 802f924:	60fb      	str	r3, [r7, #12]
  }
  
  tmpstep = tmpstep >> 1;
 802f926:	897b      	ldrh	r3, [r7, #10]
 802f928:	085b      	lsrs	r3, r3, #1
 802f92a:	817b      	strh	r3, [r7, #10]
  
  if (diff >= tmpstep)
 802f92c:	897b      	ldrh	r3, [r7, #10]
 802f92e:	693a      	ldr	r2, [r7, #16]
 802f930:	429a      	cmp	r2, r3
 802f932:	db0a      	blt.n	802f94a <ADPCM_Encode+0xc2>
  {
    code |=0x01;
 802f934:	7dfb      	ldrb	r3, [r7, #23]
 802f936:	f043 0301 	orr.w	r3, r3, #1
 802f93a:	75fb      	strb	r3, [r7, #23]
    diffq+=(step >> 2);
 802f93c:	893b      	ldrh	r3, [r7, #8]
 802f93e:	089b      	lsrs	r3, r3, #2
 802f940:	b29b      	uxth	r3, r3
 802f942:	461a      	mov	r2, r3
 802f944:	68fb      	ldr	r3, [r7, #12]
 802f946:	4413      	add	r3, r2
 802f948:	60fb      	str	r3, [r7, #12]
  }
  
  /* 5. fixed predictor to get new predicted sample*/
  if (code & 8)
 802f94a:	7dfb      	ldrb	r3, [r7, #23]
 802f94c:	f003 0308 	and.w	r3, r3, #8
 802f950:	2b00      	cmp	r3, #0
 802f952:	d006      	beq.n	802f962 <ADPCM_Encode+0xda>
  {
	  predsampleEn -= diffq;
 802f954:	4b25      	ldr	r3, [pc, #148]	; (802f9ec <ADPCM_Encode+0x164>)
 802f956:	681a      	ldr	r2, [r3, #0]
 802f958:	68fb      	ldr	r3, [r7, #12]
 802f95a:	1ad3      	subs	r3, r2, r3
 802f95c:	4a23      	ldr	r2, [pc, #140]	; (802f9ec <ADPCM_Encode+0x164>)
 802f95e:	6013      	str	r3, [r2, #0]
 802f960:	e005      	b.n	802f96e <ADPCM_Encode+0xe6>
  }
  else
  {
	  predsampleEn += diffq;
 802f962:	4b22      	ldr	r3, [pc, #136]	; (802f9ec <ADPCM_Encode+0x164>)
 802f964:	681a      	ldr	r2, [r3, #0]
 802f966:	68fb      	ldr	r3, [r7, #12]
 802f968:	4413      	add	r3, r2
 802f96a:	4a20      	ldr	r2, [pc, #128]	; (802f9ec <ADPCM_Encode+0x164>)
 802f96c:	6013      	str	r3, [r2, #0]
  }  

  /* check for overflow*/
  if (predsampleEn > 32767)
 802f96e:	4b1f      	ldr	r3, [pc, #124]	; (802f9ec <ADPCM_Encode+0x164>)
 802f970:	681b      	ldr	r3, [r3, #0]
 802f972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f976:	db04      	blt.n	802f982 <ADPCM_Encode+0xfa>
  {
	  predsampleEn = 32767;
 802f978:	4b1c      	ldr	r3, [pc, #112]	; (802f9ec <ADPCM_Encode+0x164>)
 802f97a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802f97e:	601a      	str	r2, [r3, #0]
 802f980:	e007      	b.n	802f992 <ADPCM_Encode+0x10a>
  }
  else if (predsampleEn < -32768)
 802f982:	4b1a      	ldr	r3, [pc, #104]	; (802f9ec <ADPCM_Encode+0x164>)
 802f984:	681b      	ldr	r3, [r3, #0]
 802f986:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802f98a:	da02      	bge.n	802f992 <ADPCM_Encode+0x10a>
  {
	  predsampleEn = -32768;
 802f98c:	4b17      	ldr	r3, [pc, #92]	; (802f9ec <ADPCM_Encode+0x164>)
 802f98e:	4a18      	ldr	r2, [pc, #96]	; (802f9f0 <ADPCM_Encode+0x168>)
 802f990:	601a      	str	r2, [r3, #0]
  }
  
  /* 6. find new stepsize index */
  indexEn += IndexTable[code];
 802f992:	7dfb      	ldrb	r3, [r7, #23]
 802f994:	4a17      	ldr	r2, [pc, #92]	; (802f9f4 <ADPCM_Encode+0x16c>)
 802f996:	56d3      	ldrsb	r3, [r2, r3]
 802f998:	b29a      	uxth	r2, r3
 802f99a:	4b12      	ldr	r3, [pc, #72]	; (802f9e4 <ADPCM_Encode+0x15c>)
 802f99c:	f9b3 3000 	ldrsh.w	r3, [r3]
 802f9a0:	b29b      	uxth	r3, r3
 802f9a2:	4413      	add	r3, r2
 802f9a4:	b29b      	uxth	r3, r3
 802f9a6:	b21a      	sxth	r2, r3
 802f9a8:	4b0e      	ldr	r3, [pc, #56]	; (802f9e4 <ADPCM_Encode+0x15c>)
 802f9aa:	801a      	strh	r2, [r3, #0]
  /* check for overflow*/
  if (indexEn <0)
 802f9ac:	4b0d      	ldr	r3, [pc, #52]	; (802f9e4 <ADPCM_Encode+0x15c>)
 802f9ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 802f9b2:	2b00      	cmp	r3, #0
 802f9b4:	da03      	bge.n	802f9be <ADPCM_Encode+0x136>
  {
	  indexEn = 0;
 802f9b6:	4b0b      	ldr	r3, [pc, #44]	; (802f9e4 <ADPCM_Encode+0x15c>)
 802f9b8:	2200      	movs	r2, #0
 802f9ba:	801a      	strh	r2, [r3, #0]
 802f9bc:	e007      	b.n	802f9ce <ADPCM_Encode+0x146>
  }
  else if (indexEn > 88)
 802f9be:	4b09      	ldr	r3, [pc, #36]	; (802f9e4 <ADPCM_Encode+0x15c>)
 802f9c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 802f9c4:	2b58      	cmp	r3, #88	; 0x58
 802f9c6:	dd02      	ble.n	802f9ce <ADPCM_Encode+0x146>
  {
	  indexEn = 88;
 802f9c8:	4b06      	ldr	r3, [pc, #24]	; (802f9e4 <ADPCM_Encode+0x15c>)
 802f9ca:	2258      	movs	r2, #88	; 0x58
 802f9cc:	801a      	strh	r2, [r3, #0]
  }
  
  /* 8. return new ADPCM code*/
  return (code & 0x0f);
 802f9ce:	7dfb      	ldrb	r3, [r7, #23]
 802f9d0:	f003 030f 	and.w	r3, r3, #15
 802f9d4:	b2db      	uxtb	r3, r3
}
 802f9d6:	4618      	mov	r0, r3
 802f9d8:	371c      	adds	r7, #28
 802f9da:	46bd      	mov	sp, r7
 802f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f9e0:	4770      	bx	lr
 802f9e2:	bf00      	nop
 802f9e4:	200017ac 	.word	0x200017ac
 802f9e8:	08041468 	.word	0x08041468
 802f9ec:	200017b0 	.word	0x200017b0
 802f9f0:	ffff8000 	.word	0xffff8000
 802f9f4:	0804151c 	.word	0x0804151c

0802f9f8 <ADPCM_Decode>:
  * @brief  ADPCM_Decode.
  * @param code: a byte containing a 4-bit ADPCM sample. 
  * @retval : 16-bit ADPCM sample
  */
int16_t ADPCM_Decode(uint8_t code)
{
 802f9f8:	b480      	push	{r7}
 802f9fa:	b085      	sub	sp, #20
 802f9fc:	af00      	add	r7, sp, #0
 802f9fe:	4603      	mov	r3, r0
 802fa00:	71fb      	strb	r3, [r7, #7]
  uint16_t step=0;
 802fa02:	2300      	movs	r3, #0
 802fa04:	817b      	strh	r3, [r7, #10]
  int32_t diffq=0;
 802fa06:	2300      	movs	r3, #0
 802fa08:	60fb      	str	r3, [r7, #12]
  
  step = StepSizeTable[indexDec];
 802fa0a:	4b3b      	ldr	r3, [pc, #236]	; (802faf8 <ADPCM_Decode+0x100>)
 802fa0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 802fa10:	461a      	mov	r2, r3
 802fa12:	4b3a      	ldr	r3, [pc, #232]	; (802fafc <ADPCM_Decode+0x104>)
 802fa14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802fa18:	817b      	strh	r3, [r7, #10]

  /* 2. inverse code into diff */
  diffq = step>> 3;
 802fa1a:	897b      	ldrh	r3, [r7, #10]
 802fa1c:	08db      	lsrs	r3, r3, #3
 802fa1e:	b29b      	uxth	r3, r3
 802fa20:	60fb      	str	r3, [r7, #12]
  if (code&4)
 802fa22:	79fb      	ldrb	r3, [r7, #7]
 802fa24:	f003 0304 	and.w	r3, r3, #4
 802fa28:	2b00      	cmp	r3, #0
 802fa2a:	d003      	beq.n	802fa34 <ADPCM_Decode+0x3c>
  {
    diffq += step;
 802fa2c:	897b      	ldrh	r3, [r7, #10]
 802fa2e:	68fa      	ldr	r2, [r7, #12]
 802fa30:	4413      	add	r3, r2
 802fa32:	60fb      	str	r3, [r7, #12]
  }
  
  if (code&2)
 802fa34:	79fb      	ldrb	r3, [r7, #7]
 802fa36:	f003 0302 	and.w	r3, r3, #2
 802fa3a:	2b00      	cmp	r3, #0
 802fa3c:	d006      	beq.n	802fa4c <ADPCM_Decode+0x54>
  {
    diffq += step>>1;
 802fa3e:	897b      	ldrh	r3, [r7, #10]
 802fa40:	085b      	lsrs	r3, r3, #1
 802fa42:	b29b      	uxth	r3, r3
 802fa44:	461a      	mov	r2, r3
 802fa46:	68fb      	ldr	r3, [r7, #12]
 802fa48:	4413      	add	r3, r2
 802fa4a:	60fb      	str	r3, [r7, #12]
  }
  
  if (code&1)
 802fa4c:	79fb      	ldrb	r3, [r7, #7]
 802fa4e:	f003 0301 	and.w	r3, r3, #1
 802fa52:	2b00      	cmp	r3, #0
 802fa54:	d006      	beq.n	802fa64 <ADPCM_Decode+0x6c>
  {
    diffq += step>>2;
 802fa56:	897b      	ldrh	r3, [r7, #10]
 802fa58:	089b      	lsrs	r3, r3, #2
 802fa5a:	b29b      	uxth	r3, r3
 802fa5c:	461a      	mov	r2, r3
 802fa5e:	68fb      	ldr	r3, [r7, #12]
 802fa60:	4413      	add	r3, r2
 802fa62:	60fb      	str	r3, [r7, #12]
  }

  /* 3. add diff to predicted sample*/
  if (code&8)
 802fa64:	79fb      	ldrb	r3, [r7, #7]
 802fa66:	f003 0308 	and.w	r3, r3, #8
 802fa6a:	2b00      	cmp	r3, #0
 802fa6c:	d006      	beq.n	802fa7c <ADPCM_Decode+0x84>
  {
	  predsampleDec -= diffq;
 802fa6e:	4b24      	ldr	r3, [pc, #144]	; (802fb00 <ADPCM_Decode+0x108>)
 802fa70:	681a      	ldr	r2, [r3, #0]
 802fa72:	68fb      	ldr	r3, [r7, #12]
 802fa74:	1ad3      	subs	r3, r2, r3
 802fa76:	4a22      	ldr	r2, [pc, #136]	; (802fb00 <ADPCM_Decode+0x108>)
 802fa78:	6013      	str	r3, [r2, #0]
 802fa7a:	e005      	b.n	802fa88 <ADPCM_Decode+0x90>
  }
  else
  {
	  predsampleDec += diffq;
 802fa7c:	4b20      	ldr	r3, [pc, #128]	; (802fb00 <ADPCM_Decode+0x108>)
 802fa7e:	681a      	ldr	r2, [r3, #0]
 802fa80:	68fb      	ldr	r3, [r7, #12]
 802fa82:	4413      	add	r3, r2
 802fa84:	4a1e      	ldr	r2, [pc, #120]	; (802fb00 <ADPCM_Decode+0x108>)
 802fa86:	6013      	str	r3, [r2, #0]
  }
  
  /* check for overflow*/
  if (predsampleDec > 32767)
 802fa88:	4b1d      	ldr	r3, [pc, #116]	; (802fb00 <ADPCM_Decode+0x108>)
 802fa8a:	681b      	ldr	r3, [r3, #0]
 802fa8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802fa90:	db04      	blt.n	802fa9c <ADPCM_Decode+0xa4>
  {
	  predsampleDec = 32767;
 802fa92:	4b1b      	ldr	r3, [pc, #108]	; (802fb00 <ADPCM_Decode+0x108>)
 802fa94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802fa98:	601a      	str	r2, [r3, #0]
 802fa9a:	e007      	b.n	802faac <ADPCM_Decode+0xb4>
  }
  else if (predsampleDec < -32768)
 802fa9c:	4b18      	ldr	r3, [pc, #96]	; (802fb00 <ADPCM_Decode+0x108>)
 802fa9e:	681b      	ldr	r3, [r3, #0]
 802faa0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802faa4:	da02      	bge.n	802faac <ADPCM_Decode+0xb4>
  {
	  predsampleDec = -32768;
 802faa6:	4b16      	ldr	r3, [pc, #88]	; (802fb00 <ADPCM_Decode+0x108>)
 802faa8:	4a16      	ldr	r2, [pc, #88]	; (802fb04 <ADPCM_Decode+0x10c>)
 802faaa:	601a      	str	r2, [r3, #0]
  }

  /* 4. find new quantizer step size */
  indexDec += IndexTable [code];
 802faac:	79fb      	ldrb	r3, [r7, #7]
 802faae:	4a16      	ldr	r2, [pc, #88]	; (802fb08 <ADPCM_Decode+0x110>)
 802fab0:	56d3      	ldrsb	r3, [r2, r3]
 802fab2:	b29a      	uxth	r2, r3
 802fab4:	4b10      	ldr	r3, [pc, #64]	; (802faf8 <ADPCM_Decode+0x100>)
 802fab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 802faba:	b29b      	uxth	r3, r3
 802fabc:	4413      	add	r3, r2
 802fabe:	b29b      	uxth	r3, r3
 802fac0:	b21a      	sxth	r2, r3
 802fac2:	4b0d      	ldr	r3, [pc, #52]	; (802faf8 <ADPCM_Decode+0x100>)
 802fac4:	801a      	strh	r2, [r3, #0]
  /* check for overflow*/
  if (indexDec < 0)
 802fac6:	4b0c      	ldr	r3, [pc, #48]	; (802faf8 <ADPCM_Decode+0x100>)
 802fac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 802facc:	2b00      	cmp	r3, #0
 802face:	da02      	bge.n	802fad6 <ADPCM_Decode+0xde>
  {
	  indexDec = 0;
 802fad0:	4b09      	ldr	r3, [pc, #36]	; (802faf8 <ADPCM_Decode+0x100>)
 802fad2:	2200      	movs	r2, #0
 802fad4:	801a      	strh	r2, [r3, #0]
  }
  if (indexDec > 88)
 802fad6:	4b08      	ldr	r3, [pc, #32]	; (802faf8 <ADPCM_Decode+0x100>)
 802fad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 802fadc:	2b58      	cmp	r3, #88	; 0x58
 802fade:	dd02      	ble.n	802fae6 <ADPCM_Decode+0xee>
  {
	  indexDec = 88;
 802fae0:	4b05      	ldr	r3, [pc, #20]	; (802faf8 <ADPCM_Decode+0x100>)
 802fae2:	2258      	movs	r2, #88	; 0x58
 802fae4:	801a      	strh	r2, [r3, #0]
  
  /* 5. save predict sample and index for next iteration */
  /* done! static variables */
  
  /* 6. return new speech sample*/
  return ((int16_t)predsampleDec);
 802fae6:	4b06      	ldr	r3, [pc, #24]	; (802fb00 <ADPCM_Decode+0x108>)
 802fae8:	681b      	ldr	r3, [r3, #0]
 802faea:	b21b      	sxth	r3, r3
}
 802faec:	4618      	mov	r0, r3
 802faee:	3714      	adds	r7, #20
 802faf0:	46bd      	mov	sp, r7
 802faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802faf6:	4770      	bx	lr
 802faf8:	200017b4 	.word	0x200017b4
 802fafc:	08041468 	.word	0x08041468
 802fb00:	200017b8 	.word	0x200017b8
 802fb04:	ffff8000 	.word	0xffff8000
 802fb08:	0804151c 	.word	0x0804151c

0802fb0c <AudioInit>:
// Function

//========================================================================
void AudioInit( void )
//========================================================================
{
 802fb0c:	b580      	push	{r7, lr}
 802fb0e:	b086      	sub	sp, #24
 802fb10:	af02      	add	r7, sp, #8
//DEL	printf( "%s(%d)\n", __func__, __LINE__ );

	//	pAudioTable = sine_table;
	//========================================================================
	//	Init RF Audio Rx Buffer
	qBufInit( &g_qBufAudioRx, (uint8_t *)g_bufAudioRx, ( I2S_DMA_LOOP_SIZE * 2 ) * I2S_DMA_LOOP_QCNT );
 802fb12:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 802fb16:	4919      	ldr	r1, [pc, #100]	; (802fb7c <AudioInit+0x70>)
 802fb18:	4819      	ldr	r0, [pc, #100]	; (802fb80 <AudioInit+0x74>)
 802fb1a:	f7fe fb72 	bl	802e202 <qBufInit>
	qBufInit( &g_qBufAudioTx, (uint8_t *)g_bufAudioTx, ( I2S_DMA_LOOP_SIZE * 2 ) * I2S_DMA_LOOP_QCNT );
 802fb1e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 802fb22:	4918      	ldr	r1, [pc, #96]	; (802fb84 <AudioInit+0x78>)
 802fb24:	4818      	ldr	r0, [pc, #96]	; (802fb88 <AudioInit+0x7c>)
 802fb26:	f7fe fb6c 	bl	802e202 <qBufInit>

	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)sine_table, (uint16_t*)bufAudio, 256 );
 802fb2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802fb2e:	4a17      	ldr	r2, [pc, #92]	; (802fb8c <AudioInit+0x80>)
 802fb30:	4917      	ldr	r1, [pc, #92]	; (802fb90 <AudioInit+0x84>)
 802fb32:	4818      	ldr	r0, [pc, #96]	; (802fb94 <AudioInit+0x88>)
 802fb34:	f7f5 f9f2 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>

	int i;
	int index;

	index = 0;
 802fb38:	2300      	movs	r3, #0
 802fb3a:	60fb      	str	r3, [r7, #12]

	//	sine table copy
	memcpy( speex_sine_table, sine_table, 160 * 2 );
 802fb3c:	4a16      	ldr	r2, [pc, #88]	; (802fb98 <AudioInit+0x8c>)
 802fb3e:	4b14      	ldr	r3, [pc, #80]	; (802fb90 <AudioInit+0x84>)
 802fb40:	4610      	mov	r0, r2
 802fb42:	4619      	mov	r1, r3
 802fb44:	f44f 73a0 	mov.w	r3, #320	; 0x140
 802fb48:	461a      	mov	r2, r3
 802fb4a:	f008 f819 	bl	8037b80 <memcpy>

	int tick_start, tick_end;

	tick_start = HAL_GetTick();
 802fb4e:	f7f2 f80b 	bl	8021b68 <HAL_GetTick>
 802fb52:	4603      	mov	r3, r0
 802fb54:	60bb      	str	r3, [r7, #8]

	tick_end = HAL_GetTick();
 802fb56:	f7f2 f807 	bl	8021b68 <HAL_GetTick>
 802fb5a:	4603      	mov	r3, r0
 802fb5c:	607b      	str	r3, [r7, #4]

	printf("%s : [%d] %d / %d\n", __func__, tick_end - tick_start, tick_start, tick_end);
 802fb5e:	687a      	ldr	r2, [r7, #4]
 802fb60:	68bb      	ldr	r3, [r7, #8]
 802fb62:	1ad2      	subs	r2, r2, r3
 802fb64:	687b      	ldr	r3, [r7, #4]
 802fb66:	9300      	str	r3, [sp, #0]
 802fb68:	68bb      	ldr	r3, [r7, #8]
 802fb6a:	490c      	ldr	r1, [pc, #48]	; (802fb9c <AudioInit+0x90>)
 802fb6c:	480c      	ldr	r0, [pc, #48]	; (802fba0 <AudioInit+0x94>)
 802fb6e:	f007 fc97 	bl	80374a0 <iprintf>

	//========================================================================
}
 802fb72:	bf00      	nop
 802fb74:	3710      	adds	r7, #16
 802fb76:	46bd      	mov	sp, r7
 802fb78:	bd80      	pop	{r7, pc}
 802fb7a:	bf00      	nop
 802fb7c:	20001d8c 	.word	0x20001d8c
 802fb80:	20001d7c 	.word	0x20001d7c
 802fb84:	20001f7c 	.word	0x20001f7c
 802fb88:	20001f6c 	.word	0x20001f6c
 802fb8c:	20001afc 	.word	0x20001afc
 802fb90:	20000504 	.word	0x20000504
 802fb94:	20000ed4 	.word	0x20000ed4
 802fb98:	200017bc 	.word	0x200017bc
 802fb9c:	0804152c 	.word	0x0804152c
 802fba0:	0803970c 	.word	0x0803970c

0802fba4 <AudioStop>:


//========================================================================
void AudioStop( void )
//========================================================================
{
 802fba4:	b580      	push	{r7, lr}
 802fba6:	af00      	add	r7, sp, #0
	SetCallbackI2STxRxCplt( NULL );
 802fba8:	2000      	movs	r0, #0
 802fbaa:	f000 f80f 	bl	802fbcc <SetCallbackI2STxRxCplt>
	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)null_table, (uint16_t*)bufAudio, 256 );
 802fbae:	f44f 7380 	mov.w	r3, #256	; 0x100
 802fbb2:	4a03      	ldr	r2, [pc, #12]	; (802fbc0 <AudioStop+0x1c>)
 802fbb4:	4903      	ldr	r1, [pc, #12]	; (802fbc4 <AudioStop+0x20>)
 802fbb6:	4804      	ldr	r0, [pc, #16]	; (802fbc8 <AudioStop+0x24>)
 802fbb8:	f7f5 f9b0 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>
}
 802fbbc:	bf00      	nop
 802fbbe:	bd80      	pop	{r7, pc}
 802fbc0:	20001afc 	.word	0x20001afc
 802fbc4:	200018fc 	.word	0x200018fc
 802fbc8:	20000ed4 	.word	0x20000ed4

0802fbcc <SetCallbackI2STxRxCplt>:


//========================================================================
void	SetCallbackI2STxRxCplt	( void ( *pCallbackTxRxCplt )( I2S_HandleTypeDef *hi2s ) )
//========================================================================
{
 802fbcc:	b480      	push	{r7}
 802fbce:	b083      	sub	sp, #12
 802fbd0:	af00      	add	r7, sp, #0
 802fbd2:	6078      	str	r0, [r7, #4]
	pCallback_I2SEx_TxRxCpltCallback = pCallbackTxRxCplt;
 802fbd4:	4a04      	ldr	r2, [pc, #16]	; (802fbe8 <SetCallbackI2STxRxCplt+0x1c>)
 802fbd6:	687b      	ldr	r3, [r7, #4]
 802fbd8:	6013      	str	r3, [r2, #0]
}
 802fbda:	bf00      	nop
 802fbdc:	370c      	adds	r7, #12
 802fbde:	46bd      	mov	sp, r7
 802fbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fbe4:	4770      	bx	lr
 802fbe6:	bf00      	nop
 802fbe8:	2000224c 	.word	0x2000224c

0802fbec <HAL_I2SEx_TxRxCpltCallback>:
  * @retval None
  */
//========================================================================
void HAL_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
//========================================================================
{
 802fbec:	b580      	push	{r7, lr}
 802fbee:	b082      	sub	sp, #8
 802fbf0:	af00      	add	r7, sp, #0
 802fbf2:	6078      	str	r0, [r7, #4]
			  the HAL_I2S_RxCpltCallback could be implemented in the user file
	 */

//	printf( "%s(%d)\n", __func__, __LINE__ );

	if ( pCallback_I2SEx_TxRxCpltCallback )
 802fbf4:	4b0b      	ldr	r3, [pc, #44]	; (802fc24 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 802fbf6:	681b      	ldr	r3, [r3, #0]
 802fbf8:	2b00      	cmp	r3, #0
 802fbfa:	d004      	beq.n	802fc06 <HAL_I2SEx_TxRxCpltCallback+0x1a>
	{
		pCallback_I2SEx_TxRxCpltCallback( hi2s );
 802fbfc:	4b09      	ldr	r3, [pc, #36]	; (802fc24 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 802fbfe:	681b      	ldr	r3, [r3, #0]
 802fc00:	6878      	ldr	r0, [r7, #4]
 802fc02:	4798      	blx	r3
		//	Default Loopback
		//	pAudioTable = sine_table;
		memcpy( (void *)&bufAudio[0], (void *)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE * 2 );
		HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE );
	}
}
 802fc04:	e00a      	b.n	802fc1c <HAL_I2SEx_TxRxCpltCallback+0x30>
		memcpy( (void *)&bufAudio[0], (void *)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE * 2 );
 802fc06:	223c      	movs	r2, #60	; 0x3c
 802fc08:	4907      	ldr	r1, [pc, #28]	; (802fc28 <HAL_I2SEx_TxRxCpltCallback+0x3c>)
 802fc0a:	4808      	ldr	r0, [pc, #32]	; (802fc2c <HAL_I2SEx_TxRxCpltCallback+0x40>)
 802fc0c:	f007 ffb8 	bl	8037b80 <memcpy>
		HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE );
 802fc10:	231e      	movs	r3, #30
 802fc12:	4a05      	ldr	r2, [pc, #20]	; (802fc28 <HAL_I2SEx_TxRxCpltCallback+0x3c>)
 802fc14:	4905      	ldr	r1, [pc, #20]	; (802fc2c <HAL_I2SEx_TxRxCpltCallback+0x40>)
 802fc16:	4806      	ldr	r0, [pc, #24]	; (802fc30 <HAL_I2SEx_TxRxCpltCallback+0x44>)
 802fc18:	f7f5 f980 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>
}
 802fc1c:	bf00      	nop
 802fc1e:	3708      	adds	r7, #8
 802fc20:	46bd      	mov	sp, r7
 802fc22:	bd80      	pop	{r7, pc}
 802fc24:	2000224c 	.word	0x2000224c
 802fc28:	20001b38 	.word	0x20001b38
 802fc2c:	20001afc 	.word	0x20001afc
 802fc30:	20000ed4 	.word	0x20000ed4

0802fc34 <SetAudioIC>:
int		g_nAudioIC = AudioNone;

//========================================================================
void SetAudioIC( int nAudioIC )
//========================================================================
{
 802fc34:	b480      	push	{r7}
 802fc36:	b083      	sub	sp, #12
 802fc38:	af00      	add	r7, sp, #0
 802fc3a:	6078      	str	r0, [r7, #4]
	g_nAudioIC = nAudioIC;
 802fc3c:	4a04      	ldr	r2, [pc, #16]	; (802fc50 <SetAudioIC+0x1c>)
 802fc3e:	687b      	ldr	r3, [r7, #4]
 802fc40:	6013      	str	r3, [r2, #0]
}
 802fc42:	bf00      	nop
 802fc44:	370c      	adds	r7, #12
 802fc46:	46bd      	mov	sp, r7
 802fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fc4c:	4770      	bx	lr
 802fc4e:	bf00      	nop
 802fc50:	20002250 	.word	0x20002250

0802fc54 <GetAudioIC>:

//========================================================================
int GetAudioIC( void )
//========================================================================
{
 802fc54:	b480      	push	{r7}
 802fc56:	af00      	add	r7, sp, #0
	return g_nAudioIC;
 802fc58:	4b03      	ldr	r3, [pc, #12]	; (802fc68 <GetAudioIC+0x14>)
 802fc5a:	681b      	ldr	r3, [r3, #0]
}
 802fc5c:	4618      	mov	r0, r3
 802fc5e:	46bd      	mov	sp, r7
 802fc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fc64:	4770      	bx	lr
 802fc66:	bf00      	nop
 802fc68:	20002250 	.word	0x20002250

0802fc6c <WriteI2CCodec>:
//========================================================================

//========================================================================
int WriteI2CCodec( uint8_t addr, uint8_t data )
//========================================================================
{
 802fc6c:	b580      	push	{r7, lr}
 802fc6e:	b08a      	sub	sp, #40	; 0x28
 802fc70:	af04      	add	r7, sp, #16
 802fc72:	4603      	mov	r3, r0
 802fc74:	460a      	mov	r2, r1
 802fc76:	71fb      	strb	r3, [r7, #7]
 802fc78:	4613      	mov	r3, r2
 802fc7a:	71bb      	strb	r3, [r7, #6]
	if ( GetAudioIC() != AudioMAX9860 )	return 0;
 802fc7c:	f7ff ffea 	bl	802fc54 <GetAudioIC>
 802fc80:	4603      	mov	r3, r0
 802fc82:	2b01      	cmp	r3, #1
 802fc84:	d001      	beq.n	802fc8a <WriteI2CCodec+0x1e>
 802fc86:	2300      	movs	r3, #0
 802fc88:	e029      	b.n	802fcde <WriteI2CCodec+0x72>

	int cntRetry;

	cntRetry = 0;
 802fc8a:	2300      	movs	r3, #0
 802fc8c:	617b      	str	r3, [r7, #20]

	char buf[10];
	memset( buf, 0, sizeof( buf ) );
 802fc8e:	f107 0308 	add.w	r3, r7, #8
 802fc92:	220a      	movs	r2, #10
 802fc94:	2100      	movs	r1, #0
 802fc96:	4618      	mov	r0, r3
 802fc98:	f007 fe64 	bl	8037964 <memset>
	buf[0] = data;
 802fc9c:	79bb      	ldrb	r3, [r7, #6]
 802fc9e:	723b      	strb	r3, [r7, #8]

	while ( HAL_I2C_Mem_Write( &hi2c1, (uint16_t)( 0x10 << 1 ), (uint16_t)addr, I2C_MEMADD_SIZE_8BIT, buf, (uint16_t)1, 1000 ) != HAL_OK && cntRetry < 10 ) cntRetry++;
 802fca0:	e002      	b.n	802fca8 <WriteI2CCodec+0x3c>
 802fca2:	697b      	ldr	r3, [r7, #20]
 802fca4:	3301      	adds	r3, #1
 802fca6:	617b      	str	r3, [r7, #20]
 802fca8:	79fb      	ldrb	r3, [r7, #7]
 802fcaa:	b29a      	uxth	r2, r3
 802fcac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802fcb0:	9302      	str	r3, [sp, #8]
 802fcb2:	2301      	movs	r3, #1
 802fcb4:	9301      	str	r3, [sp, #4]
 802fcb6:	f107 0308 	add.w	r3, r7, #8
 802fcba:	9300      	str	r3, [sp, #0]
 802fcbc:	2301      	movs	r3, #1
 802fcbe:	2120      	movs	r1, #32
 802fcc0:	4809      	ldr	r0, [pc, #36]	; (802fce8 <WriteI2CCodec+0x7c>)
 802fcc2:	f7f3 feb9 	bl	8023a38 <HAL_I2C_Mem_Write>
 802fcc6:	4603      	mov	r3, r0
 802fcc8:	2b00      	cmp	r3, #0
 802fcca:	d002      	beq.n	802fcd2 <WriteI2CCodec+0x66>
 802fccc:	697b      	ldr	r3, [r7, #20]
 802fcce:	2b09      	cmp	r3, #9
 802fcd0:	dde7      	ble.n	802fca2 <WriteI2CCodec+0x36>

	if ( cntRetry == 10 )   return 0;
 802fcd2:	697b      	ldr	r3, [r7, #20]
 802fcd4:	2b0a      	cmp	r3, #10
 802fcd6:	d101      	bne.n	802fcdc <WriteI2CCodec+0x70>
 802fcd8:	2300      	movs	r3, #0
 802fcda:	e000      	b.n	802fcde <WriteI2CCodec+0x72>
	else					return 1;
 802fcdc:	2301      	movs	r3, #1
}
 802fcde:	4618      	mov	r0, r3
 802fce0:	3718      	adds	r7, #24
 802fce2:	46bd      	mov	sp, r7
 802fce4:	bd80      	pop	{r7, pc}
 802fce6:	bf00      	nop
 802fce8:	20000e2c 	.word	0x20000e2c

0802fcec <InitCodecMAX9860>:

//========================================================================
void InitCodecMAX9860   ( void )
//========================================================================
{
 802fcec:	b580      	push	{r7, lr}
 802fcee:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 802fcf0:	f44f 7288 	mov.w	r2, #272	; 0x110
 802fcf4:	491e      	ldr	r1, [pc, #120]	; (802fd70 <InitCodecMAX9860+0x84>)
 802fcf6:	481f      	ldr	r0, [pc, #124]	; (802fd74 <InitCodecMAX9860+0x88>)
 802fcf8:	f007 fbd2 	bl	80374a0 <iprintf>

	SetAudioIC( AudioMAX9860 );
 802fcfc:	2001      	movs	r0, #1
 802fcfe:	f7ff ff99 	bl	802fc34 <SetAudioIC>
	//========================================================================
	//  Codec 초기화. ( MAX9860ETG+ )

	/*	Initialize the MAX9860 by setting registers	*/
	//	registers at 0x03, 0x04, and 0x05 are clock control registers
	WriteI2CCodec( 0X03, 0X12 );	//	PSCLK = 01, FREQ = 10(12MHz), 8KHz = 0 (LRCLK = 8KHz)
 802fd02:	2112      	movs	r1, #18
 802fd04:	2003      	movs	r0, #3
 802fd06:	f7ff ffb1 	bl	802fc6c <WriteI2CCodec>

	WriteI2CCodec( 0X04, NHI );	//	PLL =0,
 802fd0a:	21ff      	movs	r1, #255	; 0xff
 802fd0c:	2004      	movs	r0, #4
 802fd0e:	f7ff ffad 	bl	802fc6c <WriteI2CCodec>
	WriteI2CCodec( 0X05, NLO );
 802fd12:	219c      	movs	r1, #156	; 0x9c
 802fd14:	2005      	movs	r0, #5
 802fd16:	f7ff ffa9 	bl	802fc6c <WriteI2CCodec>

	//	WriteI2CCodec( 0X06, 0x2C );	//	MAS = 0, WCI = 0 (really not sure), DBCI = 1( Falling Edge SDIN ), DDLY = 0, HIZ = 1, TDM = 1, 
	//	WriteI2CCodec( 0X06, 0x24 );	//	MAS = 0, WCI = 0 (really not sure), DBCI = 1( Falling Edge SDIN ), DDLY = 0, HIZ = 0, TDM = 1, 
		//	Rising Edge
	WriteI2CCodec( 0X06, 0x04 );	//	MAS = 0, WCI = 0 (really not sure), DBCI = 0( Rising Edge SDIN ), DDLY = 0, HIZ = 0, TDM = 1, 
 802fd1a:	2104      	movs	r1, #4
 802fd1c:	2006      	movs	r0, #6
 802fd1e:	f7ff ffa5 	bl	802fc6c <WriteI2CCodec>
//sendTwoBytes(MAX9860, 0X07, 0x00);	//	ABCI = 0, ADLY = 0, ST = 0, BSEL = 000

//	WriteI2CCodec( 0X07, 0x20 );	//	ABCI = 1 ( Falling Edge SDOUT ), ADLY = 0, ST = 0, BSEL = 000

	//	Rising Edge
	WriteI2CCodec( 0X07, 0x00 );	//	ABCI = 0 ( Rising Edge SDOUT ), ADLY = 0, ST = 0, BSEL = 000
 802fd22:	2100      	movs	r1, #0
 802fd24:	2007      	movs	r0, #7
 802fd26:	f7ff ffa1 	bl	802fc6c <WriteI2CCodec>

	//	Digital filters
	WriteI2CCodec( 0x08, 0x00 );	//AVFLT = 0, DVFLT = 0 (not sure which filter would be best for this, choosing no filter)
 802fd2a:	2100      	movs	r1, #0
 802fd2c:	2008      	movs	r0, #8
 802fd2e:	f7ff ff9d 	bl	802fc6c <WriteI2CCodec>

	//	Digital level control registers
	//		Spk. Vol
	WriteI2CCodec( 0x09, 0x06 );	//0 DAC adjustment, this would require testing and/or a better understanding of the overall system
 802fd32:	2106      	movs	r1, #6
 802fd34:	2009      	movs	r0, #9
 802fd36:	f7ff ff99 	bl	802fc6c <WriteI2CCodec>
	WriteI2CCodec( 0x0A, 0x33 );	//both ADC's set to 0 adjustment, same reason as above AND mic not supported yet
 802fd3a:	2133      	movs	r1, #51	; 0x33
 802fd3c:	200a      	movs	r0, #10
 802fd3e:	f7ff ff95 	bl	802fc6c <WriteI2CCodec>
	WriteI2CCodec( 0x0B, 0x00 );	//no gain on DAC, unsure of DVST bits safer to disable
 802fd42:	2100      	movs	r1, #0
 802fd44:	200b      	movs	r0, #11
 802fd46:	f7ff ff91 	bl	802fc6c <WriteI2CCodec>

	//	microphone input register
//	WriteI2CCodec( 0x0c, 0x00 );	//I haven't set this up to allow microphones (make MAX9860 master, ARM slave)
//	WriteI2CCodec( 0x0c, 0x4A );	// PAM = 10(+20) / PGAM = 0x0A(+10)

	WriteI2CCodec( 0x0c, 0x2A );	// PAM = 01(+0) / PGAM = 0x0A(+10)
 802fd4a:	212a      	movs	r1, #42	; 0x2a
 802fd4c:	200c      	movs	r0, #12
 802fd4e:	f7ff ff8d 	bl	802fc6c <WriteI2CCodec>

//	WriteI2CCodec( 0x0c, 0x34 );	// PAM = 01(+0) / PGAM = 0x14(+0)

	//	AGC and Noise gate registers
//	WriteI2CCodec( 0x0E, 0x80 );	//sum of left & right noise gates for AGC & noise gate, AGCRLS shortest time, but AGC disabled since I am unsure of its need
	WriteI2CCodec( 0x0E, 0x00 );	//  Disable AGC
 802fd52:	2100      	movs	r1, #0
 802fd54:	200e      	movs	r0, #14
 802fd56:	f7ff ff89 	bl	802fc6c <WriteI2CCodec>
	WriteI2CCodec( 0x0F, 0x00 );	//Noise gate threshhold disabled, AGC signal threshhold -3bBFS
 802fd5a:	2100      	movs	r1, #0
 802fd5c:	200f      	movs	r0, #15
 802fd5e:	f7ff ff85 	bl	802fc6c <WriteI2CCodec>

	//	power management register
//	WriteI2CCodec( 0x10, 0x88 );	//powered on, DAC on, both ADC's off (since this is not set up for microphone input)
	WriteI2CCodec( 0x10, 0x8A );	//powered on, DAC on, both ADC(Left) Enable
 802fd62:	218a      	movs	r1, #138	; 0x8a
 802fd64:	2010      	movs	r0, #16
 802fd66:	f7ff ff81 	bl	802fc6c <WriteI2CCodec>
//	//	sine 파 출력 검사. ( I2S Data 영역 검사 )
//	WriteI2CCodec( 0x09, 0x36 );	//  0x0C ( -24 )

//	WriteI2CCodec( 0x09, 0x3E );	//  0x0C ( -28 )
//	WriteI2CCodec( 0x0B, 0x20 );	//  01 ( +6 dB )
}
 802fd6a:	bf00      	nop
 802fd6c:	bd80      	pop	{r7, pc}
 802fd6e:	bf00      	nop
 802fd70:	08041538 	.word	0x08041538
 802fd74:	08039720 	.word	0x08039720

0802fd78 <Default_I2SEx_TxRxCpltCallback>:

//========================================================================
void Default_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
//========================================================================
{
 802fd78:	b580      	push	{r7, lr}
 802fd7a:	b082      	sub	sp, #8
 802fd7c:	af00      	add	r7, sp, #0
 802fd7e:	6078      	str	r0, [r7, #4]
	//	printf( "%s(%d)\n", __func__, __LINE__ );

	//========================================================================
	//	Loopback
	memcpy( (void *)&bufAudio[0], (void *)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE * 2 );
 802fd80:	223c      	movs	r2, #60	; 0x3c
 802fd82:	4907      	ldr	r1, [pc, #28]	; (802fda0 <Default_I2SEx_TxRxCpltCallback+0x28>)
 802fd84:	4807      	ldr	r0, [pc, #28]	; (802fda4 <Default_I2SEx_TxRxCpltCallback+0x2c>)
 802fd86:	f007 fefb 	bl	8037b80 <memcpy>
	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE );
 802fd8a:	231e      	movs	r3, #30
 802fd8c:	4a04      	ldr	r2, [pc, #16]	; (802fda0 <Default_I2SEx_TxRxCpltCallback+0x28>)
 802fd8e:	4905      	ldr	r1, [pc, #20]	; (802fda4 <Default_I2SEx_TxRxCpltCallback+0x2c>)
 802fd90:	4805      	ldr	r0, [pc, #20]	; (802fda8 <Default_I2SEx_TxRxCpltCallback+0x30>)
 802fd92:	f7f5 f8c3 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>
}
 802fd96:	bf00      	nop
 802fd98:	3708      	adds	r7, #8
 802fd9a:	46bd      	mov	sp, r7
 802fd9c:	bd80      	pop	{r7, pc}
 802fd9e:	bf00      	nop
 802fda0:	20001b38 	.word	0x20001b38
 802fda4:	20001afc 	.word	0x20001afc
 802fda8:	20000ed4 	.word	0x20000ed4

0802fdac <AudioDMALoopback>:

//========================================================================
int	AudioDMALoopback( void )
//========================================================================
{
 802fdac:	b580      	push	{r7, lr}
 802fdae:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 802fdb0:	f240 1273 	movw	r2, #371	; 0x173
 802fdb4:	4907      	ldr	r1, [pc, #28]	; (802fdd4 <AudioDMALoopback+0x28>)
 802fdb6:	4808      	ldr	r0, [pc, #32]	; (802fdd8 <AudioDMALoopback+0x2c>)
 802fdb8:	f007 fb72 	bl	80374a0 <iprintf>

	SetCallbackI2STxRxCplt( Default_I2SEx_TxRxCpltCallback );
 802fdbc:	4807      	ldr	r0, [pc, #28]	; (802fddc <AudioDMALoopback+0x30>)
 802fdbe:	f7ff ff05 	bl	802fbcc <SetCallbackI2STxRxCplt>

	//	Speex ( 1 frame ) : 160 sample ( 320 bytes ) / 20 msec
	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[FRAME_SIZE], I2S_DMA_LOOP_SIZE );
 802fdc2:	231e      	movs	r3, #30
 802fdc4:	4a06      	ldr	r2, [pc, #24]	; (802fde0 <AudioDMALoopback+0x34>)
 802fdc6:	4907      	ldr	r1, [pc, #28]	; (802fde4 <AudioDMALoopback+0x38>)
 802fdc8:	4807      	ldr	r0, [pc, #28]	; (802fde8 <AudioDMALoopback+0x3c>)
 802fdca:	f7f5 f8a7 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>

	return 0;
 802fdce:	2300      	movs	r3, #0
}
 802fdd0:	4618      	mov	r0, r3
 802fdd2:	bd80      	pop	{r7, pc}
 802fdd4:	0804154c 	.word	0x0804154c
 802fdd8:	08039720 	.word	0x08039720
 802fddc:	0802fd79 	.word	0x0802fd79
 802fde0:	20001c3c 	.word	0x20001c3c
 802fde4:	20001afc 	.word	0x20001afc
 802fde8:	20000ed4 	.word	0x20000ed4

0802fdec <AudioSine_I2SEx_TxRxCpltCallback>:
}

//========================================================================
void AudioSine_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
//========================================================================
{
 802fdec:	b580      	push	{r7, lr}
 802fdee:	b082      	sub	sp, #8
 802fdf0:	af00      	add	r7, sp, #0
 802fdf2:	6078      	str	r0, [r7, #4]

//	idx = (idx + 1) % 8;

#else

	HAL_I2SEx_TransmitReceive_DMA( 	&hi2s3,
 802fdf4:	23a0      	movs	r3, #160	; 0xa0
 802fdf6:	4a04      	ldr	r2, [pc, #16]	; (802fe08 <AudioSine_I2SEx_TxRxCpltCallback+0x1c>)
 802fdf8:	4904      	ldr	r1, [pc, #16]	; (802fe0c <AudioSine_I2SEx_TxRxCpltCallback+0x20>)
 802fdfa:	4805      	ldr	r0, [pc, #20]	; (802fe10 <AudioSine_I2SEx_TxRxCpltCallback+0x24>)
 802fdfc:	f7f5 f88e 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>
									(uint16_t*)&bufAudio[FRAME_SIZE],
									FRAME_SIZE
									);

#endif
}
 802fe00:	bf00      	nop
 802fe02:	3708      	adds	r7, #8
 802fe04:	46bd      	mov	sp, r7
 802fe06:	bd80      	pop	{r7, pc}
 802fe08:	20001c3c 	.word	0x20001c3c
 802fe0c:	20000504 	.word	0x20000504
 802fe10:	20000ed4 	.word	0x20000ed4

0802fe14 <AudioPlayDMASine>:
}

//========================================================================
int		AudioPlayDMASine( void )
//========================================================================
{
 802fe14:	b580      	push	{r7, lr}
 802fe16:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 802fe18:	f240 12d5 	movw	r2, #469	; 0x1d5
 802fe1c:	4907      	ldr	r1, [pc, #28]	; (802fe3c <AudioPlayDMASine+0x28>)
 802fe1e:	4808      	ldr	r0, [pc, #32]	; (802fe40 <AudioPlayDMASine+0x2c>)
 802fe20:	f007 fb3e 	bl	80374a0 <iprintf>

	SetCallbackI2STxRxCplt( AudioSine_I2SEx_TxRxCpltCallback );
 802fe24:	4807      	ldr	r0, [pc, #28]	; (802fe44 <AudioPlayDMASine+0x30>)
 802fe26:	f7ff fed1 	bl	802fbcc <SetCallbackI2STxRxCplt>

	//	Speex ( 1 frame ) : 160 sample ( 320 bytes ) / 20 msec
	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[FRAME_SIZE], FRAME_SIZE );
 802fe2a:	23a0      	movs	r3, #160	; 0xa0
 802fe2c:	4a06      	ldr	r2, [pc, #24]	; (802fe48 <AudioPlayDMASine+0x34>)
 802fe2e:	4907      	ldr	r1, [pc, #28]	; (802fe4c <AudioPlayDMASine+0x38>)
 802fe30:	4807      	ldr	r0, [pc, #28]	; (802fe50 <AudioPlayDMASine+0x3c>)
 802fe32:	f7f5 f873 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>

	return 0;
 802fe36:	2300      	movs	r3, #0
}
 802fe38:	4618      	mov	r0, r3
 802fe3a:	bd80      	pop	{r7, pc}
 802fe3c:	08041560 	.word	0x08041560
 802fe40:	08039720 	.word	0x08039720
 802fe44:	0802fded 	.word	0x0802fded
 802fe48:	20001c3c 	.word	0x20001c3c
 802fe4c:	20001afc 	.word	0x20001afc
 802fe50:	20000ed4 	.word	0x20000ed4

0802fe54 <AudioSpkVol>:

//========================================================================
void	AudioSpkVol	    ( int nSpkVol )
//========================================================================
{
 802fe54:	b580      	push	{r7, lr}
 802fe56:	b082      	sub	sp, #8
 802fe58:	af00      	add	r7, sp, #0
 802fe5a:	6078      	str	r0, [r7, #4]
    //========================================================================
    //	Codec MAX9860ETG+
    if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), 2, 2 ) )
 802fe5c:	2302      	movs	r3, #2
 802fe5e:	2202      	movs	r2, #2
 802fe60:	2120      	movs	r1, #32
 802fe62:	4816      	ldr	r0, [pc, #88]	; (802febc <AudioSpkVol+0x68>)
 802fe64:	f7f4 f908 	bl	8024078 <HAL_I2C_IsDeviceReady>
 802fe68:	4603      	mov	r3, r0
 802fe6a:	2b00      	cmp	r3, #0
 802fe6c:	d122      	bne.n	802feb4 <AudioSpkVol+0x60>
    {
        // Power DAC / ADC Disable
//        WriteI2CCodec( 0x10, 0x00 );	//powered on, DAC on, both ADC(Left) Enable

    	switch ( nSpkVol )
 802fe6e:	687b      	ldr	r3, [r7, #4]
 802fe70:	2b03      	cmp	r3, #3
 802fe72:	d81f      	bhi.n	802feb4 <AudioSpkVol+0x60>
 802fe74:	a201      	add	r2, pc, #4	; (adr r2, 802fe7c <AudioSpkVol+0x28>)
 802fe76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fe7a:	bf00      	nop
 802fe7c:	0802fe8d 	.word	0x0802fe8d
 802fe80:	0802fe97 	.word	0x0802fe97
 802fe84:	0802fea1 	.word	0x0802fea1
 802fe88:	0802feab 	.word	0x0802feab
        {
        case 0:		WriteI2CCodec( 0x09, 0xBA );	break;	//  Mute ( 0xBC )
 802fe8c:	21ba      	movs	r1, #186	; 0xba
 802fe8e:	2009      	movs	r0, #9
 802fe90:	f7ff feec 	bl	802fc6c <WriteI2CCodec>
 802fe94:	e00e      	b.n	802feb4 <AudioSpkVol+0x60>
        case 1:		WriteI2CCodec( 0x09, 0x0C );	break;	//  0x0C ( -3 )
 802fe96:	210c      	movs	r1, #12
 802fe98:	2009      	movs	r0, #9
 802fe9a:	f7ff fee7 	bl	802fc6c <WriteI2CCodec>
 802fe9e:	e009      	b.n	802feb4 <AudioSpkVol+0x60>
        case 2:		WriteI2CCodec( 0x09, 0x06 );	break;	//  0x02 ( 0 dB ) DAC adjustment, this would require testing and/or a better understanding of the overall system
 802fea0:	2106      	movs	r1, #6
 802fea2:	2009      	movs	r0, #9
 802fea4:	f7ff fee2 	bl	802fc6c <WriteI2CCodec>
 802fea8:	e004      	b.n	802feb4 <AudioSpkVol+0x60>
        case 3:		WriteI2CCodec( 0x09, 0x00 );	break;	//  0x02 ( +3 )
 802feaa:	2100      	movs	r1, #0
 802feac:	2009      	movs	r0, #9
 802feae:	f7ff fedd 	bl	802fc6c <WriteI2CCodec>
 802feb2:	bf00      	nop
        }

        // Power DAC / ADC Enable
//        WriteI2CCodec( 0x10, 0x8A );	//powered on, DAC on, both ADC(Left) Enable
    }
}
 802feb4:	bf00      	nop
 802feb6:	3708      	adds	r7, #8
 802feb8:	46bd      	mov	sp, r7
 802feba:	bd80      	pop	{r7, pc}
 802febc:	20000e2c 	.word	0x20000e2c

0802fec0 <AudioMicVol>:


//========================================================================
void	AudioMicVol	    ( int nMicVol )
//========================================================================
{
 802fec0:	b580      	push	{r7, lr}
 802fec2:	b082      	sub	sp, #8
 802fec4:	af00      	add	r7, sp, #0
 802fec6:	6078      	str	r0, [r7, #4]
    //========================================================================
    //	Codec MAX9860ETG+
    if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), 2, 2 ) )
 802fec8:	2302      	movs	r3, #2
 802feca:	2202      	movs	r2, #2
 802fecc:	2120      	movs	r1, #32
 802fece:	482b      	ldr	r0, [pc, #172]	; (802ff7c <AudioMicVol+0xbc>)
 802fed0:	f7f4 f8d2 	bl	8024078 <HAL_I2C_IsDeviceReady>
 802fed4:	4603      	mov	r3, r0
 802fed6:	2b00      	cmp	r3, #0
 802fed8:	d14c      	bne.n	802ff74 <AudioMicVol+0xb4>
    {
        // Power DAC / ADC Disable
//        WriteI2CCodec( 0x10, 0x00 );	//powered on, DAC on, both ADC(Left) Enable
        switch ( nMicVol )
 802feda:	687b      	ldr	r3, [r7, #4]
 802fedc:	2b09      	cmp	r3, #9
 802fede:	d830      	bhi.n	802ff42 <AudioMicVol+0x82>
 802fee0:	a201      	add	r2, pc, #4	; (adr r2, 802fee8 <AudioMicVol+0x28>)
 802fee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fee6:	bf00      	nop
 802fee8:	0802ff11 	.word	0x0802ff11
 802feec:	0802ff1b 	.word	0x0802ff1b
 802fef0:	0802ff25 	.word	0x0802ff25
 802fef4:	0802ff2f 	.word	0x0802ff2f
 802fef8:	0802ff39 	.word	0x0802ff39
 802fefc:	0802ff43 	.word	0x0802ff43
 802ff00:	0802ff4d 	.word	0x0802ff4d
 802ff04:	0802ff57 	.word	0x0802ff57
 802ff08:	0802ff61 	.word	0x0802ff61
 802ff0c:	0802ff6b 	.word	0x0802ff6b
		{
		case 0:		WriteI2CCodec( 0x0c, 0x34 );	break;	// ( 0 dB ) PAM = 01(+0) / PGAM = 0x14(+0)
 802ff10:	2134      	movs	r1, #52	; 0x34
 802ff12:	200c      	movs	r0, #12
 802ff14:	f7ff feaa 	bl	802fc6c <WriteI2CCodec>
 802ff18:	e02c      	b.n	802ff74 <AudioMicVol+0xb4>
		case 1:		WriteI2CCodec( 0x0c, 0x32 );	break;	// ( 2 dB ) PAM = 01(+0) / PGAM = 0x12(+2)
 802ff1a:	2132      	movs	r1, #50	; 0x32
 802ff1c:	200c      	movs	r0, #12
 802ff1e:	f7ff fea5 	bl	802fc6c <WriteI2CCodec>
 802ff22:	e027      	b.n	802ff74 <AudioMicVol+0xb4>
		case 2:		WriteI2CCodec( 0x0c, 0x30 );	break;	// ( 4 dB ) PAM = 01(+0) / PGAM = 0x10(+4)
 802ff24:	2130      	movs	r1, #48	; 0x30
 802ff26:	200c      	movs	r0, #12
 802ff28:	f7ff fea0 	bl	802fc6c <WriteI2CCodec>
 802ff2c:	e022      	b.n	802ff74 <AudioMicVol+0xb4>
		case 3:		WriteI2CCodec( 0x0c, 0x2E );	break;	// ( 6 dB ) PAM = 01(+0) / PGAM = 0x0E(+6)
 802ff2e:	212e      	movs	r1, #46	; 0x2e
 802ff30:	200c      	movs	r0, #12
 802ff32:	f7ff fe9b 	bl	802fc6c <WriteI2CCodec>
 802ff36:	e01d      	b.n	802ff74 <AudioMicVol+0xb4>
		case 4:		WriteI2CCodec( 0x0c, 0x2C );	break;	// ( 8 dB ) PAM = 01(+0) / PGAM = 0x0C(+8)
 802ff38:	212c      	movs	r1, #44	; 0x2c
 802ff3a:	200c      	movs	r0, #12
 802ff3c:	f7ff fe96 	bl	802fc6c <WriteI2CCodec>
 802ff40:	e018      	b.n	802ff74 <AudioMicVol+0xb4>
		default:	//	Default ( 5 )
		case 5:		WriteI2CCodec( 0x0c, 0x2A );	break;	// ( 10 dB ) PAM = 01(+0) / PGAM = 0x0A(+10) - Default
 802ff42:	212a      	movs	r1, #42	; 0x2a
 802ff44:	200c      	movs	r0, #12
 802ff46:	f7ff fe91 	bl	802fc6c <WriteI2CCodec>
 802ff4a:	e013      	b.n	802ff74 <AudioMicVol+0xb4>
		case 6:		WriteI2CCodec( 0x0c, 0x28 );	break;	// ( 12 dB ) PAM = 01(+0) / PGAM = 0x08(+12)
 802ff4c:	2128      	movs	r1, #40	; 0x28
 802ff4e:	200c      	movs	r0, #12
 802ff50:	f7ff fe8c 	bl	802fc6c <WriteI2CCodec>
 802ff54:	e00e      	b.n	802ff74 <AudioMicVol+0xb4>
		case 7:		WriteI2CCodec( 0x0c, 0x26 );	break;	// ( 14 dB ) PAM = 01(+0) / PGAM = 0x06(+14)
 802ff56:	2126      	movs	r1, #38	; 0x26
 802ff58:	200c      	movs	r0, #12
 802ff5a:	f7ff fe87 	bl	802fc6c <WriteI2CCodec>
 802ff5e:	e009      	b.n	802ff74 <AudioMicVol+0xb4>
		case 8:		WriteI2CCodec( 0x0c, 0x24 );	break;	// ( 16 dB ) PAM = 01(+0) / PGAM = 0x04(+16)
 802ff60:	2124      	movs	r1, #36	; 0x24
 802ff62:	200c      	movs	r0, #12
 802ff64:	f7ff fe82 	bl	802fc6c <WriteI2CCodec>
 802ff68:	e004      	b.n	802ff74 <AudioMicVol+0xb4>
		case 9:		WriteI2CCodec( 0x0c, 0x22 );	break;	// ( 18 dB ) PAM = 01(+0) / PGAM = 0x02(+18)
 802ff6a:	2122      	movs	r1, #34	; 0x22
 802ff6c:	200c      	movs	r0, #12
 802ff6e:	f7ff fe7d 	bl	802fc6c <WriteI2CCodec>
 802ff72:	bf00      	nop
		}

        // Power DAC / ADC Enable
//        WriteI2CCodec( 0x10, 0x8A );	//powered on, DAC on, both ADC(Left) Enable
    }
}
 802ff74:	bf00      	nop
 802ff76:	3708      	adds	r7, #8
 802ff78:	46bd      	mov	sp, r7
 802ff7a:	bd80      	pop	{r7, pc}
 802ff7c:	20000e2c 	.word	0x20000e2c

0802ff80 <cmd_audio>:

//========================================================================
int cmd_audio( int argc, char *argv[] )
//========================================================================
{
 802ff80:	b580      	push	{r7, lr}
 802ff82:	b084      	sub	sp, #16
 802ff84:	af00      	add	r7, sp, #0
 802ff86:	6078      	str	r0, [r7, #4]
 802ff88:	6039      	str	r1, [r7, #0]
	//	audio [ loop / null / sine / spk / mute / vol ] [0/1 - spk relay]
	if ( argc < 2 )
 802ff8a:	687b      	ldr	r3, [r7, #4]
 802ff8c:	2b01      	cmp	r3, #1
 802ff8e:	dc07      	bgt.n	802ffa0 <cmd_audio+0x20>
	{
		printf( "%s(%d) - return\n", __func__, __LINE__ );
 802ff90:	f240 221d 	movw	r2, #541	; 0x21d
 802ff94:	49a4      	ldr	r1, [pc, #656]	; (8030228 <cmd_audio+0x2a8>)
 802ff96:	48a5      	ldr	r0, [pc, #660]	; (803022c <cmd_audio+0x2ac>)
 802ff98:	f007 fa82 	bl	80374a0 <iprintf>
		return 0;
 802ff9c:	2300      	movs	r3, #0
 802ff9e:	e13e      	b.n	803021e <cmd_audio+0x29e>
	}

	char	*sCmd;
	int		nVal;

	switch ( argc )
 802ffa0:	687b      	ldr	r3, [r7, #4]
 802ffa2:	2b02      	cmp	r3, #2
 802ffa4:	d00b      	beq.n	802ffbe <cmd_audio+0x3e>
 802ffa6:	687b      	ldr	r3, [r7, #4]
 802ffa8:	2b03      	cmp	r3, #3
 802ffaa:	d10c      	bne.n	802ffc6 <cmd_audio+0x46>
	{
	case 3:		sscanf( argv[2], "%d", &nVal );		//	Value
 802ffac:	683b      	ldr	r3, [r7, #0]
 802ffae:	3308      	adds	r3, #8
 802ffb0:	681b      	ldr	r3, [r3, #0]
 802ffb2:	f107 0208 	add.w	r2, r7, #8
 802ffb6:	499e      	ldr	r1, [pc, #632]	; (8030230 <cmd_audio+0x2b0>)
 802ffb8:	4618      	mov	r0, r3
 802ffba:	f007 fbbd 	bl	8037738 <siscanf>
	case 2:		sCmd = argv[1];						//	Command
 802ffbe:	683b      	ldr	r3, [r7, #0]
 802ffc0:	685b      	ldr	r3, [r3, #4]
 802ffc2:	60fb      	str	r3, [r7, #12]
//	case 2:		sText = argv[1];					//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
		break;
 802ffc4:	bf00      	nop
	}

	if ( strcmp( argv[1], "spk" ) == 0 )
 802ffc6:	683b      	ldr	r3, [r7, #0]
 802ffc8:	3304      	adds	r3, #4
 802ffca:	681b      	ldr	r3, [r3, #0]
 802ffcc:	4999      	ldr	r1, [pc, #612]	; (8030234 <cmd_audio+0x2b4>)
 802ffce:	4618      	mov	r0, r3
 802ffd0:	f7f0 f8fe 	bl	80201d0 <strcmp>
 802ffd4:	4603      	mov	r3, r0
 802ffd6:	2b00      	cmp	r3, #0
 802ffd8:	d11a      	bne.n	8030010 <cmd_audio+0x90>
	{
		if ( nVal == 1 )	//	strcmp( argv[2], "1" ) == 0 )
 802ffda:	68bb      	ldr	r3, [r7, #8]
 802ffdc:	2b01      	cmp	r3, #1
 802ffde:	d10b      	bne.n	802fff8 <cmd_audio+0x78>
		{
			//	Spk On
			printf( "%s(%d) - Spk Relay : On\n", __func__, __LINE__ );
 802ffe0:	f240 2231 	movw	r2, #561	; 0x231
 802ffe4:	4990      	ldr	r1, [pc, #576]	; (8030228 <cmd_audio+0x2a8>)
 802ffe6:	4894      	ldr	r0, [pc, #592]	; (8030238 <cmd_audio+0x2b8>)
 802ffe8:	f007 fa5a 	bl	80374a0 <iprintf>
			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
 802ffec:	2201      	movs	r2, #1
 802ffee:	2120      	movs	r1, #32
 802fff0:	4892      	ldr	r0, [pc, #584]	; (803023c <cmd_audio+0x2bc>)
 802fff2:	f7f3 fa93 	bl	802351c <HAL_GPIO_WritePin>
 802fff6:	e111      	b.n	803021c <cmd_audio+0x29c>
		}
		else	//	if ( strcmp( argv[2], "0" ) == 0 )
		{
			//	Spk On
			printf( "%s(%d) - Spk Relay : Off\n", __func__, __LINE__ );
 802fff8:	f240 2237 	movw	r2, #567	; 0x237
 802fffc:	498a      	ldr	r1, [pc, #552]	; (8030228 <cmd_audio+0x2a8>)
 802fffe:	4890      	ldr	r0, [pc, #576]	; (8030240 <cmd_audio+0x2c0>)
 8030000:	f007 fa4e 	bl	80374a0 <iprintf>
			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
 8030004:	2200      	movs	r2, #0
 8030006:	2120      	movs	r1, #32
 8030008:	488c      	ldr	r0, [pc, #560]	; (803023c <cmd_audio+0x2bc>)
 803000a:	f7f3 fa87 	bl	802351c <HAL_GPIO_WritePin>
 803000e:	e105      	b.n	803021c <cmd_audio+0x29c>
		}
	}
	else if ( strcmp( argv[1], "loop" ) == 0 )
 8030010:	683b      	ldr	r3, [r7, #0]
 8030012:	3304      	adds	r3, #4
 8030014:	681b      	ldr	r3, [r3, #0]
 8030016:	498b      	ldr	r1, [pc, #556]	; (8030244 <cmd_audio+0x2c4>)
 8030018:	4618      	mov	r0, r3
 803001a:	f7f0 f8d9 	bl	80201d0 <strcmp>
 803001e:	4603      	mov	r3, r0
 8030020:	2b00      	cmp	r3, #0
 8030022:	d10d      	bne.n	8030040 <cmd_audio+0xc0>
	{
		//	Audio Loop Test
		printf( "%s(%d) - loop\n", __func__, __LINE__ );
 8030024:	f240 223e 	movw	r2, #574	; 0x23e
 8030028:	497f      	ldr	r1, [pc, #508]	; (8030228 <cmd_audio+0x2a8>)
 803002a:	4887      	ldr	r0, [pc, #540]	; (8030248 <cmd_audio+0x2c8>)
 803002c:	f007 fa38 	bl	80374a0 <iprintf>

		AudioDMALoopback();
 8030030:	f7ff febc 	bl	802fdac <AudioDMALoopback>

		//	Spk On
		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
 8030034:	2201      	movs	r2, #1
 8030036:	2120      	movs	r1, #32
 8030038:	4880      	ldr	r0, [pc, #512]	; (803023c <cmd_audio+0x2bc>)
 803003a:	f7f3 fa6f 	bl	802351c <HAL_GPIO_WritePin>
 803003e:	e0ed      	b.n	803021c <cmd_audio+0x29c>
	}
	else if ( strcmp( argv[1], "sine" ) == 0 )
 8030040:	683b      	ldr	r3, [r7, #0]
 8030042:	3304      	adds	r3, #4
 8030044:	681b      	ldr	r3, [r3, #0]
 8030046:	4981      	ldr	r1, [pc, #516]	; (803024c <cmd_audio+0x2cc>)
 8030048:	4618      	mov	r0, r3
 803004a:	f7f0 f8c1 	bl	80201d0 <strcmp>
 803004e:	4603      	mov	r3, r0
 8030050:	2b00      	cmp	r3, #0
 8030052:	d108      	bne.n	8030066 <cmd_audio+0xe6>
	{
		//	Audio Output Sine Wave
		printf( "%s(%d) - sine\n", __func__, __LINE__ );
 8030054:	f44f 7212 	mov.w	r2, #584	; 0x248
 8030058:	4973      	ldr	r1, [pc, #460]	; (8030228 <cmd_audio+0x2a8>)
 803005a:	487d      	ldr	r0, [pc, #500]	; (8030250 <cmd_audio+0x2d0>)
 803005c:	f007 fa20 	bl	80374a0 <iprintf>
		AudioPlayDMASine();
 8030060:	f7ff fed8 	bl	802fe14 <AudioPlayDMASine>
 8030064:	e0da      	b.n	803021c <cmd_audio+0x29c>

//		//	Spk On
//		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
	}
	else if ( strcmp( argv[1], "stop" ) == 0 )
 8030066:	683b      	ldr	r3, [r7, #0]
 8030068:	3304      	adds	r3, #4
 803006a:	681b      	ldr	r3, [r3, #0]
 803006c:	4979      	ldr	r1, [pc, #484]	; (8030254 <cmd_audio+0x2d4>)
 803006e:	4618      	mov	r0, r3
 8030070:	f7f0 f8ae 	bl	80201d0 <strcmp>
 8030074:	4603      	mov	r3, r0
 8030076:	2b00      	cmp	r3, #0
 8030078:	d10b      	bne.n	8030092 <cmd_audio+0x112>
	{
		//	Audio Loop Test
		printf( "%s(%d) - %s\n", __func__, __LINE__, argv[1] );
 803007a:	683b      	ldr	r3, [r7, #0]
 803007c:	3304      	adds	r3, #4
 803007e:	681b      	ldr	r3, [r3, #0]
 8030080:	f240 2251 	movw	r2, #593	; 0x251
 8030084:	4968      	ldr	r1, [pc, #416]	; (8030228 <cmd_audio+0x2a8>)
 8030086:	4874      	ldr	r0, [pc, #464]	; (8030258 <cmd_audio+0x2d8>)
 8030088:	f007 fa0a 	bl	80374a0 <iprintf>

//		//	Spk Off
//		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );

		AudioStop();
 803008c:	f7ff fd8a 	bl	802fba4 <AudioStop>
 8030090:	e0c4      	b.n	803021c <cmd_audio+0x29c>
	}
	else if ( strcmp( argv[1], "vol" ) == 0 )
 8030092:	683b      	ldr	r3, [r7, #0]
 8030094:	3304      	adds	r3, #4
 8030096:	681b      	ldr	r3, [r3, #0]
 8030098:	4970      	ldr	r1, [pc, #448]	; (803025c <cmd_audio+0x2dc>)
 803009a:	4618      	mov	r0, r3
 803009c:	f7f0 f898 	bl	80201d0 <strcmp>
 80300a0:	4603      	mov	r3, r0
 80300a2:	2b00      	cmp	r3, #0
 80300a4:	d153      	bne.n	803014e <cmd_audio+0x1ce>
	{
		switch( nVal )
 80300a6:	68bb      	ldr	r3, [r7, #8]
 80300a8:	2b09      	cmp	r3, #9
 80300aa:	d849      	bhi.n	8030140 <cmd_audio+0x1c0>
 80300ac:	a201      	add	r2, pc, #4	; (adr r2, 80300b4 <cmd_audio+0x134>)
 80300ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80300b2:	bf00      	nop
 80300b4:	080300dd 	.word	0x080300dd
 80300b8:	080300e7 	.word	0x080300e7
 80300bc:	080300f1 	.word	0x080300f1
 80300c0:	080300fb 	.word	0x080300fb
 80300c4:	08030105 	.word	0x08030105
 80300c8:	0803010f 	.word	0x0803010f
 80300cc:	08030119 	.word	0x08030119
 80300d0:	08030123 	.word	0x08030123
 80300d4:	0803012d 	.word	0x0803012d
 80300d8:	08030137 	.word	0x08030137
		{
	    case 0:		WriteI2CCodec( 0x09, 0xBA );	break;	//  Mute ( 0xBC )
 80300dc:	21ba      	movs	r1, #186	; 0xba
 80300de:	2009      	movs	r0, #9
 80300e0:	f7ff fdc4 	bl	802fc6c <WriteI2CCodec>
 80300e4:	e09a      	b.n	803021c <cmd_audio+0x29c>
	    case 1:		WriteI2CCodec( 0x09, 0x36 );	break;	// ( -24 )
 80300e6:	2136      	movs	r1, #54	; 0x36
 80300e8:	2009      	movs	r0, #9
 80300ea:	f7ff fdbf 	bl	802fc6c <WriteI2CCodec>
 80300ee:	e095      	b.n	803021c <cmd_audio+0x29c>
	    case 2:		WriteI2CCodec( 0x09, 0x30 );	break;	// ( -21 )
 80300f0:	2130      	movs	r1, #48	; 0x30
 80300f2:	2009      	movs	r0, #9
 80300f4:	f7ff fdba 	bl	802fc6c <WriteI2CCodec>
 80300f8:	e090      	b.n	803021c <cmd_audio+0x29c>
	    case 3:		WriteI2CCodec( 0x09, 0x2A );	break;	// ( -18 )
 80300fa:	212a      	movs	r1, #42	; 0x2a
 80300fc:	2009      	movs	r0, #9
 80300fe:	f7ff fdb5 	bl	802fc6c <WriteI2CCodec>
 8030102:	e08b      	b.n	803021c <cmd_audio+0x29c>
	    case 4:		WriteI2CCodec( 0x09, 0x1E );	break;	// ( -12 )
 8030104:	211e      	movs	r1, #30
 8030106:	2009      	movs	r0, #9
 8030108:	f7ff fdb0 	bl	802fc6c <WriteI2CCodec>
 803010c:	e086      	b.n	803021c <cmd_audio+0x29c>
	    case 5:		WriteI2CCodec( 0x09, 0x18 );	break;	// ( -9 )
 803010e:	2118      	movs	r1, #24
 8030110:	2009      	movs	r0, #9
 8030112:	f7ff fdab 	bl	802fc6c <WriteI2CCodec>
 8030116:	e081      	b.n	803021c <cmd_audio+0x29c>
	    case 6:		WriteI2CCodec( 0x09, 0x12 );	break;	// ( -6 )
 8030118:	2112      	movs	r1, #18
 803011a:	2009      	movs	r0, #9
 803011c:	f7ff fda6 	bl	802fc6c <WriteI2CCodec>
 8030120:	e07c      	b.n	803021c <cmd_audio+0x29c>
	    case 7:		WriteI2CCodec( 0x09, 0x0C );	break;	// ( -3 )
 8030122:	210c      	movs	r1, #12
 8030124:	2009      	movs	r0, #9
 8030126:	f7ff fda1 	bl	802fc6c <WriteI2CCodec>
 803012a:	e077      	b.n	803021c <cmd_audio+0x29c>
        case 8:		WriteI2CCodec( 0x09, 0x06 );	break;	// ( 0 dB ) DAC adjustment, this would require testing and/or a better understanding of the overall system
 803012c:	2106      	movs	r1, #6
 803012e:	2009      	movs	r0, #9
 8030130:	f7ff fd9c 	bl	802fc6c <WriteI2CCodec>
 8030134:	e072      	b.n	803021c <cmd_audio+0x29c>
        case 9:		WriteI2CCodec( 0x09, 0x00 );	break;	// ( +3 )
 8030136:	2100      	movs	r1, #0
 8030138:	2009      	movs	r0, #9
 803013a:	f7ff fd97 	bl	802fc6c <WriteI2CCodec>
 803013e:	e06d      	b.n	803021c <cmd_audio+0x29c>
        default:	printf( "%s(%d) - invalid\n", __func__, __LINE__ );	break;
 8030140:	f240 2266 	movw	r2, #614	; 0x266
 8030144:	4938      	ldr	r1, [pc, #224]	; (8030228 <cmd_audio+0x2a8>)
 8030146:	4846      	ldr	r0, [pc, #280]	; (8030260 <cmd_audio+0x2e0>)
 8030148:	f007 f9aa 	bl	80374a0 <iprintf>
 803014c:	e066      	b.n	803021c <cmd_audio+0x29c>
		}
	}
	else if ( strcmp( argv[1], "mic" ) == 0 )
 803014e:	683b      	ldr	r3, [r7, #0]
 8030150:	3304      	adds	r3, #4
 8030152:	681b      	ldr	r3, [r3, #0]
 8030154:	4943      	ldr	r1, [pc, #268]	; (8030264 <cmd_audio+0x2e4>)
 8030156:	4618      	mov	r0, r3
 8030158:	f7f0 f83a 	bl	80201d0 <strcmp>
 803015c:	4603      	mov	r3, r0
 803015e:	2b00      	cmp	r3, #0
 8030160:	d153      	bne.n	803020a <cmd_audio+0x28a>
	{
		switch( nVal )
 8030162:	68bb      	ldr	r3, [r7, #8]
 8030164:	2b09      	cmp	r3, #9
 8030166:	d849      	bhi.n	80301fc <cmd_audio+0x27c>
 8030168:	a201      	add	r2, pc, #4	; (adr r2, 8030170 <cmd_audio+0x1f0>)
 803016a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803016e:	bf00      	nop
 8030170:	08030199 	.word	0x08030199
 8030174:	080301a3 	.word	0x080301a3
 8030178:	080301ad 	.word	0x080301ad
 803017c:	080301b7 	.word	0x080301b7
 8030180:	080301c1 	.word	0x080301c1
 8030184:	080301cb 	.word	0x080301cb
 8030188:	080301d5 	.word	0x080301d5
 803018c:	080301df 	.word	0x080301df
 8030190:	080301e9 	.word	0x080301e9
 8030194:	080301f3 	.word	0x080301f3
		{
		case 0:		WriteI2CCodec( 0x0c, 0x34 );	break;	// ( 0 dB ) PAM = 01(+0) / PGAM = 0x14(+0)
 8030198:	2134      	movs	r1, #52	; 0x34
 803019a:	200c      	movs	r0, #12
 803019c:	f7ff fd66 	bl	802fc6c <WriteI2CCodec>
 80301a0:	e03c      	b.n	803021c <cmd_audio+0x29c>
		case 1:		WriteI2CCodec( 0x0c, 0x32 );	break;	// ( 2 dB ) PAM = 01(+0) / PGAM = 0x12(+2)
 80301a2:	2132      	movs	r1, #50	; 0x32
 80301a4:	200c      	movs	r0, #12
 80301a6:	f7ff fd61 	bl	802fc6c <WriteI2CCodec>
 80301aa:	e037      	b.n	803021c <cmd_audio+0x29c>
		case 2:		WriteI2CCodec( 0x0c, 0x30 );	break;	// ( 4 dB ) PAM = 01(+0) / PGAM = 0x10(+4)
 80301ac:	2130      	movs	r1, #48	; 0x30
 80301ae:	200c      	movs	r0, #12
 80301b0:	f7ff fd5c 	bl	802fc6c <WriteI2CCodec>
 80301b4:	e032      	b.n	803021c <cmd_audio+0x29c>
		case 3:		WriteI2CCodec( 0x0c, 0x2E );	break;	// ( 6 dB ) PAM = 01(+0) / PGAM = 0x0E(+6)
 80301b6:	212e      	movs	r1, #46	; 0x2e
 80301b8:	200c      	movs	r0, #12
 80301ba:	f7ff fd57 	bl	802fc6c <WriteI2CCodec>
 80301be:	e02d      	b.n	803021c <cmd_audio+0x29c>
		case 4:		WriteI2CCodec( 0x0c, 0x2C );	break;	// ( 8 dB ) PAM = 01(+0) / PGAM = 0x0C(+8)
 80301c0:	212c      	movs	r1, #44	; 0x2c
 80301c2:	200c      	movs	r0, #12
 80301c4:	f7ff fd52 	bl	802fc6c <WriteI2CCodec>
 80301c8:	e028      	b.n	803021c <cmd_audio+0x29c>
		case 5:		WriteI2CCodec( 0x0c, 0x2A );	break;	// ( 10 dB ) PAM = 01(+0) / PGAM = 0x0A(+10) - Default
 80301ca:	212a      	movs	r1, #42	; 0x2a
 80301cc:	200c      	movs	r0, #12
 80301ce:	f7ff fd4d 	bl	802fc6c <WriteI2CCodec>
 80301d2:	e023      	b.n	803021c <cmd_audio+0x29c>
		case 6:		WriteI2CCodec( 0x0c, 0x28 );	break;	// ( 12 dB ) PAM = 01(+0) / PGAM = 0x08(+12)
 80301d4:	2128      	movs	r1, #40	; 0x28
 80301d6:	200c      	movs	r0, #12
 80301d8:	f7ff fd48 	bl	802fc6c <WriteI2CCodec>
 80301dc:	e01e      	b.n	803021c <cmd_audio+0x29c>
		case 7:		WriteI2CCodec( 0x0c, 0x26 );	break;	// ( 14 dB ) PAM = 01(+0) / PGAM = 0x06(+14)
 80301de:	2126      	movs	r1, #38	; 0x26
 80301e0:	200c      	movs	r0, #12
 80301e2:	f7ff fd43 	bl	802fc6c <WriteI2CCodec>
 80301e6:	e019      	b.n	803021c <cmd_audio+0x29c>
		case 8:		WriteI2CCodec( 0x0c, 0x24 );	break;	// ( 16 dB ) PAM = 01(+0) / PGAM = 0x04(+16)
 80301e8:	2124      	movs	r1, #36	; 0x24
 80301ea:	200c      	movs	r0, #12
 80301ec:	f7ff fd3e 	bl	802fc6c <WriteI2CCodec>
 80301f0:	e014      	b.n	803021c <cmd_audio+0x29c>
		case 9:		WriteI2CCodec( 0x0c, 0x22 );	break;	// ( 18 dB ) PAM = 01(+0) / PGAM = 0x02(+18)
 80301f2:	2122      	movs	r1, #34	; 0x22
 80301f4:	200c      	movs	r0, #12
 80301f6:	f7ff fd39 	bl	802fc6c <WriteI2CCodec>
 80301fa:	e00f      	b.n	803021c <cmd_audio+0x29c>
        default:	printf( "%s(%d) - invalid\n", __func__, __LINE__ );	break;
 80301fc:	f240 2277 	movw	r2, #631	; 0x277
 8030200:	4909      	ldr	r1, [pc, #36]	; (8030228 <cmd_audio+0x2a8>)
 8030202:	4817      	ldr	r0, [pc, #92]	; (8030260 <cmd_audio+0x2e0>)
 8030204:	f007 f94c 	bl	80374a0 <iprintf>
 8030208:	e008      	b.n	803021c <cmd_audio+0x29c>
		}
	}
	else
	{
		printf( "%s(%d) - Invalid Cmd : %s\n", __func__, __LINE__, argv[1] );
 803020a:	683b      	ldr	r3, [r7, #0]
 803020c:	3304      	adds	r3, #4
 803020e:	681b      	ldr	r3, [r3, #0]
 8030210:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8030214:	4904      	ldr	r1, [pc, #16]	; (8030228 <cmd_audio+0x2a8>)
 8030216:	4814      	ldr	r0, [pc, #80]	; (8030268 <cmd_audio+0x2e8>)
 8030218:	f007 f942 	bl	80374a0 <iprintf>
	}

	return 1;
 803021c:	2301      	movs	r3, #1
}
 803021e:	4618      	mov	r0, r3
 8030220:	3710      	adds	r7, #16
 8030222:	46bd      	mov	sp, r7
 8030224:	bd80      	pop	{r7, pc}
 8030226:	bf00      	nop
 8030228:	08041574 	.word	0x08041574
 803022c:	08039728 	.word	0x08039728
 8030230:	0803973c 	.word	0x0803973c
 8030234:	08039740 	.word	0x08039740
 8030238:	08039744 	.word	0x08039744
 803023c:	40021000 	.word	0x40021000
 8030240:	08039760 	.word	0x08039760
 8030244:	0803977c 	.word	0x0803977c
 8030248:	08039784 	.word	0x08039784
 803024c:	08039794 	.word	0x08039794
 8030250:	0803979c 	.word	0x0803979c
 8030254:	080397ac 	.word	0x080397ac
 8030258:	080397b4 	.word	0x080397b4
 803025c:	080397c4 	.word	0x080397c4
 8030260:	080397c8 	.word	0x080397c8
 8030264:	080397dc 	.word	0x080397dc
 8030268:	080397e0 	.word	0x080397e0

0803026c <cmd_codec>:


//========================================================================
int cmd_codec( int argc, char *argv[] )
//========================================================================
{
 803026c:	b580      	push	{r7, lr}
 803026e:	b086      	sub	sp, #24
 8030270:	af02      	add	r7, sp, #8
 8030272:	6078      	str	r0, [r7, #4]
 8030274:	6039      	str	r1, [r7, #0]
	//	audio [ loop / null / sine / spk / mute ] [0/1 - spk relay]
	if ( argc < 2 )
 8030276:	687b      	ldr	r3, [r7, #4]
 8030278:	2b01      	cmp	r3, #1
 803027a:	dc07      	bgt.n	803028c <cmd_codec+0x20>
	{
		printf( "%s(%d) - return\n", __func__, __LINE__ );
 803027c:	f240 228a 	movw	r2, #650	; 0x28a
 8030280:	4939      	ldr	r1, [pc, #228]	; (8030368 <cmd_codec+0xfc>)
 8030282:	483a      	ldr	r0, [pc, #232]	; (803036c <cmd_codec+0x100>)
 8030284:	f007 f90c 	bl	80374a0 <iprintf>
		return 0;
 8030288:	2300      	movs	r3, #0
 803028a:	e068      	b.n	803035e <cmd_codec+0xf2>
	}

	int bOnOff = 0;
 803028c:	2300      	movs	r3, #0
 803028e:	60fb      	str	r3, [r7, #12]

	if ( argc >= 3 )
 8030290:	687b      	ldr	r3, [r7, #4]
 8030292:	2b02      	cmp	r3, #2
 8030294:	dd18      	ble.n	80302c8 <cmd_codec+0x5c>
	{
		if ( strcmp( argv[2], "1" ) == 0 )
 8030296:	683b      	ldr	r3, [r7, #0]
 8030298:	3308      	adds	r3, #8
 803029a:	681b      	ldr	r3, [r3, #0]
 803029c:	4934      	ldr	r1, [pc, #208]	; (8030370 <cmd_codec+0x104>)
 803029e:	4618      	mov	r0, r3
 80302a0:	f7ef ff96 	bl	80201d0 <strcmp>
 80302a4:	4603      	mov	r3, r0
 80302a6:	2b00      	cmp	r3, #0
 80302a8:	d102      	bne.n	80302b0 <cmd_codec+0x44>
		{
			bOnOff = 1;
 80302aa:	2301      	movs	r3, #1
 80302ac:	60fb      	str	r3, [r7, #12]
 80302ae:	e00b      	b.n	80302c8 <cmd_codec+0x5c>
		}
		else if ( strcmp( argv[2], "0" ) == 0 )
 80302b0:	683b      	ldr	r3, [r7, #0]
 80302b2:	3308      	adds	r3, #8
 80302b4:	681b      	ldr	r3, [r3, #0]
 80302b6:	492f      	ldr	r1, [pc, #188]	; (8030374 <cmd_codec+0x108>)
 80302b8:	4618      	mov	r0, r3
 80302ba:	f7ef ff89 	bl	80201d0 <strcmp>
 80302be:	4603      	mov	r3, r0
 80302c0:	2b00      	cmp	r3, #0
 80302c2:	d101      	bne.n	80302c8 <cmd_codec+0x5c>
		{
			bOnOff = 0;
 80302c4:	2300      	movs	r3, #0
 80302c6:	60fb      	str	r3, [r7, #12]
		}
	}

	if ( strcmp( argv[1], "init" ) == 0 )
 80302c8:	683b      	ldr	r3, [r7, #0]
 80302ca:	3304      	adds	r3, #4
 80302cc:	681b      	ldr	r3, [r3, #0]
 80302ce:	492a      	ldr	r1, [pc, #168]	; (8030378 <cmd_codec+0x10c>)
 80302d0:	4618      	mov	r0, r3
 80302d2:	f7ef ff7d 	bl	80201d0 <strcmp>
 80302d6:	4603      	mov	r3, r0
 80302d8:	2b00      	cmp	r3, #0
 80302da:	d108      	bne.n	80302ee <cmd_codec+0x82>
	{
		//	Audio Init
		printf( "%s(%d) - init\n", __func__, __LINE__ );
 80302dc:	f240 229f 	movw	r2, #671	; 0x29f
 80302e0:	4921      	ldr	r1, [pc, #132]	; (8030368 <cmd_codec+0xfc>)
 80302e2:	4826      	ldr	r0, [pc, #152]	; (803037c <cmd_codec+0x110>)
 80302e4:	f007 f8dc 	bl	80374a0 <iprintf>

		AudioInit();
 80302e8:	f7ff fc10 	bl	802fb0c <AudioInit>
 80302ec:	e036      	b.n	803035c <cmd_codec+0xf0>
	}
	else if ( strcmp( argv[1], "mute" ) == 0 )
 80302ee:	683b      	ldr	r3, [r7, #0]
 80302f0:	3304      	adds	r3, #4
 80302f2:	681b      	ldr	r3, [r3, #0]
 80302f4:	4922      	ldr	r1, [pc, #136]	; (8030380 <cmd_codec+0x114>)
 80302f6:	4618      	mov	r0, r3
 80302f8:	f7ef ff6a 	bl	80201d0 <strcmp>
 80302fc:	4603      	mov	r3, r0
 80302fe:	2b00      	cmp	r3, #0
 8030300:	d10c      	bne.n	803031c <cmd_codec+0xb0>
	{
		//	Audio Output Sine Wave
		printf( "%s(%d) - %s(%d)\n", __func__, __LINE__, argv[1], bOnOff );
 8030302:	683b      	ldr	r3, [r7, #0]
 8030304:	3304      	adds	r3, #4
 8030306:	681a      	ldr	r2, [r3, #0]
 8030308:	68fb      	ldr	r3, [r7, #12]
 803030a:	9300      	str	r3, [sp, #0]
 803030c:	4613      	mov	r3, r2
 803030e:	f240 22a6 	movw	r2, #678	; 0x2a6
 8030312:	4915      	ldr	r1, [pc, #84]	; (8030368 <cmd_codec+0xfc>)
 8030314:	481b      	ldr	r0, [pc, #108]	; (8030384 <cmd_codec+0x118>)
 8030316:	f007 f8c3 	bl	80374a0 <iprintf>
 803031a:	e01f      	b.n	803035c <cmd_codec+0xf0>

//		CodecMuteDAC( bOnOff );
	}
	else if ( strcmp( argv[1], "loop" ) == 0 )
 803031c:	683b      	ldr	r3, [r7, #0]
 803031e:	3304      	adds	r3, #4
 8030320:	681b      	ldr	r3, [r3, #0]
 8030322:	4919      	ldr	r1, [pc, #100]	; (8030388 <cmd_codec+0x11c>)
 8030324:	4618      	mov	r0, r3
 8030326:	f7ef ff53 	bl	80201d0 <strcmp>
 803032a:	4603      	mov	r3, r0
 803032c:	2b00      	cmp	r3, #0
 803032e:	d10c      	bne.n	803034a <cmd_codec+0xde>
	{
		//	Audio Codec Loopback
		printf( "%s(%d) - %s(%d)\n", __func__, __LINE__, argv[1], bOnOff );
 8030330:	683b      	ldr	r3, [r7, #0]
 8030332:	3304      	adds	r3, #4
 8030334:	681a      	ldr	r2, [r3, #0]
 8030336:	68fb      	ldr	r3, [r7, #12]
 8030338:	9300      	str	r3, [sp, #0]
 803033a:	4613      	mov	r3, r2
 803033c:	f240 22ad 	movw	r2, #685	; 0x2ad
 8030340:	4909      	ldr	r1, [pc, #36]	; (8030368 <cmd_codec+0xfc>)
 8030342:	4810      	ldr	r0, [pc, #64]	; (8030384 <cmd_codec+0x118>)
 8030344:	f007 f8ac 	bl	80374a0 <iprintf>
 8030348:	e008      	b.n	803035c <cmd_codec+0xf0>

//		CodecLoopback( bOnOff );
	}
	else
	{
		printf( "%s(%d) - Invalid Cmd : %s\n", __func__, __LINE__, argv[1] );
 803034a:	683b      	ldr	r3, [r7, #0]
 803034c:	3304      	adds	r3, #4
 803034e:	681b      	ldr	r3, [r3, #0]
 8030350:	f240 22b3 	movw	r2, #691	; 0x2b3
 8030354:	4904      	ldr	r1, [pc, #16]	; (8030368 <cmd_codec+0xfc>)
 8030356:	480d      	ldr	r0, [pc, #52]	; (803038c <cmd_codec+0x120>)
 8030358:	f007 f8a2 	bl	80374a0 <iprintf>
	}

	return 1;
 803035c:	2301      	movs	r3, #1
}
 803035e:	4618      	mov	r0, r3
 8030360:	3710      	adds	r7, #16
 8030362:	46bd      	mov	sp, r7
 8030364:	bd80      	pop	{r7, pc}
 8030366:	bf00      	nop
 8030368:	08041580 	.word	0x08041580
 803036c:	08039728 	.word	0x08039728
 8030370:	080397fc 	.word	0x080397fc
 8030374:	08039800 	.word	0x08039800
 8030378:	08039804 	.word	0x08039804
 803037c:	0803980c 	.word	0x0803980c
 8030380:	0803981c 	.word	0x0803981c
 8030384:	08039824 	.word	0x08039824
 8030388:	0803977c 	.word	0x0803977c
 803038c:	080397e0 	.word	0x080397e0

08030390 <JumpToSTBootloader>:
}

//========================================================================
void JumpToSTBootloader(void)
//========================================================================
{
 8030390:	b580      	push	{r7, lr}
 8030392:	b084      	sub	sp, #16
 8030394:	af00      	add	r7, sp, #0
  pFunction JumpToApplication;
  uint32_t JumpAddress;

  //========================================================================
  //	Disable Watchdog
  MX_IWDG_Disable();
 8030396:	f7f0 f937 	bl	8020608 <MX_IWDG_Disable>
  //========================================================================

  /* Disable all interrupts, clocks and PLLs */
  HAL_RCC_DeInit();
 803039a:	f7f7 fa05 	bl	80277a8 <HAL_RCC_DeInit>
  __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();

#endif

  /* Jump to system memory */
  JumpAddress = *(__IO uint32_t*) (SYS_MEM_ADDRESS + 4);
 803039e:	4b09      	ldr	r3, [pc, #36]	; (80303c4 <JumpToSTBootloader+0x34>)
 80303a0:	681b      	ldr	r3, [r3, #0]
 80303a2:	60fb      	str	r3, [r7, #12]
  JumpToApplication = (pFunction) JumpAddress;
 80303a4:	68fb      	ldr	r3, [r7, #12]
 80303a6:	60bb      	str	r3, [r7, #8]
  /* Initialize user application's Stack Pointer */
  __set_MSP(*(__IO uint32_t*) SYS_MEM_ADDRESS);
 80303a8:	4b07      	ldr	r3, [pc, #28]	; (80303c8 <JumpToSTBootloader+0x38>)
 80303aa:	681b      	ldr	r3, [r3, #0]
 80303ac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80303ae:	687b      	ldr	r3, [r7, #4]
 80303b0:	f383 8808 	msr	MSP, r3
}
 80303b4:	bf00      	nop
  JumpToApplication();
 80303b6:	68bb      	ldr	r3, [r7, #8]
 80303b8:	4798      	blx	r3
}
 80303ba:	bf00      	nop
 80303bc:	3710      	adds	r7, #16
 80303be:	46bd      	mov	sp, r7
 80303c0:	bd80      	pop	{r7, pc}
 80303c2:	bf00      	nop
 80303c4:	1fff0004 	.word	0x1fff0004
 80303c8:	1fff0000 	.word	0x1fff0000

080303cc <DispDFUMode>:

//========================================================================
void	DispDFUMode( void )
//========================================================================
{
 80303cc:	b580      	push	{r7, lr}
 80303ce:	af00      	add	r7, sp, #0
	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c3, (uint16_t)( SSD1306_I2C_ADDRESS ), 2, 2 ) )
 80303d0:	2302      	movs	r3, #2
 80303d2:	2202      	movs	r2, #2
 80303d4:	2178      	movs	r1, #120	; 0x78
 80303d6:	4808      	ldr	r0, [pc, #32]	; (80303f8 <DispDFUMode+0x2c>)
 80303d8:	f7f3 fe4e 	bl	8024078 <HAL_I2C_IsDeviceReady>
 80303dc:	4603      	mov	r3, r0
 80303de:	2b00      	cmp	r3, #0
 80303e0:	d108      	bne.n	80303f4 <DispDFUMode+0x28>
	{
		//  화면 Clear
		LCDClear();
 80303e2:	f7fc fb13 	bl	802ca0c <LCDClear>

		LCDSetCursor( 0, 13 );
 80303e6:	210d      	movs	r1, #13
 80303e8:	2000      	movs	r0, #0
 80303ea:	f7fc fa93 	bl	802c914 <LCDSetCursor>
//		LCDPrintf( "DFU Mode" );
		LCDPrintf( "USB Upgrade Mode" );
 80303ee:	4803      	ldr	r0, [pc, #12]	; (80303fc <DispDFUMode+0x30>)
 80303f0:	f7fc fac0 	bl	802c974 <LCDPrintf>
	}
}
 80303f4:	bf00      	nop
 80303f6:	bd80      	pop	{r7, pc}
 80303f8:	20000e80 	.word	0x20000e80
 80303fc:	08039850 	.word	0x08039850

08030400 <cmd_stboot>:


//========================================================================
int cmd_stboot(int argc, char *argv[])
//========================================================================
{
 8030400:	b580      	push	{r7, lr}
 8030402:	b082      	sub	sp, #8
 8030404:	af00      	add	r7, sp, #0
 8030406:	6078      	str	r0, [r7, #4]
 8030408:	6039      	str	r1, [r7, #0]
	printf( "Jump To STM32 Bootloader\n" );
 803040a:	4806      	ldr	r0, [pc, #24]	; (8030424 <cmd_stboot+0x24>)
 803040c:	f007 f8b6 	bl	803757c <puts>

	DispDFUMode();
 8030410:	f7ff ffdc 	bl	80303cc <DispDFUMode>

	JumpToSTBootloader();
 8030414:	f7ff ffbc 	bl	8030390 <JumpToSTBootloader>

	return 0;
 8030418:	2300      	movs	r3, #0
}
 803041a:	4618      	mov	r0, r3
 803041c:	3708      	adds	r7, #8
 803041e:	46bd      	mov	sp, r7
 8030420:	bd80      	pop	{r7, pc}
 8030422:	bf00      	nop
 8030424:	08039a24 	.word	0x08039a24

08030428 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8030428:	b480      	push	{r7}
 803042a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 803042c:	f3bf 8f4f 	dsb	sy
}
 8030430:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8030432:	4b06      	ldr	r3, [pc, #24]	; (803044c <__NVIC_SystemReset+0x24>)
 8030434:	68db      	ldr	r3, [r3, #12]
 8030436:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 803043a:	4904      	ldr	r1, [pc, #16]	; (803044c <__NVIC_SystemReset+0x24>)
 803043c:	4b04      	ldr	r3, [pc, #16]	; (8030450 <__NVIC_SystemReset+0x28>)
 803043e:	4313      	orrs	r3, r2
 8030440:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8030442:	f3bf 8f4f 	dsb	sy
}
 8030446:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8030448:	bf00      	nop
 803044a:	e7fd      	b.n	8030448 <__NVIC_SystemReset+0x20>
 803044c:	e000ed00 	.word	0xe000ed00
 8030450:	05fa0004 	.word	0x05fa0004

08030454 <a2hex>:
}

//========================================================================
int 	a2hex(char *pv)
//========================================================================
{
 8030454:	b580      	push	{r7, lr}
 8030456:	b084      	sub	sp, #16
 8030458:	af00      	add	r7, sp, #0
 803045a:	6078      	str	r0, [r7, #4]
	char **pos=NULL;
 803045c:	2300      	movs	r3, #0
 803045e:	60fb      	str	r3, [r7, #12]

	return strtol(pv, pos, 16 );
 8030460:	2210      	movs	r2, #16
 8030462:	68f9      	ldr	r1, [r7, #12]
 8030464:	6878      	ldr	r0, [r7, #4]
 8030466:	f006 ff59 	bl	803731c <strtol>
 803046a:	4603      	mov	r3, r0
}
 803046c:	4618      	mov	r0, r3
 803046e:	3710      	adds	r7, #16
 8030470:	46bd      	mov	sp, r7
 8030472:	bd80      	pop	{r7, pc}

08030474 <getarg>:
 * parse cmd & argument, return argc
 */
//========================================================================
int getarg(char *buffer, char *argv[])
//========================================================================
{
 8030474:	b580      	push	{r7, lr}
 8030476:	b086      	sub	sp, #24
 8030478:	af00      	add	r7, sp, #0
 803047a:	6078      	str	r0, [r7, #4]
 803047c:	6039      	str	r1, [r7, #0]
	int		argc;
	char	*p;
	char	*sepchr = " \t";
 803047e:	4b14      	ldr	r3, [pc, #80]	; (80304d0 <getarg+0x5c>)
 8030480:	60fb      	str	r3, [r7, #12]
	char	*saveptr;

#define	MAXP	20

	p = (char *)strtok_r(buffer, sepchr, &saveptr);
 8030482:	f107 0308 	add.w	r3, r7, #8
 8030486:	461a      	mov	r2, r3
 8030488:	68f9      	ldr	r1, [r7, #12]
 803048a:	6878      	ldr	r0, [r7, #4]
 803048c:	f007 faa7 	bl	80379de <strtok_r>
 8030490:	6138      	str	r0, [r7, #16]

	for ( argc = 0; argc < MAXP && p != NULL; p = (char *)strtok_r( NULL, sepchr, &saveptr ) )
 8030492:	2300      	movs	r3, #0
 8030494:	617b      	str	r3, [r7, #20]
 8030496:	e00f      	b.n	80304b8 <getarg+0x44>
	{
//		printf( "%s(%d) - %s\n", __func__, __LINE__, p );
		argv[argc++] = p;
 8030498:	697b      	ldr	r3, [r7, #20]
 803049a:	1c5a      	adds	r2, r3, #1
 803049c:	617a      	str	r2, [r7, #20]
 803049e:	009b      	lsls	r3, r3, #2
 80304a0:	683a      	ldr	r2, [r7, #0]
 80304a2:	4413      	add	r3, r2
 80304a4:	693a      	ldr	r2, [r7, #16]
 80304a6:	601a      	str	r2, [r3, #0]
	for ( argc = 0; argc < MAXP && p != NULL; p = (char *)strtok_r( NULL, sepchr, &saveptr ) )
 80304a8:	f107 0308 	add.w	r3, r7, #8
 80304ac:	461a      	mov	r2, r3
 80304ae:	68f9      	ldr	r1, [r7, #12]
 80304b0:	2000      	movs	r0, #0
 80304b2:	f007 fa94 	bl	80379de <strtok_r>
 80304b6:	6138      	str	r0, [r7, #16]
 80304b8:	697b      	ldr	r3, [r7, #20]
 80304ba:	2b13      	cmp	r3, #19
 80304bc:	dc02      	bgt.n	80304c4 <getarg+0x50>
 80304be:	693b      	ldr	r3, [r7, #16]
 80304c0:	2b00      	cmp	r3, #0
 80304c2:	d1e9      	bne.n	8030498 <getarg+0x24>
	}

	return argc;
 80304c4:	697b      	ldr	r3, [r7, #20]
}
 80304c6:	4618      	mov	r0, r3
 80304c8:	3718      	adds	r7, #24
 80304ca:	46bd      	mov	sp, r7
 80304cc:	bd80      	pop	{r7, pc}
 80304ce:	bf00      	nop
 80304d0:	08039fd8 	.word	0x08039fd8

080304d4 <ProcessCommand>:

//========================================================================
int ProcessCommand( char *cmd )
//========================================================================
{
 80304d4:	b580      	push	{r7, lr}
 80304d6:	b0b0      	sub	sp, #192	; 0xc0
 80304d8:	af00      	add	r7, sp, #0
 80304da:	6078      	str	r0, [r7, #4]
	char	*argv[MAXP];
	int		argc;
	char	*p;
	int		v = 0;
 80304dc:	2300      	movs	r3, #0
 80304de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int		i;
	char	temp[80];
	char	upstr[4] = { 0x1b, '[', 'A', 0 };
 80304e2:	4b85      	ldr	r3, [pc, #532]	; (80306f8 <ProcessCommand+0x224>)
 80304e4:	60fb      	str	r3, [r7, #12]

	if ( strcmp( "!!", cmd ) == 0 || strcmp( cmd, upstr ) == 0 )
 80304e6:	6879      	ldr	r1, [r7, #4]
 80304e8:	4884      	ldr	r0, [pc, #528]	; (80306fc <ProcessCommand+0x228>)
 80304ea:	f7ef fe71 	bl	80201d0 <strcmp>
 80304ee:	4603      	mov	r3, r0
 80304f0:	2b00      	cmp	r3, #0
 80304f2:	d008      	beq.n	8030506 <ProcessCommand+0x32>
 80304f4:	f107 030c 	add.w	r3, r7, #12
 80304f8:	4619      	mov	r1, r3
 80304fa:	6878      	ldr	r0, [r7, #4]
 80304fc:	f7ef fe68 	bl	80201d0 <strcmp>
 8030500:	4603      	mov	r3, r0
 8030502:	2b00      	cmp	r3, #0
 8030504:	d10a      	bne.n	803051c <ProcessCommand+0x48>
	{
		strcpy( temp, old_cmd );
 8030506:	f107 0310 	add.w	r3, r7, #16
 803050a:	497d      	ldr	r1, [pc, #500]	; (8030700 <ProcessCommand+0x22c>)
 803050c:	4618      	mov	r0, r3
 803050e:	f007 fb2f 	bl	8037b70 <strcpy>
		strcpy( cmd, old_cmd );
 8030512:	497b      	ldr	r1, [pc, #492]	; (8030700 <ProcessCommand+0x22c>)
 8030514:	6878      	ldr	r0, [r7, #4]
 8030516:	f007 fb2b 	bl	8037b70 <strcpy>
 803051a:	e005      	b.n	8030528 <ProcessCommand+0x54>
	}
	else
	{
		strcpy( temp, cmd );
 803051c:	f107 0310 	add.w	r3, r7, #16
 8030520:	6879      	ldr	r1, [r7, #4]
 8030522:	4618      	mov	r0, r3
 8030524:	f007 fb24 	bl	8037b70 <strcpy>
	}

	memset( argv, 0, sizeof( argv ) );
 8030528:	f107 0360 	add.w	r3, r7, #96	; 0x60
 803052c:	2250      	movs	r2, #80	; 0x50
 803052e:	2100      	movs	r1, #0
 8030530:	4618      	mov	r0, r3
 8030532:	f007 fa17 	bl	8037964 <memset>

	// ignore after # char
	p = (char *)strchr( cmd, '#' );
 8030536:	2123      	movs	r1, #35	; 0x23
 8030538:	6878      	ldr	r0, [r7, #4]
 803053a:	f007 fa1b 	bl	8037974 <strchr>
 803053e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	if ( p )
 8030542:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8030546:	2b00      	cmp	r3, #0
 8030548:	d003      	beq.n	8030552 <ProcessCommand+0x7e>
	{
		*p = (char)NULL;
 803054a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 803054e:	2200      	movs	r2, #0
 8030550:	701a      	strb	r2, [r3, #0]
	}

	// 명령라인을 arg,argv 로 분해
	argc = getarg( cmd, argv );
 8030552:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8030556:	4619      	mov	r1, r3
 8030558:	6878      	ldr	r0, [r7, #4]
 803055a:	f7ff ff8b 	bl	8030474 <getarg>
 803055e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

//	printf( "%s(%d) - argc(%d) / argv(%s)\n", __func__, __LINE__, argc, argv[0] );

	if ( argc != 0 )
 8030562:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8030566:	2b00      	cmp	r3, #0
 8030568:	f000 80c1 	beq.w	80306ee <ProcessCommand+0x21a>
	{

		// md/mm 등에 따르는 "[.b|.w|.l]에 대한 처리
		p = strchr( argv[0], '.' );
 803056c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803056e:	212e      	movs	r1, #46	; 0x2e
 8030570:	4618      	mov	r0, r3
 8030572:	f007 f9ff 	bl	8037974 <strchr>
 8030576:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if ( p != NULL )
 803057a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 803057e:	2b00      	cmp	r3, #0
 8030580:	d021      	beq.n	80305c6 <ProcessCommand+0xf2>
		{
			if ( p[1] == 'b' )
 8030582:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8030586:	3301      	adds	r3, #1
 8030588:	781b      	ldrb	r3, [r3, #0]
 803058a:	2b62      	cmp	r3, #98	; 0x62
 803058c:	d103      	bne.n	8030596 <ProcessCommand+0xc2>
			{
				data_option = 1;
 803058e:	4b5d      	ldr	r3, [pc, #372]	; (8030704 <ProcessCommand+0x230>)
 8030590:	2201      	movs	r2, #1
 8030592:	601a      	str	r2, [r3, #0]
 8030594:	e012      	b.n	80305bc <ProcessCommand+0xe8>
			}
			else if ( p[1] == 'w' )
 8030596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 803059a:	3301      	adds	r3, #1
 803059c:	781b      	ldrb	r3, [r3, #0]
 803059e:	2b77      	cmp	r3, #119	; 0x77
 80305a0:	d103      	bne.n	80305aa <ProcessCommand+0xd6>
			{
				data_option = 2;
 80305a2:	4b58      	ldr	r3, [pc, #352]	; (8030704 <ProcessCommand+0x230>)
 80305a4:	2202      	movs	r2, #2
 80305a6:	601a      	str	r2, [r3, #0]
 80305a8:	e008      	b.n	80305bc <ProcessCommand+0xe8>
			}
			else if ( p[1] == 'l' )
 80305aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80305ae:	3301      	adds	r3, #1
 80305b0:	781b      	ldrb	r3, [r3, #0]
 80305b2:	2b6c      	cmp	r3, #108	; 0x6c
 80305b4:	d102      	bne.n	80305bc <ProcessCommand+0xe8>
			{
				data_option = 4;
 80305b6:	4b53      	ldr	r3, [pc, #332]	; (8030704 <ProcessCommand+0x230>)
 80305b8:	2204      	movs	r2, #4
 80305ba:	601a      	str	r2, [r3, #0]
			}
			*p = (char)NULL;
 80305bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80305c0:	2200      	movs	r2, #0
 80305c2:	701a      	strb	r2, [r3, #0]
 80305c4:	e002      	b.n	80305cc <ProcessCommand+0xf8>
		}
		else
		{
			//	default
			data_option = 1;
 80305c6:	4b4f      	ldr	r3, [pc, #316]	; (8030704 <ProcessCommand+0x230>)
 80305c8:	2201      	movs	r2, #1
 80305ca:	601a      	str	r2, [r3, #0]
		}

		// 명령을 table에서 찾아서 
		for ( i = 0; i < NELEMENTS( user_command_table ); i++ )
 80305cc:	2300      	movs	r3, #0
 80305ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80305d2:	e078      	b.n	80306c6 <ProcessCommand+0x1f2>
		{
			if ( strcmp( argv[0], user_command_table[i].command_name ) == 0 )
 80305d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80305d6:	494c      	ldr	r1, [pc, #304]	; (8030708 <ProcessCommand+0x234>)
 80305d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80305dc:	011b      	lsls	r3, r3, #4
 80305de:	440b      	add	r3, r1
 80305e0:	681b      	ldr	r3, [r3, #0]
 80305e2:	4619      	mov	r1, r3
 80305e4:	4610      	mov	r0, r2
 80305e6:	f7ef fdf3 	bl	80201d0 <strcmp>
 80305ea:	4603      	mov	r3, r0
 80305ec:	2b00      	cmp	r3, #0
 80305ee:	d165      	bne.n	80306bc <ProcessCommand+0x1e8>
			{
				if ( argc >= 2 )
 80305f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80305f4:	2b01      	cmp	r3, #1
 80305f6:	dd30      	ble.n	803065a <ProcessCommand+0x186>
				{
					if ( (strcmp( argv[1], "help" ) == 0) || (strcmp( argv[1], "-h" ) == 0) )
 80305f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80305fa:	4944      	ldr	r1, [pc, #272]	; (803070c <ProcessCommand+0x238>)
 80305fc:	4618      	mov	r0, r3
 80305fe:	f7ef fde7 	bl	80201d0 <strcmp>
 8030602:	4603      	mov	r3, r0
 8030604:	2b00      	cmp	r3, #0
 8030606:	d007      	beq.n	8030618 <ProcessCommand+0x144>
 8030608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803060a:	4941      	ldr	r1, [pc, #260]	; (8030710 <ProcessCommand+0x23c>)
 803060c:	4618      	mov	r0, r3
 803060e:	f7ef fddf 	bl	80201d0 <strcmp>
 8030612:	4603      	mov	r3, r0
 8030614:	2b00      	cmp	r3, #0
 8030616:	d120      	bne.n	803065a <ProcessCommand+0x186>
					{
						printf( "%s\n", user_command_table[i].command_help1 );
 8030618:	4a3b      	ldr	r2, [pc, #236]	; (8030708 <ProcessCommand+0x234>)
 803061a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803061e:	011b      	lsls	r3, r3, #4
 8030620:	4413      	add	r3, r2
 8030622:	3304      	adds	r3, #4
 8030624:	681b      	ldr	r3, [r3, #0]
 8030626:	4618      	mov	r0, r3
 8030628:	f006 ffa8 	bl	803757c <puts>
						if ( user_command_table[i].command_help2 != NULL )
 803062c:	4a36      	ldr	r2, [pc, #216]	; (8030708 <ProcessCommand+0x234>)
 803062e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8030632:	011b      	lsls	r3, r3, #4
 8030634:	4413      	add	r3, r2
 8030636:	3308      	adds	r3, #8
 8030638:	681b      	ldr	r3, [r3, #0]
 803063a:	2b00      	cmp	r3, #0
 803063c:	d009      	beq.n	8030652 <ProcessCommand+0x17e>
						{
							printf( "%s\n", user_command_table[i].command_help2 );
 803063e:	4a32      	ldr	r2, [pc, #200]	; (8030708 <ProcessCommand+0x234>)
 8030640:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8030644:	011b      	lsls	r3, r3, #4
 8030646:	4413      	add	r3, r2
 8030648:	3308      	adds	r3, #8
 803064a:	681b      	ldr	r3, [r3, #0]
 803064c:	4618      	mov	r0, r3
 803064e:	f006 ff95 	bl	803757c <puts>
						}
						v = 1;
 8030652:	2301      	movs	r3, #1
 8030654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						break;
 8030658:	e039      	b.n	80306ce <ProcessCommand+0x1fa>
					}
				}
				// 처리함수를 호출
				if ( user_command_table[i].func( argc, argv ) < 0 )
 803065a:	4a2b      	ldr	r2, [pc, #172]	; (8030708 <ProcessCommand+0x234>)
 803065c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8030660:	011b      	lsls	r3, r3, #4
 8030662:	4413      	add	r3, r2
 8030664:	330c      	adds	r3, #12
 8030666:	681b      	ldr	r3, [r3, #0]
 8030668:	f107 0260 	add.w	r2, r7, #96	; 0x60
 803066c:	4611      	mov	r1, r2
 803066e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8030672:	4798      	blx	r3
 8030674:	4603      	mov	r3, r0
 8030676:	2b00      	cmp	r3, #0
 8030678:	da1c      	bge.n	80306b4 <ProcessCommand+0x1e0>
				{
					printf( "%s\n", user_command_table[i].command_help1 );
 803067a:	4a23      	ldr	r2, [pc, #140]	; (8030708 <ProcessCommand+0x234>)
 803067c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8030680:	011b      	lsls	r3, r3, #4
 8030682:	4413      	add	r3, r2
 8030684:	3304      	adds	r3, #4
 8030686:	681b      	ldr	r3, [r3, #0]
 8030688:	4618      	mov	r0, r3
 803068a:	f006 ff77 	bl	803757c <puts>
					if ( user_command_table[i].command_help2 != NULL )
 803068e:	4a1e      	ldr	r2, [pc, #120]	; (8030708 <ProcessCommand+0x234>)
 8030690:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8030694:	011b      	lsls	r3, r3, #4
 8030696:	4413      	add	r3, r2
 8030698:	3308      	adds	r3, #8
 803069a:	681b      	ldr	r3, [r3, #0]
 803069c:	2b00      	cmp	r3, #0
 803069e:	d009      	beq.n	80306b4 <ProcessCommand+0x1e0>
					{
						printf( "%s\n", user_command_table[i].command_help2 );
 80306a0:	4a19      	ldr	r2, [pc, #100]	; (8030708 <ProcessCommand+0x234>)
 80306a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80306a6:	011b      	lsls	r3, r3, #4
 80306a8:	4413      	add	r3, r2
 80306aa:	3308      	adds	r3, #8
 80306ac:	681b      	ldr	r3, [r3, #0]
 80306ae:	4618      	mov	r0, r3
 80306b0:	f006 ff64 	bl	803757c <puts>
					}
				}
				v = 1;	// 명령을 찾아서 처리했음을 표시
 80306b4:	2301      	movs	r3, #1
 80306b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				break;
 80306ba:	e008      	b.n	80306ce <ProcessCommand+0x1fa>
		for ( i = 0; i < NELEMENTS( user_command_table ); i++ )
 80306bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80306c0:	3301      	adds	r3, #1
 80306c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80306c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80306ca:	2b19      	cmp	r3, #25
 80306cc:	d982      	bls.n	80305d4 <ProcessCommand+0x100>
			}
		}
		if ( v == 0 )
 80306ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80306d2:	2b00      	cmp	r3, #0
 80306d4:	d105      	bne.n	80306e2 <ProcessCommand+0x20e>
		{
			// 엉뚱하게 입력한 경우
			printf( "%s: command not found\n\r", argv[0] );
 80306d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80306d8:	4619      	mov	r1, r3
 80306da:	480e      	ldr	r0, [pc, #56]	; (8030714 <ProcessCommand+0x240>)
 80306dc:	f006 fee0 	bl	80374a0 <iprintf>
 80306e0:	e005      	b.n	80306ee <ProcessCommand+0x21a>
		}
		else
		{
			// !! 처리를 위해서 old_cmd로 명령 복사
			strcpy( old_cmd, temp );
 80306e2:	f107 0310 	add.w	r3, r7, #16
 80306e6:	4619      	mov	r1, r3
 80306e8:	4805      	ldr	r0, [pc, #20]	; (8030700 <ProcessCommand+0x22c>)
 80306ea:	f007 fa41 	bl	8037b70 <strcpy>
		}
	}

	return 1;
 80306ee:	2301      	movs	r3, #1
}
 80306f0:	4618      	mov	r0, r3
 80306f2:	37c0      	adds	r7, #192	; 0xc0
 80306f4:	46bd      	mov	sp, r7
 80306f6:	bd80      	pop	{r7, pc}
 80306f8:	00415b1b 	.word	0x00415b1b
 80306fc:	08039fdc 	.word	0x08039fdc
 8030700:	20002254 	.word	0x20002254
 8030704:	20000644 	.word	0x20000644
 8030708:	20000648 	.word	0x20000648
 803070c:	08039a40 	.word	0x08039a40
 8030710:	08039fe0 	.word	0x08039fe0
 8030714:	08039fe4 	.word	0x08039fe4

08030718 <readline>:
static int		command_index = 0;

//========================================================================
int readline( char *bufp )
//========================================================================
{
 8030718:	b580      	push	{r7, lr}
 803071a:	b086      	sub	sp, #24
 803071c:	af00      	add	r7, sp, #0
 803071e:	6078      	str	r0, [r7, #4]
	//	printf( "%s\n", __func__ );

	char	ch;
	char	*command_buf = bufp;	//[MAX_COMMAND_LENGTH];
 8030720:	687b      	ldr	r3, [r7, #4]
 8030722:	617b      	str	r3, [r7, #20]

	int		ret = 0;
 8030724:	2300      	movs	r3, #0
 8030726:	613b      	str	r3, [r7, #16]

	for ( ;;)
	{
		ch = getchar();
 8030728:	f006 feb2 	bl	8037490 <getchar>
 803072c:	4603      	mov	r3, r0
 803072e:	73fb      	strb	r3, [r7, #15]

#if defined(USE_FREERTOS)
#else
		if ( ch == (char)-1 )
 8030730:	7bfb      	ldrb	r3, [r7, #15]
 8030732:	2bff      	cmp	r3, #255	; 0xff
 8030734:	d102      	bne.n	803073c <readline+0x24>
		{
			//	Input Data가 없는 경우 ( Non-Blocking - OS less )
			return -1;
 8030736:	f04f 33ff 	mov.w	r3, #4294967295
 803073a:	e09e      	b.n	803087a <readline+0x162>
		}
#endif

		if ( ch == 0x08 || ch == 0x7F )	// Backspace
 803073c:	7bfb      	ldrb	r3, [r7, #15]
 803073e:	2b08      	cmp	r3, #8
 8030740:	d002      	beq.n	8030748 <readline+0x30>
 8030742:	7bfb      	ldrb	r3, [r7, #15]
 8030744:	2b7f      	cmp	r3, #127	; 0x7f
 8030746:	d10f      	bne.n	8030768 <readline+0x50>
		{
			if ( command_index > 0 )
 8030748:	4b4e      	ldr	r3, [pc, #312]	; (8030884 <readline+0x16c>)
 803074a:	681b      	ldr	r3, [r3, #0]
 803074c:	2b00      	cmp	r3, #0
 803074e:	f340 8093 	ble.w	8030878 <readline+0x160>
			{
				printf( "%c %c", 8, 8 );
 8030752:	2208      	movs	r2, #8
 8030754:	2108      	movs	r1, #8
 8030756:	484c      	ldr	r0, [pc, #304]	; (8030888 <readline+0x170>)
 8030758:	f006 fea2 	bl	80374a0 <iprintf>
				command_index--;
 803075c:	4b49      	ldr	r3, [pc, #292]	; (8030884 <readline+0x16c>)
 803075e:	681b      	ldr	r3, [r3, #0]
 8030760:	3b01      	subs	r3, #1
 8030762:	4a48      	ldr	r2, [pc, #288]	; (8030884 <readline+0x16c>)
 8030764:	6013      	str	r3, [r2, #0]
			if ( command_index > 0 )
 8030766:	e087      	b.n	8030878 <readline+0x160>
			}
		}
		else if ( ch == 0x15 )			// control-u, all input clear
 8030768:	7bfb      	ldrb	r3, [r7, #15]
 803076a:	2b15      	cmp	r3, #21
 803076c:	d10f      	bne.n	803078e <readline+0x76>
		{
			while ( 0 < command_index )
 803076e:	e009      	b.n	8030784 <readline+0x6c>
			{
				printf( "%c %c", 8, 8 );
 8030770:	2208      	movs	r2, #8
 8030772:	2108      	movs	r1, #8
 8030774:	4844      	ldr	r0, [pc, #272]	; (8030888 <readline+0x170>)
 8030776:	f006 fe93 	bl	80374a0 <iprintf>
				command_index--;
 803077a:	4b42      	ldr	r3, [pc, #264]	; (8030884 <readline+0x16c>)
 803077c:	681b      	ldr	r3, [r3, #0]
 803077e:	3b01      	subs	r3, #1
 8030780:	4a40      	ldr	r2, [pc, #256]	; (8030884 <readline+0x16c>)
 8030782:	6013      	str	r3, [r2, #0]
			while ( 0 < command_index )
 8030784:	4b3f      	ldr	r3, [pc, #252]	; (8030884 <readline+0x16c>)
 8030786:	681b      	ldr	r3, [r3, #0]
 8030788:	2b00      	cmp	r3, #0
 803078a:	dcf1      	bgt.n	8030770 <readline+0x58>
 803078c:	e7cc      	b.n	8030728 <readline+0x10>
			}
		}
		else if ( ch == 0x17 )			// control-w, erase one word
 803078e:	7bfb      	ldrb	r3, [r7, #15]
 8030790:	2b17      	cmp	r3, #23
 8030792:	d12e      	bne.n	80307f2 <readline+0xda>
		{
			/* erase space */
			while ( (0 < command_index) && (command_buf[command_index] == ' ') ) {
 8030794:	e009      	b.n	80307aa <readline+0x92>
				printf( "%c %c", 8, 8 );
 8030796:	2208      	movs	r2, #8
 8030798:	2108      	movs	r1, #8
 803079a:	483b      	ldr	r0, [pc, #236]	; (8030888 <readline+0x170>)
 803079c:	f006 fe80 	bl	80374a0 <iprintf>
				command_index--;
 80307a0:	4b38      	ldr	r3, [pc, #224]	; (8030884 <readline+0x16c>)
 80307a2:	681b      	ldr	r3, [r3, #0]
 80307a4:	3b01      	subs	r3, #1
 80307a6:	4a37      	ldr	r2, [pc, #220]	; (8030884 <readline+0x16c>)
 80307a8:	6013      	str	r3, [r2, #0]
			while ( (0 < command_index) && (command_buf[command_index] == ' ') ) {
 80307aa:	4b36      	ldr	r3, [pc, #216]	; (8030884 <readline+0x16c>)
 80307ac:	681b      	ldr	r3, [r3, #0]
 80307ae:	2b00      	cmp	r3, #0
 80307b0:	dd12      	ble.n	80307d8 <readline+0xc0>
 80307b2:	4b34      	ldr	r3, [pc, #208]	; (8030884 <readline+0x16c>)
 80307b4:	681b      	ldr	r3, [r3, #0]
 80307b6:	461a      	mov	r2, r3
 80307b8:	697b      	ldr	r3, [r7, #20]
 80307ba:	4413      	add	r3, r2
 80307bc:	781b      	ldrb	r3, [r3, #0]
 80307be:	2b20      	cmp	r3, #32
 80307c0:	d0e9      	beq.n	8030796 <readline+0x7e>
			}
			/* erase char not space */
			while ( (0 < command_index) && (command_buf[command_index] != ' ') ) {
 80307c2:	e009      	b.n	80307d8 <readline+0xc0>
				printf( "%c %c", 8, 8 );
 80307c4:	2208      	movs	r2, #8
 80307c6:	2108      	movs	r1, #8
 80307c8:	482f      	ldr	r0, [pc, #188]	; (8030888 <readline+0x170>)
 80307ca:	f006 fe69 	bl	80374a0 <iprintf>
				command_index--;
 80307ce:	4b2d      	ldr	r3, [pc, #180]	; (8030884 <readline+0x16c>)
 80307d0:	681b      	ldr	r3, [r3, #0]
 80307d2:	3b01      	subs	r3, #1
 80307d4:	4a2b      	ldr	r2, [pc, #172]	; (8030884 <readline+0x16c>)
 80307d6:	6013      	str	r3, [r2, #0]
			while ( (0 < command_index) && (command_buf[command_index] != ' ') ) {
 80307d8:	4b2a      	ldr	r3, [pc, #168]	; (8030884 <readline+0x16c>)
 80307da:	681b      	ldr	r3, [r3, #0]
 80307dc:	2b00      	cmp	r3, #0
 80307de:	dda3      	ble.n	8030728 <readline+0x10>
 80307e0:	4b28      	ldr	r3, [pc, #160]	; (8030884 <readline+0x16c>)
 80307e2:	681b      	ldr	r3, [r3, #0]
 80307e4:	461a      	mov	r2, r3
 80307e6:	697b      	ldr	r3, [r7, #20]
 80307e8:	4413      	add	r3, r2
 80307ea:	781b      	ldrb	r3, [r3, #0]
 80307ec:	2b20      	cmp	r3, #32
 80307ee:	d1e9      	bne.n	80307c4 <readline+0xac>
 80307f0:	e79a      	b.n	8030728 <readline+0x10>
			}
		}
		else if ( (ch == 0x0D) || (ch == 0x0A) )
 80307f2:	7bfb      	ldrb	r3, [r7, #15]
 80307f4:	2b0d      	cmp	r3, #13
 80307f6:	d002      	beq.n	80307fe <readline+0xe6>
 80307f8:	7bfb      	ldrb	r3, [r7, #15]
 80307fa:	2b0a      	cmp	r3, #10
 80307fc:	d111      	bne.n	8030822 <readline+0x10a>
		{
			printf( "\n\r" );
 80307fe:	4823      	ldr	r0, [pc, #140]	; (803088c <readline+0x174>)
 8030800:	f006 fe4e 	bl	80374a0 <iprintf>
			command_buf[command_index] = 0; // Null terminate the input command
 8030804:	4b1f      	ldr	r3, [pc, #124]	; (8030884 <readline+0x16c>)
 8030806:	681b      	ldr	r3, [r3, #0]
 8030808:	461a      	mov	r2, r3
 803080a:	697b      	ldr	r3, [r7, #20]
 803080c:	4413      	add	r3, r2
 803080e:	2200      	movs	r2, #0
 8030810:	701a      	strb	r2, [r3, #0]

			ret = command_index;
 8030812:	4b1c      	ldr	r3, [pc, #112]	; (8030884 <readline+0x16c>)
 8030814:	681b      	ldr	r3, [r3, #0]
 8030816:	613b      	str	r3, [r7, #16]
			command_index = 0;		//	입력후 index 초기화.
 8030818:	4b1a      	ldr	r3, [pc, #104]	; (8030884 <readline+0x16c>)
 803081a:	2200      	movs	r2, #0
 803081c:	601a      	str	r2, [r3, #0]

			return ret;
 803081e:	693b      	ldr	r3, [r7, #16]
 8030820:	e02b      	b.n	803087a <readline+0x162>
		}
		else if ( (0x20 <= ch) && (ch <= 0x7E) )
 8030822:	7bfb      	ldrb	r3, [r7, #15]
 8030824:	2b1f      	cmp	r3, #31
 8030826:	d915      	bls.n	8030854 <readline+0x13c>
 8030828:	7bfb      	ldrb	r3, [r7, #15]
 803082a:	2b7e      	cmp	r3, #126	; 0x7e
 803082c:	d812      	bhi.n	8030854 <readline+0x13c>
		{
			//	ANSI 입력.
			if ( command_index < (MAX_COMMAND_LENGTH - 2) )
 803082e:	4b15      	ldr	r3, [pc, #84]	; (8030884 <readline+0x16c>)
 8030830:	681b      	ldr	r3, [r3, #0]
 8030832:	2b3d      	cmp	r3, #61	; 0x3d
 8030834:	dc09      	bgt.n	803084a <readline+0x132>
			{
				command_buf[command_index++] = ch;
 8030836:	4b13      	ldr	r3, [pc, #76]	; (8030884 <readline+0x16c>)
 8030838:	681b      	ldr	r3, [r3, #0]
 803083a:	1c5a      	adds	r2, r3, #1
 803083c:	4911      	ldr	r1, [pc, #68]	; (8030884 <readline+0x16c>)
 803083e:	600a      	str	r2, [r1, #0]
 8030840:	461a      	mov	r2, r3
 8030842:	697b      	ldr	r3, [r7, #20]
 8030844:	4413      	add	r3, r2
 8030846:	7bfa      	ldrb	r2, [r7, #15]
 8030848:	701a      	strb	r2, [r3, #0]
			}
			printf( "%c", ch );    // Echo the character
 803084a:	7bfb      	ldrb	r3, [r7, #15]
 803084c:	4618      	mov	r0, r3
 803084e:	f006 fe39 	bl	80374c4 <putchar>
 8030852:	e011      	b.n	8030878 <readline+0x160>
//			printf( "[%02X]", ch );    // Echo the character
		}
		else 
		{
			//	한글입력.
			if ( command_index < ( MAX_COMMAND_LENGTH - 2 ) )
 8030854:	4b0b      	ldr	r3, [pc, #44]	; (8030884 <readline+0x16c>)
 8030856:	681b      	ldr	r3, [r3, #0]
 8030858:	2b3d      	cmp	r3, #61	; 0x3d
 803085a:	dc09      	bgt.n	8030870 <readline+0x158>
			{
				command_buf[command_index++] = ch;
 803085c:	4b09      	ldr	r3, [pc, #36]	; (8030884 <readline+0x16c>)
 803085e:	681b      	ldr	r3, [r3, #0]
 8030860:	1c5a      	adds	r2, r3, #1
 8030862:	4908      	ldr	r1, [pc, #32]	; (8030884 <readline+0x16c>)
 8030864:	600a      	str	r2, [r1, #0]
 8030866:	461a      	mov	r2, r3
 8030868:	697b      	ldr	r3, [r7, #20]
 803086a:	4413      	add	r3, r2
 803086c:	7bfa      	ldrb	r2, [r7, #15]
 803086e:	701a      	strb	r2, [r3, #0]
			}
			printf( "%c", ch );    // Echo the character
 8030870:	7bfb      	ldrb	r3, [r7, #15]
 8030872:	4618      	mov	r0, r3
 8030874:	f006 fe26 	bl	80374c4 <putchar>
		ch = getchar();
 8030878:	e756      	b.n	8030728 <readline+0x10>
//		HAL_Delay( 0 );
#endif
	}

	return 0;
}
 803087a:	4618      	mov	r0, r3
 803087c:	3718      	adds	r7, #24
 803087e:	46bd      	mov	sp, r7
 8030880:	bd80      	pop	{r7, pc}
 8030882:	bf00      	nop
 8030884:	200022d4 	.word	0x200022d4
 8030888:	08039ffc 	.word	0x08039ffc
 803088c:	0803a004 	.word	0x0803a004

08030890 <CLIPrompt>:

//========================================================================
void	CLIPrompt( void )
//========================================================================
{
 8030890:	b580      	push	{r7, lr}
 8030892:	af00      	add	r7, sp, #0
	printf( "%s", PROMPT_STRING );
 8030894:	4902      	ldr	r1, [pc, #8]	; (80308a0 <CLIPrompt+0x10>)
 8030896:	4803      	ldr	r0, [pc, #12]	; (80308a4 <CLIPrompt+0x14>)
 8030898:	f006 fe02 	bl	80374a0 <iprintf>
}
 803089c:	bf00      	nop
 803089e:	bd80      	pop	{r7, pc}
 80308a0:	0803a008 	.word	0x0803a008
 80308a4:	0803a010 	.word	0x0803a010

080308a8 <SetCLIPrompt>:
int		( *g_fnCLIProc )( char * ) = ProcessCommand;

//========================================================================
void	SetCLIPrompt( void ( *fnPrompt )( void ) )
//========================================================================
{
 80308a8:	b480      	push	{r7}
 80308aa:	b083      	sub	sp, #12
 80308ac:	af00      	add	r7, sp, #0
 80308ae:	6078      	str	r0, [r7, #4]
	g_fnCLIPrompt = fnPrompt;
 80308b0:	4a04      	ldr	r2, [pc, #16]	; (80308c4 <SetCLIPrompt+0x1c>)
 80308b2:	687b      	ldr	r3, [r7, #4]
 80308b4:	6013      	str	r3, [r2, #0]
}
 80308b6:	bf00      	nop
 80308b8:	370c      	adds	r7, #12
 80308ba:	46bd      	mov	sp, r7
 80308bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80308c0:	4770      	bx	lr
 80308c2:	bf00      	nop
 80308c4:	200007e8 	.word	0x200007e8

080308c8 <SetCLIProc>:

//========================================================================
void	SetCLIProc( int ( *fnProc )( char *cmd ) )
//========================================================================
{
 80308c8:	b480      	push	{r7}
 80308ca:	b083      	sub	sp, #12
 80308cc:	af00      	add	r7, sp, #0
 80308ce:	6078      	str	r0, [r7, #4]
	g_fnCLIProc = fnProc;
 80308d0:	4a04      	ldr	r2, [pc, #16]	; (80308e4 <SetCLIProc+0x1c>)
 80308d2:	687b      	ldr	r3, [r7, #4]
 80308d4:	6013      	str	r3, [r2, #0]
}
 80308d6:	bf00      	nop
 80308d8:	370c      	adds	r7, #12
 80308da:	46bd      	mov	sp, r7
 80308dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80308e0:	4770      	bx	lr
 80308e2:	bf00      	nop
 80308e4:	200007ec 	.word	0x200007ec

080308e8 <LoopProcCLI>:


//========================================================================
void	LoopProcCLI ( void )
//========================================================================
{
 80308e8:	b580      	push	{r7, lr}
 80308ea:	b082      	sub	sp, #8
 80308ec:	af00      	add	r7, sp, #0
	int len;
	if ( input_check() )
 80308ee:	f003 fe3b 	bl	8034568 <input_check>
 80308f2:	4603      	mov	r3, r0
 80308f4:	2b00      	cmp	r3, #0
 80308f6:	d00d      	beq.n	8030914 <LoopProcCLI+0x2c>
	{
		len = readline( command_buf );
 80308f8:	4808      	ldr	r0, [pc, #32]	; (803091c <LoopProcCLI+0x34>)
 80308fa:	f7ff ff0d 	bl	8030718 <readline>
 80308fe:	6078      	str	r0, [r7, #4]
		if ( len >= 0 )
 8030900:	687b      	ldr	r3, [r7, #4]
 8030902:	2b00      	cmp	r3, #0
 8030904:	db06      	blt.n	8030914 <LoopProcCLI+0x2c>
		{
//			printf( "%s(%d) : %s\n", __func__, __LINE__, command_buf );
			//	Process Command
//			ProcessCommand( command_buf );
			g_fnCLIProc( command_buf );
 8030906:	4b06      	ldr	r3, [pc, #24]	; (8030920 <LoopProcCLI+0x38>)
 8030908:	681b      	ldr	r3, [r3, #0]
 803090a:	4804      	ldr	r0, [pc, #16]	; (803091c <LoopProcCLI+0x34>)
 803090c:	4798      	blx	r3

			//	Print Prompt
//			printf( "%s", PROMPT_STRING );
			g_fnCLIPrompt();
 803090e:	4b05      	ldr	r3, [pc, #20]	; (8030924 <LoopProcCLI+0x3c>)
 8030910:	681b      	ldr	r3, [r3, #0]
 8030912:	4798      	blx	r3
		}
	}
}
 8030914:	bf00      	nop
 8030916:	3708      	adds	r7, #8
 8030918:	46bd      	mov	sp, r7
 803091a:	bd80      	pop	{r7, pc}
 803091c:	20002294 	.word	0x20002294
 8030920:	200007ec 	.word	0x200007ec
 8030924:	200007e8 	.word	0x200007e8

08030928 <cmd_help>:
}

//========================================================================
int cmd_help( int argc, char *argv[] )
//========================================================================
{
 8030928:	b580      	push	{r7, lr}
 803092a:	b084      	sub	sp, #16
 803092c:	af00      	add	r7, sp, #0
 803092e:	6078      	str	r0, [r7, #4]
 8030930:	6039      	str	r1, [r7, #0]
	int	i;
	int	ok = 0;
 8030932:	2300      	movs	r3, #0
 8030934:	60bb      	str	r3, [r7, #8]

//	printf( "%s(%d)\n", __func__, __LINE__ );

	for ( i = 1; i < NELEMENTS( user_command_table ); i++ )
 8030936:	2301      	movs	r3, #1
 8030938:	60fb      	str	r3, [r7, #12]
 803093a:	e04c      	b.n	80309d6 <cmd_help+0xae>
	{
		if ( 1 < argc )
 803093c:	687b      	ldr	r3, [r7, #4]
 803093e:	2b01      	cmp	r3, #1
 8030940:	dd33      	ble.n	80309aa <cmd_help+0x82>
		{
			if ( strcmp( argv[1], user_command_table[i].command_name ) == 0 )
 8030942:	683b      	ldr	r3, [r7, #0]
 8030944:	3304      	adds	r3, #4
 8030946:	681a      	ldr	r2, [r3, #0]
 8030948:	492c      	ldr	r1, [pc, #176]	; (80309fc <cmd_help+0xd4>)
 803094a:	68fb      	ldr	r3, [r7, #12]
 803094c:	011b      	lsls	r3, r3, #4
 803094e:	440b      	add	r3, r1
 8030950:	681b      	ldr	r3, [r3, #0]
 8030952:	4619      	mov	r1, r3
 8030954:	4610      	mov	r0, r2
 8030956:	f7ef fc3b 	bl	80201d0 <strcmp>
 803095a:	4603      	mov	r3, r0
 803095c:	2b00      	cmp	r3, #0
 803095e:	d137      	bne.n	80309d0 <cmd_help+0xa8>
			{
				if ( user_command_table[i].command_help1 != NULL )
 8030960:	4a26      	ldr	r2, [pc, #152]	; (80309fc <cmd_help+0xd4>)
 8030962:	68fb      	ldr	r3, [r7, #12]
 8030964:	011b      	lsls	r3, r3, #4
 8030966:	4413      	add	r3, r2
 8030968:	3304      	adds	r3, #4
 803096a:	681b      	ldr	r3, [r3, #0]
 803096c:	2b00      	cmp	r3, #0
 803096e:	d008      	beq.n	8030982 <cmd_help+0x5a>
				{
					printf( "%s\n", user_command_table[i].command_help1 );
 8030970:	4a22      	ldr	r2, [pc, #136]	; (80309fc <cmd_help+0xd4>)
 8030972:	68fb      	ldr	r3, [r7, #12]
 8030974:	011b      	lsls	r3, r3, #4
 8030976:	4413      	add	r3, r2
 8030978:	3304      	adds	r3, #4
 803097a:	681b      	ldr	r3, [r3, #0]
 803097c:	4618      	mov	r0, r3
 803097e:	f006 fdfd 	bl	803757c <puts>
				}
				if ( user_command_table[i].command_help2 != NULL )
 8030982:	4a1e      	ldr	r2, [pc, #120]	; (80309fc <cmd_help+0xd4>)
 8030984:	68fb      	ldr	r3, [r7, #12]
 8030986:	011b      	lsls	r3, r3, #4
 8030988:	4413      	add	r3, r2
 803098a:	3308      	adds	r3, #8
 803098c:	681b      	ldr	r3, [r3, #0]
 803098e:	2b00      	cmp	r3, #0
 8030990:	d008      	beq.n	80309a4 <cmd_help+0x7c>
				{
					printf( "%s\n", user_command_table[i].command_help2 );
 8030992:	4a1a      	ldr	r2, [pc, #104]	; (80309fc <cmd_help+0xd4>)
 8030994:	68fb      	ldr	r3, [r7, #12]
 8030996:	011b      	lsls	r3, r3, #4
 8030998:	4413      	add	r3, r2
 803099a:	3308      	adds	r3, #8
 803099c:	681b      	ldr	r3, [r3, #0]
 803099e:	4618      	mov	r0, r3
 80309a0:	f006 fdec 	bl	803757c <puts>
				}
				ok = 1;
 80309a4:	2301      	movs	r3, #1
 80309a6:	60bb      	str	r3, [r7, #8]
 80309a8:	e012      	b.n	80309d0 <cmd_help+0xa8>
			}
		}
		else
		{
			if ( user_command_table[i].command_help1 != NULL )
 80309aa:	4a14      	ldr	r2, [pc, #80]	; (80309fc <cmd_help+0xd4>)
 80309ac:	68fb      	ldr	r3, [r7, #12]
 80309ae:	011b      	lsls	r3, r3, #4
 80309b0:	4413      	add	r3, r2
 80309b2:	3304      	adds	r3, #4
 80309b4:	681b      	ldr	r3, [r3, #0]
 80309b6:	2b00      	cmp	r3, #0
 80309b8:	d008      	beq.n	80309cc <cmd_help+0xa4>
			{
				printf( "%s\n", user_command_table[i].command_help1 );
 80309ba:	4a10      	ldr	r2, [pc, #64]	; (80309fc <cmd_help+0xd4>)
 80309bc:	68fb      	ldr	r3, [r7, #12]
 80309be:	011b      	lsls	r3, r3, #4
 80309c0:	4413      	add	r3, r2
 80309c2:	3304      	adds	r3, #4
 80309c4:	681b      	ldr	r3, [r3, #0]
 80309c6:	4618      	mov	r0, r3
 80309c8:	f006 fdd8 	bl	803757c <puts>
			}
			ok = 1;
 80309cc:	2301      	movs	r3, #1
 80309ce:	60bb      	str	r3, [r7, #8]
	for ( i = 1; i < NELEMENTS( user_command_table ); i++ )
 80309d0:	68fb      	ldr	r3, [r7, #12]
 80309d2:	3301      	adds	r3, #1
 80309d4:	60fb      	str	r3, [r7, #12]
 80309d6:	68fb      	ldr	r3, [r7, #12]
 80309d8:	2b19      	cmp	r3, #25
 80309da:	d9af      	bls.n	803093c <cmd_help+0x14>
		}
	}
	if ( ok == 0 )
 80309dc:	68bb      	ldr	r3, [r7, #8]
 80309de:	2b00      	cmp	r3, #0
 80309e0:	d106      	bne.n	80309f0 <cmd_help+0xc8>
	{
		printf( "unknown command %s\n", argv[1] );
 80309e2:	683b      	ldr	r3, [r7, #0]
 80309e4:	3304      	adds	r3, #4
 80309e6:	681b      	ldr	r3, [r3, #0]
 80309e8:	4619      	mov	r1, r3
 80309ea:	4805      	ldr	r0, [pc, #20]	; (8030a00 <cmd_help+0xd8>)
 80309ec:	f006 fd58 	bl	80374a0 <iprintf>
	}
	return 0;
 80309f0:	2300      	movs	r3, #0
}
 80309f2:	4618      	mov	r0, r3
 80309f4:	3710      	adds	r7, #16
 80309f6:	46bd      	mov	sp, r7
 80309f8:	bd80      	pop	{r7, pc}
 80309fa:	bf00      	nop
 80309fc:	20000648 	.word	0x20000648
 8030a00:	0803a014 	.word	0x0803a014

08030a04 <cmd_uptime>:

//========================================================================
int cmd_uptime(int argc, char *argv[])
//========================================================================
{
 8030a04:	b580      	push	{r7, lr}
 8030a06:	b08a      	sub	sp, #40	; 0x28
 8030a08:	af02      	add	r7, sp, #8
 8030a0a:	6078      	str	r0, [r7, #4]
 8030a0c:	6039      	str	r1, [r7, #0]
//=============================================================================

#if defined( USE_FREERTOS )
	unsigned long	tmp = xTaskGetTickCount() / configTICK_RATE_HZ;
#else
	unsigned long	tmp = HAL_GetTick() / 1000;
 8030a0e:	f7f1 f8ab 	bl	8021b68 <HAL_GetTick>
 8030a12:	4603      	mov	r3, r0
 8030a14:	4a26      	ldr	r2, [pc, #152]	; (8030ab0 <cmd_uptime+0xac>)
 8030a16:	fba2 2303 	umull	r2, r3, r2, r3
 8030a1a:	099b      	lsrs	r3, r3, #6
 8030a1c:	61fb      	str	r3, [r7, #28]
#endif

	int	sec, min, hour;
	int	day;

	day = (tmp / 3600 / 24);
 8030a1e:	69fb      	ldr	r3, [r7, #28]
 8030a20:	4a24      	ldr	r2, [pc, #144]	; (8030ab4 <cmd_uptime+0xb0>)
 8030a22:	fba2 2303 	umull	r2, r3, r2, r3
 8030a26:	0c1b      	lsrs	r3, r3, #16
 8030a28:	61bb      	str	r3, [r7, #24]
	tmp = tmp % (3600 * 24);
 8030a2a:	69fb      	ldr	r3, [r7, #28]
 8030a2c:	4a21      	ldr	r2, [pc, #132]	; (8030ab4 <cmd_uptime+0xb0>)
 8030a2e:	fba2 1203 	umull	r1, r2, r2, r3
 8030a32:	0c12      	lsrs	r2, r2, #16
 8030a34:	4920      	ldr	r1, [pc, #128]	; (8030ab8 <cmd_uptime+0xb4>)
 8030a36:	fb01 f202 	mul.w	r2, r1, r2
 8030a3a:	1a9b      	subs	r3, r3, r2
 8030a3c:	61fb      	str	r3, [r7, #28]

	hour = tmp / 3600;
 8030a3e:	69fb      	ldr	r3, [r7, #28]
 8030a40:	4a1e      	ldr	r2, [pc, #120]	; (8030abc <cmd_uptime+0xb8>)
 8030a42:	fba2 2303 	umull	r2, r3, r2, r3
 8030a46:	0adb      	lsrs	r3, r3, #11
 8030a48:	617b      	str	r3, [r7, #20]
	tmp = tmp % 3600;
 8030a4a:	69fb      	ldr	r3, [r7, #28]
 8030a4c:	4a1b      	ldr	r2, [pc, #108]	; (8030abc <cmd_uptime+0xb8>)
 8030a4e:	fba2 1203 	umull	r1, r2, r2, r3
 8030a52:	0ad2      	lsrs	r2, r2, #11
 8030a54:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8030a58:	fb01 f202 	mul.w	r2, r1, r2
 8030a5c:	1a9b      	subs	r3, r3, r2
 8030a5e:	61fb      	str	r3, [r7, #28]

	min = tmp / 60;
 8030a60:	69fb      	ldr	r3, [r7, #28]
 8030a62:	4a17      	ldr	r2, [pc, #92]	; (8030ac0 <cmd_uptime+0xbc>)
 8030a64:	fba2 2303 	umull	r2, r3, r2, r3
 8030a68:	095b      	lsrs	r3, r3, #5
 8030a6a:	613b      	str	r3, [r7, #16]
	sec = tmp % 60;
 8030a6c:	69f9      	ldr	r1, [r7, #28]
 8030a6e:	4b14      	ldr	r3, [pc, #80]	; (8030ac0 <cmd_uptime+0xbc>)
 8030a70:	fba3 2301 	umull	r2, r3, r3, r1
 8030a74:	095a      	lsrs	r2, r3, #5
 8030a76:	4613      	mov	r3, r2
 8030a78:	011b      	lsls	r3, r3, #4
 8030a7a:	1a9b      	subs	r3, r3, r2
 8030a7c:	009b      	lsls	r3, r3, #2
 8030a7e:	1aca      	subs	r2, r1, r3
 8030a80:	60fa      	str	r2, [r7, #12]

	if (0 < day)
 8030a82:	69bb      	ldr	r3, [r7, #24]
 8030a84:	2b00      	cmp	r3, #0
 8030a86:	dd08      	ble.n	8030a9a <cmd_uptime+0x96>
	{
		printf("%d day(s) %d:%02d:%02d up.\n", day, hour, min, sec);
 8030a88:	68fb      	ldr	r3, [r7, #12]
 8030a8a:	9300      	str	r3, [sp, #0]
 8030a8c:	693b      	ldr	r3, [r7, #16]
 8030a8e:	697a      	ldr	r2, [r7, #20]
 8030a90:	69b9      	ldr	r1, [r7, #24]
 8030a92:	480c      	ldr	r0, [pc, #48]	; (8030ac4 <cmd_uptime+0xc0>)
 8030a94:	f006 fd04 	bl	80374a0 <iprintf>
 8030a98:	e005      	b.n	8030aa6 <cmd_uptime+0xa2>
	}
	else
	{
		printf("%d:%02d:%02d up.\n", hour, min, sec);
 8030a9a:	68fb      	ldr	r3, [r7, #12]
 8030a9c:	693a      	ldr	r2, [r7, #16]
 8030a9e:	6979      	ldr	r1, [r7, #20]
 8030aa0:	4809      	ldr	r0, [pc, #36]	; (8030ac8 <cmd_uptime+0xc4>)
 8030aa2:	f006 fcfd 	bl	80374a0 <iprintf>

//=============================================================================
#endif
//=============================================================================

	return 0;
 8030aa6:	2300      	movs	r3, #0
}
 8030aa8:	4618      	mov	r0, r3
 8030aaa:	3720      	adds	r7, #32
 8030aac:	46bd      	mov	sp, r7
 8030aae:	bd80      	pop	{r7, pc}
 8030ab0:	10624dd3 	.word	0x10624dd3
 8030ab4:	c22e4507 	.word	0xc22e4507
 8030ab8:	00015180 	.word	0x00015180
 8030abc:	91a2b3c5 	.word	0x91a2b3c5
 8030ac0:	88888889 	.word	0x88888889
 8030ac4:	0803a028 	.word	0x0803a028
 8030ac8:	0803a044 	.word	0x0803a044

08030acc <cmd_ver>:

//========================================================================
int cmd_ver(int argc, char *argv[])
//========================================================================
{
 8030acc:	b580      	push	{r7, lr}
 8030ace:	b082      	sub	sp, #8
 8030ad0:	af00      	add	r7, sp, #0
 8030ad2:	6078      	str	r0, [r7, #4]
 8030ad4:	6039      	str	r1, [r7, #0]
	printf("Version = %s(%s)\n", APP_VER, APP_BUILD_DATE );
 8030ad6:	4a05      	ldr	r2, [pc, #20]	; (8030aec <cmd_ver+0x20>)
 8030ad8:	4905      	ldr	r1, [pc, #20]	; (8030af0 <cmd_ver+0x24>)
 8030ada:	4806      	ldr	r0, [pc, #24]	; (8030af4 <cmd_ver+0x28>)
 8030adc:	f006 fce0 	bl	80374a0 <iprintf>

	return 0;
 8030ae0:	2300      	movs	r3, #0
}
 8030ae2:	4618      	mov	r0, r3
 8030ae4:	3708      	adds	r7, #8
 8030ae6:	46bd      	mov	sp, r7
 8030ae8:	bd80      	pop	{r7, pc}
 8030aea:	bf00      	nop
 8030aec:	0803a058 	.word	0x0803a058
 8030af0:	0803a070 	.word	0x0803a070
 8030af4:	0803a07c 	.word	0x0803a07c

08030af8 <cmd_reset>:


//========================================================================
int cmd_reset(int argc, char *argv[])
//========================================================================
{
 8030af8:	b580      	push	{r7, lr}
 8030afa:	b082      	sub	sp, #8
 8030afc:	af00      	add	r7, sp, #0
 8030afe:	6078      	str	r0, [r7, #4]
 8030b00:	6039      	str	r1, [r7, #0]
  	NVIC_SystemReset();
 8030b02:	f7ff fc91 	bl	8030428 <__NVIC_SystemReset>
	...

08030b08 <cmd_WDGStOff>:
}

//========================================================================
extern int g_bEnIWDGStat;	//	WatchDog Stat Enable
int	cmd_WDGStOff(int argc, char *argv[])
{
 8030b08:	b480      	push	{r7}
 8030b0a:	b083      	sub	sp, #12
 8030b0c:	af00      	add	r7, sp, #0
 8030b0e:	6078      	str	r0, [r7, #4]
 8030b10:	6039      	str	r1, [r7, #0]
	g_bEnIWDGStat = 0;
 8030b12:	4b05      	ldr	r3, [pc, #20]	; (8030b28 <cmd_WDGStOff+0x20>)
 8030b14:	2200      	movs	r2, #0
 8030b16:	601a      	str	r2, [r3, #0]
}
 8030b18:	bf00      	nop
 8030b1a:	4618      	mov	r0, r3
 8030b1c:	370c      	adds	r7, #12
 8030b1e:	46bd      	mov	sp, r7
 8030b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b24:	4770      	bx	lr
 8030b26:	bf00      	nop
 8030b28:	20000000 	.word	0x20000000

08030b2c <display_diag_menu>:
 * diag main menu를 display
 */
//========================================================================
void display_diag_menu( void )
//========================================================================
{
 8030b2c:	b580      	push	{r7, lr}
 8030b2e:	af00      	add	r7, sp, #0
	CLEAR_VT_SCREEN();
 8030b30:	481d      	ldr	r0, [pc, #116]	; (8030ba8 <display_diag_menu+0x7c>)
 8030b32:	f006 fcb5 	bl	80374a0 <iprintf>
	GOTO_VT_XY();
 8030b36:	481d      	ldr	r0, [pc, #116]	; (8030bac <display_diag_menu+0x80>)
 8030b38:	f006 fcb2 	bl	80374a0 <iprintf>

	printf( "\n" );
 8030b3c:	200a      	movs	r0, #10
 8030b3e:	f006 fcc1 	bl	80374c4 <putchar>
	printf( "\n" );
 8030b42:	200a      	movs	r0, #10
 8030b44:	f006 fcbe 	bl	80374c4 <putchar>
	printf( "\n" );
 8030b48:	200a      	movs	r0, #10
 8030b4a:	f006 fcbb 	bl	80374c4 <putchar>
	printf( "\n" );
 8030b4e:	200a      	movs	r0, #10
 8030b50:	f006 fcb8 	bl	80374c4 <putchar>

	printf( "       **************************************************************\n" );
 8030b54:	4816      	ldr	r0, [pc, #88]	; (8030bb0 <display_diag_menu+0x84>)
 8030b56:	f006 fd11 	bl	803757c <puts>
	printf( "       *                       Board Test V1.0                      *\n" );
 8030b5a:	4816      	ldr	r0, [pc, #88]	; (8030bb4 <display_diag_menu+0x88>)
 8030b5c:	f006 fd0e 	bl	803757c <puts>
	printf( "       *                                                            *\n" );
 8030b60:	4815      	ldr	r0, [pc, #84]	; (8030bb8 <display_diag_menu+0x8c>)
 8030b62:	f006 fd0b 	bl	803757c <puts>
	printf( "       *  1 : Audio Test.                                           *\n" );
 8030b66:	4815      	ldr	r0, [pc, #84]	; (8030bbc <display_diag_menu+0x90>)
 8030b68:	f006 fd08 	bl	803757c <puts>
	printf( "       *  2 : RF test.                                              *\n" );
 8030b6c:	4814      	ldr	r0, [pc, #80]	; (8030bc0 <display_diag_menu+0x94>)
 8030b6e:	f006 fd05 	bl	803757c <puts>
	printf( "       **************************************************************\n" );
 8030b72:	480f      	ldr	r0, [pc, #60]	; (8030bb0 <display_diag_menu+0x84>)
 8030b74:	f006 fd02 	bl	803757c <puts>
	printf( "       *  4 : spi test.                                             *\n" );
 8030b78:	4812      	ldr	r0, [pc, #72]	; (8030bc4 <display_diag_menu+0x98>)
 8030b7a:	f006 fcff 	bl	803757c <puts>
	printf( "       *  5 : External Flash Memory Test.(Write/Read/Compare)       *\n" );
 8030b7e:	4812      	ldr	r0, [pc, #72]	; (8030bc8 <display_diag_menu+0x9c>)
 8030b80:	f006 fcfc 	bl	803757c <puts>
	printf( "       **************************************************************\n" );
 8030b84:	480a      	ldr	r0, [pc, #40]	; (8030bb0 <display_diag_menu+0x84>)
 8030b86:	f006 fcf9 	bl	803757c <puts>
	printf( "       *  e : print log.                                            *\n" );
 8030b8a:	4810      	ldr	r0, [pc, #64]	; (8030bcc <display_diag_menu+0xa0>)
 8030b8c:	f006 fcf6 	bl	803757c <puts>
	printf( "       **************************************************************\n" );
 8030b90:	4807      	ldr	r0, [pc, #28]	; (8030bb0 <display_diag_menu+0x84>)
 8030b92:	f006 fcf3 	bl	803757c <puts>
	printf( "\n" );
 8030b96:	200a      	movs	r0, #10
 8030b98:	f006 fc94 	bl	80374c4 <putchar>
	printf( "           Please select number[to quit, push 'q', 'Q']:" );
 8030b9c:	480c      	ldr	r0, [pc, #48]	; (8030bd0 <display_diag_menu+0xa4>)
 8030b9e:	f006 fc7f 	bl	80374a0 <iprintf>
}
 8030ba2:	bf00      	nop
 8030ba4:	bd80      	pop	{r7, pc}
 8030ba6:	bf00      	nop
 8030ba8:	0803a090 	.word	0x0803a090
 8030bac:	0803a098 	.word	0x0803a098
 8030bb0:	0803a0a0 	.word	0x0803a0a0
 8030bb4:	0803a0e8 	.word	0x0803a0e8
 8030bb8:	0803a130 	.word	0x0803a130
 8030bbc:	0803a178 	.word	0x0803a178
 8030bc0:	0803a1c0 	.word	0x0803a1c0
 8030bc4:	0803a208 	.word	0x0803a208
 8030bc8:	0803a250 	.word	0x0803a250
 8030bcc:	0803a298 	.word	0x0803a298
 8030bd0:	0803a2e0 	.word	0x0803a2e0

08030bd4 <cmd_diag_proc>:

//========================================================================
int cmd_diag_proc( char *cmd )
//========================================================================
{
 8030bd4:	b580      	push	{r7, lr}
 8030bd6:	b084      	sub	sp, #16
 8030bd8:	af00      	add	r7, sp, #0
 8030bda:	6078      	str	r0, [r7, #4]
//	sel = ibuf[0];
	char sel = cmd[0];
 8030bdc:	687b      	ldr	r3, [r7, #4]
 8030bde:	781b      	ldrb	r3, [r3, #0]
 8030be0:	73fb      	strb	r3, [r7, #15]

	switch ( sel )
 8030be2:	7bfb      	ldrb	r3, [r7, #15]
 8030be4:	2b71      	cmp	r3, #113	; 0x71
 8030be6:	d014      	beq.n	8030c12 <cmd_diag_proc+0x3e>
 8030be8:	2b71      	cmp	r3, #113	; 0x71
 8030bea:	dc1a      	bgt.n	8030c22 <cmd_diag_proc+0x4e>
 8030bec:	2b51      	cmp	r3, #81	; 0x51
 8030bee:	d010      	beq.n	8030c12 <cmd_diag_proc+0x3e>
 8030bf0:	2b51      	cmp	r3, #81	; 0x51
 8030bf2:	dc16      	bgt.n	8030c22 <cmd_diag_proc+0x4e>
 8030bf4:	2b31      	cmp	r3, #49	; 0x31
 8030bf6:	d002      	beq.n	8030bfe <cmd_diag_proc+0x2a>
 8030bf8:	2b32      	cmp	r3, #50	; 0x32
 8030bfa:	d005      	beq.n	8030c08 <cmd_diag_proc+0x34>
		SetCLIPrompt( CLIPrompt );
		SetCLIProc( ProcessCommand );
#endif
		return 0;
	default:
		break;
 8030bfc:	e011      	b.n	8030c22 <cmd_diag_proc+0x4e>
	case '1':	cmd_diag_Audio( 0, 0 );		break;
 8030bfe:	2100      	movs	r1, #0
 8030c00:	2000      	movs	r0, #0
 8030c02:	f000 f8c5 	bl	8030d90 <cmd_diag_Audio>
 8030c06:	e00d      	b.n	8030c24 <cmd_diag_proc+0x50>
	case '2':	cmd_diag_RF( 0, 0 );		break;
 8030c08:	2100      	movs	r1, #0
 8030c0a:	2000      	movs	r0, #0
 8030c0c:	f000 f94e 	bl	8030eac <cmd_diag_RF>
 8030c10:	e008      	b.n	8030c24 <cmd_diag_proc+0x50>
		SetCLIPrompt( CLIPrompt );
 8030c12:	4807      	ldr	r0, [pc, #28]	; (8030c30 <cmd_diag_proc+0x5c>)
 8030c14:	f7ff fe48 	bl	80308a8 <SetCLIPrompt>
		SetCLIProc( ProcessCommand );
 8030c18:	4806      	ldr	r0, [pc, #24]	; (8030c34 <cmd_diag_proc+0x60>)
 8030c1a:	f7ff fe55 	bl	80308c8 <SetCLIProc>
		return 0;
 8030c1e:	2300      	movs	r3, #0
 8030c20:	e001      	b.n	8030c26 <cmd_diag_proc+0x52>
		break;
 8030c22:	bf00      	nop
	}

	return 1;
 8030c24:	2301      	movs	r3, #1
}
 8030c26:	4618      	mov	r0, r3
 8030c28:	3710      	adds	r7, #16
 8030c2a:	46bd      	mov	sp, r7
 8030c2c:	bd80      	pop	{r7, pc}
 8030c2e:	bf00      	nop
 8030c30:	08030891 	.word	0x08030891
 8030c34:	080304d5 	.word	0x080304d5

08030c38 <cmd_diag>:
//========================================================================
//					diag main command function
//========================================================================
int cmd_diag( int argc, char *argv[] )
//========================================================================
{
 8030c38:	b580      	push	{r7, lr}
 8030c3a:	b082      	sub	sp, #8
 8030c3c:	af00      	add	r7, sp, #0
 8030c3e:	6078      	str	r0, [r7, #4]
 8030c40:	6039      	str	r1, [r7, #0]

		taskYIELD();
	}
#else
//	HAL_Delay( 0 );
	SetCLIPrompt( display_diag_menu );
 8030c42:	4805      	ldr	r0, [pc, #20]	; (8030c58 <cmd_diag+0x20>)
 8030c44:	f7ff fe30 	bl	80308a8 <SetCLIPrompt>
	SetCLIProc( cmd_diag_proc );
 8030c48:	4804      	ldr	r0, [pc, #16]	; (8030c5c <cmd_diag+0x24>)
 8030c4a:	f7ff fe3d 	bl	80308c8 <SetCLIProc>

#endif

	/* NOTREACHED */

	return 0;
 8030c4e:	2300      	movs	r3, #0
}
 8030c50:	4618      	mov	r0, r3
 8030c52:	3708      	adds	r7, #8
 8030c54:	46bd      	mov	sp, r7
 8030c56:	bd80      	pop	{r7, pc}
 8030c58:	08030b2d 	.word	0x08030b2d
 8030c5c:	08030bd5 	.word	0x08030bd5

08030c60 <display_diag_Audio>:


//========================================================================
void display_diag_Audio( void )
//========================================================================
{
 8030c60:	b580      	push	{r7, lr}
 8030c62:	af00      	add	r7, sp, #0
	CLEAR_VT_SCREEN();
 8030c64:	4829      	ldr	r0, [pc, #164]	; (8030d0c <display_diag_Audio+0xac>)
 8030c66:	f006 fc1b 	bl	80374a0 <iprintf>
	GOTO_VT_XY();
 8030c6a:	4829      	ldr	r0, [pc, #164]	; (8030d10 <display_diag_Audio+0xb0>)
 8030c6c:	f006 fc18 	bl	80374a0 <iprintf>

	printf( "\n" );
 8030c70:	200a      	movs	r0, #10
 8030c72:	f006 fc27 	bl	80374c4 <putchar>
	printf( "\n" );
 8030c76:	200a      	movs	r0, #10
 8030c78:	f006 fc24 	bl	80374c4 <putchar>
	printf( "\n" );
 8030c7c:	200a      	movs	r0, #10
 8030c7e:	f006 fc21 	bl	80374c4 <putchar>
	printf( "\n" );
 8030c82:	200a      	movs	r0, #10
 8030c84:	f006 fc1e 	bl	80374c4 <putchar>

	printf( "       **************************************************************\n" );
 8030c88:	4822      	ldr	r0, [pc, #136]	; (8030d14 <display_diag_Audio+0xb4>)
 8030c8a:	f006 fc77 	bl	803757c <puts>
	printf( "       *                      Audio Test.                           *\n" );
 8030c8e:	4822      	ldr	r0, [pc, #136]	; (8030d18 <display_diag_Audio+0xb8>)
 8030c90:	f006 fc74 	bl	803757c <puts>
	printf( "       *                                                            *\n" );
 8030c94:	4821      	ldr	r0, [pc, #132]	; (8030d1c <display_diag_Audio+0xbc>)
 8030c96:	f006 fc71 	bl	803757c <puts>
	printf( "       *  1 : audio tx sine.                                        *\n" );
 8030c9a:	4821      	ldr	r0, [pc, #132]	; (8030d20 <display_diag_Audio+0xc0>)
 8030c9c:	f006 fc6e 	bl	803757c <puts>
	printf( "       *  2 : audio tx null.                                        *\n" );
 8030ca0:	4820      	ldr	r0, [pc, #128]	; (8030d24 <display_diag_Audio+0xc4>)
 8030ca2:	f006 fc6b 	bl	803757c <puts>
	printf( "       *  3 : audio tx stop.                                        *\n" );
 8030ca6:	4820      	ldr	r0, [pc, #128]	; (8030d28 <display_diag_Audio+0xc8>)
 8030ca8:	f006 fc68 	bl	803757c <puts>
	printf( "       *  4 : Audio Loopback. ( Internal Codec )                    *\n" );
 8030cac:	481f      	ldr	r0, [pc, #124]	; (8030d2c <display_diag_Audio+0xcc>)
 8030cae:	f006 fc65 	bl	803757c <puts>
	printf( "       *  5 : Audio Loopback. ( DMA )                               *\n" );
 8030cb2:	481f      	ldr	r0, [pc, #124]	; (8030d30 <display_diag_Audio+0xd0>)
 8030cb4:	f006 fc62 	bl	803757c <puts>
	printf( "       *  6 : Audio RF Tx/Rx. ( DMA )                               *\n" );
 8030cb8:	481e      	ldr	r0, [pc, #120]	; (8030d34 <display_diag_Audio+0xd4>)
 8030cba:	f006 fc5f 	bl	803757c <puts>
	printf( "       *  7 : Audio Loopback. ( DMA - speex )                       *\n" );
 8030cbe:	481e      	ldr	r0, [pc, #120]	; (8030d38 <display_diag_Audio+0xd8>)
 8030cc0:	f006 fc5c 	bl	803757c <puts>
	printf( "       *  8 : Audio RF Tx. ( DMA )                                  *\n" );
 8030cc4:	481d      	ldr	r0, [pc, #116]	; (8030d3c <display_diag_Audio+0xdc>)
 8030cc6:	f006 fc59 	bl	803757c <puts>
	printf( "       *  9 : Audio RF Rx. ( DMA )                                  *\n" );
 8030cca:	481d      	ldr	r0, [pc, #116]	; (8030d40 <display_diag_Audio+0xe0>)
 8030ccc:	f006 fc56 	bl	803757c <puts>
	printf( "       *  a : Audio Sampling ( 8 KHz )                              *\n" );
 8030cd0:	481c      	ldr	r0, [pc, #112]	; (8030d44 <display_diag_Audio+0xe4>)
 8030cd2:	f006 fc53 	bl	803757c <puts>
	printf( "       *  b : Audio Sampling ( 4 KHz )                              *\n" );
 8030cd6:	481c      	ldr	r0, [pc, #112]	; (8030d48 <display_diag_Audio+0xe8>)
 8030cd8:	f006 fc50 	bl	803757c <puts>
	printf( "       *  c : Audio Sampling ( 2 KHz )                              *\n" );
 8030cdc:	481b      	ldr	r0, [pc, #108]	; (8030d4c <display_diag_Audio+0xec>)
 8030cde:	f006 fc4d 	bl	803757c <puts>
	printf( "       *  d : Audio Sampling ( 1 KHz )                              *\n" );
 8030ce2:	481b      	ldr	r0, [pc, #108]	; (8030d50 <display_diag_Audio+0xf0>)
 8030ce4:	f006 fc4a 	bl	803757c <puts>
	printf( "       *  i : audio Init                                            *\n" );
 8030ce8:	481a      	ldr	r0, [pc, #104]	; (8030d54 <display_diag_Audio+0xf4>)
 8030cea:	f006 fc47 	bl	803757c <puts>
	printf( "       *  e : Enable Debug SPI                                      *\n" );
 8030cee:	481a      	ldr	r0, [pc, #104]	; (8030d58 <display_diag_Audio+0xf8>)
 8030cf0:	f006 fc44 	bl	803757c <puts>
	printf( "       **************************************************************\n" );
 8030cf4:	4807      	ldr	r0, [pc, #28]	; (8030d14 <display_diag_Audio+0xb4>)
 8030cf6:	f006 fc41 	bl	803757c <puts>
	printf( "\n" );
 8030cfa:	200a      	movs	r0, #10
 8030cfc:	f006 fbe2 	bl	80374c4 <putchar>
	printf( "           Please select number[to quit, push 'q', 'Q']:" );
 8030d00:	4816      	ldr	r0, [pc, #88]	; (8030d5c <display_diag_Audio+0xfc>)
 8030d02:	f006 fbcd 	bl	80374a0 <iprintf>
}
 8030d06:	bf00      	nop
 8030d08:	bd80      	pop	{r7, pc}
 8030d0a:	bf00      	nop
 8030d0c:	0803a090 	.word	0x0803a090
 8030d10:	0803a098 	.word	0x0803a098
 8030d14:	0803a0a0 	.word	0x0803a0a0
 8030d18:	0803a31c 	.word	0x0803a31c
 8030d1c:	0803a130 	.word	0x0803a130
 8030d20:	0803a364 	.word	0x0803a364
 8030d24:	0803a3ac 	.word	0x0803a3ac
 8030d28:	0803a3f4 	.word	0x0803a3f4
 8030d2c:	0803a43c 	.word	0x0803a43c
 8030d30:	0803a484 	.word	0x0803a484
 8030d34:	0803a4cc 	.word	0x0803a4cc
 8030d38:	0803a514 	.word	0x0803a514
 8030d3c:	0803a55c 	.word	0x0803a55c
 8030d40:	0803a5a4 	.word	0x0803a5a4
 8030d44:	0803a5ec 	.word	0x0803a5ec
 8030d48:	0803a634 	.word	0x0803a634
 8030d4c:	0803a67c 	.word	0x0803a67c
 8030d50:	0803a6c4 	.word	0x0803a6c4
 8030d54:	0803a70c 	.word	0x0803a70c
 8030d58:	0803a754 	.word	0x0803a754
 8030d5c:	0803a2e0 	.word	0x0803a2e0

08030d60 <cmd_diag_proc_Audio>:


//========================================================================
int cmd_diag_proc_Audio( char *cmd )
//========================================================================
{
 8030d60:	b580      	push	{r7, lr}
 8030d62:	b084      	sub	sp, #16
 8030d64:	af00      	add	r7, sp, #0
 8030d66:	6078      	str	r0, [r7, #4]
//	sel = ibuf[0];
	char sel = cmd[0];
 8030d68:	687b      	ldr	r3, [r7, #4]
 8030d6a:	781b      	ldrb	r3, [r3, #0]
 8030d6c:	73fb      	strb	r3, [r7, #15]

	switch ( sel )
 8030d6e:	7bfb      	ldrb	r3, [r7, #15]
 8030d70:	2b51      	cmp	r3, #81	; 0x51
 8030d72:	d001      	beq.n	8030d78 <cmd_diag_proc_Audio+0x18>
 8030d74:	2b71      	cmp	r3, #113	; 0x71
 8030d76:	d105      	bne.n	8030d84 <cmd_diag_proc_Audio+0x24>
#endif
	case 'q':
	case 'Q':
#if defined(USE_FREERTOS)
#else
		cmd_diag(0, 0);
 8030d78:	2100      	movs	r1, #0
 8030d7a:	2000      	movs	r0, #0
 8030d7c:	f7ff ff5c 	bl	8030c38 <cmd_diag>
#endif
		return 0;
 8030d80:	2300      	movs	r3, #0
 8030d82:	e001      	b.n	8030d88 <cmd_diag_proc_Audio+0x28>
	default:
		break;
 8030d84:	bf00      	nop
	}

	return 1;
 8030d86:	2301      	movs	r3, #1
}
 8030d88:	4618      	mov	r0, r3
 8030d8a:	3710      	adds	r7, #16
 8030d8c:	46bd      	mov	sp, r7
 8030d8e:	bd80      	pop	{r7, pc}

08030d90 <cmd_diag_Audio>:

//========================================================================
int cmd_diag_Audio( int argc, char *argv[] )
//========================================================================
{
 8030d90:	b580      	push	{r7, lr}
 8030d92:	b082      	sub	sp, #8
 8030d94:	af00      	add	r7, sp, #0
 8030d96:	6078      	str	r0, [r7, #4]
 8030d98:	6039      	str	r1, [r7, #0]
		taskYIELD();
	}

#else
	//	HAL_Delay( 0 );
	SetCLIPrompt( display_diag_Audio );
 8030d9a:	4805      	ldr	r0, [pc, #20]	; (8030db0 <cmd_diag_Audio+0x20>)
 8030d9c:	f7ff fd84 	bl	80308a8 <SetCLIPrompt>
	SetCLIProc( cmd_diag_proc_Audio );
 8030da0:	4804      	ldr	r0, [pc, #16]	; (8030db4 <cmd_diag_Audio+0x24>)
 8030da2:	f7ff fd91 	bl	80308c8 <SetCLIProc>

#endif

	return 0;
 8030da6:	2300      	movs	r3, #0
}
 8030da8:	4618      	mov	r0, r3
 8030daa:	3708      	adds	r7, #8
 8030dac:	46bd      	mov	sp, r7
 8030dae:	bd80      	pop	{r7, pc}
 8030db0:	08030c61 	.word	0x08030c61
 8030db4:	08030d61 	.word	0x08030d61

08030db8 <display_diag_RF>:


//========================================================================
void display_diag_RF( void )
//========================================================================
{
 8030db8:	b580      	push	{r7, lr}
 8030dba:	af00      	add	r7, sp, #0
	CLEAR_VT_SCREEN();
 8030dbc:	481d      	ldr	r0, [pc, #116]	; (8030e34 <display_diag_RF+0x7c>)
 8030dbe:	f006 fb6f 	bl	80374a0 <iprintf>
	GOTO_VT_XY();
 8030dc2:	481d      	ldr	r0, [pc, #116]	; (8030e38 <display_diag_RF+0x80>)
 8030dc4:	f006 fb6c 	bl	80374a0 <iprintf>

	printf( "\n" );
 8030dc8:	200a      	movs	r0, #10
 8030dca:	f006 fb7b 	bl	80374c4 <putchar>
	printf( "\n" );
 8030dce:	200a      	movs	r0, #10
 8030dd0:	f006 fb78 	bl	80374c4 <putchar>
	printf( "\n" );
 8030dd4:	200a      	movs	r0, #10
 8030dd6:	f006 fb75 	bl	80374c4 <putchar>
	printf( "\n" );
 8030dda:	200a      	movs	r0, #10
 8030ddc:	f006 fb72 	bl	80374c4 <putchar>

	printf( "       **************************************************************\n" );
 8030de0:	4816      	ldr	r0, [pc, #88]	; (8030e3c <display_diag_RF+0x84>)
 8030de2:	f006 fbcb 	bl	803757c <puts>
	printf( "       *                         RF Test.                           *\n" );
 8030de6:	4816      	ldr	r0, [pc, #88]	; (8030e40 <display_diag_RF+0x88>)
 8030de8:	f006 fbc8 	bl	803757c <puts>
	printf( "       *                                                            *\n" );
 8030dec:	4815      	ldr	r0, [pc, #84]	; (8030e44 <display_diag_RF+0x8c>)
 8030dee:	f006 fbc5 	bl	803757c <puts>
	printf( "       *  0 : RF-IC Info                                            *\n" );
 8030df2:	4815      	ldr	r0, [pc, #84]	; (8030e48 <display_diag_RF+0x90>)
 8030df4:	f006 fbc2 	bl	803757c <puts>
	printf( "       *  1 : RF Tx.                                                *\n" );
 8030df8:	4814      	ldr	r0, [pc, #80]	; (8030e4c <display_diag_RF+0x94>)
 8030dfa:	f006 fbbf 	bl	803757c <puts>
	printf( "       *  2 : RF Rx.                                                *\n" );
 8030dfe:	4814      	ldr	r0, [pc, #80]	; (8030e50 <display_diag_RF+0x98>)
 8030e00:	f006 fbbc 	bl	803757c <puts>
	printf( "       *  3 : RF Tx->Rx Loopback                                    *\n" );
 8030e04:	4813      	ldr	r0, [pc, #76]	; (8030e54 <display_diag_RF+0x9c>)
 8030e06:	f006 fbb9 	bl	803757c <puts>
	printf( "       *  i : RF-Init                                               *\n" );
 8030e0a:	4813      	ldr	r0, [pc, #76]	; (8030e58 <display_diag_RF+0xa0>)
 8030e0c:	f006 fbb6 	bl	803757c <puts>
	printf( "       *  v : Verify RF-Init                                        *\n" );
 8030e10:	4812      	ldr	r0, [pc, #72]	; (8030e5c <display_diag_RF+0xa4>)
 8030e12:	f006 fbb3 	bl	803757c <puts>
	printf( "       *  d : Enable Debug SPI                                      *\n" );
 8030e16:	4812      	ldr	r0, [pc, #72]	; (8030e60 <display_diag_RF+0xa8>)
 8030e18:	f006 fbb0 	bl	803757c <puts>
	printf( "       **************************************************************\n" );
 8030e1c:	4807      	ldr	r0, [pc, #28]	; (8030e3c <display_diag_RF+0x84>)
 8030e1e:	f006 fbad 	bl	803757c <puts>
	printf( "\n" );
 8030e22:	200a      	movs	r0, #10
 8030e24:	f006 fb4e 	bl	80374c4 <putchar>
	printf( "           Please select number[to quit, push 'q', 'Q']:" );
 8030e28:	480e      	ldr	r0, [pc, #56]	; (8030e64 <display_diag_RF+0xac>)
 8030e2a:	f006 fb39 	bl	80374a0 <iprintf>
}
 8030e2e:	bf00      	nop
 8030e30:	bd80      	pop	{r7, pc}
 8030e32:	bf00      	nop
 8030e34:	0803a090 	.word	0x0803a090
 8030e38:	0803a098 	.word	0x0803a098
 8030e3c:	0803a0a0 	.word	0x0803a0a0
 8030e40:	0803a79c 	.word	0x0803a79c
 8030e44:	0803a130 	.word	0x0803a130
 8030e48:	0803a7e4 	.word	0x0803a7e4
 8030e4c:	0803a82c 	.word	0x0803a82c
 8030e50:	0803a874 	.word	0x0803a874
 8030e54:	0803a8bc 	.word	0x0803a8bc
 8030e58:	0803a904 	.word	0x0803a904
 8030e5c:	0803a94c 	.word	0x0803a94c
 8030e60:	0803a994 	.word	0x0803a994
 8030e64:	0803a2e0 	.word	0x0803a2e0

08030e68 <cmd_diag_proc_RF>:


//========================================================================
int cmd_diag_proc_RF( char *cmd )
//========================================================================
{
 8030e68:	b580      	push	{r7, lr}
 8030e6a:	b084      	sub	sp, #16
 8030e6c:	af00      	add	r7, sp, #0
 8030e6e:	6078      	str	r0, [r7, #4]
//	sel = ibuf[0];
	char sel = cmd[0];
 8030e70:	687b      	ldr	r3, [r7, #4]
 8030e72:	781b      	ldrb	r3, [r3, #0]
 8030e74:	73fb      	strb	r3, [r7, #15]

	switch ( sel )
 8030e76:	7bfb      	ldrb	r3, [r7, #15]
 8030e78:	2b71      	cmp	r3, #113	; 0x71
 8030e7a:	d00a      	beq.n	8030e92 <cmd_diag_proc_RF+0x2a>
 8030e7c:	2b71      	cmp	r3, #113	; 0x71
 8030e7e:	dc0e      	bgt.n	8030e9e <cmd_diag_proc_RF+0x36>
 8030e80:	2b51      	cmp	r3, #81	; 0x51
 8030e82:	d006      	beq.n	8030e92 <cmd_diag_proc_RF+0x2a>
 8030e84:	2b69      	cmp	r3, #105	; 0x69
 8030e86:	d10a      	bne.n	8030e9e <cmd_diag_proc_RF+0x36>
	{
#if defined(_WIN32)
#else
		case 'i':	cmd_rfwds_init( 0, 0 );	break;
 8030e88:	2100      	movs	r1, #0
 8030e8a:	2000      	movs	r0, #0
 8030e8c:	f000 f822 	bl	8030ed4 <cmd_rfwds_init>
 8030e90:	e006      	b.n	8030ea0 <cmd_diag_proc_RF+0x38>
#endif
	case 'q':
	case 'Q':
#if defined(USE_FREERTOS)
#else
		cmd_diag(0, 0);
 8030e92:	2100      	movs	r1, #0
 8030e94:	2000      	movs	r0, #0
 8030e96:	f7ff fecf 	bl	8030c38 <cmd_diag>
#endif
		return 0;
 8030e9a:	2300      	movs	r3, #0
 8030e9c:	e001      	b.n	8030ea2 <cmd_diag_proc_RF+0x3a>
	default:
		break;
 8030e9e:	bf00      	nop
	}

	return 1;
 8030ea0:	2301      	movs	r3, #1
}
 8030ea2:	4618      	mov	r0, r3
 8030ea4:	3710      	adds	r7, #16
 8030ea6:	46bd      	mov	sp, r7
 8030ea8:	bd80      	pop	{r7, pc}
	...

08030eac <cmd_diag_RF>:

//========================================================================
int cmd_diag_RF( int argc, char *argv[] )
//========================================================================
{
 8030eac:	b580      	push	{r7, lr}
 8030eae:	b082      	sub	sp, #8
 8030eb0:	af00      	add	r7, sp, #0
 8030eb2:	6078      	str	r0, [r7, #4]
 8030eb4:	6039      	str	r1, [r7, #0]
		taskYIELD();
	}

#else
	//	HAL_Delay( 0 );
	SetCLIPrompt( display_diag_RF );
 8030eb6:	4805      	ldr	r0, [pc, #20]	; (8030ecc <cmd_diag_RF+0x20>)
 8030eb8:	f7ff fcf6 	bl	80308a8 <SetCLIPrompt>
	SetCLIProc( cmd_diag_proc_RF );
 8030ebc:	4804      	ldr	r0, [pc, #16]	; (8030ed0 <cmd_diag_RF+0x24>)
 8030ebe:	f7ff fd03 	bl	80308c8 <SetCLIProc>

#endif

	/* NOTREACHED */

	return 0;
 8030ec2:	2300      	movs	r3, #0
}
 8030ec4:	4618      	mov	r0, r3
 8030ec6:	3708      	adds	r7, #8
 8030ec8:	46bd      	mov	sp, r7
 8030eca:	bd80      	pop	{r7, pc}
 8030ecc:	08030db9 	.word	0x08030db9
 8030ed0:	08030e69 	.word	0x08030e69

08030ed4 <cmd_rfwds_init>:
}

//========================================================================
int		cmd_rfwds_init	( int argc, char *argv[] )
//========================================================================
{
 8030ed4:	b580      	push	{r7, lr}
 8030ed6:	b082      	sub	sp, #8
 8030ed8:	af00      	add	r7, sp, #0
 8030eda:	6078      	str	r0, [r7, #4]
 8030edc:	6039      	str	r1, [r7, #0]
	printf( "%s(%d)\n", __func__, __LINE__ );
 8030ede:	f240 221a 	movw	r2, #538	; 0x21a
 8030ee2:	4905      	ldr	r1, [pc, #20]	; (8030ef8 <cmd_rfwds_init+0x24>)
 8030ee4:	4805      	ldr	r0, [pc, #20]	; (8030efc <cmd_rfwds_init+0x28>)
 8030ee6:	f006 fadb 	bl	80374a0 <iprintf>

#if defined(_WIN32)
#else

	vRadio_Init();
 8030eea:	f7fc f985 	bl	802d1f8 <vRadio_Init>

#endif

	return 0;
 8030eee:	2300      	movs	r3, #0
}
 8030ef0:	4618      	mov	r0, r3
 8030ef2:	3708      	adds	r7, #8
 8030ef4:	46bd      	mov	sp, r7
 8030ef6:	bd80      	pop	{r7, pc}
 8030ef8:	0804158c 	.word	0x0804158c
 8030efc:	0803a9dc 	.word	0x0803a9dc

08030f00 <GetDbg>:


//========================================================================
int GetDbg( void )
//========================================================================
{
 8030f00:	b480      	push	{r7}
 8030f02:	af00      	add	r7, sp, #0
	return debug_level;
 8030f04:	4b03      	ldr	r3, [pc, #12]	; (8030f14 <GetDbg+0x14>)
 8030f06:	681b      	ldr	r3, [r3, #0]
}
 8030f08:	4618      	mov	r0, r3
 8030f0a:	46bd      	mov	sp, r7
 8030f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030f10:	4770      	bx	lr
 8030f12:	bf00      	nop
 8030f14:	200022d8 	.word	0x200022d8

08030f18 <cmd_debug>:
}

//========================================================================
int cmd_debug(int argc, char *argv[])
//========================================================================
{
 8030f18:	b580      	push	{r7, lr}
 8030f1a:	b082      	sub	sp, #8
 8030f1c:	af00      	add	r7, sp, #0
 8030f1e:	6078      	str	r0, [r7, #4]
 8030f20:	6039      	str	r1, [r7, #0]
	if (argc == 1)
 8030f22:	687b      	ldr	r3, [r7, #4]
 8030f24:	2b01      	cmp	r3, #1
 8030f26:	d106      	bne.n	8030f36 <cmd_debug+0x1e>
	{
		printf("current debug level = 0x%x\n", debug_level);
 8030f28:	4b0d      	ldr	r3, [pc, #52]	; (8030f60 <cmd_debug+0x48>)
 8030f2a:	681b      	ldr	r3, [r3, #0]
 8030f2c:	4619      	mov	r1, r3
 8030f2e:	480d      	ldr	r0, [pc, #52]	; (8030f64 <cmd_debug+0x4c>)
 8030f30:	f006 fab6 	bl	80374a0 <iprintf>
 8030f34:	e00e      	b.n	8030f54 <cmd_debug+0x3c>
	}
	else
	{
		debug_level = a2hex(argv[1]);
 8030f36:	683b      	ldr	r3, [r7, #0]
 8030f38:	3304      	adds	r3, #4
 8030f3a:	681b      	ldr	r3, [r3, #0]
 8030f3c:	4618      	mov	r0, r3
 8030f3e:	f7ff fa89 	bl	8030454 <a2hex>
 8030f42:	4603      	mov	r3, r0
 8030f44:	4a06      	ldr	r2, [pc, #24]	; (8030f60 <cmd_debug+0x48>)
 8030f46:	6013      	str	r3, [r2, #0]
		printf("debug level = 0x%x\n", debug_level);
 8030f48:	4b05      	ldr	r3, [pc, #20]	; (8030f60 <cmd_debug+0x48>)
 8030f4a:	681b      	ldr	r3, [r3, #0]
 8030f4c:	4619      	mov	r1, r3
 8030f4e:	4806      	ldr	r0, [pc, #24]	; (8030f68 <cmd_debug+0x50>)
 8030f50:	f006 faa6 	bl	80374a0 <iprintf>
	}

	return 0;
 8030f54:	2300      	movs	r3, #0
}
 8030f56:	4618      	mov	r0, r3
 8030f58:	3708      	adds	r7, #8
 8030f5a:	46bd      	mov	sp, r7
 8030f5c:	bd80      	pop	{r7, pc}
 8030f5e:	bf00      	nop
 8030f60:	200022d8 	.word	0x200022d8
 8030f64:	0803aa50 	.word	0x0803aa50
 8030f68:	0803aa6c 	.word	0x0803aa6c

08030f6c <I2C_BusScan>:
#include "main.h"		//	hi2c1

//========================================================================
void I2C_BusScan( I2C_HandleTypeDef *phi2c )
//========================================================================
{
 8030f6c:	b580      	push	{r7, lr}
 8030f6e:	b084      	sub	sp, #16
 8030f70:	af00      	add	r7, sp, #0
 8030f72:	6078      	str	r0, [r7, #4]

	printf( "Scanning I2C bus:\r\n" );
 8030f74:	4816      	ldr	r0, [pc, #88]	; (8030fd0 <I2C_BusScan+0x64>)
 8030f76:	f006 fb01 	bl	803757c <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for ( i = 1; i < 128; i++ )
 8030f7a:	2301      	movs	r3, #1
 8030f7c:	73fb      	strb	r3, [r7, #15]
 8030f7e:	e01b      	b.n	8030fb8 <I2C_BusScan+0x4c>
		 * &hi2c1 is the handle
		 * (uint16_t)(i<<1) is the i2c address left aligned
		 * retries 2
		 * timeout 2
		 */
		result = HAL_I2C_IsDeviceReady( phi2c, (uint16_t)( i << 1 ), 2, 2 );
 8030f80:	7bfb      	ldrb	r3, [r7, #15]
 8030f82:	b29b      	uxth	r3, r3
 8030f84:	005b      	lsls	r3, r3, #1
 8030f86:	b299      	uxth	r1, r3
 8030f88:	2302      	movs	r3, #2
 8030f8a:	2202      	movs	r2, #2
 8030f8c:	6878      	ldr	r0, [r7, #4]
 8030f8e:	f7f3 f873 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8030f92:	4603      	mov	r3, r0
 8030f94:	73bb      	strb	r3, [r7, #14]
		if ( result != HAL_OK ) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 8030f96:	7bbb      	ldrb	r3, [r7, #14]
 8030f98:	2b00      	cmp	r3, #0
 8030f9a:	d002      	beq.n	8030fa2 <I2C_BusScan+0x36>
		{
			printf( "." ); // No ACK received at that address
 8030f9c:	202e      	movs	r0, #46	; 0x2e
 8030f9e:	f006 fa91 	bl	80374c4 <putchar>
		}
		if ( result == HAL_OK )
 8030fa2:	7bbb      	ldrb	r3, [r7, #14]
 8030fa4:	2b00      	cmp	r3, #0
 8030fa6:	d104      	bne.n	8030fb2 <I2C_BusScan+0x46>
		{
			printf( "0x%X", i ); // Received an ACK at that address
 8030fa8:	7bfb      	ldrb	r3, [r7, #15]
 8030faa:	4619      	mov	r1, r3
 8030fac:	4809      	ldr	r0, [pc, #36]	; (8030fd4 <I2C_BusScan+0x68>)
 8030fae:	f006 fa77 	bl	80374a0 <iprintf>
	for ( i = 1; i < 128; i++ )
 8030fb2:	7bfb      	ldrb	r3, [r7, #15]
 8030fb4:	3301      	adds	r3, #1
 8030fb6:	73fb      	strb	r3, [r7, #15]
 8030fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8030fbc:	2b00      	cmp	r3, #0
 8030fbe:	dadf      	bge.n	8030f80 <I2C_BusScan+0x14>
		}
	}
	printf( "\r\n" );
 8030fc0:	4805      	ldr	r0, [pc, #20]	; (8030fd8 <I2C_BusScan+0x6c>)
 8030fc2:	f006 fadb 	bl	803757c <puts>
}
 8030fc6:	bf00      	nop
 8030fc8:	3710      	adds	r7, #16
 8030fca:	46bd      	mov	sp, r7
 8030fcc:	bd80      	pop	{r7, pc}
 8030fce:	bf00      	nop
 8030fd0:	0803aadc 	.word	0x0803aadc
 8030fd4:	0803aaf0 	.word	0x0803aaf0
 8030fd8:	0803aaf8 	.word	0x0803aaf8

08030fdc <TestEEPROM>:
//int at24_HAL_ReadString(I2C_HandleTypeDef *hi2c,char *pString,uint16_t MemAddress,uint8_t length);

//========================================================================
void TestEEPROM( I2C_HandleTypeDef *hi2c )
//========================================================================
{
 8030fdc:	b580      	push	{r7, lr}
 8030fde:	b0b6      	sub	sp, #216	; 0xd8
 8030fe0:	af02      	add	r7, sp, #8
 8030fe2:	6078      	str	r0, [r7, #4]
	char d[100]={7,5,10};
 8030fe4:	4b2a      	ldr	r3, [pc, #168]	; (8031090 <TestEEPROM+0xb4>)
 8030fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8030fe8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8030fec:	2260      	movs	r2, #96	; 0x60
 8030fee:	2100      	movs	r1, #0
 8030ff0:	4618      	mov	r0, r3
 8030ff2:	f006 fcb7 	bl	8037964 <memset>
	char c[100]={20,20,20};
 8030ff6:	4b27      	ldr	r3, [pc, #156]	; (8031094 <TestEEPROM+0xb8>)
 8030ff8:	60bb      	str	r3, [r7, #8]
 8030ffa:	f107 030c 	add.w	r3, r7, #12
 8030ffe:	2260      	movs	r2, #96	; 0x60
 8031000:	2100      	movs	r1, #0
 8031002:	4618      	mov	r0, r3
 8031004:	f006 fcae 	bl	8037964 <memset>
	
	printf("%s - 0x%02X, 0x%02X, 0x%02X\r\n", __func__, c[0],c[1],c[2]);
 8031008:	7a3b      	ldrb	r3, [r7, #8]
 803100a:	461a      	mov	r2, r3
 803100c:	7a7b      	ldrb	r3, [r7, #9]
 803100e:	4619      	mov	r1, r3
 8031010:	7abb      	ldrb	r3, [r7, #10]
 8031012:	9300      	str	r3, [sp, #0]
 8031014:	460b      	mov	r3, r1
 8031016:	4920      	ldr	r1, [pc, #128]	; (8031098 <TestEEPROM+0xbc>)
 8031018:	4820      	ldr	r0, [pc, #128]	; (803109c <TestEEPROM+0xc0>)
 803101a:	f006 fa41 	bl	80374a0 <iprintf>
	M24_HAL_ReadBytes(hi2c, 0xA0, 0x100, (uint8_t *)c, 100);
 803101e:	f107 0308 	add.w	r3, r7, #8
 8031022:	2264      	movs	r2, #100	; 0x64
 8031024:	9200      	str	r2, [sp, #0]
 8031026:	f44f 7280 	mov.w	r2, #256	; 0x100
 803102a:	21a0      	movs	r1, #160	; 0xa0
 803102c:	6878      	ldr	r0, [r7, #4]
 803102e:	f000 f859 	bl	80310e4 <M24_HAL_ReadBytes>
	printf("%s - 0x%02X, 0x%02X, 0x%02X\r\n", __func__, c[0],c[1],c[2]);
 8031032:	7a3b      	ldrb	r3, [r7, #8]
 8031034:	461a      	mov	r2, r3
 8031036:	7a7b      	ldrb	r3, [r7, #9]
 8031038:	4619      	mov	r1, r3
 803103a:	7abb      	ldrb	r3, [r7, #10]
 803103c:	9300      	str	r3, [sp, #0]
 803103e:	460b      	mov	r3, r1
 8031040:	4915      	ldr	r1, [pc, #84]	; (8031098 <TestEEPROM+0xbc>)
 8031042:	4816      	ldr	r0, [pc, #88]	; (803109c <TestEEPROM+0xc0>)
 8031044:	f006 fa2c 	bl	80374a0 <iprintf>
	
	M24_HAL_WriteBytes(hi2c, 0xA0, 0x100, (uint8_t *)d, 100);
 8031048:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 803104c:	2264      	movs	r2, #100	; 0x64
 803104e:	9200      	str	r2, [sp, #0]
 8031050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8031054:	21a0      	movs	r1, #160	; 0xa0
 8031056:	6878      	ldr	r0, [r7, #4]
 8031058:	f000 f822 	bl	80310a0 <M24_HAL_WriteBytes>

	M24_HAL_ReadBytes(hi2c, 0xA0, 0x100, (uint8_t *)c, 100);
 803105c:	f107 0308 	add.w	r3, r7, #8
 8031060:	2264      	movs	r2, #100	; 0x64
 8031062:	9200      	str	r2, [sp, #0]
 8031064:	f44f 7280 	mov.w	r2, #256	; 0x100
 8031068:	21a0      	movs	r1, #160	; 0xa0
 803106a:	6878      	ldr	r0, [r7, #4]
 803106c:	f000 f83a 	bl	80310e4 <M24_HAL_ReadBytes>
	printf("%s - 0x%02X, 0x%02X, 0x%02X\r\n", __func__, c[0],c[1],c[2]);
 8031070:	7a3b      	ldrb	r3, [r7, #8]
 8031072:	461a      	mov	r2, r3
 8031074:	7a7b      	ldrb	r3, [r7, #9]
 8031076:	4619      	mov	r1, r3
 8031078:	7abb      	ldrb	r3, [r7, #10]
 803107a:	9300      	str	r3, [sp, #0]
 803107c:	460b      	mov	r3, r1
 803107e:	4906      	ldr	r1, [pc, #24]	; (8031098 <TestEEPROM+0xbc>)
 8031080:	4806      	ldr	r0, [pc, #24]	; (803109c <TestEEPROM+0xc0>)
 8031082:	f006 fa0d 	bl	80374a0 <iprintf>
}
 8031086:	bf00      	nop
 8031088:	37d0      	adds	r7, #208	; 0xd0
 803108a:	46bd      	mov	sp, r7
 803108c:	bd80      	pop	{r7, pc}
 803108e:	bf00      	nop
 8031090:	000a0507 	.word	0x000a0507
 8031094:	00141414 	.word	0x00141414
 8031098:	0804159c 	.word	0x0804159c
 803109c:	0803aafc 	.word	0x0803aafc

080310a0 <M24_HAL_WriteBytes>:
  * @retval
  */
//========================================================================
int M24_HAL_WriteBytes( I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t TxBufferSize )
//========================================================================
{
 80310a0:	b580      	push	{r7, lr}
 80310a2:	b088      	sub	sp, #32
 80310a4:	af04      	add	r7, sp, #16
 80310a6:	60f8      	str	r0, [r7, #12]
 80310a8:	607b      	str	r3, [r7, #4]
 80310aa:	460b      	mov	r3, r1
 80310ac:	817b      	strh	r3, [r7, #10]
 80310ae:	4613      	mov	r3, r2
 80310b0:	813b      	strh	r3, [r7, #8]
	while ( HAL_I2C_Mem_Write( hi2c, (uint16_t)DevAddress, (uint16_t)MemAddress, I2C_MEMADD_SIZE_16BIT, pData, (uint16_t)TxBufferSize, 1000 ) != HAL_OK );
 80310b2:	bf00      	nop
 80310b4:	893a      	ldrh	r2, [r7, #8]
 80310b6:	8979      	ldrh	r1, [r7, #10]
 80310b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80310bc:	9302      	str	r3, [sp, #8]
 80310be:	8b3b      	ldrh	r3, [r7, #24]
 80310c0:	9301      	str	r3, [sp, #4]
 80310c2:	687b      	ldr	r3, [r7, #4]
 80310c4:	9300      	str	r3, [sp, #0]
 80310c6:	2310      	movs	r3, #16
 80310c8:	68f8      	ldr	r0, [r7, #12]
 80310ca:	f7f2 fcb5 	bl	8023a38 <HAL_I2C_Mem_Write>
 80310ce:	4603      	mov	r3, r0
 80310d0:	2b00      	cmp	r3, #0
 80310d2:	d1ef      	bne.n	80310b4 <M24_HAL_WriteBytes+0x14>

	HAL_Delay(5);
 80310d4:	2005      	movs	r0, #5
 80310d6:	f7f0 fd53 	bl	8021b80 <HAL_Delay>

	return 1;
 80310da:	2301      	movs	r3, #1
}
 80310dc:	4618      	mov	r0, r3
 80310de:	3710      	adds	r7, #16
 80310e0:	46bd      	mov	sp, r7
 80310e2:	bd80      	pop	{r7, pc}

080310e4 <M24_HAL_ReadBytes>:


//========================================================================
int M24_HAL_ReadBytes( I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t RxBufferSize )
//========================================================================
{
 80310e4:	b580      	push	{r7, lr}
 80310e6:	b08a      	sub	sp, #40	; 0x28
 80310e8:	af04      	add	r7, sp, #16
 80310ea:	60f8      	str	r0, [r7, #12]
 80310ec:	607b      	str	r3, [r7, #4]
 80310ee:	460b      	mov	r3, r1
 80310f0:	817b      	strh	r3, [r7, #10]
 80310f2:	4613      	mov	r3, r2
 80310f4:	813b      	strh	r3, [r7, #8]
	int TimeOut;

	TimeOut = 0;
 80310f6:	2300      	movs	r3, #0
 80310f8:	617b      	str	r3, [r7, #20]
	while ( HAL_I2C_Mem_Read( hi2c, (uint16_t)DevAddress, (uint16_t)MemAddress, I2C_MEMADD_SIZE_16BIT, pData, (uint16_t)RxBufferSize, 1000 ) != HAL_OK && TimeOut < 10 ) TimeOut++;
 80310fa:	e002      	b.n	8031102 <M24_HAL_ReadBytes+0x1e>
 80310fc:	697b      	ldr	r3, [r7, #20]
 80310fe:	3301      	adds	r3, #1
 8031100:	617b      	str	r3, [r7, #20]
 8031102:	893a      	ldrh	r2, [r7, #8]
 8031104:	8979      	ldrh	r1, [r7, #10]
 8031106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 803110a:	9302      	str	r3, [sp, #8]
 803110c:	8c3b      	ldrh	r3, [r7, #32]
 803110e:	9301      	str	r3, [sp, #4]
 8031110:	687b      	ldr	r3, [r7, #4]
 8031112:	9300      	str	r3, [sp, #0]
 8031114:	2310      	movs	r3, #16
 8031116:	68f8      	ldr	r0, [r7, #12]
 8031118:	f7f2 fd88 	bl	8023c2c <HAL_I2C_Mem_Read>
 803111c:	4603      	mov	r3, r0
 803111e:	2b00      	cmp	r3, #0
 8031120:	d002      	beq.n	8031128 <M24_HAL_ReadBytes+0x44>
 8031122:	697b      	ldr	r3, [r7, #20]
 8031124:	2b09      	cmp	r3, #9
 8031126:	dde9      	ble.n	80310fc <M24_HAL_ReadBytes+0x18>

	return 1;
 8031128:	2301      	movs	r3, #1
}
 803112a:	4618      	mov	r0, r3
 803112c:	3718      	adds	r7, #24
 803112e:	46bd      	mov	sp, r7
 8031130:	bd80      	pop	{r7, pc}
	...

08031134 <cmd_eepromRead>:

//========================================================================
int cmd_eepromRead		( int argc, char * argv[] )
//========================================================================
{
 8031134:	b580      	push	{r7, lr}
 8031136:	b088      	sub	sp, #32
 8031138:	af02      	add	r7, sp, #8
 803113a:	6078      	str	r0, [r7, #4]
 803113c:	6039      	str	r1, [r7, #0]
    //	eepr [address]
    int 	nAddr = 0;
 803113e:	2300      	movs	r3, #0
 8031140:	617b      	str	r3, [r7, #20]
    uint8_t	buf[10];

    switch ( argc )
 8031142:	687b      	ldr	r3, [r7, #4]
 8031144:	2b02      	cmp	r3, #2
 8031146:	d109      	bne.n	803115c <cmd_eepromRead+0x28>
    {
    case 2:		sscanf( argv[1], "%d", &nAddr );		//	cmd [address]
 8031148:	683b      	ldr	r3, [r7, #0]
 803114a:	3304      	adds	r3, #4
 803114c:	681b      	ldr	r3, [r3, #0]
 803114e:	f107 0214 	add.w	r2, r7, #20
 8031152:	490d      	ldr	r1, [pc, #52]	; (8031188 <cmd_eepromRead+0x54>)
 8031154:	4618      	mov	r0, r3
 8031156:	f006 faef 	bl	8037738 <siscanf>
        break;
 803115a:	bf00      	nop
    }

	M24_HAL_ReadBytes(&hi2c1, 0xA0, nAddr, (uint8_t *)buf, 1);
 803115c:	697b      	ldr	r3, [r7, #20]
 803115e:	b29a      	uxth	r2, r3
 8031160:	f107 0308 	add.w	r3, r7, #8
 8031164:	2101      	movs	r1, #1
 8031166:	9100      	str	r1, [sp, #0]
 8031168:	21a0      	movs	r1, #160	; 0xa0
 803116a:	4808      	ldr	r0, [pc, #32]	; (803118c <cmd_eepromRead+0x58>)
 803116c:	f7ff ffba 	bl	80310e4 <M24_HAL_ReadBytes>

	printf("[0x%04X] 0x%02X\n", nAddr, buf[0]);
 8031170:	697b      	ldr	r3, [r7, #20]
 8031172:	7a3a      	ldrb	r2, [r7, #8]
 8031174:	4619      	mov	r1, r3
 8031176:	4806      	ldr	r0, [pc, #24]	; (8031190 <cmd_eepromRead+0x5c>)
 8031178:	f006 f992 	bl	80374a0 <iprintf>
}
 803117c:	bf00      	nop
 803117e:	4618      	mov	r0, r3
 8031180:	3718      	adds	r7, #24
 8031182:	46bd      	mov	sp, r7
 8031184:	bd80      	pop	{r7, pc}
 8031186:	bf00      	nop
 8031188:	0803ab1c 	.word	0x0803ab1c
 803118c:	20000e2c 	.word	0x20000e2c
 8031190:	0803ab20 	.word	0x0803ab20

08031194 <cmd_eepromWrite>:


//========================================================================
int cmd_eepromWrite	( int argc, char * argv[] )
//========================================================================
{
 8031194:	b580      	push	{r7, lr}
 8031196:	b08a      	sub	sp, #40	; 0x28
 8031198:	af02      	add	r7, sp, #8
 803119a:	6078      	str	r0, [r7, #4]
 803119c:	6039      	str	r1, [r7, #0]
    //	eepw [address] [value]
    int 	nAddr = 0;
 803119e:	2300      	movs	r3, #0
 80311a0:	61fb      	str	r3, [r7, #28]
    int		nVal = 0;
 80311a2:	2300      	movs	r3, #0
 80311a4:	61bb      	str	r3, [r7, #24]
    uint8_t	buf[10];

    switch ( argc )
 80311a6:	687b      	ldr	r3, [r7, #4]
 80311a8:	2b02      	cmp	r3, #2
 80311aa:	d00b      	beq.n	80311c4 <cmd_eepromWrite+0x30>
 80311ac:	687b      	ldr	r3, [r7, #4]
 80311ae:	2b03      	cmp	r3, #3
 80311b0:	d112      	bne.n	80311d8 <cmd_eepromWrite+0x44>
    {
    case 3:		sscanf( argv[2], "%d", &nVal );			//	cmd [address] [value]
 80311b2:	683b      	ldr	r3, [r7, #0]
 80311b4:	3308      	adds	r3, #8
 80311b6:	681b      	ldr	r3, [r3, #0]
 80311b8:	f107 0218 	add.w	r2, r7, #24
 80311bc:	4915      	ldr	r1, [pc, #84]	; (8031214 <cmd_eepromWrite+0x80>)
 80311be:	4618      	mov	r0, r3
 80311c0:	f006 faba 	bl	8037738 <siscanf>
    case 2:		sscanf( argv[1], "%d", &nAddr );		//	cmd [address]
 80311c4:	683b      	ldr	r3, [r7, #0]
 80311c6:	3304      	adds	r3, #4
 80311c8:	681b      	ldr	r3, [r3, #0]
 80311ca:	f107 021c 	add.w	r2, r7, #28
 80311ce:	4911      	ldr	r1, [pc, #68]	; (8031214 <cmd_eepromWrite+0x80>)
 80311d0:	4618      	mov	r0, r3
 80311d2:	f006 fab1 	bl	8037738 <siscanf>
        break;
 80311d6:	bf00      	nop
    }

    buf[0] = nVal;
 80311d8:	69bb      	ldr	r3, [r7, #24]
 80311da:	b2db      	uxtb	r3, r3
 80311dc:	733b      	strb	r3, [r7, #12]

    printf("[0x%04X] 0x%02X\n", nAddr, buf[0]);
 80311de:	69fb      	ldr	r3, [r7, #28]
 80311e0:	7b3a      	ldrb	r2, [r7, #12]
 80311e2:	4619      	mov	r1, r3
 80311e4:	480c      	ldr	r0, [pc, #48]	; (8031218 <cmd_eepromWrite+0x84>)
 80311e6:	f006 f95b 	bl	80374a0 <iprintf>

	M24_HAL_WriteBytes(&hi2c1, 0xA0, nAddr, (uint8_t *)buf, 1);
 80311ea:	69fb      	ldr	r3, [r7, #28]
 80311ec:	b29a      	uxth	r2, r3
 80311ee:	f107 030c 	add.w	r3, r7, #12
 80311f2:	2101      	movs	r1, #1
 80311f4:	9100      	str	r1, [sp, #0]
 80311f6:	21a0      	movs	r1, #160	; 0xa0
 80311f8:	4808      	ldr	r0, [pc, #32]	; (803121c <cmd_eepromWrite+0x88>)
 80311fa:	f7ff ff51 	bl	80310a0 <M24_HAL_WriteBytes>

	printf("[0x%04X] 0x%02X\n", nAddr, buf[0]);
 80311fe:	69fb      	ldr	r3, [r7, #28]
 8031200:	7b3a      	ldrb	r2, [r7, #12]
 8031202:	4619      	mov	r1, r3
 8031204:	4804      	ldr	r0, [pc, #16]	; (8031218 <cmd_eepromWrite+0x84>)
 8031206:	f006 f94b 	bl	80374a0 <iprintf>
}
 803120a:	bf00      	nop
 803120c:	4618      	mov	r0, r3
 803120e:	3720      	adds	r7, #32
 8031210:	46bd      	mov	sp, r7
 8031212:	bd80      	pop	{r7, pc}
 8031214:	0803ab1c 	.word	0x0803ab1c
 8031218:	0803ab20 	.word	0x0803ab20
 803121c:	20000e2c 	.word	0x20000e2c

08031220 <cmd_eepromDump>:


//========================================================================
int cmd_eepromDump		( int argc, char * argv[] )
//========================================================================
{
 8031220:	b580      	push	{r7, lr}
 8031222:	b0c8      	sub	sp, #288	; 0x120
 8031224:	af02      	add	r7, sp, #8
 8031226:	f507 738c 	add.w	r3, r7, #280	; 0x118
 803122a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 803122e:	6018      	str	r0, [r3, #0]
 8031230:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8031234:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8031238:	6019      	str	r1, [r3, #0]
    //	eepr [address]
	int		nAddr = 0;
 803123a:	2300      	movs	r3, #0
 803123c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int 	nSize = 256;
 8031240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8031244:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    int		i;

    uint8_t	buf[256];		//	Page

    switch ( argc )
 8031248:	f507 738c 	add.w	r3, r7, #280	; 0x118
 803124c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8031250:	681b      	ldr	r3, [r3, #0]
 8031252:	2b02      	cmp	r3, #2
 8031254:	d013      	beq.n	803127e <cmd_eepromDump+0x5e>
 8031256:	f507 738c 	add.w	r3, r7, #280	; 0x118
 803125a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 803125e:	681b      	ldr	r3, [r3, #0]
 8031260:	2b03      	cmp	r3, #3
 8031262:	d11a      	bne.n	803129a <cmd_eepromDump+0x7a>
    {
    case 3:		sscanf( argv[2], "%d", &nSize );		//	cmd [address] [Size]
 8031264:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8031268:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 803126c:	681b      	ldr	r3, [r3, #0]
 803126e:	3308      	adds	r3, #8
 8031270:	681b      	ldr	r3, [r3, #0]
 8031272:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8031276:	4929      	ldr	r1, [pc, #164]	; (803131c <cmd_eepromDump+0xfc>)
 8031278:	4618      	mov	r0, r3
 803127a:	f006 fa5d 	bl	8037738 <siscanf>
    case 2:		sscanf( argv[1], "%d", &nAddr );		//	cmd [address]
 803127e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8031282:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8031286:	681b      	ldr	r3, [r3, #0]
 8031288:	3304      	adds	r3, #4
 803128a:	681b      	ldr	r3, [r3, #0]
 803128c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8031290:	4922      	ldr	r1, [pc, #136]	; (803131c <cmd_eepromDump+0xfc>)
 8031292:	4618      	mov	r0, r3
 8031294:	f006 fa50 	bl	8037738 <siscanf>
        break;
 8031298:	bf00      	nop
    }

	M24_HAL_ReadBytes(&hi2c1, 0xA0, nAddr, (uint8_t *)buf, nSize);
 803129a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 803129e:	b29a      	uxth	r2, r3
 80312a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80312a4:	b29b      	uxth	r3, r3
 80312a6:	f107 010c 	add.w	r1, r7, #12
 80312aa:	9300      	str	r3, [sp, #0]
 80312ac:	460b      	mov	r3, r1
 80312ae:	21a0      	movs	r1, #160	; 0xa0
 80312b0:	481b      	ldr	r0, [pc, #108]	; (8031320 <cmd_eepromDump+0x100>)
 80312b2:	f7ff ff17 	bl	80310e4 <M24_HAL_ReadBytes>

	printf("[0x%04X] size : %d\n", nAddr, nSize);
 80312b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80312ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80312be:	4619      	mov	r1, r3
 80312c0:	4818      	ldr	r0, [pc, #96]	; (8031324 <cmd_eepromDump+0x104>)
 80312c2:	f006 f8ed 	bl	80374a0 <iprintf>

	for( i = 0; i < nSize; i++ )
 80312c6:	2300      	movs	r3, #0
 80312c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80312cc:	e01a      	b.n	8031304 <cmd_eepromDump+0xe4>
	{
		printf("0x%02X ", buf[i]);
 80312ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80312d2:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80312d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80312da:	4413      	add	r3, r2
 80312dc:	781b      	ldrb	r3, [r3, #0]
 80312de:	4619      	mov	r1, r3
 80312e0:	4811      	ldr	r0, [pc, #68]	; (8031328 <cmd_eepromDump+0x108>)
 80312e2:	f006 f8dd 	bl	80374a0 <iprintf>
		if ( ((i+1)%16) == 0 ) printf("\n");
 80312e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80312ea:	3301      	adds	r3, #1
 80312ec:	f003 030f 	and.w	r3, r3, #15
 80312f0:	2b00      	cmp	r3, #0
 80312f2:	d102      	bne.n	80312fa <cmd_eepromDump+0xda>
 80312f4:	200a      	movs	r0, #10
 80312f6:	f006 f8e5 	bl	80374c4 <putchar>
	for( i = 0; i < nSize; i++ )
 80312fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80312fe:	3301      	adds	r3, #1
 8031300:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8031304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8031308:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 803130c:	429a      	cmp	r2, r3
 803130e:	dbde      	blt.n	80312ce <cmd_eepromDump+0xae>
	}
}
 8031310:	bf00      	nop
 8031312:	4618      	mov	r0, r3
 8031314:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8031318:	46bd      	mov	sp, r7
 803131a:	bd80      	pop	{r7, pc}
 803131c:	0803ab1c 	.word	0x0803ab1c
 8031320:	20000e2c 	.word	0x20000e2c
 8031324:	0803ab34 	.word	0x0803ab34
 8031328:	0803ab48 	.word	0x0803ab48

0803132c <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 803132c:	b580      	push	{r7, lr}
 803132e:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock(); 
 8031330:	f7f1 fccc 	bl	8022ccc <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
 8031334:	4b02      	ldr	r3, [pc, #8]	; (8031340 <FLASH_If_Init+0x14>)
 8031336:	22f3      	movs	r2, #243	; 0xf3
 8031338:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
}
 803133a:	bf00      	nop
 803133c:	bd80      	pop	{r7, pc}
 803133e:	bf00      	nop
 8031340:	40023c00 	.word	0x40023c00

08031344 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 8031344:	b580      	push	{r7, lr}
 8031346:	b08a      	sub	sp, #40	; 0x28
 8031348:	af00      	add	r7, sp, #0
 803134a:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  FLASH_If_Init();
 803134c:	f7ff ffee 	bl	803132c <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(StartSector);
 8031350:	6878      	ldr	r0, [r7, #4]
 8031352:	f000 f85b 	bl	803140c <GetSector>
 8031356:	6278      	str	r0, [r7, #36]	; 0x24
  
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8031358:	2300      	movs	r3, #0
 803135a:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = UserStartSector;
 803135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803135e:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors = 10;
 8031360:	230a      	movs	r3, #10
 8031362:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 8031364:	2302      	movs	r3, #2
 8031366:	61fb      	str	r3, [r7, #28]
    
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 8031368:	f107 0220 	add.w	r2, r7, #32
 803136c:	f107 030c 	add.w	r3, r7, #12
 8031370:	4611      	mov	r1, r2
 8031372:	4618      	mov	r0, r3
 8031374:	f7f1 fdfc 	bl	8022f70 <HAL_FLASHEx_Erase>
 8031378:	4603      	mov	r3, r0
 803137a:	2b00      	cmp	r3, #0
 803137c:	d001      	beq.n	8031382 <FLASH_If_Erase+0x3e>
  {
     /* Error occurred while page erase */
     return (1);
 803137e:	2301      	movs	r3, #1
 8031380:	e000      	b.n	8031384 <FLASH_If_Erase+0x40>
  }
  
  return (0);
 8031382:	2300      	movs	r3, #0
}
 8031384:	4618      	mov	r0, r3
 8031386:	3728      	adds	r7, #40	; 0x28
 8031388:	46bd      	mov	sp, r7
 803138a:	bd80      	pop	{r7, pc}

0803138c <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t FlashAddress, uint32_t* Data ,uint32_t DataLength)
{
 803138c:	b5b0      	push	{r4, r5, r7, lr}
 803138e:	b086      	sub	sp, #24
 8031390:	af00      	add	r7, sp, #0
 8031392:	60f8      	str	r0, [r7, #12]
 8031394:	60b9      	str	r1, [r7, #8]
 8031396:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 8031398:	2300      	movs	r3, #0
 803139a:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 803139c:	2300      	movs	r3, #0
 803139e:	617b      	str	r3, [r7, #20]
 80313a0:	e024      	b.n	80313ec <FLASH_If_Write+0x60>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)      
 80313a2:	697b      	ldr	r3, [r7, #20]
 80313a4:	009b      	lsls	r3, r3, #2
 80313a6:	68ba      	ldr	r2, [r7, #8]
 80313a8:	4413      	add	r3, r2
 80313aa:	681b      	ldr	r3, [r3, #0]
 80313ac:	2200      	movs	r2, #0
 80313ae:	461c      	mov	r4, r3
 80313b0:	4615      	mov	r5, r2
 80313b2:	4622      	mov	r2, r4
 80313b4:	462b      	mov	r3, r5
 80313b6:	68f9      	ldr	r1, [r7, #12]
 80313b8:	2002      	movs	r0, #2
 80313ba:	f7f1 fc33 	bl	8022c24 <HAL_FLASH_Program>
 80313be:	4603      	mov	r3, r0
 80313c0:	2b00      	cmp	r3, #0
 80313c2:	d10e      	bne.n	80313e2 <FLASH_If_Write+0x56>
    {
     /* Check the written value */
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 80313c4:	68fb      	ldr	r3, [r7, #12]
 80313c6:	681a      	ldr	r2, [r3, #0]
 80313c8:	697b      	ldr	r3, [r7, #20]
 80313ca:	009b      	lsls	r3, r3, #2
 80313cc:	68b9      	ldr	r1, [r7, #8]
 80313ce:	440b      	add	r3, r1
 80313d0:	681b      	ldr	r3, [r3, #0]
 80313d2:	429a      	cmp	r2, r3
 80313d4:	d001      	beq.n	80313da <FLASH_If_Write+0x4e>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 80313d6:	2302      	movs	r3, #2
 80313d8:	e011      	b.n	80313fe <FLASH_If_Write+0x72>
      }
      /* Increment FLASH destination address */
      FlashAddress += 4;
 80313da:	68fb      	ldr	r3, [r7, #12]
 80313dc:	3304      	adds	r3, #4
 80313de:	60fb      	str	r3, [r7, #12]
 80313e0:	e001      	b.n	80313e6 <FLASH_If_Write+0x5a>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 80313e2:	2303      	movs	r3, #3
 80313e4:	e00b      	b.n	80313fe <FLASH_If_Write+0x72>
  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80313e6:	697b      	ldr	r3, [r7, #20]
 80313e8:	3301      	adds	r3, #1
 80313ea:	617b      	str	r3, [r7, #20]
 80313ec:	697a      	ldr	r2, [r7, #20]
 80313ee:	687b      	ldr	r3, [r7, #4]
 80313f0:	429a      	cmp	r2, r3
 80313f2:	d203      	bcs.n	80313fc <FLASH_If_Write+0x70>
 80313f4:	68fb      	ldr	r3, [r7, #12]
 80313f6:	4a04      	ldr	r2, [pc, #16]	; (8031408 <FLASH_If_Write+0x7c>)
 80313f8:	4293      	cmp	r3, r2
 80313fa:	d9d2      	bls.n	80313a2 <FLASH_If_Write+0x16>
    }
  }

  return (FLASHIF_OK);
 80313fc:	2300      	movs	r3, #0
}
 80313fe:	4618      	mov	r0, r3
 8031400:	3718      	adds	r7, #24
 8031402:	46bd      	mov	sp, r7
 8031404:	bdb0      	pop	{r4, r5, r7, pc}
 8031406:	bf00      	nop
 8031408:	080ffffb 	.word	0x080ffffb

0803140c <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 803140c:	b480      	push	{r7}
 803140e:	b085      	sub	sp, #20
 8031410:	af00      	add	r7, sp, #0
 8031412:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8031414:	2300      	movs	r3, #0
 8031416:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8031418:	687b      	ldr	r3, [r7, #4]
 803141a:	4a40      	ldr	r2, [pc, #256]	; (803151c <GetSector+0x110>)
 803141c:	4293      	cmp	r3, r2
 803141e:	d206      	bcs.n	803142e <GetSector+0x22>
 8031420:	687b      	ldr	r3, [r7, #4]
 8031422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8031426:	d302      	bcc.n	803142e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 8031428:	2300      	movs	r3, #0
 803142a:	60fb      	str	r3, [r7, #12]
 803142c:	e06f      	b.n	803150e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 803142e:	687b      	ldr	r3, [r7, #4]
 8031430:	4a3b      	ldr	r2, [pc, #236]	; (8031520 <GetSector+0x114>)
 8031432:	4293      	cmp	r3, r2
 8031434:	d206      	bcs.n	8031444 <GetSector+0x38>
 8031436:	687b      	ldr	r3, [r7, #4]
 8031438:	4a38      	ldr	r2, [pc, #224]	; (803151c <GetSector+0x110>)
 803143a:	4293      	cmp	r3, r2
 803143c:	d302      	bcc.n	8031444 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 803143e:	2301      	movs	r3, #1
 8031440:	60fb      	str	r3, [r7, #12]
 8031442:	e064      	b.n	803150e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8031444:	687b      	ldr	r3, [r7, #4]
 8031446:	4a37      	ldr	r2, [pc, #220]	; (8031524 <GetSector+0x118>)
 8031448:	4293      	cmp	r3, r2
 803144a:	d206      	bcs.n	803145a <GetSector+0x4e>
 803144c:	687b      	ldr	r3, [r7, #4]
 803144e:	4a34      	ldr	r2, [pc, #208]	; (8031520 <GetSector+0x114>)
 8031450:	4293      	cmp	r3, r2
 8031452:	d302      	bcc.n	803145a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 8031454:	2302      	movs	r3, #2
 8031456:	60fb      	str	r3, [r7, #12]
 8031458:	e059      	b.n	803150e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 803145a:	687b      	ldr	r3, [r7, #4]
 803145c:	4a32      	ldr	r2, [pc, #200]	; (8031528 <GetSector+0x11c>)
 803145e:	4293      	cmp	r3, r2
 8031460:	d806      	bhi.n	8031470 <GetSector+0x64>
 8031462:	687b      	ldr	r3, [r7, #4]
 8031464:	4a2f      	ldr	r2, [pc, #188]	; (8031524 <GetSector+0x118>)
 8031466:	4293      	cmp	r3, r2
 8031468:	d302      	bcc.n	8031470 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 803146a:	2303      	movs	r3, #3
 803146c:	60fb      	str	r3, [r7, #12]
 803146e:	e04e      	b.n	803150e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8031470:	687b      	ldr	r3, [r7, #4]
 8031472:	4a2e      	ldr	r2, [pc, #184]	; (803152c <GetSector+0x120>)
 8031474:	4293      	cmp	r3, r2
 8031476:	d806      	bhi.n	8031486 <GetSector+0x7a>
 8031478:	687b      	ldr	r3, [r7, #4]
 803147a:	4a2b      	ldr	r2, [pc, #172]	; (8031528 <GetSector+0x11c>)
 803147c:	4293      	cmp	r3, r2
 803147e:	d902      	bls.n	8031486 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 8031480:	2304      	movs	r3, #4
 8031482:	60fb      	str	r3, [r7, #12]
 8031484:	e043      	b.n	803150e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8031486:	687b      	ldr	r3, [r7, #4]
 8031488:	4a29      	ldr	r2, [pc, #164]	; (8031530 <GetSector+0x124>)
 803148a:	4293      	cmp	r3, r2
 803148c:	d806      	bhi.n	803149c <GetSector+0x90>
 803148e:	687b      	ldr	r3, [r7, #4]
 8031490:	4a26      	ldr	r2, [pc, #152]	; (803152c <GetSector+0x120>)
 8031492:	4293      	cmp	r3, r2
 8031494:	d902      	bls.n	803149c <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 8031496:	2305      	movs	r3, #5
 8031498:	60fb      	str	r3, [r7, #12]
 803149a:	e038      	b.n	803150e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 803149c:	687b      	ldr	r3, [r7, #4]
 803149e:	4a25      	ldr	r2, [pc, #148]	; (8031534 <GetSector+0x128>)
 80314a0:	4293      	cmp	r3, r2
 80314a2:	d806      	bhi.n	80314b2 <GetSector+0xa6>
 80314a4:	687b      	ldr	r3, [r7, #4]
 80314a6:	4a22      	ldr	r2, [pc, #136]	; (8031530 <GetSector+0x124>)
 80314a8:	4293      	cmp	r3, r2
 80314aa:	d902      	bls.n	80314b2 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 80314ac:	2306      	movs	r3, #6
 80314ae:	60fb      	str	r3, [r7, #12]
 80314b0:	e02d      	b.n	803150e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 80314b2:	687b      	ldr	r3, [r7, #4]
 80314b4:	4a20      	ldr	r2, [pc, #128]	; (8031538 <GetSector+0x12c>)
 80314b6:	4293      	cmp	r3, r2
 80314b8:	d806      	bhi.n	80314c8 <GetSector+0xbc>
 80314ba:	687b      	ldr	r3, [r7, #4]
 80314bc:	4a1d      	ldr	r2, [pc, #116]	; (8031534 <GetSector+0x128>)
 80314be:	4293      	cmp	r3, r2
 80314c0:	d902      	bls.n	80314c8 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;  
 80314c2:	2307      	movs	r3, #7
 80314c4:	60fb      	str	r3, [r7, #12]
 80314c6:	e022      	b.n	803150e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 80314c8:	687b      	ldr	r3, [r7, #4]
 80314ca:	4a1c      	ldr	r2, [pc, #112]	; (803153c <GetSector+0x130>)
 80314cc:	4293      	cmp	r3, r2
 80314ce:	d806      	bhi.n	80314de <GetSector+0xd2>
 80314d0:	687b      	ldr	r3, [r7, #4]
 80314d2:	4a19      	ldr	r2, [pc, #100]	; (8031538 <GetSector+0x12c>)
 80314d4:	4293      	cmp	r3, r2
 80314d6:	d902      	bls.n	80314de <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;  
 80314d8:	2308      	movs	r3, #8
 80314da:	60fb      	str	r3, [r7, #12]
 80314dc:	e017      	b.n	803150e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 80314de:	687b      	ldr	r3, [r7, #4]
 80314e0:	4a17      	ldr	r2, [pc, #92]	; (8031540 <GetSector+0x134>)
 80314e2:	4293      	cmp	r3, r2
 80314e4:	d806      	bhi.n	80314f4 <GetSector+0xe8>
 80314e6:	687b      	ldr	r3, [r7, #4]
 80314e8:	4a14      	ldr	r2, [pc, #80]	; (803153c <GetSector+0x130>)
 80314ea:	4293      	cmp	r3, r2
 80314ec:	d902      	bls.n	80314f4 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;  
 80314ee:	2309      	movs	r3, #9
 80314f0:	60fb      	str	r3, [r7, #12]
 80314f2:	e00c      	b.n	803150e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 80314f4:	687b      	ldr	r3, [r7, #4]
 80314f6:	4a13      	ldr	r2, [pc, #76]	; (8031544 <GetSector+0x138>)
 80314f8:	4293      	cmp	r3, r2
 80314fa:	d806      	bhi.n	803150a <GetSector+0xfe>
 80314fc:	687b      	ldr	r3, [r7, #4]
 80314fe:	4a10      	ldr	r2, [pc, #64]	; (8031540 <GetSector+0x134>)
 8031500:	4293      	cmp	r3, r2
 8031502:	d902      	bls.n	803150a <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;  
 8031504:	230a      	movs	r3, #10
 8031506:	60fb      	str	r3, [r7, #12]
 8031508:	e001      	b.n	803150e <GetSector+0x102>
  }
  else /*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
  {
    sector = FLASH_SECTOR_11;  
 803150a:	230b      	movs	r3, #11
 803150c:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 803150e:	68fb      	ldr	r3, [r7, #12]
}
 8031510:	4618      	mov	r0, r3
 8031512:	3714      	adds	r7, #20
 8031514:	46bd      	mov	sp, r7
 8031516:	f85d 7b04 	ldr.w	r7, [sp], #4
 803151a:	4770      	bx	lr
 803151c:	08004000 	.word	0x08004000
 8031520:	08008000 	.word	0x08008000
 8031524:	0800c000 	.word	0x0800c000
 8031528:	0800ffff 	.word	0x0800ffff
 803152c:	0801ffff 	.word	0x0801ffff
 8031530:	0803ffff 	.word	0x0803ffff
 8031534:	0805ffff 	.word	0x0805ffff
 8031538:	0807ffff 	.word	0x0807ffff
 803153c:	0809ffff 	.word	0x0809ffff
 8031540:	080bffff 	.word	0x080bffff
 8031544:	080dffff 	.word	0x080dffff

08031548 <FLASH_If_FindLastData>:
}

//========================================================================
uint32_t	FLASH_If_FindLastData	( uint32_t baseAddr, uint32_t endAddr )
//========================================================================
{
 8031548:	b580      	push	{r7, lr}
 803154a:	b084      	sub	sp, #16
 803154c:	af00      	add	r7, sp, #0
 803154e:	6078      	str	r0, [r7, #4]
 8031550:	6039      	str	r1, [r7, #0]
	//	해당영역의 마지막 Data를 찾는다.
	//	Flash 영역 Binary Data Size 확인용.
	printf( "%s(%d)\n", __func__, __LINE__ );
 8031552:	f44f 7291 	mov.w	r2, #290	; 0x122
 8031556:	4912      	ldr	r1, [pc, #72]	; (80315a0 <FLASH_If_FindLastData+0x58>)
 8031558:	4812      	ldr	r0, [pc, #72]	; (80315a4 <FLASH_If_FindLastData+0x5c>)
 803155a:	f005 ffa1 	bl	80374a0 <iprintf>

	uint32_t findAddr;

	int	nFound = 0;
 803155e:	2300      	movs	r3, #0
 8031560:	60bb      	str	r3, [r7, #8]

	for( findAddr = endAddr; findAddr > baseAddr; findAddr -= 4 )
 8031562:	683b      	ldr	r3, [r7, #0]
 8031564:	60fb      	str	r3, [r7, #12]
 8031566:	e00a      	b.n	803157e <FLASH_If_FindLastData+0x36>
	{
		if( *(__IO uint32_t*)findAddr != 0xFFFFFFFF )
 8031568:	68fb      	ldr	r3, [r7, #12]
 803156a:	681b      	ldr	r3, [r3, #0]
 803156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8031570:	d002      	beq.n	8031578 <FLASH_If_FindLastData+0x30>
		{
			//	Found Last Valid Data.
			nFound = 1;
 8031572:	2301      	movs	r3, #1
 8031574:	60bb      	str	r3, [r7, #8]
			break;
 8031576:	e006      	b.n	8031586 <FLASH_If_FindLastData+0x3e>
	for( findAddr = endAddr; findAddr > baseAddr; findAddr -= 4 )
 8031578:	68fb      	ldr	r3, [r7, #12]
 803157a:	3b04      	subs	r3, #4
 803157c:	60fb      	str	r3, [r7, #12]
 803157e:	68fa      	ldr	r2, [r7, #12]
 8031580:	687b      	ldr	r3, [r7, #4]
 8031582:	429a      	cmp	r2, r3
 8031584:	d8f0      	bhi.n	8031568 <FLASH_If_FindLastData+0x20>
		}
	}

	if ( nFound == 0 )	return 0;		//	Not Found
 8031586:	68bb      	ldr	r3, [r7, #8]
 8031588:	2b00      	cmp	r3, #0
 803158a:	d101      	bne.n	8031590 <FLASH_If_FindLastData+0x48>
 803158c:	2300      	movs	r3, #0
 803158e:	e003      	b.n	8031598 <FLASH_If_FindLastData+0x50>
	else 				return (findAddr - baseAddr) + 4;
 8031590:	68fa      	ldr	r2, [r7, #12]
 8031592:	687b      	ldr	r3, [r7, #4]
 8031594:	1ad3      	subs	r3, r2, r3
 8031596:	3304      	adds	r3, #4
}
 8031598:	4618      	mov	r0, r3
 803159a:	3710      	adds	r7, #16
 803159c:	46bd      	mov	sp, r7
 803159e:	bd80      	pop	{r7, pc}
 80315a0:	080415a8 	.word	0x080415a8
 80315a4:	0803ab50 	.word	0x0803ab50

080315a8 <FLASH_If_GetBootSize>:

//========================================================================
uint32_t	FLASH_If_GetBootSize	( void )
//========================================================================
{
 80315a8:	b580      	push	{r7, lr}
 80315aa:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 80315ac:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80315b0:	4905      	ldr	r1, [pc, #20]	; (80315c8 <FLASH_If_GetBootSize+0x20>)
 80315b2:	4806      	ldr	r0, [pc, #24]	; (80315cc <FLASH_If_GetBootSize+0x24>)
 80315b4:	f005 ff74 	bl	80374a0 <iprintf>

	return FLASH_If_FindLastData( ADDR_FLASH_BOOT, (ADDR_FLASH_CONF - 4) );
 80315b8:	4905      	ldr	r1, [pc, #20]	; (80315d0 <FLASH_If_GetBootSize+0x28>)
 80315ba:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80315be:	f7ff ffc3 	bl	8031548 <FLASH_If_FindLastData>
 80315c2:	4603      	mov	r3, r0
}
 80315c4:	4618      	mov	r0, r3
 80315c6:	bd80      	pop	{r7, pc}
 80315c8:	080415c0 	.word	0x080415c0
 80315cc:	0803ab50 	.word	0x0803ab50
 80315d0:	0800fffc 	.word	0x0800fffc

080315d4 <FLASH_If_GetAppSize>:

//========================================================================
uint32_t	FLASH_If_GetAppSize		( void )
//========================================================================
{
 80315d4:	b580      	push	{r7, lr}
 80315d6:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 80315d8:	f240 1243 	movw	r2, #323	; 0x143
 80315dc:	4905      	ldr	r1, [pc, #20]	; (80315f4 <FLASH_If_GetAppSize+0x20>)
 80315de:	4806      	ldr	r0, [pc, #24]	; (80315f8 <FLASH_If_GetAppSize+0x24>)
 80315e0:	f005 ff5e 	bl	80374a0 <iprintf>

	return FLASH_If_FindLastData( ADDR_FLASH_APP, (ADDR_FLASH_IMGBOOT - 4) );
 80315e4:	4905      	ldr	r1, [pc, #20]	; (80315fc <FLASH_If_GetAppSize+0x28>)
 80315e6:	4806      	ldr	r0, [pc, #24]	; (8031600 <FLASH_If_GetAppSize+0x2c>)
 80315e8:	f7ff ffae 	bl	8031548 <FLASH_If_FindLastData>
 80315ec:	4603      	mov	r3, r0
}
 80315ee:	4618      	mov	r0, r3
 80315f0:	bd80      	pop	{r7, pc}
 80315f2:	bf00      	nop
 80315f4:	080415d8 	.word	0x080415d8
 80315f8:	0803ab50 	.word	0x0803ab50
 80315fc:	0807fffc 	.word	0x0807fffc
 8031600:	08020000 	.word	0x08020000

08031604 <GetKey>:
static int s_btnStat[9] = { 0, };	//	Default ( 1 - pull-up )

//========================================================================
int	GetKey( int eKey )
//========================================================================
{
 8031604:	b480      	push	{r7}
 8031606:	b083      	sub	sp, #12
 8031608:	af00      	add	r7, sp, #0
 803160a:	6078      	str	r0, [r7, #4]
	return (s_btnStat[eKey]);
 803160c:	4a04      	ldr	r2, [pc, #16]	; (8031620 <GetKey+0x1c>)
 803160e:	687b      	ldr	r3, [r7, #4]
 8031610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8031614:	4618      	mov	r0, r3
 8031616:	370c      	adds	r7, #12
 8031618:	46bd      	mov	sp, r7
 803161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803161e:	4770      	bx	lr
 8031620:	200022dc 	.word	0x200022dc

08031624 <GetKeyStat>:


//========================================================================
void GetKeyStat( int *btnStat )
//========================================================================
{
 8031624:	b580      	push	{r7, lr}
 8031626:	b082      	sub	sp, #8
 8031628:	af00      	add	r7, sp, #0
 803162a:	6078      	str	r0, [r7, #4]
	//	Pull-Up ( Active Low )
	btnStat[0] = !( HAL_GPIO_ReadPin( DOME1_GPIO_Port, DOME1_Pin ) );	//	Menu
 803162c:	2101      	movs	r1, #1
 803162e:	483a      	ldr	r0, [pc, #232]	; (8031718 <GetKeyStat+0xf4>)
 8031630:	f7f1 ff5c 	bl	80234ec <HAL_GPIO_ReadPin>
 8031634:	4603      	mov	r3, r0
 8031636:	2b00      	cmp	r3, #0
 8031638:	bf0c      	ite	eq
 803163a:	2301      	moveq	r3, #1
 803163c:	2300      	movne	r3, #0
 803163e:	b2db      	uxtb	r3, r3
 8031640:	461a      	mov	r2, r3
 8031642:	687b      	ldr	r3, [r7, #4]
 8031644:	601a      	str	r2, [r3, #0]
	btnStat[1] = !( HAL_GPIO_ReadPin( DOME2_GPIO_Port, DOME2_Pin ) );	//	Up
 8031646:	2102      	movs	r1, #2
 8031648:	4833      	ldr	r0, [pc, #204]	; (8031718 <GetKeyStat+0xf4>)
 803164a:	f7f1 ff4f 	bl	80234ec <HAL_GPIO_ReadPin>
 803164e:	4603      	mov	r3, r0
 8031650:	2b00      	cmp	r3, #0
 8031652:	bf0c      	ite	eq
 8031654:	2301      	moveq	r3, #1
 8031656:	2300      	movne	r3, #0
 8031658:	b2da      	uxtb	r2, r3
 803165a:	687b      	ldr	r3, [r7, #4]
 803165c:	3304      	adds	r3, #4
 803165e:	601a      	str	r2, [r3, #0]
	btnStat[2] = !( HAL_GPIO_ReadPin( DOME3_GPIO_Port, DOME3_Pin ) );	//	OK
 8031660:	2104      	movs	r1, #4
 8031662:	482d      	ldr	r0, [pc, #180]	; (8031718 <GetKeyStat+0xf4>)
 8031664:	f7f1 ff42 	bl	80234ec <HAL_GPIO_ReadPin>
 8031668:	4603      	mov	r3, r0
 803166a:	2b00      	cmp	r3, #0
 803166c:	bf0c      	ite	eq
 803166e:	2301      	moveq	r3, #1
 8031670:	2300      	movne	r3, #0
 8031672:	b2da      	uxtb	r2, r3
 8031674:	687b      	ldr	r3, [r7, #4]
 8031676:	3308      	adds	r3, #8
 8031678:	601a      	str	r2, [r3, #0]
	btnStat[3] = !( HAL_GPIO_ReadPin( DOME4_GPIO_Port, DOME4_Pin ) );	//	Light
 803167a:	2108      	movs	r1, #8
 803167c:	4826      	ldr	r0, [pc, #152]	; (8031718 <GetKeyStat+0xf4>)
 803167e:	f7f1 ff35 	bl	80234ec <HAL_GPIO_ReadPin>
 8031682:	4603      	mov	r3, r0
 8031684:	2b00      	cmp	r3, #0
 8031686:	bf0c      	ite	eq
 8031688:	2301      	moveq	r3, #1
 803168a:	2300      	movne	r3, #0
 803168c:	b2da      	uxtb	r2, r3
 803168e:	687b      	ldr	r3, [r7, #4]
 8031690:	330c      	adds	r3, #12
 8031692:	601a      	str	r2, [r3, #0]
	btnStat[4] = !( HAL_GPIO_ReadPin( DOME5_GPIO_Port, DOME5_Pin ) );	//	Down
 8031694:	2110      	movs	r1, #16
 8031696:	4820      	ldr	r0, [pc, #128]	; (8031718 <GetKeyStat+0xf4>)
 8031698:	f7f1 ff28 	bl	80234ec <HAL_GPIO_ReadPin>
 803169c:	4603      	mov	r3, r0
 803169e:	2b00      	cmp	r3, #0
 80316a0:	bf0c      	ite	eq
 80316a2:	2301      	moveq	r3, #1
 80316a4:	2300      	movne	r3, #0
 80316a6:	b2da      	uxtb	r2, r3
 80316a8:	687b      	ldr	r3, [r7, #4]
 80316aa:	3310      	adds	r3, #16
 80316ac:	601a      	str	r2, [r3, #0]
	btnStat[5] = !( HAL_GPIO_ReadPin( DOME6_GPIO_Port, DOME6_Pin ) );	//	Vol
 80316ae:	2120      	movs	r1, #32
 80316b0:	4819      	ldr	r0, [pc, #100]	; (8031718 <GetKeyStat+0xf4>)
 80316b2:	f7f1 ff1b 	bl	80234ec <HAL_GPIO_ReadPin>
 80316b6:	4603      	mov	r3, r0
 80316b8:	2b00      	cmp	r3, #0
 80316ba:	bf0c      	ite	eq
 80316bc:	2301      	moveq	r3, #1
 80316be:	2300      	movne	r3, #0
 80316c0:	b2da      	uxtb	r2, r3
 80316c2:	687b      	ldr	r3, [r7, #4]
 80316c4:	3314      	adds	r3, #20
 80316c6:	601a      	str	r2, [r3, #0]
	btnStat[6] = !( HAL_GPIO_ReadPin( PTT_KEY_GPIO_Port, PTT_KEY_Pin ) );
 80316c8:	2180      	movs	r1, #128	; 0x80
 80316ca:	4813      	ldr	r0, [pc, #76]	; (8031718 <GetKeyStat+0xf4>)
 80316cc:	f7f1 ff0e 	bl	80234ec <HAL_GPIO_ReadPin>
 80316d0:	4603      	mov	r3, r0
 80316d2:	2b00      	cmp	r3, #0
 80316d4:	bf0c      	ite	eq
 80316d6:	2301      	moveq	r3, #1
 80316d8:	2300      	movne	r3, #0
 80316da:	b2da      	uxtb	r2, r3
 80316dc:	687b      	ldr	r3, [r7, #4]
 80316de:	3318      	adds	r3, #24
 80316e0:	601a      	str	r2, [r3, #0]
	btnStat[7] = !( HAL_GPIO_ReadPin( SOS_KEY_GPIO_Port, SOS_KEY_Pin ) );
 80316e2:	2140      	movs	r1, #64	; 0x40
 80316e4:	480c      	ldr	r0, [pc, #48]	; (8031718 <GetKeyStat+0xf4>)
 80316e6:	f7f1 ff01 	bl	80234ec <HAL_GPIO_ReadPin>
 80316ea:	4603      	mov	r3, r0
 80316ec:	2b00      	cmp	r3, #0
 80316ee:	bf0c      	ite	eq
 80316f0:	2301      	moveq	r3, #1
 80316f2:	2300      	movne	r3, #0
 80316f4:	b2da      	uxtb	r2, r3
 80316f6:	687b      	ldr	r3, [r7, #4]
 80316f8:	331c      	adds	r3, #28
 80316fa:	601a      	str	r2, [r3, #0]

	//	Pull-Down ( Active High )
	btnStat[8] = ( HAL_GPIO_ReadPin( ON_OFF_KEY_GPIO_Port, ON_OFF_KEY_Pin ) );
 80316fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8031700:	4805      	ldr	r0, [pc, #20]	; (8031718 <GetKeyStat+0xf4>)
 8031702:	f7f1 fef3 	bl	80234ec <HAL_GPIO_ReadPin>
 8031706:	4603      	mov	r3, r0
 8031708:	461a      	mov	r2, r3
 803170a:	687b      	ldr	r3, [r7, #4]
 803170c:	3320      	adds	r3, #32
 803170e:	601a      	str	r2, [r3, #0]
}
 8031710:	bf00      	nop
 8031712:	3708      	adds	r7, #8
 8031714:	46bd      	mov	sp, r7
 8031716:	bd80      	pop	{r7, pc}
 8031718:	40020c00 	.word	0x40020c00

0803171c <LoopProcKey>:
#include <string.h>		//	memcmp()

//========================================================================
void LoopProcKey ( uint32_t tickCurr )
//========================================================================
{
 803171c:	b5b0      	push	{r4, r5, r7, lr}
 803171e:	b08c      	sub	sp, #48	; 0x30
 8031720:	af00      	add	r7, sp, #0
 8031722:	6078      	str	r0, [r7, #4]
	//========================================================================
	static uint32_t tickBase = 0;
	int 	btnStat[9];

	//    if( ( HAL_GetTick() - tickBase ) >= 1000 )
	if ( ( tickCurr - tickBase ) >= 100 )
 8031724:	4b4e      	ldr	r3, [pc, #312]	; (8031860 <LoopProcKey+0x144>)
 8031726:	681b      	ldr	r3, [r3, #0]
 8031728:	687a      	ldr	r2, [r7, #4]
 803172a:	1ad3      	subs	r3, r2, r3
 803172c:	2b63      	cmp	r3, #99	; 0x63
 803172e:	d96c      	bls.n	803180a <LoopProcKey+0xee>
		//========================================================================
		//  Period : 100 ms

		//========================================================================
		//	Key 값 얻기.
		GetKeyStat( btnStat );
 8031730:	f107 030c 	add.w	r3, r7, #12
 8031734:	4618      	mov	r0, r3
 8031736:	f7ff ff75 	bl	8031624 <GetKeyStat>

		if ( memcmp( s_btnStat, btnStat, sizeof( btnStat ) ) != 0 )
 803173a:	f107 030c 	add.w	r3, r7, #12
 803173e:	2224      	movs	r2, #36	; 0x24
 8031740:	4619      	mov	r1, r3
 8031742:	4848      	ldr	r0, [pc, #288]	; (8031864 <LoopProcKey+0x148>)
 8031744:	f006 f8fe 	bl	8037944 <memcmp>
 8031748:	4603      	mov	r3, r0
 803174a:	2b00      	cmp	r3, #0
 803174c:	d05a      	beq.n	8031804 <LoopProcKey+0xe8>
//			printf("\n");
//			printf("[btnStat] ");
//			for( i = 0; i < 9; i++ ) printf("%d ", btnStat[i]);
//			printf("\n");

			if ( s_btnStat[0] != btnStat[0] )	KeyMenu		( btnStat[0] );	//	DOME1
 803174e:	4b45      	ldr	r3, [pc, #276]	; (8031864 <LoopProcKey+0x148>)
 8031750:	681a      	ldr	r2, [r3, #0]
 8031752:	68fb      	ldr	r3, [r7, #12]
 8031754:	429a      	cmp	r2, r3
 8031756:	d003      	beq.n	8031760 <LoopProcKey+0x44>
 8031758:	68fb      	ldr	r3, [r7, #12]
 803175a:	4618      	mov	r0, r3
 803175c:	f000 f888 	bl	8031870 <KeyMenu>
			if ( s_btnStat[1] != btnStat[1] )	KeyUp		( btnStat[1] );	//	DOME2
 8031760:	4b40      	ldr	r3, [pc, #256]	; (8031864 <LoopProcKey+0x148>)
 8031762:	685a      	ldr	r2, [r3, #4]
 8031764:	693b      	ldr	r3, [r7, #16]
 8031766:	429a      	cmp	r2, r3
 8031768:	d003      	beq.n	8031772 <LoopProcKey+0x56>
 803176a:	693b      	ldr	r3, [r7, #16]
 803176c:	4618      	mov	r0, r3
 803176e:	f000 f8e5 	bl	803193c <KeyUp>
			if ( s_btnStat[2] != btnStat[2] )	KeyOK		( btnStat[2] );	//	DOME3
 8031772:	4b3c      	ldr	r3, [pc, #240]	; (8031864 <LoopProcKey+0x148>)
 8031774:	689a      	ldr	r2, [r3, #8]
 8031776:	697b      	ldr	r3, [r7, #20]
 8031778:	429a      	cmp	r2, r3
 803177a:	d003      	beq.n	8031784 <LoopProcKey+0x68>
 803177c:	697b      	ldr	r3, [r7, #20]
 803177e:	4618      	mov	r0, r3
 8031780:	f000 f88e 	bl	80318a0 <KeyOK>
			if ( s_btnStat[3] != btnStat[3] )	KeyLight	( btnStat[3] );	//	DOME4
 8031784:	4b37      	ldr	r3, [pc, #220]	; (8031864 <LoopProcKey+0x148>)
 8031786:	68da      	ldr	r2, [r3, #12]
 8031788:	69bb      	ldr	r3, [r7, #24]
 803178a:	429a      	cmp	r2, r3
 803178c:	d003      	beq.n	8031796 <LoopProcKey+0x7a>
 803178e:	69bb      	ldr	r3, [r7, #24]
 8031790:	4618      	mov	r0, r3
 8031792:	f000 f89d 	bl	80318d0 <KeyLight>
			if ( s_btnStat[4] != btnStat[4] )	KeyDown		( btnStat[4] );	//	DOME5
 8031796:	4b33      	ldr	r3, [pc, #204]	; (8031864 <LoopProcKey+0x148>)
 8031798:	691a      	ldr	r2, [r3, #16]
 803179a:	69fb      	ldr	r3, [r7, #28]
 803179c:	429a      	cmp	r2, r3
 803179e:	d003      	beq.n	80317a8 <LoopProcKey+0x8c>
 80317a0:	69fb      	ldr	r3, [r7, #28]
 80317a2:	4618      	mov	r0, r3
 80317a4:	f000 f8e2 	bl	803196c <KeyDown>
			if ( s_btnStat[5] != btnStat[5] )	KeyVol		( btnStat[5] );	//	DOME6
 80317a8:	4b2e      	ldr	r3, [pc, #184]	; (8031864 <LoopProcKey+0x148>)
 80317aa:	695a      	ldr	r2, [r3, #20]
 80317ac:	6a3b      	ldr	r3, [r7, #32]
 80317ae:	429a      	cmp	r2, r3
 80317b0:	d003      	beq.n	80317ba <LoopProcKey+0x9e>
 80317b2:	6a3b      	ldr	r3, [r7, #32]
 80317b4:	4618      	mov	r0, r3
 80317b6:	f000 f8f1 	bl	803199c <KeyVol>
			if ( s_btnStat[6] != btnStat[6] )	KeyPtt		( btnStat[6] );	//	PTT
 80317ba:	4b2a      	ldr	r3, [pc, #168]	; (8031864 <LoopProcKey+0x148>)
 80317bc:	699a      	ldr	r2, [r3, #24]
 80317be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80317c0:	429a      	cmp	r2, r3
 80317c2:	d003      	beq.n	80317cc <LoopProcKey+0xb0>
 80317c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80317c6:	4618      	mov	r0, r3
 80317c8:	f000 f924 	bl	8031a14 <KeyPtt>
			if ( s_btnStat[7] != btnStat[7] )	KeySos		( btnStat[7] );	//	SOS
 80317cc:	4b25      	ldr	r3, [pc, #148]	; (8031864 <LoopProcKey+0x148>)
 80317ce:	69da      	ldr	r2, [r3, #28]
 80317d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80317d2:	429a      	cmp	r2, r3
 80317d4:	d003      	beq.n	80317de <LoopProcKey+0xc2>
 80317d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80317d8:	4618      	mov	r0, r3
 80317da:	f000 f995 	bl	8031b08 <KeySos>
			if ( s_btnStat[8] != btnStat[8] )	KeyPwrOnOff	( btnStat[8] );	//	ON/OFF
 80317de:	4b21      	ldr	r3, [pc, #132]	; (8031864 <LoopProcKey+0x148>)
 80317e0:	6a1a      	ldr	r2, [r3, #32]
 80317e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80317e4:	429a      	cmp	r2, r3
 80317e6:	d003      	beq.n	80317f0 <LoopProcKey+0xd4>
 80317e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80317ea:	4618      	mov	r0, r3
 80317ec:	f000 f9f8 	bl	8031be0 <KeyPwrOnOff>

			//	값 저장.
			memcpy( s_btnStat, btnStat, sizeof( btnStat ) );
 80317f0:	4b1c      	ldr	r3, [pc, #112]	; (8031864 <LoopProcKey+0x148>)
 80317f2:	461d      	mov	r5, r3
 80317f4:	f107 040c 	add.w	r4, r7, #12
 80317f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80317fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80317fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80317fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8031800:	6823      	ldr	r3, [r4, #0]
 8031802:	602b      	str	r3, [r5, #0]
		}

		tickBase = tickCurr;
 8031804:	4a16      	ldr	r2, [pc, #88]	; (8031860 <LoopProcKey+0x144>)
 8031806:	687b      	ldr	r3, [r7, #4]
 8031808:	6013      	str	r3, [r2, #0]
	//	* [송신기][MENU] : 유지보수 메뉴 진입 기능 추가.
	//		- [OK]버튼을 누른상태에서 [MENU]버튼을 3초간 누를 경우 Maintance모드로 진입함.

	static uint32_t tickBase2 = 0;

	if ( ( tickCurr - tickBase2 ) >= 1000 && IsMenuMaint() == 0 )
 803180a:	4b17      	ldr	r3, [pc, #92]	; (8031868 <LoopProcKey+0x14c>)
 803180c:	681b      	ldr	r3, [r3, #0]
 803180e:	687a      	ldr	r2, [r7, #4]
 8031810:	1ad3      	subs	r3, r2, r3
 8031812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8031816:	d31f      	bcc.n	8031858 <LoopProcKey+0x13c>
 8031818:	f000 fa12 	bl	8031c40 <IsMenuMaint>
 803181c:	4603      	mov	r3, r0
 803181e:	2b00      	cmp	r3, #0
 8031820:	d11a      	bne.n	8031858 <LoopProcKey+0x13c>
	{
		//	Period : 1 sec
		static int s_cntKeyOkMenu = 0;
		if ( s_btnStat[eKeyOk] && s_btnStat[eKeyMenu] )
 8031822:	4b10      	ldr	r3, [pc, #64]	; (8031864 <LoopProcKey+0x148>)
 8031824:	689b      	ldr	r3, [r3, #8]
 8031826:	2b00      	cmp	r3, #0
 8031828:	d009      	beq.n	803183e <LoopProcKey+0x122>
 803182a:	4b0e      	ldr	r3, [pc, #56]	; (8031864 <LoopProcKey+0x148>)
 803182c:	681b      	ldr	r3, [r3, #0]
 803182e:	2b00      	cmp	r3, #0
 8031830:	d005      	beq.n	803183e <LoopProcKey+0x122>
		{
			s_cntKeyOkMenu++;
 8031832:	4b0e      	ldr	r3, [pc, #56]	; (803186c <LoopProcKey+0x150>)
 8031834:	681b      	ldr	r3, [r3, #0]
 8031836:	3301      	adds	r3, #1
 8031838:	4a0c      	ldr	r2, [pc, #48]	; (803186c <LoopProcKey+0x150>)
 803183a:	6013      	str	r3, [r2, #0]
 803183c:	e002      	b.n	8031844 <LoopProcKey+0x128>
		}
		else
		{
			s_cntKeyOkMenu = 0;
 803183e:	4b0b      	ldr	r3, [pc, #44]	; (803186c <LoopProcKey+0x150>)
 8031840:	2200      	movs	r2, #0
 8031842:	601a      	str	r2, [r3, #0]
		}

		if ( s_cntKeyOkMenu > 3 )	//	3초 이상 누를 경우.
 8031844:	4b09      	ldr	r3, [pc, #36]	; (803186c <LoopProcKey+0x150>)
 8031846:	681b      	ldr	r3, [r3, #0]
 8031848:	2b03      	cmp	r3, #3
 803184a:	dd02      	ble.n	8031852 <LoopProcKey+0x136>
		{
			EnableMenuMaint( 1 );
 803184c:	2001      	movs	r0, #1
 803184e:	f000 fa03 	bl	8031c58 <EnableMenuMaint>
		}

		tickBase2 = tickCurr;
 8031852:	4a05      	ldr	r2, [pc, #20]	; (8031868 <LoopProcKey+0x14c>)
 8031854:	687b      	ldr	r3, [r7, #4]
 8031856:	6013      	str	r3, [r2, #0]
#if defined(USE_FREERTOS)
	osDelay( 1 );		//	1 msec
#else
//        HAL_Delay( 1 );
#endif
}
 8031858:	bf00      	nop
 803185a:	3730      	adds	r7, #48	; 0x30
 803185c:	46bd      	mov	sp, r7
 803185e:	bdb0      	pop	{r4, r5, r7, pc}
 8031860:	20002300 	.word	0x20002300
 8031864:	200022dc 	.word	0x200022dc
 8031868:	20002304 	.word	0x20002304
 803186c:	20002308 	.word	0x20002308

08031870 <KeyMenu>:
//========================================================================

//========================================================================
void KeyMenu( int bValue )
//========================================================================
{
 8031870:	b580      	push	{r7, lr}
 8031872:	b082      	sub	sp, #8
 8031874:	af00      	add	r7, sp, #0
 8031876:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 8031878:	687b      	ldr	r3, [r7, #4]
 803187a:	22a0      	movs	r2, #160	; 0xa0
 803187c:	4906      	ldr	r1, [pc, #24]	; (8031898 <KeyMenu+0x28>)
 803187e:	4807      	ldr	r0, [pc, #28]	; (803189c <KeyMenu+0x2c>)
 8031880:	f005 fe0e 	bl	80374a0 <iprintf>

	if ( bValue )
 8031884:	687b      	ldr	r3, [r7, #4]
 8031886:	2b00      	cmp	r3, #0
 8031888:	d001      	beq.n	803188e <KeyMenu+0x1e>
	{
//		LCDMenu();
		ProcBtnMenu();
 803188a:	f000 fad5 	bl	8031e38 <ProcBtnMenu>
	}
}
 803188e:	bf00      	nop
 8031890:	3708      	adds	r7, #8
 8031892:	46bd      	mov	sp, r7
 8031894:	bd80      	pop	{r7, pc}
 8031896:	bf00      	nop
 8031898:	080415ec 	.word	0x080415ec
 803189c:	0803ab58 	.word	0x0803ab58

080318a0 <KeyOK>:

//========================================================================
void KeyOK( int bValue )
//========================================================================
{
 80318a0:	b580      	push	{r7, lr}
 80318a2:	b082      	sub	sp, #8
 80318a4:	af00      	add	r7, sp, #0
 80318a6:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 80318a8:	687b      	ldr	r3, [r7, #4]
 80318aa:	22af      	movs	r2, #175	; 0xaf
 80318ac:	4906      	ldr	r1, [pc, #24]	; (80318c8 <KeyOK+0x28>)
 80318ae:	4807      	ldr	r0, [pc, #28]	; (80318cc <KeyOK+0x2c>)
 80318b0:	f005 fdf6 	bl	80374a0 <iprintf>

	if ( bValue )
 80318b4:	687b      	ldr	r3, [r7, #4]
 80318b6:	2b00      	cmp	r3, #0
 80318b8:	d001      	beq.n	80318be <KeyOK+0x1e>
	{
		ProcBtnOK();
 80318ba:	f000 fed7 	bl	803266c <ProcBtnOK>
	}
}
 80318be:	bf00      	nop
 80318c0:	3708      	adds	r7, #8
 80318c2:	46bd      	mov	sp, r7
 80318c4:	bd80      	pop	{r7, pc}
 80318c6:	bf00      	nop
 80318c8:	080415f4 	.word	0x080415f4
 80318cc:	0803ab58 	.word	0x0803ab58

080318d0 <KeyLight>:


//========================================================================
void KeyLight( int bValue )
//========================================================================
{
 80318d0:	b580      	push	{r7, lr}
 80318d2:	b082      	sub	sp, #8
 80318d4:	af00      	add	r7, sp, #0
 80318d6:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 80318d8:	687b      	ldr	r3, [r7, #4]
 80318da:	22be      	movs	r2, #190	; 0xbe
 80318dc:	4913      	ldr	r1, [pc, #76]	; (803192c <KeyLight+0x5c>)
 80318de:	4814      	ldr	r0, [pc, #80]	; (8031930 <KeyLight+0x60>)
 80318e0:	f005 fdde 	bl	80374a0 <iprintf>
	//	Light On/Off Toggle
	static int bOnOff = 0;

	//========================================================================
	//	GPIO제어.
	if ( bValue )
 80318e4:	687b      	ldr	r3, [r7, #4]
 80318e6:	2b00      	cmp	r3, #0
 80318e8:	d01c      	beq.n	8031924 <KeyLight+0x54>
	{
		if ( bOnOff == 0 )
 80318ea:	4b12      	ldr	r3, [pc, #72]	; (8031934 <KeyLight+0x64>)
 80318ec:	681b      	ldr	r3, [r3, #0]
 80318ee:	2b00      	cmp	r3, #0
 80318f0:	d10c      	bne.n	803190c <KeyLight+0x3c>
		{
			//	Flash Light On
			HAL_GPIO_WritePin( FLASH_ON_GPIO_Port, FLASH_ON_Pin, GPIO_PIN_SET );
 80318f2:	2201      	movs	r2, #1
 80318f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80318f8:	480f      	ldr	r0, [pc, #60]	; (8031938 <KeyLight+0x68>)
 80318fa:	f7f1 fe0f 	bl	802351c <HAL_GPIO_WritePin>

			LCDLight( 1 );
 80318fe:	2001      	movs	r0, #1
 8031900:	f7fa ff36 	bl	802c770 <LCDLight>
			bOnOff = 1;
 8031904:	4b0b      	ldr	r3, [pc, #44]	; (8031934 <KeyLight+0x64>)
 8031906:	2201      	movs	r2, #1
 8031908:	601a      	str	r2, [r3, #0]

			LCDLight( 0 );
			bOnOff = 0;
		}
	}
}
 803190a:	e00b      	b.n	8031924 <KeyLight+0x54>
			HAL_GPIO_WritePin( FLASH_ON_GPIO_Port, FLASH_ON_Pin, GPIO_PIN_RESET );
 803190c:	2200      	movs	r2, #0
 803190e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8031912:	4809      	ldr	r0, [pc, #36]	; (8031938 <KeyLight+0x68>)
 8031914:	f7f1 fe02 	bl	802351c <HAL_GPIO_WritePin>
			LCDLight( 0 );
 8031918:	2000      	movs	r0, #0
 803191a:	f7fa ff29 	bl	802c770 <LCDLight>
			bOnOff = 0;
 803191e:	4b05      	ldr	r3, [pc, #20]	; (8031934 <KeyLight+0x64>)
 8031920:	2200      	movs	r2, #0
 8031922:	601a      	str	r2, [r3, #0]
}
 8031924:	bf00      	nop
 8031926:	3708      	adds	r7, #8
 8031928:	46bd      	mov	sp, r7
 803192a:	bd80      	pop	{r7, pc}
 803192c:	080415fc 	.word	0x080415fc
 8031930:	0803ab58 	.word	0x0803ab58
 8031934:	2000230c 	.word	0x2000230c
 8031938:	40020400 	.word	0x40020400

0803193c <KeyUp>:

//========================================================================
void KeyUp( int bValue )
//========================================================================
{
 803193c:	b580      	push	{r7, lr}
 803193e:	b082      	sub	sp, #8
 8031940:	af00      	add	r7, sp, #0
 8031942:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 8031944:	687b      	ldr	r3, [r7, #4]
 8031946:	22e1      	movs	r2, #225	; 0xe1
 8031948:	4906      	ldr	r1, [pc, #24]	; (8031964 <KeyUp+0x28>)
 803194a:	4807      	ldr	r0, [pc, #28]	; (8031968 <KeyUp+0x2c>)
 803194c:	f005 fda8 	bl	80374a0 <iprintf>

	if( bValue )
 8031950:	687b      	ldr	r3, [r7, #4]
 8031952:	2b00      	cmp	r3, #0
 8031954:	d001      	beq.n	803195a <KeyUp+0x1e>
	{
		ProcBtnUp();
 8031956:	f000 fa2f 	bl	8031db8 <ProcBtnUp>
	}
}
 803195a:	bf00      	nop
 803195c:	3708      	adds	r7, #8
 803195e:	46bd      	mov	sp, r7
 8031960:	bd80      	pop	{r7, pc}
 8031962:	bf00      	nop
 8031964:	08041608 	.word	0x08041608
 8031968:	0803ab58 	.word	0x0803ab58

0803196c <KeyDown>:

//========================================================================
void KeyDown( int bValue )
//========================================================================
{
 803196c:	b580      	push	{r7, lr}
 803196e:	b082      	sub	sp, #8
 8031970:	af00      	add	r7, sp, #0
 8031972:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 8031974:	687b      	ldr	r3, [r7, #4]
 8031976:	22ef      	movs	r2, #239	; 0xef
 8031978:	4906      	ldr	r1, [pc, #24]	; (8031994 <KeyDown+0x28>)
 803197a:	4807      	ldr	r0, [pc, #28]	; (8031998 <KeyDown+0x2c>)
 803197c:	f005 fd90 	bl	80374a0 <iprintf>

	if( bValue )
 8031980:	687b      	ldr	r3, [r7, #4]
 8031982:	2b00      	cmp	r3, #0
 8031984:	d001      	beq.n	803198a <KeyDown+0x1e>
	{
		ProcBtnDown();
 8031986:	f000 fa37 	bl	8031df8 <ProcBtnDown>
	}
}
 803198a:	bf00      	nop
 803198c:	3708      	adds	r7, #8
 803198e:	46bd      	mov	sp, r7
 8031990:	bd80      	pop	{r7, pc}
 8031992:	bf00      	nop
 8031994:	08041610 	.word	0x08041610
 8031998:	0803ab58 	.word	0x0803ab58

0803199c <KeyVol>:

//========================================================================
void KeyVol( int bValue )
//========================================================================
{
 803199c:	b580      	push	{r7, lr}
 803199e:	b082      	sub	sp, #8
 80319a0:	af00      	add	r7, sp, #0
 80319a2:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 80319a4:	687b      	ldr	r3, [r7, #4]
 80319a6:	22fd      	movs	r2, #253	; 0xfd
 80319a8:	4917      	ldr	r1, [pc, #92]	; (8031a08 <KeyVol+0x6c>)
 80319aa:	4818      	ldr	r0, [pc, #96]	; (8031a0c <KeyVol+0x70>)
 80319ac:	f005 fd78 	bl	80374a0 <iprintf>

	if( bValue )
 80319b0:	687b      	ldr	r3, [r7, #4]
 80319b2:	2b00      	cmp	r3, #0
 80319b4:	d023      	beq.n	80319fe <KeyVol+0x62>
	{

		g_nSpkLevel = ( g_nSpkLevel + 1 ) % 4;  //  0, 1, 2, 3
 80319b6:	4b16      	ldr	r3, [pc, #88]	; (8031a10 <KeyVol+0x74>)
 80319b8:	681b      	ldr	r3, [r3, #0]
 80319ba:	3301      	adds	r3, #1
 80319bc:	425a      	negs	r2, r3
 80319be:	f003 0303 	and.w	r3, r3, #3
 80319c2:	f002 0203 	and.w	r2, r2, #3
 80319c6:	bf58      	it	pl
 80319c8:	4253      	negpl	r3, r2
 80319ca:	4a11      	ldr	r2, [pc, #68]	; (8031a10 <KeyVol+0x74>)
 80319cc:	6013      	str	r3, [r2, #0]

		//========================================================================
		SetSpkVol( g_nSpkLevel );
 80319ce:	4b10      	ldr	r3, [pc, #64]	; (8031a10 <KeyVol+0x74>)
 80319d0:	681b      	ldr	r3, [r3, #0]
 80319d2:	4618      	mov	r0, r3
 80319d4:	f001 fac4 	bl	8032f60 <SetSpkVol>
		//========================================================================

		if ( g_nSpkLevel )
 80319d8:	4b0d      	ldr	r3, [pc, #52]	; (8031a10 <KeyVol+0x74>)
 80319da:	681b      	ldr	r3, [r3, #0]
 80319dc:	2b00      	cmp	r3, #0
 80319de:	d008      	beq.n	80319f2 <KeyVol+0x56>
		{
			//	RFM SPK On
//				HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
			//	RFM SPK Off
//			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
			RFM_Spk(0);
 80319e0:	2000      	movs	r0, #0
 80319e2:	f001 fb69 	bl	80330b8 <RFM_Spk>

			LCDSpeaker( g_nSpkLevel );
 80319e6:	4b0a      	ldr	r3, [pc, #40]	; (8031a10 <KeyVol+0x74>)
 80319e8:	681b      	ldr	r3, [r3, #0]
 80319ea:	4618      	mov	r0, r3
 80319ec:	f7fa fef8 	bl	802c7e0 <LCDSpeaker>
			RFM_Spk(0);

			LCDSpeaker( 0 );
		}
	}
}
 80319f0:	e005      	b.n	80319fe <KeyVol+0x62>
			RFM_Spk(0);
 80319f2:	2000      	movs	r0, #0
 80319f4:	f001 fb60 	bl	80330b8 <RFM_Spk>
			LCDSpeaker( 0 );
 80319f8:	2000      	movs	r0, #0
 80319fa:	f7fa fef1 	bl	802c7e0 <LCDSpeaker>
}
 80319fe:	bf00      	nop
 8031a00:	3708      	adds	r7, #8
 8031a02:	46bd      	mov	sp, r7
 8031a04:	bd80      	pop	{r7, pc}
 8031a06:	bf00      	nop
 8031a08:	08041618 	.word	0x08041618
 8031a0c:	0803ab58 	.word	0x0803ab58
 8031a10:	20000bec 	.word	0x20000bec

08031a14 <KeyPtt>:


//========================================================================
void KeyPtt( int bValue )
//========================================================================
{
 8031a14:	b590      	push	{r4, r7, lr}
 8031a16:	b089      	sub	sp, #36	; 0x24
 8031a18:	af00      	add	r7, sp, #0
 8031a1a:	6078      	str	r0, [r7, #4]
#endif
	//========================================================================

	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 8031a1c:	687b      	ldr	r3, [r7, #4]
 8031a1e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8031a22:	4933      	ldr	r1, [pc, #204]	; (8031af0 <KeyPtt+0xdc>)
 8031a24:	4833      	ldr	r0, [pc, #204]	; (8031af4 <KeyPtt+0xe0>)
 8031a26:	f005 fd3b 	bl	80374a0 <iprintf>

	//	송신기 -> 수신기	:	방송

	if ( bValue )
 8031a2a:	687b      	ldr	r3, [r7, #4]
 8031a2c:	2b00      	cmp	r3, #0
 8031a2e:	d040      	beq.n	8031ab2 <KeyPtt+0x9e>
	{
#if defined(USE_CH_ISO_DEV)
		SetChPA( GetChNearRFM() );		//	가장 가까운 수신기 설정.
 8031a30:	f000 ff70 	bl	8032914 <GetChNearRFM>
 8031a34:	4603      	mov	r3, r0
 8031a36:	4618      	mov	r0, r3
 8031a38:	f000 ffae 	bl	8032998 <SetChPA>

		SetChPARFT( GetChNearRFT( 190 ) );	//	가까운 송신기 설정.
 8031a3c:	20be      	movs	r0, #190	; 0xbe
 8031a3e:	f000 ff23 	bl	8032888 <GetChNearRFT>
 8031a42:	4603      	mov	r3, r0
 8031a44:	4618      	mov	r0, r3
 8031a46:	f000 ffef 	bl	8032a28 <SetChPARFT>
#endif

#if defined( USE_AUDIO_ADPCM )	//	ADPCM 사용. - 1/4 압축
		ADPCM_ClearEncodeBuf();			//	인코딩 버퍼 Clear
 8031a4a:	f7fd fef9 	bl	802f840 <ADPCM_ClearEncodeBuf>
		qBufClear( &g_qBufAudioTx );	//	Tx Buffer Clear
 8031a4e:	482a      	ldr	r0, [pc, #168]	; (8031af8 <KeyPtt+0xe4>)
 8031a50:	f7fc fbf0 	bl	802e234 <qBufClear>
#endif

		LCDSetCursor( 20, 13 );
 8031a54:	210d      	movs	r1, #13
 8031a56:	2014      	movs	r0, #20
 8031a58:	f7fa ff5c 	bl	802c914 <LCDSetCursor>

		if ( IsMenuMaint() )
 8031a5c:	f000 f8f0 	bl	8031c40 <IsMenuMaint>
 8031a60:	4603      	mov	r3, r0
 8031a62:	2b00      	cmp	r3, #0
 8031a64:	d015      	beq.n	8031a92 <KeyPtt+0x7e>
		{
			//	Maint Mode : 송신채널 표시.
			char sBuf[20];
			sprintf( sBuf, "방송중(%d/%d)", GetCh2Car(GetChPA()), GetChPA() );	//	Channel -> Car
 8031a66:	f000 ffa7 	bl	80329b8 <GetChPA>
 8031a6a:	4603      	mov	r3, r0
 8031a6c:	4618      	mov	r0, r3
 8031a6e:	f000 ffaf 	bl	80329d0 <GetCh2Car>
 8031a72:	4604      	mov	r4, r0
 8031a74:	f000 ffa0 	bl	80329b8 <GetChPA>
 8031a78:	4603      	mov	r3, r0
 8031a7a:	f107 000c 	add.w	r0, r7, #12
 8031a7e:	4622      	mov	r2, r4
 8031a80:	491e      	ldr	r1, [pc, #120]	; (8031afc <KeyPtt+0xe8>)
 8031a82:	f005 fe39 	bl	80376f8 <siprintf>
			LCDPrintf( sBuf );
 8031a86:	f107 030c 	add.w	r3, r7, #12
 8031a8a:	4618      	mov	r0, r3
 8031a8c:	f7fa ff72 	bl	802c974 <LCDPrintf>
 8031a90:	e002      	b.n	8031a98 <KeyPtt+0x84>
		}
		else
		{
			LCDPrintf( "방송중..." );
 8031a92:	481b      	ldr	r0, [pc, #108]	; (8031b00 <KeyPtt+0xec>)
 8031a94:	f7fa ff6e 	bl	802c974 <LCDPrintf>
		}

		SetRFMMode( RFMModeTx );
 8031a98:	2001      	movs	r0, #1
 8031a9a:	f000 fe41 	bl	8032720 <SetRFMMode>

		//  Green LED On
		HAL_GPIO_WritePin ( LED_ON_A_GPIO_Port, LED_ON_A_Pin, GPIO_PIN_SET ); //  Green LED
 8031a9e:	2201      	movs	r2, #1
 8031aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8031aa4:	4817      	ldr	r0, [pc, #92]	; (8031b04 <KeyPtt+0xf0>)
 8031aa6:	f7f1 fd39 	bl	802351c <HAL_GPIO_WritePin>

		//	방송 - 시작
		SendPA( 1 );		//	SendRF - Send PA ( 송신기 -> 수신기 )
 8031aaa:	2001      	movs	r0, #1
 8031aac:	f7fc fece 	bl	802e84c <SendPA>
		HAL_GPIO_WritePin ( LED_ON_A_GPIO_Port, LED_ON_A_Pin, GPIO_PIN_RESET ); //  Green LED

		//	방송 - 종료
		SendPA( 0 );		//	SendRF - Send PA ( 송신기 -> 수신기 )
	}
}
 8031ab0:	e01a      	b.n	8031ae8 <KeyPtt+0xd4>
		UpdateLCDMain();
 8031ab2:	f000 f905 	bl	8031cc0 <UpdateLCDMain>
		SetRFMMode( RFMModeNormal );
 8031ab6:	2000      	movs	r0, #0
 8031ab8:	f000 fe32 	bl	8032720 <SetRFMMode>
		SetChPA( GetChNearRFM() );		//	가장 가까운 수신기 설정.
 8031abc:	f000 ff2a 	bl	8032914 <GetChNearRFM>
 8031ac0:	4603      	mov	r3, r0
 8031ac2:	4618      	mov	r0, r3
 8031ac4:	f000 ff68 	bl	8032998 <SetChPA>
		SetChPARFT( GetChNearRFT( 190 ) );	//	가까운 송신기 설정.
 8031ac8:	20be      	movs	r0, #190	; 0xbe
 8031aca:	f000 fedd 	bl	8032888 <GetChNearRFT>
 8031ace:	4603      	mov	r3, r0
 8031ad0:	4618      	mov	r0, r3
 8031ad2:	f000 ffa9 	bl	8032a28 <SetChPARFT>
		HAL_GPIO_WritePin ( LED_ON_A_GPIO_Port, LED_ON_A_Pin, GPIO_PIN_RESET ); //  Green LED
 8031ad6:	2200      	movs	r2, #0
 8031ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8031adc:	4809      	ldr	r0, [pc, #36]	; (8031b04 <KeyPtt+0xf0>)
 8031ade:	f7f1 fd1d 	bl	802351c <HAL_GPIO_WritePin>
		SendPA( 0 );		//	SendRF - Send PA ( 송신기 -> 수신기 )
 8031ae2:	2000      	movs	r0, #0
 8031ae4:	f7fc feb2 	bl	802e84c <SendPA>
}
 8031ae8:	bf00      	nop
 8031aea:	3724      	adds	r7, #36	; 0x24
 8031aec:	46bd      	mov	sp, r7
 8031aee:	bd90      	pop	{r4, r7, pc}
 8031af0:	08041620 	.word	0x08041620
 8031af4:	0803ab58 	.word	0x0803ab58
 8031af8:	20001f6c 	.word	0x20001f6c
 8031afc:	0803ab68 	.word	0x0803ab68
 8031b00:	0803ab7c 	.word	0x0803ab7c
 8031b04:	40020400 	.word	0x40020400

08031b08 <KeySos>:


//========================================================================
void KeySos( int bValue )
//========================================================================
{
 8031b08:	b590      	push	{r4, r7, lr}
 8031b0a:	b089      	sub	sp, #36	; 0x24
 8031b0c:	af00      	add	r7, sp, #0
 8031b0e:	6078      	str	r0, [r7, #4]
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 8031b10:	687b      	ldr	r3, [r7, #4]
 8031b12:	f240 1275 	movw	r2, #373	; 0x175
 8031b16:	492d      	ldr	r1, [pc, #180]	; (8031bcc <KeySos+0xc4>)
 8031b18:	482d      	ldr	r0, [pc, #180]	; (8031bd0 <KeySos+0xc8>)
 8031b1a:	f005 fcc1 	bl	80374a0 <iprintf>

	//	송신기 -> 송신기	:	통화

	if ( bValue )
 8031b1e:	687b      	ldr	r3, [r7, #4]
 8031b20:	2b00      	cmp	r3, #0
 8031b22:	d03a      	beq.n	8031b9a <KeySos+0x92>
	{
#if defined(USE_CH_ISO_DEV)
		SetChPARFT( GetChNearRFT( 190 ) );	//	가까운 송신기 설정.
 8031b24:	20be      	movs	r0, #190	; 0xbe
 8031b26:	f000 feaf 	bl	8032888 <GetChNearRFT>
 8031b2a:	4603      	mov	r3, r0
 8031b2c:	4618      	mov	r0, r3
 8031b2e:	f000 ff7b 	bl	8032a28 <SetChPARFT>

		SetChPA( GetChNearRFM() );		//	가장 가까운 수신기 설정.
 8031b32:	f000 feef 	bl	8032914 <GetChNearRFM>
 8031b36:	4603      	mov	r3, r0
 8031b38:	4618      	mov	r0, r3
 8031b3a:	f000 ff2d 	bl	8032998 <SetChPA>
#endif

#if defined( USE_AUDIO_ADPCM )	//	ADPCM 사용. - 1/4 압축
		ADPCM_ClearEncodeBuf();			//	인코딩 버퍼 Clear
 8031b3e:	f7fd fe7f 	bl	802f840 <ADPCM_ClearEncodeBuf>
		qBufClear( &g_qBufAudioTx );	//	Tx Buffer Clear
 8031b42:	4824      	ldr	r0, [pc, #144]	; (8031bd4 <KeySos+0xcc>)
 8031b44:	f7fc fb76 	bl	802e234 <qBufClear>
#endif

		//	송신중
		LCDSetCursor( 20, 13 );
 8031b48:	210d      	movs	r1, #13
 8031b4a:	2014      	movs	r0, #20
 8031b4c:	f7fa fee2 	bl	802c914 <LCDSetCursor>
		if ( IsMenuMaint() )
 8031b50:	f000 f876 	bl	8031c40 <IsMenuMaint>
 8031b54:	4603      	mov	r3, r0
 8031b56:	2b00      	cmp	r3, #0
 8031b58:	d015      	beq.n	8031b86 <KeySos+0x7e>
		{
			//	Maint Mode : 송신채널 표시.
			char sBuf[20];
			sprintf( sBuf, "통화중(%d/%d)", GetCh2Car(GetChPA()), GetChPA() );	//	Channel -> Car
 8031b5a:	f000 ff2d 	bl	80329b8 <GetChPA>
 8031b5e:	4603      	mov	r3, r0
 8031b60:	4618      	mov	r0, r3
 8031b62:	f000 ff35 	bl	80329d0 <GetCh2Car>
 8031b66:	4604      	mov	r4, r0
 8031b68:	f000 ff26 	bl	80329b8 <GetChPA>
 8031b6c:	4603      	mov	r3, r0
 8031b6e:	f107 000c 	add.w	r0, r7, #12
 8031b72:	4622      	mov	r2, r4
 8031b74:	4918      	ldr	r1, [pc, #96]	; (8031bd8 <KeySos+0xd0>)
 8031b76:	f005 fdbf 	bl	80376f8 <siprintf>
			LCDPrintf( sBuf );
 8031b7a:	f107 030c 	add.w	r3, r7, #12
 8031b7e:	4618      	mov	r0, r3
 8031b80:	f7fa fef8 	bl	802c974 <LCDPrintf>
 8031b84:	e002      	b.n	8031b8c <KeySos+0x84>
		}
		else
		{
			LCDPrintf( "통화중..." );
 8031b86:	4815      	ldr	r0, [pc, #84]	; (8031bdc <KeySos+0xd4>)
 8031b88:	f7fa fef4 	bl	802c974 <LCDPrintf>
		}

		SetRFMMode( RFMModeTx );
 8031b8c:	2001      	movs	r0, #1
 8031b8e:	f000 fdc7 	bl	8032720 <SetRFMMode>

		//	통화 - 시작
		SendCall( CtrlStart );		//	SendRF - Send Call ( 송신기 -> 송신기 )
 8031b92:	2001      	movs	r0, #1
 8031b94:	f7fc fe9a 	bl	802e8cc <SendCall>
		SetRFMMode( RFMModeNormal );

		//	통화 - 종료
		SendCall( CtrlStop );		//	SendRF - Send Call ( 송신기 -> 송신기 )
	}
}
 8031b98:	e014      	b.n	8031bc4 <KeySos+0xbc>
		SetChPARFT( GetChNearRFT( 190 ) );	//	가까운 송신기 설정.
 8031b9a:	20be      	movs	r0, #190	; 0xbe
 8031b9c:	f000 fe74 	bl	8032888 <GetChNearRFT>
 8031ba0:	4603      	mov	r3, r0
 8031ba2:	4618      	mov	r0, r3
 8031ba4:	f000 ff40 	bl	8032a28 <SetChPARFT>
		SetChPA( GetChNearRFM() );		//	가장 가까운 수신기 설정.
 8031ba8:	f000 feb4 	bl	8032914 <GetChNearRFM>
 8031bac:	4603      	mov	r3, r0
 8031bae:	4618      	mov	r0, r3
 8031bb0:	f000 fef2 	bl	8032998 <SetChPA>
		UpdateLCDMain();
 8031bb4:	f000 f884 	bl	8031cc0 <UpdateLCDMain>
		SetRFMMode( RFMModeNormal );
 8031bb8:	2000      	movs	r0, #0
 8031bba:	f000 fdb1 	bl	8032720 <SetRFMMode>
		SendCall( CtrlStop );		//	SendRF - Send Call ( 송신기 -> 송신기 )
 8031bbe:	2000      	movs	r0, #0
 8031bc0:	f7fc fe84 	bl	802e8cc <SendCall>
}
 8031bc4:	bf00      	nop
 8031bc6:	3724      	adds	r7, #36	; 0x24
 8031bc8:	46bd      	mov	sp, r7
 8031bca:	bd90      	pop	{r4, r7, pc}
 8031bcc:	08041628 	.word	0x08041628
 8031bd0:	0803ab58 	.word	0x0803ab58
 8031bd4:	20001f6c 	.word	0x20001f6c
 8031bd8:	0803ab8c 	.word	0x0803ab8c
 8031bdc:	0803aba0 	.word	0x0803aba0

08031be0 <KeyPwrOnOff>:
//========================================================================

//========================================================================
void	KeyPwrOnOff		( int bValue )
//========================================================================
{
 8031be0:	b580      	push	{r7, lr}
 8031be2:	b082      	sub	sp, #8
 8031be4:	af00      	add	r7, sp, #0
 8031be6:	6078      	str	r0, [r7, #4]
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 8031be8:	687b      	ldr	r3, [r7, #4]
 8031bea:	f240 12b7 	movw	r2, #439	; 0x1b7
 8031bee:	490f      	ldr	r1, [pc, #60]	; (8031c2c <KeyPwrOnOff+0x4c>)
 8031bf0:	480f      	ldr	r0, [pc, #60]	; (8031c30 <KeyPwrOnOff+0x50>)
 8031bf2:	f005 fc55 	bl	80374a0 <iprintf>

	static int bPowerOn = 0;

	if ( bValue )
 8031bf6:	687b      	ldr	r3, [r7, #4]
 8031bf8:	2b00      	cmp	r3, #0
 8031bfa:	d003      	beq.n	8031c04 <KeyPwrOnOff+0x24>
	{
		bPowerOn = 1;
 8031bfc:	4b0d      	ldr	r3, [pc, #52]	; (8031c34 <KeyPwrOnOff+0x54>)
 8031bfe:	2201      	movs	r2, #1
 8031c00:	601a      	str	r2, [r3, #0]
			printf( "%s(%d) - Power Off\n", __func__, __LINE__  );

			HAL_GPIO_WritePin( ON_OFF_EN_GPIO_Port, ON_OFF_EN_Pin, GPIO_PIN_RESET );
		}
	}
}
 8031c02:	e00f      	b.n	8031c24 <KeyPwrOnOff+0x44>
		if( bPowerOn )
 8031c04:	4b0b      	ldr	r3, [pc, #44]	; (8031c34 <KeyPwrOnOff+0x54>)
 8031c06:	681b      	ldr	r3, [r3, #0]
 8031c08:	2b00      	cmp	r3, #0
 8031c0a:	d00b      	beq.n	8031c24 <KeyPwrOnOff+0x44>
			printf( "%s(%d) - Power Off\n", __func__, __LINE__  );
 8031c0c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8031c10:	4906      	ldr	r1, [pc, #24]	; (8031c2c <KeyPwrOnOff+0x4c>)
 8031c12:	4809      	ldr	r0, [pc, #36]	; (8031c38 <KeyPwrOnOff+0x58>)
 8031c14:	f005 fc44 	bl	80374a0 <iprintf>
			HAL_GPIO_WritePin( ON_OFF_EN_GPIO_Port, ON_OFF_EN_Pin, GPIO_PIN_RESET );
 8031c18:	2200      	movs	r2, #0
 8031c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8031c1e:	4807      	ldr	r0, [pc, #28]	; (8031c3c <KeyPwrOnOff+0x5c>)
 8031c20:	f7f1 fc7c 	bl	802351c <HAL_GPIO_WritePin>
}
 8031c24:	bf00      	nop
 8031c26:	3708      	adds	r7, #8
 8031c28:	46bd      	mov	sp, r7
 8031c2a:	bd80      	pop	{r7, pc}
 8031c2c:	08041630 	.word	0x08041630
 8031c30:	0803ab58 	.word	0x0803ab58
 8031c34:	20002310 	.word	0x20002310
 8031c38:	0803abb0 	.word	0x0803abb0
 8031c3c:	40020c00 	.word	0x40020c00

08031c40 <IsMenuMaint>:

//========================================================================
int	g_bEnMenuMaint	= 	0;	//	MainMenu Maintenace Menu활성화.

int 	IsMenuMaint			( void )			//	MainMenu Maintenace Menu활성화.
{
 8031c40:	b480      	push	{r7}
 8031c42:	af00      	add	r7, sp, #0
	return g_bEnMenuMaint;
 8031c44:	4b03      	ldr	r3, [pc, #12]	; (8031c54 <IsMenuMaint+0x14>)
 8031c46:	681b      	ldr	r3, [r3, #0]
}
 8031c48:	4618      	mov	r0, r3
 8031c4a:	46bd      	mov	sp, r7
 8031c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031c50:	4770      	bx	lr
 8031c52:	bf00      	nop
 8031c54:	20002314 	.word	0x20002314

08031c58 <EnableMenuMaint>:

//========================================================================
void EnableMenuMaint( int bEnable )
//========================================================================
{
 8031c58:	b580      	push	{r7, lr}
 8031c5a:	b082      	sub	sp, #8
 8031c5c:	af00      	add	r7, sp, #0
 8031c5e:	6078      	str	r0, [r7, #4]
	g_bEnMenuMaint = bEnable;
 8031c60:	4a07      	ldr	r2, [pc, #28]	; (8031c80 <EnableMenuMaint+0x28>)
 8031c62:	687b      	ldr	r3, [r7, #4]
 8031c64:	6013      	str	r3, [r2, #0]

	if ( bEnable )
 8031c66:	687b      	ldr	r3, [r7, #4]
 8031c68:	2b00      	cmp	r3, #0
 8031c6a:	d004      	beq.n	8031c76 <EnableMenuMaint+0x1e>
	{
		//	LCD [Menu Maint.]
		LCDPrintfXY( 10, 13, "[Maint. Menu]" );
 8031c6c:	4a05      	ldr	r2, [pc, #20]	; (8031c84 <EnableMenuMaint+0x2c>)
 8031c6e:	210d      	movs	r1, #13
 8031c70:	200a      	movs	r0, #10
 8031c72:	f7fa feb1 	bl	802c9d8 <LCDPrintfXY>
	}
}
 8031c76:	bf00      	nop
 8031c78:	3708      	adds	r7, #8
 8031c7a:	46bd      	mov	sp, r7
 8031c7c:	bd80      	pop	{r7, pc}
 8031c7e:	bf00      	nop
 8031c80:	20002314 	.word	0x20002314
 8031c84:	0803afbc 	.word	0x0803afbc

08031c88 <SetActiveMenu>:
static int _bEnDispStat = 0;

//========================================================================
void	SetActiveMenu( Menu_t *pActiveMenu )
//========================================================================
{
 8031c88:	b480      	push	{r7}
 8031c8a:	b083      	sub	sp, #12
 8031c8c:	af00      	add	r7, sp, #0
 8031c8e:	6078      	str	r0, [r7, #4]
	g_pActiveMenu = pActiveMenu;
 8031c90:	4a04      	ldr	r2, [pc, #16]	; (8031ca4 <SetActiveMenu+0x1c>)
 8031c92:	687b      	ldr	r3, [r7, #4]
 8031c94:	6013      	str	r3, [r2, #0]
}
 8031c96:	bf00      	nop
 8031c98:	370c      	adds	r7, #12
 8031c9a:	46bd      	mov	sp, r7
 8031c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031ca0:	4770      	bx	lr
 8031ca2:	bf00      	nop
 8031ca4:	20002318 	.word	0x20002318

08031ca8 <GetActiveMenu>:

//========================================================================
Menu_t	*GetActiveMenu( void )
//========================================================================
{
 8031ca8:	b480      	push	{r7}
 8031caa:	af00      	add	r7, sp, #0
	return g_pActiveMenu;
 8031cac:	4b03      	ldr	r3, [pc, #12]	; (8031cbc <GetActiveMenu+0x14>)
 8031cae:	681b      	ldr	r3, [r3, #0]
}
 8031cb0:	4618      	mov	r0, r3
 8031cb2:	46bd      	mov	sp, r7
 8031cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031cb8:	4770      	bx	lr
 8031cba:	bf00      	nop
 8031cbc:	20002318 	.word	0x20002318

08031cc0 <UpdateLCDMain>:

//========================================================================
void	UpdateLCDMain( void )
//========================================================================
{
 8031cc0:	b580      	push	{r7, lr}
 8031cc2:	b088      	sub	sp, #32
 8031cc4:	af00      	add	r7, sp, #0
	char sBuf[30];

	sprintf( sBuf, "편성 : %d", 100 + g_idxTrainSet );
 8031cc6:	4b09      	ldr	r3, [pc, #36]	; (8031cec <UpdateLCDMain+0x2c>)
 8031cc8:	681b      	ldr	r3, [r3, #0]
 8031cca:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8031cce:	463b      	mov	r3, r7
 8031cd0:	4907      	ldr	r1, [pc, #28]	; (8031cf0 <UpdateLCDMain+0x30>)
 8031cd2:	4618      	mov	r0, r3
 8031cd4:	f005 fd10 	bl	80376f8 <siprintf>

//	LCDPrintf( "편성 : 100" );
	LCDPrintfXY( 20, 13, sBuf );
 8031cd8:	463b      	mov	r3, r7
 8031cda:	461a      	mov	r2, r3
 8031cdc:	210d      	movs	r1, #13
 8031cde:	2014      	movs	r0, #20
 8031ce0:	f7fa fe7a 	bl	802c9d8 <LCDPrintfXY>
}
 8031ce4:	bf00      	nop
 8031ce6:	3720      	adds	r7, #32
 8031ce8:	46bd      	mov	sp, r7
 8031cea:	bd80      	pop	{r7, pc}
 8031cec:	2000232c 	.word	0x2000232c
 8031cf0:	0803b05c 	.word	0x0803b05c

08031cf4 <UpdateLCDMenu>:

//========================================================================
void	UpdateLCDMenu( void )
//========================================================================
{
 8031cf4:	b580      	push	{r7, lr}
 8031cf6:	b084      	sub	sp, #16
 8031cf8:	af00      	add	r7, sp, #0
	if ( GetActiveMenu() == NULL )
 8031cfa:	f7ff ffd5 	bl	8031ca8 <GetActiveMenu>
 8031cfe:	4603      	mov	r3, r0
 8031d00:	2b00      	cmp	r3, #0
 8031d02:	d102      	bne.n	8031d0a <UpdateLCDMenu+0x16>
	{
		UpdateLCDMain();
 8031d04:	f7ff ffdc 	bl	8031cc0 <UpdateLCDMain>
		return;
 8031d08:	e01d      	b.n	8031d46 <UpdateLCDMenu+0x52>
	}

	char	**sMenu;
	int		*pIdxMenu, *pCntMenu;

	sMenu		=	g_pActiveMenu->sItem;
 8031d0a:	4b10      	ldr	r3, [pc, #64]	; (8031d4c <UpdateLCDMenu+0x58>)
 8031d0c:	681b      	ldr	r3, [r3, #0]
 8031d0e:	681b      	ldr	r3, [r3, #0]
 8031d10:	60fb      	str	r3, [r7, #12]
	pIdxMenu	=	&g_pActiveMenu->currIdx;
 8031d12:	4b0e      	ldr	r3, [pc, #56]	; (8031d4c <UpdateLCDMenu+0x58>)
 8031d14:	681b      	ldr	r3, [r3, #0]
 8031d16:	3308      	adds	r3, #8
 8031d18:	60bb      	str	r3, [r7, #8]
	pCntMenu	=	&g_pActiveMenu->cntItem;
 8031d1a:	4b0c      	ldr	r3, [pc, #48]	; (8031d4c <UpdateLCDMenu+0x58>)
 8031d1c:	681b      	ldr	r3, [r3, #0]
 8031d1e:	3304      	adds	r3, #4
 8031d20:	607b      	str	r3, [r7, #4]

	//  Main화면 Clear
	LCDClearMain();
 8031d22:	f7fa fe87 	bl	802ca34 <LCDClearMain>

#if defined(USE_RFT_MENU_LOOP)

	LCDMenuUpDown( 3 ); //  3. Up/Down
 8031d26:	2003      	movs	r0, #3
 8031d28:	f7fa fdb6 	bl	802c898 <LCDMenuUpDown>
	else if ( *pIdxMenu == *pCntMenu - 1 )				LCDMenuUpDown( 1 ); //  1. Up
	else												LCDMenuUpDown( 0 ); //  0. None

#endif

	LCDSetCursor( 20, 13 );
 8031d2c:	210d      	movs	r1, #13
 8031d2e:	2014      	movs	r0, #20
 8031d30:	f7fa fdf0 	bl	802c914 <LCDSetCursor>
	LCDPrintf( sMenu[*pIdxMenu] );
 8031d34:	68bb      	ldr	r3, [r7, #8]
 8031d36:	681b      	ldr	r3, [r3, #0]
 8031d38:	009b      	lsls	r3, r3, #2
 8031d3a:	68fa      	ldr	r2, [r7, #12]
 8031d3c:	4413      	add	r3, r2
 8031d3e:	681b      	ldr	r3, [r3, #0]
 8031d40:	4618      	mov	r0, r3
 8031d42:	f7fa fe17 	bl	802c974 <LCDPrintf>
}
 8031d46:	3710      	adds	r7, #16
 8031d48:	46bd      	mov	sp, r7
 8031d4a:	bd80      	pop	{r7, pc}
 8031d4c:	20002318 	.word	0x20002318

08031d50 <UpdateLCDMonitor>:

//========================================================================
void	UpdateLCDMonitor( int nTick )
//========================================================================
{
 8031d50:	b580      	push	{r7, lr}
 8031d52:	b09c      	sub	sp, #112	; 0x70
 8031d54:	af00      	add	r7, sp, #0
 8031d56:	6078      	str	r0, [r7, #4]
	static int oldTick = 0;

	if ( nTick - oldTick > 1000 )
 8031d58:	4b12      	ldr	r3, [pc, #72]	; (8031da4 <UpdateLCDMonitor+0x54>)
 8031d5a:	681b      	ldr	r3, [r3, #0]
 8031d5c:	687a      	ldr	r2, [r7, #4]
 8031d5e:	1ad3      	subs	r3, r2, r3
 8031d60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8031d64:	dd19      	ble.n	8031d9a <UpdateLCDMonitor+0x4a>
	{
		if( _bEnDispStat )
 8031d66:	4b10      	ldr	r3, [pc, #64]	; (8031da8 <UpdateLCDMonitor+0x58>)
 8031d68:	681b      	ldr	r3, [r3, #0]
 8031d6a:	2b00      	cmp	r3, #0
 8031d6c:	d012      	beq.n	8031d94 <UpdateLCDMonitor+0x44>
		{
			//	상태정보 현시.
			LCDSetCursor( 5, 13 );
 8031d6e:	210d      	movs	r1, #13
 8031d70:	2005      	movs	r0, #5
 8031d72:	f7fa fdcf 	bl	802c914 <LCDSetCursor>

			char sBuf[100];
			sprintf(sBuf, "Stat:%04X / %02d", g_flagRspID, g_nRSSI );
 8031d76:	4b0d      	ldr	r3, [pc, #52]	; (8031dac <UpdateLCDMonitor+0x5c>)
 8031d78:	881b      	ldrh	r3, [r3, #0]
 8031d7a:	461a      	mov	r2, r3
 8031d7c:	4b0c      	ldr	r3, [pc, #48]	; (8031db0 <UpdateLCDMonitor+0x60>)
 8031d7e:	681b      	ldr	r3, [r3, #0]
 8031d80:	f107 000c 	add.w	r0, r7, #12
 8031d84:	490b      	ldr	r1, [pc, #44]	; (8031db4 <UpdateLCDMonitor+0x64>)
 8031d86:	f005 fcb7 	bl	80376f8 <siprintf>
			LCDPrintf( sBuf );
 8031d8a:	f107 030c 	add.w	r3, r7, #12
 8031d8e:	4618      	mov	r0, r3
 8031d90:	f7fa fdf0 	bl	802c974 <LCDPrintf>
		}
		oldTick = nTick;
 8031d94:	4a03      	ldr	r2, [pc, #12]	; (8031da4 <UpdateLCDMonitor+0x54>)
 8031d96:	687b      	ldr	r3, [r7, #4]
 8031d98:	6013      	str	r3, [r2, #0]
	}
}
 8031d9a:	bf00      	nop
 8031d9c:	3770      	adds	r7, #112	; 0x70
 8031d9e:	46bd      	mov	sp, r7
 8031da0:	bd80      	pop	{r7, pc}
 8031da2:	bf00      	nop
 8031da4:	20002320 	.word	0x20002320
 8031da8:	2000231c 	.word	0x2000231c
 8031dac:	20001394 	.word	0x20001394
 8031db0:	20002340 	.word	0x20002340
 8031db4:	0803b068 	.word	0x0803b068

08031db8 <ProcBtnUp>:


//========================================================================
void	ProcBtnUp( void )
//========================================================================
{
 8031db8:	b580      	push	{r7, lr}
 8031dba:	af00      	add	r7, sp, #0
	if ( GetActiveMenu() == NULL ) return;
 8031dbc:	f7ff ff74 	bl	8031ca8 <GetActiveMenu>
 8031dc0:	4603      	mov	r3, r0
 8031dc2:	2b00      	cmp	r3, #0
 8031dc4:	d013      	beq.n	8031dee <ProcBtnUp+0x36>

	//	Menu : Up Key Press

	g_pActiveMenu->currIdx--;
 8031dc6:	4b0b      	ldr	r3, [pc, #44]	; (8031df4 <ProcBtnUp+0x3c>)
 8031dc8:	681b      	ldr	r3, [r3, #0]
 8031dca:	689a      	ldr	r2, [r3, #8]
 8031dcc:	3a01      	subs	r2, #1
 8031dce:	609a      	str	r2, [r3, #8]

	if ( g_pActiveMenu->currIdx < 0 )
 8031dd0:	4b08      	ldr	r3, [pc, #32]	; (8031df4 <ProcBtnUp+0x3c>)
 8031dd2:	681b      	ldr	r3, [r3, #0]
 8031dd4:	689b      	ldr	r3, [r3, #8]
 8031dd6:	2b00      	cmp	r3, #0
 8031dd8:	da06      	bge.n	8031de8 <ProcBtnUp+0x30>
	{
#if defined(USE_RFT_MENU_LOOP)

		//	Menu Up/Down Loop
		g_pActiveMenu->currIdx = g_pActiveMenu->cntItem  - 1;
 8031dda:	4b06      	ldr	r3, [pc, #24]	; (8031df4 <ProcBtnUp+0x3c>)
 8031ddc:	681b      	ldr	r3, [r3, #0]
 8031dde:	685a      	ldr	r2, [r3, #4]
 8031de0:	4b04      	ldr	r3, [pc, #16]	; (8031df4 <ProcBtnUp+0x3c>)
 8031de2:	681b      	ldr	r3, [r3, #0]
 8031de4:	3a01      	subs	r2, #1
 8031de6:	609a      	str	r2, [r3, #8]

#endif
	}


	UpdateLCDMenu();   //  메뉴화면 Update
 8031de8:	f7ff ff84 	bl	8031cf4 <UpdateLCDMenu>
 8031dec:	e000      	b.n	8031df0 <ProcBtnUp+0x38>
	if ( GetActiveMenu() == NULL ) return;
 8031dee:	bf00      	nop
}
 8031df0:	bd80      	pop	{r7, pc}
 8031df2:	bf00      	nop
 8031df4:	20002318 	.word	0x20002318

08031df8 <ProcBtnDown>:

//========================================================================
void	ProcBtnDown( void )
//========================================================================
{
 8031df8:	b580      	push	{r7, lr}
 8031dfa:	af00      	add	r7, sp, #0
	if ( GetActiveMenu() == NULL ) return;
 8031dfc:	f7ff ff54 	bl	8031ca8 <GetActiveMenu>
 8031e00:	4603      	mov	r3, r0
 8031e02:	2b00      	cmp	r3, #0
 8031e04:	d013      	beq.n	8031e2e <ProcBtnDown+0x36>

	//	Menu : Down Key Press
	g_pActiveMenu->currIdx++;
 8031e06:	4b0b      	ldr	r3, [pc, #44]	; (8031e34 <ProcBtnDown+0x3c>)
 8031e08:	681b      	ldr	r3, [r3, #0]
 8031e0a:	689a      	ldr	r2, [r3, #8]
 8031e0c:	3201      	adds	r2, #1
 8031e0e:	609a      	str	r2, [r3, #8]

	if ( g_pActiveMenu->currIdx >= g_pActiveMenu->cntItem )
 8031e10:	4b08      	ldr	r3, [pc, #32]	; (8031e34 <ProcBtnDown+0x3c>)
 8031e12:	681b      	ldr	r3, [r3, #0]
 8031e14:	689a      	ldr	r2, [r3, #8]
 8031e16:	4b07      	ldr	r3, [pc, #28]	; (8031e34 <ProcBtnDown+0x3c>)
 8031e18:	681b      	ldr	r3, [r3, #0]
 8031e1a:	685b      	ldr	r3, [r3, #4]
 8031e1c:	429a      	cmp	r2, r3
 8031e1e:	db03      	blt.n	8031e28 <ProcBtnDown+0x30>
	{
#if defined(USE_RFT_MENU_LOOP)

		//	Menu Up/Down Loop
		g_pActiveMenu->currIdx = 0;
 8031e20:	4b04      	ldr	r3, [pc, #16]	; (8031e34 <ProcBtnDown+0x3c>)
 8031e22:	681b      	ldr	r3, [r3, #0]
 8031e24:	2200      	movs	r2, #0
 8031e26:	609a      	str	r2, [r3, #8]
		g_pActiveMenu->currIdx = g_pActiveMenu->cntItem  - 1;

#endif
	}

	UpdateLCDMenu();   //  메뉴화면 Update
 8031e28:	f7ff ff64 	bl	8031cf4 <UpdateLCDMenu>
 8031e2c:	e000      	b.n	8031e30 <ProcBtnDown+0x38>
	if ( GetActiveMenu() == NULL ) return;
 8031e2e:	bf00      	nop
}
 8031e30:	bd80      	pop	{r7, pc}
 8031e32:	bf00      	nop
 8031e34:	20002318 	.word	0x20002318

08031e38 <ProcBtnMenu>:

//========================================================================
void	ProcBtnMenu( void )
//========================================================================
{
 8031e38:	b580      	push	{r7, lr}
 8031e3a:	af00      	add	r7, sp, #0
	//	Menu

	if ( GetActiveMenu() == NULL )
 8031e3c:	f7ff ff34 	bl	8031ca8 <GetActiveMenu>
 8031e40:	4603      	mov	r3, r0
 8031e42:	2b00      	cmp	r3, #0
 8031e44:	d110      	bne.n	8031e68 <ProcBtnMenu+0x30>
	{
		//  메뉴모드가 아닌경우 메뉴로 진입.

		//	Set Main Menu

		if ( g_bEnMenuMaint )
 8031e46:	4b0c      	ldr	r3, [pc, #48]	; (8031e78 <ProcBtnMenu+0x40>)
 8031e48:	681b      	ldr	r3, [r3, #0]
 8031e4a:	2b00      	cmp	r3, #0
 8031e4c:	d003      	beq.n	8031e56 <ProcBtnMenu+0x1e>
		{
			//	Maintenance 유지보수 메뉴 활성화.
			SetActiveMenu( &g_MenuMainMaint );
 8031e4e:	480b      	ldr	r0, [pc, #44]	; (8031e7c <ProcBtnMenu+0x44>)
 8031e50:	f7ff ff1a 	bl	8031c88 <SetActiveMenu>
 8031e54:	e002      	b.n	8031e5c <ProcBtnMenu+0x24>
		}
		else
		{
			//	Base 기본메뉴.
			SetActiveMenu( &g_MenuMainBase );
 8031e56:	480a      	ldr	r0, [pc, #40]	; (8031e80 <ProcBtnMenu+0x48>)
 8031e58:	f7ff ff16 	bl	8031c88 <SetActiveMenu>
		}
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8031e5c:	f7ff ff24 	bl	8031ca8 <GetActiveMenu>
 8031e60:	4603      	mov	r3, r0
 8031e62:	2200      	movs	r2, #0
 8031e64:	609a      	str	r2, [r3, #8]
 8031e66:	e002      	b.n	8031e6e <ProcBtnMenu+0x36>
	else
	{
		//  메뉴 진입상태 -> 메인화면으로 이동.

		//	Set Main Menu
		SetActiveMenu( NULL );
 8031e68:	2000      	movs	r0, #0
 8031e6a:	f7ff ff0d 	bl	8031c88 <SetActiveMenu>
	}

	UpdateLCDMenu();	//	메뉴화면 Update
 8031e6e:	f7ff ff41 	bl	8031cf4 <UpdateLCDMenu>
}
 8031e72:	bf00      	nop
 8031e74:	bd80      	pop	{r7, pc}
 8031e76:	bf00      	nop
 8031e78:	20002314 	.word	0x20002314
 8031e7c:	20000bd8 	.word	0x20000bd8
 8031e80:	20000ba4 	.word	0x20000ba4

08031e84 <ProcLightOn>:

//========================================================================
void	ProcLightOn ( void )
//========================================================================
{
 8031e84:	b580      	push	{r7, lr}
 8031e86:	af00      	add	r7, sp, #0
	LCDSetCursor( 20, 13 );
 8031e88:	210d      	movs	r1, #13
 8031e8a:	2014      	movs	r0, #20
 8031e8c:	f7fa fd42 	bl	802c914 <LCDSetCursor>
	LCDPrintf( "[조명 점등]" );
 8031e90:	480d      	ldr	r0, [pc, #52]	; (8031ec8 <ProcLightOn+0x44>)
 8031e92:	f7fa fd6f 	bl	802c974 <LCDPrintf>

	//========================================================================
	//	숭신기와 가까운 수신기 설정.
	SetChPA( GetChNearRFM() );
 8031e96:	f000 fd3d 	bl	8032914 <GetChNearRFM>
 8031e9a:	4603      	mov	r3, r0
 8031e9c:	4618      	mov	r0, r3
 8031e9e:	f000 fd7b 	bl	8032998 <SetChPA>
	//========================================================================

	SendLightOn();	 //  조명On 명령 전송.
 8031ea2:	f7fc fd83 	bl	802e9ac <SendLightOn>
	HAL_Delay( 200 );
 8031ea6:	20c8      	movs	r0, #200	; 0xc8
 8031ea8:	f7ef fe6a 	bl	8021b80 <HAL_Delay>
	SendLightOn();	 //  조명On 명령 전송.
 8031eac:	f7fc fd7e 	bl	802e9ac <SendLightOn>
	HAL_Delay( 200 );
 8031eb0:	20c8      	movs	r0, #200	; 0xc8
 8031eb2:	f7ef fe65 	bl	8021b80 <HAL_Delay>
	SendLightOn();	 //  조명On 명령 전송.
 8031eb6:	f7fc fd79 	bl	802e9ac <SendLightOn>
	HAL_Delay( 200 );
 8031eba:	20c8      	movs	r0, #200	; 0xc8
 8031ebc:	f7ef fe60 	bl	8021b80 <HAL_Delay>
	SendLightOn();	 //  조명On 명령 전송.
 8031ec0:	f7fc fd74 	bl	802e9ac <SendLightOn>

#if defined(USE_STAT_LIGHT)
	g_nDevFlag |= DevFlagLight;
#endif
}
 8031ec4:	bf00      	nop
 8031ec6:	bd80      	pop	{r7, pc}
 8031ec8:	0803b07c 	.word	0x0803b07c

08031ecc <ProcLightOff>:

//========================================================================
void	ProcLightOff ( void )
//========================================================================
{
 8031ecc:	b580      	push	{r7, lr}
 8031ece:	af00      	add	r7, sp, #0
	LCDSetCursor( 20, 13 );
 8031ed0:	210d      	movs	r1, #13
 8031ed2:	2014      	movs	r0, #20
 8031ed4:	f7fa fd1e 	bl	802c914 <LCDSetCursor>
	LCDPrintf( "[조명 소등]" );
 8031ed8:	480d      	ldr	r0, [pc, #52]	; (8031f10 <ProcLightOff+0x44>)
 8031eda:	f7fa fd4b 	bl	802c974 <LCDPrintf>

	//========================================================================
	//	숭신기와 가까운 수신기 설정.
	SetChPA( GetChNearRFM() );
 8031ede:	f000 fd19 	bl	8032914 <GetChNearRFM>
 8031ee2:	4603      	mov	r3, r0
 8031ee4:	4618      	mov	r0, r3
 8031ee6:	f000 fd57 	bl	8032998 <SetChPA>
	//========================================================================

	SendLightOff();	 //  조명Off 명령 전송.
 8031eea:	f7fc fd66 	bl	802e9ba <SendLightOff>
	HAL_Delay( 200 );
 8031eee:	20c8      	movs	r0, #200	; 0xc8
 8031ef0:	f7ef fe46 	bl	8021b80 <HAL_Delay>
	SendLightOff();	 //  조명Off 명령 전송.
 8031ef4:	f7fc fd61 	bl	802e9ba <SendLightOff>
	HAL_Delay( 200 );
 8031ef8:	20c8      	movs	r0, #200	; 0xc8
 8031efa:	f7ef fe41 	bl	8021b80 <HAL_Delay>
	SendLightOff();	 //  조명Off 명령 전송.
 8031efe:	f7fc fd5c 	bl	802e9ba <SendLightOff>
	HAL_Delay( 200 );
 8031f02:	20c8      	movs	r0, #200	; 0xc8
 8031f04:	f7ef fe3c 	bl	8021b80 <HAL_Delay>
	SendLightOff();	 //  조명Off 명령 전송.
 8031f08:	f7fc fd57 	bl	802e9ba <SendLightOff>

#if defined(USE_STAT_LIGHT)
	g_nDevFlag &= ~(DevFlagLight);
#endif
}
 8031f0c:	bf00      	nop
 8031f0e:	bd80      	pop	{r7, pc}
 8031f10:	0803b08c 	.word	0x0803b08c

08031f14 <ProcDispVer>:

//========================================================================
void	ProcDispVer ( void )
//========================================================================
{
 8031f14:	b580      	push	{r7, lr}
 8031f16:	af00      	add	r7, sp, #0
	//  S/W 버전
	LCDSetCursor( 5, 13 );
 8031f18:	210d      	movs	r1, #13
 8031f1a:	2005      	movs	r0, #5
 8031f1c:	f7fa fcfa 	bl	802c914 <LCDSetCursor>
	LCDPrintf( "RFM v" APP_VER );
 8031f20:	4802      	ldr	r0, [pc, #8]	; (8031f2c <ProcDispVer+0x18>)
 8031f22:	f7fa fd27 	bl	802c974 <LCDPrintf>
}
 8031f26:	bf00      	nop
 8031f28:	bd80      	pop	{r7, pc}
 8031f2a:	bf00      	nop
 8031f2c:	0803b09c 	.word	0x0803b09c

08031f30 <ProcDispStat>:

//========================================================================
void	ProcDispStat ( void )
//========================================================================
{
 8031f30:	b480      	push	{r7}
 8031f32:	af00      	add	r7, sp, #0
	//========================================================================
	//	Display Status Enable
	_bEnDispStat		=	1;
 8031f34:	4b03      	ldr	r3, [pc, #12]	; (8031f44 <ProcDispStat+0x14>)
 8031f36:	2201      	movs	r2, #1
 8031f38:	601a      	str	r2, [r3, #0]
}
 8031f3a:	bf00      	nop
 8031f3c:	46bd      	mov	sp, r7
 8031f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031f42:	4770      	bx	lr
 8031f44:	2000231c 	.word	0x2000231c

08031f48 <ProcMenuTrainSet>:

//========================================================================
void	ProcMenuTrainSet( int idxItem  )
//========================================================================
{
 8031f48:	b580      	push	{r7, lr}
 8031f4a:	b082      	sub	sp, #8
 8031f4c:	af00      	add	r7, sp, #0
 8031f4e:	6078      	str	r0, [r7, #4]
	LCDSetCursor( 20, 13 );
 8031f50:	210d      	movs	r1, #13
 8031f52:	2014      	movs	r0, #20
 8031f54:	f7fa fcde 	bl	802c914 <LCDSetCursor>
	LCDPrintf( "[편성설정]" );
 8031f58:	480b      	ldr	r0, [pc, #44]	; (8031f88 <ProcMenuTrainSet+0x40>)
 8031f5a:	f7fa fd0b 	bl	802c974 <LCDPrintf>
	g_idxTrainSet = idxItem;	//	메뉴 Index값으로 설정.
 8031f5e:	4a0b      	ldr	r2, [pc, #44]	; (8031f8c <ProcMenuTrainSet+0x44>)
 8031f60:	687b      	ldr	r3, [r7, #4]
 8031f62:	6013      	str	r3, [r2, #0]
	SetTrainSetIdx( g_idxTrainSet );
 8031f64:	4b09      	ldr	r3, [pc, #36]	; (8031f8c <ProcMenuTrainSet+0x44>)
 8031f66:	681b      	ldr	r3, [r3, #0]
 8031f68:	4618      	mov	r0, r3
 8031f6a:	f000 fe1b 	bl	8032ba4 <SetTrainSetIdx>
	//  Radio Channel 설정.
	pRadioConfiguration->Radio_ChannelNumber = g_idxTrainSet;
#endif

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 8031f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8031f72:	f7ef fe05 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 8031f76:	f7ff fea3 	bl	8031cc0 <UpdateLCDMain>

	//  메뉴 Exit
	SetActiveMenu( NULL );
 8031f7a:	2000      	movs	r0, #0
 8031f7c:	f7ff fe84 	bl	8031c88 <SetActiveMenu>
}
 8031f80:	bf00      	nop
 8031f82:	3708      	adds	r7, #8
 8031f84:	46bd      	mov	sp, r7
 8031f86:	bd80      	pop	{r7, pc}
 8031f88:	0803b0ac 	.word	0x0803b0ac
 8031f8c:	2000232c 	.word	0x2000232c

08031f90 <ProcMenuVer>:


//========================================================================
void	ProcMenuVer( int idxItem  )
//========================================================================
{
 8031f90:	b580      	push	{r7, lr}
 8031f92:	b082      	sub	sp, #8
 8031f94:	af00      	add	r7, sp, #0
 8031f96:	6078      	str	r0, [r7, #4]
	//	Upgrade Ok / Cancel

	//  메뉴 Exit
	SetActiveMenu( NULL );
 8031f98:	2000      	movs	r0, #0
 8031f9a:	f7ff fe75 	bl	8031c88 <SetActiveMenu>

	//	메인화면 갱신.
	UpdateLCDMain();
 8031f9e:	f7ff fe8f 	bl	8031cc0 <UpdateLCDMain>
}
 8031fa2:	bf00      	nop
 8031fa4:	3708      	adds	r7, #8
 8031fa6:	46bd      	mov	sp, r7
 8031fa8:	bd80      	pop	{r7, pc}
	...

08031fac <ProcMenuCmd>:


//========================================================================
void	ProcMenuCmd( int idxItem  )
//========================================================================
{
 8031fac:	b580      	push	{r7, lr}
 8031fae:	b082      	sub	sp, #8
 8031fb0:	af00      	add	r7, sp, #0
 8031fb2:	6078      	str	r0, [r7, #4]
	//	하위매뉴진입 : 편성 / 호차 설정.
	switch ( idxItem )
 8031fb4:	687b      	ldr	r3, [r7, #4]
 8031fb6:	2b03      	cmp	r3, #3
 8031fb8:	d01f      	beq.n	8031ffa <ProcMenuCmd+0x4e>
 8031fba:	687b      	ldr	r3, [r7, #4]
 8031fbc:	2b03      	cmp	r3, #3
 8031fbe:	dc27      	bgt.n	8032010 <ProcMenuCmd+0x64>
 8031fc0:	687b      	ldr	r3, [r7, #4]
 8031fc2:	2b01      	cmp	r3, #1
 8031fc4:	d003      	beq.n	8031fce <ProcMenuCmd+0x22>
 8031fc6:	687b      	ldr	r3, [r7, #4]
 8031fc8:	2b02      	cmp	r3, #2
 8031fca:	d00b      	beq.n	8031fe4 <ProcMenuCmd+0x38>
 8031fcc:	e020      	b.n	8032010 <ProcMenuCmd+0x64>
	{
	case 1:		//	Train Set
		SetActiveMenu( &g_MenuSetCmdTSList );
 8031fce:	4826      	ldr	r0, [pc, #152]	; (8032068 <ProcMenuCmd+0xbc>)
 8031fd0:	f7ff fe5a 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8031fd4:	f7ff fe68 	bl	8031ca8 <GetActiveMenu>
 8031fd8:	4603      	mov	r3, r0
 8031fda:	2200      	movs	r2, #0
 8031fdc:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8031fde:	f7ff fe89 	bl	8031cf4 <UpdateLCDMenu>
		return;
 8031fe2:	e03d      	b.n	8032060 <ProcMenuCmd+0xb4>
	case 2:		//	Car Set
		SetActiveMenu( &g_MenuSetCmdCarList );
 8031fe4:	4821      	ldr	r0, [pc, #132]	; (803206c <ProcMenuCmd+0xc0>)
 8031fe6:	f7ff fe4f 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8031fea:	f7ff fe5d 	bl	8031ca8 <GetActiveMenu>
 8031fee:	4603      	mov	r3, r0
 8031ff0:	2200      	movs	r2, #0
 8031ff2:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8031ff4:	f7ff fe7e 	bl	8031cf4 <UpdateLCDMenu>
		return;
 8031ff8:	e032      	b.n	8032060 <ProcMenuCmd+0xb4>
	case 3:		//	RFMode Set
		SetActiveMenu( &g_MenuSetCmdRFModeList );
 8031ffa:	481d      	ldr	r0, [pc, #116]	; (8032070 <ProcMenuCmd+0xc4>)
 8031ffc:	f7ff fe44 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8032000:	f7ff fe52 	bl	8031ca8 <GetActiveMenu>
 8032004:	4603      	mov	r3, r0
 8032006:	2200      	movs	r2, #0
 8032008:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 803200a:	f7ff fe73 	bl	8031cf4 <UpdateLCDMenu>
		return;
 803200e:	e027      	b.n	8032060 <ProcMenuCmd+0xb4>
	}

	LCDSetCursor( 20, 13 );
 8032010:	210d      	movs	r1, #13
 8032012:	2014      	movs	r0, #20
 8032014:	f7fa fc7e 	bl	802c914 <LCDSetCursor>
	LCDPrintf( "[명령전송]" );
 8032018:	4816      	ldr	r0, [pc, #88]	; (8032074 <ProcMenuCmd+0xc8>)
 803201a:	f7fa fcab 	bl	802c974 <LCDPrintf>

	switch( idxItem )
 803201e:	687b      	ldr	r3, [r7, #4]
 8032020:	2b05      	cmp	r3, #5
 8032022:	d010      	beq.n	8032046 <ProcMenuCmd+0x9a>
 8032024:	687b      	ldr	r3, [r7, #4]
 8032026:	2b05      	cmp	r3, #5
 8032028:	dc11      	bgt.n	803204e <ProcMenuCmd+0xa2>
 803202a:	687b      	ldr	r3, [r7, #4]
 803202c:	2b00      	cmp	r3, #0
 803202e:	d003      	beq.n	8032038 <ProcMenuCmd+0x8c>
 8032030:	687b      	ldr	r3, [r7, #4]
 8032032:	2b04      	cmp	r3, #4
 8032034:	d003      	beq.n	803203e <ProcMenuCmd+0x92>
 8032036:	e00a      	b.n	803204e <ProcMenuCmd+0xa2>
	{
	case 0:		SendRFCmdReset();		break;		//	Reset 명령.
 8032038:	f7fc fd16 	bl	802ea68 <SendRFCmdReset>
 803203c:	e007      	b.n	803204e <ProcMenuCmd+0xa2>
//DEL	case 1:		SendRFCmdDFUMode();		break;		//	DFU Mode 명령.
	case 4:		SendRFCmdUpgrade(1);	break;		//	Upgrade(Re-Try 명령.
 803203e:	2001      	movs	r0, #1
 8032040:	f7fc fd9c 	bl	802eb7c <SendRFCmdUpgrade>
 8032044:	e003      	b.n	803204e <ProcMenuCmd+0xa2>
	case 5:		SendRFCmdUpgrade(0);	break;		//	Upgrade 명령.
 8032046:	2000      	movs	r0, #0
 8032048:	f7fc fd98 	bl	802eb7c <SendRFCmdUpgrade>
 803204c:	bf00      	nop
	}

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 803204e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8032052:	f7ef fd95 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 8032056:	f7ff fe33 	bl	8031cc0 <UpdateLCDMain>

	//  메뉴 Exit
	SetActiveMenu( NULL );
 803205a:	2000      	movs	r0, #0
 803205c:	f7ff fe14 	bl	8031c88 <SetActiveMenu>
}
 8032060:	3708      	adds	r7, #8
 8032062:	46bd      	mov	sp, r7
 8032064:	bd80      	pop	{r7, pc}
 8032066:	bf00      	nop
 8032068:	20000b74 	.word	0x20000b74
 803206c:	20000b64 	.word	0x20000b64
 8032070:	20000b8c 	.word	0x20000b8c
 8032074:	0803b0bc 	.word	0x0803b0bc

08032078 <ProcMenuSetCmdTS>:


//========================================================================
void	ProcMenuSetCmdTS( int idxItem  )
//========================================================================
{
 8032078:	b580      	push	{r7, lr}
 803207a:	b082      	sub	sp, #8
 803207c:	af00      	add	r7, sp, #0
 803207e:	6078      	str	r0, [r7, #4]
	LCDSetCursor( 20, 13 );
 8032080:	210d      	movs	r1, #13
 8032082:	2014      	movs	r0, #20
 8032084:	f7fa fc46 	bl	802c914 <LCDSetCursor>
	LCDPrintf( "[명령전송]" );
 8032088:	4809      	ldr	r0, [pc, #36]	; (80320b0 <ProcMenuSetCmdTS+0x38>)
 803208a:	f7fa fc73 	bl	802c974 <LCDPrintf>

	SendRFCmdTS(idxItem);		//	편성설정.
 803208e:	6878      	ldr	r0, [r7, #4]
 8032090:	f7fc fd30 	bl	802eaf4 <SendRFCmdTS>

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 8032094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8032098:	f7ef fd72 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 803209c:	f7ff fe10 	bl	8031cc0 <UpdateLCDMain>

	//  메뉴 Exit
	SetActiveMenu( NULL );
 80320a0:	2000      	movs	r0, #0
 80320a2:	f7ff fdf1 	bl	8031c88 <SetActiveMenu>
}
 80320a6:	bf00      	nop
 80320a8:	3708      	adds	r7, #8
 80320aa:	46bd      	mov	sp, r7
 80320ac:	bd80      	pop	{r7, pc}
 80320ae:	bf00      	nop
 80320b0:	0803b0bc 	.word	0x0803b0bc

080320b4 <ProcMenuSetCmdCar>:

//========================================================================
void	ProcMenuSetCmdCar( int idxItem  )
//========================================================================
{
 80320b4:	b580      	push	{r7, lr}
 80320b6:	b082      	sub	sp, #8
 80320b8:	af00      	add	r7, sp, #0
 80320ba:	6078      	str	r0, [r7, #4]
	LCDSetCursor( 20, 13 );
 80320bc:	210d      	movs	r1, #13
 80320be:	2014      	movs	r0, #20
 80320c0:	f7fa fc28 	bl	802c914 <LCDSetCursor>
	LCDPrintf( "[명령전송]" );
 80320c4:	480a      	ldr	r0, [pc, #40]	; (80320f0 <ProcMenuSetCmdCar+0x3c>)
 80320c6:	f7fa fc55 	bl	802c974 <LCDPrintf>

	SendRFCmdCar(idxItem + 1);		//	호차설정.
 80320ca:	687b      	ldr	r3, [r7, #4]
 80320cc:	3301      	adds	r3, #1
 80320ce:	4618      	mov	r0, r3
 80320d0:	f7fc fcee 	bl	802eab0 <SendRFCmdCar>

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 80320d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80320d8:	f7ef fd52 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 80320dc:	f7ff fdf0 	bl	8031cc0 <UpdateLCDMain>

	//  메뉴 Exit
	SetActiveMenu( NULL );
 80320e0:	2000      	movs	r0, #0
 80320e2:	f7ff fdd1 	bl	8031c88 <SetActiveMenu>
}
 80320e6:	bf00      	nop
 80320e8:	3708      	adds	r7, #8
 80320ea:	46bd      	mov	sp, r7
 80320ec:	bd80      	pop	{r7, pc}
 80320ee:	bf00      	nop
 80320f0:	0803b0bc 	.word	0x0803b0bc

080320f4 <ProcMenuSetCmdRFMode>:

//========================================================================
void	ProcMenuSetCmdRFMode( int idxItem  )
//========================================================================
{
 80320f4:	b580      	push	{r7, lr}
 80320f6:	b082      	sub	sp, #8
 80320f8:	af00      	add	r7, sp, #0
 80320fa:	6078      	str	r0, [r7, #4]
	LCDSetCursor( 20, 13 );
 80320fc:	210d      	movs	r1, #13
 80320fe:	2014      	movs	r0, #20
 8032100:	f7fa fc08 	bl	802c914 <LCDSetCursor>
	LCDPrintf( "[명령전송]" );
 8032104:	480c      	ldr	r0, [pc, #48]	; (8032138 <ProcMenuSetCmdRFMode+0x44>)
 8032106:	f7fa fc35 	bl	802c974 <LCDPrintf>

	SendRFCmdRFMode(idxItem + 1);		//	RF Mode 설정.
 803210a:	687b      	ldr	r3, [r7, #4]
 803210c:	3301      	adds	r3, #1
 803210e:	4618      	mov	r0, r3
 8032110:	f7fc fd12 	bl	802eb38 <SendRFCmdRFMode>

	HAL_Delay( 100 );	//	100 msec
 8032114:	2064      	movs	r0, #100	; 0x64
 8032116:	f7ef fd33 	bl	8021b80 <HAL_Delay>

	//	RF Mode 설정 후 Reset 명령
	SendRFCmdReset();
 803211a:	f7fc fca5 	bl	802ea68 <SendRFCmdReset>

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 803211e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8032122:	f7ef fd2d 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 8032126:	f7ff fdcb 	bl	8031cc0 <UpdateLCDMain>

	//  메뉴 Exit
	SetActiveMenu( NULL );
 803212a:	2000      	movs	r0, #0
 803212c:	f7ff fdac 	bl	8031c88 <SetActiveMenu>
}
 8032130:	bf00      	nop
 8032132:	3708      	adds	r7, #8
 8032134:	46bd      	mov	sp, r7
 8032136:	bd80      	pop	{r7, pc}
 8032138:	0803b0bc 	.word	0x0803b0bc

0803213c <ProcMenuMain>:


//========================================================================
void 	ProcMenuMain( int idxItem )
//========================================================================
{
 803213c:	b590      	push	{r4, r7, lr}
 803213e:	b083      	sub	sp, #12
 8032140:	af00      	add	r7, sp, #0
 8032142:	6078      	str	r0, [r7, #4]
	switch ( idxItem )
 8032144:	687b      	ldr	r3, [r7, #4]
 8032146:	2b08      	cmp	r3, #8
 8032148:	f200 8086 	bhi.w	8032258 <ProcMenuMain+0x11c>
 803214c:	a201      	add	r2, pc, #4	; (adr r2, 8032154 <ProcMenuMain+0x18>)
 803214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032152:	bf00      	nop
 8032154:	08032179 	.word	0x08032179
 8032158:	0803218f 	.word	0x0803218f
 803215c:	080321b7 	.word	0x080321b7
 8032160:	080321cf 	.word	0x080321cf
 8032164:	080321f5 	.word	0x080321f5
 8032168:	0803220b 	.word	0x0803220b
 803216c:	08032221 	.word	0x08032221
 8032170:	08032237 	.word	0x08032237
 8032174:	08032243 	.word	0x08032243
	{
	case eMenuIdxCtlLight:	//	0:		 //  조명제어
		//	Menu

		SetActiveMenu( &g_MenuLightCtrl );
 8032178:	4839      	ldr	r0, [pc, #228]	; (8032260 <ProcMenuMain+0x124>)
 803217a:	f7ff fd85 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 803217e:	f7ff fd93 	bl	8031ca8 <GetActiveMenu>
 8032182:	4603      	mov	r3, r0
 8032184:	2200      	movs	r2, #0
 8032186:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8032188:	f7ff fdb4 	bl	8031cf4 <UpdateLCDMenu>

		break;
 803218c:	e064      	b.n	8032258 <ProcMenuMain+0x11c>
	case eMenuIdxSWVer:		//	1:		 //  S/W 버전
		//  메뉴 Exit

#if defined(USE_RFT_MENU_DEV_VER)

		if ( IsMenuMaint() )
 803218e:	f7ff fd57 	bl	8031c40 <IsMenuMaint>
 8032192:	4603      	mov	r3, r0
 8032194:	2b00      	cmp	r3, #0
 8032196:	d008      	beq.n	80321aa <ProcMenuMain+0x6e>
		{
			SetActiveMenu( &g_MenuVerList );	//	버전 List 현시.
 8032198:	4832      	ldr	r0, [pc, #200]	; (8032264 <ProcMenuMain+0x128>)
 803219a:	f7ff fd75 	bl	8031c88 <SetActiveMenu>
			GetActiveMenu()->currIdx = 0;		//	메뉴 Index초기화.
 803219e:	f7ff fd83 	bl	8031ca8 <GetActiveMenu>
 80321a2:	4603      	mov	r3, r0
 80321a4:	2200      	movs	r2, #0
 80321a6:	609a      	str	r2, [r3, #8]
 80321a8:	e002      	b.n	80321b0 <ProcMenuMain+0x74>
		}
		else
		{
			SetActiveMenu( NULL );
 80321aa:	2000      	movs	r0, #0
 80321ac:	f7ff fd6c 	bl	8031c88 <SetActiveMenu>
		}

		ProcDispVer();
 80321b0:	f7ff feb0 	bl	8031f14 <ProcDispVer>
#else
		SetActiveMenu( NULL );
		ProcDispVer();
#endif

		break;
 80321b4:	e050      	b.n	8032258 <ProcMenuMain+0x11c>

	case eMenuIdxTrainSet:	//	2:		 //  편성설정.

		SetActiveMenu( &g_MenuTrainSet );
 80321b6:	482c      	ldr	r0, [pc, #176]	; (8032268 <ProcMenuMain+0x12c>)
 80321b8:	f7ff fd66 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = g_idxTrainSet;	//	메뉴 Index초기화.
 80321bc:	f7ff fd74 	bl	8031ca8 <GetActiveMenu>
 80321c0:	4602      	mov	r2, r0
 80321c2:	4b2a      	ldr	r3, [pc, #168]	; (803226c <ProcMenuMain+0x130>)
 80321c4:	681b      	ldr	r3, [r3, #0]
 80321c6:	6093      	str	r3, [r2, #8]

		UpdateLCDMenu();
 80321c8:	f7ff fd94 	bl	8031cf4 <UpdateLCDMenu>
		break;
 80321cc:	e044      	b.n	8032258 <ProcMenuMain+0x11c>

#if defined(USE_RFT_MENU_RFTID)

	case eMenuIdxRFTID:		//	3:		 //  송신기 ID

		SetActiveMenu( &g_MenuRFTIDList );
 80321ce:	4828      	ldr	r0, [pc, #160]	; (8032270 <ProcMenuMain+0x134>)
 80321d0:	f7ff fd5a 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = ( ( GetCarNo() + 1 ) % 2 );	//	메뉴 Index초기화.
 80321d4:	f000 fe42 	bl	8032e5c <GetCarNo>
 80321d8:	4603      	mov	r3, r0
 80321da:	1c5c      	adds	r4, r3, #1
 80321dc:	f7ff fd64 	bl	8031ca8 <GetActiveMenu>
 80321e0:	4602      	mov	r2, r0
 80321e2:	2c00      	cmp	r4, #0
 80321e4:	f004 0301 	and.w	r3, r4, #1
 80321e8:	bfb8      	it	lt
 80321ea:	425b      	neglt	r3, r3
 80321ec:	6093      	str	r3, [r2, #8]

		UpdateLCDMenu();
 80321ee:	f7ff fd81 	bl	8031cf4 <UpdateLCDMenu>
		break;
 80321f2:	e031      	b.n	8032258 <ProcMenuMain+0x11c>

#if defined(USE_RFT_MENU_SELFTEST)

	case eMenuIdxSelfTest:	//	4:		 //  송신기 ID

		SetActiveMenu( &g_MenuSelfTestList );
 80321f4:	481f      	ldr	r0, [pc, #124]	; (8032274 <ProcMenuMain+0x138>)
 80321f6:	f7ff fd47 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 80321fa:	f7ff fd55 	bl	8031ca8 <GetActiveMenu>
 80321fe:	4603      	mov	r3, r0
 8032200:	2200      	movs	r2, #0
 8032202:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8032204:	f7ff fd76 	bl	8031cf4 <UpdateLCDMenu>
		break;
 8032208:	e026      	b.n	8032258 <ProcMenuMain+0x11c>

#if defined(USE_RFT_MENU_DIAG)

	case eMenuIdxDiag:		//	5:		 //  진단

		SetActiveMenu( &g_MenuDiagList );
 803220a:	481b      	ldr	r0, [pc, #108]	; (8032278 <ProcMenuMain+0x13c>)
 803220c:	f7ff fd3c 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8032210:	f7ff fd4a 	bl	8031ca8 <GetActiveMenu>
 8032214:	4603      	mov	r3, r0
 8032216:	2200      	movs	r2, #0
 8032218:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 803221a:	f7ff fd6b 	bl	8031cf4 <UpdateLCDMenu>
		break;
 803221e:	e01b      	b.n	8032258 <ProcMenuMain+0x11c>

#if defined(USE_RFT_MENU_SETTING)

	case eMenuIdxSetting:	//	6:		 //  설정

		SetActiveMenu( &g_MenuSettingList );
 8032220:	4816      	ldr	r0, [pc, #88]	; (803227c <ProcMenuMain+0x140>)
 8032222:	f7ff fd31 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8032226:	f7ff fd3f 	bl	8031ca8 <GetActiveMenu>
 803222a:	4603      	mov	r3, r0
 803222c:	2200      	movs	r2, #0
 803222e:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8032230:	f7ff fd60 	bl	8031cf4 <UpdateLCDMenu>
		break;
 8032234:	e010      	b.n	8032258 <ProcMenuMain+0x11c>

#if defined(USE_RFT_MENU_STAT)

	case eMenuIdxStat:		//	7:		 //  상태정보.

		SetActiveMenu( NULL );
 8032236:	2000      	movs	r0, #0
 8032238:	f7ff fd26 	bl	8031c88 <SetActiveMenu>

		ProcDispStat();			//	상태정보 표출.
 803223c:	f7ff fe78 	bl	8031f30 <ProcDispStat>
		break;
 8032240:	e00a      	b.n	8032258 <ProcMenuMain+0x11c>

#if defined(USE_RFT_MENU_CMD)

	case eMenuIdxCmd:		//	8:		 //  명령전송.

		SetActiveMenu( &g_MenuCmdList );
 8032242:	480f      	ldr	r0, [pc, #60]	; (8032280 <ProcMenuMain+0x144>)
 8032244:	f7ff fd20 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8032248:	f7ff fd2e 	bl	8031ca8 <GetActiveMenu>
 803224c:	4603      	mov	r3, r0
 803224e:	2200      	movs	r2, #0
 8032250:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8032252:	f7ff fd4f 	bl	8031cf4 <UpdateLCDMenu>
		break;
 8032256:	bf00      	nop
		SetActiveMenu( NULL );

		break;
#endif	//	defined(USE_ENV_TEST)
	}
}
 8032258:	bf00      	nop
 803225a:	370c      	adds	r7, #12
 803225c:	46bd      	mov	sp, r7
 803225e:	bd90      	pop	{r4, r7, pc}
 8032260:	200007f8 	.word	0x200007f8
 8032264:	20000988 	.word	0x20000988
 8032268:	200009e8 	.word	0x200009e8
 803226c:	2000232c 	.word	0x2000232c
 8032270:	20000a00 	.word	0x20000a00
 8032274:	20000a28 	.word	0x20000a28
 8032278:	20000a44 	.word	0x20000a44
 803227c:	20000a64 	.word	0x20000a64
 8032280:	20000b2c 	.word	0x20000b2c

08032284 <ProcMenuLightCtrl>:


//========================================================================
void 	ProcMenuLightCtrl( int idxItem )
//========================================================================
{
 8032284:	b580      	push	{r7, lr}
 8032286:	b082      	sub	sp, #8
 8032288:	af00      	add	r7, sp, #0
 803228a:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 803228c:	2000      	movs	r0, #0
 803228e:	f7fa fb03 	bl	802c898 <LCDMenuUpDown>

	if ( idxItem == 0 )
 8032292:	687b      	ldr	r3, [r7, #4]
 8032294:	2b00      	cmp	r3, #0
 8032296:	d102      	bne.n	803229e <ProcMenuLightCtrl+0x1a>
	{
		ProcLightOff();
 8032298:	f7ff fe18 	bl	8031ecc <ProcLightOff>
 803229c:	e001      	b.n	80322a2 <ProcMenuLightCtrl+0x1e>
	}
	else
	{
		ProcLightOn();
 803229e:	f7ff fdf1 	bl	8031e84 <ProcLightOn>
	}

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 80322a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80322a6:	f7ef fc6b 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 80322aa:	f7ff fd09 	bl	8031cc0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 80322ae:	2000      	movs	r0, #0
 80322b0:	f7ff fcea 	bl	8031c88 <SetActiveMenu>
}
 80322b4:	bf00      	nop
 80322b6:	3708      	adds	r7, #8
 80322b8:	46bd      	mov	sp, r7
 80322ba:	bd80      	pop	{r7, pc}

080322bc <ProcMenuRFTID>:

//========================================================================
void 	ProcMenuRFTID( int idxItem )
//========================================================================
{
 80322bc:	b580      	push	{r7, lr}
 80322be:	b082      	sub	sp, #8
 80322c0:	af00      	add	r7, sp, #0
 80322c2:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );	//	UpDown Off
 80322c4:	2000      	movs	r0, #0
 80322c6:	f7fa fae7 	bl	802c898 <LCDMenuUpDown>

	switch( idxItem )
 80322ca:	687b      	ldr	r3, [r7, #4]
 80322cc:	2b00      	cmp	r3, #0
 80322ce:	d003      	beq.n	80322d8 <ProcMenuRFTID+0x1c>
 80322d0:	687b      	ldr	r3, [r7, #4]
 80322d2:	2b01      	cmp	r3, #1
 80322d4:	d007      	beq.n	80322e6 <ProcMenuRFTID+0x2a>
 80322d6:	e00d      	b.n	80322f4 <ProcMenuRFTID+0x38>
	{
	case 0:	//	송신기 #1
		SetCarNo( RFTCarNo1 );	//	CarNo ( 11 )
 80322d8:	200b      	movs	r0, #11
 80322da:	f000 fdd5 	bl	8032e88 <SetCarNo>
		LCDPrintf( "Set RFT#1" );
 80322de:	4810      	ldr	r0, [pc, #64]	; (8032320 <ProcMenuRFTID+0x64>)
 80322e0:	f7fa fb48 	bl	802c974 <LCDPrintf>
		break;
 80322e4:	e00e      	b.n	8032304 <ProcMenuRFTID+0x48>

	case 1:	//	송신기 #2
		SetCarNo( RFTCarNo2 );	//	CarNo ( 12 )
 80322e6:	200c      	movs	r0, #12
 80322e8:	f000 fdce 	bl	8032e88 <SetCarNo>
		LCDPrintf( "Set RFT#2" );
 80322ec:	480d      	ldr	r0, [pc, #52]	; (8032324 <ProcMenuRFTID+0x68>)
 80322ee:	f7fa fb41 	bl	802c974 <LCDPrintf>
		break;
 80322f2:	e007      	b.n	8032304 <ProcMenuRFTID+0x48>

	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 80322f4:	687b      	ldr	r3, [r7, #4]
 80322f6:	f240 4209 	movw	r2, #1033	; 0x409
 80322fa:	490b      	ldr	r1, [pc, #44]	; (8032328 <ProcMenuRFTID+0x6c>)
 80322fc:	480b      	ldr	r0, [pc, #44]	; (803232c <ProcMenuRFTID+0x70>)
 80322fe:	f005 f8cf 	bl	80374a0 <iprintf>
		break;
 8032302:	bf00      	nop
	}

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 8032304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8032308:	f7ef fc3a 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 803230c:	f7ff fcd8 	bl	8031cc0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 8032310:	2000      	movs	r0, #0
 8032312:	f7ff fcb9 	bl	8031c88 <SetActiveMenu>
}
 8032316:	bf00      	nop
 8032318:	3708      	adds	r7, #8
 803231a:	46bd      	mov	sp, r7
 803231c:	bd80      	pop	{r7, pc}
 803231e:	bf00      	nop
 8032320:	0803b0cc 	.word	0x0803b0cc
 8032324:	0803b0d8 	.word	0x0803b0d8
 8032328:	0804163c 	.word	0x0804163c
 803232c:	0803b0e4 	.word	0x0803b0e4

08032330 <ProcMenuSelfTest>:

//========================================================================
void 	ProcMenuSelfTest( int idxItem )
//========================================================================
{
 8032330:	b580      	push	{r7, lr}
 8032332:	b082      	sub	sp, #8
 8032334:	af00      	add	r7, sp, #0
 8032336:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 8032338:	2000      	movs	r0, #0
 803233a:	f7fa faad 	bl	802c898 <LCDMenuUpDown>

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 803233e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8032342:	f7ef fc1d 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 8032346:	f7ff fcbb 	bl	8031cc0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 803234a:	2000      	movs	r0, #0
 803234c:	f7ff fc9c 	bl	8031c88 <SetActiveMenu>
}
 8032350:	bf00      	nop
 8032352:	3708      	adds	r7, #8
 8032354:	46bd      	mov	sp, r7
 8032356:	bd80      	pop	{r7, pc}

08032358 <ProcMenuDiag>:

//========================================================================
void 	ProcMenuDiag( int idxItem )
//========================================================================
{
 8032358:	b580      	push	{r7, lr}
 803235a:	b082      	sub	sp, #8
 803235c:	af00      	add	r7, sp, #0
 803235e:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 8032360:	2000      	movs	r0, #0
 8032362:	f7fa fa99 	bl	802c898 <LCDMenuUpDown>

//	" AudioLoop:Off",	//  Loopback Off
//	" AudioLoop:On",	//  Loopback On
//	" AudioSine:On",	//  Sine Wave On

	switch( idxItem )
 8032366:	687b      	ldr	r3, [r7, #4]
 8032368:	2b02      	cmp	r3, #2
 803236a:	d022      	beq.n	80323b2 <ProcMenuDiag+0x5a>
 803236c:	687b      	ldr	r3, [r7, #4]
 803236e:	2b02      	cmp	r3, #2
 8032370:	dc30      	bgt.n	80323d4 <ProcMenuDiag+0x7c>
 8032372:	687b      	ldr	r3, [r7, #4]
 8032374:	2b00      	cmp	r3, #0
 8032376:	d003      	beq.n	8032380 <ProcMenuDiag+0x28>
 8032378:	687b      	ldr	r3, [r7, #4]
 803237a:	2b01      	cmp	r3, #1
 803237c:	d008      	beq.n	8032390 <ProcMenuDiag+0x38>
 803237e:	e029      	b.n	80323d4 <ProcMenuDiag+0x7c>
	{
	case 0:	//	Audio Loopback Off
		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
 8032380:	2200      	movs	r2, #0
 8032382:	2120      	movs	r1, #32
 8032384:	4819      	ldr	r0, [pc, #100]	; (80323ec <ProcMenuDiag+0x94>)
 8032386:	f7f1 f8c9 	bl	802351c <HAL_GPIO_WritePin>

		//	Codec Loopback Off
		AudioStop();
 803238a:	f7fd fc0b 	bl	802fba4 <AudioStop>

		break;
 803238e:	e029      	b.n	80323e4 <ProcMenuDiag+0x8c>

	case 1:	//	Audio Loopback On
		printf( "%s(%d) - sine\n", __func__, __LINE__ );
 8032390:	f240 4236 	movw	r2, #1078	; 0x436
 8032394:	4916      	ldr	r1, [pc, #88]	; (80323f0 <ProcMenuDiag+0x98>)
 8032396:	4817      	ldr	r0, [pc, #92]	; (80323f4 <ProcMenuDiag+0x9c>)
 8032398:	f005 f882 	bl	80374a0 <iprintf>
		LCDPrintf( "Audio Loop" );
 803239c:	4816      	ldr	r0, [pc, #88]	; (80323f8 <ProcMenuDiag+0xa0>)
 803239e:	f7fa fae9 	bl	802c974 <LCDPrintf>

		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
 80323a2:	2201      	movs	r2, #1
 80323a4:	2120      	movs	r1, #32
 80323a6:	4811      	ldr	r0, [pc, #68]	; (80323ec <ProcMenuDiag+0x94>)
 80323a8:	f7f1 f8b8 	bl	802351c <HAL_GPIO_WritePin>

		AudioDMALoopback();
 80323ac:	f7fd fcfe 	bl	802fdac <AudioDMALoopback>
		break;
 80323b0:	e018      	b.n	80323e4 <ProcMenuDiag+0x8c>

	case 2:	//	Audio Sine Wave On
		printf( "%s(%d) - sine\n", __func__, __LINE__ );
 80323b2:	f240 423f 	movw	r2, #1087	; 0x43f
 80323b6:	490e      	ldr	r1, [pc, #56]	; (80323f0 <ProcMenuDiag+0x98>)
 80323b8:	480e      	ldr	r0, [pc, #56]	; (80323f4 <ProcMenuDiag+0x9c>)
 80323ba:	f005 f871 	bl	80374a0 <iprintf>
		LCDPrintf( "Audio Sine" );
 80323be:	480f      	ldr	r0, [pc, #60]	; (80323fc <ProcMenuDiag+0xa4>)
 80323c0:	f7fa fad8 	bl	802c974 <LCDPrintf>

		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
 80323c4:	2201      	movs	r2, #1
 80323c6:	2120      	movs	r1, #32
 80323c8:	4808      	ldr	r0, [pc, #32]	; (80323ec <ProcMenuDiag+0x94>)
 80323ca:	f7f1 f8a7 	bl	802351c <HAL_GPIO_WritePin>

		AudioPlayDMASine();
 80323ce:	f7fd fd21 	bl	802fe14 <AudioPlayDMASine>
		break;
 80323d2:	e007      	b.n	80323e4 <ProcMenuDiag+0x8c>

	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 80323d4:	687b      	ldr	r3, [r7, #4]
 80323d6:	f44f 6289 	mov.w	r2, #1096	; 0x448
 80323da:	4905      	ldr	r1, [pc, #20]	; (80323f0 <ProcMenuDiag+0x98>)
 80323dc:	4808      	ldr	r0, [pc, #32]	; (8032400 <ProcMenuDiag+0xa8>)
 80323de:	f005 f85f 	bl	80374a0 <iprintf>
		break;
 80323e2:	bf00      	nop
	//  1초후 Main화면 갱신.
//	HAL_Delay( 1000 );
//	UpdateLCDMain();

//	SetActiveMenu( NULL );
}
 80323e4:	bf00      	nop
 80323e6:	3708      	adds	r7, #8
 80323e8:	46bd      	mov	sp, r7
 80323ea:	bd80      	pop	{r7, pc}
 80323ec:	40021000 	.word	0x40021000
 80323f0:	0804164c 	.word	0x0804164c
 80323f4:	0803b100 	.word	0x0803b100
 80323f8:	0803b110 	.word	0x0803b110
 80323fc:	0803b11c 	.word	0x0803b11c
 8032400:	0803b0e4 	.word	0x0803b0e4

08032404 <ProcMenuSetting>:


//========================================================================
void 	ProcMenuSetting( int idxItem )
//========================================================================
{
 8032404:	b590      	push	{r4, r7, lr}
 8032406:	b083      	sub	sp, #12
 8032408:	af00      	add	r7, sp, #0
 803240a:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 803240c:	2000      	movs	r0, #0
 803240e:	f7fa fa43 	bl	802c898 <LCDMenuUpDown>

//	" Mic Vol",		//	Mic Volume
//	" Spk Vol",		//	Spk Volume
//	" RF Tx Pwr",	//	RF Tx Power

	switch( idxItem )
 8032412:	687b      	ldr	r3, [r7, #4]
 8032414:	2b03      	cmp	r3, #3
 8032416:	d83d      	bhi.n	8032494 <ProcMenuSetting+0x90>
 8032418:	a201      	add	r2, pc, #4	; (adr r2, 8032420 <ProcMenuSetting+0x1c>)
 803241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803241e:	bf00      	nop
 8032420:	08032431 	.word	0x08032431
 8032424:	0803244b 	.word	0x0803244b
 8032428:	08032465 	.word	0x08032465
 803242c:	0803247b 	.word	0x0803247b
	{
	case 0:		//	Mic Volume
		SetActiveMenu( &g_MenuSetMicList );
 8032430:	481e      	ldr	r0, [pc, #120]	; (80324ac <ProcMenuSetting+0xa8>)
 8032432:	f7ff fc29 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = GetMicVol();	//	메뉴 Index초기화.
 8032436:	f7ff fc37 	bl	8031ca8 <GetActiveMenu>
 803243a:	4604      	mov	r4, r0
 803243c:	f000 fdcc 	bl	8032fd8 <GetMicVol>
 8032440:	4603      	mov	r3, r0
 8032442:	60a3      	str	r3, [r4, #8]

		UpdateLCDMenu();
 8032444:	f7ff fc56 	bl	8031cf4 <UpdateLCDMenu>

		break;
 8032448:	e02c      	b.n	80324a4 <ProcMenuSetting+0xa0>

	case 1:		//	Spk Volume
		SetActiveMenu( &g_MenuSetSpkList );
 803244a:	4819      	ldr	r0, [pc, #100]	; (80324b0 <ProcMenuSetting+0xac>)
 803244c:	f7ff fc1c 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = GetSpkVol();	//	메뉴 Index초기화.
 8032450:	f7ff fc2a 	bl	8031ca8 <GetActiveMenu>
 8032454:	4604      	mov	r4, r0
 8032456:	f000 fd4f 	bl	8032ef8 <GetSpkVol>
 803245a:	4603      	mov	r3, r0
 803245c:	60a3      	str	r3, [r4, #8]

		UpdateLCDMenu();
 803245e:	f7ff fc49 	bl	8031cf4 <UpdateLCDMenu>
		break;
 8032462:	e01f      	b.n	80324a4 <ProcMenuSetting+0xa0>

	case 2:		//	RF Tx Power
		SetActiveMenu( &g_MenuSetTxPwrList );
 8032464:	4813      	ldr	r0, [pc, #76]	; (80324b4 <ProcMenuSetting+0xb0>)
 8032466:	f7ff fc0f 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = 7;	//	메뉴 Index초기화.
 803246a:	f7ff fc1d 	bl	8031ca8 <GetActiveMenu>
 803246e:	4603      	mov	r3, r0
 8032470:	2207      	movs	r2, #7
 8032472:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8032474:	f7ff fc3e 	bl	8031cf4 <UpdateLCDMenu>
		break;
 8032478:	e014      	b.n	80324a4 <ProcMenuSetting+0xa0>

	case 3:		//	RF Mode
		SetActiveMenu( &g_MenuSetRFModeList );
 803247a:	480f      	ldr	r0, [pc, #60]	; (80324b8 <ProcMenuSetting+0xb4>)
 803247c:	f7ff fc04 	bl	8031c88 <SetActiveMenu>
		GetActiveMenu()->currIdx = g_nRFMode - 1;	//	메뉴 Index초기화.
 8032480:	4b0e      	ldr	r3, [pc, #56]	; (80324bc <ProcMenuSetting+0xb8>)
 8032482:	681c      	ldr	r4, [r3, #0]
 8032484:	f7ff fc10 	bl	8031ca8 <GetActiveMenu>
 8032488:	4602      	mov	r2, r0
 803248a:	1e63      	subs	r3, r4, #1
 803248c:	6093      	str	r3, [r2, #8]

		UpdateLCDMenu();
 803248e:	f7ff fc31 	bl	8031cf4 <UpdateLCDMenu>
		break;
 8032492:	e007      	b.n	80324a4 <ProcMenuSetting+0xa0>

	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 8032494:	687b      	ldr	r3, [r7, #4]
 8032496:	f240 427e 	movw	r2, #1150	; 0x47e
 803249a:	4909      	ldr	r1, [pc, #36]	; (80324c0 <ProcMenuSetting+0xbc>)
 803249c:	4809      	ldr	r0, [pc, #36]	; (80324c4 <ProcMenuSetting+0xc0>)
 803249e:	f004 ffff 	bl	80374a0 <iprintf>
		break;
 80324a2:	bf00      	nop
	}
}
 80324a4:	bf00      	nop
 80324a6:	370c      	adds	r7, #12
 80324a8:	46bd      	mov	sp, r7
 80324aa:	bd90      	pop	{r4, r7, pc}
 80324ac:	20000a9c 	.word	0x20000a9c
 80324b0:	20000abc 	.word	0x20000abc
 80324b4:	20000aec 	.word	0x20000aec
 80324b8:	20000b04 	.word	0x20000b04
 80324bc:	20002344 	.word	0x20002344
 80324c0:	0804165c 	.word	0x0804165c
 80324c4:	0803b0e4 	.word	0x0803b0e4

080324c8 <ProcMenuSetMic>:

//========================================================================
void 	ProcMenuSetMic( int idxItem )
//========================================================================
{
 80324c8:	b580      	push	{r7, lr}
 80324ca:	b082      	sub	sp, #8
 80324cc:	af00      	add	r7, sp, #0
 80324ce:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 80324d0:	2000      	movs	r0, #0
 80324d2:	f7fa f9e1 	bl	802c898 <LCDMenuUpDown>
 80324d6:	687b      	ldr	r3, [r7, #4]

	//	Mic : 0 ~ 9

	switch( idxItem )
 80324d8:	2b09      	cmp	r3, #9
 80324da:	d803      	bhi.n	80324e4 <ProcMenuSetMic+0x1c>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		SetMicVol(idxItem);
 80324dc:	6878      	ldr	r0, [r7, #4]
 80324de:	f000 fdaf 	bl	8033040 <SetMicVol>
		break;
 80324e2:	e007      	b.n	80324f4 <ProcMenuSetMic+0x2c>
	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 80324e4:	687b      	ldr	r3, [r7, #4]
 80324e6:	f240 429a 	movw	r2, #1178	; 0x49a
 80324ea:	4909      	ldr	r1, [pc, #36]	; (8032510 <ProcMenuSetMic+0x48>)
 80324ec:	4809      	ldr	r0, [pc, #36]	; (8032514 <ProcMenuSetMic+0x4c>)
 80324ee:	f004 ffd7 	bl	80374a0 <iprintf>
		break;
 80324f2:	bf00      	nop
	}
	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 80324f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80324f8:	f7ef fb42 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 80324fc:	f7ff fbe0 	bl	8031cc0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 8032500:	2000      	movs	r0, #0
 8032502:	f7ff fbc1 	bl	8031c88 <SetActiveMenu>
}
 8032506:	bf00      	nop
 8032508:	3708      	adds	r7, #8
 803250a:	46bd      	mov	sp, r7
 803250c:	bd80      	pop	{r7, pc}
 803250e:	bf00      	nop
 8032510:	0804166c 	.word	0x0804166c
 8032514:	0803b0e4 	.word	0x0803b0e4

08032518 <ProcMenuSetSpk>:

//========================================================================
void 	ProcMenuSetSpk( int idxItem )
//========================================================================
{
 8032518:	b580      	push	{r7, lr}
 803251a:	b082      	sub	sp, #8
 803251c:	af00      	add	r7, sp, #0
 803251e:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 8032520:	2000      	movs	r0, #0
 8032522:	f7fa f9b9 	bl	802c898 <LCDMenuUpDown>
 8032526:	687b      	ldr	r3, [r7, #4]

	//	Spk : 0 ~ 3

	switch( idxItem )
 8032528:	2b03      	cmp	r3, #3
 803252a:	d803      	bhi.n	8032534 <ProcMenuSetSpk+0x1c>
	{
	case 0:
	case 1:
	case 2:
	case 3:
		SetSpkVol(idxItem);
 803252c:	6878      	ldr	r0, [r7, #4]
 803252e:	f000 fd17 	bl	8032f60 <SetSpkVol>
		break;
 8032532:	e007      	b.n	8032544 <ProcMenuSetSpk+0x2c>
	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 8032534:	687b      	ldr	r3, [r7, #4]
 8032536:	f240 42b5 	movw	r2, #1205	; 0x4b5
 803253a:	4909      	ldr	r1, [pc, #36]	; (8032560 <ProcMenuSetSpk+0x48>)
 803253c:	4809      	ldr	r0, [pc, #36]	; (8032564 <ProcMenuSetSpk+0x4c>)
 803253e:	f004 ffaf 	bl	80374a0 <iprintf>
		break;
 8032542:	bf00      	nop
	}
	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 8032544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8032548:	f7ef fb1a 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 803254c:	f7ff fbb8 	bl	8031cc0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 8032550:	2000      	movs	r0, #0
 8032552:	f7ff fb99 	bl	8031c88 <SetActiveMenu>
}
 8032556:	bf00      	nop
 8032558:	3708      	adds	r7, #8
 803255a:	46bd      	mov	sp, r7
 803255c:	bd80      	pop	{r7, pc}
 803255e:	bf00      	nop
 8032560:	0804167c 	.word	0x0804167c
 8032564:	0803b0e4 	.word	0x0803b0e4

08032568 <ProcMenuSetTxPwr>:


//========================================================================
void 	ProcMenuSetTxPwr( int idxItem )
//========================================================================
{
 8032568:	b580      	push	{r7, lr}
 803256a:	b082      	sub	sp, #8
 803256c:	af00      	add	r7, sp, #0
 803256e:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 8032570:	2000      	movs	r0, #0
 8032572:	f7fa f991 	bl	802c898 <LCDMenuUpDown>
//								" Pwr : 10 dBm",	//	22
//								" Pwr : 15 dBm",	//	40
//								" Pwr : 20 dBm",	//	127
//							};

	switch( idxItem )
 8032576:	687b      	ldr	r3, [r7, #4]
 8032578:	2b06      	cmp	r3, #6
 803257a:	d82d      	bhi.n	80325d8 <ProcMenuSetTxPwr+0x70>
 803257c:	a201      	add	r2, pc, #4	; (adr r2, 8032584 <ProcMenuSetTxPwr+0x1c>)
 803257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032582:	bf00      	nop
 8032584:	080325a1 	.word	0x080325a1
 8032588:	080325a9 	.word	0x080325a9
 803258c:	080325b1 	.word	0x080325b1
 8032590:	080325b9 	.word	0x080325b9
 8032594:	080325c1 	.word	0x080325c1
 8032598:	080325c9 	.word	0x080325c9
 803259c:	080325d1 	.word	0x080325d1
	{
	case 0:	vRadio_Set_TxPower(0);		break;
 80325a0:	2000      	movs	r0, #0
 80325a2:	f7fa ff25 	bl	802d3f0 <vRadio_Set_TxPower>
 80325a6:	e01f      	b.n	80325e8 <ProcMenuSetTxPwr+0x80>
	case 1:	vRadio_Set_TxPower(1);		break;
 80325a8:	2001      	movs	r0, #1
 80325aa:	f7fa ff21 	bl	802d3f0 <vRadio_Set_TxPower>
 80325ae:	e01b      	b.n	80325e8 <ProcMenuSetTxPwr+0x80>
	case 2:	vRadio_Set_TxPower(4);		break;
 80325b0:	2004      	movs	r0, #4
 80325b2:	f7fa ff1d 	bl	802d3f0 <vRadio_Set_TxPower>
 80325b6:	e017      	b.n	80325e8 <ProcMenuSetTxPwr+0x80>
	case 3:	vRadio_Set_TxPower(7);		break;
 80325b8:	2007      	movs	r0, #7
 80325ba:	f7fa ff19 	bl	802d3f0 <vRadio_Set_TxPower>
 80325be:	e013      	b.n	80325e8 <ProcMenuSetTxPwr+0x80>
	case 4:	vRadio_Set_TxPower(12);		break;
 80325c0:	200c      	movs	r0, #12
 80325c2:	f7fa ff15 	bl	802d3f0 <vRadio_Set_TxPower>
 80325c6:	e00f      	b.n	80325e8 <ProcMenuSetTxPwr+0x80>
	case 5:	vRadio_Set_TxPower(40);		break;
 80325c8:	2028      	movs	r0, #40	; 0x28
 80325ca:	f7fa ff11 	bl	802d3f0 <vRadio_Set_TxPower>
 80325ce:	e00b      	b.n	80325e8 <ProcMenuSetTxPwr+0x80>
	case 6:	vRadio_Set_TxPower(127);	break;
 80325d0:	207f      	movs	r0, #127	; 0x7f
 80325d2:	f7fa ff0d 	bl	802d3f0 <vRadio_Set_TxPower>
 80325d6:	e007      	b.n	80325e8 <ProcMenuSetTxPwr+0x80>
	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 80325d8:	687b      	ldr	r3, [r7, #4]
 80325da:	f240 42da 	movw	r2, #1242	; 0x4da
 80325de:	4909      	ldr	r1, [pc, #36]	; (8032604 <ProcMenuSetTxPwr+0x9c>)
 80325e0:	4809      	ldr	r0, [pc, #36]	; (8032608 <ProcMenuSetTxPwr+0xa0>)
 80325e2:	f004 ff5d 	bl	80374a0 <iprintf>
		break;
 80325e6:	bf00      	nop
	}
	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 80325e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80325ec:	f7ef fac8 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 80325f0:	f7ff fb66 	bl	8031cc0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 80325f4:	2000      	movs	r0, #0
 80325f6:	f7ff fb47 	bl	8031c88 <SetActiveMenu>
}
 80325fa:	bf00      	nop
 80325fc:	3708      	adds	r7, #8
 80325fe:	46bd      	mov	sp, r7
 8032600:	bd80      	pop	{r7, pc}
 8032602:	bf00      	nop
 8032604:	0804168c 	.word	0x0804168c
 8032608:	0803b0e4 	.word	0x0803b0e4

0803260c <ProcMenuSetRFMode>:


//========================================================================
void 	ProcMenuSetRFMode( int idxItem )
//========================================================================
{
 803260c:	b580      	push	{r7, lr}
 803260e:	b082      	sub	sp, #8
 8032610:	af00      	add	r7, sp, #0
 8032612:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 8032614:	2000      	movs	r0, #0
 8032616:	f7fa f93f 	bl	802c898 <LCDMenuUpDown>

	switch( idxItem )
 803261a:	687b      	ldr	r3, [r7, #4]
 803261c:	2b00      	cmp	r3, #0
 803261e:	d003      	beq.n	8032628 <ProcMenuSetRFMode+0x1c>
 8032620:	687b      	ldr	r3, [r7, #4]
 8032622:	2b01      	cmp	r3, #1
 8032624:	d004      	beq.n	8032630 <ProcMenuSetRFMode+0x24>
 8032626:	e007      	b.n	8032638 <ProcMenuSetRFMode+0x2c>
	{
	case 0:	SetRFMode(1);		break;
 8032628:	2001      	movs	r0, #1
 803262a:	f000 fb33 	bl	8032c94 <SetRFMode>
 803262e:	e00b      	b.n	8032648 <ProcMenuSetRFMode+0x3c>
	case 1:	SetRFMode(2);		break;
 8032630:	2002      	movs	r0, #2
 8032632:	f000 fb2f 	bl	8032c94 <SetRFMode>
 8032636:	e007      	b.n	8032648 <ProcMenuSetRFMode+0x3c>
	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 8032638:	687b      	ldr	r3, [r7, #4]
 803263a:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
 803263e:	4909      	ldr	r1, [pc, #36]	; (8032664 <ProcMenuSetRFMode+0x58>)
 8032640:	4809      	ldr	r0, [pc, #36]	; (8032668 <ProcMenuSetRFMode+0x5c>)
 8032642:	f004 ff2d 	bl	80374a0 <iprintf>
		break;
 8032646:	bf00      	nop
	}
	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 8032648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803264c:	f7ef fa98 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 8032650:	f7ff fb36 	bl	8031cc0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 8032654:	2000      	movs	r0, #0
 8032656:	f7ff fb17 	bl	8031c88 <SetActiveMenu>
}
 803265a:	bf00      	nop
 803265c:	3708      	adds	r7, #8
 803265e:	46bd      	mov	sp, r7
 8032660:	bd80      	pop	{r7, pc}
 8032662:	bf00      	nop
 8032664:	080416a0 	.word	0x080416a0
 8032668:	0803b0e4 	.word	0x0803b0e4

0803266c <ProcBtnOK>:

//========================================================================
void	ProcBtnOK( void )
//========================================================================
{
 803266c:	b580      	push	{r7, lr}
 803266e:	af00      	add	r7, sp, #0
	if ( GetActiveMenu() == NULL )
 8032670:	f7ff fb1a 	bl	8031ca8 <GetActiveMenu>
 8032674:	4603      	mov	r3, r0
 8032676:	2b00      	cmp	r3, #0
 8032678:	d107      	bne.n	803268a <ProcBtnOK+0x1e>
	{
		LCDClearMain();
 803267a:	f7fa f9db 	bl	802ca34 <LCDClearMain>
		//========================================================================
		//  편성 : XXX
		UpdateLCDMain();
 803267e:	f7ff fb1f 	bl	8031cc0 <UpdateLCDMain>

		//========================================================================
		//	Display Status Disable
		_bEnDispStat		=	0;
 8032682:	4b09      	ldr	r3, [pc, #36]	; (80326a8 <ProcBtnOK+0x3c>)
 8032684:	2200      	movs	r2, #0
 8032686:	601a      	str	r2, [r3, #0]

		return;
 8032688:	e00c      	b.n	80326a4 <ProcBtnOK+0x38>
	}
	else if ( g_pActiveMenu->cbFunc != NULL )
 803268a:	4b08      	ldr	r3, [pc, #32]	; (80326ac <ProcBtnOK+0x40>)
 803268c:	681b      	ldr	r3, [r3, #0]
 803268e:	68db      	ldr	r3, [r3, #12]
 8032690:	2b00      	cmp	r3, #0
 8032692:	d007      	beq.n	80326a4 <ProcBtnOK+0x38>
	{
		//	Menu Procedure Function
		g_pActiveMenu->cbFunc( g_pActiveMenu->currIdx );
 8032694:	4b05      	ldr	r3, [pc, #20]	; (80326ac <ProcBtnOK+0x40>)
 8032696:	681b      	ldr	r3, [r3, #0]
 8032698:	68db      	ldr	r3, [r3, #12]
 803269a:	4a04      	ldr	r2, [pc, #16]	; (80326ac <ProcBtnOK+0x40>)
 803269c:	6812      	ldr	r2, [r2, #0]
 803269e:	6892      	ldr	r2, [r2, #8]
 80326a0:	4610      	mov	r0, r2
 80326a2:	4798      	blx	r3
	}
}
 80326a4:	bd80      	pop	{r7, pc}
 80326a6:	bf00      	nop
 80326a8:	2000231c 	.word	0x2000231c
 80326ac:	20002318 	.word	0x20002318

080326b0 <GetDevID>:
// Function

//========================================================================
int GetDevID    ( void )
//========================================================================
{
 80326b0:	b480      	push	{r7}
 80326b2:	af00      	add	r7, sp, #0
	return g_nDevID;
 80326b4:	4b03      	ldr	r3, [pc, #12]	; (80326c4 <GetDevID+0x14>)
 80326b6:	681b      	ldr	r3, [r3, #0]
}
 80326b8:	4618      	mov	r0, r3
 80326ba:	46bd      	mov	sp, r7
 80326bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80326c0:	4770      	bx	lr
 80326c2:	bf00      	nop
 80326c4:	20002324 	.word	0x20002324

080326c8 <SetDevID>:

//========================================================================
void SetDevID    ( int nDevID )
//========================================================================
{
 80326c8:	b580      	push	{r7, lr}
 80326ca:	b082      	sub	sp, #8
 80326cc:	af00      	add	r7, sp, #0
 80326ce:	6078      	str	r0, [r7, #4]
	printf( "%s : %s(%d)\n", __func__,
 80326d0:	687b      	ldr	r3, [r7, #4]
 80326d2:	2b01      	cmp	r3, #1
 80326d4:	d101      	bne.n	80326da <SetDevID+0x12>
 80326d6:	4a07      	ldr	r2, [pc, #28]	; (80326f4 <SetDevID+0x2c>)
 80326d8:	e000      	b.n	80326dc <SetDevID+0x14>
 80326da:	4a07      	ldr	r2, [pc, #28]	; (80326f8 <SetDevID+0x30>)
 80326dc:	687b      	ldr	r3, [r7, #4]
 80326de:	4907      	ldr	r1, [pc, #28]	; (80326fc <SetDevID+0x34>)
 80326e0:	4807      	ldr	r0, [pc, #28]	; (8032700 <SetDevID+0x38>)
 80326e2:	f004 fedd 	bl	80374a0 <iprintf>
							( nDevID == DevRF900M )? "RFM":"RFT",
							nDevID );
	g_nDevID = nDevID;
 80326e6:	4a07      	ldr	r2, [pc, #28]	; (8032704 <SetDevID+0x3c>)
 80326e8:	687b      	ldr	r3, [r7, #4]
 80326ea:	6013      	str	r3, [r2, #0]
}
 80326ec:	bf00      	nop
 80326ee:	3708      	adds	r7, #8
 80326f0:	46bd      	mov	sp, r7
 80326f2:	bd80      	pop	{r7, pc}
 80326f4:	0803b128 	.word	0x0803b128
 80326f8:	0803b12c 	.word	0x0803b12c
 80326fc:	080416b4 	.word	0x080416b4
 8032700:	0803b130 	.word	0x0803b130
 8032704:	20002324 	.word	0x20002324

08032708 <GetRFMMode>:

//========================================================================
int		GetRFMMode	( void )
//========================================================================
{
 8032708:	b480      	push	{r7}
 803270a:	af00      	add	r7, sp, #0
	return g_nRFMMode;
 803270c:	4b03      	ldr	r3, [pc, #12]	; (803271c <GetRFMMode+0x14>)
 803270e:	681b      	ldr	r3, [r3, #0]
}
 8032710:	4618      	mov	r0, r3
 8032712:	46bd      	mov	sp, r7
 8032714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032718:	4770      	bx	lr
 803271a:	bf00      	nop
 803271c:	20002334 	.word	0x20002334

08032720 <SetRFMMode>:

//========================================================================
void	SetRFMMode	( int nRFMMode )
//========================================================================
{
 8032720:	b580      	push	{r7, lr}
 8032722:	b082      	sub	sp, #8
 8032724:	af00      	add	r7, sp, #0
 8032726:	6078      	str	r0, [r7, #4]

	if ( g_nRFMMode != nRFMMode && nRFMMode == RFMModeNormal )
 8032728:	4b14      	ldr	r3, [pc, #80]	; (803277c <SetRFMMode+0x5c>)
 803272a:	681b      	ldr	r3, [r3, #0]
 803272c:	687a      	ldr	r2, [r7, #4]
 803272e:	429a      	cmp	r2, r3
 8032730:	d004      	beq.n	803273c <SetRFMMode+0x1c>
 8032732:	687b      	ldr	r3, [r7, #4]
 8032734:	2b00      	cmp	r3, #0
 8032736:	d101      	bne.n	803273c <SetRFMMode+0x1c>
	{
		//	타 모드에서 Normal 모드로 변경시 상태정보 ID Flag값 유지.
		ReloadStampStat();
 8032738:	f001 fe0a 	bl	8034350 <ReloadStampStat>
	}

	if ( g_nRFMMode != nRFMMode )
 803273c:	4b0f      	ldr	r3, [pc, #60]	; (803277c <SetRFMMode+0x5c>)
 803273e:	681b      	ldr	r3, [r3, #0]
 8032740:	687a      	ldr	r2, [r7, #4]
 8032742:	429a      	cmp	r2, r3
 8032744:	d007      	beq.n	8032756 <SetRFMMode+0x36>
	{
		//	타 모드에서 Normal 모드로 변경시 상태정보 ID Flag값 유지.
		printf( "%s", StrRFMMode( nRFMMode ) );
 8032746:	6878      	ldr	r0, [r7, #4]
 8032748:	f000 f81c 	bl	8032784 <StrRFMMode>
 803274c:	4603      	mov	r3, r0
 803274e:	4619      	mov	r1, r3
 8032750:	480b      	ldr	r0, [pc, #44]	; (8032780 <SetRFMMode+0x60>)
 8032752:	f004 fea5 	bl	80374a0 <iprintf>
	}

	if(GetRFMMode() == RFMModeOcc )
 8032756:	f7ff ffd7 	bl	8032708 <GetRFMMode>
 803275a:	4603      	mov	r3, r0
 803275c:	2b03      	cmp	r3, #3
 803275e:	d106      	bne.n	803276e <SetRFMMode+0x4e>
	{
		if(nRFMMode == RFMModeOccStop)
 8032760:	687b      	ldr	r3, [r7, #4]
 8032762:	2b05      	cmp	r3, #5
 8032764:	d106      	bne.n	8032774 <SetRFMMode+0x54>
		{
			g_nRFMMode = nRFMMode;
 8032766:	4a05      	ldr	r2, [pc, #20]	; (803277c <SetRFMMode+0x5c>)
 8032768:	687b      	ldr	r3, [r7, #4]
 803276a:	6013      	str	r3, [r2, #0]
	{
		g_nRFMMode = nRFMMode;
	}

	//g_nRFMMode = nRFMMode;
}
 803276c:	e002      	b.n	8032774 <SetRFMMode+0x54>
		g_nRFMMode = nRFMMode;
 803276e:	4a03      	ldr	r2, [pc, #12]	; (803277c <SetRFMMode+0x5c>)
 8032770:	687b      	ldr	r3, [r7, #4]
 8032772:	6013      	str	r3, [r2, #0]
}
 8032774:	bf00      	nop
 8032776:	3708      	adds	r7, #8
 8032778:	46bd      	mov	sp, r7
 803277a:	bd80      	pop	{r7, pc}
 803277c:	20002334 	.word	0x20002334
 8032780:	0803b140 	.word	0x0803b140

08032784 <StrRFMMode>:

//========================================================================
char	*StrRFMMode		( int nRFMMode )
//========================================================================
{
 8032784:	b480      	push	{r7}
 8032786:	b083      	sub	sp, #12
 8032788:	af00      	add	r7, sp, #0
 803278a:	6078      	str	r0, [r7, #4]
	switch( nRFMMode )
 803278c:	687b      	ldr	r3, [r7, #4]
 803278e:	2b04      	cmp	r3, #4
 8032790:	d816      	bhi.n	80327c0 <StrRFMMode+0x3c>
 8032792:	a201      	add	r2, pc, #4	; (adr r2, 8032798 <StrRFMMode+0x14>)
 8032794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032798:	080327ad 	.word	0x080327ad
 803279c:	080327b1 	.word	0x080327b1
 80327a0:	080327b5 	.word	0x080327b5
 80327a4:	080327b9 	.word	0x080327b9
 80327a8:	080327bd 	.word	0x080327bd
	{
	case RFMModeNormal:		return "[Normal]";
 80327ac:	4b08      	ldr	r3, [pc, #32]	; (80327d0 <StrRFMMode+0x4c>)
 80327ae:	e008      	b.n	80327c2 <StrRFMMode+0x3e>
	case RFMModeTx:			return "[Tx]";
 80327b0:	4b08      	ldr	r3, [pc, #32]	; (80327d4 <StrRFMMode+0x50>)
 80327b2:	e006      	b.n	80327c2 <StrRFMMode+0x3e>
	case RFMModeRx:			return "[Rx]";
 80327b4:	4b08      	ldr	r3, [pc, #32]	; (80327d8 <StrRFMMode+0x54>)
 80327b6:	e004      	b.n	80327c2 <StrRFMMode+0x3e>
	case RFMModeOcc:		return "[Occ]";
 80327b8:	4b08      	ldr	r3, [pc, #32]	; (80327dc <StrRFMMode+0x58>)
 80327ba:	e002      	b.n	80327c2 <StrRFMMode+0x3e>
	case RFMModeUpgr:		return "[Upgr]";
 80327bc:	4b08      	ldr	r3, [pc, #32]	; (80327e0 <StrRFMMode+0x5c>)
 80327be:	e000      	b.n	80327c2 <StrRFMMode+0x3e>
	default:				return "[N/A]";
 80327c0:	4b08      	ldr	r3, [pc, #32]	; (80327e4 <StrRFMMode+0x60>)
	}
}
 80327c2:	4618      	mov	r0, r3
 80327c4:	370c      	adds	r7, #12
 80327c6:	46bd      	mov	sp, r7
 80327c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80327cc:	4770      	bx	lr
 80327ce:	bf00      	nop
 80327d0:	0803b144 	.word	0x0803b144
 80327d4:	0803b150 	.word	0x0803b150
 80327d8:	0803b158 	.word	0x0803b158
 80327dc:	0803b160 	.word	0x0803b160
 80327e0:	0803b168 	.word	0x0803b168
 80327e4:	0803b170 	.word	0x0803b170

080327e8 <GetRFTID>:

//========================================================================
int	GetRFTID( void )	//	송신기 ID
//========================================================================
{
 80327e8:	b480      	push	{r7}
 80327ea:	af00      	add	r7, sp, #0
	//	송신기 ID 얻기.
	//========================================================================
	//	송신기 #1 / #2
	//	ChTx_1			=	8,			//	* CH8 : 송신기#1 - (Car No : 11)
	//	ChTx_2			=	9,			//	* CH9 : 송신기#2 - (Car No : 12)
	if ( g_nCarNo == RFTCarNo1 ) return 1;			//	11
 80327ec:	4b08      	ldr	r3, [pc, #32]	; (8032810 <GetRFTID+0x28>)
 80327ee:	681b      	ldr	r3, [r3, #0]
 80327f0:	2b0b      	cmp	r3, #11
 80327f2:	d101      	bne.n	80327f8 <GetRFTID+0x10>
 80327f4:	2301      	movs	r3, #1
 80327f6:	e006      	b.n	8032806 <GetRFTID+0x1e>
	else if ( g_nCarNo == RFTCarNo2 ) return 2;		//	12
 80327f8:	4b05      	ldr	r3, [pc, #20]	; (8032810 <GetRFTID+0x28>)
 80327fa:	681b      	ldr	r3, [r3, #0]
 80327fc:	2b0c      	cmp	r3, #12
 80327fe:	d101      	bne.n	8032804 <GetRFTID+0x1c>
 8032800:	2302      	movs	r3, #2
 8032802:	e000      	b.n	8032806 <GetRFTID+0x1e>
	else return 0;
 8032804:	2300      	movs	r3, #0
	//========================================================================
}
 8032806:	4618      	mov	r0, r3
 8032808:	46bd      	mov	sp, r7
 803280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803280e:	4770      	bx	lr
 8032810:	20002330 	.word	0x20002330

08032814 <GetChRx>:

//========================================================================
int GetChRx( void )
//========================================================================
{
 8032814:	b580      	push	{r7, lr}
 8032816:	af00      	add	r7, sp, #0
	//	Get Self Rx Channel

	//========================================================================
#if defined(USE_CH_ISO_DEV)

	if ( GetDevID() == DevRF900T )
 8032818:	f7ff ff4a 	bl	80326b0 <GetDevID>
 803281c:	4603      	mov	r3, r0
 803281e:	2b02      	cmp	r3, #2
 8032820:	d10c      	bne.n	803283c <GetChRx+0x28>
	{
		//========================================================================
		//	송신기 #1 / #2
		//	ChTx_1			=	8,				//	* CH8 : 송신기#1 - (Car No : 11)
		//	ChTx_2			=	ChTx_1+ChGap,	//	* CH9 : 송신기#2 - (Car No : 12)
		return ChTx_1 + ( ( g_nCarNo + 1) % 2 )*ChGap;	// 현재 호차 채널
 8032822:	4b15      	ldr	r3, [pc, #84]	; (8032878 <GetChRx+0x64>)
 8032824:	681b      	ldr	r3, [r3, #0]
 8032826:	3301      	adds	r3, #1
 8032828:	2b00      	cmp	r3, #0
 803282a:	f003 0301 	and.w	r3, r3, #1
 803282e:	bfb8      	it	lt
 8032830:	425b      	neglt	r3, r3
 8032832:	009a      	lsls	r2, r3, #2
 8032834:	4b11      	ldr	r3, [pc, #68]	; (803287c <GetChRx+0x68>)
 8032836:	681b      	ldr	r3, [r3, #0]
 8032838:	4413      	add	r3, r2
 803283a:	e01b      	b.n	8032874 <GetChRx+0x60>
		//========================================================================
	}
	else if ( GetDevID() == DevRF900M )
 803283c:	f7ff ff38 	bl	80326b0 <GetDevID>
 8032840:	4603      	mov	r3, r0
 8032842:	2b01      	cmp	r3, #1
 8032844:	d116      	bne.n	8032874 <GetChRx+0x60>
	{
		if( g_nRFMode == RFMode2 )//#if defined(USE_COMM_MODE_CH_GRP)
 8032846:	4b0e      	ldr	r3, [pc, #56]	; (8032880 <GetChRx+0x6c>)
 8032848:	681b      	ldr	r3, [r3, #0]
 803284a:	2b02      	cmp	r3, #2
 803284c:	d10a      	bne.n	8032864 <GetChRx+0x50>
		{
			//	그룹주파수 모드. - [ 1, 2 ] [ 3, 4 ] ...
			return ChTS1_1 + (( g_nCarNo - 1 )/2)*ChGap;	// 현재 호차 채널
 803284e:	4b0a      	ldr	r3, [pc, #40]	; (8032878 <GetChRx+0x64>)
 8032850:	681b      	ldr	r3, [r3, #0]
 8032852:	3b01      	subs	r3, #1
 8032854:	0fda      	lsrs	r2, r3, #31
 8032856:	4413      	add	r3, r2
 8032858:	105b      	asrs	r3, r3, #1
 803285a:	009a      	lsls	r2, r3, #2
 803285c:	4b09      	ldr	r3, [pc, #36]	; (8032884 <GetChRx+0x70>)
 803285e:	681b      	ldr	r3, [r3, #0]
 8032860:	4413      	add	r3, r2
 8032862:	e007      	b.n	8032874 <GetChRx+0x60>
			//	ChTS1_2			=	12,			//	* CH12 : 1편성 ( 2호차 )
			//
			//		...
			//
			//	ChTS1_10		=	20,			//	* CH20 : 1편성 ( 10호차 )
			return ChTS1_1 + ( g_nCarNo - 1 )*ChGap;	// 현재 호차 채널
 8032864:	4b04      	ldr	r3, [pc, #16]	; (8032878 <GetChRx+0x64>)
 8032866:	681b      	ldr	r3, [r3, #0]
 8032868:	3b01      	subs	r3, #1
 803286a:	009a      	lsls	r2, r3, #2
 803286c:	4b05      	ldr	r3, [pc, #20]	; (8032884 <GetChRx+0x70>)
 803286e:	681b      	ldr	r3, [r3, #0]
 8032870:	4413      	add	r3, r2
 8032872:	e7ff      	b.n	8032874 <GetChRx+0x60>
	//	CH1 : 1, 3, 5
	//	CH2 :  2, 4, 6
	return ChTS1_1 + g_idxTrainSet * 2 + ( ( g_nCarNo + 1 ) % 2 );	// 현재 호차 채널
#endif
	//========================================================================
}
 8032874:	4618      	mov	r0, r3
 8032876:	bd80      	pop	{r7, pc}
 8032878:	20002330 	.word	0x20002330
 803287c:	200004f4 	.word	0x200004f4
 8032880:	20002344 	.word	0x20002344
 8032884:	200004fc 	.word	0x200004fc

08032888 <GetChNearRFT>:


//========================================================================
int		GetChNearRFT	( int nMinRSSI )			//	가장 가까운 송신기 채널.
//========================================================================
{
 8032888:	b480      	push	{r7}
 803288a:	b087      	sub	sp, #28
 803288c:	af00      	add	r7, sp, #0
 803288e:	6078      	str	r0, [r7, #4]
	int nCh = 0;		//	Default
 8032890:	2300      	movs	r3, #0
 8032892:	617b      	str	r3, [r7, #20]

	//	가장가까운 송신기 검색.
	int nMaxRSSI = 0;
 8032894:	2300      	movs	r3, #0
 8032896:	613b      	str	r3, [r7, #16]
	for ( int idx = 11; idx <= 12; idx++ )			//	송신기 채널 검색.
 8032898:	230b      	movs	r3, #11
 803289a:	60fb      	str	r3, [r7, #12]
 803289c:	e027      	b.n	80328ee <GetChNearRFT+0x66>
	{
		//	Car #1 ~ #10
		if ( g_devStat[idx].nRSSI > nMaxRSSI )
 803289e:	491c      	ldr	r1, [pc, #112]	; (8032910 <GetChNearRFT+0x88>)
 80328a0:	68fa      	ldr	r2, [r7, #12]
 80328a2:	4613      	mov	r3, r2
 80328a4:	00db      	lsls	r3, r3, #3
 80328a6:	4413      	add	r3, r2
 80328a8:	009b      	lsls	r3, r3, #2
 80328aa:	4413      	add	r3, r2
 80328ac:	440b      	add	r3, r1
 80328ae:	3318      	adds	r3, #24
 80328b0:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80328b4:	693a      	ldr	r2, [r7, #16]
 80328b6:	429a      	cmp	r2, r3
 80328b8:	da16      	bge.n	80328e8 <GetChNearRFT+0x60>
		{
			nCh = g_devStat[idx].stat.nChRx;		//	채널 설정.
 80328ba:	4915      	ldr	r1, [pc, #84]	; (8032910 <GetChNearRFT+0x88>)
 80328bc:	68fa      	ldr	r2, [r7, #12]
 80328be:	4613      	mov	r3, r2
 80328c0:	00db      	lsls	r3, r3, #3
 80328c2:	4413      	add	r3, r2
 80328c4:	009b      	lsls	r3, r3, #2
 80328c6:	4413      	add	r3, r2
 80328c8:	440b      	add	r3, r1
 80328ca:	330a      	adds	r3, #10
 80328cc:	781b      	ldrb	r3, [r3, #0]
 80328ce:	617b      	str	r3, [r7, #20]
			nMaxRSSI = g_devStat[idx].nRSSI;
 80328d0:	490f      	ldr	r1, [pc, #60]	; (8032910 <GetChNearRFT+0x88>)
 80328d2:	68fa      	ldr	r2, [r7, #12]
 80328d4:	4613      	mov	r3, r2
 80328d6:	00db      	lsls	r3, r3, #3
 80328d8:	4413      	add	r3, r2
 80328da:	009b      	lsls	r3, r3, #2
 80328dc:	4413      	add	r3, r2
 80328de:	440b      	add	r3, r1
 80328e0:	3318      	adds	r3, #24
 80328e2:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80328e6:	613b      	str	r3, [r7, #16]
	for ( int idx = 11; idx <= 12; idx++ )			//	송신기 채널 검색.
 80328e8:	68fb      	ldr	r3, [r7, #12]
 80328ea:	3301      	adds	r3, #1
 80328ec:	60fb      	str	r3, [r7, #12]
 80328ee:	68fb      	ldr	r3, [r7, #12]
 80328f0:	2b0c      	cmp	r3, #12
 80328f2:	ddd4      	ble.n	803289e <GetChNearRFT+0x16>
		}
	}

	if ( nMinRSSI > nMaxRSSI )
 80328f4:	687a      	ldr	r2, [r7, #4]
 80328f6:	693b      	ldr	r3, [r7, #16]
 80328f8:	429a      	cmp	r2, r3
 80328fa:	dd01      	ble.n	8032900 <GetChNearRFT+0x78>
	{
		//	RSSI값이 한계 이상 낮은경우 선택 X
		nCh = 0;
 80328fc:	2300      	movs	r3, #0
 80328fe:	617b      	str	r3, [r7, #20]
	}

	return nCh;
 8032900:	697b      	ldr	r3, [r7, #20]
}
 8032902:	4618      	mov	r0, r3
 8032904:	371c      	adds	r7, #28
 8032906:	46bd      	mov	sp, r7
 8032908:	f85d 7b04 	ldr.w	r7, [sp], #4
 803290c:	4770      	bx	lr
 803290e:	bf00      	nop
 8032910:	2000234c 	.word	0x2000234c

08032914 <GetChNearRFM>:

//========================================================================
int		GetChNearRFM	( void )			//	가장 가까운 수신기 채널.
//========================================================================
{
 8032914:	b480      	push	{r7}
 8032916:	b085      	sub	sp, #20
 8032918:	af00      	add	r7, sp, #0
	int nCh = ChTS1_1;		//	Default
 803291a:	4b1d      	ldr	r3, [pc, #116]	; (8032990 <GetChNearRFM+0x7c>)
 803291c:	681b      	ldr	r3, [r3, #0]
 803291e:	60fb      	str	r3, [r7, #12]

	//	가장가까운 호차 검색.
	int nMaxRSSI = 0;
 8032920:	2300      	movs	r3, #0
 8032922:	60bb      	str	r3, [r7, #8]
	for ( int idx = 1; idx <= 10; idx++ )
 8032924:	2301      	movs	r3, #1
 8032926:	607b      	str	r3, [r7, #4]
 8032928:	e027      	b.n	803297a <GetChNearRFM+0x66>
	{
		//	Car #1 ~ #10
		if ( g_devStat[idx].nRSSI > nMaxRSSI )
 803292a:	491a      	ldr	r1, [pc, #104]	; (8032994 <GetChNearRFM+0x80>)
 803292c:	687a      	ldr	r2, [r7, #4]
 803292e:	4613      	mov	r3, r2
 8032930:	00db      	lsls	r3, r3, #3
 8032932:	4413      	add	r3, r2
 8032934:	009b      	lsls	r3, r3, #2
 8032936:	4413      	add	r3, r2
 8032938:	440b      	add	r3, r1
 803293a:	3318      	adds	r3, #24
 803293c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8032940:	68ba      	ldr	r2, [r7, #8]
 8032942:	429a      	cmp	r2, r3
 8032944:	da16      	bge.n	8032974 <GetChNearRFM+0x60>
		{
			nCh = g_devStat[idx].stat.nChRx;		//	채널 설정.
 8032946:	4913      	ldr	r1, [pc, #76]	; (8032994 <GetChNearRFM+0x80>)
 8032948:	687a      	ldr	r2, [r7, #4]
 803294a:	4613      	mov	r3, r2
 803294c:	00db      	lsls	r3, r3, #3
 803294e:	4413      	add	r3, r2
 8032950:	009b      	lsls	r3, r3, #2
 8032952:	4413      	add	r3, r2
 8032954:	440b      	add	r3, r1
 8032956:	330a      	adds	r3, #10
 8032958:	781b      	ldrb	r3, [r3, #0]
 803295a:	60fb      	str	r3, [r7, #12]
			nMaxRSSI = g_devStat[idx].nRSSI;
 803295c:	490d      	ldr	r1, [pc, #52]	; (8032994 <GetChNearRFM+0x80>)
 803295e:	687a      	ldr	r2, [r7, #4]
 8032960:	4613      	mov	r3, r2
 8032962:	00db      	lsls	r3, r3, #3
 8032964:	4413      	add	r3, r2
 8032966:	009b      	lsls	r3, r3, #2
 8032968:	4413      	add	r3, r2
 803296a:	440b      	add	r3, r1
 803296c:	3318      	adds	r3, #24
 803296e:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8032972:	60bb      	str	r3, [r7, #8]
	for ( int idx = 1; idx <= 10; idx++ )
 8032974:	687b      	ldr	r3, [r7, #4]
 8032976:	3301      	adds	r3, #1
 8032978:	607b      	str	r3, [r7, #4]
 803297a:	687b      	ldr	r3, [r7, #4]
 803297c:	2b0a      	cmp	r3, #10
 803297e:	ddd4      	ble.n	803292a <GetChNearRFM+0x16>
		}
	}

	return nCh;
 8032980:	68fb      	ldr	r3, [r7, #12]
}
 8032982:	4618      	mov	r0, r3
 8032984:	3714      	adds	r7, #20
 8032986:	46bd      	mov	sp, r7
 8032988:	f85d 7b04 	ldr.w	r7, [sp], #4
 803298c:	4770      	bx	lr
 803298e:	bf00      	nop
 8032990:	200004fc 	.word	0x200004fc
 8032994:	2000234c 	.word	0x2000234c

08032998 <SetChPA>:
int		g_nChPA	=	_ChTS1_1;		//	Default

//========================================================================
void	SetChPA( int nCh )
//========================================================================
{
 8032998:	b480      	push	{r7}
 803299a:	b083      	sub	sp, #12
 803299c:	af00      	add	r7, sp, #0
 803299e:	6078      	str	r0, [r7, #4]
	//	방송채널 설정.
	g_nChPA	= nCh;
 80329a0:	4a04      	ldr	r2, [pc, #16]	; (80329b4 <SetChPA+0x1c>)
 80329a2:	687b      	ldr	r3, [r7, #4]
 80329a4:	6013      	str	r3, [r2, #0]
}
 80329a6:	bf00      	nop
 80329a8:	370c      	adds	r7, #12
 80329aa:	46bd      	mov	sp, r7
 80329ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80329b0:	4770      	bx	lr
 80329b2:	bf00      	nop
 80329b4:	20000bf0 	.word	0x20000bf0

080329b8 <GetChPA>:

//========================================================================
int		GetChPA( void )
//========================================================================
{
 80329b8:	b480      	push	{r7}
 80329ba:	af00      	add	r7, sp, #0
	//	방송채널 설정.
	return g_nChPA;
 80329bc:	4b03      	ldr	r3, [pc, #12]	; (80329cc <GetChPA+0x14>)
 80329be:	681b      	ldr	r3, [r3, #0]
}
 80329c0:	4618      	mov	r0, r3
 80329c2:	46bd      	mov	sp, r7
 80329c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80329c8:	4770      	bx	lr
 80329ca:	bf00      	nop
 80329cc:	20000bf0 	.word	0x20000bf0

080329d0 <GetCh2Car>:

//========================================================================
int		GetCh2Car( int nCh )	//	채널 -> 호차정보 변환.
//========================================================================
{
 80329d0:	b480      	push	{r7}
 80329d2:	b085      	sub	sp, #20
 80329d4:	af00      	add	r7, sp, #0
 80329d6:	6078      	str	r0, [r7, #4]
	//	채널 -> 호차정보.
	int nCar;
	if ( nCh == ChTx_1 )		nCar = RFTCarNo1;	//	송신기#1
 80329d8:	4b10      	ldr	r3, [pc, #64]	; (8032a1c <GetCh2Car+0x4c>)
 80329da:	681b      	ldr	r3, [r3, #0]
 80329dc:	687a      	ldr	r2, [r7, #4]
 80329de:	429a      	cmp	r2, r3
 80329e0:	d102      	bne.n	80329e8 <GetCh2Car+0x18>
 80329e2:	230b      	movs	r3, #11
 80329e4:	60fb      	str	r3, [r7, #12]
 80329e6:	e011      	b.n	8032a0c <GetCh2Car+0x3c>
	else if ( nCh == ChTx_2 )	nCar = RFTCarNo2;	//	송신기#2
 80329e8:	4b0d      	ldr	r3, [pc, #52]	; (8032a20 <GetCh2Car+0x50>)
 80329ea:	681b      	ldr	r3, [r3, #0]
 80329ec:	687a      	ldr	r2, [r7, #4]
 80329ee:	429a      	cmp	r2, r3
 80329f0:	d102      	bne.n	80329f8 <GetCh2Car+0x28>
 80329f2:	230c      	movs	r3, #12
 80329f4:	60fb      	str	r3, [r7, #12]
 80329f6:	e009      	b.n	8032a0c <GetCh2Car+0x3c>
	else
	{
		//	ChTS1_1 - 21	:	1호차.
		//	1 ~ 10호차.
		nCar = ( nCh - ChTS1_1 ) / ChGap + 1;
 80329f8:	4b0a      	ldr	r3, [pc, #40]	; (8032a24 <GetCh2Car+0x54>)
 80329fa:	681b      	ldr	r3, [r3, #0]
 80329fc:	687a      	ldr	r2, [r7, #4]
 80329fe:	1ad3      	subs	r3, r2, r3
 8032a00:	2b00      	cmp	r3, #0
 8032a02:	da00      	bge.n	8032a06 <GetCh2Car+0x36>
 8032a04:	3303      	adds	r3, #3
 8032a06:	109b      	asrs	r3, r3, #2
 8032a08:	3301      	adds	r3, #1
 8032a0a:	60fb      	str	r3, [r7, #12]
	}

	return nCar;
 8032a0c:	68fb      	ldr	r3, [r7, #12]
}
 8032a0e:	4618      	mov	r0, r3
 8032a10:	3714      	adds	r7, #20
 8032a12:	46bd      	mov	sp, r7
 8032a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a18:	4770      	bx	lr
 8032a1a:	bf00      	nop
 8032a1c:	200004f4 	.word	0x200004f4
 8032a20:	200004f8 	.word	0x200004f8
 8032a24:	200004fc 	.word	0x200004fc

08032a28 <SetChPARFT>:
int		g_nChRFT	=	0;		//	Default

//========================================================================
void	SetChPARFT( int nCh )	//	가까운 송신기 채널(방송/통화용) 설정.
//========================================================================
{
 8032a28:	b480      	push	{r7}
 8032a2a:	b083      	sub	sp, #12
 8032a2c:	af00      	add	r7, sp, #0
 8032a2e:	6078      	str	r0, [r7, #4]
	//	방송채널 설정.
	g_nChRFT	= nCh;
 8032a30:	4a04      	ldr	r2, [pc, #16]	; (8032a44 <SetChPARFT+0x1c>)
 8032a32:	687b      	ldr	r3, [r7, #4]
 8032a34:	6013      	str	r3, [r2, #0]
}
 8032a36:	bf00      	nop
 8032a38:	370c      	adds	r7, #12
 8032a3a:	46bd      	mov	sp, r7
 8032a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a40:	4770      	bx	lr
 8032a42:	bf00      	nop
 8032a44:	20002530 	.word	0x20002530

08032a48 <GetChPARFT>:

//========================================================================
int		GetChPARFT( void )		//	가까운 송신기 채널(방송/통화용) 설정.
//========================================================================
{
 8032a48:	b480      	push	{r7}
 8032a4a:	af00      	add	r7, sp, #0
	//	방송채널 설정.
	return g_nChRFT;
 8032a4c:	4b03      	ldr	r3, [pc, #12]	; (8032a5c <GetChPARFT+0x14>)
 8032a4e:	681b      	ldr	r3, [r3, #0]
}
 8032a50:	4618      	mov	r0, r3
 8032a52:	46bd      	mov	sp, r7
 8032a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a58:	4770      	bx	lr
 8032a5a:	bf00      	nop
 8032a5c:	20002530 	.word	0x20002530

08032a60 <SetChRFMUp>:
int		g_nIdxRouteFindNext		=	0;	//	Next호차 Find Index / Route Rsp 수신시 Reset

//========================================================================
void	SetChRFMUp( int nCh )	//	가까운 수신기 채널 ( Up )
//========================================================================
{
 8032a60:	b480      	push	{r7}
 8032a62:	b083      	sub	sp, #12
 8032a64:	af00      	add	r7, sp, #0
 8032a66:	6078      	str	r0, [r7, #4]
	//	방송채널 설정.
	g_nChRFMUp	= nCh;
 8032a68:	4a04      	ldr	r2, [pc, #16]	; (8032a7c <SetChRFMUp+0x1c>)
 8032a6a:	687b      	ldr	r3, [r7, #4]
 8032a6c:	6013      	str	r3, [r2, #0]
}
 8032a6e:	bf00      	nop
 8032a70:	370c      	adds	r7, #12
 8032a72:	46bd      	mov	sp, r7
 8032a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a78:	4770      	bx	lr
 8032a7a:	bf00      	nop
 8032a7c:	20002534 	.word	0x20002534

08032a80 <GetChRFMUp>:

//========================================================================
int		GetChRFMUp( void )		//	가까운 수신기 채널 ( Up )
//========================================================================
{
 8032a80:	b480      	push	{r7}
 8032a82:	af00      	add	r7, sp, #0
	//	방송채널 설정.
	return g_nChRFMUp;
 8032a84:	4b03      	ldr	r3, [pc, #12]	; (8032a94 <GetChRFMUp+0x14>)
 8032a86:	681b      	ldr	r3, [r3, #0]
}
 8032a88:	4618      	mov	r0, r3
 8032a8a:	46bd      	mov	sp, r7
 8032a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a90:	4770      	bx	lr
 8032a92:	bf00      	nop
 8032a94:	20002534 	.word	0x20002534

08032a98 <SetChRFMDown>:

//========================================================================
void	SetChRFMDown( int nCh )	//	가까운 수신기 채널 ( Down )
//========================================================================
{
 8032a98:	b480      	push	{r7}
 8032a9a:	b083      	sub	sp, #12
 8032a9c:	af00      	add	r7, sp, #0
 8032a9e:	6078      	str	r0, [r7, #4]
	//	방송채널 설정.
	g_nChRFMDown	= nCh;
 8032aa0:	4a04      	ldr	r2, [pc, #16]	; (8032ab4 <SetChRFMDown+0x1c>)
 8032aa2:	687b      	ldr	r3, [r7, #4]
 8032aa4:	6013      	str	r3, [r2, #0]
}
 8032aa6:	bf00      	nop
 8032aa8:	370c      	adds	r7, #12
 8032aaa:	46bd      	mov	sp, r7
 8032aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032ab0:	4770      	bx	lr
 8032ab2:	bf00      	nop
 8032ab4:	20002538 	.word	0x20002538

08032ab8 <GetChRFMDown>:

//========================================================================
int		GetChRFMDown( void )	//	가까운 수신기 채널 ( Down )
//========================================================================
{
 8032ab8:	b480      	push	{r7}
 8032aba:	af00      	add	r7, sp, #0
	//	방송채널 설정.
	return g_nChRFMDown;
 8032abc:	4b03      	ldr	r3, [pc, #12]	; (8032acc <GetChRFMDown+0x14>)
 8032abe:	681b      	ldr	r3, [r3, #0]
}
 8032ac0:	4618      	mov	r0, r3
 8032ac2:	46bd      	mov	sp, r7
 8032ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032ac8:	4770      	bx	lr
 8032aca:	bf00      	nop
 8032acc:	20002538 	.word	0x20002538

08032ad0 <LoadTrainSetIdx>:
#include "eeprom.h"    //  EEPROM

//========================================================================
int		LoadTrainSetIdx	( void )
//========================================================================
{
 8032ad0:	b580      	push	{r7, lr}
 8032ad2:	b084      	sub	sp, #16
 8032ad4:	af02      	add	r7, sp, #8
    uint8_t     idxTrainSet = 0;
 8032ad6:	2300      	movs	r3, #0
 8032ad8:	71fb      	strb	r3, [r7, #7]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032ada:	2302      	movs	r3, #2
 8032adc:	2202      	movs	r2, #2
 8032ade:	21a0      	movs	r1, #160	; 0xa0
 8032ae0:	481e      	ldr	r0, [pc, #120]	; (8032b5c <LoadTrainSetIdx+0x8c>)
 8032ae2:	f7f1 fac9 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032ae6:	4603      	mov	r3, r0
 8032ae8:	2b00      	cmp	r3, #0
 8032aea:	d008      	beq.n	8032afe <LoadTrainSetIdx+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032aec:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8032af0:	491b      	ldr	r1, [pc, #108]	; (8032b60 <LoadTrainSetIdx+0x90>)
 8032af2:	481c      	ldr	r0, [pc, #112]	; (8032b64 <LoadTrainSetIdx+0x94>)
 8032af4:	f004 fcd4 	bl	80374a0 <iprintf>

        return -1;
 8032af8:	f04f 33ff 	mov.w	r3, #4294967295
 8032afc:	e029      	b.n	8032b52 <LoadTrainSetIdx+0x82>
    }

//    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x10, (uint8_t *)&idxTrainSet, 1 );
    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPTrainSet, (uint8_t *)&idxTrainSet, 1 );
 8032afe:	1dfb      	adds	r3, r7, #7
 8032b00:	2201      	movs	r2, #1
 8032b02:	9200      	str	r2, [sp, #0]
 8032b04:	2210      	movs	r2, #16
 8032b06:	21a0      	movs	r1, #160	; 0xa0
 8032b08:	4814      	ldr	r0, [pc, #80]	; (8032b5c <LoadTrainSetIdx+0x8c>)
 8032b0a:	f7fe faeb 	bl	80310e4 <M24_HAL_ReadBytes>

    if ( GetDbg() > 0 )
 8032b0e:	f7fe f9f7 	bl	8030f00 <GetDbg>
 8032b12:	4603      	mov	r3, r0
 8032b14:	2b00      	cmp	r3, #0
 8032b16:	dd06      	ble.n	8032b26 <LoadTrainSetIdx+0x56>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, idxTrainSet );
 8032b18:	79fb      	ldrb	r3, [r7, #7]
 8032b1a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8032b1e:	4910      	ldr	r1, [pc, #64]	; (8032b60 <LoadTrainSetIdx+0x90>)
 8032b20:	4811      	ldr	r0, [pc, #68]	; (8032b68 <LoadTrainSetIdx+0x98>)
 8032b22:	f004 fcbd 	bl	80374a0 <iprintf>

    //========================================================================
#if defined(USE_ODD_TS_CH_SHIFT)
    if( (idxTrainSet%2) == 1 )
 8032b26:	79fb      	ldrb	r3, [r7, #7]
 8032b28:	f003 0301 	and.w	r3, r3, #1
 8032b2c:	b2db      	uxtb	r3, r3
 8032b2e:	2b00      	cmp	r3, #0
 8032b30:	d00e      	beq.n	8032b50 <LoadTrainSetIdx+0x80>
    {
    	//	홀수 편성 채널 ( Shift ChGap/2 )
    	ChTx_1		=	ChTx_1 + (ChGap/2);
 8032b32:	4b0e      	ldr	r3, [pc, #56]	; (8032b6c <LoadTrainSetIdx+0x9c>)
 8032b34:	681b      	ldr	r3, [r3, #0]
 8032b36:	3302      	adds	r3, #2
 8032b38:	4a0c      	ldr	r2, [pc, #48]	; (8032b6c <LoadTrainSetIdx+0x9c>)
 8032b3a:	6013      	str	r3, [r2, #0]
    	ChTx_2		=	ChTx_2 + (ChGap/2);
 8032b3c:	4b0c      	ldr	r3, [pc, #48]	; (8032b70 <LoadTrainSetIdx+0xa0>)
 8032b3e:	681b      	ldr	r3, [r3, #0]
 8032b40:	3302      	adds	r3, #2
 8032b42:	4a0b      	ldr	r2, [pc, #44]	; (8032b70 <LoadTrainSetIdx+0xa0>)
 8032b44:	6013      	str	r3, [r2, #0]
        ChTS1_1		= 	ChTS1_1 + (ChGap/2);
 8032b46:	4b0b      	ldr	r3, [pc, #44]	; (8032b74 <LoadTrainSetIdx+0xa4>)
 8032b48:	681b      	ldr	r3, [r3, #0]
 8032b4a:	3302      	adds	r3, #2
 8032b4c:	4a09      	ldr	r2, [pc, #36]	; (8032b74 <LoadTrainSetIdx+0xa4>)
 8032b4e:	6013      	str	r3, [r2, #0]
    }
#endif
    //========================================================================


    return idxTrainSet;
 8032b50:	79fb      	ldrb	r3, [r7, #7]
}
 8032b52:	4618      	mov	r0, r3
 8032b54:	3708      	adds	r7, #8
 8032b56:	46bd      	mov	sp, r7
 8032b58:	bd80      	pop	{r7, pc}
 8032b5a:	bf00      	nop
 8032b5c:	20000e2c 	.word	0x20000e2c
 8032b60:	080416c0 	.word	0x080416c0
 8032b64:	0803b178 	.word	0x0803b178
 8032b68:	0803b190 	.word	0x0803b190
 8032b6c:	200004f4 	.word	0x200004f4
 8032b70:	200004f8 	.word	0x200004f8
 8032b74:	200004fc 	.word	0x200004fc

08032b78 <GetTrainSetIdx>:


//========================================================================
int		GetTrainSetIdx		( void )
//========================================================================
{
 8032b78:	b580      	push	{r7, lr}
 8032b7a:	af00      	add	r7, sp, #0
	static int s_bOnce 			=	0;

	if ( s_bOnce == 0 )
 8032b7c:	4b07      	ldr	r3, [pc, #28]	; (8032b9c <GetTrainSetIdx+0x24>)
 8032b7e:	681b      	ldr	r3, [r3, #0]
 8032b80:	2b00      	cmp	r3, #0
 8032b82:	d107      	bne.n	8032b94 <GetTrainSetIdx+0x1c>
	{
		//	초기로딩시 I2C에서 Load
		g_idxTrainSet = LoadTrainSetIdx();
 8032b84:	f7ff ffa4 	bl	8032ad0 <LoadTrainSetIdx>
 8032b88:	4603      	mov	r3, r0
 8032b8a:	4a05      	ldr	r2, [pc, #20]	; (8032ba0 <GetTrainSetIdx+0x28>)
 8032b8c:	6013      	str	r3, [r2, #0]
		s_bOnce = 1;
 8032b8e:	4b03      	ldr	r3, [pc, #12]	; (8032b9c <GetTrainSetIdx+0x24>)
 8032b90:	2201      	movs	r2, #1
 8032b92:	601a      	str	r2, [r3, #0]
	}

	return g_idxTrainSet;
 8032b94:	4b02      	ldr	r3, [pc, #8]	; (8032ba0 <GetTrainSetIdx+0x28>)
 8032b96:	681b      	ldr	r3, [r3, #0]
}
 8032b98:	4618      	mov	r0, r3
 8032b9a:	bd80      	pop	{r7, pc}
 8032b9c:	20002904 	.word	0x20002904
 8032ba0:	2000232c 	.word	0x2000232c

08032ba4 <SetTrainSetIdx>:


//========================================================================
void	SetTrainSetIdx	( int idxTrainSet )
//========================================================================
{
 8032ba4:	b580      	push	{r7, lr}
 8032ba6:	b084      	sub	sp, #16
 8032ba8:	af02      	add	r7, sp, #8
 8032baa:	6078      	str	r0, [r7, #4]
	g_idxTrainSet = idxTrainSet;
 8032bac:	687b      	ldr	r3, [r7, #4]
 8032bae:	4a14      	ldr	r2, [pc, #80]	; (8032c00 <SetTrainSetIdx+0x5c>)
 8032bb0:	6013      	str	r3, [r2, #0]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032bb2:	2302      	movs	r3, #2
 8032bb4:	2202      	movs	r2, #2
 8032bb6:	21a0      	movs	r1, #160	; 0xa0
 8032bb8:	4812      	ldr	r0, [pc, #72]	; (8032c04 <SetTrainSetIdx+0x60>)
 8032bba:	f7f1 fa5d 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032bbe:	4603      	mov	r3, r0
 8032bc0:	2b00      	cmp	r3, #0
 8032bc2:	d006      	beq.n	8032bd2 <SetTrainSetIdx+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032bc4:	f240 12d5 	movw	r2, #469	; 0x1d5
 8032bc8:	490f      	ldr	r1, [pc, #60]	; (8032c08 <SetTrainSetIdx+0x64>)
 8032bca:	4810      	ldr	r0, [pc, #64]	; (8032c0c <SetTrainSetIdx+0x68>)
 8032bcc:	f004 fc68 	bl	80374a0 <iprintf>

        return ;
 8032bd0:	e013      	b.n	8032bfa <SetTrainSetIdx+0x56>
    }

    if ( GetDbg() > 0 )
 8032bd2:	f7fe f995 	bl	8030f00 <GetDbg>
 8032bd6:	4603      	mov	r3, r0
 8032bd8:	2b00      	cmp	r3, #0
 8032bda:	dd06      	ble.n	8032bea <SetTrainSetIdx+0x46>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, idxTrainSet );
 8032bdc:	687b      	ldr	r3, [r7, #4]
 8032bde:	f240 12db 	movw	r2, #475	; 0x1db
 8032be2:	4909      	ldr	r1, [pc, #36]	; (8032c08 <SetTrainSetIdx+0x64>)
 8032be4:	480a      	ldr	r0, [pc, #40]	; (8032c10 <SetTrainSetIdx+0x6c>)
 8032be6:	f004 fc5b 	bl	80374a0 <iprintf>
//    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x10, (uint8_t *)&idxTrainSet, 1 );
    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPTrainSet, (uint8_t *)&idxTrainSet, 1 );
 8032bea:	1d3b      	adds	r3, r7, #4
 8032bec:	2201      	movs	r2, #1
 8032bee:	9200      	str	r2, [sp, #0]
 8032bf0:	2210      	movs	r2, #16
 8032bf2:	21a0      	movs	r1, #160	; 0xa0
 8032bf4:	4803      	ldr	r0, [pc, #12]	; (8032c04 <SetTrainSetIdx+0x60>)
 8032bf6:	f7fe fa53 	bl	80310a0 <M24_HAL_WriteBytes>
}
 8032bfa:	3708      	adds	r7, #8
 8032bfc:	46bd      	mov	sp, r7
 8032bfe:	bd80      	pop	{r7, pc}
 8032c00:	2000232c 	.word	0x2000232c
 8032c04:	20000e2c 	.word	0x20000e2c
 8032c08:	080416d0 	.word	0x080416d0
 8032c0c:	0803b178 	.word	0x0803b178
 8032c10:	0803b190 	.word	0x0803b190

08032c14 <GetRFMode>:
#if defined(USE_RF_COMM_MODE)

//========================================================================
int		GetRFMode	( void )
//========================================================================
{
 8032c14:	b580      	push	{r7, lr}
 8032c16:	b084      	sub	sp, #16
 8032c18:	af02      	add	r7, sp, #8
    uint8_t     nRFMode = 0;
 8032c1a:	2300      	movs	r3, #0
 8032c1c:	71fb      	strb	r3, [r7, #7]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032c1e:	2302      	movs	r3, #2
 8032c20:	2202      	movs	r2, #2
 8032c22:	21a0      	movs	r1, #160	; 0xa0
 8032c24:	4817      	ldr	r0, [pc, #92]	; (8032c84 <GetRFMode+0x70>)
 8032c26:	f7f1 fa27 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032c2a:	4603      	mov	r3, r0
 8032c2c:	2b00      	cmp	r3, #0
 8032c2e:	d008      	beq.n	8032c42 <GetRFMode+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032c30:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 8032c34:	4914      	ldr	r1, [pc, #80]	; (8032c88 <GetRFMode+0x74>)
 8032c36:	4815      	ldr	r0, [pc, #84]	; (8032c8c <GetRFMode+0x78>)
 8032c38:	f004 fc32 	bl	80374a0 <iprintf>

        return -1;
 8032c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8032c40:	e01c      	b.n	8032c7c <GetRFMode+0x68>
    }

    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPRFMode, (uint8_t *)&nRFMode, 1 );
 8032c42:	1dfb      	adds	r3, r7, #7
 8032c44:	2201      	movs	r2, #1
 8032c46:	9200      	str	r2, [sp, #0]
 8032c48:	2230      	movs	r2, #48	; 0x30
 8032c4a:	21a0      	movs	r1, #160	; 0xa0
 8032c4c:	480d      	ldr	r0, [pc, #52]	; (8032c84 <GetRFMode+0x70>)
 8032c4e:	f7fe fa49 	bl	80310e4 <M24_HAL_ReadBytes>

    if ( nRFMode > RFModeMax || nRFMode < 1 ) nRFMode = RFModeDefault;	//	Default Hop Man
 8032c52:	79fb      	ldrb	r3, [r7, #7]
 8032c54:	2b02      	cmp	r3, #2
 8032c56:	d802      	bhi.n	8032c5e <GetRFMode+0x4a>
 8032c58:	79fb      	ldrb	r3, [r7, #7]
 8032c5a:	2b00      	cmp	r3, #0
 8032c5c:	d101      	bne.n	8032c62 <GetRFMode+0x4e>
 8032c5e:	2301      	movs	r3, #1
 8032c60:	71fb      	strb	r3, [r7, #7]

    if ( GetDbg() > 0 )
 8032c62:	f7fe f94d 	bl	8030f00 <GetDbg>
 8032c66:	4603      	mov	r3, r0
 8032c68:	2b00      	cmp	r3, #0
 8032c6a:	dd06      	ble.n	8032c7a <GetRFMode+0x66>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, nRFMode );
 8032c6c:	79fb      	ldrb	r3, [r7, #7]
 8032c6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8032c72:	4905      	ldr	r1, [pc, #20]	; (8032c88 <GetRFMode+0x74>)
 8032c74:	4806      	ldr	r0, [pc, #24]	; (8032c90 <GetRFMode+0x7c>)
 8032c76:	f004 fc13 	bl	80374a0 <iprintf>

    return nRFMode;
 8032c7a:	79fb      	ldrb	r3, [r7, #7]
}
 8032c7c:	4618      	mov	r0, r3
 8032c7e:	3708      	adds	r7, #8
 8032c80:	46bd      	mov	sp, r7
 8032c82:	bd80      	pop	{r7, pc}
 8032c84:	20000e2c 	.word	0x20000e2c
 8032c88:	080416e0 	.word	0x080416e0
 8032c8c:	0803b178 	.word	0x0803b178
 8032c90:	0803b190 	.word	0x0803b190

08032c94 <SetRFMode>:

//========================================================================
void	SetRFMode	( int nRFMode )
//========================================================================
{
 8032c94:	b580      	push	{r7, lr}
 8032c96:	b084      	sub	sp, #16
 8032c98:	af02      	add	r7, sp, #8
 8032c9a:	6078      	str	r0, [r7, #4]
    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032c9c:	2302      	movs	r3, #2
 8032c9e:	2202      	movs	r2, #2
 8032ca0:	21a0      	movs	r1, #160	; 0xa0
 8032ca2:	4812      	ldr	r0, [pc, #72]	; (8032cec <SetRFMode+0x58>)
 8032ca4:	f7f1 f9e8 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032ca8:	4603      	mov	r3, r0
 8032caa:	2b00      	cmp	r3, #0
 8032cac:	d006      	beq.n	8032cbc <SetRFMode+0x28>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032cae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8032cb2:	490f      	ldr	r1, [pc, #60]	; (8032cf0 <SetRFMode+0x5c>)
 8032cb4:	480f      	ldr	r0, [pc, #60]	; (8032cf4 <SetRFMode+0x60>)
 8032cb6:	f004 fbf3 	bl	80374a0 <iprintf>

        return ;
 8032cba:	e013      	b.n	8032ce4 <SetRFMode+0x50>
    }

    if ( GetDbg() > 0 )
 8032cbc:	f7fe f920 	bl	8030f00 <GetDbg>
 8032cc0:	4603      	mov	r3, r0
 8032cc2:	2b00      	cmp	r3, #0
 8032cc4:	dd06      	ble.n	8032cd4 <SetRFMode+0x40>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, nRFMode );
 8032cc6:	687b      	ldr	r3, [r7, #4]
 8032cc8:	f240 2205 	movw	r2, #517	; 0x205
 8032ccc:	4908      	ldr	r1, [pc, #32]	; (8032cf0 <SetRFMode+0x5c>)
 8032cce:	480a      	ldr	r0, [pc, #40]	; (8032cf8 <SetRFMode+0x64>)
 8032cd0:	f004 fbe6 	bl	80374a0 <iprintf>

    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPRFMode, (uint8_t *)&nRFMode, 1 );
 8032cd4:	1d3b      	adds	r3, r7, #4
 8032cd6:	2201      	movs	r2, #1
 8032cd8:	9200      	str	r2, [sp, #0]
 8032cda:	2230      	movs	r2, #48	; 0x30
 8032cdc:	21a0      	movs	r1, #160	; 0xa0
 8032cde:	4803      	ldr	r0, [pc, #12]	; (8032cec <SetRFMode+0x58>)
 8032ce0:	f7fe f9de 	bl	80310a0 <M24_HAL_WriteBytes>
}
 8032ce4:	3708      	adds	r7, #8
 8032ce6:	46bd      	mov	sp, r7
 8032ce8:	bd80      	pop	{r7, pc}
 8032cea:	bf00      	nop
 8032cec:	20000e2c 	.word	0x20000e2c
 8032cf0:	080416ec 	.word	0x080416ec
 8032cf4:	0803b178 	.word	0x0803b178
 8032cf8:	0803b190 	.word	0x0803b190

08032cfc <GetManHop>:
#if defined(USE_HOP_MANUAL)

//========================================================================
int		GetManHop	( void )
//========================================================================
{
 8032cfc:	b580      	push	{r7, lr}
 8032cfe:	b084      	sub	sp, #16
 8032d00:	af02      	add	r7, sp, #8
    uint8_t     nManHop = 0;
 8032d02:	2300      	movs	r3, #0
 8032d04:	71fb      	strb	r3, [r7, #7]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032d06:	2302      	movs	r3, #2
 8032d08:	2202      	movs	r2, #2
 8032d0a:	21a0      	movs	r1, #160	; 0xa0
 8032d0c:	4816      	ldr	r0, [pc, #88]	; (8032d68 <GetManHop+0x6c>)
 8032d0e:	f7f1 f9b3 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032d12:	4603      	mov	r3, r0
 8032d14:	2b00      	cmp	r3, #0
 8032d16:	d008      	beq.n	8032d2a <GetManHop+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032d18:	f240 2216 	movw	r2, #534	; 0x216
 8032d1c:	4913      	ldr	r1, [pc, #76]	; (8032d6c <GetManHop+0x70>)
 8032d1e:	4814      	ldr	r0, [pc, #80]	; (8032d70 <GetManHop+0x74>)
 8032d20:	f004 fbbe 	bl	80374a0 <iprintf>

        return -1;
 8032d24:	f04f 33ff 	mov.w	r3, #4294967295
 8032d28:	e019      	b.n	8032d5e <GetManHop+0x62>
    }

//    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x0D, (uint8_t *)&nManHop, 1 );
    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPManHop, (uint8_t *)&nManHop, 1 );
 8032d2a:	1dfb      	adds	r3, r7, #7
 8032d2c:	2201      	movs	r2, #1
 8032d2e:	9200      	str	r2, [sp, #0]
 8032d30:	220d      	movs	r2, #13
 8032d32:	21a0      	movs	r1, #160	; 0xa0
 8032d34:	480c      	ldr	r0, [pc, #48]	; (8032d68 <GetManHop+0x6c>)
 8032d36:	f7fe f9d5 	bl	80310e4 <M24_HAL_ReadBytes>

//    if ( nManHop > 2 || nManHop < 0 ) nManHop = 0;
    if ( nManHop > 2 || nManHop < 0 ) nManHop = DEFAULT_HOP_MAN_VAL;	//	Default Hop Man
 8032d3a:	79fb      	ldrb	r3, [r7, #7]
 8032d3c:	2b02      	cmp	r3, #2
 8032d3e:	d901      	bls.n	8032d44 <GetManHop+0x48>
 8032d40:	2302      	movs	r3, #2
 8032d42:	71fb      	strb	r3, [r7, #7]

    if ( GetDbg() > 0 )
 8032d44:	f7fe f8dc 	bl	8030f00 <GetDbg>
 8032d48:	4603      	mov	r3, r0
 8032d4a:	2b00      	cmp	r3, #0
 8032d4c:	dd06      	ble.n	8032d5c <GetManHop+0x60>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, nManHop );
 8032d4e:	79fb      	ldrb	r3, [r7, #7]
 8032d50:	f240 2222 	movw	r2, #546	; 0x222
 8032d54:	4905      	ldr	r1, [pc, #20]	; (8032d6c <GetManHop+0x70>)
 8032d56:	4807      	ldr	r0, [pc, #28]	; (8032d74 <GetManHop+0x78>)
 8032d58:	f004 fba2 	bl	80374a0 <iprintf>

    return nManHop;
 8032d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8032d5e:	4618      	mov	r0, r3
 8032d60:	3708      	adds	r7, #8
 8032d62:	46bd      	mov	sp, r7
 8032d64:	bd80      	pop	{r7, pc}
 8032d66:	bf00      	nop
 8032d68:	20000e2c 	.word	0x20000e2c
 8032d6c:	080416f8 	.word	0x080416f8
 8032d70:	0803b178 	.word	0x0803b178
 8032d74:	0803b190 	.word	0x0803b190

08032d78 <SetManHop>:

//========================================================================
void	SetManHop	( int nManHop )
//========================================================================
{
 8032d78:	b580      	push	{r7, lr}
 8032d7a:	b084      	sub	sp, #16
 8032d7c:	af02      	add	r7, sp, #8
 8032d7e:	6078      	str	r0, [r7, #4]
    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032d80:	2302      	movs	r3, #2
 8032d82:	2202      	movs	r2, #2
 8032d84:	21a0      	movs	r1, #160	; 0xa0
 8032d86:	4812      	ldr	r0, [pc, #72]	; (8032dd0 <SetManHop+0x58>)
 8032d88:	f7f1 f976 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032d8c:	4603      	mov	r3, r0
 8032d8e:	2b00      	cmp	r3, #0
 8032d90:	d006      	beq.n	8032da0 <SetManHop+0x28>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032d92:	f240 222d 	movw	r2, #557	; 0x22d
 8032d96:	490f      	ldr	r1, [pc, #60]	; (8032dd4 <SetManHop+0x5c>)
 8032d98:	480f      	ldr	r0, [pc, #60]	; (8032dd8 <SetManHop+0x60>)
 8032d9a:	f004 fb81 	bl	80374a0 <iprintf>

        return ;
 8032d9e:	e013      	b.n	8032dc8 <SetManHop+0x50>
    }

    if ( GetDbg() > 0 )
 8032da0:	f7fe f8ae 	bl	8030f00 <GetDbg>
 8032da4:	4603      	mov	r3, r0
 8032da6:	2b00      	cmp	r3, #0
 8032da8:	dd06      	ble.n	8032db8 <SetManHop+0x40>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, nManHop );
 8032daa:	687b      	ldr	r3, [r7, #4]
 8032dac:	f240 2233 	movw	r2, #563	; 0x233
 8032db0:	4908      	ldr	r1, [pc, #32]	; (8032dd4 <SetManHop+0x5c>)
 8032db2:	480a      	ldr	r0, [pc, #40]	; (8032ddc <SetManHop+0x64>)
 8032db4:	f004 fb74 	bl	80374a0 <iprintf>

//    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x0D, (uint8_t *)&nManHop, 1 );
    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPManHop, (uint8_t *)&nManHop, 1 );
 8032db8:	1d3b      	adds	r3, r7, #4
 8032dba:	2201      	movs	r2, #1
 8032dbc:	9200      	str	r2, [sp, #0]
 8032dbe:	220d      	movs	r2, #13
 8032dc0:	21a0      	movs	r1, #160	; 0xa0
 8032dc2:	4803      	ldr	r0, [pc, #12]	; (8032dd0 <SetManHop+0x58>)
 8032dc4:	f7fe f96c 	bl	80310a0 <M24_HAL_WriteBytes>
}
 8032dc8:	3708      	adds	r7, #8
 8032dca:	46bd      	mov	sp, r7
 8032dcc:	bd80      	pop	{r7, pc}
 8032dce:	bf00      	nop
 8032dd0:	20000e2c 	.word	0x20000e2c
 8032dd4:	08041704 	.word	0x08041704
 8032dd8:	0803b178 	.word	0x0803b178
 8032ddc:	0803b190 	.word	0x0803b190

08032de0 <LoadCarNo>:
#endif	//	defined(USE_HOP_MANUAL)

//========================================================================
int		LoadCarNo		( void )
//========================================================================
{
 8032de0:	b580      	push	{r7, lr}
 8032de2:	b084      	sub	sp, #16
 8032de4:	af02      	add	r7, sp, #8
    uint8_t     nCarNo = 0;
 8032de6:	2300      	movs	r3, #0
 8032de8:	71fb      	strb	r3, [r7, #7]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032dea:	2302      	movs	r3, #2
 8032dec:	2202      	movs	r2, #2
 8032dee:	21a0      	movs	r1, #160	; 0xa0
 8032df0:	4815      	ldr	r0, [pc, #84]	; (8032e48 <LoadCarNo+0x68>)
 8032df2:	f7f1 f941 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032df6:	4603      	mov	r3, r0
 8032df8:	2b00      	cmp	r3, #0
 8032dfa:	d008      	beq.n	8032e0e <LoadCarNo+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032dfc:	f240 2243 	movw	r2, #579	; 0x243
 8032e00:	4912      	ldr	r1, [pc, #72]	; (8032e4c <LoadCarNo+0x6c>)
 8032e02:	4813      	ldr	r0, [pc, #76]	; (8032e50 <LoadCarNo+0x70>)
 8032e04:	f004 fb4c 	bl	80374a0 <iprintf>

        return -1;
 8032e08:	f04f 33ff 	mov.w	r3, #4294967295
 8032e0c:	e018      	b.n	8032e40 <LoadCarNo+0x60>
    }

//    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x0E, (uint8_t *)&nCarNo, 1 );
    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPCarNo, (uint8_t *)&nCarNo, 1 );
 8032e0e:	1dfb      	adds	r3, r7, #7
 8032e10:	2201      	movs	r2, #1
 8032e12:	9200      	str	r2, [sp, #0]
 8032e14:	220e      	movs	r2, #14
 8032e16:	21a0      	movs	r1, #160	; 0xa0
 8032e18:	480b      	ldr	r0, [pc, #44]	; (8032e48 <LoadCarNo+0x68>)
 8032e1a:	f7fe f963 	bl	80310e4 <M24_HAL_ReadBytes>

    if ( GetDbg() > 0 )
 8032e1e:	f7fe f86f 	bl	8030f00 <GetDbg>
 8032e22:	4603      	mov	r3, r0
 8032e24:	2b00      	cmp	r3, #0
 8032e26:	dd06      	ble.n	8032e36 <LoadCarNo+0x56>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, nCarNo );
 8032e28:	79fb      	ldrb	r3, [r7, #7]
 8032e2a:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8032e2e:	4907      	ldr	r1, [pc, #28]	; (8032e4c <LoadCarNo+0x6c>)
 8032e30:	4808      	ldr	r0, [pc, #32]	; (8032e54 <LoadCarNo+0x74>)
 8032e32:	f004 fb35 	bl	80374a0 <iprintf>

    g_nCarNo = nCarNo;
 8032e36:	79fb      	ldrb	r3, [r7, #7]
 8032e38:	461a      	mov	r2, r3
 8032e3a:	4b07      	ldr	r3, [pc, #28]	; (8032e58 <LoadCarNo+0x78>)
 8032e3c:	601a      	str	r2, [r3, #0]

    return nCarNo;
 8032e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8032e40:	4618      	mov	r0, r3
 8032e42:	3708      	adds	r7, #8
 8032e44:	46bd      	mov	sp, r7
 8032e46:	bd80      	pop	{r7, pc}
 8032e48:	20000e2c 	.word	0x20000e2c
 8032e4c:	08041710 	.word	0x08041710
 8032e50:	0803b178 	.word	0x0803b178
 8032e54:	0803b190 	.word	0x0803b190
 8032e58:	20002330 	.word	0x20002330

08032e5c <GetCarNo>:

//========================================================================
int		GetCarNo		( void )
//========================================================================
{
 8032e5c:	b580      	push	{r7, lr}
 8032e5e:	af00      	add	r7, sp, #0
	static int s_bOnce = 0;

	if ( s_bOnce == 0 )
 8032e60:	4b07      	ldr	r3, [pc, #28]	; (8032e80 <GetCarNo+0x24>)
 8032e62:	681b      	ldr	r3, [r3, #0]
 8032e64:	2b00      	cmp	r3, #0
 8032e66:	d107      	bne.n	8032e78 <GetCarNo+0x1c>
	{
		//	초기로딩시 I2C에서 Load
		g_nCarNo = LoadCarNo();
 8032e68:	f7ff ffba 	bl	8032de0 <LoadCarNo>
 8032e6c:	4603      	mov	r3, r0
 8032e6e:	4a05      	ldr	r2, [pc, #20]	; (8032e84 <GetCarNo+0x28>)
 8032e70:	6013      	str	r3, [r2, #0]
		s_bOnce = 1;
 8032e72:	4b03      	ldr	r3, [pc, #12]	; (8032e80 <GetCarNo+0x24>)
 8032e74:	2201      	movs	r2, #1
 8032e76:	601a      	str	r2, [r3, #0]
	}

	return g_nCarNo;
 8032e78:	4b02      	ldr	r3, [pc, #8]	; (8032e84 <GetCarNo+0x28>)
 8032e7a:	681b      	ldr	r3, [r3, #0]
}
 8032e7c:	4618      	mov	r0, r3
 8032e7e:	bd80      	pop	{r7, pc}
 8032e80:	20002908 	.word	0x20002908
 8032e84:	20002330 	.word	0x20002330

08032e88 <SetCarNo>:

//========================================================================
void	SetCarNo		( int nCarNo )
//========================================================================
{
 8032e88:	b580      	push	{r7, lr}
 8032e8a:	b084      	sub	sp, #16
 8032e8c:	af02      	add	r7, sp, #8
 8032e8e:	6078      	str	r0, [r7, #4]
    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032e90:	2302      	movs	r3, #2
 8032e92:	2202      	movs	r2, #2
 8032e94:	21a0      	movs	r1, #160	; 0xa0
 8032e96:	4813      	ldr	r0, [pc, #76]	; (8032ee4 <SetCarNo+0x5c>)
 8032e98:	f7f1 f8ee 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032e9c:	4603      	mov	r3, r0
 8032e9e:	2b00      	cmp	r3, #0
 8032ea0:	d006      	beq.n	8032eb0 <SetCarNo+0x28>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032ea2:	f240 2269 	movw	r2, #617	; 0x269
 8032ea6:	4910      	ldr	r1, [pc, #64]	; (8032ee8 <SetCarNo+0x60>)
 8032ea8:	4810      	ldr	r0, [pc, #64]	; (8032eec <SetCarNo+0x64>)
 8032eaa:	f004 faf9 	bl	80374a0 <iprintf>

        return ;
 8032eae:	e016      	b.n	8032ede <SetCarNo+0x56>
    }

	if ( GetDbg() > 0 )
 8032eb0:	f7fe f826 	bl	8030f00 <GetDbg>
 8032eb4:	4603      	mov	r3, r0
 8032eb6:	2b00      	cmp	r3, #0
 8032eb8:	dd06      	ble.n	8032ec8 <SetCarNo+0x40>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, nCarNo );
 8032eba:	687b      	ldr	r3, [r7, #4]
 8032ebc:	f240 226f 	movw	r2, #623	; 0x26f
 8032ec0:	4909      	ldr	r1, [pc, #36]	; (8032ee8 <SetCarNo+0x60>)
 8032ec2:	480b      	ldr	r0, [pc, #44]	; (8032ef0 <SetCarNo+0x68>)
 8032ec4:	f004 faec 	bl	80374a0 <iprintf>

	g_nCarNo = nCarNo;
 8032ec8:	687b      	ldr	r3, [r7, #4]
 8032eca:	4a0a      	ldr	r2, [pc, #40]	; (8032ef4 <SetCarNo+0x6c>)
 8032ecc:	6013      	str	r3, [r2, #0]

//    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x0E, (uint8_t *)&nCarNo, 1 );
    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPCarNo, (uint8_t *)&nCarNo, 1 );
 8032ece:	1d3b      	adds	r3, r7, #4
 8032ed0:	2201      	movs	r2, #1
 8032ed2:	9200      	str	r2, [sp, #0]
 8032ed4:	220e      	movs	r2, #14
 8032ed6:	21a0      	movs	r1, #160	; 0xa0
 8032ed8:	4802      	ldr	r0, [pc, #8]	; (8032ee4 <SetCarNo+0x5c>)
 8032eda:	f7fe f8e1 	bl	80310a0 <M24_HAL_WriteBytes>
}
 8032ede:	3708      	adds	r7, #8
 8032ee0:	46bd      	mov	sp, r7
 8032ee2:	bd80      	pop	{r7, pc}
 8032ee4:	20000e2c 	.word	0x20000e2c
 8032ee8:	0804171c 	.word	0x0804171c
 8032eec:	0803b178 	.word	0x0803b178
 8032ef0:	0803b190 	.word	0x0803b190
 8032ef4:	20002330 	.word	0x20002330

08032ef8 <GetSpkVol>:

//========================================================================
int		GetSpkVol	    ( void )
//========================================================================
{
 8032ef8:	b580      	push	{r7, lr}
 8032efa:	b084      	sub	sp, #16
 8032efc:	af02      	add	r7, sp, #8
    uint8_t     nSpkVol = 0;
 8032efe:	2300      	movs	r3, #0
 8032f00:	71fb      	strb	r3, [r7, #7]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032f02:	2302      	movs	r3, #2
 8032f04:	2202      	movs	r2, #2
 8032f06:	21a0      	movs	r1, #160	; 0xa0
 8032f08:	4811      	ldr	r0, [pc, #68]	; (8032f50 <GetSpkVol+0x58>)
 8032f0a:	f7f1 f8b5 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032f0e:	4603      	mov	r3, r0
 8032f10:	2b00      	cmp	r3, #0
 8032f12:	d008      	beq.n	8032f26 <GetSpkVol+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032f14:	f240 227f 	movw	r2, #639	; 0x27f
 8032f18:	490e      	ldr	r1, [pc, #56]	; (8032f54 <GetSpkVol+0x5c>)
 8032f1a:	480f      	ldr	r0, [pc, #60]	; (8032f58 <GetSpkVol+0x60>)
 8032f1c:	f004 fac0 	bl	80374a0 <iprintf>

        return -1;
 8032f20:	f04f 33ff 	mov.w	r3, #4294967295
 8032f24:	e00f      	b.n	8032f46 <GetSpkVol+0x4e>
    }

//    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x0F, (uint8_t *)&nSpkVol, 1 );
    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPSpkVol, (uint8_t *)&nSpkVol, 1 );
 8032f26:	1dfb      	adds	r3, r7, #7
 8032f28:	2201      	movs	r2, #1
 8032f2a:	9200      	str	r2, [sp, #0]
 8032f2c:	220f      	movs	r2, #15
 8032f2e:	21a0      	movs	r1, #160	; 0xa0
 8032f30:	4807      	ldr	r0, [pc, #28]	; (8032f50 <GetSpkVol+0x58>)
 8032f32:	f7fe f8d7 	bl	80310e4 <M24_HAL_ReadBytes>

    printf( "%s(%d) - %d\n", __func__, __LINE__, nSpkVol );
 8032f36:	79fb      	ldrb	r3, [r7, #7]
 8032f38:	f240 2287 	movw	r2, #647	; 0x287
 8032f3c:	4905      	ldr	r1, [pc, #20]	; (8032f54 <GetSpkVol+0x5c>)
 8032f3e:	4807      	ldr	r0, [pc, #28]	; (8032f5c <GetSpkVol+0x64>)
 8032f40:	f004 faae 	bl	80374a0 <iprintf>

    return nSpkVol;
 8032f44:	79fb      	ldrb	r3, [r7, #7]
}
 8032f46:	4618      	mov	r0, r3
 8032f48:	3708      	adds	r7, #8
 8032f4a:	46bd      	mov	sp, r7
 8032f4c:	bd80      	pop	{r7, pc}
 8032f4e:	bf00      	nop
 8032f50:	20000e2c 	.word	0x20000e2c
 8032f54:	08041728 	.word	0x08041728
 8032f58:	0803b178 	.word	0x0803b178
 8032f5c:	0803b190 	.word	0x0803b190

08032f60 <SetSpkVol>:

//========================================================================
void	SetSpkVol	    ( int nSpkVol )
//========================================================================
{
 8032f60:	b580      	push	{r7, lr}
 8032f62:	b084      	sub	sp, #16
 8032f64:	af02      	add	r7, sp, #8
 8032f66:	6078      	str	r0, [r7, #4]
    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032f68:	2302      	movs	r3, #2
 8032f6a:	2202      	movs	r2, #2
 8032f6c:	21a0      	movs	r1, #160	; 0xa0
 8032f6e:	4816      	ldr	r0, [pc, #88]	; (8032fc8 <SetSpkVol+0x68>)
 8032f70:	f7f1 f882 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032f74:	4603      	mov	r3, r0
 8032f76:	2b00      	cmp	r3, #0
 8032f78:	d006      	beq.n	8032f88 <SetSpkVol+0x28>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032f7a:	f240 2292 	movw	r2, #658	; 0x292
 8032f7e:	4913      	ldr	r1, [pc, #76]	; (8032fcc <SetSpkVol+0x6c>)
 8032f80:	4813      	ldr	r0, [pc, #76]	; (8032fd0 <SetSpkVol+0x70>)
 8032f82:	f004 fa8d 	bl	80374a0 <iprintf>

        return ;
 8032f86:	e01b      	b.n	8032fc0 <SetSpkVol+0x60>
    }

    printf( "%s(%d) - %d\n", __func__, __LINE__, nSpkVol );
 8032f88:	687b      	ldr	r3, [r7, #4]
 8032f8a:	f240 2297 	movw	r2, #663	; 0x297
 8032f8e:	490f      	ldr	r1, [pc, #60]	; (8032fcc <SetSpkVol+0x6c>)
 8032f90:	4810      	ldr	r0, [pc, #64]	; (8032fd4 <SetSpkVol+0x74>)
 8032f92:	f004 fa85 	bl	80374a0 <iprintf>

//    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x0F, (uint8_t *)&nSpkVol, 1 );
    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPSpkVol, (uint8_t *)&nSpkVol, 1 );
 8032f96:	1d3b      	adds	r3, r7, #4
 8032f98:	2201      	movs	r2, #1
 8032f9a:	9200      	str	r2, [sp, #0]
 8032f9c:	220f      	movs	r2, #15
 8032f9e:	21a0      	movs	r1, #160	; 0xa0
 8032fa0:	4809      	ldr	r0, [pc, #36]	; (8032fc8 <SetSpkVol+0x68>)
 8032fa2:	f7fe f87d 	bl	80310a0 <M24_HAL_WriteBytes>

    //========================================================================
    //	Codec MAX9860ETG+
    if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), 2, 2 ) )
 8032fa6:	2302      	movs	r3, #2
 8032fa8:	2202      	movs	r2, #2
 8032faa:	2120      	movs	r1, #32
 8032fac:	4806      	ldr	r0, [pc, #24]	; (8032fc8 <SetSpkVol+0x68>)
 8032fae:	f7f1 f863 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032fb2:	4603      	mov	r3, r0
 8032fb4:	2b00      	cmp	r3, #0
 8032fb6:	d103      	bne.n	8032fc0 <SetSpkVol+0x60>
    {
    	AudioSpkVol( nSpkVol );
 8032fb8:	687b      	ldr	r3, [r7, #4]
 8032fba:	4618      	mov	r0, r3
 8032fbc:	f7fc ff4a 	bl	802fe54 <AudioSpkVol>
    }
}
 8032fc0:	3708      	adds	r7, #8
 8032fc2:	46bd      	mov	sp, r7
 8032fc4:	bd80      	pop	{r7, pc}
 8032fc6:	bf00      	nop
 8032fc8:	20000e2c 	.word	0x20000e2c
 8032fcc:	08041734 	.word	0x08041734
 8032fd0:	0803b178 	.word	0x0803b178
 8032fd4:	0803b190 	.word	0x0803b190

08032fd8 <GetMicVol>:


//========================================================================
int		GetMicVol	    ( void )
//========================================================================
{
 8032fd8:	b580      	push	{r7, lr}
 8032fda:	b084      	sub	sp, #16
 8032fdc:	af02      	add	r7, sp, #8
    uint8_t     nMicVol = 0;
 8032fde:	2300      	movs	r3, #0
 8032fe0:	71fb      	strb	r3, [r7, #7]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032fe2:	2302      	movs	r3, #2
 8032fe4:	2202      	movs	r2, #2
 8032fe6:	21a0      	movs	r1, #160	; 0xa0
 8032fe8:	4811      	ldr	r0, [pc, #68]	; (8033030 <GetMicVol+0x58>)
 8032fea:	f7f1 f845 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032fee:	4603      	mov	r3, r0
 8032ff0:	2b00      	cmp	r3, #0
 8032ff2:	d008      	beq.n	8033006 <GetMicVol+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032ff4:	f240 22ad 	movw	r2, #685	; 0x2ad
 8032ff8:	490e      	ldr	r1, [pc, #56]	; (8033034 <GetMicVol+0x5c>)
 8032ffa:	480f      	ldr	r0, [pc, #60]	; (8033038 <GetMicVol+0x60>)
 8032ffc:	f004 fa50 	bl	80374a0 <iprintf>

        return -1;
 8033000:	f04f 33ff 	mov.w	r3, #4294967295
 8033004:	e00f      	b.n	8033026 <GetMicVol+0x4e>
    }

//    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x0F, (uint8_t *)&nSpkVol, 1 );
    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPMicVol, (uint8_t *)&nMicVol, 1 );
 8033006:	1dfb      	adds	r3, r7, #7
 8033008:	2201      	movs	r2, #1
 803300a:	9200      	str	r2, [sp, #0]
 803300c:	220c      	movs	r2, #12
 803300e:	21a0      	movs	r1, #160	; 0xa0
 8033010:	4807      	ldr	r0, [pc, #28]	; (8033030 <GetMicVol+0x58>)
 8033012:	f7fe f867 	bl	80310e4 <M24_HAL_ReadBytes>

    printf( "%s(%d) - %d\n", __func__, __LINE__, nMicVol );
 8033016:	79fb      	ldrb	r3, [r7, #7]
 8033018:	f240 22b5 	movw	r2, #693	; 0x2b5
 803301c:	4905      	ldr	r1, [pc, #20]	; (8033034 <GetMicVol+0x5c>)
 803301e:	4807      	ldr	r0, [pc, #28]	; (803303c <GetMicVol+0x64>)
 8033020:	f004 fa3e 	bl	80374a0 <iprintf>

    return nMicVol;
 8033024:	79fb      	ldrb	r3, [r7, #7]
}
 8033026:	4618      	mov	r0, r3
 8033028:	3708      	adds	r7, #8
 803302a:	46bd      	mov	sp, r7
 803302c:	bd80      	pop	{r7, pc}
 803302e:	bf00      	nop
 8033030:	20000e2c 	.word	0x20000e2c
 8033034:	08041740 	.word	0x08041740
 8033038:	0803b178 	.word	0x0803b178
 803303c:	0803b190 	.word	0x0803b190

08033040 <SetMicVol>:

//========================================================================
void	SetMicVol	    ( int nMicVol )
//========================================================================
{
 8033040:	b580      	push	{r7, lr}
 8033042:	b084      	sub	sp, #16
 8033044:	af02      	add	r7, sp, #8
 8033046:	6078      	str	r0, [r7, #4]
    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8033048:	2302      	movs	r3, #2
 803304a:	2202      	movs	r2, #2
 803304c:	21a0      	movs	r1, #160	; 0xa0
 803304e:	4816      	ldr	r0, [pc, #88]	; (80330a8 <SetMicVol+0x68>)
 8033050:	f7f1 f812 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8033054:	4603      	mov	r3, r0
 8033056:	2b00      	cmp	r3, #0
 8033058:	d006      	beq.n	8033068 <SetMicVol+0x28>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 803305a:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 803305e:	4913      	ldr	r1, [pc, #76]	; (80330ac <SetMicVol+0x6c>)
 8033060:	4813      	ldr	r0, [pc, #76]	; (80330b0 <SetMicVol+0x70>)
 8033062:	f004 fa1d 	bl	80374a0 <iprintf>

        return ;
 8033066:	e01b      	b.n	80330a0 <SetMicVol+0x60>
    }

    printf( "%s(%d) - %d\n", __func__, __LINE__, nMicVol );
 8033068:	687b      	ldr	r3, [r7, #4]
 803306a:	f240 22c5 	movw	r2, #709	; 0x2c5
 803306e:	490f      	ldr	r1, [pc, #60]	; (80330ac <SetMicVol+0x6c>)
 8033070:	4810      	ldr	r0, [pc, #64]	; (80330b4 <SetMicVol+0x74>)
 8033072:	f004 fa15 	bl	80374a0 <iprintf>

//    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x0F, (uint8_t *)&nSpkVol, 1 );
    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPMicVol, (uint8_t *)&nMicVol, 1 );
 8033076:	1d3b      	adds	r3, r7, #4
 8033078:	2201      	movs	r2, #1
 803307a:	9200      	str	r2, [sp, #0]
 803307c:	220c      	movs	r2, #12
 803307e:	21a0      	movs	r1, #160	; 0xa0
 8033080:	4809      	ldr	r0, [pc, #36]	; (80330a8 <SetMicVol+0x68>)
 8033082:	f7fe f80d 	bl	80310a0 <M24_HAL_WriteBytes>

    //========================================================================
    //	Codec MAX9860ETG+
    if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), 2, 2 ) )
 8033086:	2302      	movs	r3, #2
 8033088:	2202      	movs	r2, #2
 803308a:	2120      	movs	r1, #32
 803308c:	4806      	ldr	r0, [pc, #24]	; (80330a8 <SetMicVol+0x68>)
 803308e:	f7f0 fff3 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8033092:	4603      	mov	r3, r0
 8033094:	2b00      	cmp	r3, #0
 8033096:	d103      	bne.n	80330a0 <SetMicVol+0x60>
    {
    	AudioMicVol( nMicVol );
 8033098:	687b      	ldr	r3, [r7, #4]
 803309a:	4618      	mov	r0, r3
 803309c:	f7fc ff10 	bl	802fec0 <AudioMicVol>
    }
}
 80330a0:	3708      	adds	r7, #8
 80330a2:	46bd      	mov	sp, r7
 80330a4:	bd80      	pop	{r7, pc}
 80330a6:	bf00      	nop
 80330a8:	20000e2c 	.word	0x20000e2c
 80330ac:	0804174c 	.word	0x0804174c
 80330b0:	0803b178 	.word	0x0803b178
 80330b4:	0803b190 	.word	0x0803b190

080330b8 <RFM_Spk>:
}

//========================================================================
void	RFM_Spk			( int bOnOff )		//	1(On) / 0(Off)
//========================================================================
{
 80330b8:	b580      	push	{r7, lr}
 80330ba:	b082      	sub	sp, #8
 80330bc:	af00      	add	r7, sp, #0
 80330be:	6078      	str	r0, [r7, #4]
	if( GetDbg() > 1 )
 80330c0:	f7fd ff1e 	bl	8030f00 <GetDbg>
 80330c4:	4603      	mov	r3, r0
 80330c6:	2b01      	cmp	r3, #1
 80330c8:	dd06      	ble.n	80330d8 <RFM_Spk+0x20>
		printf("%s(%d) - %d\n", __func__, __LINE__, bOnOff);
 80330ca:	687b      	ldr	r3, [r7, #4]
 80330cc:	f240 22fa 	movw	r2, #762	; 0x2fa
 80330d0:	490a      	ldr	r1, [pc, #40]	; (80330fc <RFM_Spk+0x44>)
 80330d2:	480b      	ldr	r0, [pc, #44]	; (8033100 <RFM_Spk+0x48>)
 80330d4:	f004 f9e4 	bl	80374a0 <iprintf>

    if ( bOnOff )
 80330d8:	687b      	ldr	r3, [r7, #4]
 80330da:	2b00      	cmp	r3, #0
 80330dc:	d005      	beq.n	80330ea <RFM_Spk+0x32>
    {
        //  Spk Relay On
        HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
 80330de:	2201      	movs	r2, #1
 80330e0:	2120      	movs	r1, #32
 80330e2:	4808      	ldr	r0, [pc, #32]	; (8033104 <RFM_Spk+0x4c>)
 80330e4:	f7f0 fa1a 	bl	802351c <HAL_GPIO_WritePin>
    else
    {
        //  Spk Relay Off
        HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
    }
}
 80330e8:	e004      	b.n	80330f4 <RFM_Spk+0x3c>
        HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
 80330ea:	2200      	movs	r2, #0
 80330ec:	2120      	movs	r1, #32
 80330ee:	4805      	ldr	r0, [pc, #20]	; (8033104 <RFM_Spk+0x4c>)
 80330f0:	f7f0 fa14 	bl	802351c <HAL_GPIO_WritePin>
}
 80330f4:	bf00      	nop
 80330f6:	3708      	adds	r7, #8
 80330f8:	46bd      	mov	sp, r7
 80330fa:	bd80      	pop	{r7, pc}
 80330fc:	08041758 	.word	0x08041758
 8033100:	0803b190 	.word	0x0803b190
 8033104:	40021000 	.word	0x40021000

08033108 <cmd_ts>:


//========================================================================
int cmd_ts      ( int argc, char * argv[] )
//========================================================================
{
 8033108:	b580      	push	{r7, lr}
 803310a:	b084      	sub	sp, #16
 803310c:	af00      	add	r7, sp, #0
 803310e:	6078      	str	r0, [r7, #4]
 8033110:	6039      	str	r1, [r7, #0]
    //	ts [train set] ( 0 ~ 9 )
    int 		nTrainSet = 0;
 8033112:	2300      	movs	r3, #0
 8033114:	60fb      	str	r3, [r7, #12]

    if( argc <= 1 )
 8033116:	687b      	ldr	r3, [r7, #4]
 8033118:	2b01      	cmp	r3, #1
 803311a:	dc09      	bgt.n	8033130 <cmd_ts+0x28>
    {
        printf( "Train Set : %d\n", 100 + GetTrainSetIdx() );
 803311c:	f7ff fd2c 	bl	8032b78 <GetTrainSetIdx>
 8033120:	4603      	mov	r3, r0
 8033122:	3364      	adds	r3, #100	; 0x64
 8033124:	4619      	mov	r1, r3
 8033126:	4815      	ldr	r0, [pc, #84]	; (803317c <cmd_ts+0x74>)
 8033128:	f004 f9ba 	bl	80374a0 <iprintf>

    	return 0;
 803312c:	2300      	movs	r3, #0
 803312e:	e021      	b.n	8033174 <cmd_ts+0x6c>
    }

    switch ( argc )
 8033130:	687b      	ldr	r3, [r7, #4]
 8033132:	2b02      	cmp	r3, #2
 8033134:	d109      	bne.n	803314a <cmd_ts+0x42>
    {
    case 2:		sscanf( argv[1], "%d", &nTrainSet );	        //	cmd [channel]
 8033136:	683b      	ldr	r3, [r7, #0]
 8033138:	3304      	adds	r3, #4
 803313a:	681b      	ldr	r3, [r3, #0]
 803313c:	f107 020c 	add.w	r2, r7, #12
 8033140:	490f      	ldr	r1, [pc, #60]	; (8033180 <cmd_ts+0x78>)
 8033142:	4618      	mov	r0, r3
 8033144:	f004 faf8 	bl	8037738 <siscanf>
        break;
 8033148:	bf00      	nop
    }

    if ( nTrainSet < 0 || MaxTrainSet <= nTrainSet )  nTrainSet = 0;
 803314a:	68fb      	ldr	r3, [r7, #12]
 803314c:	2b00      	cmp	r3, #0
 803314e:	db02      	blt.n	8033156 <cmd_ts+0x4e>
 8033150:	68fb      	ldr	r3, [r7, #12]
 8033152:	2b13      	cmp	r3, #19
 8033154:	dd01      	ble.n	803315a <cmd_ts+0x52>
 8033156:	2300      	movs	r3, #0
 8033158:	60fb      	str	r3, [r7, #12]

   	printf( "%s(%d) - Train Set : %d\n", __func__, __LINE__, nTrainSet + 100 );
 803315a:	68fb      	ldr	r3, [r7, #12]
 803315c:	3364      	adds	r3, #100	; 0x64
 803315e:	f240 3243 	movw	r2, #835	; 0x343
 8033162:	4908      	ldr	r1, [pc, #32]	; (8033184 <cmd_ts+0x7c>)
 8033164:	4808      	ldr	r0, [pc, #32]	; (8033188 <cmd_ts+0x80>)
 8033166:	f004 f99b 	bl	80374a0 <iprintf>

    SetTrainSetIdx( nTrainSet );
 803316a:	68fb      	ldr	r3, [r7, #12]
 803316c:	4618      	mov	r0, r3
 803316e:	f7ff fd19 	bl	8032ba4 <SetTrainSetIdx>

    return 0;
 8033172:	2300      	movs	r3, #0
}
 8033174:	4618      	mov	r0, r3
 8033176:	3710      	adds	r7, #16
 8033178:	46bd      	mov	sp, r7
 803317a:	bd80      	pop	{r7, pc}
 803317c:	0803b21c 	.word	0x0803b21c
 8033180:	0803b22c 	.word	0x0803b22c
 8033184:	08041760 	.word	0x08041760
 8033188:	0803b230 	.word	0x0803b230

0803318c <cmd_ch>:

//========================================================================
int cmd_ch      ( int argc, char * argv[] )
//========================================================================
{
 803318c:	b580      	push	{r7, lr}
 803318e:	b084      	sub	sp, #16
 8033190:	af00      	add	r7, sp, #0
 8033192:	6078      	str	r0, [r7, #4]
 8033194:	6039      	str	r1, [r7, #0]
    //	ch [channel] ( 0 ~ 9 )
    int 		nCh = 0;
 8033196:	2300      	movs	r3, #0
 8033198:	60fb      	str	r3, [r7, #12]

    if( argc <= 1 )
 803319a:	687b      	ldr	r3, [r7, #4]
 803319c:	2b01      	cmp	r3, #1
 803319e:	dc08      	bgt.n	80331b2 <cmd_ch+0x26>
    {
        printf( "RF Channel: %d\n", GetChRx() );
 80331a0:	f7ff fb38 	bl	8032814 <GetChRx>
 80331a4:	4603      	mov	r3, r0
 80331a6:	4619      	mov	r1, r3
 80331a8:	4817      	ldr	r0, [pc, #92]	; (8033208 <cmd_ch+0x7c>)
 80331aa:	f004 f979 	bl	80374a0 <iprintf>

    	return 0;
 80331ae:	2300      	movs	r3, #0
 80331b0:	e025      	b.n	80331fe <cmd_ch+0x72>
    }

    switch ( argc )
 80331b2:	687b      	ldr	r3, [r7, #4]
 80331b4:	2b02      	cmp	r3, #2
 80331b6:	d109      	bne.n	80331cc <cmd_ch+0x40>
    {
    case 2:		sscanf( argv[1], "%d", &nCh );	        //	cmd [channel]
 80331b8:	683b      	ldr	r3, [r7, #0]
 80331ba:	3304      	adds	r3, #4
 80331bc:	681b      	ldr	r3, [r3, #0]
 80331be:	f107 020c 	add.w	r2, r7, #12
 80331c2:	4912      	ldr	r1, [pc, #72]	; (803320c <cmd_ch+0x80>)
 80331c4:	4618      	mov	r0, r3
 80331c6:	f004 fab7 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text] 
        break;
 80331ca:	bf00      	nop
    }

    if ( nCh < 0 || MaxTrainSet <= nCh )  nCh = 0;
 80331cc:	68fb      	ldr	r3, [r7, #12]
 80331ce:	2b00      	cmp	r3, #0
 80331d0:	db02      	blt.n	80331d8 <cmd_ch+0x4c>
 80331d2:	68fb      	ldr	r3, [r7, #12]
 80331d4:	2b13      	cmp	r3, #19
 80331d6:	dd01      	ble.n	80331dc <cmd_ch+0x50>
 80331d8:	2300      	movs	r3, #0
 80331da:	60fb      	str	r3, [r7, #12]

    if ( GetDbg() > 0 )
 80331dc:	f7fd fe90 	bl	8030f00 <GetDbg>
 80331e0:	4603      	mov	r3, r0
 80331e2:	2b00      	cmp	r3, #0
 80331e4:	dd06      	ble.n	80331f4 <cmd_ch+0x68>
    	printf( "%s(%d) - Channel : %d\n", __func__, __LINE__, nCh );
 80331e6:	68fb      	ldr	r3, [r7, #12]
 80331e8:	f240 3262 	movw	r2, #866	; 0x362
 80331ec:	4908      	ldr	r1, [pc, #32]	; (8033210 <cmd_ch+0x84>)
 80331ee:	4809      	ldr	r0, [pc, #36]	; (8033214 <cmd_ch+0x88>)
 80331f0:	f004 f956 	bl	80374a0 <iprintf>

    SetTrainSetIdx( nCh );
 80331f4:	68fb      	ldr	r3, [r7, #12]
 80331f6:	4618      	mov	r0, r3
 80331f8:	f7ff fcd4 	bl	8032ba4 <SetTrainSetIdx>

	return 0;
 80331fc:	2300      	movs	r3, #0
}
 80331fe:	4618      	mov	r0, r3
 8033200:	3710      	adds	r7, #16
 8033202:	46bd      	mov	sp, r7
 8033204:	bd80      	pop	{r7, pc}
 8033206:	bf00      	nop
 8033208:	0803b24c 	.word	0x0803b24c
 803320c:	0803b22c 	.word	0x0803b22c
 8033210:	08041768 	.word	0x08041768
 8033214:	0803b25c 	.word	0x0803b25c

08033218 <cmd_car>:


//========================================================================
int cmd_car     ( int argc, char * argv[] )
//========================================================================
{
 8033218:	b580      	push	{r7, lr}
 803321a:	b084      	sub	sp, #16
 803321c:	af00      	add	r7, sp, #0
 803321e:	6078      	str	r0, [r7, #4]
 8033220:	6039      	str	r1, [r7, #0]
    //	car [Car No] ( 0 ~ 9 )
    int 		nCar = 0;
 8033222:	2300      	movs	r3, #0
 8033224:	60fb      	str	r3, [r7, #12]

    if( argc <= 1 )
 8033226:	687b      	ldr	r3, [r7, #4]
 8033228:	2b01      	cmp	r3, #1
 803322a:	dc08      	bgt.n	803323e <cmd_car+0x26>
    {
        printf( "Car No : %d\n", GetCarNo() );
 803322c:	f7ff fe16 	bl	8032e5c <GetCarNo>
 8033230:	4603      	mov	r3, r0
 8033232:	4619      	mov	r1, r3
 8033234:	4814      	ldr	r0, [pc, #80]	; (8033288 <cmd_car+0x70>)
 8033236:	f004 f933 	bl	80374a0 <iprintf>

        return 0;
 803323a:	2300      	movs	r3, #0
 803323c:	e020      	b.n	8033280 <cmd_car+0x68>
    }

    switch ( argc )
 803323e:	687b      	ldr	r3, [r7, #4]
 8033240:	2b02      	cmp	r3, #2
 8033242:	d109      	bne.n	8033258 <cmd_car+0x40>
    {
    case 2:		sscanf( argv[1], "%d", &nCar );	        //	cmd [Car No]
 8033244:	683b      	ldr	r3, [r7, #0]
 8033246:	3304      	adds	r3, #4
 8033248:	681b      	ldr	r3, [r3, #0]
 803324a:	f107 020c 	add.w	r2, r7, #12
 803324e:	490f      	ldr	r1, [pc, #60]	; (803328c <cmd_car+0x74>)
 8033250:	4618      	mov	r0, r3
 8033252:	f004 fa71 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text] 
        break;
 8033256:	bf00      	nop
    }

    if ( nCar < 0 || MaxCarNo < nCar )  nCar = 0;
 8033258:	68fb      	ldr	r3, [r7, #12]
 803325a:	2b00      	cmp	r3, #0
 803325c:	db02      	blt.n	8033264 <cmd_car+0x4c>
 803325e:	68fb      	ldr	r3, [r7, #12]
 8033260:	2b0d      	cmp	r3, #13
 8033262:	dd01      	ble.n	8033268 <cmd_car+0x50>
 8033264:	2300      	movs	r3, #0
 8033266:	60fb      	str	r3, [r7, #12]

    printf( "%s(%d) - Car No : %d\n", __func__, __LINE__, nCar );
 8033268:	68fb      	ldr	r3, [r7, #12]
 803326a:	f240 3281 	movw	r2, #897	; 0x381
 803326e:	4908      	ldr	r1, [pc, #32]	; (8033290 <cmd_car+0x78>)
 8033270:	4808      	ldr	r0, [pc, #32]	; (8033294 <cmd_car+0x7c>)
 8033272:	f004 f915 	bl	80374a0 <iprintf>

    SetCarNo( nCar );
 8033276:	68fb      	ldr	r3, [r7, #12]
 8033278:	4618      	mov	r0, r3
 803327a:	f7ff fe05 	bl	8032e88 <SetCarNo>

	return 0;
 803327e:	2300      	movs	r3, #0
}
 8033280:	4618      	mov	r0, r3
 8033282:	3710      	adds	r7, #16
 8033284:	46bd      	mov	sp, r7
 8033286:	bd80      	pop	{r7, pc}
 8033288:	0803b274 	.word	0x0803b274
 803328c:	0803b22c 	.word	0x0803b22c
 8033290:	08041770 	.word	0x08041770
 8033294:	0803b284 	.word	0x0803b284

08033298 <cmd_hop>:


//========================================================================
int cmd_hop     ( int argc, char * argv[] )
//========================================================================
{
 8033298:	b580      	push	{r7, lr}
 803329a:	b084      	sub	sp, #16
 803329c:	af00      	add	r7, sp, #0
 803329e:	6078      	str	r0, [r7, #4]
 80332a0:	6039      	str	r1, [r7, #0]
    //	car [Car No] ( 0 ~ 9 )
    int 		nManHop = 0;
 80332a2:	2300      	movs	r3, #0
 80332a4:	60fb      	str	r3, [r7, #12]

    switch ( argc )
 80332a6:	687b      	ldr	r3, [r7, #4]
 80332a8:	2b02      	cmp	r3, #2
 80332aa:	d109      	bne.n	80332c0 <cmd_hop+0x28>
    {
    case 2:		sscanf( argv[1], "%d", &nManHop );	        //	cmd [Car No]
 80332ac:	683b      	ldr	r3, [r7, #0]
 80332ae:	3304      	adds	r3, #4
 80332b0:	681b      	ldr	r3, [r3, #0]
 80332b2:	f107 020c 	add.w	r2, r7, #12
 80332b6:	4910      	ldr	r1, [pc, #64]	; (80332f8 <cmd_hop+0x60>)
 80332b8:	4618      	mov	r0, r3
 80332ba:	f004 fa3d 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
        break;
 80332be:	bf00      	nop
    }

//  g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
    if ( nManHop < 0 || 2 < nManHop )  nManHop = 0;
 80332c0:	68fb      	ldr	r3, [r7, #12]
 80332c2:	2b00      	cmp	r3, #0
 80332c4:	db02      	blt.n	80332cc <cmd_hop+0x34>
 80332c6:	68fb      	ldr	r3, [r7, #12]
 80332c8:	2b02      	cmp	r3, #2
 80332ca:	dd01      	ble.n	80332d0 <cmd_hop+0x38>
 80332cc:	2300      	movs	r3, #0
 80332ce:	60fb      	str	r3, [r7, #12]

    printf( "%s(%d) - Manual Hop : %d\n", __func__, __LINE__, nManHop );
 80332d0:	68fb      	ldr	r3, [r7, #12]
 80332d2:	f240 329a 	movw	r2, #922	; 0x39a
 80332d6:	4909      	ldr	r1, [pc, #36]	; (80332fc <cmd_hop+0x64>)
 80332d8:	4809      	ldr	r0, [pc, #36]	; (8033300 <cmd_hop+0x68>)
 80332da:	f004 f8e1 	bl	80374a0 <iprintf>

    g_nManHopping = nManHop;
 80332de:	68fb      	ldr	r3, [r7, #12]
 80332e0:	4a08      	ldr	r2, [pc, #32]	; (8033304 <cmd_hop+0x6c>)
 80332e2:	6013      	str	r3, [r2, #0]
    SetManHop( nManHop );
 80332e4:	68fb      	ldr	r3, [r7, #12]
 80332e6:	4618      	mov	r0, r3
 80332e8:	f7ff fd46 	bl	8032d78 <SetManHop>
}
 80332ec:	bf00      	nop
 80332ee:	4618      	mov	r0, r3
 80332f0:	3710      	adds	r7, #16
 80332f2:	46bd      	mov	sp, r7
 80332f4:	bd80      	pop	{r7, pc}
 80332f6:	bf00      	nop
 80332f8:	0803b22c 	.word	0x0803b22c
 80332fc:	08041778 	.word	0x08041778
 8033300:	0803b29c 	.word	0x0803b29c
 8033304:	20002348 	.word	0x20002348

08033308 <cmd_rfmod>:


//========================================================================
int cmd_rfmod     ( int argc, char * argv[] )
//========================================================================
{
 8033308:	b580      	push	{r7, lr}
 803330a:	b084      	sub	sp, #16
 803330c:	af00      	add	r7, sp, #0
 803330e:	6078      	str	r0, [r7, #4]
 8033310:	6039      	str	r1, [r7, #0]
    int 		nRFMode = 0;
 8033312:	2300      	movs	r3, #0
 8033314:	60fb      	str	r3, [r7, #12]

    switch ( argc )
 8033316:	687b      	ldr	r3, [r7, #4]
 8033318:	2b02      	cmp	r3, #2
 803331a:	d109      	bne.n	8033330 <cmd_rfmod+0x28>
    {
    case 2:		sscanf( argv[1], "%d", &nRFMode );	        //	cmd [Car No]
 803331c:	683b      	ldr	r3, [r7, #0]
 803331e:	3304      	adds	r3, #4
 8033320:	681b      	ldr	r3, [r3, #0]
 8033322:	f107 020c 	add.w	r2, r7, #12
 8033326:	4910      	ldr	r1, [pc, #64]	; (8033368 <cmd_rfmod+0x60>)
 8033328:	4618      	mov	r0, r3
 803332a:	f004 fa05 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
        break;
 803332e:	bf00      	nop
    }

//  g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
    if ( nRFMode < 1 || RFModeMax < nRFMode )  nRFMode = RFModeDefault;
 8033330:	68fb      	ldr	r3, [r7, #12]
 8033332:	2b00      	cmp	r3, #0
 8033334:	dd02      	ble.n	803333c <cmd_rfmod+0x34>
 8033336:	68fb      	ldr	r3, [r7, #12]
 8033338:	2b02      	cmp	r3, #2
 803333a:	dd01      	ble.n	8033340 <cmd_rfmod+0x38>
 803333c:	2301      	movs	r3, #1
 803333e:	60fb      	str	r3, [r7, #12]

    printf( "%s(%d) - RFMode : %d\n", __func__, __LINE__, nRFMode );
 8033340:	68fb      	ldr	r3, [r7, #12]
 8033342:	f240 32b1 	movw	r2, #945	; 0x3b1
 8033346:	4909      	ldr	r1, [pc, #36]	; (803336c <cmd_rfmod+0x64>)
 8033348:	4809      	ldr	r0, [pc, #36]	; (8033370 <cmd_rfmod+0x68>)
 803334a:	f004 f8a9 	bl	80374a0 <iprintf>

    g_nRFMode = nRFMode;
 803334e:	68fb      	ldr	r3, [r7, #12]
 8033350:	4a08      	ldr	r2, [pc, #32]	; (8033374 <cmd_rfmod+0x6c>)
 8033352:	6013      	str	r3, [r2, #0]
    SetRFMode( nRFMode );
 8033354:	68fb      	ldr	r3, [r7, #12]
 8033356:	4618      	mov	r0, r3
 8033358:	f7ff fc9c 	bl	8032c94 <SetRFMode>
}
 803335c:	bf00      	nop
 803335e:	4618      	mov	r0, r3
 8033360:	3710      	adds	r7, #16
 8033362:	46bd      	mov	sp, r7
 8033364:	bd80      	pop	{r7, pc}
 8033366:	bf00      	nop
 8033368:	0803b22c 	.word	0x0803b22c
 803336c:	08041780 	.word	0x08041780
 8033370:	0803b2b8 	.word	0x0803b2b8
 8033374:	20002344 	.word	0x20002344

08033378 <cmd_swinfo>:

//========================================================================
int cmd_swinfo    ( int argc, char * argv[] )
//========================================================================
{
 8033378:	b580      	push	{r7, lr}
 803337a:	b082      	sub	sp, #8
 803337c:	af00      	add	r7, sp, #0
 803337e:	6078      	str	r0, [r7, #4]
 8033380:	6039      	str	r1, [r7, #0]
    printf( "[S/W Info]\n" );
 8033382:	480b      	ldr	r0, [pc, #44]	; (80333b0 <cmd_swinfo+0x38>)
 8033384:	f004 f8fa 	bl	803757c <puts>
    printf( " - Boot : %d Byte\n", FLASH_If_GetBootSize() );
 8033388:	f7fe f90e 	bl	80315a8 <FLASH_If_GetBootSize>
 803338c:	4603      	mov	r3, r0
 803338e:	4619      	mov	r1, r3
 8033390:	4808      	ldr	r0, [pc, #32]	; (80333b4 <cmd_swinfo+0x3c>)
 8033392:	f004 f885 	bl	80374a0 <iprintf>
    printf( " - App : %d Byte\n", FLASH_If_GetAppSize() );
 8033396:	f7fe f91d 	bl	80315d4 <FLASH_If_GetAppSize>
 803339a:	4603      	mov	r3, r0
 803339c:	4619      	mov	r1, r3
 803339e:	4806      	ldr	r0, [pc, #24]	; (80333b8 <cmd_swinfo+0x40>)
 80333a0:	f004 f87e 	bl	80374a0 <iprintf>
}
 80333a4:	bf00      	nop
 80333a6:	4618      	mov	r0, r3
 80333a8:	3708      	adds	r7, #8
 80333aa:	46bd      	mov	sp, r7
 80333ac:	bd80      	pop	{r7, pc}
 80333ae:	bf00      	nop
 80333b0:	0803b2d0 	.word	0x0803b2d0
 80333b4:	0803b2dc 	.word	0x0803b2dc
 80333b8:	0803b2f0 	.word	0x0803b2f0

080333bc <cmd_info>:

//========================================================================
int cmd_info    ( int argc, char * argv[] )
//========================================================================
{
 80333bc:	b590      	push	{r4, r7, lr}
 80333be:	b087      	sub	sp, #28
 80333c0:	af00      	add	r7, sp, #0
 80333c2:	6078      	str	r0, [r7, #4]
 80333c4:	6039      	str	r1, [r7, #0]
    //	info - Train Setting Config
    uint8_t		nBuf[10];
    int 		nCh = 0;
 80333c6:	2300      	movs	r3, #0
 80333c8:	617b      	str	r3, [r7, #20]
    uint16_t	nData;

    printf( "[Setting]\n" );
 80333ca:	482c      	ldr	r0, [pc, #176]	; (803347c <cmd_info+0xc0>)
 80333cc:	f004 f8d6 	bl	803757c <puts>
    printf( " - Train Set : %d\n", 100 + GetTrainSetIdx() );
 80333d0:	f7ff fbd2 	bl	8032b78 <GetTrainSetIdx>
 80333d4:	4603      	mov	r3, r0
 80333d6:	3364      	adds	r3, #100	; 0x64
 80333d8:	4619      	mov	r1, r3
 80333da:	4829      	ldr	r0, [pc, #164]	; (8033480 <cmd_info+0xc4>)
 80333dc:	f004 f860 	bl	80374a0 <iprintf>
    printf( " - Car No : %d\n", GetCarNo() );
 80333e0:	f7ff fd3c 	bl	8032e5c <GetCarNo>
 80333e4:	4603      	mov	r3, r0
 80333e6:	4619      	mov	r1, r3
 80333e8:	4826      	ldr	r0, [pc, #152]	; (8033484 <cmd_info+0xc8>)
 80333ea:	f004 f859 	bl	80374a0 <iprintf>
    printf( " - RF Channel: %d\n", GetChRx() );
 80333ee:	f7ff fa11 	bl	8032814 <GetChRx>
 80333f2:	4603      	mov	r3, r0
 80333f4:	4619      	mov	r1, r3
 80333f6:	4824      	ldr	r0, [pc, #144]	; (8033488 <cmd_info+0xcc>)
 80333f8:	f004 f852 	bl	80374a0 <iprintf>
    printf( " - Mode : %s(%d)\n", StrRFMMode( GetRFMMode() ), GetRFMMode()  );	//	Normal / Tx / Rx / Upgrade
 80333fc:	f7ff f984 	bl	8032708 <GetRFMMode>
 8033400:	4603      	mov	r3, r0
 8033402:	4618      	mov	r0, r3
 8033404:	f7ff f9be 	bl	8032784 <StrRFMMode>
 8033408:	4604      	mov	r4, r0
 803340a:	f7ff f97d 	bl	8032708 <GetRFMMode>
 803340e:	4603      	mov	r3, r0
 8033410:	461a      	mov	r2, r3
 8033412:	4621      	mov	r1, r4
 8033414:	481d      	ldr	r0, [pc, #116]	; (803348c <cmd_info+0xd0>)
 8033416:	f004 f843 	bl	80374a0 <iprintf>
    printf( " - GetChNearRFM() : %d\n", GetChNearRFM() );
 803341a:	f7ff fa7b 	bl	8032914 <GetChNearRFM>
 803341e:	4603      	mov	r3, r0
 8033420:	4619      	mov	r1, r3
 8033422:	481b      	ldr	r0, [pc, #108]	; (8033490 <cmd_info+0xd4>)
 8033424:	f004 f83c 	bl	80374a0 <iprintf>
    printf( " - GetChNearRFT() : %d\n", GetChNearRFT( 190 ) );
 8033428:	20be      	movs	r0, #190	; 0xbe
 803342a:	f7ff fa2d 	bl	8032888 <GetChNearRFT>
 803342e:	4603      	mov	r3, r0
 8033430:	4619      	mov	r1, r3
 8033432:	4818      	ldr	r0, [pc, #96]	; (8033494 <cmd_info+0xd8>)
 8033434:	f004 f834 	bl	80374a0 <iprintf>
    printf( " - GetChPARFT() : %d\n", GetChPARFT() );
 8033438:	f7ff fb06 	bl	8032a48 <GetChPARFT>
 803343c:	4603      	mov	r3, r0
 803343e:	4619      	mov	r1, r3
 8033440:	4815      	ldr	r0, [pc, #84]	; (8033498 <cmd_info+0xdc>)
 8033442:	f004 f82d 	bl	80374a0 <iprintf>
    printf( " - GetChPA() : %d\n", GetChPA() );
 8033446:	f7ff fab7 	bl	80329b8 <GetChPA>
 803344a:	4603      	mov	r3, r0
 803344c:	4619      	mov	r1, r3
 803344e:	4813      	ldr	r0, [pc, #76]	; (803349c <cmd_info+0xe0>)
 8033450:	f004 f826 	bl	80374a0 <iprintf>
    printf( " - GetChRFMUp() : %d\n", GetChRFMUp() );
 8033454:	f7ff fb14 	bl	8032a80 <GetChRFMUp>
 8033458:	4603      	mov	r3, r0
 803345a:	4619      	mov	r1, r3
 803345c:	4810      	ldr	r0, [pc, #64]	; (80334a0 <cmd_info+0xe4>)
 803345e:	f004 f81f 	bl	80374a0 <iprintf>
    printf( " - GetChRFMDown() : %d\n", GetChRFMDown() );
 8033462:	f7ff fb29 	bl	8032ab8 <GetChRFMDown>
 8033466:	4603      	mov	r3, r0
 8033468:	4619      	mov	r1, r3
 803346a:	480e      	ldr	r0, [pc, #56]	; (80334a4 <cmd_info+0xe8>)
 803346c:	f004 f818 	bl	80374a0 <iprintf>
}
 8033470:	bf00      	nop
 8033472:	4618      	mov	r0, r3
 8033474:	371c      	adds	r7, #28
 8033476:	46bd      	mov	sp, r7
 8033478:	bd90      	pop	{r4, r7, pc}
 803347a:	bf00      	nop
 803347c:	0803b304 	.word	0x0803b304
 8033480:	0803b310 	.word	0x0803b310
 8033484:	0803b324 	.word	0x0803b324
 8033488:	0803b334 	.word	0x0803b334
 803348c:	0803b348 	.word	0x0803b348
 8033490:	0803b35c 	.word	0x0803b35c
 8033494:	0803b374 	.word	0x0803b374
 8033498:	0803b38c 	.word	0x0803b38c
 803349c:	0803b3a4 	.word	0x0803b3a4
 80334a0:	0803b3b8 	.word	0x0803b3b8
 80334a4:	0803b3d0 	.word	0x0803b3d0

080334a8 <cmd_rfstat>:


//========================================================================
int cmd_rfstat    ( int argc, char * argv[] )
//========================================================================
{
 80334a8:	b580      	push	{r7, lr}
 80334aa:	b082      	sub	sp, #8
 80334ac:	af00      	add	r7, sp, #0
 80334ae:	6078      	str	r0, [r7, #4]
 80334b0:	6039      	str	r1, [r7, #0]
    //	rfstat - RF Tx / Rx Status
    printf( "[RF Info] Tx : %d / Rx : %d\n", nTxPkt, nRxPkt );
 80334b2:	4b06      	ldr	r3, [pc, #24]	; (80334cc <cmd_rfstat+0x24>)
 80334b4:	681b      	ldr	r3, [r3, #0]
 80334b6:	4a06      	ldr	r2, [pc, #24]	; (80334d0 <cmd_rfstat+0x28>)
 80334b8:	6812      	ldr	r2, [r2, #0]
 80334ba:	4619      	mov	r1, r3
 80334bc:	4805      	ldr	r0, [pc, #20]	; (80334d4 <cmd_rfstat+0x2c>)
 80334be:	f003 ffef 	bl	80374a0 <iprintf>
}
 80334c2:	bf00      	nop
 80334c4:	4618      	mov	r0, r3
 80334c6:	3708      	adds	r7, #8
 80334c8:	46bd      	mov	sp, r7
 80334ca:	bd80      	pop	{r7, pc}
 80334cc:	2000136c 	.word	0x2000136c
 80334d0:	20001370 	.word	0x20001370
 80334d4:	0803b3e8 	.word	0x0803b3e8

080334d8 <cmd_txpwr>:
#endif

//========================================================================
int cmd_txpwr    ( int argc, char * argv[] )
//========================================================================
{
 80334d8:	b580      	push	{r7, lr}
 80334da:	b084      	sub	sp, #16
 80334dc:	af00      	add	r7, sp, #0
 80334de:	6078      	str	r0, [r7, #4]
 80334e0:	6039      	str	r1, [r7, #0]
    //	RF Tx
    uint8_t		nPwr	=	0x7F;
 80334e2:	237f      	movs	r3, #127	; 0x7f
 80334e4:	73fb      	strb	r3, [r7, #15]

    switch ( argc )
 80334e6:	687b      	ldr	r3, [r7, #4]
 80334e8:	2b02      	cmp	r3, #2
 80334ea:	d109      	bne.n	8033500 <cmd_txpwr+0x28>
    {
    case 2:		sscanf( argv[1], "%d", &nPwr );	        //	ID
 80334ec:	683b      	ldr	r3, [r7, #0]
 80334ee:	3304      	adds	r3, #4
 80334f0:	681b      	ldr	r3, [r3, #0]
 80334f2:	f107 020f 	add.w	r2, r7, #15
 80334f6:	490a      	ldr	r1, [pc, #40]	; (8033520 <cmd_txpwr+0x48>)
 80334f8:	4618      	mov	r0, r3
 80334fa:	f004 f91d 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
        break;
 80334fe:	bf00      	nop
    }

    printf( "%s(%d) - Tx Pwr(%d)\n", __func__, __LINE__, nPwr );
 8033500:	7bfb      	ldrb	r3, [r7, #15]
 8033502:	f240 4223 	movw	r2, #1059	; 0x423
 8033506:	4907      	ldr	r1, [pc, #28]	; (8033524 <cmd_txpwr+0x4c>)
 8033508:	4807      	ldr	r0, [pc, #28]	; (8033528 <cmd_txpwr+0x50>)
 803350a:	f003 ffc9 	bl	80374a0 <iprintf>

    vRadio_Set_TxPower( nPwr );
 803350e:	7bfb      	ldrb	r3, [r7, #15]
 8033510:	4618      	mov	r0, r3
 8033512:	f7f9 ff6d 	bl	802d3f0 <vRadio_Set_TxPower>
}
 8033516:	bf00      	nop
 8033518:	4618      	mov	r0, r3
 803351a:	3710      	adds	r7, #16
 803351c:	46bd      	mov	sp, r7
 803351e:	bd80      	pop	{r7, pc}
 8033520:	0803b22c 	.word	0x0803b22c
 8033524:	0804178c 	.word	0x0804178c
 8033528:	0803b408 	.word	0x0803b408

0803352c <cmd_rspid>:

//========================================================================
int cmd_rspid     ( int argc, char * argv[] )
//========================================================================
{
 803352c:	b580      	push	{r7, lr}
 803352e:	b084      	sub	sp, #16
 8033530:	af00      	add	r7, sp, #0
 8033532:	6078      	str	r0, [r7, #4]
 8033534:	6039      	str	r1, [r7, #0]
    //	rspid [Car No] [0/1]
    int 		nID 	= 0;
 8033536:	2300      	movs	r3, #0
 8033538:	60fb      	str	r3, [r7, #12]
    int 		nSet 	= 0;
 803353a:	2300      	movs	r3, #0
 803353c:	60bb      	str	r3, [r7, #8]

    switch ( argc )
 803353e:	687b      	ldr	r3, [r7, #4]
 8033540:	2b02      	cmp	r3, #2
 8033542:	d00b      	beq.n	803355c <cmd_rspid+0x30>
 8033544:	687b      	ldr	r3, [r7, #4]
 8033546:	2b03      	cmp	r3, #3
 8033548:	d112      	bne.n	8033570 <cmd_rspid+0x44>
    {
    case 3:		sscanf( argv[2], "%d", &nSet );	        //	Set
 803354a:	683b      	ldr	r3, [r7, #0]
 803354c:	3308      	adds	r3, #8
 803354e:	681b      	ldr	r3, [r3, #0]
 8033550:	f107 0208 	add.w	r2, r7, #8
 8033554:	4937      	ldr	r1, [pc, #220]	; (8033634 <cmd_rspid+0x108>)
 8033556:	4618      	mov	r0, r3
 8033558:	f004 f8ee 	bl	8037738 <siscanf>
    case 2:		sscanf( argv[1], "%d", &nID );	        //	ID
 803355c:	683b      	ldr	r3, [r7, #0]
 803355e:	3304      	adds	r3, #4
 8033560:	681b      	ldr	r3, [r3, #0]
 8033562:	f107 020c 	add.w	r2, r7, #12
 8033566:	4933      	ldr	r1, [pc, #204]	; (8033634 <cmd_rspid+0x108>)
 8033568:	4618      	mov	r0, r3
 803356a:	f004 f8e5 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
        break;
 803356e:	bf00      	nop
    }

    if ( nID < 0 || MaxCarNo < nID )
 8033570:	68fb      	ldr	r3, [r7, #12]
 8033572:	2b00      	cmp	r3, #0
 8033574:	db02      	blt.n	803357c <cmd_rspid+0x50>
 8033576:	68fb      	ldr	r3, [r7, #12]
 8033578:	2b0d      	cmp	r3, #13
 803357a:	dd07      	ble.n	803358c <cmd_rspid+0x60>
    {
    	printf("%s(%d) - return\n", __func__, __LINE__);
 803357c:	f240 423a 	movw	r2, #1082	; 0x43a
 8033580:	492d      	ldr	r1, [pc, #180]	; (8033638 <cmd_rspid+0x10c>)
 8033582:	482e      	ldr	r0, [pc, #184]	; (803363c <cmd_rspid+0x110>)
 8033584:	f003 ff8c 	bl	80374a0 <iprintf>
    	return 0;
 8033588:	2300      	movs	r3, #0
 803358a:	e04f      	b.n	803362c <cmd_rspid+0x100>
    }

    //	ID Flag Manual 설정.
    g_bSetRspIDManual = 1;
 803358c:	4b2c      	ldr	r3, [pc, #176]	; (8033640 <cmd_rspid+0x114>)
 803358e:	2201      	movs	r2, #1
 8033590:	601a      	str	r2, [r3, #0]

    if ( nSet )
 8033592:	68bb      	ldr	r3, [r7, #8]
 8033594:	2b00      	cmp	r3, #0
 8033596:	d020      	beq.n	80335da <cmd_rspid+0xae>
    {
    	//	Set ID Flag
    	g_flagRspID |= ( 0x1 << nID );
 8033598:	68fb      	ldr	r3, [r7, #12]
 803359a:	2201      	movs	r2, #1
 803359c:	fa02 f303 	lsl.w	r3, r2, r3
 80335a0:	b21a      	sxth	r2, r3
 80335a2:	4b28      	ldr	r3, [pc, #160]	; (8033644 <cmd_rspid+0x118>)
 80335a4:	881b      	ldrh	r3, [r3, #0]
 80335a6:	b21b      	sxth	r3, r3
 80335a8:	4313      	orrs	r3, r2
 80335aa:	b21b      	sxth	r3, r3
 80335ac:	b29a      	uxth	r2, r3
 80335ae:	4b25      	ldr	r3, [pc, #148]	; (8033644 <cmd_rspid+0x118>)
 80335b0:	801a      	strh	r2, [r3, #0]
		g_devStat[nID].nRSSI = 200;
 80335b2:	68fa      	ldr	r2, [r7, #12]
 80335b4:	4924      	ldr	r1, [pc, #144]	; (8033648 <cmd_rspid+0x11c>)
 80335b6:	4613      	mov	r3, r2
 80335b8:	00db      	lsls	r3, r3, #3
 80335ba:	4413      	add	r3, r2
 80335bc:	009b      	lsls	r3, r3, #2
 80335be:	4413      	add	r3, r2
 80335c0:	440b      	add	r3, r1
 80335c2:	3318      	adds	r3, #24
 80335c4:	2200      	movs	r2, #0
 80335c6:	f062 0237 	orn	r2, r2, #55	; 0x37
 80335ca:	715a      	strb	r2, [r3, #5]
 80335cc:	2200      	movs	r2, #0
 80335ce:	719a      	strb	r2, [r3, #6]
 80335d0:	2200      	movs	r2, #0
 80335d2:	71da      	strb	r2, [r3, #7]
 80335d4:	2200      	movs	r2, #0
 80335d6:	721a      	strb	r2, [r3, #8]
 80335d8:	e01f      	b.n	803361a <cmd_rspid+0xee>
    }
    else
    {
    	//	Clear ID Flag
    	g_flagRspID &= ~( 0x1 << nID );
 80335da:	68fb      	ldr	r3, [r7, #12]
 80335dc:	2201      	movs	r2, #1
 80335de:	fa02 f303 	lsl.w	r3, r2, r3
 80335e2:	b21b      	sxth	r3, r3
 80335e4:	43db      	mvns	r3, r3
 80335e6:	b21a      	sxth	r2, r3
 80335e8:	4b16      	ldr	r3, [pc, #88]	; (8033644 <cmd_rspid+0x118>)
 80335ea:	881b      	ldrh	r3, [r3, #0]
 80335ec:	b21b      	sxth	r3, r3
 80335ee:	4013      	ands	r3, r2
 80335f0:	b21b      	sxth	r3, r3
 80335f2:	b29a      	uxth	r2, r3
 80335f4:	4b13      	ldr	r3, [pc, #76]	; (8033644 <cmd_rspid+0x118>)
 80335f6:	801a      	strh	r2, [r3, #0]
		g_devStat[nID].nRSSI = 0;
 80335f8:	68fa      	ldr	r2, [r7, #12]
 80335fa:	4913      	ldr	r1, [pc, #76]	; (8033648 <cmd_rspid+0x11c>)
 80335fc:	4613      	mov	r3, r2
 80335fe:	00db      	lsls	r3, r3, #3
 8033600:	4413      	add	r3, r2
 8033602:	009b      	lsls	r3, r3, #2
 8033604:	4413      	add	r3, r2
 8033606:	440b      	add	r3, r1
 8033608:	3318      	adds	r3, #24
 803360a:	2200      	movs	r2, #0
 803360c:	715a      	strb	r2, [r3, #5]
 803360e:	2200      	movs	r2, #0
 8033610:	719a      	strb	r2, [r3, #6]
 8033612:	2200      	movs	r2, #0
 8033614:	71da      	strb	r2, [r3, #7]
 8033616:	2200      	movs	r2, #0
 8033618:	721a      	strb	r2, [r3, #8]
    }

    printf( "%s(%d) - ID Flag : 0x%04X\n", __func__, __LINE__, g_flagRspID );
 803361a:	4b0a      	ldr	r3, [pc, #40]	; (8033644 <cmd_rspid+0x118>)
 803361c:	881b      	ldrh	r3, [r3, #0]
 803361e:	f240 424e 	movw	r2, #1102	; 0x44e
 8033622:	4905      	ldr	r1, [pc, #20]	; (8033638 <cmd_rspid+0x10c>)
 8033624:	4809      	ldr	r0, [pc, #36]	; (803364c <cmd_rspid+0x120>)
 8033626:	f003 ff3b 	bl	80374a0 <iprintf>

	return 1;
 803362a:	2301      	movs	r3, #1
}
 803362c:	4618      	mov	r0, r3
 803362e:	3710      	adds	r7, #16
 8033630:	46bd      	mov	sp, r7
 8033632:	bd80      	pop	{r7, pc}
 8033634:	0803b22c 	.word	0x0803b22c
 8033638:	08041798 	.word	0x08041798
 803363c:	0803b420 	.word	0x0803b420
 8033640:	20001390 	.word	0x20001390
 8033644:	20001394 	.word	0x20001394
 8033648:	2000234c 	.word	0x2000234c
 803364c:	0803b434 	.word	0x0803b434

08033650 <cmd_OccPa>:


//========================================================================
int cmd_OccPa     ( int argc, char * argv[] )
//========================================================================
{
 8033650:	b580      	push	{r7, lr}
 8033652:	b084      	sub	sp, #16
 8033654:	af00      	add	r7, sp, #0
 8033656:	6078      	str	r0, [r7, #4]
 8033658:	6039      	str	r1, [r7, #0]
    //	occ [1(start)/0(stop)]	-	대승객방송

//	printf("%s(%d)\n", __func__, __LINE__ );

	//	대승객방송 시작/종료
    int 		nOnOff 	= 0;
 803365a:	2300      	movs	r3, #0
 803365c:	60fb      	str	r3, [r7, #12]

    switch ( argc )
 803365e:	687b      	ldr	r3, [r7, #4]
 8033660:	2b02      	cmp	r3, #2
 8033662:	d109      	bne.n	8033678 <cmd_OccPa+0x28>
    {
    case 2:		sscanf( argv[1], "%d", &nOnOff );	    //	On/Off
 8033664:	683b      	ldr	r3, [r7, #0]
 8033666:	3304      	adds	r3, #4
 8033668:	681b      	ldr	r3, [r3, #0]
 803366a:	f107 020c 	add.w	r2, r7, #12
 803366e:	491c      	ldr	r1, [pc, #112]	; (80336e0 <cmd_OccPa+0x90>)
 8033670:	4618      	mov	r0, r3
 8033672:	f004 f861 	bl	8037738 <siscanf>
        break;
 8033676:	bf00      	nop
    }

    if ( nOnOff == 1 )
 8033678:	68fb      	ldr	r3, [r7, #12]
 803367a:	2b01      	cmp	r3, #1
 803367c:	d117      	bne.n	80336ae <cmd_OccPa+0x5e>
    {
//    	printf("%s(%d) - Start\n", __func__, __LINE__ );
    	printf("[Start][OCC]\n");
 803367e:	4819      	ldr	r0, [pc, #100]	; (80336e4 <cmd_OccPa+0x94>)
 8033680:	f003 ff7c 	bl	803757c <puts>

    	//	OCC Mode
    	SetRFMMode( RFMModeOcc );
 8033684:	2003      	movs	r0, #3
 8033686:	f7ff f84b 	bl	8032720 <SetRFMMode>
    	//	Audio Loopback On
		AudioDMALoopback();
#endif

		// 조명 On
		HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
 803368a:	2201      	movs	r2, #1
 803368c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8033690:	4815      	ldr	r0, [pc, #84]	; (80336e8 <cmd_OccPa+0x98>)
 8033692:	f7ef ff43 	bl	802351c <HAL_GPIO_WritePin>

		//	Spk On
		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
 8033696:	2201      	movs	r2, #1
 8033698:	2120      	movs	r1, #32
 803369a:	4813      	ldr	r0, [pc, #76]	; (80336e8 <cmd_OccPa+0x98>)
 803369c:	f7ef ff3e 	bl	802351c <HAL_GPIO_WritePin>

		//  수신기 Spk Relay On
		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_SET );
 80336a0:	2201      	movs	r2, #1
 80336a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80336a6:	4810      	ldr	r0, [pc, #64]	; (80336e8 <cmd_OccPa+0x98>)
 80336a8:	f7ef ff38 	bl	802351c <HAL_GPIO_WritePin>
 80336ac:	e013      	b.n	80336d6 <cmd_OccPa+0x86>
    }
    else
    {
//    	printf("%s(%d) - Stop\n", __func__, __LINE__ );
    	printf("[Stop][OCC]\n");
 80336ae:	480f      	ldr	r0, [pc, #60]	; (80336ec <cmd_OccPa+0x9c>)
 80336b0:	f003 ff64 	bl	803757c <puts>

    	//	Normal Mode

    	SetRFMMode( RFMModeOccStop);
 80336b4:	2005      	movs	r0, #5
 80336b6:	f7ff f833 	bl	8032720 <SetRFMMode>

    	SetRFMMode( RFMModeNormal );
 80336ba:	2000      	movs	r0, #0
 80336bc:	f7ff f830 	bl	8032720 <SetRFMMode>
    	//	Audio Loopback Off
    	AudioDMARFM();
#endif

    	//	Spk Off.
		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
 80336c0:	2200      	movs	r2, #0
 80336c2:	2120      	movs	r1, #32
 80336c4:	4808      	ldr	r0, [pc, #32]	; (80336e8 <cmd_OccPa+0x98>)
 80336c6:	f7ef ff29 	bl	802351c <HAL_GPIO_WritePin>

		//  수신기 Spk Relay Off
		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_RESET );
 80336ca:	2200      	movs	r2, #0
 80336cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80336d0:	4805      	ldr	r0, [pc, #20]	; (80336e8 <cmd_OccPa+0x98>)
 80336d2:	f7ef ff23 	bl	802351c <HAL_GPIO_WritePin>
    }
}
 80336d6:	bf00      	nop
 80336d8:	4618      	mov	r0, r3
 80336da:	3710      	adds	r7, #16
 80336dc:	46bd      	mov	sp, r7
 80336de:	bd80      	pop	{r7, pc}
 80336e0:	0803b22c 	.word	0x0803b22c
 80336e4:	0803b450 	.word	0x0803b450
 80336e8:	40021000 	.word	0x40021000
 80336ec:	0803b460 	.word	0x0803b460

080336f0 <lowpass_Filter>:

static int16_t	bufAudioEnc[FRAME_ENC_SIZE * 2];	//	Rx
static int16_t	bufAudioDec[FRAME_ENC_SIZE * 2];	//	Tx

signed short lowpass_Filter(signed short input)
{
 80336f0:	b480      	push	{r7}
 80336f2:	b085      	sub	sp, #20
 80336f4:	af00      	add	r7, sp, #0
 80336f6:	4603      	mov	r3, r0
 80336f8:	80fb      	strh	r3, [r7, #6]
	static signed short last_sample=0;
	signed short retvalue = ((input + (last_sample * 7)) >> 3);
 80336fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80336fe:	4b0a      	ldr	r3, [pc, #40]	; (8033728 <lowpass_Filter+0x38>)
 8033700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8033704:	4619      	mov	r1, r3
 8033706:	460b      	mov	r3, r1
 8033708:	00db      	lsls	r3, r3, #3
 803370a:	1a5b      	subs	r3, r3, r1
 803370c:	4413      	add	r3, r2
 803370e:	10db      	asrs	r3, r3, #3
 8033710:	81fb      	strh	r3, [r7, #14]
	last_sample = retvalue;
 8033712:	4a05      	ldr	r2, [pc, #20]	; (8033728 <lowpass_Filter+0x38>)
 8033714:	89fb      	ldrh	r3, [r7, #14]
 8033716:	8013      	strh	r3, [r2, #0]
	return retvalue;
 8033718:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 803371c:	4618      	mov	r0, r3
 803371e:	3714      	adds	r7, #20
 8033720:	46bd      	mov	sp, r7
 8033722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033726:	4770      	bx	lr
 8033728:	2000290c 	.word	0x2000290c

0803372c <RFM_I2SEx_TxRxCpltCallback>:
static int bRxBuffering = 1;	//  Rx Buffering. ( Packet 4 ~ Packet 0)

//========================================================================
void RFM_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
//========================================================================
{
 803372c:	b590      	push	{r4, r7, lr}
 803372e:	b089      	sub	sp, #36	; 0x24
 8033730:	af00      	add	r7, sp, #0
 8033732:	6078      	str	r0, [r7, #4]
	int16_t		*pAudioRx;

	{
#if defined( USE_AUDIO_INTERPOL_COMPRESS )	|| defined( USE_AUDIO_ADPCM ) //	보간압축사용 or ADPCM 사용.

		pAudioTx = &bufAudioDec[FRAME_ENC_SIZE * idx];
 8033734:	4b6f      	ldr	r3, [pc, #444]	; (80338f4 <RFM_I2SEx_TxRxCpltCallback+0x1c8>)
 8033736:	681a      	ldr	r2, [r3, #0]
 8033738:	4613      	mov	r3, r2
 803373a:	011b      	lsls	r3, r3, #4
 803373c:	1a9b      	subs	r3, r3, r2
 803373e:	00db      	lsls	r3, r3, #3
 8033740:	005b      	lsls	r3, r3, #1
 8033742:	4a6d      	ldr	r2, [pc, #436]	; (80338f8 <RFM_I2SEx_TxRxCpltCallback+0x1cc>)
 8033744:	4413      	add	r3, r2
 8033746:	617b      	str	r3, [r7, #20]
		pAudioRx = &bufAudioEnc[FRAME_ENC_SIZE * (( idx + 1 ) % 2)];
 8033748:	4b6a      	ldr	r3, [pc, #424]	; (80338f4 <RFM_I2SEx_TxRxCpltCallback+0x1c8>)
 803374a:	681b      	ldr	r3, [r3, #0]
 803374c:	3301      	adds	r3, #1
 803374e:	2b00      	cmp	r3, #0
 8033750:	f003 0301 	and.w	r3, r3, #1
 8033754:	bfb8      	it	lt
 8033756:	425b      	neglt	r3, r3
 8033758:	461a      	mov	r2, r3
 803375a:	4613      	mov	r3, r2
 803375c:	011b      	lsls	r3, r3, #4
 803375e:	1a9b      	subs	r3, r3, r2
 8033760:	00db      	lsls	r3, r3, #3
 8033762:	005b      	lsls	r3, r3, #1
 8033764:	4a65      	ldr	r2, [pc, #404]	; (80338fc <RFM_I2SEx_TxRxCpltCallback+0x1d0>)
 8033766:	4413      	add	r3, r2
 8033768:	613b      	str	r3, [r7, #16]

		HAL_I2SEx_TransmitReceive_DMA( &hi2s3,
 803376a:	2378      	movs	r3, #120	; 0x78
 803376c:	693a      	ldr	r2, [r7, #16]
 803376e:	6979      	ldr	r1, [r7, #20]
 8033770:	4863      	ldr	r0, [pc, #396]	; (8033900 <RFM_I2SEx_TxRxCpltCallback+0x1d4>)
 8033772:	f7f1 fbd3 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>
										pAudioTx,	//	Tx
										pAudioRx,	//	Rx
										FRAME_ENC_SIZE ); // 32byte

		pAudioRx = &bufAudioEnc[FRAME_ENC_SIZE * idx];
 8033776:	4b5f      	ldr	r3, [pc, #380]	; (80338f4 <RFM_I2SEx_TxRxCpltCallback+0x1c8>)
 8033778:	681a      	ldr	r2, [r3, #0]
 803377a:	4613      	mov	r3, r2
 803377c:	011b      	lsls	r3, r3, #4
 803377e:	1a9b      	subs	r3, r3, r2
 8033780:	00db      	lsls	r3, r3, #3
 8033782:	005b      	lsls	r3, r3, #1
 8033784:	4a5d      	ldr	r2, [pc, #372]	; (80338fc <RFM_I2SEx_TxRxCpltCallback+0x1d0>)
 8033786:	4413      	add	r3, r2
 8033788:	613b      	str	r3, [r7, #16]
		idx = ( idx + 1 ) % 2;
 803378a:	4b5a      	ldr	r3, [pc, #360]	; (80338f4 <RFM_I2SEx_TxRxCpltCallback+0x1c8>)
 803378c:	681b      	ldr	r3, [r3, #0]
 803378e:	3301      	adds	r3, #1
 8033790:	2b00      	cmp	r3, #0
 8033792:	f003 0301 	and.w	r3, r3, #1
 8033796:	bfb8      	it	lt
 8033798:	425b      	neglt	r3, r3
 803379a:	4a56      	ldr	r2, [pc, #344]	; (80338f4 <RFM_I2SEx_TxRxCpltCallback+0x1c8>)
 803379c:	6013      	str	r3, [r2, #0]
		pAudioTx = &bufAudioDec[FRAME_ENC_SIZE * idx];
 803379e:	4b55      	ldr	r3, [pc, #340]	; (80338f4 <RFM_I2SEx_TxRxCpltCallback+0x1c8>)
 80337a0:	681a      	ldr	r2, [r3, #0]
 80337a2:	4613      	mov	r3, r2
 80337a4:	011b      	lsls	r3, r3, #4
 80337a6:	1a9b      	subs	r3, r3, r2
 80337a8:	00db      	lsls	r3, r3, #3
 80337aa:	005b      	lsls	r3, r3, #1
 80337ac:	4a52      	ldr	r2, [pc, #328]	; (80338f8 <RFM_I2SEx_TxRxCpltCallback+0x1cc>)
 80337ae:	4413      	add	r3, r2
 80337b0:	617b      	str	r3, [r7, #20]
		//========================================================================
		//  송신기.

		//  r_audio_buff -> RF-Tx

		if ( qBufCnt( &g_qBufAudioTx ) < ( ( I2S_DMA_LOOP_SIZE * 2 ) * ( I2S_DMA_LOOP_QCNT - 1 ) ) )
 80337b2:	4854      	ldr	r0, [pc, #336]	; (8033904 <RFM_I2SEx_TxRxCpltCallback+0x1d8>)
 80337b4:	f7fa fd4c 	bl	802e250 <qBufCnt>
 80337b8:	4603      	mov	r3, r0
 80337ba:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80337be:	da3c      	bge.n	803383a <RFM_I2SEx_TxRxCpltCallback+0x10e>

#elif defined( USE_AUDIO_ADPCM )	//	ADPCM 사용. - 1/4 압축

			//	ADPCM : 16 bit -> 4 bit
			int i;
			uint8_t *pABuf = (uint8_t *)r_audio_buff;
 80337c0:	4b51      	ldr	r3, [pc, #324]	; (8033908 <RFM_I2SEx_TxRxCpltCallback+0x1dc>)
 80337c2:	60fb      	str	r3, [r7, #12]
			for( i = 0; i < I2S_DMA_LOOP_SIZE*2; i++ )
 80337c4:	2300      	movs	r3, #0
 80337c6:	61fb      	str	r3, [r7, #28]
 80337c8:	e02f      	b.n	803382a <RFM_I2SEx_TxRxCpltCallback+0xfe>
			{
				//*
				pABuf[i] = (uint8_t)((uint8_t)((ADPCM_Encode(lowpass_Filter((int16_t)pAudioRx[i*2])<<1)&(0x0F))<<4)
 80337ca:	69fb      	ldr	r3, [r7, #28]
 80337cc:	009b      	lsls	r3, r3, #2
 80337ce:	693a      	ldr	r2, [r7, #16]
 80337d0:	4413      	add	r3, r2
 80337d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80337d6:	4618      	mov	r0, r3
 80337d8:	f7ff ff8a 	bl	80336f0 <lowpass_Filter>
 80337dc:	4603      	mov	r3, r0
 80337de:	005b      	lsls	r3, r3, #1
 80337e0:	4618      	mov	r0, r3
 80337e2:	f7fc f851 	bl	802f888 <ADPCM_Encode>
 80337e6:	4603      	mov	r3, r0
 80337e8:	011b      	lsls	r3, r3, #4
 80337ea:	b2db      	uxtb	r3, r3
 80337ec:	b25c      	sxtb	r4, r3
								| (uint8_t)(ADPCM_Encode(lowpass_Filter((int16_t)pAudioRx[i*2+1])<<1)&0x0F));
 80337ee:	69fb      	ldr	r3, [r7, #28]
 80337f0:	009b      	lsls	r3, r3, #2
 80337f2:	3302      	adds	r3, #2
 80337f4:	693a      	ldr	r2, [r7, #16]
 80337f6:	4413      	add	r3, r2
 80337f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80337fc:	4618      	mov	r0, r3
 80337fe:	f7ff ff77 	bl	80336f0 <lowpass_Filter>
 8033802:	4603      	mov	r3, r0
 8033804:	005b      	lsls	r3, r3, #1
 8033806:	4618      	mov	r0, r3
 8033808:	f7fc f83e 	bl	802f888 <ADPCM_Encode>
 803380c:	4603      	mov	r3, r0
 803380e:	b25b      	sxtb	r3, r3
 8033810:	f003 030f 	and.w	r3, r3, #15
 8033814:	b25b      	sxtb	r3, r3
 8033816:	4323      	orrs	r3, r4
 8033818:	b259      	sxtb	r1, r3
				pABuf[i] = (uint8_t)((uint8_t)((ADPCM_Encode(lowpass_Filter((int16_t)pAudioRx[i*2])<<1)&(0x0F))<<4)
 803381a:	69fb      	ldr	r3, [r7, #28]
 803381c:	68fa      	ldr	r2, [r7, #12]
 803381e:	4413      	add	r3, r2
 8033820:	b2ca      	uxtb	r2, r1
 8033822:	701a      	strb	r2, [r3, #0]
			for( i = 0; i < I2S_DMA_LOOP_SIZE*2; i++ )
 8033824:	69fb      	ldr	r3, [r7, #28]
 8033826:	3301      	adds	r3, #1
 8033828:	61fb      	str	r3, [r7, #28]
 803382a:	69fb      	ldr	r3, [r7, #28]
 803382c:	2b3b      	cmp	r3, #59	; 0x3b
 803382e:	ddcc      	ble.n	80337ca <RFM_I2SEx_TxRxCpltCallback+0x9e>
				pABuf[i] = (uint8_t)((uint8_t)((ADPCM_Encode((int16_t)pAudioRx[i*2])&(0x0F))<<4)
								| (uint8_t)(ADPCM_Encode((int16_t)pAudioRx[i*2+1])&0x0F));
				//	*/
			}

			qBufPut( &g_qBufAudioTx, (uint8_t *)r_audio_buff, ( I2S_DMA_LOOP_SIZE * 2 ) );
 8033830:	223c      	movs	r2, #60	; 0x3c
 8033832:	4935      	ldr	r1, [pc, #212]	; (8033908 <RFM_I2SEx_TxRxCpltCallback+0x1dc>)
 8033834:	4833      	ldr	r0, [pc, #204]	; (8033904 <RFM_I2SEx_TxRxCpltCallback+0x1d8>)
 8033836:	f7fa fd24 	bl	802e282 <qBufPut>
		memcpy( t_audio_buff, r_audio_buff, 64 );

		/*/

#if defined( USE_AUDIO_INTERPOL_COMPRESS ) || defined( USE_AUDIO_ADPCM )	//	보간압축사용 or ACPCM 사용
		memset( pAudioTx, 0, FRAME_ENC_SIZE * 2 );	//	Tx
 803383a:	22f0      	movs	r2, #240	; 0xf0
 803383c:	2100      	movs	r1, #0
 803383e:	6978      	ldr	r0, [r7, #20]
 8033840:	f004 f890 	bl	8037964 <memset>
#endif

		//========================================================================
		//  Rx Buffering ( Packet Count : 0 ~ 4 )
		//  RF-Rx -> t_audio_buff
		if ( bRxBuffering )
 8033844:	4b31      	ldr	r3, [pc, #196]	; (803390c <RFM_I2SEx_TxRxCpltCallback+0x1e0>)
 8033846:	681b      	ldr	r3, [r3, #0]
 8033848:	2b00      	cmp	r3, #0
 803384a:	d00b      	beq.n	8033864 <RFM_I2SEx_TxRxCpltCallback+0x138>
		{
			//  Buffering
			if ( qBufCnt( &g_qBufAudioRx ) > ( ( I2S_DMA_LOOP_SIZE * 2 ) * 3 ) )
 803384c:	4830      	ldr	r0, [pc, #192]	; (8033910 <RFM_I2SEx_TxRxCpltCallback+0x1e4>)
 803384e:	f7fa fcff 	bl	802e250 <qBufCnt>
 8033852:	4603      	mov	r3, r0
 8033854:	2bb4      	cmp	r3, #180	; 0xb4
 8033856:	dd05      	ble.n	8033864 <RFM_I2SEx_TxRxCpltCallback+0x138>
			{
				//  패킷이 4개 이상인경우 버퍼링 종료.
				bRxBuffering = 0;
 8033858:	4b2c      	ldr	r3, [pc, #176]	; (803390c <RFM_I2SEx_TxRxCpltCallback+0x1e0>)
 803385a:	2200      	movs	r2, #0
 803385c:	601a      	str	r2, [r3, #0]

				printf ( "F" );	 //  버퍼링종료 ( Buffering End - Buffer Full )
 803385e:	2046      	movs	r0, #70	; 0x46
 8033860:	f003 fe30 	bl	80374c4 <putchar>
			}
		}

		if ( bRxBuffering == 0 )
 8033864:	4b29      	ldr	r3, [pc, #164]	; (803390c <RFM_I2SEx_TxRxCpltCallback+0x1e0>)
 8033866:	681b      	ldr	r3, [r3, #0]
 8033868:	2b00      	cmp	r3, #0
 803386a:	d13e      	bne.n	80338ea <RFM_I2SEx_TxRxCpltCallback+0x1be>
		{
			//  Rx Audio Out
			if ( qBufCnt( &g_qBufAudioRx ) >= ( I2S_DMA_LOOP_SIZE * 2 ) )
 803386c:	4828      	ldr	r0, [pc, #160]	; (8033910 <RFM_I2SEx_TxRxCpltCallback+0x1e4>)
 803386e:	f7fa fcef 	bl	802e250 <qBufCnt>
 8033872:	4603      	mov	r3, r0
 8033874:	2b3b      	cmp	r3, #59	; 0x3b
 8033876:	dd30      	ble.n	80338da <RFM_I2SEx_TxRxCpltCallback+0x1ae>
			//		outBuf[ i ] = bufAudioDec[i / AUDIO_COMPR_RATE];
				}

#elif defined( USE_AUDIO_ADPCM )	//	ADPCM 사용. - 1/4 압축

				qBufGet( &g_qBufAudioRx, (uint8_t*)t_audio_buff, ( I2S_DMA_LOOP_SIZE * 2 ) );
 8033878:	223c      	movs	r2, #60	; 0x3c
 803387a:	4926      	ldr	r1, [pc, #152]	; (8033914 <RFM_I2SEx_TxRxCpltCallback+0x1e8>)
 803387c:	4824      	ldr	r0, [pc, #144]	; (8033910 <RFM_I2SEx_TxRxCpltCallback+0x1e4>)
 803387e:	f7fa fd34 	bl	802e2ea <qBufGet>

				uint8_t *pABuf = (uint8_t *)t_audio_buff;
 8033882:	4b24      	ldr	r3, [pc, #144]	; (8033914 <RFM_I2SEx_TxRxCpltCallback+0x1e8>)
 8033884:	60bb      	str	r3, [r7, #8]
				//	Decoding : 4 bit -> 16 bit
				int i;
				for( i = 0; i < FRAME_ENC_SIZE/2; i++ )
 8033886:	2300      	movs	r3, #0
 8033888:	61bb      	str	r3, [r7, #24]
 803388a:	e022      	b.n	80338d2 <RFM_I2SEx_TxRxCpltCallback+0x1a6>
				{
					pAudioTx[i*2] = (uint16_t)ADPCM_Decode((uint8_t)((pABuf[i]&(0xF0)))>>4);
 803388c:	69bb      	ldr	r3, [r7, #24]
 803388e:	68ba      	ldr	r2, [r7, #8]
 8033890:	4413      	add	r3, r2
 8033892:	781b      	ldrb	r3, [r3, #0]
 8033894:	091b      	lsrs	r3, r3, #4
 8033896:	b2d9      	uxtb	r1, r3
 8033898:	69bb      	ldr	r3, [r7, #24]
 803389a:	009b      	lsls	r3, r3, #2
 803389c:	697a      	ldr	r2, [r7, #20]
 803389e:	18d4      	adds	r4, r2, r3
 80338a0:	4608      	mov	r0, r1
 80338a2:	f7fc f8a9 	bl	802f9f8 <ADPCM_Decode>
 80338a6:	4603      	mov	r3, r0
 80338a8:	8023      	strh	r3, [r4, #0]
					pAudioTx[i*2+1] = (uint16_t)ADPCM_Decode((uint8_t)(pABuf[i]&0x0F));
 80338aa:	69bb      	ldr	r3, [r7, #24]
 80338ac:	68ba      	ldr	r2, [r7, #8]
 80338ae:	4413      	add	r3, r2
 80338b0:	781b      	ldrb	r3, [r3, #0]
 80338b2:	f003 030f 	and.w	r3, r3, #15
 80338b6:	b2d9      	uxtb	r1, r3
 80338b8:	69bb      	ldr	r3, [r7, #24]
 80338ba:	009b      	lsls	r3, r3, #2
 80338bc:	3302      	adds	r3, #2
 80338be:	697a      	ldr	r2, [r7, #20]
 80338c0:	18d4      	adds	r4, r2, r3
 80338c2:	4608      	mov	r0, r1
 80338c4:	f7fc f898 	bl	802f9f8 <ADPCM_Decode>
 80338c8:	4603      	mov	r3, r0
 80338ca:	8023      	strh	r3, [r4, #0]
				for( i = 0; i < FRAME_ENC_SIZE/2; i++ )
 80338cc:	69bb      	ldr	r3, [r7, #24]
 80338ce:	3301      	adds	r3, #1
 80338d0:	61bb      	str	r3, [r7, #24]
 80338d2:	69bb      	ldr	r3, [r7, #24]
 80338d4:	2b3b      	cmp	r3, #59	; 0x3b
 80338d6:	ddd9      	ble.n	803388c <RFM_I2SEx_TxRxCpltCallback+0x160>

			}
		}
		//  */
	}
}
 80338d8:	e007      	b.n	80338ea <RFM_I2SEx_TxRxCpltCallback+0x1be>
				printf ( "B" );	 //  버퍼링시작 ( Buffering )
 80338da:	2042      	movs	r0, #66	; 0x42
 80338dc:	f003 fdf2 	bl	80374c4 <putchar>
				bRxBuffering = 1;
 80338e0:	4b0a      	ldr	r3, [pc, #40]	; (803390c <RFM_I2SEx_TxRxCpltCallback+0x1e0>)
 80338e2:	2201      	movs	r2, #1
 80338e4:	601a      	str	r2, [r3, #0]
				ADPCM_ClearDecodeBuf();
 80338e6:	f7fb ffbd 	bl	802f864 <ADPCM_ClearDecodeBuf>
}
 80338ea:	bf00      	nop
 80338ec:	3724      	adds	r7, #36	; 0x24
 80338ee:	46bd      	mov	sp, r7
 80338f0:	bd90      	pop	{r4, r7, pc}
 80338f2:	bf00      	nop
 80338f4:	20002910 	.word	0x20002910
 80338f8:	20002724 	.word	0x20002724
 80338fc:	20002544 	.word	0x20002544
 8033900:	20000ed4 	.word	0x20000ed4
 8033904:	20001f6c 	.word	0x20001f6c
 8033908:	200021d4 	.word	0x200021d4
 803390c:	20000bf4 	.word	0x20000bf4
 8033910:	20001d7c 	.word	0x20001d7c
 8033914:	2000215c 	.word	0x2000215c

08033918 <InitRFM>:
//========================================================================

//========================================================================
int InitRFM( void )
//========================================================================
{
 8033918:	b590      	push	{r4, r7, lr}
 803391a:	b08d      	sub	sp, #52	; 0x34
 803391c:	af04      	add	r7, sp, #16
	printf( "%s(%d)\n", __func__, __LINE__ );
 803391e:	f240 5285 	movw	r2, #1413	; 0x585
 8033922:	49b2      	ldr	r1, [pc, #712]	; (8033bec <InitRFM+0x2d4>)
 8033924:	48b2      	ldr	r0, [pc, #712]	; (8033bf0 <InitRFM+0x2d8>)
 8033926:	f003 fdbb 	bl	80374a0 <iprintf>

	//========================================================================
	I2C_BusScan( &hi2c1 );
 803392a:	48b2      	ldr	r0, [pc, #712]	; (8033bf4 <InitRFM+0x2dc>)
 803392c:	f7fd fb1e 	bl	8030f6c <I2C_BusScan>
	I2C_BusScan( &hi2c3 );
 8033930:	48b1      	ldr	r0, [pc, #708]	; (8033bf8 <InitRFM+0x2e0>)
 8033932:	f7fd fb1b 	bl	8030f6c <I2C_BusScan>

	//========================================================================
	//	Car Number 설정.
	g_flagRspID |= (0x1 << GetCarNo());		//	자신의 ID Flag 설정.
 8033936:	f7ff fa91 	bl	8032e5c <GetCarNo>
 803393a:	4603      	mov	r3, r0
 803393c:	2201      	movs	r2, #1
 803393e:	fa02 f303 	lsl.w	r3, r2, r3
 8033942:	b21a      	sxth	r2, r3
 8033944:	4bad      	ldr	r3, [pc, #692]	; (8033bfc <InitRFM+0x2e4>)
 8033946:	881b      	ldrh	r3, [r3, #0]
 8033948:	b21b      	sxth	r3, r3
 803394a:	4313      	orrs	r3, r2
 803394c:	b21b      	sxth	r3, r3
 803394e:	b29a      	uxth	r2, r3
 8033950:	4baa      	ldr	r3, [pc, #680]	; (8033bfc <InitRFM+0x2e4>)
 8033952:	801a      	strh	r2, [r3, #0]

	//========================================================================
	//	Codec MAX9860ETG+
	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), 2, 2 ) )
 8033954:	2302      	movs	r3, #2
 8033956:	2202      	movs	r2, #2
 8033958:	2120      	movs	r1, #32
 803395a:	48a6      	ldr	r0, [pc, #664]	; (8033bf4 <InitRFM+0x2dc>)
 803395c:	f7f0 fb8c 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8033960:	4603      	mov	r3, r0
 8033962:	2b00      	cmp	r3, #0
 8033964:	d12c      	bne.n	80339c0 <InitRFM+0xa8>
	{
		//  Read Rev.
		char buf[10];
		int cntRetry;

		cntRetry = 0;
 8033966:	2300      	movs	r3, #0
 8033968:	61fb      	str	r3, [r7, #28]

		memset( buf, 0, sizeof( buf ) );
 803396a:	1d3b      	adds	r3, r7, #4
 803396c:	220a      	movs	r2, #10
 803396e:	2100      	movs	r1, #0
 8033970:	4618      	mov	r0, r3
 8033972:	f003 fff7 	bl	8037964 <memset>
		while ( HAL_I2C_Mem_Read( &hi2c1, (uint16_t)( 0x10 << 1 ), (uint16_t)0xFF, I2C_MEMADD_SIZE_8BIT, buf, (uint16_t)1, 1000 ) != HAL_OK && cntRetry < 10 ) cntRetry++;
 8033976:	e002      	b.n	803397e <InitRFM+0x66>
 8033978:	69fb      	ldr	r3, [r7, #28]
 803397a:	3301      	adds	r3, #1
 803397c:	61fb      	str	r3, [r7, #28]
 803397e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8033982:	9302      	str	r3, [sp, #8]
 8033984:	2301      	movs	r3, #1
 8033986:	9301      	str	r3, [sp, #4]
 8033988:	1d3b      	adds	r3, r7, #4
 803398a:	9300      	str	r3, [sp, #0]
 803398c:	2301      	movs	r3, #1
 803398e:	22ff      	movs	r2, #255	; 0xff
 8033990:	2120      	movs	r1, #32
 8033992:	4898      	ldr	r0, [pc, #608]	; (8033bf4 <InitRFM+0x2dc>)
 8033994:	f7f0 f94a 	bl	8023c2c <HAL_I2C_Mem_Read>
 8033998:	4603      	mov	r3, r0
 803399a:	2b00      	cmp	r3, #0
 803399c:	d002      	beq.n	80339a4 <InitRFM+0x8c>
 803399e:	69fb      	ldr	r3, [r7, #28]
 80339a0:	2b09      	cmp	r3, #9
 80339a2:	dde9      	ble.n	8033978 <InitRFM+0x60>

		printf( "%s(%d) - Codec ( MAX9860ETG+ ) / Rev. 0x%02X\n", __func__, __LINE__, buf[0] );
 80339a4:	793b      	ldrb	r3, [r7, #4]
 80339a6:	f240 529c 	movw	r2, #1436	; 0x59c
 80339aa:	4990      	ldr	r1, [pc, #576]	; (8033bec <InitRFM+0x2d4>)
 80339ac:	4894      	ldr	r0, [pc, #592]	; (8033c00 <InitRFM+0x2e8>)
 80339ae:	f003 fd77 	bl	80374a0 <iprintf>

		//========================================================================
		//  Codec 초기화.
		InitCodecMAX9860();
 80339b2:	f7fc f99b 	bl	802fcec <InitCodecMAX9860>

		//========================================================================
		//	Init Audio ( I2S PCM )
		AudioInit();
 80339b6:	f7fc f8a9 	bl	802fb0c <AudioInit>

		//========================================================================
		//	I2S Callback 등록.
		SetCallbackI2STxRxCplt( RFM_I2SEx_TxRxCpltCallback );
 80339ba:	4892      	ldr	r0, [pc, #584]	; (8033c04 <InitRFM+0x2ec>)
 80339bc:	f7fc f906 	bl	802fbcc <SetCallbackI2STxRxCplt>
		//========================================================================
	}

	//========================================================================
	//	편성번호 Load
	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 80339c0:	2302      	movs	r3, #2
 80339c2:	2202      	movs	r2, #2
 80339c4:	21a0      	movs	r1, #160	; 0xa0
 80339c6:	488b      	ldr	r0, [pc, #556]	; (8033bf4 <InitRFM+0x2dc>)
 80339c8:	f7f0 fb56 	bl	8024078 <HAL_I2C_IsDeviceReady>
 80339cc:	4603      	mov	r3, r0
 80339ce:	2b00      	cmp	r3, #0
 80339d0:	d118      	bne.n	8033a04 <InitRFM+0xec>
	{
		printf( "%s(%d) - EEPROM OK\n", __func__, __LINE__ );
 80339d2:	f240 52b2 	movw	r2, #1458	; 0x5b2
 80339d6:	4985      	ldr	r1, [pc, #532]	; (8033bec <InitRFM+0x2d4>)
 80339d8:	488b      	ldr	r0, [pc, #556]	; (8033c08 <InitRFM+0x2f0>)
 80339da:	f003 fd61 	bl	80374a0 <iprintf>
		TestEEPROM( &hi2c1 ); //  Test EEPROM
 80339de:	4885      	ldr	r0, [pc, #532]	; (8033bf4 <InitRFM+0x2dc>)
 80339e0:	f7fd fafc 	bl	8030fdc <TestEEPROM>

		//========================================================================
		//  Read TrainSet
		uint8_t	 idxTrainSet;
		idxTrainSet = GetTrainSetIdx();
 80339e4:	f7ff f8c8 	bl	8032b78 <GetTrainSetIdx>
 80339e8:	4603      	mov	r3, r0
 80339ea:	76fb      	strb	r3, [r7, #27]

		if ( idxTrainSet < 0 || idxTrainSet >= MaxTrainSet )
 80339ec:	7efb      	ldrb	r3, [r7, #27]
 80339ee:	2b13      	cmp	r3, #19
 80339f0:	d905      	bls.n	80339fe <InitRFM+0xe6>
		{
			idxTrainSet = 0;
 80339f2:	2300      	movs	r3, #0
 80339f4:	76fb      	strb	r3, [r7, #27]

			SetTrainSetIdx( idxTrainSet );
 80339f6:	7efb      	ldrb	r3, [r7, #27]
 80339f8:	4618      	mov	r0, r3
 80339fa:	f7ff f8d3 	bl	8032ba4 <SetTrainSetIdx>
		}

		g_idxTrainSet = idxTrainSet;
 80339fe:	7efb      	ldrb	r3, [r7, #27]
 8033a00:	4a82      	ldr	r2, [pc, #520]	; (8033c0c <InitRFM+0x2f4>)
 8033a02:	6013      	str	r3, [r2, #0]
	}

	//========================================================================
	//	OLED
	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c3, (uint16_t)( SSD1306_I2C_ADDRESS ), 2, 2 ) )
 8033a04:	2302      	movs	r3, #2
 8033a06:	2202      	movs	r2, #2
 8033a08:	2178      	movs	r1, #120	; 0x78
 8033a0a:	487b      	ldr	r0, [pc, #492]	; (8033bf8 <InitRFM+0x2e0>)
 8033a0c:	f7f0 fb34 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8033a10:	4603      	mov	r3, r0
 8033a12:	2b00      	cmp	r3, #0
 8033a14:	d145      	bne.n	8033aa2 <InitRFM+0x18a>
	{
		//========================================================================
		//	OLED가 연결되어있음.
		SetDevID( DevRF900T );	 //  송신기.
 8033a16:	2002      	movs	r0, #2
 8033a18:	f7fe fe56 	bl	80326c8 <SetDevID>

		//	LCD Init
		LCDInit();
 8033a1c:	f7f8 fe5e 	bl	802c6dc <LCDInit>

		LCDClear();
 8033a20:	f7f8 fff4 	bl	802ca0c <LCDClear>
		LCDDrawRect( 0, 0, 128, 32, 1 );
 8033a24:	2301      	movs	r3, #1
 8033a26:	9300      	str	r3, [sp, #0]
 8033a28:	2320      	movs	r3, #32
 8033a2a:	2280      	movs	r2, #128	; 0x80
 8033a2c:	2100      	movs	r1, #0
 8033a2e:	2000      	movs	r0, #0
 8033a30:	f7f9 f81a 	bl	802ca68 <LCDDrawRect>

		HAL_Delay( 500 );
 8033a34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8033a38:	f7ee f8a2 	bl	8021b80 <HAL_Delay>

		//  LCD : 메뉴 화면.
		LCDMenu();
 8033a3c:	f7f8 ff0e 	bl	802c85c <LCDMenu>

		//  LCD :   편성 : 100
		//========================================================================
		//  편성 : XXX
		UpdateLCDMain();
 8033a40:	f7fe f93e 	bl	8031cc0 <UpdateLCDMain>

		//  LCD : Light Icon
		LCDLight( 0 );
 8033a44:	2000      	movs	r0, #0
 8033a46:	f7f8 fe93 	bl	802c770 <LCDLight>
		//========================================================================
		//  Spk Vol Set
		//  Default (1) - 0(Mute) / 1 / 2(Normal) / 3

		int	 nSpkVol;
		nSpkVol = GetSpkVol();
 8033a4a:	f7ff fa55 	bl	8032ef8 <GetSpkVol>
 8033a4e:	6178      	str	r0, [r7, #20]

		if ( nSpkVol < 0 || nSpkVol > MaxSpkVol )
 8033a50:	697b      	ldr	r3, [r7, #20]
 8033a52:	2b00      	cmp	r3, #0
 8033a54:	db02      	blt.n	8033a5c <InitRFM+0x144>
 8033a56:	697b      	ldr	r3, [r7, #20]
 8033a58:	2b03      	cmp	r3, #3
 8033a5a:	dd04      	ble.n	8033a66 <InitRFM+0x14e>
		{
			nSpkVol = DefaultSpkVol;
 8033a5c:	2301      	movs	r3, #1
 8033a5e:	617b      	str	r3, [r7, #20]
			SetSpkVol( nSpkVol );
 8033a60:	6978      	ldr	r0, [r7, #20]
 8033a62:	f7ff fa7d 	bl	8032f60 <SetSpkVol>
		}

		g_nSpkLevel = nSpkVol;
 8033a66:	4a6a      	ldr	r2, [pc, #424]	; (8033c10 <InitRFM+0x2f8>)
 8033a68:	697b      	ldr	r3, [r7, #20]
 8033a6a:	6013      	str	r3, [r2, #0]

		//  LCD : Spk Icon
		LCDSpeaker( g_nSpkLevel );		//  Spk Icon : Spk On
 8033a6c:	4b68      	ldr	r3, [pc, #416]	; (8033c10 <InitRFM+0x2f8>)
 8033a6e:	681b      	ldr	r3, [r3, #0]
 8033a70:	4618      	mov	r0, r3
 8033a72:	f7f8 feb5 	bl	802c7e0 <LCDSpeaker>
		//========================================================================
		//  Mic Vol Set
		//  Default (5) - 0 ~ 9

		int	 nMicVol;
		nMicVol = GetMicVol();
 8033a76:	f7ff faaf 	bl	8032fd8 <GetMicVol>
 8033a7a:	6138      	str	r0, [r7, #16]

		if ( nMicVol < 0 || nMicVol > MaxMicVol )
 8033a7c:	693b      	ldr	r3, [r7, #16]
 8033a7e:	2b00      	cmp	r3, #0
 8033a80:	db02      	blt.n	8033a88 <InitRFM+0x170>
 8033a82:	693b      	ldr	r3, [r7, #16]
 8033a84:	2b09      	cmp	r3, #9
 8033a86:	dd04      	ble.n	8033a92 <InitRFM+0x17a>
		{
			nMicVol = DefaultMicVol;
 8033a88:	2305      	movs	r3, #5
 8033a8a:	613b      	str	r3, [r7, #16]
			SetMicVol( nMicVol );
 8033a8c:	6938      	ldr	r0, [r7, #16]
 8033a8e:	f7ff fad7 	bl	8033040 <SetMicVol>
		}

		//========================================================================
#if defined(USE_AUDIO_INTERPOL_COMPRESS) || defined( USE_AUDIO_ADPCM )
		//	보간압축 or ADPCM 사용시 음량 Level 조절.
		WriteI2CCodec( 0x0B, 0x60 );	//  10 ( +18 dB )
 8033a92:	2160      	movs	r1, #96	; 0x60
 8033a94:	200b      	movs	r0, #11
 8033a96:	f7fc f8e9 	bl	802fc6c <WriteI2CCodec>
#endif

#if defined(USE_HOP_MANUAL)
		//	g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
		g_nManHopping	=	2;	//	Hopping Diable
 8033a9a:	4b5e      	ldr	r3, [pc, #376]	; (8033c14 <InitRFM+0x2fc>)
 8033a9c:	2202      	movs	r2, #2
 8033a9e:	601a      	str	r2, [r3, #0]
 8033aa0:	e013      	b.n	8033aca <InitRFM+0x1b2>
	}
	else
	{
		//========================================================================
		//	OLED가 없으면 -> 수신기
		SetDevID( DevRF900M );	 //  수신기.
 8033aa2:	2001      	movs	r0, #1
 8033aa4:	f7fe fe10 	bl	80326c8 <SetDevID>

		//  수신기 스피커 레벨 변경.
		//	20.09.01 - 2호선 24칸차량설정.
		WriteI2CCodec( 0x09, 0x06 );	//  0x06 ( 0 )
 8033aa8:	2106      	movs	r1, #6
 8033aaa:	2009      	movs	r0, #9
 8033aac:	f7fc f8de 	bl	802fc6c <WriteI2CCodec>

#if defined(USE_HOP_MANUAL)
		//	g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
		g_nManHopping	=	GetManHop();	//	Hopping Diable
 8033ab0:	f7ff f924 	bl	8032cfc <GetManHop>
 8033ab4:	4603      	mov	r3, r0
 8033ab6:	4a57      	ldr	r2, [pc, #348]	; (8033c14 <InitRFM+0x2fc>)
 8033ab8:	6013      	str	r3, [r2, #0]

		printf("%s(%d) - Man Hopping ( %d )\n", __func__, __LINE__, g_nManHopping );
 8033aba:	4b56      	ldr	r3, [pc, #344]	; (8033c14 <InitRFM+0x2fc>)
 8033abc:	681b      	ldr	r3, [r3, #0]
 8033abe:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8033ac2:	494a      	ldr	r1, [pc, #296]	; (8033bec <InitRFM+0x2d4>)
 8033ac4:	4854      	ldr	r0, [pc, #336]	; (8033c18 <InitRFM+0x300>)
 8033ac6:	f003 fceb 	bl	80374a0 <iprintf>
	}
	//========================================================================

#if defined(USE_RF_COMM_MODE)
		//	g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
		g_nRFMode	=	GetRFMode();	//	Hopping Diable
 8033aca:	f7ff f8a3 	bl	8032c14 <GetRFMode>
 8033ace:	4603      	mov	r3, r0
 8033ad0:	4a52      	ldr	r2, [pc, #328]	; (8033c1c <InitRFM+0x304>)
 8033ad2:	6013      	str	r3, [r2, #0]

		printf("%s(%d) - RFMode ( %d )\n", __func__, __LINE__, g_nRFMode );
 8033ad4:	4b51      	ldr	r3, [pc, #324]	; (8033c1c <InitRFM+0x304>)
 8033ad6:	681b      	ldr	r3, [r3, #0]
 8033ad8:	f240 6222 	movw	r2, #1570	; 0x622
 8033adc:	4943      	ldr	r1, [pc, #268]	; (8033bec <InitRFM+0x2d4>)
 8033ade:	4850      	ldr	r0, [pc, #320]	; (8033c20 <InitRFM+0x308>)
 8033ae0:	f003 fcde 	bl	80374a0 <iprintf>
#endif	//	defined(USE_HOP_MANUAL)

#if defined(USE_RFT_ONLY_RX_SPK_ON)

	if ( GetDevID() == DevRF900T )
 8033ae4:	f7fe fde4 	bl	80326b0 <GetDevID>
 8033ae8:	4603      	mov	r3, r0
 8033aea:	2b02      	cmp	r3, #2
 8033aec:	d102      	bne.n	8033af4 <InitRFM+0x1dc>
	{
		//  송신기 : 수신중이 아닌경우 SPK OFF
//		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
		RFM_Spk(0);
 8033aee:	2000      	movs	r0, #0
 8033af0:	f7ff fae2 	bl	80330b8 <RFM_Spk>

#else

	//========================================================================
	//	Drivers/radio
	vRadio_Init ();
 8033af4:	f7f9 fb80 	bl	802d1f8 <vRadio_Init>

	//========================================================================
	vRadio_Init ();		//	FIXME : 일부 송신기가 2회 초기화를 해야 초기화되는 경우가 있음.
 8033af8:	f7f9 fb7e 	bl	802d1f8 <vRadio_Init>
	//========================================================================

	si446x_part_info ();
 8033afc:	f7f9 f9ac 	bl	802ce58 <si446x_part_info>

	printf ( "=========================\n" );
 8033b00:	4848      	ldr	r0, [pc, #288]	; (8033c24 <InitRFM+0x30c>)
 8033b02:	f003 fd3b 	bl	803757c <puts>
	printf ( "%08x\n", Si446xCmd.PART_INFO.CHIPREV );
 8033b06:	4b48      	ldr	r3, [pc, #288]	; (8033c28 <InitRFM+0x310>)
 8033b08:	781b      	ldrb	r3, [r3, #0]
 8033b0a:	4619      	mov	r1, r3
 8033b0c:	4847      	ldr	r0, [pc, #284]	; (8033c2c <InitRFM+0x314>)
 8033b0e:	f003 fcc7 	bl	80374a0 <iprintf>
	printf ( "%08x\n", Si446xCmd.PART_INFO.PART );
 8033b12:	4b45      	ldr	r3, [pc, #276]	; (8033c28 <InitRFM+0x310>)
 8033b14:	685b      	ldr	r3, [r3, #4]
 8033b16:	4619      	mov	r1, r3
 8033b18:	4844      	ldr	r0, [pc, #272]	; (8033c2c <InitRFM+0x314>)
 8033b1a:	f003 fcc1 	bl	80374a0 <iprintf>
	printf ( "%08x\n", Si446xCmd.PART_INFO.PBUILD );
 8033b1e:	4b42      	ldr	r3, [pc, #264]	; (8033c28 <InitRFM+0x310>)
 8033b20:	7a1b      	ldrb	r3, [r3, #8]
 8033b22:	4619      	mov	r1, r3
 8033b24:	4841      	ldr	r0, [pc, #260]	; (8033c2c <InitRFM+0x314>)
 8033b26:	f003 fcbb 	bl	80374a0 <iprintf>
	printf ( "%08x\n", Si446xCmd.PART_INFO.ID );
 8033b2a:	4b3f      	ldr	r3, [pc, #252]	; (8033c28 <InitRFM+0x310>)
 8033b2c:	68db      	ldr	r3, [r3, #12]
 8033b2e:	4619      	mov	r1, r3
 8033b30:	483e      	ldr	r0, [pc, #248]	; (8033c2c <InitRFM+0x314>)
 8033b32:	f003 fcb5 	bl	80374a0 <iprintf>
	printf ( "%08x\n", Si446xCmd.PART_INFO.CUSTOMER );
 8033b36:	4b3c      	ldr	r3, [pc, #240]	; (8033c28 <InitRFM+0x310>)
 8033b38:	7c1b      	ldrb	r3, [r3, #16]
 8033b3a:	4619      	mov	r1, r3
 8033b3c:	483b      	ldr	r0, [pc, #236]	; (8033c2c <InitRFM+0x314>)
 8033b3e:	f003 fcaf 	bl	80374a0 <iprintf>
	printf ( "%08x\n", Si446xCmd.PART_INFO.ROMID );
 8033b42:	4b39      	ldr	r3, [pc, #228]	; (8033c28 <InitRFM+0x310>)
 8033b44:	7c5b      	ldrb	r3, [r3, #17]
 8033b46:	4619      	mov	r1, r3
 8033b48:	4838      	ldr	r0, [pc, #224]	; (8033c2c <InitRFM+0x314>)
 8033b4a:	f003 fca9 	bl	80374a0 <iprintf>
	printf ( "-------------------------\n" );
 8033b4e:	4838      	ldr	r0, [pc, #224]	; (8033c30 <InitRFM+0x318>)
 8033b50:	f003 fd14 	bl	803757c <puts>
	//========================================================================
	//	Radio 초기화 이후 채널 설정해줌.
	{
		//========================================================================
		//  Radio Channel 설정.
		pRadioConfiguration->Radio_ChannelNumber = g_idxTrainSet;
 8033b54:	4b2d      	ldr	r3, [pc, #180]	; (8033c0c <InitRFM+0x2f4>)
 8033b56:	681a      	ldr	r2, [r3, #0]
 8033b58:	4b36      	ldr	r3, [pc, #216]	; (8033c34 <InitRFM+0x31c>)
 8033b5a:	681b      	ldr	r3, [r3, #0]
 8033b5c:	b2d2      	uxtb	r2, r2
 8033b5e:	711a      	strb	r2, [r3, #4]
		printf("%s(%d) - Radio Ch(%d) / g_idxTrainSet(%d)\n", __func__, __LINE__,
				pRadioConfiguration->Radio_ChannelNumber, g_idxTrainSet );
 8033b60:	4b34      	ldr	r3, [pc, #208]	; (8033c34 <InitRFM+0x31c>)
 8033b62:	681b      	ldr	r3, [r3, #0]
 8033b64:	791b      	ldrb	r3, [r3, #4]
		printf("%s(%d) - Radio Ch(%d) / g_idxTrainSet(%d)\n", __func__, __LINE__,
 8033b66:	461a      	mov	r2, r3
 8033b68:	4b28      	ldr	r3, [pc, #160]	; (8033c0c <InitRFM+0x2f4>)
 8033b6a:	681b      	ldr	r3, [r3, #0]
 8033b6c:	9300      	str	r3, [sp, #0]
 8033b6e:	4613      	mov	r3, r2
 8033b70:	f240 6255 	movw	r2, #1621	; 0x655
 8033b74:	491d      	ldr	r1, [pc, #116]	; (8033bec <InitRFM+0x2d4>)
 8033b76:	4830      	ldr	r0, [pc, #192]	; (8033c38 <InitRFM+0x320>)
 8033b78:	f003 fc92 	bl	80374a0 <iprintf>

	//========================================================================
	//	Random seed 설정.
	//	편성 & 호차 & TickCount로 설정.

	srand( HAL_GetTick() * 100 + GetTrainSetIdx() * 10 + GetCarNo() );
 8033b7c:	f7ed fff4 	bl	8021b68 <HAL_GetTick>
 8033b80:	4603      	mov	r3, r0
 8033b82:	2264      	movs	r2, #100	; 0x64
 8033b84:	fb02 f403 	mul.w	r4, r2, r3
 8033b88:	f7fe fff6 	bl	8032b78 <GetTrainSetIdx>
 8033b8c:	4602      	mov	r2, r0
 8033b8e:	4613      	mov	r3, r2
 8033b90:	009b      	lsls	r3, r3, #2
 8033b92:	4413      	add	r3, r2
 8033b94:	005b      	lsls	r3, r3, #1
 8033b96:	441c      	add	r4, r3
 8033b98:	f7ff f960 	bl	8032e5c <GetCarNo>
 8033b9c:	4603      	mov	r3, r0
 8033b9e:	4423      	add	r3, r4
 8033ba0:	4618      	mov	r0, r3
 8033ba2:	f003 facb 	bl	803713c <srand>

	//	Set Offset
	g_offsetCA = rand() % 1000;
 8033ba6:	f003 faf7 	bl	8037198 <rand>
 8033baa:	4602      	mov	r2, r0
 8033bac:	4b23      	ldr	r3, [pc, #140]	; (8033c3c <InitRFM+0x324>)
 8033bae:	fb83 1302 	smull	r1, r3, r3, r2
 8033bb2:	1199      	asrs	r1, r3, #6
 8033bb4:	17d3      	asrs	r3, r2, #31
 8033bb6:	1acb      	subs	r3, r1, r3
 8033bb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8033bbc:	fb01 f303 	mul.w	r3, r1, r3
 8033bc0:	1ad3      	subs	r3, r2, r3
 8033bc2:	4a1f      	ldr	r2, [pc, #124]	; (8033c40 <InitRFM+0x328>)
 8033bc4:	6013      	str	r3, [r2, #0]
	printf( "%s(%d) - offsetCA( %d )\n", __func__, __LINE__, g_offsetCA );
 8033bc6:	4b1e      	ldr	r3, [pc, #120]	; (8033c40 <InitRFM+0x328>)
 8033bc8:	681b      	ldr	r3, [r3, #0]
 8033bca:	f240 6261 	movw	r2, #1633	; 0x661
 8033bce:	4907      	ldr	r1, [pc, #28]	; (8033bec <InitRFM+0x2d4>)
 8033bd0:	481c      	ldr	r0, [pc, #112]	; (8033c44 <InitRFM+0x32c>)
 8033bd2:	f003 fc65 	bl	80374a0 <iprintf>

	//	초기 시작 Delay
	HAL_Delay(g_offsetCA);
 8033bd6:	4b1a      	ldr	r3, [pc, #104]	; (8033c40 <InitRFM+0x328>)
 8033bd8:	681b      	ldr	r3, [r3, #0]
 8033bda:	4618      	mov	r0, r3
 8033bdc:	f7ed ffd0 	bl	8021b80 <HAL_Delay>

	//========================================================================
}
 8033be0:	bf00      	nop
 8033be2:	4618      	mov	r0, r3
 8033be4:	3724      	adds	r7, #36	; 0x24
 8033be6:	46bd      	mov	sp, r7
 8033be8:	bd90      	pop	{r4, r7, pc}
 8033bea:	bf00      	nop
 8033bec:	080417a4 	.word	0x080417a4
 8033bf0:	0803b46c 	.word	0x0803b46c
 8033bf4:	20000e2c 	.word	0x20000e2c
 8033bf8:	20000e80 	.word	0x20000e80
 8033bfc:	20001394 	.word	0x20001394
 8033c00:	0803b474 	.word	0x0803b474
 8033c04:	0803372d 	.word	0x0803372d
 8033c08:	0803b4a4 	.word	0x0803b4a4
 8033c0c:	2000232c 	.word	0x2000232c
 8033c10:	20000bec 	.word	0x20000bec
 8033c14:	20002348 	.word	0x20002348
 8033c18:	0803b4b8 	.word	0x0803b4b8
 8033c1c:	20002344 	.word	0x20002344
 8033c20:	0803b4d8 	.word	0x0803b4d8
 8033c24:	0803b4f0 	.word	0x0803b4f0
 8033c28:	200012bc 	.word	0x200012bc
 8033c2c:	0803b50c 	.word	0x0803b50c
 8033c30:	0803b514 	.word	0x0803b514
 8033c34:	200004f0 	.word	0x200004f0
 8033c38:	0803b530 	.word	0x0803b530
 8033c3c:	10624dd3 	.word	0x10624dd3
 8033c40:	20002338 	.word	0x20002338
 8033c44:	0803b55c 	.word	0x0803b55c

08033c48 <RFM_main>:

//========================================================================
int RFM_main( void )
//========================================================================
{
 8033c48:	b580      	push	{r7, lr}
 8033c4a:	b082      	sub	sp, #8
 8033c4c:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 8033c4e:	f240 626d 	movw	r2, #1645	; 0x66d
 8033c52:	4912      	ldr	r1, [pc, #72]	; (8033c9c <RFM_main+0x54>)
 8033c54:	4812      	ldr	r0, [pc, #72]	; (8033ca0 <RFM_main+0x58>)
 8033c56:	f003 fc23 	bl	80374a0 <iprintf>

	InitRFM();
 8033c5a:	f7ff fe5d 	bl	8033918 <InitRFM>
	char *argv[] = {"tx", "0"};
	cmd_rftx( 2, argv );

#endif

	InitProcPkt();
 8033c5e:	f7f9 fdef 	bl	802d840 <InitProcPkt>
	int nTick;

	/* Infinite main loop */
	while ( 1 )
	{
		nTick = HAL_GetTick();
 8033c62:	f7ed ff81 	bl	8021b68 <HAL_GetTick>
 8033c66:	4603      	mov	r3, r0
 8033c68:	607b      	str	r3, [r7, #4]

		if ( GetDevID() == DevRF900T )
 8033c6a:	f7fe fd21 	bl	80326b0 <GetDevID>
 8033c6e:	4603      	mov	r3, r0
 8033c70:	2b02      	cmp	r3, #2
 8033c72:	d106      	bne.n	8033c82 <RFM_main+0x3a>
		{
			//	송신기 - KeyPad 동작.
			LoopProcKey( nTick );
 8033c74:	687b      	ldr	r3, [r7, #4]
 8033c76:	4618      	mov	r0, r3
 8033c78:	f7fd fd50 	bl	803171c <LoopProcKey>

			//	ADC Power : Battery
			LoopProcAdc( nTick );
 8033c7c:	6878      	ldr	r0, [r7, #4]
 8033c7e:	f7fb fdc3 	bl	802f808 <LoopProcAdc>
		}

		//	Loop RFM
		LoopProcRFM( nTick );
 8033c82:	6878      	ldr	r0, [r7, #4]
 8033c84:	f000 f80e 	bl	8033ca4 <LoopProcRFM>

		//	Loop Process ( CLI )
		LoopProcCLI();
 8033c88:	f7fc fe2e 	bl	80308e8 <LoopProcCLI>

		//	Loop Proc Packet : RF Packet
		LoopProcPkt( nTick );
 8033c8c:	6878      	ldr	r0, [r7, #4]
 8033c8e:	f7fa f915 	bl	802debc <LoopProcPkt>

		//	Loop Proc Main Watchdog Count Reload
		LoopProcMain( nTick );
 8033c92:	6878      	ldr	r0, [r7, #4]
 8033c94:	f7ec fca0 	bl	80205d8 <LoopProcMain>
	{
 8033c98:	e7e3      	b.n	8033c62 <RFM_main+0x1a>
 8033c9a:	bf00      	nop
 8033c9c:	080417ac 	.word	0x080417ac
 8033ca0:	0803b46c 	.word	0x0803b46c

08033ca4 <LoopProcRFM>:


//========================================================================
void LoopProcRFM ( int nTick )
//========================================================================
{
 8033ca4:	b590      	push	{r4, r7, lr}
 8033ca6:	b099      	sub	sp, #100	; 0x64
 8033ca8:	af00      	add	r7, sp, #0
 8033caa:	6078      	str	r0, [r7, #4]
	RFMPkt	bufRFTx;

	//========================================================================
	//  Transmit - 송신기
	if ( GetDevID() == DevRF900T )
 8033cac:	f7fe fd00 	bl	80326b0 <GetDevID>
 8033cb0:	4603      	mov	r3, r0
 8033cb2:	2b02      	cmp	r3, #2
 8033cb4:	f040 80b8 	bne.w	8033e28 <LoopProcRFM+0x184>
	{
		if( GetRFMMode() != RFMModeRx )
 8033cb8:	f7fe fd26 	bl	8032708 <GetRFMMode>
 8033cbc:	4603      	mov	r3, r0
 8033cbe:	2b02      	cmp	r3, #2
 8033cc0:	d064      	beq.n	8033d8c <LoopProcRFM+0xe8>
		{
			if( GetKey(eKeyPtt) || GetKey(eKeySos) )
 8033cc2:	2006      	movs	r0, #6
 8033cc4:	f7fd fc9e 	bl	8031604 <GetKey>
 8033cc8:	4603      	mov	r3, r0
 8033cca:	2b00      	cmp	r3, #0
 8033ccc:	d105      	bne.n	8033cda <LoopProcRFM+0x36>
 8033cce:	2007      	movs	r0, #7
 8033cd0:	f7fd fc98 	bl	8031604 <GetKey>
 8033cd4:	4603      	mov	r3, r0
 8033cd6:	2b00      	cmp	r3, #0
 8033cd8:	d058      	beq.n	8033d8c <LoopProcRFM+0xe8>
			{
				// PTT Key가 눌려있을시 전송.
				if( qBufCnt( &g_qBufAudioTx ) >= ( I2S_DMA_LOOP_SIZE * 2 ) )
 8033cda:	489a      	ldr	r0, [pc, #616]	; (8033f44 <LoopProcRFM+0x2a0>)
 8033cdc:	f7fa fab8 	bl	802e250 <qBufCnt>
 8033ce0:	4603      	mov	r3, r0
 8033ce2:	2b3b      	cmp	r3, #59	; 0x3b
 8033ce4:	dd52      	ble.n	8033d8c <LoopProcRFM+0xe8>
				{
					//		printf ( "G" );
					qBufGet( &g_qBufAudioTx, (uint8_t*)bufRFTx.dat.data, ( I2S_DMA_LOOP_SIZE * 2 ) );
 8033ce6:	f107 031c 	add.w	r3, r7, #28
 8033cea:	3304      	adds	r3, #4
 8033cec:	223c      	movs	r2, #60	; 0x3c
 8033cee:	4619      	mov	r1, r3
 8033cf0:	4894      	ldr	r0, [pc, #592]	; (8033f44 <LoopProcRFM+0x2a0>)
 8033cf2:	f7fa fafa 	bl	802e2ea <qBufGet>
#if defined(USE_HOPPING)
					//========================================================================
					//	Packet Header
#if defined( USE_CH_ISO_DEV )
					//	Header #2
					if( GetKey(eKeyPtt) )
 8033cf6:	2006      	movs	r0, #6
 8033cf8:	f7fd fc84 	bl	8031604 <GetKey>
 8033cfc:	4603      	mov	r3, r0
 8033cfe:	2b00      	cmp	r3, #0
 8033d00:	d006      	beq.n	8033d10 <LoopProcRFM+0x6c>
					{
						_MakePktHdr2( &bufRFTx, PktPA );
 8033d02:	f107 031c 	add.w	r3, r7, #28
 8033d06:	2102      	movs	r1, #2
 8033d08:	4618      	mov	r0, r3
 8033d0a:	f7fa fb9b 	bl	802e444 <_MakePktHdr2>
 8033d0e:	e005      	b.n	8033d1c <LoopProcRFM+0x78>
					}
					else
					{
						_MakePktHdr2( &bufRFTx, PktCall );
 8033d10:	f107 031c 	add.w	r3, r7, #28
 8033d14:	2103      	movs	r1, #3
 8033d16:	4618      	mov	r0, r3
 8033d18:	f7fa fb94 	bl	802e444 <_MakePktHdr2>
					if( GetKey(eKeyPtt) )	bufRFTx.hdr.nPktCmd = PktPA;	//  송신기 -> 수신기
					else					bufRFTx.hdr.nPktCmd = PktCall;	//  송신기 -> 송신기
#endif

#if defined( USE_CH_ISO_DEV )
					if( GetKey(eKeyPtt) )
 8033d1c:	2006      	movs	r0, #6
 8033d1e:	f7fd fc71 	bl	8031604 <GetKey>
 8033d22:	4603      	mov	r3, r0
 8033d24:	2b00      	cmp	r3, #0
 8033d26:	d018      	beq.n	8033d5a <LoopProcRFM+0xb6>
					{
						//========================================================================
						//	PA

						if ( GetChPARFT() != 0 )
 8033d28:	f7fe fe8e 	bl	8032a48 <GetChPARFT>
 8033d2c:	4603      	mov	r3, r0
 8033d2e:	2b00      	cmp	r3, #0
 8033d30:	d007      	beq.n	8033d42 <LoopProcRFM+0x9e>
						{
							//	송신기에 전송.
							SendPktCh( GetChPARFT(), (uint8_t *)&bufRFTx,
 8033d32:	f7fe fe89 	bl	8032a48 <GetChPARFT>
 8033d36:	f107 031c 	add.w	r3, r7, #28
 8033d3a:	2208      	movs	r2, #8
 8033d3c:	4619      	mov	r1, r3
 8033d3e:	f7fa f98d 	bl	802e05c <SendPktCh>
								(U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );
						}

						SendPktCh( GetChPA(), (uint8_t *)&bufRFTx,
 8033d42:	f7fe fe39 	bl	80329b8 <GetChPA>
							pRadioConfiguration->Radio_PacketLength );
 8033d46:	4b80      	ldr	r3, [pc, #512]	; (8033f48 <LoopProcRFM+0x2a4>)
 8033d48:	681b      	ldr	r3, [r3, #0]
 8033d4a:	795b      	ldrb	r3, [r3, #5]
						SendPktCh( GetChPA(), (uint8_t *)&bufRFTx,
 8033d4c:	461a      	mov	r2, r3
 8033d4e:	f107 031c 	add.w	r3, r7, #28
 8033d52:	4619      	mov	r1, r3
 8033d54:	f7fa f982 	bl	802e05c <SendPktCh>
 8033d58:	e018      	b.n	8033d8c <LoopProcRFM+0xe8>
					}
					else
					{
						//========================================================================
						//	Call
						if ( GetChPARFT() != 0 )
 8033d5a:	f7fe fe75 	bl	8032a48 <GetChPARFT>
 8033d5e:	4603      	mov	r3, r0
 8033d60:	2b00      	cmp	r3, #0
 8033d62:	d008      	beq.n	8033d76 <LoopProcRFM+0xd2>
						{
							//	송신기에 직접 전송.
							SendPktCh( GetChPARFT(), (uint8_t *)&bufRFTx,
 8033d64:	f7fe fe70 	bl	8032a48 <GetChPARFT>
 8033d68:	f107 031c 	add.w	r3, r7, #28
 8033d6c:	2208      	movs	r2, #8
 8033d6e:	4619      	mov	r1, r3
 8033d70:	f7fa f974 	bl	802e05c <SendPktCh>
 8033d74:	e00a      	b.n	8033d8c <LoopProcRFM+0xe8>
								(U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );
						}
						else
						{
							//	수신기를 통해 전송.
							SendPktCh( GetChPA(), (uint8_t *)&bufRFTx,
 8033d76:	f7fe fe1f 	bl	80329b8 <GetChPA>
								pRadioConfiguration->Radio_PacketLength );
 8033d7a:	4b73      	ldr	r3, [pc, #460]	; (8033f48 <LoopProcRFM+0x2a4>)
 8033d7c:	681b      	ldr	r3, [r3, #0]
 8033d7e:	795b      	ldrb	r3, [r3, #5]
							SendPktCh( GetChPA(), (uint8_t *)&bufRFTx,
 8033d80:	461a      	mov	r2, r3
 8033d82:	f107 031c 	add.w	r3, r7, #28
 8033d86:	4619      	mov	r1, r3
 8033d88:	f7fa f968 	bl	802e05c <SendPktCh>
		}

		//========================================================================
		static int nOldRFMMode = 0;

		int nRFMMode = GetRFMMode();
 8033d8c:	f7fe fcbc 	bl	8032708 <GetRFMMode>
 8033d90:	65f8      	str	r0, [r7, #92]	; 0x5c
		if( nRFMMode != nOldRFMMode )
 8033d92:	4b6e      	ldr	r3, [pc, #440]	; (8033f4c <LoopProcRFM+0x2a8>)
 8033d94:	681b      	ldr	r3, [r3, #0]
 8033d96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8033d98:	429a      	cmp	r2, r3
 8033d9a:	d03c      	beq.n	8033e16 <LoopProcRFM+0x172>
		{
			switch ( nRFMMode )
 8033d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033d9e:	2b00      	cmp	r3, #0
 8033da0:	d025      	beq.n	8033dee <LoopProcRFM+0x14a>
 8033da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033da4:	2b02      	cmp	r3, #2
 8033da6:	d133      	bne.n	8033e10 <LoopProcRFM+0x16c>
			{
			case RFMModeRx:
				LCDSetCursor( 20, 13 );
 8033da8:	210d      	movs	r1, #13
 8033daa:	2014      	movs	r0, #20
 8033dac:	f7f8 fdb2 	bl	802c914 <LCDSetCursor>
				if ( IsMenuMaint() )
 8033db0:	f7fd ff46 	bl	8031c40 <IsMenuMaint>
 8033db4:	4603      	mov	r3, r0
 8033db6:	2b00      	cmp	r3, #0
 8033db8:	d015      	beq.n	8033de6 <LoopProcRFM+0x142>
				{
					//	Maint Mode : 송신채널 표시.
					char sBuf[20];
					sprintf( sBuf, "수신중(%d/%d)", GetCh2Car(GetChNearRFM()), GetChNearRFM() );	//	Channel -> Car
 8033dba:	f7fe fdab 	bl	8032914 <GetChNearRFM>
 8033dbe:	4603      	mov	r3, r0
 8033dc0:	4618      	mov	r0, r3
 8033dc2:	f7fe fe05 	bl	80329d0 <GetCh2Car>
 8033dc6:	4604      	mov	r4, r0
 8033dc8:	f7fe fda4 	bl	8032914 <GetChNearRFM>
 8033dcc:	4603      	mov	r3, r0
 8033dce:	f107 0008 	add.w	r0, r7, #8
 8033dd2:	4622      	mov	r2, r4
 8033dd4:	495e      	ldr	r1, [pc, #376]	; (8033f50 <LoopProcRFM+0x2ac>)
 8033dd6:	f003 fc8f 	bl	80376f8 <siprintf>
					LCDPrintf( sBuf );
 8033dda:	f107 0308 	add.w	r3, r7, #8
 8033dde:	4618      	mov	r0, r3
 8033de0:	f7f8 fdc8 	bl	802c974 <LCDPrintf>
				}
				else
				{
					LCDPrintf( "수신중..." );
				}
				break;
 8033de4:	e014      	b.n	8033e10 <LoopProcRFM+0x16c>
					LCDPrintf( "수신중..." );
 8033de6:	485b      	ldr	r0, [pc, #364]	; (8033f54 <LoopProcRFM+0x2b0>)
 8033de8:	f7f8 fdc4 	bl	802c974 <LCDPrintf>
				break;
 8033dec:	e010      	b.n	8033e10 <LoopProcRFM+0x16c>

			case RFMModeNormal:
				//========================================================================
				//  편성 : XXX
				UpdateLCDMain();
 8033dee:	f7fd ff67 	bl	8031cc0 <UpdateLCDMain>
				//	송신기 Speaker Mute
#if defined(USE_RFT_ONLY_RX_SPK_ON)
				if ( GetDevID() == DevRF900T )
 8033df2:	f7fe fc5d 	bl	80326b0 <GetDevID>
 8033df6:	4603      	mov	r3, r0
 8033df8:	2b02      	cmp	r3, #2
 8033dfa:	d108      	bne.n	8033e0e <LoopProcRFM+0x16a>
				{
					//  송신기 : 수신중이 아닌경우 SPK OFF
					RFM_Spk(0);
 8033dfc:	2000      	movs	r0, #0
 8033dfe:	f7ff f95b 	bl	80330b8 <RFM_Spk>

					//  Red LED Off
					HAL_GPIO_WritePin ( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_RESET ); //  RED LED
 8033e02:	2200      	movs	r2, #0
 8033e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8033e08:	4853      	ldr	r0, [pc, #332]	; (8033f58 <LoopProcRFM+0x2b4>)
 8033e0a:	f7ef fb87 	bl	802351c <HAL_GPIO_WritePin>
				}
#endif
				break;
 8033e0e:	bf00      	nop
			}

			nOldRFMMode = nRFMMode;
 8033e10:	4a4e      	ldr	r2, [pc, #312]	; (8033f4c <LoopProcRFM+0x2a8>)
 8033e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033e14:	6013      	str	r3, [r2, #0]
		}

		//========================================================================
		//	상태정보 모니터링중 - 상태정보값 갱신.
		if( GetRFMMode() == RFMModeNormal )
 8033e16:	f7fe fc77 	bl	8032708 <GetRFMMode>
 8033e1a:	4603      	mov	r3, r0
 8033e1c:	2b00      	cmp	r3, #0
 8033e1e:	d151      	bne.n	8033ec4 <LoopProcRFM+0x220>
		{
			UpdateLCDMonitor( nTick );		//	LCD : 모니터링 상태 Update
 8033e20:	6878      	ldr	r0, [r7, #4]
 8033e22:	f7fd ff95 	bl	8031d50 <UpdateLCDMonitor>
 8033e26:	e04d      	b.n	8033ec4 <LoopProcRFM+0x220>
		}
	}
	//========================================================================
	//  RFM - 수신기 - 대승객방송
	else if ( GetDevID() == DevRF900M )
 8033e28:	f7fe fc42 	bl	80326b0 <GetDevID>
 8033e2c:	4603      	mov	r3, r0
 8033e2e:	2b01      	cmp	r3, #1
 8033e30:	d148      	bne.n	8033ec4 <LoopProcRFM+0x220>
	{
		if( GetRFMMode() == RFMModeOcc )
 8033e32:	f7fe fc69 	bl	8032708 <GetRFMMode>
 8033e36:	4603      	mov	r3, r0
 8033e38:	2b03      	cmp	r3, #3
 8033e3a:	d143      	bne.n	8033ec4 <LoopProcRFM+0x220>
		{
			//	대승객 방송 모드인 경우 대승객 방송 음성 송출.
			if( qBufCnt( &g_qBufAudioTx ) >= ( I2S_DMA_LOOP_SIZE * 2 ) )
 8033e3c:	4841      	ldr	r0, [pc, #260]	; (8033f44 <LoopProcRFM+0x2a0>)
 8033e3e:	f7fa fa07 	bl	802e250 <qBufCnt>
 8033e42:	4603      	mov	r3, r0
 8033e44:	2b3b      	cmp	r3, #59	; 0x3b
 8033e46:	dd3d      	ble.n	8033ec4 <LoopProcRFM+0x220>
			{
				//		printf ( "G" );
				//========================================================================
				//	Audio ( 대승객방송 음성 )
				qBufGet( &g_qBufAudioTx, (uint8_t*)bufRFTx.dat.data, ( I2S_DMA_LOOP_SIZE * 2 ) );
 8033e48:	f107 031c 	add.w	r3, r7, #28
 8033e4c:	3304      	adds	r3, #4
 8033e4e:	223c      	movs	r2, #60	; 0x3c
 8033e50:	4619      	mov	r1, r3
 8033e52:	483c      	ldr	r0, [pc, #240]	; (8033f44 <LoopProcRFM+0x2a0>)
 8033e54:	f7fa fa49 	bl	802e2ea <qBufGet>
				//	Audio Loopback ( 대승객방송 음성 )
				qBufPut( &g_qBufAudioRx, (uint8_t*)bufRFTx.dat.data, ( I2S_DMA_LOOP_SIZE * 2 ) );
 8033e58:	f107 031c 	add.w	r3, r7, #28
 8033e5c:	3304      	adds	r3, #4
 8033e5e:	223c      	movs	r2, #60	; 0x3c
 8033e60:	4619      	mov	r1, r3
 8033e62:	483e      	ldr	r0, [pc, #248]	; (8033f5c <LoopProcRFM+0x2b8>)
 8033e64:	f7fa fa0d 	bl	802e282 <qBufPut>

				//========================================================================
				//	Packet Header	-	OCC PA 전송

				//	Header #2
				_MakePktHdr2( &bufRFTx, PktPA );
 8033e68:	f107 031c 	add.w	r3, r7, #28
 8033e6c:	2102      	movs	r1, #2
 8033e6e:	4618      	mov	r0, r3
 8033e70:	f7fa fae8 	bl	802e444 <_MakePktHdr2>

				if( GetChRx() == ChTS1_1 )	//	1호차 수신기
 8033e74:	f7fe fcce 	bl	8032814 <GetChRx>
 8033e78:	4602      	mov	r2, r0
 8033e7a:	4b39      	ldr	r3, [pc, #228]	; (8033f60 <LoopProcRFM+0x2bc>)
 8033e7c:	681b      	ldr	r3, [r3, #0]
 8033e7e:	429a      	cmp	r2, r3
 8033e80:	d10d      	bne.n	8033e9e <LoopProcRFM+0x1fa>
				{
					//	1 -> 2 ... -> 10
					SendPktCh( GetChPA() + 1, (uint8_t *)&bufRFTx,
 8033e82:	f7fe fd99 	bl	80329b8 <GetChPA>
 8033e86:	4603      	mov	r3, r0
 8033e88:	1c58      	adds	r0, r3, #1
						pRadioConfiguration->Radio_PacketLength );
 8033e8a:	4b2f      	ldr	r3, [pc, #188]	; (8033f48 <LoopProcRFM+0x2a4>)
 8033e8c:	681b      	ldr	r3, [r3, #0]
 8033e8e:	795b      	ldrb	r3, [r3, #5]
					SendPktCh( GetChPA() + 1, (uint8_t *)&bufRFTx,
 8033e90:	461a      	mov	r2, r3
 8033e92:	f107 031c 	add.w	r3, r7, #28
 8033e96:	4619      	mov	r1, r3
 8033e98:	f7fa f8e0 	bl	802e05c <SendPktCh>
 8033e9c:	e00c      	b.n	8033eb8 <LoopProcRFM+0x214>
				}
				else
				{
					// 10 -> 9 ... -> 1
					SendPktCh( GetChPA() - 1, (uint8_t *)&bufRFTx,
 8033e9e:	f7fe fd8b 	bl	80329b8 <GetChPA>
 8033ea2:	4603      	mov	r3, r0
 8033ea4:	1e58      	subs	r0, r3, #1
						pRadioConfiguration->Radio_PacketLength );
 8033ea6:	4b28      	ldr	r3, [pc, #160]	; (8033f48 <LoopProcRFM+0x2a4>)
 8033ea8:	681b      	ldr	r3, [r3, #0]
 8033eaa:	795b      	ldrb	r3, [r3, #5]
					SendPktCh( GetChPA() - 1, (uint8_t *)&bufRFTx,
 8033eac:	461a      	mov	r2, r3
 8033eae:	f107 031c 	add.w	r3, r7, #28
 8033eb2:	4619      	mov	r1, r3
 8033eb4:	f7fa f8d2 	bl	802e05c <SendPktCh>
				}

				// 조명 On
				HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
 8033eb8:	2201      	movs	r2, #1
 8033eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8033ebe:	4829      	ldr	r0, [pc, #164]	; (8033f64 <LoopProcRFM+0x2c0>)
 8033ec0:	f7ef fb2c 	bl	802351c <HAL_GPIO_WritePin>
		}
	}

	//========================================================================
	//	수신중 해제
	if ( (nTick - g_nStampRxPkt) > TIMEOUT_RXSTAT && GetRFMMode() == RFMModeRx
 8033ec4:	4b28      	ldr	r3, [pc, #160]	; (8033f68 <LoopProcRFM+0x2c4>)
 8033ec6:	681b      	ldr	r3, [r3, #0]
 8033ec8:	687a      	ldr	r2, [r7, #4]
 8033eca:	1ad3      	subs	r3, r2, r3
 8033ecc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8033ed0:	dd25      	ble.n	8033f1e <LoopProcRFM+0x27a>
 8033ed2:	f7fe fc19 	bl	8032708 <GetRFMMode>
 8033ed6:	4603      	mov	r3, r0
 8033ed8:	2b02      	cmp	r3, #2
 8033eda:	d120      	bne.n	8033f1e <LoopProcRFM+0x27a>
			&& ( GetRFMMode() != RFMModeOcc )		//	OCC Mode - Skip
 8033edc:	f7fe fc14 	bl	8032708 <GetRFMMode>
 8033ee0:	4603      	mov	r3, r0
 8033ee2:	2b03      	cmp	r3, #3
 8033ee4:	d01b      	beq.n	8033f1e <LoopProcRFM+0x27a>
			&& ( GetRFMMode() != RFMModeUpgr )		//	Upgrade Mode - Skip
 8033ee6:	f7fe fc0f 	bl	8032708 <GetRFMMode>
 8033eea:	4603      	mov	r3, r0
 8033eec:	2b04      	cmp	r3, #4
 8033eee:	d016      	beq.n	8033f1e <LoopProcRFM+0x27a>
		)
	{
		// Rx 패킷이 500 ms 없을 경우 수신모드 해제
		SetRFMMode( RFMModeNormal );
 8033ef0:	2000      	movs	r0, #0
 8033ef2:	f7fe fc15 	bl	8032720 <SetRFMMode>

		//  수신기 Spk Relay Off
		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_RESET );
 8033ef6:	2200      	movs	r2, #0
 8033ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8033efc:	4819      	ldr	r0, [pc, #100]	; (8033f64 <LoopProcRFM+0x2c0>)
 8033efe:	f7ef fb0d 	bl	802351c <HAL_GPIO_WritePin>

#if defined(USE_RFT_ONLY_RX_SPK_ON)
		if ( GetDevID() == DevRF900T )
 8033f02:	f7fe fbd5 	bl	80326b0 <GetDevID>
 8033f06:	4603      	mov	r3, r0
 8033f08:	2b02      	cmp	r3, #2
 8033f0a:	d102      	bne.n	8033f12 <LoopProcRFM+0x26e>
		{
			//  송신기 : 수신중이 아닌경우 SPK OFF
//			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
			RFM_Spk(0);
 8033f0c:	2000      	movs	r0, #0
 8033f0e:	f7ff f8d3 	bl	80330b8 <RFM_Spk>
		}
#endif

		//  Red LED Off
		HAL_GPIO_WritePin ( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_RESET ); //  RED LED
 8033f12:	2200      	movs	r2, #0
 8033f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8033f18:	480f      	ldr	r0, [pc, #60]	; (8033f58 <LoopProcRFM+0x2b4>)
 8033f1a:	f7ef faff 	bl	802351c <HAL_GPIO_WritePin>

	//========================================================================
	//  수신기 Standby GPIO 제어 : 모듈동작시 1초간격 Blink
	static int s_nTickStandby;

	if ( nTick - s_nTickStandby >= 1000 )
 8033f1e:	4b13      	ldr	r3, [pc, #76]	; (8033f6c <LoopProcRFM+0x2c8>)
 8033f20:	681b      	ldr	r3, [r3, #0]
 8033f22:	687a      	ldr	r2, [r7, #4]
 8033f24:	1ad3      	subs	r3, r2, r3
 8033f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8033f2a:	db35      	blt.n	8033f98 <LoopProcRFM+0x2f4>
	{
		//	Standby GPIO Toggle
		if ( GetRFMMode() == RFMModeRx )
 8033f2c:	f7fe fbec 	bl	8032708 <GetRFMMode>
 8033f30:	4603      	mov	r3, r0
 8033f32:	2b02      	cmp	r3, #2
 8033f34:	d11c      	bne.n	8033f70 <LoopProcRFM+0x2cc>
		{
			//  수신기:수신중 LED On ( Standby LED On )
			HAL_GPIO_WritePin( STANDBY_GPIO_Port, STANDBY_Pin, GPIO_PIN_SET );
 8033f36:	2201      	movs	r2, #1
 8033f38:	2180      	movs	r1, #128	; 0x80
 8033f3a:	480a      	ldr	r0, [pc, #40]	; (8033f64 <LoopProcRFM+0x2c0>)
 8033f3c:	f7ef faee 	bl	802351c <HAL_GPIO_WritePin>
 8033f40:	e01f      	b.n	8033f82 <LoopProcRFM+0x2de>
 8033f42:	bf00      	nop
 8033f44:	20001f6c 	.word	0x20001f6c
 8033f48:	200004f0 	.word	0x200004f0
 8033f4c:	20002914 	.word	0x20002914
 8033f50:	0803b578 	.word	0x0803b578
 8033f54:	0803b58c 	.word	0x0803b58c
 8033f58:	40020400 	.word	0x40020400
 8033f5c:	20001d7c 	.word	0x20001d7c
 8033f60:	200004fc 	.word	0x200004fc
 8033f64:	40021000 	.word	0x40021000
 8033f68:	2000233c 	.word	0x2000233c
 8033f6c:	20002918 	.word	0x20002918
		}
		else
		{
			//  Standby LED Toggle
			HAL_GPIO_TogglePin( STANDBY_GPIO_Port, STANDBY_Pin );
 8033f70:	2180      	movs	r1, #128	; 0x80
 8033f72:	4872      	ldr	r0, [pc, #456]	; (803413c <LoopProcRFM+0x498>)
 8033f74:	f7ef faeb 	bl	802354e <HAL_GPIO_TogglePin>

			//	RFM(Board) Status LED
			HAL_GPIO_TogglePin ( LED_ST_GPIO_Port, LED_ST_Pin );
 8033f78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8033f7c:	4870      	ldr	r0, [pc, #448]	; (8034140 <LoopProcRFM+0x49c>)
 8033f7e:	f7ef fae6 	bl	802354e <HAL_GPIO_TogglePin>
		}

		if ( GetRFMMode() == RFMModeNormal )
 8033f82:	f7fe fbc1 	bl	8032708 <GetRFMMode>
 8033f86:	4603      	mov	r3, r0
 8033f88:	2b00      	cmp	r3, #0
 8033f8a:	d102      	bne.n	8033f92 <LoopProcRFM+0x2ee>
		{
			//	Normal 모드인 경우 상태정보 갱신.
		    //	Reflash Status
		    ReflashStat( nTick );	//	상태정보 갱신.
 8033f8c:	6878      	ldr	r0, [r7, #4]
 8033f8e:	f000 f979 	bl	8034284 <ReflashStat>
		    //	Reflash Status
		    ReflashStat( nTick );	//	상태정보 갱신.
		}
		//========================================================================
#endif
		s_nTickStandby = nTick;
 8033f92:	4a6c      	ldr	r2, [pc, #432]	; (8034144 <LoopProcRFM+0x4a0>)
 8033f94:	687b      	ldr	r3, [r7, #4]
 8033f96:	6013      	str	r3, [r2, #0]

#if defined(TIMEOUT_UPGRADE)

	//========================================================================
	//	Upgrade Mode 진입후 5분간 Rx가 없는경우 Normal모드로 변경.
	if ( ( GetDevID() == DevRF900M )						//	수신기.
 8033f98:	f7fe fb8a 	bl	80326b0 <GetDevID>
 8033f9c:	4603      	mov	r3, r0
 8033f9e:	2b01      	cmp	r3, #1
 8033fa0:	d11d      	bne.n	8033fde <LoopProcRFM+0x33a>
		&& ( ( nTick - g_nStampRxPkt ) > (TIMEOUT_UPGRADE * 1000) )	//	Timeout
 8033fa2:	4b69      	ldr	r3, [pc, #420]	; (8034148 <LoopProcRFM+0x4a4>)
 8033fa4:	681b      	ldr	r3, [r3, #0]
 8033fa6:	687a      	ldr	r2, [r7, #4]
 8033fa8:	1ad3      	subs	r3, r2, r3
 8033faa:	4a68      	ldr	r2, [pc, #416]	; (803414c <LoopProcRFM+0x4a8>)
 8033fac:	4293      	cmp	r3, r2
 8033fae:	dd16      	ble.n	8033fde <LoopProcRFM+0x33a>
		&& ( GetRFMMode() == RFMModeUpgr )
 8033fb0:	f7fe fbaa 	bl	8032708 <GetRFMMode>
 8033fb4:	4603      	mov	r3, r0
 8033fb6:	2b04      	cmp	r3, #4
 8033fb8:	d111      	bne.n	8033fde <LoopProcRFM+0x33a>
		)
	{
		//========================================================================
		//	Normal 모드로 변경.
		SetRFMMode( RFMModeNormal );	//	Normal Mode 로 변경
 8033fba:	2000      	movs	r0, #0
 8033fbc:	f7fe fbb0 	bl	8032720 <SetRFMMode>
		//========================================================================

		//  RF 수신 Start
		g_nChRx = GetChRx();	//	ChTS1_1 + g_idxTrainSet * 2 + ((g_nCarNo+1) % 2);	// 현재 호차 채널
 8033fc0:	f7fe fc28 	bl	8032814 <GetChRx>
 8033fc4:	4603      	mov	r3, r0
 8033fc6:	4a62      	ldr	r2, [pc, #392]	; (8034150 <LoopProcRFM+0x4ac>)
 8033fc8:	6013      	str	r3, [r2, #0]

		vRadio_StartRX(
 8033fca:	4b61      	ldr	r3, [pc, #388]	; (8034150 <LoopProcRFM+0x4ac>)
 8033fcc:	681b      	ldr	r3, [r3, #0]
 8033fce:	b2da      	uxtb	r2, r3
			g_nChRx,	//g_idxTrainSet,	//		pRadioConfiguration->Radio_ChannelNumber,
			pRadioConfiguration->Radio_PacketLength );
 8033fd0:	4b60      	ldr	r3, [pc, #384]	; (8034154 <LoopProcRFM+0x4b0>)
 8033fd2:	681b      	ldr	r3, [r3, #0]
		vRadio_StartRX(
 8033fd4:	795b      	ldrb	r3, [r3, #5]
 8033fd6:	4619      	mov	r1, r3
 8033fd8:	4610      	mov	r0, r2
 8033fda:	f7f9 f9db 	bl	802d394 <vRadio_StartRX>
	//========================================================================
	//	송신기 장치 상태정보 요청.
	static int oldTickStatReq = 0;
	static int s_idxCh = 0;

	if	( 	GetDevID() == DevRF900T						//	송신기
 8033fde:	f7fe fb67 	bl	80326b0 <GetDevID>
 8033fe2:	4603      	mov	r3, r0
 8033fe4:	2b02      	cmp	r3, #2
 8033fe6:	d14a      	bne.n	803407e <LoopProcRFM+0x3da>
			&&	GetRFMMode() == RFMModeNormal			//	Normal모드 : 상태정보 요청.
 8033fe8:	f7fe fb8e 	bl	8032708 <GetRFMMode>
 8033fec:	4603      	mov	r3, r0
 8033fee:	2b00      	cmp	r3, #0
 8033ff0:	d145      	bne.n	803407e <LoopProcRFM+0x3da>
			oldTickStatReq = nTick + 1000;		//	1초 이후 부터 시작.
		}
		else
#endif		//	defined(USE_ROUTE_REQ)	//	송신기 : Route 정보 요청.
#endif
		if	( (nTick - oldTickStatReq) > TIME_STAT_REQ )	//	주기 : 300 msec
 8033ff2:	4b59      	ldr	r3, [pc, #356]	; (8034158 <LoopProcRFM+0x4b4>)
 8033ff4:	681b      	ldr	r3, [r3, #0]
 8033ff6:	687a      	ldr	r2, [r7, #4]
 8033ff8:	1ad3      	subs	r3, r2, r3
 8033ffa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8033ffe:	dd3e      	ble.n	803407e <LoopProcRFM+0x3da>
		{
			//	상태정보 요청.
			if ( s_idxCh < MaxRFMNo )
 8034000:	4b56      	ldr	r3, [pc, #344]	; (803415c <LoopProcRFM+0x4b8>)
 8034002:	681b      	ldr	r3, [r3, #0]
 8034004:	2b09      	cmp	r3, #9
 8034006:	dc09      	bgt.n	803401c <LoopProcRFM+0x378>
			{
				//========================================================================
				//	수신기 상태정보
				SendStatReq( ChTS1_1 + (s_idxCh*ChGap) );
 8034008:	4b54      	ldr	r3, [pc, #336]	; (803415c <LoopProcRFM+0x4b8>)
 803400a:	681b      	ldr	r3, [r3, #0]
 803400c:	009a      	lsls	r2, r3, #2
 803400e:	4b54      	ldr	r3, [pc, #336]	; (8034160 <LoopProcRFM+0x4bc>)
 8034010:	681b      	ldr	r3, [r3, #0]
 8034012:	4413      	add	r3, r2
 8034014:	4618      	mov	r0, r3
 8034016:	f7fa fa93 	bl	802e540 <SendStatReq>
 803401a:	e01d      	b.n	8034058 <LoopProcRFM+0x3b4>
			}
			else
			{
				//========================================================================
				//	송신기 상태정보
				if( ChTx_1 + ( s_idxCh % 2 )*ChGap != GetChRx() )
 803401c:	4b4f      	ldr	r3, [pc, #316]	; (803415c <LoopProcRFM+0x4b8>)
 803401e:	681b      	ldr	r3, [r3, #0]
 8034020:	2b00      	cmp	r3, #0
 8034022:	f003 0301 	and.w	r3, r3, #1
 8034026:	bfb8      	it	lt
 8034028:	425b      	neglt	r3, r3
 803402a:	009a      	lsls	r2, r3, #2
 803402c:	4b4d      	ldr	r3, [pc, #308]	; (8034164 <LoopProcRFM+0x4c0>)
 803402e:	681b      	ldr	r3, [r3, #0]
 8034030:	18d4      	adds	r4, r2, r3
 8034032:	f7fe fbef 	bl	8032814 <GetChRx>
 8034036:	4603      	mov	r3, r0
 8034038:	429c      	cmp	r4, r3
 803403a:	d00d      	beq.n	8034058 <LoopProcRFM+0x3b4>
				{
					//	타 송신기에 상태정보 요청.
					SendStatReq( ChTx_1 + ( s_idxCh % 2 )*ChGap );
 803403c:	4b47      	ldr	r3, [pc, #284]	; (803415c <LoopProcRFM+0x4b8>)
 803403e:	681b      	ldr	r3, [r3, #0]
 8034040:	2b00      	cmp	r3, #0
 8034042:	f003 0301 	and.w	r3, r3, #1
 8034046:	bfb8      	it	lt
 8034048:	425b      	neglt	r3, r3
 803404a:	009a      	lsls	r2, r3, #2
 803404c:	4b45      	ldr	r3, [pc, #276]	; (8034164 <LoopProcRFM+0x4c0>)
 803404e:	681b      	ldr	r3, [r3, #0]
 8034050:	4413      	add	r3, r2
 8034052:	4618      	mov	r0, r3
 8034054:	f7fa fa74 	bl	802e540 <SendStatReq>
	//		{
	//		    //	Reflash Status
	//		    ReflashStat( nTick );	//	상태정보 갱신.
	//		}

			s_idxCh = ( s_idxCh + 1 ) % ( MaxRFMNo + 2 );	//	MaxRFMNo : 10 + 2(송신기 2채널)
 8034058:	4b40      	ldr	r3, [pc, #256]	; (803415c <LoopProcRFM+0x4b8>)
 803405a:	681b      	ldr	r3, [r3, #0]
 803405c:	1c59      	adds	r1, r3, #1
 803405e:	4b42      	ldr	r3, [pc, #264]	; (8034168 <LoopProcRFM+0x4c4>)
 8034060:	fb83 2301 	smull	r2, r3, r3, r1
 8034064:	105a      	asrs	r2, r3, #1
 8034066:	17cb      	asrs	r3, r1, #31
 8034068:	1ad2      	subs	r2, r2, r3
 803406a:	4613      	mov	r3, r2
 803406c:	005b      	lsls	r3, r3, #1
 803406e:	4413      	add	r3, r2
 8034070:	009b      	lsls	r3, r3, #2
 8034072:	1aca      	subs	r2, r1, r3
 8034074:	4b39      	ldr	r3, [pc, #228]	; (803415c <LoopProcRFM+0x4b8>)
 8034076:	601a      	str	r2, [r3, #0]

			oldTickStatReq = nTick;
 8034078:	4a37      	ldr	r2, [pc, #220]	; (8034158 <LoopProcRFM+0x4b4>)
 803407a:	687b      	ldr	r3, [r7, #4]
 803407c:	6013      	str	r3, [r2, #0]
#if defined(USE_ROUTE_REQ_RFM)	//	수신기 Route 요청.
	static int oldTickRouteReq = 0;

	static int s_ChkRsp = 0;

	if	( 	GetDevID() == DevRF900M						//	수신기
 803407e:	f7fe fb17 	bl	80326b0 <GetDevID>
 8034082:	4603      	mov	r3, r0
 8034084:	2b01      	cmp	r3, #1
 8034086:	d155      	bne.n	8034134 <LoopProcRFM+0x490>
			&&	GetRFMMode() == RFMModeNormal			//	Normal모드 : 상태정보 요청.
 8034088:	f7fe fb3e 	bl	8032708 <GetRFMMode>
 803408c:	4603      	mov	r3, r0
 803408e:	2b00      	cmp	r3, #0
 8034090:	d150      	bne.n	8034134 <LoopProcRFM+0x490>
			)
	{

		if( (nTick - oldTickRouteReq ) > (TIME_ROUTE_REQ * 1000) )
 8034092:	4b36      	ldr	r3, [pc, #216]	; (803416c <LoopProcRFM+0x4c8>)
 8034094:	681b      	ldr	r3, [r3, #0]
 8034096:	687a      	ldr	r2, [r7, #4]
 8034098:	1ad3      	subs	r3, r2, r3
 803409a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 803409e:	dd10      	ble.n	80340c2 <LoopProcRFM+0x41e>
		{
			//	수신기 -> 수신기 : Route 정보 요청.
			//	1 -> 2
			//		 2 -> 3
			//			  3 -> 4
			if ( g_nCarNo != 10 )	//	10호차 Skip
 80340a0:	4b33      	ldr	r3, [pc, #204]	; (8034170 <LoopProcRFM+0x4cc>)
 80340a2:	681b      	ldr	r3, [r3, #0]
 80340a4:	2b0a      	cmp	r3, #10
 80340a6:	d006      	beq.n	80340b6 <LoopProcRFM+0x412>
			{
				//	다음번 수신기에 정보 요청
				SendRouteReq( GetChRx() + ChGap );		//
 80340a8:	f7fe fbb4 	bl	8032814 <GetChRx>
 80340ac:	4603      	mov	r3, r0
 80340ae:	3304      	adds	r3, #4
 80340b0:	4618      	mov	r0, r3
 80340b2:	f7fa fb33 	bl	802e71c <SendRouteReq>

				//	Timeout 발생시 그 다음 수신기로 정보 요청.
			}

			oldTickRouteReq = nTick;			//	1초 이후 부터 시작.
 80340b6:	4a2d      	ldr	r2, [pc, #180]	; (803416c <LoopProcRFM+0x4c8>)
 80340b8:	687b      	ldr	r3, [r7, #4]
 80340ba:	6013      	str	r3, [r2, #0]
			s_ChkRsp = 1;
 80340bc:	4b2d      	ldr	r3, [pc, #180]	; (8034174 <LoopProcRFM+0x4d0>)
 80340be:	2201      	movs	r2, #1
 80340c0:	601a      	str	r2, [r3, #0]
		}

		if( s_ChkRsp == 1
 80340c2:	4b2c      	ldr	r3, [pc, #176]	; (8034174 <LoopProcRFM+0x4d0>)
 80340c4:	681b      	ldr	r3, [r3, #0]
 80340c6:	2b01      	cmp	r3, #1
 80340c8:	d134      	bne.n	8034134 <LoopProcRFM+0x490>
				&& (nTick - oldTickRouteReq ) > 100		//	송신후 응답시간 ( 100 msec )
 80340ca:	4b28      	ldr	r3, [pc, #160]	; (803416c <LoopProcRFM+0x4c8>)
 80340cc:	681b      	ldr	r3, [r3, #0]
 80340ce:	687a      	ldr	r2, [r7, #4]
 80340d0:	1ad3      	subs	r3, r2, r3
 80340d2:	2b64      	cmp	r3, #100	; 0x64
 80340d4:	dd2e      	ble.n	8034134 <LoopProcRFM+0x490>
				&& ( g_nCarNo != 9 && g_nCarNo != 10 )	//	다음호차 검색은 9/10호차 Skip
 80340d6:	4b26      	ldr	r3, [pc, #152]	; (8034170 <LoopProcRFM+0x4cc>)
 80340d8:	681b      	ldr	r3, [r3, #0]
 80340da:	2b09      	cmp	r3, #9
 80340dc:	d02a      	beq.n	8034134 <LoopProcRFM+0x490>
 80340de:	4b24      	ldr	r3, [pc, #144]	; (8034170 <LoopProcRFM+0x4cc>)
 80340e0:	681b      	ldr	r3, [r3, #0]
 80340e2:	2b0a      	cmp	r3, #10
 80340e4:	d026      	beq.n	8034134 <LoopProcRFM+0x490>
				)
		{
			//	다음 호차검색

			if ( ( nTick - g_nStampRouteRsp ) > TIMEOUT_RECV_ROUTE * 1000 )
 80340e6:	4b24      	ldr	r3, [pc, #144]	; (8034178 <LoopProcRFM+0x4d4>)
 80340e8:	681b      	ldr	r3, [r3, #0]
 80340ea:	687a      	ldr	r2, [r7, #4]
 80340ec:	1ad3      	subs	r3, r2, r3
 80340ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80340f2:	4293      	cmp	r3, r2
 80340f4:	dd1b      	ble.n	803412e <LoopProcRFM+0x48a>
				//	Timeout 발생시.
				//	다음호차부터  ~ 10까지 상태정보 전송 검색.

				//	g_nIdxRouteFindNext	Index 증가하면서 10호차 까지 상태정보 검색.
				//	[1] [2-X] ->[3] ->[4] ... -> [10]
				SendRouteReq( GetChRx() + (2 + g_nIdxRouteFindNext) * ChGap );
 80340f6:	f7fe fb8d 	bl	8032814 <GetChRx>
 80340fa:	4602      	mov	r2, r0
 80340fc:	4b1f      	ldr	r3, [pc, #124]	; (803417c <LoopProcRFM+0x4d8>)
 80340fe:	681b      	ldr	r3, [r3, #0]
 8034100:	3302      	adds	r3, #2
 8034102:	009b      	lsls	r3, r3, #2
 8034104:	4413      	add	r3, r2
 8034106:	4618      	mov	r0, r3
 8034108:	f7fa fb08 	bl	802e71c <SendRouteReq>

				if ( ( g_nCarNo + 2 + g_nIdxRouteFindNext ) > 10 )
 803410c:	4b18      	ldr	r3, [pc, #96]	; (8034170 <LoopProcRFM+0x4cc>)
 803410e:	681b      	ldr	r3, [r3, #0]
 8034110:	1c9a      	adds	r2, r3, #2
 8034112:	4b1a      	ldr	r3, [pc, #104]	; (803417c <LoopProcRFM+0x4d8>)
 8034114:	681b      	ldr	r3, [r3, #0]
 8034116:	4413      	add	r3, r2
 8034118:	2b0a      	cmp	r3, #10
 803411a:	dd03      	ble.n	8034124 <LoopProcRFM+0x480>
					g_nIdxRouteFindNext = 0;
 803411c:	4b17      	ldr	r3, [pc, #92]	; (803417c <LoopProcRFM+0x4d8>)
 803411e:	2200      	movs	r2, #0
 8034120:	601a      	str	r2, [r3, #0]
 8034122:	e004      	b.n	803412e <LoopProcRFM+0x48a>
				else
					g_nIdxRouteFindNext++;
 8034124:	4b15      	ldr	r3, [pc, #84]	; (803417c <LoopProcRFM+0x4d8>)
 8034126:	681b      	ldr	r3, [r3, #0]
 8034128:	3301      	adds	r3, #1
 803412a:	4a14      	ldr	r2, [pc, #80]	; (803417c <LoopProcRFM+0x4d8>)
 803412c:	6013      	str	r3, [r2, #0]
			}
			s_ChkRsp = 0;
 803412e:	4b11      	ldr	r3, [pc, #68]	; (8034174 <LoopProcRFM+0x4d0>)
 8034130:	2200      	movs	r2, #0
 8034132:	601a      	str	r2, [r3, #0]
		}
	}

#endif

}
 8034134:	bf00      	nop
 8034136:	3764      	adds	r7, #100	; 0x64
 8034138:	46bd      	mov	sp, r7
 803413a:	bd90      	pop	{r4, r7, pc}
 803413c:	40021000 	.word	0x40021000
 8034140:	40020c00 	.word	0x40020c00
 8034144:	20002918 	.word	0x20002918
 8034148:	2000233c 	.word	0x2000233c
 803414c:	000493e0 	.word	0x000493e0
 8034150:	20000be8 	.word	0x20000be8
 8034154:	200004f0 	.word	0x200004f0
 8034158:	2000291c 	.word	0x2000291c
 803415c:	20002920 	.word	0x20002920
 8034160:	200004fc 	.word	0x200004fc
 8034164:	200004f4 	.word	0x200004f4
 8034168:	2aaaaaab 	.word	0x2aaaaaab
 803416c:	20002924 	.word	0x20002924
 8034170:	20002330 	.word	0x20002330
 8034174:	20002928 	.word	0x20002928
 8034178:	2000253c 	.word	0x2000253c
 803417c:	20002540 	.word	0x20002540

08034180 <UpdateStat>:

//========================================================================
void UpdateStat( RFMPktStat *pStat )
//========================================================================
{
 8034180:	b5b0      	push	{r4, r5, r7, lr}
 8034182:	b086      	sub	sp, #24
 8034184:	af02      	add	r7, sp, #8
 8034186:	6078      	str	r0, [r7, #4]
	//	버전정보 갱신.
	if ( pStat == NULL ) return ;
 8034188:	687b      	ldr	r3, [r7, #4]
 803418a:	2b00      	cmp	r3, #0
 803418c:	d045      	beq.n	803421a <UpdateStat+0x9a>

	if ( 0 < pStat->nCarNo && pStat->nCarNo <= MaxCarNo )
 803418e:	687b      	ldr	r3, [r7, #4]
 8034190:	7b5b      	ldrb	r3, [r3, #13]
 8034192:	2b00      	cmp	r3, #0
 8034194:	d042      	beq.n	803421c <UpdateStat+0x9c>
 8034196:	687b      	ldr	r3, [r7, #4]
 8034198:	7b5b      	ldrb	r3, [r3, #13]
 803419a:	2b0d      	cmp	r3, #13
 803419c:	d83e      	bhi.n	803421c <UpdateStat+0x9c>
	{
		int idx = pStat->nCarNo;
 803419e:	687b      	ldr	r3, [r7, #4]
 80341a0:	7b5b      	ldrb	r3, [r3, #13]
 80341a2:	60fb      	str	r3, [r7, #12]

		//========================================================================
		//	상태정보 갱신.
		memcpy( &g_devStat[idx].stat, pStat, sizeof(RFMPktStat) );
 80341a4:	68fa      	ldr	r2, [r7, #12]
 80341a6:	4613      	mov	r3, r2
 80341a8:	00db      	lsls	r3, r3, #3
 80341aa:	4413      	add	r3, r2
 80341ac:	009b      	lsls	r3, r3, #2
 80341ae:	4413      	add	r3, r2
 80341b0:	4a1c      	ldr	r2, [pc, #112]	; (8034224 <UpdateStat+0xa4>)
 80341b2:	4413      	add	r3, r2
 80341b4:	2219      	movs	r2, #25
 80341b6:	6879      	ldr	r1, [r7, #4]
 80341b8:	4618      	mov	r0, r3
 80341ba:	f003 fce1 	bl	8037b80 <memcpy>

		//========================================================================
		//	RSSI 갱신
		g_devStat[idx].nRSSI = g_nRSSI;
 80341be:	4b1a      	ldr	r3, [pc, #104]	; (8034228 <UpdateStat+0xa8>)
 80341c0:	6819      	ldr	r1, [r3, #0]
 80341c2:	4818      	ldr	r0, [pc, #96]	; (8034224 <UpdateStat+0xa4>)
 80341c4:	68fa      	ldr	r2, [r7, #12]
 80341c6:	4613      	mov	r3, r2
 80341c8:	00db      	lsls	r3, r3, #3
 80341ca:	4413      	add	r3, r2
 80341cc:	009b      	lsls	r3, r3, #2
 80341ce:	4413      	add	r3, r2
 80341d0:	4403      	add	r3, r0
 80341d2:	3318      	adds	r3, #24
 80341d4:	f8c3 1005 	str.w	r1, [r3, #5]

		//========================================================================
		//	버전정보 갱신.

#if defined( USE_COMM_MODE_CH_GRP )
		sprintf(_sVerList[idx], "%02d:%d/R%d,%03d", idx,
 80341d8:	68fa      	ldr	r2, [r7, #12]
 80341da:	4613      	mov	r3, r2
 80341dc:	009b      	lsls	r3, r3, #2
 80341de:	4413      	add	r3, r2
 80341e0:	009b      	lsls	r3, r3, #2
 80341e2:	4a12      	ldr	r2, [pc, #72]	; (803422c <UpdateStat+0xac>)
 80341e4:	1898      	adds	r0, r3, r2
				pStat->ver_build,
 80341e6:	687b      	ldr	r3, [r7, #4]
 80341e8:	8a5b      	ldrh	r3, [r3, #18]
 80341ea:	b29b      	uxth	r3, r3
		sprintf(_sVerList[idx], "%02d:%d/R%d,%03d", idx,
 80341ec:	461d      	mov	r5, r3
				pStat->nRFMode,
 80341ee:	687b      	ldr	r3, [r7, #4]
 80341f0:	7ddb      	ldrb	r3, [r3, #23]
		sprintf(_sVerList[idx], "%02d:%d/R%d,%03d", idx,
 80341f2:	461c      	mov	r4, r3
 80341f4:	490b      	ldr	r1, [pc, #44]	; (8034224 <UpdateStat+0xa4>)
 80341f6:	68fa      	ldr	r2, [r7, #12]
 80341f8:	4613      	mov	r3, r2
 80341fa:	00db      	lsls	r3, r3, #3
 80341fc:	4413      	add	r3, r2
 80341fe:	009b      	lsls	r3, r3, #2
 8034200:	4413      	add	r3, r2
 8034202:	440b      	add	r3, r1
 8034204:	3318      	adds	r3, #24
 8034206:	f8d3 3005 	ldr.w	r3, [r3, #5]
 803420a:	9301      	str	r3, [sp, #4]
 803420c:	9400      	str	r4, [sp, #0]
 803420e:	462b      	mov	r3, r5
 8034210:	68fa      	ldr	r2, [r7, #12]
 8034212:	4907      	ldr	r1, [pc, #28]	; (8034230 <UpdateStat+0xb0>)
 8034214:	f003 fa70 	bl	80376f8 <siprintf>
 8034218:	e000      	b.n	803421c <UpdateStat+0x9c>
	if ( pStat == NULL ) return ;
 803421a:	bf00      	nop
				pStat->ver_det,
				pStat->ver_build
				);
#endif
	}
}
 803421c:	3710      	adds	r7, #16
 803421e:	46bd      	mov	sp, r7
 8034220:	bdb0      	pop	{r4, r5, r7, pc}
 8034222:	bf00      	nop
 8034224:	2000234c 	.word	0x2000234c
 8034228:	20002340 	.word	0x20002340
 803422c:	20000808 	.word	0x20000808
 8034230:	0803b59c 	.word	0x0803b59c

08034234 <SetStat>:

//========================================================================
void SetStat( int nRspID )
//========================================================================
{
 8034234:	b580      	push	{r7, lr}
 8034236:	b082      	sub	sp, #8
 8034238:	af00      	add	r7, sp, #0
 803423a:	6078      	str	r0, [r7, #4]
	//	상태정보 저장.
	//	상태정보 수신 시간 저장.

	//	장치 응답 Flag 설정.
	g_flagRspID	|= ( 0x1 << nRspID );
 803423c:	2201      	movs	r2, #1
 803423e:	687b      	ldr	r3, [r7, #4]
 8034240:	fa02 f303 	lsl.w	r3, r2, r3
 8034244:	b21a      	sxth	r2, r3
 8034246:	4b0d      	ldr	r3, [pc, #52]	; (803427c <SetStat+0x48>)
 8034248:	881b      	ldrh	r3, [r3, #0]
 803424a:	b21b      	sxth	r3, r3
 803424c:	4313      	orrs	r3, r2
 803424e:	b21b      	sxth	r3, r3
 8034250:	b29a      	uxth	r2, r3
 8034252:	4b0a      	ldr	r3, [pc, #40]	; (803427c <SetStat+0x48>)
 8034254:	801a      	strh	r2, [r3, #0]

	//	TimeStamp 저장.
//DEL	stampStat[nRspID] = HAL_GetTick();
	g_devStat[nRspID].stampRx = HAL_GetTick();
 8034256:	f7ed fc87 	bl	8021b68 <HAL_GetTick>
 803425a:	4603      	mov	r3, r0
 803425c:	4618      	mov	r0, r3
 803425e:	4908      	ldr	r1, [pc, #32]	; (8034280 <SetStat+0x4c>)
 8034260:	687a      	ldr	r2, [r7, #4]
 8034262:	4613      	mov	r3, r2
 8034264:	00db      	lsls	r3, r3, #3
 8034266:	4413      	add	r3, r2
 8034268:	009b      	lsls	r3, r3, #2
 803426a:	4413      	add	r3, r2
 803426c:	440b      	add	r3, r1
 803426e:	3318      	adds	r3, #24
 8034270:	f8c3 0001 	str.w	r0, [r3, #1]
}
 8034274:	bf00      	nop
 8034276:	3708      	adds	r7, #8
 8034278:	46bd      	mov	sp, r7
 803427a:	bd80      	pop	{r7, pc}
 803427c:	20001394 	.word	0x20001394
 8034280:	2000234c 	.word	0x2000234c

08034284 <ReflashStat>:

//========================================================================
void ReflashStat( int nTick )
//========================================================================
{
 8034284:	b580      	push	{r7, lr}
 8034286:	b084      	sub	sp, #16
 8034288:	af00      	add	r7, sp, #0
 803428a:	6078      	str	r0, [r7, #4]
	//	상태정보 갱신.
	//	Timeout 초과 상태정보 Disable
	if( g_bSetRspIDManual )
 803428c:	4b2d      	ldr	r3, [pc, #180]	; (8034344 <ReflashStat+0xc0>)
 803428e:	681b      	ldr	r3, [r3, #0]
 8034290:	2b00      	cmp	r3, #0
 8034292:	d152      	bne.n	803433a <ReflashStat+0xb6>
		return ;
	}

	int idx;

	for( idx = 0; idx < MaxCarNo; idx++ )
 8034294:	2300      	movs	r3, #0
 8034296:	60fb      	str	r3, [r7, #12]
 8034298:	e04b      	b.n	8034332 <ReflashStat+0xae>
	{
		if ( GetCarNo() == idx )
 803429a:	f7fe fddf 	bl	8032e5c <GetCarNo>
 803429e:	4602      	mov	r2, r0
 80342a0:	68fb      	ldr	r3, [r7, #12]
 80342a2:	4293      	cmp	r3, r2
 80342a4:	d041      	beq.n	803432a <ReflashStat+0xa6>
		{
			//	자신의 ID Skip
			continue;
		}

		if ( ( nTick - g_devStat[idx].stampRx ) > TIMEOUT_RECV_STATUS * 1000 )
 80342a6:	4928      	ldr	r1, [pc, #160]	; (8034348 <ReflashStat+0xc4>)
 80342a8:	68fa      	ldr	r2, [r7, #12]
 80342aa:	4613      	mov	r3, r2
 80342ac:	00db      	lsls	r3, r3, #3
 80342ae:	4413      	add	r3, r2
 80342b0:	009b      	lsls	r3, r3, #2
 80342b2:	4413      	add	r3, r2
 80342b4:	440b      	add	r3, r1
 80342b6:	3318      	adds	r3, #24
 80342b8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80342bc:	687a      	ldr	r2, [r7, #4]
 80342be:	1ad3      	subs	r3, r2, r3
 80342c0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80342c4:	dd32      	ble.n	803432c <ReflashStat+0xa8>
		{
			g_flagRspID &= ~( 0x1 << idx );
 80342c6:	2201      	movs	r2, #1
 80342c8:	68fb      	ldr	r3, [r7, #12]
 80342ca:	fa02 f303 	lsl.w	r3, r2, r3
 80342ce:	b21b      	sxth	r3, r3
 80342d0:	43db      	mvns	r3, r3
 80342d2:	b21a      	sxth	r2, r3
 80342d4:	4b1d      	ldr	r3, [pc, #116]	; (803434c <ReflashStat+0xc8>)
 80342d6:	881b      	ldrh	r3, [r3, #0]
 80342d8:	b21b      	sxth	r3, r3
 80342da:	4013      	ands	r3, r2
 80342dc:	b21b      	sxth	r3, r3
 80342de:	b29a      	uxth	r2, r3
 80342e0:	4b1a      	ldr	r3, [pc, #104]	; (803434c <ReflashStat+0xc8>)
 80342e2:	801a      	strh	r2, [r3, #0]

			//========================================================================
			//	Timeout 발생시 RSSI값 초기화.
			g_devStat[idx].nRSSI 	= 	0;
 80342e4:	4918      	ldr	r1, [pc, #96]	; (8034348 <ReflashStat+0xc4>)
 80342e6:	68fa      	ldr	r2, [r7, #12]
 80342e8:	4613      	mov	r3, r2
 80342ea:	00db      	lsls	r3, r3, #3
 80342ec:	4413      	add	r3, r2
 80342ee:	009b      	lsls	r3, r3, #2
 80342f0:	4413      	add	r3, r2
 80342f2:	440b      	add	r3, r1
 80342f4:	3318      	adds	r3, #24
 80342f6:	2200      	movs	r2, #0
 80342f8:	715a      	strb	r2, [r3, #5]
 80342fa:	2200      	movs	r2, #0
 80342fc:	719a      	strb	r2, [r3, #6]
 80342fe:	2200      	movs	r2, #0
 8034300:	71da      	strb	r2, [r3, #7]
 8034302:	2200      	movs	r2, #0
 8034304:	721a      	strb	r2, [r3, #8]
			g_devStat[idx].nNearCh 	= 	0;	//	nNearCh 초기화.
 8034306:	4910      	ldr	r1, [pc, #64]	; (8034348 <ReflashStat+0xc4>)
 8034308:	68fa      	ldr	r2, [r7, #12]
 803430a:	4613      	mov	r3, r2
 803430c:	00db      	lsls	r3, r3, #3
 803430e:	4413      	add	r3, r2
 8034310:	009b      	lsls	r3, r3, #2
 8034312:	4413      	add	r3, r2
 8034314:	440b      	add	r3, r1
 8034316:	3320      	adds	r3, #32
 8034318:	2200      	movs	r2, #0
 803431a:	705a      	strb	r2, [r3, #1]
 803431c:	2200      	movs	r2, #0
 803431e:	709a      	strb	r2, [r3, #2]
 8034320:	2200      	movs	r2, #0
 8034322:	70da      	strb	r2, [r3, #3]
 8034324:	2200      	movs	r2, #0
 8034326:	711a      	strb	r2, [r3, #4]
 8034328:	e000      	b.n	803432c <ReflashStat+0xa8>
			continue;
 803432a:	bf00      	nop
	for( idx = 0; idx < MaxCarNo; idx++ )
 803432c:	68fb      	ldr	r3, [r7, #12]
 803432e:	3301      	adds	r3, #1
 8034330:	60fb      	str	r3, [r7, #12]
 8034332:	68fb      	ldr	r3, [r7, #12]
 8034334:	2b0c      	cmp	r3, #12
 8034336:	ddb0      	ble.n	803429a <ReflashStat+0x16>
 8034338:	e000      	b.n	803433c <ReflashStat+0xb8>
		return ;
 803433a:	bf00      	nop
			//========================================================================
		}
	}
}
 803433c:	3710      	adds	r7, #16
 803433e:	46bd      	mov	sp, r7
 8034340:	bd80      	pop	{r7, pc}
 8034342:	bf00      	nop
 8034344:	20001390 	.word	0x20001390
 8034348:	2000234c 	.word	0x2000234c
 803434c:	20001394 	.word	0x20001394

08034350 <ReloadStampStat>:


//========================================================================
void ReloadStampStat( void )
//========================================================================
{
 8034350:	b580      	push	{r7, lr}
 8034352:	b082      	sub	sp, #8
 8034354:	af00      	add	r7, sp, #0
	//	상태정보 시간 갱신.
	//	-> 상태정보 시간 최신값으로 유지.
	//	-> 방송/통화 중 상태정보 전송을 하지 않기 때문에 방송통화 이후에 상태정보가 Reset되는 현상 방지.

	int nStamp = HAL_GetTick();
 8034356:	f7ed fc07 	bl	8021b68 <HAL_GetTick>
 803435a:	4603      	mov	r3, r0
 803435c:	603b      	str	r3, [r7, #0]

	int idx;

	for( idx = 0; idx < 16; idx++ )
 803435e:	2300      	movs	r3, #0
 8034360:	607b      	str	r3, [r7, #4]
 8034362:	e018      	b.n	8034396 <ReloadStampStat+0x46>
	{
		if( g_flagRspID & ( 0x1 << idx ) )
 8034364:	4b12      	ldr	r3, [pc, #72]	; (80343b0 <ReloadStampStat+0x60>)
 8034366:	881b      	ldrh	r3, [r3, #0]
 8034368:	461a      	mov	r2, r3
 803436a:	687b      	ldr	r3, [r7, #4]
 803436c:	fa42 f303 	asr.w	r3, r2, r3
 8034370:	f003 0301 	and.w	r3, r3, #1
 8034374:	2b00      	cmp	r3, #0
 8034376:	d00b      	beq.n	8034390 <ReloadStampStat+0x40>
		{
			g_devStat[idx].stampRx = nStamp;
 8034378:	490e      	ldr	r1, [pc, #56]	; (80343b4 <ReloadStampStat+0x64>)
 803437a:	687a      	ldr	r2, [r7, #4]
 803437c:	4613      	mov	r3, r2
 803437e:	00db      	lsls	r3, r3, #3
 8034380:	4413      	add	r3, r2
 8034382:	009b      	lsls	r3, r3, #2
 8034384:	4413      	add	r3, r2
 8034386:	440b      	add	r3, r1
 8034388:	3318      	adds	r3, #24
 803438a:	683a      	ldr	r2, [r7, #0]
 803438c:	f8c3 2001 	str.w	r2, [r3, #1]
	for( idx = 0; idx < 16; idx++ )
 8034390:	687b      	ldr	r3, [r7, #4]
 8034392:	3301      	adds	r3, #1
 8034394:	607b      	str	r3, [r7, #4]
 8034396:	687b      	ldr	r3, [r7, #4]
 8034398:	2b0f      	cmp	r3, #15
 803439a:	dde3      	ble.n	8034364 <ReloadStampStat+0x14>
		}
	}

	g_nStampRouteRsp = HAL_GetTick();		//	Normal 모드로 전환시 응답 시간 Reset
 803439c:	f7ed fbe4 	bl	8021b68 <HAL_GetTick>
 80343a0:	4603      	mov	r3, r0
 80343a2:	461a      	mov	r2, r3
 80343a4:	4b04      	ldr	r3, [pc, #16]	; (80343b8 <ReloadStampStat+0x68>)
 80343a6:	601a      	str	r2, [r3, #0]
}
 80343a8:	bf00      	nop
 80343aa:	3708      	adds	r7, #8
 80343ac:	46bd      	mov	sp, r7
 80343ae:	bd80      	pop	{r7, pc}
 80343b0:	20001394 	.word	0x20001394
 80343b4:	2000234c 	.word	0x2000234c
 80343b8:	2000253c 	.word	0x2000253c

080343bc <__io_putchar>:
  * @retval None
  */
//===========================================================================
PUTCHAR_PROTOTYPE
//===========================================================================
{
 80343bc:	b580      	push	{r7, lr}
 80343be:	b082      	sub	sp, #8
 80343c0:	af00      	add	r7, sp, #0
 80343c2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */

	//========================================================================
	//	Console
	if ( phuart2 )
 80343c4:	4b1f      	ldr	r3, [pc, #124]	; (8034444 <__io_putchar+0x88>)
 80343c6:	681b      	ldr	r3, [r3, #0]
 80343c8:	2b00      	cmp	r3, #0
 80343ca:	d012      	beq.n	80343f2 <__io_putchar+0x36>
	{
		HAL_UART_Transmit( phuart2, (uint8_t *)&ch, 1, 0xFFFF );
 80343cc:	4b1d      	ldr	r3, [pc, #116]	; (8034444 <__io_putchar+0x88>)
 80343ce:	6818      	ldr	r0, [r3, #0]
 80343d0:	1d39      	adds	r1, r7, #4
 80343d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80343d6:	2201      	movs	r2, #1
 80343d8:	f7f4 fbc0 	bl	8028b5c <HAL_UART_Transmit>
		if ( ch == '\n' )
 80343dc:	687b      	ldr	r3, [r7, #4]
 80343de:	2b0a      	cmp	r3, #10
 80343e0:	d107      	bne.n	80343f2 <__io_putchar+0x36>
		{
			HAL_UART_Transmit( phuart2, (uint8_t *)"\r", 1, 0xFFFF );
 80343e2:	4b18      	ldr	r3, [pc, #96]	; (8034444 <__io_putchar+0x88>)
 80343e4:	6818      	ldr	r0, [r3, #0]
 80343e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80343ea:	2201      	movs	r2, #1
 80343ec:	4916      	ldr	r1, [pc, #88]	; (8034448 <__io_putchar+0x8c>)
 80343ee:	f7f4 fbb5 	bl	8028b5c <HAL_UART_Transmit>
	}

	//========================================================================
	//	RS232
	//*
	if ( phuart1 )
 80343f2:	4b16      	ldr	r3, [pc, #88]	; (803444c <__io_putchar+0x90>)
 80343f4:	681b      	ldr	r3, [r3, #0]
 80343f6:	2b00      	cmp	r3, #0
 80343f8:	d012      	beq.n	8034420 <__io_putchar+0x64>
	{
		HAL_UART_Transmit( phuart1, (uint8_t *)&ch, 1, 0xFFFF );
 80343fa:	4b14      	ldr	r3, [pc, #80]	; (803444c <__io_putchar+0x90>)
 80343fc:	6818      	ldr	r0, [r3, #0]
 80343fe:	1d39      	adds	r1, r7, #4
 8034400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8034404:	2201      	movs	r2, #1
 8034406:	f7f4 fba9 	bl	8028b5c <HAL_UART_Transmit>

		if ( ch == '\n' )
 803440a:	687b      	ldr	r3, [r7, #4]
 803440c:	2b0a      	cmp	r3, #10
 803440e:	d107      	bne.n	8034420 <__io_putchar+0x64>
		{
			HAL_UART_Transmit( phuart1, (uint8_t *)"\r", 1, 0xFFFF );
 8034410:	4b0e      	ldr	r3, [pc, #56]	; (803444c <__io_putchar+0x90>)
 8034412:	6818      	ldr	r0, [r3, #0]
 8034414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8034418:	2201      	movs	r2, #1
 803441a:	490b      	ldr	r1, [pc, #44]	; (8034448 <__io_putchar+0x8c>)
 803441c:	f7f4 fb9e 	bl	8028b5c <HAL_UART_Transmit>
	//	USB Serial - RFM 송신기/수신기
#if defined(USE_BOOTLOADER)
#else	//	Application
	if ( 1 )//g_nDevID != DevNone && g_nDevID == DevRF900T )
	{
		if ( ch == '\n' )
 8034420:	687b      	ldr	r3, [r7, #4]
 8034422:	2b0a      	cmp	r3, #10
 8034424:	d104      	bne.n	8034430 <__io_putchar+0x74>
		{
			CDC_Transmit_FS( (uint8_t *)"\n\r", 2 );
 8034426:	2102      	movs	r1, #2
 8034428:	4809      	ldr	r0, [pc, #36]	; (8034450 <__io_putchar+0x94>)
 803442a:	f002 f97f 	bl	803672c <CDC_Transmit_FS>
 803442e:	e004      	b.n	803443a <__io_putchar+0x7e>
		}
		else
		{
			CDC_Transmit_FS( (uint8_t *)&ch, 1 );
 8034430:	1d3b      	adds	r3, r7, #4
 8034432:	2101      	movs	r1, #1
 8034434:	4618      	mov	r0, r3
 8034436:	f002 f979 	bl	803672c <CDC_Transmit_FS>
		}
	}
#endif
	//========================================================================

	return ch;
 803443a:	687b      	ldr	r3, [r7, #4]
}
 803443c:	4618      	mov	r0, r3
 803443e:	3708      	adds	r7, #8
 8034440:	46bd      	mov	sp, r7
 8034442:	bd80      	pop	{r7, pc}
 8034444:	20002b50 	.word	0x20002b50
 8034448:	0803b5b0 	.word	0x0803b5b0
 803444c:	20002b4c 	.word	0x20002b4c
 8034450:	0803b5b4 	.word	0x0803b5b4

08034454 <__io_getchar>:

//===========================================================================
GETCHAR_PROTOTYPE
//===========================================================================
{
 8034454:	b580      	push	{r7, lr}
 8034456:	b082      	sub	sp, #8
 8034458:	af00      	add	r7, sp, #0
	char	c;

	while( !qcount( &g_qDebug ) )
 803445a:	bf00      	nop
 803445c:	4809      	ldr	r0, [pc, #36]	; (8034484 <__io_getchar+0x30>)
 803445e:	f7f9 fe6b 	bl	802e138 <qcount>
 8034462:	4603      	mov	r3, r0
 8034464:	2b00      	cmp	r3, #0
 8034466:	d102      	bne.n	803446e <__io_getchar+0x1a>
	{
//		osDelay(0);
#if defined( USE_FREERTOS )
		taskYIELD();
#else
		return -1;		//	Non-Blocking ( OS less )
 8034468:	f04f 33ff 	mov.w	r3, #4294967295
 803446c:	e005      	b.n	803447a <__io_getchar+0x26>
//		HAL_Delay( 0 );
#endif
	}
	c = qget( &g_qDebug );
 803446e:	4805      	ldr	r0, [pc, #20]	; (8034484 <__io_getchar+0x30>)
 8034470:	f7f9 feaa 	bl	802e1c8 <qget>
 8034474:	4603      	mov	r3, r0
 8034476:	71fb      	strb	r3, [r7, #7]

	return c;
 8034478:	79fb      	ldrb	r3, [r7, #7]
}
 803447a:	4618      	mov	r0, r3
 803447c:	3708      	adds	r7, #8
 803447e:	46bd      	mov	sp, r7
 8034480:	bd80      	pop	{r7, pc}
 8034482:	bf00      	nop
 8034484:	2000292c 	.word	0x2000292c

08034488 <HAL_UART_RxCpltCallback>:
  * @retval None
  */
//===========================================================================
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
//===========================================================================
{
 8034488:	b580      	push	{r7, lr}
 803448a:	b082      	sub	sp, #8
 803448c:	af00      	add	r7, sp, #0
 803448e:	6078      	str	r0, [r7, #4]
	//	portBASE_TYPE	xHigherPriorityTaskWoken = pdFALSE;
	//	인터럽트.

	//===========================================================================
	//	Debug Console
	if ( huart->Instance == USART2 )
 8034490:	687b      	ldr	r3, [r7, #4]
 8034492:	681b      	ldr	r3, [r3, #0]
 8034494:	4a10      	ldr	r2, [pc, #64]	; (80344d8 <HAL_UART_RxCpltCallback+0x50>)
 8034496:	4293      	cmp	r3, r2
 8034498:	d10a      	bne.n	80344b0 <HAL_UART_RxCpltCallback+0x28>
	{
		//	문자 Queue에 쌓기.
		qput( &g_qDebug, dataDbgTx[0] );
 803449a:	4b10      	ldr	r3, [pc, #64]	; (80344dc <HAL_UART_RxCpltCallback+0x54>)
 803449c:	781b      	ldrb	r3, [r3, #0]
 803449e:	4619      	mov	r1, r3
 80344a0:	480f      	ldr	r0, [pc, #60]	; (80344e0 <HAL_UART_RxCpltCallback+0x58>)
 80344a2:	f7f9 fe61 	bl	802e168 <qput>

		//	입력내용 콘솔로 출력.
//DEL		HAL_UART_Transmit( huart, (uint8_t *)&dataDbgTx[0], 1, 0xFFFF );

		HAL_UART_Receive_IT( huart, dataDbgTx, 1 );
 80344a6:	2201      	movs	r2, #1
 80344a8:	490c      	ldr	r1, [pc, #48]	; (80344dc <HAL_UART_RxCpltCallback+0x54>)
 80344aa:	6878      	ldr	r0, [r7, #4]
 80344ac:	f7f4 fbef 	bl	8028c8e <HAL_UART_Receive_IT>
	}

	//===========================================================================
	//	RS232
	if ( huart->Instance == USART1 )
 80344b0:	687b      	ldr	r3, [r7, #4]
 80344b2:	681b      	ldr	r3, [r3, #0]
 80344b4:	4a0b      	ldr	r2, [pc, #44]	; (80344e4 <HAL_UART_RxCpltCallback+0x5c>)
 80344b6:	4293      	cmp	r3, r2
 80344b8:	d10a      	bne.n	80344d0 <HAL_UART_RxCpltCallback+0x48>
	{
		qput( &g_qDebug, dataTx1[0] );
 80344ba:	4b0b      	ldr	r3, [pc, #44]	; (80344e8 <HAL_UART_RxCpltCallback+0x60>)
 80344bc:	781b      	ldrb	r3, [r3, #0]
 80344be:	4619      	mov	r1, r3
 80344c0:	4807      	ldr	r0, [pc, #28]	; (80344e0 <HAL_UART_RxCpltCallback+0x58>)
 80344c2:	f7f9 fe51 	bl	802e168 <qput>
//		qput( &g_qRS485, dataTx1[0] );	//	입력내용 콘솔로 출력.

//DEL		HAL_UART_Transmit( huart, (uint8_t *)&dataTx1[0], 1, 0xFFFF );

		HAL_UART_Receive_IT( huart, dataTx1, 1 );
 80344c6:	2201      	movs	r2, #1
 80344c8:	4907      	ldr	r1, [pc, #28]	; (80344e8 <HAL_UART_RxCpltCallback+0x60>)
 80344ca:	6878      	ldr	r0, [r7, #4]
 80344cc:	f7f4 fbdf 	bl	8028c8e <HAL_UART_Receive_IT>
	}

	//===========================================================================
}
 80344d0:	bf00      	nop
 80344d2:	3708      	adds	r7, #8
 80344d4:	46bd      	mov	sp, r7
 80344d6:	bd80      	pop	{r7, pc}
 80344d8:	40004400 	.word	0x40004400
 80344dc:	20002b3c 	.word	0x20002b3c
 80344e0:	2000292c 	.word	0x2000292c
 80344e4:	40011000 	.word	0x40011000
 80344e8:	20002b44 	.word	0x20002b44

080344ec <SerialInitQueue>:


// ============================================================================
void SerialInitQueue( void )
//===========================================================================
{
 80344ec:	b580      	push	{r7, lr}
 80344ee:	af00      	add	r7, sp, #0
//	xDebugQueueRx = xQueueCreate( DEBUG_RX_QUEUE_SIZE, sizeof( char ) );

	//	Debug Queue
	init_queue( &g_qDebug );
 80344f0:	4803      	ldr	r0, [pc, #12]	; (8034500 <SerialInitQueue+0x14>)
 80344f2:	f7f9 fe0d 	bl	802e110 <init_queue>

	//	RS485 Queue
	init_queue( &g_qRS485 );
 80344f6:	4803      	ldr	r0, [pc, #12]	; (8034504 <SerialInitQueue+0x18>)
 80344f8:	f7f9 fe0a 	bl	802e110 <init_queue>
}
 80344fc:	bf00      	nop
 80344fe:	bd80      	pop	{r7, pc}
 8034500:	2000292c 	.word	0x2000292c
 8034504:	20002a34 	.word	0x20002a34

08034508 <SerialInit>:

//===========================================================================
void SerialInit( UART_HandleTypeDef *_phuart1, UART_HandleTypeDef *_phuart2 )
//===========================================================================
{
 8034508:	b580      	push	{r7, lr}
 803450a:	b082      	sub	sp, #8
 803450c:	af00      	add	r7, sp, #0
 803450e:	6078      	str	r0, [r7, #4]
 8034510:	6039      	str	r1, [r7, #0]
	SerialInitQueue();
 8034512:	f7ff ffeb 	bl	80344ec <SerialInitQueue>

	//===========================================================================
	//	Set Serial Handle
	phuart1 = _phuart1;
 8034516:	4a10      	ldr	r2, [pc, #64]	; (8034558 <SerialInit+0x50>)
 8034518:	687b      	ldr	r3, [r7, #4]
 803451a:	6013      	str	r3, [r2, #0]
	phuart2 = _phuart2;
 803451c:	4a0f      	ldr	r2, [pc, #60]	; (803455c <SerialInit+0x54>)
 803451e:	683b      	ldr	r3, [r7, #0]
 8034520:	6013      	str	r3, [r2, #0]

#if defined(_WIN32)
#else

	//	UART Console
	if ( phuart2 )
 8034522:	4b0e      	ldr	r3, [pc, #56]	; (803455c <SerialInit+0x54>)
 8034524:	681b      	ldr	r3, [r3, #0]
 8034526:	2b00      	cmp	r3, #0
 8034528:	d006      	beq.n	8034538 <SerialInit+0x30>
	{
		HAL_UART_Receive_IT( phuart2, dataDbgTx, 1 );
 803452a:	4b0c      	ldr	r3, [pc, #48]	; (803455c <SerialInit+0x54>)
 803452c:	681b      	ldr	r3, [r3, #0]
 803452e:	2201      	movs	r2, #1
 8034530:	490b      	ldr	r1, [pc, #44]	; (8034560 <SerialInit+0x58>)
 8034532:	4618      	mov	r0, r3
 8034534:	f7f4 fbab 	bl	8028c8e <HAL_UART_Receive_IT>
	}

	//	UART RS485
	if ( phuart1 )
 8034538:	4b07      	ldr	r3, [pc, #28]	; (8034558 <SerialInit+0x50>)
 803453a:	681b      	ldr	r3, [r3, #0]
 803453c:	2b00      	cmp	r3, #0
 803453e:	d006      	beq.n	803454e <SerialInit+0x46>
	{
		HAL_UART_Receive_IT( phuart1, dataTx1, 1 );
 8034540:	4b05      	ldr	r3, [pc, #20]	; (8034558 <SerialInit+0x50>)
 8034542:	681b      	ldr	r3, [r3, #0]
 8034544:	2201      	movs	r2, #1
 8034546:	4907      	ldr	r1, [pc, #28]	; (8034564 <SerialInit+0x5c>)
 8034548:	4618      	mov	r0, r3
 803454a:	f7f4 fba0 	bl	8028c8e <HAL_UART_Receive_IT>
	}

#endif
}
 803454e:	bf00      	nop
 8034550:	3708      	adds	r7, #8
 8034552:	46bd      	mov	sp, r7
 8034554:	bd80      	pop	{r7, pc}
 8034556:	bf00      	nop
 8034558:	20002b4c 	.word	0x20002b4c
 803455c:	20002b50 	.word	0x20002b50
 8034560:	20002b3c 	.word	0x20002b3c
 8034564:	20002b44 	.word	0x20002b44

08034568 <input_check>:

//===========================================================================
int input_check( void )
//===========================================================================
{
 8034568:	b580      	push	{r7, lr}
 803456a:	af00      	add	r7, sp, #0
	return qcount( &g_qDebug );
 803456c:	4802      	ldr	r0, [pc, #8]	; (8034578 <input_check+0x10>)
 803456e:	f7f9 fde3 	bl	802e138 <qcount>
 8034572:	4603      	mov	r3, r0
	uint8_t	c;

	xStatus = xQueuePeek(xDebugQueueRx, &c, 0);
	return xStatus;
	*/
}
 8034574:	4618      	mov	r0, r3
 8034576:	bd80      	pop	{r7, pc}
 8034578:	2000292c 	.word	0x2000292c

0803457c <_UTF8ToUnicode>:


//===========================================================================
static int _UTF8ToUnicode ( const char_t * UTF8, uint16_t  *uc )
//===========================================================================
{
 803457c:	b480      	push	{r7}
 803457e:	b085      	sub	sp, #20
 8034580:	af00      	add	r7, sp, #0
 8034582:	6078      	str	r0, [r7, #4]
 8034584:	6039      	str	r1, [r7, #0]
	int tRequiredSize = 0;
 8034586:	2300      	movs	r3, #0
 8034588:	60fb      	str	r3, [r7, #12]

	*uc = 0x0000;
 803458a:	683b      	ldr	r3, [r7, #0]
 803458c:	2200      	movs	r2, #0
 803458e:	801a      	strh	r2, [r3, #0]

	// ASCII byte 
	if ( 0 == ( UTF8[0] & 0x80 ) )
 8034590:	687b      	ldr	r3, [r7, #4]
 8034592:	781b      	ldrb	r3, [r3, #0]
 8034594:	b25b      	sxtb	r3, r3
 8034596:	2b00      	cmp	r3, #0
 8034598:	db07      	blt.n	80345aa <_UTF8ToUnicode+0x2e>
	{
		*uc = UTF8[0];
 803459a:	687b      	ldr	r3, [r7, #4]
 803459c:	781b      	ldrb	r3, [r3, #0]
 803459e:	b29a      	uxth	r2, r3
 80345a0:	683b      	ldr	r3, [r7, #0]
 80345a2:	801a      	strh	r2, [r3, #0]
		tRequiredSize = 1;
 80345a4:	2301      	movs	r3, #1
 80345a6:	60fb      	str	r3, [r7, #12]
 80345a8:	e069      	b.n	803467e <_UTF8ToUnicode+0x102>
	}
	// Start byte for 2byte
	else if ( 0xC0 == ( UTF8[0] & 0xE0 ) &&
 80345aa:	687b      	ldr	r3, [r7, #4]
 80345ac:	781b      	ldrb	r3, [r3, #0]
 80345ae:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80345b2:	2bc0      	cmp	r3, #192	; 0xc0
 80345b4:	d123      	bne.n	80345fe <_UTF8ToUnicode+0x82>
		0x80 == ( UTF8[1] & 0xC0 ) )
 80345b6:	687b      	ldr	r3, [r7, #4]
 80345b8:	3301      	adds	r3, #1
 80345ba:	781b      	ldrb	r3, [r3, #0]
 80345bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	else if ( 0xC0 == ( UTF8[0] & 0xE0 ) &&
 80345c0:	2b80      	cmp	r3, #128	; 0x80
 80345c2:	d11c      	bne.n	80345fe <_UTF8ToUnicode+0x82>
	{
		*uc += ( UTF8[0] & 0x1F ) << 6;
 80345c4:	683b      	ldr	r3, [r7, #0]
 80345c6:	881a      	ldrh	r2, [r3, #0]
 80345c8:	687b      	ldr	r3, [r7, #4]
 80345ca:	781b      	ldrb	r3, [r3, #0]
 80345cc:	019b      	lsls	r3, r3, #6
 80345ce:	b29b      	uxth	r3, r3
 80345d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80345d4:	b29b      	uxth	r3, r3
 80345d6:	4413      	add	r3, r2
 80345d8:	b29a      	uxth	r2, r3
 80345da:	683b      	ldr	r3, [r7, #0]
 80345dc:	801a      	strh	r2, [r3, #0]
		*uc += ( UTF8[1] & 0x3F ) << 0;
 80345de:	683b      	ldr	r3, [r7, #0]
 80345e0:	881a      	ldrh	r2, [r3, #0]
 80345e2:	687b      	ldr	r3, [r7, #4]
 80345e4:	3301      	adds	r3, #1
 80345e6:	781b      	ldrb	r3, [r3, #0]
 80345e8:	b29b      	uxth	r3, r3
 80345ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80345ee:	b29b      	uxth	r3, r3
 80345f0:	4413      	add	r3, r2
 80345f2:	b29a      	uxth	r2, r3
 80345f4:	683b      	ldr	r3, [r7, #0]
 80345f6:	801a      	strh	r2, [r3, #0]
		tRequiredSize = 2;
 80345f8:	2302      	movs	r3, #2
 80345fa:	60fb      	str	r3, [r7, #12]
 80345fc:	e03f      	b.n	803467e <_UTF8ToUnicode+0x102>
	}
	// Start byte for 3byte
	else if ( 0xE0 == ( UTF8[0] & 0xE0 ) &&
 80345fe:	687b      	ldr	r3, [r7, #4]
 8034600:	781b      	ldrb	r3, [r3, #0]
 8034602:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8034606:	2be0      	cmp	r3, #224	; 0xe0
 8034608:	d139      	bne.n	803467e <_UTF8ToUnicode+0x102>
		0x80 == ( UTF8[1] & 0xC0 ) &&
 803460a:	687b      	ldr	r3, [r7, #4]
 803460c:	3301      	adds	r3, #1
 803460e:	781b      	ldrb	r3, [r3, #0]
 8034610:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	else if ( 0xE0 == ( UTF8[0] & 0xE0 ) &&
 8034614:	2b80      	cmp	r3, #128	; 0x80
 8034616:	d132      	bne.n	803467e <_UTF8ToUnicode+0x102>
		0x80 == ( UTF8[2] & 0xC0 ) )
 8034618:	687b      	ldr	r3, [r7, #4]
 803461a:	3302      	adds	r3, #2
 803461c:	781b      	ldrb	r3, [r3, #0]
 803461e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		0x80 == ( UTF8[1] & 0xC0 ) &&
 8034622:	2b80      	cmp	r3, #128	; 0x80
 8034624:	d12b      	bne.n	803467e <_UTF8ToUnicode+0x102>
	{
		*uc += ( UTF8[0] & 0x1F ) << 12;
 8034626:	683b      	ldr	r3, [r7, #0]
 8034628:	881a      	ldrh	r2, [r3, #0]
 803462a:	687b      	ldr	r3, [r7, #4]
 803462c:	781b      	ldrb	r3, [r3, #0]
 803462e:	031b      	lsls	r3, r3, #12
 8034630:	b29b      	uxth	r3, r3
 8034632:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8034636:	f023 030f 	bic.w	r3, r3, #15
 803463a:	b29b      	uxth	r3, r3
 803463c:	4413      	add	r3, r2
 803463e:	b29a      	uxth	r2, r3
 8034640:	683b      	ldr	r3, [r7, #0]
 8034642:	801a      	strh	r2, [r3, #0]
		*uc += ( UTF8[1] & 0x3F ) << 6;
 8034644:	683b      	ldr	r3, [r7, #0]
 8034646:	881a      	ldrh	r2, [r3, #0]
 8034648:	687b      	ldr	r3, [r7, #4]
 803464a:	3301      	adds	r3, #1
 803464c:	781b      	ldrb	r3, [r3, #0]
 803464e:	019b      	lsls	r3, r3, #6
 8034650:	b29b      	uxth	r3, r3
 8034652:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8034656:	b29b      	uxth	r3, r3
 8034658:	4413      	add	r3, r2
 803465a:	b29a      	uxth	r2, r3
 803465c:	683b      	ldr	r3, [r7, #0]
 803465e:	801a      	strh	r2, [r3, #0]
		*uc += ( UTF8[2] & 0x3F ) << 0;
 8034660:	683b      	ldr	r3, [r7, #0]
 8034662:	881a      	ldrh	r2, [r3, #0]
 8034664:	687b      	ldr	r3, [r7, #4]
 8034666:	3302      	adds	r3, #2
 8034668:	781b      	ldrb	r3, [r3, #0]
 803466a:	b29b      	uxth	r3, r3
 803466c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034670:	b29b      	uxth	r3, r3
 8034672:	4413      	add	r3, r2
 8034674:	b29a      	uxth	r2, r3
 8034676:	683b      	ldr	r3, [r7, #0]
 8034678:	801a      	strh	r2, [r3, #0]
		tRequiredSize = 3;
 803467a:	2303      	movs	r3, #3
 803467c:	60fb      	str	r3, [r7, #12]
	{
		// Invalid case
		//assert(false);
	}

	return tRequiredSize;
 803467e:	68fb      	ldr	r3, [r7, #12]
}
 8034680:	4618      	mov	r0, r3
 8034682:	3714      	adds	r7, #20
 8034684:	46bd      	mov	sp, r7
 8034686:	f85d 7b04 	ldr.w	r7, [sp], #4
 803468a:	4770      	bx	lr

0803468c <UTF8ToUnicode>:
*/

//===========================================================================
int UTF8ToUnicode( const char_t * szUTF8, uint16_t* szUni )
//===========================================================================
{
 803468c:	b580      	push	{r7, lr}
 803468e:	b088      	sub	sp, #32
 8034690:	af00      	add	r7, sp, #0
 8034692:	6078      	str	r0, [r7, #4]
 8034694:	6039      	str	r1, [r7, #0]
	int tReadPos = 0;
 8034696:	2300      	movs	r3, #0
 8034698:	61fb      	str	r3, [r7, #28]
	int i = 0;
 803469a:	2300      	movs	r3, #0
 803469c:	61bb      	str	r3, [r7, #24]
	int tUTF8Len;

	tUTF8Len = strlen( szUTF8 );
 803469e:	6878      	ldr	r0, [r7, #4]
 80346a0:	f7eb fda0 	bl	80201e4 <strlen>
 80346a4:	4603      	mov	r3, r0
 80346a6:	617b      	str	r3, [r7, #20]

	for ( i = 0; tReadPos < tUTF8Len; i++ )
 80346a8:	2300      	movs	r3, #0
 80346aa:	61bb      	str	r3, [r7, #24]
 80346ac:	e02a      	b.n	8034704 <UTF8ToUnicode+0x78>
	{
		if ( szUTF8[i] == NULL )
 80346ae:	69bb      	ldr	r3, [r7, #24]
 80346b0:	687a      	ldr	r2, [r7, #4]
 80346b2:	4413      	add	r3, r2
 80346b4:	781b      	ldrb	r3, [r3, #0]
 80346b6:	2b00      	cmp	r3, #0
 80346b8:	d101      	bne.n	80346be <UTF8ToUnicode+0x32>
			return i;
 80346ba:	69bb      	ldr	r3, [r7, #24]
 80346bc:	e027      	b.n	803470e <UTF8ToUnicode+0x82>

		uint16_t tTempUnicodeChar = 0;
 80346be:	2300      	movs	r3, #0
 80346c0:	81fb      	strh	r3, [r7, #14]
		int tSize = _UTF8ToUnicode( szUTF8 + tReadPos, &tTempUnicodeChar );
 80346c2:	69fb      	ldr	r3, [r7, #28]
 80346c4:	687a      	ldr	r2, [r7, #4]
 80346c6:	4413      	add	r3, r2
 80346c8:	f107 020e 	add.w	r2, r7, #14
 80346cc:	4611      	mov	r1, r2
 80346ce:	4618      	mov	r0, r3
 80346d0:	f7ff ff54 	bl	803457c <_UTF8ToUnicode>
 80346d4:	6138      	str	r0, [r7, #16]
		if ( NULL != szUni )
 80346d6:	683b      	ldr	r3, [r7, #0]
 80346d8:	2b00      	cmp	r3, #0
 80346da:	d005      	beq.n	80346e8 <UTF8ToUnicode+0x5c>
			szUni[i] = tTempUnicodeChar;
 80346dc:	69bb      	ldr	r3, [r7, #24]
 80346de:	005b      	lsls	r3, r3, #1
 80346e0:	683a      	ldr	r2, [r7, #0]
 80346e2:	4413      	add	r3, r2
 80346e4:	89fa      	ldrh	r2, [r7, #14]
 80346e6:	801a      	strh	r2, [r3, #0]
		szUni[i + 1] = '\0';
 80346e8:	69bb      	ldr	r3, [r7, #24]
 80346ea:	3301      	adds	r3, #1
 80346ec:	005b      	lsls	r3, r3, #1
 80346ee:	683a      	ldr	r2, [r7, #0]
 80346f0:	4413      	add	r3, r2
 80346f2:	2200      	movs	r2, #0
 80346f4:	801a      	strh	r2, [r3, #0]
		tReadPos += tSize;
 80346f6:	69fa      	ldr	r2, [r7, #28]
 80346f8:	693b      	ldr	r3, [r7, #16]
 80346fa:	4413      	add	r3, r2
 80346fc:	61fb      	str	r3, [r7, #28]
	for ( i = 0; tReadPos < tUTF8Len; i++ )
 80346fe:	69bb      	ldr	r3, [r7, #24]
 8034700:	3301      	adds	r3, #1
 8034702:	61bb      	str	r3, [r7, #24]
 8034704:	69fa      	ldr	r2, [r7, #28]
 8034706:	697b      	ldr	r3, [r7, #20]
 8034708:	429a      	cmp	r2, r3
 803470a:	dbd0      	blt.n	80346ae <UTF8ToUnicode+0x22>
	}
	return i;
 803470c:	69bb      	ldr	r3, [r7, #24]
}
 803470e:	4618      	mov	r0, r3
 8034710:	3720      	adds	r7, #32
 8034712:	46bd      	mov	sp, r7
 8034714:	bd80      	pop	{r7, pc}
	...

08034718 <ksc5601_wctomb>:
  { 8221, 0x0000 }, { 8221, 0x0000 }, { 8221, 0x006f },
};

static int
ksc5601_wctomb (unsigned char *r, const uint16_t wc)
{
 8034718:	b480      	push	{r7}
 803471a:	b087      	sub	sp, #28
 803471c:	af00      	add	r7, sp, #0
 803471e:	6078      	str	r0, [r7, #4]
 8034720:	460b      	mov	r3, r1
 8034722:	807b      	strh	r3, [r7, #2]
    const Summary16 *summary = NULL;
 8034724:	2300      	movs	r3, #0
 8034726:	617b      	str	r3, [r7, #20]
    if (wc >= 0x0000 && wc < 0x0460)
 8034728:	887b      	ldrh	r3, [r7, #2]
 803472a:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 803472e:	d207      	bcs.n	8034740 <ksc5601_wctomb+0x28>
      summary = &ksc5601_uni2indx_page00[(wc>>4)];
 8034730:	887b      	ldrh	r3, [r7, #2]
 8034732:	091b      	lsrs	r3, r3, #4
 8034734:	b29b      	uxth	r3, r3
 8034736:	009b      	lsls	r3, r3, #2
 8034738:	4a75      	ldr	r2, [pc, #468]	; (8034910 <ksc5601_wctomb+0x1f8>)
 803473a:	4413      	add	r3, r2
 803473c:	617b      	str	r3, [r7, #20]
 803473e:	e070      	b.n	8034822 <ksc5601_wctomb+0x10a>
    else if (wc >= 0x2000 && wc < 0x2670)
 8034740:	887b      	ldrh	r3, [r7, #2]
 8034742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034746:	d30e      	bcc.n	8034766 <ksc5601_wctomb+0x4e>
 8034748:	887b      	ldrh	r3, [r7, #2]
 803474a:	f242 626f 	movw	r2, #9839	; 0x266f
 803474e:	4293      	cmp	r3, r2
 8034750:	d809      	bhi.n	8034766 <ksc5601_wctomb+0x4e>
      summary = &ksc5601_uni2indx_page20[(wc>>4)-0x200];
 8034752:	887b      	ldrh	r3, [r7, #2]
 8034754:	091b      	lsrs	r3, r3, #4
 8034756:	b29b      	uxth	r3, r3
 8034758:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 803475c:	009b      	lsls	r3, r3, #2
 803475e:	4a6d      	ldr	r2, [pc, #436]	; (8034914 <ksc5601_wctomb+0x1fc>)
 8034760:	4413      	add	r3, r2
 8034762:	617b      	str	r3, [r7, #20]
 8034764:	e05d      	b.n	8034822 <ksc5601_wctomb+0x10a>
    else if (wc >= 0x3000 && wc < 0x33e0)
 8034766:	887b      	ldrh	r3, [r7, #2]
 8034768:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 803476c:	d30e      	bcc.n	803478c <ksc5601_wctomb+0x74>
 803476e:	887b      	ldrh	r3, [r7, #2]
 8034770:	f243 32df 	movw	r2, #13279	; 0x33df
 8034774:	4293      	cmp	r3, r2
 8034776:	d809      	bhi.n	803478c <ksc5601_wctomb+0x74>
      summary = &ksc5601_uni2indx_page30[(wc>>4)-0x300];
 8034778:	887b      	ldrh	r3, [r7, #2]
 803477a:	091b      	lsrs	r3, r3, #4
 803477c:	b29b      	uxth	r3, r3
 803477e:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8034782:	009b      	lsls	r3, r3, #2
 8034784:	4a64      	ldr	r2, [pc, #400]	; (8034918 <ksc5601_wctomb+0x200>)
 8034786:	4413      	add	r3, r2
 8034788:	617b      	str	r3, [r7, #20]
 803478a:	e04a      	b.n	8034822 <ksc5601_wctomb+0x10a>
    else if (wc >= 0x4e00 && wc < 0x9fa0)
 803478c:	887b      	ldrh	r3, [r7, #2]
 803478e:	f5b3 4f9c 	cmp.w	r3, #19968	; 0x4e00
 8034792:	d30e      	bcc.n	80347b2 <ksc5601_wctomb+0x9a>
 8034794:	887b      	ldrh	r3, [r7, #2]
 8034796:	f649 729f 	movw	r2, #40863	; 0x9f9f
 803479a:	4293      	cmp	r3, r2
 803479c:	d809      	bhi.n	80347b2 <ksc5601_wctomb+0x9a>
      summary = &ksc5601_uni2indx_page4e[(wc>>4)-0x4e0];
 803479e:	887b      	ldrh	r3, [r7, #2]
 80347a0:	091b      	lsrs	r3, r3, #4
 80347a2:	b29b      	uxth	r3, r3
 80347a4:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80347a8:	009b      	lsls	r3, r3, #2
 80347aa:	4a5c      	ldr	r2, [pc, #368]	; (803491c <ksc5601_wctomb+0x204>)
 80347ac:	4413      	add	r3, r2
 80347ae:	617b      	str	r3, [r7, #20]
 80347b0:	e037      	b.n	8034822 <ksc5601_wctomb+0x10a>
    else if (wc >= 0xac00 && wc < 0xd7a0)
 80347b2:	887b      	ldrh	r3, [r7, #2]
 80347b4:	f5b3 4f2c 	cmp.w	r3, #44032	; 0xac00
 80347b8:	d30e      	bcc.n	80347d8 <ksc5601_wctomb+0xc0>
 80347ba:	887b      	ldrh	r3, [r7, #2]
 80347bc:	f24d 729f 	movw	r2, #55199	; 0xd79f
 80347c0:	4293      	cmp	r3, r2
 80347c2:	d809      	bhi.n	80347d8 <ksc5601_wctomb+0xc0>
      summary = &ksc5601_uni2indx_pageac[(wc>>4)-0xac0];
 80347c4:	887b      	ldrh	r3, [r7, #2]
 80347c6:	091b      	lsrs	r3, r3, #4
 80347c8:	b29b      	uxth	r3, r3
 80347ca:	f5a3 632c 	sub.w	r3, r3, #2752	; 0xac0
 80347ce:	009b      	lsls	r3, r3, #2
 80347d0:	4a53      	ldr	r2, [pc, #332]	; (8034920 <ksc5601_wctomb+0x208>)
 80347d2:	4413      	add	r3, r2
 80347d4:	617b      	str	r3, [r7, #20]
 80347d6:	e024      	b.n	8034822 <ksc5601_wctomb+0x10a>
    else if (wc >= 0xf900 && wc < 0xfa10)
 80347d8:	887b      	ldrh	r3, [r7, #2]
 80347da:	f5b3 4f79 	cmp.w	r3, #63744	; 0xf900
 80347de:	d30e      	bcc.n	80347fe <ksc5601_wctomb+0xe6>
 80347e0:	887b      	ldrh	r3, [r7, #2]
 80347e2:	f64f 220f 	movw	r2, #64015	; 0xfa0f
 80347e6:	4293      	cmp	r3, r2
 80347e8:	d809      	bhi.n	80347fe <ksc5601_wctomb+0xe6>
      summary = &ksc5601_uni2indx_pagef9[(wc>>4)-0xf90];
 80347ea:	887b      	ldrh	r3, [r7, #2]
 80347ec:	091b      	lsrs	r3, r3, #4
 80347ee:	b29b      	uxth	r3, r3
 80347f0:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80347f4:	009b      	lsls	r3, r3, #2
 80347f6:	4a4b      	ldr	r2, [pc, #300]	; (8034924 <ksc5601_wctomb+0x20c>)
 80347f8:	4413      	add	r3, r2
 80347fa:	617b      	str	r3, [r7, #20]
 80347fc:	e011      	b.n	8034822 <ksc5601_wctomb+0x10a>
    else if (wc >= 0xff00 && wc < 0xfff0)
 80347fe:	887b      	ldrh	r3, [r7, #2]
 8034800:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8034804:	d30d      	bcc.n	8034822 <ksc5601_wctomb+0x10a>
 8034806:	887b      	ldrh	r3, [r7, #2]
 8034808:	f64f 72ef 	movw	r2, #65519	; 0xffef
 803480c:	4293      	cmp	r3, r2
 803480e:	d808      	bhi.n	8034822 <ksc5601_wctomb+0x10a>
      summary = &ksc5601_uni2indx_pageff[(wc>>4)-0xff0];
 8034810:	887b      	ldrh	r3, [r7, #2]
 8034812:	091b      	lsrs	r3, r3, #4
 8034814:	b29b      	uxth	r3, r3
 8034816:	f5a3 637f 	sub.w	r3, r3, #4080	; 0xff0
 803481a:	009b      	lsls	r3, r3, #2
 803481c:	4a42      	ldr	r2, [pc, #264]	; (8034928 <ksc5601_wctomb+0x210>)
 803481e:	4413      	add	r3, r2
 8034820:	617b      	str	r3, [r7, #20]

    if (summary)
 8034822:	697b      	ldr	r3, [r7, #20]
 8034824:	2b00      	cmp	r3, #0
 8034826:	d06a      	beq.n	80348fe <ksc5601_wctomb+0x1e6>
	{
      unsigned short used = summary->used;
 8034828:	697b      	ldr	r3, [r7, #20]
 803482a:	885b      	ldrh	r3, [r3, #2]
 803482c:	827b      	strh	r3, [r7, #18]
      unsigned int i = wc & 0x0f;
 803482e:	887b      	ldrh	r3, [r7, #2]
 8034830:	f003 030f 	and.w	r3, r3, #15
 8034834:	60fb      	str	r3, [r7, #12]
      if (used & ((unsigned short) 1 << i)) {
 8034836:	8a7a      	ldrh	r2, [r7, #18]
 8034838:	68fb      	ldr	r3, [r7, #12]
 803483a:	fa42 f303 	asr.w	r3, r2, r3
 803483e:	f003 0301 	and.w	r3, r3, #1
 8034842:	2b00      	cmp	r3, #0
 8034844:	d05b      	beq.n	80348fe <ksc5601_wctomb+0x1e6>
        unsigned short c;
        /* Keep in 'used' only the bits 0..i-1. */
        used &= ((unsigned short) 1 << i) - 1;
 8034846:	2201      	movs	r2, #1
 8034848:	68fb      	ldr	r3, [r7, #12]
 803484a:	fa02 f303 	lsl.w	r3, r2, r3
 803484e:	b29b      	uxth	r3, r3
 8034850:	3b01      	subs	r3, #1
 8034852:	b29b      	uxth	r3, r3
 8034854:	b21a      	sxth	r2, r3
 8034856:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803485a:	4013      	ands	r3, r2
 803485c:	b21b      	sxth	r3, r3
 803485e:	827b      	strh	r3, [r7, #18]
        /* Add 'summary->indx' and the number of bits set in 'used'. */
        used = (used & 0x5555) + ((used & 0xaaaa) >> 1);
 8034860:	8a7b      	ldrh	r3, [r7, #18]
 8034862:	f423 532a 	bic.w	r3, r3, #10880	; 0x2a80
 8034866:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 803486a:	045b      	lsls	r3, r3, #17
 803486c:	0c5b      	lsrs	r3, r3, #17
 803486e:	b29a      	uxth	r2, r3
 8034870:	8a7b      	ldrh	r3, [r7, #18]
 8034872:	105b      	asrs	r3, r3, #1
 8034874:	b299      	uxth	r1, r3
 8034876:	f245 5355 	movw	r3, #21845	; 0x5555
 803487a:	400b      	ands	r3, r1
 803487c:	b29b      	uxth	r3, r3
 803487e:	4413      	add	r3, r2
 8034880:	827b      	strh	r3, [r7, #18]
        used = (used & 0x3333) + ((used & 0xcccc) >> 2);
 8034882:	8a7b      	ldrh	r3, [r7, #18]
 8034884:	f423 634c 	bic.w	r3, r3, #3264	; 0xcc0
 8034888:	f023 030c 	bic.w	r3, r3, #12
 803488c:	049b      	lsls	r3, r3, #18
 803488e:	0c9b      	lsrs	r3, r3, #18
 8034890:	b29a      	uxth	r2, r3
 8034892:	8a7b      	ldrh	r3, [r7, #18]
 8034894:	109b      	asrs	r3, r3, #2
 8034896:	b299      	uxth	r1, r3
 8034898:	f243 3333 	movw	r3, #13107	; 0x3333
 803489c:	400b      	ands	r3, r1
 803489e:	b29b      	uxth	r3, r3
 80348a0:	4413      	add	r3, r2
 80348a2:	827b      	strh	r3, [r7, #18]
        used = (used & 0x0f0f) + ((used & 0xf0f0) >> 4);
 80348a4:	8a7b      	ldrh	r3, [r7, #18]
 80348a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80348aa:	051b      	lsls	r3, r3, #20
 80348ac:	0d1b      	lsrs	r3, r3, #20
 80348ae:	b29a      	uxth	r2, r3
 80348b0:	8a7b      	ldrh	r3, [r7, #18]
 80348b2:	111b      	asrs	r3, r3, #4
 80348b4:	b299      	uxth	r1, r3
 80348b6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80348ba:	400b      	ands	r3, r1
 80348bc:	b29b      	uxth	r3, r3
 80348be:	4413      	add	r3, r2
 80348c0:	827b      	strh	r3, [r7, #18]
        used = (used & 0x00ff) + (used >> 8);
 80348c2:	8a7b      	ldrh	r3, [r7, #18]
 80348c4:	b2db      	uxtb	r3, r3
 80348c6:	b29a      	uxth	r2, r3
 80348c8:	8a7b      	ldrh	r3, [r7, #18]
 80348ca:	0a1b      	lsrs	r3, r3, #8
 80348cc:	b29b      	uxth	r3, r3
 80348ce:	4413      	add	r3, r2
 80348d0:	827b      	strh	r3, [r7, #18]
        c = ksc5601_2charset[summary->indx + used];
 80348d2:	697b      	ldr	r3, [r7, #20]
 80348d4:	881b      	ldrh	r3, [r3, #0]
 80348d6:	461a      	mov	r2, r3
 80348d8:	8a7b      	ldrh	r3, [r7, #18]
 80348da:	4413      	add	r3, r2
 80348dc:	4a13      	ldr	r2, [pc, #76]	; (803492c <ksc5601_wctomb+0x214>)
 80348de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80348e2:	817b      	strh	r3, [r7, #10]
        r[0] = (c >> 8); r[1] = (c & 0xff);
 80348e4:	897b      	ldrh	r3, [r7, #10]
 80348e6:	0a1b      	lsrs	r3, r3, #8
 80348e8:	b29b      	uxth	r3, r3
 80348ea:	b2da      	uxtb	r2, r3
 80348ec:	687b      	ldr	r3, [r7, #4]
 80348ee:	701a      	strb	r2, [r3, #0]
 80348f0:	687b      	ldr	r3, [r7, #4]
 80348f2:	3301      	adds	r3, #1
 80348f4:	897a      	ldrh	r2, [r7, #10]
 80348f6:	b2d2      	uxtb	r2, r2
 80348f8:	701a      	strb	r2, [r3, #0]
        return 2;
 80348fa:	2302      	movs	r3, #2
 80348fc:	e001      	b.n	8034902 <ksc5601_wctomb+0x1ea>
      }
    }
    return RET_ILUNI;
 80348fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8034902:	4618      	mov	r0, r3
 8034904:	371c      	adds	r7, #28
 8034906:	46bd      	mov	sp, r7
 8034908:	f85d 7b04 	ldr.w	r7, [sp], #4
 803490c:	4770      	bx	lr
 803490e:	bf00      	nop
 8034910:	08045800 	.word	0x08045800
 8034914:	08045918 	.word	0x08045918
 8034918:	08045ab4 	.word	0x08045ab4
 803491c:	08045bac 	.word	0x08045bac
 8034920:	08047014 	.word	0x08047014
 8034924:	08047afc 	.word	0x08047afc
 8034928:	08047b40 	.word	0x08047b40
 803492c:	080417b8 	.word	0x080417b8

08034930 <cp949_wctomb>:
}

//===========================================================================
static int cp949_wctomb ( const uint16_t wc, char_t *r )
//===========================================================================
{
 8034930:	b580      	push	{r7, lr}
 8034932:	b084      	sub	sp, #16
 8034934:	af00      	add	r7, sp, #0
 8034936:	4603      	mov	r3, r0
 8034938:	6039      	str	r1, [r7, #0]
 803493a:	80fb      	strh	r3, [r7, #6]
	unsigned char buf[2];
	int ret;

	/* Code set 0 (ASCII) */

	if ( wc < 0x80 )
 803493c:	88fb      	ldrh	r3, [r7, #6]
 803493e:	2b7f      	cmp	r3, #127	; 0x7f
 8034940:	d809      	bhi.n	8034956 <cp949_wctomb+0x26>
	{
		*r = ( wc & 0xFF );
 8034942:	88fb      	ldrh	r3, [r7, #6]
 8034944:	b2da      	uxtb	r2, r3
 8034946:	683b      	ldr	r3, [r7, #0]
 8034948:	701a      	strb	r2, [r3, #0]
		r[1] = '\0';
 803494a:	683b      	ldr	r3, [r7, #0]
 803494c:	3301      	adds	r3, #1
 803494e:	2200      	movs	r2, #0
 8034950:	701a      	strb	r2, [r3, #0]

		return 1;
 8034952:	2301      	movs	r3, #1
 8034954:	e049      	b.n	80349ea <cp949_wctomb+0xba>
//	ret = ascii_wctomb( conv, r, wc, n );
//	if ( ret != RET_ILUNI )
//		return ret;

	/* Code set 1 (KS C 5601-1992, now KS X 1001:1998) */
	if ( wc != 0x327e )
 8034956:	88fb      	ldrh	r3, [r7, #6]
 8034958:	f243 227e 	movw	r2, #12926	; 0x327e
 803495c:	4293      	cmp	r3, r2
 803495e:	d01d      	beq.n	803499c <cp949_wctomb+0x6c>
	{
		ret = ksc5601_wctomb( buf, wc );
 8034960:	88fa      	ldrh	r2, [r7, #6]
 8034962:	f107 0308 	add.w	r3, r7, #8
 8034966:	4611      	mov	r1, r2
 8034968:	4618      	mov	r0, r3
 803496a:	f7ff fed5 	bl	8034718 <ksc5601_wctomb>
 803496e:	60f8      	str	r0, [r7, #12]
		if ( ret != RET_ILUNI )
 8034970:	68fb      	ldr	r3, [r7, #12]
 8034972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8034976:	d011      	beq.n	803499c <cp949_wctomb+0x6c>
		{
			if ( ret != 2 ) abort();
 8034978:	68fb      	ldr	r3, [r7, #12]
 803497a:	2b02      	cmp	r3, #2
 803497c:	d001      	beq.n	8034982 <cp949_wctomb+0x52>
 803497e:	f002 fb19 	bl	8036fb4 <abort>
//			if ( n < 2 )
//				return RET_TOOSMALL;
			r[0] = buf[0] + 0x80;
 8034982:	7a3b      	ldrb	r3, [r7, #8]
 8034984:	3b80      	subs	r3, #128	; 0x80
 8034986:	b2da      	uxtb	r2, r3
 8034988:	683b      	ldr	r3, [r7, #0]
 803498a:	701a      	strb	r2, [r3, #0]
			r[1] = buf[1] + 0x80;
 803498c:	7a7a      	ldrb	r2, [r7, #9]
 803498e:	683b      	ldr	r3, [r7, #0]
 8034990:	3301      	adds	r3, #1
 8034992:	3a80      	subs	r2, #128	; 0x80
 8034994:	b2d2      	uxtb	r2, r2
 8034996:	701a      	strb	r2, [r3, #0]
			return 2;
 8034998:	2302      	movs	r3, #2
 803499a:	e026      	b.n	80349ea <cp949_wctomb+0xba>
//		else
//			return uhc_2_wctomb( conv, r, wc, n );
//	}

	/* User-defined characters */
	if ( wc >= 0xe000 && wc < 0xe0bc )
 803499c:	88fb      	ldrh	r3, [r7, #6]
 803499e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80349a2:	d320      	bcc.n	80349e6 <cp949_wctomb+0xb6>
 80349a4:	88fb      	ldrh	r3, [r7, #6]
 80349a6:	f24e 02bb 	movw	r2, #57531	; 0xe0bb
 80349aa:	4293      	cmp	r3, r2
 80349ac:	d81b      	bhi.n	80349e6 <cp949_wctomb+0xb6>
	{
//		if ( n < 2 )
//			return RET_TOOSMALL;
		if ( wc < 0xe05e )
 80349ae:	88fb      	ldrh	r3, [r7, #6]
 80349b0:	f24e 025d 	movw	r2, #57437	; 0xe05d
 80349b4:	4293      	cmp	r3, r2
 80349b6:	d80a      	bhi.n	80349ce <cp949_wctomb+0x9e>
		{
			r[0] = 0xc9;
 80349b8:	683b      	ldr	r3, [r7, #0]
 80349ba:	22c9      	movs	r2, #201	; 0xc9
 80349bc:	701a      	strb	r2, [r3, #0]
			r[1] = wc - 0xe000 + 0xa1;
 80349be:	88fb      	ldrh	r3, [r7, #6]
 80349c0:	b2da      	uxtb	r2, r3
 80349c2:	683b      	ldr	r3, [r7, #0]
 80349c4:	3301      	adds	r3, #1
 80349c6:	3a5f      	subs	r2, #95	; 0x5f
 80349c8:	b2d2      	uxtb	r2, r2
 80349ca:	701a      	strb	r2, [r3, #0]
 80349cc:	e009      	b.n	80349e2 <cp949_wctomb+0xb2>
		}
		else
		{
			r[0] = 0xfe;
 80349ce:	683b      	ldr	r3, [r7, #0]
 80349d0:	22fe      	movs	r2, #254	; 0xfe
 80349d2:	701a      	strb	r2, [r3, #0]
			r[1] = wc - 0xe05e + 0xa1;
 80349d4:	88fb      	ldrh	r3, [r7, #6]
 80349d6:	b2da      	uxtb	r2, r3
 80349d8:	683b      	ldr	r3, [r7, #0]
 80349da:	3301      	adds	r3, #1
 80349dc:	3243      	adds	r2, #67	; 0x43
 80349de:	b2d2      	uxtb	r2, r2
 80349e0:	701a      	strb	r2, [r3, #0]
		}
		return 2;
 80349e2:	2302      	movs	r3, #2
 80349e4:	e001      	b.n	80349ea <cp949_wctomb+0xba>
	}

	return RET_ILUNI;
 80349e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80349ea:	4618      	mov	r0, r3
 80349ec:	3710      	adds	r7, #16
 80349ee:	46bd      	mov	sp, r7
 80349f0:	bd80      	pop	{r7, pc}

080349f2 <UnicodeToCP949>:


//===========================================================================
int UnicodeToCP949( const uint16_t * szUni, char_t * CP949 )
//===========================================================================
{
 80349f2:	b580      	push	{r7, lr}
 80349f4:	b086      	sub	sp, #24
 80349f6:	af00      	add	r7, sp, #0
 80349f8:	6078      	str	r0, [r7, #4]
 80349fa:	6039      	str	r1, [r7, #0]
	int tReadPos = 0;
 80349fc:	2300      	movs	r3, #0
 80349fe:	617b      	str	r3, [r7, #20]
	int i = 0;
 8034a00:	2300      	movs	r3, #0
 8034a02:	613b      	str	r3, [r7, #16]

	for ( i = 0; szUni[i] != NULL; i++ )
 8034a04:	2300      	movs	r3, #0
 8034a06:	613b      	str	r3, [r7, #16]
 8034a08:	e014      	b.n	8034a34 <UnicodeToCP949+0x42>
	{
		uint16_t tTempUnicodeChar = 0;
 8034a0a:	2300      	movs	r3, #0
 8034a0c:	81fb      	strh	r3, [r7, #14]
		int tSize = cp949_wctomb( szUni[i], CP949 + tReadPos );
 8034a0e:	693b      	ldr	r3, [r7, #16]
 8034a10:	005b      	lsls	r3, r3, #1
 8034a12:	687a      	ldr	r2, [r7, #4]
 8034a14:	4413      	add	r3, r2
 8034a16:	8818      	ldrh	r0, [r3, #0]
 8034a18:	697b      	ldr	r3, [r7, #20]
 8034a1a:	683a      	ldr	r2, [r7, #0]
 8034a1c:	4413      	add	r3, r2
 8034a1e:	4619      	mov	r1, r3
 8034a20:	f7ff ff86 	bl	8034930 <cp949_wctomb>
 8034a24:	60b8      	str	r0, [r7, #8]

		tReadPos += tSize;
 8034a26:	697a      	ldr	r2, [r7, #20]
 8034a28:	68bb      	ldr	r3, [r7, #8]
 8034a2a:	4413      	add	r3, r2
 8034a2c:	617b      	str	r3, [r7, #20]
	for ( i = 0; szUni[i] != NULL; i++ )
 8034a2e:	693b      	ldr	r3, [r7, #16]
 8034a30:	3301      	adds	r3, #1
 8034a32:	613b      	str	r3, [r7, #16]
 8034a34:	693b      	ldr	r3, [r7, #16]
 8034a36:	005b      	lsls	r3, r3, #1
 8034a38:	687a      	ldr	r2, [r7, #4]
 8034a3a:	4413      	add	r3, r2
 8034a3c:	881b      	ldrh	r3, [r3, #0]
 8034a3e:	2b00      	cmp	r3, #0
 8034a40:	d1e3      	bne.n	8034a0a <UnicodeToCP949+0x18>
	}

	return 0;
 8034a42:	2300      	movs	r3, #0
}
 8034a44:	4618      	mov	r0, r3
 8034a46:	3718      	adds	r7, #24
 8034a48:	46bd      	mov	sp, r7
 8034a4a:	bd80      	pop	{r7, pc}

08034a4c <UTF8ToCP949>:
}

//===========================================================================
int UTF8ToCP949 		( const char_t *szUTF8, char_t *szCP949 )
//===========================================================================
{
 8034a4c:	b580      	push	{r7, lr}
 8034a4e:	b0a2      	sub	sp, #136	; 0x88
 8034a50:	af00      	add	r7, sp, #0
 8034a52:	6078      	str	r0, [r7, #4]
 8034a54:	6039      	str	r1, [r7, #0]
	uint16_t	szBuf[64];
	memset( szBuf, 0, sizeof( szBuf ) );
 8034a56:	f107 0308 	add.w	r3, r7, #8
 8034a5a:	2280      	movs	r2, #128	; 0x80
 8034a5c:	2100      	movs	r1, #0
 8034a5e:	4618      	mov	r0, r3
 8034a60:	f002 ff80 	bl	8037964 <memset>

	UTF8ToUnicode( szUTF8, szBuf );
 8034a64:	f107 0308 	add.w	r3, r7, #8
 8034a68:	4619      	mov	r1, r3
 8034a6a:	6878      	ldr	r0, [r7, #4]
 8034a6c:	f7ff fe0e 	bl	803468c <UTF8ToUnicode>

	return UnicodeToCP949( szBuf, szCP949 );
 8034a70:	f107 0308 	add.w	r3, r7, #8
 8034a74:	6839      	ldr	r1, [r7, #0]
 8034a76:	4618      	mov	r0, r3
 8034a78:	f7ff ffbb 	bl	80349f2 <UnicodeToCP949>
 8034a7c:	4603      	mov	r3, r0
}
 8034a7e:	4618      	mov	r0, r3
 8034a80:	3788      	adds	r7, #136	; 0x88
 8034a82:	46bd      	mov	sp, r7
 8034a84:	bd80      	pop	{r7, pc}
	...

08034a88 <SetUpgrReTry>:
// Function

//========================================================================
void SetUpgrReTry( int _bUpgrRetry )
//========================================================================
{
 8034a88:	b480      	push	{r7}
 8034a8a:	b083      	sub	sp, #12
 8034a8c:	af00      	add	r7, sp, #0
 8034a8e:	6078      	str	r0, [r7, #4]
	s_bUpgrRetry = _bUpgrRetry;
 8034a90:	4a04      	ldr	r2, [pc, #16]	; (8034aa4 <SetUpgrReTry+0x1c>)
 8034a92:	687b      	ldr	r3, [r7, #4]
 8034a94:	6013      	str	r3, [r2, #0]
}
 8034a96:	bf00      	nop
 8034a98:	370c      	adds	r7, #12
 8034a9a:	46bd      	mov	sp, r7
 8034a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034aa0:	4770      	bx	lr
 8034aa2:	bf00      	nop
 8034aa4:	20002b54 	.word	0x20002b54

08034aa8 <GetUpgrReTry>:

//========================================================================
int GetUpgrReTry( void )
//========================================================================
{
 8034aa8:	b480      	push	{r7}
 8034aaa:	af00      	add	r7, sp, #0
	return s_bUpgrRetry;
 8034aac:	4b03      	ldr	r3, [pc, #12]	; (8034abc <GetUpgrReTry+0x14>)
 8034aae:	681b      	ldr	r3, [r3, #0]
}
 8034ab0:	4618      	mov	r0, r3
 8034ab2:	46bd      	mov	sp, r7
 8034ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ab8:	4770      	bx	lr
 8034aba:	bf00      	nop
 8034abc:	20002b54 	.word	0x20002b54

08034ac0 <UpgrSendImage>:


//========================================================================
int UpgrSendImage		( uint32_t nAddrBase, uint32_t nSizeImage )
//========================================================================
{
 8034ac0:	b580      	push	{r7, lr}
 8034ac2:	b0ba      	sub	sp, #232	; 0xe8
 8034ac4:	af02      	add	r7, sp, #8
 8034ac6:	6078      	str	r0, [r7, #4]
 8034ac8:	6039      	str	r1, [r7, #0]
	//	송신기 Upgrade 명령.
	printf( "%s(%d) - baseAddr(0x%08X) / size(%d)\n", __func__, __LINE__, nAddrBase, nSizeImage );
 8034aca:	683b      	ldr	r3, [r7, #0]
 8034acc:	9300      	str	r3, [sp, #0]
 8034ace:	687b      	ldr	r3, [r7, #4]
 8034ad0:	2237      	movs	r2, #55	; 0x37
 8034ad2:	4962      	ldr	r1, [pc, #392]	; (8034c5c <UpgrSendImage+0x19c>)
 8034ad4:	4862      	ldr	r0, [pc, #392]	; (8034c60 <UpgrSendImage+0x1a0>)
 8034ad6:	f002 fce3 	bl	80374a0 <iprintf>
	//========================================================================
	//	0x0800 0000 ~ 0x0807 FFFF	:	Bootloader + Application
	//========================================================================
	//	0x0808 0000 ~ 0x080F FFFF	:	Upgrade Image
	//========================================================================
	nAddrTarget		=	nAddrBase + 0x80000;// + SIZE_FLASH_BOOTAPP;
 8034ada:	687b      	ldr	r3, [r7, #4]
 8034adc:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8034ae0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	int i, j;
//	int nTotPkt = ( ( nSizeImage + 49 ) / 50 );
	int nTotPkt = ( ( nSizeImage + (PktUpgrDataSize - 1) ) / PktUpgrDataSize );
 8034ae4:	683b      	ldr	r3, [r7, #0]
 8034ae6:	332f      	adds	r3, #47	; 0x2f
 8034ae8:	4a5e      	ldr	r2, [pc, #376]	; (8034c64 <UpgrSendImage+0x1a4>)
 8034aea:	fba2 2303 	umull	r2, r3, r2, r3
 8034aee:	095b      	lsrs	r3, r3, #5
 8034af0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	char	sLCD[100];

	LCDEnableDebug( 0 );	//	LCD - console printf Off
 8034af4:	2000      	movs	r0, #0
 8034af6:	f7f7 ff27 	bl	802c948 <LCDEnableDebug>

	for ( i = 0; i < nTotPkt; i++ )
 8034afa:	2300      	movs	r3, #0
 8034afc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8034b00:	e08d      	b.n	8034c1e <UpgrSendImage+0x15e>
	{
		//	Flash Data 전송.
//		memcpy( sBuf, (__IO uint8_t*)(nAddrBase + (i * 50)), 50 );
//		SendUpgrData( nAddrTarget, nTotPkt, i, sBuf, 50 );
		memcpy( sBuf, (__IO uint8_t*)(nAddrBase + (i * PktUpgrDataSize)), PktUpgrDataSize );
 8034b02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034b06:	4613      	mov	r3, r2
 8034b08:	005b      	lsls	r3, r3, #1
 8034b0a:	4413      	add	r3, r2
 8034b0c:	011b      	lsls	r3, r3, #4
 8034b0e:	461a      	mov	r2, r3
 8034b10:	687b      	ldr	r3, [r7, #4]
 8034b12:	4413      	add	r3, r2
 8034b14:	4619      	mov	r1, r3
 8034b16:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8034b1a:	2230      	movs	r2, #48	; 0x30
 8034b1c:	4618      	mov	r0, r3
 8034b1e:	f003 f82f 	bl	8037b80 <memcpy>
		SendUpgrData( nAddrTarget, nTotPkt, i, sBuf, PktUpgrDataSize );
 8034b22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8034b26:	2230      	movs	r2, #48	; 0x30
 8034b28:	9200      	str	r2, [sp, #0]
 8034b2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034b2e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8034b32:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8034b36:	f7fa f84b 	bl	802ebd0 <SendUpgrData>

		//========================================================================
		if ( i == 0 && GetUpgrReTry() == 0 )
 8034b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8034b3e:	2b00      	cmp	r3, #0
 8034b40:	d131      	bne.n	8034ba6 <UpgrSendImage+0xe6>
 8034b42:	f7ff ffb1 	bl	8034aa8 <GetUpgrReTry>
 8034b46:	4603      	mov	r3, r0
 8034b48:	2b00      	cmp	r3, #0
 8034b4a:	d12c      	bne.n	8034ba6 <UpgrSendImage+0xe6>
		{
			//	첫번째 패킷 전송후  Flash Erase Delay : 3 sec
			__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8034b4c:	4b46      	ldr	r3, [pc, #280]	; (8034c68 <UpgrSendImage+0x1a8>)
 8034b4e:	681b      	ldr	r3, [r3, #0]
 8034b50:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8034b54:	601a      	str	r2, [r3, #0]
			sprintf( sLCD, "Upgr:FL Erase", i, nTotPkt );
 8034b56:	f107 0008 	add.w	r0, r7, #8
 8034b5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8034b5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034b62:	4942      	ldr	r1, [pc, #264]	; (8034c6c <UpgrSendImage+0x1ac>)
 8034b64:	f002 fdc8 	bl	80376f8 <siprintf>
			LCDSetCursor( 1, 13 );
 8034b68:	210d      	movs	r1, #13
 8034b6a:	2001      	movs	r0, #1
 8034b6c:	f7f7 fed2 	bl	802c914 <LCDSetCursor>
			LCDPrintf( sLCD );
 8034b70:	f107 0308 	add.w	r3, r7, #8
 8034b74:	4618      	mov	r0, r3
 8034b76:	f7f7 fefd 	bl	802c974 <LCDPrintf>
//			HAL_Delay( 3000 );		//	sleep 3 sec
			for( j = 0; j < 7; j++ )	//	sleep 7 sec
 8034b7a:	2300      	movs	r3, #0
 8034b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8034b80:	e00d      	b.n	8034b9e <UpgrSendImage+0xde>
			{
				HAL_Delay( 1000 );
 8034b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8034b86:	f7ec fffb 	bl	8021b80 <HAL_Delay>
				__HAL_IWDG_RELOAD_COUNTER(&hiwdg);	//	Watchdog Re-Flash
 8034b8a:	4b37      	ldr	r3, [pc, #220]	; (8034c68 <UpgrSendImage+0x1a8>)
 8034b8c:	681b      	ldr	r3, [r3, #0]
 8034b8e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8034b92:	601a      	str	r2, [r3, #0]
			for( j = 0; j < 7; j++ )	//	sleep 7 sec
 8034b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8034b98:	3301      	adds	r3, #1
 8034b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8034b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8034ba2:	2b06      	cmp	r3, #6
 8034ba4:	dded      	ble.n	8034b82 <UpgrSendImage+0xc2>
		//========================================================================

		//	수신기 Message 표시.
		//	159,596 Byte = 3191 Pkt * 50 Byte
		//	Upgr:[   1 / 3191 ]
		if ( ( i % 10 ) == 0 )
 8034ba6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8034baa:	4b31      	ldr	r3, [pc, #196]	; (8034c70 <UpgrSendImage+0x1b0>)
 8034bac:	fb83 2301 	smull	r2, r3, r3, r1
 8034bb0:	109a      	asrs	r2, r3, #2
 8034bb2:	17cb      	asrs	r3, r1, #31
 8034bb4:	1ad2      	subs	r2, r2, r3
 8034bb6:	4613      	mov	r3, r2
 8034bb8:	009b      	lsls	r3, r3, #2
 8034bba:	4413      	add	r3, r2
 8034bbc:	005b      	lsls	r3, r3, #1
 8034bbe:	1aca      	subs	r2, r1, r3
 8034bc0:	2a00      	cmp	r2, #0
 8034bc2:	d111      	bne.n	8034be8 <UpgrSendImage+0x128>
		{
			sprintf( sLCD, "Upgr:[%4d/%4d]", i, nTotPkt );
 8034bc4:	f107 0008 	add.w	r0, r7, #8
 8034bc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8034bcc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034bd0:	4928      	ldr	r1, [pc, #160]	; (8034c74 <UpgrSendImage+0x1b4>)
 8034bd2:	f002 fd91 	bl	80376f8 <siprintf>
			LCDSetCursor( 1, 13 );
 8034bd6:	210d      	movs	r1, #13
 8034bd8:	2001      	movs	r0, #1
 8034bda:	f7f7 fe9b 	bl	802c914 <LCDSetCursor>
			LCDPrintf( sLCD );
 8034bde:	f107 0308 	add.w	r3, r7, #8
 8034be2:	4618      	mov	r0, r3
 8034be4:	f7f7 fec6 	bl	802c974 <LCDPrintf>
		}

//		HAL_Delay( 4 );	//	4 msec Delay
//		HAL_Delay( 3 );	//	2 msec Delay
		HAL_Delay( 2 );	//	2 msec Delay
 8034be8:	2002      	movs	r0, #2
 8034bea:	f7ec ffc9 	bl	8021b80 <HAL_Delay>

		//========================================================================
		//	Watchdog Reload
		if ( ( i % 50 ) == 0 )
 8034bee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034bf2:	4b21      	ldr	r3, [pc, #132]	; (8034c78 <UpgrSendImage+0x1b8>)
 8034bf4:	fb83 1302 	smull	r1, r3, r3, r2
 8034bf8:	1119      	asrs	r1, r3, #4
 8034bfa:	17d3      	asrs	r3, r2, #31
 8034bfc:	1acb      	subs	r3, r1, r3
 8034bfe:	2132      	movs	r1, #50	; 0x32
 8034c00:	fb01 f303 	mul.w	r3, r1, r3
 8034c04:	1ad3      	subs	r3, r2, r3
 8034c06:	2b00      	cmp	r3, #0
 8034c08:	d104      	bne.n	8034c14 <UpgrSendImage+0x154>
		{
			__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8034c0a:	4b17      	ldr	r3, [pc, #92]	; (8034c68 <UpgrSendImage+0x1a8>)
 8034c0c:	681b      	ldr	r3, [r3, #0]
 8034c0e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8034c12:	601a      	str	r2, [r3, #0]
	for ( i = 0; i < nTotPkt; i++ )
 8034c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8034c18:	3301      	adds	r3, #1
 8034c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8034c1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034c22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8034c26:	429a      	cmp	r2, r3
 8034c28:	f6ff af6b 	blt.w	8034b02 <UpgrSendImage+0x42>
		}
		//========================================================================
	}

	sprintf( sLCD, "Upgr:[%4d/%4d]", i, nTotPkt );
 8034c2c:	f107 0008 	add.w	r0, r7, #8
 8034c30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8034c34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034c38:	490e      	ldr	r1, [pc, #56]	; (8034c74 <UpgrSendImage+0x1b4>)
 8034c3a:	f002 fd5d 	bl	80376f8 <siprintf>
	LCDSetCursor( 1, 13 );
 8034c3e:	210d      	movs	r1, #13
 8034c40:	2001      	movs	r0, #1
 8034c42:	f7f7 fe67 	bl	802c914 <LCDSetCursor>
	LCDPrintf( sLCD );
 8034c46:	f107 0308 	add.w	r3, r7, #8
 8034c4a:	4618      	mov	r0, r3
 8034c4c:	f7f7 fe92 	bl	802c974 <LCDPrintf>
}
 8034c50:	bf00      	nop
 8034c52:	4618      	mov	r0, r3
 8034c54:	37e0      	adds	r7, #224	; 0xe0
 8034c56:	46bd      	mov	sp, r7
 8034c58:	bd80      	pop	{r7, pc}
 8034c5a:	bf00      	nop
 8034c5c:	08047b7c 	.word	0x08047b7c
 8034c60:	0803b5b8 	.word	0x0803b5b8
 8034c64:	aaaaaaab 	.word	0xaaaaaaab
 8034c68:	20000fdc 	.word	0x20000fdc
 8034c6c:	0803b5e0 	.word	0x0803b5e0
 8034c70:	66666667 	.word	0x66666667
 8034c74:	0803b5f0 	.word	0x0803b5f0
 8034c78:	51eb851f 	.word	0x51eb851f

08034c7c <UpgrSendImageApp>:
}

//========================================================================
int UpgrSendImageApp	( void )
//========================================================================
{
 8034c7c:	b580      	push	{r7, lr}
 8034c7e:	af00      	add	r7, sp, #0
	//	송신기 Upgrade 명령. - Application
	UpgrSendImage( ADDR_FLASH_APP, FLASH_If_GetAppSize() );
 8034c80:	f7fc fca8 	bl	80315d4 <FLASH_If_GetAppSize>
 8034c84:	4603      	mov	r3, r0
 8034c86:	4619      	mov	r1, r3
 8034c88:	4802      	ldr	r0, [pc, #8]	; (8034c94 <UpgrSendImageApp+0x18>)
 8034c8a:	f7ff ff19 	bl	8034ac0 <UpgrSendImage>
}
 8034c8e:	bf00      	nop
 8034c90:	4618      	mov	r0, r3
 8034c92:	bd80      	pop	{r7, pc}
 8034c94:	08020000 	.word	0x08020000

08034c98 <cmd_upgrade>:

//========================================================================
int cmd_upgrade	( int argc, char * argv[] )
//========================================================================
{
 8034c98:	b580      	push	{r7, lr}
 8034c9a:	b084      	sub	sp, #16
 8034c9c:	af00      	add	r7, sp, #0
 8034c9e:	6078      	str	r0, [r7, #4]
 8034ca0:	6039      	str	r1, [r7, #0]
	//	Upgrade 수신측에서 동작.
	//========================================================================
	//	upgrade ch 1	//	Upgrade 채널 변경.
	//	upgrade [1/0]	//	1(Start) / 0(End)

	int nVal = 1;
 8034ca2:	2301      	movs	r3, #1
 8034ca4:	60fb      	str	r3, [r7, #12]

	printf( "%s(%d)\n", __func__, __LINE__ );
 8034ca6:	229f      	movs	r2, #159	; 0x9f
 8034ca8:	4922      	ldr	r1, [pc, #136]	; (8034d34 <cmd_upgrade+0x9c>)
 8034caa:	4823      	ldr	r0, [pc, #140]	; (8034d38 <cmd_upgrade+0xa0>)
 8034cac:	f002 fbf8 	bl	80374a0 <iprintf>

	//========================================================================
	switch ( argc )
 8034cb0:	687b      	ldr	r3, [r7, #4]
 8034cb2:	2b02      	cmp	r3, #2
 8034cb4:	d109      	bne.n	8034cca <cmd_upgrade+0x32>
	{
	case 2:		sscanf( argv[2], "%d", &nVal );			//	cmd [address] [value]
 8034cb6:	683b      	ldr	r3, [r7, #0]
 8034cb8:	3308      	adds	r3, #8
 8034cba:	681b      	ldr	r3, [r3, #0]
 8034cbc:	f107 020c 	add.w	r2, r7, #12
 8034cc0:	491e      	ldr	r1, [pc, #120]	; (8034d3c <cmd_upgrade+0xa4>)
 8034cc2:	4618      	mov	r0, r3
 8034cc4:	f002 fd38 	bl	8037738 <siscanf>
//    case 2:		sscanf( argv[1], "%d", &nAddr );		//	cmd [address]
		break;
 8034cc8:	bf00      	nop
	}

	if ( nVal == 1 )
 8034cca:	68fb      	ldr	r3, [r7, #12]
 8034ccc:	2b01      	cmp	r3, #1
 8034cce:	d116      	bne.n	8034cfe <cmd_upgrade+0x66>
		//========================================================================
		//	Upgrade Start

		//========================================================================
		//	채널변경. => CH #1
		g_nChRx = ChUpgrDst;		//	Upgrade Channel
 8034cd0:	4b1b      	ldr	r3, [pc, #108]	; (8034d40 <cmd_upgrade+0xa8>)
 8034cd2:	2203      	movs	r2, #3
 8034cd4:	601a      	str	r2, [r3, #0]

		vRadio_StartRX (
 8034cd6:	4b1a      	ldr	r3, [pc, #104]	; (8034d40 <cmd_upgrade+0xa8>)
 8034cd8:	681b      	ldr	r3, [r3, #0]
 8034cda:	b2da      	uxtb	r2, r3
			g_nChRx,	//g_idxTrainSet,	//	pRadioConfiguration->Radio_ChannelNumber,
			pRadioConfiguration->Radio_PacketLength );
 8034cdc:	4b19      	ldr	r3, [pc, #100]	; (8034d44 <cmd_upgrade+0xac>)
 8034cde:	681b      	ldr	r3, [r3, #0]
		vRadio_StartRX (
 8034ce0:	795b      	ldrb	r3, [r3, #5]
 8034ce2:	4619      	mov	r1, r3
 8034ce4:	4610      	mov	r0, r2
 8034ce6:	f7f8 fb55 	bl	802d394 <vRadio_StartRX>

		//========================================================================
		//	Upgrade시 수신기 조명 점등.
		HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
 8034cea:	2201      	movs	r2, #1
 8034cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8034cf0:	4815      	ldr	r0, [pc, #84]	; (8034d48 <cmd_upgrade+0xb0>)
 8034cf2:	f7ee fc13 	bl	802351c <HAL_GPIO_WritePin>
		//========================================================================
		//	Log 출력 Off

		//========================================================================
		//	Upgrade Mode
		SetRFMMode( RFMModeUpgr );		//	Upgrade Mode 설정. ( 상태정보 전송 X )
 8034cf6:	2004      	movs	r0, #4
 8034cf8:	f7fd fd12 	bl	8032720 <SetRFMMode>
 8034cfc:	e014      	b.n	8034d28 <cmd_upgrade+0x90>
		//========================================================================
	}
	else if ( nVal == 0 )
 8034cfe:	68fb      	ldr	r3, [r7, #12]
 8034d00:	2b00      	cmp	r3, #0
 8034d02:	d111      	bne.n	8034d28 <cmd_upgrade+0x90>
	{
		//========================================================================
		//	Normal Mode
		SetRFMMode( RFMModeNormal );	//	Normal Mode 로 변경
 8034d04:	2000      	movs	r0, #0
 8034d06:	f7fd fd0b 	bl	8032720 <SetRFMMode>
		//========================================================================

		//  RF 수신 Start
		g_nChRx = GetChRx();	//	ChTS1_1 + g_idxTrainSet * 2 + ((g_nCarNo+1) % 2);	// 현재 호차 채널
 8034d0a:	f7fd fd83 	bl	8032814 <GetChRx>
 8034d0e:	4603      	mov	r3, r0
 8034d10:	4a0b      	ldr	r2, [pc, #44]	; (8034d40 <cmd_upgrade+0xa8>)
 8034d12:	6013      	str	r3, [r2, #0]

		vRadio_StartRX(
 8034d14:	4b0a      	ldr	r3, [pc, #40]	; (8034d40 <cmd_upgrade+0xa8>)
 8034d16:	681b      	ldr	r3, [r3, #0]
 8034d18:	b2da      	uxtb	r2, r3
			g_nChRx,	//g_idxTrainSet,	//		pRadioConfiguration->Radio_ChannelNumber,
			pRadioConfiguration->Radio_PacketLength );
 8034d1a:	4b0a      	ldr	r3, [pc, #40]	; (8034d44 <cmd_upgrade+0xac>)
 8034d1c:	681b      	ldr	r3, [r3, #0]
		vRadio_StartRX(
 8034d1e:	795b      	ldrb	r3, [r3, #5]
 8034d20:	4619      	mov	r1, r3
 8034d22:	4610      	mov	r0, r2
 8034d24:	f7f8 fb36 	bl	802d394 <vRadio_StartRX>
	}
}
 8034d28:	bf00      	nop
 8034d2a:	4618      	mov	r0, r3
 8034d2c:	3710      	adds	r7, #16
 8034d2e:	46bd      	mov	sp, r7
 8034d30:	bd80      	pop	{r7, pc}
 8034d32:	bf00      	nop
 8034d34:	08047b8c 	.word	0x08047b8c
 8034d38:	0803b600 	.word	0x0803b600
 8034d3c:	0803b608 	.word	0x0803b608
 8034d40:	20000be8 	.word	0x20000be8
 8034d44:	200004f0 	.word	0x200004f0
 8034d48:	40021000 	.word	0x40021000

08034d4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8034d4c:	b580      	push	{r7, lr}
 8034d4e:	b084      	sub	sp, #16
 8034d50:	af00      	add	r7, sp, #0
 8034d52:	6078      	str	r0, [r7, #4]
 8034d54:	460b      	mov	r3, r1
 8034d56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8034d58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8034d5c:	f002 f932 	bl	8036fc4 <malloc>
 8034d60:	4603      	mov	r3, r0
 8034d62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8034d64:	68fb      	ldr	r3, [r7, #12]
 8034d66:	2b00      	cmp	r3, #0
 8034d68:	d105      	bne.n	8034d76 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8034d6a:	687b      	ldr	r3, [r7, #4]
 8034d6c:	2200      	movs	r2, #0
 8034d6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8034d72:	2302      	movs	r3, #2
 8034d74:	e066      	b.n	8034e44 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8034d76:	687b      	ldr	r3, [r7, #4]
 8034d78:	68fa      	ldr	r2, [r7, #12]
 8034d7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8034d7e:	687b      	ldr	r3, [r7, #4]
 8034d80:	7c1b      	ldrb	r3, [r3, #16]
 8034d82:	2b00      	cmp	r3, #0
 8034d84:	d119      	bne.n	8034dba <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8034d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8034d8a:	2202      	movs	r2, #2
 8034d8c:	2181      	movs	r1, #129	; 0x81
 8034d8e:	6878      	ldr	r0, [r7, #4]
 8034d90:	f001 ffc1 	bl	8036d16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8034d94:	687b      	ldr	r3, [r7, #4]
 8034d96:	2201      	movs	r2, #1
 8034d98:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8034d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8034d9e:	2202      	movs	r2, #2
 8034da0:	2101      	movs	r1, #1
 8034da2:	6878      	ldr	r0, [r7, #4]
 8034da4:	f001 ffb7 	bl	8036d16 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8034da8:	687b      	ldr	r3, [r7, #4]
 8034daa:	2201      	movs	r2, #1
 8034dac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8034db0:	687b      	ldr	r3, [r7, #4]
 8034db2:	2210      	movs	r2, #16
 8034db4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8034db8:	e016      	b.n	8034de8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8034dba:	2340      	movs	r3, #64	; 0x40
 8034dbc:	2202      	movs	r2, #2
 8034dbe:	2181      	movs	r1, #129	; 0x81
 8034dc0:	6878      	ldr	r0, [r7, #4]
 8034dc2:	f001 ffa8 	bl	8036d16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8034dc6:	687b      	ldr	r3, [r7, #4]
 8034dc8:	2201      	movs	r2, #1
 8034dca:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8034dcc:	2340      	movs	r3, #64	; 0x40
 8034dce:	2202      	movs	r2, #2
 8034dd0:	2101      	movs	r1, #1
 8034dd2:	6878      	ldr	r0, [r7, #4]
 8034dd4:	f001 ff9f 	bl	8036d16 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8034dd8:	687b      	ldr	r3, [r7, #4]
 8034dda:	2201      	movs	r2, #1
 8034ddc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8034de0:	687b      	ldr	r3, [r7, #4]
 8034de2:	2210      	movs	r2, #16
 8034de4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8034de8:	2308      	movs	r3, #8
 8034dea:	2203      	movs	r2, #3
 8034dec:	2182      	movs	r1, #130	; 0x82
 8034dee:	6878      	ldr	r0, [r7, #4]
 8034df0:	f001 ff91 	bl	8036d16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8034df4:	687b      	ldr	r3, [r7, #4]
 8034df6:	2201      	movs	r2, #1
 8034df8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8034dfc:	687b      	ldr	r3, [r7, #4]
 8034dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8034e02:	681b      	ldr	r3, [r3, #0]
 8034e04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8034e06:	68fb      	ldr	r3, [r7, #12]
 8034e08:	2200      	movs	r2, #0
 8034e0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8034e0e:	68fb      	ldr	r3, [r7, #12]
 8034e10:	2200      	movs	r2, #0
 8034e12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8034e16:	687b      	ldr	r3, [r7, #4]
 8034e18:	7c1b      	ldrb	r3, [r3, #16]
 8034e1a:	2b00      	cmp	r3, #0
 8034e1c:	d109      	bne.n	8034e32 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8034e1e:	68fb      	ldr	r3, [r7, #12]
 8034e20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8034e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8034e28:	2101      	movs	r1, #1
 8034e2a:	6878      	ldr	r0, [r7, #4]
 8034e2c:	f002 f862 	bl	8036ef4 <USBD_LL_PrepareReceive>
 8034e30:	e007      	b.n	8034e42 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8034e32:	68fb      	ldr	r3, [r7, #12]
 8034e34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8034e38:	2340      	movs	r3, #64	; 0x40
 8034e3a:	2101      	movs	r1, #1
 8034e3c:	6878      	ldr	r0, [r7, #4]
 8034e3e:	f002 f859 	bl	8036ef4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8034e42:	2300      	movs	r3, #0
}
 8034e44:	4618      	mov	r0, r3
 8034e46:	3710      	adds	r7, #16
 8034e48:	46bd      	mov	sp, r7
 8034e4a:	bd80      	pop	{r7, pc}

08034e4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8034e4c:	b580      	push	{r7, lr}
 8034e4e:	b084      	sub	sp, #16
 8034e50:	af00      	add	r7, sp, #0
 8034e52:	6078      	str	r0, [r7, #4]
 8034e54:	460b      	mov	r3, r1
 8034e56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8034e58:	2300      	movs	r3, #0
 8034e5a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8034e5c:	2181      	movs	r1, #129	; 0x81
 8034e5e:	6878      	ldr	r0, [r7, #4]
 8034e60:	f001 ff7f 	bl	8036d62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8034e64:	687b      	ldr	r3, [r7, #4]
 8034e66:	2200      	movs	r2, #0
 8034e68:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8034e6a:	2101      	movs	r1, #1
 8034e6c:	6878      	ldr	r0, [r7, #4]
 8034e6e:	f001 ff78 	bl	8036d62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8034e72:	687b      	ldr	r3, [r7, #4]
 8034e74:	2200      	movs	r2, #0
 8034e76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8034e7a:	2182      	movs	r1, #130	; 0x82
 8034e7c:	6878      	ldr	r0, [r7, #4]
 8034e7e:	f001 ff70 	bl	8036d62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8034e82:	687b      	ldr	r3, [r7, #4]
 8034e84:	2200      	movs	r2, #0
 8034e86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8034e8a:	687b      	ldr	r3, [r7, #4]
 8034e8c:	2200      	movs	r2, #0
 8034e8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8034e92:	687b      	ldr	r3, [r7, #4]
 8034e94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8034e98:	2b00      	cmp	r3, #0
 8034e9a:	d00e      	beq.n	8034eba <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8034e9c:	687b      	ldr	r3, [r7, #4]
 8034e9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8034ea2:	685b      	ldr	r3, [r3, #4]
 8034ea4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8034ea6:	687b      	ldr	r3, [r7, #4]
 8034ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8034eac:	4618      	mov	r0, r3
 8034eae:	f002 f891 	bl	8036fd4 <free>
    pdev->pClassData = NULL;
 8034eb2:	687b      	ldr	r3, [r7, #4]
 8034eb4:	2200      	movs	r2, #0
 8034eb6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8034eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8034ebc:	4618      	mov	r0, r3
 8034ebe:	3710      	adds	r7, #16
 8034ec0:	46bd      	mov	sp, r7
 8034ec2:	bd80      	pop	{r7, pc}

08034ec4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8034ec4:	b580      	push	{r7, lr}
 8034ec6:	b086      	sub	sp, #24
 8034ec8:	af00      	add	r7, sp, #0
 8034eca:	6078      	str	r0, [r7, #4]
 8034ecc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8034ece:	687b      	ldr	r3, [r7, #4]
 8034ed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8034ed4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8034ed6:	2300      	movs	r3, #0
 8034ed8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8034eda:	2300      	movs	r3, #0
 8034edc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8034ede:	2300      	movs	r3, #0
 8034ee0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8034ee2:	683b      	ldr	r3, [r7, #0]
 8034ee4:	781b      	ldrb	r3, [r3, #0]
 8034ee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8034eea:	2b00      	cmp	r3, #0
 8034eec:	d03a      	beq.n	8034f64 <USBD_CDC_Setup+0xa0>
 8034eee:	2b20      	cmp	r3, #32
 8034ef0:	f040 8097 	bne.w	8035022 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8034ef4:	683b      	ldr	r3, [r7, #0]
 8034ef6:	88db      	ldrh	r3, [r3, #6]
 8034ef8:	2b00      	cmp	r3, #0
 8034efa:	d029      	beq.n	8034f50 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8034efc:	683b      	ldr	r3, [r7, #0]
 8034efe:	781b      	ldrb	r3, [r3, #0]
 8034f00:	b25b      	sxtb	r3, r3
 8034f02:	2b00      	cmp	r3, #0
 8034f04:	da11      	bge.n	8034f2a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8034f06:	687b      	ldr	r3, [r7, #4]
 8034f08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8034f0c:	689b      	ldr	r3, [r3, #8]
 8034f0e:	683a      	ldr	r2, [r7, #0]
 8034f10:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8034f12:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8034f14:	683a      	ldr	r2, [r7, #0]
 8034f16:	88d2      	ldrh	r2, [r2, #6]
 8034f18:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8034f1a:	6939      	ldr	r1, [r7, #16]
 8034f1c:	683b      	ldr	r3, [r7, #0]
 8034f1e:	88db      	ldrh	r3, [r3, #6]
 8034f20:	461a      	mov	r2, r3
 8034f22:	6878      	ldr	r0, [r7, #4]
 8034f24:	f001 faac 	bl	8036480 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8034f28:	e082      	b.n	8035030 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8034f2a:	683b      	ldr	r3, [r7, #0]
 8034f2c:	785a      	ldrb	r2, [r3, #1]
 8034f2e:	693b      	ldr	r3, [r7, #16]
 8034f30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8034f34:	683b      	ldr	r3, [r7, #0]
 8034f36:	88db      	ldrh	r3, [r3, #6]
 8034f38:	b2da      	uxtb	r2, r3
 8034f3a:	693b      	ldr	r3, [r7, #16]
 8034f3c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8034f40:	6939      	ldr	r1, [r7, #16]
 8034f42:	683b      	ldr	r3, [r7, #0]
 8034f44:	88db      	ldrh	r3, [r3, #6]
 8034f46:	461a      	mov	r2, r3
 8034f48:	6878      	ldr	r0, [r7, #4]
 8034f4a:	f001 fac5 	bl	80364d8 <USBD_CtlPrepareRx>
    break;
 8034f4e:	e06f      	b.n	8035030 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8034f50:	687b      	ldr	r3, [r7, #4]
 8034f52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8034f56:	689b      	ldr	r3, [r3, #8]
 8034f58:	683a      	ldr	r2, [r7, #0]
 8034f5a:	7850      	ldrb	r0, [r2, #1]
 8034f5c:	2200      	movs	r2, #0
 8034f5e:	6839      	ldr	r1, [r7, #0]
 8034f60:	4798      	blx	r3
    break;
 8034f62:	e065      	b.n	8035030 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8034f64:	683b      	ldr	r3, [r7, #0]
 8034f66:	785b      	ldrb	r3, [r3, #1]
 8034f68:	2b0b      	cmp	r3, #11
 8034f6a:	d84f      	bhi.n	803500c <USBD_CDC_Setup+0x148>
 8034f6c:	a201      	add	r2, pc, #4	; (adr r2, 8034f74 <USBD_CDC_Setup+0xb0>)
 8034f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034f72:	bf00      	nop
 8034f74:	08034fa5 	.word	0x08034fa5
 8034f78:	0803501b 	.word	0x0803501b
 8034f7c:	0803500d 	.word	0x0803500d
 8034f80:	0803500d 	.word	0x0803500d
 8034f84:	0803500d 	.word	0x0803500d
 8034f88:	0803500d 	.word	0x0803500d
 8034f8c:	0803500d 	.word	0x0803500d
 8034f90:	0803500d 	.word	0x0803500d
 8034f94:	0803500d 	.word	0x0803500d
 8034f98:	0803500d 	.word	0x0803500d
 8034f9c:	08034fcd 	.word	0x08034fcd
 8034fa0:	08034ff5 	.word	0x08034ff5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8034fa4:	687b      	ldr	r3, [r7, #4]
 8034fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034faa:	2b03      	cmp	r3, #3
 8034fac:	d107      	bne.n	8034fbe <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8034fae:	f107 030c 	add.w	r3, r7, #12
 8034fb2:	2202      	movs	r2, #2
 8034fb4:	4619      	mov	r1, r3
 8034fb6:	6878      	ldr	r0, [r7, #4]
 8034fb8:	f001 fa62 	bl	8036480 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8034fbc:	e030      	b.n	8035020 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8034fbe:	6839      	ldr	r1, [r7, #0]
 8034fc0:	6878      	ldr	r0, [r7, #4]
 8034fc2:	f001 f9ec 	bl	803639e <USBD_CtlError>
        ret = USBD_FAIL;
 8034fc6:	2303      	movs	r3, #3
 8034fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8034fca:	e029      	b.n	8035020 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8034fcc:	687b      	ldr	r3, [r7, #4]
 8034fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034fd2:	2b03      	cmp	r3, #3
 8034fd4:	d107      	bne.n	8034fe6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8034fd6:	f107 030f 	add.w	r3, r7, #15
 8034fda:	2201      	movs	r2, #1
 8034fdc:	4619      	mov	r1, r3
 8034fde:	6878      	ldr	r0, [r7, #4]
 8034fe0:	f001 fa4e 	bl	8036480 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8034fe4:	e01c      	b.n	8035020 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8034fe6:	6839      	ldr	r1, [r7, #0]
 8034fe8:	6878      	ldr	r0, [r7, #4]
 8034fea:	f001 f9d8 	bl	803639e <USBD_CtlError>
        ret = USBD_FAIL;
 8034fee:	2303      	movs	r3, #3
 8034ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8034ff2:	e015      	b.n	8035020 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8034ff4:	687b      	ldr	r3, [r7, #4]
 8034ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034ffa:	2b03      	cmp	r3, #3
 8034ffc:	d00f      	beq.n	803501e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8034ffe:	6839      	ldr	r1, [r7, #0]
 8035000:	6878      	ldr	r0, [r7, #4]
 8035002:	f001 f9cc 	bl	803639e <USBD_CtlError>
        ret = USBD_FAIL;
 8035006:	2303      	movs	r3, #3
 8035008:	75fb      	strb	r3, [r7, #23]
      }
      break;
 803500a:	e008      	b.n	803501e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 803500c:	6839      	ldr	r1, [r7, #0]
 803500e:	6878      	ldr	r0, [r7, #4]
 8035010:	f001 f9c5 	bl	803639e <USBD_CtlError>
      ret = USBD_FAIL;
 8035014:	2303      	movs	r3, #3
 8035016:	75fb      	strb	r3, [r7, #23]
      break;
 8035018:	e002      	b.n	8035020 <USBD_CDC_Setup+0x15c>
      break;
 803501a:	bf00      	nop
 803501c:	e008      	b.n	8035030 <USBD_CDC_Setup+0x16c>
      break;
 803501e:	bf00      	nop
    }
    break;
 8035020:	e006      	b.n	8035030 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8035022:	6839      	ldr	r1, [r7, #0]
 8035024:	6878      	ldr	r0, [r7, #4]
 8035026:	f001 f9ba 	bl	803639e <USBD_CtlError>
    ret = USBD_FAIL;
 803502a:	2303      	movs	r3, #3
 803502c:	75fb      	strb	r3, [r7, #23]
    break;
 803502e:	bf00      	nop
  }

  return (uint8_t)ret;
 8035030:	7dfb      	ldrb	r3, [r7, #23]
}
 8035032:	4618      	mov	r0, r3
 8035034:	3718      	adds	r7, #24
 8035036:	46bd      	mov	sp, r7
 8035038:	bd80      	pop	{r7, pc}
 803503a:	bf00      	nop

0803503c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803503c:	b580      	push	{r7, lr}
 803503e:	b084      	sub	sp, #16
 8035040:	af00      	add	r7, sp, #0
 8035042:	6078      	str	r0, [r7, #4]
 8035044:	460b      	mov	r3, r1
 8035046:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8035048:	687b      	ldr	r3, [r7, #4]
 803504a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 803504e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8035050:	687b      	ldr	r3, [r7, #4]
 8035052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035056:	2b00      	cmp	r3, #0
 8035058:	d101      	bne.n	803505e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 803505a:	2303      	movs	r3, #3
 803505c:	e049      	b.n	80350f2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 803505e:	687b      	ldr	r3, [r7, #4]
 8035060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035064:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8035066:	78fa      	ldrb	r2, [r7, #3]
 8035068:	6879      	ldr	r1, [r7, #4]
 803506a:	4613      	mov	r3, r2
 803506c:	009b      	lsls	r3, r3, #2
 803506e:	4413      	add	r3, r2
 8035070:	009b      	lsls	r3, r3, #2
 8035072:	440b      	add	r3, r1
 8035074:	3318      	adds	r3, #24
 8035076:	681b      	ldr	r3, [r3, #0]
 8035078:	2b00      	cmp	r3, #0
 803507a:	d029      	beq.n	80350d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 803507c:	78fa      	ldrb	r2, [r7, #3]
 803507e:	6879      	ldr	r1, [r7, #4]
 8035080:	4613      	mov	r3, r2
 8035082:	009b      	lsls	r3, r3, #2
 8035084:	4413      	add	r3, r2
 8035086:	009b      	lsls	r3, r3, #2
 8035088:	440b      	add	r3, r1
 803508a:	3318      	adds	r3, #24
 803508c:	681a      	ldr	r2, [r3, #0]
 803508e:	78f9      	ldrb	r1, [r7, #3]
 8035090:	68f8      	ldr	r0, [r7, #12]
 8035092:	460b      	mov	r3, r1
 8035094:	00db      	lsls	r3, r3, #3
 8035096:	1a5b      	subs	r3, r3, r1
 8035098:	009b      	lsls	r3, r3, #2
 803509a:	4403      	add	r3, r0
 803509c:	3344      	adds	r3, #68	; 0x44
 803509e:	681b      	ldr	r3, [r3, #0]
 80350a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80350a4:	fb01 f303 	mul.w	r3, r1, r3
 80350a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80350aa:	2b00      	cmp	r3, #0
 80350ac:	d110      	bne.n	80350d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80350ae:	78fa      	ldrb	r2, [r7, #3]
 80350b0:	6879      	ldr	r1, [r7, #4]
 80350b2:	4613      	mov	r3, r2
 80350b4:	009b      	lsls	r3, r3, #2
 80350b6:	4413      	add	r3, r2
 80350b8:	009b      	lsls	r3, r3, #2
 80350ba:	440b      	add	r3, r1
 80350bc:	3318      	adds	r3, #24
 80350be:	2200      	movs	r2, #0
 80350c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80350c2:	78f9      	ldrb	r1, [r7, #3]
 80350c4:	2300      	movs	r3, #0
 80350c6:	2200      	movs	r2, #0
 80350c8:	6878      	ldr	r0, [r7, #4]
 80350ca:	f001 fef2 	bl	8036eb2 <USBD_LL_Transmit>
 80350ce:	e00f      	b.n	80350f0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80350d0:	68bb      	ldr	r3, [r7, #8]
 80350d2:	2200      	movs	r2, #0
 80350d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80350d8:	687b      	ldr	r3, [r7, #4]
 80350da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80350de:	691b      	ldr	r3, [r3, #16]
 80350e0:	68ba      	ldr	r2, [r7, #8]
 80350e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80350e6:	68ba      	ldr	r2, [r7, #8]
 80350e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80350ec:	78fa      	ldrb	r2, [r7, #3]
 80350ee:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80350f0:	2300      	movs	r3, #0
}
 80350f2:	4618      	mov	r0, r3
 80350f4:	3710      	adds	r7, #16
 80350f6:	46bd      	mov	sp, r7
 80350f8:	bd80      	pop	{r7, pc}

080350fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80350fa:	b580      	push	{r7, lr}
 80350fc:	b084      	sub	sp, #16
 80350fe:	af00      	add	r7, sp, #0
 8035100:	6078      	str	r0, [r7, #4]
 8035102:	460b      	mov	r3, r1
 8035104:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8035106:	687b      	ldr	r3, [r7, #4]
 8035108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 803510c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 803510e:	687b      	ldr	r3, [r7, #4]
 8035110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035114:	2b00      	cmp	r3, #0
 8035116:	d101      	bne.n	803511c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8035118:	2303      	movs	r3, #3
 803511a:	e015      	b.n	8035148 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 803511c:	78fb      	ldrb	r3, [r7, #3]
 803511e:	4619      	mov	r1, r3
 8035120:	6878      	ldr	r0, [r7, #4]
 8035122:	f001 ff08 	bl	8036f36 <USBD_LL_GetRxDataSize>
 8035126:	4602      	mov	r2, r0
 8035128:	68fb      	ldr	r3, [r7, #12]
 803512a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 803512e:	687b      	ldr	r3, [r7, #4]
 8035130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8035134:	68db      	ldr	r3, [r3, #12]
 8035136:	68fa      	ldr	r2, [r7, #12]
 8035138:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 803513c:	68fa      	ldr	r2, [r7, #12]
 803513e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8035142:	4611      	mov	r1, r2
 8035144:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8035146:	2300      	movs	r3, #0
}
 8035148:	4618      	mov	r0, r3
 803514a:	3710      	adds	r7, #16
 803514c:	46bd      	mov	sp, r7
 803514e:	bd80      	pop	{r7, pc}

08035150 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8035150:	b580      	push	{r7, lr}
 8035152:	b084      	sub	sp, #16
 8035154:	af00      	add	r7, sp, #0
 8035156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8035158:	687b      	ldr	r3, [r7, #4]
 803515a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 803515e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8035160:	687b      	ldr	r3, [r7, #4]
 8035162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8035166:	2b00      	cmp	r3, #0
 8035168:	d015      	beq.n	8035196 <USBD_CDC_EP0_RxReady+0x46>
 803516a:	68fb      	ldr	r3, [r7, #12]
 803516c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8035170:	2bff      	cmp	r3, #255	; 0xff
 8035172:	d010      	beq.n	8035196 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8035174:	687b      	ldr	r3, [r7, #4]
 8035176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 803517a:	689b      	ldr	r3, [r3, #8]
 803517c:	68fa      	ldr	r2, [r7, #12]
 803517e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8035182:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8035184:	68fa      	ldr	r2, [r7, #12]
 8035186:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 803518a:	b292      	uxth	r2, r2
 803518c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 803518e:	68fb      	ldr	r3, [r7, #12]
 8035190:	22ff      	movs	r2, #255	; 0xff
 8035192:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8035196:	2300      	movs	r3, #0
}
 8035198:	4618      	mov	r0, r3
 803519a:	3710      	adds	r7, #16
 803519c:	46bd      	mov	sp, r7
 803519e:	bd80      	pop	{r7, pc}

080351a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80351a0:	b480      	push	{r7}
 80351a2:	b083      	sub	sp, #12
 80351a4:	af00      	add	r7, sp, #0
 80351a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80351a8:	687b      	ldr	r3, [r7, #4]
 80351aa:	2243      	movs	r2, #67	; 0x43
 80351ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80351ae:	4b03      	ldr	r3, [pc, #12]	; (80351bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80351b0:	4618      	mov	r0, r3
 80351b2:	370c      	adds	r7, #12
 80351b4:	46bd      	mov	sp, r7
 80351b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80351ba:	4770      	bx	lr
 80351bc:	20000c80 	.word	0x20000c80

080351c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80351c0:	b480      	push	{r7}
 80351c2:	b083      	sub	sp, #12
 80351c4:	af00      	add	r7, sp, #0
 80351c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80351c8:	687b      	ldr	r3, [r7, #4]
 80351ca:	2243      	movs	r2, #67	; 0x43
 80351cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80351ce:	4b03      	ldr	r3, [pc, #12]	; (80351dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80351d0:	4618      	mov	r0, r3
 80351d2:	370c      	adds	r7, #12
 80351d4:	46bd      	mov	sp, r7
 80351d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80351da:	4770      	bx	lr
 80351dc:	20000c3c 	.word	0x20000c3c

080351e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80351e0:	b480      	push	{r7}
 80351e2:	b083      	sub	sp, #12
 80351e4:	af00      	add	r7, sp, #0
 80351e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80351e8:	687b      	ldr	r3, [r7, #4]
 80351ea:	2243      	movs	r2, #67	; 0x43
 80351ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80351ee:	4b03      	ldr	r3, [pc, #12]	; (80351fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80351f0:	4618      	mov	r0, r3
 80351f2:	370c      	adds	r7, #12
 80351f4:	46bd      	mov	sp, r7
 80351f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80351fa:	4770      	bx	lr
 80351fc:	20000cc4 	.word	0x20000cc4

08035200 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8035200:	b480      	push	{r7}
 8035202:	b083      	sub	sp, #12
 8035204:	af00      	add	r7, sp, #0
 8035206:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8035208:	687b      	ldr	r3, [r7, #4]
 803520a:	220a      	movs	r2, #10
 803520c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 803520e:	4b03      	ldr	r3, [pc, #12]	; (803521c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8035210:	4618      	mov	r0, r3
 8035212:	370c      	adds	r7, #12
 8035214:	46bd      	mov	sp, r7
 8035216:	f85d 7b04 	ldr.w	r7, [sp], #4
 803521a:	4770      	bx	lr
 803521c:	20000bf8 	.word	0x20000bf8

08035220 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8035220:	b480      	push	{r7}
 8035222:	b083      	sub	sp, #12
 8035224:	af00      	add	r7, sp, #0
 8035226:	6078      	str	r0, [r7, #4]
 8035228:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 803522a:	683b      	ldr	r3, [r7, #0]
 803522c:	2b00      	cmp	r3, #0
 803522e:	d101      	bne.n	8035234 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8035230:	2303      	movs	r3, #3
 8035232:	e004      	b.n	803523e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8035234:	687b      	ldr	r3, [r7, #4]
 8035236:	683a      	ldr	r2, [r7, #0]
 8035238:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 803523c:	2300      	movs	r3, #0
}
 803523e:	4618      	mov	r0, r3
 8035240:	370c      	adds	r7, #12
 8035242:	46bd      	mov	sp, r7
 8035244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035248:	4770      	bx	lr

0803524a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 803524a:	b480      	push	{r7}
 803524c:	b087      	sub	sp, #28
 803524e:	af00      	add	r7, sp, #0
 8035250:	60f8      	str	r0, [r7, #12]
 8035252:	60b9      	str	r1, [r7, #8]
 8035254:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8035256:	68fb      	ldr	r3, [r7, #12]
 8035258:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 803525c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 803525e:	697b      	ldr	r3, [r7, #20]
 8035260:	68ba      	ldr	r2, [r7, #8]
 8035262:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8035266:	697b      	ldr	r3, [r7, #20]
 8035268:	687a      	ldr	r2, [r7, #4]
 803526a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 803526e:	2300      	movs	r3, #0
}
 8035270:	4618      	mov	r0, r3
 8035272:	371c      	adds	r7, #28
 8035274:	46bd      	mov	sp, r7
 8035276:	f85d 7b04 	ldr.w	r7, [sp], #4
 803527a:	4770      	bx	lr

0803527c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 803527c:	b480      	push	{r7}
 803527e:	b085      	sub	sp, #20
 8035280:	af00      	add	r7, sp, #0
 8035282:	6078      	str	r0, [r7, #4]
 8035284:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8035286:	687b      	ldr	r3, [r7, #4]
 8035288:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 803528c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 803528e:	68fb      	ldr	r3, [r7, #12]
 8035290:	683a      	ldr	r2, [r7, #0]
 8035292:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8035296:	2300      	movs	r3, #0
}
 8035298:	4618      	mov	r0, r3
 803529a:	3714      	adds	r7, #20
 803529c:	46bd      	mov	sp, r7
 803529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80352a2:	4770      	bx	lr

080352a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80352a4:	b580      	push	{r7, lr}
 80352a6:	b084      	sub	sp, #16
 80352a8:	af00      	add	r7, sp, #0
 80352aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80352ac:	687b      	ldr	r3, [r7, #4]
 80352ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80352b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80352b4:	2301      	movs	r3, #1
 80352b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80352b8:	687b      	ldr	r3, [r7, #4]
 80352ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80352be:	2b00      	cmp	r3, #0
 80352c0:	d101      	bne.n	80352c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80352c2:	2303      	movs	r3, #3
 80352c4:	e01a      	b.n	80352fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80352c6:	68bb      	ldr	r3, [r7, #8]
 80352c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80352cc:	2b00      	cmp	r3, #0
 80352ce:	d114      	bne.n	80352fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80352d0:	68bb      	ldr	r3, [r7, #8]
 80352d2:	2201      	movs	r2, #1
 80352d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80352d8:	68bb      	ldr	r3, [r7, #8]
 80352da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80352de:	687b      	ldr	r3, [r7, #4]
 80352e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80352e2:	68bb      	ldr	r3, [r7, #8]
 80352e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80352e8:	68bb      	ldr	r3, [r7, #8]
 80352ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80352ee:	2181      	movs	r1, #129	; 0x81
 80352f0:	6878      	ldr	r0, [r7, #4]
 80352f2:	f001 fdde 	bl	8036eb2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80352f6:	2300      	movs	r3, #0
 80352f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80352fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80352fc:	4618      	mov	r0, r3
 80352fe:	3710      	adds	r7, #16
 8035300:	46bd      	mov	sp, r7
 8035302:	bd80      	pop	{r7, pc}

08035304 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8035304:	b580      	push	{r7, lr}
 8035306:	b084      	sub	sp, #16
 8035308:	af00      	add	r7, sp, #0
 803530a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 803530c:	687b      	ldr	r3, [r7, #4]
 803530e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035312:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8035314:	687b      	ldr	r3, [r7, #4]
 8035316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 803531a:	2b00      	cmp	r3, #0
 803531c:	d101      	bne.n	8035322 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 803531e:	2303      	movs	r3, #3
 8035320:	e016      	b.n	8035350 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8035322:	687b      	ldr	r3, [r7, #4]
 8035324:	7c1b      	ldrb	r3, [r3, #16]
 8035326:	2b00      	cmp	r3, #0
 8035328:	d109      	bne.n	803533e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 803532a:	68fb      	ldr	r3, [r7, #12]
 803532c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8035330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8035334:	2101      	movs	r1, #1
 8035336:	6878      	ldr	r0, [r7, #4]
 8035338:	f001 fddc 	bl	8036ef4 <USBD_LL_PrepareReceive>
 803533c:	e007      	b.n	803534e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 803533e:	68fb      	ldr	r3, [r7, #12]
 8035340:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8035344:	2340      	movs	r3, #64	; 0x40
 8035346:	2101      	movs	r1, #1
 8035348:	6878      	ldr	r0, [r7, #4]
 803534a:	f001 fdd3 	bl	8036ef4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 803534e:	2300      	movs	r3, #0
}
 8035350:	4618      	mov	r0, r3
 8035352:	3710      	adds	r7, #16
 8035354:	46bd      	mov	sp, r7
 8035356:	bd80      	pop	{r7, pc}

08035358 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8035358:	b580      	push	{r7, lr}
 803535a:	b086      	sub	sp, #24
 803535c:	af00      	add	r7, sp, #0
 803535e:	60f8      	str	r0, [r7, #12]
 8035360:	60b9      	str	r1, [r7, #8]
 8035362:	4613      	mov	r3, r2
 8035364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8035366:	68fb      	ldr	r3, [r7, #12]
 8035368:	2b00      	cmp	r3, #0
 803536a:	d101      	bne.n	8035370 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 803536c:	2303      	movs	r3, #3
 803536e:	e025      	b.n	80353bc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8035370:	68fb      	ldr	r3, [r7, #12]
 8035372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035376:	2b00      	cmp	r3, #0
 8035378:	d003      	beq.n	8035382 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 803537a:	68fb      	ldr	r3, [r7, #12]
 803537c:	2200      	movs	r2, #0
 803537e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8035382:	68fb      	ldr	r3, [r7, #12]
 8035384:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8035388:	2b00      	cmp	r3, #0
 803538a:	d003      	beq.n	8035394 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 803538c:	68fb      	ldr	r3, [r7, #12]
 803538e:	2200      	movs	r2, #0
 8035390:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8035394:	68bb      	ldr	r3, [r7, #8]
 8035396:	2b00      	cmp	r3, #0
 8035398:	d003      	beq.n	80353a2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 803539a:	68fb      	ldr	r3, [r7, #12]
 803539c:	68ba      	ldr	r2, [r7, #8]
 803539e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80353a2:	68fb      	ldr	r3, [r7, #12]
 80353a4:	2201      	movs	r2, #1
 80353a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80353aa:	68fb      	ldr	r3, [r7, #12]
 80353ac:	79fa      	ldrb	r2, [r7, #7]
 80353ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80353b0:	68f8      	ldr	r0, [r7, #12]
 80353b2:	f001 fc49 	bl	8036c48 <USBD_LL_Init>
 80353b6:	4603      	mov	r3, r0
 80353b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80353ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80353bc:	4618      	mov	r0, r3
 80353be:	3718      	adds	r7, #24
 80353c0:	46bd      	mov	sp, r7
 80353c2:	bd80      	pop	{r7, pc}

080353c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80353c4:	b580      	push	{r7, lr}
 80353c6:	b084      	sub	sp, #16
 80353c8:	af00      	add	r7, sp, #0
 80353ca:	6078      	str	r0, [r7, #4]
 80353cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80353ce:	2300      	movs	r3, #0
 80353d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80353d2:	683b      	ldr	r3, [r7, #0]
 80353d4:	2b00      	cmp	r3, #0
 80353d6:	d101      	bne.n	80353dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80353d8:	2303      	movs	r3, #3
 80353da:	e010      	b.n	80353fe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80353dc:	687b      	ldr	r3, [r7, #4]
 80353de:	683a      	ldr	r2, [r7, #0]
 80353e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80353e4:	687b      	ldr	r3, [r7, #4]
 80353e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80353ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80353ec:	f107 020e 	add.w	r2, r7, #14
 80353f0:	4610      	mov	r0, r2
 80353f2:	4798      	blx	r3
 80353f4:	4602      	mov	r2, r0
 80353f6:	687b      	ldr	r3, [r7, #4]
 80353f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80353fc:	2300      	movs	r3, #0
}
 80353fe:	4618      	mov	r0, r3
 8035400:	3710      	adds	r7, #16
 8035402:	46bd      	mov	sp, r7
 8035404:	bd80      	pop	{r7, pc}

08035406 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8035406:	b580      	push	{r7, lr}
 8035408:	b082      	sub	sp, #8
 803540a:	af00      	add	r7, sp, #0
 803540c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 803540e:	6878      	ldr	r0, [r7, #4]
 8035410:	f001 fc66 	bl	8036ce0 <USBD_LL_Start>
 8035414:	4603      	mov	r3, r0
}
 8035416:	4618      	mov	r0, r3
 8035418:	3708      	adds	r7, #8
 803541a:	46bd      	mov	sp, r7
 803541c:	bd80      	pop	{r7, pc}

0803541e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 803541e:	b480      	push	{r7}
 8035420:	b083      	sub	sp, #12
 8035422:	af00      	add	r7, sp, #0
 8035424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8035426:	2300      	movs	r3, #0
}
 8035428:	4618      	mov	r0, r3
 803542a:	370c      	adds	r7, #12
 803542c:	46bd      	mov	sp, r7
 803542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035432:	4770      	bx	lr

08035434 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8035434:	b580      	push	{r7, lr}
 8035436:	b084      	sub	sp, #16
 8035438:	af00      	add	r7, sp, #0
 803543a:	6078      	str	r0, [r7, #4]
 803543c:	460b      	mov	r3, r1
 803543e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8035440:	2303      	movs	r3, #3
 8035442:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8035444:	687b      	ldr	r3, [r7, #4]
 8035446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803544a:	2b00      	cmp	r3, #0
 803544c:	d009      	beq.n	8035462 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 803544e:	687b      	ldr	r3, [r7, #4]
 8035450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035454:	681b      	ldr	r3, [r3, #0]
 8035456:	78fa      	ldrb	r2, [r7, #3]
 8035458:	4611      	mov	r1, r2
 803545a:	6878      	ldr	r0, [r7, #4]
 803545c:	4798      	blx	r3
 803545e:	4603      	mov	r3, r0
 8035460:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8035462:	7bfb      	ldrb	r3, [r7, #15]
}
 8035464:	4618      	mov	r0, r3
 8035466:	3710      	adds	r7, #16
 8035468:	46bd      	mov	sp, r7
 803546a:	bd80      	pop	{r7, pc}

0803546c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803546c:	b580      	push	{r7, lr}
 803546e:	b082      	sub	sp, #8
 8035470:	af00      	add	r7, sp, #0
 8035472:	6078      	str	r0, [r7, #4]
 8035474:	460b      	mov	r3, r1
 8035476:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8035478:	687b      	ldr	r3, [r7, #4]
 803547a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803547e:	2b00      	cmp	r3, #0
 8035480:	d007      	beq.n	8035492 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8035482:	687b      	ldr	r3, [r7, #4]
 8035484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035488:	685b      	ldr	r3, [r3, #4]
 803548a:	78fa      	ldrb	r2, [r7, #3]
 803548c:	4611      	mov	r1, r2
 803548e:	6878      	ldr	r0, [r7, #4]
 8035490:	4798      	blx	r3
  }

  return USBD_OK;
 8035492:	2300      	movs	r3, #0
}
 8035494:	4618      	mov	r0, r3
 8035496:	3708      	adds	r7, #8
 8035498:	46bd      	mov	sp, r7
 803549a:	bd80      	pop	{r7, pc}

0803549c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 803549c:	b580      	push	{r7, lr}
 803549e:	b084      	sub	sp, #16
 80354a0:	af00      	add	r7, sp, #0
 80354a2:	6078      	str	r0, [r7, #4]
 80354a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80354a6:	687b      	ldr	r3, [r7, #4]
 80354a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80354ac:	6839      	ldr	r1, [r7, #0]
 80354ae:	4618      	mov	r0, r3
 80354b0:	f000 ff3b 	bl	803632a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80354b4:	687b      	ldr	r3, [r7, #4]
 80354b6:	2201      	movs	r2, #1
 80354b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80354bc:	687b      	ldr	r3, [r7, #4]
 80354be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80354c2:	461a      	mov	r2, r3
 80354c4:	687b      	ldr	r3, [r7, #4]
 80354c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80354ca:	687b      	ldr	r3, [r7, #4]
 80354cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80354d0:	f003 031f 	and.w	r3, r3, #31
 80354d4:	2b02      	cmp	r3, #2
 80354d6:	d01a      	beq.n	803550e <USBD_LL_SetupStage+0x72>
 80354d8:	2b02      	cmp	r3, #2
 80354da:	d822      	bhi.n	8035522 <USBD_LL_SetupStage+0x86>
 80354dc:	2b00      	cmp	r3, #0
 80354de:	d002      	beq.n	80354e6 <USBD_LL_SetupStage+0x4a>
 80354e0:	2b01      	cmp	r3, #1
 80354e2:	d00a      	beq.n	80354fa <USBD_LL_SetupStage+0x5e>
 80354e4:	e01d      	b.n	8035522 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80354e6:	687b      	ldr	r3, [r7, #4]
 80354e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80354ec:	4619      	mov	r1, r3
 80354ee:	6878      	ldr	r0, [r7, #4]
 80354f0:	f000 fa18 	bl	8035924 <USBD_StdDevReq>
 80354f4:	4603      	mov	r3, r0
 80354f6:	73fb      	strb	r3, [r7, #15]
      break;
 80354f8:	e020      	b.n	803553c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80354fa:	687b      	ldr	r3, [r7, #4]
 80354fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8035500:	4619      	mov	r1, r3
 8035502:	6878      	ldr	r0, [r7, #4]
 8035504:	f000 fa7c 	bl	8035a00 <USBD_StdItfReq>
 8035508:	4603      	mov	r3, r0
 803550a:	73fb      	strb	r3, [r7, #15]
      break;
 803550c:	e016      	b.n	803553c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 803550e:	687b      	ldr	r3, [r7, #4]
 8035510:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8035514:	4619      	mov	r1, r3
 8035516:	6878      	ldr	r0, [r7, #4]
 8035518:	f000 faba 	bl	8035a90 <USBD_StdEPReq>
 803551c:	4603      	mov	r3, r0
 803551e:	73fb      	strb	r3, [r7, #15]
      break;
 8035520:	e00c      	b.n	803553c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8035522:	687b      	ldr	r3, [r7, #4]
 8035524:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8035528:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 803552c:	b2db      	uxtb	r3, r3
 803552e:	4619      	mov	r1, r3
 8035530:	6878      	ldr	r0, [r7, #4]
 8035532:	f001 fc35 	bl	8036da0 <USBD_LL_StallEP>
 8035536:	4603      	mov	r3, r0
 8035538:	73fb      	strb	r3, [r7, #15]
      break;
 803553a:	bf00      	nop
  }

  return ret;
 803553c:	7bfb      	ldrb	r3, [r7, #15]
}
 803553e:	4618      	mov	r0, r3
 8035540:	3710      	adds	r7, #16
 8035542:	46bd      	mov	sp, r7
 8035544:	bd80      	pop	{r7, pc}

08035546 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8035546:	b580      	push	{r7, lr}
 8035548:	b086      	sub	sp, #24
 803554a:	af00      	add	r7, sp, #0
 803554c:	60f8      	str	r0, [r7, #12]
 803554e:	460b      	mov	r3, r1
 8035550:	607a      	str	r2, [r7, #4]
 8035552:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8035554:	7afb      	ldrb	r3, [r7, #11]
 8035556:	2b00      	cmp	r3, #0
 8035558:	d137      	bne.n	80355ca <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 803555a:	68fb      	ldr	r3, [r7, #12]
 803555c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8035560:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8035562:	68fb      	ldr	r3, [r7, #12]
 8035564:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8035568:	2b03      	cmp	r3, #3
 803556a:	d14a      	bne.n	8035602 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 803556c:	693b      	ldr	r3, [r7, #16]
 803556e:	689a      	ldr	r2, [r3, #8]
 8035570:	693b      	ldr	r3, [r7, #16]
 8035572:	68db      	ldr	r3, [r3, #12]
 8035574:	429a      	cmp	r2, r3
 8035576:	d913      	bls.n	80355a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8035578:	693b      	ldr	r3, [r7, #16]
 803557a:	689a      	ldr	r2, [r3, #8]
 803557c:	693b      	ldr	r3, [r7, #16]
 803557e:	68db      	ldr	r3, [r3, #12]
 8035580:	1ad2      	subs	r2, r2, r3
 8035582:	693b      	ldr	r3, [r7, #16]
 8035584:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8035586:	693b      	ldr	r3, [r7, #16]
 8035588:	68da      	ldr	r2, [r3, #12]
 803558a:	693b      	ldr	r3, [r7, #16]
 803558c:	689b      	ldr	r3, [r3, #8]
 803558e:	4293      	cmp	r3, r2
 8035590:	bf28      	it	cs
 8035592:	4613      	movcs	r3, r2
 8035594:	461a      	mov	r2, r3
 8035596:	6879      	ldr	r1, [r7, #4]
 8035598:	68f8      	ldr	r0, [r7, #12]
 803559a:	f000 ffba 	bl	8036512 <USBD_CtlContinueRx>
 803559e:	e030      	b.n	8035602 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80355a0:	68fb      	ldr	r3, [r7, #12]
 80355a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80355a6:	691b      	ldr	r3, [r3, #16]
 80355a8:	2b00      	cmp	r3, #0
 80355aa:	d00a      	beq.n	80355c2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80355ac:	68fb      	ldr	r3, [r7, #12]
 80355ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80355b2:	2b03      	cmp	r3, #3
 80355b4:	d105      	bne.n	80355c2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80355b6:	68fb      	ldr	r3, [r7, #12]
 80355b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80355bc:	691b      	ldr	r3, [r3, #16]
 80355be:	68f8      	ldr	r0, [r7, #12]
 80355c0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80355c2:	68f8      	ldr	r0, [r7, #12]
 80355c4:	f000 ffb6 	bl	8036534 <USBD_CtlSendStatus>
 80355c8:	e01b      	b.n	8035602 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80355ca:	68fb      	ldr	r3, [r7, #12]
 80355cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80355d0:	699b      	ldr	r3, [r3, #24]
 80355d2:	2b00      	cmp	r3, #0
 80355d4:	d013      	beq.n	80355fe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80355d6:	68fb      	ldr	r3, [r7, #12]
 80355d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80355dc:	2b03      	cmp	r3, #3
 80355de:	d10e      	bne.n	80355fe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80355e0:	68fb      	ldr	r3, [r7, #12]
 80355e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80355e6:	699b      	ldr	r3, [r3, #24]
 80355e8:	7afa      	ldrb	r2, [r7, #11]
 80355ea:	4611      	mov	r1, r2
 80355ec:	68f8      	ldr	r0, [r7, #12]
 80355ee:	4798      	blx	r3
 80355f0:	4603      	mov	r3, r0
 80355f2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80355f4:	7dfb      	ldrb	r3, [r7, #23]
 80355f6:	2b00      	cmp	r3, #0
 80355f8:	d003      	beq.n	8035602 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80355fa:	7dfb      	ldrb	r3, [r7, #23]
 80355fc:	e002      	b.n	8035604 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80355fe:	2303      	movs	r3, #3
 8035600:	e000      	b.n	8035604 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8035602:	2300      	movs	r3, #0
}
 8035604:	4618      	mov	r0, r3
 8035606:	3718      	adds	r7, #24
 8035608:	46bd      	mov	sp, r7
 803560a:	bd80      	pop	{r7, pc}

0803560c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 803560c:	b580      	push	{r7, lr}
 803560e:	b086      	sub	sp, #24
 8035610:	af00      	add	r7, sp, #0
 8035612:	60f8      	str	r0, [r7, #12]
 8035614:	460b      	mov	r3, r1
 8035616:	607a      	str	r2, [r7, #4]
 8035618:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 803561a:	7afb      	ldrb	r3, [r7, #11]
 803561c:	2b00      	cmp	r3, #0
 803561e:	d16a      	bne.n	80356f6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8035620:	68fb      	ldr	r3, [r7, #12]
 8035622:	3314      	adds	r3, #20
 8035624:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8035626:	68fb      	ldr	r3, [r7, #12]
 8035628:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803562c:	2b02      	cmp	r3, #2
 803562e:	d155      	bne.n	80356dc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8035630:	693b      	ldr	r3, [r7, #16]
 8035632:	689a      	ldr	r2, [r3, #8]
 8035634:	693b      	ldr	r3, [r7, #16]
 8035636:	68db      	ldr	r3, [r3, #12]
 8035638:	429a      	cmp	r2, r3
 803563a:	d914      	bls.n	8035666 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 803563c:	693b      	ldr	r3, [r7, #16]
 803563e:	689a      	ldr	r2, [r3, #8]
 8035640:	693b      	ldr	r3, [r7, #16]
 8035642:	68db      	ldr	r3, [r3, #12]
 8035644:	1ad2      	subs	r2, r2, r3
 8035646:	693b      	ldr	r3, [r7, #16]
 8035648:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 803564a:	693b      	ldr	r3, [r7, #16]
 803564c:	689b      	ldr	r3, [r3, #8]
 803564e:	461a      	mov	r2, r3
 8035650:	6879      	ldr	r1, [r7, #4]
 8035652:	68f8      	ldr	r0, [r7, #12]
 8035654:	f000 ff2f 	bl	80364b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8035658:	2300      	movs	r3, #0
 803565a:	2200      	movs	r2, #0
 803565c:	2100      	movs	r1, #0
 803565e:	68f8      	ldr	r0, [r7, #12]
 8035660:	f001 fc48 	bl	8036ef4 <USBD_LL_PrepareReceive>
 8035664:	e03a      	b.n	80356dc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8035666:	693b      	ldr	r3, [r7, #16]
 8035668:	68da      	ldr	r2, [r3, #12]
 803566a:	693b      	ldr	r3, [r7, #16]
 803566c:	689b      	ldr	r3, [r3, #8]
 803566e:	429a      	cmp	r2, r3
 8035670:	d11c      	bne.n	80356ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8035672:	693b      	ldr	r3, [r7, #16]
 8035674:	685a      	ldr	r2, [r3, #4]
 8035676:	693b      	ldr	r3, [r7, #16]
 8035678:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 803567a:	429a      	cmp	r2, r3
 803567c:	d316      	bcc.n	80356ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 803567e:	693b      	ldr	r3, [r7, #16]
 8035680:	685a      	ldr	r2, [r3, #4]
 8035682:	68fb      	ldr	r3, [r7, #12]
 8035684:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8035688:	429a      	cmp	r2, r3
 803568a:	d20f      	bcs.n	80356ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 803568c:	2200      	movs	r2, #0
 803568e:	2100      	movs	r1, #0
 8035690:	68f8      	ldr	r0, [r7, #12]
 8035692:	f000 ff10 	bl	80364b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8035696:	68fb      	ldr	r3, [r7, #12]
 8035698:	2200      	movs	r2, #0
 803569a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803569e:	2300      	movs	r3, #0
 80356a0:	2200      	movs	r2, #0
 80356a2:	2100      	movs	r1, #0
 80356a4:	68f8      	ldr	r0, [r7, #12]
 80356a6:	f001 fc25 	bl	8036ef4 <USBD_LL_PrepareReceive>
 80356aa:	e017      	b.n	80356dc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80356ac:	68fb      	ldr	r3, [r7, #12]
 80356ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80356b2:	68db      	ldr	r3, [r3, #12]
 80356b4:	2b00      	cmp	r3, #0
 80356b6:	d00a      	beq.n	80356ce <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80356b8:	68fb      	ldr	r3, [r7, #12]
 80356ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80356be:	2b03      	cmp	r3, #3
 80356c0:	d105      	bne.n	80356ce <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80356c2:	68fb      	ldr	r3, [r7, #12]
 80356c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80356c8:	68db      	ldr	r3, [r3, #12]
 80356ca:	68f8      	ldr	r0, [r7, #12]
 80356cc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80356ce:	2180      	movs	r1, #128	; 0x80
 80356d0:	68f8      	ldr	r0, [r7, #12]
 80356d2:	f001 fb65 	bl	8036da0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80356d6:	68f8      	ldr	r0, [r7, #12]
 80356d8:	f000 ff3f 	bl	803655a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80356dc:	68fb      	ldr	r3, [r7, #12]
 80356de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80356e2:	2b01      	cmp	r3, #1
 80356e4:	d123      	bne.n	803572e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80356e6:	68f8      	ldr	r0, [r7, #12]
 80356e8:	f7ff fe99 	bl	803541e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80356ec:	68fb      	ldr	r3, [r7, #12]
 80356ee:	2200      	movs	r2, #0
 80356f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80356f4:	e01b      	b.n	803572e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80356f6:	68fb      	ldr	r3, [r7, #12]
 80356f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80356fc:	695b      	ldr	r3, [r3, #20]
 80356fe:	2b00      	cmp	r3, #0
 8035700:	d013      	beq.n	803572a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8035702:	68fb      	ldr	r3, [r7, #12]
 8035704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8035708:	2b03      	cmp	r3, #3
 803570a:	d10e      	bne.n	803572a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 803570c:	68fb      	ldr	r3, [r7, #12]
 803570e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035712:	695b      	ldr	r3, [r3, #20]
 8035714:	7afa      	ldrb	r2, [r7, #11]
 8035716:	4611      	mov	r1, r2
 8035718:	68f8      	ldr	r0, [r7, #12]
 803571a:	4798      	blx	r3
 803571c:	4603      	mov	r3, r0
 803571e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8035720:	7dfb      	ldrb	r3, [r7, #23]
 8035722:	2b00      	cmp	r3, #0
 8035724:	d003      	beq.n	803572e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8035726:	7dfb      	ldrb	r3, [r7, #23]
 8035728:	e002      	b.n	8035730 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 803572a:	2303      	movs	r3, #3
 803572c:	e000      	b.n	8035730 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 803572e:	2300      	movs	r3, #0
}
 8035730:	4618      	mov	r0, r3
 8035732:	3718      	adds	r7, #24
 8035734:	46bd      	mov	sp, r7
 8035736:	bd80      	pop	{r7, pc}

08035738 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8035738:	b580      	push	{r7, lr}
 803573a:	b082      	sub	sp, #8
 803573c:	af00      	add	r7, sp, #0
 803573e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8035740:	687b      	ldr	r3, [r7, #4]
 8035742:	2201      	movs	r2, #1
 8035744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8035748:	687b      	ldr	r3, [r7, #4]
 803574a:	2200      	movs	r2, #0
 803574c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8035750:	687b      	ldr	r3, [r7, #4]
 8035752:	2200      	movs	r2, #0
 8035754:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8035756:	687b      	ldr	r3, [r7, #4]
 8035758:	2200      	movs	r2, #0
 803575a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 803575e:	687b      	ldr	r3, [r7, #4]
 8035760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035764:	2b00      	cmp	r3, #0
 8035766:	d009      	beq.n	803577c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8035768:	687b      	ldr	r3, [r7, #4]
 803576a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803576e:	685b      	ldr	r3, [r3, #4]
 8035770:	687a      	ldr	r2, [r7, #4]
 8035772:	6852      	ldr	r2, [r2, #4]
 8035774:	b2d2      	uxtb	r2, r2
 8035776:	4611      	mov	r1, r2
 8035778:	6878      	ldr	r0, [r7, #4]
 803577a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803577c:	2340      	movs	r3, #64	; 0x40
 803577e:	2200      	movs	r2, #0
 8035780:	2100      	movs	r1, #0
 8035782:	6878      	ldr	r0, [r7, #4]
 8035784:	f001 fac7 	bl	8036d16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8035788:	687b      	ldr	r3, [r7, #4]
 803578a:	2201      	movs	r2, #1
 803578c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8035790:	687b      	ldr	r3, [r7, #4]
 8035792:	2240      	movs	r2, #64	; 0x40
 8035794:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8035798:	2340      	movs	r3, #64	; 0x40
 803579a:	2200      	movs	r2, #0
 803579c:	2180      	movs	r1, #128	; 0x80
 803579e:	6878      	ldr	r0, [r7, #4]
 80357a0:	f001 fab9 	bl	8036d16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80357a4:	687b      	ldr	r3, [r7, #4]
 80357a6:	2201      	movs	r2, #1
 80357a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80357aa:	687b      	ldr	r3, [r7, #4]
 80357ac:	2240      	movs	r2, #64	; 0x40
 80357ae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80357b0:	2300      	movs	r3, #0
}
 80357b2:	4618      	mov	r0, r3
 80357b4:	3708      	adds	r7, #8
 80357b6:	46bd      	mov	sp, r7
 80357b8:	bd80      	pop	{r7, pc}

080357ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80357ba:	b480      	push	{r7}
 80357bc:	b083      	sub	sp, #12
 80357be:	af00      	add	r7, sp, #0
 80357c0:	6078      	str	r0, [r7, #4]
 80357c2:	460b      	mov	r3, r1
 80357c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80357c6:	687b      	ldr	r3, [r7, #4]
 80357c8:	78fa      	ldrb	r2, [r7, #3]
 80357ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80357cc:	2300      	movs	r3, #0
}
 80357ce:	4618      	mov	r0, r3
 80357d0:	370c      	adds	r7, #12
 80357d2:	46bd      	mov	sp, r7
 80357d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80357d8:	4770      	bx	lr

080357da <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80357da:	b480      	push	{r7}
 80357dc:	b083      	sub	sp, #12
 80357de:	af00      	add	r7, sp, #0
 80357e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80357e2:	687b      	ldr	r3, [r7, #4]
 80357e4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80357e8:	687b      	ldr	r3, [r7, #4]
 80357ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80357ee:	687b      	ldr	r3, [r7, #4]
 80357f0:	2204      	movs	r2, #4
 80357f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80357f6:	2300      	movs	r3, #0
}
 80357f8:	4618      	mov	r0, r3
 80357fa:	370c      	adds	r7, #12
 80357fc:	46bd      	mov	sp, r7
 80357fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035802:	4770      	bx	lr

08035804 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8035804:	b480      	push	{r7}
 8035806:	b083      	sub	sp, #12
 8035808:	af00      	add	r7, sp, #0
 803580a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 803580c:	687b      	ldr	r3, [r7, #4]
 803580e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8035812:	2b04      	cmp	r3, #4
 8035814:	d105      	bne.n	8035822 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8035816:	687b      	ldr	r3, [r7, #4]
 8035818:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 803581c:	687b      	ldr	r3, [r7, #4]
 803581e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8035822:	2300      	movs	r3, #0
}
 8035824:	4618      	mov	r0, r3
 8035826:	370c      	adds	r7, #12
 8035828:	46bd      	mov	sp, r7
 803582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803582e:	4770      	bx	lr

08035830 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8035830:	b580      	push	{r7, lr}
 8035832:	b082      	sub	sp, #8
 8035834:	af00      	add	r7, sp, #0
 8035836:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8035838:	687b      	ldr	r3, [r7, #4]
 803583a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803583e:	2b03      	cmp	r3, #3
 8035840:	d10b      	bne.n	803585a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8035842:	687b      	ldr	r3, [r7, #4]
 8035844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035848:	69db      	ldr	r3, [r3, #28]
 803584a:	2b00      	cmp	r3, #0
 803584c:	d005      	beq.n	803585a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 803584e:	687b      	ldr	r3, [r7, #4]
 8035850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035854:	69db      	ldr	r3, [r3, #28]
 8035856:	6878      	ldr	r0, [r7, #4]
 8035858:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803585a:	2300      	movs	r3, #0
}
 803585c:	4618      	mov	r0, r3
 803585e:	3708      	adds	r7, #8
 8035860:	46bd      	mov	sp, r7
 8035862:	bd80      	pop	{r7, pc}

08035864 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8035864:	b480      	push	{r7}
 8035866:	b083      	sub	sp, #12
 8035868:	af00      	add	r7, sp, #0
 803586a:	6078      	str	r0, [r7, #4]
 803586c:	460b      	mov	r3, r1
 803586e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8035870:	2300      	movs	r3, #0
}
 8035872:	4618      	mov	r0, r3
 8035874:	370c      	adds	r7, #12
 8035876:	46bd      	mov	sp, r7
 8035878:	f85d 7b04 	ldr.w	r7, [sp], #4
 803587c:	4770      	bx	lr

0803587e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 803587e:	b480      	push	{r7}
 8035880:	b083      	sub	sp, #12
 8035882:	af00      	add	r7, sp, #0
 8035884:	6078      	str	r0, [r7, #4]
 8035886:	460b      	mov	r3, r1
 8035888:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 803588a:	2300      	movs	r3, #0
}
 803588c:	4618      	mov	r0, r3
 803588e:	370c      	adds	r7, #12
 8035890:	46bd      	mov	sp, r7
 8035892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035896:	4770      	bx	lr

08035898 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8035898:	b480      	push	{r7}
 803589a:	b083      	sub	sp, #12
 803589c:	af00      	add	r7, sp, #0
 803589e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80358a0:	2300      	movs	r3, #0
}
 80358a2:	4618      	mov	r0, r3
 80358a4:	370c      	adds	r7, #12
 80358a6:	46bd      	mov	sp, r7
 80358a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80358ac:	4770      	bx	lr

080358ae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80358ae:	b580      	push	{r7, lr}
 80358b0:	b082      	sub	sp, #8
 80358b2:	af00      	add	r7, sp, #0
 80358b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80358b6:	687b      	ldr	r3, [r7, #4]
 80358b8:	2201      	movs	r2, #1
 80358ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80358be:	687b      	ldr	r3, [r7, #4]
 80358c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80358c4:	2b00      	cmp	r3, #0
 80358c6:	d009      	beq.n	80358dc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80358c8:	687b      	ldr	r3, [r7, #4]
 80358ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80358ce:	685b      	ldr	r3, [r3, #4]
 80358d0:	687a      	ldr	r2, [r7, #4]
 80358d2:	6852      	ldr	r2, [r2, #4]
 80358d4:	b2d2      	uxtb	r2, r2
 80358d6:	4611      	mov	r1, r2
 80358d8:	6878      	ldr	r0, [r7, #4]
 80358da:	4798      	blx	r3
  }

  return USBD_OK;
 80358dc:	2300      	movs	r3, #0
}
 80358de:	4618      	mov	r0, r3
 80358e0:	3708      	adds	r7, #8
 80358e2:	46bd      	mov	sp, r7
 80358e4:	bd80      	pop	{r7, pc}

080358e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80358e6:	b480      	push	{r7}
 80358e8:	b087      	sub	sp, #28
 80358ea:	af00      	add	r7, sp, #0
 80358ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80358ee:	687b      	ldr	r3, [r7, #4]
 80358f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80358f2:	697b      	ldr	r3, [r7, #20]
 80358f4:	781b      	ldrb	r3, [r3, #0]
 80358f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80358f8:	697b      	ldr	r3, [r7, #20]
 80358fa:	3301      	adds	r3, #1
 80358fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80358fe:	697b      	ldr	r3, [r7, #20]
 8035900:	781b      	ldrb	r3, [r3, #0]
 8035902:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8035904:	8a3b      	ldrh	r3, [r7, #16]
 8035906:	021b      	lsls	r3, r3, #8
 8035908:	b21a      	sxth	r2, r3
 803590a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803590e:	4313      	orrs	r3, r2
 8035910:	b21b      	sxth	r3, r3
 8035912:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8035914:	89fb      	ldrh	r3, [r7, #14]
}
 8035916:	4618      	mov	r0, r3
 8035918:	371c      	adds	r7, #28
 803591a:	46bd      	mov	sp, r7
 803591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035920:	4770      	bx	lr
	...

08035924 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8035924:	b580      	push	{r7, lr}
 8035926:	b084      	sub	sp, #16
 8035928:	af00      	add	r7, sp, #0
 803592a:	6078      	str	r0, [r7, #4]
 803592c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803592e:	2300      	movs	r3, #0
 8035930:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8035932:	683b      	ldr	r3, [r7, #0]
 8035934:	781b      	ldrb	r3, [r3, #0]
 8035936:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803593a:	2b40      	cmp	r3, #64	; 0x40
 803593c:	d005      	beq.n	803594a <USBD_StdDevReq+0x26>
 803593e:	2b40      	cmp	r3, #64	; 0x40
 8035940:	d853      	bhi.n	80359ea <USBD_StdDevReq+0xc6>
 8035942:	2b00      	cmp	r3, #0
 8035944:	d00b      	beq.n	803595e <USBD_StdDevReq+0x3a>
 8035946:	2b20      	cmp	r3, #32
 8035948:	d14f      	bne.n	80359ea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 803594a:	687b      	ldr	r3, [r7, #4]
 803594c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035950:	689b      	ldr	r3, [r3, #8]
 8035952:	6839      	ldr	r1, [r7, #0]
 8035954:	6878      	ldr	r0, [r7, #4]
 8035956:	4798      	blx	r3
 8035958:	4603      	mov	r3, r0
 803595a:	73fb      	strb	r3, [r7, #15]
    break;
 803595c:	e04a      	b.n	80359f4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 803595e:	683b      	ldr	r3, [r7, #0]
 8035960:	785b      	ldrb	r3, [r3, #1]
 8035962:	2b09      	cmp	r3, #9
 8035964:	d83b      	bhi.n	80359de <USBD_StdDevReq+0xba>
 8035966:	a201      	add	r2, pc, #4	; (adr r2, 803596c <USBD_StdDevReq+0x48>)
 8035968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803596c:	080359c1 	.word	0x080359c1
 8035970:	080359d5 	.word	0x080359d5
 8035974:	080359df 	.word	0x080359df
 8035978:	080359cb 	.word	0x080359cb
 803597c:	080359df 	.word	0x080359df
 8035980:	0803599f 	.word	0x0803599f
 8035984:	08035995 	.word	0x08035995
 8035988:	080359df 	.word	0x080359df
 803598c:	080359b7 	.word	0x080359b7
 8035990:	080359a9 	.word	0x080359a9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8035994:	6839      	ldr	r1, [r7, #0]
 8035996:	6878      	ldr	r0, [r7, #4]
 8035998:	f000 f9d8 	bl	8035d4c <USBD_GetDescriptor>
      break;
 803599c:	e024      	b.n	80359e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 803599e:	6839      	ldr	r1, [r7, #0]
 80359a0:	6878      	ldr	r0, [r7, #4]
 80359a2:	f000 fb3d 	bl	8036020 <USBD_SetAddress>
      break;
 80359a6:	e01f      	b.n	80359e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80359a8:	6839      	ldr	r1, [r7, #0]
 80359aa:	6878      	ldr	r0, [r7, #4]
 80359ac:	f000 fb7c 	bl	80360a8 <USBD_SetConfig>
 80359b0:	4603      	mov	r3, r0
 80359b2:	73fb      	strb	r3, [r7, #15]
      break;
 80359b4:	e018      	b.n	80359e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80359b6:	6839      	ldr	r1, [r7, #0]
 80359b8:	6878      	ldr	r0, [r7, #4]
 80359ba:	f000 fc19 	bl	80361f0 <USBD_GetConfig>
      break;
 80359be:	e013      	b.n	80359e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80359c0:	6839      	ldr	r1, [r7, #0]
 80359c2:	6878      	ldr	r0, [r7, #4]
 80359c4:	f000 fc49 	bl	803625a <USBD_GetStatus>
      break;
 80359c8:	e00e      	b.n	80359e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80359ca:	6839      	ldr	r1, [r7, #0]
 80359cc:	6878      	ldr	r0, [r7, #4]
 80359ce:	f000 fc77 	bl	80362c0 <USBD_SetFeature>
      break;
 80359d2:	e009      	b.n	80359e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80359d4:	6839      	ldr	r1, [r7, #0]
 80359d6:	6878      	ldr	r0, [r7, #4]
 80359d8:	f000 fc86 	bl	80362e8 <USBD_ClrFeature>
      break;
 80359dc:	e004      	b.n	80359e8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80359de:	6839      	ldr	r1, [r7, #0]
 80359e0:	6878      	ldr	r0, [r7, #4]
 80359e2:	f000 fcdc 	bl	803639e <USBD_CtlError>
      break;
 80359e6:	bf00      	nop
    }
    break;
 80359e8:	e004      	b.n	80359f4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80359ea:	6839      	ldr	r1, [r7, #0]
 80359ec:	6878      	ldr	r0, [r7, #4]
 80359ee:	f000 fcd6 	bl	803639e <USBD_CtlError>
    break;
 80359f2:	bf00      	nop
  }

  return ret;
 80359f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80359f6:	4618      	mov	r0, r3
 80359f8:	3710      	adds	r7, #16
 80359fa:	46bd      	mov	sp, r7
 80359fc:	bd80      	pop	{r7, pc}
 80359fe:	bf00      	nop

08035a00 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8035a00:	b580      	push	{r7, lr}
 8035a02:	b084      	sub	sp, #16
 8035a04:	af00      	add	r7, sp, #0
 8035a06:	6078      	str	r0, [r7, #4]
 8035a08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8035a0a:	2300      	movs	r3, #0
 8035a0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8035a0e:	683b      	ldr	r3, [r7, #0]
 8035a10:	781b      	ldrb	r3, [r3, #0]
 8035a12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8035a16:	2b40      	cmp	r3, #64	; 0x40
 8035a18:	d005      	beq.n	8035a26 <USBD_StdItfReq+0x26>
 8035a1a:	2b40      	cmp	r3, #64	; 0x40
 8035a1c:	d82e      	bhi.n	8035a7c <USBD_StdItfReq+0x7c>
 8035a1e:	2b00      	cmp	r3, #0
 8035a20:	d001      	beq.n	8035a26 <USBD_StdItfReq+0x26>
 8035a22:	2b20      	cmp	r3, #32
 8035a24:	d12a      	bne.n	8035a7c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8035a26:	687b      	ldr	r3, [r7, #4]
 8035a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8035a2c:	3b01      	subs	r3, #1
 8035a2e:	2b02      	cmp	r3, #2
 8035a30:	d81d      	bhi.n	8035a6e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8035a32:	683b      	ldr	r3, [r7, #0]
 8035a34:	889b      	ldrh	r3, [r3, #4]
 8035a36:	b2db      	uxtb	r3, r3
 8035a38:	2b01      	cmp	r3, #1
 8035a3a:	d813      	bhi.n	8035a64 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8035a3c:	687b      	ldr	r3, [r7, #4]
 8035a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035a42:	689b      	ldr	r3, [r3, #8]
 8035a44:	6839      	ldr	r1, [r7, #0]
 8035a46:	6878      	ldr	r0, [r7, #4]
 8035a48:	4798      	blx	r3
 8035a4a:	4603      	mov	r3, r0
 8035a4c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8035a4e:	683b      	ldr	r3, [r7, #0]
 8035a50:	88db      	ldrh	r3, [r3, #6]
 8035a52:	2b00      	cmp	r3, #0
 8035a54:	d110      	bne.n	8035a78 <USBD_StdItfReq+0x78>
 8035a56:	7bfb      	ldrb	r3, [r7, #15]
 8035a58:	2b00      	cmp	r3, #0
 8035a5a:	d10d      	bne.n	8035a78 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8035a5c:	6878      	ldr	r0, [r7, #4]
 8035a5e:	f000 fd69 	bl	8036534 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8035a62:	e009      	b.n	8035a78 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8035a64:	6839      	ldr	r1, [r7, #0]
 8035a66:	6878      	ldr	r0, [r7, #4]
 8035a68:	f000 fc99 	bl	803639e <USBD_CtlError>
      break;
 8035a6c:	e004      	b.n	8035a78 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8035a6e:	6839      	ldr	r1, [r7, #0]
 8035a70:	6878      	ldr	r0, [r7, #4]
 8035a72:	f000 fc94 	bl	803639e <USBD_CtlError>
      break;
 8035a76:	e000      	b.n	8035a7a <USBD_StdItfReq+0x7a>
      break;
 8035a78:	bf00      	nop
    }
    break;
 8035a7a:	e004      	b.n	8035a86 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8035a7c:	6839      	ldr	r1, [r7, #0]
 8035a7e:	6878      	ldr	r0, [r7, #4]
 8035a80:	f000 fc8d 	bl	803639e <USBD_CtlError>
    break;
 8035a84:	bf00      	nop
  }

  return ret;
 8035a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8035a88:	4618      	mov	r0, r3
 8035a8a:	3710      	adds	r7, #16
 8035a8c:	46bd      	mov	sp, r7
 8035a8e:	bd80      	pop	{r7, pc}

08035a90 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8035a90:	b580      	push	{r7, lr}
 8035a92:	b084      	sub	sp, #16
 8035a94:	af00      	add	r7, sp, #0
 8035a96:	6078      	str	r0, [r7, #4]
 8035a98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8035a9a:	2300      	movs	r3, #0
 8035a9c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8035a9e:	683b      	ldr	r3, [r7, #0]
 8035aa0:	889b      	ldrh	r3, [r3, #4]
 8035aa2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8035aa4:	683b      	ldr	r3, [r7, #0]
 8035aa6:	781b      	ldrb	r3, [r3, #0]
 8035aa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8035aac:	2b40      	cmp	r3, #64	; 0x40
 8035aae:	d007      	beq.n	8035ac0 <USBD_StdEPReq+0x30>
 8035ab0:	2b40      	cmp	r3, #64	; 0x40
 8035ab2:	f200 8140 	bhi.w	8035d36 <USBD_StdEPReq+0x2a6>
 8035ab6:	2b00      	cmp	r3, #0
 8035ab8:	d00c      	beq.n	8035ad4 <USBD_StdEPReq+0x44>
 8035aba:	2b20      	cmp	r3, #32
 8035abc:	f040 813b 	bne.w	8035d36 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8035ac0:	687b      	ldr	r3, [r7, #4]
 8035ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035ac6:	689b      	ldr	r3, [r3, #8]
 8035ac8:	6839      	ldr	r1, [r7, #0]
 8035aca:	6878      	ldr	r0, [r7, #4]
 8035acc:	4798      	blx	r3
 8035ace:	4603      	mov	r3, r0
 8035ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8035ad2:	e135      	b.n	8035d40 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8035ad4:	683b      	ldr	r3, [r7, #0]
 8035ad6:	785b      	ldrb	r3, [r3, #1]
 8035ad8:	2b03      	cmp	r3, #3
 8035ada:	d007      	beq.n	8035aec <USBD_StdEPReq+0x5c>
 8035adc:	2b03      	cmp	r3, #3
 8035ade:	f300 8124 	bgt.w	8035d2a <USBD_StdEPReq+0x29a>
 8035ae2:	2b00      	cmp	r3, #0
 8035ae4:	d07b      	beq.n	8035bde <USBD_StdEPReq+0x14e>
 8035ae6:	2b01      	cmp	r3, #1
 8035ae8:	d03b      	beq.n	8035b62 <USBD_StdEPReq+0xd2>
 8035aea:	e11e      	b.n	8035d2a <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8035aec:	687b      	ldr	r3, [r7, #4]
 8035aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8035af2:	2b02      	cmp	r3, #2
 8035af4:	d002      	beq.n	8035afc <USBD_StdEPReq+0x6c>
 8035af6:	2b03      	cmp	r3, #3
 8035af8:	d016      	beq.n	8035b28 <USBD_StdEPReq+0x98>
 8035afa:	e02c      	b.n	8035b56 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8035afc:	7bbb      	ldrb	r3, [r7, #14]
 8035afe:	2b00      	cmp	r3, #0
 8035b00:	d00d      	beq.n	8035b1e <USBD_StdEPReq+0x8e>
 8035b02:	7bbb      	ldrb	r3, [r7, #14]
 8035b04:	2b80      	cmp	r3, #128	; 0x80
 8035b06:	d00a      	beq.n	8035b1e <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8035b08:	7bbb      	ldrb	r3, [r7, #14]
 8035b0a:	4619      	mov	r1, r3
 8035b0c:	6878      	ldr	r0, [r7, #4]
 8035b0e:	f001 f947 	bl	8036da0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8035b12:	2180      	movs	r1, #128	; 0x80
 8035b14:	6878      	ldr	r0, [r7, #4]
 8035b16:	f001 f943 	bl	8036da0 <USBD_LL_StallEP>
 8035b1a:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8035b1c:	e020      	b.n	8035b60 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8035b1e:	6839      	ldr	r1, [r7, #0]
 8035b20:	6878      	ldr	r0, [r7, #4]
 8035b22:	f000 fc3c 	bl	803639e <USBD_CtlError>
        break;
 8035b26:	e01b      	b.n	8035b60 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8035b28:	683b      	ldr	r3, [r7, #0]
 8035b2a:	885b      	ldrh	r3, [r3, #2]
 8035b2c:	2b00      	cmp	r3, #0
 8035b2e:	d10e      	bne.n	8035b4e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8035b30:	7bbb      	ldrb	r3, [r7, #14]
 8035b32:	2b00      	cmp	r3, #0
 8035b34:	d00b      	beq.n	8035b4e <USBD_StdEPReq+0xbe>
 8035b36:	7bbb      	ldrb	r3, [r7, #14]
 8035b38:	2b80      	cmp	r3, #128	; 0x80
 8035b3a:	d008      	beq.n	8035b4e <USBD_StdEPReq+0xbe>
 8035b3c:	683b      	ldr	r3, [r7, #0]
 8035b3e:	88db      	ldrh	r3, [r3, #6]
 8035b40:	2b00      	cmp	r3, #0
 8035b42:	d104      	bne.n	8035b4e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8035b44:	7bbb      	ldrb	r3, [r7, #14]
 8035b46:	4619      	mov	r1, r3
 8035b48:	6878      	ldr	r0, [r7, #4]
 8035b4a:	f001 f929 	bl	8036da0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8035b4e:	6878      	ldr	r0, [r7, #4]
 8035b50:	f000 fcf0 	bl	8036534 <USBD_CtlSendStatus>

        break;
 8035b54:	e004      	b.n	8035b60 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8035b56:	6839      	ldr	r1, [r7, #0]
 8035b58:	6878      	ldr	r0, [r7, #4]
 8035b5a:	f000 fc20 	bl	803639e <USBD_CtlError>
        break;
 8035b5e:	bf00      	nop
      }
      break;
 8035b60:	e0e8      	b.n	8035d34 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8035b62:	687b      	ldr	r3, [r7, #4]
 8035b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8035b68:	2b02      	cmp	r3, #2
 8035b6a:	d002      	beq.n	8035b72 <USBD_StdEPReq+0xe2>
 8035b6c:	2b03      	cmp	r3, #3
 8035b6e:	d016      	beq.n	8035b9e <USBD_StdEPReq+0x10e>
 8035b70:	e02e      	b.n	8035bd0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8035b72:	7bbb      	ldrb	r3, [r7, #14]
 8035b74:	2b00      	cmp	r3, #0
 8035b76:	d00d      	beq.n	8035b94 <USBD_StdEPReq+0x104>
 8035b78:	7bbb      	ldrb	r3, [r7, #14]
 8035b7a:	2b80      	cmp	r3, #128	; 0x80
 8035b7c:	d00a      	beq.n	8035b94 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8035b7e:	7bbb      	ldrb	r3, [r7, #14]
 8035b80:	4619      	mov	r1, r3
 8035b82:	6878      	ldr	r0, [r7, #4]
 8035b84:	f001 f90c 	bl	8036da0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8035b88:	2180      	movs	r1, #128	; 0x80
 8035b8a:	6878      	ldr	r0, [r7, #4]
 8035b8c:	f001 f908 	bl	8036da0 <USBD_LL_StallEP>
 8035b90:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8035b92:	e023      	b.n	8035bdc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8035b94:	6839      	ldr	r1, [r7, #0]
 8035b96:	6878      	ldr	r0, [r7, #4]
 8035b98:	f000 fc01 	bl	803639e <USBD_CtlError>
        break;
 8035b9c:	e01e      	b.n	8035bdc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8035b9e:	683b      	ldr	r3, [r7, #0]
 8035ba0:	885b      	ldrh	r3, [r3, #2]
 8035ba2:	2b00      	cmp	r3, #0
 8035ba4:	d119      	bne.n	8035bda <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8035ba6:	7bbb      	ldrb	r3, [r7, #14]
 8035ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8035bac:	2b00      	cmp	r3, #0
 8035bae:	d004      	beq.n	8035bba <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8035bb0:	7bbb      	ldrb	r3, [r7, #14]
 8035bb2:	4619      	mov	r1, r3
 8035bb4:	6878      	ldr	r0, [r7, #4]
 8035bb6:	f001 f912 	bl	8036dde <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8035bba:	6878      	ldr	r0, [r7, #4]
 8035bbc:	f000 fcba 	bl	8036534 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8035bc0:	687b      	ldr	r3, [r7, #4]
 8035bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035bc6:	689b      	ldr	r3, [r3, #8]
 8035bc8:	6839      	ldr	r1, [r7, #0]
 8035bca:	6878      	ldr	r0, [r7, #4]
 8035bcc:	4798      	blx	r3
        }
        break;
 8035bce:	e004      	b.n	8035bda <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8035bd0:	6839      	ldr	r1, [r7, #0]
 8035bd2:	6878      	ldr	r0, [r7, #4]
 8035bd4:	f000 fbe3 	bl	803639e <USBD_CtlError>
        break;
 8035bd8:	e000      	b.n	8035bdc <USBD_StdEPReq+0x14c>
        break;
 8035bda:	bf00      	nop
      }
      break;
 8035bdc:	e0aa      	b.n	8035d34 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8035bde:	687b      	ldr	r3, [r7, #4]
 8035be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8035be4:	2b02      	cmp	r3, #2
 8035be6:	d002      	beq.n	8035bee <USBD_StdEPReq+0x15e>
 8035be8:	2b03      	cmp	r3, #3
 8035bea:	d032      	beq.n	8035c52 <USBD_StdEPReq+0x1c2>
 8035bec:	e097      	b.n	8035d1e <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8035bee:	7bbb      	ldrb	r3, [r7, #14]
 8035bf0:	2b00      	cmp	r3, #0
 8035bf2:	d007      	beq.n	8035c04 <USBD_StdEPReq+0x174>
 8035bf4:	7bbb      	ldrb	r3, [r7, #14]
 8035bf6:	2b80      	cmp	r3, #128	; 0x80
 8035bf8:	d004      	beq.n	8035c04 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8035bfa:	6839      	ldr	r1, [r7, #0]
 8035bfc:	6878      	ldr	r0, [r7, #4]
 8035bfe:	f000 fbce 	bl	803639e <USBD_CtlError>
          break;
 8035c02:	e091      	b.n	8035d28 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8035c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8035c08:	2b00      	cmp	r3, #0
 8035c0a:	da0b      	bge.n	8035c24 <USBD_StdEPReq+0x194>
 8035c0c:	7bbb      	ldrb	r3, [r7, #14]
 8035c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8035c12:	4613      	mov	r3, r2
 8035c14:	009b      	lsls	r3, r3, #2
 8035c16:	4413      	add	r3, r2
 8035c18:	009b      	lsls	r3, r3, #2
 8035c1a:	3310      	adds	r3, #16
 8035c1c:	687a      	ldr	r2, [r7, #4]
 8035c1e:	4413      	add	r3, r2
 8035c20:	3304      	adds	r3, #4
 8035c22:	e00b      	b.n	8035c3c <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8035c24:	7bbb      	ldrb	r3, [r7, #14]
 8035c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8035c2a:	4613      	mov	r3, r2
 8035c2c:	009b      	lsls	r3, r3, #2
 8035c2e:	4413      	add	r3, r2
 8035c30:	009b      	lsls	r3, r3, #2
 8035c32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8035c36:	687a      	ldr	r2, [r7, #4]
 8035c38:	4413      	add	r3, r2
 8035c3a:	3304      	adds	r3, #4
 8035c3c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8035c3e:	68bb      	ldr	r3, [r7, #8]
 8035c40:	2200      	movs	r2, #0
 8035c42:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8035c44:	68bb      	ldr	r3, [r7, #8]
 8035c46:	2202      	movs	r2, #2
 8035c48:	4619      	mov	r1, r3
 8035c4a:	6878      	ldr	r0, [r7, #4]
 8035c4c:	f000 fc18 	bl	8036480 <USBD_CtlSendData>
        break;
 8035c50:	e06a      	b.n	8035d28 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8035c52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8035c56:	2b00      	cmp	r3, #0
 8035c58:	da11      	bge.n	8035c7e <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8035c5a:	7bbb      	ldrb	r3, [r7, #14]
 8035c5c:	f003 020f 	and.w	r2, r3, #15
 8035c60:	6879      	ldr	r1, [r7, #4]
 8035c62:	4613      	mov	r3, r2
 8035c64:	009b      	lsls	r3, r3, #2
 8035c66:	4413      	add	r3, r2
 8035c68:	009b      	lsls	r3, r3, #2
 8035c6a:	440b      	add	r3, r1
 8035c6c:	3324      	adds	r3, #36	; 0x24
 8035c6e:	881b      	ldrh	r3, [r3, #0]
 8035c70:	2b00      	cmp	r3, #0
 8035c72:	d117      	bne.n	8035ca4 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8035c74:	6839      	ldr	r1, [r7, #0]
 8035c76:	6878      	ldr	r0, [r7, #4]
 8035c78:	f000 fb91 	bl	803639e <USBD_CtlError>
            break;
 8035c7c:	e054      	b.n	8035d28 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8035c7e:	7bbb      	ldrb	r3, [r7, #14]
 8035c80:	f003 020f 	and.w	r2, r3, #15
 8035c84:	6879      	ldr	r1, [r7, #4]
 8035c86:	4613      	mov	r3, r2
 8035c88:	009b      	lsls	r3, r3, #2
 8035c8a:	4413      	add	r3, r2
 8035c8c:	009b      	lsls	r3, r3, #2
 8035c8e:	440b      	add	r3, r1
 8035c90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8035c94:	881b      	ldrh	r3, [r3, #0]
 8035c96:	2b00      	cmp	r3, #0
 8035c98:	d104      	bne.n	8035ca4 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8035c9a:	6839      	ldr	r1, [r7, #0]
 8035c9c:	6878      	ldr	r0, [r7, #4]
 8035c9e:	f000 fb7e 	bl	803639e <USBD_CtlError>
            break;
 8035ca2:	e041      	b.n	8035d28 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8035ca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8035ca8:	2b00      	cmp	r3, #0
 8035caa:	da0b      	bge.n	8035cc4 <USBD_StdEPReq+0x234>
 8035cac:	7bbb      	ldrb	r3, [r7, #14]
 8035cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8035cb2:	4613      	mov	r3, r2
 8035cb4:	009b      	lsls	r3, r3, #2
 8035cb6:	4413      	add	r3, r2
 8035cb8:	009b      	lsls	r3, r3, #2
 8035cba:	3310      	adds	r3, #16
 8035cbc:	687a      	ldr	r2, [r7, #4]
 8035cbe:	4413      	add	r3, r2
 8035cc0:	3304      	adds	r3, #4
 8035cc2:	e00b      	b.n	8035cdc <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8035cc4:	7bbb      	ldrb	r3, [r7, #14]
 8035cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8035cca:	4613      	mov	r3, r2
 8035ccc:	009b      	lsls	r3, r3, #2
 8035cce:	4413      	add	r3, r2
 8035cd0:	009b      	lsls	r3, r3, #2
 8035cd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8035cd6:	687a      	ldr	r2, [r7, #4]
 8035cd8:	4413      	add	r3, r2
 8035cda:	3304      	adds	r3, #4
 8035cdc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8035cde:	7bbb      	ldrb	r3, [r7, #14]
 8035ce0:	2b00      	cmp	r3, #0
 8035ce2:	d002      	beq.n	8035cea <USBD_StdEPReq+0x25a>
 8035ce4:	7bbb      	ldrb	r3, [r7, #14]
 8035ce6:	2b80      	cmp	r3, #128	; 0x80
 8035ce8:	d103      	bne.n	8035cf2 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8035cea:	68bb      	ldr	r3, [r7, #8]
 8035cec:	2200      	movs	r2, #0
 8035cee:	601a      	str	r2, [r3, #0]
 8035cf0:	e00e      	b.n	8035d10 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8035cf2:	7bbb      	ldrb	r3, [r7, #14]
 8035cf4:	4619      	mov	r1, r3
 8035cf6:	6878      	ldr	r0, [r7, #4]
 8035cf8:	f001 f890 	bl	8036e1c <USBD_LL_IsStallEP>
 8035cfc:	4603      	mov	r3, r0
 8035cfe:	2b00      	cmp	r3, #0
 8035d00:	d003      	beq.n	8035d0a <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8035d02:	68bb      	ldr	r3, [r7, #8]
 8035d04:	2201      	movs	r2, #1
 8035d06:	601a      	str	r2, [r3, #0]
 8035d08:	e002      	b.n	8035d10 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8035d0a:	68bb      	ldr	r3, [r7, #8]
 8035d0c:	2200      	movs	r2, #0
 8035d0e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8035d10:	68bb      	ldr	r3, [r7, #8]
 8035d12:	2202      	movs	r2, #2
 8035d14:	4619      	mov	r1, r3
 8035d16:	6878      	ldr	r0, [r7, #4]
 8035d18:	f000 fbb2 	bl	8036480 <USBD_CtlSendData>
          break;
 8035d1c:	e004      	b.n	8035d28 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8035d1e:	6839      	ldr	r1, [r7, #0]
 8035d20:	6878      	ldr	r0, [r7, #4]
 8035d22:	f000 fb3c 	bl	803639e <USBD_CtlError>
        break;
 8035d26:	bf00      	nop
      }
      break;
 8035d28:	e004      	b.n	8035d34 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8035d2a:	6839      	ldr	r1, [r7, #0]
 8035d2c:	6878      	ldr	r0, [r7, #4]
 8035d2e:	f000 fb36 	bl	803639e <USBD_CtlError>
      break;
 8035d32:	bf00      	nop
    }
    break;
 8035d34:	e004      	b.n	8035d40 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8035d36:	6839      	ldr	r1, [r7, #0]
 8035d38:	6878      	ldr	r0, [r7, #4]
 8035d3a:	f000 fb30 	bl	803639e <USBD_CtlError>
    break;
 8035d3e:	bf00      	nop
  }

  return ret;
 8035d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8035d42:	4618      	mov	r0, r3
 8035d44:	3710      	adds	r7, #16
 8035d46:	46bd      	mov	sp, r7
 8035d48:	bd80      	pop	{r7, pc}
	...

08035d4c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8035d4c:	b580      	push	{r7, lr}
 8035d4e:	b084      	sub	sp, #16
 8035d50:	af00      	add	r7, sp, #0
 8035d52:	6078      	str	r0, [r7, #4]
 8035d54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8035d56:	2300      	movs	r3, #0
 8035d58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8035d5a:	2300      	movs	r3, #0
 8035d5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8035d5e:	2300      	movs	r3, #0
 8035d60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8035d62:	683b      	ldr	r3, [r7, #0]
 8035d64:	885b      	ldrh	r3, [r3, #2]
 8035d66:	0a1b      	lsrs	r3, r3, #8
 8035d68:	b29b      	uxth	r3, r3
 8035d6a:	3b01      	subs	r3, #1
 8035d6c:	2b06      	cmp	r3, #6
 8035d6e:	f200 8128 	bhi.w	8035fc2 <USBD_GetDescriptor+0x276>
 8035d72:	a201      	add	r2, pc, #4	; (adr r2, 8035d78 <USBD_GetDescriptor+0x2c>)
 8035d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035d78:	08035d95 	.word	0x08035d95
 8035d7c:	08035dad 	.word	0x08035dad
 8035d80:	08035ded 	.word	0x08035ded
 8035d84:	08035fc3 	.word	0x08035fc3
 8035d88:	08035fc3 	.word	0x08035fc3
 8035d8c:	08035f63 	.word	0x08035f63
 8035d90:	08035f8f 	.word	0x08035f8f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8035d94:	687b      	ldr	r3, [r7, #4]
 8035d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035d9a:	681b      	ldr	r3, [r3, #0]
 8035d9c:	687a      	ldr	r2, [r7, #4]
 8035d9e:	7c12      	ldrb	r2, [r2, #16]
 8035da0:	f107 0108 	add.w	r1, r7, #8
 8035da4:	4610      	mov	r0, r2
 8035da6:	4798      	blx	r3
 8035da8:	60f8      	str	r0, [r7, #12]
    break;
 8035daa:	e112      	b.n	8035fd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8035dac:	687b      	ldr	r3, [r7, #4]
 8035dae:	7c1b      	ldrb	r3, [r3, #16]
 8035db0:	2b00      	cmp	r3, #0
 8035db2:	d10d      	bne.n	8035dd0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8035db4:	687b      	ldr	r3, [r7, #4]
 8035db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035dbc:	f107 0208 	add.w	r2, r7, #8
 8035dc0:	4610      	mov	r0, r2
 8035dc2:	4798      	blx	r3
 8035dc4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8035dc6:	68fb      	ldr	r3, [r7, #12]
 8035dc8:	3301      	adds	r3, #1
 8035dca:	2202      	movs	r2, #2
 8035dcc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8035dce:	e100      	b.n	8035fd2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8035dd0:	687b      	ldr	r3, [r7, #4]
 8035dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035dd8:	f107 0208 	add.w	r2, r7, #8
 8035ddc:	4610      	mov	r0, r2
 8035dde:	4798      	blx	r3
 8035de0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8035de2:	68fb      	ldr	r3, [r7, #12]
 8035de4:	3301      	adds	r3, #1
 8035de6:	2202      	movs	r2, #2
 8035de8:	701a      	strb	r2, [r3, #0]
    break;
 8035dea:	e0f2      	b.n	8035fd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8035dec:	683b      	ldr	r3, [r7, #0]
 8035dee:	885b      	ldrh	r3, [r3, #2]
 8035df0:	b2db      	uxtb	r3, r3
 8035df2:	2b05      	cmp	r3, #5
 8035df4:	f200 80ac 	bhi.w	8035f50 <USBD_GetDescriptor+0x204>
 8035df8:	a201      	add	r2, pc, #4	; (adr r2, 8035e00 <USBD_GetDescriptor+0xb4>)
 8035dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035dfe:	bf00      	nop
 8035e00:	08035e19 	.word	0x08035e19
 8035e04:	08035e4d 	.word	0x08035e4d
 8035e08:	08035e81 	.word	0x08035e81
 8035e0c:	08035eb5 	.word	0x08035eb5
 8035e10:	08035ee9 	.word	0x08035ee9
 8035e14:	08035f1d 	.word	0x08035f1d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8035e18:	687b      	ldr	r3, [r7, #4]
 8035e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035e1e:	685b      	ldr	r3, [r3, #4]
 8035e20:	2b00      	cmp	r3, #0
 8035e22:	d00b      	beq.n	8035e3c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8035e24:	687b      	ldr	r3, [r7, #4]
 8035e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035e2a:	685b      	ldr	r3, [r3, #4]
 8035e2c:	687a      	ldr	r2, [r7, #4]
 8035e2e:	7c12      	ldrb	r2, [r2, #16]
 8035e30:	f107 0108 	add.w	r1, r7, #8
 8035e34:	4610      	mov	r0, r2
 8035e36:	4798      	blx	r3
 8035e38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8035e3a:	e091      	b.n	8035f60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8035e3c:	6839      	ldr	r1, [r7, #0]
 8035e3e:	6878      	ldr	r0, [r7, #4]
 8035e40:	f000 faad 	bl	803639e <USBD_CtlError>
        err++;
 8035e44:	7afb      	ldrb	r3, [r7, #11]
 8035e46:	3301      	adds	r3, #1
 8035e48:	72fb      	strb	r3, [r7, #11]
      break;
 8035e4a:	e089      	b.n	8035f60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8035e4c:	687b      	ldr	r3, [r7, #4]
 8035e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035e52:	689b      	ldr	r3, [r3, #8]
 8035e54:	2b00      	cmp	r3, #0
 8035e56:	d00b      	beq.n	8035e70 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8035e58:	687b      	ldr	r3, [r7, #4]
 8035e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035e5e:	689b      	ldr	r3, [r3, #8]
 8035e60:	687a      	ldr	r2, [r7, #4]
 8035e62:	7c12      	ldrb	r2, [r2, #16]
 8035e64:	f107 0108 	add.w	r1, r7, #8
 8035e68:	4610      	mov	r0, r2
 8035e6a:	4798      	blx	r3
 8035e6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8035e6e:	e077      	b.n	8035f60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8035e70:	6839      	ldr	r1, [r7, #0]
 8035e72:	6878      	ldr	r0, [r7, #4]
 8035e74:	f000 fa93 	bl	803639e <USBD_CtlError>
        err++;
 8035e78:	7afb      	ldrb	r3, [r7, #11]
 8035e7a:	3301      	adds	r3, #1
 8035e7c:	72fb      	strb	r3, [r7, #11]
      break;
 8035e7e:	e06f      	b.n	8035f60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8035e80:	687b      	ldr	r3, [r7, #4]
 8035e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035e86:	68db      	ldr	r3, [r3, #12]
 8035e88:	2b00      	cmp	r3, #0
 8035e8a:	d00b      	beq.n	8035ea4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8035e8c:	687b      	ldr	r3, [r7, #4]
 8035e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035e92:	68db      	ldr	r3, [r3, #12]
 8035e94:	687a      	ldr	r2, [r7, #4]
 8035e96:	7c12      	ldrb	r2, [r2, #16]
 8035e98:	f107 0108 	add.w	r1, r7, #8
 8035e9c:	4610      	mov	r0, r2
 8035e9e:	4798      	blx	r3
 8035ea0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8035ea2:	e05d      	b.n	8035f60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8035ea4:	6839      	ldr	r1, [r7, #0]
 8035ea6:	6878      	ldr	r0, [r7, #4]
 8035ea8:	f000 fa79 	bl	803639e <USBD_CtlError>
        err++;
 8035eac:	7afb      	ldrb	r3, [r7, #11]
 8035eae:	3301      	adds	r3, #1
 8035eb0:	72fb      	strb	r3, [r7, #11]
      break;
 8035eb2:	e055      	b.n	8035f60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8035eb4:	687b      	ldr	r3, [r7, #4]
 8035eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035eba:	691b      	ldr	r3, [r3, #16]
 8035ebc:	2b00      	cmp	r3, #0
 8035ebe:	d00b      	beq.n	8035ed8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8035ec0:	687b      	ldr	r3, [r7, #4]
 8035ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035ec6:	691b      	ldr	r3, [r3, #16]
 8035ec8:	687a      	ldr	r2, [r7, #4]
 8035eca:	7c12      	ldrb	r2, [r2, #16]
 8035ecc:	f107 0108 	add.w	r1, r7, #8
 8035ed0:	4610      	mov	r0, r2
 8035ed2:	4798      	blx	r3
 8035ed4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8035ed6:	e043      	b.n	8035f60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8035ed8:	6839      	ldr	r1, [r7, #0]
 8035eda:	6878      	ldr	r0, [r7, #4]
 8035edc:	f000 fa5f 	bl	803639e <USBD_CtlError>
        err++;
 8035ee0:	7afb      	ldrb	r3, [r7, #11]
 8035ee2:	3301      	adds	r3, #1
 8035ee4:	72fb      	strb	r3, [r7, #11]
      break;
 8035ee6:	e03b      	b.n	8035f60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8035ee8:	687b      	ldr	r3, [r7, #4]
 8035eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035eee:	695b      	ldr	r3, [r3, #20]
 8035ef0:	2b00      	cmp	r3, #0
 8035ef2:	d00b      	beq.n	8035f0c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8035ef4:	687b      	ldr	r3, [r7, #4]
 8035ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035efa:	695b      	ldr	r3, [r3, #20]
 8035efc:	687a      	ldr	r2, [r7, #4]
 8035efe:	7c12      	ldrb	r2, [r2, #16]
 8035f00:	f107 0108 	add.w	r1, r7, #8
 8035f04:	4610      	mov	r0, r2
 8035f06:	4798      	blx	r3
 8035f08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8035f0a:	e029      	b.n	8035f60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8035f0c:	6839      	ldr	r1, [r7, #0]
 8035f0e:	6878      	ldr	r0, [r7, #4]
 8035f10:	f000 fa45 	bl	803639e <USBD_CtlError>
        err++;
 8035f14:	7afb      	ldrb	r3, [r7, #11]
 8035f16:	3301      	adds	r3, #1
 8035f18:	72fb      	strb	r3, [r7, #11]
      break;
 8035f1a:	e021      	b.n	8035f60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8035f1c:	687b      	ldr	r3, [r7, #4]
 8035f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035f22:	699b      	ldr	r3, [r3, #24]
 8035f24:	2b00      	cmp	r3, #0
 8035f26:	d00b      	beq.n	8035f40 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8035f28:	687b      	ldr	r3, [r7, #4]
 8035f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035f2e:	699b      	ldr	r3, [r3, #24]
 8035f30:	687a      	ldr	r2, [r7, #4]
 8035f32:	7c12      	ldrb	r2, [r2, #16]
 8035f34:	f107 0108 	add.w	r1, r7, #8
 8035f38:	4610      	mov	r0, r2
 8035f3a:	4798      	blx	r3
 8035f3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8035f3e:	e00f      	b.n	8035f60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8035f40:	6839      	ldr	r1, [r7, #0]
 8035f42:	6878      	ldr	r0, [r7, #4]
 8035f44:	f000 fa2b 	bl	803639e <USBD_CtlError>
        err++;
 8035f48:	7afb      	ldrb	r3, [r7, #11]
 8035f4a:	3301      	adds	r3, #1
 8035f4c:	72fb      	strb	r3, [r7, #11]
      break;
 8035f4e:	e007      	b.n	8035f60 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8035f50:	6839      	ldr	r1, [r7, #0]
 8035f52:	6878      	ldr	r0, [r7, #4]
 8035f54:	f000 fa23 	bl	803639e <USBD_CtlError>
      err++;
 8035f58:	7afb      	ldrb	r3, [r7, #11]
 8035f5a:	3301      	adds	r3, #1
 8035f5c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8035f5e:	bf00      	nop
    }
    break;
 8035f60:	e037      	b.n	8035fd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8035f62:	687b      	ldr	r3, [r7, #4]
 8035f64:	7c1b      	ldrb	r3, [r3, #16]
 8035f66:	2b00      	cmp	r3, #0
 8035f68:	d109      	bne.n	8035f7e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8035f6a:	687b      	ldr	r3, [r7, #4]
 8035f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8035f72:	f107 0208 	add.w	r2, r7, #8
 8035f76:	4610      	mov	r0, r2
 8035f78:	4798      	blx	r3
 8035f7a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8035f7c:	e029      	b.n	8035fd2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8035f7e:	6839      	ldr	r1, [r7, #0]
 8035f80:	6878      	ldr	r0, [r7, #4]
 8035f82:	f000 fa0c 	bl	803639e <USBD_CtlError>
      err++;
 8035f86:	7afb      	ldrb	r3, [r7, #11]
 8035f88:	3301      	adds	r3, #1
 8035f8a:	72fb      	strb	r3, [r7, #11]
    break;
 8035f8c:	e021      	b.n	8035fd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8035f8e:	687b      	ldr	r3, [r7, #4]
 8035f90:	7c1b      	ldrb	r3, [r3, #16]
 8035f92:	2b00      	cmp	r3, #0
 8035f94:	d10d      	bne.n	8035fb2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8035f96:	687b      	ldr	r3, [r7, #4]
 8035f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035f9e:	f107 0208 	add.w	r2, r7, #8
 8035fa2:	4610      	mov	r0, r2
 8035fa4:	4798      	blx	r3
 8035fa6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8035fa8:	68fb      	ldr	r3, [r7, #12]
 8035faa:	3301      	adds	r3, #1
 8035fac:	2207      	movs	r2, #7
 8035fae:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8035fb0:	e00f      	b.n	8035fd2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8035fb2:	6839      	ldr	r1, [r7, #0]
 8035fb4:	6878      	ldr	r0, [r7, #4]
 8035fb6:	f000 f9f2 	bl	803639e <USBD_CtlError>
      err++;
 8035fba:	7afb      	ldrb	r3, [r7, #11]
 8035fbc:	3301      	adds	r3, #1
 8035fbe:	72fb      	strb	r3, [r7, #11]
    break;
 8035fc0:	e007      	b.n	8035fd2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8035fc2:	6839      	ldr	r1, [r7, #0]
 8035fc4:	6878      	ldr	r0, [r7, #4]
 8035fc6:	f000 f9ea 	bl	803639e <USBD_CtlError>
    err++;
 8035fca:	7afb      	ldrb	r3, [r7, #11]
 8035fcc:	3301      	adds	r3, #1
 8035fce:	72fb      	strb	r3, [r7, #11]
    break;
 8035fd0:	bf00      	nop
  }

  if (err != 0U)
 8035fd2:	7afb      	ldrb	r3, [r7, #11]
 8035fd4:	2b00      	cmp	r3, #0
 8035fd6:	d11e      	bne.n	8036016 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8035fd8:	683b      	ldr	r3, [r7, #0]
 8035fda:	88db      	ldrh	r3, [r3, #6]
 8035fdc:	2b00      	cmp	r3, #0
 8035fde:	d016      	beq.n	803600e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8035fe0:	893b      	ldrh	r3, [r7, #8]
 8035fe2:	2b00      	cmp	r3, #0
 8035fe4:	d00e      	beq.n	8036004 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8035fe6:	683b      	ldr	r3, [r7, #0]
 8035fe8:	88da      	ldrh	r2, [r3, #6]
 8035fea:	893b      	ldrh	r3, [r7, #8]
 8035fec:	4293      	cmp	r3, r2
 8035fee:	bf28      	it	cs
 8035ff0:	4613      	movcs	r3, r2
 8035ff2:	b29b      	uxth	r3, r3
 8035ff4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8035ff6:	893b      	ldrh	r3, [r7, #8]
 8035ff8:	461a      	mov	r2, r3
 8035ffa:	68f9      	ldr	r1, [r7, #12]
 8035ffc:	6878      	ldr	r0, [r7, #4]
 8035ffe:	f000 fa3f 	bl	8036480 <USBD_CtlSendData>
 8036002:	e009      	b.n	8036018 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8036004:	6839      	ldr	r1, [r7, #0]
 8036006:	6878      	ldr	r0, [r7, #4]
 8036008:	f000 f9c9 	bl	803639e <USBD_CtlError>
 803600c:	e004      	b.n	8036018 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 803600e:	6878      	ldr	r0, [r7, #4]
 8036010:	f000 fa90 	bl	8036534 <USBD_CtlSendStatus>
 8036014:	e000      	b.n	8036018 <USBD_GetDescriptor+0x2cc>
    return;
 8036016:	bf00      	nop
    }
  }
}
 8036018:	3710      	adds	r7, #16
 803601a:	46bd      	mov	sp, r7
 803601c:	bd80      	pop	{r7, pc}
 803601e:	bf00      	nop

08036020 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8036020:	b580      	push	{r7, lr}
 8036022:	b084      	sub	sp, #16
 8036024:	af00      	add	r7, sp, #0
 8036026:	6078      	str	r0, [r7, #4]
 8036028:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803602a:	683b      	ldr	r3, [r7, #0]
 803602c:	889b      	ldrh	r3, [r3, #4]
 803602e:	2b00      	cmp	r3, #0
 8036030:	d130      	bne.n	8036094 <USBD_SetAddress+0x74>
 8036032:	683b      	ldr	r3, [r7, #0]
 8036034:	88db      	ldrh	r3, [r3, #6]
 8036036:	2b00      	cmp	r3, #0
 8036038:	d12c      	bne.n	8036094 <USBD_SetAddress+0x74>
 803603a:	683b      	ldr	r3, [r7, #0]
 803603c:	885b      	ldrh	r3, [r3, #2]
 803603e:	2b7f      	cmp	r3, #127	; 0x7f
 8036040:	d828      	bhi.n	8036094 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8036042:	683b      	ldr	r3, [r7, #0]
 8036044:	885b      	ldrh	r3, [r3, #2]
 8036046:	b2db      	uxtb	r3, r3
 8036048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803604c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803604e:	687b      	ldr	r3, [r7, #4]
 8036050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8036054:	2b03      	cmp	r3, #3
 8036056:	d104      	bne.n	8036062 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8036058:	6839      	ldr	r1, [r7, #0]
 803605a:	6878      	ldr	r0, [r7, #4]
 803605c:	f000 f99f 	bl	803639e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8036060:	e01d      	b.n	803609e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8036062:	687b      	ldr	r3, [r7, #4]
 8036064:	7bfa      	ldrb	r2, [r7, #15]
 8036066:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803606a:	7bfb      	ldrb	r3, [r7, #15]
 803606c:	4619      	mov	r1, r3
 803606e:	6878      	ldr	r0, [r7, #4]
 8036070:	f000 ff00 	bl	8036e74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8036074:	6878      	ldr	r0, [r7, #4]
 8036076:	f000 fa5d 	bl	8036534 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803607a:	7bfb      	ldrb	r3, [r7, #15]
 803607c:	2b00      	cmp	r3, #0
 803607e:	d004      	beq.n	803608a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8036080:	687b      	ldr	r3, [r7, #4]
 8036082:	2202      	movs	r2, #2
 8036084:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8036088:	e009      	b.n	803609e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803608a:	687b      	ldr	r3, [r7, #4]
 803608c:	2201      	movs	r2, #1
 803608e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8036092:	e004      	b.n	803609e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8036094:	6839      	ldr	r1, [r7, #0]
 8036096:	6878      	ldr	r0, [r7, #4]
 8036098:	f000 f981 	bl	803639e <USBD_CtlError>
  }
}
 803609c:	bf00      	nop
 803609e:	bf00      	nop
 80360a0:	3710      	adds	r7, #16
 80360a2:	46bd      	mov	sp, r7
 80360a4:	bd80      	pop	{r7, pc}
	...

080360a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80360a8:	b580      	push	{r7, lr}
 80360aa:	b084      	sub	sp, #16
 80360ac:	af00      	add	r7, sp, #0
 80360ae:	6078      	str	r0, [r7, #4]
 80360b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80360b2:	2300      	movs	r3, #0
 80360b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80360b6:	683b      	ldr	r3, [r7, #0]
 80360b8:	885b      	ldrh	r3, [r3, #2]
 80360ba:	b2da      	uxtb	r2, r3
 80360bc:	4b4b      	ldr	r3, [pc, #300]	; (80361ec <USBD_SetConfig+0x144>)
 80360be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80360c0:	4b4a      	ldr	r3, [pc, #296]	; (80361ec <USBD_SetConfig+0x144>)
 80360c2:	781b      	ldrb	r3, [r3, #0]
 80360c4:	2b01      	cmp	r3, #1
 80360c6:	d905      	bls.n	80360d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80360c8:	6839      	ldr	r1, [r7, #0]
 80360ca:	6878      	ldr	r0, [r7, #4]
 80360cc:	f000 f967 	bl	803639e <USBD_CtlError>
    return USBD_FAIL;
 80360d0:	2303      	movs	r3, #3
 80360d2:	e087      	b.n	80361e4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80360d4:	687b      	ldr	r3, [r7, #4]
 80360d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80360da:	2b02      	cmp	r3, #2
 80360dc:	d002      	beq.n	80360e4 <USBD_SetConfig+0x3c>
 80360de:	2b03      	cmp	r3, #3
 80360e0:	d025      	beq.n	803612e <USBD_SetConfig+0x86>
 80360e2:	e071      	b.n	80361c8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80360e4:	4b41      	ldr	r3, [pc, #260]	; (80361ec <USBD_SetConfig+0x144>)
 80360e6:	781b      	ldrb	r3, [r3, #0]
 80360e8:	2b00      	cmp	r3, #0
 80360ea:	d01c      	beq.n	8036126 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80360ec:	4b3f      	ldr	r3, [pc, #252]	; (80361ec <USBD_SetConfig+0x144>)
 80360ee:	781b      	ldrb	r3, [r3, #0]
 80360f0:	461a      	mov	r2, r3
 80360f2:	687b      	ldr	r3, [r7, #4]
 80360f4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80360f6:	4b3d      	ldr	r3, [pc, #244]	; (80361ec <USBD_SetConfig+0x144>)
 80360f8:	781b      	ldrb	r3, [r3, #0]
 80360fa:	4619      	mov	r1, r3
 80360fc:	6878      	ldr	r0, [r7, #4]
 80360fe:	f7ff f999 	bl	8035434 <USBD_SetClassConfig>
 8036102:	4603      	mov	r3, r0
 8036104:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8036106:	7bfb      	ldrb	r3, [r7, #15]
 8036108:	2b00      	cmp	r3, #0
 803610a:	d004      	beq.n	8036116 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 803610c:	6839      	ldr	r1, [r7, #0]
 803610e:	6878      	ldr	r0, [r7, #4]
 8036110:	f000 f945 	bl	803639e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8036114:	e065      	b.n	80361e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8036116:	6878      	ldr	r0, [r7, #4]
 8036118:	f000 fa0c 	bl	8036534 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 803611c:	687b      	ldr	r3, [r7, #4]
 803611e:	2203      	movs	r2, #3
 8036120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8036124:	e05d      	b.n	80361e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8036126:	6878      	ldr	r0, [r7, #4]
 8036128:	f000 fa04 	bl	8036534 <USBD_CtlSendStatus>
    break;
 803612c:	e059      	b.n	80361e2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 803612e:	4b2f      	ldr	r3, [pc, #188]	; (80361ec <USBD_SetConfig+0x144>)
 8036130:	781b      	ldrb	r3, [r3, #0]
 8036132:	2b00      	cmp	r3, #0
 8036134:	d112      	bne.n	803615c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8036136:	687b      	ldr	r3, [r7, #4]
 8036138:	2202      	movs	r2, #2
 803613a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 803613e:	4b2b      	ldr	r3, [pc, #172]	; (80361ec <USBD_SetConfig+0x144>)
 8036140:	781b      	ldrb	r3, [r3, #0]
 8036142:	461a      	mov	r2, r3
 8036144:	687b      	ldr	r3, [r7, #4]
 8036146:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8036148:	4b28      	ldr	r3, [pc, #160]	; (80361ec <USBD_SetConfig+0x144>)
 803614a:	781b      	ldrb	r3, [r3, #0]
 803614c:	4619      	mov	r1, r3
 803614e:	6878      	ldr	r0, [r7, #4]
 8036150:	f7ff f98c 	bl	803546c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8036154:	6878      	ldr	r0, [r7, #4]
 8036156:	f000 f9ed 	bl	8036534 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 803615a:	e042      	b.n	80361e2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 803615c:	4b23      	ldr	r3, [pc, #140]	; (80361ec <USBD_SetConfig+0x144>)
 803615e:	781b      	ldrb	r3, [r3, #0]
 8036160:	461a      	mov	r2, r3
 8036162:	687b      	ldr	r3, [r7, #4]
 8036164:	685b      	ldr	r3, [r3, #4]
 8036166:	429a      	cmp	r2, r3
 8036168:	d02a      	beq.n	80361c0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803616a:	687b      	ldr	r3, [r7, #4]
 803616c:	685b      	ldr	r3, [r3, #4]
 803616e:	b2db      	uxtb	r3, r3
 8036170:	4619      	mov	r1, r3
 8036172:	6878      	ldr	r0, [r7, #4]
 8036174:	f7ff f97a 	bl	803546c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8036178:	4b1c      	ldr	r3, [pc, #112]	; (80361ec <USBD_SetConfig+0x144>)
 803617a:	781b      	ldrb	r3, [r3, #0]
 803617c:	461a      	mov	r2, r3
 803617e:	687b      	ldr	r3, [r7, #4]
 8036180:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8036182:	4b1a      	ldr	r3, [pc, #104]	; (80361ec <USBD_SetConfig+0x144>)
 8036184:	781b      	ldrb	r3, [r3, #0]
 8036186:	4619      	mov	r1, r3
 8036188:	6878      	ldr	r0, [r7, #4]
 803618a:	f7ff f953 	bl	8035434 <USBD_SetClassConfig>
 803618e:	4603      	mov	r3, r0
 8036190:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8036192:	7bfb      	ldrb	r3, [r7, #15]
 8036194:	2b00      	cmp	r3, #0
 8036196:	d00f      	beq.n	80361b8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8036198:	6839      	ldr	r1, [r7, #0]
 803619a:	6878      	ldr	r0, [r7, #4]
 803619c:	f000 f8ff 	bl	803639e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80361a0:	687b      	ldr	r3, [r7, #4]
 80361a2:	685b      	ldr	r3, [r3, #4]
 80361a4:	b2db      	uxtb	r3, r3
 80361a6:	4619      	mov	r1, r3
 80361a8:	6878      	ldr	r0, [r7, #4]
 80361aa:	f7ff f95f 	bl	803546c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80361ae:	687b      	ldr	r3, [r7, #4]
 80361b0:	2202      	movs	r2, #2
 80361b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80361b6:	e014      	b.n	80361e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80361b8:	6878      	ldr	r0, [r7, #4]
 80361ba:	f000 f9bb 	bl	8036534 <USBD_CtlSendStatus>
    break;
 80361be:	e010      	b.n	80361e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80361c0:	6878      	ldr	r0, [r7, #4]
 80361c2:	f000 f9b7 	bl	8036534 <USBD_CtlSendStatus>
    break;
 80361c6:	e00c      	b.n	80361e2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80361c8:	6839      	ldr	r1, [r7, #0]
 80361ca:	6878      	ldr	r0, [r7, #4]
 80361cc:	f000 f8e7 	bl	803639e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80361d0:	4b06      	ldr	r3, [pc, #24]	; (80361ec <USBD_SetConfig+0x144>)
 80361d2:	781b      	ldrb	r3, [r3, #0]
 80361d4:	4619      	mov	r1, r3
 80361d6:	6878      	ldr	r0, [r7, #4]
 80361d8:	f7ff f948 	bl	803546c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80361dc:	2303      	movs	r3, #3
 80361de:	73fb      	strb	r3, [r7, #15]
    break;
 80361e0:	bf00      	nop
  }

  return ret;
 80361e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80361e4:	4618      	mov	r0, r3
 80361e6:	3710      	adds	r7, #16
 80361e8:	46bd      	mov	sp, r7
 80361ea:	bd80      	pop	{r7, pc}
 80361ec:	20002b58 	.word	0x20002b58

080361f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80361f0:	b580      	push	{r7, lr}
 80361f2:	b082      	sub	sp, #8
 80361f4:	af00      	add	r7, sp, #0
 80361f6:	6078      	str	r0, [r7, #4]
 80361f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80361fa:	683b      	ldr	r3, [r7, #0]
 80361fc:	88db      	ldrh	r3, [r3, #6]
 80361fe:	2b01      	cmp	r3, #1
 8036200:	d004      	beq.n	803620c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8036202:	6839      	ldr	r1, [r7, #0]
 8036204:	6878      	ldr	r0, [r7, #4]
 8036206:	f000 f8ca 	bl	803639e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 803620a:	e022      	b.n	8036252 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 803620c:	687b      	ldr	r3, [r7, #4]
 803620e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8036212:	2b02      	cmp	r3, #2
 8036214:	dc02      	bgt.n	803621c <USBD_GetConfig+0x2c>
 8036216:	2b00      	cmp	r3, #0
 8036218:	dc03      	bgt.n	8036222 <USBD_GetConfig+0x32>
 803621a:	e015      	b.n	8036248 <USBD_GetConfig+0x58>
 803621c:	2b03      	cmp	r3, #3
 803621e:	d00b      	beq.n	8036238 <USBD_GetConfig+0x48>
 8036220:	e012      	b.n	8036248 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8036222:	687b      	ldr	r3, [r7, #4]
 8036224:	2200      	movs	r2, #0
 8036226:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8036228:	687b      	ldr	r3, [r7, #4]
 803622a:	3308      	adds	r3, #8
 803622c:	2201      	movs	r2, #1
 803622e:	4619      	mov	r1, r3
 8036230:	6878      	ldr	r0, [r7, #4]
 8036232:	f000 f925 	bl	8036480 <USBD_CtlSendData>
      break;
 8036236:	e00c      	b.n	8036252 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8036238:	687b      	ldr	r3, [r7, #4]
 803623a:	3304      	adds	r3, #4
 803623c:	2201      	movs	r2, #1
 803623e:	4619      	mov	r1, r3
 8036240:	6878      	ldr	r0, [r7, #4]
 8036242:	f000 f91d 	bl	8036480 <USBD_CtlSendData>
      break;
 8036246:	e004      	b.n	8036252 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8036248:	6839      	ldr	r1, [r7, #0]
 803624a:	6878      	ldr	r0, [r7, #4]
 803624c:	f000 f8a7 	bl	803639e <USBD_CtlError>
      break;
 8036250:	bf00      	nop
}
 8036252:	bf00      	nop
 8036254:	3708      	adds	r7, #8
 8036256:	46bd      	mov	sp, r7
 8036258:	bd80      	pop	{r7, pc}

0803625a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803625a:	b580      	push	{r7, lr}
 803625c:	b082      	sub	sp, #8
 803625e:	af00      	add	r7, sp, #0
 8036260:	6078      	str	r0, [r7, #4]
 8036262:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8036264:	687b      	ldr	r3, [r7, #4]
 8036266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803626a:	3b01      	subs	r3, #1
 803626c:	2b02      	cmp	r3, #2
 803626e:	d81e      	bhi.n	80362ae <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8036270:	683b      	ldr	r3, [r7, #0]
 8036272:	88db      	ldrh	r3, [r3, #6]
 8036274:	2b02      	cmp	r3, #2
 8036276:	d004      	beq.n	8036282 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8036278:	6839      	ldr	r1, [r7, #0]
 803627a:	6878      	ldr	r0, [r7, #4]
 803627c:	f000 f88f 	bl	803639e <USBD_CtlError>
      break;
 8036280:	e01a      	b.n	80362b8 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8036282:	687b      	ldr	r3, [r7, #4]
 8036284:	2201      	movs	r2, #1
 8036286:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8036288:	687b      	ldr	r3, [r7, #4]
 803628a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803628e:	2b00      	cmp	r3, #0
 8036290:	d005      	beq.n	803629e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8036292:	687b      	ldr	r3, [r7, #4]
 8036294:	68db      	ldr	r3, [r3, #12]
 8036296:	f043 0202 	orr.w	r2, r3, #2
 803629a:	687b      	ldr	r3, [r7, #4]
 803629c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803629e:	687b      	ldr	r3, [r7, #4]
 80362a0:	330c      	adds	r3, #12
 80362a2:	2202      	movs	r2, #2
 80362a4:	4619      	mov	r1, r3
 80362a6:	6878      	ldr	r0, [r7, #4]
 80362a8:	f000 f8ea 	bl	8036480 <USBD_CtlSendData>
    break;
 80362ac:	e004      	b.n	80362b8 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80362ae:	6839      	ldr	r1, [r7, #0]
 80362b0:	6878      	ldr	r0, [r7, #4]
 80362b2:	f000 f874 	bl	803639e <USBD_CtlError>
    break;
 80362b6:	bf00      	nop
  }
}
 80362b8:	bf00      	nop
 80362ba:	3708      	adds	r7, #8
 80362bc:	46bd      	mov	sp, r7
 80362be:	bd80      	pop	{r7, pc}

080362c0 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80362c0:	b580      	push	{r7, lr}
 80362c2:	b082      	sub	sp, #8
 80362c4:	af00      	add	r7, sp, #0
 80362c6:	6078      	str	r0, [r7, #4]
 80362c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80362ca:	683b      	ldr	r3, [r7, #0]
 80362cc:	885b      	ldrh	r3, [r3, #2]
 80362ce:	2b01      	cmp	r3, #1
 80362d0:	d106      	bne.n	80362e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80362d2:	687b      	ldr	r3, [r7, #4]
 80362d4:	2201      	movs	r2, #1
 80362d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80362da:	6878      	ldr	r0, [r7, #4]
 80362dc:	f000 f92a 	bl	8036534 <USBD_CtlSendStatus>
  }
}
 80362e0:	bf00      	nop
 80362e2:	3708      	adds	r7, #8
 80362e4:	46bd      	mov	sp, r7
 80362e6:	bd80      	pop	{r7, pc}

080362e8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80362e8:	b580      	push	{r7, lr}
 80362ea:	b082      	sub	sp, #8
 80362ec:	af00      	add	r7, sp, #0
 80362ee:	6078      	str	r0, [r7, #4]
 80362f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80362f2:	687b      	ldr	r3, [r7, #4]
 80362f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80362f8:	3b01      	subs	r3, #1
 80362fa:	2b02      	cmp	r3, #2
 80362fc:	d80b      	bhi.n	8036316 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80362fe:	683b      	ldr	r3, [r7, #0]
 8036300:	885b      	ldrh	r3, [r3, #2]
 8036302:	2b01      	cmp	r3, #1
 8036304:	d10c      	bne.n	8036320 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8036306:	687b      	ldr	r3, [r7, #4]
 8036308:	2200      	movs	r2, #0
 803630a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 803630e:	6878      	ldr	r0, [r7, #4]
 8036310:	f000 f910 	bl	8036534 <USBD_CtlSendStatus>
      }
      break;
 8036314:	e004      	b.n	8036320 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8036316:	6839      	ldr	r1, [r7, #0]
 8036318:	6878      	ldr	r0, [r7, #4]
 803631a:	f000 f840 	bl	803639e <USBD_CtlError>
      break;
 803631e:	e000      	b.n	8036322 <USBD_ClrFeature+0x3a>
      break;
 8036320:	bf00      	nop
  }
}
 8036322:	bf00      	nop
 8036324:	3708      	adds	r7, #8
 8036326:	46bd      	mov	sp, r7
 8036328:	bd80      	pop	{r7, pc}

0803632a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803632a:	b580      	push	{r7, lr}
 803632c:	b084      	sub	sp, #16
 803632e:	af00      	add	r7, sp, #0
 8036330:	6078      	str	r0, [r7, #4]
 8036332:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8036334:	683b      	ldr	r3, [r7, #0]
 8036336:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8036338:	68fb      	ldr	r3, [r7, #12]
 803633a:	781a      	ldrb	r2, [r3, #0]
 803633c:	687b      	ldr	r3, [r7, #4]
 803633e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8036340:	68fb      	ldr	r3, [r7, #12]
 8036342:	3301      	adds	r3, #1
 8036344:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8036346:	68fb      	ldr	r3, [r7, #12]
 8036348:	781a      	ldrb	r2, [r3, #0]
 803634a:	687b      	ldr	r3, [r7, #4]
 803634c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803634e:	68fb      	ldr	r3, [r7, #12]
 8036350:	3301      	adds	r3, #1
 8036352:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8036354:	68f8      	ldr	r0, [r7, #12]
 8036356:	f7ff fac6 	bl	80358e6 <SWAPBYTE>
 803635a:	4603      	mov	r3, r0
 803635c:	461a      	mov	r2, r3
 803635e:	687b      	ldr	r3, [r7, #4]
 8036360:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8036362:	68fb      	ldr	r3, [r7, #12]
 8036364:	3301      	adds	r3, #1
 8036366:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8036368:	68fb      	ldr	r3, [r7, #12]
 803636a:	3301      	adds	r3, #1
 803636c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803636e:	68f8      	ldr	r0, [r7, #12]
 8036370:	f7ff fab9 	bl	80358e6 <SWAPBYTE>
 8036374:	4603      	mov	r3, r0
 8036376:	461a      	mov	r2, r3
 8036378:	687b      	ldr	r3, [r7, #4]
 803637a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 803637c:	68fb      	ldr	r3, [r7, #12]
 803637e:	3301      	adds	r3, #1
 8036380:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8036382:	68fb      	ldr	r3, [r7, #12]
 8036384:	3301      	adds	r3, #1
 8036386:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8036388:	68f8      	ldr	r0, [r7, #12]
 803638a:	f7ff faac 	bl	80358e6 <SWAPBYTE>
 803638e:	4603      	mov	r3, r0
 8036390:	461a      	mov	r2, r3
 8036392:	687b      	ldr	r3, [r7, #4]
 8036394:	80da      	strh	r2, [r3, #6]
}
 8036396:	bf00      	nop
 8036398:	3710      	adds	r7, #16
 803639a:	46bd      	mov	sp, r7
 803639c:	bd80      	pop	{r7, pc}

0803639e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803639e:	b580      	push	{r7, lr}
 80363a0:	b082      	sub	sp, #8
 80363a2:	af00      	add	r7, sp, #0
 80363a4:	6078      	str	r0, [r7, #4]
 80363a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80363a8:	2180      	movs	r1, #128	; 0x80
 80363aa:	6878      	ldr	r0, [r7, #4]
 80363ac:	f000 fcf8 	bl	8036da0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80363b0:	2100      	movs	r1, #0
 80363b2:	6878      	ldr	r0, [r7, #4]
 80363b4:	f000 fcf4 	bl	8036da0 <USBD_LL_StallEP>
}
 80363b8:	bf00      	nop
 80363ba:	3708      	adds	r7, #8
 80363bc:	46bd      	mov	sp, r7
 80363be:	bd80      	pop	{r7, pc}

080363c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80363c0:	b580      	push	{r7, lr}
 80363c2:	b086      	sub	sp, #24
 80363c4:	af00      	add	r7, sp, #0
 80363c6:	60f8      	str	r0, [r7, #12]
 80363c8:	60b9      	str	r1, [r7, #8]
 80363ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80363cc:	2300      	movs	r3, #0
 80363ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80363d0:	68fb      	ldr	r3, [r7, #12]
 80363d2:	2b00      	cmp	r3, #0
 80363d4:	d036      	beq.n	8036444 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80363d6:	68fb      	ldr	r3, [r7, #12]
 80363d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80363da:	6938      	ldr	r0, [r7, #16]
 80363dc:	f000 f836 	bl	803644c <USBD_GetLen>
 80363e0:	4603      	mov	r3, r0
 80363e2:	3301      	adds	r3, #1
 80363e4:	b29b      	uxth	r3, r3
 80363e6:	005b      	lsls	r3, r3, #1
 80363e8:	b29a      	uxth	r2, r3
 80363ea:	687b      	ldr	r3, [r7, #4]
 80363ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80363ee:	7dfb      	ldrb	r3, [r7, #23]
 80363f0:	68ba      	ldr	r2, [r7, #8]
 80363f2:	4413      	add	r3, r2
 80363f4:	687a      	ldr	r2, [r7, #4]
 80363f6:	7812      	ldrb	r2, [r2, #0]
 80363f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80363fa:	7dfb      	ldrb	r3, [r7, #23]
 80363fc:	3301      	adds	r3, #1
 80363fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8036400:	7dfb      	ldrb	r3, [r7, #23]
 8036402:	68ba      	ldr	r2, [r7, #8]
 8036404:	4413      	add	r3, r2
 8036406:	2203      	movs	r2, #3
 8036408:	701a      	strb	r2, [r3, #0]
  idx++;
 803640a:	7dfb      	ldrb	r3, [r7, #23]
 803640c:	3301      	adds	r3, #1
 803640e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8036410:	e013      	b.n	803643a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8036412:	7dfb      	ldrb	r3, [r7, #23]
 8036414:	68ba      	ldr	r2, [r7, #8]
 8036416:	4413      	add	r3, r2
 8036418:	693a      	ldr	r2, [r7, #16]
 803641a:	7812      	ldrb	r2, [r2, #0]
 803641c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803641e:	693b      	ldr	r3, [r7, #16]
 8036420:	3301      	adds	r3, #1
 8036422:	613b      	str	r3, [r7, #16]
    idx++;
 8036424:	7dfb      	ldrb	r3, [r7, #23]
 8036426:	3301      	adds	r3, #1
 8036428:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803642a:	7dfb      	ldrb	r3, [r7, #23]
 803642c:	68ba      	ldr	r2, [r7, #8]
 803642e:	4413      	add	r3, r2
 8036430:	2200      	movs	r2, #0
 8036432:	701a      	strb	r2, [r3, #0]
    idx++;
 8036434:	7dfb      	ldrb	r3, [r7, #23]
 8036436:	3301      	adds	r3, #1
 8036438:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803643a:	693b      	ldr	r3, [r7, #16]
 803643c:	781b      	ldrb	r3, [r3, #0]
 803643e:	2b00      	cmp	r3, #0
 8036440:	d1e7      	bne.n	8036412 <USBD_GetString+0x52>
 8036442:	e000      	b.n	8036446 <USBD_GetString+0x86>
    return;
 8036444:	bf00      	nop
  }
}
 8036446:	3718      	adds	r7, #24
 8036448:	46bd      	mov	sp, r7
 803644a:	bd80      	pop	{r7, pc}

0803644c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 803644c:	b480      	push	{r7}
 803644e:	b085      	sub	sp, #20
 8036450:	af00      	add	r7, sp, #0
 8036452:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8036454:	2300      	movs	r3, #0
 8036456:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8036458:	687b      	ldr	r3, [r7, #4]
 803645a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 803645c:	e005      	b.n	803646a <USBD_GetLen+0x1e>
  {
    len++;
 803645e:	7bfb      	ldrb	r3, [r7, #15]
 8036460:	3301      	adds	r3, #1
 8036462:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8036464:	68bb      	ldr	r3, [r7, #8]
 8036466:	3301      	adds	r3, #1
 8036468:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803646a:	68bb      	ldr	r3, [r7, #8]
 803646c:	781b      	ldrb	r3, [r3, #0]
 803646e:	2b00      	cmp	r3, #0
 8036470:	d1f5      	bne.n	803645e <USBD_GetLen+0x12>
  }

  return len;
 8036472:	7bfb      	ldrb	r3, [r7, #15]
}
 8036474:	4618      	mov	r0, r3
 8036476:	3714      	adds	r7, #20
 8036478:	46bd      	mov	sp, r7
 803647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803647e:	4770      	bx	lr

08036480 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8036480:	b580      	push	{r7, lr}
 8036482:	b084      	sub	sp, #16
 8036484:	af00      	add	r7, sp, #0
 8036486:	60f8      	str	r0, [r7, #12]
 8036488:	60b9      	str	r1, [r7, #8]
 803648a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 803648c:	68fb      	ldr	r3, [r7, #12]
 803648e:	2202      	movs	r2, #2
 8036490:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8036494:	68fb      	ldr	r3, [r7, #12]
 8036496:	687a      	ldr	r2, [r7, #4]
 8036498:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 803649a:	68fb      	ldr	r3, [r7, #12]
 803649c:	687a      	ldr	r2, [r7, #4]
 803649e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80364a0:	687b      	ldr	r3, [r7, #4]
 80364a2:	68ba      	ldr	r2, [r7, #8]
 80364a4:	2100      	movs	r1, #0
 80364a6:	68f8      	ldr	r0, [r7, #12]
 80364a8:	f000 fd03 	bl	8036eb2 <USBD_LL_Transmit>

  return USBD_OK;
 80364ac:	2300      	movs	r3, #0
}
 80364ae:	4618      	mov	r0, r3
 80364b0:	3710      	adds	r7, #16
 80364b2:	46bd      	mov	sp, r7
 80364b4:	bd80      	pop	{r7, pc}

080364b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80364b6:	b580      	push	{r7, lr}
 80364b8:	b084      	sub	sp, #16
 80364ba:	af00      	add	r7, sp, #0
 80364bc:	60f8      	str	r0, [r7, #12]
 80364be:	60b9      	str	r1, [r7, #8]
 80364c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80364c2:	687b      	ldr	r3, [r7, #4]
 80364c4:	68ba      	ldr	r2, [r7, #8]
 80364c6:	2100      	movs	r1, #0
 80364c8:	68f8      	ldr	r0, [r7, #12]
 80364ca:	f000 fcf2 	bl	8036eb2 <USBD_LL_Transmit>

  return USBD_OK;
 80364ce:	2300      	movs	r3, #0
}
 80364d0:	4618      	mov	r0, r3
 80364d2:	3710      	adds	r7, #16
 80364d4:	46bd      	mov	sp, r7
 80364d6:	bd80      	pop	{r7, pc}

080364d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80364d8:	b580      	push	{r7, lr}
 80364da:	b084      	sub	sp, #16
 80364dc:	af00      	add	r7, sp, #0
 80364de:	60f8      	str	r0, [r7, #12]
 80364e0:	60b9      	str	r1, [r7, #8]
 80364e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80364e4:	68fb      	ldr	r3, [r7, #12]
 80364e6:	2203      	movs	r2, #3
 80364e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80364ec:	68fb      	ldr	r3, [r7, #12]
 80364ee:	687a      	ldr	r2, [r7, #4]
 80364f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80364f4:	68fb      	ldr	r3, [r7, #12]
 80364f6:	687a      	ldr	r2, [r7, #4]
 80364f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80364fc:	687b      	ldr	r3, [r7, #4]
 80364fe:	68ba      	ldr	r2, [r7, #8]
 8036500:	2100      	movs	r1, #0
 8036502:	68f8      	ldr	r0, [r7, #12]
 8036504:	f000 fcf6 	bl	8036ef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8036508:	2300      	movs	r3, #0
}
 803650a:	4618      	mov	r0, r3
 803650c:	3710      	adds	r7, #16
 803650e:	46bd      	mov	sp, r7
 8036510:	bd80      	pop	{r7, pc}

08036512 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8036512:	b580      	push	{r7, lr}
 8036514:	b084      	sub	sp, #16
 8036516:	af00      	add	r7, sp, #0
 8036518:	60f8      	str	r0, [r7, #12]
 803651a:	60b9      	str	r1, [r7, #8]
 803651c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803651e:	687b      	ldr	r3, [r7, #4]
 8036520:	68ba      	ldr	r2, [r7, #8]
 8036522:	2100      	movs	r1, #0
 8036524:	68f8      	ldr	r0, [r7, #12]
 8036526:	f000 fce5 	bl	8036ef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803652a:	2300      	movs	r3, #0
}
 803652c:	4618      	mov	r0, r3
 803652e:	3710      	adds	r7, #16
 8036530:	46bd      	mov	sp, r7
 8036532:	bd80      	pop	{r7, pc}

08036534 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8036534:	b580      	push	{r7, lr}
 8036536:	b082      	sub	sp, #8
 8036538:	af00      	add	r7, sp, #0
 803653a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 803653c:	687b      	ldr	r3, [r7, #4]
 803653e:	2204      	movs	r2, #4
 8036540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8036544:	2300      	movs	r3, #0
 8036546:	2200      	movs	r2, #0
 8036548:	2100      	movs	r1, #0
 803654a:	6878      	ldr	r0, [r7, #4]
 803654c:	f000 fcb1 	bl	8036eb2 <USBD_LL_Transmit>

  return USBD_OK;
 8036550:	2300      	movs	r3, #0
}
 8036552:	4618      	mov	r0, r3
 8036554:	3708      	adds	r7, #8
 8036556:	46bd      	mov	sp, r7
 8036558:	bd80      	pop	{r7, pc}

0803655a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803655a:	b580      	push	{r7, lr}
 803655c:	b082      	sub	sp, #8
 803655e:	af00      	add	r7, sp, #0
 8036560:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8036562:	687b      	ldr	r3, [r7, #4]
 8036564:	2205      	movs	r2, #5
 8036566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803656a:	2300      	movs	r3, #0
 803656c:	2200      	movs	r2, #0
 803656e:	2100      	movs	r1, #0
 8036570:	6878      	ldr	r0, [r7, #4]
 8036572:	f000 fcbf 	bl	8036ef4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8036576:	2300      	movs	r3, #0
}
 8036578:	4618      	mov	r0, r3
 803657a:	3708      	adds	r7, #8
 803657c:	46bd      	mov	sp, r7
 803657e:	bd80      	pop	{r7, pc}

08036580 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8036580:	b580      	push	{r7, lr}
 8036582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8036584:	2200      	movs	r2, #0
 8036586:	4912      	ldr	r1, [pc, #72]	; (80365d0 <MX_USB_DEVICE_Init+0x50>)
 8036588:	4812      	ldr	r0, [pc, #72]	; (80365d4 <MX_USB_DEVICE_Init+0x54>)
 803658a:	f7fe fee5 	bl	8035358 <USBD_Init>
 803658e:	4603      	mov	r3, r0
 8036590:	2b00      	cmp	r3, #0
 8036592:	d001      	beq.n	8036598 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8036594:	f7ea fcd4 	bl	8020f40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8036598:	490f      	ldr	r1, [pc, #60]	; (80365d8 <MX_USB_DEVICE_Init+0x58>)
 803659a:	480e      	ldr	r0, [pc, #56]	; (80365d4 <MX_USB_DEVICE_Init+0x54>)
 803659c:	f7fe ff12 	bl	80353c4 <USBD_RegisterClass>
 80365a0:	4603      	mov	r3, r0
 80365a2:	2b00      	cmp	r3, #0
 80365a4:	d001      	beq.n	80365aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80365a6:	f7ea fccb 	bl	8020f40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80365aa:	490c      	ldr	r1, [pc, #48]	; (80365dc <MX_USB_DEVICE_Init+0x5c>)
 80365ac:	4809      	ldr	r0, [pc, #36]	; (80365d4 <MX_USB_DEVICE_Init+0x54>)
 80365ae:	f7fe fe37 	bl	8035220 <USBD_CDC_RegisterInterface>
 80365b2:	4603      	mov	r3, r0
 80365b4:	2b00      	cmp	r3, #0
 80365b6:	d001      	beq.n	80365bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80365b8:	f7ea fcc2 	bl	8020f40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80365bc:	4805      	ldr	r0, [pc, #20]	; (80365d4 <MX_USB_DEVICE_Init+0x54>)
 80365be:	f7fe ff22 	bl	8035406 <USBD_Start>
 80365c2:	4603      	mov	r3, r0
 80365c4:	2b00      	cmp	r3, #0
 80365c6:	d001      	beq.n	80365cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80365c8:	f7ea fcba 	bl	8020f40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80365cc:	bf00      	nop
 80365ce:	bd80      	pop	{r7, pc}
 80365d0:	20000d1c 	.word	0x20000d1c
 80365d4:	20002b5c 	.word	0x20002b5c
 80365d8:	20000c04 	.word	0x20000c04
 80365dc:	20000d08 	.word	0x20000d08

080365e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80365e0:	b580      	push	{r7, lr}
 80365e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80365e4:	2200      	movs	r2, #0
 80365e6:	4905      	ldr	r1, [pc, #20]	; (80365fc <CDC_Init_FS+0x1c>)
 80365e8:	4805      	ldr	r0, [pc, #20]	; (8036600 <CDC_Init_FS+0x20>)
 80365ea:	f7fe fe2e 	bl	803524a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80365ee:	4905      	ldr	r1, [pc, #20]	; (8036604 <CDC_Init_FS+0x24>)
 80365f0:	4803      	ldr	r0, [pc, #12]	; (8036600 <CDC_Init_FS+0x20>)
 80365f2:	f7fe fe43 	bl	803527c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80365f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80365f8:	4618      	mov	r0, r3
 80365fa:	bd80      	pop	{r7, pc}
 80365fc:	2000362c 	.word	0x2000362c
 8036600:	20002b5c 	.word	0x20002b5c
 8036604:	20002e2c 	.word	0x20002e2c

08036608 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8036608:	b480      	push	{r7}
 803660a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803660c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803660e:	4618      	mov	r0, r3
 8036610:	46bd      	mov	sp, r7
 8036612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036616:	4770      	bx	lr

08036618 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8036618:	b480      	push	{r7}
 803661a:	b083      	sub	sp, #12
 803661c:	af00      	add	r7, sp, #0
 803661e:	4603      	mov	r3, r0
 8036620:	6039      	str	r1, [r7, #0]
 8036622:	71fb      	strb	r3, [r7, #7]
 8036624:	4613      	mov	r3, r2
 8036626:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8036628:	79fb      	ldrb	r3, [r7, #7]
 803662a:	2b23      	cmp	r3, #35	; 0x23
 803662c:	d84a      	bhi.n	80366c4 <CDC_Control_FS+0xac>
 803662e:	a201      	add	r2, pc, #4	; (adr r2, 8036634 <CDC_Control_FS+0x1c>)
 8036630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036634:	080366c5 	.word	0x080366c5
 8036638:	080366c5 	.word	0x080366c5
 803663c:	080366c5 	.word	0x080366c5
 8036640:	080366c5 	.word	0x080366c5
 8036644:	080366c5 	.word	0x080366c5
 8036648:	080366c5 	.word	0x080366c5
 803664c:	080366c5 	.word	0x080366c5
 8036650:	080366c5 	.word	0x080366c5
 8036654:	080366c5 	.word	0x080366c5
 8036658:	080366c5 	.word	0x080366c5
 803665c:	080366c5 	.word	0x080366c5
 8036660:	080366c5 	.word	0x080366c5
 8036664:	080366c5 	.word	0x080366c5
 8036668:	080366c5 	.word	0x080366c5
 803666c:	080366c5 	.word	0x080366c5
 8036670:	080366c5 	.word	0x080366c5
 8036674:	080366c5 	.word	0x080366c5
 8036678:	080366c5 	.word	0x080366c5
 803667c:	080366c5 	.word	0x080366c5
 8036680:	080366c5 	.word	0x080366c5
 8036684:	080366c5 	.word	0x080366c5
 8036688:	080366c5 	.word	0x080366c5
 803668c:	080366c5 	.word	0x080366c5
 8036690:	080366c5 	.word	0x080366c5
 8036694:	080366c5 	.word	0x080366c5
 8036698:	080366c5 	.word	0x080366c5
 803669c:	080366c5 	.word	0x080366c5
 80366a0:	080366c5 	.word	0x080366c5
 80366a4:	080366c5 	.word	0x080366c5
 80366a8:	080366c5 	.word	0x080366c5
 80366ac:	080366c5 	.word	0x080366c5
 80366b0:	080366c5 	.word	0x080366c5
 80366b4:	080366c5 	.word	0x080366c5
 80366b8:	080366c5 	.word	0x080366c5
 80366bc:	080366c5 	.word	0x080366c5
 80366c0:	080366c5 	.word	0x080366c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80366c4:	bf00      	nop
  }

  return (USBD_OK);
 80366c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80366c8:	4618      	mov	r0, r3
 80366ca:	370c      	adds	r7, #12
 80366cc:	46bd      	mov	sp, r7
 80366ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80366d2:	4770      	bx	lr

080366d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80366d4:	b580      	push	{r7, lr}
 80366d6:	b084      	sub	sp, #16
 80366d8:	af00      	add	r7, sp, #0
 80366da:	6078      	str	r0, [r7, #4]
 80366dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

#if 1

	//	CLI Interface
	uint8_t *pStr = Buf;
 80366de:	687b      	ldr	r3, [r7, #4]
 80366e0:	60fb      	str	r3, [r7, #12]
	int i = 0;
 80366e2:	2300      	movs	r3, #0
 80366e4:	60bb      	str	r3, [r7, #8]
	for ( i = 0; i < *Len; i++ )
 80366e6:	2300      	movs	r3, #0
 80366e8:	60bb      	str	r3, [r7, #8]
 80366ea:	e00a      	b.n	8036702 <CDC_Receive_FS+0x2e>
	{
		qput( &g_qDebug, *pStr++ );
 80366ec:	68fb      	ldr	r3, [r7, #12]
 80366ee:	1c5a      	adds	r2, r3, #1
 80366f0:	60fa      	str	r2, [r7, #12]
 80366f2:	781b      	ldrb	r3, [r3, #0]
 80366f4:	4619      	mov	r1, r3
 80366f6:	480b      	ldr	r0, [pc, #44]	; (8036724 <CDC_Receive_FS+0x50>)
 80366f8:	f7f7 fd36 	bl	802e168 <qput>
	for ( i = 0; i < *Len; i++ )
 80366fc:	68bb      	ldr	r3, [r7, #8]
 80366fe:	3301      	adds	r3, #1
 8036700:	60bb      	str	r3, [r7, #8]
 8036702:	683b      	ldr	r3, [r7, #0]
 8036704:	681a      	ldr	r2, [r3, #0]
 8036706:	68bb      	ldr	r3, [r7, #8]
 8036708:	429a      	cmp	r2, r3
 803670a:	d8ef      	bhi.n	80366ec <CDC_Receive_FS+0x18>
	//	Loopback
//	CDC_Transmit_FS(Buf, *Len);

#endif

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803670c:	6879      	ldr	r1, [r7, #4]
 803670e:	4806      	ldr	r0, [pc, #24]	; (8036728 <CDC_Receive_FS+0x54>)
 8036710:	f7fe fdb4 	bl	803527c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8036714:	4804      	ldr	r0, [pc, #16]	; (8036728 <CDC_Receive_FS+0x54>)
 8036716:	f7fe fdf5 	bl	8035304 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803671a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803671c:	4618      	mov	r0, r3
 803671e:	3710      	adds	r7, #16
 8036720:	46bd      	mov	sp, r7
 8036722:	bd80      	pop	{r7, pc}
 8036724:	2000292c 	.word	0x2000292c
 8036728:	20002b5c 	.word	0x20002b5c

0803672c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 803672c:	b580      	push	{r7, lr}
 803672e:	b084      	sub	sp, #16
 8036730:	af00      	add	r7, sp, #0
 8036732:	6078      	str	r0, [r7, #4]
 8036734:	460b      	mov	r3, r1
 8036736:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8036738:	2300      	movs	r3, #0
 803673a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 803673c:	4b0d      	ldr	r3, [pc, #52]	; (8036774 <CDC_Transmit_FS+0x48>)
 803673e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8036742:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8036744:	68bb      	ldr	r3, [r7, #8]
 8036746:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 803674a:	2b00      	cmp	r3, #0
 803674c:	d001      	beq.n	8036752 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 803674e:	2301      	movs	r3, #1
 8036750:	e00b      	b.n	803676a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8036752:	887b      	ldrh	r3, [r7, #2]
 8036754:	461a      	mov	r2, r3
 8036756:	6879      	ldr	r1, [r7, #4]
 8036758:	4806      	ldr	r0, [pc, #24]	; (8036774 <CDC_Transmit_FS+0x48>)
 803675a:	f7fe fd76 	bl	803524a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 803675e:	4805      	ldr	r0, [pc, #20]	; (8036774 <CDC_Transmit_FS+0x48>)
 8036760:	f7fe fda0 	bl	80352a4 <USBD_CDC_TransmitPacket>
 8036764:	4603      	mov	r3, r0
 8036766:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8036768:	7bfb      	ldrb	r3, [r7, #15]
}
 803676a:	4618      	mov	r0, r3
 803676c:	3710      	adds	r7, #16
 803676e:	46bd      	mov	sp, r7
 8036770:	bd80      	pop	{r7, pc}
 8036772:	bf00      	nop
 8036774:	20002b5c 	.word	0x20002b5c

08036778 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8036778:	b480      	push	{r7}
 803677a:	b087      	sub	sp, #28
 803677c:	af00      	add	r7, sp, #0
 803677e:	60f8      	str	r0, [r7, #12]
 8036780:	60b9      	str	r1, [r7, #8]
 8036782:	4613      	mov	r3, r2
 8036784:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8036786:	2300      	movs	r3, #0
 8036788:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803678a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803678e:	4618      	mov	r0, r3
 8036790:	371c      	adds	r7, #28
 8036792:	46bd      	mov	sp, r7
 8036794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036798:	4770      	bx	lr
	...

0803679c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803679c:	b480      	push	{r7}
 803679e:	b083      	sub	sp, #12
 80367a0:	af00      	add	r7, sp, #0
 80367a2:	4603      	mov	r3, r0
 80367a4:	6039      	str	r1, [r7, #0]
 80367a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80367a8:	683b      	ldr	r3, [r7, #0]
 80367aa:	2212      	movs	r2, #18
 80367ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80367ae:	4b03      	ldr	r3, [pc, #12]	; (80367bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80367b0:	4618      	mov	r0, r3
 80367b2:	370c      	adds	r7, #12
 80367b4:	46bd      	mov	sp, r7
 80367b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80367ba:	4770      	bx	lr
 80367bc:	20000d38 	.word	0x20000d38

080367c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80367c0:	b480      	push	{r7}
 80367c2:	b083      	sub	sp, #12
 80367c4:	af00      	add	r7, sp, #0
 80367c6:	4603      	mov	r3, r0
 80367c8:	6039      	str	r1, [r7, #0]
 80367ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80367cc:	683b      	ldr	r3, [r7, #0]
 80367ce:	2204      	movs	r2, #4
 80367d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80367d2:	4b03      	ldr	r3, [pc, #12]	; (80367e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80367d4:	4618      	mov	r0, r3
 80367d6:	370c      	adds	r7, #12
 80367d8:	46bd      	mov	sp, r7
 80367da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80367de:	4770      	bx	lr
 80367e0:	20000d4c 	.word	0x20000d4c

080367e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80367e4:	b580      	push	{r7, lr}
 80367e6:	b082      	sub	sp, #8
 80367e8:	af00      	add	r7, sp, #0
 80367ea:	4603      	mov	r3, r0
 80367ec:	6039      	str	r1, [r7, #0]
 80367ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80367f0:	79fb      	ldrb	r3, [r7, #7]
 80367f2:	2b00      	cmp	r3, #0
 80367f4:	d105      	bne.n	8036802 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80367f6:	683a      	ldr	r2, [r7, #0]
 80367f8:	4907      	ldr	r1, [pc, #28]	; (8036818 <USBD_FS_ProductStrDescriptor+0x34>)
 80367fa:	4808      	ldr	r0, [pc, #32]	; (803681c <USBD_FS_ProductStrDescriptor+0x38>)
 80367fc:	f7ff fde0 	bl	80363c0 <USBD_GetString>
 8036800:	e004      	b.n	803680c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8036802:	683a      	ldr	r2, [r7, #0]
 8036804:	4904      	ldr	r1, [pc, #16]	; (8036818 <USBD_FS_ProductStrDescriptor+0x34>)
 8036806:	4805      	ldr	r0, [pc, #20]	; (803681c <USBD_FS_ProductStrDescriptor+0x38>)
 8036808:	f7ff fdda 	bl	80363c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 803680c:	4b02      	ldr	r3, [pc, #8]	; (8036818 <USBD_FS_ProductStrDescriptor+0x34>)
}
 803680e:	4618      	mov	r0, r3
 8036810:	3708      	adds	r7, #8
 8036812:	46bd      	mov	sp, r7
 8036814:	bd80      	pop	{r7, pc}
 8036816:	bf00      	nop
 8036818:	20003e2c 	.word	0x20003e2c
 803681c:	0803b60c 	.word	0x0803b60c

08036820 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8036820:	b580      	push	{r7, lr}
 8036822:	b082      	sub	sp, #8
 8036824:	af00      	add	r7, sp, #0
 8036826:	4603      	mov	r3, r0
 8036828:	6039      	str	r1, [r7, #0]
 803682a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 803682c:	683a      	ldr	r2, [r7, #0]
 803682e:	4904      	ldr	r1, [pc, #16]	; (8036840 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8036830:	4804      	ldr	r0, [pc, #16]	; (8036844 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8036832:	f7ff fdc5 	bl	80363c0 <USBD_GetString>
  return USBD_StrDesc;
 8036836:	4b02      	ldr	r3, [pc, #8]	; (8036840 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8036838:	4618      	mov	r0, r3
 803683a:	3708      	adds	r7, #8
 803683c:	46bd      	mov	sp, r7
 803683e:	bd80      	pop	{r7, pc}
 8036840:	20003e2c 	.word	0x20003e2c
 8036844:	0803b624 	.word	0x0803b624

08036848 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8036848:	b580      	push	{r7, lr}
 803684a:	b082      	sub	sp, #8
 803684c:	af00      	add	r7, sp, #0
 803684e:	4603      	mov	r3, r0
 8036850:	6039      	str	r1, [r7, #0]
 8036852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8036854:	683b      	ldr	r3, [r7, #0]
 8036856:	221a      	movs	r2, #26
 8036858:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803685a:	f000 f843 	bl	80368e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 803685e:	4b02      	ldr	r3, [pc, #8]	; (8036868 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8036860:	4618      	mov	r0, r3
 8036862:	3708      	adds	r7, #8
 8036864:	46bd      	mov	sp, r7
 8036866:	bd80      	pop	{r7, pc}
 8036868:	20000d50 	.word	0x20000d50

0803686c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803686c:	b580      	push	{r7, lr}
 803686e:	b082      	sub	sp, #8
 8036870:	af00      	add	r7, sp, #0
 8036872:	4603      	mov	r3, r0
 8036874:	6039      	str	r1, [r7, #0]
 8036876:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8036878:	79fb      	ldrb	r3, [r7, #7]
 803687a:	2b00      	cmp	r3, #0
 803687c:	d105      	bne.n	803688a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803687e:	683a      	ldr	r2, [r7, #0]
 8036880:	4907      	ldr	r1, [pc, #28]	; (80368a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8036882:	4808      	ldr	r0, [pc, #32]	; (80368a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8036884:	f7ff fd9c 	bl	80363c0 <USBD_GetString>
 8036888:	e004      	b.n	8036894 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803688a:	683a      	ldr	r2, [r7, #0]
 803688c:	4904      	ldr	r1, [pc, #16]	; (80368a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 803688e:	4805      	ldr	r0, [pc, #20]	; (80368a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8036890:	f7ff fd96 	bl	80363c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8036894:	4b02      	ldr	r3, [pc, #8]	; (80368a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8036896:	4618      	mov	r0, r3
 8036898:	3708      	adds	r7, #8
 803689a:	46bd      	mov	sp, r7
 803689c:	bd80      	pop	{r7, pc}
 803689e:	bf00      	nop
 80368a0:	20003e2c 	.word	0x20003e2c
 80368a4:	0803b638 	.word	0x0803b638

080368a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80368a8:	b580      	push	{r7, lr}
 80368aa:	b082      	sub	sp, #8
 80368ac:	af00      	add	r7, sp, #0
 80368ae:	4603      	mov	r3, r0
 80368b0:	6039      	str	r1, [r7, #0]
 80368b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80368b4:	79fb      	ldrb	r3, [r7, #7]
 80368b6:	2b00      	cmp	r3, #0
 80368b8:	d105      	bne.n	80368c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80368ba:	683a      	ldr	r2, [r7, #0]
 80368bc:	4907      	ldr	r1, [pc, #28]	; (80368dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80368be:	4808      	ldr	r0, [pc, #32]	; (80368e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80368c0:	f7ff fd7e 	bl	80363c0 <USBD_GetString>
 80368c4:	e004      	b.n	80368d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80368c6:	683a      	ldr	r2, [r7, #0]
 80368c8:	4904      	ldr	r1, [pc, #16]	; (80368dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80368ca:	4805      	ldr	r0, [pc, #20]	; (80368e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80368cc:	f7ff fd78 	bl	80363c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80368d0:	4b02      	ldr	r3, [pc, #8]	; (80368dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80368d2:	4618      	mov	r0, r3
 80368d4:	3708      	adds	r7, #8
 80368d6:	46bd      	mov	sp, r7
 80368d8:	bd80      	pop	{r7, pc}
 80368da:	bf00      	nop
 80368dc:	20003e2c 	.word	0x20003e2c
 80368e0:	0803b644 	.word	0x0803b644

080368e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80368e4:	b580      	push	{r7, lr}
 80368e6:	b084      	sub	sp, #16
 80368e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80368ea:	4b0f      	ldr	r3, [pc, #60]	; (8036928 <Get_SerialNum+0x44>)
 80368ec:	681b      	ldr	r3, [r3, #0]
 80368ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80368f0:	4b0e      	ldr	r3, [pc, #56]	; (803692c <Get_SerialNum+0x48>)
 80368f2:	681b      	ldr	r3, [r3, #0]
 80368f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80368f6:	4b0e      	ldr	r3, [pc, #56]	; (8036930 <Get_SerialNum+0x4c>)
 80368f8:	681b      	ldr	r3, [r3, #0]
 80368fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80368fc:	68fa      	ldr	r2, [r7, #12]
 80368fe:	687b      	ldr	r3, [r7, #4]
 8036900:	4413      	add	r3, r2
 8036902:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8036904:	68fb      	ldr	r3, [r7, #12]
 8036906:	2b00      	cmp	r3, #0
 8036908:	d009      	beq.n	803691e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 803690a:	2208      	movs	r2, #8
 803690c:	4909      	ldr	r1, [pc, #36]	; (8036934 <Get_SerialNum+0x50>)
 803690e:	68f8      	ldr	r0, [r7, #12]
 8036910:	f000 f814 	bl	803693c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8036914:	2204      	movs	r2, #4
 8036916:	4908      	ldr	r1, [pc, #32]	; (8036938 <Get_SerialNum+0x54>)
 8036918:	68b8      	ldr	r0, [r7, #8]
 803691a:	f000 f80f 	bl	803693c <IntToUnicode>
  }
}
 803691e:	bf00      	nop
 8036920:	3710      	adds	r7, #16
 8036922:	46bd      	mov	sp, r7
 8036924:	bd80      	pop	{r7, pc}
 8036926:	bf00      	nop
 8036928:	1fff7a10 	.word	0x1fff7a10
 803692c:	1fff7a14 	.word	0x1fff7a14
 8036930:	1fff7a18 	.word	0x1fff7a18
 8036934:	20000d52 	.word	0x20000d52
 8036938:	20000d62 	.word	0x20000d62

0803693c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 803693c:	b480      	push	{r7}
 803693e:	b087      	sub	sp, #28
 8036940:	af00      	add	r7, sp, #0
 8036942:	60f8      	str	r0, [r7, #12]
 8036944:	60b9      	str	r1, [r7, #8]
 8036946:	4613      	mov	r3, r2
 8036948:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 803694a:	2300      	movs	r3, #0
 803694c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 803694e:	2300      	movs	r3, #0
 8036950:	75fb      	strb	r3, [r7, #23]
 8036952:	e027      	b.n	80369a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8036954:	68fb      	ldr	r3, [r7, #12]
 8036956:	0f1b      	lsrs	r3, r3, #28
 8036958:	2b09      	cmp	r3, #9
 803695a:	d80b      	bhi.n	8036974 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 803695c:	68fb      	ldr	r3, [r7, #12]
 803695e:	0f1b      	lsrs	r3, r3, #28
 8036960:	b2da      	uxtb	r2, r3
 8036962:	7dfb      	ldrb	r3, [r7, #23]
 8036964:	005b      	lsls	r3, r3, #1
 8036966:	4619      	mov	r1, r3
 8036968:	68bb      	ldr	r3, [r7, #8]
 803696a:	440b      	add	r3, r1
 803696c:	3230      	adds	r2, #48	; 0x30
 803696e:	b2d2      	uxtb	r2, r2
 8036970:	701a      	strb	r2, [r3, #0]
 8036972:	e00a      	b.n	803698a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8036974:	68fb      	ldr	r3, [r7, #12]
 8036976:	0f1b      	lsrs	r3, r3, #28
 8036978:	b2da      	uxtb	r2, r3
 803697a:	7dfb      	ldrb	r3, [r7, #23]
 803697c:	005b      	lsls	r3, r3, #1
 803697e:	4619      	mov	r1, r3
 8036980:	68bb      	ldr	r3, [r7, #8]
 8036982:	440b      	add	r3, r1
 8036984:	3237      	adds	r2, #55	; 0x37
 8036986:	b2d2      	uxtb	r2, r2
 8036988:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 803698a:	68fb      	ldr	r3, [r7, #12]
 803698c:	011b      	lsls	r3, r3, #4
 803698e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8036990:	7dfb      	ldrb	r3, [r7, #23]
 8036992:	005b      	lsls	r3, r3, #1
 8036994:	3301      	adds	r3, #1
 8036996:	68ba      	ldr	r2, [r7, #8]
 8036998:	4413      	add	r3, r2
 803699a:	2200      	movs	r2, #0
 803699c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803699e:	7dfb      	ldrb	r3, [r7, #23]
 80369a0:	3301      	adds	r3, #1
 80369a2:	75fb      	strb	r3, [r7, #23]
 80369a4:	7dfa      	ldrb	r2, [r7, #23]
 80369a6:	79fb      	ldrb	r3, [r7, #7]
 80369a8:	429a      	cmp	r2, r3
 80369aa:	d3d3      	bcc.n	8036954 <IntToUnicode+0x18>
  }
}
 80369ac:	bf00      	nop
 80369ae:	bf00      	nop
 80369b0:	371c      	adds	r7, #28
 80369b2:	46bd      	mov	sp, r7
 80369b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80369b8:	4770      	bx	lr
	...

080369bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80369bc:	b580      	push	{r7, lr}
 80369be:	b08a      	sub	sp, #40	; 0x28
 80369c0:	af00      	add	r7, sp, #0
 80369c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80369c4:	f107 0314 	add.w	r3, r7, #20
 80369c8:	2200      	movs	r2, #0
 80369ca:	601a      	str	r2, [r3, #0]
 80369cc:	605a      	str	r2, [r3, #4]
 80369ce:	609a      	str	r2, [r3, #8]
 80369d0:	60da      	str	r2, [r3, #12]
 80369d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80369d4:	687b      	ldr	r3, [r7, #4]
 80369d6:	681b      	ldr	r3, [r3, #0]
 80369d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80369dc:	d13a      	bne.n	8036a54 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80369de:	2300      	movs	r3, #0
 80369e0:	613b      	str	r3, [r7, #16]
 80369e2:	4b1e      	ldr	r3, [pc, #120]	; (8036a5c <HAL_PCD_MspInit+0xa0>)
 80369e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80369e6:	4a1d      	ldr	r2, [pc, #116]	; (8036a5c <HAL_PCD_MspInit+0xa0>)
 80369e8:	f043 0301 	orr.w	r3, r3, #1
 80369ec:	6313      	str	r3, [r2, #48]	; 0x30
 80369ee:	4b1b      	ldr	r3, [pc, #108]	; (8036a5c <HAL_PCD_MspInit+0xa0>)
 80369f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80369f2:	f003 0301 	and.w	r3, r3, #1
 80369f6:	613b      	str	r3, [r7, #16]
 80369f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80369fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80369fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8036a00:	2302      	movs	r3, #2
 8036a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8036a04:	2300      	movs	r3, #0
 8036a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8036a08:	2303      	movs	r3, #3
 8036a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8036a0c:	230a      	movs	r3, #10
 8036a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8036a10:	f107 0314 	add.w	r3, r7, #20
 8036a14:	4619      	mov	r1, r3
 8036a16:	4812      	ldr	r0, [pc, #72]	; (8036a60 <HAL_PCD_MspInit+0xa4>)
 8036a18:	f7ec fbcc 	bl	80231b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8036a1c:	4b0f      	ldr	r3, [pc, #60]	; (8036a5c <HAL_PCD_MspInit+0xa0>)
 8036a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036a20:	4a0e      	ldr	r2, [pc, #56]	; (8036a5c <HAL_PCD_MspInit+0xa0>)
 8036a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8036a26:	6353      	str	r3, [r2, #52]	; 0x34
 8036a28:	2300      	movs	r3, #0
 8036a2a:	60fb      	str	r3, [r7, #12]
 8036a2c:	4b0b      	ldr	r3, [pc, #44]	; (8036a5c <HAL_PCD_MspInit+0xa0>)
 8036a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8036a30:	4a0a      	ldr	r2, [pc, #40]	; (8036a5c <HAL_PCD_MspInit+0xa0>)
 8036a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8036a36:	6453      	str	r3, [r2, #68]	; 0x44
 8036a38:	4b08      	ldr	r3, [pc, #32]	; (8036a5c <HAL_PCD_MspInit+0xa0>)
 8036a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8036a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8036a40:	60fb      	str	r3, [r7, #12]
 8036a42:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8036a44:	2200      	movs	r2, #0
 8036a46:	2100      	movs	r1, #0
 8036a48:	2043      	movs	r0, #67	; 0x43
 8036a4a:	f7eb fd2f 	bl	80224ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8036a4e:	2043      	movs	r0, #67	; 0x43
 8036a50:	f7eb fd48 	bl	80224e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8036a54:	bf00      	nop
 8036a56:	3728      	adds	r7, #40	; 0x28
 8036a58:	46bd      	mov	sp, r7
 8036a5a:	bd80      	pop	{r7, pc}
 8036a5c:	40023800 	.word	0x40023800
 8036a60:	40020000 	.word	0x40020000

08036a64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036a64:	b580      	push	{r7, lr}
 8036a66:	b082      	sub	sp, #8
 8036a68:	af00      	add	r7, sp, #0
 8036a6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8036a6c:	687b      	ldr	r3, [r7, #4]
 8036a6e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8036a72:	687b      	ldr	r3, [r7, #4]
 8036a74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8036a78:	4619      	mov	r1, r3
 8036a7a:	4610      	mov	r0, r2
 8036a7c:	f7fe fd0e 	bl	803549c <USBD_LL_SetupStage>
}
 8036a80:	bf00      	nop
 8036a82:	3708      	adds	r7, #8
 8036a84:	46bd      	mov	sp, r7
 8036a86:	bd80      	pop	{r7, pc}

08036a88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036a88:	b580      	push	{r7, lr}
 8036a8a:	b082      	sub	sp, #8
 8036a8c:	af00      	add	r7, sp, #0
 8036a8e:	6078      	str	r0, [r7, #4]
 8036a90:	460b      	mov	r3, r1
 8036a92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8036a94:	687b      	ldr	r3, [r7, #4]
 8036a96:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8036a9a:	78fa      	ldrb	r2, [r7, #3]
 8036a9c:	6879      	ldr	r1, [r7, #4]
 8036a9e:	4613      	mov	r3, r2
 8036aa0:	00db      	lsls	r3, r3, #3
 8036aa2:	1a9b      	subs	r3, r3, r2
 8036aa4:	009b      	lsls	r3, r3, #2
 8036aa6:	440b      	add	r3, r1
 8036aa8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8036aac:	681a      	ldr	r2, [r3, #0]
 8036aae:	78fb      	ldrb	r3, [r7, #3]
 8036ab0:	4619      	mov	r1, r3
 8036ab2:	f7fe fd48 	bl	8035546 <USBD_LL_DataOutStage>
}
 8036ab6:	bf00      	nop
 8036ab8:	3708      	adds	r7, #8
 8036aba:	46bd      	mov	sp, r7
 8036abc:	bd80      	pop	{r7, pc}

08036abe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036abe:	b580      	push	{r7, lr}
 8036ac0:	b082      	sub	sp, #8
 8036ac2:	af00      	add	r7, sp, #0
 8036ac4:	6078      	str	r0, [r7, #4]
 8036ac6:	460b      	mov	r3, r1
 8036ac8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8036aca:	687b      	ldr	r3, [r7, #4]
 8036acc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8036ad0:	78fa      	ldrb	r2, [r7, #3]
 8036ad2:	6879      	ldr	r1, [r7, #4]
 8036ad4:	4613      	mov	r3, r2
 8036ad6:	00db      	lsls	r3, r3, #3
 8036ad8:	1a9b      	subs	r3, r3, r2
 8036ada:	009b      	lsls	r3, r3, #2
 8036adc:	440b      	add	r3, r1
 8036ade:	3348      	adds	r3, #72	; 0x48
 8036ae0:	681a      	ldr	r2, [r3, #0]
 8036ae2:	78fb      	ldrb	r3, [r7, #3]
 8036ae4:	4619      	mov	r1, r3
 8036ae6:	f7fe fd91 	bl	803560c <USBD_LL_DataInStage>
}
 8036aea:	bf00      	nop
 8036aec:	3708      	adds	r7, #8
 8036aee:	46bd      	mov	sp, r7
 8036af0:	bd80      	pop	{r7, pc}

08036af2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036af2:	b580      	push	{r7, lr}
 8036af4:	b082      	sub	sp, #8
 8036af6:	af00      	add	r7, sp, #0
 8036af8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8036afa:	687b      	ldr	r3, [r7, #4]
 8036afc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036b00:	4618      	mov	r0, r3
 8036b02:	f7fe fe95 	bl	8035830 <USBD_LL_SOF>
}
 8036b06:	bf00      	nop
 8036b08:	3708      	adds	r7, #8
 8036b0a:	46bd      	mov	sp, r7
 8036b0c:	bd80      	pop	{r7, pc}

08036b0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036b0e:	b580      	push	{r7, lr}
 8036b10:	b084      	sub	sp, #16
 8036b12:	af00      	add	r7, sp, #0
 8036b14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8036b16:	2301      	movs	r3, #1
 8036b18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8036b1a:	687b      	ldr	r3, [r7, #4]
 8036b1c:	68db      	ldr	r3, [r3, #12]
 8036b1e:	2b00      	cmp	r3, #0
 8036b20:	d102      	bne.n	8036b28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8036b22:	2300      	movs	r3, #0
 8036b24:	73fb      	strb	r3, [r7, #15]
 8036b26:	e008      	b.n	8036b3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8036b28:	687b      	ldr	r3, [r7, #4]
 8036b2a:	68db      	ldr	r3, [r3, #12]
 8036b2c:	2b02      	cmp	r3, #2
 8036b2e:	d102      	bne.n	8036b36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8036b30:	2301      	movs	r3, #1
 8036b32:	73fb      	strb	r3, [r7, #15]
 8036b34:	e001      	b.n	8036b3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8036b36:	f7ea fa03 	bl	8020f40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8036b3a:	687b      	ldr	r3, [r7, #4]
 8036b3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036b40:	7bfa      	ldrb	r2, [r7, #15]
 8036b42:	4611      	mov	r1, r2
 8036b44:	4618      	mov	r0, r3
 8036b46:	f7fe fe38 	bl	80357ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8036b4a:	687b      	ldr	r3, [r7, #4]
 8036b4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036b50:	4618      	mov	r0, r3
 8036b52:	f7fe fdf1 	bl	8035738 <USBD_LL_Reset>
}
 8036b56:	bf00      	nop
 8036b58:	3710      	adds	r7, #16
 8036b5a:	46bd      	mov	sp, r7
 8036b5c:	bd80      	pop	{r7, pc}
	...

08036b60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036b60:	b580      	push	{r7, lr}
 8036b62:	b082      	sub	sp, #8
 8036b64:	af00      	add	r7, sp, #0
 8036b66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8036b68:	687b      	ldr	r3, [r7, #4]
 8036b6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036b6e:	4618      	mov	r0, r3
 8036b70:	f7fe fe33 	bl	80357da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8036b74:	687b      	ldr	r3, [r7, #4]
 8036b76:	681b      	ldr	r3, [r3, #0]
 8036b78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8036b7c:	681b      	ldr	r3, [r3, #0]
 8036b7e:	687a      	ldr	r2, [r7, #4]
 8036b80:	6812      	ldr	r2, [r2, #0]
 8036b82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8036b86:	f043 0301 	orr.w	r3, r3, #1
 8036b8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8036b8c:	687b      	ldr	r3, [r7, #4]
 8036b8e:	6a1b      	ldr	r3, [r3, #32]
 8036b90:	2b00      	cmp	r3, #0
 8036b92:	d005      	beq.n	8036ba0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8036b94:	4b04      	ldr	r3, [pc, #16]	; (8036ba8 <HAL_PCD_SuspendCallback+0x48>)
 8036b96:	691b      	ldr	r3, [r3, #16]
 8036b98:	4a03      	ldr	r2, [pc, #12]	; (8036ba8 <HAL_PCD_SuspendCallback+0x48>)
 8036b9a:	f043 0306 	orr.w	r3, r3, #6
 8036b9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8036ba0:	bf00      	nop
 8036ba2:	3708      	adds	r7, #8
 8036ba4:	46bd      	mov	sp, r7
 8036ba6:	bd80      	pop	{r7, pc}
 8036ba8:	e000ed00 	.word	0xe000ed00

08036bac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036bac:	b580      	push	{r7, lr}
 8036bae:	b082      	sub	sp, #8
 8036bb0:	af00      	add	r7, sp, #0
 8036bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8036bb4:	687b      	ldr	r3, [r7, #4]
 8036bb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036bba:	4618      	mov	r0, r3
 8036bbc:	f7fe fe22 	bl	8035804 <USBD_LL_Resume>
}
 8036bc0:	bf00      	nop
 8036bc2:	3708      	adds	r7, #8
 8036bc4:	46bd      	mov	sp, r7
 8036bc6:	bd80      	pop	{r7, pc}

08036bc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036bc8:	b580      	push	{r7, lr}
 8036bca:	b082      	sub	sp, #8
 8036bcc:	af00      	add	r7, sp, #0
 8036bce:	6078      	str	r0, [r7, #4]
 8036bd0:	460b      	mov	r3, r1
 8036bd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8036bd4:	687b      	ldr	r3, [r7, #4]
 8036bd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036bda:	78fa      	ldrb	r2, [r7, #3]
 8036bdc:	4611      	mov	r1, r2
 8036bde:	4618      	mov	r0, r3
 8036be0:	f7fe fe4d 	bl	803587e <USBD_LL_IsoOUTIncomplete>
}
 8036be4:	bf00      	nop
 8036be6:	3708      	adds	r7, #8
 8036be8:	46bd      	mov	sp, r7
 8036bea:	bd80      	pop	{r7, pc}

08036bec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036bec:	b580      	push	{r7, lr}
 8036bee:	b082      	sub	sp, #8
 8036bf0:	af00      	add	r7, sp, #0
 8036bf2:	6078      	str	r0, [r7, #4]
 8036bf4:	460b      	mov	r3, r1
 8036bf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8036bf8:	687b      	ldr	r3, [r7, #4]
 8036bfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036bfe:	78fa      	ldrb	r2, [r7, #3]
 8036c00:	4611      	mov	r1, r2
 8036c02:	4618      	mov	r0, r3
 8036c04:	f7fe fe2e 	bl	8035864 <USBD_LL_IsoINIncomplete>
}
 8036c08:	bf00      	nop
 8036c0a:	3708      	adds	r7, #8
 8036c0c:	46bd      	mov	sp, r7
 8036c0e:	bd80      	pop	{r7, pc}

08036c10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036c10:	b580      	push	{r7, lr}
 8036c12:	b082      	sub	sp, #8
 8036c14:	af00      	add	r7, sp, #0
 8036c16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8036c18:	687b      	ldr	r3, [r7, #4]
 8036c1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036c1e:	4618      	mov	r0, r3
 8036c20:	f7fe fe3a 	bl	8035898 <USBD_LL_DevConnected>
}
 8036c24:	bf00      	nop
 8036c26:	3708      	adds	r7, #8
 8036c28:	46bd      	mov	sp, r7
 8036c2a:	bd80      	pop	{r7, pc}

08036c2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036c2c:	b580      	push	{r7, lr}
 8036c2e:	b082      	sub	sp, #8
 8036c30:	af00      	add	r7, sp, #0
 8036c32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8036c34:	687b      	ldr	r3, [r7, #4]
 8036c36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036c3a:	4618      	mov	r0, r3
 8036c3c:	f7fe fe37 	bl	80358ae <USBD_LL_DevDisconnected>
}
 8036c40:	bf00      	nop
 8036c42:	3708      	adds	r7, #8
 8036c44:	46bd      	mov	sp, r7
 8036c46:	bd80      	pop	{r7, pc}

08036c48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8036c48:	b580      	push	{r7, lr}
 8036c4a:	b082      	sub	sp, #8
 8036c4c:	af00      	add	r7, sp, #0
 8036c4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8036c50:	687b      	ldr	r3, [r7, #4]
 8036c52:	781b      	ldrb	r3, [r3, #0]
 8036c54:	2b00      	cmp	r3, #0
 8036c56:	d13c      	bne.n	8036cd2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8036c58:	4a20      	ldr	r2, [pc, #128]	; (8036cdc <USBD_LL_Init+0x94>)
 8036c5a:	687b      	ldr	r3, [r7, #4]
 8036c5c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8036c60:	687b      	ldr	r3, [r7, #4]
 8036c62:	4a1e      	ldr	r2, [pc, #120]	; (8036cdc <USBD_LL_Init+0x94>)
 8036c64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8036c68:	4b1c      	ldr	r3, [pc, #112]	; (8036cdc <USBD_LL_Init+0x94>)
 8036c6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8036c6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8036c70:	4b1a      	ldr	r3, [pc, #104]	; (8036cdc <USBD_LL_Init+0x94>)
 8036c72:	2204      	movs	r2, #4
 8036c74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8036c76:	4b19      	ldr	r3, [pc, #100]	; (8036cdc <USBD_LL_Init+0x94>)
 8036c78:	2202      	movs	r2, #2
 8036c7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8036c7c:	4b17      	ldr	r3, [pc, #92]	; (8036cdc <USBD_LL_Init+0x94>)
 8036c7e:	2200      	movs	r2, #0
 8036c80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8036c82:	4b16      	ldr	r3, [pc, #88]	; (8036cdc <USBD_LL_Init+0x94>)
 8036c84:	2202      	movs	r2, #2
 8036c86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8036c88:	4b14      	ldr	r3, [pc, #80]	; (8036cdc <USBD_LL_Init+0x94>)
 8036c8a:	2200      	movs	r2, #0
 8036c8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8036c8e:	4b13      	ldr	r3, [pc, #76]	; (8036cdc <USBD_LL_Init+0x94>)
 8036c90:	2200      	movs	r2, #0
 8036c92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8036c94:	4b11      	ldr	r3, [pc, #68]	; (8036cdc <USBD_LL_Init+0x94>)
 8036c96:	2200      	movs	r2, #0
 8036c98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8036c9a:	4b10      	ldr	r3, [pc, #64]	; (8036cdc <USBD_LL_Init+0x94>)
 8036c9c:	2200      	movs	r2, #0
 8036c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8036ca0:	4b0e      	ldr	r3, [pc, #56]	; (8036cdc <USBD_LL_Init+0x94>)
 8036ca2:	2200      	movs	r2, #0
 8036ca4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8036ca6:	480d      	ldr	r0, [pc, #52]	; (8036cdc <USBD_LL_Init+0x94>)
 8036ca8:	f7ee fe3b 	bl	8025922 <HAL_PCD_Init>
 8036cac:	4603      	mov	r3, r0
 8036cae:	2b00      	cmp	r3, #0
 8036cb0:	d001      	beq.n	8036cb6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8036cb2:	f7ea f945 	bl	8020f40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8036cb6:	2180      	movs	r1, #128	; 0x80
 8036cb8:	4808      	ldr	r0, [pc, #32]	; (8036cdc <USBD_LL_Init+0x94>)
 8036cba:	f7ef ff98 	bl	8026bee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8036cbe:	2240      	movs	r2, #64	; 0x40
 8036cc0:	2100      	movs	r1, #0
 8036cc2:	4806      	ldr	r0, [pc, #24]	; (8036cdc <USBD_LL_Init+0x94>)
 8036cc4:	f7ef ff4c 	bl	8026b60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8036cc8:	2280      	movs	r2, #128	; 0x80
 8036cca:	2101      	movs	r1, #1
 8036ccc:	4803      	ldr	r0, [pc, #12]	; (8036cdc <USBD_LL_Init+0x94>)
 8036cce:	f7ef ff47 	bl	8026b60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8036cd2:	2300      	movs	r3, #0
}
 8036cd4:	4618      	mov	r0, r3
 8036cd6:	3708      	adds	r7, #8
 8036cd8:	46bd      	mov	sp, r7
 8036cda:	bd80      	pop	{r7, pc}
 8036cdc:	2000402c 	.word	0x2000402c

08036ce0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8036ce0:	b580      	push	{r7, lr}
 8036ce2:	b084      	sub	sp, #16
 8036ce4:	af00      	add	r7, sp, #0
 8036ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036ce8:	2300      	movs	r3, #0
 8036cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036cec:	2300      	movs	r3, #0
 8036cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8036cf0:	687b      	ldr	r3, [r7, #4]
 8036cf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036cf6:	4618      	mov	r0, r3
 8036cf8:	f7ee ff30 	bl	8025b5c <HAL_PCD_Start>
 8036cfc:	4603      	mov	r3, r0
 8036cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036d00:	7bfb      	ldrb	r3, [r7, #15]
 8036d02:	4618      	mov	r0, r3
 8036d04:	f000 f92a 	bl	8036f5c <USBD_Get_USB_Status>
 8036d08:	4603      	mov	r3, r0
 8036d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8036d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8036d0e:	4618      	mov	r0, r3
 8036d10:	3710      	adds	r7, #16
 8036d12:	46bd      	mov	sp, r7
 8036d14:	bd80      	pop	{r7, pc}

08036d16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8036d16:	b580      	push	{r7, lr}
 8036d18:	b084      	sub	sp, #16
 8036d1a:	af00      	add	r7, sp, #0
 8036d1c:	6078      	str	r0, [r7, #4]
 8036d1e:	4608      	mov	r0, r1
 8036d20:	4611      	mov	r1, r2
 8036d22:	461a      	mov	r2, r3
 8036d24:	4603      	mov	r3, r0
 8036d26:	70fb      	strb	r3, [r7, #3]
 8036d28:	460b      	mov	r3, r1
 8036d2a:	70bb      	strb	r3, [r7, #2]
 8036d2c:	4613      	mov	r3, r2
 8036d2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036d30:	2300      	movs	r3, #0
 8036d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036d34:	2300      	movs	r3, #0
 8036d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8036d38:	687b      	ldr	r3, [r7, #4]
 8036d3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8036d3e:	78bb      	ldrb	r3, [r7, #2]
 8036d40:	883a      	ldrh	r2, [r7, #0]
 8036d42:	78f9      	ldrb	r1, [r7, #3]
 8036d44:	f7ef fb14 	bl	8026370 <HAL_PCD_EP_Open>
 8036d48:	4603      	mov	r3, r0
 8036d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036d4c:	7bfb      	ldrb	r3, [r7, #15]
 8036d4e:	4618      	mov	r0, r3
 8036d50:	f000 f904 	bl	8036f5c <USBD_Get_USB_Status>
 8036d54:	4603      	mov	r3, r0
 8036d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8036d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8036d5a:	4618      	mov	r0, r3
 8036d5c:	3710      	adds	r7, #16
 8036d5e:	46bd      	mov	sp, r7
 8036d60:	bd80      	pop	{r7, pc}

08036d62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8036d62:	b580      	push	{r7, lr}
 8036d64:	b084      	sub	sp, #16
 8036d66:	af00      	add	r7, sp, #0
 8036d68:	6078      	str	r0, [r7, #4]
 8036d6a:	460b      	mov	r3, r1
 8036d6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036d6e:	2300      	movs	r3, #0
 8036d70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036d72:	2300      	movs	r3, #0
 8036d74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8036d76:	687b      	ldr	r3, [r7, #4]
 8036d78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036d7c:	78fa      	ldrb	r2, [r7, #3]
 8036d7e:	4611      	mov	r1, r2
 8036d80:	4618      	mov	r0, r3
 8036d82:	f7ef fb5d 	bl	8026440 <HAL_PCD_EP_Close>
 8036d86:	4603      	mov	r3, r0
 8036d88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036d8a:	7bfb      	ldrb	r3, [r7, #15]
 8036d8c:	4618      	mov	r0, r3
 8036d8e:	f000 f8e5 	bl	8036f5c <USBD_Get_USB_Status>
 8036d92:	4603      	mov	r3, r0
 8036d94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8036d96:	7bbb      	ldrb	r3, [r7, #14]
}
 8036d98:	4618      	mov	r0, r3
 8036d9a:	3710      	adds	r7, #16
 8036d9c:	46bd      	mov	sp, r7
 8036d9e:	bd80      	pop	{r7, pc}

08036da0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8036da0:	b580      	push	{r7, lr}
 8036da2:	b084      	sub	sp, #16
 8036da4:	af00      	add	r7, sp, #0
 8036da6:	6078      	str	r0, [r7, #4]
 8036da8:	460b      	mov	r3, r1
 8036daa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036dac:	2300      	movs	r3, #0
 8036dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036db0:	2300      	movs	r3, #0
 8036db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8036db4:	687b      	ldr	r3, [r7, #4]
 8036db6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036dba:	78fa      	ldrb	r2, [r7, #3]
 8036dbc:	4611      	mov	r1, r2
 8036dbe:	4618      	mov	r0, r3
 8036dc0:	f7ef fc35 	bl	802662e <HAL_PCD_EP_SetStall>
 8036dc4:	4603      	mov	r3, r0
 8036dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036dc8:	7bfb      	ldrb	r3, [r7, #15]
 8036dca:	4618      	mov	r0, r3
 8036dcc:	f000 f8c6 	bl	8036f5c <USBD_Get_USB_Status>
 8036dd0:	4603      	mov	r3, r0
 8036dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8036dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8036dd6:	4618      	mov	r0, r3
 8036dd8:	3710      	adds	r7, #16
 8036dda:	46bd      	mov	sp, r7
 8036ddc:	bd80      	pop	{r7, pc}

08036dde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8036dde:	b580      	push	{r7, lr}
 8036de0:	b084      	sub	sp, #16
 8036de2:	af00      	add	r7, sp, #0
 8036de4:	6078      	str	r0, [r7, #4]
 8036de6:	460b      	mov	r3, r1
 8036de8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036dea:	2300      	movs	r3, #0
 8036dec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036dee:	2300      	movs	r3, #0
 8036df0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8036df2:	687b      	ldr	r3, [r7, #4]
 8036df4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036df8:	78fa      	ldrb	r2, [r7, #3]
 8036dfa:	4611      	mov	r1, r2
 8036dfc:	4618      	mov	r0, r3
 8036dfe:	f7ef fc7a 	bl	80266f6 <HAL_PCD_EP_ClrStall>
 8036e02:	4603      	mov	r3, r0
 8036e04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036e06:	7bfb      	ldrb	r3, [r7, #15]
 8036e08:	4618      	mov	r0, r3
 8036e0a:	f000 f8a7 	bl	8036f5c <USBD_Get_USB_Status>
 8036e0e:	4603      	mov	r3, r0
 8036e10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8036e12:	7bbb      	ldrb	r3, [r7, #14]
}
 8036e14:	4618      	mov	r0, r3
 8036e16:	3710      	adds	r7, #16
 8036e18:	46bd      	mov	sp, r7
 8036e1a:	bd80      	pop	{r7, pc}

08036e1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8036e1c:	b480      	push	{r7}
 8036e1e:	b085      	sub	sp, #20
 8036e20:	af00      	add	r7, sp, #0
 8036e22:	6078      	str	r0, [r7, #4]
 8036e24:	460b      	mov	r3, r1
 8036e26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8036e28:	687b      	ldr	r3, [r7, #4]
 8036e2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036e2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8036e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8036e34:	2b00      	cmp	r3, #0
 8036e36:	da0b      	bge.n	8036e50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8036e38:	78fb      	ldrb	r3, [r7, #3]
 8036e3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8036e3e:	68f9      	ldr	r1, [r7, #12]
 8036e40:	4613      	mov	r3, r2
 8036e42:	00db      	lsls	r3, r3, #3
 8036e44:	1a9b      	subs	r3, r3, r2
 8036e46:	009b      	lsls	r3, r3, #2
 8036e48:	440b      	add	r3, r1
 8036e4a:	333e      	adds	r3, #62	; 0x3e
 8036e4c:	781b      	ldrb	r3, [r3, #0]
 8036e4e:	e00b      	b.n	8036e68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8036e50:	78fb      	ldrb	r3, [r7, #3]
 8036e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8036e56:	68f9      	ldr	r1, [r7, #12]
 8036e58:	4613      	mov	r3, r2
 8036e5a:	00db      	lsls	r3, r3, #3
 8036e5c:	1a9b      	subs	r3, r3, r2
 8036e5e:	009b      	lsls	r3, r3, #2
 8036e60:	440b      	add	r3, r1
 8036e62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8036e66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8036e68:	4618      	mov	r0, r3
 8036e6a:	3714      	adds	r7, #20
 8036e6c:	46bd      	mov	sp, r7
 8036e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036e72:	4770      	bx	lr

08036e74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8036e74:	b580      	push	{r7, lr}
 8036e76:	b084      	sub	sp, #16
 8036e78:	af00      	add	r7, sp, #0
 8036e7a:	6078      	str	r0, [r7, #4]
 8036e7c:	460b      	mov	r3, r1
 8036e7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036e80:	2300      	movs	r3, #0
 8036e82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036e84:	2300      	movs	r3, #0
 8036e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8036e88:	687b      	ldr	r3, [r7, #4]
 8036e8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036e8e:	78fa      	ldrb	r2, [r7, #3]
 8036e90:	4611      	mov	r1, r2
 8036e92:	4618      	mov	r0, r3
 8036e94:	f7ef fa47 	bl	8026326 <HAL_PCD_SetAddress>
 8036e98:	4603      	mov	r3, r0
 8036e9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036e9c:	7bfb      	ldrb	r3, [r7, #15]
 8036e9e:	4618      	mov	r0, r3
 8036ea0:	f000 f85c 	bl	8036f5c <USBD_Get_USB_Status>
 8036ea4:	4603      	mov	r3, r0
 8036ea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8036ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8036eaa:	4618      	mov	r0, r3
 8036eac:	3710      	adds	r7, #16
 8036eae:	46bd      	mov	sp, r7
 8036eb0:	bd80      	pop	{r7, pc}

08036eb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8036eb2:	b580      	push	{r7, lr}
 8036eb4:	b086      	sub	sp, #24
 8036eb6:	af00      	add	r7, sp, #0
 8036eb8:	60f8      	str	r0, [r7, #12]
 8036eba:	607a      	str	r2, [r7, #4]
 8036ebc:	603b      	str	r3, [r7, #0]
 8036ebe:	460b      	mov	r3, r1
 8036ec0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036ec2:	2300      	movs	r3, #0
 8036ec4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036ec6:	2300      	movs	r3, #0
 8036ec8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8036eca:	68fb      	ldr	r3, [r7, #12]
 8036ecc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8036ed0:	7af9      	ldrb	r1, [r7, #11]
 8036ed2:	683b      	ldr	r3, [r7, #0]
 8036ed4:	687a      	ldr	r2, [r7, #4]
 8036ed6:	f7ef fb60 	bl	802659a <HAL_PCD_EP_Transmit>
 8036eda:	4603      	mov	r3, r0
 8036edc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036ede:	7dfb      	ldrb	r3, [r7, #23]
 8036ee0:	4618      	mov	r0, r3
 8036ee2:	f000 f83b 	bl	8036f5c <USBD_Get_USB_Status>
 8036ee6:	4603      	mov	r3, r0
 8036ee8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8036eea:	7dbb      	ldrb	r3, [r7, #22]
}
 8036eec:	4618      	mov	r0, r3
 8036eee:	3718      	adds	r7, #24
 8036ef0:	46bd      	mov	sp, r7
 8036ef2:	bd80      	pop	{r7, pc}

08036ef4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8036ef4:	b580      	push	{r7, lr}
 8036ef6:	b086      	sub	sp, #24
 8036ef8:	af00      	add	r7, sp, #0
 8036efa:	60f8      	str	r0, [r7, #12]
 8036efc:	607a      	str	r2, [r7, #4]
 8036efe:	603b      	str	r3, [r7, #0]
 8036f00:	460b      	mov	r3, r1
 8036f02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036f04:	2300      	movs	r3, #0
 8036f06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036f08:	2300      	movs	r3, #0
 8036f0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8036f0c:	68fb      	ldr	r3, [r7, #12]
 8036f0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8036f12:	7af9      	ldrb	r1, [r7, #11]
 8036f14:	683b      	ldr	r3, [r7, #0]
 8036f16:	687a      	ldr	r2, [r7, #4]
 8036f18:	f7ef fadc 	bl	80264d4 <HAL_PCD_EP_Receive>
 8036f1c:	4603      	mov	r3, r0
 8036f1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036f20:	7dfb      	ldrb	r3, [r7, #23]
 8036f22:	4618      	mov	r0, r3
 8036f24:	f000 f81a 	bl	8036f5c <USBD_Get_USB_Status>
 8036f28:	4603      	mov	r3, r0
 8036f2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8036f2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8036f2e:	4618      	mov	r0, r3
 8036f30:	3718      	adds	r7, #24
 8036f32:	46bd      	mov	sp, r7
 8036f34:	bd80      	pop	{r7, pc}

08036f36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8036f36:	b580      	push	{r7, lr}
 8036f38:	b082      	sub	sp, #8
 8036f3a:	af00      	add	r7, sp, #0
 8036f3c:	6078      	str	r0, [r7, #4]
 8036f3e:	460b      	mov	r3, r1
 8036f40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8036f42:	687b      	ldr	r3, [r7, #4]
 8036f44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036f48:	78fa      	ldrb	r2, [r7, #3]
 8036f4a:	4611      	mov	r1, r2
 8036f4c:	4618      	mov	r0, r3
 8036f4e:	f7ef fb0c 	bl	802656a <HAL_PCD_EP_GetRxCount>
 8036f52:	4603      	mov	r3, r0
}
 8036f54:	4618      	mov	r0, r3
 8036f56:	3708      	adds	r7, #8
 8036f58:	46bd      	mov	sp, r7
 8036f5a:	bd80      	pop	{r7, pc}

08036f5c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8036f5c:	b480      	push	{r7}
 8036f5e:	b085      	sub	sp, #20
 8036f60:	af00      	add	r7, sp, #0
 8036f62:	4603      	mov	r3, r0
 8036f64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036f66:	2300      	movs	r3, #0
 8036f68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8036f6a:	79fb      	ldrb	r3, [r7, #7]
 8036f6c:	2b03      	cmp	r3, #3
 8036f6e:	d817      	bhi.n	8036fa0 <USBD_Get_USB_Status+0x44>
 8036f70:	a201      	add	r2, pc, #4	; (adr r2, 8036f78 <USBD_Get_USB_Status+0x1c>)
 8036f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036f76:	bf00      	nop
 8036f78:	08036f89 	.word	0x08036f89
 8036f7c:	08036f8f 	.word	0x08036f8f
 8036f80:	08036f95 	.word	0x08036f95
 8036f84:	08036f9b 	.word	0x08036f9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8036f88:	2300      	movs	r3, #0
 8036f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8036f8c:	e00b      	b.n	8036fa6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8036f8e:	2303      	movs	r3, #3
 8036f90:	73fb      	strb	r3, [r7, #15]
    break;
 8036f92:	e008      	b.n	8036fa6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8036f94:	2301      	movs	r3, #1
 8036f96:	73fb      	strb	r3, [r7, #15]
    break;
 8036f98:	e005      	b.n	8036fa6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8036f9a:	2303      	movs	r3, #3
 8036f9c:	73fb      	strb	r3, [r7, #15]
    break;
 8036f9e:	e002      	b.n	8036fa6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8036fa0:	2303      	movs	r3, #3
 8036fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8036fa4:	bf00      	nop
  }
  return usb_status;
 8036fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8036fa8:	4618      	mov	r0, r3
 8036faa:	3714      	adds	r7, #20
 8036fac:	46bd      	mov	sp, r7
 8036fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036fb2:	4770      	bx	lr

08036fb4 <abort>:
 8036fb4:	b508      	push	{r3, lr}
 8036fb6:	2006      	movs	r0, #6
 8036fb8:	f000 fd3c 	bl	8037a34 <raise>
 8036fbc:	2001      	movs	r0, #1
 8036fbe:	f7ea fcb9 	bl	8021934 <_exit>
	...

08036fc4 <malloc>:
 8036fc4:	4b02      	ldr	r3, [pc, #8]	; (8036fd0 <malloc+0xc>)
 8036fc6:	4601      	mov	r1, r0
 8036fc8:	6818      	ldr	r0, [r3, #0]
 8036fca:	f000 b82b 	b.w	8037024 <_malloc_r>
 8036fce:	bf00      	nop
 8036fd0:	20000dc4 	.word	0x20000dc4

08036fd4 <free>:
 8036fd4:	4b02      	ldr	r3, [pc, #8]	; (8036fe0 <free+0xc>)
 8036fd6:	4601      	mov	r1, r0
 8036fd8:	6818      	ldr	r0, [r3, #0]
 8036fda:	f000 bdfd 	b.w	8037bd8 <_free_r>
 8036fde:	bf00      	nop
 8036fe0:	20000dc4 	.word	0x20000dc4

08036fe4 <sbrk_aligned>:
 8036fe4:	b570      	push	{r4, r5, r6, lr}
 8036fe6:	4e0e      	ldr	r6, [pc, #56]	; (8037020 <sbrk_aligned+0x3c>)
 8036fe8:	460c      	mov	r4, r1
 8036fea:	6831      	ldr	r1, [r6, #0]
 8036fec:	4605      	mov	r5, r0
 8036fee:	b911      	cbnz	r1, 8036ff6 <sbrk_aligned+0x12>
 8036ff0:	f000 fd70 	bl	8037ad4 <_sbrk_r>
 8036ff4:	6030      	str	r0, [r6, #0]
 8036ff6:	4621      	mov	r1, r4
 8036ff8:	4628      	mov	r0, r5
 8036ffa:	f000 fd6b 	bl	8037ad4 <_sbrk_r>
 8036ffe:	1c43      	adds	r3, r0, #1
 8037000:	d00a      	beq.n	8037018 <sbrk_aligned+0x34>
 8037002:	1cc4      	adds	r4, r0, #3
 8037004:	f024 0403 	bic.w	r4, r4, #3
 8037008:	42a0      	cmp	r0, r4
 803700a:	d007      	beq.n	803701c <sbrk_aligned+0x38>
 803700c:	1a21      	subs	r1, r4, r0
 803700e:	4628      	mov	r0, r5
 8037010:	f000 fd60 	bl	8037ad4 <_sbrk_r>
 8037014:	3001      	adds	r0, #1
 8037016:	d101      	bne.n	803701c <sbrk_aligned+0x38>
 8037018:	f04f 34ff 	mov.w	r4, #4294967295
 803701c:	4620      	mov	r0, r4
 803701e:	bd70      	pop	{r4, r5, r6, pc}
 8037020:	20004438 	.word	0x20004438

08037024 <_malloc_r>:
 8037024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8037028:	1ccd      	adds	r5, r1, #3
 803702a:	f025 0503 	bic.w	r5, r5, #3
 803702e:	3508      	adds	r5, #8
 8037030:	2d0c      	cmp	r5, #12
 8037032:	bf38      	it	cc
 8037034:	250c      	movcc	r5, #12
 8037036:	2d00      	cmp	r5, #0
 8037038:	4607      	mov	r7, r0
 803703a:	db01      	blt.n	8037040 <_malloc_r+0x1c>
 803703c:	42a9      	cmp	r1, r5
 803703e:	d905      	bls.n	803704c <_malloc_r+0x28>
 8037040:	230c      	movs	r3, #12
 8037042:	603b      	str	r3, [r7, #0]
 8037044:	2600      	movs	r6, #0
 8037046:	4630      	mov	r0, r6
 8037048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803704c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8037120 <_malloc_r+0xfc>
 8037050:	f000 f868 	bl	8037124 <__malloc_lock>
 8037054:	f8d8 3000 	ldr.w	r3, [r8]
 8037058:	461c      	mov	r4, r3
 803705a:	bb5c      	cbnz	r4, 80370b4 <_malloc_r+0x90>
 803705c:	4629      	mov	r1, r5
 803705e:	4638      	mov	r0, r7
 8037060:	f7ff ffc0 	bl	8036fe4 <sbrk_aligned>
 8037064:	1c43      	adds	r3, r0, #1
 8037066:	4604      	mov	r4, r0
 8037068:	d155      	bne.n	8037116 <_malloc_r+0xf2>
 803706a:	f8d8 4000 	ldr.w	r4, [r8]
 803706e:	4626      	mov	r6, r4
 8037070:	2e00      	cmp	r6, #0
 8037072:	d145      	bne.n	8037100 <_malloc_r+0xdc>
 8037074:	2c00      	cmp	r4, #0
 8037076:	d048      	beq.n	803710a <_malloc_r+0xe6>
 8037078:	6823      	ldr	r3, [r4, #0]
 803707a:	4631      	mov	r1, r6
 803707c:	4638      	mov	r0, r7
 803707e:	eb04 0903 	add.w	r9, r4, r3
 8037082:	f000 fd27 	bl	8037ad4 <_sbrk_r>
 8037086:	4581      	cmp	r9, r0
 8037088:	d13f      	bne.n	803710a <_malloc_r+0xe6>
 803708a:	6821      	ldr	r1, [r4, #0]
 803708c:	1a6d      	subs	r5, r5, r1
 803708e:	4629      	mov	r1, r5
 8037090:	4638      	mov	r0, r7
 8037092:	f7ff ffa7 	bl	8036fe4 <sbrk_aligned>
 8037096:	3001      	adds	r0, #1
 8037098:	d037      	beq.n	803710a <_malloc_r+0xe6>
 803709a:	6823      	ldr	r3, [r4, #0]
 803709c:	442b      	add	r3, r5
 803709e:	6023      	str	r3, [r4, #0]
 80370a0:	f8d8 3000 	ldr.w	r3, [r8]
 80370a4:	2b00      	cmp	r3, #0
 80370a6:	d038      	beq.n	803711a <_malloc_r+0xf6>
 80370a8:	685a      	ldr	r2, [r3, #4]
 80370aa:	42a2      	cmp	r2, r4
 80370ac:	d12b      	bne.n	8037106 <_malloc_r+0xe2>
 80370ae:	2200      	movs	r2, #0
 80370b0:	605a      	str	r2, [r3, #4]
 80370b2:	e00f      	b.n	80370d4 <_malloc_r+0xb0>
 80370b4:	6822      	ldr	r2, [r4, #0]
 80370b6:	1b52      	subs	r2, r2, r5
 80370b8:	d41f      	bmi.n	80370fa <_malloc_r+0xd6>
 80370ba:	2a0b      	cmp	r2, #11
 80370bc:	d917      	bls.n	80370ee <_malloc_r+0xca>
 80370be:	1961      	adds	r1, r4, r5
 80370c0:	42a3      	cmp	r3, r4
 80370c2:	6025      	str	r5, [r4, #0]
 80370c4:	bf18      	it	ne
 80370c6:	6059      	strne	r1, [r3, #4]
 80370c8:	6863      	ldr	r3, [r4, #4]
 80370ca:	bf08      	it	eq
 80370cc:	f8c8 1000 	streq.w	r1, [r8]
 80370d0:	5162      	str	r2, [r4, r5]
 80370d2:	604b      	str	r3, [r1, #4]
 80370d4:	4638      	mov	r0, r7
 80370d6:	f104 060b 	add.w	r6, r4, #11
 80370da:	f000 f829 	bl	8037130 <__malloc_unlock>
 80370de:	f026 0607 	bic.w	r6, r6, #7
 80370e2:	1d23      	adds	r3, r4, #4
 80370e4:	1af2      	subs	r2, r6, r3
 80370e6:	d0ae      	beq.n	8037046 <_malloc_r+0x22>
 80370e8:	1b9b      	subs	r3, r3, r6
 80370ea:	50a3      	str	r3, [r4, r2]
 80370ec:	e7ab      	b.n	8037046 <_malloc_r+0x22>
 80370ee:	42a3      	cmp	r3, r4
 80370f0:	6862      	ldr	r2, [r4, #4]
 80370f2:	d1dd      	bne.n	80370b0 <_malloc_r+0x8c>
 80370f4:	f8c8 2000 	str.w	r2, [r8]
 80370f8:	e7ec      	b.n	80370d4 <_malloc_r+0xb0>
 80370fa:	4623      	mov	r3, r4
 80370fc:	6864      	ldr	r4, [r4, #4]
 80370fe:	e7ac      	b.n	803705a <_malloc_r+0x36>
 8037100:	4634      	mov	r4, r6
 8037102:	6876      	ldr	r6, [r6, #4]
 8037104:	e7b4      	b.n	8037070 <_malloc_r+0x4c>
 8037106:	4613      	mov	r3, r2
 8037108:	e7cc      	b.n	80370a4 <_malloc_r+0x80>
 803710a:	230c      	movs	r3, #12
 803710c:	603b      	str	r3, [r7, #0]
 803710e:	4638      	mov	r0, r7
 8037110:	f000 f80e 	bl	8037130 <__malloc_unlock>
 8037114:	e797      	b.n	8037046 <_malloc_r+0x22>
 8037116:	6025      	str	r5, [r4, #0]
 8037118:	e7dc      	b.n	80370d4 <_malloc_r+0xb0>
 803711a:	605b      	str	r3, [r3, #4]
 803711c:	deff      	udf	#255	; 0xff
 803711e:	bf00      	nop
 8037120:	20004434 	.word	0x20004434

08037124 <__malloc_lock>:
 8037124:	4801      	ldr	r0, [pc, #4]	; (803712c <__malloc_lock+0x8>)
 8037126:	f000 bd21 	b.w	8037b6c <__retarget_lock_acquire_recursive>
 803712a:	bf00      	nop
 803712c:	2000457c 	.word	0x2000457c

08037130 <__malloc_unlock>:
 8037130:	4801      	ldr	r0, [pc, #4]	; (8037138 <__malloc_unlock+0x8>)
 8037132:	f000 bd1c 	b.w	8037b6e <__retarget_lock_release_recursive>
 8037136:	bf00      	nop
 8037138:	2000457c 	.word	0x2000457c

0803713c <srand>:
 803713c:	b538      	push	{r3, r4, r5, lr}
 803713e:	4b10      	ldr	r3, [pc, #64]	; (8037180 <srand+0x44>)
 8037140:	681d      	ldr	r5, [r3, #0]
 8037142:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8037144:	4604      	mov	r4, r0
 8037146:	b9b3      	cbnz	r3, 8037176 <srand+0x3a>
 8037148:	2018      	movs	r0, #24
 803714a:	f7ff ff3b 	bl	8036fc4 <malloc>
 803714e:	4602      	mov	r2, r0
 8037150:	6328      	str	r0, [r5, #48]	; 0x30
 8037152:	b920      	cbnz	r0, 803715e <srand+0x22>
 8037154:	4b0b      	ldr	r3, [pc, #44]	; (8037184 <srand+0x48>)
 8037156:	480c      	ldr	r0, [pc, #48]	; (8037188 <srand+0x4c>)
 8037158:	2146      	movs	r1, #70	; 0x46
 803715a:	f000 fd1f 	bl	8037b9c <__assert_func>
 803715e:	490b      	ldr	r1, [pc, #44]	; (803718c <srand+0x50>)
 8037160:	4b0b      	ldr	r3, [pc, #44]	; (8037190 <srand+0x54>)
 8037162:	e9c0 1300 	strd	r1, r3, [r0]
 8037166:	4b0b      	ldr	r3, [pc, #44]	; (8037194 <srand+0x58>)
 8037168:	6083      	str	r3, [r0, #8]
 803716a:	230b      	movs	r3, #11
 803716c:	8183      	strh	r3, [r0, #12]
 803716e:	2100      	movs	r1, #0
 8037170:	2001      	movs	r0, #1
 8037172:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8037176:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8037178:	2200      	movs	r2, #0
 803717a:	611c      	str	r4, [r3, #16]
 803717c:	615a      	str	r2, [r3, #20]
 803717e:	bd38      	pop	{r3, r4, r5, pc}
 8037180:	20000dc4 	.word	0x20000dc4
 8037184:	08047b98 	.word	0x08047b98
 8037188:	08047baf 	.word	0x08047baf
 803718c:	abcd330e 	.word	0xabcd330e
 8037190:	e66d1234 	.word	0xe66d1234
 8037194:	0005deec 	.word	0x0005deec

08037198 <rand>:
 8037198:	4b16      	ldr	r3, [pc, #88]	; (80371f4 <rand+0x5c>)
 803719a:	b510      	push	{r4, lr}
 803719c:	681c      	ldr	r4, [r3, #0]
 803719e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80371a0:	b9b3      	cbnz	r3, 80371d0 <rand+0x38>
 80371a2:	2018      	movs	r0, #24
 80371a4:	f7ff ff0e 	bl	8036fc4 <malloc>
 80371a8:	4602      	mov	r2, r0
 80371aa:	6320      	str	r0, [r4, #48]	; 0x30
 80371ac:	b920      	cbnz	r0, 80371b8 <rand+0x20>
 80371ae:	4b12      	ldr	r3, [pc, #72]	; (80371f8 <rand+0x60>)
 80371b0:	4812      	ldr	r0, [pc, #72]	; (80371fc <rand+0x64>)
 80371b2:	2152      	movs	r1, #82	; 0x52
 80371b4:	f000 fcf2 	bl	8037b9c <__assert_func>
 80371b8:	4911      	ldr	r1, [pc, #68]	; (8037200 <rand+0x68>)
 80371ba:	4b12      	ldr	r3, [pc, #72]	; (8037204 <rand+0x6c>)
 80371bc:	e9c0 1300 	strd	r1, r3, [r0]
 80371c0:	4b11      	ldr	r3, [pc, #68]	; (8037208 <rand+0x70>)
 80371c2:	6083      	str	r3, [r0, #8]
 80371c4:	230b      	movs	r3, #11
 80371c6:	8183      	strh	r3, [r0, #12]
 80371c8:	2100      	movs	r1, #0
 80371ca:	2001      	movs	r0, #1
 80371cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80371d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80371d2:	480e      	ldr	r0, [pc, #56]	; (803720c <rand+0x74>)
 80371d4:	690b      	ldr	r3, [r1, #16]
 80371d6:	694c      	ldr	r4, [r1, #20]
 80371d8:	4a0d      	ldr	r2, [pc, #52]	; (8037210 <rand+0x78>)
 80371da:	4358      	muls	r0, r3
 80371dc:	fb02 0004 	mla	r0, r2, r4, r0
 80371e0:	fba3 3202 	umull	r3, r2, r3, r2
 80371e4:	3301      	adds	r3, #1
 80371e6:	eb40 0002 	adc.w	r0, r0, r2
 80371ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80371ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80371f2:	bd10      	pop	{r4, pc}
 80371f4:	20000dc4 	.word	0x20000dc4
 80371f8:	08047b98 	.word	0x08047b98
 80371fc:	08047baf 	.word	0x08047baf
 8037200:	abcd330e 	.word	0xabcd330e
 8037204:	e66d1234 	.word	0xe66d1234
 8037208:	0005deec 	.word	0x0005deec
 803720c:	5851f42d 	.word	0x5851f42d
 8037210:	4c957f2d 	.word	0x4c957f2d

08037214 <_strtol_l.constprop.0>:
 8037214:	2b01      	cmp	r3, #1
 8037216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803721a:	d001      	beq.n	8037220 <_strtol_l.constprop.0+0xc>
 803721c:	2b24      	cmp	r3, #36	; 0x24
 803721e:	d906      	bls.n	803722e <_strtol_l.constprop.0+0x1a>
 8037220:	f000 fc7a 	bl	8037b18 <__errno>
 8037224:	2316      	movs	r3, #22
 8037226:	6003      	str	r3, [r0, #0]
 8037228:	2000      	movs	r0, #0
 803722a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803722e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8037314 <_strtol_l.constprop.0+0x100>
 8037232:	460d      	mov	r5, r1
 8037234:	462e      	mov	r6, r5
 8037236:	f815 4b01 	ldrb.w	r4, [r5], #1
 803723a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 803723e:	f017 0708 	ands.w	r7, r7, #8
 8037242:	d1f7      	bne.n	8037234 <_strtol_l.constprop.0+0x20>
 8037244:	2c2d      	cmp	r4, #45	; 0x2d
 8037246:	d132      	bne.n	80372ae <_strtol_l.constprop.0+0x9a>
 8037248:	782c      	ldrb	r4, [r5, #0]
 803724a:	2701      	movs	r7, #1
 803724c:	1cb5      	adds	r5, r6, #2
 803724e:	2b00      	cmp	r3, #0
 8037250:	d05b      	beq.n	803730a <_strtol_l.constprop.0+0xf6>
 8037252:	2b10      	cmp	r3, #16
 8037254:	d109      	bne.n	803726a <_strtol_l.constprop.0+0x56>
 8037256:	2c30      	cmp	r4, #48	; 0x30
 8037258:	d107      	bne.n	803726a <_strtol_l.constprop.0+0x56>
 803725a:	782c      	ldrb	r4, [r5, #0]
 803725c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8037260:	2c58      	cmp	r4, #88	; 0x58
 8037262:	d14d      	bne.n	8037300 <_strtol_l.constprop.0+0xec>
 8037264:	786c      	ldrb	r4, [r5, #1]
 8037266:	2310      	movs	r3, #16
 8037268:	3502      	adds	r5, #2
 803726a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 803726e:	f108 38ff 	add.w	r8, r8, #4294967295
 8037272:	f04f 0e00 	mov.w	lr, #0
 8037276:	fbb8 f9f3 	udiv	r9, r8, r3
 803727a:	4676      	mov	r6, lr
 803727c:	fb03 8a19 	mls	sl, r3, r9, r8
 8037280:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8037284:	f1bc 0f09 	cmp.w	ip, #9
 8037288:	d816      	bhi.n	80372b8 <_strtol_l.constprop.0+0xa4>
 803728a:	4664      	mov	r4, ip
 803728c:	42a3      	cmp	r3, r4
 803728e:	dd24      	ble.n	80372da <_strtol_l.constprop.0+0xc6>
 8037290:	f1be 3fff 	cmp.w	lr, #4294967295
 8037294:	d008      	beq.n	80372a8 <_strtol_l.constprop.0+0x94>
 8037296:	45b1      	cmp	r9, r6
 8037298:	d31c      	bcc.n	80372d4 <_strtol_l.constprop.0+0xc0>
 803729a:	d101      	bne.n	80372a0 <_strtol_l.constprop.0+0x8c>
 803729c:	45a2      	cmp	sl, r4
 803729e:	db19      	blt.n	80372d4 <_strtol_l.constprop.0+0xc0>
 80372a0:	fb06 4603 	mla	r6, r6, r3, r4
 80372a4:	f04f 0e01 	mov.w	lr, #1
 80372a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80372ac:	e7e8      	b.n	8037280 <_strtol_l.constprop.0+0x6c>
 80372ae:	2c2b      	cmp	r4, #43	; 0x2b
 80372b0:	bf04      	itt	eq
 80372b2:	782c      	ldrbeq	r4, [r5, #0]
 80372b4:	1cb5      	addeq	r5, r6, #2
 80372b6:	e7ca      	b.n	803724e <_strtol_l.constprop.0+0x3a>
 80372b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80372bc:	f1bc 0f19 	cmp.w	ip, #25
 80372c0:	d801      	bhi.n	80372c6 <_strtol_l.constprop.0+0xb2>
 80372c2:	3c37      	subs	r4, #55	; 0x37
 80372c4:	e7e2      	b.n	803728c <_strtol_l.constprop.0+0x78>
 80372c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80372ca:	f1bc 0f19 	cmp.w	ip, #25
 80372ce:	d804      	bhi.n	80372da <_strtol_l.constprop.0+0xc6>
 80372d0:	3c57      	subs	r4, #87	; 0x57
 80372d2:	e7db      	b.n	803728c <_strtol_l.constprop.0+0x78>
 80372d4:	f04f 3eff 	mov.w	lr, #4294967295
 80372d8:	e7e6      	b.n	80372a8 <_strtol_l.constprop.0+0x94>
 80372da:	f1be 3fff 	cmp.w	lr, #4294967295
 80372de:	d105      	bne.n	80372ec <_strtol_l.constprop.0+0xd8>
 80372e0:	2322      	movs	r3, #34	; 0x22
 80372e2:	6003      	str	r3, [r0, #0]
 80372e4:	4646      	mov	r6, r8
 80372e6:	b942      	cbnz	r2, 80372fa <_strtol_l.constprop.0+0xe6>
 80372e8:	4630      	mov	r0, r6
 80372ea:	e79e      	b.n	803722a <_strtol_l.constprop.0+0x16>
 80372ec:	b107      	cbz	r7, 80372f0 <_strtol_l.constprop.0+0xdc>
 80372ee:	4276      	negs	r6, r6
 80372f0:	2a00      	cmp	r2, #0
 80372f2:	d0f9      	beq.n	80372e8 <_strtol_l.constprop.0+0xd4>
 80372f4:	f1be 0f00 	cmp.w	lr, #0
 80372f8:	d000      	beq.n	80372fc <_strtol_l.constprop.0+0xe8>
 80372fa:	1e69      	subs	r1, r5, #1
 80372fc:	6011      	str	r1, [r2, #0]
 80372fe:	e7f3      	b.n	80372e8 <_strtol_l.constprop.0+0xd4>
 8037300:	2430      	movs	r4, #48	; 0x30
 8037302:	2b00      	cmp	r3, #0
 8037304:	d1b1      	bne.n	803726a <_strtol_l.constprop.0+0x56>
 8037306:	2308      	movs	r3, #8
 8037308:	e7af      	b.n	803726a <_strtol_l.constprop.0+0x56>
 803730a:	2c30      	cmp	r4, #48	; 0x30
 803730c:	d0a5      	beq.n	803725a <_strtol_l.constprop.0+0x46>
 803730e:	230a      	movs	r3, #10
 8037310:	e7ab      	b.n	803726a <_strtol_l.constprop.0+0x56>
 8037312:	bf00      	nop
 8037314:	08047c08 	.word	0x08047c08

08037318 <_strtol_r>:
 8037318:	f7ff bf7c 	b.w	8037214 <_strtol_l.constprop.0>

0803731c <strtol>:
 803731c:	4613      	mov	r3, r2
 803731e:	460a      	mov	r2, r1
 8037320:	4601      	mov	r1, r0
 8037322:	4802      	ldr	r0, [pc, #8]	; (803732c <strtol+0x10>)
 8037324:	6800      	ldr	r0, [r0, #0]
 8037326:	f7ff bf75 	b.w	8037214 <_strtol_l.constprop.0>
 803732a:	bf00      	nop
 803732c:	20000dc4 	.word	0x20000dc4

08037330 <std>:
 8037330:	2300      	movs	r3, #0
 8037332:	b510      	push	{r4, lr}
 8037334:	4604      	mov	r4, r0
 8037336:	e9c0 3300 	strd	r3, r3, [r0]
 803733a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803733e:	6083      	str	r3, [r0, #8]
 8037340:	8181      	strh	r1, [r0, #12]
 8037342:	6643      	str	r3, [r0, #100]	; 0x64
 8037344:	81c2      	strh	r2, [r0, #14]
 8037346:	6183      	str	r3, [r0, #24]
 8037348:	4619      	mov	r1, r3
 803734a:	2208      	movs	r2, #8
 803734c:	305c      	adds	r0, #92	; 0x5c
 803734e:	f000 fb09 	bl	8037964 <memset>
 8037352:	4b05      	ldr	r3, [pc, #20]	; (8037368 <std+0x38>)
 8037354:	6263      	str	r3, [r4, #36]	; 0x24
 8037356:	4b05      	ldr	r3, [pc, #20]	; (803736c <std+0x3c>)
 8037358:	62a3      	str	r3, [r4, #40]	; 0x28
 803735a:	4b05      	ldr	r3, [pc, #20]	; (8037370 <std+0x40>)
 803735c:	62e3      	str	r3, [r4, #44]	; 0x2c
 803735e:	4b05      	ldr	r3, [pc, #20]	; (8037374 <std+0x44>)
 8037360:	6224      	str	r4, [r4, #32]
 8037362:	6323      	str	r3, [r4, #48]	; 0x30
 8037364:	bd10      	pop	{r4, pc}
 8037366:	bf00      	nop
 8037368:	08037791 	.word	0x08037791
 803736c:	080377b7 	.word	0x080377b7
 8037370:	080377ef 	.word	0x080377ef
 8037374:	08037813 	.word	0x08037813

08037378 <stdio_exit_handler>:
 8037378:	4a02      	ldr	r2, [pc, #8]	; (8037384 <stdio_exit_handler+0xc>)
 803737a:	4903      	ldr	r1, [pc, #12]	; (8037388 <stdio_exit_handler+0x10>)
 803737c:	4803      	ldr	r0, [pc, #12]	; (803738c <stdio_exit_handler+0x14>)
 803737e:	f000 b869 	b.w	8037454 <_fwalk_sglue>
 8037382:	bf00      	nop
 8037384:	20000d6c 	.word	0x20000d6c
 8037388:	08038c15 	.word	0x08038c15
 803738c:	20000d78 	.word	0x20000d78

08037390 <cleanup_stdio>:
 8037390:	6841      	ldr	r1, [r0, #4]
 8037392:	4b0c      	ldr	r3, [pc, #48]	; (80373c4 <cleanup_stdio+0x34>)
 8037394:	4299      	cmp	r1, r3
 8037396:	b510      	push	{r4, lr}
 8037398:	4604      	mov	r4, r0
 803739a:	d001      	beq.n	80373a0 <cleanup_stdio+0x10>
 803739c:	f001 fc3a 	bl	8038c14 <_fflush_r>
 80373a0:	68a1      	ldr	r1, [r4, #8]
 80373a2:	4b09      	ldr	r3, [pc, #36]	; (80373c8 <cleanup_stdio+0x38>)
 80373a4:	4299      	cmp	r1, r3
 80373a6:	d002      	beq.n	80373ae <cleanup_stdio+0x1e>
 80373a8:	4620      	mov	r0, r4
 80373aa:	f001 fc33 	bl	8038c14 <_fflush_r>
 80373ae:	68e1      	ldr	r1, [r4, #12]
 80373b0:	4b06      	ldr	r3, [pc, #24]	; (80373cc <cleanup_stdio+0x3c>)
 80373b2:	4299      	cmp	r1, r3
 80373b4:	d004      	beq.n	80373c0 <cleanup_stdio+0x30>
 80373b6:	4620      	mov	r0, r4
 80373b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80373bc:	f001 bc2a 	b.w	8038c14 <_fflush_r>
 80373c0:	bd10      	pop	{r4, pc}
 80373c2:	bf00      	nop
 80373c4:	2000443c 	.word	0x2000443c
 80373c8:	200044a4 	.word	0x200044a4
 80373cc:	2000450c 	.word	0x2000450c

080373d0 <global_stdio_init.part.0>:
 80373d0:	b510      	push	{r4, lr}
 80373d2:	4b0b      	ldr	r3, [pc, #44]	; (8037400 <global_stdio_init.part.0+0x30>)
 80373d4:	4c0b      	ldr	r4, [pc, #44]	; (8037404 <global_stdio_init.part.0+0x34>)
 80373d6:	4a0c      	ldr	r2, [pc, #48]	; (8037408 <global_stdio_init.part.0+0x38>)
 80373d8:	601a      	str	r2, [r3, #0]
 80373da:	4620      	mov	r0, r4
 80373dc:	2200      	movs	r2, #0
 80373de:	2104      	movs	r1, #4
 80373e0:	f7ff ffa6 	bl	8037330 <std>
 80373e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80373e8:	2201      	movs	r2, #1
 80373ea:	2109      	movs	r1, #9
 80373ec:	f7ff ffa0 	bl	8037330 <std>
 80373f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80373f4:	2202      	movs	r2, #2
 80373f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80373fa:	2112      	movs	r1, #18
 80373fc:	f7ff bf98 	b.w	8037330 <std>
 8037400:	20004574 	.word	0x20004574
 8037404:	2000443c 	.word	0x2000443c
 8037408:	08037379 	.word	0x08037379

0803740c <__sfp_lock_acquire>:
 803740c:	4801      	ldr	r0, [pc, #4]	; (8037414 <__sfp_lock_acquire+0x8>)
 803740e:	f000 bbad 	b.w	8037b6c <__retarget_lock_acquire_recursive>
 8037412:	bf00      	nop
 8037414:	2000457d 	.word	0x2000457d

08037418 <__sfp_lock_release>:
 8037418:	4801      	ldr	r0, [pc, #4]	; (8037420 <__sfp_lock_release+0x8>)
 803741a:	f000 bba8 	b.w	8037b6e <__retarget_lock_release_recursive>
 803741e:	bf00      	nop
 8037420:	2000457d 	.word	0x2000457d

08037424 <__sinit>:
 8037424:	b510      	push	{r4, lr}
 8037426:	4604      	mov	r4, r0
 8037428:	f7ff fff0 	bl	803740c <__sfp_lock_acquire>
 803742c:	6a23      	ldr	r3, [r4, #32]
 803742e:	b11b      	cbz	r3, 8037438 <__sinit+0x14>
 8037430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8037434:	f7ff bff0 	b.w	8037418 <__sfp_lock_release>
 8037438:	4b04      	ldr	r3, [pc, #16]	; (803744c <__sinit+0x28>)
 803743a:	6223      	str	r3, [r4, #32]
 803743c:	4b04      	ldr	r3, [pc, #16]	; (8037450 <__sinit+0x2c>)
 803743e:	681b      	ldr	r3, [r3, #0]
 8037440:	2b00      	cmp	r3, #0
 8037442:	d1f5      	bne.n	8037430 <__sinit+0xc>
 8037444:	f7ff ffc4 	bl	80373d0 <global_stdio_init.part.0>
 8037448:	e7f2      	b.n	8037430 <__sinit+0xc>
 803744a:	bf00      	nop
 803744c:	08037391 	.word	0x08037391
 8037450:	20004574 	.word	0x20004574

08037454 <_fwalk_sglue>:
 8037454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8037458:	4607      	mov	r7, r0
 803745a:	4688      	mov	r8, r1
 803745c:	4614      	mov	r4, r2
 803745e:	2600      	movs	r6, #0
 8037460:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8037464:	f1b9 0901 	subs.w	r9, r9, #1
 8037468:	d505      	bpl.n	8037476 <_fwalk_sglue+0x22>
 803746a:	6824      	ldr	r4, [r4, #0]
 803746c:	2c00      	cmp	r4, #0
 803746e:	d1f7      	bne.n	8037460 <_fwalk_sglue+0xc>
 8037470:	4630      	mov	r0, r6
 8037472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8037476:	89ab      	ldrh	r3, [r5, #12]
 8037478:	2b01      	cmp	r3, #1
 803747a:	d907      	bls.n	803748c <_fwalk_sglue+0x38>
 803747c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8037480:	3301      	adds	r3, #1
 8037482:	d003      	beq.n	803748c <_fwalk_sglue+0x38>
 8037484:	4629      	mov	r1, r5
 8037486:	4638      	mov	r0, r7
 8037488:	47c0      	blx	r8
 803748a:	4306      	orrs	r6, r0
 803748c:	3568      	adds	r5, #104	; 0x68
 803748e:	e7e9      	b.n	8037464 <_fwalk_sglue+0x10>

08037490 <getchar>:
 8037490:	4b02      	ldr	r3, [pc, #8]	; (803749c <getchar+0xc>)
 8037492:	6818      	ldr	r0, [r3, #0]
 8037494:	6841      	ldr	r1, [r0, #4]
 8037496:	f001 bbf7 	b.w	8038c88 <_getc_r>
 803749a:	bf00      	nop
 803749c:	20000dc4 	.word	0x20000dc4

080374a0 <iprintf>:
 80374a0:	b40f      	push	{r0, r1, r2, r3}
 80374a2:	b507      	push	{r0, r1, r2, lr}
 80374a4:	4906      	ldr	r1, [pc, #24]	; (80374c0 <iprintf+0x20>)
 80374a6:	ab04      	add	r3, sp, #16
 80374a8:	6808      	ldr	r0, [r1, #0]
 80374aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80374ae:	6881      	ldr	r1, [r0, #8]
 80374b0:	9301      	str	r3, [sp, #4]
 80374b2:	f000 ff31 	bl	8038318 <_vfiprintf_r>
 80374b6:	b003      	add	sp, #12
 80374b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80374bc:	b004      	add	sp, #16
 80374be:	4770      	bx	lr
 80374c0:	20000dc4 	.word	0x20000dc4

080374c4 <putchar>:
 80374c4:	4b02      	ldr	r3, [pc, #8]	; (80374d0 <putchar+0xc>)
 80374c6:	4601      	mov	r1, r0
 80374c8:	6818      	ldr	r0, [r3, #0]
 80374ca:	6882      	ldr	r2, [r0, #8]
 80374cc:	f001 bc69 	b.w	8038da2 <_putc_r>
 80374d0:	20000dc4 	.word	0x20000dc4

080374d4 <_puts_r>:
 80374d4:	6a03      	ldr	r3, [r0, #32]
 80374d6:	b570      	push	{r4, r5, r6, lr}
 80374d8:	6884      	ldr	r4, [r0, #8]
 80374da:	4605      	mov	r5, r0
 80374dc:	460e      	mov	r6, r1
 80374de:	b90b      	cbnz	r3, 80374e4 <_puts_r+0x10>
 80374e0:	f7ff ffa0 	bl	8037424 <__sinit>
 80374e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80374e6:	07db      	lsls	r3, r3, #31
 80374e8:	d405      	bmi.n	80374f6 <_puts_r+0x22>
 80374ea:	89a3      	ldrh	r3, [r4, #12]
 80374ec:	0598      	lsls	r0, r3, #22
 80374ee:	d402      	bmi.n	80374f6 <_puts_r+0x22>
 80374f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80374f2:	f000 fb3b 	bl	8037b6c <__retarget_lock_acquire_recursive>
 80374f6:	89a3      	ldrh	r3, [r4, #12]
 80374f8:	0719      	lsls	r1, r3, #28
 80374fa:	d513      	bpl.n	8037524 <_puts_r+0x50>
 80374fc:	6923      	ldr	r3, [r4, #16]
 80374fe:	b18b      	cbz	r3, 8037524 <_puts_r+0x50>
 8037500:	3e01      	subs	r6, #1
 8037502:	68a3      	ldr	r3, [r4, #8]
 8037504:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8037508:	3b01      	subs	r3, #1
 803750a:	60a3      	str	r3, [r4, #8]
 803750c:	b9e9      	cbnz	r1, 803754a <_puts_r+0x76>
 803750e:	2b00      	cmp	r3, #0
 8037510:	da2e      	bge.n	8037570 <_puts_r+0x9c>
 8037512:	4622      	mov	r2, r4
 8037514:	210a      	movs	r1, #10
 8037516:	4628      	mov	r0, r5
 8037518:	f000 f97f 	bl	803781a <__swbuf_r>
 803751c:	3001      	adds	r0, #1
 803751e:	d007      	beq.n	8037530 <_puts_r+0x5c>
 8037520:	250a      	movs	r5, #10
 8037522:	e007      	b.n	8037534 <_puts_r+0x60>
 8037524:	4621      	mov	r1, r4
 8037526:	4628      	mov	r0, r5
 8037528:	f000 f9b4 	bl	8037894 <__swsetup_r>
 803752c:	2800      	cmp	r0, #0
 803752e:	d0e7      	beq.n	8037500 <_puts_r+0x2c>
 8037530:	f04f 35ff 	mov.w	r5, #4294967295
 8037534:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8037536:	07da      	lsls	r2, r3, #31
 8037538:	d405      	bmi.n	8037546 <_puts_r+0x72>
 803753a:	89a3      	ldrh	r3, [r4, #12]
 803753c:	059b      	lsls	r3, r3, #22
 803753e:	d402      	bmi.n	8037546 <_puts_r+0x72>
 8037540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8037542:	f000 fb14 	bl	8037b6e <__retarget_lock_release_recursive>
 8037546:	4628      	mov	r0, r5
 8037548:	bd70      	pop	{r4, r5, r6, pc}
 803754a:	2b00      	cmp	r3, #0
 803754c:	da04      	bge.n	8037558 <_puts_r+0x84>
 803754e:	69a2      	ldr	r2, [r4, #24]
 8037550:	429a      	cmp	r2, r3
 8037552:	dc06      	bgt.n	8037562 <_puts_r+0x8e>
 8037554:	290a      	cmp	r1, #10
 8037556:	d004      	beq.n	8037562 <_puts_r+0x8e>
 8037558:	6823      	ldr	r3, [r4, #0]
 803755a:	1c5a      	adds	r2, r3, #1
 803755c:	6022      	str	r2, [r4, #0]
 803755e:	7019      	strb	r1, [r3, #0]
 8037560:	e7cf      	b.n	8037502 <_puts_r+0x2e>
 8037562:	4622      	mov	r2, r4
 8037564:	4628      	mov	r0, r5
 8037566:	f000 f958 	bl	803781a <__swbuf_r>
 803756a:	3001      	adds	r0, #1
 803756c:	d1c9      	bne.n	8037502 <_puts_r+0x2e>
 803756e:	e7df      	b.n	8037530 <_puts_r+0x5c>
 8037570:	6823      	ldr	r3, [r4, #0]
 8037572:	250a      	movs	r5, #10
 8037574:	1c5a      	adds	r2, r3, #1
 8037576:	6022      	str	r2, [r4, #0]
 8037578:	701d      	strb	r5, [r3, #0]
 803757a:	e7db      	b.n	8037534 <_puts_r+0x60>

0803757c <puts>:
 803757c:	4b02      	ldr	r3, [pc, #8]	; (8037588 <puts+0xc>)
 803757e:	4601      	mov	r1, r0
 8037580:	6818      	ldr	r0, [r3, #0]
 8037582:	f7ff bfa7 	b.w	80374d4 <_puts_r>
 8037586:	bf00      	nop
 8037588:	20000dc4 	.word	0x20000dc4

0803758c <setbuf>:
 803758c:	fab1 f281 	clz	r2, r1
 8037590:	0952      	lsrs	r2, r2, #5
 8037592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8037596:	0052      	lsls	r2, r2, #1
 8037598:	f000 b800 	b.w	803759c <setvbuf>

0803759c <setvbuf>:
 803759c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80375a0:	461d      	mov	r5, r3
 80375a2:	4b54      	ldr	r3, [pc, #336]	; (80376f4 <setvbuf+0x158>)
 80375a4:	681f      	ldr	r7, [r3, #0]
 80375a6:	4604      	mov	r4, r0
 80375a8:	460e      	mov	r6, r1
 80375aa:	4690      	mov	r8, r2
 80375ac:	b127      	cbz	r7, 80375b8 <setvbuf+0x1c>
 80375ae:	6a3b      	ldr	r3, [r7, #32]
 80375b0:	b913      	cbnz	r3, 80375b8 <setvbuf+0x1c>
 80375b2:	4638      	mov	r0, r7
 80375b4:	f7ff ff36 	bl	8037424 <__sinit>
 80375b8:	f1b8 0f02 	cmp.w	r8, #2
 80375bc:	d006      	beq.n	80375cc <setvbuf+0x30>
 80375be:	f1b8 0f01 	cmp.w	r8, #1
 80375c2:	f200 8094 	bhi.w	80376ee <setvbuf+0x152>
 80375c6:	2d00      	cmp	r5, #0
 80375c8:	f2c0 8091 	blt.w	80376ee <setvbuf+0x152>
 80375cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80375ce:	07da      	lsls	r2, r3, #31
 80375d0:	d405      	bmi.n	80375de <setvbuf+0x42>
 80375d2:	89a3      	ldrh	r3, [r4, #12]
 80375d4:	059b      	lsls	r3, r3, #22
 80375d6:	d402      	bmi.n	80375de <setvbuf+0x42>
 80375d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80375da:	f000 fac7 	bl	8037b6c <__retarget_lock_acquire_recursive>
 80375de:	4621      	mov	r1, r4
 80375e0:	4638      	mov	r0, r7
 80375e2:	f001 fb17 	bl	8038c14 <_fflush_r>
 80375e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80375e8:	b141      	cbz	r1, 80375fc <setvbuf+0x60>
 80375ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80375ee:	4299      	cmp	r1, r3
 80375f0:	d002      	beq.n	80375f8 <setvbuf+0x5c>
 80375f2:	4638      	mov	r0, r7
 80375f4:	f000 faf0 	bl	8037bd8 <_free_r>
 80375f8:	2300      	movs	r3, #0
 80375fa:	6363      	str	r3, [r4, #52]	; 0x34
 80375fc:	2300      	movs	r3, #0
 80375fe:	61a3      	str	r3, [r4, #24]
 8037600:	6063      	str	r3, [r4, #4]
 8037602:	89a3      	ldrh	r3, [r4, #12]
 8037604:	0618      	lsls	r0, r3, #24
 8037606:	d503      	bpl.n	8037610 <setvbuf+0x74>
 8037608:	6921      	ldr	r1, [r4, #16]
 803760a:	4638      	mov	r0, r7
 803760c:	f000 fae4 	bl	8037bd8 <_free_r>
 8037610:	89a3      	ldrh	r3, [r4, #12]
 8037612:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8037616:	f023 0303 	bic.w	r3, r3, #3
 803761a:	f1b8 0f02 	cmp.w	r8, #2
 803761e:	81a3      	strh	r3, [r4, #12]
 8037620:	d05f      	beq.n	80376e2 <setvbuf+0x146>
 8037622:	ab01      	add	r3, sp, #4
 8037624:	466a      	mov	r2, sp
 8037626:	4621      	mov	r1, r4
 8037628:	4638      	mov	r0, r7
 803762a:	f001 fb58 	bl	8038cde <__swhatbuf_r>
 803762e:	89a3      	ldrh	r3, [r4, #12]
 8037630:	4318      	orrs	r0, r3
 8037632:	81a0      	strh	r0, [r4, #12]
 8037634:	bb2d      	cbnz	r5, 8037682 <setvbuf+0xe6>
 8037636:	9d00      	ldr	r5, [sp, #0]
 8037638:	4628      	mov	r0, r5
 803763a:	f7ff fcc3 	bl	8036fc4 <malloc>
 803763e:	4606      	mov	r6, r0
 8037640:	2800      	cmp	r0, #0
 8037642:	d150      	bne.n	80376e6 <setvbuf+0x14a>
 8037644:	f8dd 9000 	ldr.w	r9, [sp]
 8037648:	45a9      	cmp	r9, r5
 803764a:	d13e      	bne.n	80376ca <setvbuf+0x12e>
 803764c:	f04f 35ff 	mov.w	r5, #4294967295
 8037650:	2200      	movs	r2, #0
 8037652:	60a2      	str	r2, [r4, #8]
 8037654:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8037658:	6022      	str	r2, [r4, #0]
 803765a:	6122      	str	r2, [r4, #16]
 803765c:	2201      	movs	r2, #1
 803765e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8037662:	6162      	str	r2, [r4, #20]
 8037664:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8037666:	f043 0302 	orr.w	r3, r3, #2
 803766a:	07d1      	lsls	r1, r2, #31
 803766c:	81a3      	strh	r3, [r4, #12]
 803766e:	d404      	bmi.n	803767a <setvbuf+0xde>
 8037670:	059b      	lsls	r3, r3, #22
 8037672:	d402      	bmi.n	803767a <setvbuf+0xde>
 8037674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8037676:	f000 fa7a 	bl	8037b6e <__retarget_lock_release_recursive>
 803767a:	4628      	mov	r0, r5
 803767c:	b003      	add	sp, #12
 803767e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8037682:	2e00      	cmp	r6, #0
 8037684:	d0d8      	beq.n	8037638 <setvbuf+0x9c>
 8037686:	6a3b      	ldr	r3, [r7, #32]
 8037688:	b913      	cbnz	r3, 8037690 <setvbuf+0xf4>
 803768a:	4638      	mov	r0, r7
 803768c:	f7ff feca 	bl	8037424 <__sinit>
 8037690:	f1b8 0f01 	cmp.w	r8, #1
 8037694:	bf08      	it	eq
 8037696:	89a3      	ldrheq	r3, [r4, #12]
 8037698:	6026      	str	r6, [r4, #0]
 803769a:	bf04      	itt	eq
 803769c:	f043 0301 	orreq.w	r3, r3, #1
 80376a0:	81a3      	strheq	r3, [r4, #12]
 80376a2:	89a3      	ldrh	r3, [r4, #12]
 80376a4:	f013 0208 	ands.w	r2, r3, #8
 80376a8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80376ac:	d01d      	beq.n	80376ea <setvbuf+0x14e>
 80376ae:	07da      	lsls	r2, r3, #31
 80376b0:	bf41      	itttt	mi
 80376b2:	2200      	movmi	r2, #0
 80376b4:	426d      	negmi	r5, r5
 80376b6:	60a2      	strmi	r2, [r4, #8]
 80376b8:	61a5      	strmi	r5, [r4, #24]
 80376ba:	bf58      	it	pl
 80376bc:	60a5      	strpl	r5, [r4, #8]
 80376be:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80376c0:	f015 0501 	ands.w	r5, r5, #1
 80376c4:	d0d4      	beq.n	8037670 <setvbuf+0xd4>
 80376c6:	2500      	movs	r5, #0
 80376c8:	e7d7      	b.n	803767a <setvbuf+0xde>
 80376ca:	4648      	mov	r0, r9
 80376cc:	f7ff fc7a 	bl	8036fc4 <malloc>
 80376d0:	4606      	mov	r6, r0
 80376d2:	2800      	cmp	r0, #0
 80376d4:	d0ba      	beq.n	803764c <setvbuf+0xb0>
 80376d6:	89a3      	ldrh	r3, [r4, #12]
 80376d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80376dc:	81a3      	strh	r3, [r4, #12]
 80376de:	464d      	mov	r5, r9
 80376e0:	e7d1      	b.n	8037686 <setvbuf+0xea>
 80376e2:	2500      	movs	r5, #0
 80376e4:	e7b4      	b.n	8037650 <setvbuf+0xb4>
 80376e6:	46a9      	mov	r9, r5
 80376e8:	e7f5      	b.n	80376d6 <setvbuf+0x13a>
 80376ea:	60a2      	str	r2, [r4, #8]
 80376ec:	e7e7      	b.n	80376be <setvbuf+0x122>
 80376ee:	f04f 35ff 	mov.w	r5, #4294967295
 80376f2:	e7c2      	b.n	803767a <setvbuf+0xde>
 80376f4:	20000dc4 	.word	0x20000dc4

080376f8 <siprintf>:
 80376f8:	b40e      	push	{r1, r2, r3}
 80376fa:	b500      	push	{lr}
 80376fc:	b09c      	sub	sp, #112	; 0x70
 80376fe:	ab1d      	add	r3, sp, #116	; 0x74
 8037700:	9002      	str	r0, [sp, #8]
 8037702:	9006      	str	r0, [sp, #24]
 8037704:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8037708:	4809      	ldr	r0, [pc, #36]	; (8037730 <siprintf+0x38>)
 803770a:	9107      	str	r1, [sp, #28]
 803770c:	9104      	str	r1, [sp, #16]
 803770e:	4909      	ldr	r1, [pc, #36]	; (8037734 <siprintf+0x3c>)
 8037710:	f853 2b04 	ldr.w	r2, [r3], #4
 8037714:	9105      	str	r1, [sp, #20]
 8037716:	6800      	ldr	r0, [r0, #0]
 8037718:	9301      	str	r3, [sp, #4]
 803771a:	a902      	add	r1, sp, #8
 803771c:	f000 fb02 	bl	8037d24 <_svfiprintf_r>
 8037720:	9b02      	ldr	r3, [sp, #8]
 8037722:	2200      	movs	r2, #0
 8037724:	701a      	strb	r2, [r3, #0]
 8037726:	b01c      	add	sp, #112	; 0x70
 8037728:	f85d eb04 	ldr.w	lr, [sp], #4
 803772c:	b003      	add	sp, #12
 803772e:	4770      	bx	lr
 8037730:	20000dc4 	.word	0x20000dc4
 8037734:	ffff0208 	.word	0xffff0208

08037738 <siscanf>:
 8037738:	b40e      	push	{r1, r2, r3}
 803773a:	b510      	push	{r4, lr}
 803773c:	b09f      	sub	sp, #124	; 0x7c
 803773e:	ac21      	add	r4, sp, #132	; 0x84
 8037740:	f44f 7101 	mov.w	r1, #516	; 0x204
 8037744:	f854 2b04 	ldr.w	r2, [r4], #4
 8037748:	9201      	str	r2, [sp, #4]
 803774a:	f8ad 101c 	strh.w	r1, [sp, #28]
 803774e:	9004      	str	r0, [sp, #16]
 8037750:	9008      	str	r0, [sp, #32]
 8037752:	f7e8 fd47 	bl	80201e4 <strlen>
 8037756:	4b0c      	ldr	r3, [pc, #48]	; (8037788 <siscanf+0x50>)
 8037758:	9005      	str	r0, [sp, #20]
 803775a:	9009      	str	r0, [sp, #36]	; 0x24
 803775c:	930d      	str	r3, [sp, #52]	; 0x34
 803775e:	480b      	ldr	r0, [pc, #44]	; (803778c <siscanf+0x54>)
 8037760:	9a01      	ldr	r2, [sp, #4]
 8037762:	6800      	ldr	r0, [r0, #0]
 8037764:	9403      	str	r4, [sp, #12]
 8037766:	2300      	movs	r3, #0
 8037768:	9311      	str	r3, [sp, #68]	; 0x44
 803776a:	9316      	str	r3, [sp, #88]	; 0x58
 803776c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8037770:	f8ad 301e 	strh.w	r3, [sp, #30]
 8037774:	a904      	add	r1, sp, #16
 8037776:	4623      	mov	r3, r4
 8037778:	f000 fc2c 	bl	8037fd4 <__ssvfiscanf_r>
 803777c:	b01f      	add	sp, #124	; 0x7c
 803777e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8037782:	b003      	add	sp, #12
 8037784:	4770      	bx	lr
 8037786:	bf00      	nop
 8037788:	080377b3 	.word	0x080377b3
 803778c:	20000dc4 	.word	0x20000dc4

08037790 <__sread>:
 8037790:	b510      	push	{r4, lr}
 8037792:	460c      	mov	r4, r1
 8037794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037798:	f000 f976 	bl	8037a88 <_read_r>
 803779c:	2800      	cmp	r0, #0
 803779e:	bfab      	itete	ge
 80377a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80377a2:	89a3      	ldrhlt	r3, [r4, #12]
 80377a4:	181b      	addge	r3, r3, r0
 80377a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80377aa:	bfac      	ite	ge
 80377ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80377ae:	81a3      	strhlt	r3, [r4, #12]
 80377b0:	bd10      	pop	{r4, pc}

080377b2 <__seofread>:
 80377b2:	2000      	movs	r0, #0
 80377b4:	4770      	bx	lr

080377b6 <__swrite>:
 80377b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80377ba:	461f      	mov	r7, r3
 80377bc:	898b      	ldrh	r3, [r1, #12]
 80377be:	05db      	lsls	r3, r3, #23
 80377c0:	4605      	mov	r5, r0
 80377c2:	460c      	mov	r4, r1
 80377c4:	4616      	mov	r6, r2
 80377c6:	d505      	bpl.n	80377d4 <__swrite+0x1e>
 80377c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80377cc:	2302      	movs	r3, #2
 80377ce:	2200      	movs	r2, #0
 80377d0:	f000 f948 	bl	8037a64 <_lseek_r>
 80377d4:	89a3      	ldrh	r3, [r4, #12]
 80377d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80377da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80377de:	81a3      	strh	r3, [r4, #12]
 80377e0:	4632      	mov	r2, r6
 80377e2:	463b      	mov	r3, r7
 80377e4:	4628      	mov	r0, r5
 80377e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80377ea:	f000 b983 	b.w	8037af4 <_write_r>

080377ee <__sseek>:
 80377ee:	b510      	push	{r4, lr}
 80377f0:	460c      	mov	r4, r1
 80377f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80377f6:	f000 f935 	bl	8037a64 <_lseek_r>
 80377fa:	1c43      	adds	r3, r0, #1
 80377fc:	89a3      	ldrh	r3, [r4, #12]
 80377fe:	bf15      	itete	ne
 8037800:	6560      	strne	r0, [r4, #84]	; 0x54
 8037802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8037806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803780a:	81a3      	strheq	r3, [r4, #12]
 803780c:	bf18      	it	ne
 803780e:	81a3      	strhne	r3, [r4, #12]
 8037810:	bd10      	pop	{r4, pc}

08037812 <__sclose>:
 8037812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037816:	f000 b915 	b.w	8037a44 <_close_r>

0803781a <__swbuf_r>:
 803781a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803781c:	460e      	mov	r6, r1
 803781e:	4614      	mov	r4, r2
 8037820:	4605      	mov	r5, r0
 8037822:	b118      	cbz	r0, 803782c <__swbuf_r+0x12>
 8037824:	6a03      	ldr	r3, [r0, #32]
 8037826:	b90b      	cbnz	r3, 803782c <__swbuf_r+0x12>
 8037828:	f7ff fdfc 	bl	8037424 <__sinit>
 803782c:	69a3      	ldr	r3, [r4, #24]
 803782e:	60a3      	str	r3, [r4, #8]
 8037830:	89a3      	ldrh	r3, [r4, #12]
 8037832:	071a      	lsls	r2, r3, #28
 8037834:	d525      	bpl.n	8037882 <__swbuf_r+0x68>
 8037836:	6923      	ldr	r3, [r4, #16]
 8037838:	b31b      	cbz	r3, 8037882 <__swbuf_r+0x68>
 803783a:	6823      	ldr	r3, [r4, #0]
 803783c:	6922      	ldr	r2, [r4, #16]
 803783e:	1a98      	subs	r0, r3, r2
 8037840:	6963      	ldr	r3, [r4, #20]
 8037842:	b2f6      	uxtb	r6, r6
 8037844:	4283      	cmp	r3, r0
 8037846:	4637      	mov	r7, r6
 8037848:	dc04      	bgt.n	8037854 <__swbuf_r+0x3a>
 803784a:	4621      	mov	r1, r4
 803784c:	4628      	mov	r0, r5
 803784e:	f001 f9e1 	bl	8038c14 <_fflush_r>
 8037852:	b9e0      	cbnz	r0, 803788e <__swbuf_r+0x74>
 8037854:	68a3      	ldr	r3, [r4, #8]
 8037856:	3b01      	subs	r3, #1
 8037858:	60a3      	str	r3, [r4, #8]
 803785a:	6823      	ldr	r3, [r4, #0]
 803785c:	1c5a      	adds	r2, r3, #1
 803785e:	6022      	str	r2, [r4, #0]
 8037860:	701e      	strb	r6, [r3, #0]
 8037862:	6962      	ldr	r2, [r4, #20]
 8037864:	1c43      	adds	r3, r0, #1
 8037866:	429a      	cmp	r2, r3
 8037868:	d004      	beq.n	8037874 <__swbuf_r+0x5a>
 803786a:	89a3      	ldrh	r3, [r4, #12]
 803786c:	07db      	lsls	r3, r3, #31
 803786e:	d506      	bpl.n	803787e <__swbuf_r+0x64>
 8037870:	2e0a      	cmp	r6, #10
 8037872:	d104      	bne.n	803787e <__swbuf_r+0x64>
 8037874:	4621      	mov	r1, r4
 8037876:	4628      	mov	r0, r5
 8037878:	f001 f9cc 	bl	8038c14 <_fflush_r>
 803787c:	b938      	cbnz	r0, 803788e <__swbuf_r+0x74>
 803787e:	4638      	mov	r0, r7
 8037880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8037882:	4621      	mov	r1, r4
 8037884:	4628      	mov	r0, r5
 8037886:	f000 f805 	bl	8037894 <__swsetup_r>
 803788a:	2800      	cmp	r0, #0
 803788c:	d0d5      	beq.n	803783a <__swbuf_r+0x20>
 803788e:	f04f 37ff 	mov.w	r7, #4294967295
 8037892:	e7f4      	b.n	803787e <__swbuf_r+0x64>

08037894 <__swsetup_r>:
 8037894:	b538      	push	{r3, r4, r5, lr}
 8037896:	4b2a      	ldr	r3, [pc, #168]	; (8037940 <__swsetup_r+0xac>)
 8037898:	4605      	mov	r5, r0
 803789a:	6818      	ldr	r0, [r3, #0]
 803789c:	460c      	mov	r4, r1
 803789e:	b118      	cbz	r0, 80378a8 <__swsetup_r+0x14>
 80378a0:	6a03      	ldr	r3, [r0, #32]
 80378a2:	b90b      	cbnz	r3, 80378a8 <__swsetup_r+0x14>
 80378a4:	f7ff fdbe 	bl	8037424 <__sinit>
 80378a8:	89a3      	ldrh	r3, [r4, #12]
 80378aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80378ae:	0718      	lsls	r0, r3, #28
 80378b0:	d422      	bmi.n	80378f8 <__swsetup_r+0x64>
 80378b2:	06d9      	lsls	r1, r3, #27
 80378b4:	d407      	bmi.n	80378c6 <__swsetup_r+0x32>
 80378b6:	2309      	movs	r3, #9
 80378b8:	602b      	str	r3, [r5, #0]
 80378ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80378be:	81a3      	strh	r3, [r4, #12]
 80378c0:	f04f 30ff 	mov.w	r0, #4294967295
 80378c4:	e034      	b.n	8037930 <__swsetup_r+0x9c>
 80378c6:	0758      	lsls	r0, r3, #29
 80378c8:	d512      	bpl.n	80378f0 <__swsetup_r+0x5c>
 80378ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80378cc:	b141      	cbz	r1, 80378e0 <__swsetup_r+0x4c>
 80378ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80378d2:	4299      	cmp	r1, r3
 80378d4:	d002      	beq.n	80378dc <__swsetup_r+0x48>
 80378d6:	4628      	mov	r0, r5
 80378d8:	f000 f97e 	bl	8037bd8 <_free_r>
 80378dc:	2300      	movs	r3, #0
 80378de:	6363      	str	r3, [r4, #52]	; 0x34
 80378e0:	89a3      	ldrh	r3, [r4, #12]
 80378e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80378e6:	81a3      	strh	r3, [r4, #12]
 80378e8:	2300      	movs	r3, #0
 80378ea:	6063      	str	r3, [r4, #4]
 80378ec:	6923      	ldr	r3, [r4, #16]
 80378ee:	6023      	str	r3, [r4, #0]
 80378f0:	89a3      	ldrh	r3, [r4, #12]
 80378f2:	f043 0308 	orr.w	r3, r3, #8
 80378f6:	81a3      	strh	r3, [r4, #12]
 80378f8:	6923      	ldr	r3, [r4, #16]
 80378fa:	b94b      	cbnz	r3, 8037910 <__swsetup_r+0x7c>
 80378fc:	89a3      	ldrh	r3, [r4, #12]
 80378fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8037902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8037906:	d003      	beq.n	8037910 <__swsetup_r+0x7c>
 8037908:	4621      	mov	r1, r4
 803790a:	4628      	mov	r0, r5
 803790c:	f001 fa0d 	bl	8038d2a <__smakebuf_r>
 8037910:	89a0      	ldrh	r0, [r4, #12]
 8037912:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8037916:	f010 0301 	ands.w	r3, r0, #1
 803791a:	d00a      	beq.n	8037932 <__swsetup_r+0x9e>
 803791c:	2300      	movs	r3, #0
 803791e:	60a3      	str	r3, [r4, #8]
 8037920:	6963      	ldr	r3, [r4, #20]
 8037922:	425b      	negs	r3, r3
 8037924:	61a3      	str	r3, [r4, #24]
 8037926:	6923      	ldr	r3, [r4, #16]
 8037928:	b943      	cbnz	r3, 803793c <__swsetup_r+0xa8>
 803792a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803792e:	d1c4      	bne.n	80378ba <__swsetup_r+0x26>
 8037930:	bd38      	pop	{r3, r4, r5, pc}
 8037932:	0781      	lsls	r1, r0, #30
 8037934:	bf58      	it	pl
 8037936:	6963      	ldrpl	r3, [r4, #20]
 8037938:	60a3      	str	r3, [r4, #8]
 803793a:	e7f4      	b.n	8037926 <__swsetup_r+0x92>
 803793c:	2000      	movs	r0, #0
 803793e:	e7f7      	b.n	8037930 <__swsetup_r+0x9c>
 8037940:	20000dc4 	.word	0x20000dc4

08037944 <memcmp>:
 8037944:	b510      	push	{r4, lr}
 8037946:	3901      	subs	r1, #1
 8037948:	4402      	add	r2, r0
 803794a:	4290      	cmp	r0, r2
 803794c:	d101      	bne.n	8037952 <memcmp+0xe>
 803794e:	2000      	movs	r0, #0
 8037950:	e005      	b.n	803795e <memcmp+0x1a>
 8037952:	7803      	ldrb	r3, [r0, #0]
 8037954:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8037958:	42a3      	cmp	r3, r4
 803795a:	d001      	beq.n	8037960 <memcmp+0x1c>
 803795c:	1b18      	subs	r0, r3, r4
 803795e:	bd10      	pop	{r4, pc}
 8037960:	3001      	adds	r0, #1
 8037962:	e7f2      	b.n	803794a <memcmp+0x6>

08037964 <memset>:
 8037964:	4402      	add	r2, r0
 8037966:	4603      	mov	r3, r0
 8037968:	4293      	cmp	r3, r2
 803796a:	d100      	bne.n	803796e <memset+0xa>
 803796c:	4770      	bx	lr
 803796e:	f803 1b01 	strb.w	r1, [r3], #1
 8037972:	e7f9      	b.n	8037968 <memset+0x4>

08037974 <strchr>:
 8037974:	b2c9      	uxtb	r1, r1
 8037976:	4603      	mov	r3, r0
 8037978:	f810 2b01 	ldrb.w	r2, [r0], #1
 803797c:	b11a      	cbz	r2, 8037986 <strchr+0x12>
 803797e:	428a      	cmp	r2, r1
 8037980:	d1f9      	bne.n	8037976 <strchr+0x2>
 8037982:	4618      	mov	r0, r3
 8037984:	4770      	bx	lr
 8037986:	2900      	cmp	r1, #0
 8037988:	bf18      	it	ne
 803798a:	2300      	movne	r3, #0
 803798c:	e7f9      	b.n	8037982 <strchr+0xe>

0803798e <__strtok_r>:
 803798e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8037990:	b908      	cbnz	r0, 8037996 <__strtok_r+0x8>
 8037992:	6810      	ldr	r0, [r2, #0]
 8037994:	b188      	cbz	r0, 80379ba <__strtok_r+0x2c>
 8037996:	4604      	mov	r4, r0
 8037998:	4620      	mov	r0, r4
 803799a:	f814 5b01 	ldrb.w	r5, [r4], #1
 803799e:	460f      	mov	r7, r1
 80379a0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80379a4:	b91e      	cbnz	r6, 80379ae <__strtok_r+0x20>
 80379a6:	b965      	cbnz	r5, 80379c2 <__strtok_r+0x34>
 80379a8:	6015      	str	r5, [r2, #0]
 80379aa:	4628      	mov	r0, r5
 80379ac:	e005      	b.n	80379ba <__strtok_r+0x2c>
 80379ae:	42b5      	cmp	r5, r6
 80379b0:	d1f6      	bne.n	80379a0 <__strtok_r+0x12>
 80379b2:	2b00      	cmp	r3, #0
 80379b4:	d1f0      	bne.n	8037998 <__strtok_r+0xa>
 80379b6:	6014      	str	r4, [r2, #0]
 80379b8:	7003      	strb	r3, [r0, #0]
 80379ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80379bc:	461c      	mov	r4, r3
 80379be:	e00c      	b.n	80379da <__strtok_r+0x4c>
 80379c0:	b915      	cbnz	r5, 80379c8 <__strtok_r+0x3a>
 80379c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80379c6:	460e      	mov	r6, r1
 80379c8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80379cc:	42ab      	cmp	r3, r5
 80379ce:	d1f7      	bne.n	80379c0 <__strtok_r+0x32>
 80379d0:	2b00      	cmp	r3, #0
 80379d2:	d0f3      	beq.n	80379bc <__strtok_r+0x2e>
 80379d4:	2300      	movs	r3, #0
 80379d6:	f804 3c01 	strb.w	r3, [r4, #-1]
 80379da:	6014      	str	r4, [r2, #0]
 80379dc:	e7ed      	b.n	80379ba <__strtok_r+0x2c>

080379de <strtok_r>:
 80379de:	2301      	movs	r3, #1
 80379e0:	f7ff bfd5 	b.w	803798e <__strtok_r>

080379e4 <_raise_r>:
 80379e4:	291f      	cmp	r1, #31
 80379e6:	b538      	push	{r3, r4, r5, lr}
 80379e8:	4604      	mov	r4, r0
 80379ea:	460d      	mov	r5, r1
 80379ec:	d904      	bls.n	80379f8 <_raise_r+0x14>
 80379ee:	2316      	movs	r3, #22
 80379f0:	6003      	str	r3, [r0, #0]
 80379f2:	f04f 30ff 	mov.w	r0, #4294967295
 80379f6:	bd38      	pop	{r3, r4, r5, pc}
 80379f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80379fa:	b112      	cbz	r2, 8037a02 <_raise_r+0x1e>
 80379fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8037a00:	b94b      	cbnz	r3, 8037a16 <_raise_r+0x32>
 8037a02:	4620      	mov	r0, r4
 8037a04:	f000 f864 	bl	8037ad0 <_getpid_r>
 8037a08:	462a      	mov	r2, r5
 8037a0a:	4601      	mov	r1, r0
 8037a0c:	4620      	mov	r0, r4
 8037a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8037a12:	f000 b84b 	b.w	8037aac <_kill_r>
 8037a16:	2b01      	cmp	r3, #1
 8037a18:	d00a      	beq.n	8037a30 <_raise_r+0x4c>
 8037a1a:	1c59      	adds	r1, r3, #1
 8037a1c:	d103      	bne.n	8037a26 <_raise_r+0x42>
 8037a1e:	2316      	movs	r3, #22
 8037a20:	6003      	str	r3, [r0, #0]
 8037a22:	2001      	movs	r0, #1
 8037a24:	e7e7      	b.n	80379f6 <_raise_r+0x12>
 8037a26:	2400      	movs	r4, #0
 8037a28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8037a2c:	4628      	mov	r0, r5
 8037a2e:	4798      	blx	r3
 8037a30:	2000      	movs	r0, #0
 8037a32:	e7e0      	b.n	80379f6 <_raise_r+0x12>

08037a34 <raise>:
 8037a34:	4b02      	ldr	r3, [pc, #8]	; (8037a40 <raise+0xc>)
 8037a36:	4601      	mov	r1, r0
 8037a38:	6818      	ldr	r0, [r3, #0]
 8037a3a:	f7ff bfd3 	b.w	80379e4 <_raise_r>
 8037a3e:	bf00      	nop
 8037a40:	20000dc4 	.word	0x20000dc4

08037a44 <_close_r>:
 8037a44:	b538      	push	{r3, r4, r5, lr}
 8037a46:	4d06      	ldr	r5, [pc, #24]	; (8037a60 <_close_r+0x1c>)
 8037a48:	2300      	movs	r3, #0
 8037a4a:	4604      	mov	r4, r0
 8037a4c:	4608      	mov	r0, r1
 8037a4e:	602b      	str	r3, [r5, #0]
 8037a50:	f7e9 ffb3 	bl	80219ba <_close>
 8037a54:	1c43      	adds	r3, r0, #1
 8037a56:	d102      	bne.n	8037a5e <_close_r+0x1a>
 8037a58:	682b      	ldr	r3, [r5, #0]
 8037a5a:	b103      	cbz	r3, 8037a5e <_close_r+0x1a>
 8037a5c:	6023      	str	r3, [r4, #0]
 8037a5e:	bd38      	pop	{r3, r4, r5, pc}
 8037a60:	20004578 	.word	0x20004578

08037a64 <_lseek_r>:
 8037a64:	b538      	push	{r3, r4, r5, lr}
 8037a66:	4d07      	ldr	r5, [pc, #28]	; (8037a84 <_lseek_r+0x20>)
 8037a68:	4604      	mov	r4, r0
 8037a6a:	4608      	mov	r0, r1
 8037a6c:	4611      	mov	r1, r2
 8037a6e:	2200      	movs	r2, #0
 8037a70:	602a      	str	r2, [r5, #0]
 8037a72:	461a      	mov	r2, r3
 8037a74:	f7e9 ffc8 	bl	8021a08 <_lseek>
 8037a78:	1c43      	adds	r3, r0, #1
 8037a7a:	d102      	bne.n	8037a82 <_lseek_r+0x1e>
 8037a7c:	682b      	ldr	r3, [r5, #0]
 8037a7e:	b103      	cbz	r3, 8037a82 <_lseek_r+0x1e>
 8037a80:	6023      	str	r3, [r4, #0]
 8037a82:	bd38      	pop	{r3, r4, r5, pc}
 8037a84:	20004578 	.word	0x20004578

08037a88 <_read_r>:
 8037a88:	b538      	push	{r3, r4, r5, lr}
 8037a8a:	4d07      	ldr	r5, [pc, #28]	; (8037aa8 <_read_r+0x20>)
 8037a8c:	4604      	mov	r4, r0
 8037a8e:	4608      	mov	r0, r1
 8037a90:	4611      	mov	r1, r2
 8037a92:	2200      	movs	r2, #0
 8037a94:	602a      	str	r2, [r5, #0]
 8037a96:	461a      	mov	r2, r3
 8037a98:	f7e9 ff56 	bl	8021948 <_read>
 8037a9c:	1c43      	adds	r3, r0, #1
 8037a9e:	d102      	bne.n	8037aa6 <_read_r+0x1e>
 8037aa0:	682b      	ldr	r3, [r5, #0]
 8037aa2:	b103      	cbz	r3, 8037aa6 <_read_r+0x1e>
 8037aa4:	6023      	str	r3, [r4, #0]
 8037aa6:	bd38      	pop	{r3, r4, r5, pc}
 8037aa8:	20004578 	.word	0x20004578

08037aac <_kill_r>:
 8037aac:	b538      	push	{r3, r4, r5, lr}
 8037aae:	4d07      	ldr	r5, [pc, #28]	; (8037acc <_kill_r+0x20>)
 8037ab0:	2300      	movs	r3, #0
 8037ab2:	4604      	mov	r4, r0
 8037ab4:	4608      	mov	r0, r1
 8037ab6:	4611      	mov	r1, r2
 8037ab8:	602b      	str	r3, [r5, #0]
 8037aba:	f7e9 ff2b 	bl	8021914 <_kill>
 8037abe:	1c43      	adds	r3, r0, #1
 8037ac0:	d102      	bne.n	8037ac8 <_kill_r+0x1c>
 8037ac2:	682b      	ldr	r3, [r5, #0]
 8037ac4:	b103      	cbz	r3, 8037ac8 <_kill_r+0x1c>
 8037ac6:	6023      	str	r3, [r4, #0]
 8037ac8:	bd38      	pop	{r3, r4, r5, pc}
 8037aca:	bf00      	nop
 8037acc:	20004578 	.word	0x20004578

08037ad0 <_getpid_r>:
 8037ad0:	f7e9 bf18 	b.w	8021904 <_getpid>

08037ad4 <_sbrk_r>:
 8037ad4:	b538      	push	{r3, r4, r5, lr}
 8037ad6:	4d06      	ldr	r5, [pc, #24]	; (8037af0 <_sbrk_r+0x1c>)
 8037ad8:	2300      	movs	r3, #0
 8037ada:	4604      	mov	r4, r0
 8037adc:	4608      	mov	r0, r1
 8037ade:	602b      	str	r3, [r5, #0]
 8037ae0:	f7e9 ffa0 	bl	8021a24 <_sbrk>
 8037ae4:	1c43      	adds	r3, r0, #1
 8037ae6:	d102      	bne.n	8037aee <_sbrk_r+0x1a>
 8037ae8:	682b      	ldr	r3, [r5, #0]
 8037aea:	b103      	cbz	r3, 8037aee <_sbrk_r+0x1a>
 8037aec:	6023      	str	r3, [r4, #0]
 8037aee:	bd38      	pop	{r3, r4, r5, pc}
 8037af0:	20004578 	.word	0x20004578

08037af4 <_write_r>:
 8037af4:	b538      	push	{r3, r4, r5, lr}
 8037af6:	4d07      	ldr	r5, [pc, #28]	; (8037b14 <_write_r+0x20>)
 8037af8:	4604      	mov	r4, r0
 8037afa:	4608      	mov	r0, r1
 8037afc:	4611      	mov	r1, r2
 8037afe:	2200      	movs	r2, #0
 8037b00:	602a      	str	r2, [r5, #0]
 8037b02:	461a      	mov	r2, r3
 8037b04:	f7e9 ff3d 	bl	8021982 <_write>
 8037b08:	1c43      	adds	r3, r0, #1
 8037b0a:	d102      	bne.n	8037b12 <_write_r+0x1e>
 8037b0c:	682b      	ldr	r3, [r5, #0]
 8037b0e:	b103      	cbz	r3, 8037b12 <_write_r+0x1e>
 8037b10:	6023      	str	r3, [r4, #0]
 8037b12:	bd38      	pop	{r3, r4, r5, pc}
 8037b14:	20004578 	.word	0x20004578

08037b18 <__errno>:
 8037b18:	4b01      	ldr	r3, [pc, #4]	; (8037b20 <__errno+0x8>)
 8037b1a:	6818      	ldr	r0, [r3, #0]
 8037b1c:	4770      	bx	lr
 8037b1e:	bf00      	nop
 8037b20:	20000dc4 	.word	0x20000dc4

08037b24 <__libc_init_array>:
 8037b24:	b570      	push	{r4, r5, r6, lr}
 8037b26:	4d0d      	ldr	r5, [pc, #52]	; (8037b5c <__libc_init_array+0x38>)
 8037b28:	4c0d      	ldr	r4, [pc, #52]	; (8037b60 <__libc_init_array+0x3c>)
 8037b2a:	1b64      	subs	r4, r4, r5
 8037b2c:	10a4      	asrs	r4, r4, #2
 8037b2e:	2600      	movs	r6, #0
 8037b30:	42a6      	cmp	r6, r4
 8037b32:	d109      	bne.n	8037b48 <__libc_init_array+0x24>
 8037b34:	4d0b      	ldr	r5, [pc, #44]	; (8037b64 <__libc_init_array+0x40>)
 8037b36:	4c0c      	ldr	r4, [pc, #48]	; (8037b68 <__libc_init_array+0x44>)
 8037b38:	f001 fb60 	bl	80391fc <_init>
 8037b3c:	1b64      	subs	r4, r4, r5
 8037b3e:	10a4      	asrs	r4, r4, #2
 8037b40:	2600      	movs	r6, #0
 8037b42:	42a6      	cmp	r6, r4
 8037b44:	d105      	bne.n	8037b52 <__libc_init_array+0x2e>
 8037b46:	bd70      	pop	{r4, r5, r6, pc}
 8037b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8037b4c:	4798      	blx	r3
 8037b4e:	3601      	adds	r6, #1
 8037b50:	e7ee      	b.n	8037b30 <__libc_init_array+0xc>
 8037b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8037b56:	4798      	blx	r3
 8037b58:	3601      	adds	r6, #1
 8037b5a:	e7f2      	b.n	8037b42 <__libc_init_array+0x1e>
 8037b5c:	08047d9c 	.word	0x08047d9c
 8037b60:	08047d9c 	.word	0x08047d9c
 8037b64:	08047d9c 	.word	0x08047d9c
 8037b68:	08047da4 	.word	0x08047da4

08037b6c <__retarget_lock_acquire_recursive>:
 8037b6c:	4770      	bx	lr

08037b6e <__retarget_lock_release_recursive>:
 8037b6e:	4770      	bx	lr

08037b70 <strcpy>:
 8037b70:	4603      	mov	r3, r0
 8037b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8037b76:	f803 2b01 	strb.w	r2, [r3], #1
 8037b7a:	2a00      	cmp	r2, #0
 8037b7c:	d1f9      	bne.n	8037b72 <strcpy+0x2>
 8037b7e:	4770      	bx	lr

08037b80 <memcpy>:
 8037b80:	440a      	add	r2, r1
 8037b82:	4291      	cmp	r1, r2
 8037b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8037b88:	d100      	bne.n	8037b8c <memcpy+0xc>
 8037b8a:	4770      	bx	lr
 8037b8c:	b510      	push	{r4, lr}
 8037b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8037b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8037b96:	4291      	cmp	r1, r2
 8037b98:	d1f9      	bne.n	8037b8e <memcpy+0xe>
 8037b9a:	bd10      	pop	{r4, pc}

08037b9c <__assert_func>:
 8037b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8037b9e:	4614      	mov	r4, r2
 8037ba0:	461a      	mov	r2, r3
 8037ba2:	4b09      	ldr	r3, [pc, #36]	; (8037bc8 <__assert_func+0x2c>)
 8037ba4:	681b      	ldr	r3, [r3, #0]
 8037ba6:	4605      	mov	r5, r0
 8037ba8:	68d8      	ldr	r0, [r3, #12]
 8037baa:	b14c      	cbz	r4, 8037bc0 <__assert_func+0x24>
 8037bac:	4b07      	ldr	r3, [pc, #28]	; (8037bcc <__assert_func+0x30>)
 8037bae:	9100      	str	r1, [sp, #0]
 8037bb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8037bb4:	4906      	ldr	r1, [pc, #24]	; (8037bd0 <__assert_func+0x34>)
 8037bb6:	462b      	mov	r3, r5
 8037bb8:	f001 f854 	bl	8038c64 <fiprintf>
 8037bbc:	f7ff f9fa 	bl	8036fb4 <abort>
 8037bc0:	4b04      	ldr	r3, [pc, #16]	; (8037bd4 <__assert_func+0x38>)
 8037bc2:	461c      	mov	r4, r3
 8037bc4:	e7f3      	b.n	8037bae <__assert_func+0x12>
 8037bc6:	bf00      	nop
 8037bc8:	20000dc4 	.word	0x20000dc4
 8037bcc:	08047d08 	.word	0x08047d08
 8037bd0:	08047d15 	.word	0x08047d15
 8037bd4:	08047d43 	.word	0x08047d43

08037bd8 <_free_r>:
 8037bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8037bda:	2900      	cmp	r1, #0
 8037bdc:	d044      	beq.n	8037c68 <_free_r+0x90>
 8037bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8037be2:	9001      	str	r0, [sp, #4]
 8037be4:	2b00      	cmp	r3, #0
 8037be6:	f1a1 0404 	sub.w	r4, r1, #4
 8037bea:	bfb8      	it	lt
 8037bec:	18e4      	addlt	r4, r4, r3
 8037bee:	f7ff fa99 	bl	8037124 <__malloc_lock>
 8037bf2:	4a1e      	ldr	r2, [pc, #120]	; (8037c6c <_free_r+0x94>)
 8037bf4:	9801      	ldr	r0, [sp, #4]
 8037bf6:	6813      	ldr	r3, [r2, #0]
 8037bf8:	b933      	cbnz	r3, 8037c08 <_free_r+0x30>
 8037bfa:	6063      	str	r3, [r4, #4]
 8037bfc:	6014      	str	r4, [r2, #0]
 8037bfe:	b003      	add	sp, #12
 8037c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8037c04:	f7ff ba94 	b.w	8037130 <__malloc_unlock>
 8037c08:	42a3      	cmp	r3, r4
 8037c0a:	d908      	bls.n	8037c1e <_free_r+0x46>
 8037c0c:	6825      	ldr	r5, [r4, #0]
 8037c0e:	1961      	adds	r1, r4, r5
 8037c10:	428b      	cmp	r3, r1
 8037c12:	bf01      	itttt	eq
 8037c14:	6819      	ldreq	r1, [r3, #0]
 8037c16:	685b      	ldreq	r3, [r3, #4]
 8037c18:	1949      	addeq	r1, r1, r5
 8037c1a:	6021      	streq	r1, [r4, #0]
 8037c1c:	e7ed      	b.n	8037bfa <_free_r+0x22>
 8037c1e:	461a      	mov	r2, r3
 8037c20:	685b      	ldr	r3, [r3, #4]
 8037c22:	b10b      	cbz	r3, 8037c28 <_free_r+0x50>
 8037c24:	42a3      	cmp	r3, r4
 8037c26:	d9fa      	bls.n	8037c1e <_free_r+0x46>
 8037c28:	6811      	ldr	r1, [r2, #0]
 8037c2a:	1855      	adds	r5, r2, r1
 8037c2c:	42a5      	cmp	r5, r4
 8037c2e:	d10b      	bne.n	8037c48 <_free_r+0x70>
 8037c30:	6824      	ldr	r4, [r4, #0]
 8037c32:	4421      	add	r1, r4
 8037c34:	1854      	adds	r4, r2, r1
 8037c36:	42a3      	cmp	r3, r4
 8037c38:	6011      	str	r1, [r2, #0]
 8037c3a:	d1e0      	bne.n	8037bfe <_free_r+0x26>
 8037c3c:	681c      	ldr	r4, [r3, #0]
 8037c3e:	685b      	ldr	r3, [r3, #4]
 8037c40:	6053      	str	r3, [r2, #4]
 8037c42:	440c      	add	r4, r1
 8037c44:	6014      	str	r4, [r2, #0]
 8037c46:	e7da      	b.n	8037bfe <_free_r+0x26>
 8037c48:	d902      	bls.n	8037c50 <_free_r+0x78>
 8037c4a:	230c      	movs	r3, #12
 8037c4c:	6003      	str	r3, [r0, #0]
 8037c4e:	e7d6      	b.n	8037bfe <_free_r+0x26>
 8037c50:	6825      	ldr	r5, [r4, #0]
 8037c52:	1961      	adds	r1, r4, r5
 8037c54:	428b      	cmp	r3, r1
 8037c56:	bf04      	itt	eq
 8037c58:	6819      	ldreq	r1, [r3, #0]
 8037c5a:	685b      	ldreq	r3, [r3, #4]
 8037c5c:	6063      	str	r3, [r4, #4]
 8037c5e:	bf04      	itt	eq
 8037c60:	1949      	addeq	r1, r1, r5
 8037c62:	6021      	streq	r1, [r4, #0]
 8037c64:	6054      	str	r4, [r2, #4]
 8037c66:	e7ca      	b.n	8037bfe <_free_r+0x26>
 8037c68:	b003      	add	sp, #12
 8037c6a:	bd30      	pop	{r4, r5, pc}
 8037c6c:	20004434 	.word	0x20004434

08037c70 <__ssputs_r>:
 8037c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8037c74:	688e      	ldr	r6, [r1, #8]
 8037c76:	461f      	mov	r7, r3
 8037c78:	42be      	cmp	r6, r7
 8037c7a:	680b      	ldr	r3, [r1, #0]
 8037c7c:	4682      	mov	sl, r0
 8037c7e:	460c      	mov	r4, r1
 8037c80:	4690      	mov	r8, r2
 8037c82:	d82c      	bhi.n	8037cde <__ssputs_r+0x6e>
 8037c84:	898a      	ldrh	r2, [r1, #12]
 8037c86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8037c8a:	d026      	beq.n	8037cda <__ssputs_r+0x6a>
 8037c8c:	6965      	ldr	r5, [r4, #20]
 8037c8e:	6909      	ldr	r1, [r1, #16]
 8037c90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8037c94:	eba3 0901 	sub.w	r9, r3, r1
 8037c98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8037c9c:	1c7b      	adds	r3, r7, #1
 8037c9e:	444b      	add	r3, r9
 8037ca0:	106d      	asrs	r5, r5, #1
 8037ca2:	429d      	cmp	r5, r3
 8037ca4:	bf38      	it	cc
 8037ca6:	461d      	movcc	r5, r3
 8037ca8:	0553      	lsls	r3, r2, #21
 8037caa:	d527      	bpl.n	8037cfc <__ssputs_r+0x8c>
 8037cac:	4629      	mov	r1, r5
 8037cae:	f7ff f9b9 	bl	8037024 <_malloc_r>
 8037cb2:	4606      	mov	r6, r0
 8037cb4:	b360      	cbz	r0, 8037d10 <__ssputs_r+0xa0>
 8037cb6:	6921      	ldr	r1, [r4, #16]
 8037cb8:	464a      	mov	r2, r9
 8037cba:	f7ff ff61 	bl	8037b80 <memcpy>
 8037cbe:	89a3      	ldrh	r3, [r4, #12]
 8037cc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8037cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8037cc8:	81a3      	strh	r3, [r4, #12]
 8037cca:	6126      	str	r6, [r4, #16]
 8037ccc:	6165      	str	r5, [r4, #20]
 8037cce:	444e      	add	r6, r9
 8037cd0:	eba5 0509 	sub.w	r5, r5, r9
 8037cd4:	6026      	str	r6, [r4, #0]
 8037cd6:	60a5      	str	r5, [r4, #8]
 8037cd8:	463e      	mov	r6, r7
 8037cda:	42be      	cmp	r6, r7
 8037cdc:	d900      	bls.n	8037ce0 <__ssputs_r+0x70>
 8037cde:	463e      	mov	r6, r7
 8037ce0:	6820      	ldr	r0, [r4, #0]
 8037ce2:	4632      	mov	r2, r6
 8037ce4:	4641      	mov	r1, r8
 8037ce6:	f001 f91b 	bl	8038f20 <memmove>
 8037cea:	68a3      	ldr	r3, [r4, #8]
 8037cec:	1b9b      	subs	r3, r3, r6
 8037cee:	60a3      	str	r3, [r4, #8]
 8037cf0:	6823      	ldr	r3, [r4, #0]
 8037cf2:	4433      	add	r3, r6
 8037cf4:	6023      	str	r3, [r4, #0]
 8037cf6:	2000      	movs	r0, #0
 8037cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8037cfc:	462a      	mov	r2, r5
 8037cfe:	f001 f94b 	bl	8038f98 <_realloc_r>
 8037d02:	4606      	mov	r6, r0
 8037d04:	2800      	cmp	r0, #0
 8037d06:	d1e0      	bne.n	8037cca <__ssputs_r+0x5a>
 8037d08:	6921      	ldr	r1, [r4, #16]
 8037d0a:	4650      	mov	r0, sl
 8037d0c:	f7ff ff64 	bl	8037bd8 <_free_r>
 8037d10:	230c      	movs	r3, #12
 8037d12:	f8ca 3000 	str.w	r3, [sl]
 8037d16:	89a3      	ldrh	r3, [r4, #12]
 8037d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8037d1c:	81a3      	strh	r3, [r4, #12]
 8037d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8037d22:	e7e9      	b.n	8037cf8 <__ssputs_r+0x88>

08037d24 <_svfiprintf_r>:
 8037d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8037d28:	4698      	mov	r8, r3
 8037d2a:	898b      	ldrh	r3, [r1, #12]
 8037d2c:	061b      	lsls	r3, r3, #24
 8037d2e:	b09d      	sub	sp, #116	; 0x74
 8037d30:	4607      	mov	r7, r0
 8037d32:	460d      	mov	r5, r1
 8037d34:	4614      	mov	r4, r2
 8037d36:	d50e      	bpl.n	8037d56 <_svfiprintf_r+0x32>
 8037d38:	690b      	ldr	r3, [r1, #16]
 8037d3a:	b963      	cbnz	r3, 8037d56 <_svfiprintf_r+0x32>
 8037d3c:	2140      	movs	r1, #64	; 0x40
 8037d3e:	f7ff f971 	bl	8037024 <_malloc_r>
 8037d42:	6028      	str	r0, [r5, #0]
 8037d44:	6128      	str	r0, [r5, #16]
 8037d46:	b920      	cbnz	r0, 8037d52 <_svfiprintf_r+0x2e>
 8037d48:	230c      	movs	r3, #12
 8037d4a:	603b      	str	r3, [r7, #0]
 8037d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8037d50:	e0d0      	b.n	8037ef4 <_svfiprintf_r+0x1d0>
 8037d52:	2340      	movs	r3, #64	; 0x40
 8037d54:	616b      	str	r3, [r5, #20]
 8037d56:	2300      	movs	r3, #0
 8037d58:	9309      	str	r3, [sp, #36]	; 0x24
 8037d5a:	2320      	movs	r3, #32
 8037d5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8037d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8037d64:	2330      	movs	r3, #48	; 0x30
 8037d66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8037f0c <_svfiprintf_r+0x1e8>
 8037d6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8037d6e:	f04f 0901 	mov.w	r9, #1
 8037d72:	4623      	mov	r3, r4
 8037d74:	469a      	mov	sl, r3
 8037d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8037d7a:	b10a      	cbz	r2, 8037d80 <_svfiprintf_r+0x5c>
 8037d7c:	2a25      	cmp	r2, #37	; 0x25
 8037d7e:	d1f9      	bne.n	8037d74 <_svfiprintf_r+0x50>
 8037d80:	ebba 0b04 	subs.w	fp, sl, r4
 8037d84:	d00b      	beq.n	8037d9e <_svfiprintf_r+0x7a>
 8037d86:	465b      	mov	r3, fp
 8037d88:	4622      	mov	r2, r4
 8037d8a:	4629      	mov	r1, r5
 8037d8c:	4638      	mov	r0, r7
 8037d8e:	f7ff ff6f 	bl	8037c70 <__ssputs_r>
 8037d92:	3001      	adds	r0, #1
 8037d94:	f000 80a9 	beq.w	8037eea <_svfiprintf_r+0x1c6>
 8037d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8037d9a:	445a      	add	r2, fp
 8037d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8037d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8037da2:	2b00      	cmp	r3, #0
 8037da4:	f000 80a1 	beq.w	8037eea <_svfiprintf_r+0x1c6>
 8037da8:	2300      	movs	r3, #0
 8037daa:	f04f 32ff 	mov.w	r2, #4294967295
 8037dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8037db2:	f10a 0a01 	add.w	sl, sl, #1
 8037db6:	9304      	str	r3, [sp, #16]
 8037db8:	9307      	str	r3, [sp, #28]
 8037dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8037dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8037dc0:	4654      	mov	r4, sl
 8037dc2:	2205      	movs	r2, #5
 8037dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8037dc8:	4850      	ldr	r0, [pc, #320]	; (8037f0c <_svfiprintf_r+0x1e8>)
 8037dca:	f7e8 fa19 	bl	8020200 <memchr>
 8037dce:	9a04      	ldr	r2, [sp, #16]
 8037dd0:	b9d8      	cbnz	r0, 8037e0a <_svfiprintf_r+0xe6>
 8037dd2:	06d0      	lsls	r0, r2, #27
 8037dd4:	bf44      	itt	mi
 8037dd6:	2320      	movmi	r3, #32
 8037dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8037ddc:	0711      	lsls	r1, r2, #28
 8037dde:	bf44      	itt	mi
 8037de0:	232b      	movmi	r3, #43	; 0x2b
 8037de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8037de6:	f89a 3000 	ldrb.w	r3, [sl]
 8037dea:	2b2a      	cmp	r3, #42	; 0x2a
 8037dec:	d015      	beq.n	8037e1a <_svfiprintf_r+0xf6>
 8037dee:	9a07      	ldr	r2, [sp, #28]
 8037df0:	4654      	mov	r4, sl
 8037df2:	2000      	movs	r0, #0
 8037df4:	f04f 0c0a 	mov.w	ip, #10
 8037df8:	4621      	mov	r1, r4
 8037dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8037dfe:	3b30      	subs	r3, #48	; 0x30
 8037e00:	2b09      	cmp	r3, #9
 8037e02:	d94d      	bls.n	8037ea0 <_svfiprintf_r+0x17c>
 8037e04:	b1b0      	cbz	r0, 8037e34 <_svfiprintf_r+0x110>
 8037e06:	9207      	str	r2, [sp, #28]
 8037e08:	e014      	b.n	8037e34 <_svfiprintf_r+0x110>
 8037e0a:	eba0 0308 	sub.w	r3, r0, r8
 8037e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8037e12:	4313      	orrs	r3, r2
 8037e14:	9304      	str	r3, [sp, #16]
 8037e16:	46a2      	mov	sl, r4
 8037e18:	e7d2      	b.n	8037dc0 <_svfiprintf_r+0x9c>
 8037e1a:	9b03      	ldr	r3, [sp, #12]
 8037e1c:	1d19      	adds	r1, r3, #4
 8037e1e:	681b      	ldr	r3, [r3, #0]
 8037e20:	9103      	str	r1, [sp, #12]
 8037e22:	2b00      	cmp	r3, #0
 8037e24:	bfbb      	ittet	lt
 8037e26:	425b      	neglt	r3, r3
 8037e28:	f042 0202 	orrlt.w	r2, r2, #2
 8037e2c:	9307      	strge	r3, [sp, #28]
 8037e2e:	9307      	strlt	r3, [sp, #28]
 8037e30:	bfb8      	it	lt
 8037e32:	9204      	strlt	r2, [sp, #16]
 8037e34:	7823      	ldrb	r3, [r4, #0]
 8037e36:	2b2e      	cmp	r3, #46	; 0x2e
 8037e38:	d10c      	bne.n	8037e54 <_svfiprintf_r+0x130>
 8037e3a:	7863      	ldrb	r3, [r4, #1]
 8037e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8037e3e:	d134      	bne.n	8037eaa <_svfiprintf_r+0x186>
 8037e40:	9b03      	ldr	r3, [sp, #12]
 8037e42:	1d1a      	adds	r2, r3, #4
 8037e44:	681b      	ldr	r3, [r3, #0]
 8037e46:	9203      	str	r2, [sp, #12]
 8037e48:	2b00      	cmp	r3, #0
 8037e4a:	bfb8      	it	lt
 8037e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8037e50:	3402      	adds	r4, #2
 8037e52:	9305      	str	r3, [sp, #20]
 8037e54:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8037f1c <_svfiprintf_r+0x1f8>
 8037e58:	7821      	ldrb	r1, [r4, #0]
 8037e5a:	2203      	movs	r2, #3
 8037e5c:	4650      	mov	r0, sl
 8037e5e:	f7e8 f9cf 	bl	8020200 <memchr>
 8037e62:	b138      	cbz	r0, 8037e74 <_svfiprintf_r+0x150>
 8037e64:	9b04      	ldr	r3, [sp, #16]
 8037e66:	eba0 000a 	sub.w	r0, r0, sl
 8037e6a:	2240      	movs	r2, #64	; 0x40
 8037e6c:	4082      	lsls	r2, r0
 8037e6e:	4313      	orrs	r3, r2
 8037e70:	3401      	adds	r4, #1
 8037e72:	9304      	str	r3, [sp, #16]
 8037e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8037e78:	4825      	ldr	r0, [pc, #148]	; (8037f10 <_svfiprintf_r+0x1ec>)
 8037e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8037e7e:	2206      	movs	r2, #6
 8037e80:	f7e8 f9be 	bl	8020200 <memchr>
 8037e84:	2800      	cmp	r0, #0
 8037e86:	d038      	beq.n	8037efa <_svfiprintf_r+0x1d6>
 8037e88:	4b22      	ldr	r3, [pc, #136]	; (8037f14 <_svfiprintf_r+0x1f0>)
 8037e8a:	bb1b      	cbnz	r3, 8037ed4 <_svfiprintf_r+0x1b0>
 8037e8c:	9b03      	ldr	r3, [sp, #12]
 8037e8e:	3307      	adds	r3, #7
 8037e90:	f023 0307 	bic.w	r3, r3, #7
 8037e94:	3308      	adds	r3, #8
 8037e96:	9303      	str	r3, [sp, #12]
 8037e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8037e9a:	4433      	add	r3, r6
 8037e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8037e9e:	e768      	b.n	8037d72 <_svfiprintf_r+0x4e>
 8037ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8037ea4:	460c      	mov	r4, r1
 8037ea6:	2001      	movs	r0, #1
 8037ea8:	e7a6      	b.n	8037df8 <_svfiprintf_r+0xd4>
 8037eaa:	2300      	movs	r3, #0
 8037eac:	3401      	adds	r4, #1
 8037eae:	9305      	str	r3, [sp, #20]
 8037eb0:	4619      	mov	r1, r3
 8037eb2:	f04f 0c0a 	mov.w	ip, #10
 8037eb6:	4620      	mov	r0, r4
 8037eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8037ebc:	3a30      	subs	r2, #48	; 0x30
 8037ebe:	2a09      	cmp	r2, #9
 8037ec0:	d903      	bls.n	8037eca <_svfiprintf_r+0x1a6>
 8037ec2:	2b00      	cmp	r3, #0
 8037ec4:	d0c6      	beq.n	8037e54 <_svfiprintf_r+0x130>
 8037ec6:	9105      	str	r1, [sp, #20]
 8037ec8:	e7c4      	b.n	8037e54 <_svfiprintf_r+0x130>
 8037eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8037ece:	4604      	mov	r4, r0
 8037ed0:	2301      	movs	r3, #1
 8037ed2:	e7f0      	b.n	8037eb6 <_svfiprintf_r+0x192>
 8037ed4:	ab03      	add	r3, sp, #12
 8037ed6:	9300      	str	r3, [sp, #0]
 8037ed8:	462a      	mov	r2, r5
 8037eda:	4b0f      	ldr	r3, [pc, #60]	; (8037f18 <_svfiprintf_r+0x1f4>)
 8037edc:	a904      	add	r1, sp, #16
 8037ede:	4638      	mov	r0, r7
 8037ee0:	f3af 8000 	nop.w
 8037ee4:	1c42      	adds	r2, r0, #1
 8037ee6:	4606      	mov	r6, r0
 8037ee8:	d1d6      	bne.n	8037e98 <_svfiprintf_r+0x174>
 8037eea:	89ab      	ldrh	r3, [r5, #12]
 8037eec:	065b      	lsls	r3, r3, #25
 8037eee:	f53f af2d 	bmi.w	8037d4c <_svfiprintf_r+0x28>
 8037ef2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8037ef4:	b01d      	add	sp, #116	; 0x74
 8037ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8037efa:	ab03      	add	r3, sp, #12
 8037efc:	9300      	str	r3, [sp, #0]
 8037efe:	462a      	mov	r2, r5
 8037f00:	4b05      	ldr	r3, [pc, #20]	; (8037f18 <_svfiprintf_r+0x1f4>)
 8037f02:	a904      	add	r1, sp, #16
 8037f04:	4638      	mov	r0, r7
 8037f06:	f000 fb8f 	bl	8038628 <_printf_i>
 8037f0a:	e7eb      	b.n	8037ee4 <_svfiprintf_r+0x1c0>
 8037f0c:	08047d44 	.word	0x08047d44
 8037f10:	08047d4e 	.word	0x08047d4e
 8037f14:	00000000 	.word	0x00000000
 8037f18:	08037c71 	.word	0x08037c71
 8037f1c:	08047d4a 	.word	0x08047d4a

08037f20 <_sungetc_r>:
 8037f20:	b538      	push	{r3, r4, r5, lr}
 8037f22:	1c4b      	adds	r3, r1, #1
 8037f24:	4614      	mov	r4, r2
 8037f26:	d103      	bne.n	8037f30 <_sungetc_r+0x10>
 8037f28:	f04f 35ff 	mov.w	r5, #4294967295
 8037f2c:	4628      	mov	r0, r5
 8037f2e:	bd38      	pop	{r3, r4, r5, pc}
 8037f30:	8993      	ldrh	r3, [r2, #12]
 8037f32:	f023 0320 	bic.w	r3, r3, #32
 8037f36:	8193      	strh	r3, [r2, #12]
 8037f38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8037f3a:	6852      	ldr	r2, [r2, #4]
 8037f3c:	b2cd      	uxtb	r5, r1
 8037f3e:	b18b      	cbz	r3, 8037f64 <_sungetc_r+0x44>
 8037f40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8037f42:	4293      	cmp	r3, r2
 8037f44:	dd08      	ble.n	8037f58 <_sungetc_r+0x38>
 8037f46:	6823      	ldr	r3, [r4, #0]
 8037f48:	1e5a      	subs	r2, r3, #1
 8037f4a:	6022      	str	r2, [r4, #0]
 8037f4c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8037f50:	6863      	ldr	r3, [r4, #4]
 8037f52:	3301      	adds	r3, #1
 8037f54:	6063      	str	r3, [r4, #4]
 8037f56:	e7e9      	b.n	8037f2c <_sungetc_r+0xc>
 8037f58:	4621      	mov	r1, r4
 8037f5a:	f000 ffa7 	bl	8038eac <__submore>
 8037f5e:	2800      	cmp	r0, #0
 8037f60:	d0f1      	beq.n	8037f46 <_sungetc_r+0x26>
 8037f62:	e7e1      	b.n	8037f28 <_sungetc_r+0x8>
 8037f64:	6921      	ldr	r1, [r4, #16]
 8037f66:	6823      	ldr	r3, [r4, #0]
 8037f68:	b151      	cbz	r1, 8037f80 <_sungetc_r+0x60>
 8037f6a:	4299      	cmp	r1, r3
 8037f6c:	d208      	bcs.n	8037f80 <_sungetc_r+0x60>
 8037f6e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8037f72:	42a9      	cmp	r1, r5
 8037f74:	d104      	bne.n	8037f80 <_sungetc_r+0x60>
 8037f76:	3b01      	subs	r3, #1
 8037f78:	3201      	adds	r2, #1
 8037f7a:	6023      	str	r3, [r4, #0]
 8037f7c:	6062      	str	r2, [r4, #4]
 8037f7e:	e7d5      	b.n	8037f2c <_sungetc_r+0xc>
 8037f80:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8037f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8037f88:	6363      	str	r3, [r4, #52]	; 0x34
 8037f8a:	2303      	movs	r3, #3
 8037f8c:	63a3      	str	r3, [r4, #56]	; 0x38
 8037f8e:	4623      	mov	r3, r4
 8037f90:	f803 5f46 	strb.w	r5, [r3, #70]!
 8037f94:	6023      	str	r3, [r4, #0]
 8037f96:	2301      	movs	r3, #1
 8037f98:	e7dc      	b.n	8037f54 <_sungetc_r+0x34>

08037f9a <__ssrefill_r>:
 8037f9a:	b510      	push	{r4, lr}
 8037f9c:	460c      	mov	r4, r1
 8037f9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8037fa0:	b169      	cbz	r1, 8037fbe <__ssrefill_r+0x24>
 8037fa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8037fa6:	4299      	cmp	r1, r3
 8037fa8:	d001      	beq.n	8037fae <__ssrefill_r+0x14>
 8037faa:	f7ff fe15 	bl	8037bd8 <_free_r>
 8037fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8037fb0:	6063      	str	r3, [r4, #4]
 8037fb2:	2000      	movs	r0, #0
 8037fb4:	6360      	str	r0, [r4, #52]	; 0x34
 8037fb6:	b113      	cbz	r3, 8037fbe <__ssrefill_r+0x24>
 8037fb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8037fba:	6023      	str	r3, [r4, #0]
 8037fbc:	bd10      	pop	{r4, pc}
 8037fbe:	6923      	ldr	r3, [r4, #16]
 8037fc0:	6023      	str	r3, [r4, #0]
 8037fc2:	2300      	movs	r3, #0
 8037fc4:	6063      	str	r3, [r4, #4]
 8037fc6:	89a3      	ldrh	r3, [r4, #12]
 8037fc8:	f043 0320 	orr.w	r3, r3, #32
 8037fcc:	81a3      	strh	r3, [r4, #12]
 8037fce:	f04f 30ff 	mov.w	r0, #4294967295
 8037fd2:	e7f3      	b.n	8037fbc <__ssrefill_r+0x22>

08037fd4 <__ssvfiscanf_r>:
 8037fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8037fd8:	460c      	mov	r4, r1
 8037fda:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8037fde:	2100      	movs	r1, #0
 8037fe0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8037fe4:	49a6      	ldr	r1, [pc, #664]	; (8038280 <__ssvfiscanf_r+0x2ac>)
 8037fe6:	91a0      	str	r1, [sp, #640]	; 0x280
 8037fe8:	f10d 0804 	add.w	r8, sp, #4
 8037fec:	49a5      	ldr	r1, [pc, #660]	; (8038284 <__ssvfiscanf_r+0x2b0>)
 8037fee:	4fa6      	ldr	r7, [pc, #664]	; (8038288 <__ssvfiscanf_r+0x2b4>)
 8037ff0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 803828c <__ssvfiscanf_r+0x2b8>
 8037ff4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8037ff8:	4606      	mov	r6, r0
 8037ffa:	91a1      	str	r1, [sp, #644]	; 0x284
 8037ffc:	9300      	str	r3, [sp, #0]
 8037ffe:	7813      	ldrb	r3, [r2, #0]
 8038000:	2b00      	cmp	r3, #0
 8038002:	f000 815a 	beq.w	80382ba <__ssvfiscanf_r+0x2e6>
 8038006:	5cf9      	ldrb	r1, [r7, r3]
 8038008:	f011 0108 	ands.w	r1, r1, #8
 803800c:	f102 0501 	add.w	r5, r2, #1
 8038010:	d019      	beq.n	8038046 <__ssvfiscanf_r+0x72>
 8038012:	6863      	ldr	r3, [r4, #4]
 8038014:	2b00      	cmp	r3, #0
 8038016:	dd0f      	ble.n	8038038 <__ssvfiscanf_r+0x64>
 8038018:	6823      	ldr	r3, [r4, #0]
 803801a:	781a      	ldrb	r2, [r3, #0]
 803801c:	5cba      	ldrb	r2, [r7, r2]
 803801e:	0712      	lsls	r2, r2, #28
 8038020:	d401      	bmi.n	8038026 <__ssvfiscanf_r+0x52>
 8038022:	462a      	mov	r2, r5
 8038024:	e7eb      	b.n	8037ffe <__ssvfiscanf_r+0x2a>
 8038026:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8038028:	3201      	adds	r2, #1
 803802a:	9245      	str	r2, [sp, #276]	; 0x114
 803802c:	6862      	ldr	r2, [r4, #4]
 803802e:	3301      	adds	r3, #1
 8038030:	3a01      	subs	r2, #1
 8038032:	6062      	str	r2, [r4, #4]
 8038034:	6023      	str	r3, [r4, #0]
 8038036:	e7ec      	b.n	8038012 <__ssvfiscanf_r+0x3e>
 8038038:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 803803a:	4621      	mov	r1, r4
 803803c:	4630      	mov	r0, r6
 803803e:	4798      	blx	r3
 8038040:	2800      	cmp	r0, #0
 8038042:	d0e9      	beq.n	8038018 <__ssvfiscanf_r+0x44>
 8038044:	e7ed      	b.n	8038022 <__ssvfiscanf_r+0x4e>
 8038046:	2b25      	cmp	r3, #37	; 0x25
 8038048:	d012      	beq.n	8038070 <__ssvfiscanf_r+0x9c>
 803804a:	469a      	mov	sl, r3
 803804c:	6863      	ldr	r3, [r4, #4]
 803804e:	2b00      	cmp	r3, #0
 8038050:	f340 8091 	ble.w	8038176 <__ssvfiscanf_r+0x1a2>
 8038054:	6822      	ldr	r2, [r4, #0]
 8038056:	7813      	ldrb	r3, [r2, #0]
 8038058:	4553      	cmp	r3, sl
 803805a:	f040 812e 	bne.w	80382ba <__ssvfiscanf_r+0x2e6>
 803805e:	6863      	ldr	r3, [r4, #4]
 8038060:	3b01      	subs	r3, #1
 8038062:	6063      	str	r3, [r4, #4]
 8038064:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8038066:	3201      	adds	r2, #1
 8038068:	3301      	adds	r3, #1
 803806a:	6022      	str	r2, [r4, #0]
 803806c:	9345      	str	r3, [sp, #276]	; 0x114
 803806e:	e7d8      	b.n	8038022 <__ssvfiscanf_r+0x4e>
 8038070:	9141      	str	r1, [sp, #260]	; 0x104
 8038072:	9143      	str	r1, [sp, #268]	; 0x10c
 8038074:	7853      	ldrb	r3, [r2, #1]
 8038076:	2b2a      	cmp	r3, #42	; 0x2a
 8038078:	bf02      	ittt	eq
 803807a:	2310      	moveq	r3, #16
 803807c:	1c95      	addeq	r5, r2, #2
 803807e:	9341      	streq	r3, [sp, #260]	; 0x104
 8038080:	220a      	movs	r2, #10
 8038082:	46aa      	mov	sl, r5
 8038084:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8038088:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 803808c:	2b09      	cmp	r3, #9
 803808e:	d91c      	bls.n	80380ca <__ssvfiscanf_r+0xf6>
 8038090:	487e      	ldr	r0, [pc, #504]	; (803828c <__ssvfiscanf_r+0x2b8>)
 8038092:	2203      	movs	r2, #3
 8038094:	f7e8 f8b4 	bl	8020200 <memchr>
 8038098:	b138      	cbz	r0, 80380aa <__ssvfiscanf_r+0xd6>
 803809a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 803809c:	eba0 0009 	sub.w	r0, r0, r9
 80380a0:	2301      	movs	r3, #1
 80380a2:	4083      	lsls	r3, r0
 80380a4:	4313      	orrs	r3, r2
 80380a6:	9341      	str	r3, [sp, #260]	; 0x104
 80380a8:	4655      	mov	r5, sl
 80380aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80380ae:	2b78      	cmp	r3, #120	; 0x78
 80380b0:	d806      	bhi.n	80380c0 <__ssvfiscanf_r+0xec>
 80380b2:	2b57      	cmp	r3, #87	; 0x57
 80380b4:	d810      	bhi.n	80380d8 <__ssvfiscanf_r+0x104>
 80380b6:	2b25      	cmp	r3, #37	; 0x25
 80380b8:	d0c7      	beq.n	803804a <__ssvfiscanf_r+0x76>
 80380ba:	d857      	bhi.n	803816c <__ssvfiscanf_r+0x198>
 80380bc:	2b00      	cmp	r3, #0
 80380be:	d065      	beq.n	803818c <__ssvfiscanf_r+0x1b8>
 80380c0:	2303      	movs	r3, #3
 80380c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80380c4:	230a      	movs	r3, #10
 80380c6:	9342      	str	r3, [sp, #264]	; 0x108
 80380c8:	e076      	b.n	80381b8 <__ssvfiscanf_r+0x1e4>
 80380ca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80380cc:	fb02 1103 	mla	r1, r2, r3, r1
 80380d0:	3930      	subs	r1, #48	; 0x30
 80380d2:	9143      	str	r1, [sp, #268]	; 0x10c
 80380d4:	4655      	mov	r5, sl
 80380d6:	e7d4      	b.n	8038082 <__ssvfiscanf_r+0xae>
 80380d8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80380dc:	2a20      	cmp	r2, #32
 80380de:	d8ef      	bhi.n	80380c0 <__ssvfiscanf_r+0xec>
 80380e0:	a101      	add	r1, pc, #4	; (adr r1, 80380e8 <__ssvfiscanf_r+0x114>)
 80380e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80380e6:	bf00      	nop
 80380e8:	0803819b 	.word	0x0803819b
 80380ec:	080380c1 	.word	0x080380c1
 80380f0:	080380c1 	.word	0x080380c1
 80380f4:	080381f9 	.word	0x080381f9
 80380f8:	080380c1 	.word	0x080380c1
 80380fc:	080380c1 	.word	0x080380c1
 8038100:	080380c1 	.word	0x080380c1
 8038104:	080380c1 	.word	0x080380c1
 8038108:	080380c1 	.word	0x080380c1
 803810c:	080380c1 	.word	0x080380c1
 8038110:	080380c1 	.word	0x080380c1
 8038114:	0803820f 	.word	0x0803820f
 8038118:	080381f5 	.word	0x080381f5
 803811c:	08038173 	.word	0x08038173
 8038120:	08038173 	.word	0x08038173
 8038124:	08038173 	.word	0x08038173
 8038128:	080380c1 	.word	0x080380c1
 803812c:	080381b1 	.word	0x080381b1
 8038130:	080380c1 	.word	0x080380c1
 8038134:	080380c1 	.word	0x080380c1
 8038138:	080380c1 	.word	0x080380c1
 803813c:	080380c1 	.word	0x080380c1
 8038140:	0803821f 	.word	0x0803821f
 8038144:	080381ed 	.word	0x080381ed
 8038148:	08038193 	.word	0x08038193
 803814c:	080380c1 	.word	0x080380c1
 8038150:	080380c1 	.word	0x080380c1
 8038154:	0803821b 	.word	0x0803821b
 8038158:	080380c1 	.word	0x080380c1
 803815c:	080381f5 	.word	0x080381f5
 8038160:	080380c1 	.word	0x080380c1
 8038164:	080380c1 	.word	0x080380c1
 8038168:	0803819b 	.word	0x0803819b
 803816c:	3b45      	subs	r3, #69	; 0x45
 803816e:	2b02      	cmp	r3, #2
 8038170:	d8a6      	bhi.n	80380c0 <__ssvfiscanf_r+0xec>
 8038172:	2305      	movs	r3, #5
 8038174:	e01f      	b.n	80381b6 <__ssvfiscanf_r+0x1e2>
 8038176:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8038178:	4621      	mov	r1, r4
 803817a:	4630      	mov	r0, r6
 803817c:	4798      	blx	r3
 803817e:	2800      	cmp	r0, #0
 8038180:	f43f af68 	beq.w	8038054 <__ssvfiscanf_r+0x80>
 8038184:	9844      	ldr	r0, [sp, #272]	; 0x110
 8038186:	2800      	cmp	r0, #0
 8038188:	f040 808d 	bne.w	80382a6 <__ssvfiscanf_r+0x2d2>
 803818c:	f04f 30ff 	mov.w	r0, #4294967295
 8038190:	e08f      	b.n	80382b2 <__ssvfiscanf_r+0x2de>
 8038192:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8038194:	f042 0220 	orr.w	r2, r2, #32
 8038198:	9241      	str	r2, [sp, #260]	; 0x104
 803819a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 803819c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80381a0:	9241      	str	r2, [sp, #260]	; 0x104
 80381a2:	2210      	movs	r2, #16
 80381a4:	2b6f      	cmp	r3, #111	; 0x6f
 80381a6:	9242      	str	r2, [sp, #264]	; 0x108
 80381a8:	bf34      	ite	cc
 80381aa:	2303      	movcc	r3, #3
 80381ac:	2304      	movcs	r3, #4
 80381ae:	e002      	b.n	80381b6 <__ssvfiscanf_r+0x1e2>
 80381b0:	2300      	movs	r3, #0
 80381b2:	9342      	str	r3, [sp, #264]	; 0x108
 80381b4:	2303      	movs	r3, #3
 80381b6:	9347      	str	r3, [sp, #284]	; 0x11c
 80381b8:	6863      	ldr	r3, [r4, #4]
 80381ba:	2b00      	cmp	r3, #0
 80381bc:	dd3d      	ble.n	803823a <__ssvfiscanf_r+0x266>
 80381be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80381c0:	0659      	lsls	r1, r3, #25
 80381c2:	d404      	bmi.n	80381ce <__ssvfiscanf_r+0x1fa>
 80381c4:	6823      	ldr	r3, [r4, #0]
 80381c6:	781a      	ldrb	r2, [r3, #0]
 80381c8:	5cba      	ldrb	r2, [r7, r2]
 80381ca:	0712      	lsls	r2, r2, #28
 80381cc:	d43c      	bmi.n	8038248 <__ssvfiscanf_r+0x274>
 80381ce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80381d0:	2b02      	cmp	r3, #2
 80381d2:	dc4b      	bgt.n	803826c <__ssvfiscanf_r+0x298>
 80381d4:	466b      	mov	r3, sp
 80381d6:	4622      	mov	r2, r4
 80381d8:	a941      	add	r1, sp, #260	; 0x104
 80381da:	4630      	mov	r0, r6
 80381dc:	f000 fb46 	bl	803886c <_scanf_chars>
 80381e0:	2801      	cmp	r0, #1
 80381e2:	d06a      	beq.n	80382ba <__ssvfiscanf_r+0x2e6>
 80381e4:	2802      	cmp	r0, #2
 80381e6:	f47f af1c 	bne.w	8038022 <__ssvfiscanf_r+0x4e>
 80381ea:	e7cb      	b.n	8038184 <__ssvfiscanf_r+0x1b0>
 80381ec:	2308      	movs	r3, #8
 80381ee:	9342      	str	r3, [sp, #264]	; 0x108
 80381f0:	2304      	movs	r3, #4
 80381f2:	e7e0      	b.n	80381b6 <__ssvfiscanf_r+0x1e2>
 80381f4:	220a      	movs	r2, #10
 80381f6:	e7d5      	b.n	80381a4 <__ssvfiscanf_r+0x1d0>
 80381f8:	4629      	mov	r1, r5
 80381fa:	4640      	mov	r0, r8
 80381fc:	f000 fe1d 	bl	8038e3a <__sccl>
 8038200:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8038202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8038206:	9341      	str	r3, [sp, #260]	; 0x104
 8038208:	4605      	mov	r5, r0
 803820a:	2301      	movs	r3, #1
 803820c:	e7d3      	b.n	80381b6 <__ssvfiscanf_r+0x1e2>
 803820e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8038210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8038214:	9341      	str	r3, [sp, #260]	; 0x104
 8038216:	2300      	movs	r3, #0
 8038218:	e7cd      	b.n	80381b6 <__ssvfiscanf_r+0x1e2>
 803821a:	2302      	movs	r3, #2
 803821c:	e7cb      	b.n	80381b6 <__ssvfiscanf_r+0x1e2>
 803821e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8038220:	06c3      	lsls	r3, r0, #27
 8038222:	f53f aefe 	bmi.w	8038022 <__ssvfiscanf_r+0x4e>
 8038226:	9b00      	ldr	r3, [sp, #0]
 8038228:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803822a:	1d19      	adds	r1, r3, #4
 803822c:	9100      	str	r1, [sp, #0]
 803822e:	681b      	ldr	r3, [r3, #0]
 8038230:	07c0      	lsls	r0, r0, #31
 8038232:	bf4c      	ite	mi
 8038234:	801a      	strhmi	r2, [r3, #0]
 8038236:	601a      	strpl	r2, [r3, #0]
 8038238:	e6f3      	b.n	8038022 <__ssvfiscanf_r+0x4e>
 803823a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 803823c:	4621      	mov	r1, r4
 803823e:	4630      	mov	r0, r6
 8038240:	4798      	blx	r3
 8038242:	2800      	cmp	r0, #0
 8038244:	d0bb      	beq.n	80381be <__ssvfiscanf_r+0x1ea>
 8038246:	e79d      	b.n	8038184 <__ssvfiscanf_r+0x1b0>
 8038248:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803824a:	3201      	adds	r2, #1
 803824c:	9245      	str	r2, [sp, #276]	; 0x114
 803824e:	6862      	ldr	r2, [r4, #4]
 8038250:	3a01      	subs	r2, #1
 8038252:	2a00      	cmp	r2, #0
 8038254:	6062      	str	r2, [r4, #4]
 8038256:	dd02      	ble.n	803825e <__ssvfiscanf_r+0x28a>
 8038258:	3301      	adds	r3, #1
 803825a:	6023      	str	r3, [r4, #0]
 803825c:	e7b2      	b.n	80381c4 <__ssvfiscanf_r+0x1f0>
 803825e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8038260:	4621      	mov	r1, r4
 8038262:	4630      	mov	r0, r6
 8038264:	4798      	blx	r3
 8038266:	2800      	cmp	r0, #0
 8038268:	d0ac      	beq.n	80381c4 <__ssvfiscanf_r+0x1f0>
 803826a:	e78b      	b.n	8038184 <__ssvfiscanf_r+0x1b0>
 803826c:	2b04      	cmp	r3, #4
 803826e:	dc0f      	bgt.n	8038290 <__ssvfiscanf_r+0x2bc>
 8038270:	466b      	mov	r3, sp
 8038272:	4622      	mov	r2, r4
 8038274:	a941      	add	r1, sp, #260	; 0x104
 8038276:	4630      	mov	r0, r6
 8038278:	f000 fb52 	bl	8038920 <_scanf_i>
 803827c:	e7b0      	b.n	80381e0 <__ssvfiscanf_r+0x20c>
 803827e:	bf00      	nop
 8038280:	08037f21 	.word	0x08037f21
 8038284:	08037f9b 	.word	0x08037f9b
 8038288:	08047c08 	.word	0x08047c08
 803828c:	08047d4a 	.word	0x08047d4a
 8038290:	4b0b      	ldr	r3, [pc, #44]	; (80382c0 <__ssvfiscanf_r+0x2ec>)
 8038292:	2b00      	cmp	r3, #0
 8038294:	f43f aec5 	beq.w	8038022 <__ssvfiscanf_r+0x4e>
 8038298:	466b      	mov	r3, sp
 803829a:	4622      	mov	r2, r4
 803829c:	a941      	add	r1, sp, #260	; 0x104
 803829e:	4630      	mov	r0, r6
 80382a0:	f3af 8000 	nop.w
 80382a4:	e79c      	b.n	80381e0 <__ssvfiscanf_r+0x20c>
 80382a6:	89a3      	ldrh	r3, [r4, #12]
 80382a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80382ac:	bf18      	it	ne
 80382ae:	f04f 30ff 	movne.w	r0, #4294967295
 80382b2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80382b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80382ba:	9844      	ldr	r0, [sp, #272]	; 0x110
 80382bc:	e7f9      	b.n	80382b2 <__ssvfiscanf_r+0x2de>
 80382be:	bf00      	nop
 80382c0:	00000000 	.word	0x00000000

080382c4 <__sfputc_r>:
 80382c4:	6893      	ldr	r3, [r2, #8]
 80382c6:	3b01      	subs	r3, #1
 80382c8:	2b00      	cmp	r3, #0
 80382ca:	b410      	push	{r4}
 80382cc:	6093      	str	r3, [r2, #8]
 80382ce:	da08      	bge.n	80382e2 <__sfputc_r+0x1e>
 80382d0:	6994      	ldr	r4, [r2, #24]
 80382d2:	42a3      	cmp	r3, r4
 80382d4:	db01      	blt.n	80382da <__sfputc_r+0x16>
 80382d6:	290a      	cmp	r1, #10
 80382d8:	d103      	bne.n	80382e2 <__sfputc_r+0x1e>
 80382da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80382de:	f7ff ba9c 	b.w	803781a <__swbuf_r>
 80382e2:	6813      	ldr	r3, [r2, #0]
 80382e4:	1c58      	adds	r0, r3, #1
 80382e6:	6010      	str	r0, [r2, #0]
 80382e8:	7019      	strb	r1, [r3, #0]
 80382ea:	4608      	mov	r0, r1
 80382ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80382f0:	4770      	bx	lr

080382f2 <__sfputs_r>:
 80382f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80382f4:	4606      	mov	r6, r0
 80382f6:	460f      	mov	r7, r1
 80382f8:	4614      	mov	r4, r2
 80382fa:	18d5      	adds	r5, r2, r3
 80382fc:	42ac      	cmp	r4, r5
 80382fe:	d101      	bne.n	8038304 <__sfputs_r+0x12>
 8038300:	2000      	movs	r0, #0
 8038302:	e007      	b.n	8038314 <__sfputs_r+0x22>
 8038304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8038308:	463a      	mov	r2, r7
 803830a:	4630      	mov	r0, r6
 803830c:	f7ff ffda 	bl	80382c4 <__sfputc_r>
 8038310:	1c43      	adds	r3, r0, #1
 8038312:	d1f3      	bne.n	80382fc <__sfputs_r+0xa>
 8038314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08038318 <_vfiprintf_r>:
 8038318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803831c:	460d      	mov	r5, r1
 803831e:	b09d      	sub	sp, #116	; 0x74
 8038320:	4614      	mov	r4, r2
 8038322:	4698      	mov	r8, r3
 8038324:	4606      	mov	r6, r0
 8038326:	b118      	cbz	r0, 8038330 <_vfiprintf_r+0x18>
 8038328:	6a03      	ldr	r3, [r0, #32]
 803832a:	b90b      	cbnz	r3, 8038330 <_vfiprintf_r+0x18>
 803832c:	f7ff f87a 	bl	8037424 <__sinit>
 8038330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8038332:	07d9      	lsls	r1, r3, #31
 8038334:	d405      	bmi.n	8038342 <_vfiprintf_r+0x2a>
 8038336:	89ab      	ldrh	r3, [r5, #12]
 8038338:	059a      	lsls	r2, r3, #22
 803833a:	d402      	bmi.n	8038342 <_vfiprintf_r+0x2a>
 803833c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803833e:	f7ff fc15 	bl	8037b6c <__retarget_lock_acquire_recursive>
 8038342:	89ab      	ldrh	r3, [r5, #12]
 8038344:	071b      	lsls	r3, r3, #28
 8038346:	d501      	bpl.n	803834c <_vfiprintf_r+0x34>
 8038348:	692b      	ldr	r3, [r5, #16]
 803834a:	b99b      	cbnz	r3, 8038374 <_vfiprintf_r+0x5c>
 803834c:	4629      	mov	r1, r5
 803834e:	4630      	mov	r0, r6
 8038350:	f7ff faa0 	bl	8037894 <__swsetup_r>
 8038354:	b170      	cbz	r0, 8038374 <_vfiprintf_r+0x5c>
 8038356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8038358:	07dc      	lsls	r4, r3, #31
 803835a:	d504      	bpl.n	8038366 <_vfiprintf_r+0x4e>
 803835c:	f04f 30ff 	mov.w	r0, #4294967295
 8038360:	b01d      	add	sp, #116	; 0x74
 8038362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8038366:	89ab      	ldrh	r3, [r5, #12]
 8038368:	0598      	lsls	r0, r3, #22
 803836a:	d4f7      	bmi.n	803835c <_vfiprintf_r+0x44>
 803836c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803836e:	f7ff fbfe 	bl	8037b6e <__retarget_lock_release_recursive>
 8038372:	e7f3      	b.n	803835c <_vfiprintf_r+0x44>
 8038374:	2300      	movs	r3, #0
 8038376:	9309      	str	r3, [sp, #36]	; 0x24
 8038378:	2320      	movs	r3, #32
 803837a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803837e:	f8cd 800c 	str.w	r8, [sp, #12]
 8038382:	2330      	movs	r3, #48	; 0x30
 8038384:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8038538 <_vfiprintf_r+0x220>
 8038388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803838c:	f04f 0901 	mov.w	r9, #1
 8038390:	4623      	mov	r3, r4
 8038392:	469a      	mov	sl, r3
 8038394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8038398:	b10a      	cbz	r2, 803839e <_vfiprintf_r+0x86>
 803839a:	2a25      	cmp	r2, #37	; 0x25
 803839c:	d1f9      	bne.n	8038392 <_vfiprintf_r+0x7a>
 803839e:	ebba 0b04 	subs.w	fp, sl, r4
 80383a2:	d00b      	beq.n	80383bc <_vfiprintf_r+0xa4>
 80383a4:	465b      	mov	r3, fp
 80383a6:	4622      	mov	r2, r4
 80383a8:	4629      	mov	r1, r5
 80383aa:	4630      	mov	r0, r6
 80383ac:	f7ff ffa1 	bl	80382f2 <__sfputs_r>
 80383b0:	3001      	adds	r0, #1
 80383b2:	f000 80a9 	beq.w	8038508 <_vfiprintf_r+0x1f0>
 80383b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80383b8:	445a      	add	r2, fp
 80383ba:	9209      	str	r2, [sp, #36]	; 0x24
 80383bc:	f89a 3000 	ldrb.w	r3, [sl]
 80383c0:	2b00      	cmp	r3, #0
 80383c2:	f000 80a1 	beq.w	8038508 <_vfiprintf_r+0x1f0>
 80383c6:	2300      	movs	r3, #0
 80383c8:	f04f 32ff 	mov.w	r2, #4294967295
 80383cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80383d0:	f10a 0a01 	add.w	sl, sl, #1
 80383d4:	9304      	str	r3, [sp, #16]
 80383d6:	9307      	str	r3, [sp, #28]
 80383d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80383dc:	931a      	str	r3, [sp, #104]	; 0x68
 80383de:	4654      	mov	r4, sl
 80383e0:	2205      	movs	r2, #5
 80383e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80383e6:	4854      	ldr	r0, [pc, #336]	; (8038538 <_vfiprintf_r+0x220>)
 80383e8:	f7e7 ff0a 	bl	8020200 <memchr>
 80383ec:	9a04      	ldr	r2, [sp, #16]
 80383ee:	b9d8      	cbnz	r0, 8038428 <_vfiprintf_r+0x110>
 80383f0:	06d1      	lsls	r1, r2, #27
 80383f2:	bf44      	itt	mi
 80383f4:	2320      	movmi	r3, #32
 80383f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80383fa:	0713      	lsls	r3, r2, #28
 80383fc:	bf44      	itt	mi
 80383fe:	232b      	movmi	r3, #43	; 0x2b
 8038400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8038404:	f89a 3000 	ldrb.w	r3, [sl]
 8038408:	2b2a      	cmp	r3, #42	; 0x2a
 803840a:	d015      	beq.n	8038438 <_vfiprintf_r+0x120>
 803840c:	9a07      	ldr	r2, [sp, #28]
 803840e:	4654      	mov	r4, sl
 8038410:	2000      	movs	r0, #0
 8038412:	f04f 0c0a 	mov.w	ip, #10
 8038416:	4621      	mov	r1, r4
 8038418:	f811 3b01 	ldrb.w	r3, [r1], #1
 803841c:	3b30      	subs	r3, #48	; 0x30
 803841e:	2b09      	cmp	r3, #9
 8038420:	d94d      	bls.n	80384be <_vfiprintf_r+0x1a6>
 8038422:	b1b0      	cbz	r0, 8038452 <_vfiprintf_r+0x13a>
 8038424:	9207      	str	r2, [sp, #28]
 8038426:	e014      	b.n	8038452 <_vfiprintf_r+0x13a>
 8038428:	eba0 0308 	sub.w	r3, r0, r8
 803842c:	fa09 f303 	lsl.w	r3, r9, r3
 8038430:	4313      	orrs	r3, r2
 8038432:	9304      	str	r3, [sp, #16]
 8038434:	46a2      	mov	sl, r4
 8038436:	e7d2      	b.n	80383de <_vfiprintf_r+0xc6>
 8038438:	9b03      	ldr	r3, [sp, #12]
 803843a:	1d19      	adds	r1, r3, #4
 803843c:	681b      	ldr	r3, [r3, #0]
 803843e:	9103      	str	r1, [sp, #12]
 8038440:	2b00      	cmp	r3, #0
 8038442:	bfbb      	ittet	lt
 8038444:	425b      	neglt	r3, r3
 8038446:	f042 0202 	orrlt.w	r2, r2, #2
 803844a:	9307      	strge	r3, [sp, #28]
 803844c:	9307      	strlt	r3, [sp, #28]
 803844e:	bfb8      	it	lt
 8038450:	9204      	strlt	r2, [sp, #16]
 8038452:	7823      	ldrb	r3, [r4, #0]
 8038454:	2b2e      	cmp	r3, #46	; 0x2e
 8038456:	d10c      	bne.n	8038472 <_vfiprintf_r+0x15a>
 8038458:	7863      	ldrb	r3, [r4, #1]
 803845a:	2b2a      	cmp	r3, #42	; 0x2a
 803845c:	d134      	bne.n	80384c8 <_vfiprintf_r+0x1b0>
 803845e:	9b03      	ldr	r3, [sp, #12]
 8038460:	1d1a      	adds	r2, r3, #4
 8038462:	681b      	ldr	r3, [r3, #0]
 8038464:	9203      	str	r2, [sp, #12]
 8038466:	2b00      	cmp	r3, #0
 8038468:	bfb8      	it	lt
 803846a:	f04f 33ff 	movlt.w	r3, #4294967295
 803846e:	3402      	adds	r4, #2
 8038470:	9305      	str	r3, [sp, #20]
 8038472:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8038548 <_vfiprintf_r+0x230>
 8038476:	7821      	ldrb	r1, [r4, #0]
 8038478:	2203      	movs	r2, #3
 803847a:	4650      	mov	r0, sl
 803847c:	f7e7 fec0 	bl	8020200 <memchr>
 8038480:	b138      	cbz	r0, 8038492 <_vfiprintf_r+0x17a>
 8038482:	9b04      	ldr	r3, [sp, #16]
 8038484:	eba0 000a 	sub.w	r0, r0, sl
 8038488:	2240      	movs	r2, #64	; 0x40
 803848a:	4082      	lsls	r2, r0
 803848c:	4313      	orrs	r3, r2
 803848e:	3401      	adds	r4, #1
 8038490:	9304      	str	r3, [sp, #16]
 8038492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8038496:	4829      	ldr	r0, [pc, #164]	; (803853c <_vfiprintf_r+0x224>)
 8038498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803849c:	2206      	movs	r2, #6
 803849e:	f7e7 feaf 	bl	8020200 <memchr>
 80384a2:	2800      	cmp	r0, #0
 80384a4:	d03f      	beq.n	8038526 <_vfiprintf_r+0x20e>
 80384a6:	4b26      	ldr	r3, [pc, #152]	; (8038540 <_vfiprintf_r+0x228>)
 80384a8:	bb1b      	cbnz	r3, 80384f2 <_vfiprintf_r+0x1da>
 80384aa:	9b03      	ldr	r3, [sp, #12]
 80384ac:	3307      	adds	r3, #7
 80384ae:	f023 0307 	bic.w	r3, r3, #7
 80384b2:	3308      	adds	r3, #8
 80384b4:	9303      	str	r3, [sp, #12]
 80384b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80384b8:	443b      	add	r3, r7
 80384ba:	9309      	str	r3, [sp, #36]	; 0x24
 80384bc:	e768      	b.n	8038390 <_vfiprintf_r+0x78>
 80384be:	fb0c 3202 	mla	r2, ip, r2, r3
 80384c2:	460c      	mov	r4, r1
 80384c4:	2001      	movs	r0, #1
 80384c6:	e7a6      	b.n	8038416 <_vfiprintf_r+0xfe>
 80384c8:	2300      	movs	r3, #0
 80384ca:	3401      	adds	r4, #1
 80384cc:	9305      	str	r3, [sp, #20]
 80384ce:	4619      	mov	r1, r3
 80384d0:	f04f 0c0a 	mov.w	ip, #10
 80384d4:	4620      	mov	r0, r4
 80384d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80384da:	3a30      	subs	r2, #48	; 0x30
 80384dc:	2a09      	cmp	r2, #9
 80384de:	d903      	bls.n	80384e8 <_vfiprintf_r+0x1d0>
 80384e0:	2b00      	cmp	r3, #0
 80384e2:	d0c6      	beq.n	8038472 <_vfiprintf_r+0x15a>
 80384e4:	9105      	str	r1, [sp, #20]
 80384e6:	e7c4      	b.n	8038472 <_vfiprintf_r+0x15a>
 80384e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80384ec:	4604      	mov	r4, r0
 80384ee:	2301      	movs	r3, #1
 80384f0:	e7f0      	b.n	80384d4 <_vfiprintf_r+0x1bc>
 80384f2:	ab03      	add	r3, sp, #12
 80384f4:	9300      	str	r3, [sp, #0]
 80384f6:	462a      	mov	r2, r5
 80384f8:	4b12      	ldr	r3, [pc, #72]	; (8038544 <_vfiprintf_r+0x22c>)
 80384fa:	a904      	add	r1, sp, #16
 80384fc:	4630      	mov	r0, r6
 80384fe:	f3af 8000 	nop.w
 8038502:	4607      	mov	r7, r0
 8038504:	1c78      	adds	r0, r7, #1
 8038506:	d1d6      	bne.n	80384b6 <_vfiprintf_r+0x19e>
 8038508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803850a:	07d9      	lsls	r1, r3, #31
 803850c:	d405      	bmi.n	803851a <_vfiprintf_r+0x202>
 803850e:	89ab      	ldrh	r3, [r5, #12]
 8038510:	059a      	lsls	r2, r3, #22
 8038512:	d402      	bmi.n	803851a <_vfiprintf_r+0x202>
 8038514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8038516:	f7ff fb2a 	bl	8037b6e <__retarget_lock_release_recursive>
 803851a:	89ab      	ldrh	r3, [r5, #12]
 803851c:	065b      	lsls	r3, r3, #25
 803851e:	f53f af1d 	bmi.w	803835c <_vfiprintf_r+0x44>
 8038522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8038524:	e71c      	b.n	8038360 <_vfiprintf_r+0x48>
 8038526:	ab03      	add	r3, sp, #12
 8038528:	9300      	str	r3, [sp, #0]
 803852a:	462a      	mov	r2, r5
 803852c:	4b05      	ldr	r3, [pc, #20]	; (8038544 <_vfiprintf_r+0x22c>)
 803852e:	a904      	add	r1, sp, #16
 8038530:	4630      	mov	r0, r6
 8038532:	f000 f879 	bl	8038628 <_printf_i>
 8038536:	e7e4      	b.n	8038502 <_vfiprintf_r+0x1ea>
 8038538:	08047d44 	.word	0x08047d44
 803853c:	08047d4e 	.word	0x08047d4e
 8038540:	00000000 	.word	0x00000000
 8038544:	080382f3 	.word	0x080382f3
 8038548:	08047d4a 	.word	0x08047d4a

0803854c <_printf_common>:
 803854c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8038550:	4616      	mov	r6, r2
 8038552:	4699      	mov	r9, r3
 8038554:	688a      	ldr	r2, [r1, #8]
 8038556:	690b      	ldr	r3, [r1, #16]
 8038558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803855c:	4293      	cmp	r3, r2
 803855e:	bfb8      	it	lt
 8038560:	4613      	movlt	r3, r2
 8038562:	6033      	str	r3, [r6, #0]
 8038564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8038568:	4607      	mov	r7, r0
 803856a:	460c      	mov	r4, r1
 803856c:	b10a      	cbz	r2, 8038572 <_printf_common+0x26>
 803856e:	3301      	adds	r3, #1
 8038570:	6033      	str	r3, [r6, #0]
 8038572:	6823      	ldr	r3, [r4, #0]
 8038574:	0699      	lsls	r1, r3, #26
 8038576:	bf42      	ittt	mi
 8038578:	6833      	ldrmi	r3, [r6, #0]
 803857a:	3302      	addmi	r3, #2
 803857c:	6033      	strmi	r3, [r6, #0]
 803857e:	6825      	ldr	r5, [r4, #0]
 8038580:	f015 0506 	ands.w	r5, r5, #6
 8038584:	d106      	bne.n	8038594 <_printf_common+0x48>
 8038586:	f104 0a19 	add.w	sl, r4, #25
 803858a:	68e3      	ldr	r3, [r4, #12]
 803858c:	6832      	ldr	r2, [r6, #0]
 803858e:	1a9b      	subs	r3, r3, r2
 8038590:	42ab      	cmp	r3, r5
 8038592:	dc26      	bgt.n	80385e2 <_printf_common+0x96>
 8038594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8038598:	1e13      	subs	r3, r2, #0
 803859a:	6822      	ldr	r2, [r4, #0]
 803859c:	bf18      	it	ne
 803859e:	2301      	movne	r3, #1
 80385a0:	0692      	lsls	r2, r2, #26
 80385a2:	d42b      	bmi.n	80385fc <_printf_common+0xb0>
 80385a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80385a8:	4649      	mov	r1, r9
 80385aa:	4638      	mov	r0, r7
 80385ac:	47c0      	blx	r8
 80385ae:	3001      	adds	r0, #1
 80385b0:	d01e      	beq.n	80385f0 <_printf_common+0xa4>
 80385b2:	6823      	ldr	r3, [r4, #0]
 80385b4:	6922      	ldr	r2, [r4, #16]
 80385b6:	f003 0306 	and.w	r3, r3, #6
 80385ba:	2b04      	cmp	r3, #4
 80385bc:	bf02      	ittt	eq
 80385be:	68e5      	ldreq	r5, [r4, #12]
 80385c0:	6833      	ldreq	r3, [r6, #0]
 80385c2:	1aed      	subeq	r5, r5, r3
 80385c4:	68a3      	ldr	r3, [r4, #8]
 80385c6:	bf0c      	ite	eq
 80385c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80385cc:	2500      	movne	r5, #0
 80385ce:	4293      	cmp	r3, r2
 80385d0:	bfc4      	itt	gt
 80385d2:	1a9b      	subgt	r3, r3, r2
 80385d4:	18ed      	addgt	r5, r5, r3
 80385d6:	2600      	movs	r6, #0
 80385d8:	341a      	adds	r4, #26
 80385da:	42b5      	cmp	r5, r6
 80385dc:	d11a      	bne.n	8038614 <_printf_common+0xc8>
 80385de:	2000      	movs	r0, #0
 80385e0:	e008      	b.n	80385f4 <_printf_common+0xa8>
 80385e2:	2301      	movs	r3, #1
 80385e4:	4652      	mov	r2, sl
 80385e6:	4649      	mov	r1, r9
 80385e8:	4638      	mov	r0, r7
 80385ea:	47c0      	blx	r8
 80385ec:	3001      	adds	r0, #1
 80385ee:	d103      	bne.n	80385f8 <_printf_common+0xac>
 80385f0:	f04f 30ff 	mov.w	r0, #4294967295
 80385f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80385f8:	3501      	adds	r5, #1
 80385fa:	e7c6      	b.n	803858a <_printf_common+0x3e>
 80385fc:	18e1      	adds	r1, r4, r3
 80385fe:	1c5a      	adds	r2, r3, #1
 8038600:	2030      	movs	r0, #48	; 0x30
 8038602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8038606:	4422      	add	r2, r4
 8038608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803860c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8038610:	3302      	adds	r3, #2
 8038612:	e7c7      	b.n	80385a4 <_printf_common+0x58>
 8038614:	2301      	movs	r3, #1
 8038616:	4622      	mov	r2, r4
 8038618:	4649      	mov	r1, r9
 803861a:	4638      	mov	r0, r7
 803861c:	47c0      	blx	r8
 803861e:	3001      	adds	r0, #1
 8038620:	d0e6      	beq.n	80385f0 <_printf_common+0xa4>
 8038622:	3601      	adds	r6, #1
 8038624:	e7d9      	b.n	80385da <_printf_common+0x8e>
	...

08038628 <_printf_i>:
 8038628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803862c:	7e0f      	ldrb	r7, [r1, #24]
 803862e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8038630:	2f78      	cmp	r7, #120	; 0x78
 8038632:	4691      	mov	r9, r2
 8038634:	4680      	mov	r8, r0
 8038636:	460c      	mov	r4, r1
 8038638:	469a      	mov	sl, r3
 803863a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803863e:	d807      	bhi.n	8038650 <_printf_i+0x28>
 8038640:	2f62      	cmp	r7, #98	; 0x62
 8038642:	d80a      	bhi.n	803865a <_printf_i+0x32>
 8038644:	2f00      	cmp	r7, #0
 8038646:	f000 80d4 	beq.w	80387f2 <_printf_i+0x1ca>
 803864a:	2f58      	cmp	r7, #88	; 0x58
 803864c:	f000 80c0 	beq.w	80387d0 <_printf_i+0x1a8>
 8038650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8038654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8038658:	e03a      	b.n	80386d0 <_printf_i+0xa8>
 803865a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803865e:	2b15      	cmp	r3, #21
 8038660:	d8f6      	bhi.n	8038650 <_printf_i+0x28>
 8038662:	a101      	add	r1, pc, #4	; (adr r1, 8038668 <_printf_i+0x40>)
 8038664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8038668:	080386c1 	.word	0x080386c1
 803866c:	080386d5 	.word	0x080386d5
 8038670:	08038651 	.word	0x08038651
 8038674:	08038651 	.word	0x08038651
 8038678:	08038651 	.word	0x08038651
 803867c:	08038651 	.word	0x08038651
 8038680:	080386d5 	.word	0x080386d5
 8038684:	08038651 	.word	0x08038651
 8038688:	08038651 	.word	0x08038651
 803868c:	08038651 	.word	0x08038651
 8038690:	08038651 	.word	0x08038651
 8038694:	080387d9 	.word	0x080387d9
 8038698:	08038701 	.word	0x08038701
 803869c:	08038793 	.word	0x08038793
 80386a0:	08038651 	.word	0x08038651
 80386a4:	08038651 	.word	0x08038651
 80386a8:	080387fb 	.word	0x080387fb
 80386ac:	08038651 	.word	0x08038651
 80386b0:	08038701 	.word	0x08038701
 80386b4:	08038651 	.word	0x08038651
 80386b8:	08038651 	.word	0x08038651
 80386bc:	0803879b 	.word	0x0803879b
 80386c0:	682b      	ldr	r3, [r5, #0]
 80386c2:	1d1a      	adds	r2, r3, #4
 80386c4:	681b      	ldr	r3, [r3, #0]
 80386c6:	602a      	str	r2, [r5, #0]
 80386c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80386cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80386d0:	2301      	movs	r3, #1
 80386d2:	e09f      	b.n	8038814 <_printf_i+0x1ec>
 80386d4:	6820      	ldr	r0, [r4, #0]
 80386d6:	682b      	ldr	r3, [r5, #0]
 80386d8:	0607      	lsls	r7, r0, #24
 80386da:	f103 0104 	add.w	r1, r3, #4
 80386de:	6029      	str	r1, [r5, #0]
 80386e0:	d501      	bpl.n	80386e6 <_printf_i+0xbe>
 80386e2:	681e      	ldr	r6, [r3, #0]
 80386e4:	e003      	b.n	80386ee <_printf_i+0xc6>
 80386e6:	0646      	lsls	r6, r0, #25
 80386e8:	d5fb      	bpl.n	80386e2 <_printf_i+0xba>
 80386ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80386ee:	2e00      	cmp	r6, #0
 80386f0:	da03      	bge.n	80386fa <_printf_i+0xd2>
 80386f2:	232d      	movs	r3, #45	; 0x2d
 80386f4:	4276      	negs	r6, r6
 80386f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80386fa:	485a      	ldr	r0, [pc, #360]	; (8038864 <_printf_i+0x23c>)
 80386fc:	230a      	movs	r3, #10
 80386fe:	e012      	b.n	8038726 <_printf_i+0xfe>
 8038700:	682b      	ldr	r3, [r5, #0]
 8038702:	6820      	ldr	r0, [r4, #0]
 8038704:	1d19      	adds	r1, r3, #4
 8038706:	6029      	str	r1, [r5, #0]
 8038708:	0605      	lsls	r5, r0, #24
 803870a:	d501      	bpl.n	8038710 <_printf_i+0xe8>
 803870c:	681e      	ldr	r6, [r3, #0]
 803870e:	e002      	b.n	8038716 <_printf_i+0xee>
 8038710:	0641      	lsls	r1, r0, #25
 8038712:	d5fb      	bpl.n	803870c <_printf_i+0xe4>
 8038714:	881e      	ldrh	r6, [r3, #0]
 8038716:	4853      	ldr	r0, [pc, #332]	; (8038864 <_printf_i+0x23c>)
 8038718:	2f6f      	cmp	r7, #111	; 0x6f
 803871a:	bf0c      	ite	eq
 803871c:	2308      	moveq	r3, #8
 803871e:	230a      	movne	r3, #10
 8038720:	2100      	movs	r1, #0
 8038722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8038726:	6865      	ldr	r5, [r4, #4]
 8038728:	60a5      	str	r5, [r4, #8]
 803872a:	2d00      	cmp	r5, #0
 803872c:	bfa2      	ittt	ge
 803872e:	6821      	ldrge	r1, [r4, #0]
 8038730:	f021 0104 	bicge.w	r1, r1, #4
 8038734:	6021      	strge	r1, [r4, #0]
 8038736:	b90e      	cbnz	r6, 803873c <_printf_i+0x114>
 8038738:	2d00      	cmp	r5, #0
 803873a:	d04b      	beq.n	80387d4 <_printf_i+0x1ac>
 803873c:	4615      	mov	r5, r2
 803873e:	fbb6 f1f3 	udiv	r1, r6, r3
 8038742:	fb03 6711 	mls	r7, r3, r1, r6
 8038746:	5dc7      	ldrb	r7, [r0, r7]
 8038748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803874c:	4637      	mov	r7, r6
 803874e:	42bb      	cmp	r3, r7
 8038750:	460e      	mov	r6, r1
 8038752:	d9f4      	bls.n	803873e <_printf_i+0x116>
 8038754:	2b08      	cmp	r3, #8
 8038756:	d10b      	bne.n	8038770 <_printf_i+0x148>
 8038758:	6823      	ldr	r3, [r4, #0]
 803875a:	07de      	lsls	r6, r3, #31
 803875c:	d508      	bpl.n	8038770 <_printf_i+0x148>
 803875e:	6923      	ldr	r3, [r4, #16]
 8038760:	6861      	ldr	r1, [r4, #4]
 8038762:	4299      	cmp	r1, r3
 8038764:	bfde      	ittt	le
 8038766:	2330      	movle	r3, #48	; 0x30
 8038768:	f805 3c01 	strble.w	r3, [r5, #-1]
 803876c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8038770:	1b52      	subs	r2, r2, r5
 8038772:	6122      	str	r2, [r4, #16]
 8038774:	f8cd a000 	str.w	sl, [sp]
 8038778:	464b      	mov	r3, r9
 803877a:	aa03      	add	r2, sp, #12
 803877c:	4621      	mov	r1, r4
 803877e:	4640      	mov	r0, r8
 8038780:	f7ff fee4 	bl	803854c <_printf_common>
 8038784:	3001      	adds	r0, #1
 8038786:	d14a      	bne.n	803881e <_printf_i+0x1f6>
 8038788:	f04f 30ff 	mov.w	r0, #4294967295
 803878c:	b004      	add	sp, #16
 803878e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8038792:	6823      	ldr	r3, [r4, #0]
 8038794:	f043 0320 	orr.w	r3, r3, #32
 8038798:	6023      	str	r3, [r4, #0]
 803879a:	4833      	ldr	r0, [pc, #204]	; (8038868 <_printf_i+0x240>)
 803879c:	2778      	movs	r7, #120	; 0x78
 803879e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80387a2:	6823      	ldr	r3, [r4, #0]
 80387a4:	6829      	ldr	r1, [r5, #0]
 80387a6:	061f      	lsls	r7, r3, #24
 80387a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80387ac:	d402      	bmi.n	80387b4 <_printf_i+0x18c>
 80387ae:	065f      	lsls	r7, r3, #25
 80387b0:	bf48      	it	mi
 80387b2:	b2b6      	uxthmi	r6, r6
 80387b4:	07df      	lsls	r7, r3, #31
 80387b6:	bf48      	it	mi
 80387b8:	f043 0320 	orrmi.w	r3, r3, #32
 80387bc:	6029      	str	r1, [r5, #0]
 80387be:	bf48      	it	mi
 80387c0:	6023      	strmi	r3, [r4, #0]
 80387c2:	b91e      	cbnz	r6, 80387cc <_printf_i+0x1a4>
 80387c4:	6823      	ldr	r3, [r4, #0]
 80387c6:	f023 0320 	bic.w	r3, r3, #32
 80387ca:	6023      	str	r3, [r4, #0]
 80387cc:	2310      	movs	r3, #16
 80387ce:	e7a7      	b.n	8038720 <_printf_i+0xf8>
 80387d0:	4824      	ldr	r0, [pc, #144]	; (8038864 <_printf_i+0x23c>)
 80387d2:	e7e4      	b.n	803879e <_printf_i+0x176>
 80387d4:	4615      	mov	r5, r2
 80387d6:	e7bd      	b.n	8038754 <_printf_i+0x12c>
 80387d8:	682b      	ldr	r3, [r5, #0]
 80387da:	6826      	ldr	r6, [r4, #0]
 80387dc:	6961      	ldr	r1, [r4, #20]
 80387de:	1d18      	adds	r0, r3, #4
 80387e0:	6028      	str	r0, [r5, #0]
 80387e2:	0635      	lsls	r5, r6, #24
 80387e4:	681b      	ldr	r3, [r3, #0]
 80387e6:	d501      	bpl.n	80387ec <_printf_i+0x1c4>
 80387e8:	6019      	str	r1, [r3, #0]
 80387ea:	e002      	b.n	80387f2 <_printf_i+0x1ca>
 80387ec:	0670      	lsls	r0, r6, #25
 80387ee:	d5fb      	bpl.n	80387e8 <_printf_i+0x1c0>
 80387f0:	8019      	strh	r1, [r3, #0]
 80387f2:	2300      	movs	r3, #0
 80387f4:	6123      	str	r3, [r4, #16]
 80387f6:	4615      	mov	r5, r2
 80387f8:	e7bc      	b.n	8038774 <_printf_i+0x14c>
 80387fa:	682b      	ldr	r3, [r5, #0]
 80387fc:	1d1a      	adds	r2, r3, #4
 80387fe:	602a      	str	r2, [r5, #0]
 8038800:	681d      	ldr	r5, [r3, #0]
 8038802:	6862      	ldr	r2, [r4, #4]
 8038804:	2100      	movs	r1, #0
 8038806:	4628      	mov	r0, r5
 8038808:	f7e7 fcfa 	bl	8020200 <memchr>
 803880c:	b108      	cbz	r0, 8038812 <_printf_i+0x1ea>
 803880e:	1b40      	subs	r0, r0, r5
 8038810:	6060      	str	r0, [r4, #4]
 8038812:	6863      	ldr	r3, [r4, #4]
 8038814:	6123      	str	r3, [r4, #16]
 8038816:	2300      	movs	r3, #0
 8038818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803881c:	e7aa      	b.n	8038774 <_printf_i+0x14c>
 803881e:	6923      	ldr	r3, [r4, #16]
 8038820:	462a      	mov	r2, r5
 8038822:	4649      	mov	r1, r9
 8038824:	4640      	mov	r0, r8
 8038826:	47d0      	blx	sl
 8038828:	3001      	adds	r0, #1
 803882a:	d0ad      	beq.n	8038788 <_printf_i+0x160>
 803882c:	6823      	ldr	r3, [r4, #0]
 803882e:	079b      	lsls	r3, r3, #30
 8038830:	d413      	bmi.n	803885a <_printf_i+0x232>
 8038832:	68e0      	ldr	r0, [r4, #12]
 8038834:	9b03      	ldr	r3, [sp, #12]
 8038836:	4298      	cmp	r0, r3
 8038838:	bfb8      	it	lt
 803883a:	4618      	movlt	r0, r3
 803883c:	e7a6      	b.n	803878c <_printf_i+0x164>
 803883e:	2301      	movs	r3, #1
 8038840:	4632      	mov	r2, r6
 8038842:	4649      	mov	r1, r9
 8038844:	4640      	mov	r0, r8
 8038846:	47d0      	blx	sl
 8038848:	3001      	adds	r0, #1
 803884a:	d09d      	beq.n	8038788 <_printf_i+0x160>
 803884c:	3501      	adds	r5, #1
 803884e:	68e3      	ldr	r3, [r4, #12]
 8038850:	9903      	ldr	r1, [sp, #12]
 8038852:	1a5b      	subs	r3, r3, r1
 8038854:	42ab      	cmp	r3, r5
 8038856:	dcf2      	bgt.n	803883e <_printf_i+0x216>
 8038858:	e7eb      	b.n	8038832 <_printf_i+0x20a>
 803885a:	2500      	movs	r5, #0
 803885c:	f104 0619 	add.w	r6, r4, #25
 8038860:	e7f5      	b.n	803884e <_printf_i+0x226>
 8038862:	bf00      	nop
 8038864:	08047d55 	.word	0x08047d55
 8038868:	08047d66 	.word	0x08047d66

0803886c <_scanf_chars>:
 803886c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8038870:	4615      	mov	r5, r2
 8038872:	688a      	ldr	r2, [r1, #8]
 8038874:	4680      	mov	r8, r0
 8038876:	460c      	mov	r4, r1
 8038878:	b932      	cbnz	r2, 8038888 <_scanf_chars+0x1c>
 803887a:	698a      	ldr	r2, [r1, #24]
 803887c:	2a00      	cmp	r2, #0
 803887e:	bf0c      	ite	eq
 8038880:	2201      	moveq	r2, #1
 8038882:	f04f 32ff 	movne.w	r2, #4294967295
 8038886:	608a      	str	r2, [r1, #8]
 8038888:	6822      	ldr	r2, [r4, #0]
 803888a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 803891c <_scanf_chars+0xb0>
 803888e:	06d1      	lsls	r1, r2, #27
 8038890:	bf5f      	itttt	pl
 8038892:	681a      	ldrpl	r2, [r3, #0]
 8038894:	1d11      	addpl	r1, r2, #4
 8038896:	6019      	strpl	r1, [r3, #0]
 8038898:	6816      	ldrpl	r6, [r2, #0]
 803889a:	2700      	movs	r7, #0
 803889c:	69a0      	ldr	r0, [r4, #24]
 803889e:	b188      	cbz	r0, 80388c4 <_scanf_chars+0x58>
 80388a0:	2801      	cmp	r0, #1
 80388a2:	d107      	bne.n	80388b4 <_scanf_chars+0x48>
 80388a4:	682a      	ldr	r2, [r5, #0]
 80388a6:	7811      	ldrb	r1, [r2, #0]
 80388a8:	6962      	ldr	r2, [r4, #20]
 80388aa:	5c52      	ldrb	r2, [r2, r1]
 80388ac:	b952      	cbnz	r2, 80388c4 <_scanf_chars+0x58>
 80388ae:	2f00      	cmp	r7, #0
 80388b0:	d031      	beq.n	8038916 <_scanf_chars+0xaa>
 80388b2:	e022      	b.n	80388fa <_scanf_chars+0x8e>
 80388b4:	2802      	cmp	r0, #2
 80388b6:	d120      	bne.n	80388fa <_scanf_chars+0x8e>
 80388b8:	682b      	ldr	r3, [r5, #0]
 80388ba:	781b      	ldrb	r3, [r3, #0]
 80388bc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80388c0:	071b      	lsls	r3, r3, #28
 80388c2:	d41a      	bmi.n	80388fa <_scanf_chars+0x8e>
 80388c4:	6823      	ldr	r3, [r4, #0]
 80388c6:	06da      	lsls	r2, r3, #27
 80388c8:	bf5e      	ittt	pl
 80388ca:	682b      	ldrpl	r3, [r5, #0]
 80388cc:	781b      	ldrbpl	r3, [r3, #0]
 80388ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 80388d2:	682a      	ldr	r2, [r5, #0]
 80388d4:	686b      	ldr	r3, [r5, #4]
 80388d6:	3201      	adds	r2, #1
 80388d8:	602a      	str	r2, [r5, #0]
 80388da:	68a2      	ldr	r2, [r4, #8]
 80388dc:	3b01      	subs	r3, #1
 80388de:	3a01      	subs	r2, #1
 80388e0:	606b      	str	r3, [r5, #4]
 80388e2:	3701      	adds	r7, #1
 80388e4:	60a2      	str	r2, [r4, #8]
 80388e6:	b142      	cbz	r2, 80388fa <_scanf_chars+0x8e>
 80388e8:	2b00      	cmp	r3, #0
 80388ea:	dcd7      	bgt.n	803889c <_scanf_chars+0x30>
 80388ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80388f0:	4629      	mov	r1, r5
 80388f2:	4640      	mov	r0, r8
 80388f4:	4798      	blx	r3
 80388f6:	2800      	cmp	r0, #0
 80388f8:	d0d0      	beq.n	803889c <_scanf_chars+0x30>
 80388fa:	6823      	ldr	r3, [r4, #0]
 80388fc:	f013 0310 	ands.w	r3, r3, #16
 8038900:	d105      	bne.n	803890e <_scanf_chars+0xa2>
 8038902:	68e2      	ldr	r2, [r4, #12]
 8038904:	3201      	adds	r2, #1
 8038906:	60e2      	str	r2, [r4, #12]
 8038908:	69a2      	ldr	r2, [r4, #24]
 803890a:	b102      	cbz	r2, 803890e <_scanf_chars+0xa2>
 803890c:	7033      	strb	r3, [r6, #0]
 803890e:	6923      	ldr	r3, [r4, #16]
 8038910:	443b      	add	r3, r7
 8038912:	6123      	str	r3, [r4, #16]
 8038914:	2000      	movs	r0, #0
 8038916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803891a:	bf00      	nop
 803891c:	08047c08 	.word	0x08047c08

08038920 <_scanf_i>:
 8038920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8038924:	4698      	mov	r8, r3
 8038926:	4b74      	ldr	r3, [pc, #464]	; (8038af8 <_scanf_i+0x1d8>)
 8038928:	460c      	mov	r4, r1
 803892a:	4682      	mov	sl, r0
 803892c:	4616      	mov	r6, r2
 803892e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8038932:	b087      	sub	sp, #28
 8038934:	ab03      	add	r3, sp, #12
 8038936:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 803893a:	4b70      	ldr	r3, [pc, #448]	; (8038afc <_scanf_i+0x1dc>)
 803893c:	69a1      	ldr	r1, [r4, #24]
 803893e:	4a70      	ldr	r2, [pc, #448]	; (8038b00 <_scanf_i+0x1e0>)
 8038940:	2903      	cmp	r1, #3
 8038942:	bf18      	it	ne
 8038944:	461a      	movne	r2, r3
 8038946:	68a3      	ldr	r3, [r4, #8]
 8038948:	9201      	str	r2, [sp, #4]
 803894a:	1e5a      	subs	r2, r3, #1
 803894c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8038950:	bf88      	it	hi
 8038952:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8038956:	4627      	mov	r7, r4
 8038958:	bf82      	ittt	hi
 803895a:	eb03 0905 	addhi.w	r9, r3, r5
 803895e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8038962:	60a3      	strhi	r3, [r4, #8]
 8038964:	f857 3b1c 	ldr.w	r3, [r7], #28
 8038968:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 803896c:	bf98      	it	ls
 803896e:	f04f 0900 	movls.w	r9, #0
 8038972:	6023      	str	r3, [r4, #0]
 8038974:	463d      	mov	r5, r7
 8038976:	f04f 0b00 	mov.w	fp, #0
 803897a:	6831      	ldr	r1, [r6, #0]
 803897c:	ab03      	add	r3, sp, #12
 803897e:	7809      	ldrb	r1, [r1, #0]
 8038980:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8038984:	2202      	movs	r2, #2
 8038986:	f7e7 fc3b 	bl	8020200 <memchr>
 803898a:	b328      	cbz	r0, 80389d8 <_scanf_i+0xb8>
 803898c:	f1bb 0f01 	cmp.w	fp, #1
 8038990:	d159      	bne.n	8038a46 <_scanf_i+0x126>
 8038992:	6862      	ldr	r2, [r4, #4]
 8038994:	b92a      	cbnz	r2, 80389a2 <_scanf_i+0x82>
 8038996:	6822      	ldr	r2, [r4, #0]
 8038998:	2308      	movs	r3, #8
 803899a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803899e:	6063      	str	r3, [r4, #4]
 80389a0:	6022      	str	r2, [r4, #0]
 80389a2:	6822      	ldr	r2, [r4, #0]
 80389a4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80389a8:	6022      	str	r2, [r4, #0]
 80389aa:	68a2      	ldr	r2, [r4, #8]
 80389ac:	1e51      	subs	r1, r2, #1
 80389ae:	60a1      	str	r1, [r4, #8]
 80389b0:	b192      	cbz	r2, 80389d8 <_scanf_i+0xb8>
 80389b2:	6832      	ldr	r2, [r6, #0]
 80389b4:	1c51      	adds	r1, r2, #1
 80389b6:	6031      	str	r1, [r6, #0]
 80389b8:	7812      	ldrb	r2, [r2, #0]
 80389ba:	f805 2b01 	strb.w	r2, [r5], #1
 80389be:	6872      	ldr	r2, [r6, #4]
 80389c0:	3a01      	subs	r2, #1
 80389c2:	2a00      	cmp	r2, #0
 80389c4:	6072      	str	r2, [r6, #4]
 80389c6:	dc07      	bgt.n	80389d8 <_scanf_i+0xb8>
 80389c8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80389cc:	4631      	mov	r1, r6
 80389ce:	4650      	mov	r0, sl
 80389d0:	4790      	blx	r2
 80389d2:	2800      	cmp	r0, #0
 80389d4:	f040 8085 	bne.w	8038ae2 <_scanf_i+0x1c2>
 80389d8:	f10b 0b01 	add.w	fp, fp, #1
 80389dc:	f1bb 0f03 	cmp.w	fp, #3
 80389e0:	d1cb      	bne.n	803897a <_scanf_i+0x5a>
 80389e2:	6863      	ldr	r3, [r4, #4]
 80389e4:	b90b      	cbnz	r3, 80389ea <_scanf_i+0xca>
 80389e6:	230a      	movs	r3, #10
 80389e8:	6063      	str	r3, [r4, #4]
 80389ea:	6863      	ldr	r3, [r4, #4]
 80389ec:	4945      	ldr	r1, [pc, #276]	; (8038b04 <_scanf_i+0x1e4>)
 80389ee:	6960      	ldr	r0, [r4, #20]
 80389f0:	1ac9      	subs	r1, r1, r3
 80389f2:	f000 fa22 	bl	8038e3a <__sccl>
 80389f6:	f04f 0b00 	mov.w	fp, #0
 80389fa:	68a3      	ldr	r3, [r4, #8]
 80389fc:	6822      	ldr	r2, [r4, #0]
 80389fe:	2b00      	cmp	r3, #0
 8038a00:	d03d      	beq.n	8038a7e <_scanf_i+0x15e>
 8038a02:	6831      	ldr	r1, [r6, #0]
 8038a04:	6960      	ldr	r0, [r4, #20]
 8038a06:	f891 c000 	ldrb.w	ip, [r1]
 8038a0a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8038a0e:	2800      	cmp	r0, #0
 8038a10:	d035      	beq.n	8038a7e <_scanf_i+0x15e>
 8038a12:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8038a16:	d124      	bne.n	8038a62 <_scanf_i+0x142>
 8038a18:	0510      	lsls	r0, r2, #20
 8038a1a:	d522      	bpl.n	8038a62 <_scanf_i+0x142>
 8038a1c:	f10b 0b01 	add.w	fp, fp, #1
 8038a20:	f1b9 0f00 	cmp.w	r9, #0
 8038a24:	d003      	beq.n	8038a2e <_scanf_i+0x10e>
 8038a26:	3301      	adds	r3, #1
 8038a28:	f109 39ff 	add.w	r9, r9, #4294967295
 8038a2c:	60a3      	str	r3, [r4, #8]
 8038a2e:	6873      	ldr	r3, [r6, #4]
 8038a30:	3b01      	subs	r3, #1
 8038a32:	2b00      	cmp	r3, #0
 8038a34:	6073      	str	r3, [r6, #4]
 8038a36:	dd1b      	ble.n	8038a70 <_scanf_i+0x150>
 8038a38:	6833      	ldr	r3, [r6, #0]
 8038a3a:	3301      	adds	r3, #1
 8038a3c:	6033      	str	r3, [r6, #0]
 8038a3e:	68a3      	ldr	r3, [r4, #8]
 8038a40:	3b01      	subs	r3, #1
 8038a42:	60a3      	str	r3, [r4, #8]
 8038a44:	e7d9      	b.n	80389fa <_scanf_i+0xda>
 8038a46:	f1bb 0f02 	cmp.w	fp, #2
 8038a4a:	d1ae      	bne.n	80389aa <_scanf_i+0x8a>
 8038a4c:	6822      	ldr	r2, [r4, #0]
 8038a4e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8038a52:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8038a56:	d1bf      	bne.n	80389d8 <_scanf_i+0xb8>
 8038a58:	2310      	movs	r3, #16
 8038a5a:	6063      	str	r3, [r4, #4]
 8038a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8038a60:	e7a2      	b.n	80389a8 <_scanf_i+0x88>
 8038a62:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8038a66:	6022      	str	r2, [r4, #0]
 8038a68:	780b      	ldrb	r3, [r1, #0]
 8038a6a:	f805 3b01 	strb.w	r3, [r5], #1
 8038a6e:	e7de      	b.n	8038a2e <_scanf_i+0x10e>
 8038a70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8038a74:	4631      	mov	r1, r6
 8038a76:	4650      	mov	r0, sl
 8038a78:	4798      	blx	r3
 8038a7a:	2800      	cmp	r0, #0
 8038a7c:	d0df      	beq.n	8038a3e <_scanf_i+0x11e>
 8038a7e:	6823      	ldr	r3, [r4, #0]
 8038a80:	05d9      	lsls	r1, r3, #23
 8038a82:	d50d      	bpl.n	8038aa0 <_scanf_i+0x180>
 8038a84:	42bd      	cmp	r5, r7
 8038a86:	d909      	bls.n	8038a9c <_scanf_i+0x17c>
 8038a88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8038a8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8038a90:	4632      	mov	r2, r6
 8038a92:	4650      	mov	r0, sl
 8038a94:	4798      	blx	r3
 8038a96:	f105 39ff 	add.w	r9, r5, #4294967295
 8038a9a:	464d      	mov	r5, r9
 8038a9c:	42bd      	cmp	r5, r7
 8038a9e:	d028      	beq.n	8038af2 <_scanf_i+0x1d2>
 8038aa0:	6822      	ldr	r2, [r4, #0]
 8038aa2:	f012 0210 	ands.w	r2, r2, #16
 8038aa6:	d113      	bne.n	8038ad0 <_scanf_i+0x1b0>
 8038aa8:	702a      	strb	r2, [r5, #0]
 8038aaa:	6863      	ldr	r3, [r4, #4]
 8038aac:	9e01      	ldr	r6, [sp, #4]
 8038aae:	4639      	mov	r1, r7
 8038ab0:	4650      	mov	r0, sl
 8038ab2:	47b0      	blx	r6
 8038ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8038ab8:	6821      	ldr	r1, [r4, #0]
 8038aba:	1d1a      	adds	r2, r3, #4
 8038abc:	f8c8 2000 	str.w	r2, [r8]
 8038ac0:	f011 0f20 	tst.w	r1, #32
 8038ac4:	681b      	ldr	r3, [r3, #0]
 8038ac6:	d00f      	beq.n	8038ae8 <_scanf_i+0x1c8>
 8038ac8:	6018      	str	r0, [r3, #0]
 8038aca:	68e3      	ldr	r3, [r4, #12]
 8038acc:	3301      	adds	r3, #1
 8038ace:	60e3      	str	r3, [r4, #12]
 8038ad0:	6923      	ldr	r3, [r4, #16]
 8038ad2:	1bed      	subs	r5, r5, r7
 8038ad4:	445d      	add	r5, fp
 8038ad6:	442b      	add	r3, r5
 8038ad8:	6123      	str	r3, [r4, #16]
 8038ada:	2000      	movs	r0, #0
 8038adc:	b007      	add	sp, #28
 8038ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8038ae2:	f04f 0b00 	mov.w	fp, #0
 8038ae6:	e7ca      	b.n	8038a7e <_scanf_i+0x15e>
 8038ae8:	07ca      	lsls	r2, r1, #31
 8038aea:	bf4c      	ite	mi
 8038aec:	8018      	strhmi	r0, [r3, #0]
 8038aee:	6018      	strpl	r0, [r3, #0]
 8038af0:	e7eb      	b.n	8038aca <_scanf_i+0x1aa>
 8038af2:	2001      	movs	r0, #1
 8038af4:	e7f2      	b.n	8038adc <_scanf_i+0x1bc>
 8038af6:	bf00      	nop
 8038af8:	0803b654 	.word	0x0803b654
 8038afc:	080390dd 	.word	0x080390dd
 8038b00:	08037319 	.word	0x08037319
 8038b04:	08047d87 	.word	0x08047d87

08038b08 <__sflush_r>:
 8038b08:	898a      	ldrh	r2, [r1, #12]
 8038b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8038b0e:	4605      	mov	r5, r0
 8038b10:	0710      	lsls	r0, r2, #28
 8038b12:	460c      	mov	r4, r1
 8038b14:	d458      	bmi.n	8038bc8 <__sflush_r+0xc0>
 8038b16:	684b      	ldr	r3, [r1, #4]
 8038b18:	2b00      	cmp	r3, #0
 8038b1a:	dc05      	bgt.n	8038b28 <__sflush_r+0x20>
 8038b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8038b1e:	2b00      	cmp	r3, #0
 8038b20:	dc02      	bgt.n	8038b28 <__sflush_r+0x20>
 8038b22:	2000      	movs	r0, #0
 8038b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8038b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8038b2a:	2e00      	cmp	r6, #0
 8038b2c:	d0f9      	beq.n	8038b22 <__sflush_r+0x1a>
 8038b2e:	2300      	movs	r3, #0
 8038b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8038b34:	682f      	ldr	r7, [r5, #0]
 8038b36:	6a21      	ldr	r1, [r4, #32]
 8038b38:	602b      	str	r3, [r5, #0]
 8038b3a:	d032      	beq.n	8038ba2 <__sflush_r+0x9a>
 8038b3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8038b3e:	89a3      	ldrh	r3, [r4, #12]
 8038b40:	075a      	lsls	r2, r3, #29
 8038b42:	d505      	bpl.n	8038b50 <__sflush_r+0x48>
 8038b44:	6863      	ldr	r3, [r4, #4]
 8038b46:	1ac0      	subs	r0, r0, r3
 8038b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8038b4a:	b10b      	cbz	r3, 8038b50 <__sflush_r+0x48>
 8038b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8038b4e:	1ac0      	subs	r0, r0, r3
 8038b50:	2300      	movs	r3, #0
 8038b52:	4602      	mov	r2, r0
 8038b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8038b56:	6a21      	ldr	r1, [r4, #32]
 8038b58:	4628      	mov	r0, r5
 8038b5a:	47b0      	blx	r6
 8038b5c:	1c43      	adds	r3, r0, #1
 8038b5e:	89a3      	ldrh	r3, [r4, #12]
 8038b60:	d106      	bne.n	8038b70 <__sflush_r+0x68>
 8038b62:	6829      	ldr	r1, [r5, #0]
 8038b64:	291d      	cmp	r1, #29
 8038b66:	d82b      	bhi.n	8038bc0 <__sflush_r+0xb8>
 8038b68:	4a29      	ldr	r2, [pc, #164]	; (8038c10 <__sflush_r+0x108>)
 8038b6a:	410a      	asrs	r2, r1
 8038b6c:	07d6      	lsls	r6, r2, #31
 8038b6e:	d427      	bmi.n	8038bc0 <__sflush_r+0xb8>
 8038b70:	2200      	movs	r2, #0
 8038b72:	6062      	str	r2, [r4, #4]
 8038b74:	04d9      	lsls	r1, r3, #19
 8038b76:	6922      	ldr	r2, [r4, #16]
 8038b78:	6022      	str	r2, [r4, #0]
 8038b7a:	d504      	bpl.n	8038b86 <__sflush_r+0x7e>
 8038b7c:	1c42      	adds	r2, r0, #1
 8038b7e:	d101      	bne.n	8038b84 <__sflush_r+0x7c>
 8038b80:	682b      	ldr	r3, [r5, #0]
 8038b82:	b903      	cbnz	r3, 8038b86 <__sflush_r+0x7e>
 8038b84:	6560      	str	r0, [r4, #84]	; 0x54
 8038b86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8038b88:	602f      	str	r7, [r5, #0]
 8038b8a:	2900      	cmp	r1, #0
 8038b8c:	d0c9      	beq.n	8038b22 <__sflush_r+0x1a>
 8038b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8038b92:	4299      	cmp	r1, r3
 8038b94:	d002      	beq.n	8038b9c <__sflush_r+0x94>
 8038b96:	4628      	mov	r0, r5
 8038b98:	f7ff f81e 	bl	8037bd8 <_free_r>
 8038b9c:	2000      	movs	r0, #0
 8038b9e:	6360      	str	r0, [r4, #52]	; 0x34
 8038ba0:	e7c0      	b.n	8038b24 <__sflush_r+0x1c>
 8038ba2:	2301      	movs	r3, #1
 8038ba4:	4628      	mov	r0, r5
 8038ba6:	47b0      	blx	r6
 8038ba8:	1c41      	adds	r1, r0, #1
 8038baa:	d1c8      	bne.n	8038b3e <__sflush_r+0x36>
 8038bac:	682b      	ldr	r3, [r5, #0]
 8038bae:	2b00      	cmp	r3, #0
 8038bb0:	d0c5      	beq.n	8038b3e <__sflush_r+0x36>
 8038bb2:	2b1d      	cmp	r3, #29
 8038bb4:	d001      	beq.n	8038bba <__sflush_r+0xb2>
 8038bb6:	2b16      	cmp	r3, #22
 8038bb8:	d101      	bne.n	8038bbe <__sflush_r+0xb6>
 8038bba:	602f      	str	r7, [r5, #0]
 8038bbc:	e7b1      	b.n	8038b22 <__sflush_r+0x1a>
 8038bbe:	89a3      	ldrh	r3, [r4, #12]
 8038bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8038bc4:	81a3      	strh	r3, [r4, #12]
 8038bc6:	e7ad      	b.n	8038b24 <__sflush_r+0x1c>
 8038bc8:	690f      	ldr	r7, [r1, #16]
 8038bca:	2f00      	cmp	r7, #0
 8038bcc:	d0a9      	beq.n	8038b22 <__sflush_r+0x1a>
 8038bce:	0793      	lsls	r3, r2, #30
 8038bd0:	680e      	ldr	r6, [r1, #0]
 8038bd2:	bf08      	it	eq
 8038bd4:	694b      	ldreq	r3, [r1, #20]
 8038bd6:	600f      	str	r7, [r1, #0]
 8038bd8:	bf18      	it	ne
 8038bda:	2300      	movne	r3, #0
 8038bdc:	eba6 0807 	sub.w	r8, r6, r7
 8038be0:	608b      	str	r3, [r1, #8]
 8038be2:	f1b8 0f00 	cmp.w	r8, #0
 8038be6:	dd9c      	ble.n	8038b22 <__sflush_r+0x1a>
 8038be8:	6a21      	ldr	r1, [r4, #32]
 8038bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8038bec:	4643      	mov	r3, r8
 8038bee:	463a      	mov	r2, r7
 8038bf0:	4628      	mov	r0, r5
 8038bf2:	47b0      	blx	r6
 8038bf4:	2800      	cmp	r0, #0
 8038bf6:	dc06      	bgt.n	8038c06 <__sflush_r+0xfe>
 8038bf8:	89a3      	ldrh	r3, [r4, #12]
 8038bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8038bfe:	81a3      	strh	r3, [r4, #12]
 8038c00:	f04f 30ff 	mov.w	r0, #4294967295
 8038c04:	e78e      	b.n	8038b24 <__sflush_r+0x1c>
 8038c06:	4407      	add	r7, r0
 8038c08:	eba8 0800 	sub.w	r8, r8, r0
 8038c0c:	e7e9      	b.n	8038be2 <__sflush_r+0xda>
 8038c0e:	bf00      	nop
 8038c10:	dfbffffe 	.word	0xdfbffffe

08038c14 <_fflush_r>:
 8038c14:	b538      	push	{r3, r4, r5, lr}
 8038c16:	690b      	ldr	r3, [r1, #16]
 8038c18:	4605      	mov	r5, r0
 8038c1a:	460c      	mov	r4, r1
 8038c1c:	b913      	cbnz	r3, 8038c24 <_fflush_r+0x10>
 8038c1e:	2500      	movs	r5, #0
 8038c20:	4628      	mov	r0, r5
 8038c22:	bd38      	pop	{r3, r4, r5, pc}
 8038c24:	b118      	cbz	r0, 8038c2e <_fflush_r+0x1a>
 8038c26:	6a03      	ldr	r3, [r0, #32]
 8038c28:	b90b      	cbnz	r3, 8038c2e <_fflush_r+0x1a>
 8038c2a:	f7fe fbfb 	bl	8037424 <__sinit>
 8038c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8038c32:	2b00      	cmp	r3, #0
 8038c34:	d0f3      	beq.n	8038c1e <_fflush_r+0xa>
 8038c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8038c38:	07d0      	lsls	r0, r2, #31
 8038c3a:	d404      	bmi.n	8038c46 <_fflush_r+0x32>
 8038c3c:	0599      	lsls	r1, r3, #22
 8038c3e:	d402      	bmi.n	8038c46 <_fflush_r+0x32>
 8038c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8038c42:	f7fe ff93 	bl	8037b6c <__retarget_lock_acquire_recursive>
 8038c46:	4628      	mov	r0, r5
 8038c48:	4621      	mov	r1, r4
 8038c4a:	f7ff ff5d 	bl	8038b08 <__sflush_r>
 8038c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8038c50:	07da      	lsls	r2, r3, #31
 8038c52:	4605      	mov	r5, r0
 8038c54:	d4e4      	bmi.n	8038c20 <_fflush_r+0xc>
 8038c56:	89a3      	ldrh	r3, [r4, #12]
 8038c58:	059b      	lsls	r3, r3, #22
 8038c5a:	d4e1      	bmi.n	8038c20 <_fflush_r+0xc>
 8038c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8038c5e:	f7fe ff86 	bl	8037b6e <__retarget_lock_release_recursive>
 8038c62:	e7dd      	b.n	8038c20 <_fflush_r+0xc>

08038c64 <fiprintf>:
 8038c64:	b40e      	push	{r1, r2, r3}
 8038c66:	b503      	push	{r0, r1, lr}
 8038c68:	4601      	mov	r1, r0
 8038c6a:	ab03      	add	r3, sp, #12
 8038c6c:	4805      	ldr	r0, [pc, #20]	; (8038c84 <fiprintf+0x20>)
 8038c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8038c72:	6800      	ldr	r0, [r0, #0]
 8038c74:	9301      	str	r3, [sp, #4]
 8038c76:	f7ff fb4f 	bl	8038318 <_vfiprintf_r>
 8038c7a:	b002      	add	sp, #8
 8038c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8038c80:	b003      	add	sp, #12
 8038c82:	4770      	bx	lr
 8038c84:	20000dc4 	.word	0x20000dc4

08038c88 <_getc_r>:
 8038c88:	b538      	push	{r3, r4, r5, lr}
 8038c8a:	460c      	mov	r4, r1
 8038c8c:	4605      	mov	r5, r0
 8038c8e:	b118      	cbz	r0, 8038c98 <_getc_r+0x10>
 8038c90:	6a03      	ldr	r3, [r0, #32]
 8038c92:	b90b      	cbnz	r3, 8038c98 <_getc_r+0x10>
 8038c94:	f7fe fbc6 	bl	8037424 <__sinit>
 8038c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8038c9a:	07d8      	lsls	r0, r3, #31
 8038c9c:	d405      	bmi.n	8038caa <_getc_r+0x22>
 8038c9e:	89a3      	ldrh	r3, [r4, #12]
 8038ca0:	0599      	lsls	r1, r3, #22
 8038ca2:	d402      	bmi.n	8038caa <_getc_r+0x22>
 8038ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8038ca6:	f7fe ff61 	bl	8037b6c <__retarget_lock_acquire_recursive>
 8038caa:	6863      	ldr	r3, [r4, #4]
 8038cac:	3b01      	subs	r3, #1
 8038cae:	2b00      	cmp	r3, #0
 8038cb0:	6063      	str	r3, [r4, #4]
 8038cb2:	da0f      	bge.n	8038cd4 <_getc_r+0x4c>
 8038cb4:	4628      	mov	r0, r5
 8038cb6:	4621      	mov	r1, r4
 8038cb8:	f000 f8a7 	bl	8038e0a <__srget_r>
 8038cbc:	4605      	mov	r5, r0
 8038cbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8038cc0:	07da      	lsls	r2, r3, #31
 8038cc2:	d405      	bmi.n	8038cd0 <_getc_r+0x48>
 8038cc4:	89a3      	ldrh	r3, [r4, #12]
 8038cc6:	059b      	lsls	r3, r3, #22
 8038cc8:	d402      	bmi.n	8038cd0 <_getc_r+0x48>
 8038cca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8038ccc:	f7fe ff4f 	bl	8037b6e <__retarget_lock_release_recursive>
 8038cd0:	4628      	mov	r0, r5
 8038cd2:	bd38      	pop	{r3, r4, r5, pc}
 8038cd4:	6823      	ldr	r3, [r4, #0]
 8038cd6:	1c5a      	adds	r2, r3, #1
 8038cd8:	6022      	str	r2, [r4, #0]
 8038cda:	781d      	ldrb	r5, [r3, #0]
 8038cdc:	e7ef      	b.n	8038cbe <_getc_r+0x36>

08038cde <__swhatbuf_r>:
 8038cde:	b570      	push	{r4, r5, r6, lr}
 8038ce0:	460c      	mov	r4, r1
 8038ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8038ce6:	2900      	cmp	r1, #0
 8038ce8:	b096      	sub	sp, #88	; 0x58
 8038cea:	4615      	mov	r5, r2
 8038cec:	461e      	mov	r6, r3
 8038cee:	da0d      	bge.n	8038d0c <__swhatbuf_r+0x2e>
 8038cf0:	89a3      	ldrh	r3, [r4, #12]
 8038cf2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8038cf6:	f04f 0100 	mov.w	r1, #0
 8038cfa:	bf0c      	ite	eq
 8038cfc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8038d00:	2340      	movne	r3, #64	; 0x40
 8038d02:	2000      	movs	r0, #0
 8038d04:	6031      	str	r1, [r6, #0]
 8038d06:	602b      	str	r3, [r5, #0]
 8038d08:	b016      	add	sp, #88	; 0x58
 8038d0a:	bd70      	pop	{r4, r5, r6, pc}
 8038d0c:	466a      	mov	r2, sp
 8038d0e:	f000 f921 	bl	8038f54 <_fstat_r>
 8038d12:	2800      	cmp	r0, #0
 8038d14:	dbec      	blt.n	8038cf0 <__swhatbuf_r+0x12>
 8038d16:	9901      	ldr	r1, [sp, #4]
 8038d18:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8038d1c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8038d20:	4259      	negs	r1, r3
 8038d22:	4159      	adcs	r1, r3
 8038d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8038d28:	e7eb      	b.n	8038d02 <__swhatbuf_r+0x24>

08038d2a <__smakebuf_r>:
 8038d2a:	898b      	ldrh	r3, [r1, #12]
 8038d2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8038d2e:	079d      	lsls	r5, r3, #30
 8038d30:	4606      	mov	r6, r0
 8038d32:	460c      	mov	r4, r1
 8038d34:	d507      	bpl.n	8038d46 <__smakebuf_r+0x1c>
 8038d36:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8038d3a:	6023      	str	r3, [r4, #0]
 8038d3c:	6123      	str	r3, [r4, #16]
 8038d3e:	2301      	movs	r3, #1
 8038d40:	6163      	str	r3, [r4, #20]
 8038d42:	b002      	add	sp, #8
 8038d44:	bd70      	pop	{r4, r5, r6, pc}
 8038d46:	ab01      	add	r3, sp, #4
 8038d48:	466a      	mov	r2, sp
 8038d4a:	f7ff ffc8 	bl	8038cde <__swhatbuf_r>
 8038d4e:	9900      	ldr	r1, [sp, #0]
 8038d50:	4605      	mov	r5, r0
 8038d52:	4630      	mov	r0, r6
 8038d54:	f7fe f966 	bl	8037024 <_malloc_r>
 8038d58:	b948      	cbnz	r0, 8038d6e <__smakebuf_r+0x44>
 8038d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8038d5e:	059a      	lsls	r2, r3, #22
 8038d60:	d4ef      	bmi.n	8038d42 <__smakebuf_r+0x18>
 8038d62:	f023 0303 	bic.w	r3, r3, #3
 8038d66:	f043 0302 	orr.w	r3, r3, #2
 8038d6a:	81a3      	strh	r3, [r4, #12]
 8038d6c:	e7e3      	b.n	8038d36 <__smakebuf_r+0xc>
 8038d6e:	89a3      	ldrh	r3, [r4, #12]
 8038d70:	6020      	str	r0, [r4, #0]
 8038d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8038d76:	81a3      	strh	r3, [r4, #12]
 8038d78:	9b00      	ldr	r3, [sp, #0]
 8038d7a:	6163      	str	r3, [r4, #20]
 8038d7c:	9b01      	ldr	r3, [sp, #4]
 8038d7e:	6120      	str	r0, [r4, #16]
 8038d80:	b15b      	cbz	r3, 8038d9a <__smakebuf_r+0x70>
 8038d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8038d86:	4630      	mov	r0, r6
 8038d88:	f000 f8f6 	bl	8038f78 <_isatty_r>
 8038d8c:	b128      	cbz	r0, 8038d9a <__smakebuf_r+0x70>
 8038d8e:	89a3      	ldrh	r3, [r4, #12]
 8038d90:	f023 0303 	bic.w	r3, r3, #3
 8038d94:	f043 0301 	orr.w	r3, r3, #1
 8038d98:	81a3      	strh	r3, [r4, #12]
 8038d9a:	89a3      	ldrh	r3, [r4, #12]
 8038d9c:	431d      	orrs	r5, r3
 8038d9e:	81a5      	strh	r5, [r4, #12]
 8038da0:	e7cf      	b.n	8038d42 <__smakebuf_r+0x18>

08038da2 <_putc_r>:
 8038da2:	b570      	push	{r4, r5, r6, lr}
 8038da4:	460d      	mov	r5, r1
 8038da6:	4614      	mov	r4, r2
 8038da8:	4606      	mov	r6, r0
 8038daa:	b118      	cbz	r0, 8038db4 <_putc_r+0x12>
 8038dac:	6a03      	ldr	r3, [r0, #32]
 8038dae:	b90b      	cbnz	r3, 8038db4 <_putc_r+0x12>
 8038db0:	f7fe fb38 	bl	8037424 <__sinit>
 8038db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8038db6:	07d8      	lsls	r0, r3, #31
 8038db8:	d405      	bmi.n	8038dc6 <_putc_r+0x24>
 8038dba:	89a3      	ldrh	r3, [r4, #12]
 8038dbc:	0599      	lsls	r1, r3, #22
 8038dbe:	d402      	bmi.n	8038dc6 <_putc_r+0x24>
 8038dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8038dc2:	f7fe fed3 	bl	8037b6c <__retarget_lock_acquire_recursive>
 8038dc6:	68a3      	ldr	r3, [r4, #8]
 8038dc8:	3b01      	subs	r3, #1
 8038dca:	2b00      	cmp	r3, #0
 8038dcc:	60a3      	str	r3, [r4, #8]
 8038dce:	da05      	bge.n	8038ddc <_putc_r+0x3a>
 8038dd0:	69a2      	ldr	r2, [r4, #24]
 8038dd2:	4293      	cmp	r3, r2
 8038dd4:	db12      	blt.n	8038dfc <_putc_r+0x5a>
 8038dd6:	b2eb      	uxtb	r3, r5
 8038dd8:	2b0a      	cmp	r3, #10
 8038dda:	d00f      	beq.n	8038dfc <_putc_r+0x5a>
 8038ddc:	6823      	ldr	r3, [r4, #0]
 8038dde:	1c5a      	adds	r2, r3, #1
 8038de0:	6022      	str	r2, [r4, #0]
 8038de2:	701d      	strb	r5, [r3, #0]
 8038de4:	b2ed      	uxtb	r5, r5
 8038de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8038de8:	07da      	lsls	r2, r3, #31
 8038dea:	d405      	bmi.n	8038df8 <_putc_r+0x56>
 8038dec:	89a3      	ldrh	r3, [r4, #12]
 8038dee:	059b      	lsls	r3, r3, #22
 8038df0:	d402      	bmi.n	8038df8 <_putc_r+0x56>
 8038df2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8038df4:	f7fe febb 	bl	8037b6e <__retarget_lock_release_recursive>
 8038df8:	4628      	mov	r0, r5
 8038dfa:	bd70      	pop	{r4, r5, r6, pc}
 8038dfc:	4629      	mov	r1, r5
 8038dfe:	4622      	mov	r2, r4
 8038e00:	4630      	mov	r0, r6
 8038e02:	f7fe fd0a 	bl	803781a <__swbuf_r>
 8038e06:	4605      	mov	r5, r0
 8038e08:	e7ed      	b.n	8038de6 <_putc_r+0x44>

08038e0a <__srget_r>:
 8038e0a:	b538      	push	{r3, r4, r5, lr}
 8038e0c:	460c      	mov	r4, r1
 8038e0e:	4605      	mov	r5, r0
 8038e10:	b118      	cbz	r0, 8038e1a <__srget_r+0x10>
 8038e12:	6a03      	ldr	r3, [r0, #32]
 8038e14:	b90b      	cbnz	r3, 8038e1a <__srget_r+0x10>
 8038e16:	f7fe fb05 	bl	8037424 <__sinit>
 8038e1a:	4621      	mov	r1, r4
 8038e1c:	4628      	mov	r0, r5
 8038e1e:	f000 f96d 	bl	80390fc <__srefill_r>
 8038e22:	b938      	cbnz	r0, 8038e34 <__srget_r+0x2a>
 8038e24:	6863      	ldr	r3, [r4, #4]
 8038e26:	3b01      	subs	r3, #1
 8038e28:	6063      	str	r3, [r4, #4]
 8038e2a:	6823      	ldr	r3, [r4, #0]
 8038e2c:	1c5a      	adds	r2, r3, #1
 8038e2e:	6022      	str	r2, [r4, #0]
 8038e30:	7818      	ldrb	r0, [r3, #0]
 8038e32:	bd38      	pop	{r3, r4, r5, pc}
 8038e34:	f04f 30ff 	mov.w	r0, #4294967295
 8038e38:	e7fb      	b.n	8038e32 <__srget_r+0x28>

08038e3a <__sccl>:
 8038e3a:	b570      	push	{r4, r5, r6, lr}
 8038e3c:	780b      	ldrb	r3, [r1, #0]
 8038e3e:	4604      	mov	r4, r0
 8038e40:	2b5e      	cmp	r3, #94	; 0x5e
 8038e42:	bf0b      	itete	eq
 8038e44:	784b      	ldrbeq	r3, [r1, #1]
 8038e46:	1c4a      	addne	r2, r1, #1
 8038e48:	1c8a      	addeq	r2, r1, #2
 8038e4a:	2100      	movne	r1, #0
 8038e4c:	bf08      	it	eq
 8038e4e:	2101      	moveq	r1, #1
 8038e50:	3801      	subs	r0, #1
 8038e52:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8038e56:	f800 1f01 	strb.w	r1, [r0, #1]!
 8038e5a:	42a8      	cmp	r0, r5
 8038e5c:	d1fb      	bne.n	8038e56 <__sccl+0x1c>
 8038e5e:	b90b      	cbnz	r3, 8038e64 <__sccl+0x2a>
 8038e60:	1e50      	subs	r0, r2, #1
 8038e62:	bd70      	pop	{r4, r5, r6, pc}
 8038e64:	f081 0101 	eor.w	r1, r1, #1
 8038e68:	54e1      	strb	r1, [r4, r3]
 8038e6a:	4610      	mov	r0, r2
 8038e6c:	4602      	mov	r2, r0
 8038e6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8038e72:	2d2d      	cmp	r5, #45	; 0x2d
 8038e74:	d005      	beq.n	8038e82 <__sccl+0x48>
 8038e76:	2d5d      	cmp	r5, #93	; 0x5d
 8038e78:	d016      	beq.n	8038ea8 <__sccl+0x6e>
 8038e7a:	2d00      	cmp	r5, #0
 8038e7c:	d0f1      	beq.n	8038e62 <__sccl+0x28>
 8038e7e:	462b      	mov	r3, r5
 8038e80:	e7f2      	b.n	8038e68 <__sccl+0x2e>
 8038e82:	7846      	ldrb	r6, [r0, #1]
 8038e84:	2e5d      	cmp	r6, #93	; 0x5d
 8038e86:	d0fa      	beq.n	8038e7e <__sccl+0x44>
 8038e88:	42b3      	cmp	r3, r6
 8038e8a:	dcf8      	bgt.n	8038e7e <__sccl+0x44>
 8038e8c:	3002      	adds	r0, #2
 8038e8e:	461a      	mov	r2, r3
 8038e90:	3201      	adds	r2, #1
 8038e92:	4296      	cmp	r6, r2
 8038e94:	54a1      	strb	r1, [r4, r2]
 8038e96:	dcfb      	bgt.n	8038e90 <__sccl+0x56>
 8038e98:	1af2      	subs	r2, r6, r3
 8038e9a:	3a01      	subs	r2, #1
 8038e9c:	1c5d      	adds	r5, r3, #1
 8038e9e:	42b3      	cmp	r3, r6
 8038ea0:	bfa8      	it	ge
 8038ea2:	2200      	movge	r2, #0
 8038ea4:	18ab      	adds	r3, r5, r2
 8038ea6:	e7e1      	b.n	8038e6c <__sccl+0x32>
 8038ea8:	4610      	mov	r0, r2
 8038eaa:	e7da      	b.n	8038e62 <__sccl+0x28>

08038eac <__submore>:
 8038eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8038eb0:	460c      	mov	r4, r1
 8038eb2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8038eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8038eb8:	4299      	cmp	r1, r3
 8038eba:	d11d      	bne.n	8038ef8 <__submore+0x4c>
 8038ebc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8038ec0:	f7fe f8b0 	bl	8037024 <_malloc_r>
 8038ec4:	b918      	cbnz	r0, 8038ece <__submore+0x22>
 8038ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8038eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8038ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8038ed2:	63a3      	str	r3, [r4, #56]	; 0x38
 8038ed4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8038ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8038eda:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8038ede:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8038ee2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8038ee6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8038eea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8038eee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8038ef2:	6020      	str	r0, [r4, #0]
 8038ef4:	2000      	movs	r0, #0
 8038ef6:	e7e8      	b.n	8038eca <__submore+0x1e>
 8038ef8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8038efa:	0077      	lsls	r7, r6, #1
 8038efc:	463a      	mov	r2, r7
 8038efe:	f000 f84b 	bl	8038f98 <_realloc_r>
 8038f02:	4605      	mov	r5, r0
 8038f04:	2800      	cmp	r0, #0
 8038f06:	d0de      	beq.n	8038ec6 <__submore+0x1a>
 8038f08:	eb00 0806 	add.w	r8, r0, r6
 8038f0c:	4601      	mov	r1, r0
 8038f0e:	4632      	mov	r2, r6
 8038f10:	4640      	mov	r0, r8
 8038f12:	f7fe fe35 	bl	8037b80 <memcpy>
 8038f16:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8038f1a:	f8c4 8000 	str.w	r8, [r4]
 8038f1e:	e7e9      	b.n	8038ef4 <__submore+0x48>

08038f20 <memmove>:
 8038f20:	4288      	cmp	r0, r1
 8038f22:	b510      	push	{r4, lr}
 8038f24:	eb01 0402 	add.w	r4, r1, r2
 8038f28:	d902      	bls.n	8038f30 <memmove+0x10>
 8038f2a:	4284      	cmp	r4, r0
 8038f2c:	4623      	mov	r3, r4
 8038f2e:	d807      	bhi.n	8038f40 <memmove+0x20>
 8038f30:	1e43      	subs	r3, r0, #1
 8038f32:	42a1      	cmp	r1, r4
 8038f34:	d008      	beq.n	8038f48 <memmove+0x28>
 8038f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8038f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8038f3e:	e7f8      	b.n	8038f32 <memmove+0x12>
 8038f40:	4402      	add	r2, r0
 8038f42:	4601      	mov	r1, r0
 8038f44:	428a      	cmp	r2, r1
 8038f46:	d100      	bne.n	8038f4a <memmove+0x2a>
 8038f48:	bd10      	pop	{r4, pc}
 8038f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8038f4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8038f52:	e7f7      	b.n	8038f44 <memmove+0x24>

08038f54 <_fstat_r>:
 8038f54:	b538      	push	{r3, r4, r5, lr}
 8038f56:	4d07      	ldr	r5, [pc, #28]	; (8038f74 <_fstat_r+0x20>)
 8038f58:	2300      	movs	r3, #0
 8038f5a:	4604      	mov	r4, r0
 8038f5c:	4608      	mov	r0, r1
 8038f5e:	4611      	mov	r1, r2
 8038f60:	602b      	str	r3, [r5, #0]
 8038f62:	f7e8 fd36 	bl	80219d2 <_fstat>
 8038f66:	1c43      	adds	r3, r0, #1
 8038f68:	d102      	bne.n	8038f70 <_fstat_r+0x1c>
 8038f6a:	682b      	ldr	r3, [r5, #0]
 8038f6c:	b103      	cbz	r3, 8038f70 <_fstat_r+0x1c>
 8038f6e:	6023      	str	r3, [r4, #0]
 8038f70:	bd38      	pop	{r3, r4, r5, pc}
 8038f72:	bf00      	nop
 8038f74:	20004578 	.word	0x20004578

08038f78 <_isatty_r>:
 8038f78:	b538      	push	{r3, r4, r5, lr}
 8038f7a:	4d06      	ldr	r5, [pc, #24]	; (8038f94 <_isatty_r+0x1c>)
 8038f7c:	2300      	movs	r3, #0
 8038f7e:	4604      	mov	r4, r0
 8038f80:	4608      	mov	r0, r1
 8038f82:	602b      	str	r3, [r5, #0]
 8038f84:	f7e8 fd35 	bl	80219f2 <_isatty>
 8038f88:	1c43      	adds	r3, r0, #1
 8038f8a:	d102      	bne.n	8038f92 <_isatty_r+0x1a>
 8038f8c:	682b      	ldr	r3, [r5, #0]
 8038f8e:	b103      	cbz	r3, 8038f92 <_isatty_r+0x1a>
 8038f90:	6023      	str	r3, [r4, #0]
 8038f92:	bd38      	pop	{r3, r4, r5, pc}
 8038f94:	20004578 	.word	0x20004578

08038f98 <_realloc_r>:
 8038f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8038f9c:	4680      	mov	r8, r0
 8038f9e:	4614      	mov	r4, r2
 8038fa0:	460e      	mov	r6, r1
 8038fa2:	b921      	cbnz	r1, 8038fae <_realloc_r+0x16>
 8038fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8038fa8:	4611      	mov	r1, r2
 8038faa:	f7fe b83b 	b.w	8037024 <_malloc_r>
 8038fae:	b92a      	cbnz	r2, 8038fbc <_realloc_r+0x24>
 8038fb0:	f7fe fe12 	bl	8037bd8 <_free_r>
 8038fb4:	4625      	mov	r5, r4
 8038fb6:	4628      	mov	r0, r5
 8038fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8038fbc:	f000 f916 	bl	80391ec <_malloc_usable_size_r>
 8038fc0:	4284      	cmp	r4, r0
 8038fc2:	4607      	mov	r7, r0
 8038fc4:	d802      	bhi.n	8038fcc <_realloc_r+0x34>
 8038fc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8038fca:	d812      	bhi.n	8038ff2 <_realloc_r+0x5a>
 8038fcc:	4621      	mov	r1, r4
 8038fce:	4640      	mov	r0, r8
 8038fd0:	f7fe f828 	bl	8037024 <_malloc_r>
 8038fd4:	4605      	mov	r5, r0
 8038fd6:	2800      	cmp	r0, #0
 8038fd8:	d0ed      	beq.n	8038fb6 <_realloc_r+0x1e>
 8038fda:	42bc      	cmp	r4, r7
 8038fdc:	4622      	mov	r2, r4
 8038fde:	4631      	mov	r1, r6
 8038fe0:	bf28      	it	cs
 8038fe2:	463a      	movcs	r2, r7
 8038fe4:	f7fe fdcc 	bl	8037b80 <memcpy>
 8038fe8:	4631      	mov	r1, r6
 8038fea:	4640      	mov	r0, r8
 8038fec:	f7fe fdf4 	bl	8037bd8 <_free_r>
 8038ff0:	e7e1      	b.n	8038fb6 <_realloc_r+0x1e>
 8038ff2:	4635      	mov	r5, r6
 8038ff4:	e7df      	b.n	8038fb6 <_realloc_r+0x1e>
	...

08038ff8 <_strtoul_l.constprop.0>:
 8038ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8038ffc:	4f36      	ldr	r7, [pc, #216]	; (80390d8 <_strtoul_l.constprop.0+0xe0>)
 8038ffe:	4686      	mov	lr, r0
 8039000:	460d      	mov	r5, r1
 8039002:	4628      	mov	r0, r5
 8039004:	f815 4b01 	ldrb.w	r4, [r5], #1
 8039008:	5d3e      	ldrb	r6, [r7, r4]
 803900a:	f016 0608 	ands.w	r6, r6, #8
 803900e:	d1f8      	bne.n	8039002 <_strtoul_l.constprop.0+0xa>
 8039010:	2c2d      	cmp	r4, #45	; 0x2d
 8039012:	d130      	bne.n	8039076 <_strtoul_l.constprop.0+0x7e>
 8039014:	782c      	ldrb	r4, [r5, #0]
 8039016:	2601      	movs	r6, #1
 8039018:	1c85      	adds	r5, r0, #2
 803901a:	2b00      	cmp	r3, #0
 803901c:	d057      	beq.n	80390ce <_strtoul_l.constprop.0+0xd6>
 803901e:	2b10      	cmp	r3, #16
 8039020:	d109      	bne.n	8039036 <_strtoul_l.constprop.0+0x3e>
 8039022:	2c30      	cmp	r4, #48	; 0x30
 8039024:	d107      	bne.n	8039036 <_strtoul_l.constprop.0+0x3e>
 8039026:	7828      	ldrb	r0, [r5, #0]
 8039028:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 803902c:	2858      	cmp	r0, #88	; 0x58
 803902e:	d149      	bne.n	80390c4 <_strtoul_l.constprop.0+0xcc>
 8039030:	786c      	ldrb	r4, [r5, #1]
 8039032:	2310      	movs	r3, #16
 8039034:	3502      	adds	r5, #2
 8039036:	f04f 38ff 	mov.w	r8, #4294967295
 803903a:	2700      	movs	r7, #0
 803903c:	fbb8 f8f3 	udiv	r8, r8, r3
 8039040:	fb03 f908 	mul.w	r9, r3, r8
 8039044:	ea6f 0909 	mvn.w	r9, r9
 8039048:	4638      	mov	r0, r7
 803904a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 803904e:	f1bc 0f09 	cmp.w	ip, #9
 8039052:	d815      	bhi.n	8039080 <_strtoul_l.constprop.0+0x88>
 8039054:	4664      	mov	r4, ip
 8039056:	42a3      	cmp	r3, r4
 8039058:	dd23      	ble.n	80390a2 <_strtoul_l.constprop.0+0xaa>
 803905a:	f1b7 3fff 	cmp.w	r7, #4294967295
 803905e:	d007      	beq.n	8039070 <_strtoul_l.constprop.0+0x78>
 8039060:	4580      	cmp	r8, r0
 8039062:	d31b      	bcc.n	803909c <_strtoul_l.constprop.0+0xa4>
 8039064:	d101      	bne.n	803906a <_strtoul_l.constprop.0+0x72>
 8039066:	45a1      	cmp	r9, r4
 8039068:	db18      	blt.n	803909c <_strtoul_l.constprop.0+0xa4>
 803906a:	fb00 4003 	mla	r0, r0, r3, r4
 803906e:	2701      	movs	r7, #1
 8039070:	f815 4b01 	ldrb.w	r4, [r5], #1
 8039074:	e7e9      	b.n	803904a <_strtoul_l.constprop.0+0x52>
 8039076:	2c2b      	cmp	r4, #43	; 0x2b
 8039078:	bf04      	itt	eq
 803907a:	782c      	ldrbeq	r4, [r5, #0]
 803907c:	1c85      	addeq	r5, r0, #2
 803907e:	e7cc      	b.n	803901a <_strtoul_l.constprop.0+0x22>
 8039080:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8039084:	f1bc 0f19 	cmp.w	ip, #25
 8039088:	d801      	bhi.n	803908e <_strtoul_l.constprop.0+0x96>
 803908a:	3c37      	subs	r4, #55	; 0x37
 803908c:	e7e3      	b.n	8039056 <_strtoul_l.constprop.0+0x5e>
 803908e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8039092:	f1bc 0f19 	cmp.w	ip, #25
 8039096:	d804      	bhi.n	80390a2 <_strtoul_l.constprop.0+0xaa>
 8039098:	3c57      	subs	r4, #87	; 0x57
 803909a:	e7dc      	b.n	8039056 <_strtoul_l.constprop.0+0x5e>
 803909c:	f04f 37ff 	mov.w	r7, #4294967295
 80390a0:	e7e6      	b.n	8039070 <_strtoul_l.constprop.0+0x78>
 80390a2:	1c7b      	adds	r3, r7, #1
 80390a4:	d106      	bne.n	80390b4 <_strtoul_l.constprop.0+0xbc>
 80390a6:	2322      	movs	r3, #34	; 0x22
 80390a8:	f8ce 3000 	str.w	r3, [lr]
 80390ac:	4638      	mov	r0, r7
 80390ae:	b932      	cbnz	r2, 80390be <_strtoul_l.constprop.0+0xc6>
 80390b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80390b4:	b106      	cbz	r6, 80390b8 <_strtoul_l.constprop.0+0xc0>
 80390b6:	4240      	negs	r0, r0
 80390b8:	2a00      	cmp	r2, #0
 80390ba:	d0f9      	beq.n	80390b0 <_strtoul_l.constprop.0+0xb8>
 80390bc:	b107      	cbz	r7, 80390c0 <_strtoul_l.constprop.0+0xc8>
 80390be:	1e69      	subs	r1, r5, #1
 80390c0:	6011      	str	r1, [r2, #0]
 80390c2:	e7f5      	b.n	80390b0 <_strtoul_l.constprop.0+0xb8>
 80390c4:	2430      	movs	r4, #48	; 0x30
 80390c6:	2b00      	cmp	r3, #0
 80390c8:	d1b5      	bne.n	8039036 <_strtoul_l.constprop.0+0x3e>
 80390ca:	2308      	movs	r3, #8
 80390cc:	e7b3      	b.n	8039036 <_strtoul_l.constprop.0+0x3e>
 80390ce:	2c30      	cmp	r4, #48	; 0x30
 80390d0:	d0a9      	beq.n	8039026 <_strtoul_l.constprop.0+0x2e>
 80390d2:	230a      	movs	r3, #10
 80390d4:	e7af      	b.n	8039036 <_strtoul_l.constprop.0+0x3e>
 80390d6:	bf00      	nop
 80390d8:	08047c08 	.word	0x08047c08

080390dc <_strtoul_r>:
 80390dc:	f7ff bf8c 	b.w	8038ff8 <_strtoul_l.constprop.0>

080390e0 <lflush>:
 80390e0:	898b      	ldrh	r3, [r1, #12]
 80390e2:	f003 0309 	and.w	r3, r3, #9
 80390e6:	2b09      	cmp	r3, #9
 80390e8:	d103      	bne.n	80390f2 <lflush+0x12>
 80390ea:	4b03      	ldr	r3, [pc, #12]	; (80390f8 <lflush+0x18>)
 80390ec:	6818      	ldr	r0, [r3, #0]
 80390ee:	f7ff bd91 	b.w	8038c14 <_fflush_r>
 80390f2:	2000      	movs	r0, #0
 80390f4:	4770      	bx	lr
 80390f6:	bf00      	nop
 80390f8:	20000dc4 	.word	0x20000dc4

080390fc <__srefill_r>:
 80390fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80390fe:	460c      	mov	r4, r1
 8039100:	4605      	mov	r5, r0
 8039102:	b118      	cbz	r0, 803910c <__srefill_r+0x10>
 8039104:	6a03      	ldr	r3, [r0, #32]
 8039106:	b90b      	cbnz	r3, 803910c <__srefill_r+0x10>
 8039108:	f7fe f98c 	bl	8037424 <__sinit>
 803910c:	2300      	movs	r3, #0
 803910e:	6063      	str	r3, [r4, #4]
 8039110:	89a3      	ldrh	r3, [r4, #12]
 8039112:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8039116:	069e      	lsls	r6, r3, #26
 8039118:	d502      	bpl.n	8039120 <__srefill_r+0x24>
 803911a:	f04f 30ff 	mov.w	r0, #4294967295
 803911e:	e05c      	b.n	80391da <__srefill_r+0xde>
 8039120:	0758      	lsls	r0, r3, #29
 8039122:	d448      	bmi.n	80391b6 <__srefill_r+0xba>
 8039124:	06d9      	lsls	r1, r3, #27
 8039126:	d405      	bmi.n	8039134 <__srefill_r+0x38>
 8039128:	2309      	movs	r3, #9
 803912a:	602b      	str	r3, [r5, #0]
 803912c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8039130:	81a3      	strh	r3, [r4, #12]
 8039132:	e7f2      	b.n	803911a <__srefill_r+0x1e>
 8039134:	071a      	lsls	r2, r3, #28
 8039136:	d50b      	bpl.n	8039150 <__srefill_r+0x54>
 8039138:	4621      	mov	r1, r4
 803913a:	4628      	mov	r0, r5
 803913c:	f7ff fd6a 	bl	8038c14 <_fflush_r>
 8039140:	2800      	cmp	r0, #0
 8039142:	d1ea      	bne.n	803911a <__srefill_r+0x1e>
 8039144:	89a3      	ldrh	r3, [r4, #12]
 8039146:	60a0      	str	r0, [r4, #8]
 8039148:	f023 0308 	bic.w	r3, r3, #8
 803914c:	81a3      	strh	r3, [r4, #12]
 803914e:	61a0      	str	r0, [r4, #24]
 8039150:	89a3      	ldrh	r3, [r4, #12]
 8039152:	f043 0304 	orr.w	r3, r3, #4
 8039156:	81a3      	strh	r3, [r4, #12]
 8039158:	6923      	ldr	r3, [r4, #16]
 803915a:	b91b      	cbnz	r3, 8039164 <__srefill_r+0x68>
 803915c:	4621      	mov	r1, r4
 803915e:	4628      	mov	r0, r5
 8039160:	f7ff fde3 	bl	8038d2a <__smakebuf_r>
 8039164:	89a6      	ldrh	r6, [r4, #12]
 8039166:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 803916a:	07b3      	lsls	r3, r6, #30
 803916c:	d00f      	beq.n	803918e <__srefill_r+0x92>
 803916e:	2301      	movs	r3, #1
 8039170:	4a1b      	ldr	r2, [pc, #108]	; (80391e0 <__srefill_r+0xe4>)
 8039172:	491c      	ldr	r1, [pc, #112]	; (80391e4 <__srefill_r+0xe8>)
 8039174:	481c      	ldr	r0, [pc, #112]	; (80391e8 <__srefill_r+0xec>)
 8039176:	81a3      	strh	r3, [r4, #12]
 8039178:	f006 0609 	and.w	r6, r6, #9
 803917c:	f7fe f96a 	bl	8037454 <_fwalk_sglue>
 8039180:	2e09      	cmp	r6, #9
 8039182:	81a7      	strh	r7, [r4, #12]
 8039184:	d103      	bne.n	803918e <__srefill_r+0x92>
 8039186:	4621      	mov	r1, r4
 8039188:	4628      	mov	r0, r5
 803918a:	f7ff fcbd 	bl	8038b08 <__sflush_r>
 803918e:	6922      	ldr	r2, [r4, #16]
 8039190:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8039192:	6963      	ldr	r3, [r4, #20]
 8039194:	6a21      	ldr	r1, [r4, #32]
 8039196:	6022      	str	r2, [r4, #0]
 8039198:	4628      	mov	r0, r5
 803919a:	47b0      	blx	r6
 803919c:	2800      	cmp	r0, #0
 803919e:	6060      	str	r0, [r4, #4]
 80391a0:	dc1c      	bgt.n	80391dc <__srefill_r+0xe0>
 80391a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80391a6:	bf17      	itett	ne
 80391a8:	2200      	movne	r2, #0
 80391aa:	f043 0320 	orreq.w	r3, r3, #32
 80391ae:	6062      	strne	r2, [r4, #4]
 80391b0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80391b4:	e7bc      	b.n	8039130 <__srefill_r+0x34>
 80391b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80391b8:	2900      	cmp	r1, #0
 80391ba:	d0cd      	beq.n	8039158 <__srefill_r+0x5c>
 80391bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80391c0:	4299      	cmp	r1, r3
 80391c2:	d002      	beq.n	80391ca <__srefill_r+0xce>
 80391c4:	4628      	mov	r0, r5
 80391c6:	f7fe fd07 	bl	8037bd8 <_free_r>
 80391ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80391cc:	6063      	str	r3, [r4, #4]
 80391ce:	2000      	movs	r0, #0
 80391d0:	6360      	str	r0, [r4, #52]	; 0x34
 80391d2:	2b00      	cmp	r3, #0
 80391d4:	d0c0      	beq.n	8039158 <__srefill_r+0x5c>
 80391d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80391d8:	6023      	str	r3, [r4, #0]
 80391da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80391dc:	2000      	movs	r0, #0
 80391de:	e7fc      	b.n	80391da <__srefill_r+0xde>
 80391e0:	20000d6c 	.word	0x20000d6c
 80391e4:	080390e1 	.word	0x080390e1
 80391e8:	20000d78 	.word	0x20000d78

080391ec <_malloc_usable_size_r>:
 80391ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80391f0:	1f18      	subs	r0, r3, #4
 80391f2:	2b00      	cmp	r3, #0
 80391f4:	bfbc      	itt	lt
 80391f6:	580b      	ldrlt	r3, [r1, r0]
 80391f8:	18c0      	addlt	r0, r0, r3
 80391fa:	4770      	bx	lr

080391fc <_init>:
 80391fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80391fe:	bf00      	nop
 8039200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8039202:	bc08      	pop	{r3}
 8039204:	469e      	mov	lr, r3
 8039206:	4770      	bx	lr

08039208 <_fini>:
 8039208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803920a:	bf00      	nop
 803920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803920e:	bc08      	pop	{r3}
 8039210:	469e      	mov	lr, r3
 8039212:	4770      	bx	lr
