
RFM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019380  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ebe8  08039510  08039510  00029510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080480f8  080480f8  00040dd4  2**0
                  CONTENTS
  4 .ARM          00000008  080480f8  080480f8  000380f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08048100  08048100  00040dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08048100  08048100  00038100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08048108  08048108  00038108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000dd4  20000000  0804810c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000367c  20000dd4  08048ee0  00040dd4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004450  08048ee0  00044450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040dd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038ba2  00000000  00000000  00040e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000093f6  00000000  00000000  000799a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d18  00000000  00000000  00082da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a68  00000000  00000000  00085ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004010c  00000000  00000000  00088520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039779  00000000  00000000  000c862c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015b614  00000000  00000000  00101da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0025d3b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000caf8  00000000  00000000  0025d40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000dd4 	.word	0x20000dd4
 80201ac:	00000000 	.word	0x00000000
 80201b0:	080394f8 	.word	0x080394f8

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	20000dd8 	.word	0x20000dd8
 80201cc:	080394f8 	.word	0x080394f8

080201d0 <strcmp>:
 80201d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80201d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80201d8:	2a01      	cmp	r2, #1
 80201da:	bf28      	it	cs
 80201dc:	429a      	cmpcs	r2, r3
 80201de:	d0f7      	beq.n	80201d0 <strcmp>
 80201e0:	1ad0      	subs	r0, r2, r3
 80201e2:	4770      	bx	lr

080201e4 <strlen>:
 80201e4:	4603      	mov	r3, r0
 80201e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201ea:	2a00      	cmp	r2, #0
 80201ec:	d1fb      	bne.n	80201e6 <strlen+0x2>
 80201ee:	1a18      	subs	r0, r3, r0
 80201f0:	3801      	subs	r0, #1
 80201f2:	4770      	bx	lr
	...

08020200 <memchr>:
 8020200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020204:	2a10      	cmp	r2, #16
 8020206:	db2b      	blt.n	8020260 <memchr+0x60>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	d008      	beq.n	8020220 <memchr+0x20>
 802020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020212:	3a01      	subs	r2, #1
 8020214:	428b      	cmp	r3, r1
 8020216:	d02d      	beq.n	8020274 <memchr+0x74>
 8020218:	f010 0f07 	tst.w	r0, #7
 802021c:	b342      	cbz	r2, 8020270 <memchr+0x70>
 802021e:	d1f6      	bne.n	802020e <memchr+0xe>
 8020220:	b4f0      	push	{r4, r5, r6, r7}
 8020222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802022a:	f022 0407 	bic.w	r4, r2, #7
 802022e:	f07f 0700 	mvns.w	r7, #0
 8020232:	2300      	movs	r3, #0
 8020234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020238:	3c08      	subs	r4, #8
 802023a:	ea85 0501 	eor.w	r5, r5, r1
 802023e:	ea86 0601 	eor.w	r6, r6, r1
 8020242:	fa85 f547 	uadd8	r5, r5, r7
 8020246:	faa3 f587 	sel	r5, r3, r7
 802024a:	fa86 f647 	uadd8	r6, r6, r7
 802024e:	faa5 f687 	sel	r6, r5, r7
 8020252:	b98e      	cbnz	r6, 8020278 <memchr+0x78>
 8020254:	d1ee      	bne.n	8020234 <memchr+0x34>
 8020256:	bcf0      	pop	{r4, r5, r6, r7}
 8020258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802025c:	f002 0207 	and.w	r2, r2, #7
 8020260:	b132      	cbz	r2, 8020270 <memchr+0x70>
 8020262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020266:	3a01      	subs	r2, #1
 8020268:	ea83 0301 	eor.w	r3, r3, r1
 802026c:	b113      	cbz	r3, 8020274 <memchr+0x74>
 802026e:	d1f8      	bne.n	8020262 <memchr+0x62>
 8020270:	2000      	movs	r0, #0
 8020272:	4770      	bx	lr
 8020274:	3801      	subs	r0, #1
 8020276:	4770      	bx	lr
 8020278:	2d00      	cmp	r5, #0
 802027a:	bf06      	itte	eq
 802027c:	4635      	moveq	r5, r6
 802027e:	3803      	subeq	r0, #3
 8020280:	3807      	subne	r0, #7
 8020282:	f015 0f01 	tst.w	r5, #1
 8020286:	d107      	bne.n	8020298 <memchr+0x98>
 8020288:	3001      	adds	r0, #1
 802028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802028e:	bf02      	ittt	eq
 8020290:	3001      	addeq	r0, #1
 8020292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020296:	3001      	addeq	r0, #1
 8020298:	bcf0      	pop	{r4, r5, r6, r7}
 802029a:	3801      	subs	r0, #1
 802029c:	4770      	bx	lr
 802029e:	bf00      	nop

080202a0 <__aeabi_uldivmod>:
 80202a0:	b953      	cbnz	r3, 80202b8 <__aeabi_uldivmod+0x18>
 80202a2:	b94a      	cbnz	r2, 80202b8 <__aeabi_uldivmod+0x18>
 80202a4:	2900      	cmp	r1, #0
 80202a6:	bf08      	it	eq
 80202a8:	2800      	cmpeq	r0, #0
 80202aa:	bf1c      	itt	ne
 80202ac:	f04f 31ff 	movne.w	r1, #4294967295
 80202b0:	f04f 30ff 	movne.w	r0, #4294967295
 80202b4:	f000 b974 	b.w	80205a0 <__aeabi_idiv0>
 80202b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202c0:	f000 f806 	bl	80202d0 <__udivmoddi4>
 80202c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202cc:	b004      	add	sp, #16
 80202ce:	4770      	bx	lr

080202d0 <__udivmoddi4>:
 80202d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202d4:	9d08      	ldr	r5, [sp, #32]
 80202d6:	4604      	mov	r4, r0
 80202d8:	468e      	mov	lr, r1
 80202da:	2b00      	cmp	r3, #0
 80202dc:	d14d      	bne.n	802037a <__udivmoddi4+0xaa>
 80202de:	428a      	cmp	r2, r1
 80202e0:	4694      	mov	ip, r2
 80202e2:	d969      	bls.n	80203b8 <__udivmoddi4+0xe8>
 80202e4:	fab2 f282 	clz	r2, r2
 80202e8:	b152      	cbz	r2, 8020300 <__udivmoddi4+0x30>
 80202ea:	fa01 f302 	lsl.w	r3, r1, r2
 80202ee:	f1c2 0120 	rsb	r1, r2, #32
 80202f2:	fa20 f101 	lsr.w	r1, r0, r1
 80202f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202fa:	ea41 0e03 	orr.w	lr, r1, r3
 80202fe:	4094      	lsls	r4, r2
 8020300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020304:	0c21      	lsrs	r1, r4, #16
 8020306:	fbbe f6f8 	udiv	r6, lr, r8
 802030a:	fa1f f78c 	uxth.w	r7, ip
 802030e:	fb08 e316 	mls	r3, r8, r6, lr
 8020312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020316:	fb06 f107 	mul.w	r1, r6, r7
 802031a:	4299      	cmp	r1, r3
 802031c:	d90a      	bls.n	8020334 <__udivmoddi4+0x64>
 802031e:	eb1c 0303 	adds.w	r3, ip, r3
 8020322:	f106 30ff 	add.w	r0, r6, #4294967295
 8020326:	f080 811f 	bcs.w	8020568 <__udivmoddi4+0x298>
 802032a:	4299      	cmp	r1, r3
 802032c:	f240 811c 	bls.w	8020568 <__udivmoddi4+0x298>
 8020330:	3e02      	subs	r6, #2
 8020332:	4463      	add	r3, ip
 8020334:	1a5b      	subs	r3, r3, r1
 8020336:	b2a4      	uxth	r4, r4
 8020338:	fbb3 f0f8 	udiv	r0, r3, r8
 802033c:	fb08 3310 	mls	r3, r8, r0, r3
 8020340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020344:	fb00 f707 	mul.w	r7, r0, r7
 8020348:	42a7      	cmp	r7, r4
 802034a:	d90a      	bls.n	8020362 <__udivmoddi4+0x92>
 802034c:	eb1c 0404 	adds.w	r4, ip, r4
 8020350:	f100 33ff 	add.w	r3, r0, #4294967295
 8020354:	f080 810a 	bcs.w	802056c <__udivmoddi4+0x29c>
 8020358:	42a7      	cmp	r7, r4
 802035a:	f240 8107 	bls.w	802056c <__udivmoddi4+0x29c>
 802035e:	4464      	add	r4, ip
 8020360:	3802      	subs	r0, #2
 8020362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020366:	1be4      	subs	r4, r4, r7
 8020368:	2600      	movs	r6, #0
 802036a:	b11d      	cbz	r5, 8020374 <__udivmoddi4+0xa4>
 802036c:	40d4      	lsrs	r4, r2
 802036e:	2300      	movs	r3, #0
 8020370:	e9c5 4300 	strd	r4, r3, [r5]
 8020374:	4631      	mov	r1, r6
 8020376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802037a:	428b      	cmp	r3, r1
 802037c:	d909      	bls.n	8020392 <__udivmoddi4+0xc2>
 802037e:	2d00      	cmp	r5, #0
 8020380:	f000 80ef 	beq.w	8020562 <__udivmoddi4+0x292>
 8020384:	2600      	movs	r6, #0
 8020386:	e9c5 0100 	strd	r0, r1, [r5]
 802038a:	4630      	mov	r0, r6
 802038c:	4631      	mov	r1, r6
 802038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020392:	fab3 f683 	clz	r6, r3
 8020396:	2e00      	cmp	r6, #0
 8020398:	d14a      	bne.n	8020430 <__udivmoddi4+0x160>
 802039a:	428b      	cmp	r3, r1
 802039c:	d302      	bcc.n	80203a4 <__udivmoddi4+0xd4>
 802039e:	4282      	cmp	r2, r0
 80203a0:	f200 80f9 	bhi.w	8020596 <__udivmoddi4+0x2c6>
 80203a4:	1a84      	subs	r4, r0, r2
 80203a6:	eb61 0303 	sbc.w	r3, r1, r3
 80203aa:	2001      	movs	r0, #1
 80203ac:	469e      	mov	lr, r3
 80203ae:	2d00      	cmp	r5, #0
 80203b0:	d0e0      	beq.n	8020374 <__udivmoddi4+0xa4>
 80203b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80203b6:	e7dd      	b.n	8020374 <__udivmoddi4+0xa4>
 80203b8:	b902      	cbnz	r2, 80203bc <__udivmoddi4+0xec>
 80203ba:	deff      	udf	#255	; 0xff
 80203bc:	fab2 f282 	clz	r2, r2
 80203c0:	2a00      	cmp	r2, #0
 80203c2:	f040 8092 	bne.w	80204ea <__udivmoddi4+0x21a>
 80203c6:	eba1 010c 	sub.w	r1, r1, ip
 80203ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203ce:	fa1f fe8c 	uxth.w	lr, ip
 80203d2:	2601      	movs	r6, #1
 80203d4:	0c20      	lsrs	r0, r4, #16
 80203d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203da:	fb07 1113 	mls	r1, r7, r3, r1
 80203de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203e2:	fb0e f003 	mul.w	r0, lr, r3
 80203e6:	4288      	cmp	r0, r1
 80203e8:	d908      	bls.n	80203fc <__udivmoddi4+0x12c>
 80203ea:	eb1c 0101 	adds.w	r1, ip, r1
 80203ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80203f2:	d202      	bcs.n	80203fa <__udivmoddi4+0x12a>
 80203f4:	4288      	cmp	r0, r1
 80203f6:	f200 80cb 	bhi.w	8020590 <__udivmoddi4+0x2c0>
 80203fa:	4643      	mov	r3, r8
 80203fc:	1a09      	subs	r1, r1, r0
 80203fe:	b2a4      	uxth	r4, r4
 8020400:	fbb1 f0f7 	udiv	r0, r1, r7
 8020404:	fb07 1110 	mls	r1, r7, r0, r1
 8020408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 802040c:	fb0e fe00 	mul.w	lr, lr, r0
 8020410:	45a6      	cmp	lr, r4
 8020412:	d908      	bls.n	8020426 <__udivmoddi4+0x156>
 8020414:	eb1c 0404 	adds.w	r4, ip, r4
 8020418:	f100 31ff 	add.w	r1, r0, #4294967295
 802041c:	d202      	bcs.n	8020424 <__udivmoddi4+0x154>
 802041e:	45a6      	cmp	lr, r4
 8020420:	f200 80bb 	bhi.w	802059a <__udivmoddi4+0x2ca>
 8020424:	4608      	mov	r0, r1
 8020426:	eba4 040e 	sub.w	r4, r4, lr
 802042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802042e:	e79c      	b.n	802036a <__udivmoddi4+0x9a>
 8020430:	f1c6 0720 	rsb	r7, r6, #32
 8020434:	40b3      	lsls	r3, r6
 8020436:	fa22 fc07 	lsr.w	ip, r2, r7
 802043a:	ea4c 0c03 	orr.w	ip, ip, r3
 802043e:	fa20 f407 	lsr.w	r4, r0, r7
 8020442:	fa01 f306 	lsl.w	r3, r1, r6
 8020446:	431c      	orrs	r4, r3
 8020448:	40f9      	lsrs	r1, r7
 802044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802044e:	fa00 f306 	lsl.w	r3, r0, r6
 8020452:	fbb1 f8f9 	udiv	r8, r1, r9
 8020456:	0c20      	lsrs	r0, r4, #16
 8020458:	fa1f fe8c 	uxth.w	lr, ip
 802045c:	fb09 1118 	mls	r1, r9, r8, r1
 8020460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020464:	fb08 f00e 	mul.w	r0, r8, lr
 8020468:	4288      	cmp	r0, r1
 802046a:	fa02 f206 	lsl.w	r2, r2, r6
 802046e:	d90b      	bls.n	8020488 <__udivmoddi4+0x1b8>
 8020470:	eb1c 0101 	adds.w	r1, ip, r1
 8020474:	f108 3aff 	add.w	sl, r8, #4294967295
 8020478:	f080 8088 	bcs.w	802058c <__udivmoddi4+0x2bc>
 802047c:	4288      	cmp	r0, r1
 802047e:	f240 8085 	bls.w	802058c <__udivmoddi4+0x2bc>
 8020482:	f1a8 0802 	sub.w	r8, r8, #2
 8020486:	4461      	add	r1, ip
 8020488:	1a09      	subs	r1, r1, r0
 802048a:	b2a4      	uxth	r4, r4
 802048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020490:	fb09 1110 	mls	r1, r9, r0, r1
 8020494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020498:	fb00 fe0e 	mul.w	lr, r0, lr
 802049c:	458e      	cmp	lr, r1
 802049e:	d908      	bls.n	80204b2 <__udivmoddi4+0x1e2>
 80204a0:	eb1c 0101 	adds.w	r1, ip, r1
 80204a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80204a8:	d26c      	bcs.n	8020584 <__udivmoddi4+0x2b4>
 80204aa:	458e      	cmp	lr, r1
 80204ac:	d96a      	bls.n	8020584 <__udivmoddi4+0x2b4>
 80204ae:	3802      	subs	r0, #2
 80204b0:	4461      	add	r1, ip
 80204b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80204b6:	fba0 9402 	umull	r9, r4, r0, r2
 80204ba:	eba1 010e 	sub.w	r1, r1, lr
 80204be:	42a1      	cmp	r1, r4
 80204c0:	46c8      	mov	r8, r9
 80204c2:	46a6      	mov	lr, r4
 80204c4:	d356      	bcc.n	8020574 <__udivmoddi4+0x2a4>
 80204c6:	d053      	beq.n	8020570 <__udivmoddi4+0x2a0>
 80204c8:	b15d      	cbz	r5, 80204e2 <__udivmoddi4+0x212>
 80204ca:	ebb3 0208 	subs.w	r2, r3, r8
 80204ce:	eb61 010e 	sbc.w	r1, r1, lr
 80204d2:	fa01 f707 	lsl.w	r7, r1, r7
 80204d6:	fa22 f306 	lsr.w	r3, r2, r6
 80204da:	40f1      	lsrs	r1, r6
 80204dc:	431f      	orrs	r7, r3
 80204de:	e9c5 7100 	strd	r7, r1, [r5]
 80204e2:	2600      	movs	r6, #0
 80204e4:	4631      	mov	r1, r6
 80204e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204ea:	f1c2 0320 	rsb	r3, r2, #32
 80204ee:	40d8      	lsrs	r0, r3
 80204f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204f4:	fa21 f303 	lsr.w	r3, r1, r3
 80204f8:	4091      	lsls	r1, r2
 80204fa:	4301      	orrs	r1, r0
 80204fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020500:	fa1f fe8c 	uxth.w	lr, ip
 8020504:	fbb3 f0f7 	udiv	r0, r3, r7
 8020508:	fb07 3610 	mls	r6, r7, r0, r3
 802050c:	0c0b      	lsrs	r3, r1, #16
 802050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020512:	fb00 f60e 	mul.w	r6, r0, lr
 8020516:	429e      	cmp	r6, r3
 8020518:	fa04 f402 	lsl.w	r4, r4, r2
 802051c:	d908      	bls.n	8020530 <__udivmoddi4+0x260>
 802051e:	eb1c 0303 	adds.w	r3, ip, r3
 8020522:	f100 38ff 	add.w	r8, r0, #4294967295
 8020526:	d22f      	bcs.n	8020588 <__udivmoddi4+0x2b8>
 8020528:	429e      	cmp	r6, r3
 802052a:	d92d      	bls.n	8020588 <__udivmoddi4+0x2b8>
 802052c:	3802      	subs	r0, #2
 802052e:	4463      	add	r3, ip
 8020530:	1b9b      	subs	r3, r3, r6
 8020532:	b289      	uxth	r1, r1
 8020534:	fbb3 f6f7 	udiv	r6, r3, r7
 8020538:	fb07 3316 	mls	r3, r7, r6, r3
 802053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020540:	fb06 f30e 	mul.w	r3, r6, lr
 8020544:	428b      	cmp	r3, r1
 8020546:	d908      	bls.n	802055a <__udivmoddi4+0x28a>
 8020548:	eb1c 0101 	adds.w	r1, ip, r1
 802054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020550:	d216      	bcs.n	8020580 <__udivmoddi4+0x2b0>
 8020552:	428b      	cmp	r3, r1
 8020554:	d914      	bls.n	8020580 <__udivmoddi4+0x2b0>
 8020556:	3e02      	subs	r6, #2
 8020558:	4461      	add	r1, ip
 802055a:	1ac9      	subs	r1, r1, r3
 802055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020560:	e738      	b.n	80203d4 <__udivmoddi4+0x104>
 8020562:	462e      	mov	r6, r5
 8020564:	4628      	mov	r0, r5
 8020566:	e705      	b.n	8020374 <__udivmoddi4+0xa4>
 8020568:	4606      	mov	r6, r0
 802056a:	e6e3      	b.n	8020334 <__udivmoddi4+0x64>
 802056c:	4618      	mov	r0, r3
 802056e:	e6f8      	b.n	8020362 <__udivmoddi4+0x92>
 8020570:	454b      	cmp	r3, r9
 8020572:	d2a9      	bcs.n	80204c8 <__udivmoddi4+0x1f8>
 8020574:	ebb9 0802 	subs.w	r8, r9, r2
 8020578:	eb64 0e0c 	sbc.w	lr, r4, ip
 802057c:	3801      	subs	r0, #1
 802057e:	e7a3      	b.n	80204c8 <__udivmoddi4+0x1f8>
 8020580:	4646      	mov	r6, r8
 8020582:	e7ea      	b.n	802055a <__udivmoddi4+0x28a>
 8020584:	4620      	mov	r0, r4
 8020586:	e794      	b.n	80204b2 <__udivmoddi4+0x1e2>
 8020588:	4640      	mov	r0, r8
 802058a:	e7d1      	b.n	8020530 <__udivmoddi4+0x260>
 802058c:	46d0      	mov	r8, sl
 802058e:	e77b      	b.n	8020488 <__udivmoddi4+0x1b8>
 8020590:	3b02      	subs	r3, #2
 8020592:	4461      	add	r1, ip
 8020594:	e732      	b.n	80203fc <__udivmoddi4+0x12c>
 8020596:	4630      	mov	r0, r6
 8020598:	e709      	b.n	80203ae <__udivmoddi4+0xde>
 802059a:	4464      	add	r4, ip
 802059c:	3802      	subs	r0, #2
 802059e:	e742      	b.n	8020426 <__udivmoddi4+0x156>

080205a0 <__aeabi_idiv0>:
 80205a0:	4770      	bx	lr
 80205a2:	bf00      	nop

080205a4 <HAL_GPIO_EXTI_Callback>:
uint8_t RF_NIRQ;

//========================================================================
void HAL_GPIO_EXTI_Callback ( uint16_t GPIO_Pin )
//========================================================================
{
 80205a4:	b580      	push	{r7, lr}
 80205a6:	b084      	sub	sp, #16
 80205a8:	af00      	add	r7, sp, #0
 80205aa:	4603      	mov	r3, r0
 80205ac:	80fb      	strh	r3, [r7, #6]
    uint8_t st;

//    printf( " HAL_GPIO_EXTI_Callback\n" );

    st = HAL_GPIO_ReadPin ( RF_INT_GPIO_Port, RF_INT_Pin );
 80205ae:	2110      	movs	r1, #16
 80205b0:	4809      	ldr	r0, [pc, #36]	; (80205d8 <HAL_GPIO_EXTI_Callback+0x34>)
 80205b2:	f002 ff9b 	bl	80234ec <HAL_GPIO_ReadPin>
 80205b6:	4603      	mov	r3, r0
 80205b8:	73fb      	strb	r3, [r7, #15]
    if ( st )	//	rising edge
 80205ba:	7bfb      	ldrb	r3, [r7, #15]
 80205bc:	2b00      	cmp	r3, #0
 80205be:	d003      	beq.n	80205c8 <HAL_GPIO_EXTI_Callback+0x24>
    {
        RF_NIRQ = TRUE;
 80205c0:	4b06      	ldr	r3, [pc, #24]	; (80205dc <HAL_GPIO_EXTI_Callback+0x38>)
 80205c2:	2201      	movs	r2, #1
 80205c4:	701a      	strb	r2, [r3, #0]
    }
    else		//	falling edge
    {
        RF_NIRQ = FALSE;
    }
}
 80205c6:	e002      	b.n	80205ce <HAL_GPIO_EXTI_Callback+0x2a>
        RF_NIRQ = FALSE;
 80205c8:	4b04      	ldr	r3, [pc, #16]	; (80205dc <HAL_GPIO_EXTI_Callback+0x38>)
 80205ca:	2200      	movs	r2, #0
 80205cc:	701a      	strb	r2, [r3, #0]
}
 80205ce:	bf00      	nop
 80205d0:	3710      	adds	r7, #16
 80205d2:	46bd      	mov	sp, r7
 80205d4:	bd80      	pop	{r7, pc}
 80205d6:	bf00      	nop
 80205d8:	40020800 	.word	0x40020800
 80205dc:	20001224 	.word	0x20001224

080205e0 <LoopProcMain>:

int g_bEnIWDGStat = 1;		//	WatchDog Stat Enable
//========================================================================
void LoopProcMain( int nTick )
//========================================================================
{
 80205e0:	b480      	push	{r7}
 80205e2:	b083      	sub	sp, #12
 80205e4:	af00      	add	r7, sp, #0
 80205e6:	6078      	str	r0, [r7, #4]
	if ( g_bEnIWDGStat )
 80205e8:	4b07      	ldr	r3, [pc, #28]	; (8020608 <LoopProcMain+0x28>)
 80205ea:	681b      	ldr	r3, [r3, #0]
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	d004      	beq.n	80205fa <LoopProcMain+0x1a>
	{
		//	Watchdog Reload
		__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 80205f0:	4b06      	ldr	r3, [pc, #24]	; (802060c <LoopProcMain+0x2c>)
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80205f8:	601a      	str	r2, [r3, #0]
//	{
//		char *sTest = "USB 가나다라\n\r";
//		CDC_Transmit_FS(sTest, strlen(sTest) + 1);
//		s_nTick = nTick;
//	}
}
 80205fa:	bf00      	nop
 80205fc:	370c      	adds	r7, #12
 80205fe:	46bd      	mov	sp, r7
 8020600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020604:	4770      	bx	lr
 8020606:	bf00      	nop
 8020608:	20000000 	.word	0x20000000
 802060c:	20000fe8 	.word	0x20000fe8

08020610 <MX_IWDG_Disable>:
#endif

//========================================================================
void MX_IWDG_Disable( void )
//========================================================================
{
 8020610:	b480      	push	{r7}
 8020612:	af00      	add	r7, sp, #0
	//	iWdg : iWatchdog의 경우 처음 시작 이후에 Stop 불가.
	//			-> Reset이후에만 종료됨.
//	IWDG_DISABLE_WRITE_ACCESS( &hiwdg );
}
 8020614:	bf00      	nop
 8020616:	46bd      	mov	sp, r7
 8020618:	f85d 7b04 	ldr.w	r7, [sp], #4
 802061c:	4770      	bx	lr
	...

08020620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020620:	b580      	push	{r7, lr}
 8020622:	b082      	sub	sp, #8
 8020624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020626:	f001 fa69 	bl	8021afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802062a:	f000 f86d 	bl	8020708 <SystemClock_Config>
#else	//	Application

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802062e:	f000 fb43 	bl	8020cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8020632:	f000 fafb 	bl	8020c2c <MX_DMA_Init>
  MX_I2C1_Init();
 8020636:	f000 f93b 	bl	80208b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 802063a:	f000 f9dd 	bl	80209f8 <MX_SPI1_Init>
  MX_SPI2_Init();
 802063e:	f000 fa11 	bl	8020a64 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8020642:	f000 fa9f 	bl	8020b84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8020646:	f000 fac7 	bl	8020bd8 <MX_USART2_UART_Init>
  MX_I2S3_Init();
 802064a:	f000 f98d 	bl	8020968 <MX_I2S3_Init>
  MX_TIM3_Init();
 802064e:	f000 fa41 	bl	8020ad4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8020652:	f000 f8db 	bl	802080c <MX_ADC1_Init>
  MX_I2C3_Init();
 8020656:	f000 f959 	bl	802090c <MX_I2C3_Init>
  MX_IWDG_Init();
 802065a:	f000 f9b3 	bl	80209c4 <MX_IWDG_Init>
  MX_USB_DEVICE_Init();
 802065e:	f015 ff91 	bl	8036584 <MX_USB_DEVICE_Init>
	//========================================================================
	//    Start PWM

	//    I2S MCLK - 12 MHz
  	//		72000000 / 3 / 2 = 12000000 ( 12MHz ) - MCLK ( MAX9860+ )
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_2 );       //      12 MHz
 8020662:	2104      	movs	r1, #4
 8020664:	481f      	ldr	r0, [pc, #124]	; (80206e4 <main+0xc4>)
 8020666:	f007 fca3 	bl	8027fb0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start( &htim3, TIM_CHANNEL_2 );
 802066a:	2104      	movs	r1, #4
 802066c:	481d      	ldr	r0, [pc, #116]	; (80206e4 <main+0xc4>)
 802066e:	f008 f948 	bl	8028902 <HAL_TIMEx_PWMN_Start>

	//========================================================================
	//    Initial

	//	Serial
	SerialInit( &huart1, &huart2 );   //  Init Serial Handle
 8020672:	491d      	ldr	r1, [pc, #116]	; (80206e8 <main+0xc8>)
 8020674:	481d      	ldr	r0, [pc, #116]	; (80206ec <main+0xcc>)
 8020676:	f013 ff49 	bl	803450c <SerialInit>
	//SerialInit( NULL, &huart2 );   //  Init Serial Handle
	setbuf ( stdout, NULL );		            //	1024 byte buffer clear
 802067a:	4b1d      	ldr	r3, [pc, #116]	; (80206f0 <main+0xd0>)
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	689b      	ldr	r3, [r3, #8]
 8020680:	2100      	movs	r1, #0
 8020682:	4618      	mov	r0, r3
 8020684:	f016 ff26 	bl	80374d4 <setbuf>
	//  setvbuf ( stdout, NULL, _IOLBF, NULL );	//	Line Buffer
	setvbuf ( stdout, NULL, _IONBF, NULL );	//	No Buffer
 8020688:	4b19      	ldr	r3, [pc, #100]	; (80206f0 <main+0xd0>)
 802068a:	681b      	ldr	r3, [r3, #0]
 802068c:	6898      	ldr	r0, [r3, #8]
 802068e:	2300      	movs	r3, #0
 8020690:	2202      	movs	r2, #2
 8020692:	2100      	movs	r1, #0
 8020694:	f016 ff26 	bl	80374e4 <setvbuf>

	printf( "%s(%d) - Start\n", __func__, __LINE__ );
 8020698:	22fd      	movs	r2, #253	; 0xfd
 802069a:	4916      	ldr	r1, [pc, #88]	; (80206f4 <main+0xd4>)
 802069c:	4816      	ldr	r0, [pc, #88]	; (80206f8 <main+0xd8>)
 802069e:	f016 fdf9 	bl	8037294 <iprintf>
#else	//	RFM

	//========================================================================
	//    RFM Main Routine

	RFM_main();
 80206a2:	f013 fad3 	bl	8033c4c <RFM_main>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	nCurrTick = HAL_GetTick();
 80206a6:	f001 fa5f 	bl	8021b68 <HAL_GetTick>
 80206aa:	4603      	mov	r3, r0
 80206ac:	607b      	str	r3, [r7, #4]

	LoopProcKey( nCurrTick );
 80206ae:	687b      	ldr	r3, [r7, #4]
 80206b0:	4618      	mov	r0, r3
 80206b2:	f011 f843 	bl	803173c <LoopProcKey>

	if ( ( nCurrTick - nLedTick ) >= 1000 )
 80206b6:	4b11      	ldr	r3, [pc, #68]	; (80206fc <main+0xdc>)
 80206b8:	681b      	ldr	r3, [r3, #0]
 80206ba:	687a      	ldr	r2, [r7, #4]
 80206bc:	1ad3      	subs	r3, r2, r3
 80206be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80206c2:	dbf0      	blt.n	80206a6 <main+0x86>
	{
	    HAL_GPIO_TogglePin( LED_ST_GPIO_Port, LED_ST_Pin );
 80206c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80206c8:	480d      	ldr	r0, [pc, #52]	; (8020700 <main+0xe0>)
 80206ca:	f002 ff40 	bl	802354e <HAL_GPIO_TogglePin>

	    printf( "%s(%d) - Loop(%d)\n", __func__, __LINE__, nCurrTick );
 80206ce:	687b      	ldr	r3, [r7, #4]
 80206d0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80206d4:	4907      	ldr	r1, [pc, #28]	; (80206f4 <main+0xd4>)
 80206d6:	480b      	ldr	r0, [pc, #44]	; (8020704 <main+0xe4>)
 80206d8:	f016 fddc 	bl	8037294 <iprintf>

	    nLedTick = nCurrTick;
 80206dc:	4a07      	ldr	r2, [pc, #28]	; (80206fc <main+0xdc>)
 80206de:	687b      	ldr	r3, [r7, #4]
 80206e0:	6013      	str	r3, [r2, #0]
	nCurrTick = HAL_GetTick();
 80206e2:	e7e0      	b.n	80206a6 <main+0x86>
 80206e4:	20001164 	.word	0x20001164
 80206e8:	200011e4 	.word	0x200011e4
 80206ec:	200011a4 	.word	0x200011a4
 80206f0:	20000d70 	.word	0x20000d70
 80206f4:	0803b95c 	.word	0x0803b95c
 80206f8:	08039510 	.word	0x08039510
 80206fc:	20001228 	.word	0x20001228
 8020700:	40020c00 	.word	0x40020c00
 8020704:	08039520 	.word	0x08039520

08020708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020708:	b580      	push	{r7, lr}
 802070a:	b098      	sub	sp, #96	; 0x60
 802070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802070e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020712:	2230      	movs	r2, #48	; 0x30
 8020714:	2100      	movs	r1, #0
 8020716:	4618      	mov	r0, r3
 8020718:	f016 fcd4 	bl	80370c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802071c:	f107 031c 	add.w	r3, r7, #28
 8020720:	2200      	movs	r2, #0
 8020722:	601a      	str	r2, [r3, #0]
 8020724:	605a      	str	r2, [r3, #4]
 8020726:	609a      	str	r2, [r3, #8]
 8020728:	60da      	str	r2, [r3, #12]
 802072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802072c:	f107 030c 	add.w	r3, r7, #12
 8020730:	2200      	movs	r2, #0
 8020732:	601a      	str	r2, [r3, #0]
 8020734:	605a      	str	r2, [r3, #4]
 8020736:	609a      	str	r2, [r3, #8]
 8020738:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 802073a:	2300      	movs	r3, #0
 802073c:	60bb      	str	r3, [r7, #8]
 802073e:	4b31      	ldr	r3, [pc, #196]	; (8020804 <SystemClock_Config+0xfc>)
 8020740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020742:	4a30      	ldr	r2, [pc, #192]	; (8020804 <SystemClock_Config+0xfc>)
 8020744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020748:	6413      	str	r3, [r2, #64]	; 0x40
 802074a:	4b2e      	ldr	r3, [pc, #184]	; (8020804 <SystemClock_Config+0xfc>)
 802074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020752:	60bb      	str	r3, [r7, #8]
 8020754:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020756:	2300      	movs	r3, #0
 8020758:	607b      	str	r3, [r7, #4]
 802075a:	4b2b      	ldr	r3, [pc, #172]	; (8020808 <SystemClock_Config+0x100>)
 802075c:	681b      	ldr	r3, [r3, #0]
 802075e:	4a2a      	ldr	r2, [pc, #168]	; (8020808 <SystemClock_Config+0x100>)
 8020760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020764:	6013      	str	r3, [r2, #0]
 8020766:	4b28      	ldr	r3, [pc, #160]	; (8020808 <SystemClock_Config+0x100>)
 8020768:	681b      	ldr	r3, [r3, #0]
 802076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802076e:	607b      	str	r3, [r7, #4]
 8020770:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8020772:	2309      	movs	r3, #9
 8020774:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8020776:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 802077a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 802077c:	2301      	movs	r3, #1
 802077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020780:	2302      	movs	r3, #2
 8020782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020784:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8020788:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 15;
 802078a:	230f      	movs	r3, #15
 802078c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 802078e:	2348      	movs	r3, #72	; 0x48
 8020790:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020792:	2302      	movs	r3, #2
 8020794:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8020796:	2303      	movs	r3, #3
 8020798:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802079a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802079e:	4618      	mov	r0, r3
 80207a0:	f006 fa42 	bl	8026c28 <HAL_RCC_OscConfig>
 80207a4:	4603      	mov	r3, r0
 80207a6:	2b00      	cmp	r3, #0
 80207a8:	d001      	beq.n	80207ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80207aa:	f000 fbc9 	bl	8020f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80207ae:	230f      	movs	r3, #15
 80207b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80207b2:	2302      	movs	r3, #2
 80207b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80207b6:	2300      	movs	r3, #0
 80207b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80207ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80207be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80207c0:	2300      	movs	r3, #0
 80207c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80207c4:	f107 031c 	add.w	r3, r7, #28
 80207c8:	2102      	movs	r1, #2
 80207ca:	4618      	mov	r0, r3
 80207cc:	f006 fc9a 	bl	8027104 <HAL_RCC_ClockConfig>
 80207d0:	4603      	mov	r3, r0
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d001      	beq.n	80207da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80207d6:	f000 fbb3 	bl	8020f40 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80207da:	2301      	movs	r3, #1
 80207dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 128;
 80207de:	2380      	movs	r3, #128	; 0x80
 80207e0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 80207e2:	2305      	movs	r3, #5
 80207e4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80207e6:	f107 030c 	add.w	r3, r7, #12
 80207ea:	4618      	mov	r0, r3
 80207ec:	f006 fe9c 	bl	8027528 <HAL_RCCEx_PeriphCLKConfig>
 80207f0:	4603      	mov	r3, r0
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d001      	beq.n	80207fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80207f6:	f000 fba3 	bl	8020f40 <Error_Handler>
  }
}
 80207fa:	bf00      	nop
 80207fc:	3760      	adds	r7, #96	; 0x60
 80207fe:	46bd      	mov	sp, r7
 8020800:	bd80      	pop	{r7, pc}
 8020802:	bf00      	nop
 8020804:	40023800 	.word	0x40023800
 8020808:	40007000 	.word	0x40007000

0802080c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 802080c:	b580      	push	{r7, lr}
 802080e:	b084      	sub	sp, #16
 8020810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8020812:	463b      	mov	r3, r7
 8020814:	2200      	movs	r2, #0
 8020816:	601a      	str	r2, [r3, #0]
 8020818:	605a      	str	r2, [r3, #4]
 802081a:	609a      	str	r2, [r3, #8]
 802081c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 802081e:	4b21      	ldr	r3, [pc, #132]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020820:	4a21      	ldr	r2, [pc, #132]	; (80208a8 <MX_ADC1_Init+0x9c>)
 8020822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8020824:	4b1f      	ldr	r3, [pc, #124]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020826:	2200      	movs	r2, #0
 8020828:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 802082a:	4b1e      	ldr	r3, [pc, #120]	; (80208a4 <MX_ADC1_Init+0x98>)
 802082c:	2200      	movs	r2, #0
 802082e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8020830:	4b1c      	ldr	r3, [pc, #112]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020832:	2200      	movs	r2, #0
 8020834:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8020836:	4b1b      	ldr	r3, [pc, #108]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020838:	2200      	movs	r2, #0
 802083a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 802083c:	4b19      	ldr	r3, [pc, #100]	; (80208a4 <MX_ADC1_Init+0x98>)
 802083e:	2200      	movs	r2, #0
 8020840:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8020844:	4b17      	ldr	r3, [pc, #92]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020846:	2200      	movs	r2, #0
 8020848:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 802084a:	4b16      	ldr	r3, [pc, #88]	; (80208a4 <MX_ADC1_Init+0x98>)
 802084c:	4a17      	ldr	r2, [pc, #92]	; (80208ac <MX_ADC1_Init+0xa0>)
 802084e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8020850:	4b14      	ldr	r3, [pc, #80]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020852:	2200      	movs	r2, #0
 8020854:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8020856:	4b13      	ldr	r3, [pc, #76]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020858:	2201      	movs	r2, #1
 802085a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 802085c:	4b11      	ldr	r3, [pc, #68]	; (80208a4 <MX_ADC1_Init+0x98>)
 802085e:	2200      	movs	r2, #0
 8020860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020864:	4b0f      	ldr	r3, [pc, #60]	; (80208a4 <MX_ADC1_Init+0x98>)
 8020866:	2201      	movs	r2, #1
 8020868:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 802086a:	480e      	ldr	r0, [pc, #56]	; (80208a4 <MX_ADC1_Init+0x98>)
 802086c:	f001 f9ac 	bl	8021bc8 <HAL_ADC_Init>
 8020870:	4603      	mov	r3, r0
 8020872:	2b00      	cmp	r3, #0
 8020874:	d001      	beq.n	802087a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8020876:	f000 fb63 	bl	8020f40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 802087a:	230b      	movs	r3, #11
 802087c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 802087e:	2301      	movs	r3, #1
 8020880:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8020882:	2300      	movs	r3, #0
 8020884:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020886:	463b      	mov	r3, r7
 8020888:	4619      	mov	r1, r3
 802088a:	4806      	ldr	r0, [pc, #24]	; (80208a4 <MX_ADC1_Init+0x98>)
 802088c:	f001 fb38 	bl	8021f00 <HAL_ADC_ConfigChannel>
 8020890:	4603      	mov	r3, r0
 8020892:	2b00      	cmp	r3, #0
 8020894:	d001      	beq.n	802089a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8020896:	f000 fb53 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 802089a:	bf00      	nop
 802089c:	3710      	adds	r7, #16
 802089e:	46bd      	mov	sp, r7
 80208a0:	bd80      	pop	{r7, pc}
 80208a2:	bf00      	nop
 80208a4:	20000df0 	.word	0x20000df0
 80208a8:	40012000 	.word	0x40012000
 80208ac:	0f000001 	.word	0x0f000001

080208b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80208b0:	b580      	push	{r7, lr}
 80208b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80208b4:	4b12      	ldr	r3, [pc, #72]	; (8020900 <MX_I2C1_Init+0x50>)
 80208b6:	4a13      	ldr	r2, [pc, #76]	; (8020904 <MX_I2C1_Init+0x54>)
 80208b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80208ba:	4b11      	ldr	r3, [pc, #68]	; (8020900 <MX_I2C1_Init+0x50>)
 80208bc:	4a12      	ldr	r2, [pc, #72]	; (8020908 <MX_I2C1_Init+0x58>)
 80208be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80208c0:	4b0f      	ldr	r3, [pc, #60]	; (8020900 <MX_I2C1_Init+0x50>)
 80208c2:	2200      	movs	r2, #0
 80208c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80208c6:	4b0e      	ldr	r3, [pc, #56]	; (8020900 <MX_I2C1_Init+0x50>)
 80208c8:	2200      	movs	r2, #0
 80208ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80208cc:	4b0c      	ldr	r3, [pc, #48]	; (8020900 <MX_I2C1_Init+0x50>)
 80208ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80208d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80208d4:	4b0a      	ldr	r3, [pc, #40]	; (8020900 <MX_I2C1_Init+0x50>)
 80208d6:	2200      	movs	r2, #0
 80208d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80208da:	4b09      	ldr	r3, [pc, #36]	; (8020900 <MX_I2C1_Init+0x50>)
 80208dc:	2200      	movs	r2, #0
 80208de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80208e0:	4b07      	ldr	r3, [pc, #28]	; (8020900 <MX_I2C1_Init+0x50>)
 80208e2:	2200      	movs	r2, #0
 80208e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80208e6:	4b06      	ldr	r3, [pc, #24]	; (8020900 <MX_I2C1_Init+0x50>)
 80208e8:	2200      	movs	r2, #0
 80208ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80208ec:	4804      	ldr	r0, [pc, #16]	; (8020900 <MX_I2C1_Init+0x50>)
 80208ee:	f002 fe61 	bl	80235b4 <HAL_I2C_Init>
 80208f2:	4603      	mov	r3, r0
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	d001      	beq.n	80208fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80208f8:	f000 fb22 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80208fc:	bf00      	nop
 80208fe:	bd80      	pop	{r7, pc}
 8020900:	20000e38 	.word	0x20000e38
 8020904:	40005400 	.word	0x40005400
 8020908:	000186a0 	.word	0x000186a0

0802090c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 802090c:	b580      	push	{r7, lr}
 802090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8020910:	4b12      	ldr	r3, [pc, #72]	; (802095c <MX_I2C3_Init+0x50>)
 8020912:	4a13      	ldr	r2, [pc, #76]	; (8020960 <MX_I2C3_Init+0x54>)
 8020914:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8020916:	4b11      	ldr	r3, [pc, #68]	; (802095c <MX_I2C3_Init+0x50>)
 8020918:	4a12      	ldr	r2, [pc, #72]	; (8020964 <MX_I2C3_Init+0x58>)
 802091a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 802091c:	4b0f      	ldr	r3, [pc, #60]	; (802095c <MX_I2C3_Init+0x50>)
 802091e:	2200      	movs	r2, #0
 8020920:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8020922:	4b0e      	ldr	r3, [pc, #56]	; (802095c <MX_I2C3_Init+0x50>)
 8020924:	2200      	movs	r2, #0
 8020926:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020928:	4b0c      	ldr	r3, [pc, #48]	; (802095c <MX_I2C3_Init+0x50>)
 802092a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802092e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020930:	4b0a      	ldr	r3, [pc, #40]	; (802095c <MX_I2C3_Init+0x50>)
 8020932:	2200      	movs	r2, #0
 8020934:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8020936:	4b09      	ldr	r3, [pc, #36]	; (802095c <MX_I2C3_Init+0x50>)
 8020938:	2200      	movs	r2, #0
 802093a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802093c:	4b07      	ldr	r3, [pc, #28]	; (802095c <MX_I2C3_Init+0x50>)
 802093e:	2200      	movs	r2, #0
 8020940:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020942:	4b06      	ldr	r3, [pc, #24]	; (802095c <MX_I2C3_Init+0x50>)
 8020944:	2200      	movs	r2, #0
 8020946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8020948:	4804      	ldr	r0, [pc, #16]	; (802095c <MX_I2C3_Init+0x50>)
 802094a:	f002 fe33 	bl	80235b4 <HAL_I2C_Init>
 802094e:	4603      	mov	r3, r0
 8020950:	2b00      	cmp	r3, #0
 8020952:	d001      	beq.n	8020958 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8020954:	f000 faf4 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8020958:	bf00      	nop
 802095a:	bd80      	pop	{r7, pc}
 802095c:	20000e8c 	.word	0x20000e8c
 8020960:	40005c00 	.word	0x40005c00
 8020964:	00061a80 	.word	0x00061a80

08020968 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8020968:	b580      	push	{r7, lr}
 802096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 802096c:	4b13      	ldr	r3, [pc, #76]	; (80209bc <MX_I2S3_Init+0x54>)
 802096e:	4a14      	ldr	r2, [pc, #80]	; (80209c0 <MX_I2S3_Init+0x58>)
 8020970:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8020972:	4b12      	ldr	r3, [pc, #72]	; (80209bc <MX_I2S3_Init+0x54>)
 8020974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020978:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PCM_SHORT;
 802097a:	4b10      	ldr	r3, [pc, #64]	; (80209bc <MX_I2S3_Init+0x54>)
 802097c:	2230      	movs	r2, #48	; 0x30
 802097e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8020980:	4b0e      	ldr	r3, [pc, #56]	; (80209bc <MX_I2S3_Init+0x54>)
 8020982:	2201      	movs	r2, #1
 8020984:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8020986:	4b0d      	ldr	r3, [pc, #52]	; (80209bc <MX_I2S3_Init+0x54>)
 8020988:	2200      	movs	r2, #0
 802098a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 802098c:	4b0b      	ldr	r3, [pc, #44]	; (80209bc <MX_I2S3_Init+0x54>)
 802098e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8020992:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8020994:	4b09      	ldr	r3, [pc, #36]	; (80209bc <MX_I2S3_Init+0x54>)
 8020996:	2200      	movs	r2, #0
 8020998:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 802099a:	4b08      	ldr	r3, [pc, #32]	; (80209bc <MX_I2S3_Init+0x54>)
 802099c:	2200      	movs	r2, #0
 802099e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80209a0:	4b06      	ldr	r3, [pc, #24]	; (80209bc <MX_I2S3_Init+0x54>)
 80209a2:	2201      	movs	r2, #1
 80209a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80209a6:	4805      	ldr	r0, [pc, #20]	; (80209bc <MX_I2S3_Init+0x54>)
 80209a8:	f004 f872 	bl	8024a90 <HAL_I2S_Init>
 80209ac:	4603      	mov	r3, r0
 80209ae:	2b00      	cmp	r3, #0
 80209b0:	d001      	beq.n	80209b6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80209b2:	f000 fac5 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80209b6:	bf00      	nop
 80209b8:	bd80      	pop	{r7, pc}
 80209ba:	bf00      	nop
 80209bc:	20000ee0 	.word	0x20000ee0
 80209c0:	40003c00 	.word	0x40003c00

080209c4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80209c4:	b580      	push	{r7, lr}
 80209c6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80209c8:	4b09      	ldr	r3, [pc, #36]	; (80209f0 <MX_IWDG_Init+0x2c>)
 80209ca:	4a0a      	ldr	r2, [pc, #40]	; (80209f4 <MX_IWDG_Init+0x30>)
 80209cc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 80209ce:	4b08      	ldr	r3, [pc, #32]	; (80209f0 <MX_IWDG_Init+0x2c>)
 80209d0:	2205      	movs	r2, #5
 80209d2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 80209d4:	4b06      	ldr	r3, [pc, #24]	; (80209f0 <MX_IWDG_Init+0x2c>)
 80209d6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80209da:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80209dc:	4804      	ldr	r0, [pc, #16]	; (80209f0 <MX_IWDG_Init+0x2c>)
 80209de:	f004 ff67 	bl	80258b0 <HAL_IWDG_Init>
 80209e2:	4603      	mov	r3, r0
 80209e4:	2b00      	cmp	r3, #0
 80209e6:	d001      	beq.n	80209ec <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80209e8:	f000 faaa 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80209ec:	bf00      	nop
 80209ee:	bd80      	pop	{r7, pc}
 80209f0:	20000fe8 	.word	0x20000fe8
 80209f4:	40003000 	.word	0x40003000

080209f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80209f8:	b580      	push	{r7, lr}
 80209fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80209fc:	4b17      	ldr	r3, [pc, #92]	; (8020a5c <MX_SPI1_Init+0x64>)
 80209fe:	4a18      	ldr	r2, [pc, #96]	; (8020a60 <MX_SPI1_Init+0x68>)
 8020a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8020a02:	4b16      	ldr	r3, [pc, #88]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8020a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8020a0a:	4b14      	ldr	r3, [pc, #80]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8020a10:	4b12      	ldr	r3, [pc, #72]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a12:	2200      	movs	r2, #0
 8020a14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8020a16:	4b11      	ldr	r3, [pc, #68]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a18:	2200      	movs	r2, #0
 8020a1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8020a1c:	4b0f      	ldr	r3, [pc, #60]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a1e:	2200      	movs	r2, #0
 8020a20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8020a22:	4b0e      	ldr	r3, [pc, #56]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020a28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8020a2a:	4b0c      	ldr	r3, [pc, #48]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a2c:	2210      	movs	r2, #16
 8020a2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020a30:	4b0a      	ldr	r3, [pc, #40]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a32:	2200      	movs	r2, #0
 8020a34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8020a36:	4b09      	ldr	r3, [pc, #36]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a38:	2200      	movs	r2, #0
 8020a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020a3c:	4b07      	ldr	r3, [pc, #28]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a3e:	2200      	movs	r2, #0
 8020a40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8020a42:	4b06      	ldr	r3, [pc, #24]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a44:	220a      	movs	r2, #10
 8020a46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8020a48:	4804      	ldr	r0, [pc, #16]	; (8020a5c <MX_SPI1_Init+0x64>)
 8020a4a:	f006 ff7b 	bl	8027944 <HAL_SPI_Init>
 8020a4e:	4603      	mov	r3, r0
 8020a50:	2b00      	cmp	r3, #0
 8020a52:	d001      	beq.n	8020a58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8020a54:	f000 fa74 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8020a58:	bf00      	nop
 8020a5a:	bd80      	pop	{r7, pc}
 8020a5c:	20000ff4 	.word	0x20000ff4
 8020a60:	40013000 	.word	0x40013000

08020a64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8020a64:	b580      	push	{r7, lr}
 8020a66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8020a68:	4b18      	ldr	r3, [pc, #96]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a6a:	4a19      	ldr	r2, [pc, #100]	; (8020ad0 <MX_SPI2_Init+0x6c>)
 8020a6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8020a6e:	4b17      	ldr	r3, [pc, #92]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8020a74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8020a76:	4b15      	ldr	r3, [pc, #84]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a78:	2200      	movs	r2, #0
 8020a7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8020a7c:	4b13      	ldr	r3, [pc, #76]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020a82:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8020a84:	4b11      	ldr	r3, [pc, #68]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a86:	2202      	movs	r2, #2
 8020a88:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8020a8a:	4b10      	ldr	r3, [pc, #64]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a8c:	2201      	movs	r2, #1
 8020a8e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8020a90:	4b0e      	ldr	r3, [pc, #56]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020a96:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8020a98:	4b0c      	ldr	r3, [pc, #48]	; (8020acc <MX_SPI2_Init+0x68>)
 8020a9a:	2228      	movs	r2, #40	; 0x28
 8020a9c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020a9e:	4b0b      	ldr	r3, [pc, #44]	; (8020acc <MX_SPI2_Init+0x68>)
 8020aa0:	2200      	movs	r2, #0
 8020aa2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8020aa4:	4b09      	ldr	r3, [pc, #36]	; (8020acc <MX_SPI2_Init+0x68>)
 8020aa6:	2200      	movs	r2, #0
 8020aa8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020aaa:	4b08      	ldr	r3, [pc, #32]	; (8020acc <MX_SPI2_Init+0x68>)
 8020aac:	2200      	movs	r2, #0
 8020aae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8020ab0:	4b06      	ldr	r3, [pc, #24]	; (8020acc <MX_SPI2_Init+0x68>)
 8020ab2:	220a      	movs	r2, #10
 8020ab4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8020ab6:	4805      	ldr	r0, [pc, #20]	; (8020acc <MX_SPI2_Init+0x68>)
 8020ab8:	f006 ff44 	bl	8027944 <HAL_SPI_Init>
 8020abc:	4603      	mov	r3, r0
 8020abe:	2b00      	cmp	r3, #0
 8020ac0:	d001      	beq.n	8020ac6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8020ac2:	f000 fa3d 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8020ac6:	bf00      	nop
 8020ac8:	bd80      	pop	{r7, pc}
 8020aca:	bf00      	nop
 8020acc:	2000104c 	.word	0x2000104c
 8020ad0:	40003800 	.word	0x40003800

08020ad4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8020ad4:	b580      	push	{r7, lr}
 8020ad6:	b08a      	sub	sp, #40	; 0x28
 8020ad8:	af00      	add	r7, sp, #0
    //  72000000 / 18 / 2 = 2000000 ( 2MHz )
    //  72000000 / 3 / 2 = 12000000 ( 12MHz ) - MCLK ( MAX9860+ )

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020ada:	f107 0320 	add.w	r3, r7, #32
 8020ade:	2200      	movs	r2, #0
 8020ae0:	601a      	str	r2, [r3, #0]
 8020ae2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8020ae4:	1d3b      	adds	r3, r7, #4
 8020ae6:	2200      	movs	r2, #0
 8020ae8:	601a      	str	r2, [r3, #0]
 8020aea:	605a      	str	r2, [r3, #4]
 8020aec:	609a      	str	r2, [r3, #8]
 8020aee:	60da      	str	r2, [r3, #12]
 8020af0:	611a      	str	r2, [r3, #16]
 8020af2:	615a      	str	r2, [r3, #20]
 8020af4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8020af6:	4b21      	ldr	r3, [pc, #132]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020af8:	4a21      	ldr	r2, [pc, #132]	; (8020b80 <MX_TIM3_Init+0xac>)
 8020afa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8020afc:	4b1f      	ldr	r3, [pc, #124]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020afe:	2202      	movs	r2, #2
 8020b00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020b02:	4b1e      	ldr	r3, [pc, #120]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b04:	2200      	movs	r2, #0
 8020b06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2-1;
 8020b08:	4b1c      	ldr	r3, [pc, #112]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b0a:	2201      	movs	r2, #1
 8020b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020b0e:	4b1b      	ldr	r3, [pc, #108]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b10:	2200      	movs	r2, #0
 8020b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020b14:	4b19      	ldr	r3, [pc, #100]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b16:	2200      	movs	r2, #0
 8020b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8020b1a:	4818      	ldr	r0, [pc, #96]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b1c:	f007 fa1d 	bl	8027f5a <HAL_TIM_PWM_Init>
 8020b20:	4603      	mov	r3, r0
 8020b22:	2b00      	cmp	r3, #0
 8020b24:	d001      	beq.n	8020b2a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8020b26:	f000 fa0b 	bl	8020f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020b2a:	2300      	movs	r3, #0
 8020b2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020b2e:	2300      	movs	r3, #0
 8020b30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8020b32:	f107 0320 	add.w	r3, r7, #32
 8020b36:	4619      	mov	r1, r3
 8020b38:	4810      	ldr	r0, [pc, #64]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b3a:	f007 ff0d 	bl	8028958 <HAL_TIMEx_MasterConfigSynchronization>
 8020b3e:	4603      	mov	r3, r0
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	d001      	beq.n	8020b48 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8020b44:	f000 f9fc 	bl	8020f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8020b48:	2360      	movs	r3, #96	; 0x60
 8020b4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8020b4c:	2301      	movs	r3, #1
 8020b4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8020b50:	2300      	movs	r3, #0
 8020b52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8020b54:	2300      	movs	r3, #0
 8020b56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8020b58:	1d3b      	adds	r3, r7, #4
 8020b5a:	2204      	movs	r2, #4
 8020b5c:	4619      	mov	r1, r3
 8020b5e:	4807      	ldr	r0, [pc, #28]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b60:	f007 fb6c 	bl	802823c <HAL_TIM_PWM_ConfigChannel>
 8020b64:	4603      	mov	r3, r0
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d001      	beq.n	8020b6e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8020b6a:	f000 f9e9 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8020b6e:	4803      	ldr	r0, [pc, #12]	; (8020b7c <MX_TIM3_Init+0xa8>)
 8020b70:	f000 fd2a 	bl	80215c8 <HAL_TIM_MspPostInit>

}
 8020b74:	bf00      	nop
 8020b76:	3728      	adds	r7, #40	; 0x28
 8020b78:	46bd      	mov	sp, r7
 8020b7a:	bd80      	pop	{r7, pc}
 8020b7c:	20001164 	.word	0x20001164
 8020b80:	40000400 	.word	0x40000400

08020b84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020b84:	b580      	push	{r7, lr}
 8020b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020b88:	4b11      	ldr	r3, [pc, #68]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020b8a:	4a12      	ldr	r2, [pc, #72]	; (8020bd4 <MX_USART1_UART_Init+0x50>)
 8020b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020b8e:	4b10      	ldr	r3, [pc, #64]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020b96:	4b0e      	ldr	r3, [pc, #56]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020b98:	2200      	movs	r2, #0
 8020b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020b9c:	4b0c      	ldr	r3, [pc, #48]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020b9e:	2200      	movs	r2, #0
 8020ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020ba2:	4b0b      	ldr	r3, [pc, #44]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020ba4:	2200      	movs	r2, #0
 8020ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020ba8:	4b09      	ldr	r3, [pc, #36]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020baa:	220c      	movs	r2, #12
 8020bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020bae:	4b08      	ldr	r3, [pc, #32]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020bb0:	2200      	movs	r2, #0
 8020bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020bb4:	4b06      	ldr	r3, [pc, #24]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020bb6:	2200      	movs	r2, #0
 8020bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020bba:	4805      	ldr	r0, [pc, #20]	; (8020bd0 <MX_USART1_UART_Init+0x4c>)
 8020bbc:	f007 ff81 	bl	8028ac2 <HAL_UART_Init>
 8020bc0:	4603      	mov	r3, r0
 8020bc2:	2b00      	cmp	r3, #0
 8020bc4:	d001      	beq.n	8020bca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8020bc6:	f000 f9bb 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020bca:	bf00      	nop
 8020bcc:	bd80      	pop	{r7, pc}
 8020bce:	bf00      	nop
 8020bd0:	200011a4 	.word	0x200011a4
 8020bd4:	40011000 	.word	0x40011000

08020bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8020bd8:	b580      	push	{r7, lr}
 8020bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8020bdc:	4b11      	ldr	r3, [pc, #68]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020bde:	4a12      	ldr	r2, [pc, #72]	; (8020c28 <MX_USART2_UART_Init+0x50>)
 8020be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8020be2:	4b10      	ldr	r3, [pc, #64]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8020bea:	4b0e      	ldr	r3, [pc, #56]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020bec:	2200      	movs	r2, #0
 8020bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8020bf0:	4b0c      	ldr	r3, [pc, #48]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020bf2:	2200      	movs	r2, #0
 8020bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8020bf6:	4b0b      	ldr	r3, [pc, #44]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020bf8:	2200      	movs	r2, #0
 8020bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8020bfc:	4b09      	ldr	r3, [pc, #36]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020bfe:	220c      	movs	r2, #12
 8020c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020c02:	4b08      	ldr	r3, [pc, #32]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020c04:	2200      	movs	r2, #0
 8020c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8020c08:	4b06      	ldr	r3, [pc, #24]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020c0a:	2200      	movs	r2, #0
 8020c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8020c0e:	4805      	ldr	r0, [pc, #20]	; (8020c24 <MX_USART2_UART_Init+0x4c>)
 8020c10:	f007 ff57 	bl	8028ac2 <HAL_UART_Init>
 8020c14:	4603      	mov	r3, r0
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d001      	beq.n	8020c1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8020c1a:	f000 f991 	bl	8020f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8020c1e:	bf00      	nop
 8020c20:	bd80      	pop	{r7, pc}
 8020c22:	bf00      	nop
 8020c24:	200011e4 	.word	0x200011e4
 8020c28:	40004400 	.word	0x40004400

08020c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8020c2c:	b580      	push	{r7, lr}
 8020c2e:	b082      	sub	sp, #8
 8020c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020c32:	2300      	movs	r3, #0
 8020c34:	607b      	str	r3, [r7, #4]
 8020c36:	4b1f      	ldr	r3, [pc, #124]	; (8020cb4 <MX_DMA_Init+0x88>)
 8020c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c3a:	4a1e      	ldr	r2, [pc, #120]	; (8020cb4 <MX_DMA_Init+0x88>)
 8020c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8020c40:	6313      	str	r3, [r2, #48]	; 0x30
 8020c42:	4b1c      	ldr	r3, [pc, #112]	; (8020cb4 <MX_DMA_Init+0x88>)
 8020c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020c4a:	607b      	str	r3, [r7, #4]
 8020c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8020c4e:	2300      	movs	r3, #0
 8020c50:	603b      	str	r3, [r7, #0]
 8020c52:	4b18      	ldr	r3, [pc, #96]	; (8020cb4 <MX_DMA_Init+0x88>)
 8020c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c56:	4a17      	ldr	r2, [pc, #92]	; (8020cb4 <MX_DMA_Init+0x88>)
 8020c58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8020c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8020c5e:	4b15      	ldr	r3, [pc, #84]	; (8020cb4 <MX_DMA_Init+0x88>)
 8020c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020c66:	603b      	str	r3, [r7, #0]
 8020c68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8020c6a:	2200      	movs	r2, #0
 8020c6c:	2100      	movs	r1, #0
 8020c6e:	200b      	movs	r0, #11
 8020c70:	f001 fc1c 	bl	80224ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8020c74:	200b      	movs	r0, #11
 8020c76:	f001 fc35 	bl	80224e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8020c7a:	2200      	movs	r2, #0
 8020c7c:	2100      	movs	r1, #0
 8020c7e:	2010      	movs	r0, #16
 8020c80:	f001 fc14 	bl	80224ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8020c84:	2010      	movs	r0, #16
 8020c86:	f001 fc2d 	bl	80224e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8020c8a:	2200      	movs	r2, #0
 8020c8c:	2100      	movs	r1, #0
 8020c8e:	2038      	movs	r0, #56	; 0x38
 8020c90:	f001 fc0c 	bl	80224ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8020c94:	2038      	movs	r0, #56	; 0x38
 8020c96:	f001 fc25 	bl	80224e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8020c9a:	2200      	movs	r2, #0
 8020c9c:	2100      	movs	r1, #0
 8020c9e:	203b      	movs	r0, #59	; 0x3b
 8020ca0:	f001 fc04 	bl	80224ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8020ca4:	203b      	movs	r0, #59	; 0x3b
 8020ca6:	f001 fc1d 	bl	80224e4 <HAL_NVIC_EnableIRQ>

}
 8020caa:	bf00      	nop
 8020cac:	3708      	adds	r7, #8
 8020cae:	46bd      	mov	sp, r7
 8020cb0:	bd80      	pop	{r7, pc}
 8020cb2:	bf00      	nop
 8020cb4:	40023800 	.word	0x40023800

08020cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020cb8:	b580      	push	{r7, lr}
 8020cba:	b08c      	sub	sp, #48	; 0x30
 8020cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020cbe:	f107 031c 	add.w	r3, r7, #28
 8020cc2:	2200      	movs	r2, #0
 8020cc4:	601a      	str	r2, [r3, #0]
 8020cc6:	605a      	str	r2, [r3, #4]
 8020cc8:	609a      	str	r2, [r3, #8]
 8020cca:	60da      	str	r2, [r3, #12]
 8020ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020cce:	2300      	movs	r3, #0
 8020cd0:	61bb      	str	r3, [r7, #24]
 8020cd2:	4b8b      	ldr	r3, [pc, #556]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cd6:	4a8a      	ldr	r2, [pc, #552]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020cd8:	f043 0310 	orr.w	r3, r3, #16
 8020cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8020cde:	4b88      	ldr	r3, [pc, #544]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ce2:	f003 0310 	and.w	r3, r3, #16
 8020ce6:	61bb      	str	r3, [r7, #24]
 8020ce8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020cea:	2300      	movs	r3, #0
 8020cec:	617b      	str	r3, [r7, #20]
 8020cee:	4b84      	ldr	r3, [pc, #528]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cf2:	4a83      	ldr	r2, [pc, #524]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020cf4:	f043 0304 	orr.w	r3, r3, #4
 8020cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8020cfa:	4b81      	ldr	r3, [pc, #516]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cfe:	f003 0304 	and.w	r3, r3, #4
 8020d02:	617b      	str	r3, [r7, #20]
 8020d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020d06:	2300      	movs	r3, #0
 8020d08:	613b      	str	r3, [r7, #16]
 8020d0a:	4b7d      	ldr	r3, [pc, #500]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d0e:	4a7c      	ldr	r2, [pc, #496]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020d14:	6313      	str	r3, [r2, #48]	; 0x30
 8020d16:	4b7a      	ldr	r3, [pc, #488]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020d1e:	613b      	str	r3, [r7, #16]
 8020d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020d22:	2300      	movs	r3, #0
 8020d24:	60fb      	str	r3, [r7, #12]
 8020d26:	4b76      	ldr	r3, [pc, #472]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d2a:	4a75      	ldr	r2, [pc, #468]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d2c:	f043 0301 	orr.w	r3, r3, #1
 8020d30:	6313      	str	r3, [r2, #48]	; 0x30
 8020d32:	4b73      	ldr	r3, [pc, #460]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d36:	f003 0301 	and.w	r3, r3, #1
 8020d3a:	60fb      	str	r3, [r7, #12]
 8020d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020d3e:	2300      	movs	r3, #0
 8020d40:	60bb      	str	r3, [r7, #8]
 8020d42:	4b6f      	ldr	r3, [pc, #444]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d46:	4a6e      	ldr	r2, [pc, #440]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d48:	f043 0302 	orr.w	r3, r3, #2
 8020d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8020d4e:	4b6c      	ldr	r3, [pc, #432]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d52:	f003 0302 	and.w	r3, r3, #2
 8020d56:	60bb      	str	r3, [r7, #8]
 8020d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020d5a:	2300      	movs	r3, #0
 8020d5c:	607b      	str	r3, [r7, #4]
 8020d5e:	4b68      	ldr	r3, [pc, #416]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d62:	4a67      	ldr	r2, [pc, #412]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d64:	f043 0308 	orr.w	r3, r3, #8
 8020d68:	6313      	str	r3, [r2, #48]	; 0x30
 8020d6a:	4b65      	ldr	r3, [pc, #404]	; (8020f00 <MX_GPIO_Init+0x248>)
 8020d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d6e:	f003 0308 	and.w	r3, r3, #8
 8020d72:	607b      	str	r3, [r7, #4]
 8020d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PWR_RF_Pin|PWR_AUDIO_Pin, GPIO_PIN_SET);
 8020d76:	2201      	movs	r2, #1
 8020d78:	210c      	movs	r1, #12
 8020d7a:	4862      	ldr	r0, [pc, #392]	; (8020f04 <MX_GPIO_Init+0x24c>)
 8020d7c:	f002 fbce 	bl	802351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPK_ON_Pin|STANDBY_Pin|AUDIO_ON_Pin|LIGHT_ON_Pin
 8020d80:	2200      	movs	r2, #0
 8020d82:	f647 31a0 	movw	r1, #31648	; 0x7ba0
 8020d86:	485f      	ldr	r0, [pc, #380]	; (8020f04 <MX_GPIO_Init+0x24c>)
 8020d88:	f002 fbc8 	bl	802351c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_ID_Pin|TRN_RST_Pin, GPIO_PIN_RESET);
 8020d8c:	2200      	movs	r2, #0
 8020d8e:	f248 0120 	movw	r1, #32800	; 0x8020
 8020d92:	485d      	ldr	r0, [pc, #372]	; (8020f08 <MX_GPIO_Init+0x250>)
 8020d94:	f002 fbc2 	bl	802351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CSN_GPIO_Port, SPI_CSN_Pin, GPIO_PIN_SET);
 8020d98:	2201      	movs	r2, #1
 8020d9a:	2110      	movs	r1, #16
 8020d9c:	485b      	ldr	r0, [pc, #364]	; (8020f0c <MX_GPIO_Init+0x254>)
 8020d9e:	f002 fbbd 	bl	802351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_EN_Pin|RF_TX_Pin|RF_RX_Pin|LED_ON_A_Pin
 8020da2:	2200      	movs	r2, #0
 8020da4:	f246 1107 	movw	r1, #24839	; 0x6107
 8020da8:	4859      	ldr	r0, [pc, #356]	; (8020f10 <MX_GPIO_Init+0x258>)
 8020daa:	f002 fbb7 	bl	802351c <HAL_GPIO_WritePin>
                          |LED_ON_B_Pin|FLASH_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 8020dae:	2201      	movs	r2, #1
 8020db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8020db4:	4856      	ldr	r0, [pc, #344]	; (8020f10 <MX_GPIO_Init+0x258>)
 8020db6:	f002 fbb1 	bl	802351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_OFF_EN_GPIO_Port, ON_OFF_EN_Pin, GPIO_PIN_SET);
 8020dba:	2201      	movs	r2, #1
 8020dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020dc0:	4854      	ldr	r0, [pc, #336]	; (8020f14 <MX_GPIO_Init+0x25c>)
 8020dc2:	f002 fbab 	bl	802351c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ST_GPIO_Port, LED_ST_Pin, GPIO_PIN_RESET);
 8020dc6:	2200      	movs	r2, #0
 8020dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020dcc:	4851      	ldr	r0, [pc, #324]	; (8020f14 <MX_GPIO_Init+0x25c>)
 8020dce:	f002 fba5 	bl	802351c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWR_RF_Pin PWR_AUDIO_Pin SPK_ON_Pin STANDBY_Pin
                           AUDIO_ON_Pin LIGHT_ON_Pin PE11 PE12
                           PE13 PE14 */
  GPIO_InitStruct.Pin = PWR_RF_Pin|PWR_AUDIO_Pin|SPK_ON_Pin|STANDBY_Pin
 8020dd2:	f647 33ac 	movw	r3, #31660	; 0x7bac
 8020dd6:	61fb      	str	r3, [r7, #28]
                          |AUDIO_ON_Pin|LIGHT_ON_Pin|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020dd8:	2301      	movs	r3, #1
 8020dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020ddc:	2300      	movs	r3, #0
 8020dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020de0:	2300      	movs	r3, #0
 8020de2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8020de4:	f107 031c 	add.w	r3, r7, #28
 8020de8:	4619      	mov	r1, r3
 8020dea:	4846      	ldr	r0, [pc, #280]	; (8020f04 <MX_GPIO_Init+0x24c>)
 8020dec:	f002 f9e2 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO1_Pin OVERRIDE_ON_Pin VDD_3_3V_RF_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin|OVERRIDE_ON_Pin|VDD_3_3V_RF_Pin;
 8020df0:	f240 4341 	movw	r3, #1089	; 0x441
 8020df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020df6:	2300      	movs	r3, #0
 8020df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dfa:	2300      	movs	r3, #0
 8020dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8020dfe:	f107 031c 	add.w	r3, r7, #28
 8020e02:	4619      	mov	r1, r3
 8020e04:	483f      	ldr	r0, [pc, #252]	; (8020f04 <MX_GPIO_Init+0x24c>)
 8020e06:	f002 f9d5 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ID_Pin TRN_RST_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin|TRN_RST_Pin;
 8020e0a:	f248 0320 	movw	r3, #32800	; 0x8020
 8020e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e10:	2301      	movs	r3, #1
 8020e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e14:	2300      	movs	r3, #0
 8020e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e18:	2300      	movs	r3, #0
 8020e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020e1c:	f107 031c 	add.w	r3, r7, #28
 8020e20:	4619      	mov	r1, r3
 8020e22:	4839      	ldr	r0, [pc, #228]	; (8020f08 <MX_GPIO_Init+0x250>)
 8020e24:	f002 f9c6 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_CHRG_Pin */
  GPIO_InitStruct.Pin = BAT_CHRG_Pin;
 8020e28:	2301      	movs	r3, #1
 8020e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020e2c:	2300      	movs	r3, #0
 8020e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e30:	2300      	movs	r3, #0
 8020e32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BAT_CHRG_GPIO_Port, &GPIO_InitStruct);
 8020e34:	f107 031c 	add.w	r3, r7, #28
 8020e38:	4619      	mov	r1, r3
 8020e3a:	4833      	ldr	r0, [pc, #204]	; (8020f08 <MX_GPIO_Init+0x250>)
 8020e3c:	f002 f9ba 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CSN_Pin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin;
 8020e40:	2310      	movs	r3, #16
 8020e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e44:	2301      	movs	r3, #1
 8020e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e48:	2300      	movs	r3, #0
 8020e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8020e4c:	2302      	movs	r3, #2
 8020e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CSN_GPIO_Port, &GPIO_InitStruct);
 8020e50:	f107 031c 	add.w	r3, r7, #28
 8020e54:	4619      	mov	r1, r3
 8020e56:	482d      	ldr	r0, [pc, #180]	; (8020f0c <MX_GPIO_Init+0x254>)
 8020e58:	f002 f9ac 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_INT_Pin */
  GPIO_InitStruct.Pin = RF_INT_Pin;
 8020e5c:	2310      	movs	r3, #16
 8020e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8020e60:	4b2d      	ldr	r3, [pc, #180]	; (8020f18 <MX_GPIO_Init+0x260>)
 8020e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e64:	2300      	movs	r3, #0
 8020e66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RF_INT_GPIO_Port, &GPIO_InitStruct);
 8020e68:	f107 031c 	add.w	r3, r7, #28
 8020e6c:	4619      	mov	r1, r3
 8020e6e:	4826      	ldr	r0, [pc, #152]	; (8020f08 <MX_GPIO_Init+0x250>)
 8020e70:	f002 f9a0 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_EN_Pin RF_TX_Pin RF_RX_Pin LED_ON_A_Pin
                           LED_ON_B_Pin FLASH_ON_Pin */
  GPIO_InitStruct.Pin = RX_EN_Pin|RF_TX_Pin|RF_RX_Pin|LED_ON_A_Pin
 8020e74:	f246 1307 	movw	r3, #24839	; 0x6107
 8020e78:	61fb      	str	r3, [r7, #28]
                          |LED_ON_B_Pin|FLASH_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e7a:	2301      	movs	r3, #1
 8020e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e7e:	2300      	movs	r3, #0
 8020e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e82:	2300      	movs	r3, #0
 8020e84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020e86:	f107 031c 	add.w	r3, r7, #28
 8020e8a:	4619      	mov	r1, r3
 8020e8c:	4820      	ldr	r0, [pc, #128]	; (8020f10 <MX_GPIO_Init+0x258>)
 8020e8e:	f002 f991 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 8020e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e98:	2301      	movs	r3, #1
 8020e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8020e9c:	2301      	movs	r3, #1
 8020e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8020ea0:	2302      	movs	r3, #2
 8020ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8020ea4:	f107 031c 	add.w	r3, r7, #28
 8020ea8:	4619      	mov	r1, r3
 8020eaa:	4819      	ldr	r0, [pc, #100]	; (8020f10 <MX_GPIO_Init+0x258>)
 8020eac:	f002 f982 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_OFF_KEY_Pin DOME1_Pin DOME2_Pin DOME3_Pin
                           DOME4_Pin DOME5_Pin DOME6_Pin SOS_KEY_Pin
                           PTT_KEY_Pin */
  GPIO_InitStruct.Pin = ON_OFF_KEY_Pin|DOME1_Pin|DOME2_Pin|DOME3_Pin
 8020eb0:	f240 23ff 	movw	r3, #767	; 0x2ff
 8020eb4:	61fb      	str	r3, [r7, #28]
                          |DOME4_Pin|DOME5_Pin|DOME6_Pin|SOS_KEY_Pin
                          |PTT_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020eb6:	2300      	movs	r3, #0
 8020eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020eba:	2300      	movs	r3, #0
 8020ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020ebe:	f107 031c 	add.w	r3, r7, #28
 8020ec2:	4619      	mov	r1, r3
 8020ec4:	4813      	ldr	r0, [pc, #76]	; (8020f14 <MX_GPIO_Init+0x25c>)
 8020ec6:	f002 f975 	bl	80231b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_OFF_EN_Pin LED_ST_Pin */
  GPIO_InitStruct.Pin = ON_OFF_EN_Pin|LED_ST_Pin;
 8020eca:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8020ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020ed0:	2301      	movs	r3, #1
 8020ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020ed4:	2300      	movs	r3, #0
 8020ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020ed8:	2300      	movs	r3, #0
 8020eda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020edc:	f107 031c 	add.w	r3, r7, #28
 8020ee0:	4619      	mov	r1, r3
 8020ee2:	480c      	ldr	r0, [pc, #48]	; (8020f14 <MX_GPIO_Init+0x25c>)
 8020ee4:	f002 f966 	bl	80231b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8020ee8:	2200      	movs	r2, #0
 8020eea:	2100      	movs	r1, #0
 8020eec:	200a      	movs	r0, #10
 8020eee:	f001 fadd 	bl	80224ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8020ef2:	200a      	movs	r0, #10
 8020ef4:	f001 faf6 	bl	80224e4 <HAL_NVIC_EnableIRQ>

}
 8020ef8:	bf00      	nop
 8020efa:	3730      	adds	r7, #48	; 0x30
 8020efc:	46bd      	mov	sp, r7
 8020efe:	bd80      	pop	{r7, pc}
 8020f00:	40023800 	.word	0x40023800
 8020f04:	40021000 	.word	0x40021000
 8020f08:	40020800 	.word	0x40020800
 8020f0c:	40020000 	.word	0x40020000
 8020f10:	40020400 	.word	0x40020400
 8020f14:	40020c00 	.word	0x40020c00
 8020f18:	10310000 	.word	0x10310000

08020f1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020f1c:	b580      	push	{r7, lr}
 8020f1e:	b082      	sub	sp, #8
 8020f20:	af00      	add	r7, sp, #0
 8020f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	4a04      	ldr	r2, [pc, #16]	; (8020f3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8020f2a:	4293      	cmp	r3, r2
 8020f2c:	d101      	bne.n	8020f32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020f2e:	f000 fe07 	bl	8021b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020f32:	bf00      	nop
 8020f34:	3708      	adds	r7, #8
 8020f36:	46bd      	mov	sp, r7
 8020f38:	bd80      	pop	{r7, pc}
 8020f3a:	bf00      	nop
 8020f3c:	40010000 	.word	0x40010000

08020f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020f40:	b480      	push	{r7}
 8020f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8020f44:	bf00      	nop
 8020f46:	46bd      	mov	sp, r7
 8020f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f4c:	4770      	bx	lr
	...

08020f50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020f50:	b480      	push	{r7}
 8020f52:	b083      	sub	sp, #12
 8020f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020f56:	2300      	movs	r3, #0
 8020f58:	607b      	str	r3, [r7, #4]
 8020f5a:	4b10      	ldr	r3, [pc, #64]	; (8020f9c <HAL_MspInit+0x4c>)
 8020f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020f5e:	4a0f      	ldr	r2, [pc, #60]	; (8020f9c <HAL_MspInit+0x4c>)
 8020f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020f64:	6453      	str	r3, [r2, #68]	; 0x44
 8020f66:	4b0d      	ldr	r3, [pc, #52]	; (8020f9c <HAL_MspInit+0x4c>)
 8020f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020f6e:	607b      	str	r3, [r7, #4]
 8020f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020f72:	2300      	movs	r3, #0
 8020f74:	603b      	str	r3, [r7, #0]
 8020f76:	4b09      	ldr	r3, [pc, #36]	; (8020f9c <HAL_MspInit+0x4c>)
 8020f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f7a:	4a08      	ldr	r2, [pc, #32]	; (8020f9c <HAL_MspInit+0x4c>)
 8020f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020f80:	6413      	str	r3, [r2, #64]	; 0x40
 8020f82:	4b06      	ldr	r3, [pc, #24]	; (8020f9c <HAL_MspInit+0x4c>)
 8020f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020f8a:	603b      	str	r3, [r7, #0]
 8020f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020f8e:	bf00      	nop
 8020f90:	370c      	adds	r7, #12
 8020f92:	46bd      	mov	sp, r7
 8020f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f98:	4770      	bx	lr
 8020f9a:	bf00      	nop
 8020f9c:	40023800 	.word	0x40023800

08020fa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8020fa0:	b580      	push	{r7, lr}
 8020fa2:	b08a      	sub	sp, #40	; 0x28
 8020fa4:	af00      	add	r7, sp, #0
 8020fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020fa8:	f107 0314 	add.w	r3, r7, #20
 8020fac:	2200      	movs	r2, #0
 8020fae:	601a      	str	r2, [r3, #0]
 8020fb0:	605a      	str	r2, [r3, #4]
 8020fb2:	609a      	str	r2, [r3, #8]
 8020fb4:	60da      	str	r2, [r3, #12]
 8020fb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	4a17      	ldr	r2, [pc, #92]	; (802101c <HAL_ADC_MspInit+0x7c>)
 8020fbe:	4293      	cmp	r3, r2
 8020fc0:	d127      	bne.n	8021012 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	613b      	str	r3, [r7, #16]
 8020fc6:	4b16      	ldr	r3, [pc, #88]	; (8021020 <HAL_ADC_MspInit+0x80>)
 8020fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020fca:	4a15      	ldr	r2, [pc, #84]	; (8021020 <HAL_ADC_MspInit+0x80>)
 8020fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8020fd2:	4b13      	ldr	r3, [pc, #76]	; (8021020 <HAL_ADC_MspInit+0x80>)
 8020fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020fda:	613b      	str	r3, [r7, #16]
 8020fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020fde:	2300      	movs	r3, #0
 8020fe0:	60fb      	str	r3, [r7, #12]
 8020fe2:	4b0f      	ldr	r3, [pc, #60]	; (8021020 <HAL_ADC_MspInit+0x80>)
 8020fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fe6:	4a0e      	ldr	r2, [pc, #56]	; (8021020 <HAL_ADC_MspInit+0x80>)
 8020fe8:	f043 0304 	orr.w	r3, r3, #4
 8020fec:	6313      	str	r3, [r2, #48]	; 0x30
 8020fee:	4b0c      	ldr	r3, [pc, #48]	; (8021020 <HAL_ADC_MspInit+0x80>)
 8020ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ff2:	f003 0304 	and.w	r3, r3, #4
 8020ff6:	60fb      	str	r3, [r7, #12]
 8020ff8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = BAT_ADC_Pin;
 8020ffa:	2302      	movs	r3, #2
 8020ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8020ffe:	2303      	movs	r3, #3
 8021000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021002:	2300      	movs	r3, #0
 8021004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
 8021006:	f107 0314 	add.w	r3, r7, #20
 802100a:	4619      	mov	r1, r3
 802100c:	4805      	ldr	r0, [pc, #20]	; (8021024 <HAL_ADC_MspInit+0x84>)
 802100e:	f002 f8d1 	bl	80231b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8021012:	bf00      	nop
 8021014:	3728      	adds	r7, #40	; 0x28
 8021016:	46bd      	mov	sp, r7
 8021018:	bd80      	pop	{r7, pc}
 802101a:	bf00      	nop
 802101c:	40012000 	.word	0x40012000
 8021020:	40023800 	.word	0x40023800
 8021024:	40020800 	.word	0x40020800

08021028 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8021028:	b580      	push	{r7, lr}
 802102a:	b08c      	sub	sp, #48	; 0x30
 802102c:	af00      	add	r7, sp, #0
 802102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021030:	f107 031c 	add.w	r3, r7, #28
 8021034:	2200      	movs	r2, #0
 8021036:	601a      	str	r2, [r3, #0]
 8021038:	605a      	str	r2, [r3, #4]
 802103a:	609a      	str	r2, [r3, #8]
 802103c:	60da      	str	r2, [r3, #12]
 802103e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8021040:	687b      	ldr	r3, [r7, #4]
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	4a42      	ldr	r2, [pc, #264]	; (8021150 <HAL_I2C_MspInit+0x128>)
 8021046:	4293      	cmp	r3, r2
 8021048:	d12c      	bne.n	80210a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802104a:	2300      	movs	r3, #0
 802104c:	61bb      	str	r3, [r7, #24]
 802104e:	4b41      	ldr	r3, [pc, #260]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 8021050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021052:	4a40      	ldr	r2, [pc, #256]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 8021054:	f043 0302 	orr.w	r3, r3, #2
 8021058:	6313      	str	r3, [r2, #48]	; 0x30
 802105a:	4b3e      	ldr	r3, [pc, #248]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 802105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802105e:	f003 0302 	and.w	r3, r3, #2
 8021062:	61bb      	str	r3, [r7, #24]
 8021064:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021066:	23c0      	movs	r3, #192	; 0xc0
 8021068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802106a:	2312      	movs	r3, #18
 802106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802106e:	2301      	movs	r3, #1
 8021070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021072:	2303      	movs	r3, #3
 8021074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8021076:	2304      	movs	r3, #4
 8021078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802107a:	f107 031c 	add.w	r3, r7, #28
 802107e:	4619      	mov	r1, r3
 8021080:	4835      	ldr	r0, [pc, #212]	; (8021158 <HAL_I2C_MspInit+0x130>)
 8021082:	f002 f897 	bl	80231b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021086:	2300      	movs	r3, #0
 8021088:	617b      	str	r3, [r7, #20]
 802108a:	4b32      	ldr	r3, [pc, #200]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 802108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802108e:	4a31      	ldr	r2, [pc, #196]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 8021090:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8021094:	6413      	str	r3, [r2, #64]	; 0x40
 8021096:	4b2f      	ldr	r3, [pc, #188]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 8021098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802109a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802109e:	617b      	str	r3, [r7, #20]
 80210a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80210a2:	e050      	b.n	8021146 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	681b      	ldr	r3, [r3, #0]
 80210a8:	4a2c      	ldr	r2, [pc, #176]	; (802115c <HAL_I2C_MspInit+0x134>)
 80210aa:	4293      	cmp	r3, r2
 80210ac:	d14b      	bne.n	8021146 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80210ae:	2300      	movs	r3, #0
 80210b0:	613b      	str	r3, [r7, #16]
 80210b2:	4b28      	ldr	r3, [pc, #160]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 80210b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210b6:	4a27      	ldr	r2, [pc, #156]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 80210b8:	f043 0304 	orr.w	r3, r3, #4
 80210bc:	6313      	str	r3, [r2, #48]	; 0x30
 80210be:	4b25      	ldr	r3, [pc, #148]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 80210c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210c2:	f003 0304 	and.w	r3, r3, #4
 80210c6:	613b      	str	r3, [r7, #16]
 80210c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80210ca:	2300      	movs	r3, #0
 80210cc:	60fb      	str	r3, [r7, #12]
 80210ce:	4b21      	ldr	r3, [pc, #132]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 80210d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210d2:	4a20      	ldr	r2, [pc, #128]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 80210d4:	f043 0301 	orr.w	r3, r3, #1
 80210d8:	6313      	str	r3, [r2, #48]	; 0x30
 80210da:	4b1e      	ldr	r3, [pc, #120]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 80210dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210de:	f003 0301 	and.w	r3, r3, #1
 80210e2:	60fb      	str	r3, [r7, #12]
 80210e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80210e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80210ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80210ec:	2312      	movs	r3, #18
 80210ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80210f0:	2301      	movs	r3, #1
 80210f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80210f4:	2303      	movs	r3, #3
 80210f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80210f8:	2304      	movs	r3, #4
 80210fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80210fc:	f107 031c 	add.w	r3, r7, #28
 8021100:	4619      	mov	r1, r3
 8021102:	4817      	ldr	r0, [pc, #92]	; (8021160 <HAL_I2C_MspInit+0x138>)
 8021104:	f002 f856 	bl	80231b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8021108:	f44f 7380 	mov.w	r3, #256	; 0x100
 802110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802110e:	2312      	movs	r3, #18
 8021110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021112:	2301      	movs	r3, #1
 8021114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021116:	2303      	movs	r3, #3
 8021118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802111a:	2304      	movs	r3, #4
 802111c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802111e:	f107 031c 	add.w	r3, r7, #28
 8021122:	4619      	mov	r1, r3
 8021124:	480f      	ldr	r0, [pc, #60]	; (8021164 <HAL_I2C_MspInit+0x13c>)
 8021126:	f002 f845 	bl	80231b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 802112a:	2300      	movs	r3, #0
 802112c:	60bb      	str	r3, [r7, #8]
 802112e:	4b09      	ldr	r3, [pc, #36]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 8021130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021132:	4a08      	ldr	r2, [pc, #32]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 8021134:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021138:	6413      	str	r3, [r2, #64]	; 0x40
 802113a:	4b06      	ldr	r3, [pc, #24]	; (8021154 <HAL_I2C_MspInit+0x12c>)
 802113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802113e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8021142:	60bb      	str	r3, [r7, #8]
 8021144:	68bb      	ldr	r3, [r7, #8]
}
 8021146:	bf00      	nop
 8021148:	3730      	adds	r7, #48	; 0x30
 802114a:	46bd      	mov	sp, r7
 802114c:	bd80      	pop	{r7, pc}
 802114e:	bf00      	nop
 8021150:	40005400 	.word	0x40005400
 8021154:	40023800 	.word	0x40023800
 8021158:	40020400 	.word	0x40020400
 802115c:	40005c00 	.word	0x40005c00
 8021160:	40020800 	.word	0x40020800
 8021164:	40020000 	.word	0x40020000

08021168 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8021168:	b580      	push	{r7, lr}
 802116a:	b08a      	sub	sp, #40	; 0x28
 802116c:	af00      	add	r7, sp, #0
 802116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021170:	f107 0314 	add.w	r3, r7, #20
 8021174:	2200      	movs	r2, #0
 8021176:	601a      	str	r2, [r3, #0]
 8021178:	605a      	str	r2, [r3, #4]
 802117a:	609a      	str	r2, [r3, #8]
 802117c:	60da      	str	r2, [r3, #12]
 802117e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8021180:	687b      	ldr	r3, [r7, #4]
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	4a6b      	ldr	r2, [pc, #428]	; (8021334 <HAL_I2S_MspInit+0x1cc>)
 8021186:	4293      	cmp	r3, r2
 8021188:	f040 80d0 	bne.w	802132c <HAL_I2S_MspInit+0x1c4>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 802118c:	2300      	movs	r3, #0
 802118e:	613b      	str	r3, [r7, #16]
 8021190:	4b69      	ldr	r3, [pc, #420]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 8021192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021194:	4a68      	ldr	r2, [pc, #416]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 8021196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802119a:	6413      	str	r3, [r2, #64]	; 0x40
 802119c:	4b66      	ldr	r3, [pc, #408]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 802119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80211a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80211a4:	613b      	str	r3, [r7, #16]
 80211a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80211a8:	2300      	movs	r3, #0
 80211aa:	60fb      	str	r3, [r7, #12]
 80211ac:	4b62      	ldr	r3, [pc, #392]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 80211ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211b0:	4a61      	ldr	r2, [pc, #388]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 80211b2:	f043 0301 	orr.w	r3, r3, #1
 80211b6:	6313      	str	r3, [r2, #48]	; 0x30
 80211b8:	4b5f      	ldr	r3, [pc, #380]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 80211ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211bc:	f003 0301 	and.w	r3, r3, #1
 80211c0:	60fb      	str	r3, [r7, #12]
 80211c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80211c4:	2300      	movs	r3, #0
 80211c6:	60bb      	str	r3, [r7, #8]
 80211c8:	4b5b      	ldr	r3, [pc, #364]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 80211ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211cc:	4a5a      	ldr	r2, [pc, #360]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 80211ce:	f043 0304 	orr.w	r3, r3, #4
 80211d2:	6313      	str	r3, [r2, #48]	; 0x30
 80211d4:	4b58      	ldr	r3, [pc, #352]	; (8021338 <HAL_I2S_MspInit+0x1d0>)
 80211d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211d8:	f003 0304 	and.w	r3, r3, #4
 80211dc:	60bb      	str	r3, [r7, #8]
 80211de:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80211e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80211e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80211e6:	2302      	movs	r3, #2
 80211e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80211ea:	2300      	movs	r3, #0
 80211ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80211ee:	2302      	movs	r3, #2
 80211f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80211f2:	2306      	movs	r3, #6
 80211f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80211f6:	f107 0314 	add.w	r3, r7, #20
 80211fa:	4619      	mov	r1, r3
 80211fc:	484f      	ldr	r0, [pc, #316]	; (802133c <HAL_I2S_MspInit+0x1d4>)
 80211fe:	f001 ffd9 	bl	80231b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8021202:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021208:	2302      	movs	r3, #2
 802120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802120c:	2300      	movs	r3, #0
 802120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8021210:	2302      	movs	r3, #2
 8021212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8021214:	2306      	movs	r3, #6
 8021216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021218:	f107 0314 	add.w	r3, r7, #20
 802121c:	4619      	mov	r1, r3
 802121e:	4848      	ldr	r0, [pc, #288]	; (8021340 <HAL_I2S_MspInit+0x1d8>)
 8021220:	f001 ffc8 	bl	80231b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8021224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802122a:	2302      	movs	r3, #2
 802122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802122e:	2300      	movs	r3, #0
 8021230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8021232:	2302      	movs	r3, #2
 8021234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8021236:	2305      	movs	r3, #5
 8021238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802123a:	f107 0314 	add.w	r3, r7, #20
 802123e:	4619      	mov	r1, r3
 8021240:	483f      	ldr	r0, [pc, #252]	; (8021340 <HAL_I2S_MspInit+0x1d8>)
 8021242:	f001 ffb7 	bl	80231b4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8021246:	4b3f      	ldr	r3, [pc, #252]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021248:	4a3f      	ldr	r2, [pc, #252]	; (8021348 <HAL_I2S_MspInit+0x1e0>)
 802124a:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 802124c:	4b3d      	ldr	r3, [pc, #244]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 802124e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8021252:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8021254:	4b3b      	ldr	r3, [pc, #236]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021256:	2200      	movs	r2, #0
 8021258:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802125a:	4b3a      	ldr	r3, [pc, #232]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 802125c:	2200      	movs	r2, #0
 802125e:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8021260:	4b38      	ldr	r3, [pc, #224]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021266:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8021268:	4b36      	ldr	r3, [pc, #216]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 802126a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802126e:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8021270:	4b34      	ldr	r3, [pc, #208]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8021276:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_NORMAL;
 8021278:	4b32      	ldr	r3, [pc, #200]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 802127a:	2200      	movs	r2, #0
 802127c:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 802127e:	4b31      	ldr	r3, [pc, #196]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021280:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8021284:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8021286:	4b2f      	ldr	r3, [pc, #188]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021288:	2204      	movs	r2, #4
 802128a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2s3_ext_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 802128c:	4b2d      	ldr	r3, [pc, #180]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 802128e:	2203      	movs	r2, #3
 8021290:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2s3_ext_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8021292:	4b2c      	ldr	r3, [pc, #176]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 8021294:	2200      	movs	r2, #0
 8021296:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2s3_ext_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8021298:	4b2a      	ldr	r3, [pc, #168]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 802129a:	2200      	movs	r2, #0
 802129c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 802129e:	4829      	ldr	r0, [pc, #164]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 80212a0:	f001 f92e 	bl	8022500 <HAL_DMA_Init>
 80212a4:	4603      	mov	r3, r0
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d001      	beq.n	80212ae <HAL_I2S_MspInit+0x146>
    {
      Error_Handler();
 80212aa:	f7ff fe49 	bl	8020f40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 80212ae:	687b      	ldr	r3, [r7, #4]
 80212b0:	4a24      	ldr	r2, [pc, #144]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 80212b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80212b4:	4a23      	ldr	r2, [pc, #140]	; (8021344 <HAL_I2S_MspInit+0x1dc>)
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80212ba:	4b24      	ldr	r3, [pc, #144]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212bc:	4a24      	ldr	r2, [pc, #144]	; (8021350 <HAL_I2S_MspInit+0x1e8>)
 80212be:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80212c0:	4b22      	ldr	r3, [pc, #136]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212c2:	2200      	movs	r2, #0
 80212c4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80212c6:	4b21      	ldr	r3, [pc, #132]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212c8:	2240      	movs	r2, #64	; 0x40
 80212ca:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80212cc:	4b1f      	ldr	r3, [pc, #124]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212ce:	2200      	movs	r2, #0
 80212d0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80212d2:	4b1e      	ldr	r3, [pc, #120]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80212d8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80212da:	4b1c      	ldr	r3, [pc, #112]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80212e0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80212e2:	4b1a      	ldr	r3, [pc, #104]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80212e8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80212ea:	4b18      	ldr	r3, [pc, #96]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212ec:	2200      	movs	r2, #0
 80212ee:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80212f0:	4b16      	ldr	r3, [pc, #88]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80212f6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80212f8:	4b14      	ldr	r3, [pc, #80]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 80212fa:	2204      	movs	r2, #4
 80212fc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80212fe:	4b13      	ldr	r3, [pc, #76]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 8021300:	2203      	movs	r2, #3
 8021302:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8021304:	4b11      	ldr	r3, [pc, #68]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 8021306:	2200      	movs	r2, #0
 8021308:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 802130a:	4b10      	ldr	r3, [pc, #64]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 802130c:	2200      	movs	r2, #0
 802130e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8021310:	480e      	ldr	r0, [pc, #56]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 8021312:	f001 f8f5 	bl	8022500 <HAL_DMA_Init>
 8021316:	4603      	mov	r3, r0
 8021318:	2b00      	cmp	r3, #0
 802131a:	d001      	beq.n	8021320 <HAL_I2S_MspInit+0x1b8>
    {
      Error_Handler();
 802131c:	f7ff fe10 	bl	8020f40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	4a0a      	ldr	r2, [pc, #40]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 8021324:	639a      	str	r2, [r3, #56]	; 0x38
 8021326:	4a09      	ldr	r2, [pc, #36]	; (802134c <HAL_I2S_MspInit+0x1e4>)
 8021328:	687b      	ldr	r3, [r7, #4]
 802132a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 802132c:	bf00      	nop
 802132e:	3728      	adds	r7, #40	; 0x28
 8021330:	46bd      	mov	sp, r7
 8021332:	bd80      	pop	{r7, pc}
 8021334:	40003c00 	.word	0x40003c00
 8021338:	40023800 	.word	0x40023800
 802133c:	40020000 	.word	0x40020000
 8021340:	40020800 	.word	0x40020800
 8021344:	20000f28 	.word	0x20000f28
 8021348:	40026010 	.word	0x40026010
 802134c:	20000f88 	.word	0x20000f88
 8021350:	40026088 	.word	0x40026088

08021354 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021354:	b580      	push	{r7, lr}
 8021356:	b08c      	sub	sp, #48	; 0x30
 8021358:	af00      	add	r7, sp, #0
 802135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802135c:	f107 031c 	add.w	r3, r7, #28
 8021360:	2200      	movs	r2, #0
 8021362:	601a      	str	r2, [r3, #0]
 8021364:	605a      	str	r2, [r3, #4]
 8021366:	609a      	str	r2, [r3, #8]
 8021368:	60da      	str	r2, [r3, #12]
 802136a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	4a7a      	ldr	r2, [pc, #488]	; (802155c <HAL_SPI_MspInit+0x208>)
 8021372:	4293      	cmp	r3, r2
 8021374:	f040 809d 	bne.w	80214b2 <HAL_SPI_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8021378:	2300      	movs	r3, #0
 802137a:	61bb      	str	r3, [r7, #24]
 802137c:	4b78      	ldr	r3, [pc, #480]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 802137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021380:	4a77      	ldr	r2, [pc, #476]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 8021382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8021386:	6453      	str	r3, [r2, #68]	; 0x44
 8021388:	4b75      	ldr	r3, [pc, #468]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 802138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802138c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021390:	61bb      	str	r3, [r7, #24]
 8021392:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021394:	2300      	movs	r3, #0
 8021396:	617b      	str	r3, [r7, #20]
 8021398:	4b71      	ldr	r3, [pc, #452]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 802139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802139c:	4a70      	ldr	r2, [pc, #448]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 802139e:	f043 0301 	orr.w	r3, r3, #1
 80213a2:	6313      	str	r3, [r2, #48]	; 0x30
 80213a4:	4b6e      	ldr	r3, [pc, #440]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80213a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213a8:	f003 0301 	and.w	r3, r3, #1
 80213ac:	617b      	str	r3, [r7, #20]
 80213ae:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 80213b0:	23e0      	movs	r3, #224	; 0xe0
 80213b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80213b4:	2302      	movs	r3, #2
 80213b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80213b8:	2300      	movs	r3, #0
 80213ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80213bc:	2303      	movs	r3, #3
 80213be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80213c0:	2305      	movs	r3, #5
 80213c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80213c4:	f107 031c 	add.w	r3, r7, #28
 80213c8:	4619      	mov	r1, r3
 80213ca:	4866      	ldr	r0, [pc, #408]	; (8021564 <HAL_SPI_MspInit+0x210>)
 80213cc:	f001 fef2 	bl	80231b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80213d0:	4b65      	ldr	r3, [pc, #404]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213d2:	4a66      	ldr	r2, [pc, #408]	; (802156c <HAL_SPI_MspInit+0x218>)
 80213d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80213d6:	4b64      	ldr	r3, [pc, #400]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213d8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80213dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80213de:	4b62      	ldr	r3, [pc, #392]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213e0:	2240      	movs	r2, #64	; 0x40
 80213e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80213e4:	4b60      	ldr	r3, [pc, #384]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213e6:	2200      	movs	r2, #0
 80213e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80213ea:	4b5f      	ldr	r3, [pc, #380]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80213f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80213f2:	4b5d      	ldr	r3, [pc, #372]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213f4:	2200      	movs	r2, #0
 80213f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80213f8:	4b5b      	ldr	r3, [pc, #364]	; (8021568 <HAL_SPI_MspInit+0x214>)
 80213fa:	2200      	movs	r2, #0
 80213fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80213fe:	4b5a      	ldr	r3, [pc, #360]	; (8021568 <HAL_SPI_MspInit+0x214>)
 8021400:	2200      	movs	r2, #0
 8021402:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8021404:	4b58      	ldr	r3, [pc, #352]	; (8021568 <HAL_SPI_MspInit+0x214>)
 8021406:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 802140a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 802140c:	4b56      	ldr	r3, [pc, #344]	; (8021568 <HAL_SPI_MspInit+0x214>)
 802140e:	2204      	movs	r2, #4
 8021410:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8021412:	4b55      	ldr	r3, [pc, #340]	; (8021568 <HAL_SPI_MspInit+0x214>)
 8021414:	2203      	movs	r2, #3
 8021416:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8021418:	4b53      	ldr	r3, [pc, #332]	; (8021568 <HAL_SPI_MspInit+0x214>)
 802141a:	2200      	movs	r2, #0
 802141c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 802141e:	4b52      	ldr	r3, [pc, #328]	; (8021568 <HAL_SPI_MspInit+0x214>)
 8021420:	2200      	movs	r2, #0
 8021422:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8021424:	4850      	ldr	r0, [pc, #320]	; (8021568 <HAL_SPI_MspInit+0x214>)
 8021426:	f001 f86b 	bl	8022500 <HAL_DMA_Init>
 802142a:	4603      	mov	r3, r0
 802142c:	2b00      	cmp	r3, #0
 802142e:	d001      	beq.n	8021434 <HAL_SPI_MspInit+0xe0>
    {
      Error_Handler();
 8021430:	f7ff fd86 	bl	8020f40 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8021434:	687b      	ldr	r3, [r7, #4]
 8021436:	4a4c      	ldr	r2, [pc, #304]	; (8021568 <HAL_SPI_MspInit+0x214>)
 8021438:	649a      	str	r2, [r3, #72]	; 0x48
 802143a:	4a4b      	ldr	r2, [pc, #300]	; (8021568 <HAL_SPI_MspInit+0x214>)
 802143c:	687b      	ldr	r3, [r7, #4]
 802143e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8021440:	4b4b      	ldr	r3, [pc, #300]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021442:	4a4c      	ldr	r2, [pc, #304]	; (8021574 <HAL_SPI_MspInit+0x220>)
 8021444:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8021446:	4b4a      	ldr	r3, [pc, #296]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021448:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 802144c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802144e:	4b48      	ldr	r3, [pc, #288]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021450:	2200      	movs	r2, #0
 8021452:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8021454:	4b46      	ldr	r3, [pc, #280]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021456:	2200      	movs	r2, #0
 8021458:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 802145a:	4b45      	ldr	r3, [pc, #276]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 802145c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021460:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8021462:	4b43      	ldr	r3, [pc, #268]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021464:	2200      	movs	r2, #0
 8021466:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8021468:	4b41      	ldr	r3, [pc, #260]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 802146a:	2200      	movs	r2, #0
 802146c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 802146e:	4b40      	ldr	r3, [pc, #256]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021470:	2200      	movs	r2, #0
 8021472:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8021474:	4b3e      	ldr	r3, [pc, #248]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021476:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 802147a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 802147c:	4b3c      	ldr	r3, [pc, #240]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 802147e:	2204      	movs	r2, #4
 8021480:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8021482:	4b3b      	ldr	r3, [pc, #236]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021484:	2203      	movs	r2, #3
 8021486:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8021488:	4b39      	ldr	r3, [pc, #228]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 802148a:	2200      	movs	r2, #0
 802148c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 802148e:	4b38      	ldr	r3, [pc, #224]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021490:	2200      	movs	r2, #0
 8021492:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8021494:	4836      	ldr	r0, [pc, #216]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 8021496:	f001 f833 	bl	8022500 <HAL_DMA_Init>
 802149a:	4603      	mov	r3, r0
 802149c:	2b00      	cmp	r3, #0
 802149e:	d001      	beq.n	80214a4 <HAL_SPI_MspInit+0x150>
    {
      Error_Handler();
 80214a0:	f7ff fd4e 	bl	8020f40 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	4a32      	ldr	r2, [pc, #200]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 80214a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80214aa:	4a31      	ldr	r2, [pc, #196]	; (8021570 <HAL_SPI_MspInit+0x21c>)
 80214ac:	687b      	ldr	r3, [r7, #4]
 80214ae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80214b0:	e04f      	b.n	8021552 <HAL_SPI_MspInit+0x1fe>
  else if(hspi->Instance==SPI2)
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	681b      	ldr	r3, [r3, #0]
 80214b6:	4a30      	ldr	r2, [pc, #192]	; (8021578 <HAL_SPI_MspInit+0x224>)
 80214b8:	4293      	cmp	r3, r2
 80214ba:	d14a      	bne.n	8021552 <HAL_SPI_MspInit+0x1fe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80214bc:	2300      	movs	r3, #0
 80214be:	613b      	str	r3, [r7, #16]
 80214c0:	4b27      	ldr	r3, [pc, #156]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214c4:	4a26      	ldr	r2, [pc, #152]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80214ca:	6413      	str	r3, [r2, #64]	; 0x40
 80214cc:	4b24      	ldr	r3, [pc, #144]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80214d4:	613b      	str	r3, [r7, #16]
 80214d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80214d8:	2300      	movs	r3, #0
 80214da:	60fb      	str	r3, [r7, #12]
 80214dc:	4b20      	ldr	r3, [pc, #128]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214e0:	4a1f      	ldr	r2, [pc, #124]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214e2:	f043 0304 	orr.w	r3, r3, #4
 80214e6:	6313      	str	r3, [r2, #48]	; 0x30
 80214e8:	4b1d      	ldr	r3, [pc, #116]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214ec:	f003 0304 	and.w	r3, r3, #4
 80214f0:	60fb      	str	r3, [r7, #12]
 80214f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80214f4:	2300      	movs	r3, #0
 80214f6:	60bb      	str	r3, [r7, #8]
 80214f8:	4b19      	ldr	r3, [pc, #100]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214fc:	4a18      	ldr	r2, [pc, #96]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 80214fe:	f043 0302 	orr.w	r3, r3, #2
 8021502:	6313      	str	r3, [r2, #48]	; 0x30
 8021504:	4b16      	ldr	r3, [pc, #88]	; (8021560 <HAL_SPI_MspInit+0x20c>)
 8021506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021508:	f003 0302 	and.w	r3, r3, #2
 802150c:	60bb      	str	r3, [r7, #8]
 802150e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOSI_Pin;
 8021510:	2308      	movs	r3, #8
 8021512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021514:	2302      	movs	r3, #2
 8021516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021518:	2300      	movs	r3, #0
 802151a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802151c:	2303      	movs	r3, #3
 802151e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8021520:	2305      	movs	r3, #5
 8021522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOSI_GPIO_Port, &GPIO_InitStruct);
 8021524:	f107 031c 	add.w	r3, r7, #28
 8021528:	4619      	mov	r1, r3
 802152a:	4814      	ldr	r0, [pc, #80]	; (802157c <HAL_SPI_MspInit+0x228>)
 802152c:	f001 fe42 	bl	80231b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_Pin;
 8021530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021536:	2302      	movs	r3, #2
 8021538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802153a:	2300      	movs	r3, #0
 802153c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802153e:	2303      	movs	r3, #3
 8021540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8021542:	2305      	movs	r3, #5
 8021544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 8021546:	f107 031c 	add.w	r3, r7, #28
 802154a:	4619      	mov	r1, r3
 802154c:	480c      	ldr	r0, [pc, #48]	; (8021580 <HAL_SPI_MspInit+0x22c>)
 802154e:	f001 fe31 	bl	80231b4 <HAL_GPIO_Init>
}
 8021552:	bf00      	nop
 8021554:	3730      	adds	r7, #48	; 0x30
 8021556:	46bd      	mov	sp, r7
 8021558:	bd80      	pop	{r7, pc}
 802155a:	bf00      	nop
 802155c:	40013000 	.word	0x40013000
 8021560:	40023800 	.word	0x40023800
 8021564:	40020000 	.word	0x40020000
 8021568:	200010a4 	.word	0x200010a4
 802156c:	40026458 	.word	0x40026458
 8021570:	20001104 	.word	0x20001104
 8021574:	40026410 	.word	0x40026410
 8021578:	40003800 	.word	0x40003800
 802157c:	40020800 	.word	0x40020800
 8021580:	40020400 	.word	0x40020400

08021584 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8021584:	b480      	push	{r7}
 8021586:	b085      	sub	sp, #20
 8021588:	af00      	add	r7, sp, #0
 802158a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 802158c:	687b      	ldr	r3, [r7, #4]
 802158e:	681b      	ldr	r3, [r3, #0]
 8021590:	4a0b      	ldr	r2, [pc, #44]	; (80215c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8021592:	4293      	cmp	r3, r2
 8021594:	d10d      	bne.n	80215b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8021596:	2300      	movs	r3, #0
 8021598:	60fb      	str	r3, [r7, #12]
 802159a:	4b0a      	ldr	r3, [pc, #40]	; (80215c4 <HAL_TIM_PWM_MspInit+0x40>)
 802159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802159e:	4a09      	ldr	r2, [pc, #36]	; (80215c4 <HAL_TIM_PWM_MspInit+0x40>)
 80215a0:	f043 0302 	orr.w	r3, r3, #2
 80215a4:	6413      	str	r3, [r2, #64]	; 0x40
 80215a6:	4b07      	ldr	r3, [pc, #28]	; (80215c4 <HAL_TIM_PWM_MspInit+0x40>)
 80215a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80215aa:	f003 0302 	and.w	r3, r3, #2
 80215ae:	60fb      	str	r3, [r7, #12]
 80215b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80215b2:	bf00      	nop
 80215b4:	3714      	adds	r7, #20
 80215b6:	46bd      	mov	sp, r7
 80215b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215bc:	4770      	bx	lr
 80215be:	bf00      	nop
 80215c0:	40000400 	.word	0x40000400
 80215c4:	40023800 	.word	0x40023800

080215c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80215c8:	b580      	push	{r7, lr}
 80215ca:	b088      	sub	sp, #32
 80215cc:	af00      	add	r7, sp, #0
 80215ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80215d0:	f107 030c 	add.w	r3, r7, #12
 80215d4:	2200      	movs	r2, #0
 80215d6:	601a      	str	r2, [r3, #0]
 80215d8:	605a      	str	r2, [r3, #4]
 80215da:	609a      	str	r2, [r3, #8]
 80215dc:	60da      	str	r2, [r3, #12]
 80215de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80215e0:	687b      	ldr	r3, [r7, #4]
 80215e2:	681b      	ldr	r3, [r3, #0]
 80215e4:	4a12      	ldr	r2, [pc, #72]	; (8021630 <HAL_TIM_MspPostInit+0x68>)
 80215e6:	4293      	cmp	r3, r2
 80215e8:	d11d      	bne.n	8021626 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80215ea:	2300      	movs	r3, #0
 80215ec:	60bb      	str	r3, [r7, #8]
 80215ee:	4b11      	ldr	r3, [pc, #68]	; (8021634 <HAL_TIM_MspPostInit+0x6c>)
 80215f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215f2:	4a10      	ldr	r2, [pc, #64]	; (8021634 <HAL_TIM_MspPostInit+0x6c>)
 80215f4:	f043 0304 	orr.w	r3, r3, #4
 80215f8:	6313      	str	r3, [r2, #48]	; 0x30
 80215fa:	4b0e      	ldr	r3, [pc, #56]	; (8021634 <HAL_TIM_MspPostInit+0x6c>)
 80215fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215fe:	f003 0304 	and.w	r3, r3, #4
 8021602:	60bb      	str	r3, [r7, #8]
 8021604:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8021606:	2380      	movs	r3, #128	; 0x80
 8021608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802160a:	2302      	movs	r3, #2
 802160c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802160e:	2300      	movs	r3, #0
 8021610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021612:	2300      	movs	r3, #0
 8021614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8021616:	2302      	movs	r3, #2
 8021618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802161a:	f107 030c 	add.w	r3, r7, #12
 802161e:	4619      	mov	r1, r3
 8021620:	4805      	ldr	r0, [pc, #20]	; (8021638 <HAL_TIM_MspPostInit+0x70>)
 8021622:	f001 fdc7 	bl	80231b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8021626:	bf00      	nop
 8021628:	3720      	adds	r7, #32
 802162a:	46bd      	mov	sp, r7
 802162c:	bd80      	pop	{r7, pc}
 802162e:	bf00      	nop
 8021630:	40000400 	.word	0x40000400
 8021634:	40023800 	.word	0x40023800
 8021638:	40020800 	.word	0x40020800

0802163c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 802163c:	b580      	push	{r7, lr}
 802163e:	b08c      	sub	sp, #48	; 0x30
 8021640:	af00      	add	r7, sp, #0
 8021642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021644:	f107 031c 	add.w	r3, r7, #28
 8021648:	2200      	movs	r2, #0
 802164a:	601a      	str	r2, [r3, #0]
 802164c:	605a      	str	r2, [r3, #4]
 802164e:	609a      	str	r2, [r3, #8]
 8021650:	60da      	str	r2, [r3, #12]
 8021652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	681b      	ldr	r3, [r3, #0]
 8021658:	4a3a      	ldr	r2, [pc, #232]	; (8021744 <HAL_UART_MspInit+0x108>)
 802165a:	4293      	cmp	r3, r2
 802165c:	d135      	bne.n	80216ca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 802165e:	2300      	movs	r3, #0
 8021660:	61bb      	str	r3, [r7, #24]
 8021662:	4b39      	ldr	r3, [pc, #228]	; (8021748 <HAL_UART_MspInit+0x10c>)
 8021664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021666:	4a38      	ldr	r2, [pc, #224]	; (8021748 <HAL_UART_MspInit+0x10c>)
 8021668:	f043 0310 	orr.w	r3, r3, #16
 802166c:	6453      	str	r3, [r2, #68]	; 0x44
 802166e:	4b36      	ldr	r3, [pc, #216]	; (8021748 <HAL_UART_MspInit+0x10c>)
 8021670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021672:	f003 0310 	and.w	r3, r3, #16
 8021676:	61bb      	str	r3, [r7, #24]
 8021678:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802167a:	2300      	movs	r3, #0
 802167c:	617b      	str	r3, [r7, #20]
 802167e:	4b32      	ldr	r3, [pc, #200]	; (8021748 <HAL_UART_MspInit+0x10c>)
 8021680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021682:	4a31      	ldr	r2, [pc, #196]	; (8021748 <HAL_UART_MspInit+0x10c>)
 8021684:	f043 0301 	orr.w	r3, r3, #1
 8021688:	6313      	str	r3, [r2, #48]	; 0x30
 802168a:	4b2f      	ldr	r3, [pc, #188]	; (8021748 <HAL_UART_MspInit+0x10c>)
 802168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802168e:	f003 0301 	and.w	r3, r3, #1
 8021692:	617b      	str	r3, [r7, #20]
 8021694:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8021696:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802169c:	2302      	movs	r3, #2
 802169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80216a0:	2300      	movs	r3, #0
 80216a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80216a4:	2303      	movs	r3, #3
 80216a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80216a8:	2307      	movs	r3, #7
 80216aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80216ac:	f107 031c 	add.w	r3, r7, #28
 80216b0:	4619      	mov	r1, r3
 80216b2:	4826      	ldr	r0, [pc, #152]	; (802174c <HAL_UART_MspInit+0x110>)
 80216b4:	f001 fd7e 	bl	80231b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80216b8:	2200      	movs	r2, #0
 80216ba:	2100      	movs	r1, #0
 80216bc:	2025      	movs	r0, #37	; 0x25
 80216be:	f000 fef5 	bl	80224ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80216c2:	2025      	movs	r0, #37	; 0x25
 80216c4:	f000 ff0e 	bl	80224e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80216c8:	e038      	b.n	802173c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80216ca:	687b      	ldr	r3, [r7, #4]
 80216cc:	681b      	ldr	r3, [r3, #0]
 80216ce:	4a20      	ldr	r2, [pc, #128]	; (8021750 <HAL_UART_MspInit+0x114>)
 80216d0:	4293      	cmp	r3, r2
 80216d2:	d133      	bne.n	802173c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80216d4:	2300      	movs	r3, #0
 80216d6:	613b      	str	r3, [r7, #16]
 80216d8:	4b1b      	ldr	r3, [pc, #108]	; (8021748 <HAL_UART_MspInit+0x10c>)
 80216da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80216dc:	4a1a      	ldr	r2, [pc, #104]	; (8021748 <HAL_UART_MspInit+0x10c>)
 80216de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80216e2:	6413      	str	r3, [r2, #64]	; 0x40
 80216e4:	4b18      	ldr	r3, [pc, #96]	; (8021748 <HAL_UART_MspInit+0x10c>)
 80216e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80216e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80216ec:	613b      	str	r3, [r7, #16]
 80216ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80216f0:	2300      	movs	r3, #0
 80216f2:	60fb      	str	r3, [r7, #12]
 80216f4:	4b14      	ldr	r3, [pc, #80]	; (8021748 <HAL_UART_MspInit+0x10c>)
 80216f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216f8:	4a13      	ldr	r2, [pc, #76]	; (8021748 <HAL_UART_MspInit+0x10c>)
 80216fa:	f043 0301 	orr.w	r3, r3, #1
 80216fe:	6313      	str	r3, [r2, #48]	; 0x30
 8021700:	4b11      	ldr	r3, [pc, #68]	; (8021748 <HAL_UART_MspInit+0x10c>)
 8021702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021704:	f003 0301 	and.w	r3, r3, #1
 8021708:	60fb      	str	r3, [r7, #12]
 802170a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802170c:	230c      	movs	r3, #12
 802170e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021710:	2302      	movs	r3, #2
 8021712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021714:	2300      	movs	r3, #0
 8021716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021718:	2303      	movs	r3, #3
 802171a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802171c:	2307      	movs	r3, #7
 802171e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021720:	f107 031c 	add.w	r3, r7, #28
 8021724:	4619      	mov	r1, r3
 8021726:	4809      	ldr	r0, [pc, #36]	; (802174c <HAL_UART_MspInit+0x110>)
 8021728:	f001 fd44 	bl	80231b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 802172c:	2200      	movs	r2, #0
 802172e:	2100      	movs	r1, #0
 8021730:	2026      	movs	r0, #38	; 0x26
 8021732:	f000 febb 	bl	80224ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8021736:	2026      	movs	r0, #38	; 0x26
 8021738:	f000 fed4 	bl	80224e4 <HAL_NVIC_EnableIRQ>
}
 802173c:	bf00      	nop
 802173e:	3730      	adds	r7, #48	; 0x30
 8021740:	46bd      	mov	sp, r7
 8021742:	bd80      	pop	{r7, pc}
 8021744:	40011000 	.word	0x40011000
 8021748:	40023800 	.word	0x40023800
 802174c:	40020000 	.word	0x40020000
 8021750:	40004400 	.word	0x40004400

08021754 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021754:	b580      	push	{r7, lr}
 8021756:	b08c      	sub	sp, #48	; 0x30
 8021758:	af00      	add	r7, sp, #0
 802175a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 802175c:	2300      	movs	r3, #0
 802175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8021760:	2300      	movs	r3, #0
 8021762:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8021764:	2200      	movs	r2, #0
 8021766:	6879      	ldr	r1, [r7, #4]
 8021768:	2019      	movs	r0, #25
 802176a:	f000 fe9f 	bl	80224ac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 802176e:	2019      	movs	r0, #25
 8021770:	f000 feb8 	bl	80224e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8021774:	2300      	movs	r3, #0
 8021776:	60fb      	str	r3, [r7, #12]
 8021778:	4b1e      	ldr	r3, [pc, #120]	; (80217f4 <HAL_InitTick+0xa0>)
 802177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802177c:	4a1d      	ldr	r2, [pc, #116]	; (80217f4 <HAL_InitTick+0xa0>)
 802177e:	f043 0301 	orr.w	r3, r3, #1
 8021782:	6453      	str	r3, [r2, #68]	; 0x44
 8021784:	4b1b      	ldr	r3, [pc, #108]	; (80217f4 <HAL_InitTick+0xa0>)
 8021786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021788:	f003 0301 	and.w	r3, r3, #1
 802178c:	60fb      	str	r3, [r7, #12]
 802178e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8021790:	f107 0210 	add.w	r2, r7, #16
 8021794:	f107 0314 	add.w	r3, r7, #20
 8021798:	4611      	mov	r1, r2
 802179a:	4618      	mov	r0, r3
 802179c:	f005 fe92 	bl	80274c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80217a0:	f005 fe7c 	bl	802749c <HAL_RCC_GetPCLK2Freq>
 80217a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80217a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217a8:	4a13      	ldr	r2, [pc, #76]	; (80217f8 <HAL_InitTick+0xa4>)
 80217aa:	fba2 2303 	umull	r2, r3, r2, r3
 80217ae:	0c9b      	lsrs	r3, r3, #18
 80217b0:	3b01      	subs	r3, #1
 80217b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80217b4:	4b11      	ldr	r3, [pc, #68]	; (80217fc <HAL_InitTick+0xa8>)
 80217b6:	4a12      	ldr	r2, [pc, #72]	; (8021800 <HAL_InitTick+0xac>)
 80217b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80217ba:	4b10      	ldr	r3, [pc, #64]	; (80217fc <HAL_InitTick+0xa8>)
 80217bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80217c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80217c2:	4a0e      	ldr	r2, [pc, #56]	; (80217fc <HAL_InitTick+0xa8>)
 80217c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80217c8:	4b0c      	ldr	r3, [pc, #48]	; (80217fc <HAL_InitTick+0xa8>)
 80217ca:	2200      	movs	r2, #0
 80217cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80217ce:	4b0b      	ldr	r3, [pc, #44]	; (80217fc <HAL_InitTick+0xa8>)
 80217d0:	2200      	movs	r2, #0
 80217d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80217d4:	4809      	ldr	r0, [pc, #36]	; (80217fc <HAL_InitTick+0xa8>)
 80217d6:	f006 fb67 	bl	8027ea8 <HAL_TIM_Base_Init>
 80217da:	4603      	mov	r3, r0
 80217dc:	2b00      	cmp	r3, #0
 80217de:	d104      	bne.n	80217ea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80217e0:	4806      	ldr	r0, [pc, #24]	; (80217fc <HAL_InitTick+0xa8>)
 80217e2:	f006 fb96 	bl	8027f12 <HAL_TIM_Base_Start_IT>
 80217e6:	4603      	mov	r3, r0
 80217e8:	e000      	b.n	80217ec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80217ea:	2301      	movs	r3, #1
}
 80217ec:	4618      	mov	r0, r3
 80217ee:	3730      	adds	r7, #48	; 0x30
 80217f0:	46bd      	mov	sp, r7
 80217f2:	bd80      	pop	{r7, pc}
 80217f4:	40023800 	.word	0x40023800
 80217f8:	431bde83 	.word	0x431bde83
 80217fc:	2000122c 	.word	0x2000122c
 8021800:	40010000 	.word	0x40010000

08021804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021804:	b480      	push	{r7}
 8021806:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8021808:	bf00      	nop
 802180a:	46bd      	mov	sp, r7
 802180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021810:	4770      	bx	lr

08021812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021812:	b480      	push	{r7}
 8021814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021816:	e7fe      	b.n	8021816 <HardFault_Handler+0x4>

08021818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021818:	b480      	push	{r7}
 802181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802181c:	e7fe      	b.n	802181c <MemManage_Handler+0x4>

0802181e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802181e:	b480      	push	{r7}
 8021820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021822:	e7fe      	b.n	8021822 <BusFault_Handler+0x4>

08021824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021824:	b480      	push	{r7}
 8021826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021828:	e7fe      	b.n	8021828 <UsageFault_Handler+0x4>

0802182a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802182a:	b480      	push	{r7}
 802182c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802182e:	bf00      	nop
 8021830:	46bd      	mov	sp, r7
 8021832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021836:	4770      	bx	lr

08021838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021838:	b480      	push	{r7}
 802183a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802183c:	bf00      	nop
 802183e:	46bd      	mov	sp, r7
 8021840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021844:	4770      	bx	lr

08021846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021846:	b480      	push	{r7}
 8021848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802184a:	bf00      	nop
 802184c:	46bd      	mov	sp, r7
 802184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021852:	4770      	bx	lr

08021854 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8021854:	b580      	push	{r7, lr}
 8021856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8021858:	2010      	movs	r0, #16
 802185a:	f001 fe93 	bl	8023584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 802185e:	bf00      	nop
 8021860:	bd80      	pop	{r7, pc}
	...

08021864 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8021864:	b580      	push	{r7, lr}
 8021866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8021868:	4802      	ldr	r0, [pc, #8]	; (8021874 <DMA1_Stream0_IRQHandler+0x10>)
 802186a:	f000 ff71 	bl	8022750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 802186e:	bf00      	nop
 8021870:	bd80      	pop	{r7, pc}
 8021872:	bf00      	nop
 8021874:	20000f28 	.word	0x20000f28

08021878 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8021878:	b580      	push	{r7, lr}
 802187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 802187c:	4802      	ldr	r0, [pc, #8]	; (8021888 <DMA1_Stream5_IRQHandler+0x10>)
 802187e:	f000 ff67 	bl	8022750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8021882:	bf00      	nop
 8021884:	bd80      	pop	{r7, pc}
 8021886:	bf00      	nop
 8021888:	20000f88 	.word	0x20000f88

0802188c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 802188c:	b580      	push	{r7, lr}
 802188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8021890:	4802      	ldr	r0, [pc, #8]	; (802189c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8021892:	f006 fbcb 	bl	802802c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8021896:	bf00      	nop
 8021898:	bd80      	pop	{r7, pc}
 802189a:	bf00      	nop
 802189c:	2000122c 	.word	0x2000122c

080218a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80218a0:	b580      	push	{r7, lr}
 80218a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80218a4:	4802      	ldr	r0, [pc, #8]	; (80218b0 <USART1_IRQHandler+0x10>)
 80218a6:	f007 fa47 	bl	8028d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80218aa:	bf00      	nop
 80218ac:	bd80      	pop	{r7, pc}
 80218ae:	bf00      	nop
 80218b0:	200011a4 	.word	0x200011a4

080218b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80218b4:	b580      	push	{r7, lr}
 80218b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80218b8:	4802      	ldr	r0, [pc, #8]	; (80218c4 <USART2_IRQHandler+0x10>)
 80218ba:	f007 fa3d 	bl	8028d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80218be:	bf00      	nop
 80218c0:	bd80      	pop	{r7, pc}
 80218c2:	bf00      	nop
 80218c4:	200011e4 	.word	0x200011e4

080218c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80218c8:	b580      	push	{r7, lr}
 80218ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80218cc:	4802      	ldr	r0, [pc, #8]	; (80218d8 <DMA2_Stream0_IRQHandler+0x10>)
 80218ce:	f000 ff3f 	bl	8022750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80218d2:	bf00      	nop
 80218d4:	bd80      	pop	{r7, pc}
 80218d6:	bf00      	nop
 80218d8:	20001104 	.word	0x20001104

080218dc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80218dc:	b580      	push	{r7, lr}
 80218de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80218e0:	4802      	ldr	r0, [pc, #8]	; (80218ec <DMA2_Stream3_IRQHandler+0x10>)
 80218e2:	f000 ff35 	bl	8022750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80218e6:	bf00      	nop
 80218e8:	bd80      	pop	{r7, pc}
 80218ea:	bf00      	nop
 80218ec:	200010a4 	.word	0x200010a4

080218f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80218f0:	b580      	push	{r7, lr}
 80218f2:	af00      	add	r7, sp, #0
#if defined(USE_BOOTLOADER)
 //	Bootloader : Exclude
#else	//	Application

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80218f4:	4802      	ldr	r0, [pc, #8]	; (8021900 <OTG_FS_IRQHandler+0x10>)
 80218f6:	f004 f964 	bl	8025bc2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

#endif	//	Application

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80218fa:	bf00      	nop
 80218fc:	bd80      	pop	{r7, pc}
 80218fe:	bf00      	nop
 8021900:	20004038 	.word	0x20004038

08021904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8021904:	b480      	push	{r7}
 8021906:	af00      	add	r7, sp, #0
	return 1;
 8021908:	2301      	movs	r3, #1
}
 802190a:	4618      	mov	r0, r3
 802190c:	46bd      	mov	sp, r7
 802190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021912:	4770      	bx	lr

08021914 <_kill>:

int _kill(int pid, int sig)
{
 8021914:	b580      	push	{r7, lr}
 8021916:	b082      	sub	sp, #8
 8021918:	af00      	add	r7, sp, #0
 802191a:	6078      	str	r0, [r7, #4]
 802191c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 802191e:	f015 fb67 	bl	8036ff0 <__errno>
 8021922:	4603      	mov	r3, r0
 8021924:	2216      	movs	r2, #22
 8021926:	601a      	str	r2, [r3, #0]
	return -1;
 8021928:	f04f 33ff 	mov.w	r3, #4294967295
}
 802192c:	4618      	mov	r0, r3
 802192e:	3708      	adds	r7, #8
 8021930:	46bd      	mov	sp, r7
 8021932:	bd80      	pop	{r7, pc}

08021934 <_exit>:

void _exit (int status)
{
 8021934:	b580      	push	{r7, lr}
 8021936:	b082      	sub	sp, #8
 8021938:	af00      	add	r7, sp, #0
 802193a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 802193c:	f04f 31ff 	mov.w	r1, #4294967295
 8021940:	6878      	ldr	r0, [r7, #4]
 8021942:	f7ff ffe7 	bl	8021914 <_kill>
	while (1) {}		/* Make sure we hang here */
 8021946:	e7fe      	b.n	8021946 <_exit+0x12>

08021948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021948:	b580      	push	{r7, lr}
 802194a:	b086      	sub	sp, #24
 802194c:	af00      	add	r7, sp, #0
 802194e:	60f8      	str	r0, [r7, #12]
 8021950:	60b9      	str	r1, [r7, #8]
 8021952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021954:	2300      	movs	r3, #0
 8021956:	617b      	str	r3, [r7, #20]
 8021958:	e00a      	b.n	8021970 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 802195a:	f012 fd7d 	bl	8034458 <__io_getchar>
 802195e:	4601      	mov	r1, r0
 8021960:	68bb      	ldr	r3, [r7, #8]
 8021962:	1c5a      	adds	r2, r3, #1
 8021964:	60ba      	str	r2, [r7, #8]
 8021966:	b2ca      	uxtb	r2, r1
 8021968:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802196a:	697b      	ldr	r3, [r7, #20]
 802196c:	3301      	adds	r3, #1
 802196e:	617b      	str	r3, [r7, #20]
 8021970:	697a      	ldr	r2, [r7, #20]
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	429a      	cmp	r2, r3
 8021976:	dbf0      	blt.n	802195a <_read+0x12>
	}

return len;
 8021978:	687b      	ldr	r3, [r7, #4]
}
 802197a:	4618      	mov	r0, r3
 802197c:	3718      	adds	r7, #24
 802197e:	46bd      	mov	sp, r7
 8021980:	bd80      	pop	{r7, pc}

08021982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8021982:	b580      	push	{r7, lr}
 8021984:	b086      	sub	sp, #24
 8021986:	af00      	add	r7, sp, #0
 8021988:	60f8      	str	r0, [r7, #12]
 802198a:	60b9      	str	r1, [r7, #8]
 802198c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802198e:	2300      	movs	r3, #0
 8021990:	617b      	str	r3, [r7, #20]
 8021992:	e009      	b.n	80219a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8021994:	68bb      	ldr	r3, [r7, #8]
 8021996:	1c5a      	adds	r2, r3, #1
 8021998:	60ba      	str	r2, [r7, #8]
 802199a:	781b      	ldrb	r3, [r3, #0]
 802199c:	4618      	mov	r0, r3
 802199e:	f012 fd0f 	bl	80343c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80219a2:	697b      	ldr	r3, [r7, #20]
 80219a4:	3301      	adds	r3, #1
 80219a6:	617b      	str	r3, [r7, #20]
 80219a8:	697a      	ldr	r2, [r7, #20]
 80219aa:	687b      	ldr	r3, [r7, #4]
 80219ac:	429a      	cmp	r2, r3
 80219ae:	dbf1      	blt.n	8021994 <_write+0x12>
	}
	return len;
 80219b0:	687b      	ldr	r3, [r7, #4]
}
 80219b2:	4618      	mov	r0, r3
 80219b4:	3718      	adds	r7, #24
 80219b6:	46bd      	mov	sp, r7
 80219b8:	bd80      	pop	{r7, pc}

080219ba <_close>:

int _close(int file)
{
 80219ba:	b480      	push	{r7}
 80219bc:	b083      	sub	sp, #12
 80219be:	af00      	add	r7, sp, #0
 80219c0:	6078      	str	r0, [r7, #4]
	return -1;
 80219c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80219c6:	4618      	mov	r0, r3
 80219c8:	370c      	adds	r7, #12
 80219ca:	46bd      	mov	sp, r7
 80219cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219d0:	4770      	bx	lr

080219d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80219d2:	b480      	push	{r7}
 80219d4:	b083      	sub	sp, #12
 80219d6:	af00      	add	r7, sp, #0
 80219d8:	6078      	str	r0, [r7, #4]
 80219da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80219dc:	683b      	ldr	r3, [r7, #0]
 80219de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80219e2:	605a      	str	r2, [r3, #4]
	return 0;
 80219e4:	2300      	movs	r3, #0
}
 80219e6:	4618      	mov	r0, r3
 80219e8:	370c      	adds	r7, #12
 80219ea:	46bd      	mov	sp, r7
 80219ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219f0:	4770      	bx	lr

080219f2 <_isatty>:

int _isatty(int file)
{
 80219f2:	b480      	push	{r7}
 80219f4:	b083      	sub	sp, #12
 80219f6:	af00      	add	r7, sp, #0
 80219f8:	6078      	str	r0, [r7, #4]
	return 1;
 80219fa:	2301      	movs	r3, #1
}
 80219fc:	4618      	mov	r0, r3
 80219fe:	370c      	adds	r7, #12
 8021a00:	46bd      	mov	sp, r7
 8021a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a06:	4770      	bx	lr

08021a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021a08:	b480      	push	{r7}
 8021a0a:	b085      	sub	sp, #20
 8021a0c:	af00      	add	r7, sp, #0
 8021a0e:	60f8      	str	r0, [r7, #12]
 8021a10:	60b9      	str	r1, [r7, #8]
 8021a12:	607a      	str	r2, [r7, #4]
	return 0;
 8021a14:	2300      	movs	r3, #0
}
 8021a16:	4618      	mov	r0, r3
 8021a18:	3714      	adds	r7, #20
 8021a1a:	46bd      	mov	sp, r7
 8021a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a20:	4770      	bx	lr
	...

08021a24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8021a24:	b580      	push	{r7, lr}
 8021a26:	b084      	sub	sp, #16
 8021a28:	af00      	add	r7, sp, #0
 8021a2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8021a2c:	4b11      	ldr	r3, [pc, #68]	; (8021a74 <_sbrk+0x50>)
 8021a2e:	681b      	ldr	r3, [r3, #0]
 8021a30:	2b00      	cmp	r3, #0
 8021a32:	d102      	bne.n	8021a3a <_sbrk+0x16>
		heap_end = &end;
 8021a34:	4b0f      	ldr	r3, [pc, #60]	; (8021a74 <_sbrk+0x50>)
 8021a36:	4a10      	ldr	r2, [pc, #64]	; (8021a78 <_sbrk+0x54>)
 8021a38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8021a3a:	4b0e      	ldr	r3, [pc, #56]	; (8021a74 <_sbrk+0x50>)
 8021a3c:	681b      	ldr	r3, [r3, #0]
 8021a3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8021a40:	4b0c      	ldr	r3, [pc, #48]	; (8021a74 <_sbrk+0x50>)
 8021a42:	681a      	ldr	r2, [r3, #0]
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	4413      	add	r3, r2
 8021a48:	466a      	mov	r2, sp
 8021a4a:	4293      	cmp	r3, r2
 8021a4c:	d907      	bls.n	8021a5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8021a4e:	f015 facf 	bl	8036ff0 <__errno>
 8021a52:	4603      	mov	r3, r0
 8021a54:	220c      	movs	r2, #12
 8021a56:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8021a58:	f04f 33ff 	mov.w	r3, #4294967295
 8021a5c:	e006      	b.n	8021a6c <_sbrk+0x48>
	}

	heap_end += incr;
 8021a5e:	4b05      	ldr	r3, [pc, #20]	; (8021a74 <_sbrk+0x50>)
 8021a60:	681a      	ldr	r2, [r3, #0]
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	4413      	add	r3, r2
 8021a66:	4a03      	ldr	r2, [pc, #12]	; (8021a74 <_sbrk+0x50>)
 8021a68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8021a6a:	68fb      	ldr	r3, [r7, #12]
}
 8021a6c:	4618      	mov	r0, r3
 8021a6e:	3710      	adds	r7, #16
 8021a70:	46bd      	mov	sp, r7
 8021a72:	bd80      	pop	{r7, pc}
 8021a74:	2000126c 	.word	0x2000126c
 8021a78:	20004450 	.word	0x20004450

08021a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8021a7c:	b480      	push	{r7}
 8021a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021a80:	4b07      	ldr	r3, [pc, #28]	; (8021aa0 <SystemInit+0x24>)
 8021a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021a86:	4a06      	ldr	r2, [pc, #24]	; (8021aa0 <SystemInit+0x24>)
 8021a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

//  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#if		defined(USE_BOOTLOADER)	//	Bootloader	memory Address : 0x08000000
 SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#else							//	Application	memory Address : 0x08020000
 SCB->VTOR = (FLASH_BASE | VECT_TAB_OFFSET) + 0x00020000;//VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8021a90:	4b03      	ldr	r3, [pc, #12]	; (8021aa0 <SystemInit+0x24>)
 8021a92:	4a04      	ldr	r2, [pc, #16]	; (8021aa4 <SystemInit+0x28>)
 8021a94:	609a      	str	r2, [r3, #8]
#endif

#endif
}
 8021a96:	bf00      	nop
 8021a98:	46bd      	mov	sp, r7
 8021a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a9e:	4770      	bx	lr
 8021aa0:	e000ed00 	.word	0xe000ed00
 8021aa4:	08020000 	.word	0x08020000

08021aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8021aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021ae0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8021aac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8021aae:	e003      	b.n	8021ab8 <LoopCopyDataInit>

08021ab0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8021ab0:	4b0c      	ldr	r3, [pc, #48]	; (8021ae4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8021ab2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8021ab4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8021ab6:	3104      	adds	r1, #4

08021ab8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8021ab8:	480b      	ldr	r0, [pc, #44]	; (8021ae8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8021aba:	4b0c      	ldr	r3, [pc, #48]	; (8021aec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8021abc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8021abe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8021ac0:	d3f6      	bcc.n	8021ab0 <CopyDataInit>
  ldr  r2, =_sbss
 8021ac2:	4a0b      	ldr	r2, [pc, #44]	; (8021af0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8021ac4:	e002      	b.n	8021acc <LoopFillZerobss>

08021ac6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8021ac6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8021ac8:	f842 3b04 	str.w	r3, [r2], #4

08021acc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8021acc:	4b09      	ldr	r3, [pc, #36]	; (8021af4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8021ace:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8021ad0:	d3f9      	bcc.n	8021ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8021ad2:	f7ff ffd3 	bl	8021a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021ad6:	f015 faa3 	bl	8037020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021ada:	f7fe fda1 	bl	8020620 <main>
  bx  lr    
 8021ade:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8021ae0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8021ae4:	0804810c 	.word	0x0804810c
  ldr  r0, =_sdata
 8021ae8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8021aec:	20000dd4 	.word	0x20000dd4
  ldr  r2, =_sbss
 8021af0:	20000dd4 	.word	0x20000dd4
  ldr  r3, = _ebss
 8021af4:	20004450 	.word	0x20004450

08021af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021af8:	e7fe      	b.n	8021af8 <ADC_IRQHandler>
	...

08021afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8021afc:	b580      	push	{r7, lr}
 8021afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8021b00:	4b0e      	ldr	r3, [pc, #56]	; (8021b3c <HAL_Init+0x40>)
 8021b02:	681b      	ldr	r3, [r3, #0]
 8021b04:	4a0d      	ldr	r2, [pc, #52]	; (8021b3c <HAL_Init+0x40>)
 8021b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8021b0c:	4b0b      	ldr	r3, [pc, #44]	; (8021b3c <HAL_Init+0x40>)
 8021b0e:	681b      	ldr	r3, [r3, #0]
 8021b10:	4a0a      	ldr	r2, [pc, #40]	; (8021b3c <HAL_Init+0x40>)
 8021b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8021b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8021b18:	4b08      	ldr	r3, [pc, #32]	; (8021b3c <HAL_Init+0x40>)
 8021b1a:	681b      	ldr	r3, [r3, #0]
 8021b1c:	4a07      	ldr	r2, [pc, #28]	; (8021b3c <HAL_Init+0x40>)
 8021b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021b24:	2003      	movs	r0, #3
 8021b26:	f000 fcb6 	bl	8022496 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8021b2a:	2000      	movs	r0, #0
 8021b2c:	f7ff fe12 	bl	8021754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8021b30:	f7ff fa0e 	bl	8020f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8021b34:	2300      	movs	r3, #0
}
 8021b36:	4618      	mov	r0, r3
 8021b38:	bd80      	pop	{r7, pc}
 8021b3a:	bf00      	nop
 8021b3c:	40023c00 	.word	0x40023c00

08021b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8021b40:	b480      	push	{r7}
 8021b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8021b44:	4b06      	ldr	r3, [pc, #24]	; (8021b60 <HAL_IncTick+0x20>)
 8021b46:	781b      	ldrb	r3, [r3, #0]
 8021b48:	461a      	mov	r2, r3
 8021b4a:	4b06      	ldr	r3, [pc, #24]	; (8021b64 <HAL_IncTick+0x24>)
 8021b4c:	681b      	ldr	r3, [r3, #0]
 8021b4e:	4413      	add	r3, r2
 8021b50:	4a04      	ldr	r2, [pc, #16]	; (8021b64 <HAL_IncTick+0x24>)
 8021b52:	6013      	str	r3, [r2, #0]
}
 8021b54:	bf00      	nop
 8021b56:	46bd      	mov	sp, r7
 8021b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b5c:	4770      	bx	lr
 8021b5e:	bf00      	nop
 8021b60:	2000000c 	.word	0x2000000c
 8021b64:	20001270 	.word	0x20001270

08021b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8021b68:	b480      	push	{r7}
 8021b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8021b6c:	4b03      	ldr	r3, [pc, #12]	; (8021b7c <HAL_GetTick+0x14>)
 8021b6e:	681b      	ldr	r3, [r3, #0]
}
 8021b70:	4618      	mov	r0, r3
 8021b72:	46bd      	mov	sp, r7
 8021b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b78:	4770      	bx	lr
 8021b7a:	bf00      	nop
 8021b7c:	20001270 	.word	0x20001270

08021b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8021b80:	b580      	push	{r7, lr}
 8021b82:	b084      	sub	sp, #16
 8021b84:	af00      	add	r7, sp, #0
 8021b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8021b88:	f7ff ffee 	bl	8021b68 <HAL_GetTick>
 8021b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8021b92:	68fb      	ldr	r3, [r7, #12]
 8021b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021b98:	d005      	beq.n	8021ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8021b9a:	4b0a      	ldr	r3, [pc, #40]	; (8021bc4 <HAL_Delay+0x44>)
 8021b9c:	781b      	ldrb	r3, [r3, #0]
 8021b9e:	461a      	mov	r2, r3
 8021ba0:	68fb      	ldr	r3, [r7, #12]
 8021ba2:	4413      	add	r3, r2
 8021ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8021ba6:	bf00      	nop
 8021ba8:	f7ff ffde 	bl	8021b68 <HAL_GetTick>
 8021bac:	4602      	mov	r2, r0
 8021bae:	68bb      	ldr	r3, [r7, #8]
 8021bb0:	1ad3      	subs	r3, r2, r3
 8021bb2:	68fa      	ldr	r2, [r7, #12]
 8021bb4:	429a      	cmp	r2, r3
 8021bb6:	d8f7      	bhi.n	8021ba8 <HAL_Delay+0x28>
  {
  }
}
 8021bb8:	bf00      	nop
 8021bba:	bf00      	nop
 8021bbc:	3710      	adds	r7, #16
 8021bbe:	46bd      	mov	sp, r7
 8021bc0:	bd80      	pop	{r7, pc}
 8021bc2:	bf00      	nop
 8021bc4:	2000000c 	.word	0x2000000c

08021bc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8021bc8:	b580      	push	{r7, lr}
 8021bca:	b084      	sub	sp, #16
 8021bcc:	af00      	add	r7, sp, #0
 8021bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8021bd0:	2300      	movs	r3, #0
 8021bd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8021bd4:	687b      	ldr	r3, [r7, #4]
 8021bd6:	2b00      	cmp	r3, #0
 8021bd8:	d101      	bne.n	8021bde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8021bda:	2301      	movs	r3, #1
 8021bdc:	e033      	b.n	8021c46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8021bde:	687b      	ldr	r3, [r7, #4]
 8021be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021be2:	2b00      	cmp	r3, #0
 8021be4:	d109      	bne.n	8021bfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8021be6:	6878      	ldr	r0, [r7, #4]
 8021be8:	f7ff f9da 	bl	8020fa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	2200      	movs	r2, #0
 8021bf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	2200      	movs	r2, #0
 8021bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8021bfa:	687b      	ldr	r3, [r7, #4]
 8021bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021bfe:	f003 0310 	and.w	r3, r3, #16
 8021c02:	2b00      	cmp	r3, #0
 8021c04:	d118      	bne.n	8021c38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8021c06:	687b      	ldr	r3, [r7, #4]
 8021c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8021c0e:	f023 0302 	bic.w	r3, r3, #2
 8021c12:	f043 0202 	orr.w	r2, r3, #2
 8021c16:	687b      	ldr	r3, [r7, #4]
 8021c18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8021c1a:	6878      	ldr	r0, [r7, #4]
 8021c1c:	f000 fa92 	bl	8022144 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	2200      	movs	r2, #0
 8021c24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8021c26:	687b      	ldr	r3, [r7, #4]
 8021c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c2a:	f023 0303 	bic.w	r3, r3, #3
 8021c2e:	f043 0201 	orr.w	r2, r3, #1
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	641a      	str	r2, [r3, #64]	; 0x40
 8021c36:	e001      	b.n	8021c3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8021c38:	2301      	movs	r3, #1
 8021c3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8021c3c:	687b      	ldr	r3, [r7, #4]
 8021c3e:	2200      	movs	r2, #0
 8021c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8021c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8021c46:	4618      	mov	r0, r3
 8021c48:	3710      	adds	r7, #16
 8021c4a:	46bd      	mov	sp, r7
 8021c4c:	bd80      	pop	{r7, pc}
	...

08021c50 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8021c50:	b480      	push	{r7}
 8021c52:	b085      	sub	sp, #20
 8021c54:	af00      	add	r7, sp, #0
 8021c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8021c58:	2300      	movs	r3, #0
 8021c5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8021c5c:	687b      	ldr	r3, [r7, #4]
 8021c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021c62:	2b01      	cmp	r3, #1
 8021c64:	d101      	bne.n	8021c6a <HAL_ADC_Start+0x1a>
 8021c66:	2302      	movs	r3, #2
 8021c68:	e0a5      	b.n	8021db6 <HAL_ADC_Start+0x166>
 8021c6a:	687b      	ldr	r3, [r7, #4]
 8021c6c:	2201      	movs	r2, #1
 8021c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8021c72:	687b      	ldr	r3, [r7, #4]
 8021c74:	681b      	ldr	r3, [r3, #0]
 8021c76:	689b      	ldr	r3, [r3, #8]
 8021c78:	f003 0301 	and.w	r3, r3, #1
 8021c7c:	2b01      	cmp	r3, #1
 8021c7e:	d018      	beq.n	8021cb2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8021c80:	687b      	ldr	r3, [r7, #4]
 8021c82:	681b      	ldr	r3, [r3, #0]
 8021c84:	689a      	ldr	r2, [r3, #8]
 8021c86:	687b      	ldr	r3, [r7, #4]
 8021c88:	681b      	ldr	r3, [r3, #0]
 8021c8a:	f042 0201 	orr.w	r2, r2, #1
 8021c8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8021c90:	4b4c      	ldr	r3, [pc, #304]	; (8021dc4 <HAL_ADC_Start+0x174>)
 8021c92:	681b      	ldr	r3, [r3, #0]
 8021c94:	4a4c      	ldr	r2, [pc, #304]	; (8021dc8 <HAL_ADC_Start+0x178>)
 8021c96:	fba2 2303 	umull	r2, r3, r2, r3
 8021c9a:	0c9a      	lsrs	r2, r3, #18
 8021c9c:	4613      	mov	r3, r2
 8021c9e:	005b      	lsls	r3, r3, #1
 8021ca0:	4413      	add	r3, r2
 8021ca2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8021ca4:	e002      	b.n	8021cac <HAL_ADC_Start+0x5c>
    {
      counter--;
 8021ca6:	68bb      	ldr	r3, [r7, #8]
 8021ca8:	3b01      	subs	r3, #1
 8021caa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8021cac:	68bb      	ldr	r3, [r7, #8]
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	d1f9      	bne.n	8021ca6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8021cb2:	687b      	ldr	r3, [r7, #4]
 8021cb4:	681b      	ldr	r3, [r3, #0]
 8021cb6:	689b      	ldr	r3, [r3, #8]
 8021cb8:	f003 0301 	and.w	r3, r3, #1
 8021cbc:	2b01      	cmp	r3, #1
 8021cbe:	d179      	bne.n	8021db4 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8021cc0:	687b      	ldr	r3, [r7, #4]
 8021cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021cc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8021cc8:	f023 0301 	bic.w	r3, r3, #1
 8021ccc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8021cd0:	687b      	ldr	r3, [r7, #4]
 8021cd2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	681b      	ldr	r3, [r3, #0]
 8021cd8:	685b      	ldr	r3, [r3, #4]
 8021cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021cde:	2b00      	cmp	r3, #0
 8021ce0:	d007      	beq.n	8021cf2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ce6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8021cea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8021cee:	687b      	ldr	r3, [r7, #4]
 8021cf0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8021cf2:	687b      	ldr	r3, [r7, #4]
 8021cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021cfe:	d106      	bne.n	8021d0e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d04:	f023 0206 	bic.w	r2, r3, #6
 8021d08:	687b      	ldr	r3, [r7, #4]
 8021d0a:	645a      	str	r2, [r3, #68]	; 0x44
 8021d0c:	e002      	b.n	8021d14 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8021d0e:	687b      	ldr	r3, [r7, #4]
 8021d10:	2200      	movs	r2, #0
 8021d12:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8021d14:	687b      	ldr	r3, [r7, #4]
 8021d16:	2200      	movs	r2, #0
 8021d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8021d1c:	4b2b      	ldr	r3, [pc, #172]	; (8021dcc <HAL_ADC_Start+0x17c>)
 8021d1e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8021d20:	687b      	ldr	r3, [r7, #4]
 8021d22:	681b      	ldr	r3, [r3, #0]
 8021d24:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8021d28:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8021d2a:	68fb      	ldr	r3, [r7, #12]
 8021d2c:	685b      	ldr	r3, [r3, #4]
 8021d2e:	f003 031f 	and.w	r3, r3, #31
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d12a      	bne.n	8021d8c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8021d36:	687b      	ldr	r3, [r7, #4]
 8021d38:	681b      	ldr	r3, [r3, #0]
 8021d3a:	4a25      	ldr	r2, [pc, #148]	; (8021dd0 <HAL_ADC_Start+0x180>)
 8021d3c:	4293      	cmp	r3, r2
 8021d3e:	d015      	beq.n	8021d6c <HAL_ADC_Start+0x11c>
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	681b      	ldr	r3, [r3, #0]
 8021d44:	4a23      	ldr	r2, [pc, #140]	; (8021dd4 <HAL_ADC_Start+0x184>)
 8021d46:	4293      	cmp	r3, r2
 8021d48:	d105      	bne.n	8021d56 <HAL_ADC_Start+0x106>
 8021d4a:	4b20      	ldr	r3, [pc, #128]	; (8021dcc <HAL_ADC_Start+0x17c>)
 8021d4c:	685b      	ldr	r3, [r3, #4]
 8021d4e:	f003 031f 	and.w	r3, r3, #31
 8021d52:	2b00      	cmp	r3, #0
 8021d54:	d00a      	beq.n	8021d6c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8021d56:	687b      	ldr	r3, [r7, #4]
 8021d58:	681b      	ldr	r3, [r3, #0]
 8021d5a:	4a1f      	ldr	r2, [pc, #124]	; (8021dd8 <HAL_ADC_Start+0x188>)
 8021d5c:	4293      	cmp	r3, r2
 8021d5e:	d129      	bne.n	8021db4 <HAL_ADC_Start+0x164>
 8021d60:	4b1a      	ldr	r3, [pc, #104]	; (8021dcc <HAL_ADC_Start+0x17c>)
 8021d62:	685b      	ldr	r3, [r3, #4]
 8021d64:	f003 0310 	and.w	r3, r3, #16
 8021d68:	2b00      	cmp	r3, #0
 8021d6a:	d123      	bne.n	8021db4 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	681b      	ldr	r3, [r3, #0]
 8021d70:	689b      	ldr	r3, [r3, #8]
 8021d72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8021d76:	2b00      	cmp	r3, #0
 8021d78:	d11c      	bne.n	8021db4 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8021d7a:	687b      	ldr	r3, [r7, #4]
 8021d7c:	681b      	ldr	r3, [r3, #0]
 8021d7e:	689a      	ldr	r2, [r3, #8]
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	681b      	ldr	r3, [r3, #0]
 8021d84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8021d88:	609a      	str	r2, [r3, #8]
 8021d8a:	e013      	b.n	8021db4 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8021d8c:	687b      	ldr	r3, [r7, #4]
 8021d8e:	681b      	ldr	r3, [r3, #0]
 8021d90:	4a0f      	ldr	r2, [pc, #60]	; (8021dd0 <HAL_ADC_Start+0x180>)
 8021d92:	4293      	cmp	r3, r2
 8021d94:	d10e      	bne.n	8021db4 <HAL_ADC_Start+0x164>
 8021d96:	687b      	ldr	r3, [r7, #4]
 8021d98:	681b      	ldr	r3, [r3, #0]
 8021d9a:	689b      	ldr	r3, [r3, #8]
 8021d9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8021da0:	2b00      	cmp	r3, #0
 8021da2:	d107      	bne.n	8021db4 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	681b      	ldr	r3, [r3, #0]
 8021da8:	689a      	ldr	r2, [r3, #8]
 8021daa:	687b      	ldr	r3, [r7, #4]
 8021dac:	681b      	ldr	r3, [r3, #0]
 8021dae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8021db2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8021db4:	2300      	movs	r3, #0
}
 8021db6:	4618      	mov	r0, r3
 8021db8:	3714      	adds	r7, #20
 8021dba:	46bd      	mov	sp, r7
 8021dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dc0:	4770      	bx	lr
 8021dc2:	bf00      	nop
 8021dc4:	20000004 	.word	0x20000004
 8021dc8:	431bde83 	.word	0x431bde83
 8021dcc:	40012300 	.word	0x40012300
 8021dd0:	40012000 	.word	0x40012000
 8021dd4:	40012100 	.word	0x40012100
 8021dd8:	40012200 	.word	0x40012200

08021ddc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8021ddc:	b580      	push	{r7, lr}
 8021dde:	b084      	sub	sp, #16
 8021de0:	af00      	add	r7, sp, #0
 8021de2:	6078      	str	r0, [r7, #4]
 8021de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8021de6:	2300      	movs	r3, #0
 8021de8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8021dea:	687b      	ldr	r3, [r7, #4]
 8021dec:	681b      	ldr	r3, [r3, #0]
 8021dee:	689b      	ldr	r3, [r3, #8]
 8021df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8021df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021df8:	d113      	bne.n	8021e22 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8021dfa:	687b      	ldr	r3, [r7, #4]
 8021dfc:	681b      	ldr	r3, [r3, #0]
 8021dfe:	689b      	ldr	r3, [r3, #8]
 8021e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8021e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021e08:	d10b      	bne.n	8021e22 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8021e0a:	687b      	ldr	r3, [r7, #4]
 8021e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021e0e:	f043 0220 	orr.w	r2, r3, #32
 8021e12:	687b      	ldr	r3, [r7, #4]
 8021e14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8021e16:	687b      	ldr	r3, [r7, #4]
 8021e18:	2200      	movs	r2, #0
 8021e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8021e1e:	2301      	movs	r3, #1
 8021e20:	e05c      	b.n	8021edc <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8021e22:	f7ff fea1 	bl	8021b68 <HAL_GetTick>
 8021e26:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8021e28:	e01a      	b.n	8021e60 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8021e2a:	683b      	ldr	r3, [r7, #0]
 8021e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021e30:	d016      	beq.n	8021e60 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8021e32:	683b      	ldr	r3, [r7, #0]
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	d007      	beq.n	8021e48 <HAL_ADC_PollForConversion+0x6c>
 8021e38:	f7ff fe96 	bl	8021b68 <HAL_GetTick>
 8021e3c:	4602      	mov	r2, r0
 8021e3e:	68fb      	ldr	r3, [r7, #12]
 8021e40:	1ad3      	subs	r3, r2, r3
 8021e42:	683a      	ldr	r2, [r7, #0]
 8021e44:	429a      	cmp	r2, r3
 8021e46:	d20b      	bcs.n	8021e60 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8021e48:	687b      	ldr	r3, [r7, #4]
 8021e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021e4c:	f043 0204 	orr.w	r2, r3, #4
 8021e50:	687b      	ldr	r3, [r7, #4]
 8021e52:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8021e54:	687b      	ldr	r3, [r7, #4]
 8021e56:	2200      	movs	r2, #0
 8021e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8021e5c:	2303      	movs	r3, #3
 8021e5e:	e03d      	b.n	8021edc <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	681b      	ldr	r3, [r3, #0]
 8021e64:	681b      	ldr	r3, [r3, #0]
 8021e66:	f003 0302 	and.w	r3, r3, #2
 8021e6a:	2b02      	cmp	r3, #2
 8021e6c:	d1dd      	bne.n	8021e2a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	681b      	ldr	r3, [r3, #0]
 8021e72:	f06f 0212 	mvn.w	r2, #18
 8021e76:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8021e78:	687b      	ldr	r3, [r7, #4]
 8021e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021e7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8021e84:	687b      	ldr	r3, [r7, #4]
 8021e86:	681b      	ldr	r3, [r3, #0]
 8021e88:	689b      	ldr	r3, [r3, #8]
 8021e8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	d123      	bne.n	8021eda <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8021e96:	2b00      	cmp	r3, #0
 8021e98:	d11f      	bne.n	8021eda <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ea0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	d006      	beq.n	8021eb6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8021ea8:	687b      	ldr	r3, [r7, #4]
 8021eaa:	681b      	ldr	r3, [r3, #0]
 8021eac:	689b      	ldr	r3, [r3, #8]
 8021eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8021eb2:	2b00      	cmp	r3, #0
 8021eb4:	d111      	bne.n	8021eda <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021eba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8021ec2:	687b      	ldr	r3, [r7, #4]
 8021ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	d105      	bne.n	8021eda <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8021ece:	687b      	ldr	r3, [r7, #4]
 8021ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ed2:	f043 0201 	orr.w	r2, r3, #1
 8021ed6:	687b      	ldr	r3, [r7, #4]
 8021ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8021eda:	2300      	movs	r3, #0
}
 8021edc:	4618      	mov	r0, r3
 8021ede:	3710      	adds	r7, #16
 8021ee0:	46bd      	mov	sp, r7
 8021ee2:	bd80      	pop	{r7, pc}

08021ee4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8021ee4:	b480      	push	{r7}
 8021ee6:	b083      	sub	sp, #12
 8021ee8:	af00      	add	r7, sp, #0
 8021eea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8021eec:	687b      	ldr	r3, [r7, #4]
 8021eee:	681b      	ldr	r3, [r3, #0]
 8021ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8021ef2:	4618      	mov	r0, r3
 8021ef4:	370c      	adds	r7, #12
 8021ef6:	46bd      	mov	sp, r7
 8021ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021efc:	4770      	bx	lr
	...

08021f00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8021f00:	b480      	push	{r7}
 8021f02:	b085      	sub	sp, #20
 8021f04:	af00      	add	r7, sp, #0
 8021f06:	6078      	str	r0, [r7, #4]
 8021f08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8021f0a:	2300      	movs	r3, #0
 8021f0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8021f0e:	687b      	ldr	r3, [r7, #4]
 8021f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021f14:	2b01      	cmp	r3, #1
 8021f16:	d101      	bne.n	8021f1c <HAL_ADC_ConfigChannel+0x1c>
 8021f18:	2302      	movs	r3, #2
 8021f1a:	e105      	b.n	8022128 <HAL_ADC_ConfigChannel+0x228>
 8021f1c:	687b      	ldr	r3, [r7, #4]
 8021f1e:	2201      	movs	r2, #1
 8021f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8021f24:	683b      	ldr	r3, [r7, #0]
 8021f26:	681b      	ldr	r3, [r3, #0]
 8021f28:	2b09      	cmp	r3, #9
 8021f2a:	d925      	bls.n	8021f78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	681b      	ldr	r3, [r3, #0]
 8021f30:	68d9      	ldr	r1, [r3, #12]
 8021f32:	683b      	ldr	r3, [r7, #0]
 8021f34:	681b      	ldr	r3, [r3, #0]
 8021f36:	b29b      	uxth	r3, r3
 8021f38:	461a      	mov	r2, r3
 8021f3a:	4613      	mov	r3, r2
 8021f3c:	005b      	lsls	r3, r3, #1
 8021f3e:	4413      	add	r3, r2
 8021f40:	3b1e      	subs	r3, #30
 8021f42:	2207      	movs	r2, #7
 8021f44:	fa02 f303 	lsl.w	r3, r2, r3
 8021f48:	43da      	mvns	r2, r3
 8021f4a:	687b      	ldr	r3, [r7, #4]
 8021f4c:	681b      	ldr	r3, [r3, #0]
 8021f4e:	400a      	ands	r2, r1
 8021f50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8021f52:	687b      	ldr	r3, [r7, #4]
 8021f54:	681b      	ldr	r3, [r3, #0]
 8021f56:	68d9      	ldr	r1, [r3, #12]
 8021f58:	683b      	ldr	r3, [r7, #0]
 8021f5a:	689a      	ldr	r2, [r3, #8]
 8021f5c:	683b      	ldr	r3, [r7, #0]
 8021f5e:	681b      	ldr	r3, [r3, #0]
 8021f60:	b29b      	uxth	r3, r3
 8021f62:	4618      	mov	r0, r3
 8021f64:	4603      	mov	r3, r0
 8021f66:	005b      	lsls	r3, r3, #1
 8021f68:	4403      	add	r3, r0
 8021f6a:	3b1e      	subs	r3, #30
 8021f6c:	409a      	lsls	r2, r3
 8021f6e:	687b      	ldr	r3, [r7, #4]
 8021f70:	681b      	ldr	r3, [r3, #0]
 8021f72:	430a      	orrs	r2, r1
 8021f74:	60da      	str	r2, [r3, #12]
 8021f76:	e022      	b.n	8021fbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	681b      	ldr	r3, [r3, #0]
 8021f7c:	6919      	ldr	r1, [r3, #16]
 8021f7e:	683b      	ldr	r3, [r7, #0]
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	b29b      	uxth	r3, r3
 8021f84:	461a      	mov	r2, r3
 8021f86:	4613      	mov	r3, r2
 8021f88:	005b      	lsls	r3, r3, #1
 8021f8a:	4413      	add	r3, r2
 8021f8c:	2207      	movs	r2, #7
 8021f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8021f92:	43da      	mvns	r2, r3
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	681b      	ldr	r3, [r3, #0]
 8021f98:	400a      	ands	r2, r1
 8021f9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8021f9c:	687b      	ldr	r3, [r7, #4]
 8021f9e:	681b      	ldr	r3, [r3, #0]
 8021fa0:	6919      	ldr	r1, [r3, #16]
 8021fa2:	683b      	ldr	r3, [r7, #0]
 8021fa4:	689a      	ldr	r2, [r3, #8]
 8021fa6:	683b      	ldr	r3, [r7, #0]
 8021fa8:	681b      	ldr	r3, [r3, #0]
 8021faa:	b29b      	uxth	r3, r3
 8021fac:	4618      	mov	r0, r3
 8021fae:	4603      	mov	r3, r0
 8021fb0:	005b      	lsls	r3, r3, #1
 8021fb2:	4403      	add	r3, r0
 8021fb4:	409a      	lsls	r2, r3
 8021fb6:	687b      	ldr	r3, [r7, #4]
 8021fb8:	681b      	ldr	r3, [r3, #0]
 8021fba:	430a      	orrs	r2, r1
 8021fbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8021fbe:	683b      	ldr	r3, [r7, #0]
 8021fc0:	685b      	ldr	r3, [r3, #4]
 8021fc2:	2b06      	cmp	r3, #6
 8021fc4:	d824      	bhi.n	8022010 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8021fc6:	687b      	ldr	r3, [r7, #4]
 8021fc8:	681b      	ldr	r3, [r3, #0]
 8021fca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8021fcc:	683b      	ldr	r3, [r7, #0]
 8021fce:	685a      	ldr	r2, [r3, #4]
 8021fd0:	4613      	mov	r3, r2
 8021fd2:	009b      	lsls	r3, r3, #2
 8021fd4:	4413      	add	r3, r2
 8021fd6:	3b05      	subs	r3, #5
 8021fd8:	221f      	movs	r2, #31
 8021fda:	fa02 f303 	lsl.w	r3, r2, r3
 8021fde:	43da      	mvns	r2, r3
 8021fe0:	687b      	ldr	r3, [r7, #4]
 8021fe2:	681b      	ldr	r3, [r3, #0]
 8021fe4:	400a      	ands	r2, r1
 8021fe6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	681b      	ldr	r3, [r3, #0]
 8021fec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8021fee:	683b      	ldr	r3, [r7, #0]
 8021ff0:	681b      	ldr	r3, [r3, #0]
 8021ff2:	b29b      	uxth	r3, r3
 8021ff4:	4618      	mov	r0, r3
 8021ff6:	683b      	ldr	r3, [r7, #0]
 8021ff8:	685a      	ldr	r2, [r3, #4]
 8021ffa:	4613      	mov	r3, r2
 8021ffc:	009b      	lsls	r3, r3, #2
 8021ffe:	4413      	add	r3, r2
 8022000:	3b05      	subs	r3, #5
 8022002:	fa00 f203 	lsl.w	r2, r0, r3
 8022006:	687b      	ldr	r3, [r7, #4]
 8022008:	681b      	ldr	r3, [r3, #0]
 802200a:	430a      	orrs	r2, r1
 802200c:	635a      	str	r2, [r3, #52]	; 0x34
 802200e:	e04c      	b.n	80220aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8022010:	683b      	ldr	r3, [r7, #0]
 8022012:	685b      	ldr	r3, [r3, #4]
 8022014:	2b0c      	cmp	r3, #12
 8022016:	d824      	bhi.n	8022062 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8022018:	687b      	ldr	r3, [r7, #4]
 802201a:	681b      	ldr	r3, [r3, #0]
 802201c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 802201e:	683b      	ldr	r3, [r7, #0]
 8022020:	685a      	ldr	r2, [r3, #4]
 8022022:	4613      	mov	r3, r2
 8022024:	009b      	lsls	r3, r3, #2
 8022026:	4413      	add	r3, r2
 8022028:	3b23      	subs	r3, #35	; 0x23
 802202a:	221f      	movs	r2, #31
 802202c:	fa02 f303 	lsl.w	r3, r2, r3
 8022030:	43da      	mvns	r2, r3
 8022032:	687b      	ldr	r3, [r7, #4]
 8022034:	681b      	ldr	r3, [r3, #0]
 8022036:	400a      	ands	r2, r1
 8022038:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	681b      	ldr	r3, [r3, #0]
 802203e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8022040:	683b      	ldr	r3, [r7, #0]
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	b29b      	uxth	r3, r3
 8022046:	4618      	mov	r0, r3
 8022048:	683b      	ldr	r3, [r7, #0]
 802204a:	685a      	ldr	r2, [r3, #4]
 802204c:	4613      	mov	r3, r2
 802204e:	009b      	lsls	r3, r3, #2
 8022050:	4413      	add	r3, r2
 8022052:	3b23      	subs	r3, #35	; 0x23
 8022054:	fa00 f203 	lsl.w	r2, r0, r3
 8022058:	687b      	ldr	r3, [r7, #4]
 802205a:	681b      	ldr	r3, [r3, #0]
 802205c:	430a      	orrs	r2, r1
 802205e:	631a      	str	r2, [r3, #48]	; 0x30
 8022060:	e023      	b.n	80220aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8022062:	687b      	ldr	r3, [r7, #4]
 8022064:	681b      	ldr	r3, [r3, #0]
 8022066:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8022068:	683b      	ldr	r3, [r7, #0]
 802206a:	685a      	ldr	r2, [r3, #4]
 802206c:	4613      	mov	r3, r2
 802206e:	009b      	lsls	r3, r3, #2
 8022070:	4413      	add	r3, r2
 8022072:	3b41      	subs	r3, #65	; 0x41
 8022074:	221f      	movs	r2, #31
 8022076:	fa02 f303 	lsl.w	r3, r2, r3
 802207a:	43da      	mvns	r2, r3
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	681b      	ldr	r3, [r3, #0]
 8022080:	400a      	ands	r2, r1
 8022082:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8022084:	687b      	ldr	r3, [r7, #4]
 8022086:	681b      	ldr	r3, [r3, #0]
 8022088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802208a:	683b      	ldr	r3, [r7, #0]
 802208c:	681b      	ldr	r3, [r3, #0]
 802208e:	b29b      	uxth	r3, r3
 8022090:	4618      	mov	r0, r3
 8022092:	683b      	ldr	r3, [r7, #0]
 8022094:	685a      	ldr	r2, [r3, #4]
 8022096:	4613      	mov	r3, r2
 8022098:	009b      	lsls	r3, r3, #2
 802209a:	4413      	add	r3, r2
 802209c:	3b41      	subs	r3, #65	; 0x41
 802209e:	fa00 f203 	lsl.w	r2, r0, r3
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	681b      	ldr	r3, [r3, #0]
 80220a6:	430a      	orrs	r2, r1
 80220a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80220aa:	4b22      	ldr	r3, [pc, #136]	; (8022134 <HAL_ADC_ConfigChannel+0x234>)
 80220ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80220ae:	687b      	ldr	r3, [r7, #4]
 80220b0:	681b      	ldr	r3, [r3, #0]
 80220b2:	4a21      	ldr	r2, [pc, #132]	; (8022138 <HAL_ADC_ConfigChannel+0x238>)
 80220b4:	4293      	cmp	r3, r2
 80220b6:	d109      	bne.n	80220cc <HAL_ADC_ConfigChannel+0x1cc>
 80220b8:	683b      	ldr	r3, [r7, #0]
 80220ba:	681b      	ldr	r3, [r3, #0]
 80220bc:	2b12      	cmp	r3, #18
 80220be:	d105      	bne.n	80220cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80220c0:	68fb      	ldr	r3, [r7, #12]
 80220c2:	685b      	ldr	r3, [r3, #4]
 80220c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80220c8:	68fb      	ldr	r3, [r7, #12]
 80220ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	681b      	ldr	r3, [r3, #0]
 80220d0:	4a19      	ldr	r2, [pc, #100]	; (8022138 <HAL_ADC_ConfigChannel+0x238>)
 80220d2:	4293      	cmp	r3, r2
 80220d4:	d123      	bne.n	802211e <HAL_ADC_ConfigChannel+0x21e>
 80220d6:	683b      	ldr	r3, [r7, #0]
 80220d8:	681b      	ldr	r3, [r3, #0]
 80220da:	2b10      	cmp	r3, #16
 80220dc:	d003      	beq.n	80220e6 <HAL_ADC_ConfigChannel+0x1e6>
 80220de:	683b      	ldr	r3, [r7, #0]
 80220e0:	681b      	ldr	r3, [r3, #0]
 80220e2:	2b11      	cmp	r3, #17
 80220e4:	d11b      	bne.n	802211e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80220e6:	68fb      	ldr	r3, [r7, #12]
 80220e8:	685b      	ldr	r3, [r3, #4]
 80220ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80220ee:	68fb      	ldr	r3, [r7, #12]
 80220f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80220f2:	683b      	ldr	r3, [r7, #0]
 80220f4:	681b      	ldr	r3, [r3, #0]
 80220f6:	2b10      	cmp	r3, #16
 80220f8:	d111      	bne.n	802211e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80220fa:	4b10      	ldr	r3, [pc, #64]	; (802213c <HAL_ADC_ConfigChannel+0x23c>)
 80220fc:	681b      	ldr	r3, [r3, #0]
 80220fe:	4a10      	ldr	r2, [pc, #64]	; (8022140 <HAL_ADC_ConfigChannel+0x240>)
 8022100:	fba2 2303 	umull	r2, r3, r2, r3
 8022104:	0c9a      	lsrs	r2, r3, #18
 8022106:	4613      	mov	r3, r2
 8022108:	009b      	lsls	r3, r3, #2
 802210a:	4413      	add	r3, r2
 802210c:	005b      	lsls	r3, r3, #1
 802210e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8022110:	e002      	b.n	8022118 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8022112:	68bb      	ldr	r3, [r7, #8]
 8022114:	3b01      	subs	r3, #1
 8022116:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8022118:	68bb      	ldr	r3, [r7, #8]
 802211a:	2b00      	cmp	r3, #0
 802211c:	d1f9      	bne.n	8022112 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 802211e:	687b      	ldr	r3, [r7, #4]
 8022120:	2200      	movs	r2, #0
 8022122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8022126:	2300      	movs	r3, #0
}
 8022128:	4618      	mov	r0, r3
 802212a:	3714      	adds	r7, #20
 802212c:	46bd      	mov	sp, r7
 802212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022132:	4770      	bx	lr
 8022134:	40012300 	.word	0x40012300
 8022138:	40012000 	.word	0x40012000
 802213c:	20000004 	.word	0x20000004
 8022140:	431bde83 	.word	0x431bde83

08022144 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8022144:	b480      	push	{r7}
 8022146:	b085      	sub	sp, #20
 8022148:	af00      	add	r7, sp, #0
 802214a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802214c:	4b79      	ldr	r3, [pc, #484]	; (8022334 <ADC_Init+0x1f0>)
 802214e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8022150:	68fb      	ldr	r3, [r7, #12]
 8022152:	685b      	ldr	r3, [r3, #4]
 8022154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8022158:	68fb      	ldr	r3, [r7, #12]
 802215a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 802215c:	68fb      	ldr	r3, [r7, #12]
 802215e:	685a      	ldr	r2, [r3, #4]
 8022160:	687b      	ldr	r3, [r7, #4]
 8022162:	685b      	ldr	r3, [r3, #4]
 8022164:	431a      	orrs	r2, r3
 8022166:	68fb      	ldr	r3, [r7, #12]
 8022168:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 802216a:	687b      	ldr	r3, [r7, #4]
 802216c:	681b      	ldr	r3, [r3, #0]
 802216e:	685a      	ldr	r2, [r3, #4]
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	681b      	ldr	r3, [r3, #0]
 8022174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	681b      	ldr	r3, [r3, #0]
 802217e:	6859      	ldr	r1, [r3, #4]
 8022180:	687b      	ldr	r3, [r7, #4]
 8022182:	691b      	ldr	r3, [r3, #16]
 8022184:	021a      	lsls	r2, r3, #8
 8022186:	687b      	ldr	r3, [r7, #4]
 8022188:	681b      	ldr	r3, [r3, #0]
 802218a:	430a      	orrs	r2, r1
 802218c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 802218e:	687b      	ldr	r3, [r7, #4]
 8022190:	681b      	ldr	r3, [r3, #0]
 8022192:	685a      	ldr	r2, [r3, #4]
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	681b      	ldr	r3, [r3, #0]
 8022198:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 802219c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	681b      	ldr	r3, [r3, #0]
 80221a2:	6859      	ldr	r1, [r3, #4]
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	689a      	ldr	r2, [r3, #8]
 80221a8:	687b      	ldr	r3, [r7, #4]
 80221aa:	681b      	ldr	r3, [r3, #0]
 80221ac:	430a      	orrs	r2, r1
 80221ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	681b      	ldr	r3, [r3, #0]
 80221b4:	689a      	ldr	r2, [r3, #8]
 80221b6:	687b      	ldr	r3, [r7, #4]
 80221b8:	681b      	ldr	r3, [r3, #0]
 80221ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80221be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80221c0:	687b      	ldr	r3, [r7, #4]
 80221c2:	681b      	ldr	r3, [r3, #0]
 80221c4:	6899      	ldr	r1, [r3, #8]
 80221c6:	687b      	ldr	r3, [r7, #4]
 80221c8:	68da      	ldr	r2, [r3, #12]
 80221ca:	687b      	ldr	r3, [r7, #4]
 80221cc:	681b      	ldr	r3, [r3, #0]
 80221ce:	430a      	orrs	r2, r1
 80221d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80221d2:	687b      	ldr	r3, [r7, #4]
 80221d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221d6:	4a58      	ldr	r2, [pc, #352]	; (8022338 <ADC_Init+0x1f4>)
 80221d8:	4293      	cmp	r3, r2
 80221da:	d022      	beq.n	8022222 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80221dc:	687b      	ldr	r3, [r7, #4]
 80221de:	681b      	ldr	r3, [r3, #0]
 80221e0:	689a      	ldr	r2, [r3, #8]
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	681b      	ldr	r3, [r3, #0]
 80221e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80221ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	681b      	ldr	r3, [r3, #0]
 80221f0:	6899      	ldr	r1, [r3, #8]
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80221f6:	687b      	ldr	r3, [r7, #4]
 80221f8:	681b      	ldr	r3, [r3, #0]
 80221fa:	430a      	orrs	r2, r1
 80221fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	681b      	ldr	r3, [r3, #0]
 8022202:	689a      	ldr	r2, [r3, #8]
 8022204:	687b      	ldr	r3, [r7, #4]
 8022206:	681b      	ldr	r3, [r3, #0]
 8022208:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802220c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	681b      	ldr	r3, [r3, #0]
 8022212:	6899      	ldr	r1, [r3, #8]
 8022214:	687b      	ldr	r3, [r7, #4]
 8022216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022218:	687b      	ldr	r3, [r7, #4]
 802221a:	681b      	ldr	r3, [r3, #0]
 802221c:	430a      	orrs	r2, r1
 802221e:	609a      	str	r2, [r3, #8]
 8022220:	e00f      	b.n	8022242 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	681b      	ldr	r3, [r3, #0]
 8022226:	689a      	ldr	r2, [r3, #8]
 8022228:	687b      	ldr	r3, [r7, #4]
 802222a:	681b      	ldr	r3, [r3, #0]
 802222c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8022230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	681b      	ldr	r3, [r3, #0]
 8022236:	689a      	ldr	r2, [r3, #8]
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	681b      	ldr	r3, [r3, #0]
 802223c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8022240:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8022242:	687b      	ldr	r3, [r7, #4]
 8022244:	681b      	ldr	r3, [r3, #0]
 8022246:	689a      	ldr	r2, [r3, #8]
 8022248:	687b      	ldr	r3, [r7, #4]
 802224a:	681b      	ldr	r3, [r3, #0]
 802224c:	f022 0202 	bic.w	r2, r2, #2
 8022250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	6899      	ldr	r1, [r3, #8]
 8022258:	687b      	ldr	r3, [r7, #4]
 802225a:	7e1b      	ldrb	r3, [r3, #24]
 802225c:	005a      	lsls	r2, r3, #1
 802225e:	687b      	ldr	r3, [r7, #4]
 8022260:	681b      	ldr	r3, [r3, #0]
 8022262:	430a      	orrs	r2, r1
 8022264:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	f893 3020 	ldrb.w	r3, [r3, #32]
 802226c:	2b00      	cmp	r3, #0
 802226e:	d01b      	beq.n	80222a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8022270:	687b      	ldr	r3, [r7, #4]
 8022272:	681b      	ldr	r3, [r3, #0]
 8022274:	685a      	ldr	r2, [r3, #4]
 8022276:	687b      	ldr	r3, [r7, #4]
 8022278:	681b      	ldr	r3, [r3, #0]
 802227a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802227e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8022280:	687b      	ldr	r3, [r7, #4]
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	685a      	ldr	r2, [r3, #4]
 8022286:	687b      	ldr	r3, [r7, #4]
 8022288:	681b      	ldr	r3, [r3, #0]
 802228a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 802228e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8022290:	687b      	ldr	r3, [r7, #4]
 8022292:	681b      	ldr	r3, [r3, #0]
 8022294:	6859      	ldr	r1, [r3, #4]
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802229a:	3b01      	subs	r3, #1
 802229c:	035a      	lsls	r2, r3, #13
 802229e:	687b      	ldr	r3, [r7, #4]
 80222a0:	681b      	ldr	r3, [r3, #0]
 80222a2:	430a      	orrs	r2, r1
 80222a4:	605a      	str	r2, [r3, #4]
 80222a6:	e007      	b.n	80222b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80222a8:	687b      	ldr	r3, [r7, #4]
 80222aa:	681b      	ldr	r3, [r3, #0]
 80222ac:	685a      	ldr	r2, [r3, #4]
 80222ae:	687b      	ldr	r3, [r7, #4]
 80222b0:	681b      	ldr	r3, [r3, #0]
 80222b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80222b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	681b      	ldr	r3, [r3, #0]
 80222bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80222be:	687b      	ldr	r3, [r7, #4]
 80222c0:	681b      	ldr	r3, [r3, #0]
 80222c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80222c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80222c8:	687b      	ldr	r3, [r7, #4]
 80222ca:	681b      	ldr	r3, [r3, #0]
 80222cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	69db      	ldr	r3, [r3, #28]
 80222d2:	3b01      	subs	r3, #1
 80222d4:	051a      	lsls	r2, r3, #20
 80222d6:	687b      	ldr	r3, [r7, #4]
 80222d8:	681b      	ldr	r3, [r3, #0]
 80222da:	430a      	orrs	r2, r1
 80222dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	681b      	ldr	r3, [r3, #0]
 80222e2:	689a      	ldr	r2, [r3, #8]
 80222e4:	687b      	ldr	r3, [r7, #4]
 80222e6:	681b      	ldr	r3, [r3, #0]
 80222e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80222ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	681b      	ldr	r3, [r3, #0]
 80222f2:	6899      	ldr	r1, [r3, #8]
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80222fa:	025a      	lsls	r2, r3, #9
 80222fc:	687b      	ldr	r3, [r7, #4]
 80222fe:	681b      	ldr	r3, [r3, #0]
 8022300:	430a      	orrs	r2, r1
 8022302:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8022304:	687b      	ldr	r3, [r7, #4]
 8022306:	681b      	ldr	r3, [r3, #0]
 8022308:	689a      	ldr	r2, [r3, #8]
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	681b      	ldr	r3, [r3, #0]
 802230e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8022312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8022314:	687b      	ldr	r3, [r7, #4]
 8022316:	681b      	ldr	r3, [r3, #0]
 8022318:	6899      	ldr	r1, [r3, #8]
 802231a:	687b      	ldr	r3, [r7, #4]
 802231c:	695b      	ldr	r3, [r3, #20]
 802231e:	029a      	lsls	r2, r3, #10
 8022320:	687b      	ldr	r3, [r7, #4]
 8022322:	681b      	ldr	r3, [r3, #0]
 8022324:	430a      	orrs	r2, r1
 8022326:	609a      	str	r2, [r3, #8]
}
 8022328:	bf00      	nop
 802232a:	3714      	adds	r7, #20
 802232c:	46bd      	mov	sp, r7
 802232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022332:	4770      	bx	lr
 8022334:	40012300 	.word	0x40012300
 8022338:	0f000001 	.word	0x0f000001

0802233c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802233c:	b480      	push	{r7}
 802233e:	b085      	sub	sp, #20
 8022340:	af00      	add	r7, sp, #0
 8022342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8022344:	687b      	ldr	r3, [r7, #4]
 8022346:	f003 0307 	and.w	r3, r3, #7
 802234a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802234c:	4b0c      	ldr	r3, [pc, #48]	; (8022380 <__NVIC_SetPriorityGrouping+0x44>)
 802234e:	68db      	ldr	r3, [r3, #12]
 8022350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8022352:	68ba      	ldr	r2, [r7, #8]
 8022354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8022358:	4013      	ands	r3, r2
 802235a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802235c:	68fb      	ldr	r3, [r7, #12]
 802235e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8022360:	68bb      	ldr	r3, [r7, #8]
 8022362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8022364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8022368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802236c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802236e:	4a04      	ldr	r2, [pc, #16]	; (8022380 <__NVIC_SetPriorityGrouping+0x44>)
 8022370:	68bb      	ldr	r3, [r7, #8]
 8022372:	60d3      	str	r3, [r2, #12]
}
 8022374:	bf00      	nop
 8022376:	3714      	adds	r7, #20
 8022378:	46bd      	mov	sp, r7
 802237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802237e:	4770      	bx	lr
 8022380:	e000ed00 	.word	0xe000ed00

08022384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8022384:	b480      	push	{r7}
 8022386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022388:	4b04      	ldr	r3, [pc, #16]	; (802239c <__NVIC_GetPriorityGrouping+0x18>)
 802238a:	68db      	ldr	r3, [r3, #12]
 802238c:	0a1b      	lsrs	r3, r3, #8
 802238e:	f003 0307 	and.w	r3, r3, #7
}
 8022392:	4618      	mov	r0, r3
 8022394:	46bd      	mov	sp, r7
 8022396:	f85d 7b04 	ldr.w	r7, [sp], #4
 802239a:	4770      	bx	lr
 802239c:	e000ed00 	.word	0xe000ed00

080223a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80223a0:	b480      	push	{r7}
 80223a2:	b083      	sub	sp, #12
 80223a4:	af00      	add	r7, sp, #0
 80223a6:	4603      	mov	r3, r0
 80223a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80223aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80223ae:	2b00      	cmp	r3, #0
 80223b0:	db0b      	blt.n	80223ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80223b2:	79fb      	ldrb	r3, [r7, #7]
 80223b4:	f003 021f 	and.w	r2, r3, #31
 80223b8:	4907      	ldr	r1, [pc, #28]	; (80223d8 <__NVIC_EnableIRQ+0x38>)
 80223ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80223be:	095b      	lsrs	r3, r3, #5
 80223c0:	2001      	movs	r0, #1
 80223c2:	fa00 f202 	lsl.w	r2, r0, r2
 80223c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80223ca:	bf00      	nop
 80223cc:	370c      	adds	r7, #12
 80223ce:	46bd      	mov	sp, r7
 80223d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223d4:	4770      	bx	lr
 80223d6:	bf00      	nop
 80223d8:	e000e100 	.word	0xe000e100

080223dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80223dc:	b480      	push	{r7}
 80223de:	b083      	sub	sp, #12
 80223e0:	af00      	add	r7, sp, #0
 80223e2:	4603      	mov	r3, r0
 80223e4:	6039      	str	r1, [r7, #0]
 80223e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80223e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80223ec:	2b00      	cmp	r3, #0
 80223ee:	db0a      	blt.n	8022406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80223f0:	683b      	ldr	r3, [r7, #0]
 80223f2:	b2da      	uxtb	r2, r3
 80223f4:	490c      	ldr	r1, [pc, #48]	; (8022428 <__NVIC_SetPriority+0x4c>)
 80223f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80223fa:	0112      	lsls	r2, r2, #4
 80223fc:	b2d2      	uxtb	r2, r2
 80223fe:	440b      	add	r3, r1
 8022400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8022404:	e00a      	b.n	802241c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022406:	683b      	ldr	r3, [r7, #0]
 8022408:	b2da      	uxtb	r2, r3
 802240a:	4908      	ldr	r1, [pc, #32]	; (802242c <__NVIC_SetPriority+0x50>)
 802240c:	79fb      	ldrb	r3, [r7, #7]
 802240e:	f003 030f 	and.w	r3, r3, #15
 8022412:	3b04      	subs	r3, #4
 8022414:	0112      	lsls	r2, r2, #4
 8022416:	b2d2      	uxtb	r2, r2
 8022418:	440b      	add	r3, r1
 802241a:	761a      	strb	r2, [r3, #24]
}
 802241c:	bf00      	nop
 802241e:	370c      	adds	r7, #12
 8022420:	46bd      	mov	sp, r7
 8022422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022426:	4770      	bx	lr
 8022428:	e000e100 	.word	0xe000e100
 802242c:	e000ed00 	.word	0xe000ed00

08022430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8022430:	b480      	push	{r7}
 8022432:	b089      	sub	sp, #36	; 0x24
 8022434:	af00      	add	r7, sp, #0
 8022436:	60f8      	str	r0, [r7, #12]
 8022438:	60b9      	str	r1, [r7, #8]
 802243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802243c:	68fb      	ldr	r3, [r7, #12]
 802243e:	f003 0307 	and.w	r3, r3, #7
 8022442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022444:	69fb      	ldr	r3, [r7, #28]
 8022446:	f1c3 0307 	rsb	r3, r3, #7
 802244a:	2b04      	cmp	r3, #4
 802244c:	bf28      	it	cs
 802244e:	2304      	movcs	r3, #4
 8022450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022452:	69fb      	ldr	r3, [r7, #28]
 8022454:	3304      	adds	r3, #4
 8022456:	2b06      	cmp	r3, #6
 8022458:	d902      	bls.n	8022460 <NVIC_EncodePriority+0x30>
 802245a:	69fb      	ldr	r3, [r7, #28]
 802245c:	3b03      	subs	r3, #3
 802245e:	e000      	b.n	8022462 <NVIC_EncodePriority+0x32>
 8022460:	2300      	movs	r3, #0
 8022462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022464:	f04f 32ff 	mov.w	r2, #4294967295
 8022468:	69bb      	ldr	r3, [r7, #24]
 802246a:	fa02 f303 	lsl.w	r3, r2, r3
 802246e:	43da      	mvns	r2, r3
 8022470:	68bb      	ldr	r3, [r7, #8]
 8022472:	401a      	ands	r2, r3
 8022474:	697b      	ldr	r3, [r7, #20]
 8022476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022478:	f04f 31ff 	mov.w	r1, #4294967295
 802247c:	697b      	ldr	r3, [r7, #20]
 802247e:	fa01 f303 	lsl.w	r3, r1, r3
 8022482:	43d9      	mvns	r1, r3
 8022484:	687b      	ldr	r3, [r7, #4]
 8022486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022488:	4313      	orrs	r3, r2
         );
}
 802248a:	4618      	mov	r0, r3
 802248c:	3724      	adds	r7, #36	; 0x24
 802248e:	46bd      	mov	sp, r7
 8022490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022494:	4770      	bx	lr

08022496 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022496:	b580      	push	{r7, lr}
 8022498:	b082      	sub	sp, #8
 802249a:	af00      	add	r7, sp, #0
 802249c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802249e:	6878      	ldr	r0, [r7, #4]
 80224a0:	f7ff ff4c 	bl	802233c <__NVIC_SetPriorityGrouping>
}
 80224a4:	bf00      	nop
 80224a6:	3708      	adds	r7, #8
 80224a8:	46bd      	mov	sp, r7
 80224aa:	bd80      	pop	{r7, pc}

080224ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80224ac:	b580      	push	{r7, lr}
 80224ae:	b086      	sub	sp, #24
 80224b0:	af00      	add	r7, sp, #0
 80224b2:	4603      	mov	r3, r0
 80224b4:	60b9      	str	r1, [r7, #8]
 80224b6:	607a      	str	r2, [r7, #4]
 80224b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80224ba:	2300      	movs	r3, #0
 80224bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80224be:	f7ff ff61 	bl	8022384 <__NVIC_GetPriorityGrouping>
 80224c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80224c4:	687a      	ldr	r2, [r7, #4]
 80224c6:	68b9      	ldr	r1, [r7, #8]
 80224c8:	6978      	ldr	r0, [r7, #20]
 80224ca:	f7ff ffb1 	bl	8022430 <NVIC_EncodePriority>
 80224ce:	4602      	mov	r2, r0
 80224d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80224d4:	4611      	mov	r1, r2
 80224d6:	4618      	mov	r0, r3
 80224d8:	f7ff ff80 	bl	80223dc <__NVIC_SetPriority>
}
 80224dc:	bf00      	nop
 80224de:	3718      	adds	r7, #24
 80224e0:	46bd      	mov	sp, r7
 80224e2:	bd80      	pop	{r7, pc}

080224e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80224e4:	b580      	push	{r7, lr}
 80224e6:	b082      	sub	sp, #8
 80224e8:	af00      	add	r7, sp, #0
 80224ea:	4603      	mov	r3, r0
 80224ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80224ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80224f2:	4618      	mov	r0, r3
 80224f4:	f7ff ff54 	bl	80223a0 <__NVIC_EnableIRQ>
}
 80224f8:	bf00      	nop
 80224fa:	3708      	adds	r7, #8
 80224fc:	46bd      	mov	sp, r7
 80224fe:	bd80      	pop	{r7, pc}

08022500 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8022500:	b580      	push	{r7, lr}
 8022502:	b086      	sub	sp, #24
 8022504:	af00      	add	r7, sp, #0
 8022506:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8022508:	2300      	movs	r3, #0
 802250a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 802250c:	f7ff fb2c 	bl	8021b68 <HAL_GetTick>
 8022510:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	2b00      	cmp	r3, #0
 8022516:	d101      	bne.n	802251c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8022518:	2301      	movs	r3, #1
 802251a:	e099      	b.n	8022650 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	2200      	movs	r2, #0
 8022520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8022524:	687b      	ldr	r3, [r7, #4]
 8022526:	2202      	movs	r2, #2
 8022528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	681b      	ldr	r3, [r3, #0]
 8022530:	681a      	ldr	r2, [r3, #0]
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	681b      	ldr	r3, [r3, #0]
 8022536:	f022 0201 	bic.w	r2, r2, #1
 802253a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802253c:	e00f      	b.n	802255e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802253e:	f7ff fb13 	bl	8021b68 <HAL_GetTick>
 8022542:	4602      	mov	r2, r0
 8022544:	693b      	ldr	r3, [r7, #16]
 8022546:	1ad3      	subs	r3, r2, r3
 8022548:	2b05      	cmp	r3, #5
 802254a:	d908      	bls.n	802255e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	2220      	movs	r2, #32
 8022550:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8022552:	687b      	ldr	r3, [r7, #4]
 8022554:	2203      	movs	r2, #3
 8022556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802255a:	2303      	movs	r3, #3
 802255c:	e078      	b.n	8022650 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802255e:	687b      	ldr	r3, [r7, #4]
 8022560:	681b      	ldr	r3, [r3, #0]
 8022562:	681b      	ldr	r3, [r3, #0]
 8022564:	f003 0301 	and.w	r3, r3, #1
 8022568:	2b00      	cmp	r3, #0
 802256a:	d1e8      	bne.n	802253e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	681b      	ldr	r3, [r3, #0]
 8022570:	681b      	ldr	r3, [r3, #0]
 8022572:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8022574:	697a      	ldr	r2, [r7, #20]
 8022576:	4b38      	ldr	r3, [pc, #224]	; (8022658 <HAL_DMA_Init+0x158>)
 8022578:	4013      	ands	r3, r2
 802257a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802257c:	687b      	ldr	r3, [r7, #4]
 802257e:	685a      	ldr	r2, [r3, #4]
 8022580:	687b      	ldr	r3, [r7, #4]
 8022582:	689b      	ldr	r3, [r3, #8]
 8022584:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022586:	687b      	ldr	r3, [r7, #4]
 8022588:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802258a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802258c:	687b      	ldr	r3, [r7, #4]
 802258e:	691b      	ldr	r3, [r3, #16]
 8022590:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022592:	687b      	ldr	r3, [r7, #4]
 8022594:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022598:	687b      	ldr	r3, [r7, #4]
 802259a:	699b      	ldr	r3, [r3, #24]
 802259c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802259e:	687b      	ldr	r3, [r7, #4]
 80225a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80225a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80225a4:	687b      	ldr	r3, [r7, #4]
 80225a6:	6a1b      	ldr	r3, [r3, #32]
 80225a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80225aa:	697a      	ldr	r2, [r7, #20]
 80225ac:	4313      	orrs	r3, r2
 80225ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80225b0:	687b      	ldr	r3, [r7, #4]
 80225b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225b4:	2b04      	cmp	r3, #4
 80225b6:	d107      	bne.n	80225c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80225bc:	687b      	ldr	r3, [r7, #4]
 80225be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80225c0:	4313      	orrs	r3, r2
 80225c2:	697a      	ldr	r2, [r7, #20]
 80225c4:	4313      	orrs	r3, r2
 80225c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80225c8:	687b      	ldr	r3, [r7, #4]
 80225ca:	681b      	ldr	r3, [r3, #0]
 80225cc:	697a      	ldr	r2, [r7, #20]
 80225ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	681b      	ldr	r3, [r3, #0]
 80225d4:	695b      	ldr	r3, [r3, #20]
 80225d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80225d8:	697b      	ldr	r3, [r7, #20]
 80225da:	f023 0307 	bic.w	r3, r3, #7
 80225de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80225e0:	687b      	ldr	r3, [r7, #4]
 80225e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225e4:	697a      	ldr	r2, [r7, #20]
 80225e6:	4313      	orrs	r3, r2
 80225e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80225ea:	687b      	ldr	r3, [r7, #4]
 80225ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225ee:	2b04      	cmp	r3, #4
 80225f0:	d117      	bne.n	8022622 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80225f2:	687b      	ldr	r3, [r7, #4]
 80225f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80225f6:	697a      	ldr	r2, [r7, #20]
 80225f8:	4313      	orrs	r3, r2
 80225fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022600:	2b00      	cmp	r3, #0
 8022602:	d00e      	beq.n	8022622 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8022604:	6878      	ldr	r0, [r7, #4]
 8022606:	f000 fa91 	bl	8022b2c <DMA_CheckFifoParam>
 802260a:	4603      	mov	r3, r0
 802260c:	2b00      	cmp	r3, #0
 802260e:	d008      	beq.n	8022622 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	2240      	movs	r2, #64	; 0x40
 8022614:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	2201      	movs	r2, #1
 802261a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 802261e:	2301      	movs	r3, #1
 8022620:	e016      	b.n	8022650 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	681b      	ldr	r3, [r3, #0]
 8022626:	697a      	ldr	r2, [r7, #20]
 8022628:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802262a:	6878      	ldr	r0, [r7, #4]
 802262c:	f000 fa48 	bl	8022ac0 <DMA_CalcBaseAndBitshift>
 8022630:	4603      	mov	r3, r0
 8022632:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022638:	223f      	movs	r2, #63	; 0x3f
 802263a:	409a      	lsls	r2, r3
 802263c:	68fb      	ldr	r3, [r7, #12]
 802263e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8022640:	687b      	ldr	r3, [r7, #4]
 8022642:	2200      	movs	r2, #0
 8022644:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8022646:	687b      	ldr	r3, [r7, #4]
 8022648:	2201      	movs	r2, #1
 802264a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802264e:	2300      	movs	r3, #0
}
 8022650:	4618      	mov	r0, r3
 8022652:	3718      	adds	r7, #24
 8022654:	46bd      	mov	sp, r7
 8022656:	bd80      	pop	{r7, pc}
 8022658:	f010803f 	.word	0xf010803f

0802265c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802265c:	b580      	push	{r7, lr}
 802265e:	b086      	sub	sp, #24
 8022660:	af00      	add	r7, sp, #0
 8022662:	60f8      	str	r0, [r7, #12]
 8022664:	60b9      	str	r1, [r7, #8]
 8022666:	607a      	str	r2, [r7, #4]
 8022668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802266a:	2300      	movs	r3, #0
 802266c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802266e:	68fb      	ldr	r3, [r7, #12]
 8022670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022672:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8022674:	68fb      	ldr	r3, [r7, #12]
 8022676:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802267a:	2b01      	cmp	r3, #1
 802267c:	d101      	bne.n	8022682 <HAL_DMA_Start_IT+0x26>
 802267e:	2302      	movs	r3, #2
 8022680:	e040      	b.n	8022704 <HAL_DMA_Start_IT+0xa8>
 8022682:	68fb      	ldr	r3, [r7, #12]
 8022684:	2201      	movs	r2, #1
 8022686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 802268a:	68fb      	ldr	r3, [r7, #12]
 802268c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8022690:	b2db      	uxtb	r3, r3
 8022692:	2b01      	cmp	r3, #1
 8022694:	d12f      	bne.n	80226f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8022696:	68fb      	ldr	r3, [r7, #12]
 8022698:	2202      	movs	r2, #2
 802269a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802269e:	68fb      	ldr	r3, [r7, #12]
 80226a0:	2200      	movs	r2, #0
 80226a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80226a4:	683b      	ldr	r3, [r7, #0]
 80226a6:	687a      	ldr	r2, [r7, #4]
 80226a8:	68b9      	ldr	r1, [r7, #8]
 80226aa:	68f8      	ldr	r0, [r7, #12]
 80226ac:	f000 f9da 	bl	8022a64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80226b0:	68fb      	ldr	r3, [r7, #12]
 80226b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80226b4:	223f      	movs	r2, #63	; 0x3f
 80226b6:	409a      	lsls	r2, r3
 80226b8:	693b      	ldr	r3, [r7, #16]
 80226ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80226bc:	68fb      	ldr	r3, [r7, #12]
 80226be:	681b      	ldr	r3, [r3, #0]
 80226c0:	681a      	ldr	r2, [r3, #0]
 80226c2:	68fb      	ldr	r3, [r7, #12]
 80226c4:	681b      	ldr	r3, [r3, #0]
 80226c6:	f042 0216 	orr.w	r2, r2, #22
 80226ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80226cc:	68fb      	ldr	r3, [r7, #12]
 80226ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80226d0:	2b00      	cmp	r3, #0
 80226d2:	d007      	beq.n	80226e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80226d4:	68fb      	ldr	r3, [r7, #12]
 80226d6:	681b      	ldr	r3, [r3, #0]
 80226d8:	681a      	ldr	r2, [r3, #0]
 80226da:	68fb      	ldr	r3, [r7, #12]
 80226dc:	681b      	ldr	r3, [r3, #0]
 80226de:	f042 0208 	orr.w	r2, r2, #8
 80226e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80226e4:	68fb      	ldr	r3, [r7, #12]
 80226e6:	681b      	ldr	r3, [r3, #0]
 80226e8:	681a      	ldr	r2, [r3, #0]
 80226ea:	68fb      	ldr	r3, [r7, #12]
 80226ec:	681b      	ldr	r3, [r3, #0]
 80226ee:	f042 0201 	orr.w	r2, r2, #1
 80226f2:	601a      	str	r2, [r3, #0]
 80226f4:	e005      	b.n	8022702 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80226f6:	68fb      	ldr	r3, [r7, #12]
 80226f8:	2200      	movs	r2, #0
 80226fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80226fe:	2302      	movs	r3, #2
 8022700:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8022702:	7dfb      	ldrb	r3, [r7, #23]
}
 8022704:	4618      	mov	r0, r3
 8022706:	3718      	adds	r7, #24
 8022708:	46bd      	mov	sp, r7
 802270a:	bd80      	pop	{r7, pc}

0802270c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802270c:	b480      	push	{r7}
 802270e:	b083      	sub	sp, #12
 8022710:	af00      	add	r7, sp, #0
 8022712:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8022714:	687b      	ldr	r3, [r7, #4]
 8022716:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802271a:	b2db      	uxtb	r3, r3
 802271c:	2b02      	cmp	r3, #2
 802271e:	d004      	beq.n	802272a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	2280      	movs	r2, #128	; 0x80
 8022724:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8022726:	2301      	movs	r3, #1
 8022728:	e00c      	b.n	8022744 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 802272a:	687b      	ldr	r3, [r7, #4]
 802272c:	2205      	movs	r2, #5
 802272e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8022732:	687b      	ldr	r3, [r7, #4]
 8022734:	681b      	ldr	r3, [r3, #0]
 8022736:	681a      	ldr	r2, [r3, #0]
 8022738:	687b      	ldr	r3, [r7, #4]
 802273a:	681b      	ldr	r3, [r3, #0]
 802273c:	f022 0201 	bic.w	r2, r2, #1
 8022740:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8022742:	2300      	movs	r3, #0
}
 8022744:	4618      	mov	r0, r3
 8022746:	370c      	adds	r7, #12
 8022748:	46bd      	mov	sp, r7
 802274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802274e:	4770      	bx	lr

08022750 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8022750:	b580      	push	{r7, lr}
 8022752:	b086      	sub	sp, #24
 8022754:	af00      	add	r7, sp, #0
 8022756:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8022758:	2300      	movs	r3, #0
 802275a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 802275c:	4b8e      	ldr	r3, [pc, #568]	; (8022998 <HAL_DMA_IRQHandler+0x248>)
 802275e:	681b      	ldr	r3, [r3, #0]
 8022760:	4a8e      	ldr	r2, [pc, #568]	; (802299c <HAL_DMA_IRQHandler+0x24c>)
 8022762:	fba2 2303 	umull	r2, r3, r2, r3
 8022766:	0a9b      	lsrs	r3, r3, #10
 8022768:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802276e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8022770:	693b      	ldr	r3, [r7, #16]
 8022772:	681b      	ldr	r3, [r3, #0]
 8022774:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802277a:	2208      	movs	r2, #8
 802277c:	409a      	lsls	r2, r3
 802277e:	68fb      	ldr	r3, [r7, #12]
 8022780:	4013      	ands	r3, r2
 8022782:	2b00      	cmp	r3, #0
 8022784:	d01a      	beq.n	80227bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	681b      	ldr	r3, [r3, #0]
 802278a:	681b      	ldr	r3, [r3, #0]
 802278c:	f003 0304 	and.w	r3, r3, #4
 8022790:	2b00      	cmp	r3, #0
 8022792:	d013      	beq.n	80227bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8022794:	687b      	ldr	r3, [r7, #4]
 8022796:	681b      	ldr	r3, [r3, #0]
 8022798:	681a      	ldr	r2, [r3, #0]
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	681b      	ldr	r3, [r3, #0]
 802279e:	f022 0204 	bic.w	r2, r2, #4
 80227a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80227a8:	2208      	movs	r2, #8
 80227aa:	409a      	lsls	r2, r3
 80227ac:	693b      	ldr	r3, [r7, #16]
 80227ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80227b0:	687b      	ldr	r3, [r7, #4]
 80227b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80227b4:	f043 0201 	orr.w	r2, r3, #1
 80227b8:	687b      	ldr	r3, [r7, #4]
 80227ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80227c0:	2201      	movs	r2, #1
 80227c2:	409a      	lsls	r2, r3
 80227c4:	68fb      	ldr	r3, [r7, #12]
 80227c6:	4013      	ands	r3, r2
 80227c8:	2b00      	cmp	r3, #0
 80227ca:	d012      	beq.n	80227f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80227cc:	687b      	ldr	r3, [r7, #4]
 80227ce:	681b      	ldr	r3, [r3, #0]
 80227d0:	695b      	ldr	r3, [r3, #20]
 80227d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80227d6:	2b00      	cmp	r3, #0
 80227d8:	d00b      	beq.n	80227f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80227da:	687b      	ldr	r3, [r7, #4]
 80227dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80227de:	2201      	movs	r2, #1
 80227e0:	409a      	lsls	r2, r3
 80227e2:	693b      	ldr	r3, [r7, #16]
 80227e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80227e6:	687b      	ldr	r3, [r7, #4]
 80227e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80227ea:	f043 0202 	orr.w	r2, r3, #2
 80227ee:	687b      	ldr	r3, [r7, #4]
 80227f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80227f6:	2204      	movs	r2, #4
 80227f8:	409a      	lsls	r2, r3
 80227fa:	68fb      	ldr	r3, [r7, #12]
 80227fc:	4013      	ands	r3, r2
 80227fe:	2b00      	cmp	r3, #0
 8022800:	d012      	beq.n	8022828 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	681b      	ldr	r3, [r3, #0]
 8022806:	681b      	ldr	r3, [r3, #0]
 8022808:	f003 0302 	and.w	r3, r3, #2
 802280c:	2b00      	cmp	r3, #0
 802280e:	d00b      	beq.n	8022828 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022814:	2204      	movs	r2, #4
 8022816:	409a      	lsls	r2, r3
 8022818:	693b      	ldr	r3, [r7, #16]
 802281a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802281c:	687b      	ldr	r3, [r7, #4]
 802281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022820:	f043 0204 	orr.w	r2, r3, #4
 8022824:	687b      	ldr	r3, [r7, #4]
 8022826:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802282c:	2210      	movs	r2, #16
 802282e:	409a      	lsls	r2, r3
 8022830:	68fb      	ldr	r3, [r7, #12]
 8022832:	4013      	ands	r3, r2
 8022834:	2b00      	cmp	r3, #0
 8022836:	d043      	beq.n	80228c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8022838:	687b      	ldr	r3, [r7, #4]
 802283a:	681b      	ldr	r3, [r3, #0]
 802283c:	681b      	ldr	r3, [r3, #0]
 802283e:	f003 0308 	and.w	r3, r3, #8
 8022842:	2b00      	cmp	r3, #0
 8022844:	d03c      	beq.n	80228c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802284a:	2210      	movs	r2, #16
 802284c:	409a      	lsls	r2, r3
 802284e:	693b      	ldr	r3, [r7, #16]
 8022850:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	681b      	ldr	r3, [r3, #0]
 8022856:	681b      	ldr	r3, [r3, #0]
 8022858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802285c:	2b00      	cmp	r3, #0
 802285e:	d018      	beq.n	8022892 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8022860:	687b      	ldr	r3, [r7, #4]
 8022862:	681b      	ldr	r3, [r3, #0]
 8022864:	681b      	ldr	r3, [r3, #0]
 8022866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802286a:	2b00      	cmp	r3, #0
 802286c:	d108      	bne.n	8022880 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802286e:	687b      	ldr	r3, [r7, #4]
 8022870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022872:	2b00      	cmp	r3, #0
 8022874:	d024      	beq.n	80228c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802287a:	6878      	ldr	r0, [r7, #4]
 802287c:	4798      	blx	r3
 802287e:	e01f      	b.n	80228c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8022880:	687b      	ldr	r3, [r7, #4]
 8022882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022884:	2b00      	cmp	r3, #0
 8022886:	d01b      	beq.n	80228c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8022888:	687b      	ldr	r3, [r7, #4]
 802288a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802288c:	6878      	ldr	r0, [r7, #4]
 802288e:	4798      	blx	r3
 8022890:	e016      	b.n	80228c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8022892:	687b      	ldr	r3, [r7, #4]
 8022894:	681b      	ldr	r3, [r3, #0]
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802289c:	2b00      	cmp	r3, #0
 802289e:	d107      	bne.n	80228b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	681b      	ldr	r3, [r3, #0]
 80228a4:	681a      	ldr	r2, [r3, #0]
 80228a6:	687b      	ldr	r3, [r7, #4]
 80228a8:	681b      	ldr	r3, [r3, #0]
 80228aa:	f022 0208 	bic.w	r2, r2, #8
 80228ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80228b0:	687b      	ldr	r3, [r7, #4]
 80228b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	d003      	beq.n	80228c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80228bc:	6878      	ldr	r0, [r7, #4]
 80228be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80228c4:	2220      	movs	r2, #32
 80228c6:	409a      	lsls	r2, r3
 80228c8:	68fb      	ldr	r3, [r7, #12]
 80228ca:	4013      	ands	r3, r2
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	f000 808f 	beq.w	80229f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80228d2:	687b      	ldr	r3, [r7, #4]
 80228d4:	681b      	ldr	r3, [r3, #0]
 80228d6:	681b      	ldr	r3, [r3, #0]
 80228d8:	f003 0310 	and.w	r3, r3, #16
 80228dc:	2b00      	cmp	r3, #0
 80228de:	f000 8087 	beq.w	80229f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80228e2:	687b      	ldr	r3, [r7, #4]
 80228e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80228e6:	2220      	movs	r2, #32
 80228e8:	409a      	lsls	r2, r3
 80228ea:	693b      	ldr	r3, [r7, #16]
 80228ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80228f4:	b2db      	uxtb	r3, r3
 80228f6:	2b05      	cmp	r3, #5
 80228f8:	d136      	bne.n	8022968 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	681b      	ldr	r3, [r3, #0]
 80228fe:	681a      	ldr	r2, [r3, #0]
 8022900:	687b      	ldr	r3, [r7, #4]
 8022902:	681b      	ldr	r3, [r3, #0]
 8022904:	f022 0216 	bic.w	r2, r2, #22
 8022908:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	681b      	ldr	r3, [r3, #0]
 802290e:	695a      	ldr	r2, [r3, #20]
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	681b      	ldr	r3, [r3, #0]
 8022914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022918:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802291a:	687b      	ldr	r3, [r7, #4]
 802291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802291e:	2b00      	cmp	r3, #0
 8022920:	d103      	bne.n	802292a <HAL_DMA_IRQHandler+0x1da>
 8022922:	687b      	ldr	r3, [r7, #4]
 8022924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022926:	2b00      	cmp	r3, #0
 8022928:	d007      	beq.n	802293a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802292a:	687b      	ldr	r3, [r7, #4]
 802292c:	681b      	ldr	r3, [r3, #0]
 802292e:	681a      	ldr	r2, [r3, #0]
 8022930:	687b      	ldr	r3, [r7, #4]
 8022932:	681b      	ldr	r3, [r3, #0]
 8022934:	f022 0208 	bic.w	r2, r2, #8
 8022938:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802293a:	687b      	ldr	r3, [r7, #4]
 802293c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802293e:	223f      	movs	r2, #63	; 0x3f
 8022940:	409a      	lsls	r2, r3
 8022942:	693b      	ldr	r3, [r7, #16]
 8022944:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8022946:	687b      	ldr	r3, [r7, #4]
 8022948:	2200      	movs	r2, #0
 802294a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802294e:	687b      	ldr	r3, [r7, #4]
 8022950:	2201      	movs	r2, #1
 8022952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802295a:	2b00      	cmp	r3, #0
 802295c:	d07e      	beq.n	8022a5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 802295e:	687b      	ldr	r3, [r7, #4]
 8022960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022962:	6878      	ldr	r0, [r7, #4]
 8022964:	4798      	blx	r3
        }
        return;
 8022966:	e079      	b.n	8022a5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	681b      	ldr	r3, [r3, #0]
 802296c:	681b      	ldr	r3, [r3, #0]
 802296e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8022972:	2b00      	cmp	r3, #0
 8022974:	d01d      	beq.n	80229b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8022976:	687b      	ldr	r3, [r7, #4]
 8022978:	681b      	ldr	r3, [r3, #0]
 802297a:	681b      	ldr	r3, [r3, #0]
 802297c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8022980:	2b00      	cmp	r3, #0
 8022982:	d10d      	bne.n	80229a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8022984:	687b      	ldr	r3, [r7, #4]
 8022986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022988:	2b00      	cmp	r3, #0
 802298a:	d031      	beq.n	80229f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 802298c:	687b      	ldr	r3, [r7, #4]
 802298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022990:	6878      	ldr	r0, [r7, #4]
 8022992:	4798      	blx	r3
 8022994:	e02c      	b.n	80229f0 <HAL_DMA_IRQHandler+0x2a0>
 8022996:	bf00      	nop
 8022998:	20000004 	.word	0x20000004
 802299c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80229a4:	2b00      	cmp	r3, #0
 80229a6:	d023      	beq.n	80229f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80229a8:	687b      	ldr	r3, [r7, #4]
 80229aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80229ac:	6878      	ldr	r0, [r7, #4]
 80229ae:	4798      	blx	r3
 80229b0:	e01e      	b.n	80229f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	681b      	ldr	r3, [r3, #0]
 80229b6:	681b      	ldr	r3, [r3, #0]
 80229b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80229bc:	2b00      	cmp	r3, #0
 80229be:	d10f      	bne.n	80229e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80229c0:	687b      	ldr	r3, [r7, #4]
 80229c2:	681b      	ldr	r3, [r3, #0]
 80229c4:	681a      	ldr	r2, [r3, #0]
 80229c6:	687b      	ldr	r3, [r7, #4]
 80229c8:	681b      	ldr	r3, [r3, #0]
 80229ca:	f022 0210 	bic.w	r2, r2, #16
 80229ce:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80229d0:	687b      	ldr	r3, [r7, #4]
 80229d2:	2200      	movs	r2, #0
 80229d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80229d8:	687b      	ldr	r3, [r7, #4]
 80229da:	2201      	movs	r2, #1
 80229dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80229e0:	687b      	ldr	r3, [r7, #4]
 80229e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	d003      	beq.n	80229f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80229ec:	6878      	ldr	r0, [r7, #4]
 80229ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80229f0:	687b      	ldr	r3, [r7, #4]
 80229f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80229f4:	2b00      	cmp	r3, #0
 80229f6:	d032      	beq.n	8022a5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80229f8:	687b      	ldr	r3, [r7, #4]
 80229fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80229fc:	f003 0301 	and.w	r3, r3, #1
 8022a00:	2b00      	cmp	r3, #0
 8022a02:	d022      	beq.n	8022a4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	2205      	movs	r2, #5
 8022a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	681b      	ldr	r3, [r3, #0]
 8022a10:	681a      	ldr	r2, [r3, #0]
 8022a12:	687b      	ldr	r3, [r7, #4]
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	f022 0201 	bic.w	r2, r2, #1
 8022a1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8022a1c:	68bb      	ldr	r3, [r7, #8]
 8022a1e:	3301      	adds	r3, #1
 8022a20:	60bb      	str	r3, [r7, #8]
 8022a22:	697a      	ldr	r2, [r7, #20]
 8022a24:	429a      	cmp	r2, r3
 8022a26:	d307      	bcc.n	8022a38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	681b      	ldr	r3, [r3, #0]
 8022a2c:	681b      	ldr	r3, [r3, #0]
 8022a2e:	f003 0301 	and.w	r3, r3, #1
 8022a32:	2b00      	cmp	r3, #0
 8022a34:	d1f2      	bne.n	8022a1c <HAL_DMA_IRQHandler+0x2cc>
 8022a36:	e000      	b.n	8022a3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8022a38:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8022a3a:	687b      	ldr	r3, [r7, #4]
 8022a3c:	2200      	movs	r2, #0
 8022a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8022a42:	687b      	ldr	r3, [r7, #4]
 8022a44:	2201      	movs	r2, #1
 8022a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8022a4a:	687b      	ldr	r3, [r7, #4]
 8022a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022a4e:	2b00      	cmp	r3, #0
 8022a50:	d005      	beq.n	8022a5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022a56:	6878      	ldr	r0, [r7, #4]
 8022a58:	4798      	blx	r3
 8022a5a:	e000      	b.n	8022a5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8022a5c:	bf00      	nop
    }
  }
}
 8022a5e:	3718      	adds	r7, #24
 8022a60:	46bd      	mov	sp, r7
 8022a62:	bd80      	pop	{r7, pc}

08022a64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8022a64:	b480      	push	{r7}
 8022a66:	b085      	sub	sp, #20
 8022a68:	af00      	add	r7, sp, #0
 8022a6a:	60f8      	str	r0, [r7, #12]
 8022a6c:	60b9      	str	r1, [r7, #8]
 8022a6e:	607a      	str	r2, [r7, #4]
 8022a70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8022a72:	68fb      	ldr	r3, [r7, #12]
 8022a74:	681b      	ldr	r3, [r3, #0]
 8022a76:	681a      	ldr	r2, [r3, #0]
 8022a78:	68fb      	ldr	r3, [r7, #12]
 8022a7a:	681b      	ldr	r3, [r3, #0]
 8022a7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8022a80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8022a82:	68fb      	ldr	r3, [r7, #12]
 8022a84:	681b      	ldr	r3, [r3, #0]
 8022a86:	683a      	ldr	r2, [r7, #0]
 8022a88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8022a8a:	68fb      	ldr	r3, [r7, #12]
 8022a8c:	689b      	ldr	r3, [r3, #8]
 8022a8e:	2b40      	cmp	r3, #64	; 0x40
 8022a90:	d108      	bne.n	8022aa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8022a92:	68fb      	ldr	r3, [r7, #12]
 8022a94:	681b      	ldr	r3, [r3, #0]
 8022a96:	687a      	ldr	r2, [r7, #4]
 8022a98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8022a9a:	68fb      	ldr	r3, [r7, #12]
 8022a9c:	681b      	ldr	r3, [r3, #0]
 8022a9e:	68ba      	ldr	r2, [r7, #8]
 8022aa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8022aa2:	e007      	b.n	8022ab4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8022aa4:	68fb      	ldr	r3, [r7, #12]
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	68ba      	ldr	r2, [r7, #8]
 8022aaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8022aac:	68fb      	ldr	r3, [r7, #12]
 8022aae:	681b      	ldr	r3, [r3, #0]
 8022ab0:	687a      	ldr	r2, [r7, #4]
 8022ab2:	60da      	str	r2, [r3, #12]
}
 8022ab4:	bf00      	nop
 8022ab6:	3714      	adds	r7, #20
 8022ab8:	46bd      	mov	sp, r7
 8022aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022abe:	4770      	bx	lr

08022ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8022ac0:	b480      	push	{r7}
 8022ac2:	b085      	sub	sp, #20
 8022ac4:	af00      	add	r7, sp, #0
 8022ac6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8022ac8:	687b      	ldr	r3, [r7, #4]
 8022aca:	681b      	ldr	r3, [r3, #0]
 8022acc:	b2db      	uxtb	r3, r3
 8022ace:	3b10      	subs	r3, #16
 8022ad0:	4a14      	ldr	r2, [pc, #80]	; (8022b24 <DMA_CalcBaseAndBitshift+0x64>)
 8022ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8022ad6:	091b      	lsrs	r3, r3, #4
 8022ad8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8022ada:	4a13      	ldr	r2, [pc, #76]	; (8022b28 <DMA_CalcBaseAndBitshift+0x68>)
 8022adc:	68fb      	ldr	r3, [r7, #12]
 8022ade:	4413      	add	r3, r2
 8022ae0:	781b      	ldrb	r3, [r3, #0]
 8022ae2:	461a      	mov	r2, r3
 8022ae4:	687b      	ldr	r3, [r7, #4]
 8022ae6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8022ae8:	68fb      	ldr	r3, [r7, #12]
 8022aea:	2b03      	cmp	r3, #3
 8022aec:	d909      	bls.n	8022b02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8022aee:	687b      	ldr	r3, [r7, #4]
 8022af0:	681b      	ldr	r3, [r3, #0]
 8022af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8022af6:	f023 0303 	bic.w	r3, r3, #3
 8022afa:	1d1a      	adds	r2, r3, #4
 8022afc:	687b      	ldr	r3, [r7, #4]
 8022afe:	659a      	str	r2, [r3, #88]	; 0x58
 8022b00:	e007      	b.n	8022b12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	681b      	ldr	r3, [r3, #0]
 8022b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8022b0a:	f023 0303 	bic.w	r3, r3, #3
 8022b0e:	687a      	ldr	r2, [r7, #4]
 8022b10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8022b12:	687b      	ldr	r3, [r7, #4]
 8022b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8022b16:	4618      	mov	r0, r3
 8022b18:	3714      	adds	r7, #20
 8022b1a:	46bd      	mov	sp, r7
 8022b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b20:	4770      	bx	lr
 8022b22:	bf00      	nop
 8022b24:	aaaaaaab 	.word	0xaaaaaaab
 8022b28:	0803b97c 	.word	0x0803b97c

08022b2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8022b2c:	b480      	push	{r7}
 8022b2e:	b085      	sub	sp, #20
 8022b30:	af00      	add	r7, sp, #0
 8022b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8022b34:	2300      	movs	r3, #0
 8022b36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8022b38:	687b      	ldr	r3, [r7, #4]
 8022b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8022b3e:	687b      	ldr	r3, [r7, #4]
 8022b40:	699b      	ldr	r3, [r3, #24]
 8022b42:	2b00      	cmp	r3, #0
 8022b44:	d11f      	bne.n	8022b86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8022b46:	68bb      	ldr	r3, [r7, #8]
 8022b48:	2b03      	cmp	r3, #3
 8022b4a:	d856      	bhi.n	8022bfa <DMA_CheckFifoParam+0xce>
 8022b4c:	a201      	add	r2, pc, #4	; (adr r2, 8022b54 <DMA_CheckFifoParam+0x28>)
 8022b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022b52:	bf00      	nop
 8022b54:	08022b65 	.word	0x08022b65
 8022b58:	08022b77 	.word	0x08022b77
 8022b5c:	08022b65 	.word	0x08022b65
 8022b60:	08022bfb 	.word	0x08022bfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8022b64:	687b      	ldr	r3, [r7, #4]
 8022b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8022b6c:	2b00      	cmp	r3, #0
 8022b6e:	d046      	beq.n	8022bfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8022b70:	2301      	movs	r3, #1
 8022b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022b74:	e043      	b.n	8022bfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8022b7e:	d140      	bne.n	8022c02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8022b80:	2301      	movs	r3, #1
 8022b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022b84:	e03d      	b.n	8022c02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8022b86:	687b      	ldr	r3, [r7, #4]
 8022b88:	699b      	ldr	r3, [r3, #24]
 8022b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8022b8e:	d121      	bne.n	8022bd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8022b90:	68bb      	ldr	r3, [r7, #8]
 8022b92:	2b03      	cmp	r3, #3
 8022b94:	d837      	bhi.n	8022c06 <DMA_CheckFifoParam+0xda>
 8022b96:	a201      	add	r2, pc, #4	; (adr r2, 8022b9c <DMA_CheckFifoParam+0x70>)
 8022b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022b9c:	08022bad 	.word	0x08022bad
 8022ba0:	08022bb3 	.word	0x08022bb3
 8022ba4:	08022bad 	.word	0x08022bad
 8022ba8:	08022bc5 	.word	0x08022bc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8022bac:	2301      	movs	r3, #1
 8022bae:	73fb      	strb	r3, [r7, #15]
      break;
 8022bb0:	e030      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8022bb2:	687b      	ldr	r3, [r7, #4]
 8022bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8022bba:	2b00      	cmp	r3, #0
 8022bbc:	d025      	beq.n	8022c0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8022bbe:	2301      	movs	r3, #1
 8022bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022bc2:	e022      	b.n	8022c0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8022bc4:	687b      	ldr	r3, [r7, #4]
 8022bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022bc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8022bcc:	d11f      	bne.n	8022c0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8022bce:	2301      	movs	r3, #1
 8022bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8022bd2:	e01c      	b.n	8022c0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8022bd4:	68bb      	ldr	r3, [r7, #8]
 8022bd6:	2b02      	cmp	r3, #2
 8022bd8:	d903      	bls.n	8022be2 <DMA_CheckFifoParam+0xb6>
 8022bda:	68bb      	ldr	r3, [r7, #8]
 8022bdc:	2b03      	cmp	r3, #3
 8022bde:	d003      	beq.n	8022be8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8022be0:	e018      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8022be2:	2301      	movs	r3, #1
 8022be4:	73fb      	strb	r3, [r7, #15]
      break;
 8022be6:	e015      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8022be8:	687b      	ldr	r3, [r7, #4]
 8022bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8022bf0:	2b00      	cmp	r3, #0
 8022bf2:	d00e      	beq.n	8022c12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8022bf4:	2301      	movs	r3, #1
 8022bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8022bf8:	e00b      	b.n	8022c12 <DMA_CheckFifoParam+0xe6>
      break;
 8022bfa:	bf00      	nop
 8022bfc:	e00a      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      break;
 8022bfe:	bf00      	nop
 8022c00:	e008      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      break;
 8022c02:	bf00      	nop
 8022c04:	e006      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      break;
 8022c06:	bf00      	nop
 8022c08:	e004      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      break;
 8022c0a:	bf00      	nop
 8022c0c:	e002      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      break;   
 8022c0e:	bf00      	nop
 8022c10:	e000      	b.n	8022c14 <DMA_CheckFifoParam+0xe8>
      break;
 8022c12:	bf00      	nop
    }
  } 
  
  return status; 
 8022c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8022c16:	4618      	mov	r0, r3
 8022c18:	3714      	adds	r7, #20
 8022c1a:	46bd      	mov	sp, r7
 8022c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c20:	4770      	bx	lr
 8022c22:	bf00      	nop

08022c24 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8022c24:	b580      	push	{r7, lr}
 8022c26:	b086      	sub	sp, #24
 8022c28:	af00      	add	r7, sp, #0
 8022c2a:	60f8      	str	r0, [r7, #12]
 8022c2c:	60b9      	str	r1, [r7, #8]
 8022c2e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8022c32:	2301      	movs	r3, #1
 8022c34:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8022c36:	4b23      	ldr	r3, [pc, #140]	; (8022cc4 <HAL_FLASH_Program+0xa0>)
 8022c38:	7e1b      	ldrb	r3, [r3, #24]
 8022c3a:	2b01      	cmp	r3, #1
 8022c3c:	d101      	bne.n	8022c42 <HAL_FLASH_Program+0x1e>
 8022c3e:	2302      	movs	r3, #2
 8022c40:	e03b      	b.n	8022cba <HAL_FLASH_Program+0x96>
 8022c42:	4b20      	ldr	r3, [pc, #128]	; (8022cc4 <HAL_FLASH_Program+0xa0>)
 8022c44:	2201      	movs	r2, #1
 8022c46:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022c48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022c4c:	f000 f860 	bl	8022d10 <FLASH_WaitForLastOperation>
 8022c50:	4603      	mov	r3, r0
 8022c52:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8022c54:	7dfb      	ldrb	r3, [r7, #23]
 8022c56:	2b00      	cmp	r3, #0
 8022c58:	d12b      	bne.n	8022cb2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8022c5a:	68fb      	ldr	r3, [r7, #12]
 8022c5c:	2b00      	cmp	r3, #0
 8022c5e:	d105      	bne.n	8022c6c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8022c60:	783b      	ldrb	r3, [r7, #0]
 8022c62:	4619      	mov	r1, r3
 8022c64:	68b8      	ldr	r0, [r7, #8]
 8022c66:	f000 f90b 	bl	8022e80 <FLASH_Program_Byte>
 8022c6a:	e016      	b.n	8022c9a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8022c6c:	68fb      	ldr	r3, [r7, #12]
 8022c6e:	2b01      	cmp	r3, #1
 8022c70:	d105      	bne.n	8022c7e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8022c72:	883b      	ldrh	r3, [r7, #0]
 8022c74:	4619      	mov	r1, r3
 8022c76:	68b8      	ldr	r0, [r7, #8]
 8022c78:	f000 f8de 	bl	8022e38 <FLASH_Program_HalfWord>
 8022c7c:	e00d      	b.n	8022c9a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8022c7e:	68fb      	ldr	r3, [r7, #12]
 8022c80:	2b02      	cmp	r3, #2
 8022c82:	d105      	bne.n	8022c90 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8022c84:	683b      	ldr	r3, [r7, #0]
 8022c86:	4619      	mov	r1, r3
 8022c88:	68b8      	ldr	r0, [r7, #8]
 8022c8a:	f000 f8b3 	bl	8022df4 <FLASH_Program_Word>
 8022c8e:	e004      	b.n	8022c9a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8022c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022c94:	68b8      	ldr	r0, [r7, #8]
 8022c96:	f000 f87b 	bl	8022d90 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022c9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022c9e:	f000 f837 	bl	8022d10 <FLASH_WaitForLastOperation>
 8022ca2:	4603      	mov	r3, r0
 8022ca4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8022ca6:	4b08      	ldr	r3, [pc, #32]	; (8022cc8 <HAL_FLASH_Program+0xa4>)
 8022ca8:	691b      	ldr	r3, [r3, #16]
 8022caa:	4a07      	ldr	r2, [pc, #28]	; (8022cc8 <HAL_FLASH_Program+0xa4>)
 8022cac:	f023 0301 	bic.w	r3, r3, #1
 8022cb0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8022cb2:	4b04      	ldr	r3, [pc, #16]	; (8022cc4 <HAL_FLASH_Program+0xa0>)
 8022cb4:	2200      	movs	r2, #0
 8022cb6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8022cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8022cba:	4618      	mov	r0, r3
 8022cbc:	3718      	adds	r7, #24
 8022cbe:	46bd      	mov	sp, r7
 8022cc0:	bd80      	pop	{r7, pc}
 8022cc2:	bf00      	nop
 8022cc4:	20001274 	.word	0x20001274
 8022cc8:	40023c00 	.word	0x40023c00

08022ccc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8022ccc:	b480      	push	{r7}
 8022cce:	b083      	sub	sp, #12
 8022cd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8022cd2:	2300      	movs	r3, #0
 8022cd4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8022cd6:	4b0b      	ldr	r3, [pc, #44]	; (8022d04 <HAL_FLASH_Unlock+0x38>)
 8022cd8:	691b      	ldr	r3, [r3, #16]
 8022cda:	2b00      	cmp	r3, #0
 8022cdc:	da0b      	bge.n	8022cf6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8022cde:	4b09      	ldr	r3, [pc, #36]	; (8022d04 <HAL_FLASH_Unlock+0x38>)
 8022ce0:	4a09      	ldr	r2, [pc, #36]	; (8022d08 <HAL_FLASH_Unlock+0x3c>)
 8022ce2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8022ce4:	4b07      	ldr	r3, [pc, #28]	; (8022d04 <HAL_FLASH_Unlock+0x38>)
 8022ce6:	4a09      	ldr	r2, [pc, #36]	; (8022d0c <HAL_FLASH_Unlock+0x40>)
 8022ce8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8022cea:	4b06      	ldr	r3, [pc, #24]	; (8022d04 <HAL_FLASH_Unlock+0x38>)
 8022cec:	691b      	ldr	r3, [r3, #16]
 8022cee:	2b00      	cmp	r3, #0
 8022cf0:	da01      	bge.n	8022cf6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8022cf2:	2301      	movs	r3, #1
 8022cf4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8022cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8022cf8:	4618      	mov	r0, r3
 8022cfa:	370c      	adds	r7, #12
 8022cfc:	46bd      	mov	sp, r7
 8022cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d02:	4770      	bx	lr
 8022d04:	40023c00 	.word	0x40023c00
 8022d08:	45670123 	.word	0x45670123
 8022d0c:	cdef89ab 	.word	0xcdef89ab

08022d10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8022d10:	b580      	push	{r7, lr}
 8022d12:	b084      	sub	sp, #16
 8022d14:	af00      	add	r7, sp, #0
 8022d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8022d18:	2300      	movs	r3, #0
 8022d1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8022d1c:	4b1a      	ldr	r3, [pc, #104]	; (8022d88 <FLASH_WaitForLastOperation+0x78>)
 8022d1e:	2200      	movs	r2, #0
 8022d20:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8022d22:	f7fe ff21 	bl	8021b68 <HAL_GetTick>
 8022d26:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8022d28:	e010      	b.n	8022d4c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8022d2a:	687b      	ldr	r3, [r7, #4]
 8022d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022d30:	d00c      	beq.n	8022d4c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8022d32:	687b      	ldr	r3, [r7, #4]
 8022d34:	2b00      	cmp	r3, #0
 8022d36:	d007      	beq.n	8022d48 <FLASH_WaitForLastOperation+0x38>
 8022d38:	f7fe ff16 	bl	8021b68 <HAL_GetTick>
 8022d3c:	4602      	mov	r2, r0
 8022d3e:	68fb      	ldr	r3, [r7, #12]
 8022d40:	1ad3      	subs	r3, r2, r3
 8022d42:	687a      	ldr	r2, [r7, #4]
 8022d44:	429a      	cmp	r2, r3
 8022d46:	d201      	bcs.n	8022d4c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8022d48:	2303      	movs	r3, #3
 8022d4a:	e019      	b.n	8022d80 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8022d4c:	4b0f      	ldr	r3, [pc, #60]	; (8022d8c <FLASH_WaitForLastOperation+0x7c>)
 8022d4e:	68db      	ldr	r3, [r3, #12]
 8022d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022d54:	2b00      	cmp	r3, #0
 8022d56:	d1e8      	bne.n	8022d2a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8022d58:	4b0c      	ldr	r3, [pc, #48]	; (8022d8c <FLASH_WaitForLastOperation+0x7c>)
 8022d5a:	68db      	ldr	r3, [r3, #12]
 8022d5c:	f003 0301 	and.w	r3, r3, #1
 8022d60:	2b00      	cmp	r3, #0
 8022d62:	d002      	beq.n	8022d6a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8022d64:	4b09      	ldr	r3, [pc, #36]	; (8022d8c <FLASH_WaitForLastOperation+0x7c>)
 8022d66:	2201      	movs	r2, #1
 8022d68:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8022d6a:	4b08      	ldr	r3, [pc, #32]	; (8022d8c <FLASH_WaitForLastOperation+0x7c>)
 8022d6c:	68db      	ldr	r3, [r3, #12]
 8022d6e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8022d72:	2b00      	cmp	r3, #0
 8022d74:	d003      	beq.n	8022d7e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8022d76:	f000 f8a5 	bl	8022ec4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8022d7a:	2301      	movs	r3, #1
 8022d7c:	e000      	b.n	8022d80 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8022d7e:	2300      	movs	r3, #0
  
}  
 8022d80:	4618      	mov	r0, r3
 8022d82:	3710      	adds	r7, #16
 8022d84:	46bd      	mov	sp, r7
 8022d86:	bd80      	pop	{r7, pc}
 8022d88:	20001274 	.word	0x20001274
 8022d8c:	40023c00 	.word	0x40023c00

08022d90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8022d90:	b480      	push	{r7}
 8022d92:	b085      	sub	sp, #20
 8022d94:	af00      	add	r7, sp, #0
 8022d96:	60f8      	str	r0, [r7, #12]
 8022d98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8022d9c:	4b14      	ldr	r3, [pc, #80]	; (8022df0 <FLASH_Program_DoubleWord+0x60>)
 8022d9e:	691b      	ldr	r3, [r3, #16]
 8022da0:	4a13      	ldr	r2, [pc, #76]	; (8022df0 <FLASH_Program_DoubleWord+0x60>)
 8022da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022da6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8022da8:	4b11      	ldr	r3, [pc, #68]	; (8022df0 <FLASH_Program_DoubleWord+0x60>)
 8022daa:	691b      	ldr	r3, [r3, #16]
 8022dac:	4a10      	ldr	r2, [pc, #64]	; (8022df0 <FLASH_Program_DoubleWord+0x60>)
 8022dae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8022db2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8022db4:	4b0e      	ldr	r3, [pc, #56]	; (8022df0 <FLASH_Program_DoubleWord+0x60>)
 8022db6:	691b      	ldr	r3, [r3, #16]
 8022db8:	4a0d      	ldr	r2, [pc, #52]	; (8022df0 <FLASH_Program_DoubleWord+0x60>)
 8022dba:	f043 0301 	orr.w	r3, r3, #1
 8022dbe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8022dc0:	68fb      	ldr	r3, [r7, #12]
 8022dc2:	683a      	ldr	r2, [r7, #0]
 8022dc4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8022dc6:	f3bf 8f6f 	isb	sy
}
 8022dca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8022dcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8022dd0:	f04f 0200 	mov.w	r2, #0
 8022dd4:	f04f 0300 	mov.w	r3, #0
 8022dd8:	000a      	movs	r2, r1
 8022dda:	2300      	movs	r3, #0
 8022ddc:	68f9      	ldr	r1, [r7, #12]
 8022dde:	3104      	adds	r1, #4
 8022de0:	4613      	mov	r3, r2
 8022de2:	600b      	str	r3, [r1, #0]
}
 8022de4:	bf00      	nop
 8022de6:	3714      	adds	r7, #20
 8022de8:	46bd      	mov	sp, r7
 8022dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dee:	4770      	bx	lr
 8022df0:	40023c00 	.word	0x40023c00

08022df4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8022df4:	b480      	push	{r7}
 8022df6:	b083      	sub	sp, #12
 8022df8:	af00      	add	r7, sp, #0
 8022dfa:	6078      	str	r0, [r7, #4]
 8022dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8022dfe:	4b0d      	ldr	r3, [pc, #52]	; (8022e34 <FLASH_Program_Word+0x40>)
 8022e00:	691b      	ldr	r3, [r3, #16]
 8022e02:	4a0c      	ldr	r2, [pc, #48]	; (8022e34 <FLASH_Program_Word+0x40>)
 8022e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022e08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8022e0a:	4b0a      	ldr	r3, [pc, #40]	; (8022e34 <FLASH_Program_Word+0x40>)
 8022e0c:	691b      	ldr	r3, [r3, #16]
 8022e0e:	4a09      	ldr	r2, [pc, #36]	; (8022e34 <FLASH_Program_Word+0x40>)
 8022e10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8022e14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8022e16:	4b07      	ldr	r3, [pc, #28]	; (8022e34 <FLASH_Program_Word+0x40>)
 8022e18:	691b      	ldr	r3, [r3, #16]
 8022e1a:	4a06      	ldr	r2, [pc, #24]	; (8022e34 <FLASH_Program_Word+0x40>)
 8022e1c:	f043 0301 	orr.w	r3, r3, #1
 8022e20:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8022e22:	687b      	ldr	r3, [r7, #4]
 8022e24:	683a      	ldr	r2, [r7, #0]
 8022e26:	601a      	str	r2, [r3, #0]
}
 8022e28:	bf00      	nop
 8022e2a:	370c      	adds	r7, #12
 8022e2c:	46bd      	mov	sp, r7
 8022e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e32:	4770      	bx	lr
 8022e34:	40023c00 	.word	0x40023c00

08022e38 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8022e38:	b480      	push	{r7}
 8022e3a:	b083      	sub	sp, #12
 8022e3c:	af00      	add	r7, sp, #0
 8022e3e:	6078      	str	r0, [r7, #4]
 8022e40:	460b      	mov	r3, r1
 8022e42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8022e44:	4b0d      	ldr	r3, [pc, #52]	; (8022e7c <FLASH_Program_HalfWord+0x44>)
 8022e46:	691b      	ldr	r3, [r3, #16]
 8022e48:	4a0c      	ldr	r2, [pc, #48]	; (8022e7c <FLASH_Program_HalfWord+0x44>)
 8022e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022e4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8022e50:	4b0a      	ldr	r3, [pc, #40]	; (8022e7c <FLASH_Program_HalfWord+0x44>)
 8022e52:	691b      	ldr	r3, [r3, #16]
 8022e54:	4a09      	ldr	r2, [pc, #36]	; (8022e7c <FLASH_Program_HalfWord+0x44>)
 8022e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022e5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8022e5c:	4b07      	ldr	r3, [pc, #28]	; (8022e7c <FLASH_Program_HalfWord+0x44>)
 8022e5e:	691b      	ldr	r3, [r3, #16]
 8022e60:	4a06      	ldr	r2, [pc, #24]	; (8022e7c <FLASH_Program_HalfWord+0x44>)
 8022e62:	f043 0301 	orr.w	r3, r3, #1
 8022e66:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8022e68:	687b      	ldr	r3, [r7, #4]
 8022e6a:	887a      	ldrh	r2, [r7, #2]
 8022e6c:	801a      	strh	r2, [r3, #0]
}
 8022e6e:	bf00      	nop
 8022e70:	370c      	adds	r7, #12
 8022e72:	46bd      	mov	sp, r7
 8022e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e78:	4770      	bx	lr
 8022e7a:	bf00      	nop
 8022e7c:	40023c00 	.word	0x40023c00

08022e80 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8022e80:	b480      	push	{r7}
 8022e82:	b083      	sub	sp, #12
 8022e84:	af00      	add	r7, sp, #0
 8022e86:	6078      	str	r0, [r7, #4]
 8022e88:	460b      	mov	r3, r1
 8022e8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8022e8c:	4b0c      	ldr	r3, [pc, #48]	; (8022ec0 <FLASH_Program_Byte+0x40>)
 8022e8e:	691b      	ldr	r3, [r3, #16]
 8022e90:	4a0b      	ldr	r2, [pc, #44]	; (8022ec0 <FLASH_Program_Byte+0x40>)
 8022e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022e96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8022e98:	4b09      	ldr	r3, [pc, #36]	; (8022ec0 <FLASH_Program_Byte+0x40>)
 8022e9a:	4a09      	ldr	r2, [pc, #36]	; (8022ec0 <FLASH_Program_Byte+0x40>)
 8022e9c:	691b      	ldr	r3, [r3, #16]
 8022e9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8022ea0:	4b07      	ldr	r3, [pc, #28]	; (8022ec0 <FLASH_Program_Byte+0x40>)
 8022ea2:	691b      	ldr	r3, [r3, #16]
 8022ea4:	4a06      	ldr	r2, [pc, #24]	; (8022ec0 <FLASH_Program_Byte+0x40>)
 8022ea6:	f043 0301 	orr.w	r3, r3, #1
 8022eaa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8022eac:	687b      	ldr	r3, [r7, #4]
 8022eae:	78fa      	ldrb	r2, [r7, #3]
 8022eb0:	701a      	strb	r2, [r3, #0]
}
 8022eb2:	bf00      	nop
 8022eb4:	370c      	adds	r7, #12
 8022eb6:	46bd      	mov	sp, r7
 8022eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ebc:	4770      	bx	lr
 8022ebe:	bf00      	nop
 8022ec0:	40023c00 	.word	0x40023c00

08022ec4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8022ec4:	b480      	push	{r7}
 8022ec6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8022ec8:	4b27      	ldr	r3, [pc, #156]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022eca:	68db      	ldr	r3, [r3, #12]
 8022ecc:	f003 0310 	and.w	r3, r3, #16
 8022ed0:	2b00      	cmp	r3, #0
 8022ed2:	d008      	beq.n	8022ee6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8022ed4:	4b25      	ldr	r3, [pc, #148]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022ed6:	69db      	ldr	r3, [r3, #28]
 8022ed8:	f043 0310 	orr.w	r3, r3, #16
 8022edc:	4a23      	ldr	r2, [pc, #140]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022ede:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8022ee0:	4b21      	ldr	r3, [pc, #132]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022ee2:	2210      	movs	r2, #16
 8022ee4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8022ee6:	4b20      	ldr	r3, [pc, #128]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022ee8:	68db      	ldr	r3, [r3, #12]
 8022eea:	f003 0320 	and.w	r3, r3, #32
 8022eee:	2b00      	cmp	r3, #0
 8022ef0:	d008      	beq.n	8022f04 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8022ef2:	4b1e      	ldr	r3, [pc, #120]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022ef4:	69db      	ldr	r3, [r3, #28]
 8022ef6:	f043 0308 	orr.w	r3, r3, #8
 8022efa:	4a1c      	ldr	r2, [pc, #112]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022efc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8022efe:	4b1a      	ldr	r3, [pc, #104]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f00:	2220      	movs	r2, #32
 8022f02:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8022f04:	4b18      	ldr	r3, [pc, #96]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f06:	68db      	ldr	r3, [r3, #12]
 8022f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022f0c:	2b00      	cmp	r3, #0
 8022f0e:	d008      	beq.n	8022f22 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8022f10:	4b16      	ldr	r3, [pc, #88]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022f12:	69db      	ldr	r3, [r3, #28]
 8022f14:	f043 0304 	orr.w	r3, r3, #4
 8022f18:	4a14      	ldr	r2, [pc, #80]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022f1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8022f1c:	4b12      	ldr	r3, [pc, #72]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f1e:	2240      	movs	r2, #64	; 0x40
 8022f20:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8022f22:	4b11      	ldr	r3, [pc, #68]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f24:	68db      	ldr	r3, [r3, #12]
 8022f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022f2a:	2b00      	cmp	r3, #0
 8022f2c:	d008      	beq.n	8022f40 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8022f2e:	4b0f      	ldr	r3, [pc, #60]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022f30:	69db      	ldr	r3, [r3, #28]
 8022f32:	f043 0302 	orr.w	r3, r3, #2
 8022f36:	4a0d      	ldr	r2, [pc, #52]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022f38:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8022f3a:	4b0b      	ldr	r3, [pc, #44]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f3c:	2280      	movs	r2, #128	; 0x80
 8022f3e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8022f40:	4b09      	ldr	r3, [pc, #36]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f42:	68db      	ldr	r3, [r3, #12]
 8022f44:	f003 0302 	and.w	r3, r3, #2
 8022f48:	2b00      	cmp	r3, #0
 8022f4a:	d008      	beq.n	8022f5e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8022f4c:	4b07      	ldr	r3, [pc, #28]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022f4e:	69db      	ldr	r3, [r3, #28]
 8022f50:	f043 0320 	orr.w	r3, r3, #32
 8022f54:	4a05      	ldr	r2, [pc, #20]	; (8022f6c <FLASH_SetErrorCode+0xa8>)
 8022f56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8022f58:	4b03      	ldr	r3, [pc, #12]	; (8022f68 <FLASH_SetErrorCode+0xa4>)
 8022f5a:	2202      	movs	r2, #2
 8022f5c:	60da      	str	r2, [r3, #12]
  }
}
 8022f5e:	bf00      	nop
 8022f60:	46bd      	mov	sp, r7
 8022f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f66:	4770      	bx	lr
 8022f68:	40023c00 	.word	0x40023c00
 8022f6c:	20001274 	.word	0x20001274

08022f70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8022f70:	b580      	push	{r7, lr}
 8022f72:	b084      	sub	sp, #16
 8022f74:	af00      	add	r7, sp, #0
 8022f76:	6078      	str	r0, [r7, #4]
 8022f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8022f7a:	2301      	movs	r3, #1
 8022f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8022f7e:	2300      	movs	r3, #0
 8022f80:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8022f82:	4b31      	ldr	r3, [pc, #196]	; (8023048 <HAL_FLASHEx_Erase+0xd8>)
 8022f84:	7e1b      	ldrb	r3, [r3, #24]
 8022f86:	2b01      	cmp	r3, #1
 8022f88:	d101      	bne.n	8022f8e <HAL_FLASHEx_Erase+0x1e>
 8022f8a:	2302      	movs	r3, #2
 8022f8c:	e058      	b.n	8023040 <HAL_FLASHEx_Erase+0xd0>
 8022f8e:	4b2e      	ldr	r3, [pc, #184]	; (8023048 <HAL_FLASHEx_Erase+0xd8>)
 8022f90:	2201      	movs	r2, #1
 8022f92:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022f94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022f98:	f7ff feba 	bl	8022d10 <FLASH_WaitForLastOperation>
 8022f9c:	4603      	mov	r3, r0
 8022f9e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8022fa0:	7bfb      	ldrb	r3, [r7, #15]
 8022fa2:	2b00      	cmp	r3, #0
 8022fa4:	d148      	bne.n	8023038 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8022fa6:	683b      	ldr	r3, [r7, #0]
 8022fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8022fac:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8022fae:	687b      	ldr	r3, [r7, #4]
 8022fb0:	681b      	ldr	r3, [r3, #0]
 8022fb2:	2b01      	cmp	r3, #1
 8022fb4:	d115      	bne.n	8022fe2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	691b      	ldr	r3, [r3, #16]
 8022fba:	b2da      	uxtb	r2, r3
 8022fbc:	687b      	ldr	r3, [r7, #4]
 8022fbe:	685b      	ldr	r3, [r3, #4]
 8022fc0:	4619      	mov	r1, r3
 8022fc2:	4610      	mov	r0, r2
 8022fc4:	f000 f844 	bl	8023050 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022fc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022fcc:	f7ff fea0 	bl	8022d10 <FLASH_WaitForLastOperation>
 8022fd0:	4603      	mov	r3, r0
 8022fd2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8022fd4:	4b1d      	ldr	r3, [pc, #116]	; (802304c <HAL_FLASHEx_Erase+0xdc>)
 8022fd6:	691b      	ldr	r3, [r3, #16]
 8022fd8:	4a1c      	ldr	r2, [pc, #112]	; (802304c <HAL_FLASHEx_Erase+0xdc>)
 8022fda:	f023 0304 	bic.w	r3, r3, #4
 8022fde:	6113      	str	r3, [r2, #16]
 8022fe0:	e028      	b.n	8023034 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8022fe2:	687b      	ldr	r3, [r7, #4]
 8022fe4:	689b      	ldr	r3, [r3, #8]
 8022fe6:	60bb      	str	r3, [r7, #8]
 8022fe8:	e01c      	b.n	8023024 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8022fea:	687b      	ldr	r3, [r7, #4]
 8022fec:	691b      	ldr	r3, [r3, #16]
 8022fee:	b2db      	uxtb	r3, r3
 8022ff0:	4619      	mov	r1, r3
 8022ff2:	68b8      	ldr	r0, [r7, #8]
 8022ff4:	f000 f850 	bl	8023098 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022ff8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022ffc:	f7ff fe88 	bl	8022d10 <FLASH_WaitForLastOperation>
 8023000:	4603      	mov	r3, r0
 8023002:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8023004:	4b11      	ldr	r3, [pc, #68]	; (802304c <HAL_FLASHEx_Erase+0xdc>)
 8023006:	691b      	ldr	r3, [r3, #16]
 8023008:	4a10      	ldr	r2, [pc, #64]	; (802304c <HAL_FLASHEx_Erase+0xdc>)
 802300a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 802300e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8023010:	7bfb      	ldrb	r3, [r7, #15]
 8023012:	2b00      	cmp	r3, #0
 8023014:	d003      	beq.n	802301e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8023016:	683b      	ldr	r3, [r7, #0]
 8023018:	68ba      	ldr	r2, [r7, #8]
 802301a:	601a      	str	r2, [r3, #0]
          break;
 802301c:	e00a      	b.n	8023034 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802301e:	68bb      	ldr	r3, [r7, #8]
 8023020:	3301      	adds	r3, #1
 8023022:	60bb      	str	r3, [r7, #8]
 8023024:	687b      	ldr	r3, [r7, #4]
 8023026:	68da      	ldr	r2, [r3, #12]
 8023028:	687b      	ldr	r3, [r7, #4]
 802302a:	689b      	ldr	r3, [r3, #8]
 802302c:	4413      	add	r3, r2
 802302e:	68ba      	ldr	r2, [r7, #8]
 8023030:	429a      	cmp	r2, r3
 8023032:	d3da      	bcc.n	8022fea <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8023034:	f000 f878 	bl	8023128 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8023038:	4b03      	ldr	r3, [pc, #12]	; (8023048 <HAL_FLASHEx_Erase+0xd8>)
 802303a:	2200      	movs	r2, #0
 802303c:	761a      	strb	r2, [r3, #24]

  return status;
 802303e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023040:	4618      	mov	r0, r3
 8023042:	3710      	adds	r7, #16
 8023044:	46bd      	mov	sp, r7
 8023046:	bd80      	pop	{r7, pc}
 8023048:	20001274 	.word	0x20001274
 802304c:	40023c00 	.word	0x40023c00

08023050 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8023050:	b480      	push	{r7}
 8023052:	b083      	sub	sp, #12
 8023054:	af00      	add	r7, sp, #0
 8023056:	4603      	mov	r3, r0
 8023058:	6039      	str	r1, [r7, #0]
 802305a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802305c:	4b0d      	ldr	r3, [pc, #52]	; (8023094 <FLASH_MassErase+0x44>)
 802305e:	691b      	ldr	r3, [r3, #16]
 8023060:	4a0c      	ldr	r2, [pc, #48]	; (8023094 <FLASH_MassErase+0x44>)
 8023062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023066:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8023068:	4b0a      	ldr	r3, [pc, #40]	; (8023094 <FLASH_MassErase+0x44>)
 802306a:	691b      	ldr	r3, [r3, #16]
 802306c:	4a09      	ldr	r2, [pc, #36]	; (8023094 <FLASH_MassErase+0x44>)
 802306e:	f043 0304 	orr.w	r3, r3, #4
 8023072:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8023074:	4b07      	ldr	r3, [pc, #28]	; (8023094 <FLASH_MassErase+0x44>)
 8023076:	691a      	ldr	r2, [r3, #16]
 8023078:	79fb      	ldrb	r3, [r7, #7]
 802307a:	021b      	lsls	r3, r3, #8
 802307c:	4313      	orrs	r3, r2
 802307e:	4a05      	ldr	r2, [pc, #20]	; (8023094 <FLASH_MassErase+0x44>)
 8023080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023084:	6113      	str	r3, [r2, #16]
}
 8023086:	bf00      	nop
 8023088:	370c      	adds	r7, #12
 802308a:	46bd      	mov	sp, r7
 802308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023090:	4770      	bx	lr
 8023092:	bf00      	nop
 8023094:	40023c00 	.word	0x40023c00

08023098 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8023098:	b480      	push	{r7}
 802309a:	b085      	sub	sp, #20
 802309c:	af00      	add	r7, sp, #0
 802309e:	6078      	str	r0, [r7, #4]
 80230a0:	460b      	mov	r3, r1
 80230a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80230a4:	2300      	movs	r3, #0
 80230a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80230a8:	78fb      	ldrb	r3, [r7, #3]
 80230aa:	2b00      	cmp	r3, #0
 80230ac:	d102      	bne.n	80230b4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80230ae:	2300      	movs	r3, #0
 80230b0:	60fb      	str	r3, [r7, #12]
 80230b2:	e010      	b.n	80230d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80230b4:	78fb      	ldrb	r3, [r7, #3]
 80230b6:	2b01      	cmp	r3, #1
 80230b8:	d103      	bne.n	80230c2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80230ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80230be:	60fb      	str	r3, [r7, #12]
 80230c0:	e009      	b.n	80230d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80230c2:	78fb      	ldrb	r3, [r7, #3]
 80230c4:	2b02      	cmp	r3, #2
 80230c6:	d103      	bne.n	80230d0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80230c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80230cc:	60fb      	str	r3, [r7, #12]
 80230ce:	e002      	b.n	80230d6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80230d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80230d4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80230d6:	4b13      	ldr	r3, [pc, #76]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230d8:	691b      	ldr	r3, [r3, #16]
 80230da:	4a12      	ldr	r2, [pc, #72]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80230e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80230e2:	4b10      	ldr	r3, [pc, #64]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230e4:	691a      	ldr	r2, [r3, #16]
 80230e6:	490f      	ldr	r1, [pc, #60]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230e8:	68fb      	ldr	r3, [r7, #12]
 80230ea:	4313      	orrs	r3, r2
 80230ec:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80230ee:	4b0d      	ldr	r3, [pc, #52]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230f0:	691b      	ldr	r3, [r3, #16]
 80230f2:	4a0c      	ldr	r2, [pc, #48]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80230f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80230fa:	4b0a      	ldr	r3, [pc, #40]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 80230fc:	691a      	ldr	r2, [r3, #16]
 80230fe:	687b      	ldr	r3, [r7, #4]
 8023100:	00db      	lsls	r3, r3, #3
 8023102:	4313      	orrs	r3, r2
 8023104:	4a07      	ldr	r2, [pc, #28]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 8023106:	f043 0302 	orr.w	r3, r3, #2
 802310a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 802310c:	4b05      	ldr	r3, [pc, #20]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 802310e:	691b      	ldr	r3, [r3, #16]
 8023110:	4a04      	ldr	r2, [pc, #16]	; (8023124 <FLASH_Erase_Sector+0x8c>)
 8023112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023116:	6113      	str	r3, [r2, #16]
}
 8023118:	bf00      	nop
 802311a:	3714      	adds	r7, #20
 802311c:	46bd      	mov	sp, r7
 802311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023122:	4770      	bx	lr
 8023124:	40023c00 	.word	0x40023c00

08023128 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8023128:	b480      	push	{r7}
 802312a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 802312c:	4b20      	ldr	r3, [pc, #128]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802312e:	681b      	ldr	r3, [r3, #0]
 8023130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8023134:	2b00      	cmp	r3, #0
 8023136:	d017      	beq.n	8023168 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8023138:	4b1d      	ldr	r3, [pc, #116]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802313a:	681b      	ldr	r3, [r3, #0]
 802313c:	4a1c      	ldr	r2, [pc, #112]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802313e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8023142:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8023144:	4b1a      	ldr	r3, [pc, #104]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023146:	681b      	ldr	r3, [r3, #0]
 8023148:	4a19      	ldr	r2, [pc, #100]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802314a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802314e:	6013      	str	r3, [r2, #0]
 8023150:	4b17      	ldr	r3, [pc, #92]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023152:	681b      	ldr	r3, [r3, #0]
 8023154:	4a16      	ldr	r2, [pc, #88]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802315a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802315c:	4b14      	ldr	r3, [pc, #80]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802315e:	681b      	ldr	r3, [r3, #0]
 8023160:	4a13      	ldr	r2, [pc, #76]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8023166:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8023168:	4b11      	ldr	r3, [pc, #68]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802316a:	681b      	ldr	r3, [r3, #0]
 802316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023170:	2b00      	cmp	r3, #0
 8023172:	d017      	beq.n	80231a4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8023174:	4b0e      	ldr	r3, [pc, #56]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023176:	681b      	ldr	r3, [r3, #0]
 8023178:	4a0d      	ldr	r2, [pc, #52]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802317a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802317e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8023180:	4b0b      	ldr	r3, [pc, #44]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023182:	681b      	ldr	r3, [r3, #0]
 8023184:	4a0a      	ldr	r2, [pc, #40]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023186:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802318a:	6013      	str	r3, [r2, #0]
 802318c:	4b08      	ldr	r3, [pc, #32]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802318e:	681b      	ldr	r3, [r3, #0]
 8023190:	4a07      	ldr	r2, [pc, #28]	; (80231b0 <FLASH_FlushCaches+0x88>)
 8023192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023196:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8023198:	4b05      	ldr	r3, [pc, #20]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802319a:	681b      	ldr	r3, [r3, #0]
 802319c:	4a04      	ldr	r2, [pc, #16]	; (80231b0 <FLASH_FlushCaches+0x88>)
 802319e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80231a2:	6013      	str	r3, [r2, #0]
  }
}
 80231a4:	bf00      	nop
 80231a6:	46bd      	mov	sp, r7
 80231a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231ac:	4770      	bx	lr
 80231ae:	bf00      	nop
 80231b0:	40023c00 	.word	0x40023c00

080231b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80231b4:	b480      	push	{r7}
 80231b6:	b089      	sub	sp, #36	; 0x24
 80231b8:	af00      	add	r7, sp, #0
 80231ba:	6078      	str	r0, [r7, #4]
 80231bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80231be:	2300      	movs	r3, #0
 80231c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80231c2:	2300      	movs	r3, #0
 80231c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80231c6:	2300      	movs	r3, #0
 80231c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80231ca:	2300      	movs	r3, #0
 80231cc:	61fb      	str	r3, [r7, #28]
 80231ce:	e16b      	b.n	80234a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80231d0:	2201      	movs	r2, #1
 80231d2:	69fb      	ldr	r3, [r7, #28]
 80231d4:	fa02 f303 	lsl.w	r3, r2, r3
 80231d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80231da:	683b      	ldr	r3, [r7, #0]
 80231dc:	681b      	ldr	r3, [r3, #0]
 80231de:	697a      	ldr	r2, [r7, #20]
 80231e0:	4013      	ands	r3, r2
 80231e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80231e4:	693a      	ldr	r2, [r7, #16]
 80231e6:	697b      	ldr	r3, [r7, #20]
 80231e8:	429a      	cmp	r2, r3
 80231ea:	f040 815a 	bne.w	80234a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80231ee:	683b      	ldr	r3, [r7, #0]
 80231f0:	685b      	ldr	r3, [r3, #4]
 80231f2:	2b01      	cmp	r3, #1
 80231f4:	d00b      	beq.n	802320e <HAL_GPIO_Init+0x5a>
 80231f6:	683b      	ldr	r3, [r7, #0]
 80231f8:	685b      	ldr	r3, [r3, #4]
 80231fa:	2b02      	cmp	r3, #2
 80231fc:	d007      	beq.n	802320e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80231fe:	683b      	ldr	r3, [r7, #0]
 8023200:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8023202:	2b11      	cmp	r3, #17
 8023204:	d003      	beq.n	802320e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8023206:	683b      	ldr	r3, [r7, #0]
 8023208:	685b      	ldr	r3, [r3, #4]
 802320a:	2b12      	cmp	r3, #18
 802320c:	d130      	bne.n	8023270 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802320e:	687b      	ldr	r3, [r7, #4]
 8023210:	689b      	ldr	r3, [r3, #8]
 8023212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8023214:	69fb      	ldr	r3, [r7, #28]
 8023216:	005b      	lsls	r3, r3, #1
 8023218:	2203      	movs	r2, #3
 802321a:	fa02 f303 	lsl.w	r3, r2, r3
 802321e:	43db      	mvns	r3, r3
 8023220:	69ba      	ldr	r2, [r7, #24]
 8023222:	4013      	ands	r3, r2
 8023224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8023226:	683b      	ldr	r3, [r7, #0]
 8023228:	68da      	ldr	r2, [r3, #12]
 802322a:	69fb      	ldr	r3, [r7, #28]
 802322c:	005b      	lsls	r3, r3, #1
 802322e:	fa02 f303 	lsl.w	r3, r2, r3
 8023232:	69ba      	ldr	r2, [r7, #24]
 8023234:	4313      	orrs	r3, r2
 8023236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8023238:	687b      	ldr	r3, [r7, #4]
 802323a:	69ba      	ldr	r2, [r7, #24]
 802323c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802323e:	687b      	ldr	r3, [r7, #4]
 8023240:	685b      	ldr	r3, [r3, #4]
 8023242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8023244:	2201      	movs	r2, #1
 8023246:	69fb      	ldr	r3, [r7, #28]
 8023248:	fa02 f303 	lsl.w	r3, r2, r3
 802324c:	43db      	mvns	r3, r3
 802324e:	69ba      	ldr	r2, [r7, #24]
 8023250:	4013      	ands	r3, r2
 8023252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8023254:	683b      	ldr	r3, [r7, #0]
 8023256:	685b      	ldr	r3, [r3, #4]
 8023258:	091b      	lsrs	r3, r3, #4
 802325a:	f003 0201 	and.w	r2, r3, #1
 802325e:	69fb      	ldr	r3, [r7, #28]
 8023260:	fa02 f303 	lsl.w	r3, r2, r3
 8023264:	69ba      	ldr	r2, [r7, #24]
 8023266:	4313      	orrs	r3, r2
 8023268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802326a:	687b      	ldr	r3, [r7, #4]
 802326c:	69ba      	ldr	r2, [r7, #24]
 802326e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8023270:	687b      	ldr	r3, [r7, #4]
 8023272:	68db      	ldr	r3, [r3, #12]
 8023274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8023276:	69fb      	ldr	r3, [r7, #28]
 8023278:	005b      	lsls	r3, r3, #1
 802327a:	2203      	movs	r2, #3
 802327c:	fa02 f303 	lsl.w	r3, r2, r3
 8023280:	43db      	mvns	r3, r3
 8023282:	69ba      	ldr	r2, [r7, #24]
 8023284:	4013      	ands	r3, r2
 8023286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8023288:	683b      	ldr	r3, [r7, #0]
 802328a:	689a      	ldr	r2, [r3, #8]
 802328c:	69fb      	ldr	r3, [r7, #28]
 802328e:	005b      	lsls	r3, r3, #1
 8023290:	fa02 f303 	lsl.w	r3, r2, r3
 8023294:	69ba      	ldr	r2, [r7, #24]
 8023296:	4313      	orrs	r3, r2
 8023298:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	69ba      	ldr	r2, [r7, #24]
 802329e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80232a0:	683b      	ldr	r3, [r7, #0]
 80232a2:	685b      	ldr	r3, [r3, #4]
 80232a4:	2b02      	cmp	r3, #2
 80232a6:	d003      	beq.n	80232b0 <HAL_GPIO_Init+0xfc>
 80232a8:	683b      	ldr	r3, [r7, #0]
 80232aa:	685b      	ldr	r3, [r3, #4]
 80232ac:	2b12      	cmp	r3, #18
 80232ae:	d123      	bne.n	80232f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80232b0:	69fb      	ldr	r3, [r7, #28]
 80232b2:	08da      	lsrs	r2, r3, #3
 80232b4:	687b      	ldr	r3, [r7, #4]
 80232b6:	3208      	adds	r2, #8
 80232b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80232bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80232be:	69fb      	ldr	r3, [r7, #28]
 80232c0:	f003 0307 	and.w	r3, r3, #7
 80232c4:	009b      	lsls	r3, r3, #2
 80232c6:	220f      	movs	r2, #15
 80232c8:	fa02 f303 	lsl.w	r3, r2, r3
 80232cc:	43db      	mvns	r3, r3
 80232ce:	69ba      	ldr	r2, [r7, #24]
 80232d0:	4013      	ands	r3, r2
 80232d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80232d4:	683b      	ldr	r3, [r7, #0]
 80232d6:	691a      	ldr	r2, [r3, #16]
 80232d8:	69fb      	ldr	r3, [r7, #28]
 80232da:	f003 0307 	and.w	r3, r3, #7
 80232de:	009b      	lsls	r3, r3, #2
 80232e0:	fa02 f303 	lsl.w	r3, r2, r3
 80232e4:	69ba      	ldr	r2, [r7, #24]
 80232e6:	4313      	orrs	r3, r2
 80232e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80232ea:	69fb      	ldr	r3, [r7, #28]
 80232ec:	08da      	lsrs	r2, r3, #3
 80232ee:	687b      	ldr	r3, [r7, #4]
 80232f0:	3208      	adds	r2, #8
 80232f2:	69b9      	ldr	r1, [r7, #24]
 80232f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80232f8:	687b      	ldr	r3, [r7, #4]
 80232fa:	681b      	ldr	r3, [r3, #0]
 80232fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80232fe:	69fb      	ldr	r3, [r7, #28]
 8023300:	005b      	lsls	r3, r3, #1
 8023302:	2203      	movs	r2, #3
 8023304:	fa02 f303 	lsl.w	r3, r2, r3
 8023308:	43db      	mvns	r3, r3
 802330a:	69ba      	ldr	r2, [r7, #24]
 802330c:	4013      	ands	r3, r2
 802330e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8023310:	683b      	ldr	r3, [r7, #0]
 8023312:	685b      	ldr	r3, [r3, #4]
 8023314:	f003 0203 	and.w	r2, r3, #3
 8023318:	69fb      	ldr	r3, [r7, #28]
 802331a:	005b      	lsls	r3, r3, #1
 802331c:	fa02 f303 	lsl.w	r3, r2, r3
 8023320:	69ba      	ldr	r2, [r7, #24]
 8023322:	4313      	orrs	r3, r2
 8023324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8023326:	687b      	ldr	r3, [r7, #4]
 8023328:	69ba      	ldr	r2, [r7, #24]
 802332a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 802332c:	683b      	ldr	r3, [r7, #0]
 802332e:	685b      	ldr	r3, [r3, #4]
 8023330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023334:	2b00      	cmp	r3, #0
 8023336:	f000 80b4 	beq.w	80234a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802333a:	2300      	movs	r3, #0
 802333c:	60fb      	str	r3, [r7, #12]
 802333e:	4b60      	ldr	r3, [pc, #384]	; (80234c0 <HAL_GPIO_Init+0x30c>)
 8023340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023342:	4a5f      	ldr	r2, [pc, #380]	; (80234c0 <HAL_GPIO_Init+0x30c>)
 8023344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023348:	6453      	str	r3, [r2, #68]	; 0x44
 802334a:	4b5d      	ldr	r3, [pc, #372]	; (80234c0 <HAL_GPIO_Init+0x30c>)
 802334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802334e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023352:	60fb      	str	r3, [r7, #12]
 8023354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8023356:	4a5b      	ldr	r2, [pc, #364]	; (80234c4 <HAL_GPIO_Init+0x310>)
 8023358:	69fb      	ldr	r3, [r7, #28]
 802335a:	089b      	lsrs	r3, r3, #2
 802335c:	3302      	adds	r3, #2
 802335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8023364:	69fb      	ldr	r3, [r7, #28]
 8023366:	f003 0303 	and.w	r3, r3, #3
 802336a:	009b      	lsls	r3, r3, #2
 802336c:	220f      	movs	r2, #15
 802336e:	fa02 f303 	lsl.w	r3, r2, r3
 8023372:	43db      	mvns	r3, r3
 8023374:	69ba      	ldr	r2, [r7, #24]
 8023376:	4013      	ands	r3, r2
 8023378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802337a:	687b      	ldr	r3, [r7, #4]
 802337c:	4a52      	ldr	r2, [pc, #328]	; (80234c8 <HAL_GPIO_Init+0x314>)
 802337e:	4293      	cmp	r3, r2
 8023380:	d02b      	beq.n	80233da <HAL_GPIO_Init+0x226>
 8023382:	687b      	ldr	r3, [r7, #4]
 8023384:	4a51      	ldr	r2, [pc, #324]	; (80234cc <HAL_GPIO_Init+0x318>)
 8023386:	4293      	cmp	r3, r2
 8023388:	d025      	beq.n	80233d6 <HAL_GPIO_Init+0x222>
 802338a:	687b      	ldr	r3, [r7, #4]
 802338c:	4a50      	ldr	r2, [pc, #320]	; (80234d0 <HAL_GPIO_Init+0x31c>)
 802338e:	4293      	cmp	r3, r2
 8023390:	d01f      	beq.n	80233d2 <HAL_GPIO_Init+0x21e>
 8023392:	687b      	ldr	r3, [r7, #4]
 8023394:	4a4f      	ldr	r2, [pc, #316]	; (80234d4 <HAL_GPIO_Init+0x320>)
 8023396:	4293      	cmp	r3, r2
 8023398:	d019      	beq.n	80233ce <HAL_GPIO_Init+0x21a>
 802339a:	687b      	ldr	r3, [r7, #4]
 802339c:	4a4e      	ldr	r2, [pc, #312]	; (80234d8 <HAL_GPIO_Init+0x324>)
 802339e:	4293      	cmp	r3, r2
 80233a0:	d013      	beq.n	80233ca <HAL_GPIO_Init+0x216>
 80233a2:	687b      	ldr	r3, [r7, #4]
 80233a4:	4a4d      	ldr	r2, [pc, #308]	; (80234dc <HAL_GPIO_Init+0x328>)
 80233a6:	4293      	cmp	r3, r2
 80233a8:	d00d      	beq.n	80233c6 <HAL_GPIO_Init+0x212>
 80233aa:	687b      	ldr	r3, [r7, #4]
 80233ac:	4a4c      	ldr	r2, [pc, #304]	; (80234e0 <HAL_GPIO_Init+0x32c>)
 80233ae:	4293      	cmp	r3, r2
 80233b0:	d007      	beq.n	80233c2 <HAL_GPIO_Init+0x20e>
 80233b2:	687b      	ldr	r3, [r7, #4]
 80233b4:	4a4b      	ldr	r2, [pc, #300]	; (80234e4 <HAL_GPIO_Init+0x330>)
 80233b6:	4293      	cmp	r3, r2
 80233b8:	d101      	bne.n	80233be <HAL_GPIO_Init+0x20a>
 80233ba:	2307      	movs	r3, #7
 80233bc:	e00e      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233be:	2308      	movs	r3, #8
 80233c0:	e00c      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233c2:	2306      	movs	r3, #6
 80233c4:	e00a      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233c6:	2305      	movs	r3, #5
 80233c8:	e008      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233ca:	2304      	movs	r3, #4
 80233cc:	e006      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233ce:	2303      	movs	r3, #3
 80233d0:	e004      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233d2:	2302      	movs	r3, #2
 80233d4:	e002      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233d6:	2301      	movs	r3, #1
 80233d8:	e000      	b.n	80233dc <HAL_GPIO_Init+0x228>
 80233da:	2300      	movs	r3, #0
 80233dc:	69fa      	ldr	r2, [r7, #28]
 80233de:	f002 0203 	and.w	r2, r2, #3
 80233e2:	0092      	lsls	r2, r2, #2
 80233e4:	4093      	lsls	r3, r2
 80233e6:	69ba      	ldr	r2, [r7, #24]
 80233e8:	4313      	orrs	r3, r2
 80233ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80233ec:	4935      	ldr	r1, [pc, #212]	; (80234c4 <HAL_GPIO_Init+0x310>)
 80233ee:	69fb      	ldr	r3, [r7, #28]
 80233f0:	089b      	lsrs	r3, r3, #2
 80233f2:	3302      	adds	r3, #2
 80233f4:	69ba      	ldr	r2, [r7, #24]
 80233f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80233fa:	4b3b      	ldr	r3, [pc, #236]	; (80234e8 <HAL_GPIO_Init+0x334>)
 80233fc:	681b      	ldr	r3, [r3, #0]
 80233fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023400:	693b      	ldr	r3, [r7, #16]
 8023402:	43db      	mvns	r3, r3
 8023404:	69ba      	ldr	r2, [r7, #24]
 8023406:	4013      	ands	r3, r2
 8023408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 802340a:	683b      	ldr	r3, [r7, #0]
 802340c:	685b      	ldr	r3, [r3, #4]
 802340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023412:	2b00      	cmp	r3, #0
 8023414:	d003      	beq.n	802341e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8023416:	69ba      	ldr	r2, [r7, #24]
 8023418:	693b      	ldr	r3, [r7, #16]
 802341a:	4313      	orrs	r3, r2
 802341c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802341e:	4a32      	ldr	r2, [pc, #200]	; (80234e8 <HAL_GPIO_Init+0x334>)
 8023420:	69bb      	ldr	r3, [r7, #24]
 8023422:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8023424:	4b30      	ldr	r3, [pc, #192]	; (80234e8 <HAL_GPIO_Init+0x334>)
 8023426:	685b      	ldr	r3, [r3, #4]
 8023428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802342a:	693b      	ldr	r3, [r7, #16]
 802342c:	43db      	mvns	r3, r3
 802342e:	69ba      	ldr	r2, [r7, #24]
 8023430:	4013      	ands	r3, r2
 8023432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8023434:	683b      	ldr	r3, [r7, #0]
 8023436:	685b      	ldr	r3, [r3, #4]
 8023438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802343c:	2b00      	cmp	r3, #0
 802343e:	d003      	beq.n	8023448 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8023440:	69ba      	ldr	r2, [r7, #24]
 8023442:	693b      	ldr	r3, [r7, #16]
 8023444:	4313      	orrs	r3, r2
 8023446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8023448:	4a27      	ldr	r2, [pc, #156]	; (80234e8 <HAL_GPIO_Init+0x334>)
 802344a:	69bb      	ldr	r3, [r7, #24]
 802344c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802344e:	4b26      	ldr	r3, [pc, #152]	; (80234e8 <HAL_GPIO_Init+0x334>)
 8023450:	689b      	ldr	r3, [r3, #8]
 8023452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023454:	693b      	ldr	r3, [r7, #16]
 8023456:	43db      	mvns	r3, r3
 8023458:	69ba      	ldr	r2, [r7, #24]
 802345a:	4013      	ands	r3, r2
 802345c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 802345e:	683b      	ldr	r3, [r7, #0]
 8023460:	685b      	ldr	r3, [r3, #4]
 8023462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8023466:	2b00      	cmp	r3, #0
 8023468:	d003      	beq.n	8023472 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 802346a:	69ba      	ldr	r2, [r7, #24]
 802346c:	693b      	ldr	r3, [r7, #16]
 802346e:	4313      	orrs	r3, r2
 8023470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8023472:	4a1d      	ldr	r2, [pc, #116]	; (80234e8 <HAL_GPIO_Init+0x334>)
 8023474:	69bb      	ldr	r3, [r7, #24]
 8023476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8023478:	4b1b      	ldr	r3, [pc, #108]	; (80234e8 <HAL_GPIO_Init+0x334>)
 802347a:	68db      	ldr	r3, [r3, #12]
 802347c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802347e:	693b      	ldr	r3, [r7, #16]
 8023480:	43db      	mvns	r3, r3
 8023482:	69ba      	ldr	r2, [r7, #24]
 8023484:	4013      	ands	r3, r2
 8023486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8023488:	683b      	ldr	r3, [r7, #0]
 802348a:	685b      	ldr	r3, [r3, #4]
 802348c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8023490:	2b00      	cmp	r3, #0
 8023492:	d003      	beq.n	802349c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8023494:	69ba      	ldr	r2, [r7, #24]
 8023496:	693b      	ldr	r3, [r7, #16]
 8023498:	4313      	orrs	r3, r2
 802349a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 802349c:	4a12      	ldr	r2, [pc, #72]	; (80234e8 <HAL_GPIO_Init+0x334>)
 802349e:	69bb      	ldr	r3, [r7, #24]
 80234a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80234a2:	69fb      	ldr	r3, [r7, #28]
 80234a4:	3301      	adds	r3, #1
 80234a6:	61fb      	str	r3, [r7, #28]
 80234a8:	69fb      	ldr	r3, [r7, #28]
 80234aa:	2b0f      	cmp	r3, #15
 80234ac:	f67f ae90 	bls.w	80231d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80234b0:	bf00      	nop
 80234b2:	bf00      	nop
 80234b4:	3724      	adds	r7, #36	; 0x24
 80234b6:	46bd      	mov	sp, r7
 80234b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234bc:	4770      	bx	lr
 80234be:	bf00      	nop
 80234c0:	40023800 	.word	0x40023800
 80234c4:	40013800 	.word	0x40013800
 80234c8:	40020000 	.word	0x40020000
 80234cc:	40020400 	.word	0x40020400
 80234d0:	40020800 	.word	0x40020800
 80234d4:	40020c00 	.word	0x40020c00
 80234d8:	40021000 	.word	0x40021000
 80234dc:	40021400 	.word	0x40021400
 80234e0:	40021800 	.word	0x40021800
 80234e4:	40021c00 	.word	0x40021c00
 80234e8:	40013c00 	.word	0x40013c00

080234ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80234ec:	b480      	push	{r7}
 80234ee:	b085      	sub	sp, #20
 80234f0:	af00      	add	r7, sp, #0
 80234f2:	6078      	str	r0, [r7, #4]
 80234f4:	460b      	mov	r3, r1
 80234f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80234f8:	687b      	ldr	r3, [r7, #4]
 80234fa:	691a      	ldr	r2, [r3, #16]
 80234fc:	887b      	ldrh	r3, [r7, #2]
 80234fe:	4013      	ands	r3, r2
 8023500:	2b00      	cmp	r3, #0
 8023502:	d002      	beq.n	802350a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8023504:	2301      	movs	r3, #1
 8023506:	73fb      	strb	r3, [r7, #15]
 8023508:	e001      	b.n	802350e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 802350a:	2300      	movs	r3, #0
 802350c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 802350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023510:	4618      	mov	r0, r3
 8023512:	3714      	adds	r7, #20
 8023514:	46bd      	mov	sp, r7
 8023516:	f85d 7b04 	ldr.w	r7, [sp], #4
 802351a:	4770      	bx	lr

0802351c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802351c:	b480      	push	{r7}
 802351e:	b083      	sub	sp, #12
 8023520:	af00      	add	r7, sp, #0
 8023522:	6078      	str	r0, [r7, #4]
 8023524:	460b      	mov	r3, r1
 8023526:	807b      	strh	r3, [r7, #2]
 8023528:	4613      	mov	r3, r2
 802352a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802352c:	787b      	ldrb	r3, [r7, #1]
 802352e:	2b00      	cmp	r3, #0
 8023530:	d003      	beq.n	802353a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8023532:	887a      	ldrh	r2, [r7, #2]
 8023534:	687b      	ldr	r3, [r7, #4]
 8023536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8023538:	e003      	b.n	8023542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802353a:	887b      	ldrh	r3, [r7, #2]
 802353c:	041a      	lsls	r2, r3, #16
 802353e:	687b      	ldr	r3, [r7, #4]
 8023540:	619a      	str	r2, [r3, #24]
}
 8023542:	bf00      	nop
 8023544:	370c      	adds	r7, #12
 8023546:	46bd      	mov	sp, r7
 8023548:	f85d 7b04 	ldr.w	r7, [sp], #4
 802354c:	4770      	bx	lr

0802354e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 802354e:	b480      	push	{r7}
 8023550:	b083      	sub	sp, #12
 8023552:	af00      	add	r7, sp, #0
 8023554:	6078      	str	r0, [r7, #4]
 8023556:	460b      	mov	r3, r1
 8023558:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	695a      	ldr	r2, [r3, #20]
 802355e:	887b      	ldrh	r3, [r7, #2]
 8023560:	401a      	ands	r2, r3
 8023562:	887b      	ldrh	r3, [r7, #2]
 8023564:	429a      	cmp	r2, r3
 8023566:	d104      	bne.n	8023572 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8023568:	887b      	ldrh	r3, [r7, #2]
 802356a:	041a      	lsls	r2, r3, #16
 802356c:	687b      	ldr	r3, [r7, #4]
 802356e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8023570:	e002      	b.n	8023578 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8023572:	887a      	ldrh	r2, [r7, #2]
 8023574:	687b      	ldr	r3, [r7, #4]
 8023576:	619a      	str	r2, [r3, #24]
}
 8023578:	bf00      	nop
 802357a:	370c      	adds	r7, #12
 802357c:	46bd      	mov	sp, r7
 802357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023582:	4770      	bx	lr

08023584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8023584:	b580      	push	{r7, lr}
 8023586:	b082      	sub	sp, #8
 8023588:	af00      	add	r7, sp, #0
 802358a:	4603      	mov	r3, r0
 802358c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 802358e:	4b08      	ldr	r3, [pc, #32]	; (80235b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8023590:	695a      	ldr	r2, [r3, #20]
 8023592:	88fb      	ldrh	r3, [r7, #6]
 8023594:	4013      	ands	r3, r2
 8023596:	2b00      	cmp	r3, #0
 8023598:	d006      	beq.n	80235a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 802359a:	4a05      	ldr	r2, [pc, #20]	; (80235b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 802359c:	88fb      	ldrh	r3, [r7, #6]
 802359e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80235a0:	88fb      	ldrh	r3, [r7, #6]
 80235a2:	4618      	mov	r0, r3
 80235a4:	f7fc fffe 	bl	80205a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80235a8:	bf00      	nop
 80235aa:	3708      	adds	r7, #8
 80235ac:	46bd      	mov	sp, r7
 80235ae:	bd80      	pop	{r7, pc}
 80235b0:	40013c00 	.word	0x40013c00

080235b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80235b4:	b580      	push	{r7, lr}
 80235b6:	b084      	sub	sp, #16
 80235b8:	af00      	add	r7, sp, #0
 80235ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80235bc:	687b      	ldr	r3, [r7, #4]
 80235be:	2b00      	cmp	r3, #0
 80235c0:	d101      	bne.n	80235c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80235c2:	2301      	movs	r3, #1
 80235c4:	e12b      	b.n	802381e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80235c6:	687b      	ldr	r3, [r7, #4]
 80235c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80235cc:	b2db      	uxtb	r3, r3
 80235ce:	2b00      	cmp	r3, #0
 80235d0:	d106      	bne.n	80235e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80235d2:	687b      	ldr	r3, [r7, #4]
 80235d4:	2200      	movs	r2, #0
 80235d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80235da:	6878      	ldr	r0, [r7, #4]
 80235dc:	f7fd fd24 	bl	8021028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80235e0:	687b      	ldr	r3, [r7, #4]
 80235e2:	2224      	movs	r2, #36	; 0x24
 80235e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80235e8:	687b      	ldr	r3, [r7, #4]
 80235ea:	681b      	ldr	r3, [r3, #0]
 80235ec:	681a      	ldr	r2, [r3, #0]
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	681b      	ldr	r3, [r3, #0]
 80235f2:	f022 0201 	bic.w	r2, r2, #1
 80235f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80235f8:	687b      	ldr	r3, [r7, #4]
 80235fa:	681b      	ldr	r3, [r3, #0]
 80235fc:	681a      	ldr	r2, [r3, #0]
 80235fe:	687b      	ldr	r3, [r7, #4]
 8023600:	681b      	ldr	r3, [r3, #0]
 8023602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8023606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	681b      	ldr	r3, [r3, #0]
 802360c:	681a      	ldr	r2, [r3, #0]
 802360e:	687b      	ldr	r3, [r7, #4]
 8023610:	681b      	ldr	r3, [r3, #0]
 8023612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8023616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8023618:	f003 ff2c 	bl	8027474 <HAL_RCC_GetPCLK1Freq>
 802361c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802361e:	687b      	ldr	r3, [r7, #4]
 8023620:	685b      	ldr	r3, [r3, #4]
 8023622:	4a81      	ldr	r2, [pc, #516]	; (8023828 <HAL_I2C_Init+0x274>)
 8023624:	4293      	cmp	r3, r2
 8023626:	d807      	bhi.n	8023638 <HAL_I2C_Init+0x84>
 8023628:	68fb      	ldr	r3, [r7, #12]
 802362a:	4a80      	ldr	r2, [pc, #512]	; (802382c <HAL_I2C_Init+0x278>)
 802362c:	4293      	cmp	r3, r2
 802362e:	bf94      	ite	ls
 8023630:	2301      	movls	r3, #1
 8023632:	2300      	movhi	r3, #0
 8023634:	b2db      	uxtb	r3, r3
 8023636:	e006      	b.n	8023646 <HAL_I2C_Init+0x92>
 8023638:	68fb      	ldr	r3, [r7, #12]
 802363a:	4a7d      	ldr	r2, [pc, #500]	; (8023830 <HAL_I2C_Init+0x27c>)
 802363c:	4293      	cmp	r3, r2
 802363e:	bf94      	ite	ls
 8023640:	2301      	movls	r3, #1
 8023642:	2300      	movhi	r3, #0
 8023644:	b2db      	uxtb	r3, r3
 8023646:	2b00      	cmp	r3, #0
 8023648:	d001      	beq.n	802364e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 802364a:	2301      	movs	r3, #1
 802364c:	e0e7      	b.n	802381e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802364e:	68fb      	ldr	r3, [r7, #12]
 8023650:	4a78      	ldr	r2, [pc, #480]	; (8023834 <HAL_I2C_Init+0x280>)
 8023652:	fba2 2303 	umull	r2, r3, r2, r3
 8023656:	0c9b      	lsrs	r3, r3, #18
 8023658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802365a:	687b      	ldr	r3, [r7, #4]
 802365c:	681b      	ldr	r3, [r3, #0]
 802365e:	685b      	ldr	r3, [r3, #4]
 8023660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	681b      	ldr	r3, [r3, #0]
 8023668:	68ba      	ldr	r2, [r7, #8]
 802366a:	430a      	orrs	r2, r1
 802366c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802366e:	687b      	ldr	r3, [r7, #4]
 8023670:	681b      	ldr	r3, [r3, #0]
 8023672:	6a1b      	ldr	r3, [r3, #32]
 8023674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8023678:	687b      	ldr	r3, [r7, #4]
 802367a:	685b      	ldr	r3, [r3, #4]
 802367c:	4a6a      	ldr	r2, [pc, #424]	; (8023828 <HAL_I2C_Init+0x274>)
 802367e:	4293      	cmp	r3, r2
 8023680:	d802      	bhi.n	8023688 <HAL_I2C_Init+0xd4>
 8023682:	68bb      	ldr	r3, [r7, #8]
 8023684:	3301      	adds	r3, #1
 8023686:	e009      	b.n	802369c <HAL_I2C_Init+0xe8>
 8023688:	68bb      	ldr	r3, [r7, #8]
 802368a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802368e:	fb02 f303 	mul.w	r3, r2, r3
 8023692:	4a69      	ldr	r2, [pc, #420]	; (8023838 <HAL_I2C_Init+0x284>)
 8023694:	fba2 2303 	umull	r2, r3, r2, r3
 8023698:	099b      	lsrs	r3, r3, #6
 802369a:	3301      	adds	r3, #1
 802369c:	687a      	ldr	r2, [r7, #4]
 802369e:	6812      	ldr	r2, [r2, #0]
 80236a0:	430b      	orrs	r3, r1
 80236a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80236a4:	687b      	ldr	r3, [r7, #4]
 80236a6:	681b      	ldr	r3, [r3, #0]
 80236a8:	69db      	ldr	r3, [r3, #28]
 80236aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80236ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80236b2:	687b      	ldr	r3, [r7, #4]
 80236b4:	685b      	ldr	r3, [r3, #4]
 80236b6:	495c      	ldr	r1, [pc, #368]	; (8023828 <HAL_I2C_Init+0x274>)
 80236b8:	428b      	cmp	r3, r1
 80236ba:	d819      	bhi.n	80236f0 <HAL_I2C_Init+0x13c>
 80236bc:	68fb      	ldr	r3, [r7, #12]
 80236be:	1e59      	subs	r1, r3, #1
 80236c0:	687b      	ldr	r3, [r7, #4]
 80236c2:	685b      	ldr	r3, [r3, #4]
 80236c4:	005b      	lsls	r3, r3, #1
 80236c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80236ca:	1c59      	adds	r1, r3, #1
 80236cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80236d0:	400b      	ands	r3, r1
 80236d2:	2b00      	cmp	r3, #0
 80236d4:	d00a      	beq.n	80236ec <HAL_I2C_Init+0x138>
 80236d6:	68fb      	ldr	r3, [r7, #12]
 80236d8:	1e59      	subs	r1, r3, #1
 80236da:	687b      	ldr	r3, [r7, #4]
 80236dc:	685b      	ldr	r3, [r3, #4]
 80236de:	005b      	lsls	r3, r3, #1
 80236e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80236e4:	3301      	adds	r3, #1
 80236e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80236ea:	e051      	b.n	8023790 <HAL_I2C_Init+0x1dc>
 80236ec:	2304      	movs	r3, #4
 80236ee:	e04f      	b.n	8023790 <HAL_I2C_Init+0x1dc>
 80236f0:	687b      	ldr	r3, [r7, #4]
 80236f2:	689b      	ldr	r3, [r3, #8]
 80236f4:	2b00      	cmp	r3, #0
 80236f6:	d111      	bne.n	802371c <HAL_I2C_Init+0x168>
 80236f8:	68fb      	ldr	r3, [r7, #12]
 80236fa:	1e58      	subs	r0, r3, #1
 80236fc:	687b      	ldr	r3, [r7, #4]
 80236fe:	6859      	ldr	r1, [r3, #4]
 8023700:	460b      	mov	r3, r1
 8023702:	005b      	lsls	r3, r3, #1
 8023704:	440b      	add	r3, r1
 8023706:	fbb0 f3f3 	udiv	r3, r0, r3
 802370a:	3301      	adds	r3, #1
 802370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023710:	2b00      	cmp	r3, #0
 8023712:	bf0c      	ite	eq
 8023714:	2301      	moveq	r3, #1
 8023716:	2300      	movne	r3, #0
 8023718:	b2db      	uxtb	r3, r3
 802371a:	e012      	b.n	8023742 <HAL_I2C_Init+0x18e>
 802371c:	68fb      	ldr	r3, [r7, #12]
 802371e:	1e58      	subs	r0, r3, #1
 8023720:	687b      	ldr	r3, [r7, #4]
 8023722:	6859      	ldr	r1, [r3, #4]
 8023724:	460b      	mov	r3, r1
 8023726:	009b      	lsls	r3, r3, #2
 8023728:	440b      	add	r3, r1
 802372a:	0099      	lsls	r1, r3, #2
 802372c:	440b      	add	r3, r1
 802372e:	fbb0 f3f3 	udiv	r3, r0, r3
 8023732:	3301      	adds	r3, #1
 8023734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023738:	2b00      	cmp	r3, #0
 802373a:	bf0c      	ite	eq
 802373c:	2301      	moveq	r3, #1
 802373e:	2300      	movne	r3, #0
 8023740:	b2db      	uxtb	r3, r3
 8023742:	2b00      	cmp	r3, #0
 8023744:	d001      	beq.n	802374a <HAL_I2C_Init+0x196>
 8023746:	2301      	movs	r3, #1
 8023748:	e022      	b.n	8023790 <HAL_I2C_Init+0x1dc>
 802374a:	687b      	ldr	r3, [r7, #4]
 802374c:	689b      	ldr	r3, [r3, #8]
 802374e:	2b00      	cmp	r3, #0
 8023750:	d10e      	bne.n	8023770 <HAL_I2C_Init+0x1bc>
 8023752:	68fb      	ldr	r3, [r7, #12]
 8023754:	1e58      	subs	r0, r3, #1
 8023756:	687b      	ldr	r3, [r7, #4]
 8023758:	6859      	ldr	r1, [r3, #4]
 802375a:	460b      	mov	r3, r1
 802375c:	005b      	lsls	r3, r3, #1
 802375e:	440b      	add	r3, r1
 8023760:	fbb0 f3f3 	udiv	r3, r0, r3
 8023764:	3301      	adds	r3, #1
 8023766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802376a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802376e:	e00f      	b.n	8023790 <HAL_I2C_Init+0x1dc>
 8023770:	68fb      	ldr	r3, [r7, #12]
 8023772:	1e58      	subs	r0, r3, #1
 8023774:	687b      	ldr	r3, [r7, #4]
 8023776:	6859      	ldr	r1, [r3, #4]
 8023778:	460b      	mov	r3, r1
 802377a:	009b      	lsls	r3, r3, #2
 802377c:	440b      	add	r3, r1
 802377e:	0099      	lsls	r1, r3, #2
 8023780:	440b      	add	r3, r1
 8023782:	fbb0 f3f3 	udiv	r3, r0, r3
 8023786:	3301      	adds	r3, #1
 8023788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802378c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8023790:	6879      	ldr	r1, [r7, #4]
 8023792:	6809      	ldr	r1, [r1, #0]
 8023794:	4313      	orrs	r3, r2
 8023796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8023798:	687b      	ldr	r3, [r7, #4]
 802379a:	681b      	ldr	r3, [r3, #0]
 802379c:	681b      	ldr	r3, [r3, #0]
 802379e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80237a2:	687b      	ldr	r3, [r7, #4]
 80237a4:	69da      	ldr	r2, [r3, #28]
 80237a6:	687b      	ldr	r3, [r7, #4]
 80237a8:	6a1b      	ldr	r3, [r3, #32]
 80237aa:	431a      	orrs	r2, r3
 80237ac:	687b      	ldr	r3, [r7, #4]
 80237ae:	681b      	ldr	r3, [r3, #0]
 80237b0:	430a      	orrs	r2, r1
 80237b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80237b4:	687b      	ldr	r3, [r7, #4]
 80237b6:	681b      	ldr	r3, [r3, #0]
 80237b8:	689b      	ldr	r3, [r3, #8]
 80237ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80237be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80237c2:	687a      	ldr	r2, [r7, #4]
 80237c4:	6911      	ldr	r1, [r2, #16]
 80237c6:	687a      	ldr	r2, [r7, #4]
 80237c8:	68d2      	ldr	r2, [r2, #12]
 80237ca:	4311      	orrs	r1, r2
 80237cc:	687a      	ldr	r2, [r7, #4]
 80237ce:	6812      	ldr	r2, [r2, #0]
 80237d0:	430b      	orrs	r3, r1
 80237d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80237d4:	687b      	ldr	r3, [r7, #4]
 80237d6:	681b      	ldr	r3, [r3, #0]
 80237d8:	68db      	ldr	r3, [r3, #12]
 80237da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80237de:	687b      	ldr	r3, [r7, #4]
 80237e0:	695a      	ldr	r2, [r3, #20]
 80237e2:	687b      	ldr	r3, [r7, #4]
 80237e4:	699b      	ldr	r3, [r3, #24]
 80237e6:	431a      	orrs	r2, r3
 80237e8:	687b      	ldr	r3, [r7, #4]
 80237ea:	681b      	ldr	r3, [r3, #0]
 80237ec:	430a      	orrs	r2, r1
 80237ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80237f0:	687b      	ldr	r3, [r7, #4]
 80237f2:	681b      	ldr	r3, [r3, #0]
 80237f4:	681a      	ldr	r2, [r3, #0]
 80237f6:	687b      	ldr	r3, [r7, #4]
 80237f8:	681b      	ldr	r3, [r3, #0]
 80237fa:	f042 0201 	orr.w	r2, r2, #1
 80237fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023800:	687b      	ldr	r3, [r7, #4]
 8023802:	2200      	movs	r2, #0
 8023804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8023806:	687b      	ldr	r3, [r7, #4]
 8023808:	2220      	movs	r2, #32
 802380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802380e:	687b      	ldr	r3, [r7, #4]
 8023810:	2200      	movs	r2, #0
 8023812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8023814:	687b      	ldr	r3, [r7, #4]
 8023816:	2200      	movs	r2, #0
 8023818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802381c:	2300      	movs	r3, #0
}
 802381e:	4618      	mov	r0, r3
 8023820:	3710      	adds	r7, #16
 8023822:	46bd      	mov	sp, r7
 8023824:	bd80      	pop	{r7, pc}
 8023826:	bf00      	nop
 8023828:	000186a0 	.word	0x000186a0
 802382c:	001e847f 	.word	0x001e847f
 8023830:	003d08ff 	.word	0x003d08ff
 8023834:	431bde83 	.word	0x431bde83
 8023838:	10624dd3 	.word	0x10624dd3

0802383c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802383c:	b580      	push	{r7, lr}
 802383e:	b088      	sub	sp, #32
 8023840:	af02      	add	r7, sp, #8
 8023842:	60f8      	str	r0, [r7, #12]
 8023844:	607a      	str	r2, [r7, #4]
 8023846:	461a      	mov	r2, r3
 8023848:	460b      	mov	r3, r1
 802384a:	817b      	strh	r3, [r7, #10]
 802384c:	4613      	mov	r3, r2
 802384e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8023850:	f7fe f98a 	bl	8021b68 <HAL_GetTick>
 8023854:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8023856:	68fb      	ldr	r3, [r7, #12]
 8023858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802385c:	b2db      	uxtb	r3, r3
 802385e:	2b20      	cmp	r3, #32
 8023860:	f040 80e0 	bne.w	8023a24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8023864:	697b      	ldr	r3, [r7, #20]
 8023866:	9300      	str	r3, [sp, #0]
 8023868:	2319      	movs	r3, #25
 802386a:	2201      	movs	r2, #1
 802386c:	4970      	ldr	r1, [pc, #448]	; (8023a30 <HAL_I2C_Master_Transmit+0x1f4>)
 802386e:	68f8      	ldr	r0, [r7, #12]
 8023870:	f000 ff30 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8023874:	4603      	mov	r3, r0
 8023876:	2b00      	cmp	r3, #0
 8023878:	d001      	beq.n	802387e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 802387a:	2302      	movs	r3, #2
 802387c:	e0d3      	b.n	8023a26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 802387e:	68fb      	ldr	r3, [r7, #12]
 8023880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023884:	2b01      	cmp	r3, #1
 8023886:	d101      	bne.n	802388c <HAL_I2C_Master_Transmit+0x50>
 8023888:	2302      	movs	r3, #2
 802388a:	e0cc      	b.n	8023a26 <HAL_I2C_Master_Transmit+0x1ea>
 802388c:	68fb      	ldr	r3, [r7, #12]
 802388e:	2201      	movs	r2, #1
 8023890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8023894:	68fb      	ldr	r3, [r7, #12]
 8023896:	681b      	ldr	r3, [r3, #0]
 8023898:	681b      	ldr	r3, [r3, #0]
 802389a:	f003 0301 	and.w	r3, r3, #1
 802389e:	2b01      	cmp	r3, #1
 80238a0:	d007      	beq.n	80238b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80238a2:	68fb      	ldr	r3, [r7, #12]
 80238a4:	681b      	ldr	r3, [r3, #0]
 80238a6:	681a      	ldr	r2, [r3, #0]
 80238a8:	68fb      	ldr	r3, [r7, #12]
 80238aa:	681b      	ldr	r3, [r3, #0]
 80238ac:	f042 0201 	orr.w	r2, r2, #1
 80238b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80238b2:	68fb      	ldr	r3, [r7, #12]
 80238b4:	681b      	ldr	r3, [r3, #0]
 80238b6:	681a      	ldr	r2, [r3, #0]
 80238b8:	68fb      	ldr	r3, [r7, #12]
 80238ba:	681b      	ldr	r3, [r3, #0]
 80238bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80238c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80238c2:	68fb      	ldr	r3, [r7, #12]
 80238c4:	2221      	movs	r2, #33	; 0x21
 80238c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80238ca:	68fb      	ldr	r3, [r7, #12]
 80238cc:	2210      	movs	r2, #16
 80238ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80238d2:	68fb      	ldr	r3, [r7, #12]
 80238d4:	2200      	movs	r2, #0
 80238d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80238d8:	68fb      	ldr	r3, [r7, #12]
 80238da:	687a      	ldr	r2, [r7, #4]
 80238dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80238de:	68fb      	ldr	r3, [r7, #12]
 80238e0:	893a      	ldrh	r2, [r7, #8]
 80238e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80238e4:	68fb      	ldr	r3, [r7, #12]
 80238e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80238e8:	b29a      	uxth	r2, r3
 80238ea:	68fb      	ldr	r3, [r7, #12]
 80238ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80238ee:	68fb      	ldr	r3, [r7, #12]
 80238f0:	4a50      	ldr	r2, [pc, #320]	; (8023a34 <HAL_I2C_Master_Transmit+0x1f8>)
 80238f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80238f4:	8979      	ldrh	r1, [r7, #10]
 80238f6:	697b      	ldr	r3, [r7, #20]
 80238f8:	6a3a      	ldr	r2, [r7, #32]
 80238fa:	68f8      	ldr	r0, [r7, #12]
 80238fc:	f000 fcea 	bl	80242d4 <I2C_MasterRequestWrite>
 8023900:	4603      	mov	r3, r0
 8023902:	2b00      	cmp	r3, #0
 8023904:	d001      	beq.n	802390a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8023906:	2301      	movs	r3, #1
 8023908:	e08d      	b.n	8023a26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802390a:	2300      	movs	r3, #0
 802390c:	613b      	str	r3, [r7, #16]
 802390e:	68fb      	ldr	r3, [r7, #12]
 8023910:	681b      	ldr	r3, [r3, #0]
 8023912:	695b      	ldr	r3, [r3, #20]
 8023914:	613b      	str	r3, [r7, #16]
 8023916:	68fb      	ldr	r3, [r7, #12]
 8023918:	681b      	ldr	r3, [r3, #0]
 802391a:	699b      	ldr	r3, [r3, #24]
 802391c:	613b      	str	r3, [r7, #16]
 802391e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8023920:	e066      	b.n	80239f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023922:	697a      	ldr	r2, [r7, #20]
 8023924:	6a39      	ldr	r1, [r7, #32]
 8023926:	68f8      	ldr	r0, [r7, #12]
 8023928:	f000 ffaa 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 802392c:	4603      	mov	r3, r0
 802392e:	2b00      	cmp	r3, #0
 8023930:	d00d      	beq.n	802394e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8023932:	68fb      	ldr	r3, [r7, #12]
 8023934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023936:	2b04      	cmp	r3, #4
 8023938:	d107      	bne.n	802394a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802393a:	68fb      	ldr	r3, [r7, #12]
 802393c:	681b      	ldr	r3, [r3, #0]
 802393e:	681a      	ldr	r2, [r3, #0]
 8023940:	68fb      	ldr	r3, [r7, #12]
 8023942:	681b      	ldr	r3, [r3, #0]
 8023944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023948:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 802394a:	2301      	movs	r3, #1
 802394c:	e06b      	b.n	8023a26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 802394e:	68fb      	ldr	r3, [r7, #12]
 8023950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023952:	781a      	ldrb	r2, [r3, #0]
 8023954:	68fb      	ldr	r3, [r7, #12]
 8023956:	681b      	ldr	r3, [r3, #0]
 8023958:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802395a:	68fb      	ldr	r3, [r7, #12]
 802395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802395e:	1c5a      	adds	r2, r3, #1
 8023960:	68fb      	ldr	r3, [r7, #12]
 8023962:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8023964:	68fb      	ldr	r3, [r7, #12]
 8023966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023968:	b29b      	uxth	r3, r3
 802396a:	3b01      	subs	r3, #1
 802396c:	b29a      	uxth	r2, r3
 802396e:	68fb      	ldr	r3, [r7, #12]
 8023970:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8023972:	68fb      	ldr	r3, [r7, #12]
 8023974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023976:	3b01      	subs	r3, #1
 8023978:	b29a      	uxth	r2, r3
 802397a:	68fb      	ldr	r3, [r7, #12]
 802397c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 802397e:	68fb      	ldr	r3, [r7, #12]
 8023980:	681b      	ldr	r3, [r3, #0]
 8023982:	695b      	ldr	r3, [r3, #20]
 8023984:	f003 0304 	and.w	r3, r3, #4
 8023988:	2b04      	cmp	r3, #4
 802398a:	d11b      	bne.n	80239c4 <HAL_I2C_Master_Transmit+0x188>
 802398c:	68fb      	ldr	r3, [r7, #12]
 802398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023990:	2b00      	cmp	r3, #0
 8023992:	d017      	beq.n	80239c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8023994:	68fb      	ldr	r3, [r7, #12]
 8023996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023998:	781a      	ldrb	r2, [r3, #0]
 802399a:	68fb      	ldr	r3, [r7, #12]
 802399c:	681b      	ldr	r3, [r3, #0]
 802399e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80239a0:	68fb      	ldr	r3, [r7, #12]
 80239a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239a4:	1c5a      	adds	r2, r3, #1
 80239a6:	68fb      	ldr	r3, [r7, #12]
 80239a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80239aa:	68fb      	ldr	r3, [r7, #12]
 80239ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80239ae:	b29b      	uxth	r3, r3
 80239b0:	3b01      	subs	r3, #1
 80239b2:	b29a      	uxth	r2, r3
 80239b4:	68fb      	ldr	r3, [r7, #12]
 80239b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80239b8:	68fb      	ldr	r3, [r7, #12]
 80239ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80239bc:	3b01      	subs	r3, #1
 80239be:	b29a      	uxth	r2, r3
 80239c0:	68fb      	ldr	r3, [r7, #12]
 80239c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80239c4:	697a      	ldr	r2, [r7, #20]
 80239c6:	6a39      	ldr	r1, [r7, #32]
 80239c8:	68f8      	ldr	r0, [r7, #12]
 80239ca:	f000 ff9a 	bl	8024902 <I2C_WaitOnBTFFlagUntilTimeout>
 80239ce:	4603      	mov	r3, r0
 80239d0:	2b00      	cmp	r3, #0
 80239d2:	d00d      	beq.n	80239f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80239d4:	68fb      	ldr	r3, [r7, #12]
 80239d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80239d8:	2b04      	cmp	r3, #4
 80239da:	d107      	bne.n	80239ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80239dc:	68fb      	ldr	r3, [r7, #12]
 80239de:	681b      	ldr	r3, [r3, #0]
 80239e0:	681a      	ldr	r2, [r3, #0]
 80239e2:	68fb      	ldr	r3, [r7, #12]
 80239e4:	681b      	ldr	r3, [r3, #0]
 80239e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80239ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80239ec:	2301      	movs	r3, #1
 80239ee:	e01a      	b.n	8023a26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80239f0:	68fb      	ldr	r3, [r7, #12]
 80239f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80239f4:	2b00      	cmp	r3, #0
 80239f6:	d194      	bne.n	8023922 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80239f8:	68fb      	ldr	r3, [r7, #12]
 80239fa:	681b      	ldr	r3, [r3, #0]
 80239fc:	681a      	ldr	r2, [r3, #0]
 80239fe:	68fb      	ldr	r3, [r7, #12]
 8023a00:	681b      	ldr	r3, [r3, #0]
 8023a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8023a08:	68fb      	ldr	r3, [r7, #12]
 8023a0a:	2220      	movs	r2, #32
 8023a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8023a10:	68fb      	ldr	r3, [r7, #12]
 8023a12:	2200      	movs	r2, #0
 8023a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8023a18:	68fb      	ldr	r3, [r7, #12]
 8023a1a:	2200      	movs	r2, #0
 8023a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8023a20:	2300      	movs	r3, #0
 8023a22:	e000      	b.n	8023a26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8023a24:	2302      	movs	r3, #2
  }
}
 8023a26:	4618      	mov	r0, r3
 8023a28:	3718      	adds	r7, #24
 8023a2a:	46bd      	mov	sp, r7
 8023a2c:	bd80      	pop	{r7, pc}
 8023a2e:	bf00      	nop
 8023a30:	00100002 	.word	0x00100002
 8023a34:	ffff0000 	.word	0xffff0000

08023a38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8023a38:	b580      	push	{r7, lr}
 8023a3a:	b088      	sub	sp, #32
 8023a3c:	af02      	add	r7, sp, #8
 8023a3e:	60f8      	str	r0, [r7, #12]
 8023a40:	4608      	mov	r0, r1
 8023a42:	4611      	mov	r1, r2
 8023a44:	461a      	mov	r2, r3
 8023a46:	4603      	mov	r3, r0
 8023a48:	817b      	strh	r3, [r7, #10]
 8023a4a:	460b      	mov	r3, r1
 8023a4c:	813b      	strh	r3, [r7, #8]
 8023a4e:	4613      	mov	r3, r2
 8023a50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8023a52:	f7fe f889 	bl	8021b68 <HAL_GetTick>
 8023a56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8023a58:	68fb      	ldr	r3, [r7, #12]
 8023a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023a5e:	b2db      	uxtb	r3, r3
 8023a60:	2b20      	cmp	r3, #32
 8023a62:	f040 80d9 	bne.w	8023c18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8023a66:	697b      	ldr	r3, [r7, #20]
 8023a68:	9300      	str	r3, [sp, #0]
 8023a6a:	2319      	movs	r3, #25
 8023a6c:	2201      	movs	r2, #1
 8023a6e:	496d      	ldr	r1, [pc, #436]	; (8023c24 <HAL_I2C_Mem_Write+0x1ec>)
 8023a70:	68f8      	ldr	r0, [r7, #12]
 8023a72:	f000 fe2f 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8023a76:	4603      	mov	r3, r0
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	d001      	beq.n	8023a80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8023a7c:	2302      	movs	r3, #2
 8023a7e:	e0cc      	b.n	8023c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8023a80:	68fb      	ldr	r3, [r7, #12]
 8023a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023a86:	2b01      	cmp	r3, #1
 8023a88:	d101      	bne.n	8023a8e <HAL_I2C_Mem_Write+0x56>
 8023a8a:	2302      	movs	r3, #2
 8023a8c:	e0c5      	b.n	8023c1a <HAL_I2C_Mem_Write+0x1e2>
 8023a8e:	68fb      	ldr	r3, [r7, #12]
 8023a90:	2201      	movs	r2, #1
 8023a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8023a96:	68fb      	ldr	r3, [r7, #12]
 8023a98:	681b      	ldr	r3, [r3, #0]
 8023a9a:	681b      	ldr	r3, [r3, #0]
 8023a9c:	f003 0301 	and.w	r3, r3, #1
 8023aa0:	2b01      	cmp	r3, #1
 8023aa2:	d007      	beq.n	8023ab4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8023aa4:	68fb      	ldr	r3, [r7, #12]
 8023aa6:	681b      	ldr	r3, [r3, #0]
 8023aa8:	681a      	ldr	r2, [r3, #0]
 8023aaa:	68fb      	ldr	r3, [r7, #12]
 8023aac:	681b      	ldr	r3, [r3, #0]
 8023aae:	f042 0201 	orr.w	r2, r2, #1
 8023ab2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8023ab4:	68fb      	ldr	r3, [r7, #12]
 8023ab6:	681b      	ldr	r3, [r3, #0]
 8023ab8:	681a      	ldr	r2, [r3, #0]
 8023aba:	68fb      	ldr	r3, [r7, #12]
 8023abc:	681b      	ldr	r3, [r3, #0]
 8023abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023ac2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8023ac4:	68fb      	ldr	r3, [r7, #12]
 8023ac6:	2221      	movs	r2, #33	; 0x21
 8023ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8023acc:	68fb      	ldr	r3, [r7, #12]
 8023ace:	2240      	movs	r2, #64	; 0x40
 8023ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023ad4:	68fb      	ldr	r3, [r7, #12]
 8023ad6:	2200      	movs	r2, #0
 8023ad8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8023ada:	68fb      	ldr	r3, [r7, #12]
 8023adc:	6a3a      	ldr	r2, [r7, #32]
 8023ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8023ae0:	68fb      	ldr	r3, [r7, #12]
 8023ae2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8023ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8023ae6:	68fb      	ldr	r3, [r7, #12]
 8023ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023aea:	b29a      	uxth	r2, r3
 8023aec:	68fb      	ldr	r3, [r7, #12]
 8023aee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8023af0:	68fb      	ldr	r3, [r7, #12]
 8023af2:	4a4d      	ldr	r2, [pc, #308]	; (8023c28 <HAL_I2C_Mem_Write+0x1f0>)
 8023af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8023af6:	88f8      	ldrh	r0, [r7, #6]
 8023af8:	893a      	ldrh	r2, [r7, #8]
 8023afa:	8979      	ldrh	r1, [r7, #10]
 8023afc:	697b      	ldr	r3, [r7, #20]
 8023afe:	9301      	str	r3, [sp, #4]
 8023b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023b02:	9300      	str	r3, [sp, #0]
 8023b04:	4603      	mov	r3, r0
 8023b06:	68f8      	ldr	r0, [r7, #12]
 8023b08:	f000 fc66 	bl	80243d8 <I2C_RequestMemoryWrite>
 8023b0c:	4603      	mov	r3, r0
 8023b0e:	2b00      	cmp	r3, #0
 8023b10:	d052      	beq.n	8023bb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8023b12:	2301      	movs	r3, #1
 8023b14:	e081      	b.n	8023c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023b16:	697a      	ldr	r2, [r7, #20]
 8023b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8023b1a:	68f8      	ldr	r0, [r7, #12]
 8023b1c:	f000 feb0 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 8023b20:	4603      	mov	r3, r0
 8023b22:	2b00      	cmp	r3, #0
 8023b24:	d00d      	beq.n	8023b42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8023b26:	68fb      	ldr	r3, [r7, #12]
 8023b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b2a:	2b04      	cmp	r3, #4
 8023b2c:	d107      	bne.n	8023b3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023b2e:	68fb      	ldr	r3, [r7, #12]
 8023b30:	681b      	ldr	r3, [r3, #0]
 8023b32:	681a      	ldr	r2, [r3, #0]
 8023b34:	68fb      	ldr	r3, [r7, #12]
 8023b36:	681b      	ldr	r3, [r3, #0]
 8023b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023b3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8023b3e:	2301      	movs	r3, #1
 8023b40:	e06b      	b.n	8023c1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8023b42:	68fb      	ldr	r3, [r7, #12]
 8023b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b46:	781a      	ldrb	r2, [r3, #0]
 8023b48:	68fb      	ldr	r3, [r7, #12]
 8023b4a:	681b      	ldr	r3, [r3, #0]
 8023b4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8023b4e:	68fb      	ldr	r3, [r7, #12]
 8023b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b52:	1c5a      	adds	r2, r3, #1
 8023b54:	68fb      	ldr	r3, [r7, #12]
 8023b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8023b58:	68fb      	ldr	r3, [r7, #12]
 8023b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023b5c:	3b01      	subs	r3, #1
 8023b5e:	b29a      	uxth	r2, r3
 8023b60:	68fb      	ldr	r3, [r7, #12]
 8023b62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8023b64:	68fb      	ldr	r3, [r7, #12]
 8023b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023b68:	b29b      	uxth	r3, r3
 8023b6a:	3b01      	subs	r3, #1
 8023b6c:	b29a      	uxth	r2, r3
 8023b6e:	68fb      	ldr	r3, [r7, #12]
 8023b70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8023b72:	68fb      	ldr	r3, [r7, #12]
 8023b74:	681b      	ldr	r3, [r3, #0]
 8023b76:	695b      	ldr	r3, [r3, #20]
 8023b78:	f003 0304 	and.w	r3, r3, #4
 8023b7c:	2b04      	cmp	r3, #4
 8023b7e:	d11b      	bne.n	8023bb8 <HAL_I2C_Mem_Write+0x180>
 8023b80:	68fb      	ldr	r3, [r7, #12]
 8023b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023b84:	2b00      	cmp	r3, #0
 8023b86:	d017      	beq.n	8023bb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8023b88:	68fb      	ldr	r3, [r7, #12]
 8023b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b8c:	781a      	ldrb	r2, [r3, #0]
 8023b8e:	68fb      	ldr	r3, [r7, #12]
 8023b90:	681b      	ldr	r3, [r3, #0]
 8023b92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8023b94:	68fb      	ldr	r3, [r7, #12]
 8023b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b98:	1c5a      	adds	r2, r3, #1
 8023b9a:	68fb      	ldr	r3, [r7, #12]
 8023b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8023b9e:	68fb      	ldr	r3, [r7, #12]
 8023ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023ba2:	3b01      	subs	r3, #1
 8023ba4:	b29a      	uxth	r2, r3
 8023ba6:	68fb      	ldr	r3, [r7, #12]
 8023ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8023baa:	68fb      	ldr	r3, [r7, #12]
 8023bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023bae:	b29b      	uxth	r3, r3
 8023bb0:	3b01      	subs	r3, #1
 8023bb2:	b29a      	uxth	r2, r3
 8023bb4:	68fb      	ldr	r3, [r7, #12]
 8023bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8023bb8:	68fb      	ldr	r3, [r7, #12]
 8023bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023bbc:	2b00      	cmp	r3, #0
 8023bbe:	d1aa      	bne.n	8023b16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023bc0:	697a      	ldr	r2, [r7, #20]
 8023bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8023bc4:	68f8      	ldr	r0, [r7, #12]
 8023bc6:	f000 fe9c 	bl	8024902 <I2C_WaitOnBTFFlagUntilTimeout>
 8023bca:	4603      	mov	r3, r0
 8023bcc:	2b00      	cmp	r3, #0
 8023bce:	d00d      	beq.n	8023bec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8023bd0:	68fb      	ldr	r3, [r7, #12]
 8023bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023bd4:	2b04      	cmp	r3, #4
 8023bd6:	d107      	bne.n	8023be8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023bd8:	68fb      	ldr	r3, [r7, #12]
 8023bda:	681b      	ldr	r3, [r3, #0]
 8023bdc:	681a      	ldr	r2, [r3, #0]
 8023bde:	68fb      	ldr	r3, [r7, #12]
 8023be0:	681b      	ldr	r3, [r3, #0]
 8023be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023be6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8023be8:	2301      	movs	r3, #1
 8023bea:	e016      	b.n	8023c1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023bec:	68fb      	ldr	r3, [r7, #12]
 8023bee:	681b      	ldr	r3, [r3, #0]
 8023bf0:	681a      	ldr	r2, [r3, #0]
 8023bf2:	68fb      	ldr	r3, [r7, #12]
 8023bf4:	681b      	ldr	r3, [r3, #0]
 8023bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8023bfc:	68fb      	ldr	r3, [r7, #12]
 8023bfe:	2220      	movs	r2, #32
 8023c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8023c04:	68fb      	ldr	r3, [r7, #12]
 8023c06:	2200      	movs	r2, #0
 8023c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8023c0c:	68fb      	ldr	r3, [r7, #12]
 8023c0e:	2200      	movs	r2, #0
 8023c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8023c14:	2300      	movs	r3, #0
 8023c16:	e000      	b.n	8023c1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8023c18:	2302      	movs	r3, #2
  }
}
 8023c1a:	4618      	mov	r0, r3
 8023c1c:	3718      	adds	r7, #24
 8023c1e:	46bd      	mov	sp, r7
 8023c20:	bd80      	pop	{r7, pc}
 8023c22:	bf00      	nop
 8023c24:	00100002 	.word	0x00100002
 8023c28:	ffff0000 	.word	0xffff0000

08023c2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8023c2c:	b580      	push	{r7, lr}
 8023c2e:	b08c      	sub	sp, #48	; 0x30
 8023c30:	af02      	add	r7, sp, #8
 8023c32:	60f8      	str	r0, [r7, #12]
 8023c34:	4608      	mov	r0, r1
 8023c36:	4611      	mov	r1, r2
 8023c38:	461a      	mov	r2, r3
 8023c3a:	4603      	mov	r3, r0
 8023c3c:	817b      	strh	r3, [r7, #10]
 8023c3e:	460b      	mov	r3, r1
 8023c40:	813b      	strh	r3, [r7, #8]
 8023c42:	4613      	mov	r3, r2
 8023c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8023c46:	f7fd ff8f 	bl	8021b68 <HAL_GetTick>
 8023c4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8023c4c:	68fb      	ldr	r3, [r7, #12]
 8023c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023c52:	b2db      	uxtb	r3, r3
 8023c54:	2b20      	cmp	r3, #32
 8023c56:	f040 8208 	bne.w	802406a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8023c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c5c:	9300      	str	r3, [sp, #0]
 8023c5e:	2319      	movs	r3, #25
 8023c60:	2201      	movs	r2, #1
 8023c62:	497b      	ldr	r1, [pc, #492]	; (8023e50 <HAL_I2C_Mem_Read+0x224>)
 8023c64:	68f8      	ldr	r0, [r7, #12]
 8023c66:	f000 fd35 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8023c6a:	4603      	mov	r3, r0
 8023c6c:	2b00      	cmp	r3, #0
 8023c6e:	d001      	beq.n	8023c74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8023c70:	2302      	movs	r3, #2
 8023c72:	e1fb      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8023c74:	68fb      	ldr	r3, [r7, #12]
 8023c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023c7a:	2b01      	cmp	r3, #1
 8023c7c:	d101      	bne.n	8023c82 <HAL_I2C_Mem_Read+0x56>
 8023c7e:	2302      	movs	r3, #2
 8023c80:	e1f4      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
 8023c82:	68fb      	ldr	r3, [r7, #12]
 8023c84:	2201      	movs	r2, #1
 8023c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8023c8a:	68fb      	ldr	r3, [r7, #12]
 8023c8c:	681b      	ldr	r3, [r3, #0]
 8023c8e:	681b      	ldr	r3, [r3, #0]
 8023c90:	f003 0301 	and.w	r3, r3, #1
 8023c94:	2b01      	cmp	r3, #1
 8023c96:	d007      	beq.n	8023ca8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8023c98:	68fb      	ldr	r3, [r7, #12]
 8023c9a:	681b      	ldr	r3, [r3, #0]
 8023c9c:	681a      	ldr	r2, [r3, #0]
 8023c9e:	68fb      	ldr	r3, [r7, #12]
 8023ca0:	681b      	ldr	r3, [r3, #0]
 8023ca2:	f042 0201 	orr.w	r2, r2, #1
 8023ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8023ca8:	68fb      	ldr	r3, [r7, #12]
 8023caa:	681b      	ldr	r3, [r3, #0]
 8023cac:	681a      	ldr	r2, [r3, #0]
 8023cae:	68fb      	ldr	r3, [r7, #12]
 8023cb0:	681b      	ldr	r3, [r3, #0]
 8023cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8023cb8:	68fb      	ldr	r3, [r7, #12]
 8023cba:	2222      	movs	r2, #34	; 0x22
 8023cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8023cc0:	68fb      	ldr	r3, [r7, #12]
 8023cc2:	2240      	movs	r2, #64	; 0x40
 8023cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023cc8:	68fb      	ldr	r3, [r7, #12]
 8023cca:	2200      	movs	r2, #0
 8023ccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8023cce:	68fb      	ldr	r3, [r7, #12]
 8023cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8023cd4:	68fb      	ldr	r3, [r7, #12]
 8023cd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8023cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8023cda:	68fb      	ldr	r3, [r7, #12]
 8023cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023cde:	b29a      	uxth	r2, r3
 8023ce0:	68fb      	ldr	r3, [r7, #12]
 8023ce2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8023ce4:	68fb      	ldr	r3, [r7, #12]
 8023ce6:	4a5b      	ldr	r2, [pc, #364]	; (8023e54 <HAL_I2C_Mem_Read+0x228>)
 8023ce8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8023cea:	88f8      	ldrh	r0, [r7, #6]
 8023cec:	893a      	ldrh	r2, [r7, #8]
 8023cee:	8979      	ldrh	r1, [r7, #10]
 8023cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023cf2:	9301      	str	r3, [sp, #4]
 8023cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023cf6:	9300      	str	r3, [sp, #0]
 8023cf8:	4603      	mov	r3, r0
 8023cfa:	68f8      	ldr	r0, [r7, #12]
 8023cfc:	f000 fc02 	bl	8024504 <I2C_RequestMemoryRead>
 8023d00:	4603      	mov	r3, r0
 8023d02:	2b00      	cmp	r3, #0
 8023d04:	d001      	beq.n	8023d0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8023d06:	2301      	movs	r3, #1
 8023d08:	e1b0      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8023d0a:	68fb      	ldr	r3, [r7, #12]
 8023d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023d0e:	2b00      	cmp	r3, #0
 8023d10:	d113      	bne.n	8023d3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023d12:	2300      	movs	r3, #0
 8023d14:	623b      	str	r3, [r7, #32]
 8023d16:	68fb      	ldr	r3, [r7, #12]
 8023d18:	681b      	ldr	r3, [r3, #0]
 8023d1a:	695b      	ldr	r3, [r3, #20]
 8023d1c:	623b      	str	r3, [r7, #32]
 8023d1e:	68fb      	ldr	r3, [r7, #12]
 8023d20:	681b      	ldr	r3, [r3, #0]
 8023d22:	699b      	ldr	r3, [r3, #24]
 8023d24:	623b      	str	r3, [r7, #32]
 8023d26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023d28:	68fb      	ldr	r3, [r7, #12]
 8023d2a:	681b      	ldr	r3, [r3, #0]
 8023d2c:	681a      	ldr	r2, [r3, #0]
 8023d2e:	68fb      	ldr	r3, [r7, #12]
 8023d30:	681b      	ldr	r3, [r3, #0]
 8023d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023d36:	601a      	str	r2, [r3, #0]
 8023d38:	e184      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8023d3a:	68fb      	ldr	r3, [r7, #12]
 8023d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023d3e:	2b01      	cmp	r3, #1
 8023d40:	d11b      	bne.n	8023d7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8023d42:	68fb      	ldr	r3, [r7, #12]
 8023d44:	681b      	ldr	r3, [r3, #0]
 8023d46:	681a      	ldr	r2, [r3, #0]
 8023d48:	68fb      	ldr	r3, [r7, #12]
 8023d4a:	681b      	ldr	r3, [r3, #0]
 8023d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023d52:	2300      	movs	r3, #0
 8023d54:	61fb      	str	r3, [r7, #28]
 8023d56:	68fb      	ldr	r3, [r7, #12]
 8023d58:	681b      	ldr	r3, [r3, #0]
 8023d5a:	695b      	ldr	r3, [r3, #20]
 8023d5c:	61fb      	str	r3, [r7, #28]
 8023d5e:	68fb      	ldr	r3, [r7, #12]
 8023d60:	681b      	ldr	r3, [r3, #0]
 8023d62:	699b      	ldr	r3, [r3, #24]
 8023d64:	61fb      	str	r3, [r7, #28]
 8023d66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023d68:	68fb      	ldr	r3, [r7, #12]
 8023d6a:	681b      	ldr	r3, [r3, #0]
 8023d6c:	681a      	ldr	r2, [r3, #0]
 8023d6e:	68fb      	ldr	r3, [r7, #12]
 8023d70:	681b      	ldr	r3, [r3, #0]
 8023d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023d76:	601a      	str	r2, [r3, #0]
 8023d78:	e164      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8023d7a:	68fb      	ldr	r3, [r7, #12]
 8023d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023d7e:	2b02      	cmp	r3, #2
 8023d80:	d11b      	bne.n	8023dba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8023d82:	68fb      	ldr	r3, [r7, #12]
 8023d84:	681b      	ldr	r3, [r3, #0]
 8023d86:	681a      	ldr	r2, [r3, #0]
 8023d88:	68fb      	ldr	r3, [r7, #12]
 8023d8a:	681b      	ldr	r3, [r3, #0]
 8023d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023d90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8023d92:	68fb      	ldr	r3, [r7, #12]
 8023d94:	681b      	ldr	r3, [r3, #0]
 8023d96:	681a      	ldr	r2, [r3, #0]
 8023d98:	68fb      	ldr	r3, [r7, #12]
 8023d9a:	681b      	ldr	r3, [r3, #0]
 8023d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8023da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023da2:	2300      	movs	r3, #0
 8023da4:	61bb      	str	r3, [r7, #24]
 8023da6:	68fb      	ldr	r3, [r7, #12]
 8023da8:	681b      	ldr	r3, [r3, #0]
 8023daa:	695b      	ldr	r3, [r3, #20]
 8023dac:	61bb      	str	r3, [r7, #24]
 8023dae:	68fb      	ldr	r3, [r7, #12]
 8023db0:	681b      	ldr	r3, [r3, #0]
 8023db2:	699b      	ldr	r3, [r3, #24]
 8023db4:	61bb      	str	r3, [r7, #24]
 8023db6:	69bb      	ldr	r3, [r7, #24]
 8023db8:	e144      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8023dba:	2300      	movs	r3, #0
 8023dbc:	617b      	str	r3, [r7, #20]
 8023dbe:	68fb      	ldr	r3, [r7, #12]
 8023dc0:	681b      	ldr	r3, [r3, #0]
 8023dc2:	695b      	ldr	r3, [r3, #20]
 8023dc4:	617b      	str	r3, [r7, #20]
 8023dc6:	68fb      	ldr	r3, [r7, #12]
 8023dc8:	681b      	ldr	r3, [r3, #0]
 8023dca:	699b      	ldr	r3, [r3, #24]
 8023dcc:	617b      	str	r3, [r7, #20]
 8023dce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8023dd0:	e138      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8023dd2:	68fb      	ldr	r3, [r7, #12]
 8023dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023dd6:	2b03      	cmp	r3, #3
 8023dd8:	f200 80f1 	bhi.w	8023fbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8023ddc:	68fb      	ldr	r3, [r7, #12]
 8023dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023de0:	2b01      	cmp	r3, #1
 8023de2:	d123      	bne.n	8023e2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023de6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8023de8:	68f8      	ldr	r0, [r7, #12]
 8023dea:	f000 fdcb 	bl	8024984 <I2C_WaitOnRXNEFlagUntilTimeout>
 8023dee:	4603      	mov	r3, r0
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	d001      	beq.n	8023df8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8023df4:	2301      	movs	r3, #1
 8023df6:	e139      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023df8:	68fb      	ldr	r3, [r7, #12]
 8023dfa:	681b      	ldr	r3, [r3, #0]
 8023dfc:	691a      	ldr	r2, [r3, #16]
 8023dfe:	68fb      	ldr	r3, [r7, #12]
 8023e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e02:	b2d2      	uxtb	r2, r2
 8023e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023e06:	68fb      	ldr	r3, [r7, #12]
 8023e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e0a:	1c5a      	adds	r2, r3, #1
 8023e0c:	68fb      	ldr	r3, [r7, #12]
 8023e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023e10:	68fb      	ldr	r3, [r7, #12]
 8023e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023e14:	3b01      	subs	r3, #1
 8023e16:	b29a      	uxth	r2, r3
 8023e18:	68fb      	ldr	r3, [r7, #12]
 8023e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023e1c:	68fb      	ldr	r3, [r7, #12]
 8023e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023e20:	b29b      	uxth	r3, r3
 8023e22:	3b01      	subs	r3, #1
 8023e24:	b29a      	uxth	r2, r3
 8023e26:	68fb      	ldr	r3, [r7, #12]
 8023e28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8023e2a:	e10b      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8023e2c:	68fb      	ldr	r3, [r7, #12]
 8023e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023e30:	2b02      	cmp	r3, #2
 8023e32:	d14e      	bne.n	8023ed2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8023e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e36:	9300      	str	r3, [sp, #0]
 8023e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023e3a:	2200      	movs	r2, #0
 8023e3c:	4906      	ldr	r1, [pc, #24]	; (8023e58 <HAL_I2C_Mem_Read+0x22c>)
 8023e3e:	68f8      	ldr	r0, [r7, #12]
 8023e40:	f000 fc48 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8023e44:	4603      	mov	r3, r0
 8023e46:	2b00      	cmp	r3, #0
 8023e48:	d008      	beq.n	8023e5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8023e4a:	2301      	movs	r3, #1
 8023e4c:	e10e      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
 8023e4e:	bf00      	nop
 8023e50:	00100002 	.word	0x00100002
 8023e54:	ffff0000 	.word	0xffff0000
 8023e58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023e5c:	68fb      	ldr	r3, [r7, #12]
 8023e5e:	681b      	ldr	r3, [r3, #0]
 8023e60:	681a      	ldr	r2, [r3, #0]
 8023e62:	68fb      	ldr	r3, [r7, #12]
 8023e64:	681b      	ldr	r3, [r3, #0]
 8023e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023e6c:	68fb      	ldr	r3, [r7, #12]
 8023e6e:	681b      	ldr	r3, [r3, #0]
 8023e70:	691a      	ldr	r2, [r3, #16]
 8023e72:	68fb      	ldr	r3, [r7, #12]
 8023e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e76:	b2d2      	uxtb	r2, r2
 8023e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023e7a:	68fb      	ldr	r3, [r7, #12]
 8023e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e7e:	1c5a      	adds	r2, r3, #1
 8023e80:	68fb      	ldr	r3, [r7, #12]
 8023e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023e84:	68fb      	ldr	r3, [r7, #12]
 8023e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023e88:	3b01      	subs	r3, #1
 8023e8a:	b29a      	uxth	r2, r3
 8023e8c:	68fb      	ldr	r3, [r7, #12]
 8023e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023e90:	68fb      	ldr	r3, [r7, #12]
 8023e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023e94:	b29b      	uxth	r3, r3
 8023e96:	3b01      	subs	r3, #1
 8023e98:	b29a      	uxth	r2, r3
 8023e9a:	68fb      	ldr	r3, [r7, #12]
 8023e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023e9e:	68fb      	ldr	r3, [r7, #12]
 8023ea0:	681b      	ldr	r3, [r3, #0]
 8023ea2:	691a      	ldr	r2, [r3, #16]
 8023ea4:	68fb      	ldr	r3, [r7, #12]
 8023ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023ea8:	b2d2      	uxtb	r2, r2
 8023eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023eac:	68fb      	ldr	r3, [r7, #12]
 8023eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023eb0:	1c5a      	adds	r2, r3, #1
 8023eb2:	68fb      	ldr	r3, [r7, #12]
 8023eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023eb6:	68fb      	ldr	r3, [r7, #12]
 8023eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023eba:	3b01      	subs	r3, #1
 8023ebc:	b29a      	uxth	r2, r3
 8023ebe:	68fb      	ldr	r3, [r7, #12]
 8023ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023ec2:	68fb      	ldr	r3, [r7, #12]
 8023ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023ec6:	b29b      	uxth	r3, r3
 8023ec8:	3b01      	subs	r3, #1
 8023eca:	b29a      	uxth	r2, r3
 8023ecc:	68fb      	ldr	r3, [r7, #12]
 8023ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8023ed0:	e0b8      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8023ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023ed4:	9300      	str	r3, [sp, #0]
 8023ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023ed8:	2200      	movs	r2, #0
 8023eda:	4966      	ldr	r1, [pc, #408]	; (8024074 <HAL_I2C_Mem_Read+0x448>)
 8023edc:	68f8      	ldr	r0, [r7, #12]
 8023ede:	f000 fbf9 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8023ee2:	4603      	mov	r3, r0
 8023ee4:	2b00      	cmp	r3, #0
 8023ee6:	d001      	beq.n	8023eec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8023ee8:	2301      	movs	r3, #1
 8023eea:	e0bf      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8023eec:	68fb      	ldr	r3, [r7, #12]
 8023eee:	681b      	ldr	r3, [r3, #0]
 8023ef0:	681a      	ldr	r2, [r3, #0]
 8023ef2:	68fb      	ldr	r3, [r7, #12]
 8023ef4:	681b      	ldr	r3, [r3, #0]
 8023ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023efc:	68fb      	ldr	r3, [r7, #12]
 8023efe:	681b      	ldr	r3, [r3, #0]
 8023f00:	691a      	ldr	r2, [r3, #16]
 8023f02:	68fb      	ldr	r3, [r7, #12]
 8023f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f06:	b2d2      	uxtb	r2, r2
 8023f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023f0a:	68fb      	ldr	r3, [r7, #12]
 8023f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f0e:	1c5a      	adds	r2, r3, #1
 8023f10:	68fb      	ldr	r3, [r7, #12]
 8023f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023f14:	68fb      	ldr	r3, [r7, #12]
 8023f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023f18:	3b01      	subs	r3, #1
 8023f1a:	b29a      	uxth	r2, r3
 8023f1c:	68fb      	ldr	r3, [r7, #12]
 8023f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023f20:	68fb      	ldr	r3, [r7, #12]
 8023f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023f24:	b29b      	uxth	r3, r3
 8023f26:	3b01      	subs	r3, #1
 8023f28:	b29a      	uxth	r2, r3
 8023f2a:	68fb      	ldr	r3, [r7, #12]
 8023f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8023f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023f30:	9300      	str	r3, [sp, #0]
 8023f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023f34:	2200      	movs	r2, #0
 8023f36:	494f      	ldr	r1, [pc, #316]	; (8024074 <HAL_I2C_Mem_Read+0x448>)
 8023f38:	68f8      	ldr	r0, [r7, #12]
 8023f3a:	f000 fbcb 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8023f3e:	4603      	mov	r3, r0
 8023f40:	2b00      	cmp	r3, #0
 8023f42:	d001      	beq.n	8023f48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8023f44:	2301      	movs	r3, #1
 8023f46:	e091      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8023f48:	68fb      	ldr	r3, [r7, #12]
 8023f4a:	681b      	ldr	r3, [r3, #0]
 8023f4c:	681a      	ldr	r2, [r3, #0]
 8023f4e:	68fb      	ldr	r3, [r7, #12]
 8023f50:	681b      	ldr	r3, [r3, #0]
 8023f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023f58:	68fb      	ldr	r3, [r7, #12]
 8023f5a:	681b      	ldr	r3, [r3, #0]
 8023f5c:	691a      	ldr	r2, [r3, #16]
 8023f5e:	68fb      	ldr	r3, [r7, #12]
 8023f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f62:	b2d2      	uxtb	r2, r2
 8023f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023f66:	68fb      	ldr	r3, [r7, #12]
 8023f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f6a:	1c5a      	adds	r2, r3, #1
 8023f6c:	68fb      	ldr	r3, [r7, #12]
 8023f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023f70:	68fb      	ldr	r3, [r7, #12]
 8023f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023f74:	3b01      	subs	r3, #1
 8023f76:	b29a      	uxth	r2, r3
 8023f78:	68fb      	ldr	r3, [r7, #12]
 8023f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023f7c:	68fb      	ldr	r3, [r7, #12]
 8023f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023f80:	b29b      	uxth	r3, r3
 8023f82:	3b01      	subs	r3, #1
 8023f84:	b29a      	uxth	r2, r3
 8023f86:	68fb      	ldr	r3, [r7, #12]
 8023f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023f8a:	68fb      	ldr	r3, [r7, #12]
 8023f8c:	681b      	ldr	r3, [r3, #0]
 8023f8e:	691a      	ldr	r2, [r3, #16]
 8023f90:	68fb      	ldr	r3, [r7, #12]
 8023f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f94:	b2d2      	uxtb	r2, r2
 8023f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8023f98:	68fb      	ldr	r3, [r7, #12]
 8023f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f9c:	1c5a      	adds	r2, r3, #1
 8023f9e:	68fb      	ldr	r3, [r7, #12]
 8023fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8023fa2:	68fb      	ldr	r3, [r7, #12]
 8023fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023fa6:	3b01      	subs	r3, #1
 8023fa8:	b29a      	uxth	r2, r3
 8023faa:	68fb      	ldr	r3, [r7, #12]
 8023fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8023fae:	68fb      	ldr	r3, [r7, #12]
 8023fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023fb2:	b29b      	uxth	r3, r3
 8023fb4:	3b01      	subs	r3, #1
 8023fb6:	b29a      	uxth	r2, r3
 8023fb8:	68fb      	ldr	r3, [r7, #12]
 8023fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8023fbc:	e042      	b.n	8024044 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8023fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8023fc2:	68f8      	ldr	r0, [r7, #12]
 8023fc4:	f000 fcde 	bl	8024984 <I2C_WaitOnRXNEFlagUntilTimeout>
 8023fc8:	4603      	mov	r3, r0
 8023fca:	2b00      	cmp	r3, #0
 8023fcc:	d001      	beq.n	8023fd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8023fce:	2301      	movs	r3, #1
 8023fd0:	e04c      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8023fd2:	68fb      	ldr	r3, [r7, #12]
 8023fd4:	681b      	ldr	r3, [r3, #0]
 8023fd6:	691a      	ldr	r2, [r3, #16]
 8023fd8:	68fb      	ldr	r3, [r7, #12]
 8023fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023fdc:	b2d2      	uxtb	r2, r2
 8023fde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8023fe0:	68fb      	ldr	r3, [r7, #12]
 8023fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023fe4:	1c5a      	adds	r2, r3, #1
 8023fe6:	68fb      	ldr	r3, [r7, #12]
 8023fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8023fea:	68fb      	ldr	r3, [r7, #12]
 8023fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023fee:	3b01      	subs	r3, #1
 8023ff0:	b29a      	uxth	r2, r3
 8023ff2:	68fb      	ldr	r3, [r7, #12]
 8023ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8023ff6:	68fb      	ldr	r3, [r7, #12]
 8023ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023ffa:	b29b      	uxth	r3, r3
 8023ffc:	3b01      	subs	r3, #1
 8023ffe:	b29a      	uxth	r2, r3
 8024000:	68fb      	ldr	r3, [r7, #12]
 8024002:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8024004:	68fb      	ldr	r3, [r7, #12]
 8024006:	681b      	ldr	r3, [r3, #0]
 8024008:	695b      	ldr	r3, [r3, #20]
 802400a:	f003 0304 	and.w	r3, r3, #4
 802400e:	2b04      	cmp	r3, #4
 8024010:	d118      	bne.n	8024044 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8024012:	68fb      	ldr	r3, [r7, #12]
 8024014:	681b      	ldr	r3, [r3, #0]
 8024016:	691a      	ldr	r2, [r3, #16]
 8024018:	68fb      	ldr	r3, [r7, #12]
 802401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802401c:	b2d2      	uxtb	r2, r2
 802401e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8024020:	68fb      	ldr	r3, [r7, #12]
 8024022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024024:	1c5a      	adds	r2, r3, #1
 8024026:	68fb      	ldr	r3, [r7, #12]
 8024028:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 802402a:	68fb      	ldr	r3, [r7, #12]
 802402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802402e:	3b01      	subs	r3, #1
 8024030:	b29a      	uxth	r2, r3
 8024032:	68fb      	ldr	r3, [r7, #12]
 8024034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8024036:	68fb      	ldr	r3, [r7, #12]
 8024038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802403a:	b29b      	uxth	r3, r3
 802403c:	3b01      	subs	r3, #1
 802403e:	b29a      	uxth	r2, r3
 8024040:	68fb      	ldr	r3, [r7, #12]
 8024042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8024044:	68fb      	ldr	r3, [r7, #12]
 8024046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024048:	2b00      	cmp	r3, #0
 802404a:	f47f aec2 	bne.w	8023dd2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 802404e:	68fb      	ldr	r3, [r7, #12]
 8024050:	2220      	movs	r2, #32
 8024052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8024056:	68fb      	ldr	r3, [r7, #12]
 8024058:	2200      	movs	r2, #0
 802405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802405e:	68fb      	ldr	r3, [r7, #12]
 8024060:	2200      	movs	r2, #0
 8024062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8024066:	2300      	movs	r3, #0
 8024068:	e000      	b.n	802406c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 802406a:	2302      	movs	r3, #2
  }
}
 802406c:	4618      	mov	r0, r3
 802406e:	3728      	adds	r7, #40	; 0x28
 8024070:	46bd      	mov	sp, r7
 8024072:	bd80      	pop	{r7, pc}
 8024074:	00010004 	.word	0x00010004

08024078 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8024078:	b580      	push	{r7, lr}
 802407a:	b08a      	sub	sp, #40	; 0x28
 802407c:	af02      	add	r7, sp, #8
 802407e:	60f8      	str	r0, [r7, #12]
 8024080:	607a      	str	r2, [r7, #4]
 8024082:	603b      	str	r3, [r7, #0]
 8024084:	460b      	mov	r3, r1
 8024086:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8024088:	f7fd fd6e 	bl	8021b68 <HAL_GetTick>
 802408c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 802408e:	2301      	movs	r3, #1
 8024090:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8024092:	68fb      	ldr	r3, [r7, #12]
 8024094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024098:	b2db      	uxtb	r3, r3
 802409a:	2b20      	cmp	r3, #32
 802409c:	f040 8111 	bne.w	80242c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80240a0:	69fb      	ldr	r3, [r7, #28]
 80240a2:	9300      	str	r3, [sp, #0]
 80240a4:	2319      	movs	r3, #25
 80240a6:	2201      	movs	r2, #1
 80240a8:	4988      	ldr	r1, [pc, #544]	; (80242cc <HAL_I2C_IsDeviceReady+0x254>)
 80240aa:	68f8      	ldr	r0, [r7, #12]
 80240ac:	f000 fb12 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 80240b0:	4603      	mov	r3, r0
 80240b2:	2b00      	cmp	r3, #0
 80240b4:	d001      	beq.n	80240ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80240b6:	2302      	movs	r3, #2
 80240b8:	e104      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80240ba:	68fb      	ldr	r3, [r7, #12]
 80240bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80240c0:	2b01      	cmp	r3, #1
 80240c2:	d101      	bne.n	80240c8 <HAL_I2C_IsDeviceReady+0x50>
 80240c4:	2302      	movs	r3, #2
 80240c6:	e0fd      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
 80240c8:	68fb      	ldr	r3, [r7, #12]
 80240ca:	2201      	movs	r2, #1
 80240cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80240d0:	68fb      	ldr	r3, [r7, #12]
 80240d2:	681b      	ldr	r3, [r3, #0]
 80240d4:	681b      	ldr	r3, [r3, #0]
 80240d6:	f003 0301 	and.w	r3, r3, #1
 80240da:	2b01      	cmp	r3, #1
 80240dc:	d007      	beq.n	80240ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80240de:	68fb      	ldr	r3, [r7, #12]
 80240e0:	681b      	ldr	r3, [r3, #0]
 80240e2:	681a      	ldr	r2, [r3, #0]
 80240e4:	68fb      	ldr	r3, [r7, #12]
 80240e6:	681b      	ldr	r3, [r3, #0]
 80240e8:	f042 0201 	orr.w	r2, r2, #1
 80240ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80240ee:	68fb      	ldr	r3, [r7, #12]
 80240f0:	681b      	ldr	r3, [r3, #0]
 80240f2:	681a      	ldr	r2, [r3, #0]
 80240f4:	68fb      	ldr	r3, [r7, #12]
 80240f6:	681b      	ldr	r3, [r3, #0]
 80240f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80240fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80240fe:	68fb      	ldr	r3, [r7, #12]
 8024100:	2224      	movs	r2, #36	; 0x24
 8024102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8024106:	68fb      	ldr	r3, [r7, #12]
 8024108:	2200      	movs	r2, #0
 802410a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802410c:	68fb      	ldr	r3, [r7, #12]
 802410e:	4a70      	ldr	r2, [pc, #448]	; (80242d0 <HAL_I2C_IsDeviceReady+0x258>)
 8024110:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8024112:	68fb      	ldr	r3, [r7, #12]
 8024114:	681b      	ldr	r3, [r3, #0]
 8024116:	681a      	ldr	r2, [r3, #0]
 8024118:	68fb      	ldr	r3, [r7, #12]
 802411a:	681b      	ldr	r3, [r3, #0]
 802411c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024120:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8024122:	69fb      	ldr	r3, [r7, #28]
 8024124:	9300      	str	r3, [sp, #0]
 8024126:	683b      	ldr	r3, [r7, #0]
 8024128:	2200      	movs	r2, #0
 802412a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 802412e:	68f8      	ldr	r0, [r7, #12]
 8024130:	f000 fad0 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8024134:	4603      	mov	r3, r0
 8024136:	2b00      	cmp	r3, #0
 8024138:	d00d      	beq.n	8024156 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802413a:	68fb      	ldr	r3, [r7, #12]
 802413c:	681b      	ldr	r3, [r3, #0]
 802413e:	681b      	ldr	r3, [r3, #0]
 8024140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024148:	d103      	bne.n	8024152 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 802414a:	68fb      	ldr	r3, [r7, #12]
 802414c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024150:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8024152:	2303      	movs	r3, #3
 8024154:	e0b6      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8024156:	897b      	ldrh	r3, [r7, #10]
 8024158:	b2db      	uxtb	r3, r3
 802415a:	461a      	mov	r2, r3
 802415c:	68fb      	ldr	r3, [r7, #12]
 802415e:	681b      	ldr	r3, [r3, #0]
 8024160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8024164:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8024166:	f7fd fcff 	bl	8021b68 <HAL_GetTick>
 802416a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 802416c:	68fb      	ldr	r3, [r7, #12]
 802416e:	681b      	ldr	r3, [r3, #0]
 8024170:	695b      	ldr	r3, [r3, #20]
 8024172:	f003 0302 	and.w	r3, r3, #2
 8024176:	2b02      	cmp	r3, #2
 8024178:	bf0c      	ite	eq
 802417a:	2301      	moveq	r3, #1
 802417c:	2300      	movne	r3, #0
 802417e:	b2db      	uxtb	r3, r3
 8024180:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8024182:	68fb      	ldr	r3, [r7, #12]
 8024184:	681b      	ldr	r3, [r3, #0]
 8024186:	695b      	ldr	r3, [r3, #20]
 8024188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024190:	bf0c      	ite	eq
 8024192:	2301      	moveq	r3, #1
 8024194:	2300      	movne	r3, #0
 8024196:	b2db      	uxtb	r3, r3
 8024198:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 802419a:	e025      	b.n	80241e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802419c:	f7fd fce4 	bl	8021b68 <HAL_GetTick>
 80241a0:	4602      	mov	r2, r0
 80241a2:	69fb      	ldr	r3, [r7, #28]
 80241a4:	1ad3      	subs	r3, r2, r3
 80241a6:	683a      	ldr	r2, [r7, #0]
 80241a8:	429a      	cmp	r2, r3
 80241aa:	d302      	bcc.n	80241b2 <HAL_I2C_IsDeviceReady+0x13a>
 80241ac:	683b      	ldr	r3, [r7, #0]
 80241ae:	2b00      	cmp	r3, #0
 80241b0:	d103      	bne.n	80241ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80241b2:	68fb      	ldr	r3, [r7, #12]
 80241b4:	22a0      	movs	r2, #160	; 0xa0
 80241b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80241ba:	68fb      	ldr	r3, [r7, #12]
 80241bc:	681b      	ldr	r3, [r3, #0]
 80241be:	695b      	ldr	r3, [r3, #20]
 80241c0:	f003 0302 	and.w	r3, r3, #2
 80241c4:	2b02      	cmp	r3, #2
 80241c6:	bf0c      	ite	eq
 80241c8:	2301      	moveq	r3, #1
 80241ca:	2300      	movne	r3, #0
 80241cc:	b2db      	uxtb	r3, r3
 80241ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80241d0:	68fb      	ldr	r3, [r7, #12]
 80241d2:	681b      	ldr	r3, [r3, #0]
 80241d4:	695b      	ldr	r3, [r3, #20]
 80241d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80241da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80241de:	bf0c      	ite	eq
 80241e0:	2301      	moveq	r3, #1
 80241e2:	2300      	movne	r3, #0
 80241e4:	b2db      	uxtb	r3, r3
 80241e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80241e8:	68fb      	ldr	r3, [r7, #12]
 80241ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80241ee:	b2db      	uxtb	r3, r3
 80241f0:	2ba0      	cmp	r3, #160	; 0xa0
 80241f2:	d005      	beq.n	8024200 <HAL_I2C_IsDeviceReady+0x188>
 80241f4:	7dfb      	ldrb	r3, [r7, #23]
 80241f6:	2b00      	cmp	r3, #0
 80241f8:	d102      	bne.n	8024200 <HAL_I2C_IsDeviceReady+0x188>
 80241fa:	7dbb      	ldrb	r3, [r7, #22]
 80241fc:	2b00      	cmp	r3, #0
 80241fe:	d0cd      	beq.n	802419c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8024200:	68fb      	ldr	r3, [r7, #12]
 8024202:	2220      	movs	r2, #32
 8024204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8024208:	68fb      	ldr	r3, [r7, #12]
 802420a:	681b      	ldr	r3, [r3, #0]
 802420c:	695b      	ldr	r3, [r3, #20]
 802420e:	f003 0302 	and.w	r3, r3, #2
 8024212:	2b02      	cmp	r3, #2
 8024214:	d129      	bne.n	802426a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8024216:	68fb      	ldr	r3, [r7, #12]
 8024218:	681b      	ldr	r3, [r3, #0]
 802421a:	681a      	ldr	r2, [r3, #0]
 802421c:	68fb      	ldr	r3, [r7, #12]
 802421e:	681b      	ldr	r3, [r3, #0]
 8024220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024224:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8024226:	2300      	movs	r3, #0
 8024228:	613b      	str	r3, [r7, #16]
 802422a:	68fb      	ldr	r3, [r7, #12]
 802422c:	681b      	ldr	r3, [r3, #0]
 802422e:	695b      	ldr	r3, [r3, #20]
 8024230:	613b      	str	r3, [r7, #16]
 8024232:	68fb      	ldr	r3, [r7, #12]
 8024234:	681b      	ldr	r3, [r3, #0]
 8024236:	699b      	ldr	r3, [r3, #24]
 8024238:	613b      	str	r3, [r7, #16]
 802423a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 802423c:	69fb      	ldr	r3, [r7, #28]
 802423e:	9300      	str	r3, [sp, #0]
 8024240:	2319      	movs	r3, #25
 8024242:	2201      	movs	r2, #1
 8024244:	4921      	ldr	r1, [pc, #132]	; (80242cc <HAL_I2C_IsDeviceReady+0x254>)
 8024246:	68f8      	ldr	r0, [r7, #12]
 8024248:	f000 fa44 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 802424c:	4603      	mov	r3, r0
 802424e:	2b00      	cmp	r3, #0
 8024250:	d001      	beq.n	8024256 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8024252:	2301      	movs	r3, #1
 8024254:	e036      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8024256:	68fb      	ldr	r3, [r7, #12]
 8024258:	2220      	movs	r2, #32
 802425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802425e:	68fb      	ldr	r3, [r7, #12]
 8024260:	2200      	movs	r2, #0
 8024262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8024266:	2300      	movs	r3, #0
 8024268:	e02c      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802426a:	68fb      	ldr	r3, [r7, #12]
 802426c:	681b      	ldr	r3, [r3, #0]
 802426e:	681a      	ldr	r2, [r3, #0]
 8024270:	68fb      	ldr	r3, [r7, #12]
 8024272:	681b      	ldr	r3, [r3, #0]
 8024274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024278:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802427a:	68fb      	ldr	r3, [r7, #12]
 802427c:	681b      	ldr	r3, [r3, #0]
 802427e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8024282:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8024284:	69fb      	ldr	r3, [r7, #28]
 8024286:	9300      	str	r3, [sp, #0]
 8024288:	2319      	movs	r3, #25
 802428a:	2201      	movs	r2, #1
 802428c:	490f      	ldr	r1, [pc, #60]	; (80242cc <HAL_I2C_IsDeviceReady+0x254>)
 802428e:	68f8      	ldr	r0, [r7, #12]
 8024290:	f000 fa20 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8024294:	4603      	mov	r3, r0
 8024296:	2b00      	cmp	r3, #0
 8024298:	d001      	beq.n	802429e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 802429a:	2301      	movs	r3, #1
 802429c:	e012      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 802429e:	69bb      	ldr	r3, [r7, #24]
 80242a0:	3301      	adds	r3, #1
 80242a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80242a4:	69ba      	ldr	r2, [r7, #24]
 80242a6:	687b      	ldr	r3, [r7, #4]
 80242a8:	429a      	cmp	r2, r3
 80242aa:	f4ff af32 	bcc.w	8024112 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80242ae:	68fb      	ldr	r3, [r7, #12]
 80242b0:	2220      	movs	r2, #32
 80242b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80242b6:	68fb      	ldr	r3, [r7, #12]
 80242b8:	2200      	movs	r2, #0
 80242ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80242be:	2301      	movs	r3, #1
 80242c0:	e000      	b.n	80242c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80242c2:	2302      	movs	r3, #2
  }
}
 80242c4:	4618      	mov	r0, r3
 80242c6:	3720      	adds	r7, #32
 80242c8:	46bd      	mov	sp, r7
 80242ca:	bd80      	pop	{r7, pc}
 80242cc:	00100002 	.word	0x00100002
 80242d0:	ffff0000 	.word	0xffff0000

080242d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80242d4:	b580      	push	{r7, lr}
 80242d6:	b088      	sub	sp, #32
 80242d8:	af02      	add	r7, sp, #8
 80242da:	60f8      	str	r0, [r7, #12]
 80242dc:	607a      	str	r2, [r7, #4]
 80242de:	603b      	str	r3, [r7, #0]
 80242e0:	460b      	mov	r3, r1
 80242e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80242e4:	68fb      	ldr	r3, [r7, #12]
 80242e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80242e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80242ea:	697b      	ldr	r3, [r7, #20]
 80242ec:	2b08      	cmp	r3, #8
 80242ee:	d006      	beq.n	80242fe <I2C_MasterRequestWrite+0x2a>
 80242f0:	697b      	ldr	r3, [r7, #20]
 80242f2:	2b01      	cmp	r3, #1
 80242f4:	d003      	beq.n	80242fe <I2C_MasterRequestWrite+0x2a>
 80242f6:	697b      	ldr	r3, [r7, #20]
 80242f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80242fc:	d108      	bne.n	8024310 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80242fe:	68fb      	ldr	r3, [r7, #12]
 8024300:	681b      	ldr	r3, [r3, #0]
 8024302:	681a      	ldr	r2, [r3, #0]
 8024304:	68fb      	ldr	r3, [r7, #12]
 8024306:	681b      	ldr	r3, [r3, #0]
 8024308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802430c:	601a      	str	r2, [r3, #0]
 802430e:	e00b      	b.n	8024328 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8024310:	68fb      	ldr	r3, [r7, #12]
 8024312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024314:	2b12      	cmp	r3, #18
 8024316:	d107      	bne.n	8024328 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8024318:	68fb      	ldr	r3, [r7, #12]
 802431a:	681b      	ldr	r3, [r3, #0]
 802431c:	681a      	ldr	r2, [r3, #0]
 802431e:	68fb      	ldr	r3, [r7, #12]
 8024320:	681b      	ldr	r3, [r3, #0]
 8024322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024326:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8024328:	683b      	ldr	r3, [r7, #0]
 802432a:	9300      	str	r3, [sp, #0]
 802432c:	687b      	ldr	r3, [r7, #4]
 802432e:	2200      	movs	r2, #0
 8024330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8024334:	68f8      	ldr	r0, [r7, #12]
 8024336:	f000 f9cd 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 802433a:	4603      	mov	r3, r0
 802433c:	2b00      	cmp	r3, #0
 802433e:	d00d      	beq.n	802435c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8024340:	68fb      	ldr	r3, [r7, #12]
 8024342:	681b      	ldr	r3, [r3, #0]
 8024344:	681b      	ldr	r3, [r3, #0]
 8024346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802434a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802434e:	d103      	bne.n	8024358 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8024350:	68fb      	ldr	r3, [r7, #12]
 8024352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8024358:	2303      	movs	r3, #3
 802435a:	e035      	b.n	80243c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802435c:	68fb      	ldr	r3, [r7, #12]
 802435e:	691b      	ldr	r3, [r3, #16]
 8024360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8024364:	d108      	bne.n	8024378 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8024366:	897b      	ldrh	r3, [r7, #10]
 8024368:	b2db      	uxtb	r3, r3
 802436a:	461a      	mov	r2, r3
 802436c:	68fb      	ldr	r3, [r7, #12]
 802436e:	681b      	ldr	r3, [r3, #0]
 8024370:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8024374:	611a      	str	r2, [r3, #16]
 8024376:	e01b      	b.n	80243b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8024378:	897b      	ldrh	r3, [r7, #10]
 802437a:	11db      	asrs	r3, r3, #7
 802437c:	b2db      	uxtb	r3, r3
 802437e:	f003 0306 	and.w	r3, r3, #6
 8024382:	b2db      	uxtb	r3, r3
 8024384:	f063 030f 	orn	r3, r3, #15
 8024388:	b2da      	uxtb	r2, r3
 802438a:	68fb      	ldr	r3, [r7, #12]
 802438c:	681b      	ldr	r3, [r3, #0]
 802438e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8024390:	683b      	ldr	r3, [r7, #0]
 8024392:	687a      	ldr	r2, [r7, #4]
 8024394:	490e      	ldr	r1, [pc, #56]	; (80243d0 <I2C_MasterRequestWrite+0xfc>)
 8024396:	68f8      	ldr	r0, [r7, #12]
 8024398:	f000 f9f3 	bl	8024782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 802439c:	4603      	mov	r3, r0
 802439e:	2b00      	cmp	r3, #0
 80243a0:	d001      	beq.n	80243a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80243a2:	2301      	movs	r3, #1
 80243a4:	e010      	b.n	80243c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80243a6:	897b      	ldrh	r3, [r7, #10]
 80243a8:	b2da      	uxtb	r2, r3
 80243aa:	68fb      	ldr	r3, [r7, #12]
 80243ac:	681b      	ldr	r3, [r3, #0]
 80243ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80243b0:	683b      	ldr	r3, [r7, #0]
 80243b2:	687a      	ldr	r2, [r7, #4]
 80243b4:	4907      	ldr	r1, [pc, #28]	; (80243d4 <I2C_MasterRequestWrite+0x100>)
 80243b6:	68f8      	ldr	r0, [r7, #12]
 80243b8:	f000 f9e3 	bl	8024782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80243bc:	4603      	mov	r3, r0
 80243be:	2b00      	cmp	r3, #0
 80243c0:	d001      	beq.n	80243c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80243c2:	2301      	movs	r3, #1
 80243c4:	e000      	b.n	80243c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80243c6:	2300      	movs	r3, #0
}
 80243c8:	4618      	mov	r0, r3
 80243ca:	3718      	adds	r7, #24
 80243cc:	46bd      	mov	sp, r7
 80243ce:	bd80      	pop	{r7, pc}
 80243d0:	00010008 	.word	0x00010008
 80243d4:	00010002 	.word	0x00010002

080243d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80243d8:	b580      	push	{r7, lr}
 80243da:	b088      	sub	sp, #32
 80243dc:	af02      	add	r7, sp, #8
 80243de:	60f8      	str	r0, [r7, #12]
 80243e0:	4608      	mov	r0, r1
 80243e2:	4611      	mov	r1, r2
 80243e4:	461a      	mov	r2, r3
 80243e6:	4603      	mov	r3, r0
 80243e8:	817b      	strh	r3, [r7, #10]
 80243ea:	460b      	mov	r3, r1
 80243ec:	813b      	strh	r3, [r7, #8]
 80243ee:	4613      	mov	r3, r2
 80243f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80243f2:	68fb      	ldr	r3, [r7, #12]
 80243f4:	681b      	ldr	r3, [r3, #0]
 80243f6:	681a      	ldr	r2, [r3, #0]
 80243f8:	68fb      	ldr	r3, [r7, #12]
 80243fa:	681b      	ldr	r3, [r3, #0]
 80243fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8024402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024404:	9300      	str	r3, [sp, #0]
 8024406:	6a3b      	ldr	r3, [r7, #32]
 8024408:	2200      	movs	r2, #0
 802440a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 802440e:	68f8      	ldr	r0, [r7, #12]
 8024410:	f000 f960 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8024414:	4603      	mov	r3, r0
 8024416:	2b00      	cmp	r3, #0
 8024418:	d00d      	beq.n	8024436 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802441a:	68fb      	ldr	r3, [r7, #12]
 802441c:	681b      	ldr	r3, [r3, #0]
 802441e:	681b      	ldr	r3, [r3, #0]
 8024420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024428:	d103      	bne.n	8024432 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 802442a:	68fb      	ldr	r3, [r7, #12]
 802442c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024430:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8024432:	2303      	movs	r3, #3
 8024434:	e05f      	b.n	80244f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8024436:	897b      	ldrh	r3, [r7, #10]
 8024438:	b2db      	uxtb	r3, r3
 802443a:	461a      	mov	r2, r3
 802443c:	68fb      	ldr	r3, [r7, #12]
 802443e:	681b      	ldr	r3, [r3, #0]
 8024440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8024444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8024446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024448:	6a3a      	ldr	r2, [r7, #32]
 802444a:	492d      	ldr	r1, [pc, #180]	; (8024500 <I2C_RequestMemoryWrite+0x128>)
 802444c:	68f8      	ldr	r0, [r7, #12]
 802444e:	f000 f998 	bl	8024782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8024452:	4603      	mov	r3, r0
 8024454:	2b00      	cmp	r3, #0
 8024456:	d001      	beq.n	802445c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8024458:	2301      	movs	r3, #1
 802445a:	e04c      	b.n	80244f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802445c:	2300      	movs	r3, #0
 802445e:	617b      	str	r3, [r7, #20]
 8024460:	68fb      	ldr	r3, [r7, #12]
 8024462:	681b      	ldr	r3, [r3, #0]
 8024464:	695b      	ldr	r3, [r3, #20]
 8024466:	617b      	str	r3, [r7, #20]
 8024468:	68fb      	ldr	r3, [r7, #12]
 802446a:	681b      	ldr	r3, [r3, #0]
 802446c:	699b      	ldr	r3, [r3, #24]
 802446e:	617b      	str	r3, [r7, #20]
 8024470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8024472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024474:	6a39      	ldr	r1, [r7, #32]
 8024476:	68f8      	ldr	r0, [r7, #12]
 8024478:	f000 fa02 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 802447c:	4603      	mov	r3, r0
 802447e:	2b00      	cmp	r3, #0
 8024480:	d00d      	beq.n	802449e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8024482:	68fb      	ldr	r3, [r7, #12]
 8024484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024486:	2b04      	cmp	r3, #4
 8024488:	d107      	bne.n	802449a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802448a:	68fb      	ldr	r3, [r7, #12]
 802448c:	681b      	ldr	r3, [r3, #0]
 802448e:	681a      	ldr	r2, [r3, #0]
 8024490:	68fb      	ldr	r3, [r7, #12]
 8024492:	681b      	ldr	r3, [r3, #0]
 8024494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 802449a:	2301      	movs	r3, #1
 802449c:	e02b      	b.n	80244f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 802449e:	88fb      	ldrh	r3, [r7, #6]
 80244a0:	2b01      	cmp	r3, #1
 80244a2:	d105      	bne.n	80244b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80244a4:	893b      	ldrh	r3, [r7, #8]
 80244a6:	b2da      	uxtb	r2, r3
 80244a8:	68fb      	ldr	r3, [r7, #12]
 80244aa:	681b      	ldr	r3, [r3, #0]
 80244ac:	611a      	str	r2, [r3, #16]
 80244ae:	e021      	b.n	80244f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80244b0:	893b      	ldrh	r3, [r7, #8]
 80244b2:	0a1b      	lsrs	r3, r3, #8
 80244b4:	b29b      	uxth	r3, r3
 80244b6:	b2da      	uxtb	r2, r3
 80244b8:	68fb      	ldr	r3, [r7, #12]
 80244ba:	681b      	ldr	r3, [r3, #0]
 80244bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80244be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80244c0:	6a39      	ldr	r1, [r7, #32]
 80244c2:	68f8      	ldr	r0, [r7, #12]
 80244c4:	f000 f9dc 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 80244c8:	4603      	mov	r3, r0
 80244ca:	2b00      	cmp	r3, #0
 80244cc:	d00d      	beq.n	80244ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80244ce:	68fb      	ldr	r3, [r7, #12]
 80244d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80244d2:	2b04      	cmp	r3, #4
 80244d4:	d107      	bne.n	80244e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80244d6:	68fb      	ldr	r3, [r7, #12]
 80244d8:	681b      	ldr	r3, [r3, #0]
 80244da:	681a      	ldr	r2, [r3, #0]
 80244dc:	68fb      	ldr	r3, [r7, #12]
 80244de:	681b      	ldr	r3, [r3, #0]
 80244e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80244e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80244e6:	2301      	movs	r3, #1
 80244e8:	e005      	b.n	80244f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80244ea:	893b      	ldrh	r3, [r7, #8]
 80244ec:	b2da      	uxtb	r2, r3
 80244ee:	68fb      	ldr	r3, [r7, #12]
 80244f0:	681b      	ldr	r3, [r3, #0]
 80244f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80244f4:	2300      	movs	r3, #0
}
 80244f6:	4618      	mov	r0, r3
 80244f8:	3718      	adds	r7, #24
 80244fa:	46bd      	mov	sp, r7
 80244fc:	bd80      	pop	{r7, pc}
 80244fe:	bf00      	nop
 8024500:	00010002 	.word	0x00010002

08024504 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8024504:	b580      	push	{r7, lr}
 8024506:	b088      	sub	sp, #32
 8024508:	af02      	add	r7, sp, #8
 802450a:	60f8      	str	r0, [r7, #12]
 802450c:	4608      	mov	r0, r1
 802450e:	4611      	mov	r1, r2
 8024510:	461a      	mov	r2, r3
 8024512:	4603      	mov	r3, r0
 8024514:	817b      	strh	r3, [r7, #10]
 8024516:	460b      	mov	r3, r1
 8024518:	813b      	strh	r3, [r7, #8]
 802451a:	4613      	mov	r3, r2
 802451c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802451e:	68fb      	ldr	r3, [r7, #12]
 8024520:	681b      	ldr	r3, [r3, #0]
 8024522:	681a      	ldr	r2, [r3, #0]
 8024524:	68fb      	ldr	r3, [r7, #12]
 8024526:	681b      	ldr	r3, [r3, #0]
 8024528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802452c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802452e:	68fb      	ldr	r3, [r7, #12]
 8024530:	681b      	ldr	r3, [r3, #0]
 8024532:	681a      	ldr	r2, [r3, #0]
 8024534:	68fb      	ldr	r3, [r7, #12]
 8024536:	681b      	ldr	r3, [r3, #0]
 8024538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802453c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024540:	9300      	str	r3, [sp, #0]
 8024542:	6a3b      	ldr	r3, [r7, #32]
 8024544:	2200      	movs	r2, #0
 8024546:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 802454a:	68f8      	ldr	r0, [r7, #12]
 802454c:	f000 f8c2 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 8024550:	4603      	mov	r3, r0
 8024552:	2b00      	cmp	r3, #0
 8024554:	d00d      	beq.n	8024572 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8024556:	68fb      	ldr	r3, [r7, #12]
 8024558:	681b      	ldr	r3, [r3, #0]
 802455a:	681b      	ldr	r3, [r3, #0]
 802455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024564:	d103      	bne.n	802456e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8024566:	68fb      	ldr	r3, [r7, #12]
 8024568:	f44f 7200 	mov.w	r2, #512	; 0x200
 802456c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 802456e:	2303      	movs	r3, #3
 8024570:	e0aa      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8024572:	897b      	ldrh	r3, [r7, #10]
 8024574:	b2db      	uxtb	r3, r3
 8024576:	461a      	mov	r2, r3
 8024578:	68fb      	ldr	r3, [r7, #12]
 802457a:	681b      	ldr	r3, [r3, #0]
 802457c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8024580:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8024582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024584:	6a3a      	ldr	r2, [r7, #32]
 8024586:	4952      	ldr	r1, [pc, #328]	; (80246d0 <I2C_RequestMemoryRead+0x1cc>)
 8024588:	68f8      	ldr	r0, [r7, #12]
 802458a:	f000 f8fa 	bl	8024782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 802458e:	4603      	mov	r3, r0
 8024590:	2b00      	cmp	r3, #0
 8024592:	d001      	beq.n	8024598 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8024594:	2301      	movs	r3, #1
 8024596:	e097      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8024598:	2300      	movs	r3, #0
 802459a:	617b      	str	r3, [r7, #20]
 802459c:	68fb      	ldr	r3, [r7, #12]
 802459e:	681b      	ldr	r3, [r3, #0]
 80245a0:	695b      	ldr	r3, [r3, #20]
 80245a2:	617b      	str	r3, [r7, #20]
 80245a4:	68fb      	ldr	r3, [r7, #12]
 80245a6:	681b      	ldr	r3, [r3, #0]
 80245a8:	699b      	ldr	r3, [r3, #24]
 80245aa:	617b      	str	r3, [r7, #20]
 80245ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80245ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80245b0:	6a39      	ldr	r1, [r7, #32]
 80245b2:	68f8      	ldr	r0, [r7, #12]
 80245b4:	f000 f964 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 80245b8:	4603      	mov	r3, r0
 80245ba:	2b00      	cmp	r3, #0
 80245bc:	d00d      	beq.n	80245da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80245be:	68fb      	ldr	r3, [r7, #12]
 80245c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80245c2:	2b04      	cmp	r3, #4
 80245c4:	d107      	bne.n	80245d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80245c6:	68fb      	ldr	r3, [r7, #12]
 80245c8:	681b      	ldr	r3, [r3, #0]
 80245ca:	681a      	ldr	r2, [r3, #0]
 80245cc:	68fb      	ldr	r3, [r7, #12]
 80245ce:	681b      	ldr	r3, [r3, #0]
 80245d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80245d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80245d6:	2301      	movs	r3, #1
 80245d8:	e076      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80245da:	88fb      	ldrh	r3, [r7, #6]
 80245dc:	2b01      	cmp	r3, #1
 80245de:	d105      	bne.n	80245ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80245e0:	893b      	ldrh	r3, [r7, #8]
 80245e2:	b2da      	uxtb	r2, r3
 80245e4:	68fb      	ldr	r3, [r7, #12]
 80245e6:	681b      	ldr	r3, [r3, #0]
 80245e8:	611a      	str	r2, [r3, #16]
 80245ea:	e021      	b.n	8024630 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80245ec:	893b      	ldrh	r3, [r7, #8]
 80245ee:	0a1b      	lsrs	r3, r3, #8
 80245f0:	b29b      	uxth	r3, r3
 80245f2:	b2da      	uxtb	r2, r3
 80245f4:	68fb      	ldr	r3, [r7, #12]
 80245f6:	681b      	ldr	r3, [r3, #0]
 80245f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80245fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80245fc:	6a39      	ldr	r1, [r7, #32]
 80245fe:	68f8      	ldr	r0, [r7, #12]
 8024600:	f000 f93e 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 8024604:	4603      	mov	r3, r0
 8024606:	2b00      	cmp	r3, #0
 8024608:	d00d      	beq.n	8024626 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802460a:	68fb      	ldr	r3, [r7, #12]
 802460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802460e:	2b04      	cmp	r3, #4
 8024610:	d107      	bne.n	8024622 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8024612:	68fb      	ldr	r3, [r7, #12]
 8024614:	681b      	ldr	r3, [r3, #0]
 8024616:	681a      	ldr	r2, [r3, #0]
 8024618:	68fb      	ldr	r3, [r7, #12]
 802461a:	681b      	ldr	r3, [r3, #0]
 802461c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024620:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8024622:	2301      	movs	r3, #1
 8024624:	e050      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8024626:	893b      	ldrh	r3, [r7, #8]
 8024628:	b2da      	uxtb	r2, r3
 802462a:	68fb      	ldr	r3, [r7, #12]
 802462c:	681b      	ldr	r3, [r3, #0]
 802462e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8024630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024632:	6a39      	ldr	r1, [r7, #32]
 8024634:	68f8      	ldr	r0, [r7, #12]
 8024636:	f000 f923 	bl	8024880 <I2C_WaitOnTXEFlagUntilTimeout>
 802463a:	4603      	mov	r3, r0
 802463c:	2b00      	cmp	r3, #0
 802463e:	d00d      	beq.n	802465c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8024640:	68fb      	ldr	r3, [r7, #12]
 8024642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024644:	2b04      	cmp	r3, #4
 8024646:	d107      	bne.n	8024658 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8024648:	68fb      	ldr	r3, [r7, #12]
 802464a:	681b      	ldr	r3, [r3, #0]
 802464c:	681a      	ldr	r2, [r3, #0]
 802464e:	68fb      	ldr	r3, [r7, #12]
 8024650:	681b      	ldr	r3, [r3, #0]
 8024652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024656:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8024658:	2301      	movs	r3, #1
 802465a:	e035      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802465c:	68fb      	ldr	r3, [r7, #12]
 802465e:	681b      	ldr	r3, [r3, #0]
 8024660:	681a      	ldr	r2, [r3, #0]
 8024662:	68fb      	ldr	r3, [r7, #12]
 8024664:	681b      	ldr	r3, [r3, #0]
 8024666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802466a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802466e:	9300      	str	r3, [sp, #0]
 8024670:	6a3b      	ldr	r3, [r7, #32]
 8024672:	2200      	movs	r2, #0
 8024674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8024678:	68f8      	ldr	r0, [r7, #12]
 802467a:	f000 f82b 	bl	80246d4 <I2C_WaitOnFlagUntilTimeout>
 802467e:	4603      	mov	r3, r0
 8024680:	2b00      	cmp	r3, #0
 8024682:	d00d      	beq.n	80246a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8024684:	68fb      	ldr	r3, [r7, #12]
 8024686:	681b      	ldr	r3, [r3, #0]
 8024688:	681b      	ldr	r3, [r3, #0]
 802468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802468e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024692:	d103      	bne.n	802469c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8024694:	68fb      	ldr	r3, [r7, #12]
 8024696:	f44f 7200 	mov.w	r2, #512	; 0x200
 802469a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 802469c:	2303      	movs	r3, #3
 802469e:	e013      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80246a0:	897b      	ldrh	r3, [r7, #10]
 80246a2:	b2db      	uxtb	r3, r3
 80246a4:	f043 0301 	orr.w	r3, r3, #1
 80246a8:	b2da      	uxtb	r2, r3
 80246aa:	68fb      	ldr	r3, [r7, #12]
 80246ac:	681b      	ldr	r3, [r3, #0]
 80246ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80246b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246b2:	6a3a      	ldr	r2, [r7, #32]
 80246b4:	4906      	ldr	r1, [pc, #24]	; (80246d0 <I2C_RequestMemoryRead+0x1cc>)
 80246b6:	68f8      	ldr	r0, [r7, #12]
 80246b8:	f000 f863 	bl	8024782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80246bc:	4603      	mov	r3, r0
 80246be:	2b00      	cmp	r3, #0
 80246c0:	d001      	beq.n	80246c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80246c2:	2301      	movs	r3, #1
 80246c4:	e000      	b.n	80246c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80246c6:	2300      	movs	r3, #0
}
 80246c8:	4618      	mov	r0, r3
 80246ca:	3718      	adds	r7, #24
 80246cc:	46bd      	mov	sp, r7
 80246ce:	bd80      	pop	{r7, pc}
 80246d0:	00010002 	.word	0x00010002

080246d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80246d4:	b580      	push	{r7, lr}
 80246d6:	b084      	sub	sp, #16
 80246d8:	af00      	add	r7, sp, #0
 80246da:	60f8      	str	r0, [r7, #12]
 80246dc:	60b9      	str	r1, [r7, #8]
 80246de:	603b      	str	r3, [r7, #0]
 80246e0:	4613      	mov	r3, r2
 80246e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80246e4:	e025      	b.n	8024732 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80246e6:	683b      	ldr	r3, [r7, #0]
 80246e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80246ec:	d021      	beq.n	8024732 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80246ee:	f7fd fa3b 	bl	8021b68 <HAL_GetTick>
 80246f2:	4602      	mov	r2, r0
 80246f4:	69bb      	ldr	r3, [r7, #24]
 80246f6:	1ad3      	subs	r3, r2, r3
 80246f8:	683a      	ldr	r2, [r7, #0]
 80246fa:	429a      	cmp	r2, r3
 80246fc:	d302      	bcc.n	8024704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80246fe:	683b      	ldr	r3, [r7, #0]
 8024700:	2b00      	cmp	r3, #0
 8024702:	d116      	bne.n	8024732 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8024704:	68fb      	ldr	r3, [r7, #12]
 8024706:	2200      	movs	r2, #0
 8024708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 802470a:	68fb      	ldr	r3, [r7, #12]
 802470c:	2220      	movs	r2, #32
 802470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8024712:	68fb      	ldr	r3, [r7, #12]
 8024714:	2200      	movs	r2, #0
 8024716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802471a:	68fb      	ldr	r3, [r7, #12]
 802471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802471e:	f043 0220 	orr.w	r2, r3, #32
 8024722:	68fb      	ldr	r3, [r7, #12]
 8024724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8024726:	68fb      	ldr	r3, [r7, #12]
 8024728:	2200      	movs	r2, #0
 802472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802472e:	2301      	movs	r3, #1
 8024730:	e023      	b.n	802477a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8024732:	68bb      	ldr	r3, [r7, #8]
 8024734:	0c1b      	lsrs	r3, r3, #16
 8024736:	b2db      	uxtb	r3, r3
 8024738:	2b01      	cmp	r3, #1
 802473a:	d10d      	bne.n	8024758 <I2C_WaitOnFlagUntilTimeout+0x84>
 802473c:	68fb      	ldr	r3, [r7, #12]
 802473e:	681b      	ldr	r3, [r3, #0]
 8024740:	695b      	ldr	r3, [r3, #20]
 8024742:	43da      	mvns	r2, r3
 8024744:	68bb      	ldr	r3, [r7, #8]
 8024746:	4013      	ands	r3, r2
 8024748:	b29b      	uxth	r3, r3
 802474a:	2b00      	cmp	r3, #0
 802474c:	bf0c      	ite	eq
 802474e:	2301      	moveq	r3, #1
 8024750:	2300      	movne	r3, #0
 8024752:	b2db      	uxtb	r3, r3
 8024754:	461a      	mov	r2, r3
 8024756:	e00c      	b.n	8024772 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8024758:	68fb      	ldr	r3, [r7, #12]
 802475a:	681b      	ldr	r3, [r3, #0]
 802475c:	699b      	ldr	r3, [r3, #24]
 802475e:	43da      	mvns	r2, r3
 8024760:	68bb      	ldr	r3, [r7, #8]
 8024762:	4013      	ands	r3, r2
 8024764:	b29b      	uxth	r3, r3
 8024766:	2b00      	cmp	r3, #0
 8024768:	bf0c      	ite	eq
 802476a:	2301      	moveq	r3, #1
 802476c:	2300      	movne	r3, #0
 802476e:	b2db      	uxtb	r3, r3
 8024770:	461a      	mov	r2, r3
 8024772:	79fb      	ldrb	r3, [r7, #7]
 8024774:	429a      	cmp	r2, r3
 8024776:	d0b6      	beq.n	80246e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8024778:	2300      	movs	r3, #0
}
 802477a:	4618      	mov	r0, r3
 802477c:	3710      	adds	r7, #16
 802477e:	46bd      	mov	sp, r7
 8024780:	bd80      	pop	{r7, pc}

08024782 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8024782:	b580      	push	{r7, lr}
 8024784:	b084      	sub	sp, #16
 8024786:	af00      	add	r7, sp, #0
 8024788:	60f8      	str	r0, [r7, #12]
 802478a:	60b9      	str	r1, [r7, #8]
 802478c:	607a      	str	r2, [r7, #4]
 802478e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8024790:	e051      	b.n	8024836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8024792:	68fb      	ldr	r3, [r7, #12]
 8024794:	681b      	ldr	r3, [r3, #0]
 8024796:	695b      	ldr	r3, [r3, #20]
 8024798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802479c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80247a0:	d123      	bne.n	80247ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80247a2:	68fb      	ldr	r3, [r7, #12]
 80247a4:	681b      	ldr	r3, [r3, #0]
 80247a6:	681a      	ldr	r2, [r3, #0]
 80247a8:	68fb      	ldr	r3, [r7, #12]
 80247aa:	681b      	ldr	r3, [r3, #0]
 80247ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80247b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80247b2:	68fb      	ldr	r3, [r7, #12]
 80247b4:	681b      	ldr	r3, [r3, #0]
 80247b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80247ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80247bc:	68fb      	ldr	r3, [r7, #12]
 80247be:	2200      	movs	r2, #0
 80247c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80247c2:	68fb      	ldr	r3, [r7, #12]
 80247c4:	2220      	movs	r2, #32
 80247c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80247ca:	68fb      	ldr	r3, [r7, #12]
 80247cc:	2200      	movs	r2, #0
 80247ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80247d2:	68fb      	ldr	r3, [r7, #12]
 80247d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80247d6:	f043 0204 	orr.w	r2, r3, #4
 80247da:	68fb      	ldr	r3, [r7, #12]
 80247dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80247de:	68fb      	ldr	r3, [r7, #12]
 80247e0:	2200      	movs	r2, #0
 80247e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80247e6:	2301      	movs	r3, #1
 80247e8:	e046      	b.n	8024878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80247ea:	687b      	ldr	r3, [r7, #4]
 80247ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80247f0:	d021      	beq.n	8024836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80247f2:	f7fd f9b9 	bl	8021b68 <HAL_GetTick>
 80247f6:	4602      	mov	r2, r0
 80247f8:	683b      	ldr	r3, [r7, #0]
 80247fa:	1ad3      	subs	r3, r2, r3
 80247fc:	687a      	ldr	r2, [r7, #4]
 80247fe:	429a      	cmp	r2, r3
 8024800:	d302      	bcc.n	8024808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8024802:	687b      	ldr	r3, [r7, #4]
 8024804:	2b00      	cmp	r3, #0
 8024806:	d116      	bne.n	8024836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8024808:	68fb      	ldr	r3, [r7, #12]
 802480a:	2200      	movs	r2, #0
 802480c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802480e:	68fb      	ldr	r3, [r7, #12]
 8024810:	2220      	movs	r2, #32
 8024812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8024816:	68fb      	ldr	r3, [r7, #12]
 8024818:	2200      	movs	r2, #0
 802481a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802481e:	68fb      	ldr	r3, [r7, #12]
 8024820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024822:	f043 0220 	orr.w	r2, r3, #32
 8024826:	68fb      	ldr	r3, [r7, #12]
 8024828:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802482a:	68fb      	ldr	r3, [r7, #12]
 802482c:	2200      	movs	r2, #0
 802482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8024832:	2301      	movs	r3, #1
 8024834:	e020      	b.n	8024878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8024836:	68bb      	ldr	r3, [r7, #8]
 8024838:	0c1b      	lsrs	r3, r3, #16
 802483a:	b2db      	uxtb	r3, r3
 802483c:	2b01      	cmp	r3, #1
 802483e:	d10c      	bne.n	802485a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8024840:	68fb      	ldr	r3, [r7, #12]
 8024842:	681b      	ldr	r3, [r3, #0]
 8024844:	695b      	ldr	r3, [r3, #20]
 8024846:	43da      	mvns	r2, r3
 8024848:	68bb      	ldr	r3, [r7, #8]
 802484a:	4013      	ands	r3, r2
 802484c:	b29b      	uxth	r3, r3
 802484e:	2b00      	cmp	r3, #0
 8024850:	bf14      	ite	ne
 8024852:	2301      	movne	r3, #1
 8024854:	2300      	moveq	r3, #0
 8024856:	b2db      	uxtb	r3, r3
 8024858:	e00b      	b.n	8024872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 802485a:	68fb      	ldr	r3, [r7, #12]
 802485c:	681b      	ldr	r3, [r3, #0]
 802485e:	699b      	ldr	r3, [r3, #24]
 8024860:	43da      	mvns	r2, r3
 8024862:	68bb      	ldr	r3, [r7, #8]
 8024864:	4013      	ands	r3, r2
 8024866:	b29b      	uxth	r3, r3
 8024868:	2b00      	cmp	r3, #0
 802486a:	bf14      	ite	ne
 802486c:	2301      	movne	r3, #1
 802486e:	2300      	moveq	r3, #0
 8024870:	b2db      	uxtb	r3, r3
 8024872:	2b00      	cmp	r3, #0
 8024874:	d18d      	bne.n	8024792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8024876:	2300      	movs	r3, #0
}
 8024878:	4618      	mov	r0, r3
 802487a:	3710      	adds	r7, #16
 802487c:	46bd      	mov	sp, r7
 802487e:	bd80      	pop	{r7, pc}

08024880 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8024880:	b580      	push	{r7, lr}
 8024882:	b084      	sub	sp, #16
 8024884:	af00      	add	r7, sp, #0
 8024886:	60f8      	str	r0, [r7, #12]
 8024888:	60b9      	str	r1, [r7, #8]
 802488a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802488c:	e02d      	b.n	80248ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 802488e:	68f8      	ldr	r0, [r7, #12]
 8024890:	f000 f8ce 	bl	8024a30 <I2C_IsAcknowledgeFailed>
 8024894:	4603      	mov	r3, r0
 8024896:	2b00      	cmp	r3, #0
 8024898:	d001      	beq.n	802489e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 802489a:	2301      	movs	r3, #1
 802489c:	e02d      	b.n	80248fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802489e:	68bb      	ldr	r3, [r7, #8]
 80248a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80248a4:	d021      	beq.n	80248ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80248a6:	f7fd f95f 	bl	8021b68 <HAL_GetTick>
 80248aa:	4602      	mov	r2, r0
 80248ac:	687b      	ldr	r3, [r7, #4]
 80248ae:	1ad3      	subs	r3, r2, r3
 80248b0:	68ba      	ldr	r2, [r7, #8]
 80248b2:	429a      	cmp	r2, r3
 80248b4:	d302      	bcc.n	80248bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80248b6:	68bb      	ldr	r3, [r7, #8]
 80248b8:	2b00      	cmp	r3, #0
 80248ba:	d116      	bne.n	80248ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80248bc:	68fb      	ldr	r3, [r7, #12]
 80248be:	2200      	movs	r2, #0
 80248c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80248c2:	68fb      	ldr	r3, [r7, #12]
 80248c4:	2220      	movs	r2, #32
 80248c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80248ca:	68fb      	ldr	r3, [r7, #12]
 80248cc:	2200      	movs	r2, #0
 80248ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80248d2:	68fb      	ldr	r3, [r7, #12]
 80248d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80248d6:	f043 0220 	orr.w	r2, r3, #32
 80248da:	68fb      	ldr	r3, [r7, #12]
 80248dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80248de:	68fb      	ldr	r3, [r7, #12]
 80248e0:	2200      	movs	r2, #0
 80248e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80248e6:	2301      	movs	r3, #1
 80248e8:	e007      	b.n	80248fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80248ea:	68fb      	ldr	r3, [r7, #12]
 80248ec:	681b      	ldr	r3, [r3, #0]
 80248ee:	695b      	ldr	r3, [r3, #20]
 80248f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80248f4:	2b80      	cmp	r3, #128	; 0x80
 80248f6:	d1ca      	bne.n	802488e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80248f8:	2300      	movs	r3, #0
}
 80248fa:	4618      	mov	r0, r3
 80248fc:	3710      	adds	r7, #16
 80248fe:	46bd      	mov	sp, r7
 8024900:	bd80      	pop	{r7, pc}

08024902 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8024902:	b580      	push	{r7, lr}
 8024904:	b084      	sub	sp, #16
 8024906:	af00      	add	r7, sp, #0
 8024908:	60f8      	str	r0, [r7, #12]
 802490a:	60b9      	str	r1, [r7, #8]
 802490c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 802490e:	e02d      	b.n	802496c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8024910:	68f8      	ldr	r0, [r7, #12]
 8024912:	f000 f88d 	bl	8024a30 <I2C_IsAcknowledgeFailed>
 8024916:	4603      	mov	r3, r0
 8024918:	2b00      	cmp	r3, #0
 802491a:	d001      	beq.n	8024920 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 802491c:	2301      	movs	r3, #1
 802491e:	e02d      	b.n	802497c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8024920:	68bb      	ldr	r3, [r7, #8]
 8024922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024926:	d021      	beq.n	802496c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8024928:	f7fd f91e 	bl	8021b68 <HAL_GetTick>
 802492c:	4602      	mov	r2, r0
 802492e:	687b      	ldr	r3, [r7, #4]
 8024930:	1ad3      	subs	r3, r2, r3
 8024932:	68ba      	ldr	r2, [r7, #8]
 8024934:	429a      	cmp	r2, r3
 8024936:	d302      	bcc.n	802493e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8024938:	68bb      	ldr	r3, [r7, #8]
 802493a:	2b00      	cmp	r3, #0
 802493c:	d116      	bne.n	802496c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 802493e:	68fb      	ldr	r3, [r7, #12]
 8024940:	2200      	movs	r2, #0
 8024942:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8024944:	68fb      	ldr	r3, [r7, #12]
 8024946:	2220      	movs	r2, #32
 8024948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802494c:	68fb      	ldr	r3, [r7, #12]
 802494e:	2200      	movs	r2, #0
 8024950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8024954:	68fb      	ldr	r3, [r7, #12]
 8024956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024958:	f043 0220 	orr.w	r2, r3, #32
 802495c:	68fb      	ldr	r3, [r7, #12]
 802495e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8024960:	68fb      	ldr	r3, [r7, #12]
 8024962:	2200      	movs	r2, #0
 8024964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8024968:	2301      	movs	r3, #1
 802496a:	e007      	b.n	802497c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 802496c:	68fb      	ldr	r3, [r7, #12]
 802496e:	681b      	ldr	r3, [r3, #0]
 8024970:	695b      	ldr	r3, [r3, #20]
 8024972:	f003 0304 	and.w	r3, r3, #4
 8024976:	2b04      	cmp	r3, #4
 8024978:	d1ca      	bne.n	8024910 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 802497a:	2300      	movs	r3, #0
}
 802497c:	4618      	mov	r0, r3
 802497e:	3710      	adds	r7, #16
 8024980:	46bd      	mov	sp, r7
 8024982:	bd80      	pop	{r7, pc}

08024984 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8024984:	b580      	push	{r7, lr}
 8024986:	b084      	sub	sp, #16
 8024988:	af00      	add	r7, sp, #0
 802498a:	60f8      	str	r0, [r7, #12]
 802498c:	60b9      	str	r1, [r7, #8]
 802498e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8024990:	e042      	b.n	8024a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8024992:	68fb      	ldr	r3, [r7, #12]
 8024994:	681b      	ldr	r3, [r3, #0]
 8024996:	695b      	ldr	r3, [r3, #20]
 8024998:	f003 0310 	and.w	r3, r3, #16
 802499c:	2b10      	cmp	r3, #16
 802499e:	d119      	bne.n	80249d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80249a0:	68fb      	ldr	r3, [r7, #12]
 80249a2:	681b      	ldr	r3, [r3, #0]
 80249a4:	f06f 0210 	mvn.w	r2, #16
 80249a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80249aa:	68fb      	ldr	r3, [r7, #12]
 80249ac:	2200      	movs	r2, #0
 80249ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80249b0:	68fb      	ldr	r3, [r7, #12]
 80249b2:	2220      	movs	r2, #32
 80249b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80249b8:	68fb      	ldr	r3, [r7, #12]
 80249ba:	2200      	movs	r2, #0
 80249bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80249c0:	68fb      	ldr	r3, [r7, #12]
 80249c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80249c4:	68fb      	ldr	r3, [r7, #12]
 80249c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80249c8:	68fb      	ldr	r3, [r7, #12]
 80249ca:	2200      	movs	r2, #0
 80249cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80249d0:	2301      	movs	r3, #1
 80249d2:	e029      	b.n	8024a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80249d4:	f7fd f8c8 	bl	8021b68 <HAL_GetTick>
 80249d8:	4602      	mov	r2, r0
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	1ad3      	subs	r3, r2, r3
 80249de:	68ba      	ldr	r2, [r7, #8]
 80249e0:	429a      	cmp	r2, r3
 80249e2:	d302      	bcc.n	80249ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80249e4:	68bb      	ldr	r3, [r7, #8]
 80249e6:	2b00      	cmp	r3, #0
 80249e8:	d116      	bne.n	8024a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80249ea:	68fb      	ldr	r3, [r7, #12]
 80249ec:	2200      	movs	r2, #0
 80249ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80249f0:	68fb      	ldr	r3, [r7, #12]
 80249f2:	2220      	movs	r2, #32
 80249f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80249f8:	68fb      	ldr	r3, [r7, #12]
 80249fa:	2200      	movs	r2, #0
 80249fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8024a00:	68fb      	ldr	r3, [r7, #12]
 8024a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a04:	f043 0220 	orr.w	r2, r3, #32
 8024a08:	68fb      	ldr	r3, [r7, #12]
 8024a0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8024a0c:	68fb      	ldr	r3, [r7, #12]
 8024a0e:	2200      	movs	r2, #0
 8024a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8024a14:	2301      	movs	r3, #1
 8024a16:	e007      	b.n	8024a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8024a18:	68fb      	ldr	r3, [r7, #12]
 8024a1a:	681b      	ldr	r3, [r3, #0]
 8024a1c:	695b      	ldr	r3, [r3, #20]
 8024a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024a22:	2b40      	cmp	r3, #64	; 0x40
 8024a24:	d1b5      	bne.n	8024992 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8024a26:	2300      	movs	r3, #0
}
 8024a28:	4618      	mov	r0, r3
 8024a2a:	3710      	adds	r7, #16
 8024a2c:	46bd      	mov	sp, r7
 8024a2e:	bd80      	pop	{r7, pc}

08024a30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8024a30:	b480      	push	{r7}
 8024a32:	b083      	sub	sp, #12
 8024a34:	af00      	add	r7, sp, #0
 8024a36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8024a38:	687b      	ldr	r3, [r7, #4]
 8024a3a:	681b      	ldr	r3, [r3, #0]
 8024a3c:	695b      	ldr	r3, [r3, #20]
 8024a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024a46:	d11b      	bne.n	8024a80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8024a48:	687b      	ldr	r3, [r7, #4]
 8024a4a:	681b      	ldr	r3, [r3, #0]
 8024a4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8024a50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8024a52:	687b      	ldr	r3, [r7, #4]
 8024a54:	2200      	movs	r2, #0
 8024a56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8024a58:	687b      	ldr	r3, [r7, #4]
 8024a5a:	2220      	movs	r2, #32
 8024a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8024a60:	687b      	ldr	r3, [r7, #4]
 8024a62:	2200      	movs	r2, #0
 8024a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8024a68:	687b      	ldr	r3, [r7, #4]
 8024a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a6c:	f043 0204 	orr.w	r2, r3, #4
 8024a70:	687b      	ldr	r3, [r7, #4]
 8024a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8024a74:	687b      	ldr	r3, [r7, #4]
 8024a76:	2200      	movs	r2, #0
 8024a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8024a7c:	2301      	movs	r3, #1
 8024a7e:	e000      	b.n	8024a82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8024a80:	2300      	movs	r3, #0
}
 8024a82:	4618      	mov	r0, r3
 8024a84:	370c      	adds	r7, #12
 8024a86:	46bd      	mov	sp, r7
 8024a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a8c:	4770      	bx	lr
	...

08024a90 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8024a90:	b580      	push	{r7, lr}
 8024a92:	b088      	sub	sp, #32
 8024a94:	af00      	add	r7, sp, #0
 8024a96:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8024a98:	687b      	ldr	r3, [r7, #4]
 8024a9a:	2b00      	cmp	r3, #0
 8024a9c:	d101      	bne.n	8024aa2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8024a9e:	2301      	movs	r3, #1
 8024aa0:	e128      	b.n	8024cf4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8024aa2:	687b      	ldr	r3, [r7, #4]
 8024aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8024aa8:	b2db      	uxtb	r3, r3
 8024aaa:	2b00      	cmp	r3, #0
 8024aac:	d109      	bne.n	8024ac2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8024aae:	687b      	ldr	r3, [r7, #4]
 8024ab0:	2200      	movs	r2, #0
 8024ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8024ab6:	687b      	ldr	r3, [r7, #4]
 8024ab8:	4a90      	ldr	r2, [pc, #576]	; (8024cfc <HAL_I2S_Init+0x26c>)
 8024aba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8024abc:	6878      	ldr	r0, [r7, #4]
 8024abe:	f7fc fb53 	bl	8021168 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8024ac2:	687b      	ldr	r3, [r7, #4]
 8024ac4:	2202      	movs	r2, #2
 8024ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8024aca:	687b      	ldr	r3, [r7, #4]
 8024acc:	681b      	ldr	r3, [r3, #0]
 8024ace:	69db      	ldr	r3, [r3, #28]
 8024ad0:	687a      	ldr	r2, [r7, #4]
 8024ad2:	6812      	ldr	r2, [r2, #0]
 8024ad4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8024ad8:	f023 030f 	bic.w	r3, r3, #15
 8024adc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8024ade:	687b      	ldr	r3, [r7, #4]
 8024ae0:	681b      	ldr	r3, [r3, #0]
 8024ae2:	2202      	movs	r2, #2
 8024ae4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8024ae6:	687b      	ldr	r3, [r7, #4]
 8024ae8:	695b      	ldr	r3, [r3, #20]
 8024aea:	2b02      	cmp	r3, #2
 8024aec:	d060      	beq.n	8024bb0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8024aee:	687b      	ldr	r3, [r7, #4]
 8024af0:	68db      	ldr	r3, [r3, #12]
 8024af2:	2b00      	cmp	r3, #0
 8024af4:	d102      	bne.n	8024afc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8024af6:	2310      	movs	r3, #16
 8024af8:	617b      	str	r3, [r7, #20]
 8024afa:	e001      	b.n	8024b00 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8024afc:	2320      	movs	r3, #32
 8024afe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8024b00:	687b      	ldr	r3, [r7, #4]
 8024b02:	689b      	ldr	r3, [r3, #8]
 8024b04:	2b20      	cmp	r3, #32
 8024b06:	d802      	bhi.n	8024b0e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8024b08:	697b      	ldr	r3, [r7, #20]
 8024b0a:	005b      	lsls	r3, r3, #1
 8024b0c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8024b0e:	2001      	movs	r0, #1
 8024b10:	f002 fdec 	bl	80276ec <HAL_RCCEx_GetPeriphCLKFreq>
 8024b14:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8024b16:	687b      	ldr	r3, [r7, #4]
 8024b18:	691b      	ldr	r3, [r3, #16]
 8024b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024b1e:	d125      	bne.n	8024b6c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8024b20:	687b      	ldr	r3, [r7, #4]
 8024b22:	68db      	ldr	r3, [r3, #12]
 8024b24:	2b00      	cmp	r3, #0
 8024b26:	d010      	beq.n	8024b4a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8024b28:	697b      	ldr	r3, [r7, #20]
 8024b2a:	009b      	lsls	r3, r3, #2
 8024b2c:	68fa      	ldr	r2, [r7, #12]
 8024b2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8024b32:	4613      	mov	r3, r2
 8024b34:	009b      	lsls	r3, r3, #2
 8024b36:	4413      	add	r3, r2
 8024b38:	005b      	lsls	r3, r3, #1
 8024b3a:	461a      	mov	r2, r3
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	695b      	ldr	r3, [r3, #20]
 8024b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8024b44:	3305      	adds	r3, #5
 8024b46:	613b      	str	r3, [r7, #16]
 8024b48:	e01f      	b.n	8024b8a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8024b4a:	697b      	ldr	r3, [r7, #20]
 8024b4c:	00db      	lsls	r3, r3, #3
 8024b4e:	68fa      	ldr	r2, [r7, #12]
 8024b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8024b54:	4613      	mov	r3, r2
 8024b56:	009b      	lsls	r3, r3, #2
 8024b58:	4413      	add	r3, r2
 8024b5a:	005b      	lsls	r3, r3, #1
 8024b5c:	461a      	mov	r2, r3
 8024b5e:	687b      	ldr	r3, [r7, #4]
 8024b60:	695b      	ldr	r3, [r3, #20]
 8024b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8024b66:	3305      	adds	r3, #5
 8024b68:	613b      	str	r3, [r7, #16]
 8024b6a:	e00e      	b.n	8024b8a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8024b6c:	68fa      	ldr	r2, [r7, #12]
 8024b6e:	697b      	ldr	r3, [r7, #20]
 8024b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8024b74:	4613      	mov	r3, r2
 8024b76:	009b      	lsls	r3, r3, #2
 8024b78:	4413      	add	r3, r2
 8024b7a:	005b      	lsls	r3, r3, #1
 8024b7c:	461a      	mov	r2, r3
 8024b7e:	687b      	ldr	r3, [r7, #4]
 8024b80:	695b      	ldr	r3, [r3, #20]
 8024b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8024b86:	3305      	adds	r3, #5
 8024b88:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8024b8a:	693b      	ldr	r3, [r7, #16]
 8024b8c:	4a5c      	ldr	r2, [pc, #368]	; (8024d00 <HAL_I2S_Init+0x270>)
 8024b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8024b92:	08db      	lsrs	r3, r3, #3
 8024b94:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8024b96:	693b      	ldr	r3, [r7, #16]
 8024b98:	f003 0301 	and.w	r3, r3, #1
 8024b9c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8024b9e:	693a      	ldr	r2, [r7, #16]
 8024ba0:	69bb      	ldr	r3, [r7, #24]
 8024ba2:	1ad3      	subs	r3, r2, r3
 8024ba4:	085b      	lsrs	r3, r3, #1
 8024ba6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8024ba8:	69bb      	ldr	r3, [r7, #24]
 8024baa:	021b      	lsls	r3, r3, #8
 8024bac:	61bb      	str	r3, [r7, #24]
 8024bae:	e003      	b.n	8024bb8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8024bb0:	2302      	movs	r3, #2
 8024bb2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8024bb4:	2300      	movs	r3, #0
 8024bb6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8024bb8:	69fb      	ldr	r3, [r7, #28]
 8024bba:	2b01      	cmp	r3, #1
 8024bbc:	d902      	bls.n	8024bc4 <HAL_I2S_Init+0x134>
 8024bbe:	69fb      	ldr	r3, [r7, #28]
 8024bc0:	2bff      	cmp	r3, #255	; 0xff
 8024bc2:	d907      	bls.n	8024bd4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8024bc4:	687b      	ldr	r3, [r7, #4]
 8024bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024bc8:	f043 0210 	orr.w	r2, r3, #16
 8024bcc:	687b      	ldr	r3, [r7, #4]
 8024bce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8024bd0:	2301      	movs	r3, #1
 8024bd2:	e08f      	b.n	8024cf4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8024bd4:	687b      	ldr	r3, [r7, #4]
 8024bd6:	691a      	ldr	r2, [r3, #16]
 8024bd8:	69bb      	ldr	r3, [r7, #24]
 8024bda:	ea42 0103 	orr.w	r1, r2, r3
 8024bde:	687b      	ldr	r3, [r7, #4]
 8024be0:	681b      	ldr	r3, [r3, #0]
 8024be2:	69fa      	ldr	r2, [r7, #28]
 8024be4:	430a      	orrs	r2, r1
 8024be6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8024be8:	687b      	ldr	r3, [r7, #4]
 8024bea:	681b      	ldr	r3, [r3, #0]
 8024bec:	69db      	ldr	r3, [r3, #28]
 8024bee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8024bf2:	f023 030f 	bic.w	r3, r3, #15
 8024bf6:	687a      	ldr	r2, [r7, #4]
 8024bf8:	6851      	ldr	r1, [r2, #4]
 8024bfa:	687a      	ldr	r2, [r7, #4]
 8024bfc:	6892      	ldr	r2, [r2, #8]
 8024bfe:	4311      	orrs	r1, r2
 8024c00:	687a      	ldr	r2, [r7, #4]
 8024c02:	68d2      	ldr	r2, [r2, #12]
 8024c04:	4311      	orrs	r1, r2
 8024c06:	687a      	ldr	r2, [r7, #4]
 8024c08:	6992      	ldr	r2, [r2, #24]
 8024c0a:	430a      	orrs	r2, r1
 8024c0c:	431a      	orrs	r2, r3
 8024c0e:	687b      	ldr	r3, [r7, #4]
 8024c10:	681b      	ldr	r3, [r3, #0]
 8024c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8024c16:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8024c18:	687b      	ldr	r3, [r7, #4]
 8024c1a:	6a1b      	ldr	r3, [r3, #32]
 8024c1c:	2b01      	cmp	r3, #1
 8024c1e:	d161      	bne.n	8024ce4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8024c20:	687b      	ldr	r3, [r7, #4]
 8024c22:	4a38      	ldr	r2, [pc, #224]	; (8024d04 <HAL_I2S_Init+0x274>)
 8024c24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8024c26:	687b      	ldr	r3, [r7, #4]
 8024c28:	681b      	ldr	r3, [r3, #0]
 8024c2a:	4a37      	ldr	r2, [pc, #220]	; (8024d08 <HAL_I2S_Init+0x278>)
 8024c2c:	4293      	cmp	r3, r2
 8024c2e:	d101      	bne.n	8024c34 <HAL_I2S_Init+0x1a4>
 8024c30:	4b36      	ldr	r3, [pc, #216]	; (8024d0c <HAL_I2S_Init+0x27c>)
 8024c32:	e001      	b.n	8024c38 <HAL_I2S_Init+0x1a8>
 8024c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8024c38:	69db      	ldr	r3, [r3, #28]
 8024c3a:	687a      	ldr	r2, [r7, #4]
 8024c3c:	6812      	ldr	r2, [r2, #0]
 8024c3e:	4932      	ldr	r1, [pc, #200]	; (8024d08 <HAL_I2S_Init+0x278>)
 8024c40:	428a      	cmp	r2, r1
 8024c42:	d101      	bne.n	8024c48 <HAL_I2S_Init+0x1b8>
 8024c44:	4a31      	ldr	r2, [pc, #196]	; (8024d0c <HAL_I2S_Init+0x27c>)
 8024c46:	e001      	b.n	8024c4c <HAL_I2S_Init+0x1bc>
 8024c48:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8024c4c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8024c50:	f023 030f 	bic.w	r3, r3, #15
 8024c54:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8024c56:	687b      	ldr	r3, [r7, #4]
 8024c58:	681b      	ldr	r3, [r3, #0]
 8024c5a:	4a2b      	ldr	r2, [pc, #172]	; (8024d08 <HAL_I2S_Init+0x278>)
 8024c5c:	4293      	cmp	r3, r2
 8024c5e:	d101      	bne.n	8024c64 <HAL_I2S_Init+0x1d4>
 8024c60:	4b2a      	ldr	r3, [pc, #168]	; (8024d0c <HAL_I2S_Init+0x27c>)
 8024c62:	e001      	b.n	8024c68 <HAL_I2S_Init+0x1d8>
 8024c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8024c68:	2202      	movs	r2, #2
 8024c6a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8024c6c:	687b      	ldr	r3, [r7, #4]
 8024c6e:	681b      	ldr	r3, [r3, #0]
 8024c70:	4a25      	ldr	r2, [pc, #148]	; (8024d08 <HAL_I2S_Init+0x278>)
 8024c72:	4293      	cmp	r3, r2
 8024c74:	d101      	bne.n	8024c7a <HAL_I2S_Init+0x1ea>
 8024c76:	4b25      	ldr	r3, [pc, #148]	; (8024d0c <HAL_I2S_Init+0x27c>)
 8024c78:	e001      	b.n	8024c7e <HAL_I2S_Init+0x1ee>
 8024c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8024c7e:	69db      	ldr	r3, [r3, #28]
 8024c80:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8024c82:	687b      	ldr	r3, [r7, #4]
 8024c84:	685b      	ldr	r3, [r3, #4]
 8024c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024c8a:	d003      	beq.n	8024c94 <HAL_I2S_Init+0x204>
 8024c8c:	687b      	ldr	r3, [r7, #4]
 8024c8e:	685b      	ldr	r3, [r3, #4]
 8024c90:	2b00      	cmp	r3, #0
 8024c92:	d103      	bne.n	8024c9c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8024c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8024c98:	613b      	str	r3, [r7, #16]
 8024c9a:	e001      	b.n	8024ca0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8024c9c:	2300      	movs	r3, #0
 8024c9e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8024ca0:	693b      	ldr	r3, [r7, #16]
 8024ca2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8024ca4:	687b      	ldr	r3, [r7, #4]
 8024ca6:	689b      	ldr	r3, [r3, #8]
 8024ca8:	b299      	uxth	r1, r3
 8024caa:	687b      	ldr	r3, [r7, #4]
 8024cac:	68db      	ldr	r3, [r3, #12]
 8024cae:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8024cb0:	687b      	ldr	r3, [r7, #4]
 8024cb2:	699b      	ldr	r3, [r3, #24]
 8024cb4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8024cb6:	4303      	orrs	r3, r0
 8024cb8:	b29b      	uxth	r3, r3
 8024cba:	430b      	orrs	r3, r1
 8024cbc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8024cbe:	4313      	orrs	r3, r2
 8024cc0:	b29a      	uxth	r2, r3
 8024cc2:	897b      	ldrh	r3, [r7, #10]
 8024cc4:	4313      	orrs	r3, r2
 8024cc6:	b29b      	uxth	r3, r3
 8024cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8024ccc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8024cce:	687b      	ldr	r3, [r7, #4]
 8024cd0:	681b      	ldr	r3, [r3, #0]
 8024cd2:	4a0d      	ldr	r2, [pc, #52]	; (8024d08 <HAL_I2S_Init+0x278>)
 8024cd4:	4293      	cmp	r3, r2
 8024cd6:	d101      	bne.n	8024cdc <HAL_I2S_Init+0x24c>
 8024cd8:	4b0c      	ldr	r3, [pc, #48]	; (8024d0c <HAL_I2S_Init+0x27c>)
 8024cda:	e001      	b.n	8024ce0 <HAL_I2S_Init+0x250>
 8024cdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8024ce0:	897a      	ldrh	r2, [r7, #10]
 8024ce2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8024ce4:	687b      	ldr	r3, [r7, #4]
 8024ce6:	2200      	movs	r2, #0
 8024ce8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8024cea:	687b      	ldr	r3, [r7, #4]
 8024cec:	2201      	movs	r2, #1
 8024cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8024cf2:	2300      	movs	r3, #0
}
 8024cf4:	4618      	mov	r0, r3
 8024cf6:	3720      	adds	r7, #32
 8024cf8:	46bd      	mov	sp, r7
 8024cfa:	bd80      	pop	{r7, pc}
 8024cfc:	08024e07 	.word	0x08024e07
 8024d00:	cccccccd 	.word	0xcccccccd
 8024d04:	08025231 	.word	0x08025231
 8024d08:	40003800 	.word	0x40003800
 8024d0c:	40003400 	.word	0x40003400

08024d10 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8024d10:	b480      	push	{r7}
 8024d12:	b083      	sub	sp, #12
 8024d14:	af00      	add	r7, sp, #0
 8024d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8024d18:	bf00      	nop
 8024d1a:	370c      	adds	r7, #12
 8024d1c:	46bd      	mov	sp, r7
 8024d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d22:	4770      	bx	lr

08024d24 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8024d24:	b480      	push	{r7}
 8024d26:	b083      	sub	sp, #12
 8024d28:	af00      	add	r7, sp, #0
 8024d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8024d2c:	bf00      	nop
 8024d2e:	370c      	adds	r7, #12
 8024d30:	46bd      	mov	sp, r7
 8024d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d36:	4770      	bx	lr

08024d38 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8024d38:	b480      	push	{r7}
 8024d3a:	b083      	sub	sp, #12
 8024d3c:	af00      	add	r7, sp, #0
 8024d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8024d40:	bf00      	nop
 8024d42:	370c      	adds	r7, #12
 8024d44:	46bd      	mov	sp, r7
 8024d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d4a:	4770      	bx	lr

08024d4c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8024d4c:	b580      	push	{r7, lr}
 8024d4e:	b082      	sub	sp, #8
 8024d50:	af00      	add	r7, sp, #0
 8024d52:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8024d54:	687b      	ldr	r3, [r7, #4]
 8024d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024d58:	881a      	ldrh	r2, [r3, #0]
 8024d5a:	687b      	ldr	r3, [r7, #4]
 8024d5c:	681b      	ldr	r3, [r3, #0]
 8024d5e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8024d60:	687b      	ldr	r3, [r7, #4]
 8024d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024d64:	1c9a      	adds	r2, r3, #2
 8024d66:	687b      	ldr	r3, [r7, #4]
 8024d68:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8024d6e:	b29b      	uxth	r3, r3
 8024d70:	3b01      	subs	r3, #1
 8024d72:	b29a      	uxth	r2, r3
 8024d74:	687b      	ldr	r3, [r7, #4]
 8024d76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8024d78:	687b      	ldr	r3, [r7, #4]
 8024d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8024d7c:	b29b      	uxth	r3, r3
 8024d7e:	2b00      	cmp	r3, #0
 8024d80:	d10e      	bne.n	8024da0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8024d82:	687b      	ldr	r3, [r7, #4]
 8024d84:	681b      	ldr	r3, [r3, #0]
 8024d86:	685a      	ldr	r2, [r3, #4]
 8024d88:	687b      	ldr	r3, [r7, #4]
 8024d8a:	681b      	ldr	r3, [r3, #0]
 8024d8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8024d90:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8024d92:	687b      	ldr	r3, [r7, #4]
 8024d94:	2201      	movs	r2, #1
 8024d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8024d9a:	6878      	ldr	r0, [r7, #4]
 8024d9c:	f7ff ffb8 	bl	8024d10 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8024da0:	bf00      	nop
 8024da2:	3708      	adds	r7, #8
 8024da4:	46bd      	mov	sp, r7
 8024da6:	bd80      	pop	{r7, pc}

08024da8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8024da8:	b580      	push	{r7, lr}
 8024daa:	b082      	sub	sp, #8
 8024dac:	af00      	add	r7, sp, #0
 8024dae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8024db0:	687b      	ldr	r3, [r7, #4]
 8024db2:	681b      	ldr	r3, [r3, #0]
 8024db4:	68da      	ldr	r2, [r3, #12]
 8024db6:	687b      	ldr	r3, [r7, #4]
 8024db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024dba:	b292      	uxth	r2, r2
 8024dbc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8024dbe:	687b      	ldr	r3, [r7, #4]
 8024dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024dc2:	1c9a      	adds	r2, r3, #2
 8024dc4:	687b      	ldr	r3, [r7, #4]
 8024dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8024dc8:	687b      	ldr	r3, [r7, #4]
 8024dca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8024dcc:	b29b      	uxth	r3, r3
 8024dce:	3b01      	subs	r3, #1
 8024dd0:	b29a      	uxth	r2, r3
 8024dd2:	687b      	ldr	r3, [r7, #4]
 8024dd4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8024dd6:	687b      	ldr	r3, [r7, #4]
 8024dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8024dda:	b29b      	uxth	r3, r3
 8024ddc:	2b00      	cmp	r3, #0
 8024dde:	d10e      	bne.n	8024dfe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	681b      	ldr	r3, [r3, #0]
 8024de4:	685a      	ldr	r2, [r3, #4]
 8024de6:	687b      	ldr	r3, [r7, #4]
 8024de8:	681b      	ldr	r3, [r3, #0]
 8024dea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8024dee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8024df0:	687b      	ldr	r3, [r7, #4]
 8024df2:	2201      	movs	r2, #1
 8024df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8024df8:	6878      	ldr	r0, [r7, #4]
 8024dfa:	f7ff ff93 	bl	8024d24 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8024dfe:	bf00      	nop
 8024e00:	3708      	adds	r7, #8
 8024e02:	46bd      	mov	sp, r7
 8024e04:	bd80      	pop	{r7, pc}

08024e06 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8024e06:	b580      	push	{r7, lr}
 8024e08:	b086      	sub	sp, #24
 8024e0a:	af00      	add	r7, sp, #0
 8024e0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8024e0e:	687b      	ldr	r3, [r7, #4]
 8024e10:	681b      	ldr	r3, [r3, #0]
 8024e12:	689b      	ldr	r3, [r3, #8]
 8024e14:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8024e16:	687b      	ldr	r3, [r7, #4]
 8024e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8024e1c:	b2db      	uxtb	r3, r3
 8024e1e:	2b04      	cmp	r3, #4
 8024e20:	d13a      	bne.n	8024e98 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8024e22:	697b      	ldr	r3, [r7, #20]
 8024e24:	f003 0301 	and.w	r3, r3, #1
 8024e28:	2b01      	cmp	r3, #1
 8024e2a:	d109      	bne.n	8024e40 <I2S_IRQHandler+0x3a>
 8024e2c:	687b      	ldr	r3, [r7, #4]
 8024e2e:	681b      	ldr	r3, [r3, #0]
 8024e30:	685b      	ldr	r3, [r3, #4]
 8024e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024e36:	2b40      	cmp	r3, #64	; 0x40
 8024e38:	d102      	bne.n	8024e40 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8024e3a:	6878      	ldr	r0, [r7, #4]
 8024e3c:	f7ff ffb4 	bl	8024da8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8024e40:	697b      	ldr	r3, [r7, #20]
 8024e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024e46:	2b40      	cmp	r3, #64	; 0x40
 8024e48:	d126      	bne.n	8024e98 <I2S_IRQHandler+0x92>
 8024e4a:	687b      	ldr	r3, [r7, #4]
 8024e4c:	681b      	ldr	r3, [r3, #0]
 8024e4e:	685b      	ldr	r3, [r3, #4]
 8024e50:	f003 0320 	and.w	r3, r3, #32
 8024e54:	2b20      	cmp	r3, #32
 8024e56:	d11f      	bne.n	8024e98 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8024e58:	687b      	ldr	r3, [r7, #4]
 8024e5a:	681b      	ldr	r3, [r3, #0]
 8024e5c:	685a      	ldr	r2, [r3, #4]
 8024e5e:	687b      	ldr	r3, [r7, #4]
 8024e60:	681b      	ldr	r3, [r3, #0]
 8024e62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8024e66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8024e68:	2300      	movs	r3, #0
 8024e6a:	613b      	str	r3, [r7, #16]
 8024e6c:	687b      	ldr	r3, [r7, #4]
 8024e6e:	681b      	ldr	r3, [r3, #0]
 8024e70:	68db      	ldr	r3, [r3, #12]
 8024e72:	613b      	str	r3, [r7, #16]
 8024e74:	687b      	ldr	r3, [r7, #4]
 8024e76:	681b      	ldr	r3, [r3, #0]
 8024e78:	689b      	ldr	r3, [r3, #8]
 8024e7a:	613b      	str	r3, [r7, #16]
 8024e7c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8024e7e:	687b      	ldr	r3, [r7, #4]
 8024e80:	2201      	movs	r2, #1
 8024e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8024e86:	687b      	ldr	r3, [r7, #4]
 8024e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024e8a:	f043 0202 	orr.w	r2, r3, #2
 8024e8e:	687b      	ldr	r3, [r7, #4]
 8024e90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8024e92:	6878      	ldr	r0, [r7, #4]
 8024e94:	f7ff ff50 	bl	8024d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8024e98:	687b      	ldr	r3, [r7, #4]
 8024e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8024e9e:	b2db      	uxtb	r3, r3
 8024ea0:	2b03      	cmp	r3, #3
 8024ea2:	d136      	bne.n	8024f12 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8024ea4:	697b      	ldr	r3, [r7, #20]
 8024ea6:	f003 0302 	and.w	r3, r3, #2
 8024eaa:	2b02      	cmp	r3, #2
 8024eac:	d109      	bne.n	8024ec2 <I2S_IRQHandler+0xbc>
 8024eae:	687b      	ldr	r3, [r7, #4]
 8024eb0:	681b      	ldr	r3, [r3, #0]
 8024eb2:	685b      	ldr	r3, [r3, #4]
 8024eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024eb8:	2b80      	cmp	r3, #128	; 0x80
 8024eba:	d102      	bne.n	8024ec2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8024ebc:	6878      	ldr	r0, [r7, #4]
 8024ebe:	f7ff ff45 	bl	8024d4c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8024ec2:	697b      	ldr	r3, [r7, #20]
 8024ec4:	f003 0308 	and.w	r3, r3, #8
 8024ec8:	2b08      	cmp	r3, #8
 8024eca:	d122      	bne.n	8024f12 <I2S_IRQHandler+0x10c>
 8024ecc:	687b      	ldr	r3, [r7, #4]
 8024ece:	681b      	ldr	r3, [r3, #0]
 8024ed0:	685b      	ldr	r3, [r3, #4]
 8024ed2:	f003 0320 	and.w	r3, r3, #32
 8024ed6:	2b20      	cmp	r3, #32
 8024ed8:	d11b      	bne.n	8024f12 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8024eda:	687b      	ldr	r3, [r7, #4]
 8024edc:	681b      	ldr	r3, [r3, #0]
 8024ede:	685a      	ldr	r2, [r3, #4]
 8024ee0:	687b      	ldr	r3, [r7, #4]
 8024ee2:	681b      	ldr	r3, [r3, #0]
 8024ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8024ee8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8024eea:	2300      	movs	r3, #0
 8024eec:	60fb      	str	r3, [r7, #12]
 8024eee:	687b      	ldr	r3, [r7, #4]
 8024ef0:	681b      	ldr	r3, [r3, #0]
 8024ef2:	689b      	ldr	r3, [r3, #8]
 8024ef4:	60fb      	str	r3, [r7, #12]
 8024ef6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8024ef8:	687b      	ldr	r3, [r7, #4]
 8024efa:	2201      	movs	r2, #1
 8024efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8024f00:	687b      	ldr	r3, [r7, #4]
 8024f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024f04:	f043 0204 	orr.w	r2, r3, #4
 8024f08:	687b      	ldr	r3, [r7, #4]
 8024f0a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8024f0c:	6878      	ldr	r0, [r7, #4]
 8024f0e:	f7ff ff13 	bl	8024d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8024f12:	bf00      	nop
 8024f14:	3718      	adds	r7, #24
 8024f16:	46bd      	mov	sp, r7
 8024f18:	bd80      	pop	{r7, pc}
	...

08024f1c <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8024f1c:	b580      	push	{r7, lr}
 8024f1e:	b088      	sub	sp, #32
 8024f20:	af00      	add	r7, sp, #0
 8024f22:	60f8      	str	r0, [r7, #12]
 8024f24:	60b9      	str	r1, [r7, #8]
 8024f26:	607a      	str	r2, [r7, #4]
 8024f28:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8024f2a:	2300      	movs	r3, #0
 8024f2c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8024f2e:	2300      	movs	r3, #0
 8024f30:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8024f32:	2300      	movs	r3, #0
 8024f34:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8024f36:	68fb      	ldr	r3, [r7, #12]
 8024f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8024f3c:	b2db      	uxtb	r3, r3
 8024f3e:	2b01      	cmp	r3, #1
 8024f40:	d002      	beq.n	8024f48 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8024f42:	2302      	movs	r3, #2
 8024f44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8024f46:	e160      	b.n	802520a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8024f48:	68bb      	ldr	r3, [r7, #8]
 8024f4a:	2b00      	cmp	r3, #0
 8024f4c:	d005      	beq.n	8024f5a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8024f4e:	687b      	ldr	r3, [r7, #4]
 8024f50:	2b00      	cmp	r3, #0
 8024f52:	d002      	beq.n	8024f5a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8024f54:	887b      	ldrh	r3, [r7, #2]
 8024f56:	2b00      	cmp	r3, #0
 8024f58:	d101      	bne.n	8024f5e <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8024f5a:	2301      	movs	r3, #1
 8024f5c:	e15a      	b.n	8025214 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8024f5e:	68fb      	ldr	r3, [r7, #12]
 8024f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8024f64:	b2db      	uxtb	r3, r3
 8024f66:	2b01      	cmp	r3, #1
 8024f68:	d101      	bne.n	8024f6e <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8024f6a:	2302      	movs	r3, #2
 8024f6c:	e152      	b.n	8025214 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8024f6e:	68fb      	ldr	r3, [r7, #12]
 8024f70:	2201      	movs	r2, #1
 8024f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8024f76:	68ba      	ldr	r2, [r7, #8]
 8024f78:	68fb      	ldr	r3, [r7, #12]
 8024f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8024f7c:	687a      	ldr	r2, [r7, #4]
 8024f7e:	68fb      	ldr	r3, [r7, #12]
 8024f80:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8024f82:	68fb      	ldr	r3, [r7, #12]
 8024f84:	681b      	ldr	r3, [r3, #0]
 8024f86:	69db      	ldr	r3, [r3, #28]
 8024f88:	f003 0307 	and.w	r3, r3, #7
 8024f8c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8024f8e:	697b      	ldr	r3, [r7, #20]
 8024f90:	2b03      	cmp	r3, #3
 8024f92:	d002      	beq.n	8024f9a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8024f94:	697b      	ldr	r3, [r7, #20]
 8024f96:	2b05      	cmp	r3, #5
 8024f98:	d114      	bne.n	8024fc4 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8024f9a:	887b      	ldrh	r3, [r7, #2]
 8024f9c:	005b      	lsls	r3, r3, #1
 8024f9e:	b29a      	uxth	r2, r3
 8024fa0:	68fb      	ldr	r3, [r7, #12]
 8024fa2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8024fa4:	887b      	ldrh	r3, [r7, #2]
 8024fa6:	005b      	lsls	r3, r3, #1
 8024fa8:	b29a      	uxth	r2, r3
 8024faa:	68fb      	ldr	r3, [r7, #12]
 8024fac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8024fae:	887b      	ldrh	r3, [r7, #2]
 8024fb0:	005b      	lsls	r3, r3, #1
 8024fb2:	b29a      	uxth	r2, r3
 8024fb4:	68fb      	ldr	r3, [r7, #12]
 8024fb6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8024fb8:	887b      	ldrh	r3, [r7, #2]
 8024fba:	005b      	lsls	r3, r3, #1
 8024fbc:	b29a      	uxth	r2, r3
 8024fbe:	68fb      	ldr	r3, [r7, #12]
 8024fc0:	865a      	strh	r2, [r3, #50]	; 0x32
 8024fc2:	e00b      	b.n	8024fdc <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8024fc4:	68fb      	ldr	r3, [r7, #12]
 8024fc6:	887a      	ldrh	r2, [r7, #2]
 8024fc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8024fca:	68fb      	ldr	r3, [r7, #12]
 8024fcc:	887a      	ldrh	r2, [r7, #2]
 8024fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8024fd0:	68fb      	ldr	r3, [r7, #12]
 8024fd2:	887a      	ldrh	r2, [r7, #2]
 8024fd4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8024fd6:	68fb      	ldr	r3, [r7, #12]
 8024fd8:	887a      	ldrh	r2, [r7, #2]
 8024fda:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8024fdc:	68fb      	ldr	r3, [r7, #12]
 8024fde:	2200      	movs	r2, #0
 8024fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8024fe2:	68fb      	ldr	r3, [r7, #12]
 8024fe4:	2205      	movs	r2, #5
 8024fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8024fea:	68fb      	ldr	r3, [r7, #12]
 8024fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024fee:	4a8b      	ldr	r2, [pc, #556]	; (802521c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8024ff0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8024ff2:	68fb      	ldr	r3, [r7, #12]
 8024ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024ff6:	4a8a      	ldr	r2, [pc, #552]	; (8025220 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8024ff8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8024ffa:	68fb      	ldr	r3, [r7, #12]
 8024ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024ffe:	4a89      	ldr	r2, [pc, #548]	; (8025224 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8025000:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8025002:	68fb      	ldr	r3, [r7, #12]
 8025004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025006:	4a85      	ldr	r2, [pc, #532]	; (802521c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8025008:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 802500a:	68fb      	ldr	r3, [r7, #12]
 802500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802500e:	4a84      	ldr	r2, [pc, #528]	; (8025220 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8025010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8025012:	68fb      	ldr	r3, [r7, #12]
 8025014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025016:	4a83      	ldr	r2, [pc, #524]	; (8025224 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8025018:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 802501a:	68fb      	ldr	r3, [r7, #12]
 802501c:	681b      	ldr	r3, [r3, #0]
 802501e:	69db      	ldr	r3, [r3, #28]
 8025020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025024:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8025026:	697b      	ldr	r3, [r7, #20]
 8025028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802502c:	d002      	beq.n	8025034 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 802502e:	697b      	ldr	r3, [r7, #20]
 8025030:	2b00      	cmp	r3, #0
 8025032:	d16b      	bne.n	802510c <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8025034:	1d3b      	adds	r3, r7, #4
 8025036:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8025038:	68fb      	ldr	r3, [r7, #12]
 802503a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 802503c:	68fb      	ldr	r3, [r7, #12]
 802503e:	681b      	ldr	r3, [r3, #0]
 8025040:	4a79      	ldr	r2, [pc, #484]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8025042:	4293      	cmp	r3, r2
 8025044:	d101      	bne.n	802504a <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8025046:	4b79      	ldr	r3, [pc, #484]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8025048:	e001      	b.n	802504e <HAL_I2SEx_TransmitReceive_DMA+0x132>
 802504a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802504e:	330c      	adds	r3, #12
 8025050:	4619      	mov	r1, r3
 8025052:	69bb      	ldr	r3, [r7, #24]
 8025054:	681a      	ldr	r2, [r3, #0]
 8025056:	68fb      	ldr	r3, [r7, #12]
 8025058:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 802505a:	b29b      	uxth	r3, r3
 802505c:	f7fd fafe 	bl	802265c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8025060:	68fb      	ldr	r3, [r7, #12]
 8025062:	681b      	ldr	r3, [r3, #0]
 8025064:	4a70      	ldr	r2, [pc, #448]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8025066:	4293      	cmp	r3, r2
 8025068:	d101      	bne.n	802506e <HAL_I2SEx_TransmitReceive_DMA+0x152>
 802506a:	4b70      	ldr	r3, [pc, #448]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 802506c:	e001      	b.n	8025072 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 802506e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025072:	685a      	ldr	r2, [r3, #4]
 8025074:	68fb      	ldr	r3, [r7, #12]
 8025076:	681b      	ldr	r3, [r3, #0]
 8025078:	496b      	ldr	r1, [pc, #428]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 802507a:	428b      	cmp	r3, r1
 802507c:	d101      	bne.n	8025082 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 802507e:	4b6b      	ldr	r3, [pc, #428]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8025080:	e001      	b.n	8025086 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8025082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025086:	f042 0201 	orr.w	r2, r2, #1
 802508a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 802508c:	f107 0308 	add.w	r3, r7, #8
 8025090:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8025092:	68fb      	ldr	r3, [r7, #12]
 8025094:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8025096:	69bb      	ldr	r3, [r7, #24]
 8025098:	6819      	ldr	r1, [r3, #0]
 802509a:	68fb      	ldr	r3, [r7, #12]
 802509c:	681b      	ldr	r3, [r3, #0]
 802509e:	330c      	adds	r3, #12
 80250a0:	461a      	mov	r2, r3
 80250a2:	68fb      	ldr	r3, [r7, #12]
 80250a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80250a6:	b29b      	uxth	r3, r3
 80250a8:	f7fd fad8 	bl	802265c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80250ac:	68fb      	ldr	r3, [r7, #12]
 80250ae:	681b      	ldr	r3, [r3, #0]
 80250b0:	685a      	ldr	r2, [r3, #4]
 80250b2:	68fb      	ldr	r3, [r7, #12]
 80250b4:	681b      	ldr	r3, [r3, #0]
 80250b6:	f042 0202 	orr.w	r2, r2, #2
 80250ba:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80250bc:	68fb      	ldr	r3, [r7, #12]
 80250be:	681b      	ldr	r3, [r3, #0]
 80250c0:	69db      	ldr	r3, [r3, #28]
 80250c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80250c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80250ca:	f000 809e 	beq.w	802520a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80250ce:	68fb      	ldr	r3, [r7, #12]
 80250d0:	681b      	ldr	r3, [r3, #0]
 80250d2:	4a55      	ldr	r2, [pc, #340]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80250d4:	4293      	cmp	r3, r2
 80250d6:	d101      	bne.n	80250dc <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80250d8:	4b54      	ldr	r3, [pc, #336]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80250da:	e001      	b.n	80250e0 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80250dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80250e0:	69da      	ldr	r2, [r3, #28]
 80250e2:	68fb      	ldr	r3, [r7, #12]
 80250e4:	681b      	ldr	r3, [r3, #0]
 80250e6:	4950      	ldr	r1, [pc, #320]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80250e8:	428b      	cmp	r3, r1
 80250ea:	d101      	bne.n	80250f0 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80250ec:	4b4f      	ldr	r3, [pc, #316]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80250ee:	e001      	b.n	80250f4 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80250f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80250f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80250f8:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80250fa:	68fb      	ldr	r3, [r7, #12]
 80250fc:	681b      	ldr	r3, [r3, #0]
 80250fe:	69da      	ldr	r2, [r3, #28]
 8025100:	68fb      	ldr	r3, [r7, #12]
 8025102:	681b      	ldr	r3, [r3, #0]
 8025104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8025108:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 802510a:	e07e      	b.n	802520a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 802510c:	68fb      	ldr	r3, [r7, #12]
 802510e:	681b      	ldr	r3, [r3, #0]
 8025110:	69db      	ldr	r3, [r3, #28]
 8025112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802511a:	d10a      	bne.n	8025132 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 802511c:	2300      	movs	r3, #0
 802511e:	613b      	str	r3, [r7, #16]
 8025120:	68fb      	ldr	r3, [r7, #12]
 8025122:	681b      	ldr	r3, [r3, #0]
 8025124:	68db      	ldr	r3, [r3, #12]
 8025126:	613b      	str	r3, [r7, #16]
 8025128:	68fb      	ldr	r3, [r7, #12]
 802512a:	681b      	ldr	r3, [r3, #0]
 802512c:	689b      	ldr	r3, [r3, #8]
 802512e:	613b      	str	r3, [r7, #16]
 8025130:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8025132:	f107 0308 	add.w	r3, r7, #8
 8025136:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8025138:	68fb      	ldr	r3, [r7, #12]
 802513a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 802513c:	69bb      	ldr	r3, [r7, #24]
 802513e:	6819      	ldr	r1, [r3, #0]
 8025140:	68fb      	ldr	r3, [r7, #12]
 8025142:	681b      	ldr	r3, [r3, #0]
 8025144:	4a38      	ldr	r2, [pc, #224]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8025146:	4293      	cmp	r3, r2
 8025148:	d101      	bne.n	802514e <HAL_I2SEx_TransmitReceive_DMA+0x232>
 802514a:	4b38      	ldr	r3, [pc, #224]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 802514c:	e001      	b.n	8025152 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 802514e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025152:	330c      	adds	r3, #12
 8025154:	461a      	mov	r2, r3
 8025156:	68fb      	ldr	r3, [r7, #12]
 8025158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802515a:	b29b      	uxth	r3, r3
 802515c:	f7fd fa7e 	bl	802265c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8025160:	68fb      	ldr	r3, [r7, #12]
 8025162:	681b      	ldr	r3, [r3, #0]
 8025164:	4a30      	ldr	r2, [pc, #192]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8025166:	4293      	cmp	r3, r2
 8025168:	d101      	bne.n	802516e <HAL_I2SEx_TransmitReceive_DMA+0x252>
 802516a:	4b30      	ldr	r3, [pc, #192]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 802516c:	e001      	b.n	8025172 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 802516e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025172:	685a      	ldr	r2, [r3, #4]
 8025174:	68fb      	ldr	r3, [r7, #12]
 8025176:	681b      	ldr	r3, [r3, #0]
 8025178:	492b      	ldr	r1, [pc, #172]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 802517a:	428b      	cmp	r3, r1
 802517c:	d101      	bne.n	8025182 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 802517e:	4b2b      	ldr	r3, [pc, #172]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8025180:	e001      	b.n	8025186 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8025182:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025186:	f042 0202 	orr.w	r2, r2, #2
 802518a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 802518c:	1d3b      	adds	r3, r7, #4
 802518e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8025190:	68fb      	ldr	r3, [r7, #12]
 8025192:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8025194:	68fb      	ldr	r3, [r7, #12]
 8025196:	681b      	ldr	r3, [r3, #0]
 8025198:	330c      	adds	r3, #12
 802519a:	4619      	mov	r1, r3
 802519c:	69bb      	ldr	r3, [r7, #24]
 802519e:	681a      	ldr	r2, [r3, #0]
 80251a0:	68fb      	ldr	r3, [r7, #12]
 80251a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80251a4:	b29b      	uxth	r3, r3
 80251a6:	f7fd fa59 	bl	802265c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80251aa:	68fb      	ldr	r3, [r7, #12]
 80251ac:	681b      	ldr	r3, [r3, #0]
 80251ae:	685a      	ldr	r2, [r3, #4]
 80251b0:	68fb      	ldr	r3, [r7, #12]
 80251b2:	681b      	ldr	r3, [r3, #0]
 80251b4:	f042 0201 	orr.w	r2, r2, #1
 80251b8:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80251ba:	68fb      	ldr	r3, [r7, #12]
 80251bc:	681b      	ldr	r3, [r3, #0]
 80251be:	69db      	ldr	r3, [r3, #28]
 80251c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80251c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80251c8:	d01e      	beq.n	8025208 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80251ca:	68fb      	ldr	r3, [r7, #12]
 80251cc:	681b      	ldr	r3, [r3, #0]
 80251ce:	4a16      	ldr	r2, [pc, #88]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80251d0:	4293      	cmp	r3, r2
 80251d2:	d101      	bne.n	80251d8 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80251d4:	4b15      	ldr	r3, [pc, #84]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80251d6:	e001      	b.n	80251dc <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80251d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80251dc:	69da      	ldr	r2, [r3, #28]
 80251de:	68fb      	ldr	r3, [r7, #12]
 80251e0:	681b      	ldr	r3, [r3, #0]
 80251e2:	4911      	ldr	r1, [pc, #68]	; (8025228 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80251e4:	428b      	cmp	r3, r1
 80251e6:	d101      	bne.n	80251ec <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80251e8:	4b10      	ldr	r3, [pc, #64]	; (802522c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80251ea:	e001      	b.n	80251f0 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80251ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80251f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80251f4:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80251f6:	68fb      	ldr	r3, [r7, #12]
 80251f8:	681b      	ldr	r3, [r3, #0]
 80251fa:	69da      	ldr	r2, [r3, #28]
 80251fc:	68fb      	ldr	r3, [r7, #12]
 80251fe:	681b      	ldr	r3, [r3, #0]
 8025200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8025204:	61da      	str	r2, [r3, #28]
 8025206:	e000      	b.n	802520a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8025208:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 802520a:	68fb      	ldr	r3, [r7, #12]
 802520c:	2200      	movs	r2, #0
 802520e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8025212:	7ffb      	ldrb	r3, [r7, #31]
}
 8025214:	4618      	mov	r0, r3
 8025216:	3720      	adds	r7, #32
 8025218:	46bd      	mov	sp, r7
 802521a:	bd80      	pop	{r7, pc}
 802521c:	080254ed 	.word	0x080254ed
 8025220:	08025509 	.word	0x08025509
 8025224:	08025639 	.word	0x08025639
 8025228:	40003800 	.word	0x40003800
 802522c:	40003400 	.word	0x40003400

08025230 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8025230:	b580      	push	{r7, lr}
 8025232:	b088      	sub	sp, #32
 8025234:	af00      	add	r7, sp, #0
 8025236:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8025238:	687b      	ldr	r3, [r7, #4]
 802523a:	681b      	ldr	r3, [r3, #0]
 802523c:	689b      	ldr	r3, [r3, #8]
 802523e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8025240:	687b      	ldr	r3, [r7, #4]
 8025242:	681b      	ldr	r3, [r3, #0]
 8025244:	4a92      	ldr	r2, [pc, #584]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8025246:	4293      	cmp	r3, r2
 8025248:	d101      	bne.n	802524e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 802524a:	4b92      	ldr	r3, [pc, #584]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 802524c:	e001      	b.n	8025252 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 802524e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025252:	689b      	ldr	r3, [r3, #8]
 8025254:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8025256:	687b      	ldr	r3, [r7, #4]
 8025258:	681b      	ldr	r3, [r3, #0]
 802525a:	685b      	ldr	r3, [r3, #4]
 802525c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 802525e:	687b      	ldr	r3, [r7, #4]
 8025260:	681b      	ldr	r3, [r3, #0]
 8025262:	4a8b      	ldr	r2, [pc, #556]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8025264:	4293      	cmp	r3, r2
 8025266:	d101      	bne.n	802526c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8025268:	4b8a      	ldr	r3, [pc, #552]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 802526a:	e001      	b.n	8025270 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 802526c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025270:	685b      	ldr	r3, [r3, #4]
 8025272:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8025274:	687b      	ldr	r3, [r7, #4]
 8025276:	685b      	ldr	r3, [r3, #4]
 8025278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802527c:	d004      	beq.n	8025288 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 802527e:	687b      	ldr	r3, [r7, #4]
 8025280:	685b      	ldr	r3, [r3, #4]
 8025282:	2b00      	cmp	r3, #0
 8025284:	f040 8099 	bne.w	80253ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8025288:	69fb      	ldr	r3, [r7, #28]
 802528a:	f003 0302 	and.w	r3, r3, #2
 802528e:	2b02      	cmp	r3, #2
 8025290:	d107      	bne.n	80252a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8025292:	697b      	ldr	r3, [r7, #20]
 8025294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025298:	2b00      	cmp	r3, #0
 802529a:	d002      	beq.n	80252a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 802529c:	6878      	ldr	r0, [r7, #4]
 802529e:	f000 fa0b 	bl	80256b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80252a2:	69bb      	ldr	r3, [r7, #24]
 80252a4:	f003 0301 	and.w	r3, r3, #1
 80252a8:	2b01      	cmp	r3, #1
 80252aa:	d107      	bne.n	80252bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80252ac:	693b      	ldr	r3, [r7, #16]
 80252ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80252b2:	2b00      	cmp	r3, #0
 80252b4:	d002      	beq.n	80252bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80252b6:	6878      	ldr	r0, [r7, #4]
 80252b8:	f000 faae 	bl	8025818 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80252bc:	69bb      	ldr	r3, [r7, #24]
 80252be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80252c2:	2b40      	cmp	r3, #64	; 0x40
 80252c4:	d13a      	bne.n	802533c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80252c6:	693b      	ldr	r3, [r7, #16]
 80252c8:	f003 0320 	and.w	r3, r3, #32
 80252cc:	2b00      	cmp	r3, #0
 80252ce:	d035      	beq.n	802533c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80252d0:	687b      	ldr	r3, [r7, #4]
 80252d2:	681b      	ldr	r3, [r3, #0]
 80252d4:	4a6e      	ldr	r2, [pc, #440]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80252d6:	4293      	cmp	r3, r2
 80252d8:	d101      	bne.n	80252de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80252da:	4b6e      	ldr	r3, [pc, #440]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80252dc:	e001      	b.n	80252e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80252de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80252e2:	685a      	ldr	r2, [r3, #4]
 80252e4:	687b      	ldr	r3, [r7, #4]
 80252e6:	681b      	ldr	r3, [r3, #0]
 80252e8:	4969      	ldr	r1, [pc, #420]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80252ea:	428b      	cmp	r3, r1
 80252ec:	d101      	bne.n	80252f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80252ee:	4b69      	ldr	r3, [pc, #420]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80252f0:	e001      	b.n	80252f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80252f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80252f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80252fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80252fc:	687b      	ldr	r3, [r7, #4]
 80252fe:	681b      	ldr	r3, [r3, #0]
 8025300:	685a      	ldr	r2, [r3, #4]
 8025302:	687b      	ldr	r3, [r7, #4]
 8025304:	681b      	ldr	r3, [r3, #0]
 8025306:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 802530a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 802530c:	2300      	movs	r3, #0
 802530e:	60fb      	str	r3, [r7, #12]
 8025310:	687b      	ldr	r3, [r7, #4]
 8025312:	681b      	ldr	r3, [r3, #0]
 8025314:	68db      	ldr	r3, [r3, #12]
 8025316:	60fb      	str	r3, [r7, #12]
 8025318:	687b      	ldr	r3, [r7, #4]
 802531a:	681b      	ldr	r3, [r3, #0]
 802531c:	689b      	ldr	r3, [r3, #8]
 802531e:	60fb      	str	r3, [r7, #12]
 8025320:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8025322:	687b      	ldr	r3, [r7, #4]
 8025324:	2201      	movs	r2, #1
 8025326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 802532a:	687b      	ldr	r3, [r7, #4]
 802532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802532e:	f043 0202 	orr.w	r2, r3, #2
 8025332:	687b      	ldr	r3, [r7, #4]
 8025334:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8025336:	6878      	ldr	r0, [r7, #4]
 8025338:	f7ff fcfe 	bl	8024d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 802533c:	69fb      	ldr	r3, [r7, #28]
 802533e:	f003 0308 	and.w	r3, r3, #8
 8025342:	2b08      	cmp	r3, #8
 8025344:	f040 80c3 	bne.w	80254ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8025348:	697b      	ldr	r3, [r7, #20]
 802534a:	f003 0320 	and.w	r3, r3, #32
 802534e:	2b00      	cmp	r3, #0
 8025350:	f000 80bd 	beq.w	80254ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8025354:	687b      	ldr	r3, [r7, #4]
 8025356:	681b      	ldr	r3, [r3, #0]
 8025358:	685a      	ldr	r2, [r3, #4]
 802535a:	687b      	ldr	r3, [r7, #4]
 802535c:	681b      	ldr	r3, [r3, #0]
 802535e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8025362:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8025364:	687b      	ldr	r3, [r7, #4]
 8025366:	681b      	ldr	r3, [r3, #0]
 8025368:	4a49      	ldr	r2, [pc, #292]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 802536a:	4293      	cmp	r3, r2
 802536c:	d101      	bne.n	8025372 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 802536e:	4b49      	ldr	r3, [pc, #292]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8025370:	e001      	b.n	8025376 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8025372:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025376:	685a      	ldr	r2, [r3, #4]
 8025378:	687b      	ldr	r3, [r7, #4]
 802537a:	681b      	ldr	r3, [r3, #0]
 802537c:	4944      	ldr	r1, [pc, #272]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 802537e:	428b      	cmp	r3, r1
 8025380:	d101      	bne.n	8025386 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8025382:	4b44      	ldr	r3, [pc, #272]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8025384:	e001      	b.n	802538a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8025386:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802538a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 802538e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8025390:	2300      	movs	r3, #0
 8025392:	60bb      	str	r3, [r7, #8]
 8025394:	687b      	ldr	r3, [r7, #4]
 8025396:	681b      	ldr	r3, [r3, #0]
 8025398:	689b      	ldr	r3, [r3, #8]
 802539a:	60bb      	str	r3, [r7, #8]
 802539c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 802539e:	687b      	ldr	r3, [r7, #4]
 80253a0:	2201      	movs	r2, #1
 80253a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80253a6:	687b      	ldr	r3, [r7, #4]
 80253a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80253aa:	f043 0204 	orr.w	r2, r3, #4
 80253ae:	687b      	ldr	r3, [r7, #4]
 80253b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80253b2:	6878      	ldr	r0, [r7, #4]
 80253b4:	f7ff fcc0 	bl	8024d38 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80253b8:	e089      	b.n	80254ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80253ba:	69bb      	ldr	r3, [r7, #24]
 80253bc:	f003 0302 	and.w	r3, r3, #2
 80253c0:	2b02      	cmp	r3, #2
 80253c2:	d107      	bne.n	80253d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80253c4:	693b      	ldr	r3, [r7, #16]
 80253c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80253ca:	2b00      	cmp	r3, #0
 80253cc:	d002      	beq.n	80253d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80253ce:	6878      	ldr	r0, [r7, #4]
 80253d0:	f000 f9a4 	bl	802571c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80253d4:	69fb      	ldr	r3, [r7, #28]
 80253d6:	f003 0301 	and.w	r3, r3, #1
 80253da:	2b01      	cmp	r3, #1
 80253dc:	d107      	bne.n	80253ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80253de:	697b      	ldr	r3, [r7, #20]
 80253e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80253e4:	2b00      	cmp	r3, #0
 80253e6:	d002      	beq.n	80253ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80253e8:	6878      	ldr	r0, [r7, #4]
 80253ea:	f000 f9e3 	bl	80257b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80253ee:	69fb      	ldr	r3, [r7, #28]
 80253f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80253f4:	2b40      	cmp	r3, #64	; 0x40
 80253f6:	d12f      	bne.n	8025458 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80253f8:	697b      	ldr	r3, [r7, #20]
 80253fa:	f003 0320 	and.w	r3, r3, #32
 80253fe:	2b00      	cmp	r3, #0
 8025400:	d02a      	beq.n	8025458 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8025402:	687b      	ldr	r3, [r7, #4]
 8025404:	681b      	ldr	r3, [r3, #0]
 8025406:	685a      	ldr	r2, [r3, #4]
 8025408:	687b      	ldr	r3, [r7, #4]
 802540a:	681b      	ldr	r3, [r3, #0]
 802540c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8025410:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8025412:	687b      	ldr	r3, [r7, #4]
 8025414:	681b      	ldr	r3, [r3, #0]
 8025416:	4a1e      	ldr	r2, [pc, #120]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8025418:	4293      	cmp	r3, r2
 802541a:	d101      	bne.n	8025420 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 802541c:	4b1d      	ldr	r3, [pc, #116]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 802541e:	e001      	b.n	8025424 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8025420:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025424:	685a      	ldr	r2, [r3, #4]
 8025426:	687b      	ldr	r3, [r7, #4]
 8025428:	681b      	ldr	r3, [r3, #0]
 802542a:	4919      	ldr	r1, [pc, #100]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 802542c:	428b      	cmp	r3, r1
 802542e:	d101      	bne.n	8025434 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8025430:	4b18      	ldr	r3, [pc, #96]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8025432:	e001      	b.n	8025438 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8025434:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025438:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 802543c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 802543e:	687b      	ldr	r3, [r7, #4]
 8025440:	2201      	movs	r2, #1
 8025442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8025446:	687b      	ldr	r3, [r7, #4]
 8025448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802544a:	f043 0202 	orr.w	r2, r3, #2
 802544e:	687b      	ldr	r3, [r7, #4]
 8025450:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8025452:	6878      	ldr	r0, [r7, #4]
 8025454:	f7ff fc70 	bl	8024d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8025458:	69bb      	ldr	r3, [r7, #24]
 802545a:	f003 0308 	and.w	r3, r3, #8
 802545e:	2b08      	cmp	r3, #8
 8025460:	d136      	bne.n	80254d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8025462:	693b      	ldr	r3, [r7, #16]
 8025464:	f003 0320 	and.w	r3, r3, #32
 8025468:	2b00      	cmp	r3, #0
 802546a:	d031      	beq.n	80254d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 802546c:	687b      	ldr	r3, [r7, #4]
 802546e:	681b      	ldr	r3, [r3, #0]
 8025470:	4a07      	ldr	r2, [pc, #28]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8025472:	4293      	cmp	r3, r2
 8025474:	d101      	bne.n	802547a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8025476:	4b07      	ldr	r3, [pc, #28]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8025478:	e001      	b.n	802547e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 802547a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802547e:	685a      	ldr	r2, [r3, #4]
 8025480:	687b      	ldr	r3, [r7, #4]
 8025482:	681b      	ldr	r3, [r3, #0]
 8025484:	4902      	ldr	r1, [pc, #8]	; (8025490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8025486:	428b      	cmp	r3, r1
 8025488:	d106      	bne.n	8025498 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 802548a:	4b02      	ldr	r3, [pc, #8]	; (8025494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 802548c:	e006      	b.n	802549c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 802548e:	bf00      	nop
 8025490:	40003800 	.word	0x40003800
 8025494:	40003400 	.word	0x40003400
 8025498:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802549c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80254a0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80254a2:	687b      	ldr	r3, [r7, #4]
 80254a4:	681b      	ldr	r3, [r3, #0]
 80254a6:	685a      	ldr	r2, [r3, #4]
 80254a8:	687b      	ldr	r3, [r7, #4]
 80254aa:	681b      	ldr	r3, [r3, #0]
 80254ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80254b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	2201      	movs	r2, #1
 80254b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80254ba:	687b      	ldr	r3, [r7, #4]
 80254bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80254be:	f043 0204 	orr.w	r2, r3, #4
 80254c2:	687b      	ldr	r3, [r7, #4]
 80254c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80254c6:	6878      	ldr	r0, [r7, #4]
 80254c8:	f7ff fc36 	bl	8024d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80254cc:	e000      	b.n	80254d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80254ce:	bf00      	nop
}
 80254d0:	bf00      	nop
 80254d2:	3720      	adds	r7, #32
 80254d4:	46bd      	mov	sp, r7
 80254d6:	bd80      	pop	{r7, pc}

080254d8 <HAL_I2SEx_TxRxHalfCpltCallback>:
  * @brief  Tx and Rx Transfer half completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80254d8:	b480      	push	{r7}
 80254da:	b083      	sub	sp, #12
 80254dc:	af00      	add	r7, sp, #0
 80254de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxHalfCpltCallback could be implemented in the user file
   */
}
 80254e0:	bf00      	nop
 80254e2:	370c      	adds	r7, #12
 80254e4:	46bd      	mov	sp, r7
 80254e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254ea:	4770      	bx	lr

080254ec <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80254ec:	b580      	push	{r7, lr}
 80254ee:	b084      	sub	sp, #16
 80254f0:	af00      	add	r7, sp, #0
 80254f2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80254f4:	687b      	ldr	r3, [r7, #4]
 80254f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80254f8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80254fa:	68f8      	ldr	r0, [r7, #12]
 80254fc:	f7ff ffec 	bl	80254d8 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8025500:	bf00      	nop
 8025502:	3710      	adds	r7, #16
 8025504:	46bd      	mov	sp, r7
 8025506:	bd80      	pop	{r7, pc}

08025508 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8025508:	b580      	push	{r7, lr}
 802550a:	b084      	sub	sp, #16
 802550c:	af00      	add	r7, sp, #0
 802550e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8025510:	687b      	ldr	r3, [r7, #4]
 8025512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025514:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8025516:	687b      	ldr	r3, [r7, #4]
 8025518:	69db      	ldr	r3, [r3, #28]
 802551a:	2b00      	cmp	r3, #0
 802551c:	f040 8084 	bne.w	8025628 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8025520:	68fb      	ldr	r3, [r7, #12]
 8025522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025524:	687a      	ldr	r2, [r7, #4]
 8025526:	429a      	cmp	r2, r3
 8025528:	d13c      	bne.n	80255a4 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 802552a:	68fb      	ldr	r3, [r7, #12]
 802552c:	681b      	ldr	r3, [r3, #0]
 802552e:	69db      	ldr	r3, [r3, #28]
 8025530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025538:	d006      	beq.n	8025548 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 802553a:	68fb      	ldr	r3, [r7, #12]
 802553c:	681b      	ldr	r3, [r3, #0]
 802553e:	69db      	ldr	r3, [r3, #28]
 8025540:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8025544:	2b00      	cmp	r3, #0
 8025546:	d116      	bne.n	8025576 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8025548:	68fb      	ldr	r3, [r7, #12]
 802554a:	681b      	ldr	r3, [r3, #0]
 802554c:	4a38      	ldr	r2, [pc, #224]	; (8025630 <I2SEx_TxRxDMACplt+0x128>)
 802554e:	4293      	cmp	r3, r2
 8025550:	d101      	bne.n	8025556 <I2SEx_TxRxDMACplt+0x4e>
 8025552:	4b38      	ldr	r3, [pc, #224]	; (8025634 <I2SEx_TxRxDMACplt+0x12c>)
 8025554:	e001      	b.n	802555a <I2SEx_TxRxDMACplt+0x52>
 8025556:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802555a:	685a      	ldr	r2, [r3, #4]
 802555c:	68fb      	ldr	r3, [r7, #12]
 802555e:	681b      	ldr	r3, [r3, #0]
 8025560:	4933      	ldr	r1, [pc, #204]	; (8025630 <I2SEx_TxRxDMACplt+0x128>)
 8025562:	428b      	cmp	r3, r1
 8025564:	d101      	bne.n	802556a <I2SEx_TxRxDMACplt+0x62>
 8025566:	4b33      	ldr	r3, [pc, #204]	; (8025634 <I2SEx_TxRxDMACplt+0x12c>)
 8025568:	e001      	b.n	802556e <I2SEx_TxRxDMACplt+0x66>
 802556a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802556e:	f022 0201 	bic.w	r2, r2, #1
 8025572:	605a      	str	r2, [r3, #4]
 8025574:	e007      	b.n	8025586 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8025576:	68fb      	ldr	r3, [r7, #12]
 8025578:	681b      	ldr	r3, [r3, #0]
 802557a:	685a      	ldr	r2, [r3, #4]
 802557c:	68fb      	ldr	r3, [r7, #12]
 802557e:	681b      	ldr	r3, [r3, #0]
 8025580:	f022 0201 	bic.w	r2, r2, #1
 8025584:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8025586:	68fb      	ldr	r3, [r7, #12]
 8025588:	2200      	movs	r2, #0
 802558a:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 802558c:	68fb      	ldr	r3, [r7, #12]
 802558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025590:	b29b      	uxth	r3, r3
 8025592:	2b00      	cmp	r3, #0
 8025594:	d106      	bne.n	80255a4 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8025596:	68fb      	ldr	r3, [r7, #12]
 8025598:	2201      	movs	r2, #1
 802559a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 802559e:	68f8      	ldr	r0, [r7, #12]
 80255a0:	f00a fb30 	bl	802fc04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 80255a4:	68fb      	ldr	r3, [r7, #12]
 80255a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80255a8:	687a      	ldr	r2, [r7, #4]
 80255aa:	429a      	cmp	r2, r3
 80255ac:	d13c      	bne.n	8025628 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80255ae:	68fb      	ldr	r3, [r7, #12]
 80255b0:	681b      	ldr	r3, [r3, #0]
 80255b2:	69db      	ldr	r3, [r3, #28]
 80255b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80255b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80255bc:	d006      	beq.n	80255cc <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80255be:	68fb      	ldr	r3, [r7, #12]
 80255c0:	681b      	ldr	r3, [r3, #0]
 80255c2:	69db      	ldr	r3, [r3, #28]
 80255c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80255c8:	2b00      	cmp	r3, #0
 80255ca:	d108      	bne.n	80255de <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80255cc:	68fb      	ldr	r3, [r7, #12]
 80255ce:	681b      	ldr	r3, [r3, #0]
 80255d0:	685a      	ldr	r2, [r3, #4]
 80255d2:	68fb      	ldr	r3, [r7, #12]
 80255d4:	681b      	ldr	r3, [r3, #0]
 80255d6:	f022 0202 	bic.w	r2, r2, #2
 80255da:	605a      	str	r2, [r3, #4]
 80255dc:	e015      	b.n	802560a <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80255de:	68fb      	ldr	r3, [r7, #12]
 80255e0:	681b      	ldr	r3, [r3, #0]
 80255e2:	4a13      	ldr	r2, [pc, #76]	; (8025630 <I2SEx_TxRxDMACplt+0x128>)
 80255e4:	4293      	cmp	r3, r2
 80255e6:	d101      	bne.n	80255ec <I2SEx_TxRxDMACplt+0xe4>
 80255e8:	4b12      	ldr	r3, [pc, #72]	; (8025634 <I2SEx_TxRxDMACplt+0x12c>)
 80255ea:	e001      	b.n	80255f0 <I2SEx_TxRxDMACplt+0xe8>
 80255ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80255f0:	685a      	ldr	r2, [r3, #4]
 80255f2:	68fb      	ldr	r3, [r7, #12]
 80255f4:	681b      	ldr	r3, [r3, #0]
 80255f6:	490e      	ldr	r1, [pc, #56]	; (8025630 <I2SEx_TxRxDMACplt+0x128>)
 80255f8:	428b      	cmp	r3, r1
 80255fa:	d101      	bne.n	8025600 <I2SEx_TxRxDMACplt+0xf8>
 80255fc:	4b0d      	ldr	r3, [pc, #52]	; (8025634 <I2SEx_TxRxDMACplt+0x12c>)
 80255fe:	e001      	b.n	8025604 <I2SEx_TxRxDMACplt+0xfc>
 8025600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025604:	f022 0202 	bic.w	r2, r2, #2
 8025608:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 802560a:	68fb      	ldr	r3, [r7, #12]
 802560c:	2200      	movs	r2, #0
 802560e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8025610:	68fb      	ldr	r3, [r7, #12]
 8025612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8025614:	b29b      	uxth	r3, r3
 8025616:	2b00      	cmp	r3, #0
 8025618:	d106      	bne.n	8025628 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 802561a:	68fb      	ldr	r3, [r7, #12]
 802561c:	2201      	movs	r2, #1
 802561e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8025622:	68f8      	ldr	r0, [r7, #12]
 8025624:	f00a faee 	bl	802fc04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
}
 8025628:	bf00      	nop
 802562a:	3710      	adds	r7, #16
 802562c:	46bd      	mov	sp, r7
 802562e:	bd80      	pop	{r7, pc}
 8025630:	40003800 	.word	0x40003800
 8025634:	40003400 	.word	0x40003400

08025638 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8025638:	b580      	push	{r7, lr}
 802563a:	b084      	sub	sp, #16
 802563c:	af00      	add	r7, sp, #0
 802563e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8025640:	687b      	ldr	r3, [r7, #4]
 8025642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025644:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8025646:	68fb      	ldr	r3, [r7, #12]
 8025648:	681b      	ldr	r3, [r3, #0]
 802564a:	685a      	ldr	r2, [r3, #4]
 802564c:	68fb      	ldr	r3, [r7, #12]
 802564e:	681b      	ldr	r3, [r3, #0]
 8025650:	f022 0203 	bic.w	r2, r2, #3
 8025654:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8025656:	68fb      	ldr	r3, [r7, #12]
 8025658:	681b      	ldr	r3, [r3, #0]
 802565a:	4a15      	ldr	r2, [pc, #84]	; (80256b0 <I2SEx_TxRxDMAError+0x78>)
 802565c:	4293      	cmp	r3, r2
 802565e:	d101      	bne.n	8025664 <I2SEx_TxRxDMAError+0x2c>
 8025660:	4b14      	ldr	r3, [pc, #80]	; (80256b4 <I2SEx_TxRxDMAError+0x7c>)
 8025662:	e001      	b.n	8025668 <I2SEx_TxRxDMAError+0x30>
 8025664:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025668:	685a      	ldr	r2, [r3, #4]
 802566a:	68fb      	ldr	r3, [r7, #12]
 802566c:	681b      	ldr	r3, [r3, #0]
 802566e:	4910      	ldr	r1, [pc, #64]	; (80256b0 <I2SEx_TxRxDMAError+0x78>)
 8025670:	428b      	cmp	r3, r1
 8025672:	d101      	bne.n	8025678 <I2SEx_TxRxDMAError+0x40>
 8025674:	4b0f      	ldr	r3, [pc, #60]	; (80256b4 <I2SEx_TxRxDMAError+0x7c>)
 8025676:	e001      	b.n	802567c <I2SEx_TxRxDMAError+0x44>
 8025678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802567c:	f022 0203 	bic.w	r2, r2, #3
 8025680:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8025682:	68fb      	ldr	r3, [r7, #12]
 8025684:	2200      	movs	r2, #0
 8025686:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8025688:	68fb      	ldr	r3, [r7, #12]
 802568a:	2200      	movs	r2, #0
 802568c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 802568e:	68fb      	ldr	r3, [r7, #12]
 8025690:	2201      	movs	r2, #1
 8025692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8025696:	68fb      	ldr	r3, [r7, #12]
 8025698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802569a:	f043 0208 	orr.w	r2, r3, #8
 802569e:	68fb      	ldr	r3, [r7, #12]
 80256a0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80256a2:	68f8      	ldr	r0, [r7, #12]
 80256a4:	f7ff fb48 	bl	8024d38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80256a8:	bf00      	nop
 80256aa:	3710      	adds	r7, #16
 80256ac:	46bd      	mov	sp, r7
 80256ae:	bd80      	pop	{r7, pc}
 80256b0:	40003800 	.word	0x40003800
 80256b4:	40003400 	.word	0x40003400

080256b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80256b8:	b580      	push	{r7, lr}
 80256ba:	b082      	sub	sp, #8
 80256bc:	af00      	add	r7, sp, #0
 80256be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80256c0:	687b      	ldr	r3, [r7, #4]
 80256c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80256c4:	1c99      	adds	r1, r3, #2
 80256c6:	687a      	ldr	r2, [r7, #4]
 80256c8:	6251      	str	r1, [r2, #36]	; 0x24
 80256ca:	881a      	ldrh	r2, [r3, #0]
 80256cc:	687b      	ldr	r3, [r7, #4]
 80256ce:	681b      	ldr	r3, [r3, #0]
 80256d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80256d2:	687b      	ldr	r3, [r7, #4]
 80256d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80256d6:	b29b      	uxth	r3, r3
 80256d8:	3b01      	subs	r3, #1
 80256da:	b29a      	uxth	r2, r3
 80256dc:	687b      	ldr	r3, [r7, #4]
 80256de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80256e0:	687b      	ldr	r3, [r7, #4]
 80256e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80256e4:	b29b      	uxth	r3, r3
 80256e6:	2b00      	cmp	r3, #0
 80256e8:	d113      	bne.n	8025712 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80256ea:	687b      	ldr	r3, [r7, #4]
 80256ec:	681b      	ldr	r3, [r3, #0]
 80256ee:	685a      	ldr	r2, [r3, #4]
 80256f0:	687b      	ldr	r3, [r7, #4]
 80256f2:	681b      	ldr	r3, [r3, #0]
 80256f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80256f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80256fa:	687b      	ldr	r3, [r7, #4]
 80256fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80256fe:	b29b      	uxth	r3, r3
 8025700:	2b00      	cmp	r3, #0
 8025702:	d106      	bne.n	8025712 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8025704:	687b      	ldr	r3, [r7, #4]
 8025706:	2201      	movs	r2, #1
 8025708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 802570c:	6878      	ldr	r0, [r7, #4]
 802570e:	f00a fa79 	bl	802fc04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8025712:	bf00      	nop
 8025714:	3708      	adds	r7, #8
 8025716:	46bd      	mov	sp, r7
 8025718:	bd80      	pop	{r7, pc}
	...

0802571c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 802571c:	b580      	push	{r7, lr}
 802571e:	b082      	sub	sp, #8
 8025720:	af00      	add	r7, sp, #0
 8025722:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8025724:	687b      	ldr	r3, [r7, #4]
 8025726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025728:	1c99      	adds	r1, r3, #2
 802572a:	687a      	ldr	r2, [r7, #4]
 802572c:	6251      	str	r1, [r2, #36]	; 0x24
 802572e:	8819      	ldrh	r1, [r3, #0]
 8025730:	687b      	ldr	r3, [r7, #4]
 8025732:	681b      	ldr	r3, [r3, #0]
 8025734:	4a1d      	ldr	r2, [pc, #116]	; (80257ac <I2SEx_TxISR_I2SExt+0x90>)
 8025736:	4293      	cmp	r3, r2
 8025738:	d101      	bne.n	802573e <I2SEx_TxISR_I2SExt+0x22>
 802573a:	4b1d      	ldr	r3, [pc, #116]	; (80257b0 <I2SEx_TxISR_I2SExt+0x94>)
 802573c:	e001      	b.n	8025742 <I2SEx_TxISR_I2SExt+0x26>
 802573e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025742:	460a      	mov	r2, r1
 8025744:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8025746:	687b      	ldr	r3, [r7, #4]
 8025748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802574a:	b29b      	uxth	r3, r3
 802574c:	3b01      	subs	r3, #1
 802574e:	b29a      	uxth	r2, r3
 8025750:	687b      	ldr	r3, [r7, #4]
 8025752:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8025754:	687b      	ldr	r3, [r7, #4]
 8025756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025758:	b29b      	uxth	r3, r3
 802575a:	2b00      	cmp	r3, #0
 802575c:	d121      	bne.n	80257a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 802575e:	687b      	ldr	r3, [r7, #4]
 8025760:	681b      	ldr	r3, [r3, #0]
 8025762:	4a12      	ldr	r2, [pc, #72]	; (80257ac <I2SEx_TxISR_I2SExt+0x90>)
 8025764:	4293      	cmp	r3, r2
 8025766:	d101      	bne.n	802576c <I2SEx_TxISR_I2SExt+0x50>
 8025768:	4b11      	ldr	r3, [pc, #68]	; (80257b0 <I2SEx_TxISR_I2SExt+0x94>)
 802576a:	e001      	b.n	8025770 <I2SEx_TxISR_I2SExt+0x54>
 802576c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025770:	685a      	ldr	r2, [r3, #4]
 8025772:	687b      	ldr	r3, [r7, #4]
 8025774:	681b      	ldr	r3, [r3, #0]
 8025776:	490d      	ldr	r1, [pc, #52]	; (80257ac <I2SEx_TxISR_I2SExt+0x90>)
 8025778:	428b      	cmp	r3, r1
 802577a:	d101      	bne.n	8025780 <I2SEx_TxISR_I2SExt+0x64>
 802577c:	4b0c      	ldr	r3, [pc, #48]	; (80257b0 <I2SEx_TxISR_I2SExt+0x94>)
 802577e:	e001      	b.n	8025784 <I2SEx_TxISR_I2SExt+0x68>
 8025780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025784:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8025788:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 802578a:	687b      	ldr	r3, [r7, #4]
 802578c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802578e:	b29b      	uxth	r3, r3
 8025790:	2b00      	cmp	r3, #0
 8025792:	d106      	bne.n	80257a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8025794:	687b      	ldr	r3, [r7, #4]
 8025796:	2201      	movs	r2, #1
 8025798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 802579c:	6878      	ldr	r0, [r7, #4]
 802579e:	f00a fa31 	bl	802fc04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80257a2:	bf00      	nop
 80257a4:	3708      	adds	r7, #8
 80257a6:	46bd      	mov	sp, r7
 80257a8:	bd80      	pop	{r7, pc}
 80257aa:	bf00      	nop
 80257ac:	40003800 	.word	0x40003800
 80257b0:	40003400 	.word	0x40003400

080257b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80257b4:	b580      	push	{r7, lr}
 80257b6:	b082      	sub	sp, #8
 80257b8:	af00      	add	r7, sp, #0
 80257ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80257bc:	687b      	ldr	r3, [r7, #4]
 80257be:	681b      	ldr	r3, [r3, #0]
 80257c0:	68d8      	ldr	r0, [r3, #12]
 80257c2:	687b      	ldr	r3, [r7, #4]
 80257c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80257c6:	1c99      	adds	r1, r3, #2
 80257c8:	687a      	ldr	r2, [r7, #4]
 80257ca:	62d1      	str	r1, [r2, #44]	; 0x2c
 80257cc:	b282      	uxth	r2, r0
 80257ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80257d0:	687b      	ldr	r3, [r7, #4]
 80257d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80257d4:	b29b      	uxth	r3, r3
 80257d6:	3b01      	subs	r3, #1
 80257d8:	b29a      	uxth	r2, r3
 80257da:	687b      	ldr	r3, [r7, #4]
 80257dc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80257de:	687b      	ldr	r3, [r7, #4]
 80257e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80257e2:	b29b      	uxth	r3, r3
 80257e4:	2b00      	cmp	r3, #0
 80257e6:	d113      	bne.n	8025810 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80257e8:	687b      	ldr	r3, [r7, #4]
 80257ea:	681b      	ldr	r3, [r3, #0]
 80257ec:	685a      	ldr	r2, [r3, #4]
 80257ee:	687b      	ldr	r3, [r7, #4]
 80257f0:	681b      	ldr	r3, [r3, #0]
 80257f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80257f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80257f8:	687b      	ldr	r3, [r7, #4]
 80257fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80257fc:	b29b      	uxth	r3, r3
 80257fe:	2b00      	cmp	r3, #0
 8025800:	d106      	bne.n	8025810 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8025802:	687b      	ldr	r3, [r7, #4]
 8025804:	2201      	movs	r2, #1
 8025806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 802580a:	6878      	ldr	r0, [r7, #4]
 802580c:	f00a f9fa 	bl	802fc04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8025810:	bf00      	nop
 8025812:	3708      	adds	r7, #8
 8025814:	46bd      	mov	sp, r7
 8025816:	bd80      	pop	{r7, pc}

08025818 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8025818:	b580      	push	{r7, lr}
 802581a:	b082      	sub	sp, #8
 802581c:	af00      	add	r7, sp, #0
 802581e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8025820:	687b      	ldr	r3, [r7, #4]
 8025822:	681b      	ldr	r3, [r3, #0]
 8025824:	4a20      	ldr	r2, [pc, #128]	; (80258a8 <I2SEx_RxISR_I2SExt+0x90>)
 8025826:	4293      	cmp	r3, r2
 8025828:	d101      	bne.n	802582e <I2SEx_RxISR_I2SExt+0x16>
 802582a:	4b20      	ldr	r3, [pc, #128]	; (80258ac <I2SEx_RxISR_I2SExt+0x94>)
 802582c:	e001      	b.n	8025832 <I2SEx_RxISR_I2SExt+0x1a>
 802582e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025832:	68d8      	ldr	r0, [r3, #12]
 8025834:	687b      	ldr	r3, [r7, #4]
 8025836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025838:	1c99      	adds	r1, r3, #2
 802583a:	687a      	ldr	r2, [r7, #4]
 802583c:	62d1      	str	r1, [r2, #44]	; 0x2c
 802583e:	b282      	uxth	r2, r0
 8025840:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8025842:	687b      	ldr	r3, [r7, #4]
 8025844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8025846:	b29b      	uxth	r3, r3
 8025848:	3b01      	subs	r3, #1
 802584a:	b29a      	uxth	r2, r3
 802584c:	687b      	ldr	r3, [r7, #4]
 802584e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8025850:	687b      	ldr	r3, [r7, #4]
 8025852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8025854:	b29b      	uxth	r3, r3
 8025856:	2b00      	cmp	r3, #0
 8025858:	d121      	bne.n	802589e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 802585a:	687b      	ldr	r3, [r7, #4]
 802585c:	681b      	ldr	r3, [r3, #0]
 802585e:	4a12      	ldr	r2, [pc, #72]	; (80258a8 <I2SEx_RxISR_I2SExt+0x90>)
 8025860:	4293      	cmp	r3, r2
 8025862:	d101      	bne.n	8025868 <I2SEx_RxISR_I2SExt+0x50>
 8025864:	4b11      	ldr	r3, [pc, #68]	; (80258ac <I2SEx_RxISR_I2SExt+0x94>)
 8025866:	e001      	b.n	802586c <I2SEx_RxISR_I2SExt+0x54>
 8025868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 802586c:	685a      	ldr	r2, [r3, #4]
 802586e:	687b      	ldr	r3, [r7, #4]
 8025870:	681b      	ldr	r3, [r3, #0]
 8025872:	490d      	ldr	r1, [pc, #52]	; (80258a8 <I2SEx_RxISR_I2SExt+0x90>)
 8025874:	428b      	cmp	r3, r1
 8025876:	d101      	bne.n	802587c <I2SEx_RxISR_I2SExt+0x64>
 8025878:	4b0c      	ldr	r3, [pc, #48]	; (80258ac <I2SEx_RxISR_I2SExt+0x94>)
 802587a:	e001      	b.n	8025880 <I2SEx_RxISR_I2SExt+0x68>
 802587c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8025880:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8025884:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8025886:	687b      	ldr	r3, [r7, #4]
 8025888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802588a:	b29b      	uxth	r3, r3
 802588c:	2b00      	cmp	r3, #0
 802588e:	d106      	bne.n	802589e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8025890:	687b      	ldr	r3, [r7, #4]
 8025892:	2201      	movs	r2, #1
 8025894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8025898:	6878      	ldr	r0, [r7, #4]
 802589a:	f00a f9b3 	bl	802fc04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 802589e:	bf00      	nop
 80258a0:	3708      	adds	r7, #8
 80258a2:	46bd      	mov	sp, r7
 80258a4:	bd80      	pop	{r7, pc}
 80258a6:	bf00      	nop
 80258a8:	40003800 	.word	0x40003800
 80258ac:	40003400 	.word	0x40003400

080258b0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80258b0:	b580      	push	{r7, lr}
 80258b2:	b084      	sub	sp, #16
 80258b4:	af00      	add	r7, sp, #0
 80258b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80258b8:	687b      	ldr	r3, [r7, #4]
 80258ba:	2b00      	cmp	r3, #0
 80258bc:	d101      	bne.n	80258c2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80258be:	2301      	movs	r3, #1
 80258c0:	e02b      	b.n	802591a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80258c2:	687b      	ldr	r3, [r7, #4]
 80258c4:	681b      	ldr	r3, [r3, #0]
 80258c6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80258ca:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80258cc:	687b      	ldr	r3, [r7, #4]
 80258ce:	681b      	ldr	r3, [r3, #0]
 80258d0:	f245 5255 	movw	r2, #21845	; 0x5555
 80258d4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80258d6:	687b      	ldr	r3, [r7, #4]
 80258d8:	681b      	ldr	r3, [r3, #0]
 80258da:	687a      	ldr	r2, [r7, #4]
 80258dc:	6852      	ldr	r2, [r2, #4]
 80258de:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80258e0:	687b      	ldr	r3, [r7, #4]
 80258e2:	681b      	ldr	r3, [r3, #0]
 80258e4:	687a      	ldr	r2, [r7, #4]
 80258e6:	6892      	ldr	r2, [r2, #8]
 80258e8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80258ea:	f7fc f93d 	bl	8021b68 <HAL_GetTick>
 80258ee:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80258f0:	e008      	b.n	8025904 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80258f2:	f7fc f939 	bl	8021b68 <HAL_GetTick>
 80258f6:	4602      	mov	r2, r0
 80258f8:	68fb      	ldr	r3, [r7, #12]
 80258fa:	1ad3      	subs	r3, r2, r3
 80258fc:	2b30      	cmp	r3, #48	; 0x30
 80258fe:	d901      	bls.n	8025904 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8025900:	2303      	movs	r3, #3
 8025902:	e00a      	b.n	802591a <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8025904:	687b      	ldr	r3, [r7, #4]
 8025906:	681b      	ldr	r3, [r3, #0]
 8025908:	68db      	ldr	r3, [r3, #12]
 802590a:	2b00      	cmp	r3, #0
 802590c:	d1f1      	bne.n	80258f2 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 802590e:	687b      	ldr	r3, [r7, #4]
 8025910:	681b      	ldr	r3, [r3, #0]
 8025912:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8025916:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8025918:	2300      	movs	r3, #0
}
 802591a:	4618      	mov	r0, r3
 802591c:	3710      	adds	r7, #16
 802591e:	46bd      	mov	sp, r7
 8025920:	bd80      	pop	{r7, pc}

08025922 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8025922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025924:	b08f      	sub	sp, #60	; 0x3c
 8025926:	af0a      	add	r7, sp, #40	; 0x28
 8025928:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 802592a:	687b      	ldr	r3, [r7, #4]
 802592c:	2b00      	cmp	r3, #0
 802592e:	d101      	bne.n	8025934 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8025930:	2301      	movs	r3, #1
 8025932:	e10f      	b.n	8025b54 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8025934:	687b      	ldr	r3, [r7, #4]
 8025936:	681b      	ldr	r3, [r3, #0]
 8025938:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 802593a:	687b      	ldr	r3, [r7, #4]
 802593c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8025940:	b2db      	uxtb	r3, r3
 8025942:	2b00      	cmp	r3, #0
 8025944:	d106      	bne.n	8025954 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8025946:	687b      	ldr	r3, [r7, #4]
 8025948:	2200      	movs	r2, #0
 802594a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 802594e:	6878      	ldr	r0, [r7, #4]
 8025950:	f011 f836 	bl	80369c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8025954:	687b      	ldr	r3, [r7, #4]
 8025956:	2203      	movs	r2, #3
 8025958:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 802595c:	68bb      	ldr	r3, [r7, #8]
 802595e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025964:	2b00      	cmp	r3, #0
 8025966:	d102      	bne.n	802596e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8025968:	687b      	ldr	r3, [r7, #4]
 802596a:	2200      	movs	r2, #0
 802596c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 802596e:	687b      	ldr	r3, [r7, #4]
 8025970:	681b      	ldr	r3, [r3, #0]
 8025972:	4618      	mov	r0, r3
 8025974:	f004 fa43 	bl	8029dfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8025978:	687b      	ldr	r3, [r7, #4]
 802597a:	681b      	ldr	r3, [r3, #0]
 802597c:	603b      	str	r3, [r7, #0]
 802597e:	687e      	ldr	r6, [r7, #4]
 8025980:	466d      	mov	r5, sp
 8025982:	f106 0410 	add.w	r4, r6, #16
 8025986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802598a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802598c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802598e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025992:	e885 0003 	stmia.w	r5, {r0, r1}
 8025996:	1d33      	adds	r3, r6, #4
 8025998:	cb0e      	ldmia	r3, {r1, r2, r3}
 802599a:	6838      	ldr	r0, [r7, #0]
 802599c:	f004 f91a 	bl	8029bd4 <USB_CoreInit>
 80259a0:	4603      	mov	r3, r0
 80259a2:	2b00      	cmp	r3, #0
 80259a4:	d005      	beq.n	80259b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80259a6:	687b      	ldr	r3, [r7, #4]
 80259a8:	2202      	movs	r2, #2
 80259aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80259ae:	2301      	movs	r3, #1
 80259b0:	e0d0      	b.n	8025b54 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80259b2:	687b      	ldr	r3, [r7, #4]
 80259b4:	681b      	ldr	r3, [r3, #0]
 80259b6:	2100      	movs	r1, #0
 80259b8:	4618      	mov	r0, r3
 80259ba:	f004 fa31 	bl	8029e20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80259be:	2300      	movs	r3, #0
 80259c0:	73fb      	strb	r3, [r7, #15]
 80259c2:	e04a      	b.n	8025a5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80259c4:	7bfa      	ldrb	r2, [r7, #15]
 80259c6:	6879      	ldr	r1, [r7, #4]
 80259c8:	4613      	mov	r3, r2
 80259ca:	00db      	lsls	r3, r3, #3
 80259cc:	1a9b      	subs	r3, r3, r2
 80259ce:	009b      	lsls	r3, r3, #2
 80259d0:	440b      	add	r3, r1
 80259d2:	333d      	adds	r3, #61	; 0x3d
 80259d4:	2201      	movs	r2, #1
 80259d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80259d8:	7bfa      	ldrb	r2, [r7, #15]
 80259da:	6879      	ldr	r1, [r7, #4]
 80259dc:	4613      	mov	r3, r2
 80259de:	00db      	lsls	r3, r3, #3
 80259e0:	1a9b      	subs	r3, r3, r2
 80259e2:	009b      	lsls	r3, r3, #2
 80259e4:	440b      	add	r3, r1
 80259e6:	333c      	adds	r3, #60	; 0x3c
 80259e8:	7bfa      	ldrb	r2, [r7, #15]
 80259ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80259ec:	7bfa      	ldrb	r2, [r7, #15]
 80259ee:	7bfb      	ldrb	r3, [r7, #15]
 80259f0:	b298      	uxth	r0, r3
 80259f2:	6879      	ldr	r1, [r7, #4]
 80259f4:	4613      	mov	r3, r2
 80259f6:	00db      	lsls	r3, r3, #3
 80259f8:	1a9b      	subs	r3, r3, r2
 80259fa:	009b      	lsls	r3, r3, #2
 80259fc:	440b      	add	r3, r1
 80259fe:	3342      	adds	r3, #66	; 0x42
 8025a00:	4602      	mov	r2, r0
 8025a02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8025a04:	7bfa      	ldrb	r2, [r7, #15]
 8025a06:	6879      	ldr	r1, [r7, #4]
 8025a08:	4613      	mov	r3, r2
 8025a0a:	00db      	lsls	r3, r3, #3
 8025a0c:	1a9b      	subs	r3, r3, r2
 8025a0e:	009b      	lsls	r3, r3, #2
 8025a10:	440b      	add	r3, r1
 8025a12:	333f      	adds	r3, #63	; 0x3f
 8025a14:	2200      	movs	r2, #0
 8025a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8025a18:	7bfa      	ldrb	r2, [r7, #15]
 8025a1a:	6879      	ldr	r1, [r7, #4]
 8025a1c:	4613      	mov	r3, r2
 8025a1e:	00db      	lsls	r3, r3, #3
 8025a20:	1a9b      	subs	r3, r3, r2
 8025a22:	009b      	lsls	r3, r3, #2
 8025a24:	440b      	add	r3, r1
 8025a26:	3344      	adds	r3, #68	; 0x44
 8025a28:	2200      	movs	r2, #0
 8025a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8025a2c:	7bfa      	ldrb	r2, [r7, #15]
 8025a2e:	6879      	ldr	r1, [r7, #4]
 8025a30:	4613      	mov	r3, r2
 8025a32:	00db      	lsls	r3, r3, #3
 8025a34:	1a9b      	subs	r3, r3, r2
 8025a36:	009b      	lsls	r3, r3, #2
 8025a38:	440b      	add	r3, r1
 8025a3a:	3348      	adds	r3, #72	; 0x48
 8025a3c:	2200      	movs	r2, #0
 8025a3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8025a40:	7bfa      	ldrb	r2, [r7, #15]
 8025a42:	6879      	ldr	r1, [r7, #4]
 8025a44:	4613      	mov	r3, r2
 8025a46:	00db      	lsls	r3, r3, #3
 8025a48:	1a9b      	subs	r3, r3, r2
 8025a4a:	009b      	lsls	r3, r3, #2
 8025a4c:	440b      	add	r3, r1
 8025a4e:	3350      	adds	r3, #80	; 0x50
 8025a50:	2200      	movs	r2, #0
 8025a52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8025a54:	7bfb      	ldrb	r3, [r7, #15]
 8025a56:	3301      	adds	r3, #1
 8025a58:	73fb      	strb	r3, [r7, #15]
 8025a5a:	7bfa      	ldrb	r2, [r7, #15]
 8025a5c:	687b      	ldr	r3, [r7, #4]
 8025a5e:	685b      	ldr	r3, [r3, #4]
 8025a60:	429a      	cmp	r2, r3
 8025a62:	d3af      	bcc.n	80259c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8025a64:	2300      	movs	r3, #0
 8025a66:	73fb      	strb	r3, [r7, #15]
 8025a68:	e044      	b.n	8025af4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8025a6a:	7bfa      	ldrb	r2, [r7, #15]
 8025a6c:	6879      	ldr	r1, [r7, #4]
 8025a6e:	4613      	mov	r3, r2
 8025a70:	00db      	lsls	r3, r3, #3
 8025a72:	1a9b      	subs	r3, r3, r2
 8025a74:	009b      	lsls	r3, r3, #2
 8025a76:	440b      	add	r3, r1
 8025a78:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8025a7c:	2200      	movs	r2, #0
 8025a7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8025a80:	7bfa      	ldrb	r2, [r7, #15]
 8025a82:	6879      	ldr	r1, [r7, #4]
 8025a84:	4613      	mov	r3, r2
 8025a86:	00db      	lsls	r3, r3, #3
 8025a88:	1a9b      	subs	r3, r3, r2
 8025a8a:	009b      	lsls	r3, r3, #2
 8025a8c:	440b      	add	r3, r1
 8025a8e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8025a92:	7bfa      	ldrb	r2, [r7, #15]
 8025a94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8025a96:	7bfa      	ldrb	r2, [r7, #15]
 8025a98:	6879      	ldr	r1, [r7, #4]
 8025a9a:	4613      	mov	r3, r2
 8025a9c:	00db      	lsls	r3, r3, #3
 8025a9e:	1a9b      	subs	r3, r3, r2
 8025aa0:	009b      	lsls	r3, r3, #2
 8025aa2:	440b      	add	r3, r1
 8025aa4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8025aa8:	2200      	movs	r2, #0
 8025aaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8025aac:	7bfa      	ldrb	r2, [r7, #15]
 8025aae:	6879      	ldr	r1, [r7, #4]
 8025ab0:	4613      	mov	r3, r2
 8025ab2:	00db      	lsls	r3, r3, #3
 8025ab4:	1a9b      	subs	r3, r3, r2
 8025ab6:	009b      	lsls	r3, r3, #2
 8025ab8:	440b      	add	r3, r1
 8025aba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8025abe:	2200      	movs	r2, #0
 8025ac0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8025ac2:	7bfa      	ldrb	r2, [r7, #15]
 8025ac4:	6879      	ldr	r1, [r7, #4]
 8025ac6:	4613      	mov	r3, r2
 8025ac8:	00db      	lsls	r3, r3, #3
 8025aca:	1a9b      	subs	r3, r3, r2
 8025acc:	009b      	lsls	r3, r3, #2
 8025ace:	440b      	add	r3, r1
 8025ad0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8025ad4:	2200      	movs	r2, #0
 8025ad6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8025ad8:	7bfa      	ldrb	r2, [r7, #15]
 8025ada:	6879      	ldr	r1, [r7, #4]
 8025adc:	4613      	mov	r3, r2
 8025ade:	00db      	lsls	r3, r3, #3
 8025ae0:	1a9b      	subs	r3, r3, r2
 8025ae2:	009b      	lsls	r3, r3, #2
 8025ae4:	440b      	add	r3, r1
 8025ae6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8025aea:	2200      	movs	r2, #0
 8025aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8025aee:	7bfb      	ldrb	r3, [r7, #15]
 8025af0:	3301      	adds	r3, #1
 8025af2:	73fb      	strb	r3, [r7, #15]
 8025af4:	7bfa      	ldrb	r2, [r7, #15]
 8025af6:	687b      	ldr	r3, [r7, #4]
 8025af8:	685b      	ldr	r3, [r3, #4]
 8025afa:	429a      	cmp	r2, r3
 8025afc:	d3b5      	bcc.n	8025a6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8025afe:	687b      	ldr	r3, [r7, #4]
 8025b00:	681b      	ldr	r3, [r3, #0]
 8025b02:	603b      	str	r3, [r7, #0]
 8025b04:	687e      	ldr	r6, [r7, #4]
 8025b06:	466d      	mov	r5, sp
 8025b08:	f106 0410 	add.w	r4, r6, #16
 8025b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025b14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025b18:	e885 0003 	stmia.w	r5, {r0, r1}
 8025b1c:	1d33      	adds	r3, r6, #4
 8025b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025b20:	6838      	ldr	r0, [r7, #0]
 8025b22:	f004 f9a7 	bl	8029e74 <USB_DevInit>
 8025b26:	4603      	mov	r3, r0
 8025b28:	2b00      	cmp	r3, #0
 8025b2a:	d005      	beq.n	8025b38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8025b2c:	687b      	ldr	r3, [r7, #4]
 8025b2e:	2202      	movs	r2, #2
 8025b30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8025b34:	2301      	movs	r3, #1
 8025b36:	e00d      	b.n	8025b54 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8025b38:	687b      	ldr	r3, [r7, #4]
 8025b3a:	2200      	movs	r2, #0
 8025b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8025b40:	687b      	ldr	r3, [r7, #4]
 8025b42:	2201      	movs	r2, #1
 8025b44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8025b48:	687b      	ldr	r3, [r7, #4]
 8025b4a:	681b      	ldr	r3, [r3, #0]
 8025b4c:	4618      	mov	r0, r3
 8025b4e:	f005 f9ef 	bl	802af30 <USB_DevDisconnect>

  return HAL_OK;
 8025b52:	2300      	movs	r3, #0
}
 8025b54:	4618      	mov	r0, r3
 8025b56:	3714      	adds	r7, #20
 8025b58:	46bd      	mov	sp, r7
 8025b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025b5c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8025b5c:	b580      	push	{r7, lr}
 8025b5e:	b084      	sub	sp, #16
 8025b60:	af00      	add	r7, sp, #0
 8025b62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8025b64:	687b      	ldr	r3, [r7, #4]
 8025b66:	681b      	ldr	r3, [r3, #0]
 8025b68:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8025b6a:	687b      	ldr	r3, [r7, #4]
 8025b6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8025b70:	2b01      	cmp	r3, #1
 8025b72:	d101      	bne.n	8025b78 <HAL_PCD_Start+0x1c>
 8025b74:	2302      	movs	r3, #2
 8025b76:	e020      	b.n	8025bba <HAL_PCD_Start+0x5e>
 8025b78:	687b      	ldr	r3, [r7, #4]
 8025b7a:	2201      	movs	r2, #1
 8025b7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8025b80:	687b      	ldr	r3, [r7, #4]
 8025b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025b84:	2b01      	cmp	r3, #1
 8025b86:	d109      	bne.n	8025b9c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8025b88:	687b      	ldr	r3, [r7, #4]
 8025b8a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8025b8c:	2b01      	cmp	r3, #1
 8025b8e:	d005      	beq.n	8025b9c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8025b90:	68fb      	ldr	r3, [r7, #12]
 8025b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025b94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8025b98:	68fb      	ldr	r3, [r7, #12]
 8025b9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8025b9c:	687b      	ldr	r3, [r7, #4]
 8025b9e:	681b      	ldr	r3, [r3, #0]
 8025ba0:	4618      	mov	r0, r3
 8025ba2:	f004 f91b 	bl	8029ddc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8025ba6:	687b      	ldr	r3, [r7, #4]
 8025ba8:	681b      	ldr	r3, [r3, #0]
 8025baa:	4618      	mov	r0, r3
 8025bac:	f005 f99f 	bl	802aeee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8025bb0:	687b      	ldr	r3, [r7, #4]
 8025bb2:	2200      	movs	r2, #0
 8025bb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8025bb8:	2300      	movs	r3, #0
}
 8025bba:	4618      	mov	r0, r3
 8025bbc:	3710      	adds	r7, #16
 8025bbe:	46bd      	mov	sp, r7
 8025bc0:	bd80      	pop	{r7, pc}

08025bc2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8025bc2:	b590      	push	{r4, r7, lr}
 8025bc4:	b08d      	sub	sp, #52	; 0x34
 8025bc6:	af00      	add	r7, sp, #0
 8025bc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8025bca:	687b      	ldr	r3, [r7, #4]
 8025bcc:	681b      	ldr	r3, [r3, #0]
 8025bce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025bd0:	6a3b      	ldr	r3, [r7, #32]
 8025bd2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8025bd4:	687b      	ldr	r3, [r7, #4]
 8025bd6:	681b      	ldr	r3, [r3, #0]
 8025bd8:	4618      	mov	r0, r3
 8025bda:	f005 fa5d 	bl	802b098 <USB_GetMode>
 8025bde:	4603      	mov	r3, r0
 8025be0:	2b00      	cmp	r3, #0
 8025be2:	f040 839d 	bne.w	8026320 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8025be6:	687b      	ldr	r3, [r7, #4]
 8025be8:	681b      	ldr	r3, [r3, #0]
 8025bea:	4618      	mov	r0, r3
 8025bec:	f005 f9c1 	bl	802af72 <USB_ReadInterrupts>
 8025bf0:	4603      	mov	r3, r0
 8025bf2:	2b00      	cmp	r3, #0
 8025bf4:	f000 8393 	beq.w	802631e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8025bf8:	687b      	ldr	r3, [r7, #4]
 8025bfa:	681b      	ldr	r3, [r3, #0]
 8025bfc:	4618      	mov	r0, r3
 8025bfe:	f005 f9b8 	bl	802af72 <USB_ReadInterrupts>
 8025c02:	4603      	mov	r3, r0
 8025c04:	f003 0302 	and.w	r3, r3, #2
 8025c08:	2b02      	cmp	r3, #2
 8025c0a:	d107      	bne.n	8025c1c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8025c0c:	687b      	ldr	r3, [r7, #4]
 8025c0e:	681b      	ldr	r3, [r3, #0]
 8025c10:	695a      	ldr	r2, [r3, #20]
 8025c12:	687b      	ldr	r3, [r7, #4]
 8025c14:	681b      	ldr	r3, [r3, #0]
 8025c16:	f002 0202 	and.w	r2, r2, #2
 8025c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8025c1c:	687b      	ldr	r3, [r7, #4]
 8025c1e:	681b      	ldr	r3, [r3, #0]
 8025c20:	4618      	mov	r0, r3
 8025c22:	f005 f9a6 	bl	802af72 <USB_ReadInterrupts>
 8025c26:	4603      	mov	r3, r0
 8025c28:	f003 0310 	and.w	r3, r3, #16
 8025c2c:	2b10      	cmp	r3, #16
 8025c2e:	d161      	bne.n	8025cf4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8025c30:	687b      	ldr	r3, [r7, #4]
 8025c32:	681b      	ldr	r3, [r3, #0]
 8025c34:	699a      	ldr	r2, [r3, #24]
 8025c36:	687b      	ldr	r3, [r7, #4]
 8025c38:	681b      	ldr	r3, [r3, #0]
 8025c3a:	f022 0210 	bic.w	r2, r2, #16
 8025c3e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8025c40:	6a3b      	ldr	r3, [r7, #32]
 8025c42:	6a1b      	ldr	r3, [r3, #32]
 8025c44:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8025c46:	69bb      	ldr	r3, [r7, #24]
 8025c48:	f003 020f 	and.w	r2, r3, #15
 8025c4c:	4613      	mov	r3, r2
 8025c4e:	00db      	lsls	r3, r3, #3
 8025c50:	1a9b      	subs	r3, r3, r2
 8025c52:	009b      	lsls	r3, r3, #2
 8025c54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8025c58:	687a      	ldr	r2, [r7, #4]
 8025c5a:	4413      	add	r3, r2
 8025c5c:	3304      	adds	r3, #4
 8025c5e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8025c60:	69bb      	ldr	r3, [r7, #24]
 8025c62:	0c5b      	lsrs	r3, r3, #17
 8025c64:	f003 030f 	and.w	r3, r3, #15
 8025c68:	2b02      	cmp	r3, #2
 8025c6a:	d124      	bne.n	8025cb6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8025c6c:	69ba      	ldr	r2, [r7, #24]
 8025c6e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8025c72:	4013      	ands	r3, r2
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	d035      	beq.n	8025ce4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8025c78:	697b      	ldr	r3, [r7, #20]
 8025c7a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8025c7c:	69bb      	ldr	r3, [r7, #24]
 8025c7e:	091b      	lsrs	r3, r3, #4
 8025c80:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8025c82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8025c86:	b29b      	uxth	r3, r3
 8025c88:	461a      	mov	r2, r3
 8025c8a:	6a38      	ldr	r0, [r7, #32]
 8025c8c:	f005 f80c 	bl	802aca8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8025c90:	697b      	ldr	r3, [r7, #20]
 8025c92:	68da      	ldr	r2, [r3, #12]
 8025c94:	69bb      	ldr	r3, [r7, #24]
 8025c96:	091b      	lsrs	r3, r3, #4
 8025c98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8025c9c:	441a      	add	r2, r3
 8025c9e:	697b      	ldr	r3, [r7, #20]
 8025ca0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8025ca2:	697b      	ldr	r3, [r7, #20]
 8025ca4:	699a      	ldr	r2, [r3, #24]
 8025ca6:	69bb      	ldr	r3, [r7, #24]
 8025ca8:	091b      	lsrs	r3, r3, #4
 8025caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8025cae:	441a      	add	r2, r3
 8025cb0:	697b      	ldr	r3, [r7, #20]
 8025cb2:	619a      	str	r2, [r3, #24]
 8025cb4:	e016      	b.n	8025ce4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8025cb6:	69bb      	ldr	r3, [r7, #24]
 8025cb8:	0c5b      	lsrs	r3, r3, #17
 8025cba:	f003 030f 	and.w	r3, r3, #15
 8025cbe:	2b06      	cmp	r3, #6
 8025cc0:	d110      	bne.n	8025ce4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8025cc2:	687b      	ldr	r3, [r7, #4]
 8025cc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8025cc8:	2208      	movs	r2, #8
 8025cca:	4619      	mov	r1, r3
 8025ccc:	6a38      	ldr	r0, [r7, #32]
 8025cce:	f004 ffeb 	bl	802aca8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8025cd2:	697b      	ldr	r3, [r7, #20]
 8025cd4:	699a      	ldr	r2, [r3, #24]
 8025cd6:	69bb      	ldr	r3, [r7, #24]
 8025cd8:	091b      	lsrs	r3, r3, #4
 8025cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8025cde:	441a      	add	r2, r3
 8025ce0:	697b      	ldr	r3, [r7, #20]
 8025ce2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8025ce4:	687b      	ldr	r3, [r7, #4]
 8025ce6:	681b      	ldr	r3, [r3, #0]
 8025ce8:	699a      	ldr	r2, [r3, #24]
 8025cea:	687b      	ldr	r3, [r7, #4]
 8025cec:	681b      	ldr	r3, [r3, #0]
 8025cee:	f042 0210 	orr.w	r2, r2, #16
 8025cf2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8025cf4:	687b      	ldr	r3, [r7, #4]
 8025cf6:	681b      	ldr	r3, [r3, #0]
 8025cf8:	4618      	mov	r0, r3
 8025cfa:	f005 f93a 	bl	802af72 <USB_ReadInterrupts>
 8025cfe:	4603      	mov	r3, r0
 8025d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8025d04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8025d08:	d16e      	bne.n	8025de8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8025d0a:	2300      	movs	r3, #0
 8025d0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8025d0e:	687b      	ldr	r3, [r7, #4]
 8025d10:	681b      	ldr	r3, [r3, #0]
 8025d12:	4618      	mov	r0, r3
 8025d14:	f005 f940 	bl	802af98 <USB_ReadDevAllOutEpInterrupt>
 8025d18:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8025d1a:	e062      	b.n	8025de2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8025d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d1e:	f003 0301 	and.w	r3, r3, #1
 8025d22:	2b00      	cmp	r3, #0
 8025d24:	d057      	beq.n	8025dd6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8025d26:	687b      	ldr	r3, [r7, #4]
 8025d28:	681b      	ldr	r3, [r3, #0]
 8025d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025d2c:	b2d2      	uxtb	r2, r2
 8025d2e:	4611      	mov	r1, r2
 8025d30:	4618      	mov	r0, r3
 8025d32:	f005 f965 	bl	802b000 <USB_ReadDevOutEPInterrupt>
 8025d36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8025d38:	693b      	ldr	r3, [r7, #16]
 8025d3a:	f003 0301 	and.w	r3, r3, #1
 8025d3e:	2b00      	cmp	r3, #0
 8025d40:	d00c      	beq.n	8025d5c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8025d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d44:	015a      	lsls	r2, r3, #5
 8025d46:	69fb      	ldr	r3, [r7, #28]
 8025d48:	4413      	add	r3, r2
 8025d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025d4e:	461a      	mov	r2, r3
 8025d50:	2301      	movs	r3, #1
 8025d52:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8025d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025d56:	6878      	ldr	r0, [r7, #4]
 8025d58:	f000 fdb0 	bl	80268bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8025d5c:	693b      	ldr	r3, [r7, #16]
 8025d5e:	f003 0308 	and.w	r3, r3, #8
 8025d62:	2b00      	cmp	r3, #0
 8025d64:	d00c      	beq.n	8025d80 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8025d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d68:	015a      	lsls	r2, r3, #5
 8025d6a:	69fb      	ldr	r3, [r7, #28]
 8025d6c:	4413      	add	r3, r2
 8025d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025d72:	461a      	mov	r2, r3
 8025d74:	2308      	movs	r3, #8
 8025d76:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8025d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025d7a:	6878      	ldr	r0, [r7, #4]
 8025d7c:	f000 feaa 	bl	8026ad4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8025d80:	693b      	ldr	r3, [r7, #16]
 8025d82:	f003 0310 	and.w	r3, r3, #16
 8025d86:	2b00      	cmp	r3, #0
 8025d88:	d008      	beq.n	8025d9c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8025d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d8c:	015a      	lsls	r2, r3, #5
 8025d8e:	69fb      	ldr	r3, [r7, #28]
 8025d90:	4413      	add	r3, r2
 8025d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025d96:	461a      	mov	r2, r3
 8025d98:	2310      	movs	r3, #16
 8025d9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8025d9c:	693b      	ldr	r3, [r7, #16]
 8025d9e:	f003 0320 	and.w	r3, r3, #32
 8025da2:	2b00      	cmp	r3, #0
 8025da4:	d008      	beq.n	8025db8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8025da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025da8:	015a      	lsls	r2, r3, #5
 8025daa:	69fb      	ldr	r3, [r7, #28]
 8025dac:	4413      	add	r3, r2
 8025dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025db2:	461a      	mov	r2, r3
 8025db4:	2320      	movs	r3, #32
 8025db6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8025db8:	693b      	ldr	r3, [r7, #16]
 8025dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8025dbe:	2b00      	cmp	r3, #0
 8025dc0:	d009      	beq.n	8025dd6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8025dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025dc4:	015a      	lsls	r2, r3, #5
 8025dc6:	69fb      	ldr	r3, [r7, #28]
 8025dc8:	4413      	add	r3, r2
 8025dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025dce:	461a      	mov	r2, r3
 8025dd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8025dd4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8025dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025dd8:	3301      	adds	r3, #1
 8025dda:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8025ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025dde:	085b      	lsrs	r3, r3, #1
 8025de0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8025de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025de4:	2b00      	cmp	r3, #0
 8025de6:	d199      	bne.n	8025d1c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8025de8:	687b      	ldr	r3, [r7, #4]
 8025dea:	681b      	ldr	r3, [r3, #0]
 8025dec:	4618      	mov	r0, r3
 8025dee:	f005 f8c0 	bl	802af72 <USB_ReadInterrupts>
 8025df2:	4603      	mov	r3, r0
 8025df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025df8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8025dfc:	f040 80c0 	bne.w	8025f80 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8025e00:	687b      	ldr	r3, [r7, #4]
 8025e02:	681b      	ldr	r3, [r3, #0]
 8025e04:	4618      	mov	r0, r3
 8025e06:	f005 f8e1 	bl	802afcc <USB_ReadDevAllInEpInterrupt>
 8025e0a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8025e0c:	2300      	movs	r3, #0
 8025e0e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8025e10:	e0b2      	b.n	8025f78 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8025e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e14:	f003 0301 	and.w	r3, r3, #1
 8025e18:	2b00      	cmp	r3, #0
 8025e1a:	f000 80a7 	beq.w	8025f6c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8025e1e:	687b      	ldr	r3, [r7, #4]
 8025e20:	681b      	ldr	r3, [r3, #0]
 8025e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025e24:	b2d2      	uxtb	r2, r2
 8025e26:	4611      	mov	r1, r2
 8025e28:	4618      	mov	r0, r3
 8025e2a:	f005 f907 	bl	802b03c <USB_ReadDevInEPInterrupt>
 8025e2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8025e30:	693b      	ldr	r3, [r7, #16]
 8025e32:	f003 0301 	and.w	r3, r3, #1
 8025e36:	2b00      	cmp	r3, #0
 8025e38:	d057      	beq.n	8025eea <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8025e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e3c:	f003 030f 	and.w	r3, r3, #15
 8025e40:	2201      	movs	r2, #1
 8025e42:	fa02 f303 	lsl.w	r3, r2, r3
 8025e46:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8025e48:	69fb      	ldr	r3, [r7, #28]
 8025e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8025e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8025e50:	68fb      	ldr	r3, [r7, #12]
 8025e52:	43db      	mvns	r3, r3
 8025e54:	69f9      	ldr	r1, [r7, #28]
 8025e56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8025e5a:	4013      	ands	r3, r2
 8025e5c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8025e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e60:	015a      	lsls	r2, r3, #5
 8025e62:	69fb      	ldr	r3, [r7, #28]
 8025e64:	4413      	add	r3, r2
 8025e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025e6a:	461a      	mov	r2, r3
 8025e6c:	2301      	movs	r3, #1
 8025e6e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8025e70:	687b      	ldr	r3, [r7, #4]
 8025e72:	691b      	ldr	r3, [r3, #16]
 8025e74:	2b01      	cmp	r3, #1
 8025e76:	d132      	bne.n	8025ede <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8025e78:	6879      	ldr	r1, [r7, #4]
 8025e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025e7c:	4613      	mov	r3, r2
 8025e7e:	00db      	lsls	r3, r3, #3
 8025e80:	1a9b      	subs	r3, r3, r2
 8025e82:	009b      	lsls	r3, r3, #2
 8025e84:	440b      	add	r3, r1
 8025e86:	3348      	adds	r3, #72	; 0x48
 8025e88:	6819      	ldr	r1, [r3, #0]
 8025e8a:	6878      	ldr	r0, [r7, #4]
 8025e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025e8e:	4613      	mov	r3, r2
 8025e90:	00db      	lsls	r3, r3, #3
 8025e92:	1a9b      	subs	r3, r3, r2
 8025e94:	009b      	lsls	r3, r3, #2
 8025e96:	4403      	add	r3, r0
 8025e98:	3344      	adds	r3, #68	; 0x44
 8025e9a:	681b      	ldr	r3, [r3, #0]
 8025e9c:	4419      	add	r1, r3
 8025e9e:	6878      	ldr	r0, [r7, #4]
 8025ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025ea2:	4613      	mov	r3, r2
 8025ea4:	00db      	lsls	r3, r3, #3
 8025ea6:	1a9b      	subs	r3, r3, r2
 8025ea8:	009b      	lsls	r3, r3, #2
 8025eaa:	4403      	add	r3, r0
 8025eac:	3348      	adds	r3, #72	; 0x48
 8025eae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8025eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025eb2:	2b00      	cmp	r3, #0
 8025eb4:	d113      	bne.n	8025ede <HAL_PCD_IRQHandler+0x31c>
 8025eb6:	6879      	ldr	r1, [r7, #4]
 8025eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025eba:	4613      	mov	r3, r2
 8025ebc:	00db      	lsls	r3, r3, #3
 8025ebe:	1a9b      	subs	r3, r3, r2
 8025ec0:	009b      	lsls	r3, r3, #2
 8025ec2:	440b      	add	r3, r1
 8025ec4:	3350      	adds	r3, #80	; 0x50
 8025ec6:	681b      	ldr	r3, [r3, #0]
 8025ec8:	2b00      	cmp	r3, #0
 8025eca:	d108      	bne.n	8025ede <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8025ecc:	687b      	ldr	r3, [r7, #4]
 8025ece:	6818      	ldr	r0, [r3, #0]
 8025ed0:	687b      	ldr	r3, [r7, #4]
 8025ed2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8025ed6:	461a      	mov	r2, r3
 8025ed8:	2101      	movs	r1, #1
 8025eda:	f005 f90f 	bl	802b0fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8025ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ee0:	b2db      	uxtb	r3, r3
 8025ee2:	4619      	mov	r1, r3
 8025ee4:	6878      	ldr	r0, [r7, #4]
 8025ee6:	f010 fdec 	bl	8036ac2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8025eea:	693b      	ldr	r3, [r7, #16]
 8025eec:	f003 0308 	and.w	r3, r3, #8
 8025ef0:	2b00      	cmp	r3, #0
 8025ef2:	d008      	beq.n	8025f06 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8025ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ef6:	015a      	lsls	r2, r3, #5
 8025ef8:	69fb      	ldr	r3, [r7, #28]
 8025efa:	4413      	add	r3, r2
 8025efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025f00:	461a      	mov	r2, r3
 8025f02:	2308      	movs	r3, #8
 8025f04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8025f06:	693b      	ldr	r3, [r7, #16]
 8025f08:	f003 0310 	and.w	r3, r3, #16
 8025f0c:	2b00      	cmp	r3, #0
 8025f0e:	d008      	beq.n	8025f22 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8025f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f12:	015a      	lsls	r2, r3, #5
 8025f14:	69fb      	ldr	r3, [r7, #28]
 8025f16:	4413      	add	r3, r2
 8025f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025f1c:	461a      	mov	r2, r3
 8025f1e:	2310      	movs	r3, #16
 8025f20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8025f22:	693b      	ldr	r3, [r7, #16]
 8025f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025f28:	2b00      	cmp	r3, #0
 8025f2a:	d008      	beq.n	8025f3e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8025f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f2e:	015a      	lsls	r2, r3, #5
 8025f30:	69fb      	ldr	r3, [r7, #28]
 8025f32:	4413      	add	r3, r2
 8025f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025f38:	461a      	mov	r2, r3
 8025f3a:	2340      	movs	r3, #64	; 0x40
 8025f3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8025f3e:	693b      	ldr	r3, [r7, #16]
 8025f40:	f003 0302 	and.w	r3, r3, #2
 8025f44:	2b00      	cmp	r3, #0
 8025f46:	d008      	beq.n	8025f5a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8025f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f4a:	015a      	lsls	r2, r3, #5
 8025f4c:	69fb      	ldr	r3, [r7, #28]
 8025f4e:	4413      	add	r3, r2
 8025f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025f54:	461a      	mov	r2, r3
 8025f56:	2302      	movs	r3, #2
 8025f58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8025f5a:	693b      	ldr	r3, [r7, #16]
 8025f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025f60:	2b00      	cmp	r3, #0
 8025f62:	d003      	beq.n	8025f6c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8025f64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025f66:	6878      	ldr	r0, [r7, #4]
 8025f68:	f000 fc1b 	bl	80267a2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8025f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f6e:	3301      	adds	r3, #1
 8025f70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8025f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f74:	085b      	lsrs	r3, r3, #1
 8025f76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8025f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f7a:	2b00      	cmp	r3, #0
 8025f7c:	f47f af49 	bne.w	8025e12 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8025f80:	687b      	ldr	r3, [r7, #4]
 8025f82:	681b      	ldr	r3, [r3, #0]
 8025f84:	4618      	mov	r0, r3
 8025f86:	f004 fff4 	bl	802af72 <USB_ReadInterrupts>
 8025f8a:	4603      	mov	r3, r0
 8025f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8025f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8025f94:	d122      	bne.n	8025fdc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8025f96:	69fb      	ldr	r3, [r7, #28]
 8025f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8025f9c:	685b      	ldr	r3, [r3, #4]
 8025f9e:	69fa      	ldr	r2, [r7, #28]
 8025fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8025fa4:	f023 0301 	bic.w	r3, r3, #1
 8025fa8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8025faa:	687b      	ldr	r3, [r7, #4]
 8025fac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8025fb0:	2b01      	cmp	r3, #1
 8025fb2:	d108      	bne.n	8025fc6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8025fb4:	687b      	ldr	r3, [r7, #4]
 8025fb6:	2200      	movs	r2, #0
 8025fb8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8025fbc:	2100      	movs	r1, #0
 8025fbe:	6878      	ldr	r0, [r7, #4]
 8025fc0:	f000 fe26 	bl	8026c10 <HAL_PCDEx_LPM_Callback>
 8025fc4:	e002      	b.n	8025fcc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8025fc6:	6878      	ldr	r0, [r7, #4]
 8025fc8:	f010 fdf2 	bl	8036bb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8025fcc:	687b      	ldr	r3, [r7, #4]
 8025fce:	681b      	ldr	r3, [r3, #0]
 8025fd0:	695a      	ldr	r2, [r3, #20]
 8025fd2:	687b      	ldr	r3, [r7, #4]
 8025fd4:	681b      	ldr	r3, [r3, #0]
 8025fd6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8025fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8025fdc:	687b      	ldr	r3, [r7, #4]
 8025fde:	681b      	ldr	r3, [r3, #0]
 8025fe0:	4618      	mov	r0, r3
 8025fe2:	f004 ffc6 	bl	802af72 <USB_ReadInterrupts>
 8025fe6:	4603      	mov	r3, r0
 8025fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8025fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8025ff0:	d112      	bne.n	8026018 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8025ff2:	69fb      	ldr	r3, [r7, #28]
 8025ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8025ff8:	689b      	ldr	r3, [r3, #8]
 8025ffa:	f003 0301 	and.w	r3, r3, #1
 8025ffe:	2b01      	cmp	r3, #1
 8026000:	d102      	bne.n	8026008 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8026002:	6878      	ldr	r0, [r7, #4]
 8026004:	f010 fdae 	bl	8036b64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8026008:	687b      	ldr	r3, [r7, #4]
 802600a:	681b      	ldr	r3, [r3, #0]
 802600c:	695a      	ldr	r2, [r3, #20]
 802600e:	687b      	ldr	r3, [r7, #4]
 8026010:	681b      	ldr	r3, [r3, #0]
 8026012:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8026016:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8026018:	687b      	ldr	r3, [r7, #4]
 802601a:	681b      	ldr	r3, [r3, #0]
 802601c:	4618      	mov	r0, r3
 802601e:	f004 ffa8 	bl	802af72 <USB_ReadInterrupts>
 8026022:	4603      	mov	r3, r0
 8026024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802602c:	f040 80c7 	bne.w	80261be <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8026030:	69fb      	ldr	r3, [r7, #28]
 8026032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026036:	685b      	ldr	r3, [r3, #4]
 8026038:	69fa      	ldr	r2, [r7, #28]
 802603a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802603e:	f023 0301 	bic.w	r3, r3, #1
 8026042:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8026044:	687b      	ldr	r3, [r7, #4]
 8026046:	681b      	ldr	r3, [r3, #0]
 8026048:	2110      	movs	r1, #16
 802604a:	4618      	mov	r0, r3
 802604c:	f004 f876 	bl	802a13c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8026050:	2300      	movs	r3, #0
 8026052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026054:	e056      	b.n	8026104 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8026056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026058:	015a      	lsls	r2, r3, #5
 802605a:	69fb      	ldr	r3, [r7, #28]
 802605c:	4413      	add	r3, r2
 802605e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026062:	461a      	mov	r2, r3
 8026064:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8026068:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802606c:	015a      	lsls	r2, r3, #5
 802606e:	69fb      	ldr	r3, [r7, #28]
 8026070:	4413      	add	r3, r2
 8026072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026076:	681b      	ldr	r3, [r3, #0]
 8026078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802607a:	0151      	lsls	r1, r2, #5
 802607c:	69fa      	ldr	r2, [r7, #28]
 802607e:	440a      	add	r2, r1
 8026080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8026084:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8026088:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 802608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802608c:	015a      	lsls	r2, r3, #5
 802608e:	69fb      	ldr	r3, [r7, #28]
 8026090:	4413      	add	r3, r2
 8026092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026096:	681b      	ldr	r3, [r3, #0]
 8026098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802609a:	0151      	lsls	r1, r2, #5
 802609c:	69fa      	ldr	r2, [r7, #28]
 802609e:	440a      	add	r2, r1
 80260a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80260a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80260a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80260aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260ac:	015a      	lsls	r2, r3, #5
 80260ae:	69fb      	ldr	r3, [r7, #28]
 80260b0:	4413      	add	r3, r2
 80260b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80260b6:	461a      	mov	r2, r3
 80260b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80260bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80260be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260c0:	015a      	lsls	r2, r3, #5
 80260c2:	69fb      	ldr	r3, [r7, #28]
 80260c4:	4413      	add	r3, r2
 80260c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80260ca:	681b      	ldr	r3, [r3, #0]
 80260cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80260ce:	0151      	lsls	r1, r2, #5
 80260d0:	69fa      	ldr	r2, [r7, #28]
 80260d2:	440a      	add	r2, r1
 80260d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80260d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80260dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80260de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260e0:	015a      	lsls	r2, r3, #5
 80260e2:	69fb      	ldr	r3, [r7, #28]
 80260e4:	4413      	add	r3, r2
 80260e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80260ea:	681b      	ldr	r3, [r3, #0]
 80260ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80260ee:	0151      	lsls	r1, r2, #5
 80260f0:	69fa      	ldr	r2, [r7, #28]
 80260f2:	440a      	add	r2, r1
 80260f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80260f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80260fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80260fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026100:	3301      	adds	r3, #1
 8026102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026104:	687b      	ldr	r3, [r7, #4]
 8026106:	685b      	ldr	r3, [r3, #4]
 8026108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802610a:	429a      	cmp	r2, r3
 802610c:	d3a3      	bcc.n	8026056 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 802610e:	69fb      	ldr	r3, [r7, #28]
 8026110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026114:	69db      	ldr	r3, [r3, #28]
 8026116:	69fa      	ldr	r2, [r7, #28]
 8026118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802611c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8026120:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8026122:	687b      	ldr	r3, [r7, #4]
 8026124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026126:	2b00      	cmp	r3, #0
 8026128:	d016      	beq.n	8026158 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 802612a:	69fb      	ldr	r3, [r7, #28]
 802612c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8026134:	69fa      	ldr	r2, [r7, #28]
 8026136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802613a:	f043 030b 	orr.w	r3, r3, #11
 802613e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8026142:	69fb      	ldr	r3, [r7, #28]
 8026144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802614a:	69fa      	ldr	r2, [r7, #28]
 802614c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026150:	f043 030b 	orr.w	r3, r3, #11
 8026154:	6453      	str	r3, [r2, #68]	; 0x44
 8026156:	e015      	b.n	8026184 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8026158:	69fb      	ldr	r3, [r7, #28]
 802615a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802615e:	695b      	ldr	r3, [r3, #20]
 8026160:	69fa      	ldr	r2, [r7, #28]
 8026162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802616a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 802616e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8026170:	69fb      	ldr	r3, [r7, #28]
 8026172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8026176:	691b      	ldr	r3, [r3, #16]
 8026178:	69fa      	ldr	r2, [r7, #28]
 802617a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802617e:	f043 030b 	orr.w	r3, r3, #11
 8026182:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8026184:	69fb      	ldr	r3, [r7, #28]
 8026186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802618a:	681b      	ldr	r3, [r3, #0]
 802618c:	69fa      	ldr	r2, [r7, #28]
 802618e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8026192:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8026196:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8026198:	687b      	ldr	r3, [r7, #4]
 802619a:	6818      	ldr	r0, [r3, #0]
 802619c:	687b      	ldr	r3, [r7, #4]
 802619e:	691b      	ldr	r3, [r3, #16]
 80261a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80261a2:	687b      	ldr	r3, [r7, #4]
 80261a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80261a8:	461a      	mov	r2, r3
 80261aa:	f004 ffa7 	bl	802b0fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80261ae:	687b      	ldr	r3, [r7, #4]
 80261b0:	681b      	ldr	r3, [r3, #0]
 80261b2:	695a      	ldr	r2, [r3, #20]
 80261b4:	687b      	ldr	r3, [r7, #4]
 80261b6:	681b      	ldr	r3, [r3, #0]
 80261b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80261bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80261be:	687b      	ldr	r3, [r7, #4]
 80261c0:	681b      	ldr	r3, [r3, #0]
 80261c2:	4618      	mov	r0, r3
 80261c4:	f004 fed5 	bl	802af72 <USB_ReadInterrupts>
 80261c8:	4603      	mov	r3, r0
 80261ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80261ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80261d2:	d124      	bne.n	802621e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80261d4:	687b      	ldr	r3, [r7, #4]
 80261d6:	681b      	ldr	r3, [r3, #0]
 80261d8:	4618      	mov	r0, r3
 80261da:	f004 ff6b 	bl	802b0b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80261de:	687b      	ldr	r3, [r7, #4]
 80261e0:	681b      	ldr	r3, [r3, #0]
 80261e2:	4618      	mov	r0, r3
 80261e4:	f004 f80b 	bl	802a1fe <USB_GetDevSpeed>
 80261e8:	4603      	mov	r3, r0
 80261ea:	461a      	mov	r2, r3
 80261ec:	687b      	ldr	r3, [r7, #4]
 80261ee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80261f0:	687b      	ldr	r3, [r7, #4]
 80261f2:	681c      	ldr	r4, [r3, #0]
 80261f4:	f001 f932 	bl	802745c <HAL_RCC_GetHCLKFreq>
 80261f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80261fa:	687b      	ldr	r3, [r7, #4]
 80261fc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80261fe:	b2db      	uxtb	r3, r3
 8026200:	461a      	mov	r2, r3
 8026202:	4620      	mov	r0, r4
 8026204:	f003 fd48 	bl	8029c98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8026208:	6878      	ldr	r0, [r7, #4]
 802620a:	f010 fc82 	bl	8036b12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 802620e:	687b      	ldr	r3, [r7, #4]
 8026210:	681b      	ldr	r3, [r3, #0]
 8026212:	695a      	ldr	r2, [r3, #20]
 8026214:	687b      	ldr	r3, [r7, #4]
 8026216:	681b      	ldr	r3, [r3, #0]
 8026218:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 802621c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 802621e:	687b      	ldr	r3, [r7, #4]
 8026220:	681b      	ldr	r3, [r3, #0]
 8026222:	4618      	mov	r0, r3
 8026224:	f004 fea5 	bl	802af72 <USB_ReadInterrupts>
 8026228:	4603      	mov	r3, r0
 802622a:	f003 0308 	and.w	r3, r3, #8
 802622e:	2b08      	cmp	r3, #8
 8026230:	d10a      	bne.n	8026248 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8026232:	6878      	ldr	r0, [r7, #4]
 8026234:	f010 fc5f 	bl	8036af6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8026238:	687b      	ldr	r3, [r7, #4]
 802623a:	681b      	ldr	r3, [r3, #0]
 802623c:	695a      	ldr	r2, [r3, #20]
 802623e:	687b      	ldr	r3, [r7, #4]
 8026240:	681b      	ldr	r3, [r3, #0]
 8026242:	f002 0208 	and.w	r2, r2, #8
 8026246:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8026248:	687b      	ldr	r3, [r7, #4]
 802624a:	681b      	ldr	r3, [r3, #0]
 802624c:	4618      	mov	r0, r3
 802624e:	f004 fe90 	bl	802af72 <USB_ReadInterrupts>
 8026252:	4603      	mov	r3, r0
 8026254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8026258:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802625c:	d10f      	bne.n	802627e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 802625e:	2300      	movs	r3, #0
 8026260:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8026262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026264:	b2db      	uxtb	r3, r3
 8026266:	4619      	mov	r1, r3
 8026268:	6878      	ldr	r0, [r7, #4]
 802626a:	f010 fcc1 	bl	8036bf0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 802626e:	687b      	ldr	r3, [r7, #4]
 8026270:	681b      	ldr	r3, [r3, #0]
 8026272:	695a      	ldr	r2, [r3, #20]
 8026274:	687b      	ldr	r3, [r7, #4]
 8026276:	681b      	ldr	r3, [r3, #0]
 8026278:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 802627c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 802627e:	687b      	ldr	r3, [r7, #4]
 8026280:	681b      	ldr	r3, [r3, #0]
 8026282:	4618      	mov	r0, r3
 8026284:	f004 fe75 	bl	802af72 <USB_ReadInterrupts>
 8026288:	4603      	mov	r3, r0
 802628a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802628e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8026292:	d10f      	bne.n	80262b4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8026294:	2300      	movs	r3, #0
 8026296:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8026298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802629a:	b2db      	uxtb	r3, r3
 802629c:	4619      	mov	r1, r3
 802629e:	6878      	ldr	r0, [r7, #4]
 80262a0:	f010 fc94 	bl	8036bcc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80262a4:	687b      	ldr	r3, [r7, #4]
 80262a6:	681b      	ldr	r3, [r3, #0]
 80262a8:	695a      	ldr	r2, [r3, #20]
 80262aa:	687b      	ldr	r3, [r7, #4]
 80262ac:	681b      	ldr	r3, [r3, #0]
 80262ae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80262b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80262b4:	687b      	ldr	r3, [r7, #4]
 80262b6:	681b      	ldr	r3, [r3, #0]
 80262b8:	4618      	mov	r0, r3
 80262ba:	f004 fe5a 	bl	802af72 <USB_ReadInterrupts>
 80262be:	4603      	mov	r3, r0
 80262c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80262c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80262c8:	d10a      	bne.n	80262e0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80262ca:	6878      	ldr	r0, [r7, #4]
 80262cc:	f010 fca2 	bl	8036c14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80262d0:	687b      	ldr	r3, [r7, #4]
 80262d2:	681b      	ldr	r3, [r3, #0]
 80262d4:	695a      	ldr	r2, [r3, #20]
 80262d6:	687b      	ldr	r3, [r7, #4]
 80262d8:	681b      	ldr	r3, [r3, #0]
 80262da:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80262de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80262e0:	687b      	ldr	r3, [r7, #4]
 80262e2:	681b      	ldr	r3, [r3, #0]
 80262e4:	4618      	mov	r0, r3
 80262e6:	f004 fe44 	bl	802af72 <USB_ReadInterrupts>
 80262ea:	4603      	mov	r3, r0
 80262ec:	f003 0304 	and.w	r3, r3, #4
 80262f0:	2b04      	cmp	r3, #4
 80262f2:	d115      	bne.n	8026320 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80262f4:	687b      	ldr	r3, [r7, #4]
 80262f6:	681b      	ldr	r3, [r3, #0]
 80262f8:	685b      	ldr	r3, [r3, #4]
 80262fa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80262fc:	69bb      	ldr	r3, [r7, #24]
 80262fe:	f003 0304 	and.w	r3, r3, #4
 8026302:	2b00      	cmp	r3, #0
 8026304:	d002      	beq.n	802630c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8026306:	6878      	ldr	r0, [r7, #4]
 8026308:	f010 fc92 	bl	8036c30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 802630c:	687b      	ldr	r3, [r7, #4]
 802630e:	681b      	ldr	r3, [r3, #0]
 8026310:	6859      	ldr	r1, [r3, #4]
 8026312:	687b      	ldr	r3, [r7, #4]
 8026314:	681b      	ldr	r3, [r3, #0]
 8026316:	69ba      	ldr	r2, [r7, #24]
 8026318:	430a      	orrs	r2, r1
 802631a:	605a      	str	r2, [r3, #4]
 802631c:	e000      	b.n	8026320 <HAL_PCD_IRQHandler+0x75e>
      return;
 802631e:	bf00      	nop
    }
  }
}
 8026320:	3734      	adds	r7, #52	; 0x34
 8026322:	46bd      	mov	sp, r7
 8026324:	bd90      	pop	{r4, r7, pc}

08026326 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8026326:	b580      	push	{r7, lr}
 8026328:	b082      	sub	sp, #8
 802632a:	af00      	add	r7, sp, #0
 802632c:	6078      	str	r0, [r7, #4]
 802632e:	460b      	mov	r3, r1
 8026330:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8026332:	687b      	ldr	r3, [r7, #4]
 8026334:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8026338:	2b01      	cmp	r3, #1
 802633a:	d101      	bne.n	8026340 <HAL_PCD_SetAddress+0x1a>
 802633c:	2302      	movs	r3, #2
 802633e:	e013      	b.n	8026368 <HAL_PCD_SetAddress+0x42>
 8026340:	687b      	ldr	r3, [r7, #4]
 8026342:	2201      	movs	r2, #1
 8026344:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8026348:	687b      	ldr	r3, [r7, #4]
 802634a:	78fa      	ldrb	r2, [r7, #3]
 802634c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8026350:	687b      	ldr	r3, [r7, #4]
 8026352:	681b      	ldr	r3, [r3, #0]
 8026354:	78fa      	ldrb	r2, [r7, #3]
 8026356:	4611      	mov	r1, r2
 8026358:	4618      	mov	r0, r3
 802635a:	f004 fda2 	bl	802aea2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 802635e:	687b      	ldr	r3, [r7, #4]
 8026360:	2200      	movs	r2, #0
 8026362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8026366:	2300      	movs	r3, #0
}
 8026368:	4618      	mov	r0, r3
 802636a:	3708      	adds	r7, #8
 802636c:	46bd      	mov	sp, r7
 802636e:	bd80      	pop	{r7, pc}

08026370 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8026370:	b580      	push	{r7, lr}
 8026372:	b084      	sub	sp, #16
 8026374:	af00      	add	r7, sp, #0
 8026376:	6078      	str	r0, [r7, #4]
 8026378:	4608      	mov	r0, r1
 802637a:	4611      	mov	r1, r2
 802637c:	461a      	mov	r2, r3
 802637e:	4603      	mov	r3, r0
 8026380:	70fb      	strb	r3, [r7, #3]
 8026382:	460b      	mov	r3, r1
 8026384:	803b      	strh	r3, [r7, #0]
 8026386:	4613      	mov	r3, r2
 8026388:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 802638a:	2300      	movs	r3, #0
 802638c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 802638e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8026392:	2b00      	cmp	r3, #0
 8026394:	da0f      	bge.n	80263b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8026396:	78fb      	ldrb	r3, [r7, #3]
 8026398:	f003 020f 	and.w	r2, r3, #15
 802639c:	4613      	mov	r3, r2
 802639e:	00db      	lsls	r3, r3, #3
 80263a0:	1a9b      	subs	r3, r3, r2
 80263a2:	009b      	lsls	r3, r3, #2
 80263a4:	3338      	adds	r3, #56	; 0x38
 80263a6:	687a      	ldr	r2, [r7, #4]
 80263a8:	4413      	add	r3, r2
 80263aa:	3304      	adds	r3, #4
 80263ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80263ae:	68fb      	ldr	r3, [r7, #12]
 80263b0:	2201      	movs	r2, #1
 80263b2:	705a      	strb	r2, [r3, #1]
 80263b4:	e00f      	b.n	80263d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80263b6:	78fb      	ldrb	r3, [r7, #3]
 80263b8:	f003 020f 	and.w	r2, r3, #15
 80263bc:	4613      	mov	r3, r2
 80263be:	00db      	lsls	r3, r3, #3
 80263c0:	1a9b      	subs	r3, r3, r2
 80263c2:	009b      	lsls	r3, r3, #2
 80263c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80263c8:	687a      	ldr	r2, [r7, #4]
 80263ca:	4413      	add	r3, r2
 80263cc:	3304      	adds	r3, #4
 80263ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80263d0:	68fb      	ldr	r3, [r7, #12]
 80263d2:	2200      	movs	r2, #0
 80263d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80263d6:	78fb      	ldrb	r3, [r7, #3]
 80263d8:	f003 030f 	and.w	r3, r3, #15
 80263dc:	b2da      	uxtb	r2, r3
 80263de:	68fb      	ldr	r3, [r7, #12]
 80263e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80263e2:	883a      	ldrh	r2, [r7, #0]
 80263e4:	68fb      	ldr	r3, [r7, #12]
 80263e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80263e8:	68fb      	ldr	r3, [r7, #12]
 80263ea:	78ba      	ldrb	r2, [r7, #2]
 80263ec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80263ee:	68fb      	ldr	r3, [r7, #12]
 80263f0:	785b      	ldrb	r3, [r3, #1]
 80263f2:	2b00      	cmp	r3, #0
 80263f4:	d004      	beq.n	8026400 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80263f6:	68fb      	ldr	r3, [r7, #12]
 80263f8:	781b      	ldrb	r3, [r3, #0]
 80263fa:	b29a      	uxth	r2, r3
 80263fc:	68fb      	ldr	r3, [r7, #12]
 80263fe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8026400:	78bb      	ldrb	r3, [r7, #2]
 8026402:	2b02      	cmp	r3, #2
 8026404:	d102      	bne.n	802640c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8026406:	68fb      	ldr	r3, [r7, #12]
 8026408:	2200      	movs	r2, #0
 802640a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 802640c:	687b      	ldr	r3, [r7, #4]
 802640e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8026412:	2b01      	cmp	r3, #1
 8026414:	d101      	bne.n	802641a <HAL_PCD_EP_Open+0xaa>
 8026416:	2302      	movs	r3, #2
 8026418:	e00e      	b.n	8026438 <HAL_PCD_EP_Open+0xc8>
 802641a:	687b      	ldr	r3, [r7, #4]
 802641c:	2201      	movs	r2, #1
 802641e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8026422:	687b      	ldr	r3, [r7, #4]
 8026424:	681b      	ldr	r3, [r3, #0]
 8026426:	68f9      	ldr	r1, [r7, #12]
 8026428:	4618      	mov	r0, r3
 802642a:	f003 ff0d 	bl	802a248 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 802642e:	687b      	ldr	r3, [r7, #4]
 8026430:	2200      	movs	r2, #0
 8026432:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8026436:	7afb      	ldrb	r3, [r7, #11]
}
 8026438:	4618      	mov	r0, r3
 802643a:	3710      	adds	r7, #16
 802643c:	46bd      	mov	sp, r7
 802643e:	bd80      	pop	{r7, pc}

08026440 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8026440:	b580      	push	{r7, lr}
 8026442:	b084      	sub	sp, #16
 8026444:	af00      	add	r7, sp, #0
 8026446:	6078      	str	r0, [r7, #4]
 8026448:	460b      	mov	r3, r1
 802644a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 802644c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8026450:	2b00      	cmp	r3, #0
 8026452:	da0f      	bge.n	8026474 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8026454:	78fb      	ldrb	r3, [r7, #3]
 8026456:	f003 020f 	and.w	r2, r3, #15
 802645a:	4613      	mov	r3, r2
 802645c:	00db      	lsls	r3, r3, #3
 802645e:	1a9b      	subs	r3, r3, r2
 8026460:	009b      	lsls	r3, r3, #2
 8026462:	3338      	adds	r3, #56	; 0x38
 8026464:	687a      	ldr	r2, [r7, #4]
 8026466:	4413      	add	r3, r2
 8026468:	3304      	adds	r3, #4
 802646a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802646c:	68fb      	ldr	r3, [r7, #12]
 802646e:	2201      	movs	r2, #1
 8026470:	705a      	strb	r2, [r3, #1]
 8026472:	e00f      	b.n	8026494 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8026474:	78fb      	ldrb	r3, [r7, #3]
 8026476:	f003 020f 	and.w	r2, r3, #15
 802647a:	4613      	mov	r3, r2
 802647c:	00db      	lsls	r3, r3, #3
 802647e:	1a9b      	subs	r3, r3, r2
 8026480:	009b      	lsls	r3, r3, #2
 8026482:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8026486:	687a      	ldr	r2, [r7, #4]
 8026488:	4413      	add	r3, r2
 802648a:	3304      	adds	r3, #4
 802648c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 802648e:	68fb      	ldr	r3, [r7, #12]
 8026490:	2200      	movs	r2, #0
 8026492:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8026494:	78fb      	ldrb	r3, [r7, #3]
 8026496:	f003 030f 	and.w	r3, r3, #15
 802649a:	b2da      	uxtb	r2, r3
 802649c:	68fb      	ldr	r3, [r7, #12]
 802649e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80264a0:	687b      	ldr	r3, [r7, #4]
 80264a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80264a6:	2b01      	cmp	r3, #1
 80264a8:	d101      	bne.n	80264ae <HAL_PCD_EP_Close+0x6e>
 80264aa:	2302      	movs	r3, #2
 80264ac:	e00e      	b.n	80264cc <HAL_PCD_EP_Close+0x8c>
 80264ae:	687b      	ldr	r3, [r7, #4]
 80264b0:	2201      	movs	r2, #1
 80264b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80264b6:	687b      	ldr	r3, [r7, #4]
 80264b8:	681b      	ldr	r3, [r3, #0]
 80264ba:	68f9      	ldr	r1, [r7, #12]
 80264bc:	4618      	mov	r0, r3
 80264be:	f003 ff4b 	bl	802a358 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80264c2:	687b      	ldr	r3, [r7, #4]
 80264c4:	2200      	movs	r2, #0
 80264c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80264ca:	2300      	movs	r3, #0
}
 80264cc:	4618      	mov	r0, r3
 80264ce:	3710      	adds	r7, #16
 80264d0:	46bd      	mov	sp, r7
 80264d2:	bd80      	pop	{r7, pc}

080264d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80264d4:	b580      	push	{r7, lr}
 80264d6:	b086      	sub	sp, #24
 80264d8:	af00      	add	r7, sp, #0
 80264da:	60f8      	str	r0, [r7, #12]
 80264dc:	607a      	str	r2, [r7, #4]
 80264de:	603b      	str	r3, [r7, #0]
 80264e0:	460b      	mov	r3, r1
 80264e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80264e4:	7afb      	ldrb	r3, [r7, #11]
 80264e6:	f003 020f 	and.w	r2, r3, #15
 80264ea:	4613      	mov	r3, r2
 80264ec:	00db      	lsls	r3, r3, #3
 80264ee:	1a9b      	subs	r3, r3, r2
 80264f0:	009b      	lsls	r3, r3, #2
 80264f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80264f6:	68fa      	ldr	r2, [r7, #12]
 80264f8:	4413      	add	r3, r2
 80264fa:	3304      	adds	r3, #4
 80264fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80264fe:	697b      	ldr	r3, [r7, #20]
 8026500:	687a      	ldr	r2, [r7, #4]
 8026502:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8026504:	697b      	ldr	r3, [r7, #20]
 8026506:	683a      	ldr	r2, [r7, #0]
 8026508:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 802650a:	697b      	ldr	r3, [r7, #20]
 802650c:	2200      	movs	r2, #0
 802650e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8026510:	697b      	ldr	r3, [r7, #20]
 8026512:	2200      	movs	r2, #0
 8026514:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8026516:	7afb      	ldrb	r3, [r7, #11]
 8026518:	f003 030f 	and.w	r3, r3, #15
 802651c:	b2da      	uxtb	r2, r3
 802651e:	697b      	ldr	r3, [r7, #20]
 8026520:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8026522:	68fb      	ldr	r3, [r7, #12]
 8026524:	691b      	ldr	r3, [r3, #16]
 8026526:	2b01      	cmp	r3, #1
 8026528:	d102      	bne.n	8026530 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 802652a:	687a      	ldr	r2, [r7, #4]
 802652c:	697b      	ldr	r3, [r7, #20]
 802652e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8026530:	7afb      	ldrb	r3, [r7, #11]
 8026532:	f003 030f 	and.w	r3, r3, #15
 8026536:	2b00      	cmp	r3, #0
 8026538:	d109      	bne.n	802654e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 802653a:	68fb      	ldr	r3, [r7, #12]
 802653c:	6818      	ldr	r0, [r3, #0]
 802653e:	68fb      	ldr	r3, [r7, #12]
 8026540:	691b      	ldr	r3, [r3, #16]
 8026542:	b2db      	uxtb	r3, r3
 8026544:	461a      	mov	r2, r3
 8026546:	6979      	ldr	r1, [r7, #20]
 8026548:	f004 fa26 	bl	802a998 <USB_EP0StartXfer>
 802654c:	e008      	b.n	8026560 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 802654e:	68fb      	ldr	r3, [r7, #12]
 8026550:	6818      	ldr	r0, [r3, #0]
 8026552:	68fb      	ldr	r3, [r7, #12]
 8026554:	691b      	ldr	r3, [r3, #16]
 8026556:	b2db      	uxtb	r3, r3
 8026558:	461a      	mov	r2, r3
 802655a:	6979      	ldr	r1, [r7, #20]
 802655c:	f003 ffd8 	bl	802a510 <USB_EPStartXfer>
  }

  return HAL_OK;
 8026560:	2300      	movs	r3, #0
}
 8026562:	4618      	mov	r0, r3
 8026564:	3718      	adds	r7, #24
 8026566:	46bd      	mov	sp, r7
 8026568:	bd80      	pop	{r7, pc}

0802656a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802656a:	b480      	push	{r7}
 802656c:	b083      	sub	sp, #12
 802656e:	af00      	add	r7, sp, #0
 8026570:	6078      	str	r0, [r7, #4]
 8026572:	460b      	mov	r3, r1
 8026574:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8026576:	78fb      	ldrb	r3, [r7, #3]
 8026578:	f003 020f 	and.w	r2, r3, #15
 802657c:	6879      	ldr	r1, [r7, #4]
 802657e:	4613      	mov	r3, r2
 8026580:	00db      	lsls	r3, r3, #3
 8026582:	1a9b      	subs	r3, r3, r2
 8026584:	009b      	lsls	r3, r3, #2
 8026586:	440b      	add	r3, r1
 8026588:	f503 7305 	add.w	r3, r3, #532	; 0x214
 802658c:	681b      	ldr	r3, [r3, #0]
}
 802658e:	4618      	mov	r0, r3
 8026590:	370c      	adds	r7, #12
 8026592:	46bd      	mov	sp, r7
 8026594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026598:	4770      	bx	lr

0802659a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 802659a:	b580      	push	{r7, lr}
 802659c:	b086      	sub	sp, #24
 802659e:	af00      	add	r7, sp, #0
 80265a0:	60f8      	str	r0, [r7, #12]
 80265a2:	607a      	str	r2, [r7, #4]
 80265a4:	603b      	str	r3, [r7, #0]
 80265a6:	460b      	mov	r3, r1
 80265a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80265aa:	7afb      	ldrb	r3, [r7, #11]
 80265ac:	f003 020f 	and.w	r2, r3, #15
 80265b0:	4613      	mov	r3, r2
 80265b2:	00db      	lsls	r3, r3, #3
 80265b4:	1a9b      	subs	r3, r3, r2
 80265b6:	009b      	lsls	r3, r3, #2
 80265b8:	3338      	adds	r3, #56	; 0x38
 80265ba:	68fa      	ldr	r2, [r7, #12]
 80265bc:	4413      	add	r3, r2
 80265be:	3304      	adds	r3, #4
 80265c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80265c2:	697b      	ldr	r3, [r7, #20]
 80265c4:	687a      	ldr	r2, [r7, #4]
 80265c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80265c8:	697b      	ldr	r3, [r7, #20]
 80265ca:	683a      	ldr	r2, [r7, #0]
 80265cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80265ce:	697b      	ldr	r3, [r7, #20]
 80265d0:	2200      	movs	r2, #0
 80265d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80265d4:	697b      	ldr	r3, [r7, #20]
 80265d6:	2201      	movs	r2, #1
 80265d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80265da:	7afb      	ldrb	r3, [r7, #11]
 80265dc:	f003 030f 	and.w	r3, r3, #15
 80265e0:	b2da      	uxtb	r2, r3
 80265e2:	697b      	ldr	r3, [r7, #20]
 80265e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80265e6:	68fb      	ldr	r3, [r7, #12]
 80265e8:	691b      	ldr	r3, [r3, #16]
 80265ea:	2b01      	cmp	r3, #1
 80265ec:	d102      	bne.n	80265f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80265ee:	687a      	ldr	r2, [r7, #4]
 80265f0:	697b      	ldr	r3, [r7, #20]
 80265f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80265f4:	7afb      	ldrb	r3, [r7, #11]
 80265f6:	f003 030f 	and.w	r3, r3, #15
 80265fa:	2b00      	cmp	r3, #0
 80265fc:	d109      	bne.n	8026612 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80265fe:	68fb      	ldr	r3, [r7, #12]
 8026600:	6818      	ldr	r0, [r3, #0]
 8026602:	68fb      	ldr	r3, [r7, #12]
 8026604:	691b      	ldr	r3, [r3, #16]
 8026606:	b2db      	uxtb	r3, r3
 8026608:	461a      	mov	r2, r3
 802660a:	6979      	ldr	r1, [r7, #20]
 802660c:	f004 f9c4 	bl	802a998 <USB_EP0StartXfer>
 8026610:	e008      	b.n	8026624 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8026612:	68fb      	ldr	r3, [r7, #12]
 8026614:	6818      	ldr	r0, [r3, #0]
 8026616:	68fb      	ldr	r3, [r7, #12]
 8026618:	691b      	ldr	r3, [r3, #16]
 802661a:	b2db      	uxtb	r3, r3
 802661c:	461a      	mov	r2, r3
 802661e:	6979      	ldr	r1, [r7, #20]
 8026620:	f003 ff76 	bl	802a510 <USB_EPStartXfer>
  }

  return HAL_OK;
 8026624:	2300      	movs	r3, #0
}
 8026626:	4618      	mov	r0, r3
 8026628:	3718      	adds	r7, #24
 802662a:	46bd      	mov	sp, r7
 802662c:	bd80      	pop	{r7, pc}

0802662e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802662e:	b580      	push	{r7, lr}
 8026630:	b084      	sub	sp, #16
 8026632:	af00      	add	r7, sp, #0
 8026634:	6078      	str	r0, [r7, #4]
 8026636:	460b      	mov	r3, r1
 8026638:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 802663a:	78fb      	ldrb	r3, [r7, #3]
 802663c:	f003 020f 	and.w	r2, r3, #15
 8026640:	687b      	ldr	r3, [r7, #4]
 8026642:	685b      	ldr	r3, [r3, #4]
 8026644:	429a      	cmp	r2, r3
 8026646:	d901      	bls.n	802664c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8026648:	2301      	movs	r3, #1
 802664a:	e050      	b.n	80266ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 802664c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8026650:	2b00      	cmp	r3, #0
 8026652:	da0f      	bge.n	8026674 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8026654:	78fb      	ldrb	r3, [r7, #3]
 8026656:	f003 020f 	and.w	r2, r3, #15
 802665a:	4613      	mov	r3, r2
 802665c:	00db      	lsls	r3, r3, #3
 802665e:	1a9b      	subs	r3, r3, r2
 8026660:	009b      	lsls	r3, r3, #2
 8026662:	3338      	adds	r3, #56	; 0x38
 8026664:	687a      	ldr	r2, [r7, #4]
 8026666:	4413      	add	r3, r2
 8026668:	3304      	adds	r3, #4
 802666a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802666c:	68fb      	ldr	r3, [r7, #12]
 802666e:	2201      	movs	r2, #1
 8026670:	705a      	strb	r2, [r3, #1]
 8026672:	e00d      	b.n	8026690 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8026674:	78fa      	ldrb	r2, [r7, #3]
 8026676:	4613      	mov	r3, r2
 8026678:	00db      	lsls	r3, r3, #3
 802667a:	1a9b      	subs	r3, r3, r2
 802667c:	009b      	lsls	r3, r3, #2
 802667e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8026682:	687a      	ldr	r2, [r7, #4]
 8026684:	4413      	add	r3, r2
 8026686:	3304      	adds	r3, #4
 8026688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 802668a:	68fb      	ldr	r3, [r7, #12]
 802668c:	2200      	movs	r2, #0
 802668e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8026690:	68fb      	ldr	r3, [r7, #12]
 8026692:	2201      	movs	r2, #1
 8026694:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8026696:	78fb      	ldrb	r3, [r7, #3]
 8026698:	f003 030f 	and.w	r3, r3, #15
 802669c:	b2da      	uxtb	r2, r3
 802669e:	68fb      	ldr	r3, [r7, #12]
 80266a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80266a2:	687b      	ldr	r3, [r7, #4]
 80266a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80266a8:	2b01      	cmp	r3, #1
 80266aa:	d101      	bne.n	80266b0 <HAL_PCD_EP_SetStall+0x82>
 80266ac:	2302      	movs	r3, #2
 80266ae:	e01e      	b.n	80266ee <HAL_PCD_EP_SetStall+0xc0>
 80266b0:	687b      	ldr	r3, [r7, #4]
 80266b2:	2201      	movs	r2, #1
 80266b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80266b8:	687b      	ldr	r3, [r7, #4]
 80266ba:	681b      	ldr	r3, [r3, #0]
 80266bc:	68f9      	ldr	r1, [r7, #12]
 80266be:	4618      	mov	r0, r3
 80266c0:	f004 fb1b 	bl	802acfa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80266c4:	78fb      	ldrb	r3, [r7, #3]
 80266c6:	f003 030f 	and.w	r3, r3, #15
 80266ca:	2b00      	cmp	r3, #0
 80266cc:	d10a      	bne.n	80266e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80266ce:	687b      	ldr	r3, [r7, #4]
 80266d0:	6818      	ldr	r0, [r3, #0]
 80266d2:	687b      	ldr	r3, [r7, #4]
 80266d4:	691b      	ldr	r3, [r3, #16]
 80266d6:	b2d9      	uxtb	r1, r3
 80266d8:	687b      	ldr	r3, [r7, #4]
 80266da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80266de:	461a      	mov	r2, r3
 80266e0:	f004 fd0c 	bl	802b0fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80266e4:	687b      	ldr	r3, [r7, #4]
 80266e6:	2200      	movs	r2, #0
 80266e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80266ec:	2300      	movs	r3, #0
}
 80266ee:	4618      	mov	r0, r3
 80266f0:	3710      	adds	r7, #16
 80266f2:	46bd      	mov	sp, r7
 80266f4:	bd80      	pop	{r7, pc}

080266f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80266f6:	b580      	push	{r7, lr}
 80266f8:	b084      	sub	sp, #16
 80266fa:	af00      	add	r7, sp, #0
 80266fc:	6078      	str	r0, [r7, #4]
 80266fe:	460b      	mov	r3, r1
 8026700:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8026702:	78fb      	ldrb	r3, [r7, #3]
 8026704:	f003 020f 	and.w	r2, r3, #15
 8026708:	687b      	ldr	r3, [r7, #4]
 802670a:	685b      	ldr	r3, [r3, #4]
 802670c:	429a      	cmp	r2, r3
 802670e:	d901      	bls.n	8026714 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8026710:	2301      	movs	r3, #1
 8026712:	e042      	b.n	802679a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8026714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8026718:	2b00      	cmp	r3, #0
 802671a:	da0f      	bge.n	802673c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802671c:	78fb      	ldrb	r3, [r7, #3]
 802671e:	f003 020f 	and.w	r2, r3, #15
 8026722:	4613      	mov	r3, r2
 8026724:	00db      	lsls	r3, r3, #3
 8026726:	1a9b      	subs	r3, r3, r2
 8026728:	009b      	lsls	r3, r3, #2
 802672a:	3338      	adds	r3, #56	; 0x38
 802672c:	687a      	ldr	r2, [r7, #4]
 802672e:	4413      	add	r3, r2
 8026730:	3304      	adds	r3, #4
 8026732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8026734:	68fb      	ldr	r3, [r7, #12]
 8026736:	2201      	movs	r2, #1
 8026738:	705a      	strb	r2, [r3, #1]
 802673a:	e00f      	b.n	802675c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 802673c:	78fb      	ldrb	r3, [r7, #3]
 802673e:	f003 020f 	and.w	r2, r3, #15
 8026742:	4613      	mov	r3, r2
 8026744:	00db      	lsls	r3, r3, #3
 8026746:	1a9b      	subs	r3, r3, r2
 8026748:	009b      	lsls	r3, r3, #2
 802674a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 802674e:	687a      	ldr	r2, [r7, #4]
 8026750:	4413      	add	r3, r2
 8026752:	3304      	adds	r3, #4
 8026754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8026756:	68fb      	ldr	r3, [r7, #12]
 8026758:	2200      	movs	r2, #0
 802675a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 802675c:	68fb      	ldr	r3, [r7, #12]
 802675e:	2200      	movs	r2, #0
 8026760:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8026762:	78fb      	ldrb	r3, [r7, #3]
 8026764:	f003 030f 	and.w	r3, r3, #15
 8026768:	b2da      	uxtb	r2, r3
 802676a:	68fb      	ldr	r3, [r7, #12]
 802676c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 802676e:	687b      	ldr	r3, [r7, #4]
 8026770:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8026774:	2b01      	cmp	r3, #1
 8026776:	d101      	bne.n	802677c <HAL_PCD_EP_ClrStall+0x86>
 8026778:	2302      	movs	r3, #2
 802677a:	e00e      	b.n	802679a <HAL_PCD_EP_ClrStall+0xa4>
 802677c:	687b      	ldr	r3, [r7, #4]
 802677e:	2201      	movs	r2, #1
 8026780:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8026784:	687b      	ldr	r3, [r7, #4]
 8026786:	681b      	ldr	r3, [r3, #0]
 8026788:	68f9      	ldr	r1, [r7, #12]
 802678a:	4618      	mov	r0, r3
 802678c:	f004 fb23 	bl	802add6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8026790:	687b      	ldr	r3, [r7, #4]
 8026792:	2200      	movs	r2, #0
 8026794:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8026798:	2300      	movs	r3, #0
}
 802679a:	4618      	mov	r0, r3
 802679c:	3710      	adds	r7, #16
 802679e:	46bd      	mov	sp, r7
 80267a0:	bd80      	pop	{r7, pc}

080267a2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80267a2:	b580      	push	{r7, lr}
 80267a4:	b08a      	sub	sp, #40	; 0x28
 80267a6:	af02      	add	r7, sp, #8
 80267a8:	6078      	str	r0, [r7, #4]
 80267aa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80267ac:	687b      	ldr	r3, [r7, #4]
 80267ae:	681b      	ldr	r3, [r3, #0]
 80267b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80267b2:	697b      	ldr	r3, [r7, #20]
 80267b4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80267b6:	683a      	ldr	r2, [r7, #0]
 80267b8:	4613      	mov	r3, r2
 80267ba:	00db      	lsls	r3, r3, #3
 80267bc:	1a9b      	subs	r3, r3, r2
 80267be:	009b      	lsls	r3, r3, #2
 80267c0:	3338      	adds	r3, #56	; 0x38
 80267c2:	687a      	ldr	r2, [r7, #4]
 80267c4:	4413      	add	r3, r2
 80267c6:	3304      	adds	r3, #4
 80267c8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80267ca:	68fb      	ldr	r3, [r7, #12]
 80267cc:	699a      	ldr	r2, [r3, #24]
 80267ce:	68fb      	ldr	r3, [r7, #12]
 80267d0:	695b      	ldr	r3, [r3, #20]
 80267d2:	429a      	cmp	r2, r3
 80267d4:	d901      	bls.n	80267da <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80267d6:	2301      	movs	r3, #1
 80267d8:	e06c      	b.n	80268b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80267da:	68fb      	ldr	r3, [r7, #12]
 80267dc:	695a      	ldr	r2, [r3, #20]
 80267de:	68fb      	ldr	r3, [r7, #12]
 80267e0:	699b      	ldr	r3, [r3, #24]
 80267e2:	1ad3      	subs	r3, r2, r3
 80267e4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80267e6:	68fb      	ldr	r3, [r7, #12]
 80267e8:	689b      	ldr	r3, [r3, #8]
 80267ea:	69fa      	ldr	r2, [r7, #28]
 80267ec:	429a      	cmp	r2, r3
 80267ee:	d902      	bls.n	80267f6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80267f0:	68fb      	ldr	r3, [r7, #12]
 80267f2:	689b      	ldr	r3, [r3, #8]
 80267f4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80267f6:	69fb      	ldr	r3, [r7, #28]
 80267f8:	3303      	adds	r3, #3
 80267fa:	089b      	lsrs	r3, r3, #2
 80267fc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80267fe:	e02b      	b.n	8026858 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8026800:	68fb      	ldr	r3, [r7, #12]
 8026802:	695a      	ldr	r2, [r3, #20]
 8026804:	68fb      	ldr	r3, [r7, #12]
 8026806:	699b      	ldr	r3, [r3, #24]
 8026808:	1ad3      	subs	r3, r2, r3
 802680a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 802680c:	68fb      	ldr	r3, [r7, #12]
 802680e:	689b      	ldr	r3, [r3, #8]
 8026810:	69fa      	ldr	r2, [r7, #28]
 8026812:	429a      	cmp	r2, r3
 8026814:	d902      	bls.n	802681c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8026816:	68fb      	ldr	r3, [r7, #12]
 8026818:	689b      	ldr	r3, [r3, #8]
 802681a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 802681c:	69fb      	ldr	r3, [r7, #28]
 802681e:	3303      	adds	r3, #3
 8026820:	089b      	lsrs	r3, r3, #2
 8026822:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8026824:	68fb      	ldr	r3, [r7, #12]
 8026826:	68d9      	ldr	r1, [r3, #12]
 8026828:	683b      	ldr	r3, [r7, #0]
 802682a:	b2da      	uxtb	r2, r3
 802682c:	69fb      	ldr	r3, [r7, #28]
 802682e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8026830:	687b      	ldr	r3, [r7, #4]
 8026832:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8026834:	b2db      	uxtb	r3, r3
 8026836:	9300      	str	r3, [sp, #0]
 8026838:	4603      	mov	r3, r0
 802683a:	6978      	ldr	r0, [r7, #20]
 802683c:	f004 f9ff 	bl	802ac3e <USB_WritePacket>

    ep->xfer_buff  += len;
 8026840:	68fb      	ldr	r3, [r7, #12]
 8026842:	68da      	ldr	r2, [r3, #12]
 8026844:	69fb      	ldr	r3, [r7, #28]
 8026846:	441a      	add	r2, r3
 8026848:	68fb      	ldr	r3, [r7, #12]
 802684a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 802684c:	68fb      	ldr	r3, [r7, #12]
 802684e:	699a      	ldr	r2, [r3, #24]
 8026850:	69fb      	ldr	r3, [r7, #28]
 8026852:	441a      	add	r2, r3
 8026854:	68fb      	ldr	r3, [r7, #12]
 8026856:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8026858:	683b      	ldr	r3, [r7, #0]
 802685a:	015a      	lsls	r2, r3, #5
 802685c:	693b      	ldr	r3, [r7, #16]
 802685e:	4413      	add	r3, r2
 8026860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8026864:	699b      	ldr	r3, [r3, #24]
 8026866:	b29b      	uxth	r3, r3
 8026868:	69ba      	ldr	r2, [r7, #24]
 802686a:	429a      	cmp	r2, r3
 802686c:	d809      	bhi.n	8026882 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 802686e:	68fb      	ldr	r3, [r7, #12]
 8026870:	699a      	ldr	r2, [r3, #24]
 8026872:	68fb      	ldr	r3, [r7, #12]
 8026874:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8026876:	429a      	cmp	r2, r3
 8026878:	d203      	bcs.n	8026882 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 802687a:	68fb      	ldr	r3, [r7, #12]
 802687c:	695b      	ldr	r3, [r3, #20]
 802687e:	2b00      	cmp	r3, #0
 8026880:	d1be      	bne.n	8026800 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8026882:	68fb      	ldr	r3, [r7, #12]
 8026884:	695a      	ldr	r2, [r3, #20]
 8026886:	68fb      	ldr	r3, [r7, #12]
 8026888:	699b      	ldr	r3, [r3, #24]
 802688a:	429a      	cmp	r2, r3
 802688c:	d811      	bhi.n	80268b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 802688e:	683b      	ldr	r3, [r7, #0]
 8026890:	f003 030f 	and.w	r3, r3, #15
 8026894:	2201      	movs	r2, #1
 8026896:	fa02 f303 	lsl.w	r3, r2, r3
 802689a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 802689c:	693b      	ldr	r3, [r7, #16]
 802689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80268a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80268a4:	68bb      	ldr	r3, [r7, #8]
 80268a6:	43db      	mvns	r3, r3
 80268a8:	6939      	ldr	r1, [r7, #16]
 80268aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80268ae:	4013      	ands	r3, r2
 80268b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80268b2:	2300      	movs	r3, #0
}
 80268b4:	4618      	mov	r0, r3
 80268b6:	3720      	adds	r7, #32
 80268b8:	46bd      	mov	sp, r7
 80268ba:	bd80      	pop	{r7, pc}

080268bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80268bc:	b580      	push	{r7, lr}
 80268be:	b086      	sub	sp, #24
 80268c0:	af00      	add	r7, sp, #0
 80268c2:	6078      	str	r0, [r7, #4]
 80268c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80268c6:	687b      	ldr	r3, [r7, #4]
 80268c8:	681b      	ldr	r3, [r3, #0]
 80268ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80268cc:	697b      	ldr	r3, [r7, #20]
 80268ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80268d0:	697b      	ldr	r3, [r7, #20]
 80268d2:	333c      	adds	r3, #60	; 0x3c
 80268d4:	3304      	adds	r3, #4
 80268d6:	681b      	ldr	r3, [r3, #0]
 80268d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80268da:	683b      	ldr	r3, [r7, #0]
 80268dc:	015a      	lsls	r2, r3, #5
 80268de:	693b      	ldr	r3, [r7, #16]
 80268e0:	4413      	add	r3, r2
 80268e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80268e6:	689b      	ldr	r3, [r3, #8]
 80268e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80268ea:	687b      	ldr	r3, [r7, #4]
 80268ec:	691b      	ldr	r3, [r3, #16]
 80268ee:	2b01      	cmp	r3, #1
 80268f0:	f040 80a0 	bne.w	8026a34 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80268f4:	68bb      	ldr	r3, [r7, #8]
 80268f6:	f003 0308 	and.w	r3, r3, #8
 80268fa:	2b00      	cmp	r3, #0
 80268fc:	d015      	beq.n	802692a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80268fe:	68fb      	ldr	r3, [r7, #12]
 8026900:	4a72      	ldr	r2, [pc, #456]	; (8026acc <PCD_EP_OutXfrComplete_int+0x210>)
 8026902:	4293      	cmp	r3, r2
 8026904:	f240 80dd 	bls.w	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8026908:	68bb      	ldr	r3, [r7, #8]
 802690a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802690e:	2b00      	cmp	r3, #0
 8026910:	f000 80d7 	beq.w	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8026914:	683b      	ldr	r3, [r7, #0]
 8026916:	015a      	lsls	r2, r3, #5
 8026918:	693b      	ldr	r3, [r7, #16]
 802691a:	4413      	add	r3, r2
 802691c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026920:	461a      	mov	r2, r3
 8026922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8026926:	6093      	str	r3, [r2, #8]
 8026928:	e0cb      	b.n	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 802692a:	68bb      	ldr	r3, [r7, #8]
 802692c:	f003 0320 	and.w	r3, r3, #32
 8026930:	2b00      	cmp	r3, #0
 8026932:	d009      	beq.n	8026948 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8026934:	683b      	ldr	r3, [r7, #0]
 8026936:	015a      	lsls	r2, r3, #5
 8026938:	693b      	ldr	r3, [r7, #16]
 802693a:	4413      	add	r3, r2
 802693c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026940:	461a      	mov	r2, r3
 8026942:	2320      	movs	r3, #32
 8026944:	6093      	str	r3, [r2, #8]
 8026946:	e0bc      	b.n	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8026948:	68bb      	ldr	r3, [r7, #8]
 802694a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802694e:	2b00      	cmp	r3, #0
 8026950:	f040 80b7 	bne.w	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8026954:	68fb      	ldr	r3, [r7, #12]
 8026956:	4a5d      	ldr	r2, [pc, #372]	; (8026acc <PCD_EP_OutXfrComplete_int+0x210>)
 8026958:	4293      	cmp	r3, r2
 802695a:	d90f      	bls.n	802697c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 802695c:	68bb      	ldr	r3, [r7, #8]
 802695e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8026962:	2b00      	cmp	r3, #0
 8026964:	d00a      	beq.n	802697c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8026966:	683b      	ldr	r3, [r7, #0]
 8026968:	015a      	lsls	r2, r3, #5
 802696a:	693b      	ldr	r3, [r7, #16]
 802696c:	4413      	add	r3, r2
 802696e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026972:	461a      	mov	r2, r3
 8026974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8026978:	6093      	str	r3, [r2, #8]
 802697a:	e0a2      	b.n	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 802697c:	6879      	ldr	r1, [r7, #4]
 802697e:	683a      	ldr	r2, [r7, #0]
 8026980:	4613      	mov	r3, r2
 8026982:	00db      	lsls	r3, r3, #3
 8026984:	1a9b      	subs	r3, r3, r2
 8026986:	009b      	lsls	r3, r3, #2
 8026988:	440b      	add	r3, r1
 802698a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 802698e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8026990:	683b      	ldr	r3, [r7, #0]
 8026992:	0159      	lsls	r1, r3, #5
 8026994:	693b      	ldr	r3, [r7, #16]
 8026996:	440b      	add	r3, r1
 8026998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802699c:	691b      	ldr	r3, [r3, #16]
 802699e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80269a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80269a4:	6878      	ldr	r0, [r7, #4]
 80269a6:	683a      	ldr	r2, [r7, #0]
 80269a8:	4613      	mov	r3, r2
 80269aa:	00db      	lsls	r3, r3, #3
 80269ac:	1a9b      	subs	r3, r3, r2
 80269ae:	009b      	lsls	r3, r3, #2
 80269b0:	4403      	add	r3, r0
 80269b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80269b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80269b8:	6879      	ldr	r1, [r7, #4]
 80269ba:	683a      	ldr	r2, [r7, #0]
 80269bc:	4613      	mov	r3, r2
 80269be:	00db      	lsls	r3, r3, #3
 80269c0:	1a9b      	subs	r3, r3, r2
 80269c2:	009b      	lsls	r3, r3, #2
 80269c4:	440b      	add	r3, r1
 80269c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80269ca:	6819      	ldr	r1, [r3, #0]
 80269cc:	6878      	ldr	r0, [r7, #4]
 80269ce:	683a      	ldr	r2, [r7, #0]
 80269d0:	4613      	mov	r3, r2
 80269d2:	00db      	lsls	r3, r3, #3
 80269d4:	1a9b      	subs	r3, r3, r2
 80269d6:	009b      	lsls	r3, r3, #2
 80269d8:	4403      	add	r3, r0
 80269da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80269de:	681b      	ldr	r3, [r3, #0]
 80269e0:	4419      	add	r1, r3
 80269e2:	6878      	ldr	r0, [r7, #4]
 80269e4:	683a      	ldr	r2, [r7, #0]
 80269e6:	4613      	mov	r3, r2
 80269e8:	00db      	lsls	r3, r3, #3
 80269ea:	1a9b      	subs	r3, r3, r2
 80269ec:	009b      	lsls	r3, r3, #2
 80269ee:	4403      	add	r3, r0
 80269f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80269f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80269f6:	683b      	ldr	r3, [r7, #0]
 80269f8:	2b00      	cmp	r3, #0
 80269fa:	d114      	bne.n	8026a26 <PCD_EP_OutXfrComplete_int+0x16a>
 80269fc:	6879      	ldr	r1, [r7, #4]
 80269fe:	683a      	ldr	r2, [r7, #0]
 8026a00:	4613      	mov	r3, r2
 8026a02:	00db      	lsls	r3, r3, #3
 8026a04:	1a9b      	subs	r3, r3, r2
 8026a06:	009b      	lsls	r3, r3, #2
 8026a08:	440b      	add	r3, r1
 8026a0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8026a0e:	681b      	ldr	r3, [r3, #0]
 8026a10:	2b00      	cmp	r3, #0
 8026a12:	d108      	bne.n	8026a26 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8026a14:	687b      	ldr	r3, [r7, #4]
 8026a16:	6818      	ldr	r0, [r3, #0]
 8026a18:	687b      	ldr	r3, [r7, #4]
 8026a1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8026a1e:	461a      	mov	r2, r3
 8026a20:	2101      	movs	r1, #1
 8026a22:	f004 fb6b 	bl	802b0fc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8026a26:	683b      	ldr	r3, [r7, #0]
 8026a28:	b2db      	uxtb	r3, r3
 8026a2a:	4619      	mov	r1, r3
 8026a2c:	6878      	ldr	r0, [r7, #4]
 8026a2e:	f010 f82d 	bl	8036a8c <HAL_PCD_DataOutStageCallback>
 8026a32:	e046      	b.n	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8026a34:	68fb      	ldr	r3, [r7, #12]
 8026a36:	4a26      	ldr	r2, [pc, #152]	; (8026ad0 <PCD_EP_OutXfrComplete_int+0x214>)
 8026a38:	4293      	cmp	r3, r2
 8026a3a:	d124      	bne.n	8026a86 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8026a3c:	68bb      	ldr	r3, [r7, #8]
 8026a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8026a42:	2b00      	cmp	r3, #0
 8026a44:	d00a      	beq.n	8026a5c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8026a46:	683b      	ldr	r3, [r7, #0]
 8026a48:	015a      	lsls	r2, r3, #5
 8026a4a:	693b      	ldr	r3, [r7, #16]
 8026a4c:	4413      	add	r3, r2
 8026a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026a52:	461a      	mov	r2, r3
 8026a54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8026a58:	6093      	str	r3, [r2, #8]
 8026a5a:	e032      	b.n	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8026a5c:	68bb      	ldr	r3, [r7, #8]
 8026a5e:	f003 0320 	and.w	r3, r3, #32
 8026a62:	2b00      	cmp	r3, #0
 8026a64:	d008      	beq.n	8026a78 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8026a66:	683b      	ldr	r3, [r7, #0]
 8026a68:	015a      	lsls	r2, r3, #5
 8026a6a:	693b      	ldr	r3, [r7, #16]
 8026a6c:	4413      	add	r3, r2
 8026a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026a72:	461a      	mov	r2, r3
 8026a74:	2320      	movs	r3, #32
 8026a76:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8026a78:	683b      	ldr	r3, [r7, #0]
 8026a7a:	b2db      	uxtb	r3, r3
 8026a7c:	4619      	mov	r1, r3
 8026a7e:	6878      	ldr	r0, [r7, #4]
 8026a80:	f010 f804 	bl	8036a8c <HAL_PCD_DataOutStageCallback>
 8026a84:	e01d      	b.n	8026ac2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8026a86:	683b      	ldr	r3, [r7, #0]
 8026a88:	2b00      	cmp	r3, #0
 8026a8a:	d114      	bne.n	8026ab6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8026a8c:	6879      	ldr	r1, [r7, #4]
 8026a8e:	683a      	ldr	r2, [r7, #0]
 8026a90:	4613      	mov	r3, r2
 8026a92:	00db      	lsls	r3, r3, #3
 8026a94:	1a9b      	subs	r3, r3, r2
 8026a96:	009b      	lsls	r3, r3, #2
 8026a98:	440b      	add	r3, r1
 8026a9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8026a9e:	681b      	ldr	r3, [r3, #0]
 8026aa0:	2b00      	cmp	r3, #0
 8026aa2:	d108      	bne.n	8026ab6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8026aa4:	687b      	ldr	r3, [r7, #4]
 8026aa6:	6818      	ldr	r0, [r3, #0]
 8026aa8:	687b      	ldr	r3, [r7, #4]
 8026aaa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8026aae:	461a      	mov	r2, r3
 8026ab0:	2100      	movs	r1, #0
 8026ab2:	f004 fb23 	bl	802b0fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8026ab6:	683b      	ldr	r3, [r7, #0]
 8026ab8:	b2db      	uxtb	r3, r3
 8026aba:	4619      	mov	r1, r3
 8026abc:	6878      	ldr	r0, [r7, #4]
 8026abe:	f00f ffe5 	bl	8036a8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8026ac2:	2300      	movs	r3, #0
}
 8026ac4:	4618      	mov	r0, r3
 8026ac6:	3718      	adds	r7, #24
 8026ac8:	46bd      	mov	sp, r7
 8026aca:	bd80      	pop	{r7, pc}
 8026acc:	4f54300a 	.word	0x4f54300a
 8026ad0:	4f54310a 	.word	0x4f54310a

08026ad4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8026ad4:	b580      	push	{r7, lr}
 8026ad6:	b086      	sub	sp, #24
 8026ad8:	af00      	add	r7, sp, #0
 8026ada:	6078      	str	r0, [r7, #4]
 8026adc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8026ade:	687b      	ldr	r3, [r7, #4]
 8026ae0:	681b      	ldr	r3, [r3, #0]
 8026ae2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026ae4:	697b      	ldr	r3, [r7, #20]
 8026ae6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8026ae8:	697b      	ldr	r3, [r7, #20]
 8026aea:	333c      	adds	r3, #60	; 0x3c
 8026aec:	3304      	adds	r3, #4
 8026aee:	681b      	ldr	r3, [r3, #0]
 8026af0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8026af2:	683b      	ldr	r3, [r7, #0]
 8026af4:	015a      	lsls	r2, r3, #5
 8026af6:	693b      	ldr	r3, [r7, #16]
 8026af8:	4413      	add	r3, r2
 8026afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026afe:	689b      	ldr	r3, [r3, #8]
 8026b00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8026b02:	68fb      	ldr	r3, [r7, #12]
 8026b04:	4a15      	ldr	r2, [pc, #84]	; (8026b5c <PCD_EP_OutSetupPacket_int+0x88>)
 8026b06:	4293      	cmp	r3, r2
 8026b08:	d90e      	bls.n	8026b28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8026b0a:	68bb      	ldr	r3, [r7, #8]
 8026b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8026b10:	2b00      	cmp	r3, #0
 8026b12:	d009      	beq.n	8026b28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8026b14:	683b      	ldr	r3, [r7, #0]
 8026b16:	015a      	lsls	r2, r3, #5
 8026b18:	693b      	ldr	r3, [r7, #16]
 8026b1a:	4413      	add	r3, r2
 8026b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8026b20:	461a      	mov	r2, r3
 8026b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8026b26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8026b28:	6878      	ldr	r0, [r7, #4]
 8026b2a:	f00f ff9d 	bl	8036a68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8026b2e:	68fb      	ldr	r3, [r7, #12]
 8026b30:	4a0a      	ldr	r2, [pc, #40]	; (8026b5c <PCD_EP_OutSetupPacket_int+0x88>)
 8026b32:	4293      	cmp	r3, r2
 8026b34:	d90c      	bls.n	8026b50 <PCD_EP_OutSetupPacket_int+0x7c>
 8026b36:	687b      	ldr	r3, [r7, #4]
 8026b38:	691b      	ldr	r3, [r3, #16]
 8026b3a:	2b01      	cmp	r3, #1
 8026b3c:	d108      	bne.n	8026b50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8026b3e:	687b      	ldr	r3, [r7, #4]
 8026b40:	6818      	ldr	r0, [r3, #0]
 8026b42:	687b      	ldr	r3, [r7, #4]
 8026b44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8026b48:	461a      	mov	r2, r3
 8026b4a:	2101      	movs	r1, #1
 8026b4c:	f004 fad6 	bl	802b0fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8026b50:	2300      	movs	r3, #0
}
 8026b52:	4618      	mov	r0, r3
 8026b54:	3718      	adds	r7, #24
 8026b56:	46bd      	mov	sp, r7
 8026b58:	bd80      	pop	{r7, pc}
 8026b5a:	bf00      	nop
 8026b5c:	4f54300a 	.word	0x4f54300a

08026b60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8026b60:	b480      	push	{r7}
 8026b62:	b085      	sub	sp, #20
 8026b64:	af00      	add	r7, sp, #0
 8026b66:	6078      	str	r0, [r7, #4]
 8026b68:	460b      	mov	r3, r1
 8026b6a:	70fb      	strb	r3, [r7, #3]
 8026b6c:	4613      	mov	r3, r2
 8026b6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8026b70:	687b      	ldr	r3, [r7, #4]
 8026b72:	681b      	ldr	r3, [r3, #0]
 8026b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026b76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8026b78:	78fb      	ldrb	r3, [r7, #3]
 8026b7a:	2b00      	cmp	r3, #0
 8026b7c:	d107      	bne.n	8026b8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8026b7e:	883b      	ldrh	r3, [r7, #0]
 8026b80:	0419      	lsls	r1, r3, #16
 8026b82:	687b      	ldr	r3, [r7, #4]
 8026b84:	681b      	ldr	r3, [r3, #0]
 8026b86:	68ba      	ldr	r2, [r7, #8]
 8026b88:	430a      	orrs	r2, r1
 8026b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8026b8c:	e028      	b.n	8026be0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8026b8e:	687b      	ldr	r3, [r7, #4]
 8026b90:	681b      	ldr	r3, [r3, #0]
 8026b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026b94:	0c1b      	lsrs	r3, r3, #16
 8026b96:	68ba      	ldr	r2, [r7, #8]
 8026b98:	4413      	add	r3, r2
 8026b9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8026b9c:	2300      	movs	r3, #0
 8026b9e:	73fb      	strb	r3, [r7, #15]
 8026ba0:	e00d      	b.n	8026bbe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8026ba2:	687b      	ldr	r3, [r7, #4]
 8026ba4:	681a      	ldr	r2, [r3, #0]
 8026ba6:	7bfb      	ldrb	r3, [r7, #15]
 8026ba8:	3340      	adds	r3, #64	; 0x40
 8026baa:	009b      	lsls	r3, r3, #2
 8026bac:	4413      	add	r3, r2
 8026bae:	685b      	ldr	r3, [r3, #4]
 8026bb0:	0c1b      	lsrs	r3, r3, #16
 8026bb2:	68ba      	ldr	r2, [r7, #8]
 8026bb4:	4413      	add	r3, r2
 8026bb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8026bb8:	7bfb      	ldrb	r3, [r7, #15]
 8026bba:	3301      	adds	r3, #1
 8026bbc:	73fb      	strb	r3, [r7, #15]
 8026bbe:	7bfa      	ldrb	r2, [r7, #15]
 8026bc0:	78fb      	ldrb	r3, [r7, #3]
 8026bc2:	3b01      	subs	r3, #1
 8026bc4:	429a      	cmp	r2, r3
 8026bc6:	d3ec      	bcc.n	8026ba2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8026bc8:	883b      	ldrh	r3, [r7, #0]
 8026bca:	0418      	lsls	r0, r3, #16
 8026bcc:	687b      	ldr	r3, [r7, #4]
 8026bce:	6819      	ldr	r1, [r3, #0]
 8026bd0:	78fb      	ldrb	r3, [r7, #3]
 8026bd2:	3b01      	subs	r3, #1
 8026bd4:	68ba      	ldr	r2, [r7, #8]
 8026bd6:	4302      	orrs	r2, r0
 8026bd8:	3340      	adds	r3, #64	; 0x40
 8026bda:	009b      	lsls	r3, r3, #2
 8026bdc:	440b      	add	r3, r1
 8026bde:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8026be0:	2300      	movs	r3, #0
}
 8026be2:	4618      	mov	r0, r3
 8026be4:	3714      	adds	r7, #20
 8026be6:	46bd      	mov	sp, r7
 8026be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bec:	4770      	bx	lr

08026bee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8026bee:	b480      	push	{r7}
 8026bf0:	b083      	sub	sp, #12
 8026bf2:	af00      	add	r7, sp, #0
 8026bf4:	6078      	str	r0, [r7, #4]
 8026bf6:	460b      	mov	r3, r1
 8026bf8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8026bfa:	687b      	ldr	r3, [r7, #4]
 8026bfc:	681b      	ldr	r3, [r3, #0]
 8026bfe:	887a      	ldrh	r2, [r7, #2]
 8026c00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8026c02:	2300      	movs	r3, #0
}
 8026c04:	4618      	mov	r0, r3
 8026c06:	370c      	adds	r7, #12
 8026c08:	46bd      	mov	sp, r7
 8026c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c0e:	4770      	bx	lr

08026c10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8026c10:	b480      	push	{r7}
 8026c12:	b083      	sub	sp, #12
 8026c14:	af00      	add	r7, sp, #0
 8026c16:	6078      	str	r0, [r7, #4]
 8026c18:	460b      	mov	r3, r1
 8026c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8026c1c:	bf00      	nop
 8026c1e:	370c      	adds	r7, #12
 8026c20:	46bd      	mov	sp, r7
 8026c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c26:	4770      	bx	lr

08026c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026c28:	b580      	push	{r7, lr}
 8026c2a:	b086      	sub	sp, #24
 8026c2c:	af00      	add	r7, sp, #0
 8026c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8026c30:	687b      	ldr	r3, [r7, #4]
 8026c32:	2b00      	cmp	r3, #0
 8026c34:	d101      	bne.n	8026c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8026c36:	2301      	movs	r3, #1
 8026c38:	e25e      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026c3a:	687b      	ldr	r3, [r7, #4]
 8026c3c:	681b      	ldr	r3, [r3, #0]
 8026c3e:	f003 0301 	and.w	r3, r3, #1
 8026c42:	2b00      	cmp	r3, #0
 8026c44:	d075      	beq.n	8026d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026c46:	4b88      	ldr	r3, [pc, #544]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026c48:	689b      	ldr	r3, [r3, #8]
 8026c4a:	f003 030c 	and.w	r3, r3, #12
 8026c4e:	2b04      	cmp	r3, #4
 8026c50:	d00c      	beq.n	8026c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026c52:	4b85      	ldr	r3, [pc, #532]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026c54:	689b      	ldr	r3, [r3, #8]
 8026c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026c5a:	2b08      	cmp	r3, #8
 8026c5c:	d112      	bne.n	8026c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026c5e:	4b82      	ldr	r3, [pc, #520]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026c60:	685b      	ldr	r3, [r3, #4]
 8026c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026c6a:	d10b      	bne.n	8026c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026c6c:	4b7e      	ldr	r3, [pc, #504]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026c6e:	681b      	ldr	r3, [r3, #0]
 8026c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026c74:	2b00      	cmp	r3, #0
 8026c76:	d05b      	beq.n	8026d30 <HAL_RCC_OscConfig+0x108>
 8026c78:	687b      	ldr	r3, [r7, #4]
 8026c7a:	685b      	ldr	r3, [r3, #4]
 8026c7c:	2b00      	cmp	r3, #0
 8026c7e:	d157      	bne.n	8026d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8026c80:	2301      	movs	r3, #1
 8026c82:	e239      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026c84:	687b      	ldr	r3, [r7, #4]
 8026c86:	685b      	ldr	r3, [r3, #4]
 8026c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026c8c:	d106      	bne.n	8026c9c <HAL_RCC_OscConfig+0x74>
 8026c8e:	4b76      	ldr	r3, [pc, #472]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026c90:	681b      	ldr	r3, [r3, #0]
 8026c92:	4a75      	ldr	r2, [pc, #468]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026c98:	6013      	str	r3, [r2, #0]
 8026c9a:	e01d      	b.n	8026cd8 <HAL_RCC_OscConfig+0xb0>
 8026c9c:	687b      	ldr	r3, [r7, #4]
 8026c9e:	685b      	ldr	r3, [r3, #4]
 8026ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8026ca4:	d10c      	bne.n	8026cc0 <HAL_RCC_OscConfig+0x98>
 8026ca6:	4b70      	ldr	r3, [pc, #448]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026ca8:	681b      	ldr	r3, [r3, #0]
 8026caa:	4a6f      	ldr	r2, [pc, #444]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026cb0:	6013      	str	r3, [r2, #0]
 8026cb2:	4b6d      	ldr	r3, [pc, #436]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cb4:	681b      	ldr	r3, [r3, #0]
 8026cb6:	4a6c      	ldr	r2, [pc, #432]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026cbc:	6013      	str	r3, [r2, #0]
 8026cbe:	e00b      	b.n	8026cd8 <HAL_RCC_OscConfig+0xb0>
 8026cc0:	4b69      	ldr	r3, [pc, #420]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cc2:	681b      	ldr	r3, [r3, #0]
 8026cc4:	4a68      	ldr	r2, [pc, #416]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026cca:	6013      	str	r3, [r2, #0]
 8026ccc:	4b66      	ldr	r3, [pc, #408]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cce:	681b      	ldr	r3, [r3, #0]
 8026cd0:	4a65      	ldr	r2, [pc, #404]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8026cd8:	687b      	ldr	r3, [r7, #4]
 8026cda:	685b      	ldr	r3, [r3, #4]
 8026cdc:	2b00      	cmp	r3, #0
 8026cde:	d013      	beq.n	8026d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026ce0:	f7fa ff42 	bl	8021b68 <HAL_GetTick>
 8026ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026ce6:	e008      	b.n	8026cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026ce8:	f7fa ff3e 	bl	8021b68 <HAL_GetTick>
 8026cec:	4602      	mov	r2, r0
 8026cee:	693b      	ldr	r3, [r7, #16]
 8026cf0:	1ad3      	subs	r3, r2, r3
 8026cf2:	2b64      	cmp	r3, #100	; 0x64
 8026cf4:	d901      	bls.n	8026cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8026cf6:	2303      	movs	r3, #3
 8026cf8:	e1fe      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026cfa:	4b5b      	ldr	r3, [pc, #364]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026cfc:	681b      	ldr	r3, [r3, #0]
 8026cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026d02:	2b00      	cmp	r3, #0
 8026d04:	d0f0      	beq.n	8026ce8 <HAL_RCC_OscConfig+0xc0>
 8026d06:	e014      	b.n	8026d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026d08:	f7fa ff2e 	bl	8021b68 <HAL_GetTick>
 8026d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026d0e:	e008      	b.n	8026d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026d10:	f7fa ff2a 	bl	8021b68 <HAL_GetTick>
 8026d14:	4602      	mov	r2, r0
 8026d16:	693b      	ldr	r3, [r7, #16]
 8026d18:	1ad3      	subs	r3, r2, r3
 8026d1a:	2b64      	cmp	r3, #100	; 0x64
 8026d1c:	d901      	bls.n	8026d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8026d1e:	2303      	movs	r3, #3
 8026d20:	e1ea      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026d22:	4b51      	ldr	r3, [pc, #324]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d24:	681b      	ldr	r3, [r3, #0]
 8026d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026d2a:	2b00      	cmp	r3, #0
 8026d2c:	d1f0      	bne.n	8026d10 <HAL_RCC_OscConfig+0xe8>
 8026d2e:	e000      	b.n	8026d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8026d32:	687b      	ldr	r3, [r7, #4]
 8026d34:	681b      	ldr	r3, [r3, #0]
 8026d36:	f003 0302 	and.w	r3, r3, #2
 8026d3a:	2b00      	cmp	r3, #0
 8026d3c:	d063      	beq.n	8026e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026d3e:	4b4a      	ldr	r3, [pc, #296]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d40:	689b      	ldr	r3, [r3, #8]
 8026d42:	f003 030c 	and.w	r3, r3, #12
 8026d46:	2b00      	cmp	r3, #0
 8026d48:	d00b      	beq.n	8026d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026d4a:	4b47      	ldr	r3, [pc, #284]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d4c:	689b      	ldr	r3, [r3, #8]
 8026d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026d52:	2b08      	cmp	r3, #8
 8026d54:	d11c      	bne.n	8026d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026d56:	4b44      	ldr	r3, [pc, #272]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d58:	685b      	ldr	r3, [r3, #4]
 8026d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026d5e:	2b00      	cmp	r3, #0
 8026d60:	d116      	bne.n	8026d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026d62:	4b41      	ldr	r3, [pc, #260]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d64:	681b      	ldr	r3, [r3, #0]
 8026d66:	f003 0302 	and.w	r3, r3, #2
 8026d6a:	2b00      	cmp	r3, #0
 8026d6c:	d005      	beq.n	8026d7a <HAL_RCC_OscConfig+0x152>
 8026d6e:	687b      	ldr	r3, [r7, #4]
 8026d70:	68db      	ldr	r3, [r3, #12]
 8026d72:	2b01      	cmp	r3, #1
 8026d74:	d001      	beq.n	8026d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8026d76:	2301      	movs	r3, #1
 8026d78:	e1be      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026d7a:	4b3b      	ldr	r3, [pc, #236]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d7c:	681b      	ldr	r3, [r3, #0]
 8026d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026d82:	687b      	ldr	r3, [r7, #4]
 8026d84:	691b      	ldr	r3, [r3, #16]
 8026d86:	00db      	lsls	r3, r3, #3
 8026d88:	4937      	ldr	r1, [pc, #220]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026d8a:	4313      	orrs	r3, r2
 8026d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026d8e:	e03a      	b.n	8026e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8026d90:	687b      	ldr	r3, [r7, #4]
 8026d92:	68db      	ldr	r3, [r3, #12]
 8026d94:	2b00      	cmp	r3, #0
 8026d96:	d020      	beq.n	8026dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8026d98:	4b34      	ldr	r3, [pc, #208]	; (8026e6c <HAL_RCC_OscConfig+0x244>)
 8026d9a:	2201      	movs	r2, #1
 8026d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026d9e:	f7fa fee3 	bl	8021b68 <HAL_GetTick>
 8026da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026da4:	e008      	b.n	8026db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026da6:	f7fa fedf 	bl	8021b68 <HAL_GetTick>
 8026daa:	4602      	mov	r2, r0
 8026dac:	693b      	ldr	r3, [r7, #16]
 8026dae:	1ad3      	subs	r3, r2, r3
 8026db0:	2b02      	cmp	r3, #2
 8026db2:	d901      	bls.n	8026db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8026db4:	2303      	movs	r3, #3
 8026db6:	e19f      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026db8:	4b2b      	ldr	r3, [pc, #172]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026dba:	681b      	ldr	r3, [r3, #0]
 8026dbc:	f003 0302 	and.w	r3, r3, #2
 8026dc0:	2b00      	cmp	r3, #0
 8026dc2:	d0f0      	beq.n	8026da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026dc4:	4b28      	ldr	r3, [pc, #160]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026dc6:	681b      	ldr	r3, [r3, #0]
 8026dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026dcc:	687b      	ldr	r3, [r7, #4]
 8026dce:	691b      	ldr	r3, [r3, #16]
 8026dd0:	00db      	lsls	r3, r3, #3
 8026dd2:	4925      	ldr	r1, [pc, #148]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026dd4:	4313      	orrs	r3, r2
 8026dd6:	600b      	str	r3, [r1, #0]
 8026dd8:	e015      	b.n	8026e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8026dda:	4b24      	ldr	r3, [pc, #144]	; (8026e6c <HAL_RCC_OscConfig+0x244>)
 8026ddc:	2200      	movs	r2, #0
 8026dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026de0:	f7fa fec2 	bl	8021b68 <HAL_GetTick>
 8026de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026de6:	e008      	b.n	8026dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026de8:	f7fa febe 	bl	8021b68 <HAL_GetTick>
 8026dec:	4602      	mov	r2, r0
 8026dee:	693b      	ldr	r3, [r7, #16]
 8026df0:	1ad3      	subs	r3, r2, r3
 8026df2:	2b02      	cmp	r3, #2
 8026df4:	d901      	bls.n	8026dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8026df6:	2303      	movs	r3, #3
 8026df8:	e17e      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026dfa:	4b1b      	ldr	r3, [pc, #108]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026dfc:	681b      	ldr	r3, [r3, #0]
 8026dfe:	f003 0302 	and.w	r3, r3, #2
 8026e02:	2b00      	cmp	r3, #0
 8026e04:	d1f0      	bne.n	8026de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8026e06:	687b      	ldr	r3, [r7, #4]
 8026e08:	681b      	ldr	r3, [r3, #0]
 8026e0a:	f003 0308 	and.w	r3, r3, #8
 8026e0e:	2b00      	cmp	r3, #0
 8026e10:	d036      	beq.n	8026e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8026e12:	687b      	ldr	r3, [r7, #4]
 8026e14:	695b      	ldr	r3, [r3, #20]
 8026e16:	2b00      	cmp	r3, #0
 8026e18:	d016      	beq.n	8026e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8026e1a:	4b15      	ldr	r3, [pc, #84]	; (8026e70 <HAL_RCC_OscConfig+0x248>)
 8026e1c:	2201      	movs	r2, #1
 8026e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026e20:	f7fa fea2 	bl	8021b68 <HAL_GetTick>
 8026e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026e26:	e008      	b.n	8026e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026e28:	f7fa fe9e 	bl	8021b68 <HAL_GetTick>
 8026e2c:	4602      	mov	r2, r0
 8026e2e:	693b      	ldr	r3, [r7, #16]
 8026e30:	1ad3      	subs	r3, r2, r3
 8026e32:	2b02      	cmp	r3, #2
 8026e34:	d901      	bls.n	8026e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8026e36:	2303      	movs	r3, #3
 8026e38:	e15e      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026e3a:	4b0b      	ldr	r3, [pc, #44]	; (8026e68 <HAL_RCC_OscConfig+0x240>)
 8026e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026e3e:	f003 0302 	and.w	r3, r3, #2
 8026e42:	2b00      	cmp	r3, #0
 8026e44:	d0f0      	beq.n	8026e28 <HAL_RCC_OscConfig+0x200>
 8026e46:	e01b      	b.n	8026e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8026e48:	4b09      	ldr	r3, [pc, #36]	; (8026e70 <HAL_RCC_OscConfig+0x248>)
 8026e4a:	2200      	movs	r2, #0
 8026e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026e4e:	f7fa fe8b 	bl	8021b68 <HAL_GetTick>
 8026e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026e54:	e00e      	b.n	8026e74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026e56:	f7fa fe87 	bl	8021b68 <HAL_GetTick>
 8026e5a:	4602      	mov	r2, r0
 8026e5c:	693b      	ldr	r3, [r7, #16]
 8026e5e:	1ad3      	subs	r3, r2, r3
 8026e60:	2b02      	cmp	r3, #2
 8026e62:	d907      	bls.n	8026e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8026e64:	2303      	movs	r3, #3
 8026e66:	e147      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
 8026e68:	40023800 	.word	0x40023800
 8026e6c:	42470000 	.word	0x42470000
 8026e70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026e74:	4b88      	ldr	r3, [pc, #544]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026e78:	f003 0302 	and.w	r3, r3, #2
 8026e7c:	2b00      	cmp	r3, #0
 8026e7e:	d1ea      	bne.n	8026e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8026e80:	687b      	ldr	r3, [r7, #4]
 8026e82:	681b      	ldr	r3, [r3, #0]
 8026e84:	f003 0304 	and.w	r3, r3, #4
 8026e88:	2b00      	cmp	r3, #0
 8026e8a:	f000 8097 	beq.w	8026fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8026e8e:	2300      	movs	r3, #0
 8026e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8026e92:	4b81      	ldr	r3, [pc, #516]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026e9a:	2b00      	cmp	r3, #0
 8026e9c:	d10f      	bne.n	8026ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8026e9e:	2300      	movs	r3, #0
 8026ea0:	60bb      	str	r3, [r7, #8]
 8026ea2:	4b7d      	ldr	r3, [pc, #500]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026ea6:	4a7c      	ldr	r2, [pc, #496]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026eac:	6413      	str	r3, [r2, #64]	; 0x40
 8026eae:	4b7a      	ldr	r3, [pc, #488]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026eb6:	60bb      	str	r3, [r7, #8]
 8026eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8026eba:	2301      	movs	r3, #1
 8026ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026ebe:	4b77      	ldr	r3, [pc, #476]	; (802709c <HAL_RCC_OscConfig+0x474>)
 8026ec0:	681b      	ldr	r3, [r3, #0]
 8026ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026ec6:	2b00      	cmp	r3, #0
 8026ec8:	d118      	bne.n	8026efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8026eca:	4b74      	ldr	r3, [pc, #464]	; (802709c <HAL_RCC_OscConfig+0x474>)
 8026ecc:	681b      	ldr	r3, [r3, #0]
 8026ece:	4a73      	ldr	r2, [pc, #460]	; (802709c <HAL_RCC_OscConfig+0x474>)
 8026ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8026ed6:	f7fa fe47 	bl	8021b68 <HAL_GetTick>
 8026eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026edc:	e008      	b.n	8026ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8026ede:	f7fa fe43 	bl	8021b68 <HAL_GetTick>
 8026ee2:	4602      	mov	r2, r0
 8026ee4:	693b      	ldr	r3, [r7, #16]
 8026ee6:	1ad3      	subs	r3, r2, r3
 8026ee8:	2b02      	cmp	r3, #2
 8026eea:	d901      	bls.n	8026ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8026eec:	2303      	movs	r3, #3
 8026eee:	e103      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026ef0:	4b6a      	ldr	r3, [pc, #424]	; (802709c <HAL_RCC_OscConfig+0x474>)
 8026ef2:	681b      	ldr	r3, [r3, #0]
 8026ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026ef8:	2b00      	cmp	r3, #0
 8026efa:	d0f0      	beq.n	8026ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8026efc:	687b      	ldr	r3, [r7, #4]
 8026efe:	689b      	ldr	r3, [r3, #8]
 8026f00:	2b01      	cmp	r3, #1
 8026f02:	d106      	bne.n	8026f12 <HAL_RCC_OscConfig+0x2ea>
 8026f04:	4b64      	ldr	r3, [pc, #400]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f08:	4a63      	ldr	r2, [pc, #396]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f0a:	f043 0301 	orr.w	r3, r3, #1
 8026f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8026f10:	e01c      	b.n	8026f4c <HAL_RCC_OscConfig+0x324>
 8026f12:	687b      	ldr	r3, [r7, #4]
 8026f14:	689b      	ldr	r3, [r3, #8]
 8026f16:	2b05      	cmp	r3, #5
 8026f18:	d10c      	bne.n	8026f34 <HAL_RCC_OscConfig+0x30c>
 8026f1a:	4b5f      	ldr	r3, [pc, #380]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f1e:	4a5e      	ldr	r2, [pc, #376]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f20:	f043 0304 	orr.w	r3, r3, #4
 8026f24:	6713      	str	r3, [r2, #112]	; 0x70
 8026f26:	4b5c      	ldr	r3, [pc, #368]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f2a:	4a5b      	ldr	r2, [pc, #364]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f2c:	f043 0301 	orr.w	r3, r3, #1
 8026f30:	6713      	str	r3, [r2, #112]	; 0x70
 8026f32:	e00b      	b.n	8026f4c <HAL_RCC_OscConfig+0x324>
 8026f34:	4b58      	ldr	r3, [pc, #352]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f38:	4a57      	ldr	r2, [pc, #348]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f3a:	f023 0301 	bic.w	r3, r3, #1
 8026f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8026f40:	4b55      	ldr	r3, [pc, #340]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f44:	4a54      	ldr	r2, [pc, #336]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f46:	f023 0304 	bic.w	r3, r3, #4
 8026f4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8026f4c:	687b      	ldr	r3, [r7, #4]
 8026f4e:	689b      	ldr	r3, [r3, #8]
 8026f50:	2b00      	cmp	r3, #0
 8026f52:	d015      	beq.n	8026f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026f54:	f7fa fe08 	bl	8021b68 <HAL_GetTick>
 8026f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026f5a:	e00a      	b.n	8026f72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026f5c:	f7fa fe04 	bl	8021b68 <HAL_GetTick>
 8026f60:	4602      	mov	r2, r0
 8026f62:	693b      	ldr	r3, [r7, #16]
 8026f64:	1ad3      	subs	r3, r2, r3
 8026f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8026f6a:	4293      	cmp	r3, r2
 8026f6c:	d901      	bls.n	8026f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8026f6e:	2303      	movs	r3, #3
 8026f70:	e0c2      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026f72:	4b49      	ldr	r3, [pc, #292]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026f76:	f003 0302 	and.w	r3, r3, #2
 8026f7a:	2b00      	cmp	r3, #0
 8026f7c:	d0ee      	beq.n	8026f5c <HAL_RCC_OscConfig+0x334>
 8026f7e:	e014      	b.n	8026faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026f80:	f7fa fdf2 	bl	8021b68 <HAL_GetTick>
 8026f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026f86:	e00a      	b.n	8026f9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026f88:	f7fa fdee 	bl	8021b68 <HAL_GetTick>
 8026f8c:	4602      	mov	r2, r0
 8026f8e:	693b      	ldr	r3, [r7, #16]
 8026f90:	1ad3      	subs	r3, r2, r3
 8026f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8026f96:	4293      	cmp	r3, r2
 8026f98:	d901      	bls.n	8026f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8026f9a:	2303      	movs	r3, #3
 8026f9c:	e0ac      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026f9e:	4b3e      	ldr	r3, [pc, #248]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026fa2:	f003 0302 	and.w	r3, r3, #2
 8026fa6:	2b00      	cmp	r3, #0
 8026fa8:	d1ee      	bne.n	8026f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8026faa:	7dfb      	ldrb	r3, [r7, #23]
 8026fac:	2b01      	cmp	r3, #1
 8026fae:	d105      	bne.n	8026fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8026fb0:	4b39      	ldr	r3, [pc, #228]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026fb4:	4a38      	ldr	r2, [pc, #224]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8026fba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8026fbc:	687b      	ldr	r3, [r7, #4]
 8026fbe:	699b      	ldr	r3, [r3, #24]
 8026fc0:	2b00      	cmp	r3, #0
 8026fc2:	f000 8098 	beq.w	80270f6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8026fc6:	4b34      	ldr	r3, [pc, #208]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026fc8:	689b      	ldr	r3, [r3, #8]
 8026fca:	f003 030c 	and.w	r3, r3, #12
 8026fce:	2b08      	cmp	r3, #8
 8026fd0:	d05c      	beq.n	802708c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8026fd2:	687b      	ldr	r3, [r7, #4]
 8026fd4:	699b      	ldr	r3, [r3, #24]
 8026fd6:	2b02      	cmp	r3, #2
 8026fd8:	d141      	bne.n	802705e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026fda:	4b31      	ldr	r3, [pc, #196]	; (80270a0 <HAL_RCC_OscConfig+0x478>)
 8026fdc:	2200      	movs	r2, #0
 8026fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026fe0:	f7fa fdc2 	bl	8021b68 <HAL_GetTick>
 8026fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026fe6:	e008      	b.n	8026ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026fe8:	f7fa fdbe 	bl	8021b68 <HAL_GetTick>
 8026fec:	4602      	mov	r2, r0
 8026fee:	693b      	ldr	r3, [r7, #16]
 8026ff0:	1ad3      	subs	r3, r2, r3
 8026ff2:	2b02      	cmp	r3, #2
 8026ff4:	d901      	bls.n	8026ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8026ff6:	2303      	movs	r3, #3
 8026ff8:	e07e      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026ffa:	4b27      	ldr	r3, [pc, #156]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8026ffc:	681b      	ldr	r3, [r3, #0]
 8026ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027002:	2b00      	cmp	r3, #0
 8027004:	d1f0      	bne.n	8026fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8027006:	687b      	ldr	r3, [r7, #4]
 8027008:	69da      	ldr	r2, [r3, #28]
 802700a:	687b      	ldr	r3, [r7, #4]
 802700c:	6a1b      	ldr	r3, [r3, #32]
 802700e:	431a      	orrs	r2, r3
 8027010:	687b      	ldr	r3, [r7, #4]
 8027012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027014:	019b      	lsls	r3, r3, #6
 8027016:	431a      	orrs	r2, r3
 8027018:	687b      	ldr	r3, [r7, #4]
 802701a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802701c:	085b      	lsrs	r3, r3, #1
 802701e:	3b01      	subs	r3, #1
 8027020:	041b      	lsls	r3, r3, #16
 8027022:	431a      	orrs	r2, r3
 8027024:	687b      	ldr	r3, [r7, #4]
 8027026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027028:	061b      	lsls	r3, r3, #24
 802702a:	491b      	ldr	r1, [pc, #108]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 802702c:	4313      	orrs	r3, r2
 802702e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8027030:	4b1b      	ldr	r3, [pc, #108]	; (80270a0 <HAL_RCC_OscConfig+0x478>)
 8027032:	2201      	movs	r2, #1
 8027034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027036:	f7fa fd97 	bl	8021b68 <HAL_GetTick>
 802703a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802703c:	e008      	b.n	8027050 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802703e:	f7fa fd93 	bl	8021b68 <HAL_GetTick>
 8027042:	4602      	mov	r2, r0
 8027044:	693b      	ldr	r3, [r7, #16]
 8027046:	1ad3      	subs	r3, r2, r3
 8027048:	2b02      	cmp	r3, #2
 802704a:	d901      	bls.n	8027050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802704c:	2303      	movs	r3, #3
 802704e:	e053      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027050:	4b11      	ldr	r3, [pc, #68]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8027052:	681b      	ldr	r3, [r3, #0]
 8027054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027058:	2b00      	cmp	r3, #0
 802705a:	d0f0      	beq.n	802703e <HAL_RCC_OscConfig+0x416>
 802705c:	e04b      	b.n	80270f6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802705e:	4b10      	ldr	r3, [pc, #64]	; (80270a0 <HAL_RCC_OscConfig+0x478>)
 8027060:	2200      	movs	r2, #0
 8027062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027064:	f7fa fd80 	bl	8021b68 <HAL_GetTick>
 8027068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802706a:	e008      	b.n	802707e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802706c:	f7fa fd7c 	bl	8021b68 <HAL_GetTick>
 8027070:	4602      	mov	r2, r0
 8027072:	693b      	ldr	r3, [r7, #16]
 8027074:	1ad3      	subs	r3, r2, r3
 8027076:	2b02      	cmp	r3, #2
 8027078:	d901      	bls.n	802707e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802707a:	2303      	movs	r3, #3
 802707c:	e03c      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802707e:	4b06      	ldr	r3, [pc, #24]	; (8027098 <HAL_RCC_OscConfig+0x470>)
 8027080:	681b      	ldr	r3, [r3, #0]
 8027082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027086:	2b00      	cmp	r3, #0
 8027088:	d1f0      	bne.n	802706c <HAL_RCC_OscConfig+0x444>
 802708a:	e034      	b.n	80270f6 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802708c:	687b      	ldr	r3, [r7, #4]
 802708e:	699b      	ldr	r3, [r3, #24]
 8027090:	2b01      	cmp	r3, #1
 8027092:	d107      	bne.n	80270a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8027094:	2301      	movs	r3, #1
 8027096:	e02f      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
 8027098:	40023800 	.word	0x40023800
 802709c:	40007000 	.word	0x40007000
 80270a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80270a4:	4b16      	ldr	r3, [pc, #88]	; (8027100 <HAL_RCC_OscConfig+0x4d8>)
 80270a6:	685b      	ldr	r3, [r3, #4]
 80270a8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80270aa:	68fb      	ldr	r3, [r7, #12]
 80270ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80270b0:	687b      	ldr	r3, [r7, #4]
 80270b2:	69db      	ldr	r3, [r3, #28]
 80270b4:	429a      	cmp	r2, r3
 80270b6:	d11c      	bne.n	80270f2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80270b8:	68fb      	ldr	r3, [r7, #12]
 80270ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80270be:	687b      	ldr	r3, [r7, #4]
 80270c0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80270c2:	429a      	cmp	r2, r3
 80270c4:	d115      	bne.n	80270f2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80270c6:	68fa      	ldr	r2, [r7, #12]
 80270c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80270cc:	4013      	ands	r3, r2
 80270ce:	687a      	ldr	r2, [r7, #4]
 80270d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80270d2:	4293      	cmp	r3, r2
 80270d4:	d10d      	bne.n	80270f2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80270d6:	68fb      	ldr	r3, [r7, #12]
 80270d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80270dc:	687b      	ldr	r3, [r7, #4]
 80270de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80270e0:	429a      	cmp	r2, r3
 80270e2:	d106      	bne.n	80270f2 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80270e4:	68fb      	ldr	r3, [r7, #12]
 80270e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80270ea:	687b      	ldr	r3, [r7, #4]
 80270ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80270ee:	429a      	cmp	r2, r3
 80270f0:	d001      	beq.n	80270f6 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80270f2:	2301      	movs	r3, #1
 80270f4:	e000      	b.n	80270f8 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80270f6:	2300      	movs	r3, #0
}
 80270f8:	4618      	mov	r0, r3
 80270fa:	3718      	adds	r7, #24
 80270fc:	46bd      	mov	sp, r7
 80270fe:	bd80      	pop	{r7, pc}
 8027100:	40023800 	.word	0x40023800

08027104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8027104:	b580      	push	{r7, lr}
 8027106:	b084      	sub	sp, #16
 8027108:	af00      	add	r7, sp, #0
 802710a:	6078      	str	r0, [r7, #4]
 802710c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802710e:	687b      	ldr	r3, [r7, #4]
 8027110:	2b00      	cmp	r3, #0
 8027112:	d101      	bne.n	8027118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8027114:	2301      	movs	r3, #1
 8027116:	e0cc      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8027118:	4b68      	ldr	r3, [pc, #416]	; (80272bc <HAL_RCC_ClockConfig+0x1b8>)
 802711a:	681b      	ldr	r3, [r3, #0]
 802711c:	f003 030f 	and.w	r3, r3, #15
 8027120:	683a      	ldr	r2, [r7, #0]
 8027122:	429a      	cmp	r2, r3
 8027124:	d90c      	bls.n	8027140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027126:	4b65      	ldr	r3, [pc, #404]	; (80272bc <HAL_RCC_ClockConfig+0x1b8>)
 8027128:	683a      	ldr	r2, [r7, #0]
 802712a:	b2d2      	uxtb	r2, r2
 802712c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802712e:	4b63      	ldr	r3, [pc, #396]	; (80272bc <HAL_RCC_ClockConfig+0x1b8>)
 8027130:	681b      	ldr	r3, [r3, #0]
 8027132:	f003 030f 	and.w	r3, r3, #15
 8027136:	683a      	ldr	r2, [r7, #0]
 8027138:	429a      	cmp	r2, r3
 802713a:	d001      	beq.n	8027140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802713c:	2301      	movs	r3, #1
 802713e:	e0b8      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8027140:	687b      	ldr	r3, [r7, #4]
 8027142:	681b      	ldr	r3, [r3, #0]
 8027144:	f003 0302 	and.w	r3, r3, #2
 8027148:	2b00      	cmp	r3, #0
 802714a:	d020      	beq.n	802718e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802714c:	687b      	ldr	r3, [r7, #4]
 802714e:	681b      	ldr	r3, [r3, #0]
 8027150:	f003 0304 	and.w	r3, r3, #4
 8027154:	2b00      	cmp	r3, #0
 8027156:	d005      	beq.n	8027164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8027158:	4b59      	ldr	r3, [pc, #356]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 802715a:	689b      	ldr	r3, [r3, #8]
 802715c:	4a58      	ldr	r2, [pc, #352]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 802715e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8027162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027164:	687b      	ldr	r3, [r7, #4]
 8027166:	681b      	ldr	r3, [r3, #0]
 8027168:	f003 0308 	and.w	r3, r3, #8
 802716c:	2b00      	cmp	r3, #0
 802716e:	d005      	beq.n	802717c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8027170:	4b53      	ldr	r3, [pc, #332]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027172:	689b      	ldr	r3, [r3, #8]
 8027174:	4a52      	ldr	r2, [pc, #328]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802717a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802717c:	4b50      	ldr	r3, [pc, #320]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 802717e:	689b      	ldr	r3, [r3, #8]
 8027180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8027184:	687b      	ldr	r3, [r7, #4]
 8027186:	689b      	ldr	r3, [r3, #8]
 8027188:	494d      	ldr	r1, [pc, #308]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 802718a:	4313      	orrs	r3, r2
 802718c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802718e:	687b      	ldr	r3, [r7, #4]
 8027190:	681b      	ldr	r3, [r3, #0]
 8027192:	f003 0301 	and.w	r3, r3, #1
 8027196:	2b00      	cmp	r3, #0
 8027198:	d044      	beq.n	8027224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802719a:	687b      	ldr	r3, [r7, #4]
 802719c:	685b      	ldr	r3, [r3, #4]
 802719e:	2b01      	cmp	r3, #1
 80271a0:	d107      	bne.n	80271b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80271a2:	4b47      	ldr	r3, [pc, #284]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 80271a4:	681b      	ldr	r3, [r3, #0]
 80271a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80271aa:	2b00      	cmp	r3, #0
 80271ac:	d119      	bne.n	80271e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80271ae:	2301      	movs	r3, #1
 80271b0:	e07f      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80271b2:	687b      	ldr	r3, [r7, #4]
 80271b4:	685b      	ldr	r3, [r3, #4]
 80271b6:	2b02      	cmp	r3, #2
 80271b8:	d003      	beq.n	80271c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80271ba:	687b      	ldr	r3, [r7, #4]
 80271bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80271be:	2b03      	cmp	r3, #3
 80271c0:	d107      	bne.n	80271d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80271c2:	4b3f      	ldr	r3, [pc, #252]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 80271c4:	681b      	ldr	r3, [r3, #0]
 80271c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80271ca:	2b00      	cmp	r3, #0
 80271cc:	d109      	bne.n	80271e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80271ce:	2301      	movs	r3, #1
 80271d0:	e06f      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80271d2:	4b3b      	ldr	r3, [pc, #236]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 80271d4:	681b      	ldr	r3, [r3, #0]
 80271d6:	f003 0302 	and.w	r3, r3, #2
 80271da:	2b00      	cmp	r3, #0
 80271dc:	d101      	bne.n	80271e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80271de:	2301      	movs	r3, #1
 80271e0:	e067      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80271e2:	4b37      	ldr	r3, [pc, #220]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 80271e4:	689b      	ldr	r3, [r3, #8]
 80271e6:	f023 0203 	bic.w	r2, r3, #3
 80271ea:	687b      	ldr	r3, [r7, #4]
 80271ec:	685b      	ldr	r3, [r3, #4]
 80271ee:	4934      	ldr	r1, [pc, #208]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 80271f0:	4313      	orrs	r3, r2
 80271f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80271f4:	f7fa fcb8 	bl	8021b68 <HAL_GetTick>
 80271f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80271fa:	e00a      	b.n	8027212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80271fc:	f7fa fcb4 	bl	8021b68 <HAL_GetTick>
 8027200:	4602      	mov	r2, r0
 8027202:	68fb      	ldr	r3, [r7, #12]
 8027204:	1ad3      	subs	r3, r2, r3
 8027206:	f241 3288 	movw	r2, #5000	; 0x1388
 802720a:	4293      	cmp	r3, r2
 802720c:	d901      	bls.n	8027212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802720e:	2303      	movs	r3, #3
 8027210:	e04f      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027212:	4b2b      	ldr	r3, [pc, #172]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027214:	689b      	ldr	r3, [r3, #8]
 8027216:	f003 020c 	and.w	r2, r3, #12
 802721a:	687b      	ldr	r3, [r7, #4]
 802721c:	685b      	ldr	r3, [r3, #4]
 802721e:	009b      	lsls	r3, r3, #2
 8027220:	429a      	cmp	r2, r3
 8027222:	d1eb      	bne.n	80271fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8027224:	4b25      	ldr	r3, [pc, #148]	; (80272bc <HAL_RCC_ClockConfig+0x1b8>)
 8027226:	681b      	ldr	r3, [r3, #0]
 8027228:	f003 030f 	and.w	r3, r3, #15
 802722c:	683a      	ldr	r2, [r7, #0]
 802722e:	429a      	cmp	r2, r3
 8027230:	d20c      	bcs.n	802724c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027232:	4b22      	ldr	r3, [pc, #136]	; (80272bc <HAL_RCC_ClockConfig+0x1b8>)
 8027234:	683a      	ldr	r2, [r7, #0]
 8027236:	b2d2      	uxtb	r2, r2
 8027238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802723a:	4b20      	ldr	r3, [pc, #128]	; (80272bc <HAL_RCC_ClockConfig+0x1b8>)
 802723c:	681b      	ldr	r3, [r3, #0]
 802723e:	f003 030f 	and.w	r3, r3, #15
 8027242:	683a      	ldr	r2, [r7, #0]
 8027244:	429a      	cmp	r2, r3
 8027246:	d001      	beq.n	802724c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8027248:	2301      	movs	r3, #1
 802724a:	e032      	b.n	80272b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802724c:	687b      	ldr	r3, [r7, #4]
 802724e:	681b      	ldr	r3, [r3, #0]
 8027250:	f003 0304 	and.w	r3, r3, #4
 8027254:	2b00      	cmp	r3, #0
 8027256:	d008      	beq.n	802726a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8027258:	4b19      	ldr	r3, [pc, #100]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 802725a:	689b      	ldr	r3, [r3, #8]
 802725c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8027260:	687b      	ldr	r3, [r7, #4]
 8027262:	68db      	ldr	r3, [r3, #12]
 8027264:	4916      	ldr	r1, [pc, #88]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027266:	4313      	orrs	r3, r2
 8027268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802726a:	687b      	ldr	r3, [r7, #4]
 802726c:	681b      	ldr	r3, [r3, #0]
 802726e:	f003 0308 	and.w	r3, r3, #8
 8027272:	2b00      	cmp	r3, #0
 8027274:	d009      	beq.n	802728a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8027276:	4b12      	ldr	r3, [pc, #72]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027278:	689b      	ldr	r3, [r3, #8]
 802727a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802727e:	687b      	ldr	r3, [r7, #4]
 8027280:	691b      	ldr	r3, [r3, #16]
 8027282:	00db      	lsls	r3, r3, #3
 8027284:	490e      	ldr	r1, [pc, #56]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027286:	4313      	orrs	r3, r2
 8027288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802728a:	f000 f821 	bl	80272d0 <HAL_RCC_GetSysClockFreq>
 802728e:	4602      	mov	r2, r0
 8027290:	4b0b      	ldr	r3, [pc, #44]	; (80272c0 <HAL_RCC_ClockConfig+0x1bc>)
 8027292:	689b      	ldr	r3, [r3, #8]
 8027294:	091b      	lsrs	r3, r3, #4
 8027296:	f003 030f 	and.w	r3, r3, #15
 802729a:	490a      	ldr	r1, [pc, #40]	; (80272c4 <HAL_RCC_ClockConfig+0x1c0>)
 802729c:	5ccb      	ldrb	r3, [r1, r3]
 802729e:	fa22 f303 	lsr.w	r3, r2, r3
 80272a2:	4a09      	ldr	r2, [pc, #36]	; (80272c8 <HAL_RCC_ClockConfig+0x1c4>)
 80272a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80272a6:	4b09      	ldr	r3, [pc, #36]	; (80272cc <HAL_RCC_ClockConfig+0x1c8>)
 80272a8:	681b      	ldr	r3, [r3, #0]
 80272aa:	4618      	mov	r0, r3
 80272ac:	f7fa fa52 	bl	8021754 <HAL_InitTick>

  return HAL_OK;
 80272b0:	2300      	movs	r3, #0
}
 80272b2:	4618      	mov	r0, r3
 80272b4:	3710      	adds	r7, #16
 80272b6:	46bd      	mov	sp, r7
 80272b8:	bd80      	pop	{r7, pc}
 80272ba:	bf00      	nop
 80272bc:	40023c00 	.word	0x40023c00
 80272c0:	40023800 	.word	0x40023800
 80272c4:	0803b964 	.word	0x0803b964
 80272c8:	20000004 	.word	0x20000004
 80272cc:	20000008 	.word	0x20000008

080272d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80272d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80272d4:	b090      	sub	sp, #64	; 0x40
 80272d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80272d8:	2300      	movs	r3, #0
 80272da:	637b      	str	r3, [r7, #52]	; 0x34
 80272dc:	2300      	movs	r3, #0
 80272de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80272e0:	2300      	movs	r3, #0
 80272e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80272e4:	2300      	movs	r3, #0
 80272e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80272e8:	4b59      	ldr	r3, [pc, #356]	; (8027450 <HAL_RCC_GetSysClockFreq+0x180>)
 80272ea:	689b      	ldr	r3, [r3, #8]
 80272ec:	f003 030c 	and.w	r3, r3, #12
 80272f0:	2b08      	cmp	r3, #8
 80272f2:	d00d      	beq.n	8027310 <HAL_RCC_GetSysClockFreq+0x40>
 80272f4:	2b08      	cmp	r3, #8
 80272f6:	f200 80a1 	bhi.w	802743c <HAL_RCC_GetSysClockFreq+0x16c>
 80272fa:	2b00      	cmp	r3, #0
 80272fc:	d002      	beq.n	8027304 <HAL_RCC_GetSysClockFreq+0x34>
 80272fe:	2b04      	cmp	r3, #4
 8027300:	d003      	beq.n	802730a <HAL_RCC_GetSysClockFreq+0x3a>
 8027302:	e09b      	b.n	802743c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8027304:	4b53      	ldr	r3, [pc, #332]	; (8027454 <HAL_RCC_GetSysClockFreq+0x184>)
 8027306:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8027308:	e09b      	b.n	8027442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802730a:	4b53      	ldr	r3, [pc, #332]	; (8027458 <HAL_RCC_GetSysClockFreq+0x188>)
 802730c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802730e:	e098      	b.n	8027442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8027310:	4b4f      	ldr	r3, [pc, #316]	; (8027450 <HAL_RCC_GetSysClockFreq+0x180>)
 8027312:	685b      	ldr	r3, [r3, #4]
 8027314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027318:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802731a:	4b4d      	ldr	r3, [pc, #308]	; (8027450 <HAL_RCC_GetSysClockFreq+0x180>)
 802731c:	685b      	ldr	r3, [r3, #4]
 802731e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027322:	2b00      	cmp	r3, #0
 8027324:	d028      	beq.n	8027378 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027326:	4b4a      	ldr	r3, [pc, #296]	; (8027450 <HAL_RCC_GetSysClockFreq+0x180>)
 8027328:	685b      	ldr	r3, [r3, #4]
 802732a:	099b      	lsrs	r3, r3, #6
 802732c:	2200      	movs	r2, #0
 802732e:	623b      	str	r3, [r7, #32]
 8027330:	627a      	str	r2, [r7, #36]	; 0x24
 8027332:	6a3b      	ldr	r3, [r7, #32]
 8027334:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8027338:	2100      	movs	r1, #0
 802733a:	4b47      	ldr	r3, [pc, #284]	; (8027458 <HAL_RCC_GetSysClockFreq+0x188>)
 802733c:	fb03 f201 	mul.w	r2, r3, r1
 8027340:	2300      	movs	r3, #0
 8027342:	fb00 f303 	mul.w	r3, r0, r3
 8027346:	4413      	add	r3, r2
 8027348:	4a43      	ldr	r2, [pc, #268]	; (8027458 <HAL_RCC_GetSysClockFreq+0x188>)
 802734a:	fba0 1202 	umull	r1, r2, r0, r2
 802734e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8027350:	460a      	mov	r2, r1
 8027352:	62ba      	str	r2, [r7, #40]	; 0x28
 8027354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027356:	4413      	add	r3, r2
 8027358:	62fb      	str	r3, [r7, #44]	; 0x2c
 802735a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802735c:	2200      	movs	r2, #0
 802735e:	61bb      	str	r3, [r7, #24]
 8027360:	61fa      	str	r2, [r7, #28]
 8027362:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027366:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802736a:	f7f8 ff99 	bl	80202a0 <__aeabi_uldivmod>
 802736e:	4602      	mov	r2, r0
 8027370:	460b      	mov	r3, r1
 8027372:	4613      	mov	r3, r2
 8027374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8027376:	e053      	b.n	8027420 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027378:	4b35      	ldr	r3, [pc, #212]	; (8027450 <HAL_RCC_GetSysClockFreq+0x180>)
 802737a:	685b      	ldr	r3, [r3, #4]
 802737c:	099b      	lsrs	r3, r3, #6
 802737e:	2200      	movs	r2, #0
 8027380:	613b      	str	r3, [r7, #16]
 8027382:	617a      	str	r2, [r7, #20]
 8027384:	693b      	ldr	r3, [r7, #16]
 8027386:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 802738a:	f04f 0b00 	mov.w	fp, #0
 802738e:	4652      	mov	r2, sl
 8027390:	465b      	mov	r3, fp
 8027392:	f04f 0000 	mov.w	r0, #0
 8027396:	f04f 0100 	mov.w	r1, #0
 802739a:	0159      	lsls	r1, r3, #5
 802739c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80273a0:	0150      	lsls	r0, r2, #5
 80273a2:	4602      	mov	r2, r0
 80273a4:	460b      	mov	r3, r1
 80273a6:	ebb2 080a 	subs.w	r8, r2, sl
 80273aa:	eb63 090b 	sbc.w	r9, r3, fp
 80273ae:	f04f 0200 	mov.w	r2, #0
 80273b2:	f04f 0300 	mov.w	r3, #0
 80273b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80273ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80273be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80273c2:	ebb2 0408 	subs.w	r4, r2, r8
 80273c6:	eb63 0509 	sbc.w	r5, r3, r9
 80273ca:	f04f 0200 	mov.w	r2, #0
 80273ce:	f04f 0300 	mov.w	r3, #0
 80273d2:	00eb      	lsls	r3, r5, #3
 80273d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80273d8:	00e2      	lsls	r2, r4, #3
 80273da:	4614      	mov	r4, r2
 80273dc:	461d      	mov	r5, r3
 80273de:	eb14 030a 	adds.w	r3, r4, sl
 80273e2:	603b      	str	r3, [r7, #0]
 80273e4:	eb45 030b 	adc.w	r3, r5, fp
 80273e8:	607b      	str	r3, [r7, #4]
 80273ea:	f04f 0200 	mov.w	r2, #0
 80273ee:	f04f 0300 	mov.w	r3, #0
 80273f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80273f6:	4629      	mov	r1, r5
 80273f8:	028b      	lsls	r3, r1, #10
 80273fa:	4621      	mov	r1, r4
 80273fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8027400:	4621      	mov	r1, r4
 8027402:	028a      	lsls	r2, r1, #10
 8027404:	4610      	mov	r0, r2
 8027406:	4619      	mov	r1, r3
 8027408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802740a:	2200      	movs	r2, #0
 802740c:	60bb      	str	r3, [r7, #8]
 802740e:	60fa      	str	r2, [r7, #12]
 8027410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8027414:	f7f8 ff44 	bl	80202a0 <__aeabi_uldivmod>
 8027418:	4602      	mov	r2, r0
 802741a:	460b      	mov	r3, r1
 802741c:	4613      	mov	r3, r2
 802741e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8027420:	4b0b      	ldr	r3, [pc, #44]	; (8027450 <HAL_RCC_GetSysClockFreq+0x180>)
 8027422:	685b      	ldr	r3, [r3, #4]
 8027424:	0c1b      	lsrs	r3, r3, #16
 8027426:	f003 0303 	and.w	r3, r3, #3
 802742a:	3301      	adds	r3, #1
 802742c:	005b      	lsls	r3, r3, #1
 802742e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8027430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8027432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027434:	fbb2 f3f3 	udiv	r3, r2, r3
 8027438:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802743a:	e002      	b.n	8027442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802743c:	4b05      	ldr	r3, [pc, #20]	; (8027454 <HAL_RCC_GetSysClockFreq+0x184>)
 802743e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8027440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8027442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8027444:	4618      	mov	r0, r3
 8027446:	3740      	adds	r7, #64	; 0x40
 8027448:	46bd      	mov	sp, r7
 802744a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802744e:	bf00      	nop
 8027450:	40023800 	.word	0x40023800
 8027454:	00f42400 	.word	0x00f42400
 8027458:	01c9c380 	.word	0x01c9c380

0802745c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802745c:	b480      	push	{r7}
 802745e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8027460:	4b03      	ldr	r3, [pc, #12]	; (8027470 <HAL_RCC_GetHCLKFreq+0x14>)
 8027462:	681b      	ldr	r3, [r3, #0]
}
 8027464:	4618      	mov	r0, r3
 8027466:	46bd      	mov	sp, r7
 8027468:	f85d 7b04 	ldr.w	r7, [sp], #4
 802746c:	4770      	bx	lr
 802746e:	bf00      	nop
 8027470:	20000004 	.word	0x20000004

08027474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8027474:	b580      	push	{r7, lr}
 8027476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8027478:	f7ff fff0 	bl	802745c <HAL_RCC_GetHCLKFreq>
 802747c:	4602      	mov	r2, r0
 802747e:	4b05      	ldr	r3, [pc, #20]	; (8027494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8027480:	689b      	ldr	r3, [r3, #8]
 8027482:	0a9b      	lsrs	r3, r3, #10
 8027484:	f003 0307 	and.w	r3, r3, #7
 8027488:	4903      	ldr	r1, [pc, #12]	; (8027498 <HAL_RCC_GetPCLK1Freq+0x24>)
 802748a:	5ccb      	ldrb	r3, [r1, r3]
 802748c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027490:	4618      	mov	r0, r3
 8027492:	bd80      	pop	{r7, pc}
 8027494:	40023800 	.word	0x40023800
 8027498:	0803b974 	.word	0x0803b974

0802749c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802749c:	b580      	push	{r7, lr}
 802749e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80274a0:	f7ff ffdc 	bl	802745c <HAL_RCC_GetHCLKFreq>
 80274a4:	4602      	mov	r2, r0
 80274a6:	4b05      	ldr	r3, [pc, #20]	; (80274bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80274a8:	689b      	ldr	r3, [r3, #8]
 80274aa:	0b5b      	lsrs	r3, r3, #13
 80274ac:	f003 0307 	and.w	r3, r3, #7
 80274b0:	4903      	ldr	r1, [pc, #12]	; (80274c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80274b2:	5ccb      	ldrb	r3, [r1, r3]
 80274b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80274b8:	4618      	mov	r0, r3
 80274ba:	bd80      	pop	{r7, pc}
 80274bc:	40023800 	.word	0x40023800
 80274c0:	0803b974 	.word	0x0803b974

080274c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80274c4:	b480      	push	{r7}
 80274c6:	b083      	sub	sp, #12
 80274c8:	af00      	add	r7, sp, #0
 80274ca:	6078      	str	r0, [r7, #4]
 80274cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80274ce:	687b      	ldr	r3, [r7, #4]
 80274d0:	220f      	movs	r2, #15
 80274d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80274d4:	4b12      	ldr	r3, [pc, #72]	; (8027520 <HAL_RCC_GetClockConfig+0x5c>)
 80274d6:	689b      	ldr	r3, [r3, #8]
 80274d8:	f003 0203 	and.w	r2, r3, #3
 80274dc:	687b      	ldr	r3, [r7, #4]
 80274de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80274e0:	4b0f      	ldr	r3, [pc, #60]	; (8027520 <HAL_RCC_GetClockConfig+0x5c>)
 80274e2:	689b      	ldr	r3, [r3, #8]
 80274e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80274e8:	687b      	ldr	r3, [r7, #4]
 80274ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80274ec:	4b0c      	ldr	r3, [pc, #48]	; (8027520 <HAL_RCC_GetClockConfig+0x5c>)
 80274ee:	689b      	ldr	r3, [r3, #8]
 80274f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80274f4:	687b      	ldr	r3, [r7, #4]
 80274f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80274f8:	4b09      	ldr	r3, [pc, #36]	; (8027520 <HAL_RCC_GetClockConfig+0x5c>)
 80274fa:	689b      	ldr	r3, [r3, #8]
 80274fc:	08db      	lsrs	r3, r3, #3
 80274fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027502:	687b      	ldr	r3, [r7, #4]
 8027504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027506:	4b07      	ldr	r3, [pc, #28]	; (8027524 <HAL_RCC_GetClockConfig+0x60>)
 8027508:	681b      	ldr	r3, [r3, #0]
 802750a:	f003 020f 	and.w	r2, r3, #15
 802750e:	683b      	ldr	r3, [r7, #0]
 8027510:	601a      	str	r2, [r3, #0]
}
 8027512:	bf00      	nop
 8027514:	370c      	adds	r7, #12
 8027516:	46bd      	mov	sp, r7
 8027518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802751c:	4770      	bx	lr
 802751e:	bf00      	nop
 8027520:	40023800 	.word	0x40023800
 8027524:	40023c00 	.word	0x40023c00

08027528 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027528:	b580      	push	{r7, lr}
 802752a:	b086      	sub	sp, #24
 802752c:	af00      	add	r7, sp, #0
 802752e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027530:	2300      	movs	r3, #0
 8027532:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8027534:	2300      	movs	r3, #0
 8027536:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027538:	687b      	ldr	r3, [r7, #4]
 802753a:	681b      	ldr	r3, [r3, #0]
 802753c:	f003 0301 	and.w	r3, r3, #1
 8027540:	2b00      	cmp	r3, #0
 8027542:	d105      	bne.n	8027550 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8027544:	687b      	ldr	r3, [r7, #4]
 8027546:	681b      	ldr	r3, [r3, #0]
 8027548:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802754c:	2b00      	cmp	r3, #0
 802754e:	d035      	beq.n	80275bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8027550:	4b62      	ldr	r3, [pc, #392]	; (80276dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8027552:	2200      	movs	r2, #0
 8027554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027556:	f7fa fb07 	bl	8021b68 <HAL_GetTick>
 802755a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802755c:	e008      	b.n	8027570 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802755e:	f7fa fb03 	bl	8021b68 <HAL_GetTick>
 8027562:	4602      	mov	r2, r0
 8027564:	697b      	ldr	r3, [r7, #20]
 8027566:	1ad3      	subs	r3, r2, r3
 8027568:	2b02      	cmp	r3, #2
 802756a:	d901      	bls.n	8027570 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802756c:	2303      	movs	r3, #3
 802756e:	e0b0      	b.n	80276d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027570:	4b5b      	ldr	r3, [pc, #364]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8027572:	681b      	ldr	r3, [r3, #0]
 8027574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027578:	2b00      	cmp	r3, #0
 802757a:	d1f0      	bne.n	802755e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 802757c:	687b      	ldr	r3, [r7, #4]
 802757e:	685b      	ldr	r3, [r3, #4]
 8027580:	019a      	lsls	r2, r3, #6
 8027582:	687b      	ldr	r3, [r7, #4]
 8027584:	689b      	ldr	r3, [r3, #8]
 8027586:	071b      	lsls	r3, r3, #28
 8027588:	4955      	ldr	r1, [pc, #340]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802758a:	4313      	orrs	r3, r2
 802758c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8027590:	4b52      	ldr	r3, [pc, #328]	; (80276dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8027592:	2201      	movs	r2, #1
 8027594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027596:	f7fa fae7 	bl	8021b68 <HAL_GetTick>
 802759a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802759c:	e008      	b.n	80275b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802759e:	f7fa fae3 	bl	8021b68 <HAL_GetTick>
 80275a2:	4602      	mov	r2, r0
 80275a4:	697b      	ldr	r3, [r7, #20]
 80275a6:	1ad3      	subs	r3, r2, r3
 80275a8:	2b02      	cmp	r3, #2
 80275aa:	d901      	bls.n	80275b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80275ac:	2303      	movs	r3, #3
 80275ae:	e090      	b.n	80276d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80275b0:	4b4b      	ldr	r3, [pc, #300]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80275b2:	681b      	ldr	r3, [r3, #0]
 80275b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80275b8:	2b00      	cmp	r3, #0
 80275ba:	d0f0      	beq.n	802759e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80275bc:	687b      	ldr	r3, [r7, #4]
 80275be:	681b      	ldr	r3, [r3, #0]
 80275c0:	f003 0302 	and.w	r3, r3, #2
 80275c4:	2b00      	cmp	r3, #0
 80275c6:	f000 8083 	beq.w	80276d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80275ca:	2300      	movs	r3, #0
 80275cc:	60fb      	str	r3, [r7, #12]
 80275ce:	4b44      	ldr	r3, [pc, #272]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80275d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80275d2:	4a43      	ldr	r2, [pc, #268]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80275d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80275d8:	6413      	str	r3, [r2, #64]	; 0x40
 80275da:	4b41      	ldr	r3, [pc, #260]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80275dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80275de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80275e2:	60fb      	str	r3, [r7, #12]
 80275e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80275e6:	4b3f      	ldr	r3, [pc, #252]	; (80276e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80275e8:	681b      	ldr	r3, [r3, #0]
 80275ea:	4a3e      	ldr	r2, [pc, #248]	; (80276e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80275ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80275f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80275f2:	f7fa fab9 	bl	8021b68 <HAL_GetTick>
 80275f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80275f8:	e008      	b.n	802760c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80275fa:	f7fa fab5 	bl	8021b68 <HAL_GetTick>
 80275fe:	4602      	mov	r2, r0
 8027600:	697b      	ldr	r3, [r7, #20]
 8027602:	1ad3      	subs	r3, r2, r3
 8027604:	2b02      	cmp	r3, #2
 8027606:	d901      	bls.n	802760c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8027608:	2303      	movs	r3, #3
 802760a:	e062      	b.n	80276d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 802760c:	4b35      	ldr	r3, [pc, #212]	; (80276e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802760e:	681b      	ldr	r3, [r3, #0]
 8027610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027614:	2b00      	cmp	r3, #0
 8027616:	d0f0      	beq.n	80275fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8027618:	4b31      	ldr	r3, [pc, #196]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802761a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802761c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027620:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8027622:	693b      	ldr	r3, [r7, #16]
 8027624:	2b00      	cmp	r3, #0
 8027626:	d02f      	beq.n	8027688 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8027628:	687b      	ldr	r3, [r7, #4]
 802762a:	68db      	ldr	r3, [r3, #12]
 802762c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027630:	693a      	ldr	r2, [r7, #16]
 8027632:	429a      	cmp	r2, r3
 8027634:	d028      	beq.n	8027688 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8027636:	4b2a      	ldr	r3, [pc, #168]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8027638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802763a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802763e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8027640:	4b29      	ldr	r3, [pc, #164]	; (80276e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8027642:	2201      	movs	r2, #1
 8027644:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8027646:	4b28      	ldr	r3, [pc, #160]	; (80276e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8027648:	2200      	movs	r2, #0
 802764a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 802764c:	4a24      	ldr	r2, [pc, #144]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802764e:	693b      	ldr	r3, [r7, #16]
 8027650:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8027652:	4b23      	ldr	r3, [pc, #140]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8027654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027656:	f003 0301 	and.w	r3, r3, #1
 802765a:	2b01      	cmp	r3, #1
 802765c:	d114      	bne.n	8027688 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 802765e:	f7fa fa83 	bl	8021b68 <HAL_GetTick>
 8027662:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027664:	e00a      	b.n	802767c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8027666:	f7fa fa7f 	bl	8021b68 <HAL_GetTick>
 802766a:	4602      	mov	r2, r0
 802766c:	697b      	ldr	r3, [r7, #20]
 802766e:	1ad3      	subs	r3, r2, r3
 8027670:	f241 3288 	movw	r2, #5000	; 0x1388
 8027674:	4293      	cmp	r3, r2
 8027676:	d901      	bls.n	802767c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8027678:	2303      	movs	r3, #3
 802767a:	e02a      	b.n	80276d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802767c:	4b18      	ldr	r3, [pc, #96]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802767e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027680:	f003 0302 	and.w	r3, r3, #2
 8027684:	2b00      	cmp	r3, #0
 8027686:	d0ee      	beq.n	8027666 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8027688:	687b      	ldr	r3, [r7, #4]
 802768a:	68db      	ldr	r3, [r3, #12]
 802768c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8027694:	d10d      	bne.n	80276b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8027696:	4b12      	ldr	r3, [pc, #72]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8027698:	689b      	ldr	r3, [r3, #8]
 802769a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802769e:	687b      	ldr	r3, [r7, #4]
 80276a0:	68db      	ldr	r3, [r3, #12]
 80276a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80276a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80276aa:	490d      	ldr	r1, [pc, #52]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80276ac:	4313      	orrs	r3, r2
 80276ae:	608b      	str	r3, [r1, #8]
 80276b0:	e005      	b.n	80276be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80276b2:	4b0b      	ldr	r3, [pc, #44]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80276b4:	689b      	ldr	r3, [r3, #8]
 80276b6:	4a0a      	ldr	r2, [pc, #40]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80276b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80276bc:	6093      	str	r3, [r2, #8]
 80276be:	4b08      	ldr	r3, [pc, #32]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80276c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80276c2:	687b      	ldr	r3, [r7, #4]
 80276c4:	68db      	ldr	r3, [r3, #12]
 80276c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80276ca:	4905      	ldr	r1, [pc, #20]	; (80276e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80276cc:	4313      	orrs	r3, r2
 80276ce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80276d0:	2300      	movs	r3, #0
}
 80276d2:	4618      	mov	r0, r3
 80276d4:	3718      	adds	r7, #24
 80276d6:	46bd      	mov	sp, r7
 80276d8:	bd80      	pop	{r7, pc}
 80276da:	bf00      	nop
 80276dc:	42470068 	.word	0x42470068
 80276e0:	40023800 	.word	0x40023800
 80276e4:	40007000 	.word	0x40007000
 80276e8:	42470e40 	.word	0x42470e40

080276ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80276ec:	b480      	push	{r7}
 80276ee:	b087      	sub	sp, #28
 80276f0:	af00      	add	r7, sp, #0
 80276f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80276f4:	2300      	movs	r3, #0
 80276f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80276f8:	2300      	movs	r3, #0
 80276fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80276fc:	2300      	movs	r3, #0
 80276fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8027700:	2300      	movs	r3, #0
 8027702:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8027704:	687b      	ldr	r3, [r7, #4]
 8027706:	2b01      	cmp	r3, #1
 8027708:	d13e      	bne.n	8027788 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 802770a:	4b23      	ldr	r3, [pc, #140]	; (8027798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 802770c:	689b      	ldr	r3, [r3, #8]
 802770e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8027712:	60fb      	str	r3, [r7, #12]
 8027714:	68fb      	ldr	r3, [r7, #12]
 8027716:	2b00      	cmp	r3, #0
 8027718:	d005      	beq.n	8027726 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 802771a:	68fb      	ldr	r3, [r7, #12]
 802771c:	2b01      	cmp	r3, #1
 802771e:	d12f      	bne.n	8027780 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8027720:	4b1e      	ldr	r3, [pc, #120]	; (802779c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8027722:	617b      	str	r3, [r7, #20]
          break;
 8027724:	e02f      	b.n	8027786 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8027726:	4b1c      	ldr	r3, [pc, #112]	; (8027798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8027728:	685b      	ldr	r3, [r3, #4]
 802772a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802772e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027732:	d108      	bne.n	8027746 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8027734:	4b18      	ldr	r3, [pc, #96]	; (8027798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8027736:	685b      	ldr	r3, [r3, #4]
 8027738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802773c:	4a18      	ldr	r2, [pc, #96]	; (80277a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 802773e:	fbb2 f3f3 	udiv	r3, r2, r3
 8027742:	613b      	str	r3, [r7, #16]
 8027744:	e007      	b.n	8027756 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8027746:	4b14      	ldr	r3, [pc, #80]	; (8027798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8027748:	685b      	ldr	r3, [r3, #4]
 802774a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802774e:	4a15      	ldr	r2, [pc, #84]	; (80277a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8027750:	fbb2 f3f3 	udiv	r3, r2, r3
 8027754:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8027756:	4b10      	ldr	r3, [pc, #64]	; (8027798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8027758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802775c:	099b      	lsrs	r3, r3, #6
 802775e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8027762:	693b      	ldr	r3, [r7, #16]
 8027764:	fb02 f303 	mul.w	r3, r2, r3
 8027768:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 802776a:	4b0b      	ldr	r3, [pc, #44]	; (8027798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 802776c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027770:	0f1b      	lsrs	r3, r3, #28
 8027772:	f003 0307 	and.w	r3, r3, #7
 8027776:	68ba      	ldr	r2, [r7, #8]
 8027778:	fbb2 f3f3 	udiv	r3, r2, r3
 802777c:	617b      	str	r3, [r7, #20]
          break;
 802777e:	e002      	b.n	8027786 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8027780:	2300      	movs	r3, #0
 8027782:	617b      	str	r3, [r7, #20]
          break;
 8027784:	bf00      	nop
        }
      }
      break;
 8027786:	bf00      	nop
    }
  }
  return frequency;
 8027788:	697b      	ldr	r3, [r7, #20]
}
 802778a:	4618      	mov	r0, r3
 802778c:	371c      	adds	r7, #28
 802778e:	46bd      	mov	sp, r7
 8027790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027794:	4770      	bx	lr
 8027796:	bf00      	nop
 8027798:	40023800 	.word	0x40023800
 802779c:	00bb8000 	.word	0x00bb8000
 80277a0:	01c9c380 	.word	0x01c9c380
 80277a4:	00f42400 	.word	0x00f42400

080277a8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80277a8:	b580      	push	{r7, lr}
 80277aa:	b082      	sub	sp, #8
 80277ac:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80277ae:	f7fa f9db 	bl	8021b68 <HAL_GetTick>
 80277b2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80277b4:	4b5d      	ldr	r3, [pc, #372]	; (802792c <HAL_RCC_DeInit+0x184>)
 80277b6:	681b      	ldr	r3, [r3, #0]
 80277b8:	4a5c      	ldr	r2, [pc, #368]	; (802792c <HAL_RCC_DeInit+0x184>)
 80277ba:	f043 0301 	orr.w	r3, r3, #1
 80277be:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80277c0:	e008      	b.n	80277d4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80277c2:	f7fa f9d1 	bl	8021b68 <HAL_GetTick>
 80277c6:	4602      	mov	r2, r0
 80277c8:	687b      	ldr	r3, [r7, #4]
 80277ca:	1ad3      	subs	r3, r2, r3
 80277cc:	2b02      	cmp	r3, #2
 80277ce:	d901      	bls.n	80277d4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80277d0:	2303      	movs	r3, #3
 80277d2:	e0a7      	b.n	8027924 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80277d4:	4b55      	ldr	r3, [pc, #340]	; (802792c <HAL_RCC_DeInit+0x184>)
 80277d6:	681b      	ldr	r3, [r3, #0]
 80277d8:	f003 0302 	and.w	r3, r3, #2
 80277dc:	2b00      	cmp	r3, #0
 80277de:	d0f0      	beq.n	80277c2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80277e0:	4b52      	ldr	r3, [pc, #328]	; (802792c <HAL_RCC_DeInit+0x184>)
 80277e2:	681b      	ldr	r3, [r3, #0]
 80277e4:	4a51      	ldr	r2, [pc, #324]	; (802792c <HAL_RCC_DeInit+0x184>)
 80277e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80277ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80277ec:	f7fa f9bc 	bl	8021b68 <HAL_GetTick>
 80277f0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80277f2:	4b4e      	ldr	r3, [pc, #312]	; (802792c <HAL_RCC_DeInit+0x184>)
 80277f4:	2200      	movs	r2, #0
 80277f6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80277f8:	e00a      	b.n	8027810 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80277fa:	f7fa f9b5 	bl	8021b68 <HAL_GetTick>
 80277fe:	4602      	mov	r2, r0
 8027800:	687b      	ldr	r3, [r7, #4]
 8027802:	1ad3      	subs	r3, r2, r3
 8027804:	f241 3288 	movw	r2, #5000	; 0x1388
 8027808:	4293      	cmp	r3, r2
 802780a:	d901      	bls.n	8027810 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 802780c:	2303      	movs	r3, #3
 802780e:	e089      	b.n	8027924 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8027810:	4b46      	ldr	r3, [pc, #280]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027812:	689b      	ldr	r3, [r3, #8]
 8027814:	f003 030c 	and.w	r3, r3, #12
 8027818:	2b00      	cmp	r3, #0
 802781a:	d1ee      	bne.n	80277fa <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 802781c:	f7fa f9a4 	bl	8021b68 <HAL_GetTick>
 8027820:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8027822:	4b42      	ldr	r3, [pc, #264]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027824:	681b      	ldr	r3, [r3, #0]
 8027826:	4a41      	ldr	r2, [pc, #260]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027828:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 802782c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 802782e:	e008      	b.n	8027842 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8027830:	f7fa f99a 	bl	8021b68 <HAL_GetTick>
 8027834:	4602      	mov	r2, r0
 8027836:	687b      	ldr	r3, [r7, #4]
 8027838:	1ad3      	subs	r3, r2, r3
 802783a:	2b64      	cmp	r3, #100	; 0x64
 802783c:	d901      	bls.n	8027842 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 802783e:	2303      	movs	r3, #3
 8027840:	e070      	b.n	8027924 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8027842:	4b3a      	ldr	r3, [pc, #232]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027844:	681b      	ldr	r3, [r3, #0]
 8027846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802784a:	2b00      	cmp	r3, #0
 802784c:	d1f0      	bne.n	8027830 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 802784e:	f7fa f98b 	bl	8021b68 <HAL_GetTick>
 8027852:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8027854:	4b35      	ldr	r3, [pc, #212]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027856:	681b      	ldr	r3, [r3, #0]
 8027858:	4a34      	ldr	r2, [pc, #208]	; (802792c <HAL_RCC_DeInit+0x184>)
 802785a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802785e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8027860:	e008      	b.n	8027874 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027862:	f7fa f981 	bl	8021b68 <HAL_GetTick>
 8027866:	4602      	mov	r2, r0
 8027868:	687b      	ldr	r3, [r7, #4]
 802786a:	1ad3      	subs	r3, r2, r3
 802786c:	2b02      	cmp	r3, #2
 802786e:	d901      	bls.n	8027874 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8027870:	2303      	movs	r3, #3
 8027872:	e057      	b.n	8027924 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8027874:	4b2d      	ldr	r3, [pc, #180]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027876:	681b      	ldr	r3, [r3, #0]
 8027878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802787c:	2b00      	cmp	r3, #0
 802787e:	d1f0      	bne.n	8027862 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8027880:	f7fa f972 	bl	8021b68 <HAL_GetTick>
 8027884:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8027886:	4b29      	ldr	r3, [pc, #164]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027888:	681b      	ldr	r3, [r3, #0]
 802788a:	4a28      	ldr	r2, [pc, #160]	; (802792c <HAL_RCC_DeInit+0x184>)
 802788c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8027890:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8027892:	e008      	b.n	80278a6 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8027894:	f7fa f968 	bl	8021b68 <HAL_GetTick>
 8027898:	4602      	mov	r2, r0
 802789a:	687b      	ldr	r3, [r7, #4]
 802789c:	1ad3      	subs	r3, r2, r3
 802789e:	2b02      	cmp	r3, #2
 80278a0:	d901      	bls.n	80278a6 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80278a2:	2303      	movs	r3, #3
 80278a4:	e03e      	b.n	8027924 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80278a6:	4b21      	ldr	r3, [pc, #132]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278a8:	681b      	ldr	r3, [r3, #0]
 80278aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80278ae:	2b00      	cmp	r3, #0
 80278b0:	d1f0      	bne.n	8027894 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80278b2:	4b1e      	ldr	r3, [pc, #120]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278b4:	4a1e      	ldr	r2, [pc, #120]	; (8027930 <HAL_RCC_DeInit+0x188>)
 80278b6:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80278b8:	4b1c      	ldr	r3, [pc, #112]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278ba:	4a1e      	ldr	r2, [pc, #120]	; (8027934 <HAL_RCC_DeInit+0x18c>)
 80278bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80278c0:	4b1a      	ldr	r3, [pc, #104]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278c2:	68db      	ldr	r3, [r3, #12]
 80278c4:	4a19      	ldr	r2, [pc, #100]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278c6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80278ca:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80278cc:	4b17      	ldr	r3, [pc, #92]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278ce:	68db      	ldr	r3, [r3, #12]
 80278d0:	4a16      	ldr	r2, [pc, #88]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80278d6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80278d8:	4b14      	ldr	r3, [pc, #80]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278da:	68db      	ldr	r3, [r3, #12]
 80278dc:	4a13      	ldr	r2, [pc, #76]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278de:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80278e2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80278e4:	4b11      	ldr	r3, [pc, #68]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278e6:	68db      	ldr	r3, [r3, #12]
 80278e8:	4a10      	ldr	r2, [pc, #64]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80278ee:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80278f0:	4b0e      	ldr	r3, [pc, #56]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80278f4:	4a0d      	ldr	r2, [pc, #52]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278f6:	f023 0301 	bic.w	r3, r3, #1
 80278fa:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80278fc:	4b0b      	ldr	r3, [pc, #44]	; (802792c <HAL_RCC_DeInit+0x184>)
 80278fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027900:	4a0a      	ldr	r2, [pc, #40]	; (802792c <HAL_RCC_DeInit+0x184>)
 8027902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027906:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8027908:	4b0b      	ldr	r3, [pc, #44]	; (8027938 <HAL_RCC_DeInit+0x190>)
 802790a:	4a0c      	ldr	r2, [pc, #48]	; (802793c <HAL_RCC_DeInit+0x194>)
 802790c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 802790e:	4b0c      	ldr	r3, [pc, #48]	; (8027940 <HAL_RCC_DeInit+0x198>)
 8027910:	681b      	ldr	r3, [r3, #0]
 8027912:	4618      	mov	r0, r3
 8027914:	f7f9 ff1e 	bl	8021754 <HAL_InitTick>
 8027918:	4603      	mov	r3, r0
 802791a:	2b00      	cmp	r3, #0
 802791c:	d001      	beq.n	8027922 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 802791e:	2301      	movs	r3, #1
 8027920:	e000      	b.n	8027924 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8027922:	2300      	movs	r3, #0
  }
}
 8027924:	4618      	mov	r0, r3
 8027926:	3708      	adds	r7, #8
 8027928:	46bd      	mov	sp, r7
 802792a:	bd80      	pop	{r7, pc}
 802792c:	40023800 	.word	0x40023800
 8027930:	04003010 	.word	0x04003010
 8027934:	20003000 	.word	0x20003000
 8027938:	20000004 	.word	0x20000004
 802793c:	00f42400 	.word	0x00f42400
 8027940:	20000008 	.word	0x20000008

08027944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8027944:	b580      	push	{r7, lr}
 8027946:	b082      	sub	sp, #8
 8027948:	af00      	add	r7, sp, #0
 802794a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802794c:	687b      	ldr	r3, [r7, #4]
 802794e:	2b00      	cmp	r3, #0
 8027950:	d101      	bne.n	8027956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8027952:	2301      	movs	r3, #1
 8027954:	e056      	b.n	8027a04 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8027956:	687b      	ldr	r3, [r7, #4]
 8027958:	2200      	movs	r2, #0
 802795a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802795c:	687b      	ldr	r3, [r7, #4]
 802795e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027962:	b2db      	uxtb	r3, r3
 8027964:	2b00      	cmp	r3, #0
 8027966:	d106      	bne.n	8027976 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8027968:	687b      	ldr	r3, [r7, #4]
 802796a:	2200      	movs	r2, #0
 802796c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8027970:	6878      	ldr	r0, [r7, #4]
 8027972:	f7f9 fcef 	bl	8021354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8027976:	687b      	ldr	r3, [r7, #4]
 8027978:	2202      	movs	r2, #2
 802797a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802797e:	687b      	ldr	r3, [r7, #4]
 8027980:	681b      	ldr	r3, [r3, #0]
 8027982:	681a      	ldr	r2, [r3, #0]
 8027984:	687b      	ldr	r3, [r7, #4]
 8027986:	681b      	ldr	r3, [r3, #0]
 8027988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802798c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 802798e:	687b      	ldr	r3, [r7, #4]
 8027990:	685a      	ldr	r2, [r3, #4]
 8027992:	687b      	ldr	r3, [r7, #4]
 8027994:	689b      	ldr	r3, [r3, #8]
 8027996:	431a      	orrs	r2, r3
 8027998:	687b      	ldr	r3, [r7, #4]
 802799a:	68db      	ldr	r3, [r3, #12]
 802799c:	431a      	orrs	r2, r3
 802799e:	687b      	ldr	r3, [r7, #4]
 80279a0:	691b      	ldr	r3, [r3, #16]
 80279a2:	431a      	orrs	r2, r3
 80279a4:	687b      	ldr	r3, [r7, #4]
 80279a6:	695b      	ldr	r3, [r3, #20]
 80279a8:	431a      	orrs	r2, r3
 80279aa:	687b      	ldr	r3, [r7, #4]
 80279ac:	699b      	ldr	r3, [r3, #24]
 80279ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80279b2:	431a      	orrs	r2, r3
 80279b4:	687b      	ldr	r3, [r7, #4]
 80279b6:	69db      	ldr	r3, [r3, #28]
 80279b8:	431a      	orrs	r2, r3
 80279ba:	687b      	ldr	r3, [r7, #4]
 80279bc:	6a1b      	ldr	r3, [r3, #32]
 80279be:	ea42 0103 	orr.w	r1, r2, r3
 80279c2:	687b      	ldr	r3, [r7, #4]
 80279c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80279c6:	687b      	ldr	r3, [r7, #4]
 80279c8:	681b      	ldr	r3, [r3, #0]
 80279ca:	430a      	orrs	r2, r1
 80279cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80279ce:	687b      	ldr	r3, [r7, #4]
 80279d0:	699b      	ldr	r3, [r3, #24]
 80279d2:	0c1b      	lsrs	r3, r3, #16
 80279d4:	f003 0104 	and.w	r1, r3, #4
 80279d8:	687b      	ldr	r3, [r7, #4]
 80279da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80279dc:	687b      	ldr	r3, [r7, #4]
 80279de:	681b      	ldr	r3, [r3, #0]
 80279e0:	430a      	orrs	r2, r1
 80279e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80279e4:	687b      	ldr	r3, [r7, #4]
 80279e6:	681b      	ldr	r3, [r3, #0]
 80279e8:	69da      	ldr	r2, [r3, #28]
 80279ea:	687b      	ldr	r3, [r7, #4]
 80279ec:	681b      	ldr	r3, [r3, #0]
 80279ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80279f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80279f4:	687b      	ldr	r3, [r7, #4]
 80279f6:	2200      	movs	r2, #0
 80279f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80279fa:	687b      	ldr	r3, [r7, #4]
 80279fc:	2201      	movs	r2, #1
 80279fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8027a02:	2300      	movs	r3, #0
}
 8027a04:	4618      	mov	r0, r3
 8027a06:	3708      	adds	r7, #8
 8027a08:	46bd      	mov	sp, r7
 8027a0a:	bd80      	pop	{r7, pc}

08027a0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8027a0c:	b580      	push	{r7, lr}
 8027a0e:	b08c      	sub	sp, #48	; 0x30
 8027a10:	af00      	add	r7, sp, #0
 8027a12:	60f8      	str	r0, [r7, #12]
 8027a14:	60b9      	str	r1, [r7, #8]
 8027a16:	607a      	str	r2, [r7, #4]
 8027a18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8027a1a:	2301      	movs	r3, #1
 8027a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8027a1e:	2300      	movs	r3, #0
 8027a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027a24:	68fb      	ldr	r3, [r7, #12]
 8027a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027a2a:	2b01      	cmp	r3, #1
 8027a2c:	d101      	bne.n	8027a32 <HAL_SPI_TransmitReceive+0x26>
 8027a2e:	2302      	movs	r3, #2
 8027a30:	e18a      	b.n	8027d48 <HAL_SPI_TransmitReceive+0x33c>
 8027a32:	68fb      	ldr	r3, [r7, #12]
 8027a34:	2201      	movs	r2, #1
 8027a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027a3a:	f7fa f895 	bl	8021b68 <HAL_GetTick>
 8027a3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8027a40:	68fb      	ldr	r3, [r7, #12]
 8027a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8027a4a:	68fb      	ldr	r3, [r7, #12]
 8027a4c:	685b      	ldr	r3, [r3, #4]
 8027a4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8027a50:	887b      	ldrh	r3, [r7, #2]
 8027a52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8027a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027a58:	2b01      	cmp	r3, #1
 8027a5a:	d00f      	beq.n	8027a7c <HAL_SPI_TransmitReceive+0x70>
 8027a5c:	69fb      	ldr	r3, [r7, #28]
 8027a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027a62:	d107      	bne.n	8027a74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8027a64:	68fb      	ldr	r3, [r7, #12]
 8027a66:	689b      	ldr	r3, [r3, #8]
 8027a68:	2b00      	cmp	r3, #0
 8027a6a:	d103      	bne.n	8027a74 <HAL_SPI_TransmitReceive+0x68>
 8027a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027a70:	2b04      	cmp	r3, #4
 8027a72:	d003      	beq.n	8027a7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8027a74:	2302      	movs	r3, #2
 8027a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027a7a:	e15b      	b.n	8027d34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8027a7c:	68bb      	ldr	r3, [r7, #8]
 8027a7e:	2b00      	cmp	r3, #0
 8027a80:	d005      	beq.n	8027a8e <HAL_SPI_TransmitReceive+0x82>
 8027a82:	687b      	ldr	r3, [r7, #4]
 8027a84:	2b00      	cmp	r3, #0
 8027a86:	d002      	beq.n	8027a8e <HAL_SPI_TransmitReceive+0x82>
 8027a88:	887b      	ldrh	r3, [r7, #2]
 8027a8a:	2b00      	cmp	r3, #0
 8027a8c:	d103      	bne.n	8027a96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8027a8e:	2301      	movs	r3, #1
 8027a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027a94:	e14e      	b.n	8027d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8027a96:	68fb      	ldr	r3, [r7, #12]
 8027a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027a9c:	b2db      	uxtb	r3, r3
 8027a9e:	2b04      	cmp	r3, #4
 8027aa0:	d003      	beq.n	8027aaa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8027aa2:	68fb      	ldr	r3, [r7, #12]
 8027aa4:	2205      	movs	r2, #5
 8027aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027aaa:	68fb      	ldr	r3, [r7, #12]
 8027aac:	2200      	movs	r2, #0
 8027aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8027ab0:	68fb      	ldr	r3, [r7, #12]
 8027ab2:	687a      	ldr	r2, [r7, #4]
 8027ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8027ab6:	68fb      	ldr	r3, [r7, #12]
 8027ab8:	887a      	ldrh	r2, [r7, #2]
 8027aba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8027abc:	68fb      	ldr	r3, [r7, #12]
 8027abe:	887a      	ldrh	r2, [r7, #2]
 8027ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8027ac2:	68fb      	ldr	r3, [r7, #12]
 8027ac4:	68ba      	ldr	r2, [r7, #8]
 8027ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8027ac8:	68fb      	ldr	r3, [r7, #12]
 8027aca:	887a      	ldrh	r2, [r7, #2]
 8027acc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8027ace:	68fb      	ldr	r3, [r7, #12]
 8027ad0:	887a      	ldrh	r2, [r7, #2]
 8027ad2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8027ad4:	68fb      	ldr	r3, [r7, #12]
 8027ad6:	2200      	movs	r2, #0
 8027ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027ada:	68fb      	ldr	r3, [r7, #12]
 8027adc:	2200      	movs	r2, #0
 8027ade:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027ae0:	68fb      	ldr	r3, [r7, #12]
 8027ae2:	681b      	ldr	r3, [r3, #0]
 8027ae4:	681b      	ldr	r3, [r3, #0]
 8027ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027aea:	2b40      	cmp	r3, #64	; 0x40
 8027aec:	d007      	beq.n	8027afe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027aee:	68fb      	ldr	r3, [r7, #12]
 8027af0:	681b      	ldr	r3, [r3, #0]
 8027af2:	681a      	ldr	r2, [r3, #0]
 8027af4:	68fb      	ldr	r3, [r7, #12]
 8027af6:	681b      	ldr	r3, [r3, #0]
 8027af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027afc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8027afe:	68fb      	ldr	r3, [r7, #12]
 8027b00:	68db      	ldr	r3, [r3, #12]
 8027b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027b06:	d178      	bne.n	8027bfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027b08:	68fb      	ldr	r3, [r7, #12]
 8027b0a:	685b      	ldr	r3, [r3, #4]
 8027b0c:	2b00      	cmp	r3, #0
 8027b0e:	d002      	beq.n	8027b16 <HAL_SPI_TransmitReceive+0x10a>
 8027b10:	8b7b      	ldrh	r3, [r7, #26]
 8027b12:	2b01      	cmp	r3, #1
 8027b14:	d166      	bne.n	8027be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027b16:	68fb      	ldr	r3, [r7, #12]
 8027b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b1a:	881a      	ldrh	r2, [r3, #0]
 8027b1c:	68fb      	ldr	r3, [r7, #12]
 8027b1e:	681b      	ldr	r3, [r3, #0]
 8027b20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8027b22:	68fb      	ldr	r3, [r7, #12]
 8027b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b26:	1c9a      	adds	r2, r3, #2
 8027b28:	68fb      	ldr	r3, [r7, #12]
 8027b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027b2c:	68fb      	ldr	r3, [r7, #12]
 8027b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027b30:	b29b      	uxth	r3, r3
 8027b32:	3b01      	subs	r3, #1
 8027b34:	b29a      	uxth	r2, r3
 8027b36:	68fb      	ldr	r3, [r7, #12]
 8027b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027b3a:	e053      	b.n	8027be4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027b3c:	68fb      	ldr	r3, [r7, #12]
 8027b3e:	681b      	ldr	r3, [r3, #0]
 8027b40:	689b      	ldr	r3, [r3, #8]
 8027b42:	f003 0302 	and.w	r3, r3, #2
 8027b46:	2b02      	cmp	r3, #2
 8027b48:	d11b      	bne.n	8027b82 <HAL_SPI_TransmitReceive+0x176>
 8027b4a:	68fb      	ldr	r3, [r7, #12]
 8027b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027b4e:	b29b      	uxth	r3, r3
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	d016      	beq.n	8027b82 <HAL_SPI_TransmitReceive+0x176>
 8027b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b56:	2b01      	cmp	r3, #1
 8027b58:	d113      	bne.n	8027b82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027b5a:	68fb      	ldr	r3, [r7, #12]
 8027b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b5e:	881a      	ldrh	r2, [r3, #0]
 8027b60:	68fb      	ldr	r3, [r7, #12]
 8027b62:	681b      	ldr	r3, [r3, #0]
 8027b64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027b66:	68fb      	ldr	r3, [r7, #12]
 8027b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027b6a:	1c9a      	adds	r2, r3, #2
 8027b6c:	68fb      	ldr	r3, [r7, #12]
 8027b6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027b70:	68fb      	ldr	r3, [r7, #12]
 8027b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027b74:	b29b      	uxth	r3, r3
 8027b76:	3b01      	subs	r3, #1
 8027b78:	b29a      	uxth	r2, r3
 8027b7a:	68fb      	ldr	r3, [r7, #12]
 8027b7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027b7e:	2300      	movs	r3, #0
 8027b80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027b82:	68fb      	ldr	r3, [r7, #12]
 8027b84:	681b      	ldr	r3, [r3, #0]
 8027b86:	689b      	ldr	r3, [r3, #8]
 8027b88:	f003 0301 	and.w	r3, r3, #1
 8027b8c:	2b01      	cmp	r3, #1
 8027b8e:	d119      	bne.n	8027bc4 <HAL_SPI_TransmitReceive+0x1b8>
 8027b90:	68fb      	ldr	r3, [r7, #12]
 8027b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027b94:	b29b      	uxth	r3, r3
 8027b96:	2b00      	cmp	r3, #0
 8027b98:	d014      	beq.n	8027bc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027b9a:	68fb      	ldr	r3, [r7, #12]
 8027b9c:	681b      	ldr	r3, [r3, #0]
 8027b9e:	68da      	ldr	r2, [r3, #12]
 8027ba0:	68fb      	ldr	r3, [r7, #12]
 8027ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027ba4:	b292      	uxth	r2, r2
 8027ba6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027ba8:	68fb      	ldr	r3, [r7, #12]
 8027baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027bac:	1c9a      	adds	r2, r3, #2
 8027bae:	68fb      	ldr	r3, [r7, #12]
 8027bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027bb2:	68fb      	ldr	r3, [r7, #12]
 8027bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027bb6:	b29b      	uxth	r3, r3
 8027bb8:	3b01      	subs	r3, #1
 8027bba:	b29a      	uxth	r2, r3
 8027bbc:	68fb      	ldr	r3, [r7, #12]
 8027bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027bc0:	2301      	movs	r3, #1
 8027bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8027bc4:	f7f9 ffd0 	bl	8021b68 <HAL_GetTick>
 8027bc8:	4602      	mov	r2, r0
 8027bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027bcc:	1ad3      	subs	r3, r2, r3
 8027bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027bd0:	429a      	cmp	r2, r3
 8027bd2:	d807      	bhi.n	8027be4 <HAL_SPI_TransmitReceive+0x1d8>
 8027bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027bda:	d003      	beq.n	8027be4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8027bdc:	2303      	movs	r3, #3
 8027bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027be2:	e0a7      	b.n	8027d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027be4:	68fb      	ldr	r3, [r7, #12]
 8027be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027be8:	b29b      	uxth	r3, r3
 8027bea:	2b00      	cmp	r3, #0
 8027bec:	d1a6      	bne.n	8027b3c <HAL_SPI_TransmitReceive+0x130>
 8027bee:	68fb      	ldr	r3, [r7, #12]
 8027bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027bf2:	b29b      	uxth	r3, r3
 8027bf4:	2b00      	cmp	r3, #0
 8027bf6:	d1a1      	bne.n	8027b3c <HAL_SPI_TransmitReceive+0x130>
 8027bf8:	e07c      	b.n	8027cf4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027bfa:	68fb      	ldr	r3, [r7, #12]
 8027bfc:	685b      	ldr	r3, [r3, #4]
 8027bfe:	2b00      	cmp	r3, #0
 8027c00:	d002      	beq.n	8027c08 <HAL_SPI_TransmitReceive+0x1fc>
 8027c02:	8b7b      	ldrh	r3, [r7, #26]
 8027c04:	2b01      	cmp	r3, #1
 8027c06:	d16b      	bne.n	8027ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027c08:	68fb      	ldr	r3, [r7, #12]
 8027c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027c0c:	68fb      	ldr	r3, [r7, #12]
 8027c0e:	681b      	ldr	r3, [r3, #0]
 8027c10:	330c      	adds	r3, #12
 8027c12:	7812      	ldrb	r2, [r2, #0]
 8027c14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027c16:	68fb      	ldr	r3, [r7, #12]
 8027c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c1a:	1c5a      	adds	r2, r3, #1
 8027c1c:	68fb      	ldr	r3, [r7, #12]
 8027c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027c20:	68fb      	ldr	r3, [r7, #12]
 8027c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c24:	b29b      	uxth	r3, r3
 8027c26:	3b01      	subs	r3, #1
 8027c28:	b29a      	uxth	r2, r3
 8027c2a:	68fb      	ldr	r3, [r7, #12]
 8027c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027c2e:	e057      	b.n	8027ce0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027c30:	68fb      	ldr	r3, [r7, #12]
 8027c32:	681b      	ldr	r3, [r3, #0]
 8027c34:	689b      	ldr	r3, [r3, #8]
 8027c36:	f003 0302 	and.w	r3, r3, #2
 8027c3a:	2b02      	cmp	r3, #2
 8027c3c:	d11c      	bne.n	8027c78 <HAL_SPI_TransmitReceive+0x26c>
 8027c3e:	68fb      	ldr	r3, [r7, #12]
 8027c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c42:	b29b      	uxth	r3, r3
 8027c44:	2b00      	cmp	r3, #0
 8027c46:	d017      	beq.n	8027c78 <HAL_SPI_TransmitReceive+0x26c>
 8027c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027c4a:	2b01      	cmp	r3, #1
 8027c4c:	d114      	bne.n	8027c78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8027c4e:	68fb      	ldr	r3, [r7, #12]
 8027c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027c52:	68fb      	ldr	r3, [r7, #12]
 8027c54:	681b      	ldr	r3, [r3, #0]
 8027c56:	330c      	adds	r3, #12
 8027c58:	7812      	ldrb	r2, [r2, #0]
 8027c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8027c5c:	68fb      	ldr	r3, [r7, #12]
 8027c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027c60:	1c5a      	adds	r2, r3, #1
 8027c62:	68fb      	ldr	r3, [r7, #12]
 8027c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027c66:	68fb      	ldr	r3, [r7, #12]
 8027c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027c6a:	b29b      	uxth	r3, r3
 8027c6c:	3b01      	subs	r3, #1
 8027c6e:	b29a      	uxth	r2, r3
 8027c70:	68fb      	ldr	r3, [r7, #12]
 8027c72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027c74:	2300      	movs	r3, #0
 8027c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027c78:	68fb      	ldr	r3, [r7, #12]
 8027c7a:	681b      	ldr	r3, [r3, #0]
 8027c7c:	689b      	ldr	r3, [r3, #8]
 8027c7e:	f003 0301 	and.w	r3, r3, #1
 8027c82:	2b01      	cmp	r3, #1
 8027c84:	d119      	bne.n	8027cba <HAL_SPI_TransmitReceive+0x2ae>
 8027c86:	68fb      	ldr	r3, [r7, #12]
 8027c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c8a:	b29b      	uxth	r3, r3
 8027c8c:	2b00      	cmp	r3, #0
 8027c8e:	d014      	beq.n	8027cba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8027c90:	68fb      	ldr	r3, [r7, #12]
 8027c92:	681b      	ldr	r3, [r3, #0]
 8027c94:	68da      	ldr	r2, [r3, #12]
 8027c96:	68fb      	ldr	r3, [r7, #12]
 8027c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c9a:	b2d2      	uxtb	r2, r2
 8027c9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8027c9e:	68fb      	ldr	r3, [r7, #12]
 8027ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027ca2:	1c5a      	adds	r2, r3, #1
 8027ca4:	68fb      	ldr	r3, [r7, #12]
 8027ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027ca8:	68fb      	ldr	r3, [r7, #12]
 8027caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027cac:	b29b      	uxth	r3, r3
 8027cae:	3b01      	subs	r3, #1
 8027cb0:	b29a      	uxth	r2, r3
 8027cb2:	68fb      	ldr	r3, [r7, #12]
 8027cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027cb6:	2301      	movs	r3, #1
 8027cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8027cba:	f7f9 ff55 	bl	8021b68 <HAL_GetTick>
 8027cbe:	4602      	mov	r2, r0
 8027cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027cc2:	1ad3      	subs	r3, r2, r3
 8027cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027cc6:	429a      	cmp	r2, r3
 8027cc8:	d803      	bhi.n	8027cd2 <HAL_SPI_TransmitReceive+0x2c6>
 8027cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027cd0:	d102      	bne.n	8027cd8 <HAL_SPI_TransmitReceive+0x2cc>
 8027cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027cd4:	2b00      	cmp	r3, #0
 8027cd6:	d103      	bne.n	8027ce0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8027cd8:	2303      	movs	r3, #3
 8027cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027cde:	e029      	b.n	8027d34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027ce0:	68fb      	ldr	r3, [r7, #12]
 8027ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027ce4:	b29b      	uxth	r3, r3
 8027ce6:	2b00      	cmp	r3, #0
 8027ce8:	d1a2      	bne.n	8027c30 <HAL_SPI_TransmitReceive+0x224>
 8027cea:	68fb      	ldr	r3, [r7, #12]
 8027cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027cee:	b29b      	uxth	r3, r3
 8027cf0:	2b00      	cmp	r3, #0
 8027cf2:	d19d      	bne.n	8027c30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027cf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8027cf8:	68f8      	ldr	r0, [r7, #12]
 8027cfa:	f000 f893 	bl	8027e24 <SPI_EndRxTxTransaction>
 8027cfe:	4603      	mov	r3, r0
 8027d00:	2b00      	cmp	r3, #0
 8027d02:	d006      	beq.n	8027d12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8027d04:	2301      	movs	r3, #1
 8027d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027d0a:	68fb      	ldr	r3, [r7, #12]
 8027d0c:	2220      	movs	r2, #32
 8027d0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8027d10:	e010      	b.n	8027d34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027d12:	68fb      	ldr	r3, [r7, #12]
 8027d14:	689b      	ldr	r3, [r3, #8]
 8027d16:	2b00      	cmp	r3, #0
 8027d18:	d10b      	bne.n	8027d32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027d1a:	2300      	movs	r3, #0
 8027d1c:	617b      	str	r3, [r7, #20]
 8027d1e:	68fb      	ldr	r3, [r7, #12]
 8027d20:	681b      	ldr	r3, [r3, #0]
 8027d22:	68db      	ldr	r3, [r3, #12]
 8027d24:	617b      	str	r3, [r7, #20]
 8027d26:	68fb      	ldr	r3, [r7, #12]
 8027d28:	681b      	ldr	r3, [r3, #0]
 8027d2a:	689b      	ldr	r3, [r3, #8]
 8027d2c:	617b      	str	r3, [r7, #20]
 8027d2e:	697b      	ldr	r3, [r7, #20]
 8027d30:	e000      	b.n	8027d34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8027d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027d34:	68fb      	ldr	r3, [r7, #12]
 8027d36:	2201      	movs	r2, #1
 8027d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027d3c:	68fb      	ldr	r3, [r7, #12]
 8027d3e:	2200      	movs	r2, #0
 8027d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027d44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8027d48:	4618      	mov	r0, r3
 8027d4a:	3730      	adds	r7, #48	; 0x30
 8027d4c:	46bd      	mov	sp, r7
 8027d4e:	bd80      	pop	{r7, pc}

08027d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8027d50:	b580      	push	{r7, lr}
 8027d52:	b084      	sub	sp, #16
 8027d54:	af00      	add	r7, sp, #0
 8027d56:	60f8      	str	r0, [r7, #12]
 8027d58:	60b9      	str	r1, [r7, #8]
 8027d5a:	603b      	str	r3, [r7, #0]
 8027d5c:	4613      	mov	r3, r2
 8027d5e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8027d60:	e04c      	b.n	8027dfc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8027d62:	683b      	ldr	r3, [r7, #0]
 8027d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027d68:	d048      	beq.n	8027dfc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8027d6a:	f7f9 fefd 	bl	8021b68 <HAL_GetTick>
 8027d6e:	4602      	mov	r2, r0
 8027d70:	69bb      	ldr	r3, [r7, #24]
 8027d72:	1ad3      	subs	r3, r2, r3
 8027d74:	683a      	ldr	r2, [r7, #0]
 8027d76:	429a      	cmp	r2, r3
 8027d78:	d902      	bls.n	8027d80 <SPI_WaitFlagStateUntilTimeout+0x30>
 8027d7a:	683b      	ldr	r3, [r7, #0]
 8027d7c:	2b00      	cmp	r3, #0
 8027d7e:	d13d      	bne.n	8027dfc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8027d80:	68fb      	ldr	r3, [r7, #12]
 8027d82:	681b      	ldr	r3, [r3, #0]
 8027d84:	685a      	ldr	r2, [r3, #4]
 8027d86:	68fb      	ldr	r3, [r7, #12]
 8027d88:	681b      	ldr	r3, [r3, #0]
 8027d8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8027d8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027d90:	68fb      	ldr	r3, [r7, #12]
 8027d92:	685b      	ldr	r3, [r3, #4]
 8027d94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027d98:	d111      	bne.n	8027dbe <SPI_WaitFlagStateUntilTimeout+0x6e>
 8027d9a:	68fb      	ldr	r3, [r7, #12]
 8027d9c:	689b      	ldr	r3, [r3, #8]
 8027d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027da2:	d004      	beq.n	8027dae <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8027da4:	68fb      	ldr	r3, [r7, #12]
 8027da6:	689b      	ldr	r3, [r3, #8]
 8027da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027dac:	d107      	bne.n	8027dbe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8027dae:	68fb      	ldr	r3, [r7, #12]
 8027db0:	681b      	ldr	r3, [r3, #0]
 8027db2:	681a      	ldr	r2, [r3, #0]
 8027db4:	68fb      	ldr	r3, [r7, #12]
 8027db6:	681b      	ldr	r3, [r3, #0]
 8027db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027dbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8027dbe:	68fb      	ldr	r3, [r7, #12]
 8027dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027dc6:	d10f      	bne.n	8027de8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8027dc8:	68fb      	ldr	r3, [r7, #12]
 8027dca:	681b      	ldr	r3, [r3, #0]
 8027dcc:	681a      	ldr	r2, [r3, #0]
 8027dce:	68fb      	ldr	r3, [r7, #12]
 8027dd0:	681b      	ldr	r3, [r3, #0]
 8027dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8027dd6:	601a      	str	r2, [r3, #0]
 8027dd8:	68fb      	ldr	r3, [r7, #12]
 8027dda:	681b      	ldr	r3, [r3, #0]
 8027ddc:	681a      	ldr	r2, [r3, #0]
 8027dde:	68fb      	ldr	r3, [r7, #12]
 8027de0:	681b      	ldr	r3, [r3, #0]
 8027de2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8027de6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8027de8:	68fb      	ldr	r3, [r7, #12]
 8027dea:	2201      	movs	r2, #1
 8027dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8027df0:	68fb      	ldr	r3, [r7, #12]
 8027df2:	2200      	movs	r2, #0
 8027df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8027df8:	2303      	movs	r3, #3
 8027dfa:	e00f      	b.n	8027e1c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8027dfc:	68fb      	ldr	r3, [r7, #12]
 8027dfe:	681b      	ldr	r3, [r3, #0]
 8027e00:	689a      	ldr	r2, [r3, #8]
 8027e02:	68bb      	ldr	r3, [r7, #8]
 8027e04:	4013      	ands	r3, r2
 8027e06:	68ba      	ldr	r2, [r7, #8]
 8027e08:	429a      	cmp	r2, r3
 8027e0a:	bf0c      	ite	eq
 8027e0c:	2301      	moveq	r3, #1
 8027e0e:	2300      	movne	r3, #0
 8027e10:	b2db      	uxtb	r3, r3
 8027e12:	461a      	mov	r2, r3
 8027e14:	79fb      	ldrb	r3, [r7, #7]
 8027e16:	429a      	cmp	r2, r3
 8027e18:	d1a3      	bne.n	8027d62 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8027e1a:	2300      	movs	r3, #0
}
 8027e1c:	4618      	mov	r0, r3
 8027e1e:	3710      	adds	r7, #16
 8027e20:	46bd      	mov	sp, r7
 8027e22:	bd80      	pop	{r7, pc}

08027e24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8027e24:	b580      	push	{r7, lr}
 8027e26:	b088      	sub	sp, #32
 8027e28:	af02      	add	r7, sp, #8
 8027e2a:	60f8      	str	r0, [r7, #12]
 8027e2c:	60b9      	str	r1, [r7, #8]
 8027e2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8027e30:	4b1b      	ldr	r3, [pc, #108]	; (8027ea0 <SPI_EndRxTxTransaction+0x7c>)
 8027e32:	681b      	ldr	r3, [r3, #0]
 8027e34:	4a1b      	ldr	r2, [pc, #108]	; (8027ea4 <SPI_EndRxTxTransaction+0x80>)
 8027e36:	fba2 2303 	umull	r2, r3, r2, r3
 8027e3a:	0d5b      	lsrs	r3, r3, #21
 8027e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8027e40:	fb02 f303 	mul.w	r3, r2, r3
 8027e44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8027e46:	68fb      	ldr	r3, [r7, #12]
 8027e48:	685b      	ldr	r3, [r3, #4]
 8027e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027e4e:	d112      	bne.n	8027e76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8027e50:	687b      	ldr	r3, [r7, #4]
 8027e52:	9300      	str	r3, [sp, #0]
 8027e54:	68bb      	ldr	r3, [r7, #8]
 8027e56:	2200      	movs	r2, #0
 8027e58:	2180      	movs	r1, #128	; 0x80
 8027e5a:	68f8      	ldr	r0, [r7, #12]
 8027e5c:	f7ff ff78 	bl	8027d50 <SPI_WaitFlagStateUntilTimeout>
 8027e60:	4603      	mov	r3, r0
 8027e62:	2b00      	cmp	r3, #0
 8027e64:	d016      	beq.n	8027e94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8027e66:	68fb      	ldr	r3, [r7, #12]
 8027e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027e6a:	f043 0220 	orr.w	r2, r3, #32
 8027e6e:	68fb      	ldr	r3, [r7, #12]
 8027e70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8027e72:	2303      	movs	r3, #3
 8027e74:	e00f      	b.n	8027e96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8027e76:	697b      	ldr	r3, [r7, #20]
 8027e78:	2b00      	cmp	r3, #0
 8027e7a:	d00a      	beq.n	8027e92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8027e7c:	697b      	ldr	r3, [r7, #20]
 8027e7e:	3b01      	subs	r3, #1
 8027e80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8027e82:	68fb      	ldr	r3, [r7, #12]
 8027e84:	681b      	ldr	r3, [r3, #0]
 8027e86:	689b      	ldr	r3, [r3, #8]
 8027e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027e8c:	2b80      	cmp	r3, #128	; 0x80
 8027e8e:	d0f2      	beq.n	8027e76 <SPI_EndRxTxTransaction+0x52>
 8027e90:	e000      	b.n	8027e94 <SPI_EndRxTxTransaction+0x70>
        break;
 8027e92:	bf00      	nop
  }

  return HAL_OK;
 8027e94:	2300      	movs	r3, #0
}
 8027e96:	4618      	mov	r0, r3
 8027e98:	3718      	adds	r7, #24
 8027e9a:	46bd      	mov	sp, r7
 8027e9c:	bd80      	pop	{r7, pc}
 8027e9e:	bf00      	nop
 8027ea0:	20000004 	.word	0x20000004
 8027ea4:	165e9f81 	.word	0x165e9f81

08027ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8027ea8:	b580      	push	{r7, lr}
 8027eaa:	b082      	sub	sp, #8
 8027eac:	af00      	add	r7, sp, #0
 8027eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8027eb0:	687b      	ldr	r3, [r7, #4]
 8027eb2:	2b00      	cmp	r3, #0
 8027eb4:	d101      	bne.n	8027eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8027eb6:	2301      	movs	r3, #1
 8027eb8:	e01d      	b.n	8027ef6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8027eba:	687b      	ldr	r3, [r7, #4]
 8027ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027ec0:	b2db      	uxtb	r3, r3
 8027ec2:	2b00      	cmp	r3, #0
 8027ec4:	d106      	bne.n	8027ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8027ec6:	687b      	ldr	r3, [r7, #4]
 8027ec8:	2200      	movs	r2, #0
 8027eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8027ece:	6878      	ldr	r0, [r7, #4]
 8027ed0:	f000 f815 	bl	8027efe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8027ed4:	687b      	ldr	r3, [r7, #4]
 8027ed6:	2202      	movs	r2, #2
 8027ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8027edc:	687b      	ldr	r3, [r7, #4]
 8027ede:	681a      	ldr	r2, [r3, #0]
 8027ee0:	687b      	ldr	r3, [r7, #4]
 8027ee2:	3304      	adds	r3, #4
 8027ee4:	4619      	mov	r1, r3
 8027ee6:	4610      	mov	r0, r2
 8027ee8:	f000 fa96 	bl	8028418 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8027eec:	687b      	ldr	r3, [r7, #4]
 8027eee:	2201      	movs	r2, #1
 8027ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8027ef4:	2300      	movs	r3, #0
}
 8027ef6:	4618      	mov	r0, r3
 8027ef8:	3708      	adds	r7, #8
 8027efa:	46bd      	mov	sp, r7
 8027efc:	bd80      	pop	{r7, pc}

08027efe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8027efe:	b480      	push	{r7}
 8027f00:	b083      	sub	sp, #12
 8027f02:	af00      	add	r7, sp, #0
 8027f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8027f06:	bf00      	nop
 8027f08:	370c      	adds	r7, #12
 8027f0a:	46bd      	mov	sp, r7
 8027f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f10:	4770      	bx	lr

08027f12 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8027f12:	b480      	push	{r7}
 8027f14:	b085      	sub	sp, #20
 8027f16:	af00      	add	r7, sp, #0
 8027f18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8027f1a:	687b      	ldr	r3, [r7, #4]
 8027f1c:	681b      	ldr	r3, [r3, #0]
 8027f1e:	68da      	ldr	r2, [r3, #12]
 8027f20:	687b      	ldr	r3, [r7, #4]
 8027f22:	681b      	ldr	r3, [r3, #0]
 8027f24:	f042 0201 	orr.w	r2, r2, #1
 8027f28:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8027f2a:	687b      	ldr	r3, [r7, #4]
 8027f2c:	681b      	ldr	r3, [r3, #0]
 8027f2e:	689b      	ldr	r3, [r3, #8]
 8027f30:	f003 0307 	and.w	r3, r3, #7
 8027f34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8027f36:	68fb      	ldr	r3, [r7, #12]
 8027f38:	2b06      	cmp	r3, #6
 8027f3a:	d007      	beq.n	8027f4c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8027f3c:	687b      	ldr	r3, [r7, #4]
 8027f3e:	681b      	ldr	r3, [r3, #0]
 8027f40:	681a      	ldr	r2, [r3, #0]
 8027f42:	687b      	ldr	r3, [r7, #4]
 8027f44:	681b      	ldr	r3, [r3, #0]
 8027f46:	f042 0201 	orr.w	r2, r2, #1
 8027f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8027f4c:	2300      	movs	r3, #0
}
 8027f4e:	4618      	mov	r0, r3
 8027f50:	3714      	adds	r7, #20
 8027f52:	46bd      	mov	sp, r7
 8027f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f58:	4770      	bx	lr

08027f5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8027f5a:	b580      	push	{r7, lr}
 8027f5c:	b082      	sub	sp, #8
 8027f5e:	af00      	add	r7, sp, #0
 8027f60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8027f62:	687b      	ldr	r3, [r7, #4]
 8027f64:	2b00      	cmp	r3, #0
 8027f66:	d101      	bne.n	8027f6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8027f68:	2301      	movs	r3, #1
 8027f6a:	e01d      	b.n	8027fa8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8027f6c:	687b      	ldr	r3, [r7, #4]
 8027f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027f72:	b2db      	uxtb	r3, r3
 8027f74:	2b00      	cmp	r3, #0
 8027f76:	d106      	bne.n	8027f86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8027f78:	687b      	ldr	r3, [r7, #4]
 8027f7a:	2200      	movs	r2, #0
 8027f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8027f80:	6878      	ldr	r0, [r7, #4]
 8027f82:	f7f9 faff 	bl	8021584 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8027f86:	687b      	ldr	r3, [r7, #4]
 8027f88:	2202      	movs	r2, #2
 8027f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8027f8e:	687b      	ldr	r3, [r7, #4]
 8027f90:	681a      	ldr	r2, [r3, #0]
 8027f92:	687b      	ldr	r3, [r7, #4]
 8027f94:	3304      	adds	r3, #4
 8027f96:	4619      	mov	r1, r3
 8027f98:	4610      	mov	r0, r2
 8027f9a:	f000 fa3d 	bl	8028418 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8027f9e:	687b      	ldr	r3, [r7, #4]
 8027fa0:	2201      	movs	r2, #1
 8027fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8027fa6:	2300      	movs	r3, #0
}
 8027fa8:	4618      	mov	r0, r3
 8027faa:	3708      	adds	r7, #8
 8027fac:	46bd      	mov	sp, r7
 8027fae:	bd80      	pop	{r7, pc}

08027fb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8027fb0:	b580      	push	{r7, lr}
 8027fb2:	b084      	sub	sp, #16
 8027fb4:	af00      	add	r7, sp, #0
 8027fb6:	6078      	str	r0, [r7, #4]
 8027fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8027fba:	687b      	ldr	r3, [r7, #4]
 8027fbc:	681b      	ldr	r3, [r3, #0]
 8027fbe:	2201      	movs	r2, #1
 8027fc0:	6839      	ldr	r1, [r7, #0]
 8027fc2:	4618      	mov	r0, r3
 8027fc4:	f000 fc78 	bl	80288b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8027fc8:	687b      	ldr	r3, [r7, #4]
 8027fca:	681b      	ldr	r3, [r3, #0]
 8027fcc:	4a15      	ldr	r2, [pc, #84]	; (8028024 <HAL_TIM_PWM_Start+0x74>)
 8027fce:	4293      	cmp	r3, r2
 8027fd0:	d004      	beq.n	8027fdc <HAL_TIM_PWM_Start+0x2c>
 8027fd2:	687b      	ldr	r3, [r7, #4]
 8027fd4:	681b      	ldr	r3, [r3, #0]
 8027fd6:	4a14      	ldr	r2, [pc, #80]	; (8028028 <HAL_TIM_PWM_Start+0x78>)
 8027fd8:	4293      	cmp	r3, r2
 8027fda:	d101      	bne.n	8027fe0 <HAL_TIM_PWM_Start+0x30>
 8027fdc:	2301      	movs	r3, #1
 8027fde:	e000      	b.n	8027fe2 <HAL_TIM_PWM_Start+0x32>
 8027fe0:	2300      	movs	r3, #0
 8027fe2:	2b00      	cmp	r3, #0
 8027fe4:	d007      	beq.n	8027ff6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8027fe6:	687b      	ldr	r3, [r7, #4]
 8027fe8:	681b      	ldr	r3, [r3, #0]
 8027fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8027fec:	687b      	ldr	r3, [r7, #4]
 8027fee:	681b      	ldr	r3, [r3, #0]
 8027ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8027ff4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8027ff6:	687b      	ldr	r3, [r7, #4]
 8027ff8:	681b      	ldr	r3, [r3, #0]
 8027ffa:	689b      	ldr	r3, [r3, #8]
 8027ffc:	f003 0307 	and.w	r3, r3, #7
 8028000:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028002:	68fb      	ldr	r3, [r7, #12]
 8028004:	2b06      	cmp	r3, #6
 8028006:	d007      	beq.n	8028018 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8028008:	687b      	ldr	r3, [r7, #4]
 802800a:	681b      	ldr	r3, [r3, #0]
 802800c:	681a      	ldr	r2, [r3, #0]
 802800e:	687b      	ldr	r3, [r7, #4]
 8028010:	681b      	ldr	r3, [r3, #0]
 8028012:	f042 0201 	orr.w	r2, r2, #1
 8028016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8028018:	2300      	movs	r3, #0
}
 802801a:	4618      	mov	r0, r3
 802801c:	3710      	adds	r7, #16
 802801e:	46bd      	mov	sp, r7
 8028020:	bd80      	pop	{r7, pc}
 8028022:	bf00      	nop
 8028024:	40010000 	.word	0x40010000
 8028028:	40010400 	.word	0x40010400

0802802c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802802c:	b580      	push	{r7, lr}
 802802e:	b082      	sub	sp, #8
 8028030:	af00      	add	r7, sp, #0
 8028032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028034:	687b      	ldr	r3, [r7, #4]
 8028036:	681b      	ldr	r3, [r3, #0]
 8028038:	691b      	ldr	r3, [r3, #16]
 802803a:	f003 0302 	and.w	r3, r3, #2
 802803e:	2b02      	cmp	r3, #2
 8028040:	d122      	bne.n	8028088 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8028042:	687b      	ldr	r3, [r7, #4]
 8028044:	681b      	ldr	r3, [r3, #0]
 8028046:	68db      	ldr	r3, [r3, #12]
 8028048:	f003 0302 	and.w	r3, r3, #2
 802804c:	2b02      	cmp	r3, #2
 802804e:	d11b      	bne.n	8028088 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8028050:	687b      	ldr	r3, [r7, #4]
 8028052:	681b      	ldr	r3, [r3, #0]
 8028054:	f06f 0202 	mvn.w	r2, #2
 8028058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802805a:	687b      	ldr	r3, [r7, #4]
 802805c:	2201      	movs	r2, #1
 802805e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8028060:	687b      	ldr	r3, [r7, #4]
 8028062:	681b      	ldr	r3, [r3, #0]
 8028064:	699b      	ldr	r3, [r3, #24]
 8028066:	f003 0303 	and.w	r3, r3, #3
 802806a:	2b00      	cmp	r3, #0
 802806c:	d003      	beq.n	8028076 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802806e:	6878      	ldr	r0, [r7, #4]
 8028070:	f000 f9b4 	bl	80283dc <HAL_TIM_IC_CaptureCallback>
 8028074:	e005      	b.n	8028082 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8028076:	6878      	ldr	r0, [r7, #4]
 8028078:	f000 f9a6 	bl	80283c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802807c:	6878      	ldr	r0, [r7, #4]
 802807e:	f000 f9b7 	bl	80283f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028082:	687b      	ldr	r3, [r7, #4]
 8028084:	2200      	movs	r2, #0
 8028086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8028088:	687b      	ldr	r3, [r7, #4]
 802808a:	681b      	ldr	r3, [r3, #0]
 802808c:	691b      	ldr	r3, [r3, #16]
 802808e:	f003 0304 	and.w	r3, r3, #4
 8028092:	2b04      	cmp	r3, #4
 8028094:	d122      	bne.n	80280dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8028096:	687b      	ldr	r3, [r7, #4]
 8028098:	681b      	ldr	r3, [r3, #0]
 802809a:	68db      	ldr	r3, [r3, #12]
 802809c:	f003 0304 	and.w	r3, r3, #4
 80280a0:	2b04      	cmp	r3, #4
 80280a2:	d11b      	bne.n	80280dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80280a4:	687b      	ldr	r3, [r7, #4]
 80280a6:	681b      	ldr	r3, [r3, #0]
 80280a8:	f06f 0204 	mvn.w	r2, #4
 80280ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80280ae:	687b      	ldr	r3, [r7, #4]
 80280b0:	2202      	movs	r2, #2
 80280b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80280b4:	687b      	ldr	r3, [r7, #4]
 80280b6:	681b      	ldr	r3, [r3, #0]
 80280b8:	699b      	ldr	r3, [r3, #24]
 80280ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80280be:	2b00      	cmp	r3, #0
 80280c0:	d003      	beq.n	80280ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80280c2:	6878      	ldr	r0, [r7, #4]
 80280c4:	f000 f98a 	bl	80283dc <HAL_TIM_IC_CaptureCallback>
 80280c8:	e005      	b.n	80280d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80280ca:	6878      	ldr	r0, [r7, #4]
 80280cc:	f000 f97c 	bl	80283c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80280d0:	6878      	ldr	r0, [r7, #4]
 80280d2:	f000 f98d 	bl	80283f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80280d6:	687b      	ldr	r3, [r7, #4]
 80280d8:	2200      	movs	r2, #0
 80280da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80280dc:	687b      	ldr	r3, [r7, #4]
 80280de:	681b      	ldr	r3, [r3, #0]
 80280e0:	691b      	ldr	r3, [r3, #16]
 80280e2:	f003 0308 	and.w	r3, r3, #8
 80280e6:	2b08      	cmp	r3, #8
 80280e8:	d122      	bne.n	8028130 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80280ea:	687b      	ldr	r3, [r7, #4]
 80280ec:	681b      	ldr	r3, [r3, #0]
 80280ee:	68db      	ldr	r3, [r3, #12]
 80280f0:	f003 0308 	and.w	r3, r3, #8
 80280f4:	2b08      	cmp	r3, #8
 80280f6:	d11b      	bne.n	8028130 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80280f8:	687b      	ldr	r3, [r7, #4]
 80280fa:	681b      	ldr	r3, [r3, #0]
 80280fc:	f06f 0208 	mvn.w	r2, #8
 8028100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8028102:	687b      	ldr	r3, [r7, #4]
 8028104:	2204      	movs	r2, #4
 8028106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8028108:	687b      	ldr	r3, [r7, #4]
 802810a:	681b      	ldr	r3, [r3, #0]
 802810c:	69db      	ldr	r3, [r3, #28]
 802810e:	f003 0303 	and.w	r3, r3, #3
 8028112:	2b00      	cmp	r3, #0
 8028114:	d003      	beq.n	802811e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028116:	6878      	ldr	r0, [r7, #4]
 8028118:	f000 f960 	bl	80283dc <HAL_TIM_IC_CaptureCallback>
 802811c:	e005      	b.n	802812a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802811e:	6878      	ldr	r0, [r7, #4]
 8028120:	f000 f952 	bl	80283c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028124:	6878      	ldr	r0, [r7, #4]
 8028126:	f000 f963 	bl	80283f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802812a:	687b      	ldr	r3, [r7, #4]
 802812c:	2200      	movs	r2, #0
 802812e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8028130:	687b      	ldr	r3, [r7, #4]
 8028132:	681b      	ldr	r3, [r3, #0]
 8028134:	691b      	ldr	r3, [r3, #16]
 8028136:	f003 0310 	and.w	r3, r3, #16
 802813a:	2b10      	cmp	r3, #16
 802813c:	d122      	bne.n	8028184 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802813e:	687b      	ldr	r3, [r7, #4]
 8028140:	681b      	ldr	r3, [r3, #0]
 8028142:	68db      	ldr	r3, [r3, #12]
 8028144:	f003 0310 	and.w	r3, r3, #16
 8028148:	2b10      	cmp	r3, #16
 802814a:	d11b      	bne.n	8028184 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802814c:	687b      	ldr	r3, [r7, #4]
 802814e:	681b      	ldr	r3, [r3, #0]
 8028150:	f06f 0210 	mvn.w	r2, #16
 8028154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8028156:	687b      	ldr	r3, [r7, #4]
 8028158:	2208      	movs	r2, #8
 802815a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802815c:	687b      	ldr	r3, [r7, #4]
 802815e:	681b      	ldr	r3, [r3, #0]
 8028160:	69db      	ldr	r3, [r3, #28]
 8028162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028166:	2b00      	cmp	r3, #0
 8028168:	d003      	beq.n	8028172 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802816a:	6878      	ldr	r0, [r7, #4]
 802816c:	f000 f936 	bl	80283dc <HAL_TIM_IC_CaptureCallback>
 8028170:	e005      	b.n	802817e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028172:	6878      	ldr	r0, [r7, #4]
 8028174:	f000 f928 	bl	80283c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028178:	6878      	ldr	r0, [r7, #4]
 802817a:	f000 f939 	bl	80283f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802817e:	687b      	ldr	r3, [r7, #4]
 8028180:	2200      	movs	r2, #0
 8028182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8028184:	687b      	ldr	r3, [r7, #4]
 8028186:	681b      	ldr	r3, [r3, #0]
 8028188:	691b      	ldr	r3, [r3, #16]
 802818a:	f003 0301 	and.w	r3, r3, #1
 802818e:	2b01      	cmp	r3, #1
 8028190:	d10e      	bne.n	80281b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8028192:	687b      	ldr	r3, [r7, #4]
 8028194:	681b      	ldr	r3, [r3, #0]
 8028196:	68db      	ldr	r3, [r3, #12]
 8028198:	f003 0301 	and.w	r3, r3, #1
 802819c:	2b01      	cmp	r3, #1
 802819e:	d107      	bne.n	80281b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80281a0:	687b      	ldr	r3, [r7, #4]
 80281a2:	681b      	ldr	r3, [r3, #0]
 80281a4:	f06f 0201 	mvn.w	r2, #1
 80281a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80281aa:	6878      	ldr	r0, [r7, #4]
 80281ac:	f7f8 feb6 	bl	8020f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80281b0:	687b      	ldr	r3, [r7, #4]
 80281b2:	681b      	ldr	r3, [r3, #0]
 80281b4:	691b      	ldr	r3, [r3, #16]
 80281b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80281ba:	2b80      	cmp	r3, #128	; 0x80
 80281bc:	d10e      	bne.n	80281dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80281be:	687b      	ldr	r3, [r7, #4]
 80281c0:	681b      	ldr	r3, [r3, #0]
 80281c2:	68db      	ldr	r3, [r3, #12]
 80281c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80281c8:	2b80      	cmp	r3, #128	; 0x80
 80281ca:	d107      	bne.n	80281dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80281cc:	687b      	ldr	r3, [r7, #4]
 80281ce:	681b      	ldr	r3, [r3, #0]
 80281d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80281d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80281d6:	6878      	ldr	r0, [r7, #4]
 80281d8:	f000 fc44 	bl	8028a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80281dc:	687b      	ldr	r3, [r7, #4]
 80281de:	681b      	ldr	r3, [r3, #0]
 80281e0:	691b      	ldr	r3, [r3, #16]
 80281e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80281e6:	2b40      	cmp	r3, #64	; 0x40
 80281e8:	d10e      	bne.n	8028208 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80281ea:	687b      	ldr	r3, [r7, #4]
 80281ec:	681b      	ldr	r3, [r3, #0]
 80281ee:	68db      	ldr	r3, [r3, #12]
 80281f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80281f4:	2b40      	cmp	r3, #64	; 0x40
 80281f6:	d107      	bne.n	8028208 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80281f8:	687b      	ldr	r3, [r7, #4]
 80281fa:	681b      	ldr	r3, [r3, #0]
 80281fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8028200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8028202:	6878      	ldr	r0, [r7, #4]
 8028204:	f000 f8fe 	bl	8028404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8028208:	687b      	ldr	r3, [r7, #4]
 802820a:	681b      	ldr	r3, [r3, #0]
 802820c:	691b      	ldr	r3, [r3, #16]
 802820e:	f003 0320 	and.w	r3, r3, #32
 8028212:	2b20      	cmp	r3, #32
 8028214:	d10e      	bne.n	8028234 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8028216:	687b      	ldr	r3, [r7, #4]
 8028218:	681b      	ldr	r3, [r3, #0]
 802821a:	68db      	ldr	r3, [r3, #12]
 802821c:	f003 0320 	and.w	r3, r3, #32
 8028220:	2b20      	cmp	r3, #32
 8028222:	d107      	bne.n	8028234 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8028224:	687b      	ldr	r3, [r7, #4]
 8028226:	681b      	ldr	r3, [r3, #0]
 8028228:	f06f 0220 	mvn.w	r2, #32
 802822c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802822e:	6878      	ldr	r0, [r7, #4]
 8028230:	f000 fc0e 	bl	8028a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8028234:	bf00      	nop
 8028236:	3708      	adds	r7, #8
 8028238:	46bd      	mov	sp, r7
 802823a:	bd80      	pop	{r7, pc}

0802823c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802823c:	b580      	push	{r7, lr}
 802823e:	b084      	sub	sp, #16
 8028240:	af00      	add	r7, sp, #0
 8028242:	60f8      	str	r0, [r7, #12]
 8028244:	60b9      	str	r1, [r7, #8]
 8028246:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8028248:	68fb      	ldr	r3, [r7, #12]
 802824a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802824e:	2b01      	cmp	r3, #1
 8028250:	d101      	bne.n	8028256 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8028252:	2302      	movs	r3, #2
 8028254:	e0b4      	b.n	80283c0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8028256:	68fb      	ldr	r3, [r7, #12]
 8028258:	2201      	movs	r2, #1
 802825a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802825e:	68fb      	ldr	r3, [r7, #12]
 8028260:	2202      	movs	r2, #2
 8028262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8028266:	687b      	ldr	r3, [r7, #4]
 8028268:	2b0c      	cmp	r3, #12
 802826a:	f200 809f 	bhi.w	80283ac <HAL_TIM_PWM_ConfigChannel+0x170>
 802826e:	a201      	add	r2, pc, #4	; (adr r2, 8028274 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8028270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028274:	080282a9 	.word	0x080282a9
 8028278:	080283ad 	.word	0x080283ad
 802827c:	080283ad 	.word	0x080283ad
 8028280:	080283ad 	.word	0x080283ad
 8028284:	080282e9 	.word	0x080282e9
 8028288:	080283ad 	.word	0x080283ad
 802828c:	080283ad 	.word	0x080283ad
 8028290:	080283ad 	.word	0x080283ad
 8028294:	0802832b 	.word	0x0802832b
 8028298:	080283ad 	.word	0x080283ad
 802829c:	080283ad 	.word	0x080283ad
 80282a0:	080283ad 	.word	0x080283ad
 80282a4:	0802836b 	.word	0x0802836b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80282a8:	68fb      	ldr	r3, [r7, #12]
 80282aa:	681b      	ldr	r3, [r3, #0]
 80282ac:	68b9      	ldr	r1, [r7, #8]
 80282ae:	4618      	mov	r0, r3
 80282b0:	f000 f952 	bl	8028558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80282b4:	68fb      	ldr	r3, [r7, #12]
 80282b6:	681b      	ldr	r3, [r3, #0]
 80282b8:	699a      	ldr	r2, [r3, #24]
 80282ba:	68fb      	ldr	r3, [r7, #12]
 80282bc:	681b      	ldr	r3, [r3, #0]
 80282be:	f042 0208 	orr.w	r2, r2, #8
 80282c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80282c4:	68fb      	ldr	r3, [r7, #12]
 80282c6:	681b      	ldr	r3, [r3, #0]
 80282c8:	699a      	ldr	r2, [r3, #24]
 80282ca:	68fb      	ldr	r3, [r7, #12]
 80282cc:	681b      	ldr	r3, [r3, #0]
 80282ce:	f022 0204 	bic.w	r2, r2, #4
 80282d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80282d4:	68fb      	ldr	r3, [r7, #12]
 80282d6:	681b      	ldr	r3, [r3, #0]
 80282d8:	6999      	ldr	r1, [r3, #24]
 80282da:	68bb      	ldr	r3, [r7, #8]
 80282dc:	691a      	ldr	r2, [r3, #16]
 80282de:	68fb      	ldr	r3, [r7, #12]
 80282e0:	681b      	ldr	r3, [r3, #0]
 80282e2:	430a      	orrs	r2, r1
 80282e4:	619a      	str	r2, [r3, #24]
      break;
 80282e6:	e062      	b.n	80283ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80282e8:	68fb      	ldr	r3, [r7, #12]
 80282ea:	681b      	ldr	r3, [r3, #0]
 80282ec:	68b9      	ldr	r1, [r7, #8]
 80282ee:	4618      	mov	r0, r3
 80282f0:	f000 f9a2 	bl	8028638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80282f4:	68fb      	ldr	r3, [r7, #12]
 80282f6:	681b      	ldr	r3, [r3, #0]
 80282f8:	699a      	ldr	r2, [r3, #24]
 80282fa:	68fb      	ldr	r3, [r7, #12]
 80282fc:	681b      	ldr	r3, [r3, #0]
 80282fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8028302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8028304:	68fb      	ldr	r3, [r7, #12]
 8028306:	681b      	ldr	r3, [r3, #0]
 8028308:	699a      	ldr	r2, [r3, #24]
 802830a:	68fb      	ldr	r3, [r7, #12]
 802830c:	681b      	ldr	r3, [r3, #0]
 802830e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8028312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8028314:	68fb      	ldr	r3, [r7, #12]
 8028316:	681b      	ldr	r3, [r3, #0]
 8028318:	6999      	ldr	r1, [r3, #24]
 802831a:	68bb      	ldr	r3, [r7, #8]
 802831c:	691b      	ldr	r3, [r3, #16]
 802831e:	021a      	lsls	r2, r3, #8
 8028320:	68fb      	ldr	r3, [r7, #12]
 8028322:	681b      	ldr	r3, [r3, #0]
 8028324:	430a      	orrs	r2, r1
 8028326:	619a      	str	r2, [r3, #24]
      break;
 8028328:	e041      	b.n	80283ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802832a:	68fb      	ldr	r3, [r7, #12]
 802832c:	681b      	ldr	r3, [r3, #0]
 802832e:	68b9      	ldr	r1, [r7, #8]
 8028330:	4618      	mov	r0, r3
 8028332:	f000 f9f7 	bl	8028724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8028336:	68fb      	ldr	r3, [r7, #12]
 8028338:	681b      	ldr	r3, [r3, #0]
 802833a:	69da      	ldr	r2, [r3, #28]
 802833c:	68fb      	ldr	r3, [r7, #12]
 802833e:	681b      	ldr	r3, [r3, #0]
 8028340:	f042 0208 	orr.w	r2, r2, #8
 8028344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8028346:	68fb      	ldr	r3, [r7, #12]
 8028348:	681b      	ldr	r3, [r3, #0]
 802834a:	69da      	ldr	r2, [r3, #28]
 802834c:	68fb      	ldr	r3, [r7, #12]
 802834e:	681b      	ldr	r3, [r3, #0]
 8028350:	f022 0204 	bic.w	r2, r2, #4
 8028354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8028356:	68fb      	ldr	r3, [r7, #12]
 8028358:	681b      	ldr	r3, [r3, #0]
 802835a:	69d9      	ldr	r1, [r3, #28]
 802835c:	68bb      	ldr	r3, [r7, #8]
 802835e:	691a      	ldr	r2, [r3, #16]
 8028360:	68fb      	ldr	r3, [r7, #12]
 8028362:	681b      	ldr	r3, [r3, #0]
 8028364:	430a      	orrs	r2, r1
 8028366:	61da      	str	r2, [r3, #28]
      break;
 8028368:	e021      	b.n	80283ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802836a:	68fb      	ldr	r3, [r7, #12]
 802836c:	681b      	ldr	r3, [r3, #0]
 802836e:	68b9      	ldr	r1, [r7, #8]
 8028370:	4618      	mov	r0, r3
 8028372:	f000 fa4b 	bl	802880c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8028376:	68fb      	ldr	r3, [r7, #12]
 8028378:	681b      	ldr	r3, [r3, #0]
 802837a:	69da      	ldr	r2, [r3, #28]
 802837c:	68fb      	ldr	r3, [r7, #12]
 802837e:	681b      	ldr	r3, [r3, #0]
 8028380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8028384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8028386:	68fb      	ldr	r3, [r7, #12]
 8028388:	681b      	ldr	r3, [r3, #0]
 802838a:	69da      	ldr	r2, [r3, #28]
 802838c:	68fb      	ldr	r3, [r7, #12]
 802838e:	681b      	ldr	r3, [r3, #0]
 8028390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8028394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8028396:	68fb      	ldr	r3, [r7, #12]
 8028398:	681b      	ldr	r3, [r3, #0]
 802839a:	69d9      	ldr	r1, [r3, #28]
 802839c:	68bb      	ldr	r3, [r7, #8]
 802839e:	691b      	ldr	r3, [r3, #16]
 80283a0:	021a      	lsls	r2, r3, #8
 80283a2:	68fb      	ldr	r3, [r7, #12]
 80283a4:	681b      	ldr	r3, [r3, #0]
 80283a6:	430a      	orrs	r2, r1
 80283a8:	61da      	str	r2, [r3, #28]
      break;
 80283aa:	e000      	b.n	80283ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80283ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80283ae:	68fb      	ldr	r3, [r7, #12]
 80283b0:	2201      	movs	r2, #1
 80283b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80283b6:	68fb      	ldr	r3, [r7, #12]
 80283b8:	2200      	movs	r2, #0
 80283ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80283be:	2300      	movs	r3, #0
}
 80283c0:	4618      	mov	r0, r3
 80283c2:	3710      	adds	r7, #16
 80283c4:	46bd      	mov	sp, r7
 80283c6:	bd80      	pop	{r7, pc}

080283c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80283c8:	b480      	push	{r7}
 80283ca:	b083      	sub	sp, #12
 80283cc:	af00      	add	r7, sp, #0
 80283ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80283d0:	bf00      	nop
 80283d2:	370c      	adds	r7, #12
 80283d4:	46bd      	mov	sp, r7
 80283d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283da:	4770      	bx	lr

080283dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80283dc:	b480      	push	{r7}
 80283de:	b083      	sub	sp, #12
 80283e0:	af00      	add	r7, sp, #0
 80283e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80283e4:	bf00      	nop
 80283e6:	370c      	adds	r7, #12
 80283e8:	46bd      	mov	sp, r7
 80283ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283ee:	4770      	bx	lr

080283f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80283f0:	b480      	push	{r7}
 80283f2:	b083      	sub	sp, #12
 80283f4:	af00      	add	r7, sp, #0
 80283f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80283f8:	bf00      	nop
 80283fa:	370c      	adds	r7, #12
 80283fc:	46bd      	mov	sp, r7
 80283fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028402:	4770      	bx	lr

08028404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8028404:	b480      	push	{r7}
 8028406:	b083      	sub	sp, #12
 8028408:	af00      	add	r7, sp, #0
 802840a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802840c:	bf00      	nop
 802840e:	370c      	adds	r7, #12
 8028410:	46bd      	mov	sp, r7
 8028412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028416:	4770      	bx	lr

08028418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8028418:	b480      	push	{r7}
 802841a:	b085      	sub	sp, #20
 802841c:	af00      	add	r7, sp, #0
 802841e:	6078      	str	r0, [r7, #4]
 8028420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8028422:	687b      	ldr	r3, [r7, #4]
 8028424:	681b      	ldr	r3, [r3, #0]
 8028426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8028428:	687b      	ldr	r3, [r7, #4]
 802842a:	4a40      	ldr	r2, [pc, #256]	; (802852c <TIM_Base_SetConfig+0x114>)
 802842c:	4293      	cmp	r3, r2
 802842e:	d013      	beq.n	8028458 <TIM_Base_SetConfig+0x40>
 8028430:	687b      	ldr	r3, [r7, #4]
 8028432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028436:	d00f      	beq.n	8028458 <TIM_Base_SetConfig+0x40>
 8028438:	687b      	ldr	r3, [r7, #4]
 802843a:	4a3d      	ldr	r2, [pc, #244]	; (8028530 <TIM_Base_SetConfig+0x118>)
 802843c:	4293      	cmp	r3, r2
 802843e:	d00b      	beq.n	8028458 <TIM_Base_SetConfig+0x40>
 8028440:	687b      	ldr	r3, [r7, #4]
 8028442:	4a3c      	ldr	r2, [pc, #240]	; (8028534 <TIM_Base_SetConfig+0x11c>)
 8028444:	4293      	cmp	r3, r2
 8028446:	d007      	beq.n	8028458 <TIM_Base_SetConfig+0x40>
 8028448:	687b      	ldr	r3, [r7, #4]
 802844a:	4a3b      	ldr	r2, [pc, #236]	; (8028538 <TIM_Base_SetConfig+0x120>)
 802844c:	4293      	cmp	r3, r2
 802844e:	d003      	beq.n	8028458 <TIM_Base_SetConfig+0x40>
 8028450:	687b      	ldr	r3, [r7, #4]
 8028452:	4a3a      	ldr	r2, [pc, #232]	; (802853c <TIM_Base_SetConfig+0x124>)
 8028454:	4293      	cmp	r3, r2
 8028456:	d108      	bne.n	802846a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8028458:	68fb      	ldr	r3, [r7, #12]
 802845a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802845e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8028460:	683b      	ldr	r3, [r7, #0]
 8028462:	685b      	ldr	r3, [r3, #4]
 8028464:	68fa      	ldr	r2, [r7, #12]
 8028466:	4313      	orrs	r3, r2
 8028468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802846a:	687b      	ldr	r3, [r7, #4]
 802846c:	4a2f      	ldr	r2, [pc, #188]	; (802852c <TIM_Base_SetConfig+0x114>)
 802846e:	4293      	cmp	r3, r2
 8028470:	d02b      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 8028472:	687b      	ldr	r3, [r7, #4]
 8028474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028478:	d027      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 802847a:	687b      	ldr	r3, [r7, #4]
 802847c:	4a2c      	ldr	r2, [pc, #176]	; (8028530 <TIM_Base_SetConfig+0x118>)
 802847e:	4293      	cmp	r3, r2
 8028480:	d023      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 8028482:	687b      	ldr	r3, [r7, #4]
 8028484:	4a2b      	ldr	r2, [pc, #172]	; (8028534 <TIM_Base_SetConfig+0x11c>)
 8028486:	4293      	cmp	r3, r2
 8028488:	d01f      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 802848a:	687b      	ldr	r3, [r7, #4]
 802848c:	4a2a      	ldr	r2, [pc, #168]	; (8028538 <TIM_Base_SetConfig+0x120>)
 802848e:	4293      	cmp	r3, r2
 8028490:	d01b      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 8028492:	687b      	ldr	r3, [r7, #4]
 8028494:	4a29      	ldr	r2, [pc, #164]	; (802853c <TIM_Base_SetConfig+0x124>)
 8028496:	4293      	cmp	r3, r2
 8028498:	d017      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 802849a:	687b      	ldr	r3, [r7, #4]
 802849c:	4a28      	ldr	r2, [pc, #160]	; (8028540 <TIM_Base_SetConfig+0x128>)
 802849e:	4293      	cmp	r3, r2
 80284a0:	d013      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 80284a2:	687b      	ldr	r3, [r7, #4]
 80284a4:	4a27      	ldr	r2, [pc, #156]	; (8028544 <TIM_Base_SetConfig+0x12c>)
 80284a6:	4293      	cmp	r3, r2
 80284a8:	d00f      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 80284aa:	687b      	ldr	r3, [r7, #4]
 80284ac:	4a26      	ldr	r2, [pc, #152]	; (8028548 <TIM_Base_SetConfig+0x130>)
 80284ae:	4293      	cmp	r3, r2
 80284b0:	d00b      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 80284b2:	687b      	ldr	r3, [r7, #4]
 80284b4:	4a25      	ldr	r2, [pc, #148]	; (802854c <TIM_Base_SetConfig+0x134>)
 80284b6:	4293      	cmp	r3, r2
 80284b8:	d007      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 80284ba:	687b      	ldr	r3, [r7, #4]
 80284bc:	4a24      	ldr	r2, [pc, #144]	; (8028550 <TIM_Base_SetConfig+0x138>)
 80284be:	4293      	cmp	r3, r2
 80284c0:	d003      	beq.n	80284ca <TIM_Base_SetConfig+0xb2>
 80284c2:	687b      	ldr	r3, [r7, #4]
 80284c4:	4a23      	ldr	r2, [pc, #140]	; (8028554 <TIM_Base_SetConfig+0x13c>)
 80284c6:	4293      	cmp	r3, r2
 80284c8:	d108      	bne.n	80284dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80284ca:	68fb      	ldr	r3, [r7, #12]
 80284cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80284d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80284d2:	683b      	ldr	r3, [r7, #0]
 80284d4:	68db      	ldr	r3, [r3, #12]
 80284d6:	68fa      	ldr	r2, [r7, #12]
 80284d8:	4313      	orrs	r3, r2
 80284da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80284dc:	68fb      	ldr	r3, [r7, #12]
 80284de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80284e2:	683b      	ldr	r3, [r7, #0]
 80284e4:	695b      	ldr	r3, [r3, #20]
 80284e6:	4313      	orrs	r3, r2
 80284e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80284ea:	687b      	ldr	r3, [r7, #4]
 80284ec:	68fa      	ldr	r2, [r7, #12]
 80284ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80284f0:	683b      	ldr	r3, [r7, #0]
 80284f2:	689a      	ldr	r2, [r3, #8]
 80284f4:	687b      	ldr	r3, [r7, #4]
 80284f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80284f8:	683b      	ldr	r3, [r7, #0]
 80284fa:	681a      	ldr	r2, [r3, #0]
 80284fc:	687b      	ldr	r3, [r7, #4]
 80284fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8028500:	687b      	ldr	r3, [r7, #4]
 8028502:	4a0a      	ldr	r2, [pc, #40]	; (802852c <TIM_Base_SetConfig+0x114>)
 8028504:	4293      	cmp	r3, r2
 8028506:	d003      	beq.n	8028510 <TIM_Base_SetConfig+0xf8>
 8028508:	687b      	ldr	r3, [r7, #4]
 802850a:	4a0c      	ldr	r2, [pc, #48]	; (802853c <TIM_Base_SetConfig+0x124>)
 802850c:	4293      	cmp	r3, r2
 802850e:	d103      	bne.n	8028518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8028510:	683b      	ldr	r3, [r7, #0]
 8028512:	691a      	ldr	r2, [r3, #16]
 8028514:	687b      	ldr	r3, [r7, #4]
 8028516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8028518:	687b      	ldr	r3, [r7, #4]
 802851a:	2201      	movs	r2, #1
 802851c:	615a      	str	r2, [r3, #20]
}
 802851e:	bf00      	nop
 8028520:	3714      	adds	r7, #20
 8028522:	46bd      	mov	sp, r7
 8028524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028528:	4770      	bx	lr
 802852a:	bf00      	nop
 802852c:	40010000 	.word	0x40010000
 8028530:	40000400 	.word	0x40000400
 8028534:	40000800 	.word	0x40000800
 8028538:	40000c00 	.word	0x40000c00
 802853c:	40010400 	.word	0x40010400
 8028540:	40014000 	.word	0x40014000
 8028544:	40014400 	.word	0x40014400
 8028548:	40014800 	.word	0x40014800
 802854c:	40001800 	.word	0x40001800
 8028550:	40001c00 	.word	0x40001c00
 8028554:	40002000 	.word	0x40002000

08028558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8028558:	b480      	push	{r7}
 802855a:	b087      	sub	sp, #28
 802855c:	af00      	add	r7, sp, #0
 802855e:	6078      	str	r0, [r7, #4]
 8028560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8028562:	687b      	ldr	r3, [r7, #4]
 8028564:	6a1b      	ldr	r3, [r3, #32]
 8028566:	f023 0201 	bic.w	r2, r3, #1
 802856a:	687b      	ldr	r3, [r7, #4]
 802856c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802856e:	687b      	ldr	r3, [r7, #4]
 8028570:	6a1b      	ldr	r3, [r3, #32]
 8028572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8028574:	687b      	ldr	r3, [r7, #4]
 8028576:	685b      	ldr	r3, [r3, #4]
 8028578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802857a:	687b      	ldr	r3, [r7, #4]
 802857c:	699b      	ldr	r3, [r3, #24]
 802857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8028580:	68fb      	ldr	r3, [r7, #12]
 8028582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8028588:	68fb      	ldr	r3, [r7, #12]
 802858a:	f023 0303 	bic.w	r3, r3, #3
 802858e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8028590:	683b      	ldr	r3, [r7, #0]
 8028592:	681b      	ldr	r3, [r3, #0]
 8028594:	68fa      	ldr	r2, [r7, #12]
 8028596:	4313      	orrs	r3, r2
 8028598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802859a:	697b      	ldr	r3, [r7, #20]
 802859c:	f023 0302 	bic.w	r3, r3, #2
 80285a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80285a2:	683b      	ldr	r3, [r7, #0]
 80285a4:	689b      	ldr	r3, [r3, #8]
 80285a6:	697a      	ldr	r2, [r7, #20]
 80285a8:	4313      	orrs	r3, r2
 80285aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80285ac:	687b      	ldr	r3, [r7, #4]
 80285ae:	4a20      	ldr	r2, [pc, #128]	; (8028630 <TIM_OC1_SetConfig+0xd8>)
 80285b0:	4293      	cmp	r3, r2
 80285b2:	d003      	beq.n	80285bc <TIM_OC1_SetConfig+0x64>
 80285b4:	687b      	ldr	r3, [r7, #4]
 80285b6:	4a1f      	ldr	r2, [pc, #124]	; (8028634 <TIM_OC1_SetConfig+0xdc>)
 80285b8:	4293      	cmp	r3, r2
 80285ba:	d10c      	bne.n	80285d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80285bc:	697b      	ldr	r3, [r7, #20]
 80285be:	f023 0308 	bic.w	r3, r3, #8
 80285c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80285c4:	683b      	ldr	r3, [r7, #0]
 80285c6:	68db      	ldr	r3, [r3, #12]
 80285c8:	697a      	ldr	r2, [r7, #20]
 80285ca:	4313      	orrs	r3, r2
 80285cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80285ce:	697b      	ldr	r3, [r7, #20]
 80285d0:	f023 0304 	bic.w	r3, r3, #4
 80285d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80285d6:	687b      	ldr	r3, [r7, #4]
 80285d8:	4a15      	ldr	r2, [pc, #84]	; (8028630 <TIM_OC1_SetConfig+0xd8>)
 80285da:	4293      	cmp	r3, r2
 80285dc:	d003      	beq.n	80285e6 <TIM_OC1_SetConfig+0x8e>
 80285de:	687b      	ldr	r3, [r7, #4]
 80285e0:	4a14      	ldr	r2, [pc, #80]	; (8028634 <TIM_OC1_SetConfig+0xdc>)
 80285e2:	4293      	cmp	r3, r2
 80285e4:	d111      	bne.n	802860a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80285e6:	693b      	ldr	r3, [r7, #16]
 80285e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80285ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80285ee:	693b      	ldr	r3, [r7, #16]
 80285f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80285f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80285f6:	683b      	ldr	r3, [r7, #0]
 80285f8:	695b      	ldr	r3, [r3, #20]
 80285fa:	693a      	ldr	r2, [r7, #16]
 80285fc:	4313      	orrs	r3, r2
 80285fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8028600:	683b      	ldr	r3, [r7, #0]
 8028602:	699b      	ldr	r3, [r3, #24]
 8028604:	693a      	ldr	r2, [r7, #16]
 8028606:	4313      	orrs	r3, r2
 8028608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802860a:	687b      	ldr	r3, [r7, #4]
 802860c:	693a      	ldr	r2, [r7, #16]
 802860e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8028610:	687b      	ldr	r3, [r7, #4]
 8028612:	68fa      	ldr	r2, [r7, #12]
 8028614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8028616:	683b      	ldr	r3, [r7, #0]
 8028618:	685a      	ldr	r2, [r3, #4]
 802861a:	687b      	ldr	r3, [r7, #4]
 802861c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802861e:	687b      	ldr	r3, [r7, #4]
 8028620:	697a      	ldr	r2, [r7, #20]
 8028622:	621a      	str	r2, [r3, #32]
}
 8028624:	bf00      	nop
 8028626:	371c      	adds	r7, #28
 8028628:	46bd      	mov	sp, r7
 802862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802862e:	4770      	bx	lr
 8028630:	40010000 	.word	0x40010000
 8028634:	40010400 	.word	0x40010400

08028638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8028638:	b480      	push	{r7}
 802863a:	b087      	sub	sp, #28
 802863c:	af00      	add	r7, sp, #0
 802863e:	6078      	str	r0, [r7, #4]
 8028640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8028642:	687b      	ldr	r3, [r7, #4]
 8028644:	6a1b      	ldr	r3, [r3, #32]
 8028646:	f023 0210 	bic.w	r2, r3, #16
 802864a:	687b      	ldr	r3, [r7, #4]
 802864c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802864e:	687b      	ldr	r3, [r7, #4]
 8028650:	6a1b      	ldr	r3, [r3, #32]
 8028652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8028654:	687b      	ldr	r3, [r7, #4]
 8028656:	685b      	ldr	r3, [r3, #4]
 8028658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802865a:	687b      	ldr	r3, [r7, #4]
 802865c:	699b      	ldr	r3, [r3, #24]
 802865e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8028660:	68fb      	ldr	r3, [r7, #12]
 8028662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8028666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8028668:	68fb      	ldr	r3, [r7, #12]
 802866a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802866e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8028670:	683b      	ldr	r3, [r7, #0]
 8028672:	681b      	ldr	r3, [r3, #0]
 8028674:	021b      	lsls	r3, r3, #8
 8028676:	68fa      	ldr	r2, [r7, #12]
 8028678:	4313      	orrs	r3, r2
 802867a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 802867c:	697b      	ldr	r3, [r7, #20]
 802867e:	f023 0320 	bic.w	r3, r3, #32
 8028682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8028684:	683b      	ldr	r3, [r7, #0]
 8028686:	689b      	ldr	r3, [r3, #8]
 8028688:	011b      	lsls	r3, r3, #4
 802868a:	697a      	ldr	r2, [r7, #20]
 802868c:	4313      	orrs	r3, r2
 802868e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8028690:	687b      	ldr	r3, [r7, #4]
 8028692:	4a22      	ldr	r2, [pc, #136]	; (802871c <TIM_OC2_SetConfig+0xe4>)
 8028694:	4293      	cmp	r3, r2
 8028696:	d003      	beq.n	80286a0 <TIM_OC2_SetConfig+0x68>
 8028698:	687b      	ldr	r3, [r7, #4]
 802869a:	4a21      	ldr	r2, [pc, #132]	; (8028720 <TIM_OC2_SetConfig+0xe8>)
 802869c:	4293      	cmp	r3, r2
 802869e:	d10d      	bne.n	80286bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80286a0:	697b      	ldr	r3, [r7, #20]
 80286a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80286a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80286a8:	683b      	ldr	r3, [r7, #0]
 80286aa:	68db      	ldr	r3, [r3, #12]
 80286ac:	011b      	lsls	r3, r3, #4
 80286ae:	697a      	ldr	r2, [r7, #20]
 80286b0:	4313      	orrs	r3, r2
 80286b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80286b4:	697b      	ldr	r3, [r7, #20]
 80286b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80286ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80286bc:	687b      	ldr	r3, [r7, #4]
 80286be:	4a17      	ldr	r2, [pc, #92]	; (802871c <TIM_OC2_SetConfig+0xe4>)
 80286c0:	4293      	cmp	r3, r2
 80286c2:	d003      	beq.n	80286cc <TIM_OC2_SetConfig+0x94>
 80286c4:	687b      	ldr	r3, [r7, #4]
 80286c6:	4a16      	ldr	r2, [pc, #88]	; (8028720 <TIM_OC2_SetConfig+0xe8>)
 80286c8:	4293      	cmp	r3, r2
 80286ca:	d113      	bne.n	80286f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80286cc:	693b      	ldr	r3, [r7, #16]
 80286ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80286d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80286d4:	693b      	ldr	r3, [r7, #16]
 80286d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80286da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80286dc:	683b      	ldr	r3, [r7, #0]
 80286de:	695b      	ldr	r3, [r3, #20]
 80286e0:	009b      	lsls	r3, r3, #2
 80286e2:	693a      	ldr	r2, [r7, #16]
 80286e4:	4313      	orrs	r3, r2
 80286e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80286e8:	683b      	ldr	r3, [r7, #0]
 80286ea:	699b      	ldr	r3, [r3, #24]
 80286ec:	009b      	lsls	r3, r3, #2
 80286ee:	693a      	ldr	r2, [r7, #16]
 80286f0:	4313      	orrs	r3, r2
 80286f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80286f4:	687b      	ldr	r3, [r7, #4]
 80286f6:	693a      	ldr	r2, [r7, #16]
 80286f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80286fa:	687b      	ldr	r3, [r7, #4]
 80286fc:	68fa      	ldr	r2, [r7, #12]
 80286fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8028700:	683b      	ldr	r3, [r7, #0]
 8028702:	685a      	ldr	r2, [r3, #4]
 8028704:	687b      	ldr	r3, [r7, #4]
 8028706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8028708:	687b      	ldr	r3, [r7, #4]
 802870a:	697a      	ldr	r2, [r7, #20]
 802870c:	621a      	str	r2, [r3, #32]
}
 802870e:	bf00      	nop
 8028710:	371c      	adds	r7, #28
 8028712:	46bd      	mov	sp, r7
 8028714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028718:	4770      	bx	lr
 802871a:	bf00      	nop
 802871c:	40010000 	.word	0x40010000
 8028720:	40010400 	.word	0x40010400

08028724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8028724:	b480      	push	{r7}
 8028726:	b087      	sub	sp, #28
 8028728:	af00      	add	r7, sp, #0
 802872a:	6078      	str	r0, [r7, #4]
 802872c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802872e:	687b      	ldr	r3, [r7, #4]
 8028730:	6a1b      	ldr	r3, [r3, #32]
 8028732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8028736:	687b      	ldr	r3, [r7, #4]
 8028738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802873a:	687b      	ldr	r3, [r7, #4]
 802873c:	6a1b      	ldr	r3, [r3, #32]
 802873e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8028740:	687b      	ldr	r3, [r7, #4]
 8028742:	685b      	ldr	r3, [r3, #4]
 8028744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8028746:	687b      	ldr	r3, [r7, #4]
 8028748:	69db      	ldr	r3, [r3, #28]
 802874a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 802874c:	68fb      	ldr	r3, [r7, #12]
 802874e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8028754:	68fb      	ldr	r3, [r7, #12]
 8028756:	f023 0303 	bic.w	r3, r3, #3
 802875a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802875c:	683b      	ldr	r3, [r7, #0]
 802875e:	681b      	ldr	r3, [r3, #0]
 8028760:	68fa      	ldr	r2, [r7, #12]
 8028762:	4313      	orrs	r3, r2
 8028764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8028766:	697b      	ldr	r3, [r7, #20]
 8028768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802876c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802876e:	683b      	ldr	r3, [r7, #0]
 8028770:	689b      	ldr	r3, [r3, #8]
 8028772:	021b      	lsls	r3, r3, #8
 8028774:	697a      	ldr	r2, [r7, #20]
 8028776:	4313      	orrs	r3, r2
 8028778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802877a:	687b      	ldr	r3, [r7, #4]
 802877c:	4a21      	ldr	r2, [pc, #132]	; (8028804 <TIM_OC3_SetConfig+0xe0>)
 802877e:	4293      	cmp	r3, r2
 8028780:	d003      	beq.n	802878a <TIM_OC3_SetConfig+0x66>
 8028782:	687b      	ldr	r3, [r7, #4]
 8028784:	4a20      	ldr	r2, [pc, #128]	; (8028808 <TIM_OC3_SetConfig+0xe4>)
 8028786:	4293      	cmp	r3, r2
 8028788:	d10d      	bne.n	80287a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802878a:	697b      	ldr	r3, [r7, #20]
 802878c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8028790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8028792:	683b      	ldr	r3, [r7, #0]
 8028794:	68db      	ldr	r3, [r3, #12]
 8028796:	021b      	lsls	r3, r3, #8
 8028798:	697a      	ldr	r2, [r7, #20]
 802879a:	4313      	orrs	r3, r2
 802879c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802879e:	697b      	ldr	r3, [r7, #20]
 80287a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80287a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80287a6:	687b      	ldr	r3, [r7, #4]
 80287a8:	4a16      	ldr	r2, [pc, #88]	; (8028804 <TIM_OC3_SetConfig+0xe0>)
 80287aa:	4293      	cmp	r3, r2
 80287ac:	d003      	beq.n	80287b6 <TIM_OC3_SetConfig+0x92>
 80287ae:	687b      	ldr	r3, [r7, #4]
 80287b0:	4a15      	ldr	r2, [pc, #84]	; (8028808 <TIM_OC3_SetConfig+0xe4>)
 80287b2:	4293      	cmp	r3, r2
 80287b4:	d113      	bne.n	80287de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80287b6:	693b      	ldr	r3, [r7, #16]
 80287b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80287bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80287be:	693b      	ldr	r3, [r7, #16]
 80287c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80287c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80287c6:	683b      	ldr	r3, [r7, #0]
 80287c8:	695b      	ldr	r3, [r3, #20]
 80287ca:	011b      	lsls	r3, r3, #4
 80287cc:	693a      	ldr	r2, [r7, #16]
 80287ce:	4313      	orrs	r3, r2
 80287d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80287d2:	683b      	ldr	r3, [r7, #0]
 80287d4:	699b      	ldr	r3, [r3, #24]
 80287d6:	011b      	lsls	r3, r3, #4
 80287d8:	693a      	ldr	r2, [r7, #16]
 80287da:	4313      	orrs	r3, r2
 80287dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80287de:	687b      	ldr	r3, [r7, #4]
 80287e0:	693a      	ldr	r2, [r7, #16]
 80287e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80287e4:	687b      	ldr	r3, [r7, #4]
 80287e6:	68fa      	ldr	r2, [r7, #12]
 80287e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80287ea:	683b      	ldr	r3, [r7, #0]
 80287ec:	685a      	ldr	r2, [r3, #4]
 80287ee:	687b      	ldr	r3, [r7, #4]
 80287f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80287f2:	687b      	ldr	r3, [r7, #4]
 80287f4:	697a      	ldr	r2, [r7, #20]
 80287f6:	621a      	str	r2, [r3, #32]
}
 80287f8:	bf00      	nop
 80287fa:	371c      	adds	r7, #28
 80287fc:	46bd      	mov	sp, r7
 80287fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028802:	4770      	bx	lr
 8028804:	40010000 	.word	0x40010000
 8028808:	40010400 	.word	0x40010400

0802880c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802880c:	b480      	push	{r7}
 802880e:	b087      	sub	sp, #28
 8028810:	af00      	add	r7, sp, #0
 8028812:	6078      	str	r0, [r7, #4]
 8028814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8028816:	687b      	ldr	r3, [r7, #4]
 8028818:	6a1b      	ldr	r3, [r3, #32]
 802881a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802881e:	687b      	ldr	r3, [r7, #4]
 8028820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8028822:	687b      	ldr	r3, [r7, #4]
 8028824:	6a1b      	ldr	r3, [r3, #32]
 8028826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8028828:	687b      	ldr	r3, [r7, #4]
 802882a:	685b      	ldr	r3, [r3, #4]
 802882c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802882e:	687b      	ldr	r3, [r7, #4]
 8028830:	69db      	ldr	r3, [r3, #28]
 8028832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8028834:	68fb      	ldr	r3, [r7, #12]
 8028836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802883a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802883c:	68fb      	ldr	r3, [r7, #12]
 802883e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8028844:	683b      	ldr	r3, [r7, #0]
 8028846:	681b      	ldr	r3, [r3, #0]
 8028848:	021b      	lsls	r3, r3, #8
 802884a:	68fa      	ldr	r2, [r7, #12]
 802884c:	4313      	orrs	r3, r2
 802884e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8028850:	693b      	ldr	r3, [r7, #16]
 8028852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8028856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8028858:	683b      	ldr	r3, [r7, #0]
 802885a:	689b      	ldr	r3, [r3, #8]
 802885c:	031b      	lsls	r3, r3, #12
 802885e:	693a      	ldr	r2, [r7, #16]
 8028860:	4313      	orrs	r3, r2
 8028862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8028864:	687b      	ldr	r3, [r7, #4]
 8028866:	4a12      	ldr	r2, [pc, #72]	; (80288b0 <TIM_OC4_SetConfig+0xa4>)
 8028868:	4293      	cmp	r3, r2
 802886a:	d003      	beq.n	8028874 <TIM_OC4_SetConfig+0x68>
 802886c:	687b      	ldr	r3, [r7, #4]
 802886e:	4a11      	ldr	r2, [pc, #68]	; (80288b4 <TIM_OC4_SetConfig+0xa8>)
 8028870:	4293      	cmp	r3, r2
 8028872:	d109      	bne.n	8028888 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8028874:	697b      	ldr	r3, [r7, #20]
 8028876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802887a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802887c:	683b      	ldr	r3, [r7, #0]
 802887e:	695b      	ldr	r3, [r3, #20]
 8028880:	019b      	lsls	r3, r3, #6
 8028882:	697a      	ldr	r2, [r7, #20]
 8028884:	4313      	orrs	r3, r2
 8028886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8028888:	687b      	ldr	r3, [r7, #4]
 802888a:	697a      	ldr	r2, [r7, #20]
 802888c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802888e:	687b      	ldr	r3, [r7, #4]
 8028890:	68fa      	ldr	r2, [r7, #12]
 8028892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8028894:	683b      	ldr	r3, [r7, #0]
 8028896:	685a      	ldr	r2, [r3, #4]
 8028898:	687b      	ldr	r3, [r7, #4]
 802889a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802889c:	687b      	ldr	r3, [r7, #4]
 802889e:	693a      	ldr	r2, [r7, #16]
 80288a0:	621a      	str	r2, [r3, #32]
}
 80288a2:	bf00      	nop
 80288a4:	371c      	adds	r7, #28
 80288a6:	46bd      	mov	sp, r7
 80288a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288ac:	4770      	bx	lr
 80288ae:	bf00      	nop
 80288b0:	40010000 	.word	0x40010000
 80288b4:	40010400 	.word	0x40010400

080288b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80288b8:	b480      	push	{r7}
 80288ba:	b087      	sub	sp, #28
 80288bc:	af00      	add	r7, sp, #0
 80288be:	60f8      	str	r0, [r7, #12]
 80288c0:	60b9      	str	r1, [r7, #8]
 80288c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80288c4:	68bb      	ldr	r3, [r7, #8]
 80288c6:	f003 031f 	and.w	r3, r3, #31
 80288ca:	2201      	movs	r2, #1
 80288cc:	fa02 f303 	lsl.w	r3, r2, r3
 80288d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80288d2:	68fb      	ldr	r3, [r7, #12]
 80288d4:	6a1a      	ldr	r2, [r3, #32]
 80288d6:	697b      	ldr	r3, [r7, #20]
 80288d8:	43db      	mvns	r3, r3
 80288da:	401a      	ands	r2, r3
 80288dc:	68fb      	ldr	r3, [r7, #12]
 80288de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80288e0:	68fb      	ldr	r3, [r7, #12]
 80288e2:	6a1a      	ldr	r2, [r3, #32]
 80288e4:	68bb      	ldr	r3, [r7, #8]
 80288e6:	f003 031f 	and.w	r3, r3, #31
 80288ea:	6879      	ldr	r1, [r7, #4]
 80288ec:	fa01 f303 	lsl.w	r3, r1, r3
 80288f0:	431a      	orrs	r2, r3
 80288f2:	68fb      	ldr	r3, [r7, #12]
 80288f4:	621a      	str	r2, [r3, #32]
}
 80288f6:	bf00      	nop
 80288f8:	371c      	adds	r7, #28
 80288fa:	46bd      	mov	sp, r7
 80288fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028900:	4770      	bx	lr

08028902 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8028902:	b580      	push	{r7, lr}
 8028904:	b084      	sub	sp, #16
 8028906:	af00      	add	r7, sp, #0
 8028908:	6078      	str	r0, [r7, #4]
 802890a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 802890c:	687b      	ldr	r3, [r7, #4]
 802890e:	681b      	ldr	r3, [r3, #0]
 8028910:	2204      	movs	r2, #4
 8028912:	6839      	ldr	r1, [r7, #0]
 8028914:	4618      	mov	r0, r3
 8028916:	f000 f8af 	bl	8028a78 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 802891a:	687b      	ldr	r3, [r7, #4]
 802891c:	681b      	ldr	r3, [r3, #0]
 802891e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028920:	687b      	ldr	r3, [r7, #4]
 8028922:	681b      	ldr	r3, [r3, #0]
 8028924:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8028928:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802892a:	687b      	ldr	r3, [r7, #4]
 802892c:	681b      	ldr	r3, [r3, #0]
 802892e:	689b      	ldr	r3, [r3, #8]
 8028930:	f003 0307 	and.w	r3, r3, #7
 8028934:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028936:	68fb      	ldr	r3, [r7, #12]
 8028938:	2b06      	cmp	r3, #6
 802893a:	d007      	beq.n	802894c <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 802893c:	687b      	ldr	r3, [r7, #4]
 802893e:	681b      	ldr	r3, [r3, #0]
 8028940:	681a      	ldr	r2, [r3, #0]
 8028942:	687b      	ldr	r3, [r7, #4]
 8028944:	681b      	ldr	r3, [r3, #0]
 8028946:	f042 0201 	orr.w	r2, r2, #1
 802894a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802894c:	2300      	movs	r3, #0
}
 802894e:	4618      	mov	r0, r3
 8028950:	3710      	adds	r7, #16
 8028952:	46bd      	mov	sp, r7
 8028954:	bd80      	pop	{r7, pc}
	...

08028958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8028958:	b480      	push	{r7}
 802895a:	b085      	sub	sp, #20
 802895c:	af00      	add	r7, sp, #0
 802895e:	6078      	str	r0, [r7, #4]
 8028960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8028962:	687b      	ldr	r3, [r7, #4]
 8028964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028968:	2b01      	cmp	r3, #1
 802896a:	d101      	bne.n	8028970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802896c:	2302      	movs	r3, #2
 802896e:	e05a      	b.n	8028a26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8028970:	687b      	ldr	r3, [r7, #4]
 8028972:	2201      	movs	r2, #1
 8028974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028978:	687b      	ldr	r3, [r7, #4]
 802897a:	2202      	movs	r2, #2
 802897c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8028980:	687b      	ldr	r3, [r7, #4]
 8028982:	681b      	ldr	r3, [r3, #0]
 8028984:	685b      	ldr	r3, [r3, #4]
 8028986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8028988:	687b      	ldr	r3, [r7, #4]
 802898a:	681b      	ldr	r3, [r3, #0]
 802898c:	689b      	ldr	r3, [r3, #8]
 802898e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8028990:	68fb      	ldr	r3, [r7, #12]
 8028992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8028998:	683b      	ldr	r3, [r7, #0]
 802899a:	681b      	ldr	r3, [r3, #0]
 802899c:	68fa      	ldr	r2, [r7, #12]
 802899e:	4313      	orrs	r3, r2
 80289a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80289a2:	687b      	ldr	r3, [r7, #4]
 80289a4:	681b      	ldr	r3, [r3, #0]
 80289a6:	68fa      	ldr	r2, [r7, #12]
 80289a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80289aa:	687b      	ldr	r3, [r7, #4]
 80289ac:	681b      	ldr	r3, [r3, #0]
 80289ae:	4a21      	ldr	r2, [pc, #132]	; (8028a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80289b0:	4293      	cmp	r3, r2
 80289b2:	d022      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289b4:	687b      	ldr	r3, [r7, #4]
 80289b6:	681b      	ldr	r3, [r3, #0]
 80289b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80289bc:	d01d      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289be:	687b      	ldr	r3, [r7, #4]
 80289c0:	681b      	ldr	r3, [r3, #0]
 80289c2:	4a1d      	ldr	r2, [pc, #116]	; (8028a38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80289c4:	4293      	cmp	r3, r2
 80289c6:	d018      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289c8:	687b      	ldr	r3, [r7, #4]
 80289ca:	681b      	ldr	r3, [r3, #0]
 80289cc:	4a1b      	ldr	r2, [pc, #108]	; (8028a3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80289ce:	4293      	cmp	r3, r2
 80289d0:	d013      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289d2:	687b      	ldr	r3, [r7, #4]
 80289d4:	681b      	ldr	r3, [r3, #0]
 80289d6:	4a1a      	ldr	r2, [pc, #104]	; (8028a40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80289d8:	4293      	cmp	r3, r2
 80289da:	d00e      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289dc:	687b      	ldr	r3, [r7, #4]
 80289de:	681b      	ldr	r3, [r3, #0]
 80289e0:	4a18      	ldr	r2, [pc, #96]	; (8028a44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80289e2:	4293      	cmp	r3, r2
 80289e4:	d009      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289e6:	687b      	ldr	r3, [r7, #4]
 80289e8:	681b      	ldr	r3, [r3, #0]
 80289ea:	4a17      	ldr	r2, [pc, #92]	; (8028a48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80289ec:	4293      	cmp	r3, r2
 80289ee:	d004      	beq.n	80289fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80289f0:	687b      	ldr	r3, [r7, #4]
 80289f2:	681b      	ldr	r3, [r3, #0]
 80289f4:	4a15      	ldr	r2, [pc, #84]	; (8028a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80289f6:	4293      	cmp	r3, r2
 80289f8:	d10c      	bne.n	8028a14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80289fa:	68bb      	ldr	r3, [r7, #8]
 80289fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8028a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8028a02:	683b      	ldr	r3, [r7, #0]
 8028a04:	685b      	ldr	r3, [r3, #4]
 8028a06:	68ba      	ldr	r2, [r7, #8]
 8028a08:	4313      	orrs	r3, r2
 8028a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8028a0c:	687b      	ldr	r3, [r7, #4]
 8028a0e:	681b      	ldr	r3, [r3, #0]
 8028a10:	68ba      	ldr	r2, [r7, #8]
 8028a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8028a14:	687b      	ldr	r3, [r7, #4]
 8028a16:	2201      	movs	r2, #1
 8028a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8028a1c:	687b      	ldr	r3, [r7, #4]
 8028a1e:	2200      	movs	r2, #0
 8028a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8028a24:	2300      	movs	r3, #0
}
 8028a26:	4618      	mov	r0, r3
 8028a28:	3714      	adds	r7, #20
 8028a2a:	46bd      	mov	sp, r7
 8028a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a30:	4770      	bx	lr
 8028a32:	bf00      	nop
 8028a34:	40010000 	.word	0x40010000
 8028a38:	40000400 	.word	0x40000400
 8028a3c:	40000800 	.word	0x40000800
 8028a40:	40000c00 	.word	0x40000c00
 8028a44:	40010400 	.word	0x40010400
 8028a48:	40014000 	.word	0x40014000
 8028a4c:	40001800 	.word	0x40001800

08028a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8028a50:	b480      	push	{r7}
 8028a52:	b083      	sub	sp, #12
 8028a54:	af00      	add	r7, sp, #0
 8028a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8028a58:	bf00      	nop
 8028a5a:	370c      	adds	r7, #12
 8028a5c:	46bd      	mov	sp, r7
 8028a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a62:	4770      	bx	lr

08028a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8028a64:	b480      	push	{r7}
 8028a66:	b083      	sub	sp, #12
 8028a68:	af00      	add	r7, sp, #0
 8028a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8028a6c:	bf00      	nop
 8028a6e:	370c      	adds	r7, #12
 8028a70:	46bd      	mov	sp, r7
 8028a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a76:	4770      	bx	lr

08028a78 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8028a78:	b480      	push	{r7}
 8028a7a:	b087      	sub	sp, #28
 8028a7c:	af00      	add	r7, sp, #0
 8028a7e:	60f8      	str	r0, [r7, #12]
 8028a80:	60b9      	str	r1, [r7, #8]
 8028a82:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8028a84:	68bb      	ldr	r3, [r7, #8]
 8028a86:	f003 031f 	and.w	r3, r3, #31
 8028a8a:	2204      	movs	r2, #4
 8028a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8028a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8028a92:	68fb      	ldr	r3, [r7, #12]
 8028a94:	6a1a      	ldr	r2, [r3, #32]
 8028a96:	697b      	ldr	r3, [r7, #20]
 8028a98:	43db      	mvns	r3, r3
 8028a9a:	401a      	ands	r2, r3
 8028a9c:	68fb      	ldr	r3, [r7, #12]
 8028a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8028aa0:	68fb      	ldr	r3, [r7, #12]
 8028aa2:	6a1a      	ldr	r2, [r3, #32]
 8028aa4:	68bb      	ldr	r3, [r7, #8]
 8028aa6:	f003 031f 	and.w	r3, r3, #31
 8028aaa:	6879      	ldr	r1, [r7, #4]
 8028aac:	fa01 f303 	lsl.w	r3, r1, r3
 8028ab0:	431a      	orrs	r2, r3
 8028ab2:	68fb      	ldr	r3, [r7, #12]
 8028ab4:	621a      	str	r2, [r3, #32]
}
 8028ab6:	bf00      	nop
 8028ab8:	371c      	adds	r7, #28
 8028aba:	46bd      	mov	sp, r7
 8028abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ac0:	4770      	bx	lr

08028ac2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8028ac2:	b580      	push	{r7, lr}
 8028ac4:	b082      	sub	sp, #8
 8028ac6:	af00      	add	r7, sp, #0
 8028ac8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8028aca:	687b      	ldr	r3, [r7, #4]
 8028acc:	2b00      	cmp	r3, #0
 8028ace:	d101      	bne.n	8028ad4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8028ad0:	2301      	movs	r3, #1
 8028ad2:	e03f      	b.n	8028b54 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8028ad4:	687b      	ldr	r3, [r7, #4]
 8028ad6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8028ada:	b2db      	uxtb	r3, r3
 8028adc:	2b00      	cmp	r3, #0
 8028ade:	d106      	bne.n	8028aee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8028ae0:	687b      	ldr	r3, [r7, #4]
 8028ae2:	2200      	movs	r2, #0
 8028ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8028ae8:	6878      	ldr	r0, [r7, #4]
 8028aea:	f7f8 fda7 	bl	802163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8028aee:	687b      	ldr	r3, [r7, #4]
 8028af0:	2224      	movs	r2, #36	; 0x24
 8028af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8028af6:	687b      	ldr	r3, [r7, #4]
 8028af8:	681b      	ldr	r3, [r3, #0]
 8028afa:	68da      	ldr	r2, [r3, #12]
 8028afc:	687b      	ldr	r3, [r7, #4]
 8028afe:	681b      	ldr	r3, [r3, #0]
 8028b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028b04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8028b06:	6878      	ldr	r0, [r7, #4]
 8028b08:	f000 fb96 	bl	8029238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8028b0c:	687b      	ldr	r3, [r7, #4]
 8028b0e:	681b      	ldr	r3, [r3, #0]
 8028b10:	691a      	ldr	r2, [r3, #16]
 8028b12:	687b      	ldr	r3, [r7, #4]
 8028b14:	681b      	ldr	r3, [r3, #0]
 8028b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8028b1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8028b1c:	687b      	ldr	r3, [r7, #4]
 8028b1e:	681b      	ldr	r3, [r3, #0]
 8028b20:	695a      	ldr	r2, [r3, #20]
 8028b22:	687b      	ldr	r3, [r7, #4]
 8028b24:	681b      	ldr	r3, [r3, #0]
 8028b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8028b2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8028b2c:	687b      	ldr	r3, [r7, #4]
 8028b2e:	681b      	ldr	r3, [r3, #0]
 8028b30:	68da      	ldr	r2, [r3, #12]
 8028b32:	687b      	ldr	r3, [r7, #4]
 8028b34:	681b      	ldr	r3, [r3, #0]
 8028b36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028b3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028b3c:	687b      	ldr	r3, [r7, #4]
 8028b3e:	2200      	movs	r2, #0
 8028b40:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8028b42:	687b      	ldr	r3, [r7, #4]
 8028b44:	2220      	movs	r2, #32
 8028b46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8028b4a:	687b      	ldr	r3, [r7, #4]
 8028b4c:	2220      	movs	r2, #32
 8028b4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8028b52:	2300      	movs	r3, #0
}
 8028b54:	4618      	mov	r0, r3
 8028b56:	3708      	adds	r7, #8
 8028b58:	46bd      	mov	sp, r7
 8028b5a:	bd80      	pop	{r7, pc}

08028b5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028b5c:	b580      	push	{r7, lr}
 8028b5e:	b088      	sub	sp, #32
 8028b60:	af02      	add	r7, sp, #8
 8028b62:	60f8      	str	r0, [r7, #12]
 8028b64:	60b9      	str	r1, [r7, #8]
 8028b66:	603b      	str	r3, [r7, #0]
 8028b68:	4613      	mov	r3, r2
 8028b6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8028b6c:	2300      	movs	r3, #0
 8028b6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8028b70:	68fb      	ldr	r3, [r7, #12]
 8028b72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8028b76:	b2db      	uxtb	r3, r3
 8028b78:	2b20      	cmp	r3, #32
 8028b7a:	f040 8083 	bne.w	8028c84 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8028b7e:	68bb      	ldr	r3, [r7, #8]
 8028b80:	2b00      	cmp	r3, #0
 8028b82:	d002      	beq.n	8028b8a <HAL_UART_Transmit+0x2e>
 8028b84:	88fb      	ldrh	r3, [r7, #6]
 8028b86:	2b00      	cmp	r3, #0
 8028b88:	d101      	bne.n	8028b8e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8028b8a:	2301      	movs	r3, #1
 8028b8c:	e07b      	b.n	8028c86 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8028b8e:	68fb      	ldr	r3, [r7, #12]
 8028b90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8028b94:	2b01      	cmp	r3, #1
 8028b96:	d101      	bne.n	8028b9c <HAL_UART_Transmit+0x40>
 8028b98:	2302      	movs	r3, #2
 8028b9a:	e074      	b.n	8028c86 <HAL_UART_Transmit+0x12a>
 8028b9c:	68fb      	ldr	r3, [r7, #12]
 8028b9e:	2201      	movs	r2, #1
 8028ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028ba4:	68fb      	ldr	r3, [r7, #12]
 8028ba6:	2200      	movs	r2, #0
 8028ba8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8028baa:	68fb      	ldr	r3, [r7, #12]
 8028bac:	2221      	movs	r2, #33	; 0x21
 8028bae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8028bb2:	f7f8 ffd9 	bl	8021b68 <HAL_GetTick>
 8028bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8028bb8:	68fb      	ldr	r3, [r7, #12]
 8028bba:	88fa      	ldrh	r2, [r7, #6]
 8028bbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8028bbe:	68fb      	ldr	r3, [r7, #12]
 8028bc0:	88fa      	ldrh	r2, [r7, #6]
 8028bc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8028bc4:	68fb      	ldr	r3, [r7, #12]
 8028bc6:	2200      	movs	r2, #0
 8028bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8028bcc:	e042      	b.n	8028c54 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8028bce:	68fb      	ldr	r3, [r7, #12]
 8028bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8028bd2:	b29b      	uxth	r3, r3
 8028bd4:	3b01      	subs	r3, #1
 8028bd6:	b29a      	uxth	r2, r3
 8028bd8:	68fb      	ldr	r3, [r7, #12]
 8028bda:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8028bdc:	68fb      	ldr	r3, [r7, #12]
 8028bde:	689b      	ldr	r3, [r3, #8]
 8028be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028be4:	d122      	bne.n	8028c2c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8028be6:	683b      	ldr	r3, [r7, #0]
 8028be8:	9300      	str	r3, [sp, #0]
 8028bea:	697b      	ldr	r3, [r7, #20]
 8028bec:	2200      	movs	r2, #0
 8028bee:	2180      	movs	r1, #128	; 0x80
 8028bf0:	68f8      	ldr	r0, [r7, #12]
 8028bf2:	f000 f9b5 	bl	8028f60 <UART_WaitOnFlagUntilTimeout>
 8028bf6:	4603      	mov	r3, r0
 8028bf8:	2b00      	cmp	r3, #0
 8028bfa:	d001      	beq.n	8028c00 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8028bfc:	2303      	movs	r3, #3
 8028bfe:	e042      	b.n	8028c86 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8028c00:	68bb      	ldr	r3, [r7, #8]
 8028c02:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8028c04:	693b      	ldr	r3, [r7, #16]
 8028c06:	881b      	ldrh	r3, [r3, #0]
 8028c08:	461a      	mov	r2, r3
 8028c0a:	68fb      	ldr	r3, [r7, #12]
 8028c0c:	681b      	ldr	r3, [r3, #0]
 8028c0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8028c12:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8028c14:	68fb      	ldr	r3, [r7, #12]
 8028c16:	691b      	ldr	r3, [r3, #16]
 8028c18:	2b00      	cmp	r3, #0
 8028c1a:	d103      	bne.n	8028c24 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8028c1c:	68bb      	ldr	r3, [r7, #8]
 8028c1e:	3302      	adds	r3, #2
 8028c20:	60bb      	str	r3, [r7, #8]
 8028c22:	e017      	b.n	8028c54 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8028c24:	68bb      	ldr	r3, [r7, #8]
 8028c26:	3301      	adds	r3, #1
 8028c28:	60bb      	str	r3, [r7, #8]
 8028c2a:	e013      	b.n	8028c54 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8028c2c:	683b      	ldr	r3, [r7, #0]
 8028c2e:	9300      	str	r3, [sp, #0]
 8028c30:	697b      	ldr	r3, [r7, #20]
 8028c32:	2200      	movs	r2, #0
 8028c34:	2180      	movs	r1, #128	; 0x80
 8028c36:	68f8      	ldr	r0, [r7, #12]
 8028c38:	f000 f992 	bl	8028f60 <UART_WaitOnFlagUntilTimeout>
 8028c3c:	4603      	mov	r3, r0
 8028c3e:	2b00      	cmp	r3, #0
 8028c40:	d001      	beq.n	8028c46 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8028c42:	2303      	movs	r3, #3
 8028c44:	e01f      	b.n	8028c86 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8028c46:	68bb      	ldr	r3, [r7, #8]
 8028c48:	1c5a      	adds	r2, r3, #1
 8028c4a:	60ba      	str	r2, [r7, #8]
 8028c4c:	781a      	ldrb	r2, [r3, #0]
 8028c4e:	68fb      	ldr	r3, [r7, #12]
 8028c50:	681b      	ldr	r3, [r3, #0]
 8028c52:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8028c54:	68fb      	ldr	r3, [r7, #12]
 8028c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8028c58:	b29b      	uxth	r3, r3
 8028c5a:	2b00      	cmp	r3, #0
 8028c5c:	d1b7      	bne.n	8028bce <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8028c5e:	683b      	ldr	r3, [r7, #0]
 8028c60:	9300      	str	r3, [sp, #0]
 8028c62:	697b      	ldr	r3, [r7, #20]
 8028c64:	2200      	movs	r2, #0
 8028c66:	2140      	movs	r1, #64	; 0x40
 8028c68:	68f8      	ldr	r0, [r7, #12]
 8028c6a:	f000 f979 	bl	8028f60 <UART_WaitOnFlagUntilTimeout>
 8028c6e:	4603      	mov	r3, r0
 8028c70:	2b00      	cmp	r3, #0
 8028c72:	d001      	beq.n	8028c78 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8028c74:	2303      	movs	r3, #3
 8028c76:	e006      	b.n	8028c86 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8028c78:	68fb      	ldr	r3, [r7, #12]
 8028c7a:	2220      	movs	r2, #32
 8028c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8028c80:	2300      	movs	r3, #0
 8028c82:	e000      	b.n	8028c86 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8028c84:	2302      	movs	r3, #2
  }
}
 8028c86:	4618      	mov	r0, r3
 8028c88:	3718      	adds	r7, #24
 8028c8a:	46bd      	mov	sp, r7
 8028c8c:	bd80      	pop	{r7, pc}

08028c8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8028c8e:	b480      	push	{r7}
 8028c90:	b085      	sub	sp, #20
 8028c92:	af00      	add	r7, sp, #0
 8028c94:	60f8      	str	r0, [r7, #12]
 8028c96:	60b9      	str	r1, [r7, #8]
 8028c98:	4613      	mov	r3, r2
 8028c9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8028c9c:	68fb      	ldr	r3, [r7, #12]
 8028c9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8028ca2:	b2db      	uxtb	r3, r3
 8028ca4:	2b20      	cmp	r3, #32
 8028ca6:	d140      	bne.n	8028d2a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8028ca8:	68bb      	ldr	r3, [r7, #8]
 8028caa:	2b00      	cmp	r3, #0
 8028cac:	d002      	beq.n	8028cb4 <HAL_UART_Receive_IT+0x26>
 8028cae:	88fb      	ldrh	r3, [r7, #6]
 8028cb0:	2b00      	cmp	r3, #0
 8028cb2:	d101      	bne.n	8028cb8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8028cb4:	2301      	movs	r3, #1
 8028cb6:	e039      	b.n	8028d2c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8028cb8:	68fb      	ldr	r3, [r7, #12]
 8028cba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8028cbe:	2b01      	cmp	r3, #1
 8028cc0:	d101      	bne.n	8028cc6 <HAL_UART_Receive_IT+0x38>
 8028cc2:	2302      	movs	r3, #2
 8028cc4:	e032      	b.n	8028d2c <HAL_UART_Receive_IT+0x9e>
 8028cc6:	68fb      	ldr	r3, [r7, #12]
 8028cc8:	2201      	movs	r2, #1
 8028cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8028cce:	68fb      	ldr	r3, [r7, #12]
 8028cd0:	68ba      	ldr	r2, [r7, #8]
 8028cd2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8028cd4:	68fb      	ldr	r3, [r7, #12]
 8028cd6:	88fa      	ldrh	r2, [r7, #6]
 8028cd8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8028cda:	68fb      	ldr	r3, [r7, #12]
 8028cdc:	88fa      	ldrh	r2, [r7, #6]
 8028cde:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028ce0:	68fb      	ldr	r3, [r7, #12]
 8028ce2:	2200      	movs	r2, #0
 8028ce4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8028ce6:	68fb      	ldr	r3, [r7, #12]
 8028ce8:	2222      	movs	r2, #34	; 0x22
 8028cea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8028cee:	68fb      	ldr	r3, [r7, #12]
 8028cf0:	2200      	movs	r2, #0
 8028cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8028cf6:	68fb      	ldr	r3, [r7, #12]
 8028cf8:	681b      	ldr	r3, [r3, #0]
 8028cfa:	68da      	ldr	r2, [r3, #12]
 8028cfc:	68fb      	ldr	r3, [r7, #12]
 8028cfe:	681b      	ldr	r3, [r3, #0]
 8028d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8028d04:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8028d06:	68fb      	ldr	r3, [r7, #12]
 8028d08:	681b      	ldr	r3, [r3, #0]
 8028d0a:	695a      	ldr	r2, [r3, #20]
 8028d0c:	68fb      	ldr	r3, [r7, #12]
 8028d0e:	681b      	ldr	r3, [r3, #0]
 8028d10:	f042 0201 	orr.w	r2, r2, #1
 8028d14:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8028d16:	68fb      	ldr	r3, [r7, #12]
 8028d18:	681b      	ldr	r3, [r3, #0]
 8028d1a:	68da      	ldr	r2, [r3, #12]
 8028d1c:	68fb      	ldr	r3, [r7, #12]
 8028d1e:	681b      	ldr	r3, [r3, #0]
 8028d20:	f042 0220 	orr.w	r2, r2, #32
 8028d24:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8028d26:	2300      	movs	r3, #0
 8028d28:	e000      	b.n	8028d2c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8028d2a:	2302      	movs	r3, #2
  }
}
 8028d2c:	4618      	mov	r0, r3
 8028d2e:	3714      	adds	r7, #20
 8028d30:	46bd      	mov	sp, r7
 8028d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d36:	4770      	bx	lr

08028d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8028d38:	b580      	push	{r7, lr}
 8028d3a:	b088      	sub	sp, #32
 8028d3c:	af00      	add	r7, sp, #0
 8028d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8028d40:	687b      	ldr	r3, [r7, #4]
 8028d42:	681b      	ldr	r3, [r3, #0]
 8028d44:	681b      	ldr	r3, [r3, #0]
 8028d46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8028d48:	687b      	ldr	r3, [r7, #4]
 8028d4a:	681b      	ldr	r3, [r3, #0]
 8028d4c:	68db      	ldr	r3, [r3, #12]
 8028d4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8028d50:	687b      	ldr	r3, [r7, #4]
 8028d52:	681b      	ldr	r3, [r3, #0]
 8028d54:	695b      	ldr	r3, [r3, #20]
 8028d56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8028d58:	2300      	movs	r3, #0
 8028d5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8028d5c:	2300      	movs	r3, #0
 8028d5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8028d60:	69fb      	ldr	r3, [r7, #28]
 8028d62:	f003 030f 	and.w	r3, r3, #15
 8028d66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8028d68:	693b      	ldr	r3, [r7, #16]
 8028d6a:	2b00      	cmp	r3, #0
 8028d6c:	d10d      	bne.n	8028d8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8028d6e:	69fb      	ldr	r3, [r7, #28]
 8028d70:	f003 0320 	and.w	r3, r3, #32
 8028d74:	2b00      	cmp	r3, #0
 8028d76:	d008      	beq.n	8028d8a <HAL_UART_IRQHandler+0x52>
 8028d78:	69bb      	ldr	r3, [r7, #24]
 8028d7a:	f003 0320 	and.w	r3, r3, #32
 8028d7e:	2b00      	cmp	r3, #0
 8028d80:	d003      	beq.n	8028d8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8028d82:	6878      	ldr	r0, [r7, #4]
 8028d84:	f000 f9d6 	bl	8029134 <UART_Receive_IT>
      return;
 8028d88:	e0d0      	b.n	8028f2c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8028d8a:	693b      	ldr	r3, [r7, #16]
 8028d8c:	2b00      	cmp	r3, #0
 8028d8e:	f000 80b0 	beq.w	8028ef2 <HAL_UART_IRQHandler+0x1ba>
 8028d92:	697b      	ldr	r3, [r7, #20]
 8028d94:	f003 0301 	and.w	r3, r3, #1
 8028d98:	2b00      	cmp	r3, #0
 8028d9a:	d105      	bne.n	8028da8 <HAL_UART_IRQHandler+0x70>
 8028d9c:	69bb      	ldr	r3, [r7, #24]
 8028d9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8028da2:	2b00      	cmp	r3, #0
 8028da4:	f000 80a5 	beq.w	8028ef2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8028da8:	69fb      	ldr	r3, [r7, #28]
 8028daa:	f003 0301 	and.w	r3, r3, #1
 8028dae:	2b00      	cmp	r3, #0
 8028db0:	d00a      	beq.n	8028dc8 <HAL_UART_IRQHandler+0x90>
 8028db2:	69bb      	ldr	r3, [r7, #24]
 8028db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028db8:	2b00      	cmp	r3, #0
 8028dba:	d005      	beq.n	8028dc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8028dbc:	687b      	ldr	r3, [r7, #4]
 8028dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028dc0:	f043 0201 	orr.w	r2, r3, #1
 8028dc4:	687b      	ldr	r3, [r7, #4]
 8028dc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8028dc8:	69fb      	ldr	r3, [r7, #28]
 8028dca:	f003 0304 	and.w	r3, r3, #4
 8028dce:	2b00      	cmp	r3, #0
 8028dd0:	d00a      	beq.n	8028de8 <HAL_UART_IRQHandler+0xb0>
 8028dd2:	697b      	ldr	r3, [r7, #20]
 8028dd4:	f003 0301 	and.w	r3, r3, #1
 8028dd8:	2b00      	cmp	r3, #0
 8028dda:	d005      	beq.n	8028de8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8028ddc:	687b      	ldr	r3, [r7, #4]
 8028dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028de0:	f043 0202 	orr.w	r2, r3, #2
 8028de4:	687b      	ldr	r3, [r7, #4]
 8028de6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8028de8:	69fb      	ldr	r3, [r7, #28]
 8028dea:	f003 0302 	and.w	r3, r3, #2
 8028dee:	2b00      	cmp	r3, #0
 8028df0:	d00a      	beq.n	8028e08 <HAL_UART_IRQHandler+0xd0>
 8028df2:	697b      	ldr	r3, [r7, #20]
 8028df4:	f003 0301 	and.w	r3, r3, #1
 8028df8:	2b00      	cmp	r3, #0
 8028dfa:	d005      	beq.n	8028e08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8028dfc:	687b      	ldr	r3, [r7, #4]
 8028dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028e00:	f043 0204 	orr.w	r2, r3, #4
 8028e04:	687b      	ldr	r3, [r7, #4]
 8028e06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8028e08:	69fb      	ldr	r3, [r7, #28]
 8028e0a:	f003 0308 	and.w	r3, r3, #8
 8028e0e:	2b00      	cmp	r3, #0
 8028e10:	d00f      	beq.n	8028e32 <HAL_UART_IRQHandler+0xfa>
 8028e12:	69bb      	ldr	r3, [r7, #24]
 8028e14:	f003 0320 	and.w	r3, r3, #32
 8028e18:	2b00      	cmp	r3, #0
 8028e1a:	d104      	bne.n	8028e26 <HAL_UART_IRQHandler+0xee>
 8028e1c:	697b      	ldr	r3, [r7, #20]
 8028e1e:	f003 0301 	and.w	r3, r3, #1
 8028e22:	2b00      	cmp	r3, #0
 8028e24:	d005      	beq.n	8028e32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8028e26:	687b      	ldr	r3, [r7, #4]
 8028e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028e2a:	f043 0208 	orr.w	r2, r3, #8
 8028e2e:	687b      	ldr	r3, [r7, #4]
 8028e30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8028e32:	687b      	ldr	r3, [r7, #4]
 8028e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028e36:	2b00      	cmp	r3, #0
 8028e38:	d077      	beq.n	8028f2a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8028e3a:	69fb      	ldr	r3, [r7, #28]
 8028e3c:	f003 0320 	and.w	r3, r3, #32
 8028e40:	2b00      	cmp	r3, #0
 8028e42:	d007      	beq.n	8028e54 <HAL_UART_IRQHandler+0x11c>
 8028e44:	69bb      	ldr	r3, [r7, #24]
 8028e46:	f003 0320 	and.w	r3, r3, #32
 8028e4a:	2b00      	cmp	r3, #0
 8028e4c:	d002      	beq.n	8028e54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8028e4e:	6878      	ldr	r0, [r7, #4]
 8028e50:	f000 f970 	bl	8029134 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8028e54:	687b      	ldr	r3, [r7, #4]
 8028e56:	681b      	ldr	r3, [r3, #0]
 8028e58:	695b      	ldr	r3, [r3, #20]
 8028e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028e5e:	2b40      	cmp	r3, #64	; 0x40
 8028e60:	bf0c      	ite	eq
 8028e62:	2301      	moveq	r3, #1
 8028e64:	2300      	movne	r3, #0
 8028e66:	b2db      	uxtb	r3, r3
 8028e68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8028e6a:	687b      	ldr	r3, [r7, #4]
 8028e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028e6e:	f003 0308 	and.w	r3, r3, #8
 8028e72:	2b00      	cmp	r3, #0
 8028e74:	d102      	bne.n	8028e7c <HAL_UART_IRQHandler+0x144>
 8028e76:	68fb      	ldr	r3, [r7, #12]
 8028e78:	2b00      	cmp	r3, #0
 8028e7a:	d031      	beq.n	8028ee0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8028e7c:	6878      	ldr	r0, [r7, #4]
 8028e7e:	f000 f8b9 	bl	8028ff4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028e82:	687b      	ldr	r3, [r7, #4]
 8028e84:	681b      	ldr	r3, [r3, #0]
 8028e86:	695b      	ldr	r3, [r3, #20]
 8028e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028e8c:	2b40      	cmp	r3, #64	; 0x40
 8028e8e:	d123      	bne.n	8028ed8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8028e90:	687b      	ldr	r3, [r7, #4]
 8028e92:	681b      	ldr	r3, [r3, #0]
 8028e94:	695a      	ldr	r2, [r3, #20]
 8028e96:	687b      	ldr	r3, [r7, #4]
 8028e98:	681b      	ldr	r3, [r3, #0]
 8028e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028e9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8028ea0:	687b      	ldr	r3, [r7, #4]
 8028ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028ea4:	2b00      	cmp	r3, #0
 8028ea6:	d013      	beq.n	8028ed0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8028ea8:	687b      	ldr	r3, [r7, #4]
 8028eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028eac:	4a21      	ldr	r2, [pc, #132]	; (8028f34 <HAL_UART_IRQHandler+0x1fc>)
 8028eae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8028eb0:	687b      	ldr	r3, [r7, #4]
 8028eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028eb4:	4618      	mov	r0, r3
 8028eb6:	f7f9 fc29 	bl	802270c <HAL_DMA_Abort_IT>
 8028eba:	4603      	mov	r3, r0
 8028ebc:	2b00      	cmp	r3, #0
 8028ebe:	d016      	beq.n	8028eee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8028ec0:	687b      	ldr	r3, [r7, #4]
 8028ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028ec6:	687a      	ldr	r2, [r7, #4]
 8028ec8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8028eca:	4610      	mov	r0, r2
 8028ecc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028ece:	e00e      	b.n	8028eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8028ed0:	6878      	ldr	r0, [r7, #4]
 8028ed2:	f000 f83b 	bl	8028f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028ed6:	e00a      	b.n	8028eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8028ed8:	6878      	ldr	r0, [r7, #4]
 8028eda:	f000 f837 	bl	8028f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028ede:	e006      	b.n	8028eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8028ee0:	6878      	ldr	r0, [r7, #4]
 8028ee2:	f000 f833 	bl	8028f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028ee6:	687b      	ldr	r3, [r7, #4]
 8028ee8:	2200      	movs	r2, #0
 8028eea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8028eec:	e01d      	b.n	8028f2a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028eee:	bf00      	nop
    return;
 8028ef0:	e01b      	b.n	8028f2a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8028ef2:	69fb      	ldr	r3, [r7, #28]
 8028ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028ef8:	2b00      	cmp	r3, #0
 8028efa:	d008      	beq.n	8028f0e <HAL_UART_IRQHandler+0x1d6>
 8028efc:	69bb      	ldr	r3, [r7, #24]
 8028efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028f02:	2b00      	cmp	r3, #0
 8028f04:	d003      	beq.n	8028f0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8028f06:	6878      	ldr	r0, [r7, #4]
 8028f08:	f000 f8a6 	bl	8029058 <UART_Transmit_IT>
    return;
 8028f0c:	e00e      	b.n	8028f2c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8028f0e:	69fb      	ldr	r3, [r7, #28]
 8028f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028f14:	2b00      	cmp	r3, #0
 8028f16:	d009      	beq.n	8028f2c <HAL_UART_IRQHandler+0x1f4>
 8028f18:	69bb      	ldr	r3, [r7, #24]
 8028f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028f1e:	2b00      	cmp	r3, #0
 8028f20:	d004      	beq.n	8028f2c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8028f22:	6878      	ldr	r0, [r7, #4]
 8028f24:	f000 f8ee 	bl	8029104 <UART_EndTransmit_IT>
    return;
 8028f28:	e000      	b.n	8028f2c <HAL_UART_IRQHandler+0x1f4>
    return;
 8028f2a:	bf00      	nop
  }
}
 8028f2c:	3720      	adds	r7, #32
 8028f2e:	46bd      	mov	sp, r7
 8028f30:	bd80      	pop	{r7, pc}
 8028f32:	bf00      	nop
 8028f34:	08029031 	.word	0x08029031

08028f38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8028f38:	b480      	push	{r7}
 8028f3a:	b083      	sub	sp, #12
 8028f3c:	af00      	add	r7, sp, #0
 8028f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8028f40:	bf00      	nop
 8028f42:	370c      	adds	r7, #12
 8028f44:	46bd      	mov	sp, r7
 8028f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f4a:	4770      	bx	lr

08028f4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8028f4c:	b480      	push	{r7}
 8028f4e:	b083      	sub	sp, #12
 8028f50:	af00      	add	r7, sp, #0
 8028f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8028f54:	bf00      	nop
 8028f56:	370c      	adds	r7, #12
 8028f58:	46bd      	mov	sp, r7
 8028f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f5e:	4770      	bx	lr

08028f60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8028f60:	b580      	push	{r7, lr}
 8028f62:	b084      	sub	sp, #16
 8028f64:	af00      	add	r7, sp, #0
 8028f66:	60f8      	str	r0, [r7, #12]
 8028f68:	60b9      	str	r1, [r7, #8]
 8028f6a:	603b      	str	r3, [r7, #0]
 8028f6c:	4613      	mov	r3, r2
 8028f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8028f70:	e02c      	b.n	8028fcc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8028f72:	69bb      	ldr	r3, [r7, #24]
 8028f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028f78:	d028      	beq.n	8028fcc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8028f7a:	69bb      	ldr	r3, [r7, #24]
 8028f7c:	2b00      	cmp	r3, #0
 8028f7e:	d007      	beq.n	8028f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8028f80:	f7f8 fdf2 	bl	8021b68 <HAL_GetTick>
 8028f84:	4602      	mov	r2, r0
 8028f86:	683b      	ldr	r3, [r7, #0]
 8028f88:	1ad3      	subs	r3, r2, r3
 8028f8a:	69ba      	ldr	r2, [r7, #24]
 8028f8c:	429a      	cmp	r2, r3
 8028f8e:	d21d      	bcs.n	8028fcc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8028f90:	68fb      	ldr	r3, [r7, #12]
 8028f92:	681b      	ldr	r3, [r3, #0]
 8028f94:	68da      	ldr	r2, [r3, #12]
 8028f96:	68fb      	ldr	r3, [r7, #12]
 8028f98:	681b      	ldr	r3, [r3, #0]
 8028f9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8028f9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8028fa0:	68fb      	ldr	r3, [r7, #12]
 8028fa2:	681b      	ldr	r3, [r3, #0]
 8028fa4:	695a      	ldr	r2, [r3, #20]
 8028fa6:	68fb      	ldr	r3, [r7, #12]
 8028fa8:	681b      	ldr	r3, [r3, #0]
 8028faa:	f022 0201 	bic.w	r2, r2, #1
 8028fae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8028fb0:	68fb      	ldr	r3, [r7, #12]
 8028fb2:	2220      	movs	r2, #32
 8028fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8028fb8:	68fb      	ldr	r3, [r7, #12]
 8028fba:	2220      	movs	r2, #32
 8028fbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8028fc0:	68fb      	ldr	r3, [r7, #12]
 8028fc2:	2200      	movs	r2, #0
 8028fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8028fc8:	2303      	movs	r3, #3
 8028fca:	e00f      	b.n	8028fec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8028fcc:	68fb      	ldr	r3, [r7, #12]
 8028fce:	681b      	ldr	r3, [r3, #0]
 8028fd0:	681a      	ldr	r2, [r3, #0]
 8028fd2:	68bb      	ldr	r3, [r7, #8]
 8028fd4:	4013      	ands	r3, r2
 8028fd6:	68ba      	ldr	r2, [r7, #8]
 8028fd8:	429a      	cmp	r2, r3
 8028fda:	bf0c      	ite	eq
 8028fdc:	2301      	moveq	r3, #1
 8028fde:	2300      	movne	r3, #0
 8028fe0:	b2db      	uxtb	r3, r3
 8028fe2:	461a      	mov	r2, r3
 8028fe4:	79fb      	ldrb	r3, [r7, #7]
 8028fe6:	429a      	cmp	r2, r3
 8028fe8:	d0c3      	beq.n	8028f72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8028fea:	2300      	movs	r3, #0
}
 8028fec:	4618      	mov	r0, r3
 8028fee:	3710      	adds	r7, #16
 8028ff0:	46bd      	mov	sp, r7
 8028ff2:	bd80      	pop	{r7, pc}

08028ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8028ff4:	b480      	push	{r7}
 8028ff6:	b083      	sub	sp, #12
 8028ff8:	af00      	add	r7, sp, #0
 8028ffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8028ffc:	687b      	ldr	r3, [r7, #4]
 8028ffe:	681b      	ldr	r3, [r3, #0]
 8029000:	68da      	ldr	r2, [r3, #12]
 8029002:	687b      	ldr	r3, [r7, #4]
 8029004:	681b      	ldr	r3, [r3, #0]
 8029006:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 802900a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802900c:	687b      	ldr	r3, [r7, #4]
 802900e:	681b      	ldr	r3, [r3, #0]
 8029010:	695a      	ldr	r2, [r3, #20]
 8029012:	687b      	ldr	r3, [r7, #4]
 8029014:	681b      	ldr	r3, [r3, #0]
 8029016:	f022 0201 	bic.w	r2, r2, #1
 802901a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802901c:	687b      	ldr	r3, [r7, #4]
 802901e:	2220      	movs	r2, #32
 8029020:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8029024:	bf00      	nop
 8029026:	370c      	adds	r7, #12
 8029028:	46bd      	mov	sp, r7
 802902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802902e:	4770      	bx	lr

08029030 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8029030:	b580      	push	{r7, lr}
 8029032:	b084      	sub	sp, #16
 8029034:	af00      	add	r7, sp, #0
 8029036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8029038:	687b      	ldr	r3, [r7, #4]
 802903a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802903c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802903e:	68fb      	ldr	r3, [r7, #12]
 8029040:	2200      	movs	r2, #0
 8029042:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8029044:	68fb      	ldr	r3, [r7, #12]
 8029046:	2200      	movs	r2, #0
 8029048:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802904a:	68f8      	ldr	r0, [r7, #12]
 802904c:	f7ff ff7e 	bl	8028f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8029050:	bf00      	nop
 8029052:	3710      	adds	r7, #16
 8029054:	46bd      	mov	sp, r7
 8029056:	bd80      	pop	{r7, pc}

08029058 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8029058:	b480      	push	{r7}
 802905a:	b085      	sub	sp, #20
 802905c:	af00      	add	r7, sp, #0
 802905e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8029060:	687b      	ldr	r3, [r7, #4]
 8029062:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8029066:	b2db      	uxtb	r3, r3
 8029068:	2b21      	cmp	r3, #33	; 0x21
 802906a:	d144      	bne.n	80290f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 802906c:	687b      	ldr	r3, [r7, #4]
 802906e:	689b      	ldr	r3, [r3, #8]
 8029070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029074:	d11a      	bne.n	80290ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8029076:	687b      	ldr	r3, [r7, #4]
 8029078:	6a1b      	ldr	r3, [r3, #32]
 802907a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802907c:	68fb      	ldr	r3, [r7, #12]
 802907e:	881b      	ldrh	r3, [r3, #0]
 8029080:	461a      	mov	r2, r3
 8029082:	687b      	ldr	r3, [r7, #4]
 8029084:	681b      	ldr	r3, [r3, #0]
 8029086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802908a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 802908c:	687b      	ldr	r3, [r7, #4]
 802908e:	691b      	ldr	r3, [r3, #16]
 8029090:	2b00      	cmp	r3, #0
 8029092:	d105      	bne.n	80290a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8029094:	687b      	ldr	r3, [r7, #4]
 8029096:	6a1b      	ldr	r3, [r3, #32]
 8029098:	1c9a      	adds	r2, r3, #2
 802909a:	687b      	ldr	r3, [r7, #4]
 802909c:	621a      	str	r2, [r3, #32]
 802909e:	e00e      	b.n	80290be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80290a0:	687b      	ldr	r3, [r7, #4]
 80290a2:	6a1b      	ldr	r3, [r3, #32]
 80290a4:	1c5a      	adds	r2, r3, #1
 80290a6:	687b      	ldr	r3, [r7, #4]
 80290a8:	621a      	str	r2, [r3, #32]
 80290aa:	e008      	b.n	80290be <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80290ac:	687b      	ldr	r3, [r7, #4]
 80290ae:	6a1b      	ldr	r3, [r3, #32]
 80290b0:	1c59      	adds	r1, r3, #1
 80290b2:	687a      	ldr	r2, [r7, #4]
 80290b4:	6211      	str	r1, [r2, #32]
 80290b6:	781a      	ldrb	r2, [r3, #0]
 80290b8:	687b      	ldr	r3, [r7, #4]
 80290ba:	681b      	ldr	r3, [r3, #0]
 80290bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80290be:	687b      	ldr	r3, [r7, #4]
 80290c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80290c2:	b29b      	uxth	r3, r3
 80290c4:	3b01      	subs	r3, #1
 80290c6:	b29b      	uxth	r3, r3
 80290c8:	687a      	ldr	r2, [r7, #4]
 80290ca:	4619      	mov	r1, r3
 80290cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80290ce:	2b00      	cmp	r3, #0
 80290d0:	d10f      	bne.n	80290f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80290d2:	687b      	ldr	r3, [r7, #4]
 80290d4:	681b      	ldr	r3, [r3, #0]
 80290d6:	68da      	ldr	r2, [r3, #12]
 80290d8:	687b      	ldr	r3, [r7, #4]
 80290da:	681b      	ldr	r3, [r3, #0]
 80290dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80290e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80290e2:	687b      	ldr	r3, [r7, #4]
 80290e4:	681b      	ldr	r3, [r3, #0]
 80290e6:	68da      	ldr	r2, [r3, #12]
 80290e8:	687b      	ldr	r3, [r7, #4]
 80290ea:	681b      	ldr	r3, [r3, #0]
 80290ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80290f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80290f2:	2300      	movs	r3, #0
 80290f4:	e000      	b.n	80290f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80290f6:	2302      	movs	r3, #2
  }
}
 80290f8:	4618      	mov	r0, r3
 80290fa:	3714      	adds	r7, #20
 80290fc:	46bd      	mov	sp, r7
 80290fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029102:	4770      	bx	lr

08029104 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8029104:	b580      	push	{r7, lr}
 8029106:	b082      	sub	sp, #8
 8029108:	af00      	add	r7, sp, #0
 802910a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802910c:	687b      	ldr	r3, [r7, #4]
 802910e:	681b      	ldr	r3, [r3, #0]
 8029110:	68da      	ldr	r2, [r3, #12]
 8029112:	687b      	ldr	r3, [r7, #4]
 8029114:	681b      	ldr	r3, [r3, #0]
 8029116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802911a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802911c:	687b      	ldr	r3, [r7, #4]
 802911e:	2220      	movs	r2, #32
 8029120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8029124:	6878      	ldr	r0, [r7, #4]
 8029126:	f7ff ff07 	bl	8028f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802912a:	2300      	movs	r3, #0
}
 802912c:	4618      	mov	r0, r3
 802912e:	3708      	adds	r7, #8
 8029130:	46bd      	mov	sp, r7
 8029132:	bd80      	pop	{r7, pc}

08029134 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8029134:	b580      	push	{r7, lr}
 8029136:	b084      	sub	sp, #16
 8029138:	af00      	add	r7, sp, #0
 802913a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802913c:	687b      	ldr	r3, [r7, #4]
 802913e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8029142:	b2db      	uxtb	r3, r3
 8029144:	2b22      	cmp	r3, #34	; 0x22
 8029146:	d171      	bne.n	802922c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8029148:	687b      	ldr	r3, [r7, #4]
 802914a:	689b      	ldr	r3, [r3, #8]
 802914c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029150:	d123      	bne.n	802919a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8029152:	687b      	ldr	r3, [r7, #4]
 8029154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029156:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8029158:	687b      	ldr	r3, [r7, #4]
 802915a:	691b      	ldr	r3, [r3, #16]
 802915c:	2b00      	cmp	r3, #0
 802915e:	d10e      	bne.n	802917e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8029160:	687b      	ldr	r3, [r7, #4]
 8029162:	681b      	ldr	r3, [r3, #0]
 8029164:	685b      	ldr	r3, [r3, #4]
 8029166:	b29b      	uxth	r3, r3
 8029168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802916c:	b29a      	uxth	r2, r3
 802916e:	68fb      	ldr	r3, [r7, #12]
 8029170:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8029172:	687b      	ldr	r3, [r7, #4]
 8029174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029176:	1c9a      	adds	r2, r3, #2
 8029178:	687b      	ldr	r3, [r7, #4]
 802917a:	629a      	str	r2, [r3, #40]	; 0x28
 802917c:	e029      	b.n	80291d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 802917e:	687b      	ldr	r3, [r7, #4]
 8029180:	681b      	ldr	r3, [r3, #0]
 8029182:	685b      	ldr	r3, [r3, #4]
 8029184:	b29b      	uxth	r3, r3
 8029186:	b2db      	uxtb	r3, r3
 8029188:	b29a      	uxth	r2, r3
 802918a:	68fb      	ldr	r3, [r7, #12]
 802918c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 802918e:	687b      	ldr	r3, [r7, #4]
 8029190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029192:	1c5a      	adds	r2, r3, #1
 8029194:	687b      	ldr	r3, [r7, #4]
 8029196:	629a      	str	r2, [r3, #40]	; 0x28
 8029198:	e01b      	b.n	80291d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 802919a:	687b      	ldr	r3, [r7, #4]
 802919c:	691b      	ldr	r3, [r3, #16]
 802919e:	2b00      	cmp	r3, #0
 80291a0:	d10a      	bne.n	80291b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80291a2:	687b      	ldr	r3, [r7, #4]
 80291a4:	681b      	ldr	r3, [r3, #0]
 80291a6:	6858      	ldr	r0, [r3, #4]
 80291a8:	687b      	ldr	r3, [r7, #4]
 80291aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80291ac:	1c59      	adds	r1, r3, #1
 80291ae:	687a      	ldr	r2, [r7, #4]
 80291b0:	6291      	str	r1, [r2, #40]	; 0x28
 80291b2:	b2c2      	uxtb	r2, r0
 80291b4:	701a      	strb	r2, [r3, #0]
 80291b6:	e00c      	b.n	80291d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80291b8:	687b      	ldr	r3, [r7, #4]
 80291ba:	681b      	ldr	r3, [r3, #0]
 80291bc:	685b      	ldr	r3, [r3, #4]
 80291be:	b2da      	uxtb	r2, r3
 80291c0:	687b      	ldr	r3, [r7, #4]
 80291c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80291c4:	1c58      	adds	r0, r3, #1
 80291c6:	6879      	ldr	r1, [r7, #4]
 80291c8:	6288      	str	r0, [r1, #40]	; 0x28
 80291ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80291ce:	b2d2      	uxtb	r2, r2
 80291d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80291d2:	687b      	ldr	r3, [r7, #4]
 80291d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80291d6:	b29b      	uxth	r3, r3
 80291d8:	3b01      	subs	r3, #1
 80291da:	b29b      	uxth	r3, r3
 80291dc:	687a      	ldr	r2, [r7, #4]
 80291de:	4619      	mov	r1, r3
 80291e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80291e2:	2b00      	cmp	r3, #0
 80291e4:	d120      	bne.n	8029228 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80291e6:	687b      	ldr	r3, [r7, #4]
 80291e8:	681b      	ldr	r3, [r3, #0]
 80291ea:	68da      	ldr	r2, [r3, #12]
 80291ec:	687b      	ldr	r3, [r7, #4]
 80291ee:	681b      	ldr	r3, [r3, #0]
 80291f0:	f022 0220 	bic.w	r2, r2, #32
 80291f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80291f6:	687b      	ldr	r3, [r7, #4]
 80291f8:	681b      	ldr	r3, [r3, #0]
 80291fa:	68da      	ldr	r2, [r3, #12]
 80291fc:	687b      	ldr	r3, [r7, #4]
 80291fe:	681b      	ldr	r3, [r3, #0]
 8029200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8029204:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8029206:	687b      	ldr	r3, [r7, #4]
 8029208:	681b      	ldr	r3, [r3, #0]
 802920a:	695a      	ldr	r2, [r3, #20]
 802920c:	687b      	ldr	r3, [r7, #4]
 802920e:	681b      	ldr	r3, [r3, #0]
 8029210:	f022 0201 	bic.w	r2, r2, #1
 8029214:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8029216:	687b      	ldr	r3, [r7, #4]
 8029218:	2220      	movs	r2, #32
 802921a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 802921e:	6878      	ldr	r0, [r7, #4]
 8029220:	f00b f934 	bl	803448c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8029224:	2300      	movs	r3, #0
 8029226:	e002      	b.n	802922e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8029228:	2300      	movs	r3, #0
 802922a:	e000      	b.n	802922e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 802922c:	2302      	movs	r3, #2
  }
}
 802922e:	4618      	mov	r0, r3
 8029230:	3710      	adds	r7, #16
 8029232:	46bd      	mov	sp, r7
 8029234:	bd80      	pop	{r7, pc}
	...

08029238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8029238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802923c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8029240:	af00      	add	r7, sp, #0
 8029242:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8029246:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802924a:	681b      	ldr	r3, [r3, #0]
 802924c:	691b      	ldr	r3, [r3, #16]
 802924e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8029252:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029256:	68d9      	ldr	r1, [r3, #12]
 8029258:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802925c:	681a      	ldr	r2, [r3, #0]
 802925e:	ea40 0301 	orr.w	r3, r0, r1
 8029262:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8029264:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029268:	689a      	ldr	r2, [r3, #8]
 802926a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802926e:	691b      	ldr	r3, [r3, #16]
 8029270:	431a      	orrs	r2, r3
 8029272:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029276:	695b      	ldr	r3, [r3, #20]
 8029278:	431a      	orrs	r2, r3
 802927a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802927e:	69db      	ldr	r3, [r3, #28]
 8029280:	4313      	orrs	r3, r2
 8029282:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8029286:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802928a:	681b      	ldr	r3, [r3, #0]
 802928c:	68db      	ldr	r3, [r3, #12]
 802928e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8029292:	f021 010c 	bic.w	r1, r1, #12
 8029296:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802929a:	681a      	ldr	r2, [r3, #0]
 802929c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80292a0:	430b      	orrs	r3, r1
 80292a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80292a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80292a8:	681b      	ldr	r3, [r3, #0]
 80292aa:	695b      	ldr	r3, [r3, #20]
 80292ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80292b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80292b4:	6999      	ldr	r1, [r3, #24]
 80292b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80292ba:	681a      	ldr	r2, [r3, #0]
 80292bc:	ea40 0301 	orr.w	r3, r0, r1
 80292c0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80292c2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80292c6:	69db      	ldr	r3, [r3, #28]
 80292c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80292cc:	f040 824a 	bne.w	8029764 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80292d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80292d4:	681a      	ldr	r2, [r3, #0]
 80292d6:	4b96      	ldr	r3, [pc, #600]	; (8029530 <UART_SetConfig+0x2f8>)
 80292d8:	429a      	cmp	r2, r3
 80292da:	d006      	beq.n	80292ea <UART_SetConfig+0xb2>
 80292dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80292e0:	681a      	ldr	r2, [r3, #0]
 80292e2:	4b94      	ldr	r3, [pc, #592]	; (8029534 <UART_SetConfig+0x2fc>)
 80292e4:	429a      	cmp	r2, r3
 80292e6:	f040 8129 	bne.w	802953c <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80292ea:	f7fe f8d7 	bl	802749c <HAL_RCC_GetPCLK2Freq>
 80292ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80292f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80292f6:	2200      	movs	r2, #0
 80292f8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80292fc:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8029300:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8029304:	4622      	mov	r2, r4
 8029306:	462b      	mov	r3, r5
 8029308:	1891      	adds	r1, r2, r2
 802930a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 802930e:	415b      	adcs	r3, r3
 8029310:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8029314:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8029318:	4621      	mov	r1, r4
 802931a:	1851      	adds	r1, r2, r1
 802931c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8029320:	4629      	mov	r1, r5
 8029322:	414b      	adcs	r3, r1
 8029324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8029328:	f04f 0200 	mov.w	r2, #0
 802932c:	f04f 0300 	mov.w	r3, #0
 8029330:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8029334:	4649      	mov	r1, r9
 8029336:	00cb      	lsls	r3, r1, #3
 8029338:	4641      	mov	r1, r8
 802933a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802933e:	4641      	mov	r1, r8
 8029340:	00ca      	lsls	r2, r1, #3
 8029342:	4610      	mov	r0, r2
 8029344:	4619      	mov	r1, r3
 8029346:	4603      	mov	r3, r0
 8029348:	4622      	mov	r2, r4
 802934a:	189b      	adds	r3, r3, r2
 802934c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8029350:	462b      	mov	r3, r5
 8029352:	460a      	mov	r2, r1
 8029354:	eb42 0303 	adc.w	r3, r2, r3
 8029358:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802935c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029360:	685b      	ldr	r3, [r3, #4]
 8029362:	2200      	movs	r2, #0
 8029364:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8029368:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 802936c:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8029370:	460b      	mov	r3, r1
 8029372:	18db      	adds	r3, r3, r3
 8029374:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029378:	4613      	mov	r3, r2
 802937a:	eb42 0303 	adc.w	r3, r2, r3
 802937e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8029382:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8029386:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 802938a:	f7f6 ff89 	bl	80202a0 <__aeabi_uldivmod>
 802938e:	4602      	mov	r2, r0
 8029390:	460b      	mov	r3, r1
 8029392:	4b69      	ldr	r3, [pc, #420]	; (8029538 <UART_SetConfig+0x300>)
 8029394:	fba3 2302 	umull	r2, r3, r3, r2
 8029398:	095b      	lsrs	r3, r3, #5
 802939a:	011c      	lsls	r4, r3, #4
 802939c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80293a0:	2200      	movs	r2, #0
 80293a2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80293a6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80293aa:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80293ae:	4642      	mov	r2, r8
 80293b0:	464b      	mov	r3, r9
 80293b2:	1891      	adds	r1, r2, r2
 80293b4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80293b8:	415b      	adcs	r3, r3
 80293ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80293be:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80293c2:	4641      	mov	r1, r8
 80293c4:	1851      	adds	r1, r2, r1
 80293c6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80293ca:	4649      	mov	r1, r9
 80293cc:	414b      	adcs	r3, r1
 80293ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80293d2:	f04f 0200 	mov.w	r2, #0
 80293d6:	f04f 0300 	mov.w	r3, #0
 80293da:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80293de:	4659      	mov	r1, fp
 80293e0:	00cb      	lsls	r3, r1, #3
 80293e2:	4651      	mov	r1, sl
 80293e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80293e8:	4651      	mov	r1, sl
 80293ea:	00ca      	lsls	r2, r1, #3
 80293ec:	4610      	mov	r0, r2
 80293ee:	4619      	mov	r1, r3
 80293f0:	4603      	mov	r3, r0
 80293f2:	4642      	mov	r2, r8
 80293f4:	189b      	adds	r3, r3, r2
 80293f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80293fa:	464b      	mov	r3, r9
 80293fc:	460a      	mov	r2, r1
 80293fe:	eb42 0303 	adc.w	r3, r2, r3
 8029402:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8029406:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802940a:	685b      	ldr	r3, [r3, #4]
 802940c:	2200      	movs	r2, #0
 802940e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8029412:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8029416:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 802941a:	460b      	mov	r3, r1
 802941c:	18db      	adds	r3, r3, r3
 802941e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8029422:	4613      	mov	r3, r2
 8029424:	eb42 0303 	adc.w	r3, r2, r3
 8029428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802942c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8029430:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8029434:	f7f6 ff34 	bl	80202a0 <__aeabi_uldivmod>
 8029438:	4602      	mov	r2, r0
 802943a:	460b      	mov	r3, r1
 802943c:	4611      	mov	r1, r2
 802943e:	4b3e      	ldr	r3, [pc, #248]	; (8029538 <UART_SetConfig+0x300>)
 8029440:	fba3 2301 	umull	r2, r3, r3, r1
 8029444:	095b      	lsrs	r3, r3, #5
 8029446:	2264      	movs	r2, #100	; 0x64
 8029448:	fb02 f303 	mul.w	r3, r2, r3
 802944c:	1acb      	subs	r3, r1, r3
 802944e:	00db      	lsls	r3, r3, #3
 8029450:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8029454:	4b38      	ldr	r3, [pc, #224]	; (8029538 <UART_SetConfig+0x300>)
 8029456:	fba3 2302 	umull	r2, r3, r3, r2
 802945a:	095b      	lsrs	r3, r3, #5
 802945c:	005b      	lsls	r3, r3, #1
 802945e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8029462:	441c      	add	r4, r3
 8029464:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8029468:	2200      	movs	r2, #0
 802946a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 802946e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8029472:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8029476:	4642      	mov	r2, r8
 8029478:	464b      	mov	r3, r9
 802947a:	1891      	adds	r1, r2, r2
 802947c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8029480:	415b      	adcs	r3, r3
 8029482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8029486:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 802948a:	4641      	mov	r1, r8
 802948c:	1851      	adds	r1, r2, r1
 802948e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8029492:	4649      	mov	r1, r9
 8029494:	414b      	adcs	r3, r1
 8029496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802949a:	f04f 0200 	mov.w	r2, #0
 802949e:	f04f 0300 	mov.w	r3, #0
 80294a2:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80294a6:	4659      	mov	r1, fp
 80294a8:	00cb      	lsls	r3, r1, #3
 80294aa:	4651      	mov	r1, sl
 80294ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80294b0:	4651      	mov	r1, sl
 80294b2:	00ca      	lsls	r2, r1, #3
 80294b4:	4610      	mov	r0, r2
 80294b6:	4619      	mov	r1, r3
 80294b8:	4603      	mov	r3, r0
 80294ba:	4642      	mov	r2, r8
 80294bc:	189b      	adds	r3, r3, r2
 80294be:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80294c2:	464b      	mov	r3, r9
 80294c4:	460a      	mov	r2, r1
 80294c6:	eb42 0303 	adc.w	r3, r2, r3
 80294ca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80294ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80294d2:	685b      	ldr	r3, [r3, #4]
 80294d4:	2200      	movs	r2, #0
 80294d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80294da:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80294de:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80294e2:	460b      	mov	r3, r1
 80294e4:	18db      	adds	r3, r3, r3
 80294e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80294ea:	4613      	mov	r3, r2
 80294ec:	eb42 0303 	adc.w	r3, r2, r3
 80294f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80294f4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80294f8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80294fc:	f7f6 fed0 	bl	80202a0 <__aeabi_uldivmod>
 8029500:	4602      	mov	r2, r0
 8029502:	460b      	mov	r3, r1
 8029504:	4b0c      	ldr	r3, [pc, #48]	; (8029538 <UART_SetConfig+0x300>)
 8029506:	fba3 1302 	umull	r1, r3, r3, r2
 802950a:	095b      	lsrs	r3, r3, #5
 802950c:	2164      	movs	r1, #100	; 0x64
 802950e:	fb01 f303 	mul.w	r3, r1, r3
 8029512:	1ad3      	subs	r3, r2, r3
 8029514:	00db      	lsls	r3, r3, #3
 8029516:	3332      	adds	r3, #50	; 0x32
 8029518:	4a07      	ldr	r2, [pc, #28]	; (8029538 <UART_SetConfig+0x300>)
 802951a:	fba2 2303 	umull	r2, r3, r2, r3
 802951e:	095b      	lsrs	r3, r3, #5
 8029520:	f003 0207 	and.w	r2, r3, #7
 8029524:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029528:	681b      	ldr	r3, [r3, #0]
 802952a:	4422      	add	r2, r4
 802952c:	609a      	str	r2, [r3, #8]
 802952e:	e349      	b.n	8029bc4 <UART_SetConfig+0x98c>
 8029530:	40011000 	.word	0x40011000
 8029534:	40011400 	.word	0x40011400
 8029538:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802953c:	f7fd ff9a 	bl	8027474 <HAL_RCC_GetPCLK1Freq>
 8029540:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8029544:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8029548:	2200      	movs	r2, #0
 802954a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 802954e:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8029552:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8029556:	4622      	mov	r2, r4
 8029558:	462b      	mov	r3, r5
 802955a:	1891      	adds	r1, r2, r2
 802955c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8029560:	415b      	adcs	r3, r3
 8029562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8029566:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 802956a:	4621      	mov	r1, r4
 802956c:	eb12 0a01 	adds.w	sl, r2, r1
 8029570:	4629      	mov	r1, r5
 8029572:	eb43 0b01 	adc.w	fp, r3, r1
 8029576:	f04f 0200 	mov.w	r2, #0
 802957a:	f04f 0300 	mov.w	r3, #0
 802957e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8029582:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8029586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802958a:	4692      	mov	sl, r2
 802958c:	469b      	mov	fp, r3
 802958e:	4623      	mov	r3, r4
 8029590:	eb1a 0303 	adds.w	r3, sl, r3
 8029594:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8029598:	462b      	mov	r3, r5
 802959a:	eb4b 0303 	adc.w	r3, fp, r3
 802959e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80295a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80295a6:	685b      	ldr	r3, [r3, #4]
 80295a8:	2200      	movs	r2, #0
 80295aa:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80295ae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80295b2:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80295b6:	460b      	mov	r3, r1
 80295b8:	18db      	adds	r3, r3, r3
 80295ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80295be:	4613      	mov	r3, r2
 80295c0:	eb42 0303 	adc.w	r3, r2, r3
 80295c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80295c8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80295cc:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80295d0:	f7f6 fe66 	bl	80202a0 <__aeabi_uldivmod>
 80295d4:	4602      	mov	r2, r0
 80295d6:	460b      	mov	r3, r1
 80295d8:	4b61      	ldr	r3, [pc, #388]	; (8029760 <UART_SetConfig+0x528>)
 80295da:	fba3 2302 	umull	r2, r3, r3, r2
 80295de:	095b      	lsrs	r3, r3, #5
 80295e0:	011c      	lsls	r4, r3, #4
 80295e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80295e6:	2200      	movs	r2, #0
 80295e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80295ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80295f0:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80295f4:	4642      	mov	r2, r8
 80295f6:	464b      	mov	r3, r9
 80295f8:	1891      	adds	r1, r2, r2
 80295fa:	67b9      	str	r1, [r7, #120]	; 0x78
 80295fc:	415b      	adcs	r3, r3
 80295fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8029600:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8029604:	4641      	mov	r1, r8
 8029606:	1851      	adds	r1, r2, r1
 8029608:	6739      	str	r1, [r7, #112]	; 0x70
 802960a:	4649      	mov	r1, r9
 802960c:	414b      	adcs	r3, r1
 802960e:	677b      	str	r3, [r7, #116]	; 0x74
 8029610:	f04f 0200 	mov.w	r2, #0
 8029614:	f04f 0300 	mov.w	r3, #0
 8029618:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 802961c:	4659      	mov	r1, fp
 802961e:	00cb      	lsls	r3, r1, #3
 8029620:	4651      	mov	r1, sl
 8029622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029626:	4651      	mov	r1, sl
 8029628:	00ca      	lsls	r2, r1, #3
 802962a:	4610      	mov	r0, r2
 802962c:	4619      	mov	r1, r3
 802962e:	4603      	mov	r3, r0
 8029630:	4642      	mov	r2, r8
 8029632:	189b      	adds	r3, r3, r2
 8029634:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8029638:	464b      	mov	r3, r9
 802963a:	460a      	mov	r2, r1
 802963c:	eb42 0303 	adc.w	r3, r2, r3
 8029640:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8029644:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029648:	685b      	ldr	r3, [r3, #4]
 802964a:	2200      	movs	r2, #0
 802964c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8029650:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8029654:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8029658:	460b      	mov	r3, r1
 802965a:	18db      	adds	r3, r3, r3
 802965c:	66bb      	str	r3, [r7, #104]	; 0x68
 802965e:	4613      	mov	r3, r2
 8029660:	eb42 0303 	adc.w	r3, r2, r3
 8029664:	66fb      	str	r3, [r7, #108]	; 0x6c
 8029666:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 802966a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 802966e:	f7f6 fe17 	bl	80202a0 <__aeabi_uldivmod>
 8029672:	4602      	mov	r2, r0
 8029674:	460b      	mov	r3, r1
 8029676:	4611      	mov	r1, r2
 8029678:	4b39      	ldr	r3, [pc, #228]	; (8029760 <UART_SetConfig+0x528>)
 802967a:	fba3 2301 	umull	r2, r3, r3, r1
 802967e:	095b      	lsrs	r3, r3, #5
 8029680:	2264      	movs	r2, #100	; 0x64
 8029682:	fb02 f303 	mul.w	r3, r2, r3
 8029686:	1acb      	subs	r3, r1, r3
 8029688:	00db      	lsls	r3, r3, #3
 802968a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802968e:	4b34      	ldr	r3, [pc, #208]	; (8029760 <UART_SetConfig+0x528>)
 8029690:	fba3 2302 	umull	r2, r3, r3, r2
 8029694:	095b      	lsrs	r3, r3, #5
 8029696:	005b      	lsls	r3, r3, #1
 8029698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802969c:	441c      	add	r4, r3
 802969e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80296a2:	2200      	movs	r2, #0
 80296a4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80296a8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80296ac:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80296b0:	4642      	mov	r2, r8
 80296b2:	464b      	mov	r3, r9
 80296b4:	1891      	adds	r1, r2, r2
 80296b6:	6639      	str	r1, [r7, #96]	; 0x60
 80296b8:	415b      	adcs	r3, r3
 80296ba:	667b      	str	r3, [r7, #100]	; 0x64
 80296bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80296c0:	4641      	mov	r1, r8
 80296c2:	1851      	adds	r1, r2, r1
 80296c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80296c6:	4649      	mov	r1, r9
 80296c8:	414b      	adcs	r3, r1
 80296ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80296cc:	f04f 0200 	mov.w	r2, #0
 80296d0:	f04f 0300 	mov.w	r3, #0
 80296d4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80296d8:	4659      	mov	r1, fp
 80296da:	00cb      	lsls	r3, r1, #3
 80296dc:	4651      	mov	r1, sl
 80296de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80296e2:	4651      	mov	r1, sl
 80296e4:	00ca      	lsls	r2, r1, #3
 80296e6:	4610      	mov	r0, r2
 80296e8:	4619      	mov	r1, r3
 80296ea:	4603      	mov	r3, r0
 80296ec:	4642      	mov	r2, r8
 80296ee:	189b      	adds	r3, r3, r2
 80296f0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80296f4:	464b      	mov	r3, r9
 80296f6:	460a      	mov	r2, r1
 80296f8:	eb42 0303 	adc.w	r3, r2, r3
 80296fc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8029700:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029704:	685b      	ldr	r3, [r3, #4]
 8029706:	2200      	movs	r2, #0
 8029708:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 802970c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8029710:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8029714:	460b      	mov	r3, r1
 8029716:	18db      	adds	r3, r3, r3
 8029718:	653b      	str	r3, [r7, #80]	; 0x50
 802971a:	4613      	mov	r3, r2
 802971c:	eb42 0303 	adc.w	r3, r2, r3
 8029720:	657b      	str	r3, [r7, #84]	; 0x54
 8029722:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8029726:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 802972a:	f7f6 fdb9 	bl	80202a0 <__aeabi_uldivmod>
 802972e:	4602      	mov	r2, r0
 8029730:	460b      	mov	r3, r1
 8029732:	4b0b      	ldr	r3, [pc, #44]	; (8029760 <UART_SetConfig+0x528>)
 8029734:	fba3 1302 	umull	r1, r3, r3, r2
 8029738:	095b      	lsrs	r3, r3, #5
 802973a:	2164      	movs	r1, #100	; 0x64
 802973c:	fb01 f303 	mul.w	r3, r1, r3
 8029740:	1ad3      	subs	r3, r2, r3
 8029742:	00db      	lsls	r3, r3, #3
 8029744:	3332      	adds	r3, #50	; 0x32
 8029746:	4a06      	ldr	r2, [pc, #24]	; (8029760 <UART_SetConfig+0x528>)
 8029748:	fba2 2303 	umull	r2, r3, r2, r3
 802974c:	095b      	lsrs	r3, r3, #5
 802974e:	f003 0207 	and.w	r2, r3, #7
 8029752:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029756:	681b      	ldr	r3, [r3, #0]
 8029758:	4422      	add	r2, r4
 802975a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 802975c:	e232      	b.n	8029bc4 <UART_SetConfig+0x98c>
 802975e:	bf00      	nop
 8029760:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8029764:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029768:	681a      	ldr	r2, [r3, #0]
 802976a:	4b8d      	ldr	r3, [pc, #564]	; (80299a0 <UART_SetConfig+0x768>)
 802976c:	429a      	cmp	r2, r3
 802976e:	d006      	beq.n	802977e <UART_SetConfig+0x546>
 8029770:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029774:	681a      	ldr	r2, [r3, #0]
 8029776:	4b8b      	ldr	r3, [pc, #556]	; (80299a4 <UART_SetConfig+0x76c>)
 8029778:	429a      	cmp	r2, r3
 802977a:	f040 8117 	bne.w	80299ac <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 802977e:	f7fd fe8d 	bl	802749c <HAL_RCC_GetPCLK2Freq>
 8029782:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8029786:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 802978a:	2200      	movs	r2, #0
 802978c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8029790:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8029794:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8029798:	4622      	mov	r2, r4
 802979a:	462b      	mov	r3, r5
 802979c:	1891      	adds	r1, r2, r2
 802979e:	64b9      	str	r1, [r7, #72]	; 0x48
 80297a0:	415b      	adcs	r3, r3
 80297a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80297a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80297a8:	4621      	mov	r1, r4
 80297aa:	eb12 0801 	adds.w	r8, r2, r1
 80297ae:	4629      	mov	r1, r5
 80297b0:	eb43 0901 	adc.w	r9, r3, r1
 80297b4:	f04f 0200 	mov.w	r2, #0
 80297b8:	f04f 0300 	mov.w	r3, #0
 80297bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80297c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80297c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80297c8:	4690      	mov	r8, r2
 80297ca:	4699      	mov	r9, r3
 80297cc:	4623      	mov	r3, r4
 80297ce:	eb18 0303 	adds.w	r3, r8, r3
 80297d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80297d6:	462b      	mov	r3, r5
 80297d8:	eb49 0303 	adc.w	r3, r9, r3
 80297dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80297e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80297e4:	685b      	ldr	r3, [r3, #4]
 80297e6:	2200      	movs	r2, #0
 80297e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80297ec:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80297f0:	f04f 0200 	mov.w	r2, #0
 80297f4:	f04f 0300 	mov.w	r3, #0
 80297f8:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80297fc:	4629      	mov	r1, r5
 80297fe:	008b      	lsls	r3, r1, #2
 8029800:	4621      	mov	r1, r4
 8029802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029806:	4621      	mov	r1, r4
 8029808:	008a      	lsls	r2, r1, #2
 802980a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 802980e:	f7f6 fd47 	bl	80202a0 <__aeabi_uldivmod>
 8029812:	4602      	mov	r2, r0
 8029814:	460b      	mov	r3, r1
 8029816:	4b64      	ldr	r3, [pc, #400]	; (80299a8 <UART_SetConfig+0x770>)
 8029818:	fba3 2302 	umull	r2, r3, r3, r2
 802981c:	095b      	lsrs	r3, r3, #5
 802981e:	011c      	lsls	r4, r3, #4
 8029820:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8029824:	2200      	movs	r2, #0
 8029826:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 802982a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 802982e:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8029832:	4642      	mov	r2, r8
 8029834:	464b      	mov	r3, r9
 8029836:	1891      	adds	r1, r2, r2
 8029838:	6439      	str	r1, [r7, #64]	; 0x40
 802983a:	415b      	adcs	r3, r3
 802983c:	647b      	str	r3, [r7, #68]	; 0x44
 802983e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8029842:	4641      	mov	r1, r8
 8029844:	1851      	adds	r1, r2, r1
 8029846:	63b9      	str	r1, [r7, #56]	; 0x38
 8029848:	4649      	mov	r1, r9
 802984a:	414b      	adcs	r3, r1
 802984c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802984e:	f04f 0200 	mov.w	r2, #0
 8029852:	f04f 0300 	mov.w	r3, #0
 8029856:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 802985a:	4659      	mov	r1, fp
 802985c:	00cb      	lsls	r3, r1, #3
 802985e:	4651      	mov	r1, sl
 8029860:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029864:	4651      	mov	r1, sl
 8029866:	00ca      	lsls	r2, r1, #3
 8029868:	4610      	mov	r0, r2
 802986a:	4619      	mov	r1, r3
 802986c:	4603      	mov	r3, r0
 802986e:	4642      	mov	r2, r8
 8029870:	189b      	adds	r3, r3, r2
 8029872:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8029876:	464b      	mov	r3, r9
 8029878:	460a      	mov	r2, r1
 802987a:	eb42 0303 	adc.w	r3, r2, r3
 802987e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8029882:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029886:	685b      	ldr	r3, [r3, #4]
 8029888:	2200      	movs	r2, #0
 802988a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 802988e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8029892:	f04f 0200 	mov.w	r2, #0
 8029896:	f04f 0300 	mov.w	r3, #0
 802989a:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 802989e:	4649      	mov	r1, r9
 80298a0:	008b      	lsls	r3, r1, #2
 80298a2:	4641      	mov	r1, r8
 80298a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80298a8:	4641      	mov	r1, r8
 80298aa:	008a      	lsls	r2, r1, #2
 80298ac:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80298b0:	f7f6 fcf6 	bl	80202a0 <__aeabi_uldivmod>
 80298b4:	4602      	mov	r2, r0
 80298b6:	460b      	mov	r3, r1
 80298b8:	4b3b      	ldr	r3, [pc, #236]	; (80299a8 <UART_SetConfig+0x770>)
 80298ba:	fba3 1302 	umull	r1, r3, r3, r2
 80298be:	095b      	lsrs	r3, r3, #5
 80298c0:	2164      	movs	r1, #100	; 0x64
 80298c2:	fb01 f303 	mul.w	r3, r1, r3
 80298c6:	1ad3      	subs	r3, r2, r3
 80298c8:	011b      	lsls	r3, r3, #4
 80298ca:	3332      	adds	r3, #50	; 0x32
 80298cc:	4a36      	ldr	r2, [pc, #216]	; (80299a8 <UART_SetConfig+0x770>)
 80298ce:	fba2 2303 	umull	r2, r3, r2, r3
 80298d2:	095b      	lsrs	r3, r3, #5
 80298d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80298d8:	441c      	add	r4, r3
 80298da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80298de:	2200      	movs	r2, #0
 80298e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80298e4:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80298e8:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80298ec:	4642      	mov	r2, r8
 80298ee:	464b      	mov	r3, r9
 80298f0:	1891      	adds	r1, r2, r2
 80298f2:	6339      	str	r1, [r7, #48]	; 0x30
 80298f4:	415b      	adcs	r3, r3
 80298f6:	637b      	str	r3, [r7, #52]	; 0x34
 80298f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80298fc:	4641      	mov	r1, r8
 80298fe:	1851      	adds	r1, r2, r1
 8029900:	62b9      	str	r1, [r7, #40]	; 0x28
 8029902:	4649      	mov	r1, r9
 8029904:	414b      	adcs	r3, r1
 8029906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029908:	f04f 0200 	mov.w	r2, #0
 802990c:	f04f 0300 	mov.w	r3, #0
 8029910:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8029914:	4659      	mov	r1, fp
 8029916:	00cb      	lsls	r3, r1, #3
 8029918:	4651      	mov	r1, sl
 802991a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802991e:	4651      	mov	r1, sl
 8029920:	00ca      	lsls	r2, r1, #3
 8029922:	4610      	mov	r0, r2
 8029924:	4619      	mov	r1, r3
 8029926:	4603      	mov	r3, r0
 8029928:	4642      	mov	r2, r8
 802992a:	189b      	adds	r3, r3, r2
 802992c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8029930:	464b      	mov	r3, r9
 8029932:	460a      	mov	r2, r1
 8029934:	eb42 0303 	adc.w	r3, r2, r3
 8029938:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 802993c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029940:	685b      	ldr	r3, [r3, #4]
 8029942:	2200      	movs	r2, #0
 8029944:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8029948:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 802994c:	f04f 0200 	mov.w	r2, #0
 8029950:	f04f 0300 	mov.w	r3, #0
 8029954:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8029958:	4649      	mov	r1, r9
 802995a:	008b      	lsls	r3, r1, #2
 802995c:	4641      	mov	r1, r8
 802995e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029962:	4641      	mov	r1, r8
 8029964:	008a      	lsls	r2, r1, #2
 8029966:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 802996a:	f7f6 fc99 	bl	80202a0 <__aeabi_uldivmod>
 802996e:	4602      	mov	r2, r0
 8029970:	460b      	mov	r3, r1
 8029972:	4b0d      	ldr	r3, [pc, #52]	; (80299a8 <UART_SetConfig+0x770>)
 8029974:	fba3 1302 	umull	r1, r3, r3, r2
 8029978:	095b      	lsrs	r3, r3, #5
 802997a:	2164      	movs	r1, #100	; 0x64
 802997c:	fb01 f303 	mul.w	r3, r1, r3
 8029980:	1ad3      	subs	r3, r2, r3
 8029982:	011b      	lsls	r3, r3, #4
 8029984:	3332      	adds	r3, #50	; 0x32
 8029986:	4a08      	ldr	r2, [pc, #32]	; (80299a8 <UART_SetConfig+0x770>)
 8029988:	fba2 2303 	umull	r2, r3, r2, r3
 802998c:	095b      	lsrs	r3, r3, #5
 802998e:	f003 020f 	and.w	r2, r3, #15
 8029992:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029996:	681b      	ldr	r3, [r3, #0]
 8029998:	4422      	add	r2, r4
 802999a:	609a      	str	r2, [r3, #8]
 802999c:	e112      	b.n	8029bc4 <UART_SetConfig+0x98c>
 802999e:	bf00      	nop
 80299a0:	40011000 	.word	0x40011000
 80299a4:	40011400 	.word	0x40011400
 80299a8:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80299ac:	f7fd fd62 	bl	8027474 <HAL_RCC_GetPCLK1Freq>
 80299b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80299b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80299b8:	2200      	movs	r2, #0
 80299ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80299be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80299c2:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80299c6:	4642      	mov	r2, r8
 80299c8:	464b      	mov	r3, r9
 80299ca:	1891      	adds	r1, r2, r2
 80299cc:	6239      	str	r1, [r7, #32]
 80299ce:	415b      	adcs	r3, r3
 80299d0:	627b      	str	r3, [r7, #36]	; 0x24
 80299d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80299d6:	4641      	mov	r1, r8
 80299d8:	1854      	adds	r4, r2, r1
 80299da:	4649      	mov	r1, r9
 80299dc:	eb43 0501 	adc.w	r5, r3, r1
 80299e0:	f04f 0200 	mov.w	r2, #0
 80299e4:	f04f 0300 	mov.w	r3, #0
 80299e8:	00eb      	lsls	r3, r5, #3
 80299ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80299ee:	00e2      	lsls	r2, r4, #3
 80299f0:	4614      	mov	r4, r2
 80299f2:	461d      	mov	r5, r3
 80299f4:	4643      	mov	r3, r8
 80299f6:	18e3      	adds	r3, r4, r3
 80299f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80299fc:	464b      	mov	r3, r9
 80299fe:	eb45 0303 	adc.w	r3, r5, r3
 8029a02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8029a06:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029a0a:	685b      	ldr	r3, [r3, #4]
 8029a0c:	2200      	movs	r2, #0
 8029a0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8029a12:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8029a16:	f04f 0200 	mov.w	r2, #0
 8029a1a:	f04f 0300 	mov.w	r3, #0
 8029a1e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8029a22:	4629      	mov	r1, r5
 8029a24:	008b      	lsls	r3, r1, #2
 8029a26:	4621      	mov	r1, r4
 8029a28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029a2c:	4621      	mov	r1, r4
 8029a2e:	008a      	lsls	r2, r1, #2
 8029a30:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8029a34:	f7f6 fc34 	bl	80202a0 <__aeabi_uldivmod>
 8029a38:	4602      	mov	r2, r0
 8029a3a:	460b      	mov	r3, r1
 8029a3c:	4b64      	ldr	r3, [pc, #400]	; (8029bd0 <UART_SetConfig+0x998>)
 8029a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8029a42:	095b      	lsrs	r3, r3, #5
 8029a44:	011c      	lsls	r4, r3, #4
 8029a46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8029a4a:	2200      	movs	r2, #0
 8029a4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8029a50:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8029a54:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8029a58:	4642      	mov	r2, r8
 8029a5a:	464b      	mov	r3, r9
 8029a5c:	1891      	adds	r1, r2, r2
 8029a5e:	61b9      	str	r1, [r7, #24]
 8029a60:	415b      	adcs	r3, r3
 8029a62:	61fb      	str	r3, [r7, #28]
 8029a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8029a68:	4641      	mov	r1, r8
 8029a6a:	1851      	adds	r1, r2, r1
 8029a6c:	6139      	str	r1, [r7, #16]
 8029a6e:	4649      	mov	r1, r9
 8029a70:	414b      	adcs	r3, r1
 8029a72:	617b      	str	r3, [r7, #20]
 8029a74:	f04f 0200 	mov.w	r2, #0
 8029a78:	f04f 0300 	mov.w	r3, #0
 8029a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8029a80:	4659      	mov	r1, fp
 8029a82:	00cb      	lsls	r3, r1, #3
 8029a84:	4651      	mov	r1, sl
 8029a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029a8a:	4651      	mov	r1, sl
 8029a8c:	00ca      	lsls	r2, r1, #3
 8029a8e:	4610      	mov	r0, r2
 8029a90:	4619      	mov	r1, r3
 8029a92:	4603      	mov	r3, r0
 8029a94:	4642      	mov	r2, r8
 8029a96:	189b      	adds	r3, r3, r2
 8029a98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8029a9c:	464b      	mov	r3, r9
 8029a9e:	460a      	mov	r2, r1
 8029aa0:	eb42 0303 	adc.w	r3, r2, r3
 8029aa4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8029aa8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029aac:	685b      	ldr	r3, [r3, #4]
 8029aae:	2200      	movs	r2, #0
 8029ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8029ab4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8029ab8:	f04f 0200 	mov.w	r2, #0
 8029abc:	f04f 0300 	mov.w	r3, #0
 8029ac0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8029ac4:	4649      	mov	r1, r9
 8029ac6:	008b      	lsls	r3, r1, #2
 8029ac8:	4641      	mov	r1, r8
 8029aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029ace:	4641      	mov	r1, r8
 8029ad0:	008a      	lsls	r2, r1, #2
 8029ad2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8029ad6:	f7f6 fbe3 	bl	80202a0 <__aeabi_uldivmod>
 8029ada:	4602      	mov	r2, r0
 8029adc:	460b      	mov	r3, r1
 8029ade:	4b3c      	ldr	r3, [pc, #240]	; (8029bd0 <UART_SetConfig+0x998>)
 8029ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8029ae4:	095b      	lsrs	r3, r3, #5
 8029ae6:	2164      	movs	r1, #100	; 0x64
 8029ae8:	fb01 f303 	mul.w	r3, r1, r3
 8029aec:	1ad3      	subs	r3, r2, r3
 8029aee:	011b      	lsls	r3, r3, #4
 8029af0:	3332      	adds	r3, #50	; 0x32
 8029af2:	4a37      	ldr	r2, [pc, #220]	; (8029bd0 <UART_SetConfig+0x998>)
 8029af4:	fba2 2303 	umull	r2, r3, r2, r3
 8029af8:	095b      	lsrs	r3, r3, #5
 8029afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029afe:	441c      	add	r4, r3
 8029b00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8029b04:	2200      	movs	r2, #0
 8029b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8029b0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8029b0e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8029b12:	4642      	mov	r2, r8
 8029b14:	464b      	mov	r3, r9
 8029b16:	1891      	adds	r1, r2, r2
 8029b18:	60b9      	str	r1, [r7, #8]
 8029b1a:	415b      	adcs	r3, r3
 8029b1c:	60fb      	str	r3, [r7, #12]
 8029b1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8029b22:	4641      	mov	r1, r8
 8029b24:	1851      	adds	r1, r2, r1
 8029b26:	6039      	str	r1, [r7, #0]
 8029b28:	4649      	mov	r1, r9
 8029b2a:	414b      	adcs	r3, r1
 8029b2c:	607b      	str	r3, [r7, #4]
 8029b2e:	f04f 0200 	mov.w	r2, #0
 8029b32:	f04f 0300 	mov.w	r3, #0
 8029b36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8029b3a:	4659      	mov	r1, fp
 8029b3c:	00cb      	lsls	r3, r1, #3
 8029b3e:	4651      	mov	r1, sl
 8029b40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029b44:	4651      	mov	r1, sl
 8029b46:	00ca      	lsls	r2, r1, #3
 8029b48:	4610      	mov	r0, r2
 8029b4a:	4619      	mov	r1, r3
 8029b4c:	4603      	mov	r3, r0
 8029b4e:	4642      	mov	r2, r8
 8029b50:	189b      	adds	r3, r3, r2
 8029b52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8029b56:	464b      	mov	r3, r9
 8029b58:	460a      	mov	r2, r1
 8029b5a:	eb42 0303 	adc.w	r3, r2, r3
 8029b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8029b62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029b66:	685b      	ldr	r3, [r3, #4]
 8029b68:	2200      	movs	r2, #0
 8029b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8029b6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8029b72:	f04f 0200 	mov.w	r2, #0
 8029b76:	f04f 0300 	mov.w	r3, #0
 8029b7a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8029b7e:	4649      	mov	r1, r9
 8029b80:	008b      	lsls	r3, r1, #2
 8029b82:	4641      	mov	r1, r8
 8029b84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029b88:	4641      	mov	r1, r8
 8029b8a:	008a      	lsls	r2, r1, #2
 8029b8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8029b90:	f7f6 fb86 	bl	80202a0 <__aeabi_uldivmod>
 8029b94:	4602      	mov	r2, r0
 8029b96:	460b      	mov	r3, r1
 8029b98:	4b0d      	ldr	r3, [pc, #52]	; (8029bd0 <UART_SetConfig+0x998>)
 8029b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8029b9e:	095b      	lsrs	r3, r3, #5
 8029ba0:	2164      	movs	r1, #100	; 0x64
 8029ba2:	fb01 f303 	mul.w	r3, r1, r3
 8029ba6:	1ad3      	subs	r3, r2, r3
 8029ba8:	011b      	lsls	r3, r3, #4
 8029baa:	3332      	adds	r3, #50	; 0x32
 8029bac:	4a08      	ldr	r2, [pc, #32]	; (8029bd0 <UART_SetConfig+0x998>)
 8029bae:	fba2 2303 	umull	r2, r3, r2, r3
 8029bb2:	095b      	lsrs	r3, r3, #5
 8029bb4:	f003 020f 	and.w	r2, r3, #15
 8029bb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8029bbc:	681b      	ldr	r3, [r3, #0]
 8029bbe:	4422      	add	r2, r4
 8029bc0:	609a      	str	r2, [r3, #8]
}
 8029bc2:	e7ff      	b.n	8029bc4 <UART_SetConfig+0x98c>
 8029bc4:	bf00      	nop
 8029bc6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8029bca:	46bd      	mov	sp, r7
 8029bcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8029bd0:	51eb851f 	.word	0x51eb851f

08029bd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8029bd4:	b084      	sub	sp, #16
 8029bd6:	b580      	push	{r7, lr}
 8029bd8:	b084      	sub	sp, #16
 8029bda:	af00      	add	r7, sp, #0
 8029bdc:	6078      	str	r0, [r7, #4]
 8029bde:	f107 001c 	add.w	r0, r7, #28
 8029be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8029be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029be8:	2b01      	cmp	r3, #1
 8029bea:	d122      	bne.n	8029c32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8029bec:	687b      	ldr	r3, [r7, #4]
 8029bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029bf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029bf4:	687b      	ldr	r3, [r7, #4]
 8029bf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8029bf8:	687b      	ldr	r3, [r7, #4]
 8029bfa:	68db      	ldr	r3, [r3, #12]
 8029bfc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8029c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029c04:	687a      	ldr	r2, [r7, #4]
 8029c06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8029c08:	687b      	ldr	r3, [r7, #4]
 8029c0a:	68db      	ldr	r3, [r3, #12]
 8029c0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8029c10:	687b      	ldr	r3, [r7, #4]
 8029c12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8029c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029c16:	2b01      	cmp	r3, #1
 8029c18:	d105      	bne.n	8029c26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8029c1a:	687b      	ldr	r3, [r7, #4]
 8029c1c:	68db      	ldr	r3, [r3, #12]
 8029c1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8029c22:	687b      	ldr	r3, [r7, #4]
 8029c24:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8029c26:	6878      	ldr	r0, [r7, #4]
 8029c28:	f001 fac6 	bl	802b1b8 <USB_CoreReset>
 8029c2c:	4603      	mov	r3, r0
 8029c2e:	73fb      	strb	r3, [r7, #15]
 8029c30:	e01a      	b.n	8029c68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8029c32:	687b      	ldr	r3, [r7, #4]
 8029c34:	68db      	ldr	r3, [r3, #12]
 8029c36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8029c3a:	687b      	ldr	r3, [r7, #4]
 8029c3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8029c3e:	6878      	ldr	r0, [r7, #4]
 8029c40:	f001 faba 	bl	802b1b8 <USB_CoreReset>
 8029c44:	4603      	mov	r3, r0
 8029c46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8029c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029c4a:	2b00      	cmp	r3, #0
 8029c4c:	d106      	bne.n	8029c5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8029c4e:	687b      	ldr	r3, [r7, #4]
 8029c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029c52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8029c56:	687b      	ldr	r3, [r7, #4]
 8029c58:	639a      	str	r2, [r3, #56]	; 0x38
 8029c5a:	e005      	b.n	8029c68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8029c5c:	687b      	ldr	r3, [r7, #4]
 8029c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029c60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029c64:	687b      	ldr	r3, [r7, #4]
 8029c66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8029c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029c6a:	2b01      	cmp	r3, #1
 8029c6c:	d10b      	bne.n	8029c86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8029c6e:	687b      	ldr	r3, [r7, #4]
 8029c70:	689b      	ldr	r3, [r3, #8]
 8029c72:	f043 0206 	orr.w	r2, r3, #6
 8029c76:	687b      	ldr	r3, [r7, #4]
 8029c78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8029c7a:	687b      	ldr	r3, [r7, #4]
 8029c7c:	689b      	ldr	r3, [r3, #8]
 8029c7e:	f043 0220 	orr.w	r2, r3, #32
 8029c82:	687b      	ldr	r3, [r7, #4]
 8029c84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8029c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8029c88:	4618      	mov	r0, r3
 8029c8a:	3710      	adds	r7, #16
 8029c8c:	46bd      	mov	sp, r7
 8029c8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8029c92:	b004      	add	sp, #16
 8029c94:	4770      	bx	lr
	...

08029c98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8029c98:	b480      	push	{r7}
 8029c9a:	b087      	sub	sp, #28
 8029c9c:	af00      	add	r7, sp, #0
 8029c9e:	60f8      	str	r0, [r7, #12]
 8029ca0:	60b9      	str	r1, [r7, #8]
 8029ca2:	4613      	mov	r3, r2
 8029ca4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8029ca6:	79fb      	ldrb	r3, [r7, #7]
 8029ca8:	2b02      	cmp	r3, #2
 8029caa:	d165      	bne.n	8029d78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8029cac:	68bb      	ldr	r3, [r7, #8]
 8029cae:	4a41      	ldr	r2, [pc, #260]	; (8029db4 <USB_SetTurnaroundTime+0x11c>)
 8029cb0:	4293      	cmp	r3, r2
 8029cb2:	d906      	bls.n	8029cc2 <USB_SetTurnaroundTime+0x2a>
 8029cb4:	68bb      	ldr	r3, [r7, #8]
 8029cb6:	4a40      	ldr	r2, [pc, #256]	; (8029db8 <USB_SetTurnaroundTime+0x120>)
 8029cb8:	4293      	cmp	r3, r2
 8029cba:	d202      	bcs.n	8029cc2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8029cbc:	230f      	movs	r3, #15
 8029cbe:	617b      	str	r3, [r7, #20]
 8029cc0:	e062      	b.n	8029d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8029cc2:	68bb      	ldr	r3, [r7, #8]
 8029cc4:	4a3c      	ldr	r2, [pc, #240]	; (8029db8 <USB_SetTurnaroundTime+0x120>)
 8029cc6:	4293      	cmp	r3, r2
 8029cc8:	d306      	bcc.n	8029cd8 <USB_SetTurnaroundTime+0x40>
 8029cca:	68bb      	ldr	r3, [r7, #8]
 8029ccc:	4a3b      	ldr	r2, [pc, #236]	; (8029dbc <USB_SetTurnaroundTime+0x124>)
 8029cce:	4293      	cmp	r3, r2
 8029cd0:	d202      	bcs.n	8029cd8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8029cd2:	230e      	movs	r3, #14
 8029cd4:	617b      	str	r3, [r7, #20]
 8029cd6:	e057      	b.n	8029d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8029cd8:	68bb      	ldr	r3, [r7, #8]
 8029cda:	4a38      	ldr	r2, [pc, #224]	; (8029dbc <USB_SetTurnaroundTime+0x124>)
 8029cdc:	4293      	cmp	r3, r2
 8029cde:	d306      	bcc.n	8029cee <USB_SetTurnaroundTime+0x56>
 8029ce0:	68bb      	ldr	r3, [r7, #8]
 8029ce2:	4a37      	ldr	r2, [pc, #220]	; (8029dc0 <USB_SetTurnaroundTime+0x128>)
 8029ce4:	4293      	cmp	r3, r2
 8029ce6:	d202      	bcs.n	8029cee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8029ce8:	230d      	movs	r3, #13
 8029cea:	617b      	str	r3, [r7, #20]
 8029cec:	e04c      	b.n	8029d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8029cee:	68bb      	ldr	r3, [r7, #8]
 8029cf0:	4a33      	ldr	r2, [pc, #204]	; (8029dc0 <USB_SetTurnaroundTime+0x128>)
 8029cf2:	4293      	cmp	r3, r2
 8029cf4:	d306      	bcc.n	8029d04 <USB_SetTurnaroundTime+0x6c>
 8029cf6:	68bb      	ldr	r3, [r7, #8]
 8029cf8:	4a32      	ldr	r2, [pc, #200]	; (8029dc4 <USB_SetTurnaroundTime+0x12c>)
 8029cfa:	4293      	cmp	r3, r2
 8029cfc:	d802      	bhi.n	8029d04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8029cfe:	230c      	movs	r3, #12
 8029d00:	617b      	str	r3, [r7, #20]
 8029d02:	e041      	b.n	8029d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8029d04:	68bb      	ldr	r3, [r7, #8]
 8029d06:	4a2f      	ldr	r2, [pc, #188]	; (8029dc4 <USB_SetTurnaroundTime+0x12c>)
 8029d08:	4293      	cmp	r3, r2
 8029d0a:	d906      	bls.n	8029d1a <USB_SetTurnaroundTime+0x82>
 8029d0c:	68bb      	ldr	r3, [r7, #8]
 8029d0e:	4a2e      	ldr	r2, [pc, #184]	; (8029dc8 <USB_SetTurnaroundTime+0x130>)
 8029d10:	4293      	cmp	r3, r2
 8029d12:	d802      	bhi.n	8029d1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8029d14:	230b      	movs	r3, #11
 8029d16:	617b      	str	r3, [r7, #20]
 8029d18:	e036      	b.n	8029d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8029d1a:	68bb      	ldr	r3, [r7, #8]
 8029d1c:	4a2a      	ldr	r2, [pc, #168]	; (8029dc8 <USB_SetTurnaroundTime+0x130>)
 8029d1e:	4293      	cmp	r3, r2
 8029d20:	d906      	bls.n	8029d30 <USB_SetTurnaroundTime+0x98>
 8029d22:	68bb      	ldr	r3, [r7, #8]
 8029d24:	4a29      	ldr	r2, [pc, #164]	; (8029dcc <USB_SetTurnaroundTime+0x134>)
 8029d26:	4293      	cmp	r3, r2
 8029d28:	d802      	bhi.n	8029d30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8029d2a:	230a      	movs	r3, #10
 8029d2c:	617b      	str	r3, [r7, #20]
 8029d2e:	e02b      	b.n	8029d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8029d30:	68bb      	ldr	r3, [r7, #8]
 8029d32:	4a26      	ldr	r2, [pc, #152]	; (8029dcc <USB_SetTurnaroundTime+0x134>)
 8029d34:	4293      	cmp	r3, r2
 8029d36:	d906      	bls.n	8029d46 <USB_SetTurnaroundTime+0xae>
 8029d38:	68bb      	ldr	r3, [r7, #8]
 8029d3a:	4a25      	ldr	r2, [pc, #148]	; (8029dd0 <USB_SetTurnaroundTime+0x138>)
 8029d3c:	4293      	cmp	r3, r2
 8029d3e:	d202      	bcs.n	8029d46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8029d40:	2309      	movs	r3, #9
 8029d42:	617b      	str	r3, [r7, #20]
 8029d44:	e020      	b.n	8029d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8029d46:	68bb      	ldr	r3, [r7, #8]
 8029d48:	4a21      	ldr	r2, [pc, #132]	; (8029dd0 <USB_SetTurnaroundTime+0x138>)
 8029d4a:	4293      	cmp	r3, r2
 8029d4c:	d306      	bcc.n	8029d5c <USB_SetTurnaroundTime+0xc4>
 8029d4e:	68bb      	ldr	r3, [r7, #8]
 8029d50:	4a20      	ldr	r2, [pc, #128]	; (8029dd4 <USB_SetTurnaroundTime+0x13c>)
 8029d52:	4293      	cmp	r3, r2
 8029d54:	d802      	bhi.n	8029d5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8029d56:	2308      	movs	r3, #8
 8029d58:	617b      	str	r3, [r7, #20]
 8029d5a:	e015      	b.n	8029d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8029d5c:	68bb      	ldr	r3, [r7, #8]
 8029d5e:	4a1d      	ldr	r2, [pc, #116]	; (8029dd4 <USB_SetTurnaroundTime+0x13c>)
 8029d60:	4293      	cmp	r3, r2
 8029d62:	d906      	bls.n	8029d72 <USB_SetTurnaroundTime+0xda>
 8029d64:	68bb      	ldr	r3, [r7, #8]
 8029d66:	4a1c      	ldr	r2, [pc, #112]	; (8029dd8 <USB_SetTurnaroundTime+0x140>)
 8029d68:	4293      	cmp	r3, r2
 8029d6a:	d202      	bcs.n	8029d72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8029d6c:	2307      	movs	r3, #7
 8029d6e:	617b      	str	r3, [r7, #20]
 8029d70:	e00a      	b.n	8029d88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8029d72:	2306      	movs	r3, #6
 8029d74:	617b      	str	r3, [r7, #20]
 8029d76:	e007      	b.n	8029d88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8029d78:	79fb      	ldrb	r3, [r7, #7]
 8029d7a:	2b00      	cmp	r3, #0
 8029d7c:	d102      	bne.n	8029d84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8029d7e:	2309      	movs	r3, #9
 8029d80:	617b      	str	r3, [r7, #20]
 8029d82:	e001      	b.n	8029d88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8029d84:	2309      	movs	r3, #9
 8029d86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8029d88:	68fb      	ldr	r3, [r7, #12]
 8029d8a:	68db      	ldr	r3, [r3, #12]
 8029d8c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8029d90:	68fb      	ldr	r3, [r7, #12]
 8029d92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8029d94:	68fb      	ldr	r3, [r7, #12]
 8029d96:	68da      	ldr	r2, [r3, #12]
 8029d98:	697b      	ldr	r3, [r7, #20]
 8029d9a:	029b      	lsls	r3, r3, #10
 8029d9c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8029da0:	431a      	orrs	r2, r3
 8029da2:	68fb      	ldr	r3, [r7, #12]
 8029da4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8029da6:	2300      	movs	r3, #0
}
 8029da8:	4618      	mov	r0, r3
 8029daa:	371c      	adds	r7, #28
 8029dac:	46bd      	mov	sp, r7
 8029dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029db2:	4770      	bx	lr
 8029db4:	00d8acbf 	.word	0x00d8acbf
 8029db8:	00e4e1c0 	.word	0x00e4e1c0
 8029dbc:	00f42400 	.word	0x00f42400
 8029dc0:	01067380 	.word	0x01067380
 8029dc4:	011a499f 	.word	0x011a499f
 8029dc8:	01312cff 	.word	0x01312cff
 8029dcc:	014ca43f 	.word	0x014ca43f
 8029dd0:	016e3600 	.word	0x016e3600
 8029dd4:	01a6ab1f 	.word	0x01a6ab1f
 8029dd8:	01e84800 	.word	0x01e84800

08029ddc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8029ddc:	b480      	push	{r7}
 8029dde:	b083      	sub	sp, #12
 8029de0:	af00      	add	r7, sp, #0
 8029de2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8029de4:	687b      	ldr	r3, [r7, #4]
 8029de6:	689b      	ldr	r3, [r3, #8]
 8029de8:	f043 0201 	orr.w	r2, r3, #1
 8029dec:	687b      	ldr	r3, [r7, #4]
 8029dee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8029df0:	2300      	movs	r3, #0
}
 8029df2:	4618      	mov	r0, r3
 8029df4:	370c      	adds	r7, #12
 8029df6:	46bd      	mov	sp, r7
 8029df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dfc:	4770      	bx	lr

08029dfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8029dfe:	b480      	push	{r7}
 8029e00:	b083      	sub	sp, #12
 8029e02:	af00      	add	r7, sp, #0
 8029e04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8029e06:	687b      	ldr	r3, [r7, #4]
 8029e08:	689b      	ldr	r3, [r3, #8]
 8029e0a:	f023 0201 	bic.w	r2, r3, #1
 8029e0e:	687b      	ldr	r3, [r7, #4]
 8029e10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8029e12:	2300      	movs	r3, #0
}
 8029e14:	4618      	mov	r0, r3
 8029e16:	370c      	adds	r7, #12
 8029e18:	46bd      	mov	sp, r7
 8029e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e1e:	4770      	bx	lr

08029e20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8029e20:	b580      	push	{r7, lr}
 8029e22:	b082      	sub	sp, #8
 8029e24:	af00      	add	r7, sp, #0
 8029e26:	6078      	str	r0, [r7, #4]
 8029e28:	460b      	mov	r3, r1
 8029e2a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8029e2c:	687b      	ldr	r3, [r7, #4]
 8029e2e:	68db      	ldr	r3, [r3, #12]
 8029e30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8029e34:	687b      	ldr	r3, [r7, #4]
 8029e36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8029e38:	78fb      	ldrb	r3, [r7, #3]
 8029e3a:	2b01      	cmp	r3, #1
 8029e3c:	d106      	bne.n	8029e4c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8029e3e:	687b      	ldr	r3, [r7, #4]
 8029e40:	68db      	ldr	r3, [r3, #12]
 8029e42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8029e46:	687b      	ldr	r3, [r7, #4]
 8029e48:	60da      	str	r2, [r3, #12]
 8029e4a:	e00b      	b.n	8029e64 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8029e4c:	78fb      	ldrb	r3, [r7, #3]
 8029e4e:	2b00      	cmp	r3, #0
 8029e50:	d106      	bne.n	8029e60 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8029e52:	687b      	ldr	r3, [r7, #4]
 8029e54:	68db      	ldr	r3, [r3, #12]
 8029e56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8029e5a:	687b      	ldr	r3, [r7, #4]
 8029e5c:	60da      	str	r2, [r3, #12]
 8029e5e:	e001      	b.n	8029e64 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8029e60:	2301      	movs	r3, #1
 8029e62:	e003      	b.n	8029e6c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8029e64:	2032      	movs	r0, #50	; 0x32
 8029e66:	f7f7 fe8b 	bl	8021b80 <HAL_Delay>

  return HAL_OK;
 8029e6a:	2300      	movs	r3, #0
}
 8029e6c:	4618      	mov	r0, r3
 8029e6e:	3708      	adds	r7, #8
 8029e70:	46bd      	mov	sp, r7
 8029e72:	bd80      	pop	{r7, pc}

08029e74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8029e74:	b084      	sub	sp, #16
 8029e76:	b580      	push	{r7, lr}
 8029e78:	b086      	sub	sp, #24
 8029e7a:	af00      	add	r7, sp, #0
 8029e7c:	6078      	str	r0, [r7, #4]
 8029e7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8029e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8029e86:	2300      	movs	r3, #0
 8029e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029e8a:	687b      	ldr	r3, [r7, #4]
 8029e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8029e8e:	2300      	movs	r3, #0
 8029e90:	613b      	str	r3, [r7, #16]
 8029e92:	e009      	b.n	8029ea8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8029e94:	687a      	ldr	r2, [r7, #4]
 8029e96:	693b      	ldr	r3, [r7, #16]
 8029e98:	3340      	adds	r3, #64	; 0x40
 8029e9a:	009b      	lsls	r3, r3, #2
 8029e9c:	4413      	add	r3, r2
 8029e9e:	2200      	movs	r2, #0
 8029ea0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8029ea2:	693b      	ldr	r3, [r7, #16]
 8029ea4:	3301      	adds	r3, #1
 8029ea6:	613b      	str	r3, [r7, #16]
 8029ea8:	693b      	ldr	r3, [r7, #16]
 8029eaa:	2b0e      	cmp	r3, #14
 8029eac:	d9f2      	bls.n	8029e94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8029eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029eb0:	2b00      	cmp	r3, #0
 8029eb2:	d11c      	bne.n	8029eee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8029eb4:	68fb      	ldr	r3, [r7, #12]
 8029eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029eba:	685b      	ldr	r3, [r3, #4]
 8029ebc:	68fa      	ldr	r2, [r7, #12]
 8029ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029ec2:	f043 0302 	orr.w	r3, r3, #2
 8029ec6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8029ec8:	687b      	ldr	r3, [r7, #4]
 8029eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029ecc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8029ed0:	687b      	ldr	r3, [r7, #4]
 8029ed2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8029ed4:	687b      	ldr	r3, [r7, #4]
 8029ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029ed8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8029edc:	687b      	ldr	r3, [r7, #4]
 8029ede:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8029ee0:	687b      	ldr	r3, [r7, #4]
 8029ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029ee4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8029ee8:	687b      	ldr	r3, [r7, #4]
 8029eea:	639a      	str	r2, [r3, #56]	; 0x38
 8029eec:	e00b      	b.n	8029f06 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8029eee:	687b      	ldr	r3, [r7, #4]
 8029ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029ef2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8029ef6:	687b      	ldr	r3, [r7, #4]
 8029ef8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8029efa:	687b      	ldr	r3, [r7, #4]
 8029efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029efe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8029f02:	687b      	ldr	r3, [r7, #4]
 8029f04:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8029f06:	68fb      	ldr	r3, [r7, #12]
 8029f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8029f0c:	461a      	mov	r2, r3
 8029f0e:	2300      	movs	r3, #0
 8029f10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8029f12:	68fb      	ldr	r3, [r7, #12]
 8029f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029f18:	4619      	mov	r1, r3
 8029f1a:	68fb      	ldr	r3, [r7, #12]
 8029f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029f20:	461a      	mov	r2, r3
 8029f22:	680b      	ldr	r3, [r1, #0]
 8029f24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8029f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029f28:	2b01      	cmp	r3, #1
 8029f2a:	d10c      	bne.n	8029f46 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8029f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029f2e:	2b00      	cmp	r3, #0
 8029f30:	d104      	bne.n	8029f3c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8029f32:	2100      	movs	r1, #0
 8029f34:	6878      	ldr	r0, [r7, #4]
 8029f36:	f000 f949 	bl	802a1cc <USB_SetDevSpeed>
 8029f3a:	e008      	b.n	8029f4e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8029f3c:	2101      	movs	r1, #1
 8029f3e:	6878      	ldr	r0, [r7, #4]
 8029f40:	f000 f944 	bl	802a1cc <USB_SetDevSpeed>
 8029f44:	e003      	b.n	8029f4e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8029f46:	2103      	movs	r1, #3
 8029f48:	6878      	ldr	r0, [r7, #4]
 8029f4a:	f000 f93f 	bl	802a1cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8029f4e:	2110      	movs	r1, #16
 8029f50:	6878      	ldr	r0, [r7, #4]
 8029f52:	f000 f8f3 	bl	802a13c <USB_FlushTxFifo>
 8029f56:	4603      	mov	r3, r0
 8029f58:	2b00      	cmp	r3, #0
 8029f5a:	d001      	beq.n	8029f60 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8029f5c:	2301      	movs	r3, #1
 8029f5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8029f60:	6878      	ldr	r0, [r7, #4]
 8029f62:	f000 f911 	bl	802a188 <USB_FlushRxFifo>
 8029f66:	4603      	mov	r3, r0
 8029f68:	2b00      	cmp	r3, #0
 8029f6a:	d001      	beq.n	8029f70 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8029f6c:	2301      	movs	r3, #1
 8029f6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8029f70:	68fb      	ldr	r3, [r7, #12]
 8029f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029f76:	461a      	mov	r2, r3
 8029f78:	2300      	movs	r3, #0
 8029f7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8029f7c:	68fb      	ldr	r3, [r7, #12]
 8029f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029f82:	461a      	mov	r2, r3
 8029f84:	2300      	movs	r3, #0
 8029f86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8029f88:	68fb      	ldr	r3, [r7, #12]
 8029f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029f8e:	461a      	mov	r2, r3
 8029f90:	2300      	movs	r3, #0
 8029f92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8029f94:	2300      	movs	r3, #0
 8029f96:	613b      	str	r3, [r7, #16]
 8029f98:	e043      	b.n	802a022 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8029f9a:	693b      	ldr	r3, [r7, #16]
 8029f9c:	015a      	lsls	r2, r3, #5
 8029f9e:	68fb      	ldr	r3, [r7, #12]
 8029fa0:	4413      	add	r3, r2
 8029fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029fa6:	681b      	ldr	r3, [r3, #0]
 8029fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8029fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8029fb0:	d118      	bne.n	8029fe4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8029fb2:	693b      	ldr	r3, [r7, #16]
 8029fb4:	2b00      	cmp	r3, #0
 8029fb6:	d10a      	bne.n	8029fce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8029fb8:	693b      	ldr	r3, [r7, #16]
 8029fba:	015a      	lsls	r2, r3, #5
 8029fbc:	68fb      	ldr	r3, [r7, #12]
 8029fbe:	4413      	add	r3, r2
 8029fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029fc4:	461a      	mov	r2, r3
 8029fc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8029fca:	6013      	str	r3, [r2, #0]
 8029fcc:	e013      	b.n	8029ff6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8029fce:	693b      	ldr	r3, [r7, #16]
 8029fd0:	015a      	lsls	r2, r3, #5
 8029fd2:	68fb      	ldr	r3, [r7, #12]
 8029fd4:	4413      	add	r3, r2
 8029fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029fda:	461a      	mov	r2, r3
 8029fdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8029fe0:	6013      	str	r3, [r2, #0]
 8029fe2:	e008      	b.n	8029ff6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8029fe4:	693b      	ldr	r3, [r7, #16]
 8029fe6:	015a      	lsls	r2, r3, #5
 8029fe8:	68fb      	ldr	r3, [r7, #12]
 8029fea:	4413      	add	r3, r2
 8029fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029ff0:	461a      	mov	r2, r3
 8029ff2:	2300      	movs	r3, #0
 8029ff4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8029ff6:	693b      	ldr	r3, [r7, #16]
 8029ff8:	015a      	lsls	r2, r3, #5
 8029ffa:	68fb      	ldr	r3, [r7, #12]
 8029ffc:	4413      	add	r3, r2
 8029ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a002:	461a      	mov	r2, r3
 802a004:	2300      	movs	r3, #0
 802a006:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 802a008:	693b      	ldr	r3, [r7, #16]
 802a00a:	015a      	lsls	r2, r3, #5
 802a00c:	68fb      	ldr	r3, [r7, #12]
 802a00e:	4413      	add	r3, r2
 802a010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a014:	461a      	mov	r2, r3
 802a016:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802a01a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802a01c:	693b      	ldr	r3, [r7, #16]
 802a01e:	3301      	adds	r3, #1
 802a020:	613b      	str	r3, [r7, #16]
 802a022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a024:	693a      	ldr	r2, [r7, #16]
 802a026:	429a      	cmp	r2, r3
 802a028:	d3b7      	bcc.n	8029f9a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802a02a:	2300      	movs	r3, #0
 802a02c:	613b      	str	r3, [r7, #16]
 802a02e:	e043      	b.n	802a0b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802a030:	693b      	ldr	r3, [r7, #16]
 802a032:	015a      	lsls	r2, r3, #5
 802a034:	68fb      	ldr	r3, [r7, #12]
 802a036:	4413      	add	r3, r2
 802a038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a03c:	681b      	ldr	r3, [r3, #0]
 802a03e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802a046:	d118      	bne.n	802a07a <USB_DevInit+0x206>
    {
      if (i == 0U)
 802a048:	693b      	ldr	r3, [r7, #16]
 802a04a:	2b00      	cmp	r3, #0
 802a04c:	d10a      	bne.n	802a064 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 802a04e:	693b      	ldr	r3, [r7, #16]
 802a050:	015a      	lsls	r2, r3, #5
 802a052:	68fb      	ldr	r3, [r7, #12]
 802a054:	4413      	add	r3, r2
 802a056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a05a:	461a      	mov	r2, r3
 802a05c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802a060:	6013      	str	r3, [r2, #0]
 802a062:	e013      	b.n	802a08c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 802a064:	693b      	ldr	r3, [r7, #16]
 802a066:	015a      	lsls	r2, r3, #5
 802a068:	68fb      	ldr	r3, [r7, #12]
 802a06a:	4413      	add	r3, r2
 802a06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a070:	461a      	mov	r2, r3
 802a072:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802a076:	6013      	str	r3, [r2, #0]
 802a078:	e008      	b.n	802a08c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 802a07a:	693b      	ldr	r3, [r7, #16]
 802a07c:	015a      	lsls	r2, r3, #5
 802a07e:	68fb      	ldr	r3, [r7, #12]
 802a080:	4413      	add	r3, r2
 802a082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a086:	461a      	mov	r2, r3
 802a088:	2300      	movs	r3, #0
 802a08a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 802a08c:	693b      	ldr	r3, [r7, #16]
 802a08e:	015a      	lsls	r2, r3, #5
 802a090:	68fb      	ldr	r3, [r7, #12]
 802a092:	4413      	add	r3, r2
 802a094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a098:	461a      	mov	r2, r3
 802a09a:	2300      	movs	r3, #0
 802a09c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 802a09e:	693b      	ldr	r3, [r7, #16]
 802a0a0:	015a      	lsls	r2, r3, #5
 802a0a2:	68fb      	ldr	r3, [r7, #12]
 802a0a4:	4413      	add	r3, r2
 802a0a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a0aa:	461a      	mov	r2, r3
 802a0ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802a0b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802a0b2:	693b      	ldr	r3, [r7, #16]
 802a0b4:	3301      	adds	r3, #1
 802a0b6:	613b      	str	r3, [r7, #16]
 802a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0ba:	693a      	ldr	r2, [r7, #16]
 802a0bc:	429a      	cmp	r2, r3
 802a0be:	d3b7      	bcc.n	802a030 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 802a0c0:	68fb      	ldr	r3, [r7, #12]
 802a0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a0c6:	691b      	ldr	r3, [r3, #16]
 802a0c8:	68fa      	ldr	r2, [r7, #12]
 802a0ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802a0ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802a0d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802a0d4:	687b      	ldr	r3, [r7, #4]
 802a0d6:	2200      	movs	r2, #0
 802a0d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 802a0da:	687b      	ldr	r3, [r7, #4]
 802a0dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 802a0e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a0e4:	2b00      	cmp	r3, #0
 802a0e6:	d105      	bne.n	802a0f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802a0e8:	687b      	ldr	r3, [r7, #4]
 802a0ea:	699b      	ldr	r3, [r3, #24]
 802a0ec:	f043 0210 	orr.w	r2, r3, #16
 802a0f0:	687b      	ldr	r3, [r7, #4]
 802a0f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 802a0f4:	687b      	ldr	r3, [r7, #4]
 802a0f6:	699a      	ldr	r2, [r3, #24]
 802a0f8:	4b0f      	ldr	r3, [pc, #60]	; (802a138 <USB_DevInit+0x2c4>)
 802a0fa:	4313      	orrs	r3, r2
 802a0fc:	687a      	ldr	r2, [r7, #4]
 802a0fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 802a100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a102:	2b00      	cmp	r3, #0
 802a104:	d005      	beq.n	802a112 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 802a106:	687b      	ldr	r3, [r7, #4]
 802a108:	699b      	ldr	r3, [r3, #24]
 802a10a:	f043 0208 	orr.w	r2, r3, #8
 802a10e:	687b      	ldr	r3, [r7, #4]
 802a110:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 802a112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a114:	2b01      	cmp	r3, #1
 802a116:	d107      	bne.n	802a128 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 802a118:	687b      	ldr	r3, [r7, #4]
 802a11a:	699b      	ldr	r3, [r3, #24]
 802a11c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a120:	f043 0304 	orr.w	r3, r3, #4
 802a124:	687a      	ldr	r2, [r7, #4]
 802a126:	6193      	str	r3, [r2, #24]
  }

  return ret;
 802a128:	7dfb      	ldrb	r3, [r7, #23]
}
 802a12a:	4618      	mov	r0, r3
 802a12c:	3718      	adds	r7, #24
 802a12e:	46bd      	mov	sp, r7
 802a130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802a134:	b004      	add	sp, #16
 802a136:	4770      	bx	lr
 802a138:	803c3800 	.word	0x803c3800

0802a13c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802a13c:	b480      	push	{r7}
 802a13e:	b085      	sub	sp, #20
 802a140:	af00      	add	r7, sp, #0
 802a142:	6078      	str	r0, [r7, #4]
 802a144:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 802a146:	2300      	movs	r3, #0
 802a148:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802a14a:	683b      	ldr	r3, [r7, #0]
 802a14c:	019b      	lsls	r3, r3, #6
 802a14e:	f043 0220 	orr.w	r2, r3, #32
 802a152:	687b      	ldr	r3, [r7, #4]
 802a154:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 802a156:	68fb      	ldr	r3, [r7, #12]
 802a158:	3301      	adds	r3, #1
 802a15a:	60fb      	str	r3, [r7, #12]
 802a15c:	68fb      	ldr	r3, [r7, #12]
 802a15e:	4a09      	ldr	r2, [pc, #36]	; (802a184 <USB_FlushTxFifo+0x48>)
 802a160:	4293      	cmp	r3, r2
 802a162:	d901      	bls.n	802a168 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 802a164:	2303      	movs	r3, #3
 802a166:	e006      	b.n	802a176 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802a168:	687b      	ldr	r3, [r7, #4]
 802a16a:	691b      	ldr	r3, [r3, #16]
 802a16c:	f003 0320 	and.w	r3, r3, #32
 802a170:	2b20      	cmp	r3, #32
 802a172:	d0f0      	beq.n	802a156 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 802a174:	2300      	movs	r3, #0
}
 802a176:	4618      	mov	r0, r3
 802a178:	3714      	adds	r7, #20
 802a17a:	46bd      	mov	sp, r7
 802a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a180:	4770      	bx	lr
 802a182:	bf00      	nop
 802a184:	00030d40 	.word	0x00030d40

0802a188 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802a188:	b480      	push	{r7}
 802a18a:	b085      	sub	sp, #20
 802a18c:	af00      	add	r7, sp, #0
 802a18e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 802a190:	2300      	movs	r3, #0
 802a192:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802a194:	687b      	ldr	r3, [r7, #4]
 802a196:	2210      	movs	r2, #16
 802a198:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 802a19a:	68fb      	ldr	r3, [r7, #12]
 802a19c:	3301      	adds	r3, #1
 802a19e:	60fb      	str	r3, [r7, #12]
 802a1a0:	68fb      	ldr	r3, [r7, #12]
 802a1a2:	4a09      	ldr	r2, [pc, #36]	; (802a1c8 <USB_FlushRxFifo+0x40>)
 802a1a4:	4293      	cmp	r3, r2
 802a1a6:	d901      	bls.n	802a1ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 802a1a8:	2303      	movs	r3, #3
 802a1aa:	e006      	b.n	802a1ba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802a1ac:	687b      	ldr	r3, [r7, #4]
 802a1ae:	691b      	ldr	r3, [r3, #16]
 802a1b0:	f003 0310 	and.w	r3, r3, #16
 802a1b4:	2b10      	cmp	r3, #16
 802a1b6:	d0f0      	beq.n	802a19a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 802a1b8:	2300      	movs	r3, #0
}
 802a1ba:	4618      	mov	r0, r3
 802a1bc:	3714      	adds	r7, #20
 802a1be:	46bd      	mov	sp, r7
 802a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1c4:	4770      	bx	lr
 802a1c6:	bf00      	nop
 802a1c8:	00030d40 	.word	0x00030d40

0802a1cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 802a1cc:	b480      	push	{r7}
 802a1ce:	b085      	sub	sp, #20
 802a1d0:	af00      	add	r7, sp, #0
 802a1d2:	6078      	str	r0, [r7, #4]
 802a1d4:	460b      	mov	r3, r1
 802a1d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a1d8:	687b      	ldr	r3, [r7, #4]
 802a1da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 802a1dc:	68fb      	ldr	r3, [r7, #12]
 802a1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a1e2:	681a      	ldr	r2, [r3, #0]
 802a1e4:	78fb      	ldrb	r3, [r7, #3]
 802a1e6:	68f9      	ldr	r1, [r7, #12]
 802a1e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a1ec:	4313      	orrs	r3, r2
 802a1ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 802a1f0:	2300      	movs	r3, #0
}
 802a1f2:	4618      	mov	r0, r3
 802a1f4:	3714      	adds	r7, #20
 802a1f6:	46bd      	mov	sp, r7
 802a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1fc:	4770      	bx	lr

0802a1fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802a1fe:	b480      	push	{r7}
 802a200:	b087      	sub	sp, #28
 802a202:	af00      	add	r7, sp, #0
 802a204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a206:	687b      	ldr	r3, [r7, #4]
 802a208:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 802a20a:	693b      	ldr	r3, [r7, #16]
 802a20c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a210:	689b      	ldr	r3, [r3, #8]
 802a212:	f003 0306 	and.w	r3, r3, #6
 802a216:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 802a218:	68fb      	ldr	r3, [r7, #12]
 802a21a:	2b00      	cmp	r3, #0
 802a21c:	d102      	bne.n	802a224 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 802a21e:	2300      	movs	r3, #0
 802a220:	75fb      	strb	r3, [r7, #23]
 802a222:	e00a      	b.n	802a23a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 802a224:	68fb      	ldr	r3, [r7, #12]
 802a226:	2b02      	cmp	r3, #2
 802a228:	d002      	beq.n	802a230 <USB_GetDevSpeed+0x32>
 802a22a:	68fb      	ldr	r3, [r7, #12]
 802a22c:	2b06      	cmp	r3, #6
 802a22e:	d102      	bne.n	802a236 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 802a230:	2302      	movs	r3, #2
 802a232:	75fb      	strb	r3, [r7, #23]
 802a234:	e001      	b.n	802a23a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 802a236:	230f      	movs	r3, #15
 802a238:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 802a23a:	7dfb      	ldrb	r3, [r7, #23]
}
 802a23c:	4618      	mov	r0, r3
 802a23e:	371c      	adds	r7, #28
 802a240:	46bd      	mov	sp, r7
 802a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a246:	4770      	bx	lr

0802a248 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802a248:	b480      	push	{r7}
 802a24a:	b085      	sub	sp, #20
 802a24c:	af00      	add	r7, sp, #0
 802a24e:	6078      	str	r0, [r7, #4]
 802a250:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a252:	687b      	ldr	r3, [r7, #4]
 802a254:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802a256:	683b      	ldr	r3, [r7, #0]
 802a258:	781b      	ldrb	r3, [r3, #0]
 802a25a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802a25c:	683b      	ldr	r3, [r7, #0]
 802a25e:	785b      	ldrb	r3, [r3, #1]
 802a260:	2b01      	cmp	r3, #1
 802a262:	d13a      	bne.n	802a2da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 802a264:	68fb      	ldr	r3, [r7, #12]
 802a266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a26a:	69da      	ldr	r2, [r3, #28]
 802a26c:	683b      	ldr	r3, [r7, #0]
 802a26e:	781b      	ldrb	r3, [r3, #0]
 802a270:	f003 030f 	and.w	r3, r3, #15
 802a274:	2101      	movs	r1, #1
 802a276:	fa01 f303 	lsl.w	r3, r1, r3
 802a27a:	b29b      	uxth	r3, r3
 802a27c:	68f9      	ldr	r1, [r7, #12]
 802a27e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a282:	4313      	orrs	r3, r2
 802a284:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 802a286:	68bb      	ldr	r3, [r7, #8]
 802a288:	015a      	lsls	r2, r3, #5
 802a28a:	68fb      	ldr	r3, [r7, #12]
 802a28c:	4413      	add	r3, r2
 802a28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a292:	681b      	ldr	r3, [r3, #0]
 802a294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802a298:	2b00      	cmp	r3, #0
 802a29a:	d155      	bne.n	802a348 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802a29c:	68bb      	ldr	r3, [r7, #8]
 802a29e:	015a      	lsls	r2, r3, #5
 802a2a0:	68fb      	ldr	r3, [r7, #12]
 802a2a2:	4413      	add	r3, r2
 802a2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a2a8:	681a      	ldr	r2, [r3, #0]
 802a2aa:	683b      	ldr	r3, [r7, #0]
 802a2ac:	689b      	ldr	r3, [r3, #8]
 802a2ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802a2b2:	683b      	ldr	r3, [r7, #0]
 802a2b4:	78db      	ldrb	r3, [r3, #3]
 802a2b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802a2b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802a2ba:	68bb      	ldr	r3, [r7, #8]
 802a2bc:	059b      	lsls	r3, r3, #22
 802a2be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802a2c0:	4313      	orrs	r3, r2
 802a2c2:	68ba      	ldr	r2, [r7, #8]
 802a2c4:	0151      	lsls	r1, r2, #5
 802a2c6:	68fa      	ldr	r2, [r7, #12]
 802a2c8:	440a      	add	r2, r1
 802a2ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a2ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a2d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802a2d6:	6013      	str	r3, [r2, #0]
 802a2d8:	e036      	b.n	802a348 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 802a2da:	68fb      	ldr	r3, [r7, #12]
 802a2dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a2e0:	69da      	ldr	r2, [r3, #28]
 802a2e2:	683b      	ldr	r3, [r7, #0]
 802a2e4:	781b      	ldrb	r3, [r3, #0]
 802a2e6:	f003 030f 	and.w	r3, r3, #15
 802a2ea:	2101      	movs	r1, #1
 802a2ec:	fa01 f303 	lsl.w	r3, r1, r3
 802a2f0:	041b      	lsls	r3, r3, #16
 802a2f2:	68f9      	ldr	r1, [r7, #12]
 802a2f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a2f8:	4313      	orrs	r3, r2
 802a2fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 802a2fc:	68bb      	ldr	r3, [r7, #8]
 802a2fe:	015a      	lsls	r2, r3, #5
 802a300:	68fb      	ldr	r3, [r7, #12]
 802a302:	4413      	add	r3, r2
 802a304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a308:	681b      	ldr	r3, [r3, #0]
 802a30a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802a30e:	2b00      	cmp	r3, #0
 802a310:	d11a      	bne.n	802a348 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802a312:	68bb      	ldr	r3, [r7, #8]
 802a314:	015a      	lsls	r2, r3, #5
 802a316:	68fb      	ldr	r3, [r7, #12]
 802a318:	4413      	add	r3, r2
 802a31a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a31e:	681a      	ldr	r2, [r3, #0]
 802a320:	683b      	ldr	r3, [r7, #0]
 802a322:	689b      	ldr	r3, [r3, #8]
 802a324:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 802a328:	683b      	ldr	r3, [r7, #0]
 802a32a:	78db      	ldrb	r3, [r3, #3]
 802a32c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802a32e:	430b      	orrs	r3, r1
 802a330:	4313      	orrs	r3, r2
 802a332:	68ba      	ldr	r2, [r7, #8]
 802a334:	0151      	lsls	r1, r2, #5
 802a336:	68fa      	ldr	r2, [r7, #12]
 802a338:	440a      	add	r2, r1
 802a33a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a33e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802a346:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 802a348:	2300      	movs	r3, #0
}
 802a34a:	4618      	mov	r0, r3
 802a34c:	3714      	adds	r7, #20
 802a34e:	46bd      	mov	sp, r7
 802a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a354:	4770      	bx	lr
	...

0802a358 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802a358:	b480      	push	{r7}
 802a35a:	b085      	sub	sp, #20
 802a35c:	af00      	add	r7, sp, #0
 802a35e:	6078      	str	r0, [r7, #4]
 802a360:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a362:	687b      	ldr	r3, [r7, #4]
 802a364:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802a366:	683b      	ldr	r3, [r7, #0]
 802a368:	781b      	ldrb	r3, [r3, #0]
 802a36a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 802a36c:	683b      	ldr	r3, [r7, #0]
 802a36e:	785b      	ldrb	r3, [r3, #1]
 802a370:	2b01      	cmp	r3, #1
 802a372:	d161      	bne.n	802a438 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802a374:	68bb      	ldr	r3, [r7, #8]
 802a376:	015a      	lsls	r2, r3, #5
 802a378:	68fb      	ldr	r3, [r7, #12]
 802a37a:	4413      	add	r3, r2
 802a37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a380:	681b      	ldr	r3, [r3, #0]
 802a382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802a38a:	d11f      	bne.n	802a3cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 802a38c:	68bb      	ldr	r3, [r7, #8]
 802a38e:	015a      	lsls	r2, r3, #5
 802a390:	68fb      	ldr	r3, [r7, #12]
 802a392:	4413      	add	r3, r2
 802a394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a398:	681b      	ldr	r3, [r3, #0]
 802a39a:	68ba      	ldr	r2, [r7, #8]
 802a39c:	0151      	lsls	r1, r2, #5
 802a39e:	68fa      	ldr	r2, [r7, #12]
 802a3a0:	440a      	add	r2, r1
 802a3a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a3a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802a3aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 802a3ac:	68bb      	ldr	r3, [r7, #8]
 802a3ae:	015a      	lsls	r2, r3, #5
 802a3b0:	68fb      	ldr	r3, [r7, #12]
 802a3b2:	4413      	add	r3, r2
 802a3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a3b8:	681b      	ldr	r3, [r3, #0]
 802a3ba:	68ba      	ldr	r2, [r7, #8]
 802a3bc:	0151      	lsls	r1, r2, #5
 802a3be:	68fa      	ldr	r2, [r7, #12]
 802a3c0:	440a      	add	r2, r1
 802a3c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a3c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a3ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802a3cc:	68fb      	ldr	r3, [r7, #12]
 802a3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a3d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802a3d4:	683b      	ldr	r3, [r7, #0]
 802a3d6:	781b      	ldrb	r3, [r3, #0]
 802a3d8:	f003 030f 	and.w	r3, r3, #15
 802a3dc:	2101      	movs	r1, #1
 802a3de:	fa01 f303 	lsl.w	r3, r1, r3
 802a3e2:	b29b      	uxth	r3, r3
 802a3e4:	43db      	mvns	r3, r3
 802a3e6:	68f9      	ldr	r1, [r7, #12]
 802a3e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a3ec:	4013      	ands	r3, r2
 802a3ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802a3f0:	68fb      	ldr	r3, [r7, #12]
 802a3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a3f6:	69da      	ldr	r2, [r3, #28]
 802a3f8:	683b      	ldr	r3, [r7, #0]
 802a3fa:	781b      	ldrb	r3, [r3, #0]
 802a3fc:	f003 030f 	and.w	r3, r3, #15
 802a400:	2101      	movs	r1, #1
 802a402:	fa01 f303 	lsl.w	r3, r1, r3
 802a406:	b29b      	uxth	r3, r3
 802a408:	43db      	mvns	r3, r3
 802a40a:	68f9      	ldr	r1, [r7, #12]
 802a40c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a410:	4013      	ands	r3, r2
 802a412:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 802a414:	68bb      	ldr	r3, [r7, #8]
 802a416:	015a      	lsls	r2, r3, #5
 802a418:	68fb      	ldr	r3, [r7, #12]
 802a41a:	4413      	add	r3, r2
 802a41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a420:	681a      	ldr	r2, [r3, #0]
 802a422:	68bb      	ldr	r3, [r7, #8]
 802a424:	0159      	lsls	r1, r3, #5
 802a426:	68fb      	ldr	r3, [r7, #12]
 802a428:	440b      	add	r3, r1
 802a42a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a42e:	4619      	mov	r1, r3
 802a430:	4b35      	ldr	r3, [pc, #212]	; (802a508 <USB_DeactivateEndpoint+0x1b0>)
 802a432:	4013      	ands	r3, r2
 802a434:	600b      	str	r3, [r1, #0]
 802a436:	e060      	b.n	802a4fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802a438:	68bb      	ldr	r3, [r7, #8]
 802a43a:	015a      	lsls	r2, r3, #5
 802a43c:	68fb      	ldr	r3, [r7, #12]
 802a43e:	4413      	add	r3, r2
 802a440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a444:	681b      	ldr	r3, [r3, #0]
 802a446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a44a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802a44e:	d11f      	bne.n	802a490 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802a450:	68bb      	ldr	r3, [r7, #8]
 802a452:	015a      	lsls	r2, r3, #5
 802a454:	68fb      	ldr	r3, [r7, #12]
 802a456:	4413      	add	r3, r2
 802a458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a45c:	681b      	ldr	r3, [r3, #0]
 802a45e:	68ba      	ldr	r2, [r7, #8]
 802a460:	0151      	lsls	r1, r2, #5
 802a462:	68fa      	ldr	r2, [r7, #12]
 802a464:	440a      	add	r2, r1
 802a466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a46a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802a46e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 802a470:	68bb      	ldr	r3, [r7, #8]
 802a472:	015a      	lsls	r2, r3, #5
 802a474:	68fb      	ldr	r3, [r7, #12]
 802a476:	4413      	add	r3, r2
 802a478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a47c:	681b      	ldr	r3, [r3, #0]
 802a47e:	68ba      	ldr	r2, [r7, #8]
 802a480:	0151      	lsls	r1, r2, #5
 802a482:	68fa      	ldr	r2, [r7, #12]
 802a484:	440a      	add	r2, r1
 802a486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a48a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a48e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802a490:	68fb      	ldr	r3, [r7, #12]
 802a492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802a498:	683b      	ldr	r3, [r7, #0]
 802a49a:	781b      	ldrb	r3, [r3, #0]
 802a49c:	f003 030f 	and.w	r3, r3, #15
 802a4a0:	2101      	movs	r1, #1
 802a4a2:	fa01 f303 	lsl.w	r3, r1, r3
 802a4a6:	041b      	lsls	r3, r3, #16
 802a4a8:	43db      	mvns	r3, r3
 802a4aa:	68f9      	ldr	r1, [r7, #12]
 802a4ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a4b0:	4013      	ands	r3, r2
 802a4b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802a4b4:	68fb      	ldr	r3, [r7, #12]
 802a4b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a4ba:	69da      	ldr	r2, [r3, #28]
 802a4bc:	683b      	ldr	r3, [r7, #0]
 802a4be:	781b      	ldrb	r3, [r3, #0]
 802a4c0:	f003 030f 	and.w	r3, r3, #15
 802a4c4:	2101      	movs	r1, #1
 802a4c6:	fa01 f303 	lsl.w	r3, r1, r3
 802a4ca:	041b      	lsls	r3, r3, #16
 802a4cc:	43db      	mvns	r3, r3
 802a4ce:	68f9      	ldr	r1, [r7, #12]
 802a4d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a4d4:	4013      	ands	r3, r2
 802a4d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 802a4d8:	68bb      	ldr	r3, [r7, #8]
 802a4da:	015a      	lsls	r2, r3, #5
 802a4dc:	68fb      	ldr	r3, [r7, #12]
 802a4de:	4413      	add	r3, r2
 802a4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a4e4:	681a      	ldr	r2, [r3, #0]
 802a4e6:	68bb      	ldr	r3, [r7, #8]
 802a4e8:	0159      	lsls	r1, r3, #5
 802a4ea:	68fb      	ldr	r3, [r7, #12]
 802a4ec:	440b      	add	r3, r1
 802a4ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a4f2:	4619      	mov	r1, r3
 802a4f4:	4b05      	ldr	r3, [pc, #20]	; (802a50c <USB_DeactivateEndpoint+0x1b4>)
 802a4f6:	4013      	ands	r3, r2
 802a4f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 802a4fa:	2300      	movs	r3, #0
}
 802a4fc:	4618      	mov	r0, r3
 802a4fe:	3714      	adds	r7, #20
 802a500:	46bd      	mov	sp, r7
 802a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a506:	4770      	bx	lr
 802a508:	ec337800 	.word	0xec337800
 802a50c:	eff37800 	.word	0xeff37800

0802a510 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802a510:	b580      	push	{r7, lr}
 802a512:	b08a      	sub	sp, #40	; 0x28
 802a514:	af02      	add	r7, sp, #8
 802a516:	60f8      	str	r0, [r7, #12]
 802a518:	60b9      	str	r1, [r7, #8]
 802a51a:	4613      	mov	r3, r2
 802a51c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a51e:	68fb      	ldr	r3, [r7, #12]
 802a520:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 802a522:	68bb      	ldr	r3, [r7, #8]
 802a524:	781b      	ldrb	r3, [r3, #0]
 802a526:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 802a528:	68bb      	ldr	r3, [r7, #8]
 802a52a:	785b      	ldrb	r3, [r3, #1]
 802a52c:	2b01      	cmp	r3, #1
 802a52e:	f040 815c 	bne.w	802a7ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802a532:	68bb      	ldr	r3, [r7, #8]
 802a534:	695b      	ldr	r3, [r3, #20]
 802a536:	2b00      	cmp	r3, #0
 802a538:	d132      	bne.n	802a5a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802a53a:	69bb      	ldr	r3, [r7, #24]
 802a53c:	015a      	lsls	r2, r3, #5
 802a53e:	69fb      	ldr	r3, [r7, #28]
 802a540:	4413      	add	r3, r2
 802a542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a546:	691b      	ldr	r3, [r3, #16]
 802a548:	69ba      	ldr	r2, [r7, #24]
 802a54a:	0151      	lsls	r1, r2, #5
 802a54c:	69fa      	ldr	r2, [r7, #28]
 802a54e:	440a      	add	r2, r1
 802a550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a554:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802a558:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802a55c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802a55e:	69bb      	ldr	r3, [r7, #24]
 802a560:	015a      	lsls	r2, r3, #5
 802a562:	69fb      	ldr	r3, [r7, #28]
 802a564:	4413      	add	r3, r2
 802a566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a56a:	691b      	ldr	r3, [r3, #16]
 802a56c:	69ba      	ldr	r2, [r7, #24]
 802a56e:	0151      	lsls	r1, r2, #5
 802a570:	69fa      	ldr	r2, [r7, #28]
 802a572:	440a      	add	r2, r1
 802a574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802a57c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802a57e:	69bb      	ldr	r3, [r7, #24]
 802a580:	015a      	lsls	r2, r3, #5
 802a582:	69fb      	ldr	r3, [r7, #28]
 802a584:	4413      	add	r3, r2
 802a586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a58a:	691b      	ldr	r3, [r3, #16]
 802a58c:	69ba      	ldr	r2, [r7, #24]
 802a58e:	0151      	lsls	r1, r2, #5
 802a590:	69fa      	ldr	r2, [r7, #28]
 802a592:	440a      	add	r2, r1
 802a594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a598:	0cdb      	lsrs	r3, r3, #19
 802a59a:	04db      	lsls	r3, r3, #19
 802a59c:	6113      	str	r3, [r2, #16]
 802a59e:	e074      	b.n	802a68a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802a5a0:	69bb      	ldr	r3, [r7, #24]
 802a5a2:	015a      	lsls	r2, r3, #5
 802a5a4:	69fb      	ldr	r3, [r7, #28]
 802a5a6:	4413      	add	r3, r2
 802a5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a5ac:	691b      	ldr	r3, [r3, #16]
 802a5ae:	69ba      	ldr	r2, [r7, #24]
 802a5b0:	0151      	lsls	r1, r2, #5
 802a5b2:	69fa      	ldr	r2, [r7, #28]
 802a5b4:	440a      	add	r2, r1
 802a5b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a5ba:	0cdb      	lsrs	r3, r3, #19
 802a5bc:	04db      	lsls	r3, r3, #19
 802a5be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802a5c0:	69bb      	ldr	r3, [r7, #24]
 802a5c2:	015a      	lsls	r2, r3, #5
 802a5c4:	69fb      	ldr	r3, [r7, #28]
 802a5c6:	4413      	add	r3, r2
 802a5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a5cc:	691b      	ldr	r3, [r3, #16]
 802a5ce:	69ba      	ldr	r2, [r7, #24]
 802a5d0:	0151      	lsls	r1, r2, #5
 802a5d2:	69fa      	ldr	r2, [r7, #28]
 802a5d4:	440a      	add	r2, r1
 802a5d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a5da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802a5de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802a5e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 802a5e4:	69bb      	ldr	r3, [r7, #24]
 802a5e6:	015a      	lsls	r2, r3, #5
 802a5e8:	69fb      	ldr	r3, [r7, #28]
 802a5ea:	4413      	add	r3, r2
 802a5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a5f0:	691a      	ldr	r2, [r3, #16]
 802a5f2:	68bb      	ldr	r3, [r7, #8]
 802a5f4:	6959      	ldr	r1, [r3, #20]
 802a5f6:	68bb      	ldr	r3, [r7, #8]
 802a5f8:	689b      	ldr	r3, [r3, #8]
 802a5fa:	440b      	add	r3, r1
 802a5fc:	1e59      	subs	r1, r3, #1
 802a5fe:	68bb      	ldr	r3, [r7, #8]
 802a600:	689b      	ldr	r3, [r3, #8]
 802a602:	fbb1 f3f3 	udiv	r3, r1, r3
 802a606:	04d9      	lsls	r1, r3, #19
 802a608:	4b9d      	ldr	r3, [pc, #628]	; (802a880 <USB_EPStartXfer+0x370>)
 802a60a:	400b      	ands	r3, r1
 802a60c:	69b9      	ldr	r1, [r7, #24]
 802a60e:	0148      	lsls	r0, r1, #5
 802a610:	69f9      	ldr	r1, [r7, #28]
 802a612:	4401      	add	r1, r0
 802a614:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802a618:	4313      	orrs	r3, r2
 802a61a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802a61c:	69bb      	ldr	r3, [r7, #24]
 802a61e:	015a      	lsls	r2, r3, #5
 802a620:	69fb      	ldr	r3, [r7, #28]
 802a622:	4413      	add	r3, r2
 802a624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a628:	691a      	ldr	r2, [r3, #16]
 802a62a:	68bb      	ldr	r3, [r7, #8]
 802a62c:	695b      	ldr	r3, [r3, #20]
 802a62e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802a632:	69b9      	ldr	r1, [r7, #24]
 802a634:	0148      	lsls	r0, r1, #5
 802a636:	69f9      	ldr	r1, [r7, #28]
 802a638:	4401      	add	r1, r0
 802a63a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802a63e:	4313      	orrs	r3, r2
 802a640:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 802a642:	68bb      	ldr	r3, [r7, #8]
 802a644:	78db      	ldrb	r3, [r3, #3]
 802a646:	2b01      	cmp	r3, #1
 802a648:	d11f      	bne.n	802a68a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 802a64a:	69bb      	ldr	r3, [r7, #24]
 802a64c:	015a      	lsls	r2, r3, #5
 802a64e:	69fb      	ldr	r3, [r7, #28]
 802a650:	4413      	add	r3, r2
 802a652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a656:	691b      	ldr	r3, [r3, #16]
 802a658:	69ba      	ldr	r2, [r7, #24]
 802a65a:	0151      	lsls	r1, r2, #5
 802a65c:	69fa      	ldr	r2, [r7, #28]
 802a65e:	440a      	add	r2, r1
 802a660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a664:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 802a668:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 802a66a:	69bb      	ldr	r3, [r7, #24]
 802a66c:	015a      	lsls	r2, r3, #5
 802a66e:	69fb      	ldr	r3, [r7, #28]
 802a670:	4413      	add	r3, r2
 802a672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a676:	691b      	ldr	r3, [r3, #16]
 802a678:	69ba      	ldr	r2, [r7, #24]
 802a67a:	0151      	lsls	r1, r2, #5
 802a67c:	69fa      	ldr	r2, [r7, #28]
 802a67e:	440a      	add	r2, r1
 802a680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a684:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802a688:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 802a68a:	79fb      	ldrb	r3, [r7, #7]
 802a68c:	2b01      	cmp	r3, #1
 802a68e:	d14b      	bne.n	802a728 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802a690:	68bb      	ldr	r3, [r7, #8]
 802a692:	691b      	ldr	r3, [r3, #16]
 802a694:	2b00      	cmp	r3, #0
 802a696:	d009      	beq.n	802a6ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802a698:	69bb      	ldr	r3, [r7, #24]
 802a69a:	015a      	lsls	r2, r3, #5
 802a69c:	69fb      	ldr	r3, [r7, #28]
 802a69e:	4413      	add	r3, r2
 802a6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a6a4:	461a      	mov	r2, r3
 802a6a6:	68bb      	ldr	r3, [r7, #8]
 802a6a8:	691b      	ldr	r3, [r3, #16]
 802a6aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 802a6ac:	68bb      	ldr	r3, [r7, #8]
 802a6ae:	78db      	ldrb	r3, [r3, #3]
 802a6b0:	2b01      	cmp	r3, #1
 802a6b2:	d128      	bne.n	802a706 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802a6b4:	69fb      	ldr	r3, [r7, #28]
 802a6b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a6ba:	689b      	ldr	r3, [r3, #8]
 802a6bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a6c0:	2b00      	cmp	r3, #0
 802a6c2:	d110      	bne.n	802a6e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802a6c4:	69bb      	ldr	r3, [r7, #24]
 802a6c6:	015a      	lsls	r2, r3, #5
 802a6c8:	69fb      	ldr	r3, [r7, #28]
 802a6ca:	4413      	add	r3, r2
 802a6cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a6d0:	681b      	ldr	r3, [r3, #0]
 802a6d2:	69ba      	ldr	r2, [r7, #24]
 802a6d4:	0151      	lsls	r1, r2, #5
 802a6d6:	69fa      	ldr	r2, [r7, #28]
 802a6d8:	440a      	add	r2, r1
 802a6da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a6de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802a6e2:	6013      	str	r3, [r2, #0]
 802a6e4:	e00f      	b.n	802a706 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802a6e6:	69bb      	ldr	r3, [r7, #24]
 802a6e8:	015a      	lsls	r2, r3, #5
 802a6ea:	69fb      	ldr	r3, [r7, #28]
 802a6ec:	4413      	add	r3, r2
 802a6ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a6f2:	681b      	ldr	r3, [r3, #0]
 802a6f4:	69ba      	ldr	r2, [r7, #24]
 802a6f6:	0151      	lsls	r1, r2, #5
 802a6f8:	69fa      	ldr	r2, [r7, #28]
 802a6fa:	440a      	add	r2, r1
 802a6fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a704:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802a706:	69bb      	ldr	r3, [r7, #24]
 802a708:	015a      	lsls	r2, r3, #5
 802a70a:	69fb      	ldr	r3, [r7, #28]
 802a70c:	4413      	add	r3, r2
 802a70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a712:	681b      	ldr	r3, [r3, #0]
 802a714:	69ba      	ldr	r2, [r7, #24]
 802a716:	0151      	lsls	r1, r2, #5
 802a718:	69fa      	ldr	r2, [r7, #28]
 802a71a:	440a      	add	r2, r1
 802a71c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a720:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802a724:	6013      	str	r3, [r2, #0]
 802a726:	e12f      	b.n	802a988 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802a728:	69bb      	ldr	r3, [r7, #24]
 802a72a:	015a      	lsls	r2, r3, #5
 802a72c:	69fb      	ldr	r3, [r7, #28]
 802a72e:	4413      	add	r3, r2
 802a730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a734:	681b      	ldr	r3, [r3, #0]
 802a736:	69ba      	ldr	r2, [r7, #24]
 802a738:	0151      	lsls	r1, r2, #5
 802a73a:	69fa      	ldr	r2, [r7, #28]
 802a73c:	440a      	add	r2, r1
 802a73e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a742:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802a746:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 802a748:	68bb      	ldr	r3, [r7, #8]
 802a74a:	78db      	ldrb	r3, [r3, #3]
 802a74c:	2b01      	cmp	r3, #1
 802a74e:	d015      	beq.n	802a77c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 802a750:	68bb      	ldr	r3, [r7, #8]
 802a752:	695b      	ldr	r3, [r3, #20]
 802a754:	2b00      	cmp	r3, #0
 802a756:	f000 8117 	beq.w	802a988 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802a75a:	69fb      	ldr	r3, [r7, #28]
 802a75c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802a762:	68bb      	ldr	r3, [r7, #8]
 802a764:	781b      	ldrb	r3, [r3, #0]
 802a766:	f003 030f 	and.w	r3, r3, #15
 802a76a:	2101      	movs	r1, #1
 802a76c:	fa01 f303 	lsl.w	r3, r1, r3
 802a770:	69f9      	ldr	r1, [r7, #28]
 802a772:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a776:	4313      	orrs	r3, r2
 802a778:	634b      	str	r3, [r1, #52]	; 0x34
 802a77a:	e105      	b.n	802a988 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802a77c:	69fb      	ldr	r3, [r7, #28]
 802a77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a782:	689b      	ldr	r3, [r3, #8]
 802a784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a788:	2b00      	cmp	r3, #0
 802a78a:	d110      	bne.n	802a7ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802a78c:	69bb      	ldr	r3, [r7, #24]
 802a78e:	015a      	lsls	r2, r3, #5
 802a790:	69fb      	ldr	r3, [r7, #28]
 802a792:	4413      	add	r3, r2
 802a794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a798:	681b      	ldr	r3, [r3, #0]
 802a79a:	69ba      	ldr	r2, [r7, #24]
 802a79c:	0151      	lsls	r1, r2, #5
 802a79e:	69fa      	ldr	r2, [r7, #28]
 802a7a0:	440a      	add	r2, r1
 802a7a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a7a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802a7aa:	6013      	str	r3, [r2, #0]
 802a7ac:	e00f      	b.n	802a7ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802a7ae:	69bb      	ldr	r3, [r7, #24]
 802a7b0:	015a      	lsls	r2, r3, #5
 802a7b2:	69fb      	ldr	r3, [r7, #28]
 802a7b4:	4413      	add	r3, r2
 802a7b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a7ba:	681b      	ldr	r3, [r3, #0]
 802a7bc:	69ba      	ldr	r2, [r7, #24]
 802a7be:	0151      	lsls	r1, r2, #5
 802a7c0:	69fa      	ldr	r2, [r7, #28]
 802a7c2:	440a      	add	r2, r1
 802a7c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a7c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a7cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 802a7ce:	68bb      	ldr	r3, [r7, #8]
 802a7d0:	68d9      	ldr	r1, [r3, #12]
 802a7d2:	68bb      	ldr	r3, [r7, #8]
 802a7d4:	781a      	ldrb	r2, [r3, #0]
 802a7d6:	68bb      	ldr	r3, [r7, #8]
 802a7d8:	695b      	ldr	r3, [r3, #20]
 802a7da:	b298      	uxth	r0, r3
 802a7dc:	79fb      	ldrb	r3, [r7, #7]
 802a7de:	9300      	str	r3, [sp, #0]
 802a7e0:	4603      	mov	r3, r0
 802a7e2:	68f8      	ldr	r0, [r7, #12]
 802a7e4:	f000 fa2b 	bl	802ac3e <USB_WritePacket>
 802a7e8:	e0ce      	b.n	802a988 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802a7ea:	69bb      	ldr	r3, [r7, #24]
 802a7ec:	015a      	lsls	r2, r3, #5
 802a7ee:	69fb      	ldr	r3, [r7, #28]
 802a7f0:	4413      	add	r3, r2
 802a7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a7f6:	691b      	ldr	r3, [r3, #16]
 802a7f8:	69ba      	ldr	r2, [r7, #24]
 802a7fa:	0151      	lsls	r1, r2, #5
 802a7fc:	69fa      	ldr	r2, [r7, #28]
 802a7fe:	440a      	add	r2, r1
 802a800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a804:	0cdb      	lsrs	r3, r3, #19
 802a806:	04db      	lsls	r3, r3, #19
 802a808:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802a80a:	69bb      	ldr	r3, [r7, #24]
 802a80c:	015a      	lsls	r2, r3, #5
 802a80e:	69fb      	ldr	r3, [r7, #28]
 802a810:	4413      	add	r3, r2
 802a812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a816:	691b      	ldr	r3, [r3, #16]
 802a818:	69ba      	ldr	r2, [r7, #24]
 802a81a:	0151      	lsls	r1, r2, #5
 802a81c:	69fa      	ldr	r2, [r7, #28]
 802a81e:	440a      	add	r2, r1
 802a820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a824:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802a828:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802a82c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 802a82e:	68bb      	ldr	r3, [r7, #8]
 802a830:	695b      	ldr	r3, [r3, #20]
 802a832:	2b00      	cmp	r3, #0
 802a834:	d126      	bne.n	802a884 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 802a836:	69bb      	ldr	r3, [r7, #24]
 802a838:	015a      	lsls	r2, r3, #5
 802a83a:	69fb      	ldr	r3, [r7, #28]
 802a83c:	4413      	add	r3, r2
 802a83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a842:	691a      	ldr	r2, [r3, #16]
 802a844:	68bb      	ldr	r3, [r7, #8]
 802a846:	689b      	ldr	r3, [r3, #8]
 802a848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802a84c:	69b9      	ldr	r1, [r7, #24]
 802a84e:	0148      	lsls	r0, r1, #5
 802a850:	69f9      	ldr	r1, [r7, #28]
 802a852:	4401      	add	r1, r0
 802a854:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802a858:	4313      	orrs	r3, r2
 802a85a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802a85c:	69bb      	ldr	r3, [r7, #24]
 802a85e:	015a      	lsls	r2, r3, #5
 802a860:	69fb      	ldr	r3, [r7, #28]
 802a862:	4413      	add	r3, r2
 802a864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a868:	691b      	ldr	r3, [r3, #16]
 802a86a:	69ba      	ldr	r2, [r7, #24]
 802a86c:	0151      	lsls	r1, r2, #5
 802a86e:	69fa      	ldr	r2, [r7, #28]
 802a870:	440a      	add	r2, r1
 802a872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802a87a:	6113      	str	r3, [r2, #16]
 802a87c:	e036      	b.n	802a8ec <USB_EPStartXfer+0x3dc>
 802a87e:	bf00      	nop
 802a880:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 802a884:	68bb      	ldr	r3, [r7, #8]
 802a886:	695a      	ldr	r2, [r3, #20]
 802a888:	68bb      	ldr	r3, [r7, #8]
 802a88a:	689b      	ldr	r3, [r3, #8]
 802a88c:	4413      	add	r3, r2
 802a88e:	1e5a      	subs	r2, r3, #1
 802a890:	68bb      	ldr	r3, [r7, #8]
 802a892:	689b      	ldr	r3, [r3, #8]
 802a894:	fbb2 f3f3 	udiv	r3, r2, r3
 802a898:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 802a89a:	69bb      	ldr	r3, [r7, #24]
 802a89c:	015a      	lsls	r2, r3, #5
 802a89e:	69fb      	ldr	r3, [r7, #28]
 802a8a0:	4413      	add	r3, r2
 802a8a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a8a6:	691a      	ldr	r2, [r3, #16]
 802a8a8:	8afb      	ldrh	r3, [r7, #22]
 802a8aa:	04d9      	lsls	r1, r3, #19
 802a8ac:	4b39      	ldr	r3, [pc, #228]	; (802a994 <USB_EPStartXfer+0x484>)
 802a8ae:	400b      	ands	r3, r1
 802a8b0:	69b9      	ldr	r1, [r7, #24]
 802a8b2:	0148      	lsls	r0, r1, #5
 802a8b4:	69f9      	ldr	r1, [r7, #28]
 802a8b6:	4401      	add	r1, r0
 802a8b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802a8bc:	4313      	orrs	r3, r2
 802a8be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 802a8c0:	69bb      	ldr	r3, [r7, #24]
 802a8c2:	015a      	lsls	r2, r3, #5
 802a8c4:	69fb      	ldr	r3, [r7, #28]
 802a8c6:	4413      	add	r3, r2
 802a8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a8cc:	691a      	ldr	r2, [r3, #16]
 802a8ce:	68bb      	ldr	r3, [r7, #8]
 802a8d0:	689b      	ldr	r3, [r3, #8]
 802a8d2:	8af9      	ldrh	r1, [r7, #22]
 802a8d4:	fb01 f303 	mul.w	r3, r1, r3
 802a8d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802a8dc:	69b9      	ldr	r1, [r7, #24]
 802a8de:	0148      	lsls	r0, r1, #5
 802a8e0:	69f9      	ldr	r1, [r7, #28]
 802a8e2:	4401      	add	r1, r0
 802a8e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802a8e8:	4313      	orrs	r3, r2
 802a8ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802a8ec:	79fb      	ldrb	r3, [r7, #7]
 802a8ee:	2b01      	cmp	r3, #1
 802a8f0:	d10d      	bne.n	802a90e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802a8f2:	68bb      	ldr	r3, [r7, #8]
 802a8f4:	68db      	ldr	r3, [r3, #12]
 802a8f6:	2b00      	cmp	r3, #0
 802a8f8:	d009      	beq.n	802a90e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802a8fa:	68bb      	ldr	r3, [r7, #8]
 802a8fc:	68d9      	ldr	r1, [r3, #12]
 802a8fe:	69bb      	ldr	r3, [r7, #24]
 802a900:	015a      	lsls	r2, r3, #5
 802a902:	69fb      	ldr	r3, [r7, #28]
 802a904:	4413      	add	r3, r2
 802a906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a90a:	460a      	mov	r2, r1
 802a90c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 802a90e:	68bb      	ldr	r3, [r7, #8]
 802a910:	78db      	ldrb	r3, [r3, #3]
 802a912:	2b01      	cmp	r3, #1
 802a914:	d128      	bne.n	802a968 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802a916:	69fb      	ldr	r3, [r7, #28]
 802a918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a91c:	689b      	ldr	r3, [r3, #8]
 802a91e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a922:	2b00      	cmp	r3, #0
 802a924:	d110      	bne.n	802a948 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 802a926:	69bb      	ldr	r3, [r7, #24]
 802a928:	015a      	lsls	r2, r3, #5
 802a92a:	69fb      	ldr	r3, [r7, #28]
 802a92c:	4413      	add	r3, r2
 802a92e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a932:	681b      	ldr	r3, [r3, #0]
 802a934:	69ba      	ldr	r2, [r7, #24]
 802a936:	0151      	lsls	r1, r2, #5
 802a938:	69fa      	ldr	r2, [r7, #28]
 802a93a:	440a      	add	r2, r1
 802a93c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802a944:	6013      	str	r3, [r2, #0]
 802a946:	e00f      	b.n	802a968 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 802a948:	69bb      	ldr	r3, [r7, #24]
 802a94a:	015a      	lsls	r2, r3, #5
 802a94c:	69fb      	ldr	r3, [r7, #28]
 802a94e:	4413      	add	r3, r2
 802a950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a954:	681b      	ldr	r3, [r3, #0]
 802a956:	69ba      	ldr	r2, [r7, #24]
 802a958:	0151      	lsls	r1, r2, #5
 802a95a:	69fa      	ldr	r2, [r7, #28]
 802a95c:	440a      	add	r2, r1
 802a95e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a966:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802a968:	69bb      	ldr	r3, [r7, #24]
 802a96a:	015a      	lsls	r2, r3, #5
 802a96c:	69fb      	ldr	r3, [r7, #28]
 802a96e:	4413      	add	r3, r2
 802a970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a974:	681b      	ldr	r3, [r3, #0]
 802a976:	69ba      	ldr	r2, [r7, #24]
 802a978:	0151      	lsls	r1, r2, #5
 802a97a:	69fa      	ldr	r2, [r7, #28]
 802a97c:	440a      	add	r2, r1
 802a97e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802a982:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802a986:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802a988:	2300      	movs	r3, #0
}
 802a98a:	4618      	mov	r0, r3
 802a98c:	3720      	adds	r7, #32
 802a98e:	46bd      	mov	sp, r7
 802a990:	bd80      	pop	{r7, pc}
 802a992:	bf00      	nop
 802a994:	1ff80000 	.word	0x1ff80000

0802a998 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802a998:	b480      	push	{r7}
 802a99a:	b087      	sub	sp, #28
 802a99c:	af00      	add	r7, sp, #0
 802a99e:	60f8      	str	r0, [r7, #12]
 802a9a0:	60b9      	str	r1, [r7, #8]
 802a9a2:	4613      	mov	r3, r2
 802a9a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a9a6:	68fb      	ldr	r3, [r7, #12]
 802a9a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 802a9aa:	68bb      	ldr	r3, [r7, #8]
 802a9ac:	781b      	ldrb	r3, [r3, #0]
 802a9ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802a9b0:	68bb      	ldr	r3, [r7, #8]
 802a9b2:	785b      	ldrb	r3, [r3, #1]
 802a9b4:	2b01      	cmp	r3, #1
 802a9b6:	f040 80cd 	bne.w	802ab54 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802a9ba:	68bb      	ldr	r3, [r7, #8]
 802a9bc:	695b      	ldr	r3, [r3, #20]
 802a9be:	2b00      	cmp	r3, #0
 802a9c0:	d132      	bne.n	802aa28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802a9c2:	693b      	ldr	r3, [r7, #16]
 802a9c4:	015a      	lsls	r2, r3, #5
 802a9c6:	697b      	ldr	r3, [r7, #20]
 802a9c8:	4413      	add	r3, r2
 802a9ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a9ce:	691b      	ldr	r3, [r3, #16]
 802a9d0:	693a      	ldr	r2, [r7, #16]
 802a9d2:	0151      	lsls	r1, r2, #5
 802a9d4:	697a      	ldr	r2, [r7, #20]
 802a9d6:	440a      	add	r2, r1
 802a9d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802a9dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802a9e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802a9e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802a9e6:	693b      	ldr	r3, [r7, #16]
 802a9e8:	015a      	lsls	r2, r3, #5
 802a9ea:	697b      	ldr	r3, [r7, #20]
 802a9ec:	4413      	add	r3, r2
 802a9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a9f2:	691b      	ldr	r3, [r3, #16]
 802a9f4:	693a      	ldr	r2, [r7, #16]
 802a9f6:	0151      	lsls	r1, r2, #5
 802a9f8:	697a      	ldr	r2, [r7, #20]
 802a9fa:	440a      	add	r2, r1
 802a9fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802aa00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802aa04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802aa06:	693b      	ldr	r3, [r7, #16]
 802aa08:	015a      	lsls	r2, r3, #5
 802aa0a:	697b      	ldr	r3, [r7, #20]
 802aa0c:	4413      	add	r3, r2
 802aa0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aa12:	691b      	ldr	r3, [r3, #16]
 802aa14:	693a      	ldr	r2, [r7, #16]
 802aa16:	0151      	lsls	r1, r2, #5
 802aa18:	697a      	ldr	r2, [r7, #20]
 802aa1a:	440a      	add	r2, r1
 802aa1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802aa20:	0cdb      	lsrs	r3, r3, #19
 802aa22:	04db      	lsls	r3, r3, #19
 802aa24:	6113      	str	r3, [r2, #16]
 802aa26:	e04e      	b.n	802aac6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802aa28:	693b      	ldr	r3, [r7, #16]
 802aa2a:	015a      	lsls	r2, r3, #5
 802aa2c:	697b      	ldr	r3, [r7, #20]
 802aa2e:	4413      	add	r3, r2
 802aa30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aa34:	691b      	ldr	r3, [r3, #16]
 802aa36:	693a      	ldr	r2, [r7, #16]
 802aa38:	0151      	lsls	r1, r2, #5
 802aa3a:	697a      	ldr	r2, [r7, #20]
 802aa3c:	440a      	add	r2, r1
 802aa3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802aa42:	0cdb      	lsrs	r3, r3, #19
 802aa44:	04db      	lsls	r3, r3, #19
 802aa46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802aa48:	693b      	ldr	r3, [r7, #16]
 802aa4a:	015a      	lsls	r2, r3, #5
 802aa4c:	697b      	ldr	r3, [r7, #20]
 802aa4e:	4413      	add	r3, r2
 802aa50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aa54:	691b      	ldr	r3, [r3, #16]
 802aa56:	693a      	ldr	r2, [r7, #16]
 802aa58:	0151      	lsls	r1, r2, #5
 802aa5a:	697a      	ldr	r2, [r7, #20]
 802aa5c:	440a      	add	r2, r1
 802aa5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802aa62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802aa66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802aa6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 802aa6c:	68bb      	ldr	r3, [r7, #8]
 802aa6e:	695a      	ldr	r2, [r3, #20]
 802aa70:	68bb      	ldr	r3, [r7, #8]
 802aa72:	689b      	ldr	r3, [r3, #8]
 802aa74:	429a      	cmp	r2, r3
 802aa76:	d903      	bls.n	802aa80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 802aa78:	68bb      	ldr	r3, [r7, #8]
 802aa7a:	689a      	ldr	r2, [r3, #8]
 802aa7c:	68bb      	ldr	r3, [r7, #8]
 802aa7e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802aa80:	693b      	ldr	r3, [r7, #16]
 802aa82:	015a      	lsls	r2, r3, #5
 802aa84:	697b      	ldr	r3, [r7, #20]
 802aa86:	4413      	add	r3, r2
 802aa88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aa8c:	691b      	ldr	r3, [r3, #16]
 802aa8e:	693a      	ldr	r2, [r7, #16]
 802aa90:	0151      	lsls	r1, r2, #5
 802aa92:	697a      	ldr	r2, [r7, #20]
 802aa94:	440a      	add	r2, r1
 802aa96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802aa9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802aa9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802aaa0:	693b      	ldr	r3, [r7, #16]
 802aaa2:	015a      	lsls	r2, r3, #5
 802aaa4:	697b      	ldr	r3, [r7, #20]
 802aaa6:	4413      	add	r3, r2
 802aaa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aaac:	691a      	ldr	r2, [r3, #16]
 802aaae:	68bb      	ldr	r3, [r7, #8]
 802aab0:	695b      	ldr	r3, [r3, #20]
 802aab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802aab6:	6939      	ldr	r1, [r7, #16]
 802aab8:	0148      	lsls	r0, r1, #5
 802aaba:	6979      	ldr	r1, [r7, #20]
 802aabc:	4401      	add	r1, r0
 802aabe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802aac2:	4313      	orrs	r3, r2
 802aac4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802aac6:	79fb      	ldrb	r3, [r7, #7]
 802aac8:	2b01      	cmp	r3, #1
 802aaca:	d11e      	bne.n	802ab0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802aacc:	68bb      	ldr	r3, [r7, #8]
 802aace:	691b      	ldr	r3, [r3, #16]
 802aad0:	2b00      	cmp	r3, #0
 802aad2:	d009      	beq.n	802aae8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802aad4:	693b      	ldr	r3, [r7, #16]
 802aad6:	015a      	lsls	r2, r3, #5
 802aad8:	697b      	ldr	r3, [r7, #20]
 802aada:	4413      	add	r3, r2
 802aadc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aae0:	461a      	mov	r2, r3
 802aae2:	68bb      	ldr	r3, [r7, #8]
 802aae4:	691b      	ldr	r3, [r3, #16]
 802aae6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802aae8:	693b      	ldr	r3, [r7, #16]
 802aaea:	015a      	lsls	r2, r3, #5
 802aaec:	697b      	ldr	r3, [r7, #20]
 802aaee:	4413      	add	r3, r2
 802aaf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802aaf4:	681b      	ldr	r3, [r3, #0]
 802aaf6:	693a      	ldr	r2, [r7, #16]
 802aaf8:	0151      	lsls	r1, r2, #5
 802aafa:	697a      	ldr	r2, [r7, #20]
 802aafc:	440a      	add	r2, r1
 802aafe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ab02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802ab06:	6013      	str	r3, [r2, #0]
 802ab08:	e092      	b.n	802ac30 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802ab0a:	693b      	ldr	r3, [r7, #16]
 802ab0c:	015a      	lsls	r2, r3, #5
 802ab0e:	697b      	ldr	r3, [r7, #20]
 802ab10:	4413      	add	r3, r2
 802ab12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ab16:	681b      	ldr	r3, [r3, #0]
 802ab18:	693a      	ldr	r2, [r7, #16]
 802ab1a:	0151      	lsls	r1, r2, #5
 802ab1c:	697a      	ldr	r2, [r7, #20]
 802ab1e:	440a      	add	r2, r1
 802ab20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ab24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802ab28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 802ab2a:	68bb      	ldr	r3, [r7, #8]
 802ab2c:	695b      	ldr	r3, [r3, #20]
 802ab2e:	2b00      	cmp	r3, #0
 802ab30:	d07e      	beq.n	802ac30 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802ab32:	697b      	ldr	r3, [r7, #20]
 802ab34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ab38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802ab3a:	68bb      	ldr	r3, [r7, #8]
 802ab3c:	781b      	ldrb	r3, [r3, #0]
 802ab3e:	f003 030f 	and.w	r3, r3, #15
 802ab42:	2101      	movs	r1, #1
 802ab44:	fa01 f303 	lsl.w	r3, r1, r3
 802ab48:	6979      	ldr	r1, [r7, #20]
 802ab4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802ab4e:	4313      	orrs	r3, r2
 802ab50:	634b      	str	r3, [r1, #52]	; 0x34
 802ab52:	e06d      	b.n	802ac30 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802ab54:	693b      	ldr	r3, [r7, #16]
 802ab56:	015a      	lsls	r2, r3, #5
 802ab58:	697b      	ldr	r3, [r7, #20]
 802ab5a:	4413      	add	r3, r2
 802ab5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ab60:	691b      	ldr	r3, [r3, #16]
 802ab62:	693a      	ldr	r2, [r7, #16]
 802ab64:	0151      	lsls	r1, r2, #5
 802ab66:	697a      	ldr	r2, [r7, #20]
 802ab68:	440a      	add	r2, r1
 802ab6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ab6e:	0cdb      	lsrs	r3, r3, #19
 802ab70:	04db      	lsls	r3, r3, #19
 802ab72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802ab74:	693b      	ldr	r3, [r7, #16]
 802ab76:	015a      	lsls	r2, r3, #5
 802ab78:	697b      	ldr	r3, [r7, #20]
 802ab7a:	4413      	add	r3, r2
 802ab7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ab80:	691b      	ldr	r3, [r3, #16]
 802ab82:	693a      	ldr	r2, [r7, #16]
 802ab84:	0151      	lsls	r1, r2, #5
 802ab86:	697a      	ldr	r2, [r7, #20]
 802ab88:	440a      	add	r2, r1
 802ab8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ab8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802ab92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802ab96:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 802ab98:	68bb      	ldr	r3, [r7, #8]
 802ab9a:	695b      	ldr	r3, [r3, #20]
 802ab9c:	2b00      	cmp	r3, #0
 802ab9e:	d003      	beq.n	802aba8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 802aba0:	68bb      	ldr	r3, [r7, #8]
 802aba2:	689a      	ldr	r2, [r3, #8]
 802aba4:	68bb      	ldr	r3, [r7, #8]
 802aba6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802aba8:	693b      	ldr	r3, [r7, #16]
 802abaa:	015a      	lsls	r2, r3, #5
 802abac:	697b      	ldr	r3, [r7, #20]
 802abae:	4413      	add	r3, r2
 802abb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802abb4:	691b      	ldr	r3, [r3, #16]
 802abb6:	693a      	ldr	r2, [r7, #16]
 802abb8:	0151      	lsls	r1, r2, #5
 802abba:	697a      	ldr	r2, [r7, #20]
 802abbc:	440a      	add	r2, r1
 802abbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802abc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802abc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 802abc8:	693b      	ldr	r3, [r7, #16]
 802abca:	015a      	lsls	r2, r3, #5
 802abcc:	697b      	ldr	r3, [r7, #20]
 802abce:	4413      	add	r3, r2
 802abd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802abd4:	691a      	ldr	r2, [r3, #16]
 802abd6:	68bb      	ldr	r3, [r7, #8]
 802abd8:	689b      	ldr	r3, [r3, #8]
 802abda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802abde:	6939      	ldr	r1, [r7, #16]
 802abe0:	0148      	lsls	r0, r1, #5
 802abe2:	6979      	ldr	r1, [r7, #20]
 802abe4:	4401      	add	r1, r0
 802abe6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802abea:	4313      	orrs	r3, r2
 802abec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 802abee:	79fb      	ldrb	r3, [r7, #7]
 802abf0:	2b01      	cmp	r3, #1
 802abf2:	d10d      	bne.n	802ac10 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802abf4:	68bb      	ldr	r3, [r7, #8]
 802abf6:	68db      	ldr	r3, [r3, #12]
 802abf8:	2b00      	cmp	r3, #0
 802abfa:	d009      	beq.n	802ac10 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802abfc:	68bb      	ldr	r3, [r7, #8]
 802abfe:	68d9      	ldr	r1, [r3, #12]
 802ac00:	693b      	ldr	r3, [r7, #16]
 802ac02:	015a      	lsls	r2, r3, #5
 802ac04:	697b      	ldr	r3, [r7, #20]
 802ac06:	4413      	add	r3, r2
 802ac08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ac0c:	460a      	mov	r2, r1
 802ac0e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802ac10:	693b      	ldr	r3, [r7, #16]
 802ac12:	015a      	lsls	r2, r3, #5
 802ac14:	697b      	ldr	r3, [r7, #20]
 802ac16:	4413      	add	r3, r2
 802ac18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ac1c:	681b      	ldr	r3, [r3, #0]
 802ac1e:	693a      	ldr	r2, [r7, #16]
 802ac20:	0151      	lsls	r1, r2, #5
 802ac22:	697a      	ldr	r2, [r7, #20]
 802ac24:	440a      	add	r2, r1
 802ac26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ac2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802ac2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802ac30:	2300      	movs	r3, #0
}
 802ac32:	4618      	mov	r0, r3
 802ac34:	371c      	adds	r7, #28
 802ac36:	46bd      	mov	sp, r7
 802ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac3c:	4770      	bx	lr

0802ac3e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802ac3e:	b480      	push	{r7}
 802ac40:	b089      	sub	sp, #36	; 0x24
 802ac42:	af00      	add	r7, sp, #0
 802ac44:	60f8      	str	r0, [r7, #12]
 802ac46:	60b9      	str	r1, [r7, #8]
 802ac48:	4611      	mov	r1, r2
 802ac4a:	461a      	mov	r2, r3
 802ac4c:	460b      	mov	r3, r1
 802ac4e:	71fb      	strb	r3, [r7, #7]
 802ac50:	4613      	mov	r3, r2
 802ac52:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ac54:	68fb      	ldr	r3, [r7, #12]
 802ac56:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 802ac58:	68bb      	ldr	r3, [r7, #8]
 802ac5a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 802ac5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802ac60:	2b00      	cmp	r3, #0
 802ac62:	d11a      	bne.n	802ac9a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802ac64:	88bb      	ldrh	r3, [r7, #4]
 802ac66:	3303      	adds	r3, #3
 802ac68:	089b      	lsrs	r3, r3, #2
 802ac6a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802ac6c:	2300      	movs	r3, #0
 802ac6e:	61bb      	str	r3, [r7, #24]
 802ac70:	e00f      	b.n	802ac92 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802ac72:	79fb      	ldrb	r3, [r7, #7]
 802ac74:	031a      	lsls	r2, r3, #12
 802ac76:	697b      	ldr	r3, [r7, #20]
 802ac78:	4413      	add	r3, r2
 802ac7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802ac7e:	461a      	mov	r2, r3
 802ac80:	69fb      	ldr	r3, [r7, #28]
 802ac82:	681b      	ldr	r3, [r3, #0]
 802ac84:	6013      	str	r3, [r2, #0]
      pSrc++;
 802ac86:	69fb      	ldr	r3, [r7, #28]
 802ac88:	3304      	adds	r3, #4
 802ac8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802ac8c:	69bb      	ldr	r3, [r7, #24]
 802ac8e:	3301      	adds	r3, #1
 802ac90:	61bb      	str	r3, [r7, #24]
 802ac92:	69ba      	ldr	r2, [r7, #24]
 802ac94:	693b      	ldr	r3, [r7, #16]
 802ac96:	429a      	cmp	r2, r3
 802ac98:	d3eb      	bcc.n	802ac72 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802ac9a:	2300      	movs	r3, #0
}
 802ac9c:	4618      	mov	r0, r3
 802ac9e:	3724      	adds	r7, #36	; 0x24
 802aca0:	46bd      	mov	sp, r7
 802aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aca6:	4770      	bx	lr

0802aca8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802aca8:	b480      	push	{r7}
 802acaa:	b089      	sub	sp, #36	; 0x24
 802acac:	af00      	add	r7, sp, #0
 802acae:	60f8      	str	r0, [r7, #12]
 802acb0:	60b9      	str	r1, [r7, #8]
 802acb2:	4613      	mov	r3, r2
 802acb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802acb6:	68fb      	ldr	r3, [r7, #12]
 802acb8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 802acba:	68bb      	ldr	r3, [r7, #8]
 802acbc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 802acbe:	88fb      	ldrh	r3, [r7, #6]
 802acc0:	3303      	adds	r3, #3
 802acc2:	089b      	lsrs	r3, r3, #2
 802acc4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 802acc6:	2300      	movs	r3, #0
 802acc8:	61bb      	str	r3, [r7, #24]
 802acca:	e00b      	b.n	802ace4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802accc:	697b      	ldr	r3, [r7, #20]
 802acce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802acd2:	681a      	ldr	r2, [r3, #0]
 802acd4:	69fb      	ldr	r3, [r7, #28]
 802acd6:	601a      	str	r2, [r3, #0]
    pDest++;
 802acd8:	69fb      	ldr	r3, [r7, #28]
 802acda:	3304      	adds	r3, #4
 802acdc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 802acde:	69bb      	ldr	r3, [r7, #24]
 802ace0:	3301      	adds	r3, #1
 802ace2:	61bb      	str	r3, [r7, #24]
 802ace4:	69ba      	ldr	r2, [r7, #24]
 802ace6:	693b      	ldr	r3, [r7, #16]
 802ace8:	429a      	cmp	r2, r3
 802acea:	d3ef      	bcc.n	802accc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 802acec:	69fb      	ldr	r3, [r7, #28]
}
 802acee:	4618      	mov	r0, r3
 802acf0:	3724      	adds	r7, #36	; 0x24
 802acf2:	46bd      	mov	sp, r7
 802acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acf8:	4770      	bx	lr

0802acfa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802acfa:	b480      	push	{r7}
 802acfc:	b085      	sub	sp, #20
 802acfe:	af00      	add	r7, sp, #0
 802ad00:	6078      	str	r0, [r7, #4]
 802ad02:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ad04:	687b      	ldr	r3, [r7, #4]
 802ad06:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802ad08:	683b      	ldr	r3, [r7, #0]
 802ad0a:	781b      	ldrb	r3, [r3, #0]
 802ad0c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802ad0e:	683b      	ldr	r3, [r7, #0]
 802ad10:	785b      	ldrb	r3, [r3, #1]
 802ad12:	2b01      	cmp	r3, #1
 802ad14:	d12c      	bne.n	802ad70 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 802ad16:	68bb      	ldr	r3, [r7, #8]
 802ad18:	015a      	lsls	r2, r3, #5
 802ad1a:	68fb      	ldr	r3, [r7, #12]
 802ad1c:	4413      	add	r3, r2
 802ad1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ad22:	681b      	ldr	r3, [r3, #0]
 802ad24:	2b00      	cmp	r3, #0
 802ad26:	db12      	blt.n	802ad4e <USB_EPSetStall+0x54>
 802ad28:	68bb      	ldr	r3, [r7, #8]
 802ad2a:	2b00      	cmp	r3, #0
 802ad2c:	d00f      	beq.n	802ad4e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 802ad2e:	68bb      	ldr	r3, [r7, #8]
 802ad30:	015a      	lsls	r2, r3, #5
 802ad32:	68fb      	ldr	r3, [r7, #12]
 802ad34:	4413      	add	r3, r2
 802ad36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ad3a:	681b      	ldr	r3, [r3, #0]
 802ad3c:	68ba      	ldr	r2, [r7, #8]
 802ad3e:	0151      	lsls	r1, r2, #5
 802ad40:	68fa      	ldr	r2, [r7, #12]
 802ad42:	440a      	add	r2, r1
 802ad44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ad48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802ad4c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 802ad4e:	68bb      	ldr	r3, [r7, #8]
 802ad50:	015a      	lsls	r2, r3, #5
 802ad52:	68fb      	ldr	r3, [r7, #12]
 802ad54:	4413      	add	r3, r2
 802ad56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ad5a:	681b      	ldr	r3, [r3, #0]
 802ad5c:	68ba      	ldr	r2, [r7, #8]
 802ad5e:	0151      	lsls	r1, r2, #5
 802ad60:	68fa      	ldr	r2, [r7, #12]
 802ad62:	440a      	add	r2, r1
 802ad64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ad68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802ad6c:	6013      	str	r3, [r2, #0]
 802ad6e:	e02b      	b.n	802adc8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 802ad70:	68bb      	ldr	r3, [r7, #8]
 802ad72:	015a      	lsls	r2, r3, #5
 802ad74:	68fb      	ldr	r3, [r7, #12]
 802ad76:	4413      	add	r3, r2
 802ad78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ad7c:	681b      	ldr	r3, [r3, #0]
 802ad7e:	2b00      	cmp	r3, #0
 802ad80:	db12      	blt.n	802ada8 <USB_EPSetStall+0xae>
 802ad82:	68bb      	ldr	r3, [r7, #8]
 802ad84:	2b00      	cmp	r3, #0
 802ad86:	d00f      	beq.n	802ada8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 802ad88:	68bb      	ldr	r3, [r7, #8]
 802ad8a:	015a      	lsls	r2, r3, #5
 802ad8c:	68fb      	ldr	r3, [r7, #12]
 802ad8e:	4413      	add	r3, r2
 802ad90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ad94:	681b      	ldr	r3, [r3, #0]
 802ad96:	68ba      	ldr	r2, [r7, #8]
 802ad98:	0151      	lsls	r1, r2, #5
 802ad9a:	68fa      	ldr	r2, [r7, #12]
 802ad9c:	440a      	add	r2, r1
 802ad9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ada2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802ada6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 802ada8:	68bb      	ldr	r3, [r7, #8]
 802adaa:	015a      	lsls	r2, r3, #5
 802adac:	68fb      	ldr	r3, [r7, #12]
 802adae:	4413      	add	r3, r2
 802adb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802adb4:	681b      	ldr	r3, [r3, #0]
 802adb6:	68ba      	ldr	r2, [r7, #8]
 802adb8:	0151      	lsls	r1, r2, #5
 802adba:	68fa      	ldr	r2, [r7, #12]
 802adbc:	440a      	add	r2, r1
 802adbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802adc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802adc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802adc8:	2300      	movs	r3, #0
}
 802adca:	4618      	mov	r0, r3
 802adcc:	3714      	adds	r7, #20
 802adce:	46bd      	mov	sp, r7
 802add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802add4:	4770      	bx	lr

0802add6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802add6:	b480      	push	{r7}
 802add8:	b085      	sub	sp, #20
 802adda:	af00      	add	r7, sp, #0
 802addc:	6078      	str	r0, [r7, #4]
 802adde:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ade0:	687b      	ldr	r3, [r7, #4]
 802ade2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802ade4:	683b      	ldr	r3, [r7, #0]
 802ade6:	781b      	ldrb	r3, [r3, #0]
 802ade8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802adea:	683b      	ldr	r3, [r7, #0]
 802adec:	785b      	ldrb	r3, [r3, #1]
 802adee:	2b01      	cmp	r3, #1
 802adf0:	d128      	bne.n	802ae44 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802adf2:	68bb      	ldr	r3, [r7, #8]
 802adf4:	015a      	lsls	r2, r3, #5
 802adf6:	68fb      	ldr	r3, [r7, #12]
 802adf8:	4413      	add	r3, r2
 802adfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802adfe:	681b      	ldr	r3, [r3, #0]
 802ae00:	68ba      	ldr	r2, [r7, #8]
 802ae02:	0151      	lsls	r1, r2, #5
 802ae04:	68fa      	ldr	r2, [r7, #12]
 802ae06:	440a      	add	r2, r1
 802ae08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ae0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802ae10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802ae12:	683b      	ldr	r3, [r7, #0]
 802ae14:	78db      	ldrb	r3, [r3, #3]
 802ae16:	2b03      	cmp	r3, #3
 802ae18:	d003      	beq.n	802ae22 <USB_EPClearStall+0x4c>
 802ae1a:	683b      	ldr	r3, [r7, #0]
 802ae1c:	78db      	ldrb	r3, [r3, #3]
 802ae1e:	2b02      	cmp	r3, #2
 802ae20:	d138      	bne.n	802ae94 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802ae22:	68bb      	ldr	r3, [r7, #8]
 802ae24:	015a      	lsls	r2, r3, #5
 802ae26:	68fb      	ldr	r3, [r7, #12]
 802ae28:	4413      	add	r3, r2
 802ae2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ae2e:	681b      	ldr	r3, [r3, #0]
 802ae30:	68ba      	ldr	r2, [r7, #8]
 802ae32:	0151      	lsls	r1, r2, #5
 802ae34:	68fa      	ldr	r2, [r7, #12]
 802ae36:	440a      	add	r2, r1
 802ae38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ae3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802ae40:	6013      	str	r3, [r2, #0]
 802ae42:	e027      	b.n	802ae94 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802ae44:	68bb      	ldr	r3, [r7, #8]
 802ae46:	015a      	lsls	r2, r3, #5
 802ae48:	68fb      	ldr	r3, [r7, #12]
 802ae4a:	4413      	add	r3, r2
 802ae4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ae50:	681b      	ldr	r3, [r3, #0]
 802ae52:	68ba      	ldr	r2, [r7, #8]
 802ae54:	0151      	lsls	r1, r2, #5
 802ae56:	68fa      	ldr	r2, [r7, #12]
 802ae58:	440a      	add	r2, r1
 802ae5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ae5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802ae62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802ae64:	683b      	ldr	r3, [r7, #0]
 802ae66:	78db      	ldrb	r3, [r3, #3]
 802ae68:	2b03      	cmp	r3, #3
 802ae6a:	d003      	beq.n	802ae74 <USB_EPClearStall+0x9e>
 802ae6c:	683b      	ldr	r3, [r7, #0]
 802ae6e:	78db      	ldrb	r3, [r3, #3]
 802ae70:	2b02      	cmp	r3, #2
 802ae72:	d10f      	bne.n	802ae94 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802ae74:	68bb      	ldr	r3, [r7, #8]
 802ae76:	015a      	lsls	r2, r3, #5
 802ae78:	68fb      	ldr	r3, [r7, #12]
 802ae7a:	4413      	add	r3, r2
 802ae7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ae80:	681b      	ldr	r3, [r3, #0]
 802ae82:	68ba      	ldr	r2, [r7, #8]
 802ae84:	0151      	lsls	r1, r2, #5
 802ae86:	68fa      	ldr	r2, [r7, #12]
 802ae88:	440a      	add	r2, r1
 802ae8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ae8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802ae92:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 802ae94:	2300      	movs	r3, #0
}
 802ae96:	4618      	mov	r0, r3
 802ae98:	3714      	adds	r7, #20
 802ae9a:	46bd      	mov	sp, r7
 802ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aea0:	4770      	bx	lr

0802aea2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 802aea2:	b480      	push	{r7}
 802aea4:	b085      	sub	sp, #20
 802aea6:	af00      	add	r7, sp, #0
 802aea8:	6078      	str	r0, [r7, #4]
 802aeaa:	460b      	mov	r3, r1
 802aeac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802aeae:	687b      	ldr	r3, [r7, #4]
 802aeb0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 802aeb2:	68fb      	ldr	r3, [r7, #12]
 802aeb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802aeb8:	681b      	ldr	r3, [r3, #0]
 802aeba:	68fa      	ldr	r2, [r7, #12]
 802aebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802aec0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802aec4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 802aec6:	68fb      	ldr	r3, [r7, #12]
 802aec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802aecc:	681a      	ldr	r2, [r3, #0]
 802aece:	78fb      	ldrb	r3, [r7, #3]
 802aed0:	011b      	lsls	r3, r3, #4
 802aed2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 802aed6:	68f9      	ldr	r1, [r7, #12]
 802aed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802aedc:	4313      	orrs	r3, r2
 802aede:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 802aee0:	2300      	movs	r3, #0
}
 802aee2:	4618      	mov	r0, r3
 802aee4:	3714      	adds	r7, #20
 802aee6:	46bd      	mov	sp, r7
 802aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aeec:	4770      	bx	lr

0802aeee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 802aeee:	b480      	push	{r7}
 802aef0:	b085      	sub	sp, #20
 802aef2:	af00      	add	r7, sp, #0
 802aef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802aef6:	687b      	ldr	r3, [r7, #4]
 802aef8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802aefa:	68fb      	ldr	r3, [r7, #12]
 802aefc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802af00:	681b      	ldr	r3, [r3, #0]
 802af02:	68fa      	ldr	r2, [r7, #12]
 802af04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802af08:	f023 0303 	bic.w	r3, r3, #3
 802af0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 802af0e:	68fb      	ldr	r3, [r7, #12]
 802af10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802af14:	685b      	ldr	r3, [r3, #4]
 802af16:	68fa      	ldr	r2, [r7, #12]
 802af18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802af1c:	f023 0302 	bic.w	r3, r3, #2
 802af20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802af22:	2300      	movs	r3, #0
}
 802af24:	4618      	mov	r0, r3
 802af26:	3714      	adds	r7, #20
 802af28:	46bd      	mov	sp, r7
 802af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af2e:	4770      	bx	lr

0802af30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 802af30:	b480      	push	{r7}
 802af32:	b085      	sub	sp, #20
 802af34:	af00      	add	r7, sp, #0
 802af36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802af38:	687b      	ldr	r3, [r7, #4]
 802af3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802af3c:	68fb      	ldr	r3, [r7, #12]
 802af3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802af42:	681b      	ldr	r3, [r3, #0]
 802af44:	68fa      	ldr	r2, [r7, #12]
 802af46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802af4a:	f023 0303 	bic.w	r3, r3, #3
 802af4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802af50:	68fb      	ldr	r3, [r7, #12]
 802af52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802af56:	685b      	ldr	r3, [r3, #4]
 802af58:	68fa      	ldr	r2, [r7, #12]
 802af5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802af5e:	f043 0302 	orr.w	r3, r3, #2
 802af62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802af64:	2300      	movs	r3, #0
}
 802af66:	4618      	mov	r0, r3
 802af68:	3714      	adds	r7, #20
 802af6a:	46bd      	mov	sp, r7
 802af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af70:	4770      	bx	lr

0802af72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802af72:	b480      	push	{r7}
 802af74:	b085      	sub	sp, #20
 802af76:	af00      	add	r7, sp, #0
 802af78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802af7a:	687b      	ldr	r3, [r7, #4]
 802af7c:	695b      	ldr	r3, [r3, #20]
 802af7e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802af80:	687b      	ldr	r3, [r7, #4]
 802af82:	699b      	ldr	r3, [r3, #24]
 802af84:	68fa      	ldr	r2, [r7, #12]
 802af86:	4013      	ands	r3, r2
 802af88:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802af8a:	68fb      	ldr	r3, [r7, #12]
}
 802af8c:	4618      	mov	r0, r3
 802af8e:	3714      	adds	r7, #20
 802af90:	46bd      	mov	sp, r7
 802af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af96:	4770      	bx	lr

0802af98 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802af98:	b480      	push	{r7}
 802af9a:	b085      	sub	sp, #20
 802af9c:	af00      	add	r7, sp, #0
 802af9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802afa0:	687b      	ldr	r3, [r7, #4]
 802afa2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802afa4:	68fb      	ldr	r3, [r7, #12]
 802afa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802afaa:	699b      	ldr	r3, [r3, #24]
 802afac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802afae:	68fb      	ldr	r3, [r7, #12]
 802afb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802afb4:	69db      	ldr	r3, [r3, #28]
 802afb6:	68ba      	ldr	r2, [r7, #8]
 802afb8:	4013      	ands	r3, r2
 802afba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 802afbc:	68bb      	ldr	r3, [r7, #8]
 802afbe:	0c1b      	lsrs	r3, r3, #16
}
 802afc0:	4618      	mov	r0, r3
 802afc2:	3714      	adds	r7, #20
 802afc4:	46bd      	mov	sp, r7
 802afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802afca:	4770      	bx	lr

0802afcc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802afcc:	b480      	push	{r7}
 802afce:	b085      	sub	sp, #20
 802afd0:	af00      	add	r7, sp, #0
 802afd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802afd4:	687b      	ldr	r3, [r7, #4]
 802afd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802afd8:	68fb      	ldr	r3, [r7, #12]
 802afda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802afde:	699b      	ldr	r3, [r3, #24]
 802afe0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802afe2:	68fb      	ldr	r3, [r7, #12]
 802afe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802afe8:	69db      	ldr	r3, [r3, #28]
 802afea:	68ba      	ldr	r2, [r7, #8]
 802afec:	4013      	ands	r3, r2
 802afee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 802aff0:	68bb      	ldr	r3, [r7, #8]
 802aff2:	b29b      	uxth	r3, r3
}
 802aff4:	4618      	mov	r0, r3
 802aff6:	3714      	adds	r7, #20
 802aff8:	46bd      	mov	sp, r7
 802affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802affe:	4770      	bx	lr

0802b000 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802b000:	b480      	push	{r7}
 802b002:	b085      	sub	sp, #20
 802b004:	af00      	add	r7, sp, #0
 802b006:	6078      	str	r0, [r7, #4]
 802b008:	460b      	mov	r3, r1
 802b00a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b00c:	687b      	ldr	r3, [r7, #4]
 802b00e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 802b010:	78fb      	ldrb	r3, [r7, #3]
 802b012:	015a      	lsls	r2, r3, #5
 802b014:	68fb      	ldr	r3, [r7, #12]
 802b016:	4413      	add	r3, r2
 802b018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b01c:	689b      	ldr	r3, [r3, #8]
 802b01e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 802b020:	68fb      	ldr	r3, [r7, #12]
 802b022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802b026:	695b      	ldr	r3, [r3, #20]
 802b028:	68ba      	ldr	r2, [r7, #8]
 802b02a:	4013      	ands	r3, r2
 802b02c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802b02e:	68bb      	ldr	r3, [r7, #8]
}
 802b030:	4618      	mov	r0, r3
 802b032:	3714      	adds	r7, #20
 802b034:	46bd      	mov	sp, r7
 802b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b03a:	4770      	bx	lr

0802b03c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802b03c:	b480      	push	{r7}
 802b03e:	b087      	sub	sp, #28
 802b040:	af00      	add	r7, sp, #0
 802b042:	6078      	str	r0, [r7, #4]
 802b044:	460b      	mov	r3, r1
 802b046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b048:	687b      	ldr	r3, [r7, #4]
 802b04a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 802b04c:	697b      	ldr	r3, [r7, #20]
 802b04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802b052:	691b      	ldr	r3, [r3, #16]
 802b054:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 802b056:	697b      	ldr	r3, [r7, #20]
 802b058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802b05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b05e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 802b060:	78fb      	ldrb	r3, [r7, #3]
 802b062:	f003 030f 	and.w	r3, r3, #15
 802b066:	68fa      	ldr	r2, [r7, #12]
 802b068:	fa22 f303 	lsr.w	r3, r2, r3
 802b06c:	01db      	lsls	r3, r3, #7
 802b06e:	b2db      	uxtb	r3, r3
 802b070:	693a      	ldr	r2, [r7, #16]
 802b072:	4313      	orrs	r3, r2
 802b074:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 802b076:	78fb      	ldrb	r3, [r7, #3]
 802b078:	015a      	lsls	r2, r3, #5
 802b07a:	697b      	ldr	r3, [r7, #20]
 802b07c:	4413      	add	r3, r2
 802b07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802b082:	689b      	ldr	r3, [r3, #8]
 802b084:	693a      	ldr	r2, [r7, #16]
 802b086:	4013      	ands	r3, r2
 802b088:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802b08a:	68bb      	ldr	r3, [r7, #8]
}
 802b08c:	4618      	mov	r0, r3
 802b08e:	371c      	adds	r7, #28
 802b090:	46bd      	mov	sp, r7
 802b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b096:	4770      	bx	lr

0802b098 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802b098:	b480      	push	{r7}
 802b09a:	b083      	sub	sp, #12
 802b09c:	af00      	add	r7, sp, #0
 802b09e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802b0a0:	687b      	ldr	r3, [r7, #4]
 802b0a2:	695b      	ldr	r3, [r3, #20]
 802b0a4:	f003 0301 	and.w	r3, r3, #1
}
 802b0a8:	4618      	mov	r0, r3
 802b0aa:	370c      	adds	r7, #12
 802b0ac:	46bd      	mov	sp, r7
 802b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0b2:	4770      	bx	lr

0802b0b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 802b0b4:	b480      	push	{r7}
 802b0b6:	b085      	sub	sp, #20
 802b0b8:	af00      	add	r7, sp, #0
 802b0ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b0bc:	687b      	ldr	r3, [r7, #4]
 802b0be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 802b0c0:	68fb      	ldr	r3, [r7, #12]
 802b0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802b0c6:	681b      	ldr	r3, [r3, #0]
 802b0c8:	68fa      	ldr	r2, [r7, #12]
 802b0ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802b0ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802b0d2:	f023 0307 	bic.w	r3, r3, #7
 802b0d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 802b0d8:	68fb      	ldr	r3, [r7, #12]
 802b0da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802b0de:	685b      	ldr	r3, [r3, #4]
 802b0e0:	68fa      	ldr	r2, [r7, #12]
 802b0e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802b0e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b0ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802b0ec:	2300      	movs	r3, #0
}
 802b0ee:	4618      	mov	r0, r3
 802b0f0:	3714      	adds	r7, #20
 802b0f2:	46bd      	mov	sp, r7
 802b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0f8:	4770      	bx	lr
	...

0802b0fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 802b0fc:	b480      	push	{r7}
 802b0fe:	b087      	sub	sp, #28
 802b100:	af00      	add	r7, sp, #0
 802b102:	60f8      	str	r0, [r7, #12]
 802b104:	460b      	mov	r3, r1
 802b106:	607a      	str	r2, [r7, #4]
 802b108:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b10a:	68fb      	ldr	r3, [r7, #12]
 802b10c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802b10e:	68fb      	ldr	r3, [r7, #12]
 802b110:	333c      	adds	r3, #60	; 0x3c
 802b112:	3304      	adds	r3, #4
 802b114:	681b      	ldr	r3, [r3, #0]
 802b116:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 802b118:	693b      	ldr	r3, [r7, #16]
 802b11a:	4a26      	ldr	r2, [pc, #152]	; (802b1b4 <USB_EP0_OutStart+0xb8>)
 802b11c:	4293      	cmp	r3, r2
 802b11e:	d90a      	bls.n	802b136 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802b120:	697b      	ldr	r3, [r7, #20]
 802b122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b126:	681b      	ldr	r3, [r3, #0]
 802b128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b12c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b130:	d101      	bne.n	802b136 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 802b132:	2300      	movs	r3, #0
 802b134:	e037      	b.n	802b1a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 802b136:	697b      	ldr	r3, [r7, #20]
 802b138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b13c:	461a      	mov	r2, r3
 802b13e:	2300      	movs	r3, #0
 802b140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802b142:	697b      	ldr	r3, [r7, #20]
 802b144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b148:	691b      	ldr	r3, [r3, #16]
 802b14a:	697a      	ldr	r2, [r7, #20]
 802b14c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802b150:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802b154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 802b156:	697b      	ldr	r3, [r7, #20]
 802b158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b15c:	691b      	ldr	r3, [r3, #16]
 802b15e:	697a      	ldr	r2, [r7, #20]
 802b160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802b164:	f043 0318 	orr.w	r3, r3, #24
 802b168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 802b16a:	697b      	ldr	r3, [r7, #20]
 802b16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b170:	691b      	ldr	r3, [r3, #16]
 802b172:	697a      	ldr	r2, [r7, #20]
 802b174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802b178:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 802b17c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 802b17e:	7afb      	ldrb	r3, [r7, #11]
 802b180:	2b01      	cmp	r3, #1
 802b182:	d10f      	bne.n	802b1a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 802b184:	697b      	ldr	r3, [r7, #20]
 802b186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b18a:	461a      	mov	r2, r3
 802b18c:	687b      	ldr	r3, [r7, #4]
 802b18e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 802b190:	697b      	ldr	r3, [r7, #20]
 802b192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802b196:	681b      	ldr	r3, [r3, #0]
 802b198:	697a      	ldr	r2, [r7, #20]
 802b19a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802b19e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 802b1a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802b1a4:	2300      	movs	r3, #0
}
 802b1a6:	4618      	mov	r0, r3
 802b1a8:	371c      	adds	r7, #28
 802b1aa:	46bd      	mov	sp, r7
 802b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1b0:	4770      	bx	lr
 802b1b2:	bf00      	nop
 802b1b4:	4f54300a 	.word	0x4f54300a

0802b1b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802b1b8:	b480      	push	{r7}
 802b1ba:	b085      	sub	sp, #20
 802b1bc:	af00      	add	r7, sp, #0
 802b1be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 802b1c0:	2300      	movs	r3, #0
 802b1c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 802b1c4:	68fb      	ldr	r3, [r7, #12]
 802b1c6:	3301      	adds	r3, #1
 802b1c8:	60fb      	str	r3, [r7, #12]
 802b1ca:	68fb      	ldr	r3, [r7, #12]
 802b1cc:	4a13      	ldr	r2, [pc, #76]	; (802b21c <USB_CoreReset+0x64>)
 802b1ce:	4293      	cmp	r3, r2
 802b1d0:	d901      	bls.n	802b1d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802b1d2:	2303      	movs	r3, #3
 802b1d4:	e01b      	b.n	802b20e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802b1d6:	687b      	ldr	r3, [r7, #4]
 802b1d8:	691b      	ldr	r3, [r3, #16]
 802b1da:	2b00      	cmp	r3, #0
 802b1dc:	daf2      	bge.n	802b1c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802b1de:	2300      	movs	r3, #0
 802b1e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802b1e2:	687b      	ldr	r3, [r7, #4]
 802b1e4:	691b      	ldr	r3, [r3, #16]
 802b1e6:	f043 0201 	orr.w	r2, r3, #1
 802b1ea:	687b      	ldr	r3, [r7, #4]
 802b1ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 802b1ee:	68fb      	ldr	r3, [r7, #12]
 802b1f0:	3301      	adds	r3, #1
 802b1f2:	60fb      	str	r3, [r7, #12]
 802b1f4:	68fb      	ldr	r3, [r7, #12]
 802b1f6:	4a09      	ldr	r2, [pc, #36]	; (802b21c <USB_CoreReset+0x64>)
 802b1f8:	4293      	cmp	r3, r2
 802b1fa:	d901      	bls.n	802b200 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802b1fc:	2303      	movs	r3, #3
 802b1fe:	e006      	b.n	802b20e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802b200:	687b      	ldr	r3, [r7, #4]
 802b202:	691b      	ldr	r3, [r3, #16]
 802b204:	f003 0301 	and.w	r3, r3, #1
 802b208:	2b01      	cmp	r3, #1
 802b20a:	d0f0      	beq.n	802b1ee <USB_CoreReset+0x36>

  return HAL_OK;
 802b20c:	2300      	movs	r3, #0
}
 802b20e:	4618      	mov	r0, r3
 802b210:	3714      	adds	r7, #20
 802b212:	46bd      	mov	sp, r7
 802b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b218:	4770      	bx	lr
 802b21a:	bf00      	nop
 802b21c:	00030d40 	.word	0x00030d40

0802b220 <_ZN12Adafruit_GFXC1Ess>:


 #define pgm_read_byte(addr) (*(const unsigned char *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 802b220:	b480      	push	{r7}
 802b222:	b083      	sub	sp, #12
 802b224:	af00      	add	r7, sp, #0
 802b226:	6078      	str	r0, [r7, #4]
 802b228:	460b      	mov	r3, r1
 802b22a:	807b      	strh	r3, [r7, #2]
 802b22c:	4613      	mov	r3, r2
 802b22e:	803b      	strh	r3, [r7, #0]
  WIDTH(w), HEIGHT(h)
 802b230:	4a19      	ldr	r2, [pc, #100]	; (802b298 <_ZN12Adafruit_GFXC1Ess+0x78>)
 802b232:	687b      	ldr	r3, [r7, #4]
 802b234:	601a      	str	r2, [r3, #0]
 802b236:	687b      	ldr	r3, [r7, #4]
 802b238:	887a      	ldrh	r2, [r7, #2]
 802b23a:	809a      	strh	r2, [r3, #4]
 802b23c:	687b      	ldr	r3, [r7, #4]
 802b23e:	883a      	ldrh	r2, [r7, #0]
 802b240:	80da      	strh	r2, [r3, #6]
{
  _width    = WIDTH;
 802b242:	687b      	ldr	r3, [r7, #4]
 802b244:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 802b248:	687b      	ldr	r3, [r7, #4]
 802b24a:	811a      	strh	r2, [r3, #8]
  _height   = HEIGHT;
 802b24c:	687b      	ldr	r3, [r7, #4]
 802b24e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 802b252:	687b      	ldr	r3, [r7, #4]
 802b254:	815a      	strh	r2, [r3, #10]
  rotation  = 0;
 802b256:	687b      	ldr	r3, [r7, #4]
 802b258:	2200      	movs	r2, #0
 802b25a:	755a      	strb	r2, [r3, #21]
  cursor_y  = cursor_x    = 0;
 802b25c:	687b      	ldr	r3, [r7, #4]
 802b25e:	2200      	movs	r2, #0
 802b260:	819a      	strh	r2, [r3, #12]
 802b262:	687b      	ldr	r3, [r7, #4]
 802b264:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b268:	687b      	ldr	r3, [r7, #4]
 802b26a:	81da      	strh	r2, [r3, #14]
  textsize  = 1;
 802b26c:	687b      	ldr	r3, [r7, #4]
 802b26e:	2201      	movs	r2, #1
 802b270:	751a      	strb	r2, [r3, #20]
  textcolor = textbgcolor = 0xFFFF;
 802b272:	687b      	ldr	r3, [r7, #4]
 802b274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802b278:	825a      	strh	r2, [r3, #18]
 802b27a:	687b      	ldr	r3, [r7, #4]
 802b27c:	8a5a      	ldrh	r2, [r3, #18]
 802b27e:	687b      	ldr	r3, [r7, #4]
 802b280:	821a      	strh	r2, [r3, #16]
  wrap      = true;
 802b282:	687b      	ldr	r3, [r7, #4]
 802b284:	2201      	movs	r2, #1
 802b286:	759a      	strb	r2, [r3, #22]
}
 802b288:	687b      	ldr	r3, [r7, #4]
 802b28a:	4618      	mov	r0, r3
 802b28c:	370c      	adds	r7, #12
 802b28e:	46bd      	mov	sp, r7
 802b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b294:	4770      	bx	lr
 802b296:	bf00      	nop
 802b298:	0803b98c 	.word	0x0803b98c

0802b29c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 802b29c:	b590      	push	{r4, r7, lr}
 802b29e:	b08b      	sub	sp, #44	; 0x2c
 802b2a0:	af00      	add	r7, sp, #0
 802b2a2:	60f8      	str	r0, [r7, #12]
 802b2a4:	4608      	mov	r0, r1
 802b2a6:	4611      	mov	r1, r2
 802b2a8:	461a      	mov	r2, r3
 802b2aa:	4603      	mov	r3, r0
 802b2ac:	817b      	strh	r3, [r7, #10]
 802b2ae:	460b      	mov	r3, r1
 802b2b0:	813b      	strh	r3, [r7, #8]
 802b2b2:	4613      	mov	r3, r2
 802b2b4:	80fb      	strh	r3, [r7, #6]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 802b2b6:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 802b2ba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b2be:	1ad3      	subs	r3, r2, r3
 802b2c0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 802b2c4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 802b2c8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 802b2cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 802b2d0:	1acb      	subs	r3, r1, r3
 802b2d2:	2b00      	cmp	r3, #0
 802b2d4:	bfb8      	it	lt
 802b2d6:	425b      	neglt	r3, r3
 802b2d8:	429a      	cmp	r2, r3
 802b2da:	bfcc      	ite	gt
 802b2dc:	2301      	movgt	r3, #1
 802b2de:	2300      	movle	r3, #0
 802b2e0:	b2db      	uxtb	r3, r3
 802b2e2:	847b      	strh	r3, [r7, #34]	; 0x22
  int16_t dx, dy;
  int16_t err;
  int16_t ystep;

  if (steep) {
 802b2e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802b2e8:	2b00      	cmp	r3, #0
 802b2ea:	d00b      	beq.n	802b304 <_ZN12Adafruit_GFX8drawLineEsssst+0x68>
    swap(x0, y0);
 802b2ec:	897b      	ldrh	r3, [r7, #10]
 802b2ee:	843b      	strh	r3, [r7, #32]
 802b2f0:	893b      	ldrh	r3, [r7, #8]
 802b2f2:	817b      	strh	r3, [r7, #10]
 802b2f4:	8c3b      	ldrh	r3, [r7, #32]
 802b2f6:	813b      	strh	r3, [r7, #8]
    swap(x1, y1);
 802b2f8:	88fb      	ldrh	r3, [r7, #6]
 802b2fa:	83fb      	strh	r3, [r7, #30]
 802b2fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 802b2fe:	80fb      	strh	r3, [r7, #6]
 802b300:	8bfb      	ldrh	r3, [r7, #30]
 802b302:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  if (x0 > x1) {
 802b304:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b30c:	429a      	cmp	r2, r3
 802b30e:	dd0b      	ble.n	802b328 <_ZN12Adafruit_GFX8drawLineEsssst+0x8c>
    swap(x0, x1);
 802b310:	897b      	ldrh	r3, [r7, #10]
 802b312:	83bb      	strh	r3, [r7, #28]
 802b314:	88fb      	ldrh	r3, [r7, #6]
 802b316:	817b      	strh	r3, [r7, #10]
 802b318:	8bbb      	ldrh	r3, [r7, #28]
 802b31a:	80fb      	strh	r3, [r7, #6]
    swap(y0, y1);
 802b31c:	893b      	ldrh	r3, [r7, #8]
 802b31e:	837b      	strh	r3, [r7, #26]
 802b320:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 802b322:	813b      	strh	r3, [r7, #8]
 802b324:	8b7b      	ldrh	r3, [r7, #26]
 802b326:	873b      	strh	r3, [r7, #56]	; 0x38
  }


  dx = x1 - x0;
 802b328:	88fa      	ldrh	r2, [r7, #6]
 802b32a:	897b      	ldrh	r3, [r7, #10]
 802b32c:	1ad3      	subs	r3, r2, r3
 802b32e:	b29b      	uxth	r3, r3
 802b330:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 802b332:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 802b336:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b33a:	1ad3      	subs	r3, r2, r3
 802b33c:	2b00      	cmp	r3, #0
 802b33e:	bfb8      	it	lt
 802b340:	425b      	neglt	r3, r3
 802b342:	82fb      	strh	r3, [r7, #22]

  err = dx / 2;
 802b344:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 802b348:	0fda      	lsrs	r2, r3, #31
 802b34a:	4413      	add	r3, r2
 802b34c:	105b      	asrs	r3, r3, #1
 802b34e:	84fb      	strh	r3, [r7, #38]	; 0x26
  

  if (y0 < y1) {
 802b350:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b354:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 802b358:	429a      	cmp	r2, r3
 802b35a:	da02      	bge.n	802b362 <_ZN12Adafruit_GFX8drawLineEsssst+0xc6>
    ystep = 1;
 802b35c:	2301      	movs	r3, #1
 802b35e:	84bb      	strh	r3, [r7, #36]	; 0x24
 802b360:	e002      	b.n	802b368 <_ZN12Adafruit_GFX8drawLineEsssst+0xcc>
  } else {
    ystep = -1;
 802b362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b366:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0<=x1; x0++) {
 802b368:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b36c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b370:	429a      	cmp	r2, r3
 802b372:	dc32      	bgt.n	802b3da <_ZN12Adafruit_GFX8drawLineEsssst+0x13e>
    if (steep) {
 802b374:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802b378:	2b00      	cmp	r3, #0
 802b37a:	d00a      	beq.n	802b392 <_ZN12Adafruit_GFX8drawLineEsssst+0xf6>
      drawPixel(y0, x0, color);
 802b37c:	68fb      	ldr	r3, [r7, #12]
 802b37e:	681b      	ldr	r3, [r3, #0]
 802b380:	681c      	ldr	r4, [r3, #0]
 802b382:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802b384:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b388:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 802b38c:	68f8      	ldr	r0, [r7, #12]
 802b38e:	47a0      	blx	r4
 802b390:	e009      	b.n	802b3a6 <_ZN12Adafruit_GFX8drawLineEsssst+0x10a>
    } else {
      drawPixel(x0, y0, color);
 802b392:	68fb      	ldr	r3, [r7, #12]
 802b394:	681b      	ldr	r3, [r3, #0]
 802b396:	681c      	ldr	r4, [r3, #0]
 802b398:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802b39a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b39e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b3a2:	68f8      	ldr	r0, [r7, #12]
 802b3a4:	47a0      	blx	r4
    }
    err -= dy;
 802b3a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802b3a8:	8afb      	ldrh	r3, [r7, #22]
 802b3aa:	1ad3      	subs	r3, r2, r3
 802b3ac:	b29b      	uxth	r3, r3
 802b3ae:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 802b3b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 802b3b4:	2b00      	cmp	r3, #0
 802b3b6:	da09      	bge.n	802b3cc <_ZN12Adafruit_GFX8drawLineEsssst+0x130>
      y0 += ystep;
 802b3b8:	893a      	ldrh	r2, [r7, #8]
 802b3ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802b3bc:	4413      	add	r3, r2
 802b3be:	b29b      	uxth	r3, r3
 802b3c0:	813b      	strh	r3, [r7, #8]
      err += dx;
 802b3c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802b3c4:	8b3b      	ldrh	r3, [r7, #24]
 802b3c6:	4413      	add	r3, r2
 802b3c8:	b29b      	uxth	r3, r3
 802b3ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0<=x1; x0++) {
 802b3cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 802b3d0:	b29b      	uxth	r3, r3
 802b3d2:	3301      	adds	r3, #1
 802b3d4:	b29b      	uxth	r3, r3
 802b3d6:	817b      	strh	r3, [r7, #10]
 802b3d8:	e7c6      	b.n	802b368 <_ZN12Adafruit_GFX8drawLineEsssst+0xcc>
    }
  }
}
 802b3da:	bf00      	nop
 802b3dc:	372c      	adds	r7, #44	; 0x2c
 802b3de:	46bd      	mov	sp, r7
 802b3e0:	bd90      	pop	{r4, r7, pc}

0802b3e2 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 802b3e2:	b590      	push	{r4, r7, lr}
 802b3e4:	b087      	sub	sp, #28
 802b3e6:	af02      	add	r7, sp, #8
 802b3e8:	60f8      	str	r0, [r7, #12]
 802b3ea:	4608      	mov	r0, r1
 802b3ec:	4611      	mov	r1, r2
 802b3ee:	461a      	mov	r2, r3
 802b3f0:	4603      	mov	r3, r0
 802b3f2:	817b      	strh	r3, [r7, #10]
 802b3f4:	460b      	mov	r3, r1
 802b3f6:	813b      	strh	r3, [r7, #8]
 802b3f8:	4613      	mov	r3, r2
 802b3fa:	80fb      	strh	r3, [r7, #6]
  drawFastHLine(x, y, w, color);
 802b3fc:	68fb      	ldr	r3, [r7, #12]
 802b3fe:	681b      	ldr	r3, [r3, #0]
 802b400:	330c      	adds	r3, #12
 802b402:	681c      	ldr	r4, [r3, #0]
 802b404:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 802b408:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b40c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802b412:	9300      	str	r3, [sp, #0]
 802b414:	4603      	mov	r3, r0
 802b416:	68f8      	ldr	r0, [r7, #12]
 802b418:	47a0      	blx	r4
  drawFastHLine(x, y+h-1, w, color);
 802b41a:	68fb      	ldr	r3, [r7, #12]
 802b41c:	681b      	ldr	r3, [r3, #0]
 802b41e:	330c      	adds	r3, #12
 802b420:	681c      	ldr	r4, [r3, #0]
 802b422:	893a      	ldrh	r2, [r7, #8]
 802b424:	8c3b      	ldrh	r3, [r7, #32]
 802b426:	4413      	add	r3, r2
 802b428:	b29b      	uxth	r3, r3
 802b42a:	3b01      	subs	r3, #1
 802b42c:	b29b      	uxth	r3, r3
 802b42e:	b21a      	sxth	r2, r3
 802b430:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 802b434:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802b43a:	9300      	str	r3, [sp, #0]
 802b43c:	4603      	mov	r3, r0
 802b43e:	68f8      	ldr	r0, [r7, #12]
 802b440:	47a0      	blx	r4
  drawFastVLine(x, y, h, color);
 802b442:	68fb      	ldr	r3, [r7, #12]
 802b444:	681b      	ldr	r3, [r3, #0]
 802b446:	3308      	adds	r3, #8
 802b448:	681c      	ldr	r4, [r3, #0]
 802b44a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 802b44e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b452:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b456:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802b458:	9300      	str	r3, [sp, #0]
 802b45a:	4603      	mov	r3, r0
 802b45c:	68f8      	ldr	r0, [r7, #12]
 802b45e:	47a0      	blx	r4
  drawFastVLine(x+w-1, y, h, color);
 802b460:	68fb      	ldr	r3, [r7, #12]
 802b462:	681b      	ldr	r3, [r3, #0]
 802b464:	3308      	adds	r3, #8
 802b466:	681c      	ldr	r4, [r3, #0]
 802b468:	897a      	ldrh	r2, [r7, #10]
 802b46a:	88fb      	ldrh	r3, [r7, #6]
 802b46c:	4413      	add	r3, r2
 802b46e:	b29b      	uxth	r3, r3
 802b470:	3b01      	subs	r3, #1
 802b472:	b29b      	uxth	r3, r3
 802b474:	b219      	sxth	r1, r3
 802b476:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 802b47a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b47e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802b480:	9300      	str	r3, [sp, #0]
 802b482:	4603      	mov	r3, r0
 802b484:	68f8      	ldr	r0, [r7, #12]
 802b486:	47a0      	blx	r4
}
 802b488:	bf00      	nop
 802b48a:	3714      	adds	r7, #20
 802b48c:	46bd      	mov	sp, r7
 802b48e:	bd90      	pop	{r4, r7, pc}

0802b490 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 802b490:	b5b0      	push	{r4, r5, r7, lr}
 802b492:	b086      	sub	sp, #24
 802b494:	af02      	add	r7, sp, #8
 802b496:	60f8      	str	r0, [r7, #12]
 802b498:	4608      	mov	r0, r1
 802b49a:	4611      	mov	r1, r2
 802b49c:	461a      	mov	r2, r3
 802b49e:	4603      	mov	r3, r0
 802b4a0:	817b      	strh	r3, [r7, #10]
 802b4a2:	460b      	mov	r3, r1
 802b4a4:	813b      	strh	r3, [r7, #8]
 802b4a6:	4613      	mov	r3, r2
 802b4a8:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 802b4aa:	68fb      	ldr	r3, [r7, #12]
 802b4ac:	681b      	ldr	r3, [r3, #0]
 802b4ae:	3304      	adds	r3, #4
 802b4b0:	681c      	ldr	r4, [r3, #0]
 802b4b2:	893a      	ldrh	r2, [r7, #8]
 802b4b4:	88fb      	ldrh	r3, [r7, #6]
 802b4b6:	4413      	add	r3, r2
 802b4b8:	b29b      	uxth	r3, r3
 802b4ba:	3b01      	subs	r3, #1
 802b4bc:	b29b      	uxth	r3, r3
 802b4be:	b21b      	sxth	r3, r3
 802b4c0:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 802b4c4:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 802b4c8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b4cc:	8c3a      	ldrh	r2, [r7, #32]
 802b4ce:	9201      	str	r2, [sp, #4]
 802b4d0:	9300      	str	r3, [sp, #0]
 802b4d2:	462b      	mov	r3, r5
 802b4d4:	4602      	mov	r2, r0
 802b4d6:	68f8      	ldr	r0, [r7, #12]
 802b4d8:	47a0      	blx	r4
}
 802b4da:	bf00      	nop
 802b4dc:	3710      	adds	r7, #16
 802b4de:	46bd      	mov	sp, r7
 802b4e0:	bdb0      	pop	{r4, r5, r7, pc}

0802b4e2 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 802b4e2:	b590      	push	{r4, r7, lr}
 802b4e4:	b087      	sub	sp, #28
 802b4e6:	af02      	add	r7, sp, #8
 802b4e8:	60f8      	str	r0, [r7, #12]
 802b4ea:	4608      	mov	r0, r1
 802b4ec:	4611      	mov	r1, r2
 802b4ee:	461a      	mov	r2, r3
 802b4f0:	4603      	mov	r3, r0
 802b4f2:	817b      	strh	r3, [r7, #10]
 802b4f4:	460b      	mov	r3, r1
 802b4f6:	813b      	strh	r3, [r7, #8]
 802b4f8:	4613      	mov	r3, r2
 802b4fa:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 802b4fc:	68fb      	ldr	r3, [r7, #12]
 802b4fe:	681b      	ldr	r3, [r3, #0]
 802b500:	3304      	adds	r3, #4
 802b502:	681c      	ldr	r4, [r3, #0]
 802b504:	897a      	ldrh	r2, [r7, #10]
 802b506:	88fb      	ldrh	r3, [r7, #6]
 802b508:	4413      	add	r3, r2
 802b50a:	b29b      	uxth	r3, r3
 802b50c:	3b01      	subs	r3, #1
 802b50e:	b29b      	uxth	r3, r3
 802b510:	b218      	sxth	r0, r3
 802b512:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b516:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b51a:	8c3b      	ldrh	r3, [r7, #32]
 802b51c:	9301      	str	r3, [sp, #4]
 802b51e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b522:	9300      	str	r3, [sp, #0]
 802b524:	4603      	mov	r3, r0
 802b526:	68f8      	ldr	r0, [r7, #12]
 802b528:	47a0      	blx	r4
}
 802b52a:	bf00      	nop
 802b52c:	3714      	adds	r7, #20
 802b52e:	46bd      	mov	sp, r7
 802b530:	bd90      	pop	{r4, r7, pc}

0802b532 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 802b532:	b590      	push	{r4, r7, lr}
 802b534:	b089      	sub	sp, #36	; 0x24
 802b536:	af02      	add	r7, sp, #8
 802b538:	60f8      	str	r0, [r7, #12]
 802b53a:	4608      	mov	r0, r1
 802b53c:	4611      	mov	r1, r2
 802b53e:	461a      	mov	r2, r3
 802b540:	4603      	mov	r3, r0
 802b542:	817b      	strh	r3, [r7, #10]
 802b544:	460b      	mov	r3, r1
 802b546:	813b      	strh	r3, [r7, #8]
 802b548:	4613      	mov	r3, r2
 802b54a:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 802b54c:	897b      	ldrh	r3, [r7, #10]
 802b54e:	82fb      	strh	r3, [r7, #22]
 802b550:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802b554:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 802b558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b55c:	440b      	add	r3, r1
 802b55e:	429a      	cmp	r2, r3
 802b560:	da15      	bge.n	802b58e <_ZN12Adafruit_GFX8fillRectEsssst+0x5c>
    drawFastVLine(i, y, h, color);
 802b562:	68fb      	ldr	r3, [r7, #12]
 802b564:	681b      	ldr	r3, [r3, #0]
 802b566:	3308      	adds	r3, #8
 802b568:	681c      	ldr	r4, [r3, #0]
 802b56a:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 802b56e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 802b572:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 802b576:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802b578:	9300      	str	r3, [sp, #0]
 802b57a:	4603      	mov	r3, r0
 802b57c:	68f8      	ldr	r0, [r7, #12]
 802b57e:	47a0      	blx	r4
  for (int16_t i=x; i<x+w; i++) {
 802b580:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802b584:	b29b      	uxth	r3, r3
 802b586:	3301      	adds	r3, #1
 802b588:	b29b      	uxth	r3, r3
 802b58a:	82fb      	strh	r3, [r7, #22]
 802b58c:	e7e0      	b.n	802b550 <_ZN12Adafruit_GFX8fillRectEsssst+0x1e>
  }
}
 802b58e:	bf00      	nop
 802b590:	371c      	adds	r7, #28
 802b592:	46bd      	mov	sp, r7
 802b594:	bd90      	pop	{r4, r7, pc}

0802b596 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 802b596:	b590      	push	{r4, r7, lr}
 802b598:	b085      	sub	sp, #20
 802b59a:	af02      	add	r7, sp, #8
 802b59c:	6078      	str	r0, [r7, #4]
 802b59e:	460b      	mov	r3, r1
 802b5a0:	807b      	strh	r3, [r7, #2]
  fillRect(0, 0, _width, _height, color);
 802b5a2:	687b      	ldr	r3, [r7, #4]
 802b5a4:	681b      	ldr	r3, [r3, #0]
 802b5a6:	3314      	adds	r3, #20
 802b5a8:	681c      	ldr	r4, [r3, #0]
 802b5aa:	687b      	ldr	r3, [r7, #4]
 802b5ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b5b0:	687b      	ldr	r3, [r7, #4]
 802b5b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 802b5b6:	887a      	ldrh	r2, [r7, #2]
 802b5b8:	9201      	str	r2, [sp, #4]
 802b5ba:	9300      	str	r3, [sp, #0]
 802b5bc:	460b      	mov	r3, r1
 802b5be:	2200      	movs	r2, #0
 802b5c0:	2100      	movs	r1, #0
 802b5c2:	6878      	ldr	r0, [r7, #4]
 802b5c4:	47a0      	blx	r4
}
 802b5c6:	bf00      	nop
 802b5c8:	370c      	adds	r7, #12
 802b5ca:	46bd      	mov	sp, r7
 802b5cc:	bd90      	pop	{r4, r7, pc}

0802b5ce <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt>:
//			...
//	[7][7][7][7][7][7][7]		[7]
void Adafruit_GFX::drawBitBuf( int16_t x, int16_t y,
    const uint8_t *bitBuf, int16_t w, int16_t h,
    uint16_t color, uint16_t bg )
{
 802b5ce:	b590      	push	{r4, r7, lr}
 802b5d0:	b087      	sub	sp, #28
 802b5d2:	af00      	add	r7, sp, #0
 802b5d4:	60f8      	str	r0, [r7, #12]
 802b5d6:	607b      	str	r3, [r7, #4]
 802b5d8:	460b      	mov	r3, r1
 802b5da:	817b      	strh	r3, [r7, #10]
 802b5dc:	4613      	mov	r3, r2
 802b5de:	813b      	strh	r3, [r7, #8]

    int16_t i, j;
    int16_t byteWidth = ( w + 7 ) / 8;
 802b5e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 802b5e4:	3307      	adds	r3, #7
 802b5e6:	2b00      	cmp	r3, #0
 802b5e8:	da00      	bge.n	802b5ec <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0x1e>
 802b5ea:	3307      	adds	r3, #7
 802b5ec:	10db      	asrs	r3, r3, #3
 802b5ee:	827b      	strh	r3, [r7, #18]

    for ( j = 0; j < h; j++ )
 802b5f0:	2300      	movs	r3, #0
 802b5f2:	82bb      	strh	r3, [r7, #20]
 802b5f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802b5f8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 802b5fc:	429a      	cmp	r2, r3
 802b5fe:	da59      	bge.n	802b6b4 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0xe6>
    {
        for ( i = 0; i < w; i++ )
 802b600:	2300      	movs	r3, #0
 802b602:	82fb      	strh	r3, [r7, #22]
 802b604:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802b608:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 802b60c:	429a      	cmp	r2, r3
 802b60e:	da4a      	bge.n	802b6a6 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0xd8>
        {
//            if ( pgm_read_byte( bitBuf + j * byteWidth + i / 8 ) & ( 128 >> ( i & 7 ) ) )
            if ( ( pgm_read_byte( bitBuf + w * (j/8) + i ) >> ( j % 8 ) ) & 0x1 )
 802b610:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 802b614:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802b618:	2b00      	cmp	r3, #0
 802b61a:	da00      	bge.n	802b61e <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0x50>
 802b61c:	3307      	adds	r3, #7
 802b61e:	10db      	asrs	r3, r3, #3
 802b620:	b21b      	sxth	r3, r3
 802b622:	fb02 f303 	mul.w	r3, r2, r3
 802b626:	461a      	mov	r2, r3
 802b628:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802b62c:	4413      	add	r3, r2
 802b62e:	687a      	ldr	r2, [r7, #4]
 802b630:	4413      	add	r3, r2
 802b632:	781b      	ldrb	r3, [r3, #0]
 802b634:	4619      	mov	r1, r3
 802b636:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802b63a:	425a      	negs	r2, r3
 802b63c:	f003 0307 	and.w	r3, r3, #7
 802b640:	f002 0207 	and.w	r2, r2, #7
 802b644:	bf58      	it	pl
 802b646:	4253      	negpl	r3, r2
 802b648:	b21b      	sxth	r3, r3
 802b64a:	fa41 f303 	asr.w	r3, r1, r3
 802b64e:	f003 0301 	and.w	r3, r3, #1
 802b652:	2b00      	cmp	r3, #0
 802b654:	d010      	beq.n	802b678 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0xaa>
            {
                drawPixel( x + i, y + j, color );
 802b656:	68fb      	ldr	r3, [r7, #12]
 802b658:	681b      	ldr	r3, [r3, #0]
 802b65a:	681c      	ldr	r4, [r3, #0]
 802b65c:	897a      	ldrh	r2, [r7, #10]
 802b65e:	8afb      	ldrh	r3, [r7, #22]
 802b660:	4413      	add	r3, r2
 802b662:	b29b      	uxth	r3, r3
 802b664:	b219      	sxth	r1, r3
 802b666:	893a      	ldrh	r2, [r7, #8]
 802b668:	8abb      	ldrh	r3, [r7, #20]
 802b66a:	4413      	add	r3, r2
 802b66c:	b29b      	uxth	r3, r3
 802b66e:	b21a      	sxth	r2, r3
 802b670:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802b672:	68f8      	ldr	r0, [r7, #12]
 802b674:	47a0      	blx	r4
 802b676:	e00f      	b.n	802b698 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0xca>
            }
            else
            {
                drawPixel( x + i, y + j, bg );
 802b678:	68fb      	ldr	r3, [r7, #12]
 802b67a:	681b      	ldr	r3, [r3, #0]
 802b67c:	681c      	ldr	r4, [r3, #0]
 802b67e:	897a      	ldrh	r2, [r7, #10]
 802b680:	8afb      	ldrh	r3, [r7, #22]
 802b682:	4413      	add	r3, r2
 802b684:	b29b      	uxth	r3, r3
 802b686:	b219      	sxth	r1, r3
 802b688:	893a      	ldrh	r2, [r7, #8]
 802b68a:	8abb      	ldrh	r3, [r7, #20]
 802b68c:	4413      	add	r3, r2
 802b68e:	b29b      	uxth	r3, r3
 802b690:	b21a      	sxth	r2, r3
 802b692:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802b694:	68f8      	ldr	r0, [r7, #12]
 802b696:	47a0      	blx	r4
        for ( i = 0; i < w; i++ )
 802b698:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802b69c:	b29b      	uxth	r3, r3
 802b69e:	3301      	adds	r3, #1
 802b6a0:	b29b      	uxth	r3, r3
 802b6a2:	82fb      	strh	r3, [r7, #22]
 802b6a4:	e7ae      	b.n	802b604 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0x36>
    for ( j = 0; j < h; j++ )
 802b6a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802b6aa:	b29b      	uxth	r3, r3
 802b6ac:	3301      	adds	r3, #1
 802b6ae:	b29b      	uxth	r3, r3
 802b6b0:	82bb      	strh	r3, [r7, #20]
 802b6b2:	e79f      	b.n	802b5f4 <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt+0x26>
            }
        }
    }
}
 802b6b4:	bf00      	nop
 802b6b6:	371c      	adds	r7, #28
 802b6b8:	46bd      	mov	sp, r7
 802b6ba:	bd90      	pop	{r4, r7, pc}

0802b6bc <_ZN12Adafruit_GFX9setCursorEss>:
//      line >>= 1;
//    }
//  }
//}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
 802b6bc:	b480      	push	{r7}
 802b6be:	b083      	sub	sp, #12
 802b6c0:	af00      	add	r7, sp, #0
 802b6c2:	6078      	str	r0, [r7, #4]
 802b6c4:	460b      	mov	r3, r1
 802b6c6:	807b      	strh	r3, [r7, #2]
 802b6c8:	4613      	mov	r3, r2
 802b6ca:	803b      	strh	r3, [r7, #0]
  cursor_x = x;
 802b6cc:	687b      	ldr	r3, [r7, #4]
 802b6ce:	887a      	ldrh	r2, [r7, #2]
 802b6d0:	819a      	strh	r2, [r3, #12]
  cursor_y = y;
 802b6d2:	687b      	ldr	r3, [r7, #4]
 802b6d4:	883a      	ldrh	r2, [r7, #0]
 802b6d6:	81da      	strh	r2, [r3, #14]
}
 802b6d8:	bf00      	nop
 802b6da:	370c      	adds	r7, #12
 802b6dc:	46bd      	mov	sp, r7
 802b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6e2:	4770      	bx	lr

0802b6e4 <_ZN12Adafruit_GFX9getCursorEPsS0_>:

void Adafruit_GFX::getCursor( int16_t *pX, int16_t *pY ) {
 802b6e4:	b480      	push	{r7}
 802b6e6:	b085      	sub	sp, #20
 802b6e8:	af00      	add	r7, sp, #0
 802b6ea:	60f8      	str	r0, [r7, #12]
 802b6ec:	60b9      	str	r1, [r7, #8]
 802b6ee:	607a      	str	r2, [r7, #4]
    if( pX )     *pX = cursor_x;
 802b6f0:	68bb      	ldr	r3, [r7, #8]
 802b6f2:	2b00      	cmp	r3, #0
 802b6f4:	d004      	beq.n	802b700 <_ZN12Adafruit_GFX9getCursorEPsS0_+0x1c>
 802b6f6:	68fb      	ldr	r3, [r7, #12]
 802b6f8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b6fc:	68bb      	ldr	r3, [r7, #8]
 802b6fe:	801a      	strh	r2, [r3, #0]
    if( pY )     *pY = cursor_y;
 802b700:	687b      	ldr	r3, [r7, #4]
 802b702:	2b00      	cmp	r3, #0
 802b704:	d004      	beq.n	802b710 <_ZN12Adafruit_GFX9getCursorEPsS0_+0x2c>
 802b706:	68fb      	ldr	r3, [r7, #12]
 802b708:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 802b70c:	687b      	ldr	r3, [r7, #4]
 802b70e:	801a      	strh	r2, [r3, #0]
}
 802b710:	bf00      	nop
 802b712:	3714      	adds	r7, #20
 802b714:	46bd      	mov	sp, r7
 802b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b71a:	4770      	bx	lr

0802b71c <_ZNK12Adafruit_GFX11getRotationEv>:

void Adafruit_GFX::setTextWrap(bool w) {
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) const {
 802b71c:	b480      	push	{r7}
 802b71e:	b083      	sub	sp, #12
 802b720:	af00      	add	r7, sp, #0
 802b722:	6078      	str	r0, [r7, #4]
  return rotation;
 802b724:	687b      	ldr	r3, [r7, #4]
 802b726:	7d5b      	ldrb	r3, [r3, #21]
}
 802b728:	4618      	mov	r0, r3
 802b72a:	370c      	adds	r7, #12
 802b72c:	46bd      	mov	sp, r7
 802b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b732:	4770      	bx	lr

0802b734 <_ZNK12Adafruit_GFX5widthEv>:
    break;
  }
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
 802b734:	b480      	push	{r7}
 802b736:	b083      	sub	sp, #12
 802b738:	af00      	add	r7, sp, #0
 802b73a:	6078      	str	r0, [r7, #4]
  return _width;
 802b73c:	687b      	ldr	r3, [r7, #4]
 802b73e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 802b742:	4618      	mov	r0, r3
 802b744:	370c      	adds	r7, #12
 802b746:	46bd      	mov	sp, r7
 802b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b74c:	4770      	bx	lr

0802b74e <_ZNK12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) const {
 802b74e:	b480      	push	{r7}
 802b750:	b083      	sub	sp, #12
 802b752:	af00      	add	r7, sp, #0
 802b754:	6078      	str	r0, [r7, #4]
  return _height;
 802b756:	687b      	ldr	r3, [r7, #4]
 802b758:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 802b75c:	4618      	mov	r0, r3
 802b75e:	370c      	adds	r7, #12
 802b760:	46bd      	mov	sp, r7
 802b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b766:	4770      	bx	lr

0802b768 <_ZN16Adafruit_SSD13065debugEi>:
  virtual void drawPixel(int16_t x, int16_t y, uint16_t color);

  virtual void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
  virtual void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);

  void debug( int bEnable ){ dbg = bEnable; }
 802b768:	b480      	push	{r7}
 802b76a:	b083      	sub	sp, #12
 802b76c:	af00      	add	r7, sp, #0
 802b76e:	6078      	str	r0, [r7, #4]
 802b770:	6039      	str	r1, [r7, #0]
 802b772:	683b      	ldr	r3, [r7, #0]
 802b774:	b25a      	sxtb	r2, r3
 802b776:	687b      	ldr	r3, [r7, #4]
 802b778:	779a      	strb	r2, [r3, #30]
 802b77a:	bf00      	nop
 802b77c:	370c      	adds	r7, #12
 802b77e:	46bd      	mov	sp, r7
 802b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b784:	4770      	bx	lr
	...

0802b788 <_ZN16Adafruit_SSD13069drawPixelEsst>:

#endif

// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel( int16_t x, int16_t y, uint16_t color )
{
 802b788:	b580      	push	{r7, lr}
 802b78a:	b086      	sub	sp, #24
 802b78c:	af00      	add	r7, sp, #0
 802b78e:	60f8      	str	r0, [r7, #12]
 802b790:	4608      	mov	r0, r1
 802b792:	4611      	mov	r1, r2
 802b794:	461a      	mov	r2, r3
 802b796:	4603      	mov	r3, r0
 802b798:	817b      	strh	r3, [r7, #10]
 802b79a:	460b      	mov	r3, r1
 802b79c:	813b      	strh	r3, [r7, #8]
 802b79e:	4613      	mov	r3, r2
 802b7a0:	80fb      	strh	r3, [r7, #6]
    if ( ( x < 0 ) || ( x >= width() ) || ( y < 0 ) || ( y >= height() ) )
 802b7a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 802b7a6:	2b00      	cmp	r3, #0
 802b7a8:	db17      	blt.n	802b7da <_ZN16Adafruit_SSD13069drawPixelEsst+0x52>
 802b7aa:	68fb      	ldr	r3, [r7, #12]
 802b7ac:	4618      	mov	r0, r3
 802b7ae:	f7ff ffc1 	bl	802b734 <_ZNK12Adafruit_GFX5widthEv>
 802b7b2:	4603      	mov	r3, r0
 802b7b4:	461a      	mov	r2, r3
 802b7b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 802b7ba:	4293      	cmp	r3, r2
 802b7bc:	da0d      	bge.n	802b7da <_ZN16Adafruit_SSD13069drawPixelEsst+0x52>
 802b7be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b7c2:	2b00      	cmp	r3, #0
 802b7c4:	db09      	blt.n	802b7da <_ZN16Adafruit_SSD13069drawPixelEsst+0x52>
 802b7c6:	68fb      	ldr	r3, [r7, #12]
 802b7c8:	4618      	mov	r0, r3
 802b7ca:	f7ff ffc0 	bl	802b74e <_ZNK12Adafruit_GFX6heightEv>
 802b7ce:	4603      	mov	r3, r0
 802b7d0:	461a      	mov	r2, r3
 802b7d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b7d6:	4293      	cmp	r3, r2
 802b7d8:	db01      	blt.n	802b7de <_ZN16Adafruit_SSD13069drawPixelEsst+0x56>
 802b7da:	2301      	movs	r3, #1
 802b7dc:	e000      	b.n	802b7e0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x58>
 802b7de:	2300      	movs	r3, #0
 802b7e0:	2b00      	cmp	r3, #0
 802b7e2:	f040 80b3 	bne.w	802b94c <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c4>
        return;

    // check rotation, move pixel around if necessary
    switch ( getRotation() )
 802b7e6:	68fb      	ldr	r3, [r7, #12]
 802b7e8:	4618      	mov	r0, r3
 802b7ea:	f7ff ff97 	bl	802b71c <_ZNK12Adafruit_GFX11getRotationEv>
 802b7ee:	4603      	mov	r3, r0
 802b7f0:	2b03      	cmp	r3, #3
 802b7f2:	d02c      	beq.n	802b84e <_ZN16Adafruit_SSD13069drawPixelEsst+0xc6>
 802b7f4:	2b03      	cmp	r3, #3
 802b7f6:	dc3b      	bgt.n	802b870 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
 802b7f8:	2b01      	cmp	r3, #1
 802b7fa:	d002      	beq.n	802b802 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7a>
 802b7fc:	2b02      	cmp	r3, #2
 802b7fe:	d011      	beq.n	802b824 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9c>
 802b800:	e036      	b.n	802b870 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
    {
    case 1:
        ssd1306_swap( x, y );
 802b802:	897b      	ldrh	r3, [r7, #10]
 802b804:	82bb      	strh	r3, [r7, #20]
 802b806:	893b      	ldrh	r3, [r7, #8]
 802b808:	817b      	strh	r3, [r7, #10]
 802b80a:	8abb      	ldrh	r3, [r7, #20]
 802b80c:	813b      	strh	r3, [r7, #8]
        x = WIDTH - x - 1;
 802b80e:	68fb      	ldr	r3, [r7, #12]
 802b810:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802b814:	b29a      	uxth	r2, r3
 802b816:	897b      	ldrh	r3, [r7, #10]
 802b818:	1ad3      	subs	r3, r2, r3
 802b81a:	b29b      	uxth	r3, r3
 802b81c:	3b01      	subs	r3, #1
 802b81e:	b29b      	uxth	r3, r3
 802b820:	817b      	strh	r3, [r7, #10]
        break;
 802b822:	e025      	b.n	802b870 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
    case 2:
        x = WIDTH - x - 1;
 802b824:	68fb      	ldr	r3, [r7, #12]
 802b826:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802b82a:	b29a      	uxth	r2, r3
 802b82c:	897b      	ldrh	r3, [r7, #10]
 802b82e:	1ad3      	subs	r3, r2, r3
 802b830:	b29b      	uxth	r3, r3
 802b832:	3b01      	subs	r3, #1
 802b834:	b29b      	uxth	r3, r3
 802b836:	817b      	strh	r3, [r7, #10]
        y = HEIGHT - y - 1;
 802b838:	68fb      	ldr	r3, [r7, #12]
 802b83a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802b83e:	b29a      	uxth	r2, r3
 802b840:	893b      	ldrh	r3, [r7, #8]
 802b842:	1ad3      	subs	r3, r2, r3
 802b844:	b29b      	uxth	r3, r3
 802b846:	3b01      	subs	r3, #1
 802b848:	b29b      	uxth	r3, r3
 802b84a:	813b      	strh	r3, [r7, #8]
        break;
 802b84c:	e010      	b.n	802b870 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
    case 3:
        ssd1306_swap( x, y );
 802b84e:	897b      	ldrh	r3, [r7, #10]
 802b850:	82fb      	strh	r3, [r7, #22]
 802b852:	893b      	ldrh	r3, [r7, #8]
 802b854:	817b      	strh	r3, [r7, #10]
 802b856:	8afb      	ldrh	r3, [r7, #22]
 802b858:	813b      	strh	r3, [r7, #8]
        y = HEIGHT - y - 1;
 802b85a:	68fb      	ldr	r3, [r7, #12]
 802b85c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802b860:	b29a      	uxth	r2, r3
 802b862:	893b      	ldrh	r3, [r7, #8]
 802b864:	1ad3      	subs	r3, r2, r3
 802b866:	b29b      	uxth	r3, r3
 802b868:	3b01      	subs	r3, #1
 802b86a:	b29b      	uxth	r3, r3
 802b86c:	813b      	strh	r3, [r7, #8]
        break;
 802b86e:	bf00      	nop
    }

    // x is which column
    switch ( color )
 802b870:	88fb      	ldrh	r3, [r7, #6]
 802b872:	2b02      	cmp	r3, #2
 802b874:	d049      	beq.n	802b90a <_ZN16Adafruit_SSD13069drawPixelEsst+0x182>
 802b876:	2b02      	cmp	r3, #2
 802b878:	dc69      	bgt.n	802b94e <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
 802b87a:	2b00      	cmp	r3, #0
 802b87c:	d022      	beq.n	802b8c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x13c>
 802b87e:	2b01      	cmp	r3, #1
 802b880:	d165      	bne.n	802b94e <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
    {
    case WHITE:   buffer[x + ( y / 8 ) * SSD1306_LCDWIDTH] |= ( 1 << ( y & 7 ) ); break;
 802b882:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b886:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b88a:	2b00      	cmp	r3, #0
 802b88c:	da00      	bge.n	802b890 <_ZN16Adafruit_SSD13069drawPixelEsst+0x108>
 802b88e:	3307      	adds	r3, #7
 802b890:	10db      	asrs	r3, r3, #3
 802b892:	b218      	sxth	r0, r3
 802b894:	4603      	mov	r3, r0
 802b896:	01db      	lsls	r3, r3, #7
 802b898:	4413      	add	r3, r2
 802b89a:	4a2e      	ldr	r2, [pc, #184]	; (802b954 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 802b89c:	5cd3      	ldrb	r3, [r2, r3]
 802b89e:	b25a      	sxtb	r2, r3
 802b8a0:	893b      	ldrh	r3, [r7, #8]
 802b8a2:	f003 0307 	and.w	r3, r3, #7
 802b8a6:	2101      	movs	r1, #1
 802b8a8:	fa01 f303 	lsl.w	r3, r1, r3
 802b8ac:	b25b      	sxtb	r3, r3
 802b8ae:	4313      	orrs	r3, r2
 802b8b0:	b259      	sxtb	r1, r3
 802b8b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b8b6:	4603      	mov	r3, r0
 802b8b8:	01db      	lsls	r3, r3, #7
 802b8ba:	4413      	add	r3, r2
 802b8bc:	b2c9      	uxtb	r1, r1
 802b8be:	4a25      	ldr	r2, [pc, #148]	; (802b954 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 802b8c0:	54d1      	strb	r1, [r2, r3]
 802b8c2:	e044      	b.n	802b94e <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
    case BLACK:   buffer[x + ( y / 8 ) * SSD1306_LCDWIDTH] &= ~( 1 << ( y & 7 ) ); break;
 802b8c4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b8c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b8cc:	2b00      	cmp	r3, #0
 802b8ce:	da00      	bge.n	802b8d2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x14a>
 802b8d0:	3307      	adds	r3, #7
 802b8d2:	10db      	asrs	r3, r3, #3
 802b8d4:	b218      	sxth	r0, r3
 802b8d6:	4603      	mov	r3, r0
 802b8d8:	01db      	lsls	r3, r3, #7
 802b8da:	4413      	add	r3, r2
 802b8dc:	4a1d      	ldr	r2, [pc, #116]	; (802b954 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 802b8de:	5cd3      	ldrb	r3, [r2, r3]
 802b8e0:	b25a      	sxtb	r2, r3
 802b8e2:	893b      	ldrh	r3, [r7, #8]
 802b8e4:	f003 0307 	and.w	r3, r3, #7
 802b8e8:	2101      	movs	r1, #1
 802b8ea:	fa01 f303 	lsl.w	r3, r1, r3
 802b8ee:	b25b      	sxtb	r3, r3
 802b8f0:	43db      	mvns	r3, r3
 802b8f2:	b25b      	sxtb	r3, r3
 802b8f4:	4013      	ands	r3, r2
 802b8f6:	b259      	sxtb	r1, r3
 802b8f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b8fc:	4603      	mov	r3, r0
 802b8fe:	01db      	lsls	r3, r3, #7
 802b900:	4413      	add	r3, r2
 802b902:	b2c9      	uxtb	r1, r1
 802b904:	4a13      	ldr	r2, [pc, #76]	; (802b954 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 802b906:	54d1      	strb	r1, [r2, r3]
 802b908:	e021      	b.n	802b94e <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
    case INVERSE: buffer[x + ( y / 8 ) * SSD1306_LCDWIDTH] ^= ( 1 << ( y & 7 ) ); break;
 802b90a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b90e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802b912:	2b00      	cmp	r3, #0
 802b914:	da00      	bge.n	802b918 <_ZN16Adafruit_SSD13069drawPixelEsst+0x190>
 802b916:	3307      	adds	r3, #7
 802b918:	10db      	asrs	r3, r3, #3
 802b91a:	b218      	sxth	r0, r3
 802b91c:	4603      	mov	r3, r0
 802b91e:	01db      	lsls	r3, r3, #7
 802b920:	4413      	add	r3, r2
 802b922:	4a0c      	ldr	r2, [pc, #48]	; (802b954 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 802b924:	5cd3      	ldrb	r3, [r2, r3]
 802b926:	b25a      	sxtb	r2, r3
 802b928:	893b      	ldrh	r3, [r7, #8]
 802b92a:	f003 0307 	and.w	r3, r3, #7
 802b92e:	2101      	movs	r1, #1
 802b930:	fa01 f303 	lsl.w	r3, r1, r3
 802b934:	b25b      	sxtb	r3, r3
 802b936:	4053      	eors	r3, r2
 802b938:	b259      	sxtb	r1, r3
 802b93a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 802b93e:	4603      	mov	r3, r0
 802b940:	01db      	lsls	r3, r3, #7
 802b942:	4413      	add	r3, r2
 802b944:	b2c9      	uxtb	r1, r1
 802b946:	4a03      	ldr	r2, [pc, #12]	; (802b954 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 802b948:	54d1      	strb	r1, [r2, r3]
 802b94a:	e000      	b.n	802b94e <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
        return;
 802b94c:	bf00      	nop
    }
}
 802b94e:	3718      	adds	r7, #24
 802b950:	46bd      	mov	sp, r7
 802b952:	bd80      	pop	{r7, pc}
 802b954:	20000294 	.word	0x20000294

0802b958 <_ZN16Adafruit_SSD1306C1Ea>:


// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
 802b958:	b580      	push	{r7, lr}
 802b95a:	b082      	sub	sp, #8
 802b95c:	af00      	add	r7, sp, #0
 802b95e:	6078      	str	r0, [r7, #4]
 802b960:	460b      	mov	r3, r1
 802b962:	70fb      	strb	r3, [r7, #3]
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT)
 802b964:	687b      	ldr	r3, [r7, #4]
 802b966:	2220      	movs	r2, #32
 802b968:	2180      	movs	r1, #128	; 0x80
 802b96a:	4618      	mov	r0, r3
 802b96c:	f7ff fc58 	bl	802b220 <_ZN12Adafruit_GFXC1Ess>
 802b970:	4a0f      	ldr	r2, [pc, #60]	; (802b9b0 <_ZN16Adafruit_SSD1306C1Ea+0x58>)
 802b972:	687b      	ldr	r3, [r7, #4]
 802b974:	601a      	str	r2, [r3, #0]
{
  sclk = dc = cs = sid = -1;
 802b976:	687b      	ldr	r3, [r7, #4]
 802b978:	22ff      	movs	r2, #255	; 0xff
 802b97a:	765a      	strb	r2, [r3, #25]
 802b97c:	687b      	ldr	r3, [r7, #4]
 802b97e:	f993 2019 	ldrsb.w	r2, [r3, #25]
 802b982:	687b      	ldr	r3, [r7, #4]
 802b984:	775a      	strb	r2, [r3, #29]
 802b986:	687b      	ldr	r3, [r7, #4]
 802b988:	f993 201d 	ldrsb.w	r2, [r3, #29]
 802b98c:	687b      	ldr	r3, [r7, #4]
 802b98e:	76da      	strb	r2, [r3, #27]
 802b990:	687b      	ldr	r3, [r7, #4]
 802b992:	f993 201b 	ldrsb.w	r2, [r3, #27]
 802b996:	687b      	ldr	r3, [r7, #4]
 802b998:	769a      	strb	r2, [r3, #26]
  dbg = 1;		//	Default Enable Debug Print
 802b99a:	687b      	ldr	r3, [r7, #4]
 802b99c:	2201      	movs	r2, #1
 802b99e:	779a      	strb	r2, [r3, #30]
  rst = reset;
 802b9a0:	687b      	ldr	r3, [r7, #4]
 802b9a2:	78fa      	ldrb	r2, [r7, #3]
 802b9a4:	771a      	strb	r2, [r3, #28]
}
 802b9a6:	687b      	ldr	r3, [r7, #4]
 802b9a8:	4618      	mov	r0, r3
 802b9aa:	3708      	adds	r7, #8
 802b9ac:	46bd      	mov	sp, r7
 802b9ae:	bd80      	pop	{r7, pc}
 802b9b0:	0803b9f0 	.word	0x0803b9f0

0802b9b4 <_ZN16Adafruit_SSD13065beginEhhb>:


void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset)
{
 802b9b4:	b580      	push	{r7, lr}
 802b9b6:	b082      	sub	sp, #8
 802b9b8:	af00      	add	r7, sp, #0
 802b9ba:	6078      	str	r0, [r7, #4]
 802b9bc:	4608      	mov	r0, r1
 802b9be:	4611      	mov	r1, r2
 802b9c0:	461a      	mov	r2, r3
 802b9c2:	4603      	mov	r3, r0
 802b9c4:	70fb      	strb	r3, [r7, #3]
 802b9c6:	460b      	mov	r3, r1
 802b9c8:	70bb      	strb	r3, [r7, #2]
 802b9ca:	4613      	mov	r3, r2
 802b9cc:	707b      	strb	r3, [r7, #1]
  _vccstate = vccstate;
 802b9ce:	f997 2003 	ldrsb.w	r2, [r7, #3]
 802b9d2:	687b      	ldr	r3, [r7, #4]
 802b9d4:	761a      	strb	r2, [r3, #24]
  _i2caddr = i2caddr;
 802b9d6:	f997 2002 	ldrsb.w	r2, [r7, #2]
 802b9da:	687b      	ldr	r3, [r7, #4]
 802b9dc:	75da      	strb	r2, [r3, #23]

  // Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 802b9de:	21ae      	movs	r1, #174	; 0xae
 802b9e0:	6878      	ldr	r0, [r7, #4]
 802b9e2:	f000 f879 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 802b9e6:	21d5      	movs	r1, #213	; 0xd5
 802b9e8:	6878      	ldr	r0, [r7, #4]
 802b9ea:	f000 f875 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 802b9ee:	2180      	movs	r1, #128	; 0x80
 802b9f0:	6878      	ldr	r0, [r7, #4]
 802b9f2:	f000 f871 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 802b9f6:	21a8      	movs	r1, #168	; 0xa8
 802b9f8:	6878      	ldr	r0, [r7, #4]
 802b9fa:	f000 f86d 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 802b9fe:	211f      	movs	r1, #31
 802ba00:	6878      	ldr	r0, [r7, #4]
 802ba02:	f000 f869 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 802ba06:	21d3      	movs	r1, #211	; 0xd3
 802ba08:	6878      	ldr	r0, [r7, #4]
 802ba0a:	f000 f865 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x0);                                   // no offset
 802ba0e:	2100      	movs	r1, #0
 802ba10:	6878      	ldr	r0, [r7, #4]
 802ba12:	f000 f861 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 802ba16:	2140      	movs	r1, #64	; 0x40
 802ba18:	6878      	ldr	r0, [r7, #4]
 802ba1a:	f000 f85d 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 802ba1e:	218d      	movs	r1, #141	; 0x8d
 802ba20:	6878      	ldr	r0, [r7, #4]
 802ba22:	f000 f859 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (vccstate == SSD1306_EXTERNALVCC)
 802ba26:	78fb      	ldrb	r3, [r7, #3]
 802ba28:	2b01      	cmp	r3, #1
 802ba2a:	d104      	bne.n	802ba36 <_ZN16Adafruit_SSD13065beginEhhb+0x82>
    { ssd1306_command(0x10); }
 802ba2c:	2110      	movs	r1, #16
 802ba2e:	6878      	ldr	r0, [r7, #4]
 802ba30:	f000 f852 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
 802ba34:	e003      	b.n	802ba3e <_ZN16Adafruit_SSD13065beginEhhb+0x8a>
  else
    { ssd1306_command(0x14); }
 802ba36:	2114      	movs	r1, #20
 802ba38:	6878      	ldr	r0, [r7, #4]
 802ba3a:	f000 f84d 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 802ba3e:	2120      	movs	r1, #32
 802ba40:	6878      	ldr	r0, [r7, #4]
 802ba42:	f000 f849 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 802ba46:	2100      	movs	r1, #0
 802ba48:	6878      	ldr	r0, [r7, #4]
 802ba4a:	f000 f845 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 802ba4e:	21a1      	movs	r1, #161	; 0xa1
 802ba50:	6878      	ldr	r0, [r7, #4]
 802ba52:	f000 f841 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_COMSCANDEC);
 802ba56:	21c8      	movs	r1, #200	; 0xc8
 802ba58:	6878      	ldr	r0, [r7, #4]
 802ba5a:	f000 f83d 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 802ba5e:	21da      	movs	r1, #218	; 0xda
 802ba60:	6878      	ldr	r0, [r7, #4]
 802ba62:	f000 f839 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x02);
 802ba66:	2102      	movs	r1, #2
 802ba68:	6878      	ldr	r0, [r7, #4]
 802ba6a:	f000 f835 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 802ba6e:	2181      	movs	r1, #129	; 0x81
 802ba70:	6878      	ldr	r0, [r7, #4]
 802ba72:	f000 f831 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x8F);
 802ba76:	218f      	movs	r1, #143	; 0x8f
 802ba78:	6878      	ldr	r0, [r7, #4]
 802ba7a:	f000 f82d 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 802ba7e:	21d9      	movs	r1, #217	; 0xd9
 802ba80:	6878      	ldr	r0, [r7, #4]
 802ba82:	f000 f829 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (vccstate == SSD1306_EXTERNALVCC)
 802ba86:	78fb      	ldrb	r3, [r7, #3]
 802ba88:	2b01      	cmp	r3, #1
 802ba8a:	d104      	bne.n	802ba96 <_ZN16Adafruit_SSD13065beginEhhb+0xe2>
    { ssd1306_command(0x22); }
 802ba8c:	2122      	movs	r1, #34	; 0x22
 802ba8e:	6878      	ldr	r0, [r7, #4]
 802ba90:	f000 f822 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
 802ba94:	e003      	b.n	802ba9e <_ZN16Adafruit_SSD13065beginEhhb+0xea>
  else
    { ssd1306_command(0xF1); }
 802ba96:	21f1      	movs	r1, #241	; 0xf1
 802ba98:	6878      	ldr	r0, [r7, #4]
 802ba9a:	f000 f81d 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 802ba9e:	21db      	movs	r1, #219	; 0xdb
 802baa0:	6878      	ldr	r0, [r7, #4]
 802baa2:	f000 f819 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x40);
 802baa6:	2140      	movs	r1, #64	; 0x40
 802baa8:	6878      	ldr	r0, [r7, #4]
 802baaa:	f000 f815 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 802baae:	21a4      	movs	r1, #164	; 0xa4
 802bab0:	6878      	ldr	r0, [r7, #4]
 802bab2:	f000 f811 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 802bab6:	21a6      	movs	r1, #166	; 0xa6
 802bab8:	6878      	ldr	r0, [r7, #4]
 802baba:	f000 f80d 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 802babe:	212e      	movs	r1, #46	; 0x2e
 802bac0:	6878      	ldr	r0, [r7, #4]
 802bac2:	f000 f809 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 802bac6:	21af      	movs	r1, #175	; 0xaf
 802bac8:	6878      	ldr	r0, [r7, #4]
 802baca:	f000 f805 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
}
 802bace:	bf00      	nop
 802bad0:	3708      	adds	r7, #8
 802bad2:	46bd      	mov	sp, r7
 802bad4:	bd80      	pop	{r7, pc}
	...

0802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c)
{
 802bad8:	b580      	push	{r7, lr}
 802bada:	b084      	sub	sp, #16
 802badc:	af02      	add	r7, sp, #8
 802bade:	6078      	str	r0, [r7, #4]
 802bae0:	460b      	mov	r3, r1
 802bae2:	70fb      	strb	r3, [r7, #3]
  Buffer_CMD[1] = c;
 802bae4:	4a0d      	ldr	r2, [pc, #52]	; (802bb1c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>)
 802bae6:	78fb      	ldrb	r3, [r7, #3]
 802bae8:	7053      	strb	r3, [r2, #1]
#if defined(_WIN32)
#else   //  STM32
  while(HAL_I2C_Master_Transmit(&hi2c3,_i2caddr,Buffer_CMD,0x02,0x10) != HAL_OK)
 802baea:	687b      	ldr	r3, [r7, #4]
 802baec:	f993 3017 	ldrsb.w	r3, [r3, #23]
 802baf0:	b299      	uxth	r1, r3
 802baf2:	2310      	movs	r3, #16
 802baf4:	9300      	str	r3, [sp, #0]
 802baf6:	2302      	movs	r3, #2
 802baf8:	4a08      	ldr	r2, [pc, #32]	; (802bb1c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>)
 802bafa:	4809      	ldr	r0, [pc, #36]	; (802bb20 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x48>)
 802bafc:	f7f7 fe9e 	bl	802383c <HAL_I2C_Master_Transmit>
 802bb00:	4603      	mov	r3, r0
 802bb02:	2b00      	cmp	r3, #0
 802bb04:	bf14      	ite	ne
 802bb06:	2301      	movne	r3, #1
 802bb08:	2300      	moveq	r3, #0
 802bb0a:	b2db      	uxtb	r3, r3
 802bb0c:	2b00      	cmp	r3, #0
 802bb0e:	d000      	beq.n	802bb12 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x3a>
 802bb10:	e7eb      	b.n	802baea <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x12>
  {

  }
#endif
}
 802bb12:	bf00      	nop
 802bb14:	3708      	adds	r7, #8
 802bb16:	46bd      	mov	sp, r7
 802bb18:	bd80      	pop	{r7, pc}
 802bb1a:	bf00      	nop
 802bb1c:	20001294 	.word	0x20001294
 802bb20:	20000e8c 	.word	0x20000e8c

0802bb24 <_ZN16Adafruit_SSD130612ssd1306_dataEt>:

void Adafruit_SSD1306::ssd1306_data(uint16_t a)
{
 802bb24:	b580      	push	{r7, lr}
 802bb26:	b086      	sub	sp, #24
 802bb28:	af02      	add	r7, sp, #8
 802bb2a:	6078      	str	r0, [r7, #4]
 802bb2c:	460b      	mov	r3, r1
 802bb2e:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  
  for(i = 0; i < 128 ; i++)
 802bb30:	2300      	movs	r3, #0
 802bb32:	73fb      	strb	r3, [r7, #15]
 802bb34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802bb38:	2b00      	cmp	r3, #0
 802bb3a:	db0c      	blt.n	802bb56 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x32>
  {
    Buffer_DATA[i+1] = buffer[a+i];
 802bb3c:	887a      	ldrh	r2, [r7, #2]
 802bb3e:	7bfb      	ldrb	r3, [r7, #15]
 802bb40:	441a      	add	r2, r3
 802bb42:	7bfb      	ldrb	r3, [r7, #15]
 802bb44:	3301      	adds	r3, #1
 802bb46:	4910      	ldr	r1, [pc, #64]	; (802bb88 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x64>)
 802bb48:	5c89      	ldrb	r1, [r1, r2]
 802bb4a:	4a10      	ldr	r2, [pc, #64]	; (802bb8c <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x68>)
 802bb4c:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 128 ; i++)
 802bb4e:	7bfb      	ldrb	r3, [r7, #15]
 802bb50:	3301      	adds	r3, #1
 802bb52:	73fb      	strb	r3, [r7, #15]
 802bb54:	e7ee      	b.n	802bb34 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x10>
  }

#if defined(_WIN32)
#else   //  STM32
  while(HAL_I2C_Master_Transmit(&hi2c3,_i2caddr,Buffer_DATA,129,0x10) != HAL_OK)
 802bb56:	687b      	ldr	r3, [r7, #4]
 802bb58:	f993 3017 	ldrsb.w	r3, [r3, #23]
 802bb5c:	b299      	uxth	r1, r3
 802bb5e:	2310      	movs	r3, #16
 802bb60:	9300      	str	r3, [sp, #0]
 802bb62:	2381      	movs	r3, #129	; 0x81
 802bb64:	4a09      	ldr	r2, [pc, #36]	; (802bb8c <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x68>)
 802bb66:	480a      	ldr	r0, [pc, #40]	; (802bb90 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x6c>)
 802bb68:	f7f7 fe68 	bl	802383c <HAL_I2C_Master_Transmit>
 802bb6c:	4603      	mov	r3, r0
 802bb6e:	2b00      	cmp	r3, #0
 802bb70:	bf14      	ite	ne
 802bb72:	2301      	movne	r3, #1
 802bb74:	2300      	moveq	r3, #0
 802bb76:	b2db      	uxtb	r3, r3
 802bb78:	2b00      	cmp	r3, #0
 802bb7a:	d000      	beq.n	802bb7e <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x5a>
 802bb7c:	e7eb      	b.n	802bb56 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x32>
  {

  }
#endif
}
 802bb7e:	bf00      	nop
 802bb80:	3710      	adds	r7, #16
 802bb82:	46bd      	mov	sp, r7
 802bb84:	bd80      	pop	{r7, pc}
 802bb86:	bf00      	nop
 802bb88:	20000294 	.word	0x20000294
 802bb8c:	20000010 	.word	0x20000010
 802bb90:	20000e8c 	.word	0x20000e8c

0802bb94 <_ZN16Adafruit_SSD13067displayEv>:
  ssd1306_command(SSD1306_SETCONTRAST);
  ssd1306_command(contrast);
}

void Adafruit_SSD1306::display(void) 
{
 802bb94:	b580      	push	{r7, lr}
 802bb96:	b084      	sub	sp, #16
 802bb98:	af00      	add	r7, sp, #0
 802bb9a:	6078      	str	r0, [r7, #4]
  ssd1306_command(SSD1306_COLUMNADDR);
 802bb9c:	2121      	movs	r1, #33	; 0x21
 802bb9e:	6878      	ldr	r0, [r7, #4]
 802bba0:	f7ff ff9a 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
 802bba4:	2100      	movs	r1, #0
 802bba6:	6878      	ldr	r0, [r7, #4]
 802bba8:	f7ff ff96 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 802bbac:	217f      	movs	r1, #127	; 0x7f
 802bbae:	6878      	ldr	r0, [r7, #4]
 802bbb0:	f7ff ff92 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
 802bbb4:	2122      	movs	r1, #34	; 0x22
 802bbb6:	6878      	ldr	r0, [r7, #4]
 802bbb8:	f7ff ff8e 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
 802bbbc:	2100      	movs	r1, #0
 802bbbe:	6878      	ldr	r0, [r7, #4]
 802bbc0:	f7ff ff8a 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #if SSD1306_LCDHEIGHT == 64
    ssd1306_command(7); // Page end address
  #endif
  #if SSD1306_LCDHEIGHT == 32
    ssd1306_command(3); // Page end address
 802bbc4:	2103      	movs	r1, #3
 802bbc6:	6878      	ldr	r0, [r7, #4]
 802bbc8:	f7ff ff86 	bl	802bad8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  uint8_t twbrbackup = TWBR;
  TWBR = 12; // upgrade to 400KHz!
#endif

//I2C write
  for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i += 128) 
 802bbcc:	2300      	movs	r3, #0
 802bbce:	81fb      	strh	r3, [r7, #14]
 802bbd0:	89fb      	ldrh	r3, [r7, #14]
 802bbd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802bbd6:	d208      	bcs.n	802bbea <_ZN16Adafruit_SSD13067displayEv+0x56>
  {
    
    ssd1306_data(i);
 802bbd8:	89fb      	ldrh	r3, [r7, #14]
 802bbda:	4619      	mov	r1, r3
 802bbdc:	6878      	ldr	r0, [r7, #4]
 802bbde:	f7ff ffa1 	bl	802bb24 <_ZN16Adafruit_SSD130612ssd1306_dataEt>
  for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i += 128) 
 802bbe2:	89fb      	ldrh	r3, [r7, #14]
 802bbe4:	3380      	adds	r3, #128	; 0x80
 802bbe6:	81fb      	strh	r3, [r7, #14]
 802bbe8:	e7f2      	b.n	802bbd0 <_ZN16Adafruit_SSD13067displayEv+0x3c>

#ifdef TWBR
    TWBR = twbrbackup;
#endif
  
}
 802bbea:	bf00      	nop
 802bbec:	3710      	adds	r7, #16
 802bbee:	46bd      	mov	sp, r7
 802bbf0:	bd80      	pop	{r7, pc}
	...

0802bbf4 <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void)
{
 802bbf4:	b580      	push	{r7, lr}
 802bbf6:	b082      	sub	sp, #8
 802bbf8:	af00      	add	r7, sp, #0
 802bbfa:	6078      	str	r0, [r7, #4]
  
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
 802bbfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 802bc00:	2200      	movs	r2, #0
 802bc02:	4904      	ldr	r1, [pc, #16]	; (802bc14 <_ZN16Adafruit_SSD130612clearDisplayEv+0x20>)
 802bc04:	6878      	ldr	r0, [r7, #4]
 802bc06:	f000 fbe5 	bl	802c3d4 <_ZN16Adafruit_SSD13066memsetEPhtt>
}
 802bc0a:	bf00      	nop
 802bc0c:	3708      	adds	r7, #8
 802bc0e:	46bd      	mov	sp, r7
 802bc10:	bd80      	pop	{r7, pc}
 802bc12:	bf00      	nop
 802bc14:	20000294 	.word	0x20000294

0802bc18 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:


void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 802bc18:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 802bc1c:	b08d      	sub	sp, #52	; 0x34
 802bc1e:	af00      	add	r7, sp, #0
 802bc20:	60f8      	str	r0, [r7, #12]
 802bc22:	4608      	mov	r0, r1
 802bc24:	4611      	mov	r1, r2
 802bc26:	461a      	mov	r2, r3
 802bc28:	4603      	mov	r3, r0
 802bc2a:	817b      	strh	r3, [r7, #10]
 802bc2c:	460b      	mov	r3, r1
 802bc2e:	813b      	strh	r3, [r7, #8]
 802bc30:	4613      	mov	r3, r2
 802bc32:	80fb      	strh	r3, [r7, #6]
  bool bSwap = false;
 802bc34:	2300      	movs	r3, #0
 802bc36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  switch(rotation)
 802bc3a:	68fb      	ldr	r3, [r7, #12]
 802bc3c:	7d5b      	ldrb	r3, [r3, #21]
 802bc3e:	2b03      	cmp	r3, #3
 802bc40:	d855      	bhi.n	802bcee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd6>
 802bc42:	a201      	add	r2, pc, #4	; (adr r2, 802bc48 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>)
 802bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802bc48:	0802bcef 	.word	0x0802bcef
 802bc4c:	0802bc59 	.word	0x0802bc59
 802bc50:	0802bc81 	.word	0x0802bc81
 802bc54:	0802bcb9 	.word	0x0802bcb9
    case 0:
      // 0 degree rotation, do nothing
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
 802bc58:	2301      	movs	r3, #1
 802bc5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 802bc5e:	897b      	ldrh	r3, [r7, #10]
 802bc60:	857b      	strh	r3, [r7, #42]	; 0x2a
 802bc62:	893b      	ldrh	r3, [r7, #8]
 802bc64:	817b      	strh	r3, [r7, #10]
 802bc66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802bc68:	813b      	strh	r3, [r7, #8]
      x = WIDTH - x - 1;
 802bc6a:	68fb      	ldr	r3, [r7, #12]
 802bc6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802bc70:	b29a      	uxth	r2, r3
 802bc72:	897b      	ldrh	r3, [r7, #10]
 802bc74:	1ad3      	subs	r3, r2, r3
 802bc76:	b29b      	uxth	r3, r3
 802bc78:	3b01      	subs	r3, #1
 802bc7a:	b29b      	uxth	r3, r3
 802bc7c:	817b      	strh	r3, [r7, #10]
      break;
 802bc7e:	e036      	b.n	802bcee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd6>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 802bc80:	68fb      	ldr	r3, [r7, #12]
 802bc82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802bc86:	b29a      	uxth	r2, r3
 802bc88:	897b      	ldrh	r3, [r7, #10]
 802bc8a:	1ad3      	subs	r3, r2, r3
 802bc8c:	b29b      	uxth	r3, r3
 802bc8e:	3b01      	subs	r3, #1
 802bc90:	b29b      	uxth	r3, r3
 802bc92:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - y - 1;
 802bc94:	68fb      	ldr	r3, [r7, #12]
 802bc96:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802bc9a:	b29a      	uxth	r2, r3
 802bc9c:	893b      	ldrh	r3, [r7, #8]
 802bc9e:	1ad3      	subs	r3, r2, r3
 802bca0:	b29b      	uxth	r3, r3
 802bca2:	3b01      	subs	r3, #1
 802bca4:	b29b      	uxth	r3, r3
 802bca6:	813b      	strh	r3, [r7, #8]
      x -= (w-1);
 802bca8:	897a      	ldrh	r2, [r7, #10]
 802bcaa:	88fb      	ldrh	r3, [r7, #6]
 802bcac:	1ad3      	subs	r3, r2, r3
 802bcae:	b29b      	uxth	r3, r3
 802bcb0:	3301      	adds	r3, #1
 802bcb2:	b29b      	uxth	r3, r3
 802bcb4:	817b      	strh	r3, [r7, #10]
      break;
 802bcb6:	e01a      	b.n	802bcee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
 802bcb8:	2301      	movs	r3, #1
 802bcba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 802bcbe:	897b      	ldrh	r3, [r7, #10]
 802bcc0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 802bcc2:	893b      	ldrh	r3, [r7, #8]
 802bcc4:	817b      	strh	r3, [r7, #10]
 802bcc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802bcc8:	813b      	strh	r3, [r7, #8]
      y = HEIGHT - y - 1;
 802bcca:	68fb      	ldr	r3, [r7, #12]
 802bccc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802bcd0:	b29a      	uxth	r2, r3
 802bcd2:	893b      	ldrh	r3, [r7, #8]
 802bcd4:	1ad3      	subs	r3, r2, r3
 802bcd6:	b29b      	uxth	r3, r3
 802bcd8:	3b01      	subs	r3, #1
 802bcda:	b29b      	uxth	r3, r3
 802bcdc:	813b      	strh	r3, [r7, #8]
      y -= (w-1);
 802bcde:	893a      	ldrh	r2, [r7, #8]
 802bce0:	88fb      	ldrh	r3, [r7, #6]
 802bce2:	1ad3      	subs	r3, r2, r3
 802bce4:	b29b      	uxth	r3, r3
 802bce6:	3301      	adds	r3, #1
 802bce8:	b29b      	uxth	r3, r3
 802bcea:	813b      	strh	r3, [r7, #8]
      break;
 802bcec:	bf00      	nop
  }

  if(bSwap)
 802bcee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bcf2:	2b00      	cmp	r3, #0
 802bcf4:	f000 80cf 	beq.w	802be96 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x27e>
 802bcf8:	68fb      	ldr	r3, [r7, #12]
 802bcfa:	627b      	str	r3, [r7, #36]	; 0x24
 802bcfc:	897b      	ldrh	r3, [r7, #10]
 802bcfe:	847b      	strh	r3, [r7, #34]	; 0x22
 802bd00:	893b      	ldrh	r3, [r7, #8]
 802bd02:	843b      	strh	r3, [r7, #32]
 802bd04:	88fb      	ldrh	r3, [r7, #6]
 802bd06:	83fb      	strh	r3, [r7, #30]
 802bd08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802bd0c:	83bb      	strh	r3, [r7, #28]

void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 802bd0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802bd12:	2b00      	cmp	r3, #0
 802bd14:	f2c0 8153 	blt.w	802bfbe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a6>
 802bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802bd1e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 802bd22:	429a      	cmp	r2, r3
 802bd24:	f280 814b 	bge.w	802bfbe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a6>

  // make sure we don't try to draw below 0
  if(__y < 0)
 802bd28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802bd2c:	2b00      	cmp	r3, #0
 802bd2e:	da06      	bge.n	802bd3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x126>
  {
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 802bd30:	8bfa      	ldrh	r2, [r7, #30]
 802bd32:	8c3b      	ldrh	r3, [r7, #32]
 802bd34:	4413      	add	r3, r2
 802bd36:	b29b      	uxth	r3, r3
 802bd38:	83fb      	strh	r3, [r7, #30]
    __y = 0;
 802bd3a:	2300      	movs	r3, #0
 802bd3c:	843b      	strh	r3, [r7, #32]

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT)
 802bd3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802bd42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802bd46:	4413      	add	r3, r2
 802bd48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802bd4a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 802bd4e:	4293      	cmp	r3, r2
 802bd50:	dd07      	ble.n	802bd62 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14a>
  {
    __h = (HEIGHT - __y);
 802bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802bd58:	b29a      	uxth	r2, r3
 802bd5a:	8c3b      	ldrh	r3, [r7, #32]
 802bd5c:	1ad3      	subs	r3, r2, r3
 802bd5e:	b29b      	uxth	r3, r3
 802bd60:	83fb      	strh	r3, [r7, #30]
  }

  // if our height is now negative, punt
  if(__h <= 0)
 802bd62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802bd66:	2b00      	cmp	r3, #0
 802bd68:	f340 812b 	ble.w	802bfc2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3aa>
  {
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 802bd6c:	8c3b      	ldrh	r3, [r7, #32]
 802bd6e:	b2de      	uxtb	r6, r3
  register uint8_t h = __h;
 802bd70:	8bfb      	ldrh	r3, [r7, #30]
 802bd72:	b2dd      	uxtb	r5, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
 802bd74:	4c9c      	ldr	r4, [pc, #624]	; (802bfe8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d0>)
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 802bd76:	08f3      	lsrs	r3, r6, #3
 802bd78:	b2db      	uxtb	r3, r3
 802bd7a:	01db      	lsls	r3, r3, #7
 802bd7c:	441c      	add	r4, r3
  // and offset x columns in
  pBuf += x;
 802bd7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802bd82:	441c      	add	r4, r3

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
 802bd84:	f006 0307 	and.w	r3, r6, #7
 802bd88:	b2de      	uxtb	r6, r3
  if(mod)
 802bd8a:	2e00      	cmp	r6, #0
 802bd8c:	d03b      	beq.n	802be06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ee>
  {
    // mask off the high n bits we want to set
    mod = 8-mod;
 802bd8e:	f1c6 0308 	rsb	r3, r6, #8
 802bd92:	b2de      	uxtb	r6, r3

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 802bd94:	4632      	mov	r2, r6
 802bd96:	4b95      	ldr	r3, [pc, #596]	; (802bfec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d4>)
 802bd98:	f813 8002 	ldrb.w	r8, [r3, r2]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) 
 802bd9c:	42b5      	cmp	r5, r6
 802bd9e:	d20c      	bcs.n	802bdba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1a2>
    {
      mask &= (0XFF >> (mod-h));
 802bda0:	4632      	mov	r2, r6
 802bda2:	462b      	mov	r3, r5
 802bda4:	1ad3      	subs	r3, r2, r3
 802bda6:	22ff      	movs	r2, #255	; 0xff
 802bda8:	fa42 f303 	asr.w	r3, r2, r3
 802bdac:	b25a      	sxtb	r2, r3
 802bdae:	fa4f f388 	sxtb.w	r3, r8
 802bdb2:	4013      	ands	r3, r2
 802bdb4:	b25b      	sxtb	r3, r3
 802bdb6:	fa5f f883 	uxtb.w	r8, r3
    }

  switch (color)
 802bdba:	8bbb      	ldrh	r3, [r7, #28]
 802bdbc:	2b02      	cmp	r3, #2
 802bdbe:	d016      	beq.n	802bdee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1d6>
 802bdc0:	2b02      	cmp	r3, #2
 802bdc2:	dc1a      	bgt.n	802bdfa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
 802bdc4:	2b00      	cmp	r3, #0
 802bdc6:	d007      	beq.n	802bdd8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1c0>
 802bdc8:	2b01      	cmp	r3, #1
 802bdca:	d116      	bne.n	802bdfa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
    {
    case WHITE:   *pBuf |=  mask;  break;
 802bdcc:	7823      	ldrb	r3, [r4, #0]
 802bdce:	ea43 0308 	orr.w	r3, r3, r8
 802bdd2:	b2db      	uxtb	r3, r3
 802bdd4:	7023      	strb	r3, [r4, #0]
 802bdd6:	e010      	b.n	802bdfa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
    case BLACK:   *pBuf &= ~mask;  break;
 802bdd8:	7823      	ldrb	r3, [r4, #0]
 802bdda:	b25a      	sxtb	r2, r3
 802bddc:	fa4f f388 	sxtb.w	r3, r8
 802bde0:	43db      	mvns	r3, r3
 802bde2:	b25b      	sxtb	r3, r3
 802bde4:	4013      	ands	r3, r2
 802bde6:	b25b      	sxtb	r3, r3
 802bde8:	b2db      	uxtb	r3, r3
 802bdea:	7023      	strb	r3, [r4, #0]
 802bdec:	e005      	b.n	802bdfa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
    case INVERSE: *pBuf ^=  mask;  break;
 802bdee:	7823      	ldrb	r3, [r4, #0]
 802bdf0:	ea88 0303 	eor.w	r3, r8, r3
 802bdf4:	b2db      	uxtb	r3, r3
 802bdf6:	7023      	strb	r3, [r4, #0]
 802bdf8:	bf00      	nop
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 802bdfa:	42b5      	cmp	r5, r6
 802bdfc:	f0c0 80e3 	bcc.w	802bfc6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ae>

    h -= mod;
 802be00:	1bab      	subs	r3, r5, r6
 802be02:	b2dd      	uxtb	r5, r3

    pBuf += SSD1306_LCDWIDTH;
 802be04:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8)
 802be06:	2d07      	cmp	r5, #7
 802be08:	d91d      	bls.n	802be46 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x22e>
  {
    if (color == INVERSE) 
 802be0a:	8bbb      	ldrh	r3, [r7, #28]
 802be0c:	2b02      	cmp	r3, #2
 802be0e:	d10a      	bne.n	802be26 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x20e>
    {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do
      {
      *pBuf=~(*pBuf);
 802be10:	7823      	ldrb	r3, [r4, #0]
 802be12:	43db      	mvns	r3, r3
 802be14:	b2db      	uxtb	r3, r3
 802be16:	7023      	strb	r3, [r4, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
 802be18:	3480      	adds	r4, #128	; 0x80

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
 802be1a:	f1a5 0308 	sub.w	r3, r5, #8
 802be1e:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 802be20:	2d07      	cmp	r5, #7
 802be22:	d910      	bls.n	802be46 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x22e>
      do
 802be24:	e7f4      	b.n	802be10 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1f8>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
 802be26:	8bbb      	ldrh	r3, [r7, #28]
 802be28:	2b01      	cmp	r3, #1
 802be2a:	d101      	bne.n	802be30 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x218>
 802be2c:	23ff      	movs	r3, #255	; 0xff
 802be2e:	e000      	b.n	802be32 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x21a>
 802be30:	2300      	movs	r3, #0
 802be32:	461e      	mov	r6, r3

      do  {
        // write our value in
      *pBuf = val;
 802be34:	4633      	mov	r3, r6
 802be36:	7023      	strb	r3, [r4, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
 802be38:	3480      	adds	r4, #128	; 0x80

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
 802be3a:	f1a5 0308 	sub.w	r3, r5, #8
 802be3e:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 802be40:	2d07      	cmp	r5, #7
 802be42:	d900      	bls.n	802be46 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x22e>
      do  {
 802be44:	e7f6      	b.n	802be34 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x21c>
      }
    }

  // now do the final partial byte, if necessary
  if(h)
 802be46:	2d00      	cmp	r5, #0
 802be48:	f000 80c8 	beq.w	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  {
    mod = h & 7;
 802be4c:	f005 0307 	and.w	r3, r5, #7
 802be50:	b2de      	uxtb	r6, r3
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 802be52:	4632      	mov	r2, r6
 802be54:	4b66      	ldr	r3, [pc, #408]	; (802bff0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d8>)
 802be56:	5c9d      	ldrb	r5, [r3, r2]
    switch (color)
 802be58:	8bbb      	ldrh	r3, [r7, #28]
 802be5a:	2b02      	cmp	r3, #2
 802be5c:	d016      	beq.n	802be8c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x274>
 802be5e:	2b02      	cmp	r3, #2
 802be60:	f300 80bc 	bgt.w	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
 802be64:	2b00      	cmp	r3, #0
 802be66:	d007      	beq.n	802be78 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x260>
 802be68:	2b01      	cmp	r3, #1
 802be6a:	f040 80b7 	bne.w	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    {
      case WHITE:   *pBuf |=  mask;  break;
 802be6e:	7823      	ldrb	r3, [r4, #0]
 802be70:	432b      	orrs	r3, r5
 802be72:	b2db      	uxtb	r3, r3
 802be74:	7023      	strb	r3, [r4, #0]
 802be76:	e0b1      	b.n	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
      case BLACK:   *pBuf &= ~mask;  break;
 802be78:	7823      	ldrb	r3, [r4, #0]
 802be7a:	b25a      	sxtb	r2, r3
 802be7c:	b26b      	sxtb	r3, r5
 802be7e:	43db      	mvns	r3, r3
 802be80:	b25b      	sxtb	r3, r3
 802be82:	4013      	ands	r3, r2
 802be84:	b25b      	sxtb	r3, r3
 802be86:	b2db      	uxtb	r3, r3
 802be88:	7023      	strb	r3, [r4, #0]
 802be8a:	e0a7      	b.n	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
      case INVERSE: *pBuf ^=  mask;  break;
 802be8c:	7823      	ldrb	r3, [r4, #0]
 802be8e:	406b      	eors	r3, r5
 802be90:	b2db      	uxtb	r3, r3
 802be92:	7023      	strb	r3, [r4, #0]
 802be94:	e0a2      	b.n	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
 802be96:	68fb      	ldr	r3, [r7, #12]
 802be98:	61bb      	str	r3, [r7, #24]
 802be9a:	897b      	ldrh	r3, [r7, #10]
 802be9c:	82fb      	strh	r3, [r7, #22]
 802be9e:	893b      	ldrh	r3, [r7, #8]
 802bea0:	82bb      	strh	r3, [r7, #20]
 802bea2:	88fb      	ldrh	r3, [r7, #6]
 802bea4:	827b      	strh	r3, [r7, #18]
 802bea6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802beaa:	823b      	strh	r3, [r7, #16]
  if(y < 0 || y >= HEIGHT) { return; }
 802beac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802beb0:	2b00      	cmp	r3, #0
 802beb2:	f2c0 808a 	blt.w	802bfca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b2>
 802beb6:	69bb      	ldr	r3, [r7, #24]
 802beb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802bebc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802bec0:	429a      	cmp	r2, r3
 802bec2:	f280 8082 	bge.w	802bfca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b2>
  if(x < 0)
 802bec6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802beca:	2b00      	cmp	r3, #0
 802becc:	da06      	bge.n	802bedc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2c4>
    w += x;
 802bece:	8a7a      	ldrh	r2, [r7, #18]
 802bed0:	8afb      	ldrh	r3, [r7, #22]
 802bed2:	4413      	add	r3, r2
 802bed4:	b29b      	uxth	r3, r3
 802bed6:	827b      	strh	r3, [r7, #18]
    x = 0;
 802bed8:	2300      	movs	r3, #0
 802beda:	82fb      	strh	r3, [r7, #22]
  if( (x + w) > WIDTH)
 802bedc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802bee0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802bee4:	4413      	add	r3, r2
 802bee6:	69ba      	ldr	r2, [r7, #24]
 802bee8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 802beec:	4293      	cmp	r3, r2
 802beee:	dd07      	ble.n	802bf00 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2e8>
    w = (WIDTH - x);
 802bef0:	69bb      	ldr	r3, [r7, #24]
 802bef2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802bef6:	b29a      	uxth	r2, r3
 802bef8:	8afb      	ldrh	r3, [r7, #22]
 802befa:	1ad3      	subs	r3, r2, r3
 802befc:	b29b      	uxth	r3, r3
 802befe:	827b      	strh	r3, [r7, #18]
  if(w <= 0) { return; }
 802bf00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802bf04:	2b00      	cmp	r3, #0
 802bf06:	dd62      	ble.n	802bfce <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b6>
  register uint8_t *pBuf = buffer;
 802bf08:	4c37      	ldr	r4, [pc, #220]	; (802bfe8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d0>)
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 802bf0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802bf0e:	2b00      	cmp	r3, #0
 802bf10:	da00      	bge.n	802bf14 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2fc>
 802bf12:	3307      	adds	r3, #7
 802bf14:	10db      	asrs	r3, r3, #3
 802bf16:	b21b      	sxth	r3, r3
 802bf18:	01db      	lsls	r3, r3, #7
 802bf1a:	441c      	add	r4, r3
  pBuf += x;
 802bf1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802bf20:	441c      	add	r4, r3
  register uint8_t mask = 1 << (y&7);
 802bf22:	8abb      	ldrh	r3, [r7, #20]
 802bf24:	f003 0307 	and.w	r3, r3, #7
 802bf28:	2201      	movs	r2, #1
 802bf2a:	fa02 f303 	lsl.w	r3, r2, r3
 802bf2e:	b2dd      	uxtb	r5, r3
  switch (color)
 802bf30:	8a3b      	ldrh	r3, [r7, #16]
 802bf32:	2b02      	cmp	r3, #2
 802bf34:	d02f      	beq.n	802bf96 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x37e>
 802bf36:	2b02      	cmp	r3, #2
 802bf38:	dc50      	bgt.n	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
 802bf3a:	2b00      	cmp	r3, #0
 802bf3c:	d015      	beq.n	802bf6a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x352>
 802bf3e:	2b01      	cmp	r3, #1
 802bf40:	d14c      	bne.n	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 802bf42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802bf46:	b29a      	uxth	r2, r3
 802bf48:	3a01      	subs	r2, #1
 802bf4a:	b292      	uxth	r2, r2
 802bf4c:	827a      	strh	r2, [r7, #18]
 802bf4e:	2b00      	cmp	r3, #0
 802bf50:	bf14      	ite	ne
 802bf52:	2301      	movne	r3, #1
 802bf54:	2300      	moveq	r3, #0
 802bf56:	b2db      	uxtb	r3, r3
 802bf58:	2b00      	cmp	r3, #0
 802bf5a:	d03a      	beq.n	802bfd2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
 802bf5c:	4623      	mov	r3, r4
 802bf5e:	1c5c      	adds	r4, r3, #1
 802bf60:	781a      	ldrb	r2, [r3, #0]
 802bf62:	432a      	orrs	r2, r5
 802bf64:	b2d2      	uxtb	r2, r2
 802bf66:	701a      	strb	r2, [r3, #0]
 802bf68:	e7eb      	b.n	802bf42 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x32a>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 802bf6a:	43eb      	mvns	r3, r5
 802bf6c:	b2dd      	uxtb	r5, r3
 802bf6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802bf72:	b29a      	uxth	r2, r3
 802bf74:	3a01      	subs	r2, #1
 802bf76:	b292      	uxth	r2, r2
 802bf78:	827a      	strh	r2, [r7, #18]
 802bf7a:	2b00      	cmp	r3, #0
 802bf7c:	bf14      	ite	ne
 802bf7e:	2301      	movne	r3, #1
 802bf80:	2300      	moveq	r3, #0
 802bf82:	b2db      	uxtb	r3, r3
 802bf84:	2b00      	cmp	r3, #0
 802bf86:	d026      	beq.n	802bfd6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3be>
 802bf88:	4623      	mov	r3, r4
 802bf8a:	1c5c      	adds	r4, r3, #1
 802bf8c:	781a      	ldrb	r2, [r3, #0]
 802bf8e:	402a      	ands	r2, r5
 802bf90:	b2d2      	uxtb	r2, r2
 802bf92:	701a      	strb	r2, [r3, #0]
 802bf94:	e7eb      	b.n	802bf6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x356>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 802bf96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802bf9a:	b29a      	uxth	r2, r3
 802bf9c:	3a01      	subs	r2, #1
 802bf9e:	b292      	uxth	r2, r2
 802bfa0:	827a      	strh	r2, [r7, #18]
 802bfa2:	2b00      	cmp	r3, #0
 802bfa4:	bf14      	ite	ne
 802bfa6:	2301      	movne	r3, #1
 802bfa8:	2300      	moveq	r3, #0
 802bfaa:	b2db      	uxtb	r3, r3
 802bfac:	2b00      	cmp	r3, #0
 802bfae:	d014      	beq.n	802bfda <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c2>
 802bfb0:	4623      	mov	r3, r4
 802bfb2:	1c5c      	adds	r4, r3, #1
 802bfb4:	781a      	ldrb	r2, [r3, #0]
 802bfb6:	406a      	eors	r2, r5
 802bfb8:	b2d2      	uxtb	r2, r2
 802bfba:	701a      	strb	r2, [r3, #0]
 802bfbc:	e7eb      	b.n	802bf96 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x37e>
  if(x < 0 || x >= WIDTH) { return; }
 802bfbe:	bf00      	nop
 802bfc0:	e00c      	b.n	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    return;
 802bfc2:	bf00      	nop
 802bfc4:	e00a      	b.n	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    if(h<mod) { return; }
 802bfc6:	bf00      	nop
 802bfc8:	e008      	b.n	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  if(y < 0 || y >= HEIGHT) { return; }
 802bfca:	bf00      	nop
 802bfcc:	e006      	b.n	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  if(w <= 0) { return; }
 802bfce:	bf00      	nop
 802bfd0:	e004      	b.n	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 802bfd2:	bf00      	nop
 802bfd4:	e002      	b.n	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 802bfd6:	bf00      	nop
 802bfd8:	e000      	b.n	802bfdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 802bfda:	bf00      	nop
}
 802bfdc:	bf00      	nop
 802bfde:	3734      	adds	r7, #52	; 0x34
 802bfe0:	46bd      	mov	sp, r7
 802bfe2:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 802bfe6:	4770      	bx	lr
 802bfe8:	20000294 	.word	0x20000294
 802bfec:	20000494 	.word	0x20000494
 802bff0:	2000049c 	.word	0x2000049c

0802bff4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
{
 802bff4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 802bff8:	b08d      	sub	sp, #52	; 0x34
 802bffa:	af00      	add	r7, sp, #0
 802bffc:	60f8      	str	r0, [r7, #12]
 802bffe:	4608      	mov	r0, r1
 802c000:	4611      	mov	r1, r2
 802c002:	461a      	mov	r2, r3
 802c004:	4603      	mov	r3, r0
 802c006:	817b      	strh	r3, [r7, #10]
 802c008:	460b      	mov	r3, r1
 802c00a:	813b      	strh	r3, [r7, #8]
 802c00c:	4613      	mov	r3, r2
 802c00e:	80fb      	strh	r3, [r7, #6]
  bool bSwap = false;
 802c010:	2300      	movs	r3, #0
 802c012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  switch(rotation)
 802c016:	68fb      	ldr	r3, [r7, #12]
 802c018:	7d5b      	ldrb	r3, [r3, #21]
 802c01a:	2b03      	cmp	r3, #3
 802c01c:	d855      	bhi.n	802c0ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
 802c01e:	a201      	add	r2, pc, #4	; (adr r2, 802c024 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>)
 802c020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c024:	0802c0cb 	.word	0x0802c0cb
 802c028:	0802c035 	.word	0x0802c035
 802c02c:	0802c06b 	.word	0x0802c06b
 802c030:	0802c0a3 	.word	0x0802c0a3
      bSwap = true;
 802c034:	2301      	movs	r3, #1
 802c036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 802c03a:	897b      	ldrh	r3, [r7, #10]
 802c03c:	857b      	strh	r3, [r7, #42]	; 0x2a
 802c03e:	893b      	ldrh	r3, [r7, #8]
 802c040:	817b      	strh	r3, [r7, #10]
 802c042:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802c044:	813b      	strh	r3, [r7, #8]
      x = WIDTH - x - 1;
 802c046:	68fb      	ldr	r3, [r7, #12]
 802c048:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802c04c:	b29a      	uxth	r2, r3
 802c04e:	897b      	ldrh	r3, [r7, #10]
 802c050:	1ad3      	subs	r3, r2, r3
 802c052:	b29b      	uxth	r3, r3
 802c054:	3b01      	subs	r3, #1
 802c056:	b29b      	uxth	r3, r3
 802c058:	817b      	strh	r3, [r7, #10]
      x -= (h-1);
 802c05a:	897a      	ldrh	r2, [r7, #10]
 802c05c:	88fb      	ldrh	r3, [r7, #6]
 802c05e:	1ad3      	subs	r3, r2, r3
 802c060:	b29b      	uxth	r3, r3
 802c062:	3301      	adds	r3, #1
 802c064:	b29b      	uxth	r3, r3
 802c066:	817b      	strh	r3, [r7, #10]
      break;
 802c068:	e02f      	b.n	802c0ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
      x = WIDTH - x - 1;
 802c06a:	68fb      	ldr	r3, [r7, #12]
 802c06c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802c070:	b29a      	uxth	r2, r3
 802c072:	897b      	ldrh	r3, [r7, #10]
 802c074:	1ad3      	subs	r3, r2, r3
 802c076:	b29b      	uxth	r3, r3
 802c078:	3b01      	subs	r3, #1
 802c07a:	b29b      	uxth	r3, r3
 802c07c:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - y - 1;
 802c07e:	68fb      	ldr	r3, [r7, #12]
 802c080:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802c084:	b29a      	uxth	r2, r3
 802c086:	893b      	ldrh	r3, [r7, #8]
 802c088:	1ad3      	subs	r3, r2, r3
 802c08a:	b29b      	uxth	r3, r3
 802c08c:	3b01      	subs	r3, #1
 802c08e:	b29b      	uxth	r3, r3
 802c090:	813b      	strh	r3, [r7, #8]
      y -= (h-1);
 802c092:	893a      	ldrh	r2, [r7, #8]
 802c094:	88fb      	ldrh	r3, [r7, #6]
 802c096:	1ad3      	subs	r3, r2, r3
 802c098:	b29b      	uxth	r3, r3
 802c09a:	3301      	adds	r3, #1
 802c09c:	b29b      	uxth	r3, r3
 802c09e:	813b      	strh	r3, [r7, #8]
      break;
 802c0a0:	e013      	b.n	802c0ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
      bSwap = true;
 802c0a2:	2301      	movs	r3, #1
 802c0a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 802c0a8:	897b      	ldrh	r3, [r7, #10]
 802c0aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 802c0ac:	893b      	ldrh	r3, [r7, #8]
 802c0ae:	817b      	strh	r3, [r7, #10]
 802c0b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802c0b2:	813b      	strh	r3, [r7, #8]
      y = HEIGHT - y - 1;
 802c0b4:	68fb      	ldr	r3, [r7, #12]
 802c0b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802c0ba:	b29a      	uxth	r2, r3
 802c0bc:	893b      	ldrh	r3, [r7, #8]
 802c0be:	1ad3      	subs	r3, r2, r3
 802c0c0:	b29b      	uxth	r3, r3
 802c0c2:	3b01      	subs	r3, #1
 802c0c4:	b29b      	uxth	r3, r3
 802c0c6:	813b      	strh	r3, [r7, #8]
      break;
 802c0c8:	bf00      	nop
  if(bSwap)
 802c0ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802c0ce:	2b00      	cmp	r3, #0
 802c0d0:	f000 809a 	beq.w	802c208 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x214>
 802c0d4:	68fb      	ldr	r3, [r7, #12]
 802c0d6:	627b      	str	r3, [r7, #36]	; 0x24
 802c0d8:	897b      	ldrh	r3, [r7, #10]
 802c0da:	847b      	strh	r3, [r7, #34]	; 0x22
 802c0dc:	893b      	ldrh	r3, [r7, #8]
 802c0de:	843b      	strh	r3, [r7, #32]
 802c0e0:	88fb      	ldrh	r3, [r7, #6]
 802c0e2:	83fb      	strh	r3, [r7, #30]
 802c0e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802c0e8:	83bb      	strh	r3, [r7, #28]
  if(y < 0 || y >= HEIGHT) { return; }
 802c0ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802c0ee:	2b00      	cmp	r3, #0
 802c0f0:	f2c0 8155 	blt.w	802c39e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3aa>
 802c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c0f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802c0fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802c0fe:	429a      	cmp	r2, r3
 802c100:	f280 814d 	bge.w	802c39e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3aa>
  if(x < 0)
 802c104:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802c108:	2b00      	cmp	r3, #0
 802c10a:	da06      	bge.n	802c11a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x126>
    w += x;
 802c10c:	8bfa      	ldrh	r2, [r7, #30]
 802c10e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802c110:	4413      	add	r3, r2
 802c112:	b29b      	uxth	r3, r3
 802c114:	83fb      	strh	r3, [r7, #30]
    x = 0;
 802c116:	2300      	movs	r3, #0
 802c118:	847b      	strh	r3, [r7, #34]	; 0x22
  if( (x + w) > WIDTH)
 802c11a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 802c11e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802c122:	4413      	add	r3, r2
 802c124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c126:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 802c12a:	4293      	cmp	r3, r2
 802c12c:	dd07      	ble.n	802c13e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
    w = (WIDTH - x);
 802c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c130:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802c134:	b29a      	uxth	r2, r3
 802c136:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802c138:	1ad3      	subs	r3, r2, r3
 802c13a:	b29b      	uxth	r3, r3
 802c13c:	83fb      	strh	r3, [r7, #30]
  if(w <= 0) { return; }
 802c13e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802c142:	2b00      	cmp	r3, #0
 802c144:	f340 812d 	ble.w	802c3a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3ae>
  register uint8_t *pBuf = buffer;
 802c148:	4c9f      	ldr	r4, [pc, #636]	; (802c3c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3d4>)
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 802c14a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802c14e:	2b00      	cmp	r3, #0
 802c150:	da00      	bge.n	802c154 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x160>
 802c152:	3307      	adds	r3, #7
 802c154:	10db      	asrs	r3, r3, #3
 802c156:	b21b      	sxth	r3, r3
 802c158:	01db      	lsls	r3, r3, #7
 802c15a:	441c      	add	r4, r3
  pBuf += x;
 802c15c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802c160:	441c      	add	r4, r3
  register uint8_t mask = 1 << (y&7);
 802c162:	8c3b      	ldrh	r3, [r7, #32]
 802c164:	f003 0307 	and.w	r3, r3, #7
 802c168:	2201      	movs	r2, #1
 802c16a:	fa02 f303 	lsl.w	r3, r2, r3
 802c16e:	b2dd      	uxtb	r5, r3
  switch (color)
 802c170:	8bbb      	ldrh	r3, [r7, #28]
 802c172:	2b02      	cmp	r3, #2
 802c174:	d033      	beq.n	802c1de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ea>
 802c176:	2b02      	cmp	r3, #2
 802c178:	f300 8120 	bgt.w	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
 802c17c:	2b00      	cmp	r3, #0
 802c17e:	d017      	beq.n	802c1b0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1bc>
 802c180:	2b01      	cmp	r3, #1
 802c182:	f040 811b 	bne.w	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 802c186:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802c18a:	b29a      	uxth	r2, r3
 802c18c:	3a01      	subs	r2, #1
 802c18e:	b292      	uxth	r2, r2
 802c190:	83fa      	strh	r2, [r7, #30]
 802c192:	2b00      	cmp	r3, #0
 802c194:	bf14      	ite	ne
 802c196:	2301      	movne	r3, #1
 802c198:	2300      	moveq	r3, #0
 802c19a:	b2db      	uxtb	r3, r3
 802c19c:	2b00      	cmp	r3, #0
 802c19e:	f000 8102 	beq.w	802c3a6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b2>
 802c1a2:	4623      	mov	r3, r4
 802c1a4:	1c5c      	adds	r4, r3, #1
 802c1a6:	781a      	ldrb	r2, [r3, #0]
 802c1a8:	432a      	orrs	r2, r5
 802c1aa:	b2d2      	uxtb	r2, r2
 802c1ac:	701a      	strb	r2, [r3, #0]
 802c1ae:	e7ea      	b.n	802c186 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x192>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 802c1b0:	43eb      	mvns	r3, r5
 802c1b2:	b2dd      	uxtb	r5, r3
 802c1b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802c1b8:	b29a      	uxth	r2, r3
 802c1ba:	3a01      	subs	r2, #1
 802c1bc:	b292      	uxth	r2, r2
 802c1be:	83fa      	strh	r2, [r7, #30]
 802c1c0:	2b00      	cmp	r3, #0
 802c1c2:	bf14      	ite	ne
 802c1c4:	2301      	movne	r3, #1
 802c1c6:	2300      	moveq	r3, #0
 802c1c8:	b2db      	uxtb	r3, r3
 802c1ca:	2b00      	cmp	r3, #0
 802c1cc:	f000 80ed 	beq.w	802c3aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b6>
 802c1d0:	4623      	mov	r3, r4
 802c1d2:	1c5c      	adds	r4, r3, #1
 802c1d4:	781a      	ldrb	r2, [r3, #0]
 802c1d6:	402a      	ands	r2, r5
 802c1d8:	b2d2      	uxtb	r2, r2
 802c1da:	701a      	strb	r2, [r3, #0]
 802c1dc:	e7ea      	b.n	802c1b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1c0>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 802c1de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802c1e2:	b29a      	uxth	r2, r3
 802c1e4:	3a01      	subs	r2, #1
 802c1e6:	b292      	uxth	r2, r2
 802c1e8:	83fa      	strh	r2, [r7, #30]
 802c1ea:	2b00      	cmp	r3, #0
 802c1ec:	bf14      	ite	ne
 802c1ee:	2301      	movne	r3, #1
 802c1f0:	2300      	moveq	r3, #0
 802c1f2:	b2db      	uxtb	r3, r3
 802c1f4:	2b00      	cmp	r3, #0
 802c1f6:	f000 80da 	beq.w	802c3ae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3ba>
 802c1fa:	4623      	mov	r3, r4
 802c1fc:	1c5c      	adds	r4, r3, #1
 802c1fe:	781a      	ldrb	r2, [r3, #0]
 802c200:	406a      	eors	r2, r5
 802c202:	b2d2      	uxtb	r2, r2
 802c204:	701a      	strb	r2, [r3, #0]
 802c206:	e7ea      	b.n	802c1de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ea>
 802c208:	68fb      	ldr	r3, [r7, #12]
 802c20a:	61bb      	str	r3, [r7, #24]
 802c20c:	897b      	ldrh	r3, [r7, #10]
 802c20e:	82fb      	strh	r3, [r7, #22]
 802c210:	893b      	ldrh	r3, [r7, #8]
 802c212:	82bb      	strh	r3, [r7, #20]
 802c214:	88fb      	ldrh	r3, [r7, #6]
 802c216:	827b      	strh	r3, [r7, #18]
 802c218:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802c21c:	823b      	strh	r3, [r7, #16]
  if(x < 0 || x >= WIDTH) { return; }
 802c21e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802c222:	2b00      	cmp	r3, #0
 802c224:	f2c0 80c5 	blt.w	802c3b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3be>
 802c228:	69bb      	ldr	r3, [r7, #24]
 802c22a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802c22e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802c232:	429a      	cmp	r2, r3
 802c234:	f280 80bd 	bge.w	802c3b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3be>
  if(__y < 0)
 802c238:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802c23c:	2b00      	cmp	r3, #0
 802c23e:	da06      	bge.n	802c24e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x25a>
    __h += __y;
 802c240:	8a7a      	ldrh	r2, [r7, #18]
 802c242:	8abb      	ldrh	r3, [r7, #20]
 802c244:	4413      	add	r3, r2
 802c246:	b29b      	uxth	r3, r3
 802c248:	827b      	strh	r3, [r7, #18]
    __y = 0;
 802c24a:	2300      	movs	r3, #0
 802c24c:	82bb      	strh	r3, [r7, #20]
  if( (__y + __h) > HEIGHT)
 802c24e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802c252:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802c256:	4413      	add	r3, r2
 802c258:	69ba      	ldr	r2, [r7, #24]
 802c25a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 802c25e:	4293      	cmp	r3, r2
 802c260:	dd07      	ble.n	802c272 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x27e>
    __h = (HEIGHT - __y);
 802c262:	69bb      	ldr	r3, [r7, #24]
 802c264:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802c268:	b29a      	uxth	r2, r3
 802c26a:	8abb      	ldrh	r3, [r7, #20]
 802c26c:	1ad3      	subs	r3, r2, r3
 802c26e:	b29b      	uxth	r3, r3
 802c270:	827b      	strh	r3, [r7, #18]
  if(__h <= 0)
 802c272:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802c276:	2b00      	cmp	r3, #0
 802c278:	f340 809d 	ble.w	802c3b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c2>
  register uint8_t y = __y;
 802c27c:	8abb      	ldrh	r3, [r7, #20]
 802c27e:	b2de      	uxtb	r6, r3
  register uint8_t h = __h;
 802c280:	8a7b      	ldrh	r3, [r7, #18]
 802c282:	b2dd      	uxtb	r5, r3
  register uint8_t *pBuf = buffer;
 802c284:	4c50      	ldr	r4, [pc, #320]	; (802c3c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3d4>)
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 802c286:	08f3      	lsrs	r3, r6, #3
 802c288:	b2db      	uxtb	r3, r3
 802c28a:	01db      	lsls	r3, r3, #7
 802c28c:	441c      	add	r4, r3
  pBuf += x;
 802c28e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802c292:	441c      	add	r4, r3
  register uint8_t mod = (y&7);
 802c294:	f006 0307 	and.w	r3, r6, #7
 802c298:	b2de      	uxtb	r6, r3
  if(mod)
 802c29a:	2e00      	cmp	r6, #0
 802c29c:	d03a      	beq.n	802c314 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x320>
    mod = 8-mod;
 802c29e:	f1c6 0308 	rsb	r3, r6, #8
 802c2a2:	b2de      	uxtb	r6, r3
    register uint8_t mask = premask[mod];
 802c2a4:	4632      	mov	r2, r6
 802c2a6:	4b49      	ldr	r3, [pc, #292]	; (802c3cc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3d8>)
 802c2a8:	f813 8002 	ldrb.w	r8, [r3, r2]
    if( h < mod) 
 802c2ac:	42b5      	cmp	r5, r6
 802c2ae:	d20c      	bcs.n	802c2ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2d6>
      mask &= (0XFF >> (mod-h));
 802c2b0:	4632      	mov	r2, r6
 802c2b2:	462b      	mov	r3, r5
 802c2b4:	1ad3      	subs	r3, r2, r3
 802c2b6:	22ff      	movs	r2, #255	; 0xff
 802c2b8:	fa42 f303 	asr.w	r3, r2, r3
 802c2bc:	b25a      	sxtb	r2, r3
 802c2be:	fa4f f388 	sxtb.w	r3, r8
 802c2c2:	4013      	ands	r3, r2
 802c2c4:	b25b      	sxtb	r3, r3
 802c2c6:	fa5f f883 	uxtb.w	r8, r3
  switch (color)
 802c2ca:	8a3b      	ldrh	r3, [r7, #16]
 802c2cc:	2b02      	cmp	r3, #2
 802c2ce:	d016      	beq.n	802c2fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30a>
 802c2d0:	2b02      	cmp	r3, #2
 802c2d2:	dc1a      	bgt.n	802c30a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x316>
 802c2d4:	2b00      	cmp	r3, #0
 802c2d6:	d007      	beq.n	802c2e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2f4>
 802c2d8:	2b01      	cmp	r3, #1
 802c2da:	d116      	bne.n	802c30a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x316>
    case WHITE:   *pBuf |=  mask;  break;
 802c2dc:	7823      	ldrb	r3, [r4, #0]
 802c2de:	ea43 0308 	orr.w	r3, r3, r8
 802c2e2:	b2db      	uxtb	r3, r3
 802c2e4:	7023      	strb	r3, [r4, #0]
 802c2e6:	e010      	b.n	802c30a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x316>
    case BLACK:   *pBuf &= ~mask;  break;
 802c2e8:	7823      	ldrb	r3, [r4, #0]
 802c2ea:	b25a      	sxtb	r2, r3
 802c2ec:	fa4f f388 	sxtb.w	r3, r8
 802c2f0:	43db      	mvns	r3, r3
 802c2f2:	b25b      	sxtb	r3, r3
 802c2f4:	4013      	ands	r3, r2
 802c2f6:	b25b      	sxtb	r3, r3
 802c2f8:	b2db      	uxtb	r3, r3
 802c2fa:	7023      	strb	r3, [r4, #0]
 802c2fc:	e005      	b.n	802c30a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x316>
    case INVERSE: *pBuf ^=  mask;  break;
 802c2fe:	7823      	ldrb	r3, [r4, #0]
 802c300:	ea88 0303 	eor.w	r3, r8, r3
 802c304:	b2db      	uxtb	r3, r3
 802c306:	7023      	strb	r3, [r4, #0]
 802c308:	bf00      	nop
    if(h<mod) { return; }
 802c30a:	42b5      	cmp	r5, r6
 802c30c:	d355      	bcc.n	802c3ba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c6>
    h -= mod;
 802c30e:	1bab      	subs	r3, r5, r6
 802c310:	b2dd      	uxtb	r5, r3
    pBuf += SSD1306_LCDWIDTH;
 802c312:	3480      	adds	r4, #128	; 0x80
  if(h >= 8)
 802c314:	2d07      	cmp	r5, #7
 802c316:	d91d      	bls.n	802c354 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x360>
    if (color == INVERSE) 
 802c318:	8a3b      	ldrh	r3, [r7, #16]
 802c31a:	2b02      	cmp	r3, #2
 802c31c:	d10a      	bne.n	802c334 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x340>
      *pBuf=~(*pBuf);
 802c31e:	7823      	ldrb	r3, [r4, #0]
 802c320:	43db      	mvns	r3, r3
 802c322:	b2db      	uxtb	r3, r3
 802c324:	7023      	strb	r3, [r4, #0]
        pBuf += SSD1306_LCDWIDTH;
 802c326:	3480      	adds	r4, #128	; 0x80
        h -= 8;
 802c328:	f1a5 0308 	sub.w	r3, r5, #8
 802c32c:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 802c32e:	2d07      	cmp	r5, #7
 802c330:	d910      	bls.n	802c354 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x360>
      do
 802c332:	e7f4      	b.n	802c31e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x32a>
      register uint8_t val = (color == WHITE) ? 255 : 0;
 802c334:	8a3b      	ldrh	r3, [r7, #16]
 802c336:	2b01      	cmp	r3, #1
 802c338:	d101      	bne.n	802c33e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x34a>
 802c33a:	23ff      	movs	r3, #255	; 0xff
 802c33c:	e000      	b.n	802c340 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x34c>
 802c33e:	2300      	movs	r3, #0
 802c340:	461e      	mov	r6, r3
      *pBuf = val;
 802c342:	4633      	mov	r3, r6
 802c344:	7023      	strb	r3, [r4, #0]
        pBuf += SSD1306_LCDWIDTH;
 802c346:	3480      	adds	r4, #128	; 0x80
        h -= 8;
 802c348:	f1a5 0308 	sub.w	r3, r5, #8
 802c34c:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 802c34e:	2d07      	cmp	r5, #7
 802c350:	d900      	bls.n	802c354 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x360>
      do  {
 802c352:	e7f6      	b.n	802c342 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x34e>
  if(h)
 802c354:	2d00      	cmp	r5, #0
 802c356:	d031      	beq.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
    mod = h & 7;
 802c358:	f005 0307 	and.w	r3, r5, #7
 802c35c:	b2de      	uxtb	r6, r3
    register uint8_t mask = postmask[mod];
 802c35e:	4632      	mov	r2, r6
 802c360:	4b1b      	ldr	r3, [pc, #108]	; (802c3d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3dc>)
 802c362:	5c9d      	ldrb	r5, [r3, r2]
    switch (color)
 802c364:	8a3b      	ldrh	r3, [r7, #16]
 802c366:	2b02      	cmp	r3, #2
 802c368:	d014      	beq.n	802c394 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a0>
 802c36a:	2b02      	cmp	r3, #2
 802c36c:	dc26      	bgt.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
 802c36e:	2b00      	cmp	r3, #0
 802c370:	d006      	beq.n	802c380 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x38c>
 802c372:	2b01      	cmp	r3, #1
 802c374:	d122      	bne.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
      case WHITE:   *pBuf |=  mask;  break;
 802c376:	7823      	ldrb	r3, [r4, #0]
 802c378:	432b      	orrs	r3, r5
 802c37a:	b2db      	uxtb	r3, r3
 802c37c:	7023      	strb	r3, [r4, #0]
 802c37e:	e01d      	b.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
      case BLACK:   *pBuf &= ~mask;  break;
 802c380:	7823      	ldrb	r3, [r4, #0]
 802c382:	b25a      	sxtb	r2, r3
 802c384:	b26b      	sxtb	r3, r5
 802c386:	43db      	mvns	r3, r3
 802c388:	b25b      	sxtb	r3, r3
 802c38a:	4013      	ands	r3, r2
 802c38c:	b25b      	sxtb	r3, r3
 802c38e:	b2db      	uxtb	r3, r3
 802c390:	7023      	strb	r3, [r4, #0]
 802c392:	e013      	b.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
      case INVERSE: *pBuf ^=  mask;  break;
 802c394:	7823      	ldrb	r3, [r4, #0]
 802c396:	406b      	eors	r3, r5
 802c398:	b2db      	uxtb	r3, r3
 802c39a:	7023      	strb	r3, [r4, #0]
 802c39c:	e00e      	b.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  if(y < 0 || y >= HEIGHT) { return; }
 802c39e:	bf00      	nop
 802c3a0:	e00c      	b.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  if(w <= 0) { return; }
 802c3a2:	bf00      	nop
 802c3a4:	e00a      	b.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 802c3a6:	bf00      	nop
 802c3a8:	e008      	b.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 802c3aa:	bf00      	nop
 802c3ac:	e006      	b.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 802c3ae:	bf00      	nop
 802c3b0:	e004      	b.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  if(x < 0 || x >= WIDTH) { return; }
 802c3b2:	bf00      	nop
 802c3b4:	e002      	b.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
    return;
 802c3b6:	bf00      	nop
 802c3b8:	e000      	b.n	802c3bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
    if(h<mod) { return; }
 802c3ba:	bf00      	nop
}
 802c3bc:	bf00      	nop
 802c3be:	3734      	adds	r7, #52	; 0x34
 802c3c0:	46bd      	mov	sp, r7
 802c3c2:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 802c3c6:	4770      	bx	lr
 802c3c8:	20000294 	.word	0x20000294
 802c3cc:	20000494 	.word	0x20000494
 802c3d0:	2000049c 	.word	0x2000049c

0802c3d4 <_ZN16Adafruit_SSD13066memsetEPhtt>:
    }
  }
}

void Adafruit_SSD1306::memset(uint8_t buffer[], uint16_t start_address, uint16_t destination_address)
{
 802c3d4:	b480      	push	{r7}
 802c3d6:	b087      	sub	sp, #28
 802c3d8:	af00      	add	r7, sp, #0
 802c3da:	60f8      	str	r0, [r7, #12]
 802c3dc:	60b9      	str	r1, [r7, #8]
 802c3de:	4611      	mov	r1, r2
 802c3e0:	461a      	mov	r2, r3
 802c3e2:	460b      	mov	r3, r1
 802c3e4:	80fb      	strh	r3, [r7, #6]
 802c3e6:	4613      	mov	r3, r2
 802c3e8:	80bb      	strh	r3, [r7, #4]
  uint16_t x;
  
  for(x = start_address; x < destination_address; x++)
 802c3ea:	88fb      	ldrh	r3, [r7, #6]
 802c3ec:	82fb      	strh	r3, [r7, #22]
 802c3ee:	8afa      	ldrh	r2, [r7, #22]
 802c3f0:	88bb      	ldrh	r3, [r7, #4]
 802c3f2:	429a      	cmp	r2, r3
 802c3f4:	d208      	bcs.n	802c408 <_ZN16Adafruit_SSD13066memsetEPhtt+0x34>
  {
    buffer[x] = 0x00;
 802c3f6:	8afb      	ldrh	r3, [r7, #22]
 802c3f8:	68ba      	ldr	r2, [r7, #8]
 802c3fa:	4413      	add	r3, r2
 802c3fc:	2200      	movs	r2, #0
 802c3fe:	701a      	strb	r2, [r3, #0]
  for(x = start_address; x < destination_address; x++)
 802c400:	8afb      	ldrh	r3, [r7, #22]
 802c402:	3301      	adds	r3, #1
 802c404:	82fb      	strh	r3, [r7, #22]
 802c406:	e7f2      	b.n	802c3ee <_ZN16Adafruit_SSD13066memsetEPhtt+0x1a>
  }
}
 802c408:	bf00      	nop
 802c40a:	371c      	adds	r7, #28
 802c40c:	46bd      	mov	sp, r7
 802c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c412:	4770      	bx	lr

0802c414 <_ZN16Adafruit_SSD13066printfEPKc>:


//========================================================================
void Adafruit_SSD1306::printf( const char* _format )
//========================================================================
{
 802c414:	b590      	push	{r4, r7, lr}
 802c416:	b0b3      	sub	sp, #204	; 0xcc
 802c418:	af00      	add	r7, sp, #0
 802c41a:	6078      	str	r0, [r7, #4]
 802c41c:	6039      	str	r1, [r7, #0]
    uint16_t i, j;
    uint8_t page;

    int bIsCharHan;

    page = cursor_y / 8;
 802c41e:	687b      	ldr	r3, [r7, #4]
 802c420:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 802c424:	2b00      	cmp	r3, #0
 802c426:	da00      	bge.n	802c42a <_ZN16Adafruit_SSD13066printfEPKc+0x16>
 802c428:	3307      	adds	r3, #7
 802c42a:	10db      	asrs	r3, r3, #3
 802c42c:	b21b      	sxth	r3, r3
 802c42e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    format = _format;
#else

    //	한글폰트 사용시. 문자코드 변환 사용.
    char format[128];
    memset( (uint8_t *)format, 0, 128 );
 802c432:	f107 010c 	add.w	r1, r7, #12
 802c436:	2380      	movs	r3, #128	; 0x80
 802c438:	2200      	movs	r2, #0
 802c43a:	6878      	ldr	r0, [r7, #4]
 802c43c:	f7ff ffca 	bl	802c3d4 <_ZN16Adafruit_SSD13066memsetEPhtt>
    UTF8ToCP949( _format, format );
 802c440:	f107 030c 	add.w	r3, r7, #12
 802c444:	4619      	mov	r1, r3
 802c446:	6838      	ldr	r0, [r7, #0]
 802c448:	f008 fb02 	bl	8034a50 <UTF8ToCP949>

#endif

    if ( dbg )
 802c44c:	687b      	ldr	r3, [r7, #4]
 802c44e:	f993 301e 	ldrsb.w	r3, [r3, #30]
 802c452:	2b00      	cmp	r3, #0
 802c454:	d006      	beq.n	802c464 <_ZN16Adafruit_SSD13066printfEPKc+0x50>
    {
    	::printf( "%s - Text:%s\n", __func__, format );
 802c456:	f107 030c 	add.w	r3, r7, #12
 802c45a:	461a      	mov	r2, r3
 802c45c:	499f      	ldr	r1, [pc, #636]	; (802c6dc <_ZN16Adafruit_SSD13066printfEPKc+0x2c8>)
 802c45e:	48a0      	ldr	r0, [pc, #640]	; (802c6e0 <_ZN16Adafruit_SSD13066printfEPKc+0x2cc>)
 802c460:	f00a ff18 	bl	8037294 <iprintf>
    }

    for ( i = 0; format[i] != '\0'; i++ )
 802c464:	2300      	movs	r3, #0
 802c466:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 802c46a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c46e:	33c8      	adds	r3, #200	; 0xc8
 802c470:	443b      	add	r3, r7
 802c472:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 802c476:	2b00      	cmp	r3, #0
 802c478:	f000 812b 	beq.w	802c6d2 <_ZN16Adafruit_SSD13066printfEPKc+0x2be>
    {
        //  한글체크
        if ( (uint8_t)format[i] > 0x80 )		//	문자.
 802c47c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c480:	33c8      	adds	r3, #200	; 0xc8
 802c482:	443b      	add	r3, r7
 802c484:	f813 3cbc 	ldrb.w	r3, [r3, #-188]
 802c488:	2b80      	cmp	r3, #128	; 0x80
 802c48a:	f240 808b 	bls.w	802c5a4 <_ZN16Adafruit_SSD13066printfEPKc+0x190>
        {
            bIsCharHan = 1;
 802c48e:	2301      	movs	r3, #1
 802c490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            //	한글폰트
            PHan_HanFontLoad( (const uint8_t *)&format[i], &FontPtr );
 802c494:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c498:	f107 020c 	add.w	r2, r7, #12
 802c49c:	4413      	add	r3, r2
 802c49e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 802c4a2:	4611      	mov	r1, r2
 802c4a4:	4618      	mov	r0, r3
 802c4a6:	f000 fb4d 	bl	802cb44 <PHan_HanFontLoad>

            for ( j = 0; j < 16; j++ )
 802c4aa:	2300      	movs	r3, #0
 802c4ac:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 802c4b0:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c4b4:	2b0f      	cmp	r3, #15
 802c4b6:	f200 80fd 	bhi.w	802c6b4 <_ZN16Adafruit_SSD13066printfEPKc+0x2a0>
            {
                uint16_t	dotByte;
                int bIdx;

                //	2 Byte - 한글
                dotByte = FontPtr.FontBuffer[j * 2];
 802c4ba:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c4be:	005b      	lsls	r3, r3, #1
 802c4c0:	33c8      	adds	r3, #200	; 0xc8
 802c4c2:	443b      	add	r3, r7
 802c4c4:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 802c4c8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
                dotByte |= ( FontPtr.FontBuffer[( j * 2 ) + 1] ) << 8;
 802c4cc:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c4d0:	005b      	lsls	r3, r3, #1
 802c4d2:	3301      	adds	r3, #1
 802c4d4:	33c8      	adds	r3, #200	; 0xc8
 802c4d6:	443b      	add	r3, r7
 802c4d8:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 802c4dc:	021b      	lsls	r3, r3, #8
 802c4de:	b21a      	sxth	r2, r3
 802c4e0:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 802c4e4:	4313      	orrs	r3, r2
 802c4e6:	b21b      	sxth	r3, r3
 802c4e8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2

                //  16 X 16 Font ( 한글 )
                for ( bIdx = 0; bIdx < 16; bIdx++ )
 802c4ec:	2300      	movs	r3, #0
 802c4ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802c4f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802c4f6:	2b0f      	cmp	r3, #15
 802c4f8:	dc4e      	bgt.n	802c598 <_ZN16Adafruit_SSD13066printfEPKc+0x184>
                {
                    if ( dotByte & bitval_r[bIdx] )
 802c4fa:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 802c4fe:	4979      	ldr	r1, [pc, #484]	; (802c6e4 <_ZN16Adafruit_SSD13066printfEPKc+0x2d0>)
 802c500:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802c504:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802c508:	4013      	ands	r3, r2
 802c50a:	2b00      	cmp	r3, #0
 802c50c:	d01f      	beq.n	802c54e <_ZN16Adafruit_SSD13066printfEPKc+0x13a>
                    {
                        drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 1 );
 802c50e:	687b      	ldr	r3, [r7, #4]
 802c510:	681b      	ldr	r3, [r3, #0]
 802c512:	681c      	ldr	r4, [r3, #0]
 802c514:	687b      	ldr	r3, [r7, #4]
 802c516:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 802c51a:	b29a      	uxth	r2, r3
 802c51c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c520:	00db      	lsls	r3, r3, #3
 802c522:	b29b      	uxth	r3, r3
 802c524:	4413      	add	r3, r2
 802c526:	b29a      	uxth	r2, r3
 802c528:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802c52c:	b29b      	uxth	r3, r3
 802c52e:	4413      	add	r3, r2
 802c530:	b29b      	uxth	r3, r3
 802c532:	b219      	sxth	r1, r3
 802c534:	687b      	ldr	r3, [r7, #4]
 802c536:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 802c53a:	b29a      	uxth	r2, r3
 802c53c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c540:	4413      	add	r3, r2
 802c542:	b29b      	uxth	r3, r3
 802c544:	b21a      	sxth	r2, r3
 802c546:	2301      	movs	r3, #1
 802c548:	6878      	ldr	r0, [r7, #4]
 802c54a:	47a0      	blx	r4
 802c54c:	e01e      	b.n	802c58c <_ZN16Adafruit_SSD13066printfEPKc+0x178>
                    }
                    else
                    {
                        drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 0 );
 802c54e:	687b      	ldr	r3, [r7, #4]
 802c550:	681b      	ldr	r3, [r3, #0]
 802c552:	681c      	ldr	r4, [r3, #0]
 802c554:	687b      	ldr	r3, [r7, #4]
 802c556:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 802c55a:	b29a      	uxth	r2, r3
 802c55c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c560:	00db      	lsls	r3, r3, #3
 802c562:	b29b      	uxth	r3, r3
 802c564:	4413      	add	r3, r2
 802c566:	b29a      	uxth	r2, r3
 802c568:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802c56c:	b29b      	uxth	r3, r3
 802c56e:	4413      	add	r3, r2
 802c570:	b29b      	uxth	r3, r3
 802c572:	b219      	sxth	r1, r3
 802c574:	687b      	ldr	r3, [r7, #4]
 802c576:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 802c57a:	b29a      	uxth	r2, r3
 802c57c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c580:	4413      	add	r3, r2
 802c582:	b29b      	uxth	r3, r3
 802c584:	b21a      	sxth	r2, r3
 802c586:	2300      	movs	r3, #0
 802c588:	6878      	ldr	r0, [r7, #4]
 802c58a:	47a0      	blx	r4
                for ( bIdx = 0; bIdx < 16; bIdx++ )
 802c58c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802c590:	3301      	adds	r3, #1
 802c592:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802c596:	e7ac      	b.n	802c4f2 <_ZN16Adafruit_SSD13066printfEPKc+0xde>
            for ( j = 0; j < 16; j++ )
 802c598:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c59c:	3301      	adds	r3, #1
 802c59e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 802c5a2:	e785      	b.n	802c4b0 <_ZN16Adafruit_SSD13066printfEPKc+0x9c>
                }
            }
        }
        else
        {
            bIsCharHan = 0;
 802c5a4:	2300      	movs	r3, #0
 802c5a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            //	영문폰트
            //*
            PHan_EngFontLoad( (const uint8_t*)&format[i], &FontPtr );
 802c5aa:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c5ae:	f107 020c 	add.w	r2, r7, #12
 802c5b2:	4413      	add	r3, r2
 802c5b4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 802c5b8:	4611      	mov	r1, r2
 802c5ba:	4618      	mov	r0, r3
 802c5bc:	f000 fbc6 	bl	802cd4c <PHan_EngFontLoad>

            for ( j = 0; j < 16; j++ )
 802c5c0:	2300      	movs	r3, #0
 802c5c2:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 802c5c6:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c5ca:	2b0f      	cmp	r3, #15
 802c5cc:	d872      	bhi.n	802c6b4 <_ZN16Adafruit_SSD13066printfEPKc+0x2a0>
            {
                uint16_t	dotByte;
                int bIdx;

                dotByte = FontPtr.FontBuffer[j];
 802c5ce:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c5d2:	33c8      	adds	r3, #200	; 0xc8
 802c5d4:	443b      	add	r3, r7
 802c5d6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 802c5da:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                dotByte |= ( FontPtr.FontBuffer[j + 1] ) << 8;
 802c5de:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c5e2:	3301      	adds	r3, #1
 802c5e4:	33c8      	adds	r3, #200	; 0xc8
 802c5e6:	443b      	add	r3, r7
 802c5e8:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 802c5ec:	021b      	lsls	r3, r3, #8
 802c5ee:	b21a      	sxth	r2, r3
 802c5f0:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 802c5f4:	4313      	orrs	r3, r2
 802c5f6:	b21b      	sxth	r3, r3
 802c5f8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

                //  8 X 16 Font ( 영문 )
                for ( bIdx = 0; bIdx < 8; bIdx++ )
 802c5fc:	2300      	movs	r3, #0
 802c5fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802c602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802c606:	2b07      	cmp	r3, #7
 802c608:	dc4e      	bgt.n	802c6a8 <_ZN16Adafruit_SSD13066printfEPKc+0x294>
                {
                    if ( dotByte & bitval_r[bIdx] )
 802c60a:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 802c60e:	4935      	ldr	r1, [pc, #212]	; (802c6e4 <_ZN16Adafruit_SSD13066printfEPKc+0x2d0>)
 802c610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802c614:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802c618:	4013      	ands	r3, r2
 802c61a:	2b00      	cmp	r3, #0
 802c61c:	d01f      	beq.n	802c65e <_ZN16Adafruit_SSD13066printfEPKc+0x24a>
                    {
                        drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 1 );
 802c61e:	687b      	ldr	r3, [r7, #4]
 802c620:	681b      	ldr	r3, [r3, #0]
 802c622:	681c      	ldr	r4, [r3, #0]
 802c624:	687b      	ldr	r3, [r7, #4]
 802c626:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 802c62a:	b29a      	uxth	r2, r3
 802c62c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c630:	00db      	lsls	r3, r3, #3
 802c632:	b29b      	uxth	r3, r3
 802c634:	4413      	add	r3, r2
 802c636:	b29a      	uxth	r2, r3
 802c638:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802c63c:	b29b      	uxth	r3, r3
 802c63e:	4413      	add	r3, r2
 802c640:	b29b      	uxth	r3, r3
 802c642:	b219      	sxth	r1, r3
 802c644:	687b      	ldr	r3, [r7, #4]
 802c646:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 802c64a:	b29a      	uxth	r2, r3
 802c64c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c650:	4413      	add	r3, r2
 802c652:	b29b      	uxth	r3, r3
 802c654:	b21a      	sxth	r2, r3
 802c656:	2301      	movs	r3, #1
 802c658:	6878      	ldr	r0, [r7, #4]
 802c65a:	47a0      	blx	r4
 802c65c:	e01e      	b.n	802c69c <_ZN16Adafruit_SSD13066printfEPKc+0x288>
                    }
                    else
                    {
                        drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 0 );
 802c65e:	687b      	ldr	r3, [r7, #4]
 802c660:	681b      	ldr	r3, [r3, #0]
 802c662:	681c      	ldr	r4, [r3, #0]
 802c664:	687b      	ldr	r3, [r7, #4]
 802c666:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 802c66a:	b29a      	uxth	r2, r3
 802c66c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c670:	00db      	lsls	r3, r3, #3
 802c672:	b29b      	uxth	r3, r3
 802c674:	4413      	add	r3, r2
 802c676:	b29a      	uxth	r2, r3
 802c678:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802c67c:	b29b      	uxth	r3, r3
 802c67e:	4413      	add	r3, r2
 802c680:	b29b      	uxth	r3, r3
 802c682:	b219      	sxth	r1, r3
 802c684:	687b      	ldr	r3, [r7, #4]
 802c686:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 802c68a:	b29a      	uxth	r2, r3
 802c68c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c690:	4413      	add	r3, r2
 802c692:	b29b      	uxth	r3, r3
 802c694:	b21a      	sxth	r2, r3
 802c696:	2300      	movs	r3, #0
 802c698:	6878      	ldr	r0, [r7, #4]
 802c69a:	47a0      	blx	r4
                for ( bIdx = 0; bIdx < 8; bIdx++ )
 802c69c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802c6a0:	3301      	adds	r3, #1
 802c6a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802c6a6:	e7ac      	b.n	802c602 <_ZN16Adafruit_SSD13066printfEPKc+0x1ee>
            for ( j = 0; j < 16; j++ )
 802c6a8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 802c6ac:	3301      	adds	r3, #1
 802c6ae:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 802c6b2:	e788      	b.n	802c5c6 <_ZN16Adafruit_SSD13066printfEPKc+0x1b2>
            }
            //  */
        }


        if ( bIsCharHan )
 802c6b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 802c6b8:	2b00      	cmp	r3, #0
 802c6ba:	d004      	beq.n	802c6c6 <_ZN16Adafruit_SSD13066printfEPKc+0x2b2>
        {
            //  한글인경우 2 Byte
            i++;
 802c6bc:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c6c0:	3301      	adds	r3, #1
 802c6c2:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
    for ( i = 0; format[i] != '\0'; i++ )
 802c6c6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 802c6ca:	3301      	adds	r3, #1
 802c6cc:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 802c6d0:	e6cb      	b.n	802c46a <_ZN16Adafruit_SSD13066printfEPKc+0x56>
        }

    }
}
 802c6d2:	bf00      	nop
 802c6d4:	37cc      	adds	r7, #204	; 0xcc
 802c6d6:	46bd      	mov	sp, r7
 802c6d8:	bd90      	pop	{r4, r7, pc}
 802c6da:	bf00      	nop
 802c6dc:	08039534 	.word	0x08039534
 802c6e0:	0803953c 	.word	0x0803953c
 802c6e4:	0803b9a8 	.word	0x0803b9a8

0802c6e8 <LCDInit>:
int g_bInitLCD = 0;

//========================================================================
int LCDInit( void )
//========================================================================
{
 802c6e8:	b580      	push	{r7, lr}
 802c6ea:	af00      	add	r7, sp, #0
    display.begin( SSD1306_SWITCHCAPVCC, 0x78 );
 802c6ec:	2301      	movs	r3, #1
 802c6ee:	2278      	movs	r2, #120	; 0x78
 802c6f0:	2102      	movs	r1, #2
 802c6f2:	4804      	ldr	r0, [pc, #16]	; (802c704 <LCDInit+0x1c>)
 802c6f4:	f7ff f95e 	bl	802b9b4 <_ZN16Adafruit_SSD13065beginEhhb>

    g_bInitLCD = 1;
 802c6f8:	4b03      	ldr	r3, [pc, #12]	; (802c708 <LCDInit+0x20>)
 802c6fa:	2201      	movs	r2, #1
 802c6fc:	601a      	str	r2, [r3, #0]

    return 0;
 802c6fe:	2300      	movs	r3, #0
}
 802c700:	4618      	mov	r0, r3
 802c702:	bd80      	pop	{r7, pc}
 802c704:	20001298 	.word	0x20001298
 802c708:	200012b8 	.word	0x200012b8

0802c70c <LCDBattery>:


//========================================================================
void LCDBattery( int nLevel )
//========================================================================
{
 802c70c:	b580      	push	{r7, lr}
 802c70e:	b0a4      	sub	sp, #144	; 0x90
 802c710:	af04      	add	r7, sp, #16
 802c712:	6078      	str	r0, [r7, #4]
    if ( g_bInitLCD == false ) return;
 802c714:	4b16      	ldr	r3, [pc, #88]	; (802c770 <LCDBattery+0x64>)
 802c716:	681b      	ldr	r3, [r3, #0]
 802c718:	2b00      	cmp	r3, #0
 802c71a:	d024      	beq.n	802c766 <LCDBattery+0x5a>

    //  Size : 17 x 7
    //  Area : ( 110, 1 ) ~ ( 127, 7 )
    //  Level : 0 ~ 6   ( Battery )

    const uint8_t bmpRSSI[7][17] = {
 802c71c:	4a15      	ldr	r2, [pc, #84]	; (802c774 <LCDBattery+0x68>)
 802c71e:	f107 0308 	add.w	r3, r7, #8
 802c722:	4611      	mov	r1, r2
 802c724:	2277      	movs	r2, #119	; 0x77
 802c726:	4618      	mov	r0, r3
 802c728:	f00a fcbe 	bl	80370a8 <memcpy>
        { 0x3C, 0x24, 0x7F, 0x41, 0x41, 0x41, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x7F },  // -[   0 0 0 ]
        { 0x3C, 0x24, 0x7F, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x7F },  // -[ 0 0 0 0 ]
        { 0x3C, 0x24, 0x7F, 0x41, 0x41, 0x41, 0x51, 0x49, 0x4D, 0x7F, 0x59, 0x49, 0x45, 0x41, 0x41, 0x41, 0x7F },  // -[    z    ] - 충전중
    };

    if ( nLevel > 6 ) nLevel = 6;
 802c72c:	687b      	ldr	r3, [r7, #4]
 802c72e:	2b06      	cmp	r3, #6
 802c730:	dd01      	ble.n	802c736 <LCDBattery+0x2a>
 802c732:	2306      	movs	r3, #6
 802c734:	607b      	str	r3, [r7, #4]

    display.drawBitBuf( 110, 1, bmpRSSI[nLevel], 17, 7, WHITE, BLACK );
 802c736:	f107 0108 	add.w	r1, r7, #8
 802c73a:	687a      	ldr	r2, [r7, #4]
 802c73c:	4613      	mov	r3, r2
 802c73e:	011b      	lsls	r3, r3, #4
 802c740:	4413      	add	r3, r2
 802c742:	440b      	add	r3, r1
 802c744:	2200      	movs	r2, #0
 802c746:	9203      	str	r2, [sp, #12]
 802c748:	2201      	movs	r2, #1
 802c74a:	9202      	str	r2, [sp, #8]
 802c74c:	2207      	movs	r2, #7
 802c74e:	9201      	str	r2, [sp, #4]
 802c750:	2211      	movs	r2, #17
 802c752:	9200      	str	r2, [sp, #0]
 802c754:	2201      	movs	r2, #1
 802c756:	216e      	movs	r1, #110	; 0x6e
 802c758:	4807      	ldr	r0, [pc, #28]	; (802c778 <LCDBattery+0x6c>)
 802c75a:	f7fe ff38 	bl	802b5ce <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt>
    display.display();
 802c75e:	4806      	ldr	r0, [pc, #24]	; (802c778 <LCDBattery+0x6c>)
 802c760:	f7ff fa18 	bl	802bb94 <_ZN16Adafruit_SSD13067displayEv>
 802c764:	e000      	b.n	802c768 <LCDBattery+0x5c>
    if ( g_bInitLCD == false ) return;
 802c766:	bf00      	nop
}
 802c768:	3780      	adds	r7, #128	; 0x80
 802c76a:	46bd      	mov	sp, r7
 802c76c:	bd80      	pop	{r7, pc}
 802c76e:	bf00      	nop
 802c770:	200012b8 	.word	0x200012b8
 802c774:	0803954c 	.word	0x0803954c
 802c778:	20001298 	.word	0x20001298

0802c77c <LCDLight>:


//========================================================================
void LCDLight( int bOnOff )
//========================================================================
{
 802c77c:	b590      	push	{r4, r7, lr}
 802c77e:	b08d      	sub	sp, #52	; 0x34
 802c780:	af04      	add	r7, sp, #16
 802c782:	6078      	str	r0, [r7, #4]
    if ( g_bInitLCD == false ) return;
 802c784:	4b16      	ldr	r3, [pc, #88]	; (802c7e0 <LCDLight+0x64>)
 802c786:	681b      	ldr	r3, [r3, #0]
 802c788:	2b00      	cmp	r3, #0
 802c78a:	d024      	beq.n	802c7d6 <LCDLight+0x5a>

    //  Area : ( 1, 1 ) ~ ( 11, 7 )
    //  Level : 0(Off) / 1(On) ( Light On/Off )

    const uint8_t bmpLight[2][7] = {
 802c78c:	4b15      	ldr	r3, [pc, #84]	; (802c7e4 <LCDLight+0x68>)
 802c78e:	f107 040c 	add.w	r4, r7, #12
 802c792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802c794:	c407      	stmia	r4!, {r0, r1, r2}
 802c796:	8023      	strh	r3, [r4, #0]
        { 0x00, 0x10, 0xF0, 0xF0, 0xF0, 0x10, 0x00, },      // Light Off
        { 0x02, 0x14, 0xF0, 0xF7, 0xF0, 0x14, 0x02, },      // Light On
    };

    const uint8_t *pBmp = NULL;
 802c798:	2300      	movs	r3, #0
 802c79a:	61fb      	str	r3, [r7, #28]

    if ( bOnOff )
 802c79c:	687b      	ldr	r3, [r7, #4]
 802c79e:	2b00      	cmp	r3, #0
 802c7a0:	d004      	beq.n	802c7ac <LCDLight+0x30>
    {
        //  On
        pBmp = bmpLight[1];
 802c7a2:	f107 030c 	add.w	r3, r7, #12
 802c7a6:	3307      	adds	r3, #7
 802c7a8:	61fb      	str	r3, [r7, #28]
 802c7aa:	e002      	b.n	802c7b2 <LCDLight+0x36>
    }
    else
    {
        //  Off
        pBmp = bmpLight[0];
 802c7ac:	f107 030c 	add.w	r3, r7, #12
 802c7b0:	61fb      	str	r3, [r7, #28]
    }

    display.drawBitBuf( 90, 0, pBmp, 7, 8, WHITE, BLACK );
 802c7b2:	2300      	movs	r3, #0
 802c7b4:	9303      	str	r3, [sp, #12]
 802c7b6:	2301      	movs	r3, #1
 802c7b8:	9302      	str	r3, [sp, #8]
 802c7ba:	2308      	movs	r3, #8
 802c7bc:	9301      	str	r3, [sp, #4]
 802c7be:	2307      	movs	r3, #7
 802c7c0:	9300      	str	r3, [sp, #0]
 802c7c2:	69fb      	ldr	r3, [r7, #28]
 802c7c4:	2200      	movs	r2, #0
 802c7c6:	215a      	movs	r1, #90	; 0x5a
 802c7c8:	4807      	ldr	r0, [pc, #28]	; (802c7e8 <LCDLight+0x6c>)
 802c7ca:	f7fe ff00 	bl	802b5ce <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt>
    display.display();
 802c7ce:	4806      	ldr	r0, [pc, #24]	; (802c7e8 <LCDLight+0x6c>)
 802c7d0:	f7ff f9e0 	bl	802bb94 <_ZN16Adafruit_SSD13067displayEv>
 802c7d4:	e000      	b.n	802c7d8 <LCDLight+0x5c>
    if ( g_bInitLCD == false ) return;
 802c7d6:	bf00      	nop
}
 802c7d8:	3724      	adds	r7, #36	; 0x24
 802c7da:	46bd      	mov	sp, r7
 802c7dc:	bd90      	pop	{r4, r7, pc}
 802c7de:	bf00      	nop
 802c7e0:	200012b8 	.word	0x200012b8
 802c7e4:	08039608 	.word	0x08039608
 802c7e8:	20001298 	.word	0x20001298

0802c7ec <LCDSpeaker>:


//========================================================================
void LCDSpeaker( int nLevel )
//========================================================================
{
 802c7ec:	b580      	push	{r7, lr}
 802c7ee:	b09e      	sub	sp, #120	; 0x78
 802c7f0:	af04      	add	r7, sp, #16
 802c7f2:	6078      	str	r0, [r7, #4]
    if ( g_bInitLCD == false ) return;
 802c7f4:	4b19      	ldr	r3, [pc, #100]	; (802c85c <LCDSpeaker+0x70>)
 802c7f6:	681b      	ldr	r3, [r3, #0]
 802c7f8:	2b00      	cmp	r3, #0
 802c7fa:	d02b      	beq.n	802c854 <LCDSpeaker+0x68>

    //  Area : ( 1, 1 ) ~ ( 11, 7 )
    //  Level : 0(Off) / 1(On) ( Light On/Off )

    //  Speaker Icon ( 11 X 9 )
    const uint8_t bmpSpk[4][22] = {
 802c7fc:	4a18      	ldr	r2, [pc, #96]	; (802c860 <LCDSpeaker+0x74>)
 802c7fe:	f107 030c 	add.w	r3, r7, #12
 802c802:	4611      	mov	r1, r2
 802c804:	2258      	movs	r2, #88	; 0x58
 802c806:	4618      	mov	r0, r3
 802c808:	f00a fc4e 	bl	80370a8 <memcpy>
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  },   // Speaker On ( Level 2 )
        { 0x38, 0x38, 0x7C, 0xFE, 0x00, 0x38, 0x82, 0x7C, 0x01, 0x82, 0x7C,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  },   // Speaker On ( Level 3 )
    };

    const uint8_t *pBmp = NULL;
 802c80c:	2300      	movs	r3, #0
 802c80e:	667b      	str	r3, [r7, #100]	; 0x64

    if ( nLevel < 0 && nLevel > 3 ) nLevel = 0;
 802c810:	687b      	ldr	r3, [r7, #4]
 802c812:	2b00      	cmp	r3, #0
 802c814:	da04      	bge.n	802c820 <LCDSpeaker+0x34>
 802c816:	687b      	ldr	r3, [r7, #4]
 802c818:	2b03      	cmp	r3, #3
 802c81a:	dd01      	ble.n	802c820 <LCDSpeaker+0x34>
 802c81c:	2300      	movs	r3, #0
 802c81e:	607b      	str	r3, [r7, #4]

    //========================================================================
    pBmp = bmpSpk[nLevel];
 802c820:	f107 020c 	add.w	r2, r7, #12
 802c824:	687b      	ldr	r3, [r7, #4]
 802c826:	2116      	movs	r1, #22
 802c828:	fb01 f303 	mul.w	r3, r1, r3
 802c82c:	4413      	add	r3, r2
 802c82e:	667b      	str	r3, [r7, #100]	; 0x64
    //========================================================================

    display.drawBitBuf( 50, 0, pBmp, 11, 9, WHITE, BLACK );
 802c830:	2300      	movs	r3, #0
 802c832:	9303      	str	r3, [sp, #12]
 802c834:	2301      	movs	r3, #1
 802c836:	9302      	str	r3, [sp, #8]
 802c838:	2309      	movs	r3, #9
 802c83a:	9301      	str	r3, [sp, #4]
 802c83c:	230b      	movs	r3, #11
 802c83e:	9300      	str	r3, [sp, #0]
 802c840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802c842:	2200      	movs	r2, #0
 802c844:	2132      	movs	r1, #50	; 0x32
 802c846:	4807      	ldr	r0, [pc, #28]	; (802c864 <LCDSpeaker+0x78>)
 802c848:	f7fe fec1 	bl	802b5ce <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt>
    display.display();
 802c84c:	4805      	ldr	r0, [pc, #20]	; (802c864 <LCDSpeaker+0x78>)
 802c84e:	f7ff f9a1 	bl	802bb94 <_ZN16Adafruit_SSD13067displayEv>
 802c852:	e000      	b.n	802c856 <LCDSpeaker+0x6a>
    if ( g_bInitLCD == false ) return;
 802c854:	bf00      	nop
}
 802c856:	3768      	adds	r7, #104	; 0x68
 802c858:	46bd      	mov	sp, r7
 802c85a:	bd80      	pop	{r7, pc}
 802c85c:	200012b8 	.word	0x200012b8
 802c860:	08039618 	.word	0x08039618
 802c864:	20001298 	.word	0x20001298

0802c868 <LCDMenu>:


//========================================================================
void LCDMenu( void )
//========================================================================
{
 802c868:	b580      	push	{r7, lr}
 802c86a:	af00      	add	r7, sp, #0
    if ( g_bInitLCD == false ) return;
 802c86c:	4b09      	ldr	r3, [pc, #36]	; (802c894 <LCDMenu+0x2c>)
 802c86e:	681b      	ldr	r3, [r3, #0]
 802c870:	2b00      	cmp	r3, #0
 802c872:	d00c      	beq.n	802c88e <LCDMenu+0x26>

    memcpy( buffer, bufMenu, sizeof( bufMenu ) );
 802c874:	4a08      	ldr	r2, [pc, #32]	; (802c898 <LCDMenu+0x30>)
 802c876:	4b09      	ldr	r3, [pc, #36]	; (802c89c <LCDMenu+0x34>)
 802c878:	4610      	mov	r0, r2
 802c87a:	4619      	mov	r1, r3
 802c87c:	f44f 7300 	mov.w	r3, #512	; 0x200
 802c880:	461a      	mov	r2, r3
 802c882:	f00a fc11 	bl	80370a8 <memcpy>
    display.display();
 802c886:	4806      	ldr	r0, [pc, #24]	; (802c8a0 <LCDMenu+0x38>)
 802c888:	f7ff f984 	bl	802bb94 <_ZN16Adafruit_SSD13067displayEv>
 802c88c:	e000      	b.n	802c890 <LCDMenu+0x28>
    if ( g_bInitLCD == false ) return;
 802c88e:	bf00      	nop
}
 802c890:	bd80      	pop	{r7, pc}
 802c892:	bf00      	nop
 802c894:	200012b8 	.word	0x200012b8
 802c898:	20000294 	.word	0x20000294
 802c89c:	20000094 	.word	0x20000094
 802c8a0:	20001298 	.word	0x20001298

0802c8a4 <LCDMenuUpDown>:


//========================================================================
void    LCDMenuUpDown       ( int nUpDown ) //  0( Off ) / 1( ▲Up ) / 2( ▼Down ) / 3( ▲Up/▼Down ) 
//========================================================================
{
 802c8a4:	b580      	push	{r7, lr}
 802c8a6:	b09e      	sub	sp, #120	; 0x78
 802c8a8:	af04      	add	r7, sp, #16
 802c8aa:	6078      	str	r0, [r7, #4]
    //  0( Off ) / 1( ▲Up ) / 2(       ) / 3( ▲Up   ) 
    //                           ▼Down        ▼Down 

    if ( g_bInitLCD == false ) return;
 802c8ac:	4b19      	ldr	r3, [pc, #100]	; (802c914 <LCDMenuUpDown+0x70>)
 802c8ae:	681b      	ldr	r3, [r3, #0]
 802c8b0:	2b00      	cmp	r3, #0
 802c8b2:	d02b      	beq.n	802c90c <LCDMenuUpDown+0x68>

    //  Area : ( 2, 16 ) ~ ( 13, 32 )
    //  Level : 0(Off) / 1(On) ( Light On/Off )

    //  Speaker Icon ( 11 X 16 )
    const uint8_t bmpMenuUpDown[4][22] = {
 802c8b4:	4a18      	ldr	r2, [pc, #96]	; (802c918 <LCDMenuUpDown+0x74>)
 802c8b6:	f107 030c 	add.w	r3, r7, #12
 802c8ba:	4611      	mov	r1, r2
 802c8bc:	2258      	movs	r2, #88	; 0x58
 802c8be:	4618      	mov	r0, r3
 802c8c0:	f00a fbf2 	bl	80370a8 <memcpy>
          0x02, 0x06, 0x0E, 0x1E, 0x3E, 0x7E, 0x3E, 0x1E, 0x0E, 0x06, 0x02 },           //  2 ( ▼Down )
        { 0x40, 0x60, 0x70, 0x78, 0x7C, 0x7E, 0x7C, 0x78, 0x70, 0x60, 0x40,             //  3 ( ▲Up )
          0x02, 0x06, 0x0E, 0x1E, 0x3E, 0x7E, 0x3E, 0x1E, 0x0E, 0x06, 0x02 },           //    ( ▼Down )
    };

    const uint8_t* pBmp = NULL;
 802c8c4:	2300      	movs	r3, #0
 802c8c6:	667b      	str	r3, [r7, #100]	; 0x64

    if ( nUpDown < 0 && nUpDown > 3 ) nUpDown = 0;
 802c8c8:	687b      	ldr	r3, [r7, #4]
 802c8ca:	2b00      	cmp	r3, #0
 802c8cc:	da04      	bge.n	802c8d8 <LCDMenuUpDown+0x34>
 802c8ce:	687b      	ldr	r3, [r7, #4]
 802c8d0:	2b03      	cmp	r3, #3
 802c8d2:	dd01      	ble.n	802c8d8 <LCDMenuUpDown+0x34>
 802c8d4:	2300      	movs	r3, #0
 802c8d6:	607b      	str	r3, [r7, #4]

    pBmp = bmpMenuUpDown[nUpDown];
 802c8d8:	f107 020c 	add.w	r2, r7, #12
 802c8dc:	687b      	ldr	r3, [r7, #4]
 802c8de:	2116      	movs	r1, #22
 802c8e0:	fb01 f303 	mul.w	r3, r1, r3
 802c8e4:	4413      	add	r3, r2
 802c8e6:	667b      	str	r3, [r7, #100]	; 0x64

    display.drawBitBuf( 5, 13, pBmp, 11, 16, WHITE, BLACK );
 802c8e8:	2300      	movs	r3, #0
 802c8ea:	9303      	str	r3, [sp, #12]
 802c8ec:	2301      	movs	r3, #1
 802c8ee:	9302      	str	r3, [sp, #8]
 802c8f0:	2310      	movs	r3, #16
 802c8f2:	9301      	str	r3, [sp, #4]
 802c8f4:	230b      	movs	r3, #11
 802c8f6:	9300      	str	r3, [sp, #0]
 802c8f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802c8fa:	220d      	movs	r2, #13
 802c8fc:	2105      	movs	r1, #5
 802c8fe:	4807      	ldr	r0, [pc, #28]	; (802c91c <LCDMenuUpDown+0x78>)
 802c900:	f7fe fe65 	bl	802b5ce <_ZN12Adafruit_GFX10drawBitBufEssPKhsstt>
    display.display();
 802c904:	4805      	ldr	r0, [pc, #20]	; (802c91c <LCDMenuUpDown+0x78>)
 802c906:	f7ff f945 	bl	802bb94 <_ZN16Adafruit_SSD13067displayEv>
 802c90a:	e000      	b.n	802c90e <LCDMenuUpDown+0x6a>
    if ( g_bInitLCD == false ) return;
 802c90c:	bf00      	nop
}
 802c90e:	3768      	adds	r7, #104	; 0x68
 802c910:	46bd      	mov	sp, r7
 802c912:	bd80      	pop	{r7, pc}
 802c914:	200012b8 	.word	0x200012b8
 802c918:	08039670 	.word	0x08039670
 802c91c:	20001298 	.word	0x20001298

0802c920 <LCDSetCursor>:


//========================================================================
void LCDSetCursor( int x, int y )
//========================================================================
{
 802c920:	b580      	push	{r7, lr}
 802c922:	b082      	sub	sp, #8
 802c924:	af00      	add	r7, sp, #0
 802c926:	6078      	str	r0, [r7, #4]
 802c928:	6039      	str	r1, [r7, #0]
    if ( g_bInitLCD == false ) return;
 802c92a:	4b08      	ldr	r3, [pc, #32]	; (802c94c <LCDSetCursor+0x2c>)
 802c92c:	681b      	ldr	r3, [r3, #0]
 802c92e:	2b00      	cmp	r3, #0
 802c930:	d008      	beq.n	802c944 <LCDSetCursor+0x24>

    display.setCursor( x, y );
 802c932:	687b      	ldr	r3, [r7, #4]
 802c934:	b21b      	sxth	r3, r3
 802c936:	683a      	ldr	r2, [r7, #0]
 802c938:	b212      	sxth	r2, r2
 802c93a:	4619      	mov	r1, r3
 802c93c:	4804      	ldr	r0, [pc, #16]	; (802c950 <LCDSetCursor+0x30>)
 802c93e:	f7fe febd 	bl	802b6bc <_ZN12Adafruit_GFX9setCursorEss>
 802c942:	e000      	b.n	802c946 <LCDSetCursor+0x26>
    if ( g_bInitLCD == false ) return;
 802c944:	bf00      	nop
}
 802c946:	3708      	adds	r7, #8
 802c948:	46bd      	mov	sp, r7
 802c94a:	bd80      	pop	{r7, pc}
 802c94c:	200012b8 	.word	0x200012b8
 802c950:	20001298 	.word	0x20001298

0802c954 <LCDEnableDebug>:

//========================================================================
void    LCDEnableDebug		( int bEnable )  		//  print LCD Display
//========================================================================
{
 802c954:	b580      	push	{r7, lr}
 802c956:	b082      	sub	sp, #8
 802c958:	af00      	add	r7, sp, #0
 802c95a:	6078      	str	r0, [r7, #4]
    if ( g_bInitLCD == false ) return;
 802c95c:	4b06      	ldr	r3, [pc, #24]	; (802c978 <LCDEnableDebug+0x24>)
 802c95e:	681b      	ldr	r3, [r3, #0]
 802c960:	2b00      	cmp	r3, #0
 802c962:	d004      	beq.n	802c96e <LCDEnableDebug+0x1a>

    display.debug(bEnable);		//	LCD Debug Print
 802c964:	6879      	ldr	r1, [r7, #4]
 802c966:	4805      	ldr	r0, [pc, #20]	; (802c97c <LCDEnableDebug+0x28>)
 802c968:	f7fe fefe 	bl	802b768 <_ZN16Adafruit_SSD13065debugEi>
 802c96c:	e000      	b.n	802c970 <LCDEnableDebug+0x1c>
    if ( g_bInitLCD == false ) return;
 802c96e:	bf00      	nop
}
 802c970:	3708      	adds	r7, #8
 802c972:	46bd      	mov	sp, r7
 802c974:	bd80      	pop	{r7, pc}
 802c976:	bf00      	nop
 802c978:	200012b8 	.word	0x200012b8
 802c97c:	20001298 	.word	0x20001298

0802c980 <LCDPrintf>:

//========================================================================
void LCDPrintf( char * str )
//========================================================================
{
 802c980:	b580      	push	{r7, lr}
 802c982:	b086      	sub	sp, #24
 802c984:	af02      	add	r7, sp, #8
 802c986:	6078      	str	r0, [r7, #4]
    if ( g_bInitLCD == false ) return;
 802c988:	4b14      	ldr	r3, [pc, #80]	; (802c9dc <LCDPrintf+0x5c>)
 802c98a:	681b      	ldr	r3, [r3, #0]
 802c98c:	2b00      	cmp	r3, #0
 802c98e:	d020      	beq.n	802c9d2 <LCDPrintf+0x52>
//    display.clearDisplay();

    //  (0, 11) ~ (128, 32 )
    int16_t x, y;

    display.getCursor( &x, &y );
 802c990:	f107 020c 	add.w	r2, r7, #12
 802c994:	f107 030e 	add.w	r3, r7, #14
 802c998:	4619      	mov	r1, r3
 802c99a:	4811      	ldr	r0, [pc, #68]	; (802c9e0 <LCDPrintf+0x60>)
 802c99c:	f7fe fea2 	bl	802b6e4 <_ZN12Adafruit_GFX9getCursorEPsS0_>

    //	글씨 출력 영역 Clear
    display.fillRect( x, 11, 128 - x, 21, 0 );    //  Clear
 802c9a0:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 802c9a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802c9a8:	b29b      	uxth	r3, r3
 802c9aa:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 802c9ae:	b29b      	uxth	r3, r3
 802c9b0:	b21b      	sxth	r3, r3
 802c9b2:	2200      	movs	r2, #0
 802c9b4:	9201      	str	r2, [sp, #4]
 802c9b6:	2215      	movs	r2, #21
 802c9b8:	9200      	str	r2, [sp, #0]
 802c9ba:	220b      	movs	r2, #11
 802c9bc:	4808      	ldr	r0, [pc, #32]	; (802c9e0 <LCDPrintf+0x60>)
 802c9be:	f7fe fdb8 	bl	802b532 <_ZN12Adafruit_GFX8fillRectEsssst>

//    display.setCursor( 28, 8 );
    display.printf( str );
 802c9c2:	6879      	ldr	r1, [r7, #4]
 802c9c4:	4806      	ldr	r0, [pc, #24]	; (802c9e0 <LCDPrintf+0x60>)
 802c9c6:	f7ff fd25 	bl	802c414 <_ZN16Adafruit_SSD13066printfEPKc>
    display.display();
 802c9ca:	4805      	ldr	r0, [pc, #20]	; (802c9e0 <LCDPrintf+0x60>)
 802c9cc:	f7ff f8e2 	bl	802bb94 <_ZN16Adafruit_SSD13067displayEv>
 802c9d0:	e000      	b.n	802c9d4 <LCDPrintf+0x54>
    if ( g_bInitLCD == false ) return;
 802c9d2:	bf00      	nop
}
 802c9d4:	3710      	adds	r7, #16
 802c9d6:	46bd      	mov	sp, r7
 802c9d8:	bd80      	pop	{r7, pc}
 802c9da:	bf00      	nop
 802c9dc:	200012b8 	.word	0x200012b8
 802c9e0:	20001298 	.word	0x20001298

0802c9e4 <LCDPrintfXY>:

//========================================================================
void    LCDPrintfXY         ( int x, int y, char *str )  //  print LCD Display
//========================================================================
{
 802c9e4:	b580      	push	{r7, lr}
 802c9e6:	b084      	sub	sp, #16
 802c9e8:	af00      	add	r7, sp, #0
 802c9ea:	60f8      	str	r0, [r7, #12]
 802c9ec:	60b9      	str	r1, [r7, #8]
 802c9ee:	607a      	str	r2, [r7, #4]
    if ( g_bInitLCD == false ) return;
 802c9f0:	4b08      	ldr	r3, [pc, #32]	; (802ca14 <LCDPrintfXY+0x30>)
 802c9f2:	681b      	ldr	r3, [r3, #0]
 802c9f4:	2b00      	cmp	r3, #0
 802c9f6:	d009      	beq.n	802ca0c <LCDPrintfXY+0x28>

	//  Main화면 Clear
	LCDClearMain();
 802c9f8:	f000 f822 	bl	802ca40 <LCDClearMain>

    LCDSetCursor( x, y );
 802c9fc:	68b9      	ldr	r1, [r7, #8]
 802c9fe:	68f8      	ldr	r0, [r7, #12]
 802ca00:	f7ff ff8e 	bl	802c920 <LCDSetCursor>

    LCDPrintf( str );
 802ca04:	6878      	ldr	r0, [r7, #4]
 802ca06:	f7ff ffbb 	bl	802c980 <LCDPrintf>
 802ca0a:	e000      	b.n	802ca0e <LCDPrintfXY+0x2a>
    if ( g_bInitLCD == false ) return;
 802ca0c:	bf00      	nop
}
 802ca0e:	3710      	adds	r7, #16
 802ca10:	46bd      	mov	sp, r7
 802ca12:	bd80      	pop	{r7, pc}
 802ca14:	200012b8 	.word	0x200012b8

0802ca18 <LCDClear>:

//========================================================================
void LCDClear( void )
//========================================================================
{
 802ca18:	b580      	push	{r7, lr}
 802ca1a:	af00      	add	r7, sp, #0
    if ( g_bInitLCD == false ) return;
 802ca1c:	4b06      	ldr	r3, [pc, #24]	; (802ca38 <LCDClear+0x20>)
 802ca1e:	681b      	ldr	r3, [r3, #0]
 802ca20:	2b00      	cmp	r3, #0
 802ca22:	d006      	beq.n	802ca32 <LCDClear+0x1a>

    display.clearDisplay();
 802ca24:	4805      	ldr	r0, [pc, #20]	; (802ca3c <LCDClear+0x24>)
 802ca26:	f7ff f8e5 	bl	802bbf4 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.display();
 802ca2a:	4804      	ldr	r0, [pc, #16]	; (802ca3c <LCDClear+0x24>)
 802ca2c:	f7ff f8b2 	bl	802bb94 <_ZN16Adafruit_SSD13067displayEv>
 802ca30:	e000      	b.n	802ca34 <LCDClear+0x1c>
    if ( g_bInitLCD == false ) return;
 802ca32:	bf00      	nop
}
 802ca34:	bd80      	pop	{r7, pc}
 802ca36:	bf00      	nop
 802ca38:	200012b8 	.word	0x200012b8
 802ca3c:	20001298 	.word	0x20001298

0802ca40 <LCDClearMain>:
}

//========================================================================
void LCDClearMain( void )
//========================================================================
{
 802ca40:	b580      	push	{r7, lr}
 802ca42:	b082      	sub	sp, #8
 802ca44:	af02      	add	r7, sp, #8
    //  Main 영역 Clear
    if ( g_bInitLCD == false ) return;
 802ca46:	4b09      	ldr	r3, [pc, #36]	; (802ca6c <LCDClearMain+0x2c>)
 802ca48:	681b      	ldr	r3, [r3, #0]
 802ca4a:	2b00      	cmp	r3, #0
 802ca4c:	d00a      	beq.n	802ca64 <LCDClearMain+0x24>

    display.fillRect( 0, 10, 128, 22, BLACK );
 802ca4e:	2300      	movs	r3, #0
 802ca50:	9301      	str	r3, [sp, #4]
 802ca52:	2316      	movs	r3, #22
 802ca54:	9300      	str	r3, [sp, #0]
 802ca56:	2380      	movs	r3, #128	; 0x80
 802ca58:	220a      	movs	r2, #10
 802ca5a:	2100      	movs	r1, #0
 802ca5c:	4804      	ldr	r0, [pc, #16]	; (802ca70 <LCDClearMain+0x30>)
 802ca5e:	f7fe fd68 	bl	802b532 <_ZN12Adafruit_GFX8fillRectEsssst>
 802ca62:	e000      	b.n	802ca66 <LCDClearMain+0x26>
    if ( g_bInitLCD == false ) return;
 802ca64:	bf00      	nop
//    display.display();
}
 802ca66:	46bd      	mov	sp, r7
 802ca68:	bd80      	pop	{r7, pc}
 802ca6a:	bf00      	nop
 802ca6c:	200012b8 	.word	0x200012b8
 802ca70:	20001298 	.word	0x20001298

0802ca74 <LCDDrawRect>:

//========================================================================
void    LCDDrawRect        ( int x, int y, int w, int h, int color )  //  Clear LCD Display
//========================================================================
{
 802ca74:	b590      	push	{r4, r7, lr}
 802ca76:	b087      	sub	sp, #28
 802ca78:	af02      	add	r7, sp, #8
 802ca7a:	60f8      	str	r0, [r7, #12]
 802ca7c:	60b9      	str	r1, [r7, #8]
 802ca7e:	607a      	str	r2, [r7, #4]
 802ca80:	603b      	str	r3, [r7, #0]
    display.fillRect( x, y, w, h, color );
 802ca82:	68fb      	ldr	r3, [r7, #12]
 802ca84:	b219      	sxth	r1, r3
 802ca86:	68bb      	ldr	r3, [r7, #8]
 802ca88:	b218      	sxth	r0, r3
 802ca8a:	687b      	ldr	r3, [r7, #4]
 802ca8c:	b21c      	sxth	r4, r3
 802ca8e:	683b      	ldr	r3, [r7, #0]
 802ca90:	b21b      	sxth	r3, r3
 802ca92:	6a3a      	ldr	r2, [r7, #32]
 802ca94:	b292      	uxth	r2, r2
 802ca96:	9201      	str	r2, [sp, #4]
 802ca98:	9300      	str	r3, [sp, #0]
 802ca9a:	4623      	mov	r3, r4
 802ca9c:	4602      	mov	r2, r0
 802ca9e:	4805      	ldr	r0, [pc, #20]	; (802cab4 <LCDDrawRect+0x40>)
 802caa0:	f7fe fd47 	bl	802b532 <_ZN12Adafruit_GFX8fillRectEsssst>
    display.display();
 802caa4:	4803      	ldr	r0, [pc, #12]	; (802cab4 <LCDDrawRect+0x40>)
 802caa6:	f7ff f875 	bl	802bb94 <_ZN16Adafruit_SSD13067displayEv>
}
 802caaa:	bf00      	nop
 802caac:	3714      	adds	r7, #20
 802caae:	46bd      	mov	sp, r7
 802cab0:	bd90      	pop	{r4, r7, pc}
 802cab2:	bf00      	nop
 802cab4:	20001298 	.word	0x20001298

0802cab8 <_Z41__static_initialization_and_destruction_0ii>:
    display.drawBitmap( 30, 16, logo16_glcd_bmp, 16, 16, 1 );
    display.display();
    HAL_Delay( 500 );
#endif

}
 802cab8:	b580      	push	{r7, lr}
 802caba:	b082      	sub	sp, #8
 802cabc:	af00      	add	r7, sp, #0
 802cabe:	6078      	str	r0, [r7, #4]
 802cac0:	6039      	str	r1, [r7, #0]
 802cac2:	687b      	ldr	r3, [r7, #4]
 802cac4:	2b01      	cmp	r3, #1
 802cac6:	d108      	bne.n	802cada <_Z41__static_initialization_and_destruction_0ii+0x22>
 802cac8:	683b      	ldr	r3, [r7, #0]
 802caca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802cace:	4293      	cmp	r3, r2
 802cad0:	d103      	bne.n	802cada <_Z41__static_initialization_and_destruction_0ii+0x22>
Adafruit_SSD1306 display( OLED_RESET );
 802cad2:	2100      	movs	r1, #0
 802cad4:	4803      	ldr	r0, [pc, #12]	; (802cae4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 802cad6:	f7fe ff3f 	bl	802b958 <_ZN16Adafruit_SSD1306C1Ea>
}
 802cada:	bf00      	nop
 802cadc:	3708      	adds	r7, #8
 802cade:	46bd      	mov	sp, r7
 802cae0:	bd80      	pop	{r7, pc}
 802cae2:	bf00      	nop
 802cae4:	20001298 	.word	0x20001298

0802cae8 <_GLOBAL__sub_I_Buffer_CMD>:
 802cae8:	b580      	push	{r7, lr}
 802caea:	af00      	add	r7, sp, #0
 802caec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802caf0:	2001      	movs	r0, #1
 802caf2:	f7ff ffe1 	bl	802cab8 <_Z41__static_initialization_and_destruction_0ii>
 802caf6:	bd80      	pop	{r7, pc}

0802caf8 <PHan_CnvCodeWan2Johab>:
//========================================================================

//========================================================================
uint16_t PHan_CnvCodeWan2Johab(uint16_t WanCode)
//========================================================================
{
 802caf8:	b480      	push	{r7}
 802cafa:	b085      	sub	sp, #20
 802cafc:	af00      	add	r7, sp, #0
 802cafe:	4603      	mov	r3, r0
 802cb00:	80fb      	strh	r3, [r7, #6]
	uint16_t	index;
	uint16_t	hcode, lcode;

	hcode = (WanCode >> 8) & 0xFF;
 802cb02:	88fb      	ldrh	r3, [r7, #6]
 802cb04:	0a1b      	lsrs	r3, r3, #8
 802cb06:	81fb      	strh	r3, [r7, #14]
	lcode = WanCode & 0x0ff;
 802cb08:	88fb      	ldrh	r3, [r7, #6]
 802cb0a:	b2db      	uxtb	r3, r3
 802cb0c:	81bb      	strh	r3, [r7, #12]

	index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 802cb0e:	89fb      	ldrh	r3, [r7, #14]
 802cb10:	461a      	mov	r2, r3
 802cb12:	0052      	lsls	r2, r2, #1
 802cb14:	441a      	add	r2, r3
 802cb16:	0112      	lsls	r2, r2, #4
 802cb18:	1ad3      	subs	r3, r2, r3
 802cb1a:	005b      	lsls	r3, r3, #1
 802cb1c:	b29a      	uxth	r2, r3
 802cb1e:	89bb      	ldrh	r3, [r7, #12]
 802cb20:	4413      	add	r3, r2
 802cb22:	b29b      	uxth	r3, r3
 802cb24:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 802cb28:	3b41      	subs	r3, #65	; 0x41
 802cb2a:	817b      	strh	r3, [r7, #10]

	return wWanToJohabTable[index];
 802cb2c:	897b      	ldrh	r3, [r7, #10]
 802cb2e:	4a04      	ldr	r2, [pc, #16]	; (802cb40 <PHan_CnvCodeWan2Johab+0x48>)
 802cb30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 802cb34:	4618      	mov	r0, r3
 802cb36:	3714      	adds	r7, #20
 802cb38:	46bd      	mov	sp, r7
 802cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb3e:	4770      	bx	lr
 802cb40:	0803bab4 	.word	0x0803bab4

0802cb44 <PHan_HanFontLoad>:
static uint8_t uChoType, uJooType, uJonType;

//========================================================================
void PHan_HanFontLoad( const uint8_t *HanCode, PHAN_FONT_OBJ *FontPtr )   /* 한글 일반 폰트 생성 */
//========================================================================
{
 802cb44:	b580      	push	{r7, lr}
 802cb46:	b084      	sub	sp, #16
 802cb48:	af00      	add	r7, sp, #0
 802cb4a:	6078      	str	r0, [r7, #4]
 802cb4c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	uint16_t wHanCode;

	FontPtr->Code_Type = PHAN_HANGUL_CODE;
 802cb4e:	683b      	ldr	r3, [r7, #0]
 802cb50:	2201      	movs	r2, #1
 802cb52:	70da      	strb	r2, [r3, #3]
	FontPtr->Size_Char = 2;
 802cb54:	683b      	ldr	r3, [r7, #0]
 802cb56:	2202      	movs	r2, #2
 802cb58:	709a      	strb	r2, [r3, #2]

	wHanCode = (uint16_t)HanCode[0] << 8 | (uint16_t)HanCode[1] & 0x00FF;
 802cb5a:	687b      	ldr	r3, [r7, #4]
 802cb5c:	781b      	ldrb	r3, [r3, #0]
 802cb5e:	021b      	lsls	r3, r3, #8
 802cb60:	b21a      	sxth	r2, r3
 802cb62:	687b      	ldr	r3, [r7, #4]
 802cb64:	3301      	adds	r3, #1
 802cb66:	781b      	ldrb	r3, [r3, #0]
 802cb68:	b21b      	sxth	r3, r3
 802cb6a:	4313      	orrs	r3, r2
 802cb6c:	b21b      	sxth	r3, r3
 802cb6e:	81bb      	strh	r3, [r7, #12]

//	printf("%c%c : 0x%02X%02X\n", HanCode[0], HanCode[1], HanCode[0], HanCode[1] );

	wHanCode = PHan_CnvCodeWan2Johab( wHanCode );
 802cb70:	89bb      	ldrh	r3, [r7, #12]
 802cb72:	4618      	mov	r0, r3
 802cb74:	f7ff ffc0 	bl	802caf8 <PHan_CnvCodeWan2Johab>
 802cb78:	4603      	mov	r3, r0
 802cb7a:	81bb      	strh	r3, [r7, #12]
	//printf("a %x \n", wHanCode );

	//seperate phoneme code
	_uChosung	=	( wHanCode >> 10 ) & 0x001F;	//	Chosung code
 802cb7c:	89bb      	ldrh	r3, [r7, #12]
 802cb7e:	0a9b      	lsrs	r3, r3, #10
 802cb80:	b29b      	uxth	r3, r3
 802cb82:	b2db      	uxtb	r3, r3
 802cb84:	f003 031f 	and.w	r3, r3, #31
 802cb88:	b2da      	uxtb	r2, r3
 802cb8a:	4b60      	ldr	r3, [pc, #384]	; (802cd0c <PHan_HanFontLoad+0x1c8>)
 802cb8c:	701a      	strb	r2, [r3, #0]
	_uJoongsung	=	( wHanCode >> 5 ) & 0x001F;		//	Joongsung code
 802cb8e:	89bb      	ldrh	r3, [r7, #12]
 802cb90:	095b      	lsrs	r3, r3, #5
 802cb92:	b29b      	uxth	r3, r3
 802cb94:	b2db      	uxtb	r3, r3
 802cb96:	f003 031f 	and.w	r3, r3, #31
 802cb9a:	b2da      	uxtb	r2, r3
 802cb9c:	4b5c      	ldr	r3, [pc, #368]	; (802cd10 <PHan_HanFontLoad+0x1cc>)
 802cb9e:	701a      	strb	r2, [r3, #0]
	_uJongsung	=	wHanCode & 0x001F;				//	Jongsung code
 802cba0:	89bb      	ldrh	r3, [r7, #12]
 802cba2:	b2db      	uxtb	r3, r3
 802cba4:	f003 031f 	and.w	r3, r3, #31
 802cba8:	b2da      	uxtb	r2, r3
 802cbaa:	4b5a      	ldr	r3, [pc, #360]	; (802cd14 <PHan_HanFontLoad+0x1d0>)
 802cbac:	701a      	strb	r2, [r3, #0]

	//make font index
	uChosung	=	ChoIdxTbl[_uChosung];			//	Chosung index
 802cbae:	4b57      	ldr	r3, [pc, #348]	; (802cd0c <PHan_HanFontLoad+0x1c8>)
 802cbb0:	781b      	ldrb	r3, [r3, #0]
 802cbb2:	461a      	mov	r2, r3
 802cbb4:	4b58      	ldr	r3, [pc, #352]	; (802cd18 <PHan_HanFontLoad+0x1d4>)
 802cbb6:	5c9a      	ldrb	r2, [r3, r2]
 802cbb8:	4b58      	ldr	r3, [pc, #352]	; (802cd1c <PHan_HanFontLoad+0x1d8>)
 802cbba:	701a      	strb	r2, [r3, #0]
	uJoongsung	=	JooIdxTbl[_uJoongsung];			//	Joongsung index
 802cbbc:	4b54      	ldr	r3, [pc, #336]	; (802cd10 <PHan_HanFontLoad+0x1cc>)
 802cbbe:	781b      	ldrb	r3, [r3, #0]
 802cbc0:	461a      	mov	r2, r3
 802cbc2:	4b57      	ldr	r3, [pc, #348]	; (802cd20 <PHan_HanFontLoad+0x1dc>)
 802cbc4:	5c9a      	ldrb	r2, [r3, r2]
 802cbc6:	4b57      	ldr	r3, [pc, #348]	; (802cd24 <PHan_HanFontLoad+0x1e0>)
 802cbc8:	701a      	strb	r2, [r3, #0]
	uJongsung	=	JonIdxTbl[_uJongsung];			//	Jongsung index
 802cbca:	4b52      	ldr	r3, [pc, #328]	; (802cd14 <PHan_HanFontLoad+0x1d0>)
 802cbcc:	781b      	ldrb	r3, [r3, #0]
 802cbce:	461a      	mov	r2, r3
 802cbd0:	4b55      	ldr	r3, [pc, #340]	; (802cd28 <PHan_HanFontLoad+0x1e4>)
 802cbd2:	5c9a      	ldrb	r2, [r3, r2]
 802cbd4:	4b55      	ldr	r3, [pc, #340]	; (802cd2c <PHan_HanFontLoad+0x1e8>)
 802cbd6:	701a      	strb	r2, [r3, #0]

	//decide a character type (몇번째 벌을 사용할지 결정)
	uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung] : ChoTypeCaseJongNo[uJoongsung];
 802cbd8:	4b54      	ldr	r3, [pc, #336]	; (802cd2c <PHan_HanFontLoad+0x1e8>)
 802cbda:	781b      	ldrb	r3, [r3, #0]
 802cbdc:	2b00      	cmp	r3, #0
 802cbde:	d005      	beq.n	802cbec <PHan_HanFontLoad+0xa8>
 802cbe0:	4b50      	ldr	r3, [pc, #320]	; (802cd24 <PHan_HanFontLoad+0x1e0>)
 802cbe2:	781b      	ldrb	r3, [r3, #0]
 802cbe4:	461a      	mov	r2, r3
 802cbe6:	4b52      	ldr	r3, [pc, #328]	; (802cd30 <PHan_HanFontLoad+0x1ec>)
 802cbe8:	5c9b      	ldrb	r3, [r3, r2]
 802cbea:	e004      	b.n	802cbf6 <PHan_HanFontLoad+0xb2>
 802cbec:	4b4d      	ldr	r3, [pc, #308]	; (802cd24 <PHan_HanFontLoad+0x1e0>)
 802cbee:	781b      	ldrb	r3, [r3, #0]
 802cbf0:	461a      	mov	r2, r3
 802cbf2:	4b50      	ldr	r3, [pc, #320]	; (802cd34 <PHan_HanFontLoad+0x1f0>)
 802cbf4:	5c9b      	ldrb	r3, [r3, r2]
 802cbf6:	4a50      	ldr	r2, [pc, #320]	; (802cd38 <PHan_HanFontLoad+0x1f4>)
 802cbf8:	7013      	strb	r3, [r2, #0]
	//'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
	uJooType	=	( ( uChosung == 0 || uChosung == 1 || uChosung == 16 ) ? 0 : 1 ) + ( uJongsung ? 2 : 0 );
 802cbfa:	4b48      	ldr	r3, [pc, #288]	; (802cd1c <PHan_HanFontLoad+0x1d8>)
 802cbfc:	781b      	ldrb	r3, [r3, #0]
 802cbfe:	2b00      	cmp	r3, #0
 802cc00:	d009      	beq.n	802cc16 <PHan_HanFontLoad+0xd2>
 802cc02:	4b46      	ldr	r3, [pc, #280]	; (802cd1c <PHan_HanFontLoad+0x1d8>)
 802cc04:	781b      	ldrb	r3, [r3, #0]
 802cc06:	2b01      	cmp	r3, #1
 802cc08:	d005      	beq.n	802cc16 <PHan_HanFontLoad+0xd2>
 802cc0a:	4b44      	ldr	r3, [pc, #272]	; (802cd1c <PHan_HanFontLoad+0x1d8>)
 802cc0c:	781b      	ldrb	r3, [r3, #0]
 802cc0e:	2b10      	cmp	r3, #16
 802cc10:	d001      	beq.n	802cc16 <PHan_HanFontLoad+0xd2>
 802cc12:	2301      	movs	r3, #1
 802cc14:	e000      	b.n	802cc18 <PHan_HanFontLoad+0xd4>
 802cc16:	2300      	movs	r3, #0
 802cc18:	b2db      	uxtb	r3, r3
 802cc1a:	4a44      	ldr	r2, [pc, #272]	; (802cd2c <PHan_HanFontLoad+0x1e8>)
 802cc1c:	7812      	ldrb	r2, [r2, #0]
 802cc1e:	2a00      	cmp	r2, #0
 802cc20:	d001      	beq.n	802cc26 <PHan_HanFontLoad+0xe2>
 802cc22:	2202      	movs	r2, #2
 802cc24:	e000      	b.n	802cc28 <PHan_HanFontLoad+0xe4>
 802cc26:	2200      	movs	r2, #0
 802cc28:	4413      	add	r3, r2
 802cc2a:	b2da      	uxtb	r2, r3
 802cc2c:	4b43      	ldr	r3, [pc, #268]	; (802cd3c <PHan_HanFontLoad+0x1f8>)
 802cc2e:	701a      	strb	r2, [r3, #0]
	uJonType	=	JonType[uJoongsung];
 802cc30:	4b3c      	ldr	r3, [pc, #240]	; (802cd24 <PHan_HanFontLoad+0x1e0>)
 802cc32:	781b      	ldrb	r3, [r3, #0]
 802cc34:	461a      	mov	r2, r3
 802cc36:	4b42      	ldr	r3, [pc, #264]	; (802cd40 <PHan_HanFontLoad+0x1fc>)
 802cc38:	5c9a      	ldrb	r2, [r3, r2]
 802cc3a:	4b42      	ldr	r3, [pc, #264]	; (802cd44 <PHan_HanFontLoad+0x200>)
 802cc3c:	701a      	strb	r2, [r3, #0]
	//		HanCode[0], HanCode[1], HanCode[0], HanCode[1],
	//		wHanCode, 
	//		_uChosung, _uJoongsung, _uJongsung,
	//		uChosung, uJoongsung, uJongsung );

	for ( i = 0; i < 32; i++ )
 802cc3e:	2300      	movs	r3, #0
 802cc40:	73fb      	strb	r3, [r7, #15]
 802cc42:	e033      	b.n	802ccac <PHan_HanFontLoad+0x168>
	{
		FontPtr->FontBuffer[i] = K_font[uChoType * 20 + uChosung][i];
 802cc44:	4b3c      	ldr	r3, [pc, #240]	; (802cd38 <PHan_HanFontLoad+0x1f4>)
 802cc46:	781b      	ldrb	r3, [r3, #0]
 802cc48:	461a      	mov	r2, r3
 802cc4a:	4613      	mov	r3, r2
 802cc4c:	009b      	lsls	r3, r3, #2
 802cc4e:	4413      	add	r3, r2
 802cc50:	009b      	lsls	r3, r3, #2
 802cc52:	461a      	mov	r2, r3
 802cc54:	4b31      	ldr	r3, [pc, #196]	; (802cd1c <PHan_HanFontLoad+0x1d8>)
 802cc56:	781b      	ldrb	r3, [r3, #0]
 802cc58:	18d1      	adds	r1, r2, r3
 802cc5a:	7bfa      	ldrb	r2, [r7, #15]
 802cc5c:	7bfb      	ldrb	r3, [r7, #15]
 802cc5e:	483a      	ldr	r0, [pc, #232]	; (802cd48 <PHan_HanFontLoad+0x204>)
 802cc60:	0149      	lsls	r1, r1, #5
 802cc62:	4401      	add	r1, r0
 802cc64:	440a      	add	r2, r1
 802cc66:	7811      	ldrb	r1, [r2, #0]
 802cc68:	683a      	ldr	r2, [r7, #0]
 802cc6a:	4413      	add	r3, r2
 802cc6c:	460a      	mov	r2, r1
 802cc6e:	711a      	strb	r2, [r3, #4]
		FontPtr->FontBuffer[i] |= K_font[160 + uJooType * 22 + uJoongsung][i];
 802cc70:	7bfb      	ldrb	r3, [r7, #15]
 802cc72:	683a      	ldr	r2, [r7, #0]
 802cc74:	4413      	add	r3, r2
 802cc76:	7919      	ldrb	r1, [r3, #4]
 802cc78:	4b30      	ldr	r3, [pc, #192]	; (802cd3c <PHan_HanFontLoad+0x1f8>)
 802cc7a:	781b      	ldrb	r3, [r3, #0]
 802cc7c:	461a      	mov	r2, r3
 802cc7e:	2316      	movs	r3, #22
 802cc80:	fb02 f303 	mul.w	r3, r2, r3
 802cc84:	33a0      	adds	r3, #160	; 0xa0
 802cc86:	4a27      	ldr	r2, [pc, #156]	; (802cd24 <PHan_HanFontLoad+0x1e0>)
 802cc88:	7812      	ldrb	r2, [r2, #0]
 802cc8a:	441a      	add	r2, r3
 802cc8c:	7bfb      	ldrb	r3, [r7, #15]
 802cc8e:	482e      	ldr	r0, [pc, #184]	; (802cd48 <PHan_HanFontLoad+0x204>)
 802cc90:	0152      	lsls	r2, r2, #5
 802cc92:	4402      	add	r2, r0
 802cc94:	4413      	add	r3, r2
 802cc96:	781a      	ldrb	r2, [r3, #0]
 802cc98:	7bfb      	ldrb	r3, [r7, #15]
 802cc9a:	430a      	orrs	r2, r1
 802cc9c:	b2d1      	uxtb	r1, r2
 802cc9e:	683a      	ldr	r2, [r7, #0]
 802cca0:	4413      	add	r3, r2
 802cca2:	460a      	mov	r2, r1
 802cca4:	711a      	strb	r2, [r3, #4]
	for ( i = 0; i < 32; i++ )
 802cca6:	7bfb      	ldrb	r3, [r7, #15]
 802cca8:	3301      	adds	r3, #1
 802ccaa:	73fb      	strb	r3, [r7, #15]
 802ccac:	7bfb      	ldrb	r3, [r7, #15]
 802ccae:	2b1f      	cmp	r3, #31
 802ccb0:	d9c8      	bls.n	802cc44 <PHan_HanFontLoad+0x100>
	}

	//combine Jongsung
	if ( uJongsung )
 802ccb2:	4b1e      	ldr	r3, [pc, #120]	; (802cd2c <PHan_HanFontLoad+0x1e8>)
 802ccb4:	781b      	ldrb	r3, [r3, #0]
 802ccb6:	2b00      	cmp	r3, #0
 802ccb8:	d024      	beq.n	802cd04 <PHan_HanFontLoad+0x1c0>
	{
		for ( i = 0; i < 32; i++ )	FontPtr->FontBuffer[i] |= K_font[248 + uJonType * 28 + uJongsung][i];
 802ccba:	2300      	movs	r3, #0
 802ccbc:	73fb      	strb	r3, [r7, #15]
 802ccbe:	e01e      	b.n	802ccfe <PHan_HanFontLoad+0x1ba>
 802ccc0:	7bfb      	ldrb	r3, [r7, #15]
 802ccc2:	683a      	ldr	r2, [r7, #0]
 802ccc4:	4413      	add	r3, r2
 802ccc6:	7919      	ldrb	r1, [r3, #4]
 802ccc8:	4b1e      	ldr	r3, [pc, #120]	; (802cd44 <PHan_HanFontLoad+0x200>)
 802ccca:	781b      	ldrb	r3, [r3, #0]
 802cccc:	461a      	mov	r2, r3
 802ccce:	4613      	mov	r3, r2
 802ccd0:	00db      	lsls	r3, r3, #3
 802ccd2:	1a9b      	subs	r3, r3, r2
 802ccd4:	009b      	lsls	r3, r3, #2
 802ccd6:	33f8      	adds	r3, #248	; 0xf8
 802ccd8:	4a14      	ldr	r2, [pc, #80]	; (802cd2c <PHan_HanFontLoad+0x1e8>)
 802ccda:	7812      	ldrb	r2, [r2, #0]
 802ccdc:	441a      	add	r2, r3
 802ccde:	7bfb      	ldrb	r3, [r7, #15]
 802cce0:	4819      	ldr	r0, [pc, #100]	; (802cd48 <PHan_HanFontLoad+0x204>)
 802cce2:	0152      	lsls	r2, r2, #5
 802cce4:	4402      	add	r2, r0
 802cce6:	4413      	add	r3, r2
 802cce8:	781a      	ldrb	r2, [r3, #0]
 802ccea:	7bfb      	ldrb	r3, [r7, #15]
 802ccec:	430a      	orrs	r2, r1
 802ccee:	b2d1      	uxtb	r1, r2
 802ccf0:	683a      	ldr	r2, [r7, #0]
 802ccf2:	4413      	add	r3, r2
 802ccf4:	460a      	mov	r2, r1
 802ccf6:	711a      	strb	r2, [r3, #4]
 802ccf8:	7bfb      	ldrb	r3, [r7, #15]
 802ccfa:	3301      	adds	r3, #1
 802ccfc:	73fb      	strb	r3, [r7, #15]
 802ccfe:	7bfb      	ldrb	r3, [r7, #15]
 802cd00:	2b1f      	cmp	r3, #31
 802cd02:	d9dd      	bls.n	802ccc0 <PHan_HanFontLoad+0x17c>
	}
}
 802cd04:	bf00      	nop
 802cd06:	3710      	adds	r7, #16
 802cd08:	46bd      	mov	sp, r7
 802cd0a:	bd80      	pop	{r7, pc}
 802cd0c:	200012bc 	.word	0x200012bc
 802cd10:	200012bd 	.word	0x200012bd
 802cd14:	200012be 	.word	0x200012be
 802cd18:	0803ba0c 	.word	0x0803ba0c
 802cd1c:	200012bf 	.word	0x200012bf
 802cd20:	0803ba2c 	.word	0x0803ba2c
 802cd24:	200012c0 	.word	0x200012c0
 802cd28:	0803ba4c 	.word	0x0803ba4c
 802cd2c:	200012c1 	.word	0x200012c1
 802cd30:	0803ba84 	.word	0x0803ba84
 802cd34:	0803ba6c 	.word	0x0803ba6c
 802cd38:	200012c2 	.word	0x200012c2
 802cd3c:	200012c3 	.word	0x200012c3
 802cd40:	0803ba9c 	.word	0x0803ba9c
 802cd44:	200012c4 	.word	0x200012c4
 802cd48:	0803cd10 	.word	0x0803cd10

0802cd4c <PHan_EngFontLoad>:
//========================================================================

//========================================================================
void PHan_EngFontLoad( const uint8_t *HanCode, PHAN_FONT_OBJ *FontPtr ) 
//========================================================================
{
 802cd4c:	b480      	push	{r7}
 802cd4e:	b085      	sub	sp, #20
 802cd50:	af00      	add	r7, sp, #0
 802cd52:	6078      	str	r0, [r7, #4]
 802cd54:	6039      	str	r1, [r7, #0]
	uint16_t i;
	char EngCode;

	FontPtr->Code_Type = PHAN_ENG_CODE;
 802cd56:	683b      	ldr	r3, [r7, #0]
 802cd58:	2202      	movs	r2, #2
 802cd5a:	70da      	strb	r2, [r3, #3]
	FontPtr->Size_Char = 1;
 802cd5c:	683b      	ldr	r3, [r7, #0]
 802cd5e:	2201      	movs	r2, #1
 802cd60:	709a      	strb	r2, [r3, #2]

	EngCode = *HanCode;
 802cd62:	687b      	ldr	r3, [r7, #4]
 802cd64:	781b      	ldrb	r3, [r3, #0]
 802cd66:	737b      	strb	r3, [r7, #13]

	EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 802cd68:	7b7b      	ldrb	r3, [r7, #13]
 802cd6a:	3b20      	subs	r3, #32
 802cd6c:	737b      	strb	r3, [r7, #13]

	for ( i = 0 ; i < 16 ; i++ )
 802cd6e:	2300      	movs	r3, #0
 802cd70:	81fb      	strh	r3, [r7, #14]
 802cd72:	e00f      	b.n	802cd94 <PHan_EngFontLoad+0x48>
	{
		 FontPtr->FontBuffer[ i ] = wEngFon[EngCode][i];		
 802cd74:	7b7a      	ldrb	r2, [r7, #13]
 802cd76:	89fb      	ldrh	r3, [r7, #14]
 802cd78:	490b      	ldr	r1, [pc, #44]	; (802cda8 <PHan_EngFontLoad+0x5c>)
 802cd7a:	0112      	lsls	r2, r2, #4
 802cd7c:	4413      	add	r3, r2
 802cd7e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 802cd82:	89fb      	ldrh	r3, [r7, #14]
 802cd84:	b2d1      	uxtb	r1, r2
 802cd86:	683a      	ldr	r2, [r7, #0]
 802cd88:	4413      	add	r3, r2
 802cd8a:	460a      	mov	r2, r1
 802cd8c:	711a      	strb	r2, [r3, #4]
	for ( i = 0 ; i < 16 ; i++ )
 802cd8e:	89fb      	ldrh	r3, [r7, #14]
 802cd90:	3301      	adds	r3, #1
 802cd92:	81fb      	strh	r3, [r7, #14]
 802cd94:	89fb      	ldrh	r3, [r7, #14]
 802cd96:	2b0f      	cmp	r3, #15
 802cd98:	d9ec      	bls.n	802cd74 <PHan_EngFontLoad+0x28>
	}
}
 802cd9a:	bf00      	nop
 802cd9c:	bf00      	nop
 802cd9e:	3714      	adds	r7, #20
 802cda0:	46bd      	mov	sp, r7
 802cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cda6:	4770      	bx	lr
 802cda8:	0803fa10 	.word	0x0803fa10

0802cdac <si446x_reset>:
 * releasing it.  After this function @ref si446x_boot should be called.  You
 * can check if POR has completed by waiting 4 ms or by polling GPIO 0, 2, or 3.
 * When these GPIOs are high, it is safe to call @ref si446x_boot.
 */
void si446x_reset(void)
{
 802cdac:	b580      	push	{r7, lr}
 802cdae:	af00      	add	r7, sp, #0
    U8 loopCount;

    /* Put radio in shutdown, wait then release */
    radio_hal_AssertShutdown();
 802cdb0:	f000 fc3c 	bl	802d62c <radio_hal_AssertShutdown>
    //! @todo this needs to be a better delay function.
//    for (loopCount = 255; loopCount != 0; loopCount--);
    HAL_Delay(20);
 802cdb4:	2014      	movs	r0, #20
 802cdb6:	f7f4 fee3 	bl	8021b80 <HAL_Delay>
    radio_hal_DeassertShutdown();
 802cdba:	f000 fc4d 	bl	802d658 <radio_hal_DeassertShutdown>
//    for (loopCount = 255; loopCount != 0; loopCount--);
    HAL_Delay(5);
 802cdbe:	2005      	movs	r0, #5
 802cdc0:	f7f4 fede 	bl	8021b80 <HAL_Delay>
    radio_comm_ClearCTS();
 802cdc4:	f000 fc0e 	bl	802d5e4 <radio_comm_ClearCTS>
}
 802cdc8:	bf00      	nop
 802cdca:	bd80      	pop	{r7, pc}

0802cdcc <si446x_configuration_init>:
/*!
 * This function is used to load all properties and commands with a list of NULL terminated commands.
 * Before this function @si446x_reset should be called.
 */
U8 si446x_configuration_init(const U8* pSetPropCmd)
{
 802cdcc:	b580      	push	{r7, lr}
 802cdce:	b084      	sub	sp, #16
 802cdd0:	af00      	add	r7, sp, #0
 802cdd2:	6078      	str	r0, [r7, #4]
  SEGMENT_VARIABLE(col, U8, SEG_DATA);
  SEGMENT_VARIABLE(numOfBytes, U8, SEG_DATA);

  /* While cycle as far as the pointer points to a command */
  while (*pSetPropCmd != 0x00)
 802cdd4:	e038      	b.n	802ce48 <si446x_configuration_init+0x7c>
    /* Commands structure in the array:
     * --------------------------------
     * LEN | <LEN length of data>
     */

    numOfBytes = *pSetPropCmd++;
 802cdd6:	687b      	ldr	r3, [r7, #4]
 802cdd8:	1c5a      	adds	r2, r3, #1
 802cdda:	607a      	str	r2, [r7, #4]
 802cddc:	781b      	ldrb	r3, [r3, #0]
 802cdde:	73bb      	strb	r3, [r7, #14]

    if (numOfBytes > 16u)
 802cde0:	7bbb      	ldrb	r3, [r7, #14]
 802cde2:	2b10      	cmp	r3, #16
 802cde4:	d901      	bls.n	802cdea <si446x_configuration_init+0x1e>
    {
      /* Number of command bytes exceeds maximal allowable length */
      return SI446X_COMMAND_ERROR;
 802cde6:	2304      	movs	r3, #4
 802cde8:	e033      	b.n	802ce52 <si446x_configuration_init+0x86>
    }

    for (col = 0u; col < numOfBytes; col++)
 802cdea:	2300      	movs	r3, #0
 802cdec:	73fb      	strb	r3, [r7, #15]
 802cdee:	e00a      	b.n	802ce06 <si446x_configuration_init+0x3a>
    {
      Pro2Cmd[col] = *pSetPropCmd;
 802cdf0:	7bfb      	ldrb	r3, [r7, #15]
 802cdf2:	687a      	ldr	r2, [r7, #4]
 802cdf4:	7811      	ldrb	r1, [r2, #0]
 802cdf6:	4a19      	ldr	r2, [pc, #100]	; (802ce5c <si446x_configuration_init+0x90>)
 802cdf8:	54d1      	strb	r1, [r2, r3]
      pSetPropCmd++;
 802cdfa:	687b      	ldr	r3, [r7, #4]
 802cdfc:	3301      	adds	r3, #1
 802cdfe:	607b      	str	r3, [r7, #4]
    for (col = 0u; col < numOfBytes; col++)
 802ce00:	7bfb      	ldrb	r3, [r7, #15]
 802ce02:	3301      	adds	r3, #1
 802ce04:	73fb      	strb	r3, [r7, #15]
 802ce06:	7bfa      	ldrb	r2, [r7, #15]
 802ce08:	7bbb      	ldrb	r3, [r7, #14]
 802ce0a:	429a      	cmp	r2, r3
 802ce0c:	d3f0      	bcc.n	802cdf0 <si446x_configuration_init+0x24>
    }

    if (radio_comm_SendCmdGetResp(numOfBytes, Pro2Cmd, 0, 0) != 0xFF)
 802ce0e:	7bb8      	ldrb	r0, [r7, #14]
 802ce10:	2300      	movs	r3, #0
 802ce12:	2200      	movs	r2, #0
 802ce14:	4911      	ldr	r1, [pc, #68]	; (802ce5c <si446x_configuration_init+0x90>)
 802ce16:	f000 fbf1 	bl	802d5fc <radio_comm_SendCmdGetResp>
 802ce1a:	4603      	mov	r3, r0
 802ce1c:	2bff      	cmp	r3, #255	; 0xff
 802ce1e:	d001      	beq.n	802ce24 <si446x_configuration_init+0x58>
    {
      /* Timeout occured */
      return SI446X_CTS_TIMEOUT;
 802ce20:	2302      	movs	r3, #2
 802ce22:	e016      	b.n	802ce52 <si446x_configuration_init+0x86>
    }

    if (radio_hal_NirqLevel() == 0)
 802ce24:	f000 fc42 	bl	802d6ac <radio_hal_NirqLevel>
 802ce28:	4603      	mov	r3, r0
 802ce2a:	2b00      	cmp	r3, #0
 802ce2c:	d10c      	bne.n	802ce48 <si446x_configuration_init+0x7c>
    {
      /* Get and clear all interrupts.  An error has occured... */
      si446x_get_int_status(0, 0, 0);
 802ce2e:	2200      	movs	r2, #0
 802ce30:	2100      	movs	r1, #0
 802ce32:	2000      	movs	r0, #0
 802ce34:	f000 f8ac 	bl	802cf90 <si446x_get_int_status>
      if (Si446xCmd.GET_INT_STATUS.CHIP_PEND & SI446X_CMD_GET_CHIP_STATUS_REP_CHIP_PEND_CMD_ERROR_PEND_MASK)
 802ce38:	4b09      	ldr	r3, [pc, #36]	; (802ce60 <si446x_configuration_init+0x94>)
 802ce3a:	799b      	ldrb	r3, [r3, #6]
 802ce3c:	f003 0308 	and.w	r3, r3, #8
 802ce40:	2b00      	cmp	r3, #0
 802ce42:	d001      	beq.n	802ce48 <si446x_configuration_init+0x7c>
      {
        return SI446X_COMMAND_ERROR;
 802ce44:	2304      	movs	r3, #4
 802ce46:	e004      	b.n	802ce52 <si446x_configuration_init+0x86>
  while (*pSetPropCmd != 0x00)
 802ce48:	687b      	ldr	r3, [r7, #4]
 802ce4a:	781b      	ldrb	r3, [r3, #0]
 802ce4c:	2b00      	cmp	r3, #0
 802ce4e:	d1c2      	bne.n	802cdd6 <si446x_configuration_init+0xa>
      }
    }
  }

  return SI446X_SUCCESS;
 802ce50:	2300      	movs	r3, #0
}
 802ce52:	4618      	mov	r0, r3
 802ce54:	3710      	adds	r7, #16
 802ce56:	46bd      	mov	sp, r7
 802ce58:	bd80      	pop	{r7, pc}
 802ce5a:	bf00      	nop
 802ce5c:	200012dc 	.word	0x200012dc
 802ce60:	200012c8 	.word	0x200012c8

0802ce64 <si446x_part_info>:

/*! This function sends the PART_INFO command to the radio and receives the answer
 *  into @Si446xCmd union.
 */
void si446x_part_info(void)
{
 802ce64:	b580      	push	{r7, lr}
 802ce66:	af00      	add	r7, sp, #0
    Pro2Cmd[0] = SI446X_CMD_ID_PART_INFO;
 802ce68:	4b1a      	ldr	r3, [pc, #104]	; (802ced4 <si446x_part_info+0x70>)
 802ce6a:	2201      	movs	r2, #1
 802ce6c:	701a      	strb	r2, [r3, #0]

    radio_comm_SendCmdGetResp( SI446X_CMD_ARG_COUNT_PART_INFO,
 802ce6e:	4b19      	ldr	r3, [pc, #100]	; (802ced4 <si446x_part_info+0x70>)
 802ce70:	2208      	movs	r2, #8
 802ce72:	4918      	ldr	r1, [pc, #96]	; (802ced4 <si446x_part_info+0x70>)
 802ce74:	2001      	movs	r0, #1
 802ce76:	f000 fbc1 	bl	802d5fc <radio_comm_SendCmdGetResp>
                              Pro2Cmd,
                              SI446X_CMD_REPLY_COUNT_PART_INFO,
                              Pro2Cmd );

    Si446xCmd.PART_INFO.CHIPREV         = Pro2Cmd[0];
 802ce7a:	4b16      	ldr	r3, [pc, #88]	; (802ced4 <si446x_part_info+0x70>)
 802ce7c:	781a      	ldrb	r2, [r3, #0]
 802ce7e:	4b16      	ldr	r3, [pc, #88]	; (802ced8 <si446x_part_info+0x74>)
 802ce80:	701a      	strb	r2, [r3, #0]
    Si446xCmd.PART_INFO.PART            = ((U16)Pro2Cmd[1] << 8) & 0xFF00;
 802ce82:	4b14      	ldr	r3, [pc, #80]	; (802ced4 <si446x_part_info+0x70>)
 802ce84:	785b      	ldrb	r3, [r3, #1]
 802ce86:	021b      	lsls	r3, r3, #8
 802ce88:	b29b      	uxth	r3, r3
 802ce8a:	4a13      	ldr	r2, [pc, #76]	; (802ced8 <si446x_part_info+0x74>)
 802ce8c:	6053      	str	r3, [r2, #4]
    Si446xCmd.PART_INFO.PART           |= (U16)Pro2Cmd[2] & 0x00FF;
 802ce8e:	4b12      	ldr	r3, [pc, #72]	; (802ced8 <si446x_part_info+0x74>)
 802ce90:	685b      	ldr	r3, [r3, #4]
 802ce92:	4a10      	ldr	r2, [pc, #64]	; (802ced4 <si446x_part_info+0x70>)
 802ce94:	7892      	ldrb	r2, [r2, #2]
 802ce96:	4313      	orrs	r3, r2
 802ce98:	4a0f      	ldr	r2, [pc, #60]	; (802ced8 <si446x_part_info+0x74>)
 802ce9a:	6053      	str	r3, [r2, #4]
    Si446xCmd.PART_INFO.PBUILD          = Pro2Cmd[3];
 802ce9c:	4b0d      	ldr	r3, [pc, #52]	; (802ced4 <si446x_part_info+0x70>)
 802ce9e:	78da      	ldrb	r2, [r3, #3]
 802cea0:	4b0d      	ldr	r3, [pc, #52]	; (802ced8 <si446x_part_info+0x74>)
 802cea2:	721a      	strb	r2, [r3, #8]
    Si446xCmd.PART_INFO.ID              = ((U16)Pro2Cmd[4] << 8) & 0xFF00;
 802cea4:	4b0b      	ldr	r3, [pc, #44]	; (802ced4 <si446x_part_info+0x70>)
 802cea6:	791b      	ldrb	r3, [r3, #4]
 802cea8:	021b      	lsls	r3, r3, #8
 802ceaa:	b29b      	uxth	r3, r3
 802ceac:	4a0a      	ldr	r2, [pc, #40]	; (802ced8 <si446x_part_info+0x74>)
 802ceae:	60d3      	str	r3, [r2, #12]
    Si446xCmd.PART_INFO.ID             |= (U16)Pro2Cmd[5] & 0x00FF;
 802ceb0:	4b09      	ldr	r3, [pc, #36]	; (802ced8 <si446x_part_info+0x74>)
 802ceb2:	68db      	ldr	r3, [r3, #12]
 802ceb4:	4a07      	ldr	r2, [pc, #28]	; (802ced4 <si446x_part_info+0x70>)
 802ceb6:	7952      	ldrb	r2, [r2, #5]
 802ceb8:	4313      	orrs	r3, r2
 802ceba:	4a07      	ldr	r2, [pc, #28]	; (802ced8 <si446x_part_info+0x74>)
 802cebc:	60d3      	str	r3, [r2, #12]
    Si446xCmd.PART_INFO.CUSTOMER        = Pro2Cmd[6];
 802cebe:	4b05      	ldr	r3, [pc, #20]	; (802ced4 <si446x_part_info+0x70>)
 802cec0:	799a      	ldrb	r2, [r3, #6]
 802cec2:	4b05      	ldr	r3, [pc, #20]	; (802ced8 <si446x_part_info+0x74>)
 802cec4:	741a      	strb	r2, [r3, #16]
    Si446xCmd.PART_INFO.ROMID           = Pro2Cmd[7];
 802cec6:	4b03      	ldr	r3, [pc, #12]	; (802ced4 <si446x_part_info+0x70>)
 802cec8:	79da      	ldrb	r2, [r3, #7]
 802ceca:	4b03      	ldr	r3, [pc, #12]	; (802ced8 <si446x_part_info+0x74>)
 802cecc:	745a      	strb	r2, [r3, #17]
}
 802cece:	bf00      	nop
 802ced0:	bd80      	pop	{r7, pc}
 802ced2:	bf00      	nop
 802ced4:	200012dc 	.word	0x200012dc
 802ced8:	200012c8 	.word	0x200012c8

0802cedc <si446x_start_tx>:
 * @param CHANNEL   Channel number.
 * @param CONDITION Start TX condition.
 * @param TX_LEN    Payload length (exclude the PH generated CRC).
 */
void si446x_start_tx(U8 CHANNEL, U8 CONDITION, U16 TX_LEN)
{
 802cedc:	b580      	push	{r7, lr}
 802cede:	b082      	sub	sp, #8
 802cee0:	af00      	add	r7, sp, #0
 802cee2:	4603      	mov	r3, r0
 802cee4:	603a      	str	r2, [r7, #0]
 802cee6:	71fb      	strb	r3, [r7, #7]
 802cee8:	460b      	mov	r3, r1
 802ceea:	71bb      	strb	r3, [r7, #6]
    Pro2Cmd[0] = SI446X_CMD_ID_START_TX;
 802ceec:	4b0f      	ldr	r3, [pc, #60]	; (802cf2c <si446x_start_tx+0x50>)
 802ceee:	2231      	movs	r2, #49	; 0x31
 802cef0:	701a      	strb	r2, [r3, #0]
    Pro2Cmd[1] = CHANNEL;
 802cef2:	4a0e      	ldr	r2, [pc, #56]	; (802cf2c <si446x_start_tx+0x50>)
 802cef4:	79fb      	ldrb	r3, [r7, #7]
 802cef6:	7053      	strb	r3, [r2, #1]
    Pro2Cmd[2] = CONDITION;
 802cef8:	4a0c      	ldr	r2, [pc, #48]	; (802cf2c <si446x_start_tx+0x50>)
 802cefa:	79bb      	ldrb	r3, [r7, #6]
 802cefc:	7093      	strb	r3, [r2, #2]
    Pro2Cmd[3] = (U8)(TX_LEN >> 8);
 802cefe:	683b      	ldr	r3, [r7, #0]
 802cf00:	0a1b      	lsrs	r3, r3, #8
 802cf02:	b2da      	uxtb	r2, r3
 802cf04:	4b09      	ldr	r3, [pc, #36]	; (802cf2c <si446x_start_tx+0x50>)
 802cf06:	70da      	strb	r2, [r3, #3]
    Pro2Cmd[4] = (U8)(TX_LEN);
 802cf08:	683b      	ldr	r3, [r7, #0]
 802cf0a:	b2da      	uxtb	r2, r3
 802cf0c:	4b07      	ldr	r3, [pc, #28]	; (802cf2c <si446x_start_tx+0x50>)
 802cf0e:	711a      	strb	r2, [r3, #4]
    Pro2Cmd[5] = 0x00;
 802cf10:	4b06      	ldr	r3, [pc, #24]	; (802cf2c <si446x_start_tx+0x50>)
 802cf12:	2200      	movs	r2, #0
 802cf14:	715a      	strb	r2, [r3, #5]

    // Don't repeat the packet, 
    // ie. transmit the packet only once
    Pro2Cmd[6] = 0x00;
 802cf16:	4b05      	ldr	r3, [pc, #20]	; (802cf2c <si446x_start_tx+0x50>)
 802cf18:	2200      	movs	r2, #0
 802cf1a:	719a      	strb	r2, [r3, #6]

    radio_comm_SendCmd( SI446X_CMD_ARG_COUNT_START_TX, Pro2Cmd );
 802cf1c:	4903      	ldr	r1, [pc, #12]	; (802cf2c <si446x_start_tx+0x50>)
 802cf1e:	2007      	movs	r0, #7
 802cf20:	f000 fae2 	bl	802d4e8 <radio_comm_SendCmd>
}
 802cf24:	bf00      	nop
 802cf26:	3708      	adds	r7, #8
 802cf28:	46bd      	mov	sp, r7
 802cf2a:	bd80      	pop	{r7, pc}
 802cf2c:	200012dc 	.word	0x200012dc

0802cf30 <si446x_start_rx>:
 * @param NEXT_STATE1 Next state when Preamble Timeout occurs.
 * @param NEXT_STATE2 Next state when a valid packet received.
 * @param NEXT_STATE3 Next state when invalid packet received (e.g. CRC error).
 */
void si446x_start_rx(U8 CHANNEL, U8 CONDITION, U16 RX_LEN, U8 NEXT_STATE1, U8 NEXT_STATE2, U8 NEXT_STATE3)
{
 802cf30:	b580      	push	{r7, lr}
 802cf32:	b082      	sub	sp, #8
 802cf34:	af00      	add	r7, sp, #0
 802cf36:	603a      	str	r2, [r7, #0]
 802cf38:	461a      	mov	r2, r3
 802cf3a:	4603      	mov	r3, r0
 802cf3c:	71fb      	strb	r3, [r7, #7]
 802cf3e:	460b      	mov	r3, r1
 802cf40:	71bb      	strb	r3, [r7, #6]
 802cf42:	4613      	mov	r3, r2
 802cf44:	717b      	strb	r3, [r7, #5]
    Pro2Cmd[0] = SI446X_CMD_ID_START_RX;
 802cf46:	4b11      	ldr	r3, [pc, #68]	; (802cf8c <si446x_start_rx+0x5c>)
 802cf48:	2232      	movs	r2, #50	; 0x32
 802cf4a:	701a      	strb	r2, [r3, #0]
    Pro2Cmd[1] = CHANNEL;
 802cf4c:	4a0f      	ldr	r2, [pc, #60]	; (802cf8c <si446x_start_rx+0x5c>)
 802cf4e:	79fb      	ldrb	r3, [r7, #7]
 802cf50:	7053      	strb	r3, [r2, #1]
    Pro2Cmd[2] = CONDITION;
 802cf52:	4a0e      	ldr	r2, [pc, #56]	; (802cf8c <si446x_start_rx+0x5c>)
 802cf54:	79bb      	ldrb	r3, [r7, #6]
 802cf56:	7093      	strb	r3, [r2, #2]
    Pro2Cmd[3] = (U8)(RX_LEN >> 8);
 802cf58:	683b      	ldr	r3, [r7, #0]
 802cf5a:	0a1b      	lsrs	r3, r3, #8
 802cf5c:	b2da      	uxtb	r2, r3
 802cf5e:	4b0b      	ldr	r3, [pc, #44]	; (802cf8c <si446x_start_rx+0x5c>)
 802cf60:	70da      	strb	r2, [r3, #3]
    Pro2Cmd[4] = (U8)(RX_LEN);
 802cf62:	683b      	ldr	r3, [r7, #0]
 802cf64:	b2da      	uxtb	r2, r3
 802cf66:	4b09      	ldr	r3, [pc, #36]	; (802cf8c <si446x_start_rx+0x5c>)
 802cf68:	711a      	strb	r2, [r3, #4]
    Pro2Cmd[5] = NEXT_STATE1;
 802cf6a:	4a08      	ldr	r2, [pc, #32]	; (802cf8c <si446x_start_rx+0x5c>)
 802cf6c:	797b      	ldrb	r3, [r7, #5]
 802cf6e:	7153      	strb	r3, [r2, #5]
    Pro2Cmd[6] = NEXT_STATE2;
 802cf70:	4a06      	ldr	r2, [pc, #24]	; (802cf8c <si446x_start_rx+0x5c>)
 802cf72:	7c3b      	ldrb	r3, [r7, #16]
 802cf74:	7193      	strb	r3, [r2, #6]
    Pro2Cmd[7] = NEXT_STATE3;
 802cf76:	4a05      	ldr	r2, [pc, #20]	; (802cf8c <si446x_start_rx+0x5c>)
 802cf78:	7d3b      	ldrb	r3, [r7, #20]
 802cf7a:	71d3      	strb	r3, [r2, #7]

    radio_comm_SendCmd( SI446X_CMD_ARG_COUNT_START_RX, Pro2Cmd );
 802cf7c:	4903      	ldr	r1, [pc, #12]	; (802cf8c <si446x_start_rx+0x5c>)
 802cf7e:	2008      	movs	r0, #8
 802cf80:	f000 fab2 	bl	802d4e8 <radio_comm_SendCmd>
}
 802cf84:	bf00      	nop
 802cf86:	3708      	adds	r7, #8
 802cf88:	46bd      	mov	sp, r7
 802cf8a:	bd80      	pop	{r7, pc}
 802cf8c:	200012dc 	.word	0x200012dc

0802cf90 <si446x_get_int_status>:
 * @param PH_CLR_PEND     Packet Handler pending flags clear.
 * @param MODEM_CLR_PEND  Modem Status pending flags clear.
 * @param CHIP_CLR_PEND   Chip State pending flags clear.
 */
void si446x_get_int_status(U8 PH_CLR_PEND, U8 MODEM_CLR_PEND, U8 CHIP_CLR_PEND)
{
 802cf90:	b580      	push	{r7, lr}
 802cf92:	b082      	sub	sp, #8
 802cf94:	af00      	add	r7, sp, #0
 802cf96:	4603      	mov	r3, r0
 802cf98:	71fb      	strb	r3, [r7, #7]
 802cf9a:	460b      	mov	r3, r1
 802cf9c:	71bb      	strb	r3, [r7, #6]
 802cf9e:	4613      	mov	r3, r2
 802cfa0:	717b      	strb	r3, [r7, #5]
    Pro2Cmd[0] = SI446X_CMD_ID_GET_INT_STATUS;
 802cfa2:	4b1b      	ldr	r3, [pc, #108]	; (802d010 <si446x_get_int_status+0x80>)
 802cfa4:	2220      	movs	r2, #32
 802cfa6:	701a      	strb	r2, [r3, #0]
    Pro2Cmd[1] = PH_CLR_PEND;
 802cfa8:	4a19      	ldr	r2, [pc, #100]	; (802d010 <si446x_get_int_status+0x80>)
 802cfaa:	79fb      	ldrb	r3, [r7, #7]
 802cfac:	7053      	strb	r3, [r2, #1]
    Pro2Cmd[2] = MODEM_CLR_PEND;
 802cfae:	4a18      	ldr	r2, [pc, #96]	; (802d010 <si446x_get_int_status+0x80>)
 802cfb0:	79bb      	ldrb	r3, [r7, #6]
 802cfb2:	7093      	strb	r3, [r2, #2]
    Pro2Cmd[3] = CHIP_CLR_PEND;
 802cfb4:	4a16      	ldr	r2, [pc, #88]	; (802d010 <si446x_get_int_status+0x80>)
 802cfb6:	797b      	ldrb	r3, [r7, #5]
 802cfb8:	70d3      	strb	r3, [r2, #3]

    radio_comm_SendCmdGetResp( SI446X_CMD_ARG_COUNT_GET_INT_STATUS,
 802cfba:	4b15      	ldr	r3, [pc, #84]	; (802d010 <si446x_get_int_status+0x80>)
 802cfbc:	2208      	movs	r2, #8
 802cfbe:	4914      	ldr	r1, [pc, #80]	; (802d010 <si446x_get_int_status+0x80>)
 802cfc0:	2004      	movs	r0, #4
 802cfc2:	f000 fb1b 	bl	802d5fc <radio_comm_SendCmdGetResp>
                              Pro2Cmd,
                              SI446X_CMD_REPLY_COUNT_GET_INT_STATUS,
                              Pro2Cmd );

    Si446xCmd.GET_INT_STATUS.INT_PEND       = Pro2Cmd[0];
 802cfc6:	4b12      	ldr	r3, [pc, #72]	; (802d010 <si446x_get_int_status+0x80>)
 802cfc8:	781a      	ldrb	r2, [r3, #0]
 802cfca:	4b12      	ldr	r3, [pc, #72]	; (802d014 <si446x_get_int_status+0x84>)
 802cfcc:	701a      	strb	r2, [r3, #0]
    Si446xCmd.GET_INT_STATUS.INT_STATUS     = Pro2Cmd[1];
 802cfce:	4b10      	ldr	r3, [pc, #64]	; (802d010 <si446x_get_int_status+0x80>)
 802cfd0:	785a      	ldrb	r2, [r3, #1]
 802cfd2:	4b10      	ldr	r3, [pc, #64]	; (802d014 <si446x_get_int_status+0x84>)
 802cfd4:	705a      	strb	r2, [r3, #1]
    Si446xCmd.GET_INT_STATUS.PH_PEND        = Pro2Cmd[2];
 802cfd6:	4b0e      	ldr	r3, [pc, #56]	; (802d010 <si446x_get_int_status+0x80>)
 802cfd8:	789a      	ldrb	r2, [r3, #2]
 802cfda:	4b0e      	ldr	r3, [pc, #56]	; (802d014 <si446x_get_int_status+0x84>)
 802cfdc:	709a      	strb	r2, [r3, #2]
    Si446xCmd.GET_INT_STATUS.PH_STATUS      = Pro2Cmd[3];
 802cfde:	4b0c      	ldr	r3, [pc, #48]	; (802d010 <si446x_get_int_status+0x80>)
 802cfe0:	78da      	ldrb	r2, [r3, #3]
 802cfe2:	4b0c      	ldr	r3, [pc, #48]	; (802d014 <si446x_get_int_status+0x84>)
 802cfe4:	70da      	strb	r2, [r3, #3]
    Si446xCmd.GET_INT_STATUS.MODEM_PEND     = Pro2Cmd[4];
 802cfe6:	4b0a      	ldr	r3, [pc, #40]	; (802d010 <si446x_get_int_status+0x80>)
 802cfe8:	791a      	ldrb	r2, [r3, #4]
 802cfea:	4b0a      	ldr	r3, [pc, #40]	; (802d014 <si446x_get_int_status+0x84>)
 802cfec:	711a      	strb	r2, [r3, #4]
    Si446xCmd.GET_INT_STATUS.MODEM_STATUS   = Pro2Cmd[5];
 802cfee:	4b08      	ldr	r3, [pc, #32]	; (802d010 <si446x_get_int_status+0x80>)
 802cff0:	795a      	ldrb	r2, [r3, #5]
 802cff2:	4b08      	ldr	r3, [pc, #32]	; (802d014 <si446x_get_int_status+0x84>)
 802cff4:	715a      	strb	r2, [r3, #5]
    Si446xCmd.GET_INT_STATUS.CHIP_PEND      = Pro2Cmd[6];
 802cff6:	4b06      	ldr	r3, [pc, #24]	; (802d010 <si446x_get_int_status+0x80>)
 802cff8:	799a      	ldrb	r2, [r3, #6]
 802cffa:	4b06      	ldr	r3, [pc, #24]	; (802d014 <si446x_get_int_status+0x84>)
 802cffc:	719a      	strb	r2, [r3, #6]
    Si446xCmd.GET_INT_STATUS.CHIP_STATUS    = Pro2Cmd[7];
 802cffe:	4b04      	ldr	r3, [pc, #16]	; (802d010 <si446x_get_int_status+0x80>)
 802d000:	79da      	ldrb	r2, [r3, #7]
 802d002:	4b04      	ldr	r3, [pc, #16]	; (802d014 <si446x_get_int_status+0x84>)
 802d004:	71da      	strb	r2, [r3, #7]
}
 802d006:	bf00      	nop
 802d008:	3708      	adds	r7, #8
 802d00a:	46bd      	mov	sp, r7
 802d00c:	bd80      	pop	{r7, pc}
 802d00e:	bf00      	nop
 802d010:	200012dc 	.word	0x200012dc
 802d014:	200012c8 	.word	0x200012c8

0802d018 <si446x_set_property>:
 */
#ifdef __C51__
#pragma maxargs (13)  /* allow 13 bytes for parameters */
#endif
void si446x_set_property( U8 GROUP, U8 NUM_PROPS, U8 START_PROP, ... )
{
 802d018:	b40c      	push	{r2, r3}
 802d01a:	b580      	push	{r7, lr}
 802d01c:	b084      	sub	sp, #16
 802d01e:	af00      	add	r7, sp, #0
 802d020:	4603      	mov	r3, r0
 802d022:	460a      	mov	r2, r1
 802d024:	71fb      	strb	r3, [r7, #7]
 802d026:	4613      	mov	r3, r2
 802d028:	71bb      	strb	r3, [r7, #6]
    va_list argList;
    U8 cmdIndex;

    Pro2Cmd[0] = SI446X_CMD_ID_SET_PROPERTY;
 802d02a:	4b17      	ldr	r3, [pc, #92]	; (802d088 <si446x_set_property+0x70>)
 802d02c:	2211      	movs	r2, #17
 802d02e:	701a      	strb	r2, [r3, #0]
    Pro2Cmd[1] = GROUP;
 802d030:	4a15      	ldr	r2, [pc, #84]	; (802d088 <si446x_set_property+0x70>)
 802d032:	79fb      	ldrb	r3, [r7, #7]
 802d034:	7053      	strb	r3, [r2, #1]
    Pro2Cmd[2] = NUM_PROPS;
 802d036:	4a14      	ldr	r2, [pc, #80]	; (802d088 <si446x_set_property+0x70>)
 802d038:	79bb      	ldrb	r3, [r7, #6]
 802d03a:	7093      	strb	r3, [r2, #2]
    Pro2Cmd[3] = START_PROP;
 802d03c:	4a12      	ldr	r2, [pc, #72]	; (802d088 <si446x_set_property+0x70>)
 802d03e:	7e3b      	ldrb	r3, [r7, #24]
 802d040:	70d3      	strb	r3, [r2, #3]

    va_start (argList, START_PROP);
 802d042:	f107 031c 	add.w	r3, r7, #28
 802d046:	60bb      	str	r3, [r7, #8]
    cmdIndex = 4;
 802d048:	2304      	movs	r3, #4
 802d04a:	73fb      	strb	r3, [r7, #15]
    while(NUM_PROPS--)
 802d04c:	e00a      	b.n	802d064 <si446x_set_property+0x4c>
#ifdef __C51__  //  Keil Compiler
        Pro2Cmd[cmdIndex] = va_arg (argList, U8);
#else
        //‘char’ is promoted to ‘int’ when passed through ‘...’
        //  gcc : 가변인자는 char -> int로 확장됨.
        Pro2Cmd[cmdIndex] = va_arg ( argList, int );
 802d04e:	68bb      	ldr	r3, [r7, #8]
 802d050:	1d1a      	adds	r2, r3, #4
 802d052:	60ba      	str	r2, [r7, #8]
 802d054:	681a      	ldr	r2, [r3, #0]
 802d056:	7bfb      	ldrb	r3, [r7, #15]
 802d058:	b2d1      	uxtb	r1, r2
 802d05a:	4a0b      	ldr	r2, [pc, #44]	; (802d088 <si446x_set_property+0x70>)
 802d05c:	54d1      	strb	r1, [r2, r3]
#endif
        cmdIndex++;
 802d05e:	7bfb      	ldrb	r3, [r7, #15]
 802d060:	3301      	adds	r3, #1
 802d062:	73fb      	strb	r3, [r7, #15]
    while(NUM_PROPS--)
 802d064:	79bb      	ldrb	r3, [r7, #6]
 802d066:	1e5a      	subs	r2, r3, #1
 802d068:	71ba      	strb	r2, [r7, #6]
 802d06a:	2b00      	cmp	r3, #0
 802d06c:	d1ef      	bne.n	802d04e <si446x_set_property+0x36>
    }
    va_end(argList);

    radio_comm_SendCmd( cmdIndex, Pro2Cmd );
 802d06e:	7bfb      	ldrb	r3, [r7, #15]
 802d070:	4905      	ldr	r1, [pc, #20]	; (802d088 <si446x_set_property+0x70>)
 802d072:	4618      	mov	r0, r3
 802d074:	f000 fa38 	bl	802d4e8 <radio_comm_SendCmd>
}
 802d078:	bf00      	nop
 802d07a:	3710      	adds	r7, #16
 802d07c:	46bd      	mov	sp, r7
 802d07e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802d082:	b002      	add	sp, #8
 802d084:	4770      	bx	lr
 802d086:	bf00      	nop
 802d088:	200012dc 	.word	0x200012dc

0802d08c <si446x_change_state>:
 * Issue a change state command to the radio.
 *
 * @param NEXT_STATE1 Next state.
 */
void si446x_change_state(U8 NEXT_STATE1)
{
 802d08c:	b580      	push	{r7, lr}
 802d08e:	b082      	sub	sp, #8
 802d090:	af00      	add	r7, sp, #0
 802d092:	4603      	mov	r3, r0
 802d094:	71fb      	strb	r3, [r7, #7]
    Pro2Cmd[0] = SI446X_CMD_ID_CHANGE_STATE;
 802d096:	4b07      	ldr	r3, [pc, #28]	; (802d0b4 <si446x_change_state+0x28>)
 802d098:	2234      	movs	r2, #52	; 0x34
 802d09a:	701a      	strb	r2, [r3, #0]
    Pro2Cmd[1] = NEXT_STATE1;
 802d09c:	4a05      	ldr	r2, [pc, #20]	; (802d0b4 <si446x_change_state+0x28>)
 802d09e:	79fb      	ldrb	r3, [r7, #7]
 802d0a0:	7053      	strb	r3, [r2, #1]

    radio_comm_SendCmd( SI446X_CMD_ARG_COUNT_CHANGE_STATE, Pro2Cmd );
 802d0a2:	4904      	ldr	r1, [pc, #16]	; (802d0b4 <si446x_change_state+0x28>)
 802d0a4:	2002      	movs	r0, #2
 802d0a6:	f000 fa1f 	bl	802d4e8 <radio_comm_SendCmd>
}
 802d0aa:	bf00      	nop
 802d0ac:	3708      	adds	r7, #8
 802d0ae:	46bd      	mov	sp, r7
 802d0b0:	bd80      	pop	{r7, pc}
 802d0b2:	bf00      	nop
 802d0b4:	200012dc 	.word	0x200012dc

0802d0b8 <si446x_fifo_info>:
 * into @Si446xCmd.
 *
 * @param FIFO  RX/TX FIFO reset flags.
 */
void si446x_fifo_info(U8 FIFO)
{
 802d0b8:	b580      	push	{r7, lr}
 802d0ba:	b082      	sub	sp, #8
 802d0bc:	af00      	add	r7, sp, #0
 802d0be:	4603      	mov	r3, r0
 802d0c0:	71fb      	strb	r3, [r7, #7]
    Pro2Cmd[0] = SI446X_CMD_ID_FIFO_INFO;
 802d0c2:	4b0c      	ldr	r3, [pc, #48]	; (802d0f4 <si446x_fifo_info+0x3c>)
 802d0c4:	2215      	movs	r2, #21
 802d0c6:	701a      	strb	r2, [r3, #0]
    Pro2Cmd[1] = FIFO;
 802d0c8:	4a0a      	ldr	r2, [pc, #40]	; (802d0f4 <si446x_fifo_info+0x3c>)
 802d0ca:	79fb      	ldrb	r3, [r7, #7]
 802d0cc:	7053      	strb	r3, [r2, #1]

    radio_comm_SendCmdGetResp( SI446X_CMD_ARG_COUNT_FIFO_INFO,
 802d0ce:	4b09      	ldr	r3, [pc, #36]	; (802d0f4 <si446x_fifo_info+0x3c>)
 802d0d0:	2202      	movs	r2, #2
 802d0d2:	4908      	ldr	r1, [pc, #32]	; (802d0f4 <si446x_fifo_info+0x3c>)
 802d0d4:	2002      	movs	r0, #2
 802d0d6:	f000 fa91 	bl	802d5fc <radio_comm_SendCmdGetResp>
                              Pro2Cmd,
                              SI446X_CMD_REPLY_COUNT_FIFO_INFO,
                              Pro2Cmd );

    Si446xCmd.FIFO_INFO.RX_FIFO_COUNT   = Pro2Cmd[0];
 802d0da:	4b06      	ldr	r3, [pc, #24]	; (802d0f4 <si446x_fifo_info+0x3c>)
 802d0dc:	781a      	ldrb	r2, [r3, #0]
 802d0de:	4b06      	ldr	r3, [pc, #24]	; (802d0f8 <si446x_fifo_info+0x40>)
 802d0e0:	701a      	strb	r2, [r3, #0]
    Si446xCmd.FIFO_INFO.TX_FIFO_SPACE   = Pro2Cmd[1];
 802d0e2:	4b04      	ldr	r3, [pc, #16]	; (802d0f4 <si446x_fifo_info+0x3c>)
 802d0e4:	785a      	ldrb	r2, [r3, #1]
 802d0e6:	4b04      	ldr	r3, [pc, #16]	; (802d0f8 <si446x_fifo_info+0x40>)
 802d0e8:	705a      	strb	r2, [r3, #1]
}
 802d0ea:	bf00      	nop
 802d0ec:	3708      	adds	r7, #8
 802d0ee:	46bd      	mov	sp, r7
 802d0f0:	bd80      	pop	{r7, pc}
 802d0f2:	bf00      	nop
 802d0f4:	200012dc 	.word	0x200012dc
 802d0f8:	200012c8 	.word	0x200012c8

0802d0fc <si446x_write_tx_fifo>:
 *
 * @param numBytes  Data length to be load.
 * @param pTxData   Pointer to the data (U8*).
 */
void si446x_write_tx_fifo(U8 numBytes, U8* pTxData)
{
 802d0fc:	b580      	push	{r7, lr}
 802d0fe:	b082      	sub	sp, #8
 802d100:	af00      	add	r7, sp, #0
 802d102:	4603      	mov	r3, r0
 802d104:	6039      	str	r1, [r7, #0]
 802d106:	71fb      	strb	r3, [r7, #7]
  radio_comm_WriteData( SI446X_CMD_ID_WRITE_TX_FIFO, 0, numBytes, pTxData );
 802d108:	79fa      	ldrb	r2, [r7, #7]
 802d10a:	683b      	ldr	r3, [r7, #0]
 802d10c:	2100      	movs	r1, #0
 802d10e:	2066      	movs	r0, #102	; 0x66
 802d110:	f000 fa34 	bl	802d57c <radio_comm_WriteData>
}
 802d114:	bf00      	nop
 802d116:	3708      	adds	r7, #8
 802d118:	46bd      	mov	sp, r7
 802d11a:	bd80      	pop	{r7, pc}

0802d11c <si446x_read_rx_fifo>:
 *
 * @param numBytes  Data length to be read.
 * @param pRxData   Pointer to the buffer location.
 */
void si446x_read_rx_fifo(U8 numBytes, U8* pRxData)
{
 802d11c:	b580      	push	{r7, lr}
 802d11e:	b082      	sub	sp, #8
 802d120:	af00      	add	r7, sp, #0
 802d122:	4603      	mov	r3, r0
 802d124:	6039      	str	r1, [r7, #0]
 802d126:	71fb      	strb	r3, [r7, #7]
  radio_comm_ReadData( SI446X_CMD_ID_READ_RX_FIFO, 0, numBytes, pRxData );
 802d128:	79fa      	ldrb	r2, [r7, #7]
 802d12a:	683b      	ldr	r3, [r7, #0]
 802d12c:	2100      	movs	r1, #0
 802d12e:	2077      	movs	r0, #119	; 0x77
 802d130:	f000 f9fa 	bl	802d528 <radio_comm_ReadData>
}
 802d134:	bf00      	nop
 802d136:	3708      	adds	r7, #8
 802d138:	46bd      	mov	sp, r7
 802d13a:	bd80      	pop	{r7, pc}

0802d13c <si446x_frr_b_read>:
 * Reads the Fast Response Registers starting with B register into @Si446xCmd union.
 *
 * @param respByteCount Number of Fast Response Registers to be read.
 */
void si446x_frr_b_read(U8 respByteCount)
{
 802d13c:	b580      	push	{r7, lr}
 802d13e:	b082      	sub	sp, #8
 802d140:	af00      	add	r7, sp, #0
 802d142:	4603      	mov	r3, r0
 802d144:	71fb      	strb	r3, [r7, #7]
    radio_comm_ReadData(SI446X_CMD_ID_FRR_B_READ,
 802d146:	79fa      	ldrb	r2, [r7, #7]
 802d148:	4b0c      	ldr	r3, [pc, #48]	; (802d17c <si446x_frr_b_read+0x40>)
 802d14a:	2100      	movs	r1, #0
 802d14c:	2051      	movs	r0, #81	; 0x51
 802d14e:	f000 f9eb 	bl	802d528 <radio_comm_ReadData>
                            0,
                        respByteCount,
                        Pro2Cmd);

    Si446xCmd.FRR_B_READ.FRR_B_VALUE = Pro2Cmd[0];
 802d152:	4b0a      	ldr	r3, [pc, #40]	; (802d17c <si446x_frr_b_read+0x40>)
 802d154:	781a      	ldrb	r2, [r3, #0]
 802d156:	4b0a      	ldr	r3, [pc, #40]	; (802d180 <si446x_frr_b_read+0x44>)
 802d158:	701a      	strb	r2, [r3, #0]
    Si446xCmd.FRR_B_READ.FRR_C_VALUE = Pro2Cmd[1];
 802d15a:	4b08      	ldr	r3, [pc, #32]	; (802d17c <si446x_frr_b_read+0x40>)
 802d15c:	785a      	ldrb	r2, [r3, #1]
 802d15e:	4b08      	ldr	r3, [pc, #32]	; (802d180 <si446x_frr_b_read+0x44>)
 802d160:	705a      	strb	r2, [r3, #1]
    Si446xCmd.FRR_B_READ.FRR_D_VALUE = Pro2Cmd[2];
 802d162:	4b06      	ldr	r3, [pc, #24]	; (802d17c <si446x_frr_b_read+0x40>)
 802d164:	789a      	ldrb	r2, [r3, #2]
 802d166:	4b06      	ldr	r3, [pc, #24]	; (802d180 <si446x_frr_b_read+0x44>)
 802d168:	709a      	strb	r2, [r3, #2]
    Si446xCmd.FRR_B_READ.FRR_A_VALUE = Pro2Cmd[3];
 802d16a:	4b04      	ldr	r3, [pc, #16]	; (802d17c <si446x_frr_b_read+0x40>)
 802d16c:	78da      	ldrb	r2, [r3, #3]
 802d16e:	4b04      	ldr	r3, [pc, #16]	; (802d180 <si446x_frr_b_read+0x44>)
 802d170:	70da      	strb	r2, [r3, #3]
}
 802d172:	bf00      	nop
 802d174:	3708      	adds	r7, #8
 802d176:	46bd      	mov	sp, r7
 802d178:	bd80      	pop	{r7, pc}
 802d17a:	bf00      	nop
 802d17c:	200012dc 	.word	0x200012dc
 802d180:	200012c8 	.word	0x200012c8

0802d184 <si446x_get_int_status_fast_clear_read>:
/*!
 * Clear and read all Interrupt status/pending flags
 *
 */
void si446x_get_int_status_fast_clear_read(void)
{
 802d184:	b580      	push	{r7, lr}
 802d186:	af00      	add	r7, sp, #0
    Pro2Cmd[0] = SI446X_CMD_ID_GET_INT_STATUS;
 802d188:	4b15      	ldr	r3, [pc, #84]	; (802d1e0 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d18a:	2220      	movs	r2, #32
 802d18c:	701a      	strb	r2, [r3, #0]

    radio_comm_SendCmdGetResp( 1,
 802d18e:	4b14      	ldr	r3, [pc, #80]	; (802d1e0 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d190:	2208      	movs	r2, #8
 802d192:	4913      	ldr	r1, [pc, #76]	; (802d1e0 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d194:	2001      	movs	r0, #1
 802d196:	f000 fa31 	bl	802d5fc <radio_comm_SendCmdGetResp>
                              Pro2Cmd,
                              SI446X_CMD_REPLY_COUNT_GET_INT_STATUS,
                              Pro2Cmd );

    Si446xCmd.GET_INT_STATUS.INT_PEND       = Pro2Cmd[0];
 802d19a:	4b11      	ldr	r3, [pc, #68]	; (802d1e0 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d19c:	781a      	ldrb	r2, [r3, #0]
 802d19e:	4b11      	ldr	r3, [pc, #68]	; (802d1e4 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1a0:	701a      	strb	r2, [r3, #0]
    Si446xCmd.GET_INT_STATUS.INT_STATUS     = Pro2Cmd[1];
 802d1a2:	4b0f      	ldr	r3, [pc, #60]	; (802d1e0 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1a4:	785a      	ldrb	r2, [r3, #1]
 802d1a6:	4b0f      	ldr	r3, [pc, #60]	; (802d1e4 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1a8:	705a      	strb	r2, [r3, #1]
    Si446xCmd.GET_INT_STATUS.PH_PEND        = Pro2Cmd[2];
 802d1aa:	4b0d      	ldr	r3, [pc, #52]	; (802d1e0 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1ac:	789a      	ldrb	r2, [r3, #2]
 802d1ae:	4b0d      	ldr	r3, [pc, #52]	; (802d1e4 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1b0:	709a      	strb	r2, [r3, #2]
    Si446xCmd.GET_INT_STATUS.PH_STATUS      = Pro2Cmd[3];
 802d1b2:	4b0b      	ldr	r3, [pc, #44]	; (802d1e0 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1b4:	78da      	ldrb	r2, [r3, #3]
 802d1b6:	4b0b      	ldr	r3, [pc, #44]	; (802d1e4 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1b8:	70da      	strb	r2, [r3, #3]
    Si446xCmd.GET_INT_STATUS.MODEM_PEND     = Pro2Cmd[4];
 802d1ba:	4b09      	ldr	r3, [pc, #36]	; (802d1e0 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1bc:	791a      	ldrb	r2, [r3, #4]
 802d1be:	4b09      	ldr	r3, [pc, #36]	; (802d1e4 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1c0:	711a      	strb	r2, [r3, #4]
    Si446xCmd.GET_INT_STATUS.MODEM_STATUS   = Pro2Cmd[5];
 802d1c2:	4b07      	ldr	r3, [pc, #28]	; (802d1e0 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1c4:	795a      	ldrb	r2, [r3, #5]
 802d1c6:	4b07      	ldr	r3, [pc, #28]	; (802d1e4 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1c8:	715a      	strb	r2, [r3, #5]
    Si446xCmd.GET_INT_STATUS.CHIP_PEND      = Pro2Cmd[6];
 802d1ca:	4b05      	ldr	r3, [pc, #20]	; (802d1e0 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1cc:	799a      	ldrb	r2, [r3, #6]
 802d1ce:	4b05      	ldr	r3, [pc, #20]	; (802d1e4 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1d0:	719a      	strb	r2, [r3, #6]
    Si446xCmd.GET_INT_STATUS.CHIP_STATUS    = Pro2Cmd[7];
 802d1d2:	4b03      	ldr	r3, [pc, #12]	; (802d1e0 <si446x_get_int_status_fast_clear_read+0x5c>)
 802d1d4:	79da      	ldrb	r2, [r3, #7]
 802d1d6:	4b03      	ldr	r3, [pc, #12]	; (802d1e4 <si446x_get_int_status_fast_clear_read+0x60>)
 802d1d8:	71da      	strb	r2, [r3, #7]
}
 802d1da:	bf00      	nop
 802d1dc:	bd80      	pop	{r7, pc}
 802d1de:	bf00      	nop
 802d1e0:	200012dc 	.word	0x200012dc
 802d1e4:	200012c8 	.word	0x200012c8

0802d1e8 <vRadio_PowerUp>:
 *
 *  @note
 *
 */
void vRadio_PowerUp(void)
{
 802d1e8:	b580      	push	{r7, lr}
 802d1ea:	b082      	sub	sp, #8
 802d1ec:	af00      	add	r7, sp, #0
	SEGMENT_VARIABLE(wDelay,  U16, SEG_XDATA) = 0u;
 802d1ee:	2300      	movs	r3, #0
 802d1f0:	607b      	str	r3, [r7, #4]

	/* Hardware reset the chip */
	si446x_reset();
 802d1f2:	f7ff fddb 	bl	802cdac <si446x_reset>

	/* Wait until reset timeout or Reset IT signal */
	//  for (; wDelay < pRadioConfiguration->Radio_Delay_Cnt_After_Reset; wDelay++);
	HAL_Delay(10);
 802d1f6:	200a      	movs	r0, #10
 802d1f8:	f7f4 fcc2 	bl	8021b80 <HAL_Delay>
}
 802d1fc:	bf00      	nop
 802d1fe:	3708      	adds	r7, #8
 802d200:	46bd      	mov	sp, r7
 802d202:	bd80      	pop	{r7, pc}

0802d204 <vRadio_Init>:
 *
 *  @note
 *
 */
void vRadio_Init(void)
{
 802d204:	b580      	push	{r7, lr}
 802d206:	af00      	add	r7, sp, #0
	U16 wDelay;

	/* Power Up the radio chip */
	vRadio_PowerUp();
 802d208:	f7ff ffee 	bl	802d1e8 <vRadio_PowerUp>

	HAL_Delay(200);
 802d20c:	20c8      	movs	r0, #200	; 0xc8
 802d20e:	f7f4 fcb7 	bl	8021b80 <HAL_Delay>

	/* Load radio configuration */
	while (SI446X_SUCCESS != si446x_configuration_init(pRadioConfiguration->Radio_ConfigurationArray))
 802d212:	e005      	b.n	802d220 <vRadio_Init+0x1c>
	{
		/* Error hook */
		//    for (wDelay = 0x7FFF; wDelay--; ) ;
		HAL_Delay(500);
 802d214:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 802d218:	f7f4 fcb2 	bl	8021b80 <HAL_Delay>

		/* Power Up the radio chip */
		vRadio_PowerUp();
 802d21c:	f7ff ffe4 	bl	802d1e8 <vRadio_PowerUp>
	while (SI446X_SUCCESS != si446x_configuration_init(pRadioConfiguration->Radio_ConfigurationArray))
 802d220:	4b09      	ldr	r3, [pc, #36]	; (802d248 <vRadio_Init+0x44>)
 802d222:	681b      	ldr	r3, [r3, #0]
 802d224:	681b      	ldr	r3, [r3, #0]
 802d226:	4618      	mov	r0, r3
 802d228:	f7ff fdd0 	bl	802cdcc <si446x_configuration_init>
 802d22c:	4603      	mov	r3, r0
 802d22e:	2b00      	cmp	r3, #0
 802d230:	d1f0      	bne.n	802d214 <vRadio_Init+0x10>
	}

	HAL_Delay(100);
 802d232:	2064      	movs	r0, #100	; 0x64
 802d234:	f7f4 fca4 	bl	8021b80 <HAL_Delay>

	// Read ITs, clear pending ones
	si446x_get_int_status(0u, 0u, 0u);
 802d238:	2200      	movs	r2, #0
 802d23a:	2100      	movs	r1, #0
 802d23c:	2000      	movs	r0, #0
 802d23e:	f7ff fea7 	bl	802cf90 <si446x_get_int_status>

}
 802d242:	bf00      	nop
 802d244:	bd80      	pop	{r7, pc}
 802d246:	bf00      	nop
 802d248:	200004f0 	.word	0x200004f0

0802d24c <bRadio_Check_Tx_RX>:
 *
 *  @note
 *
 */
U8 bRadio_Check_Tx_RX(void)
{
 802d24c:	b580      	push	{r7, lr}
 802d24e:	b082      	sub	sp, #8
 802d250:	af00      	add	r7, sp, #0
	int ret = 0;
 802d252:	2300      	movs	r3, #0
 802d254:	607b      	str	r3, [r7, #4]
	static int s_idxRxPkt = 0;

	if (RF_NIRQ == FALSE)
 802d256:	4b47      	ldr	r3, [pc, #284]	; (802d374 <bRadio_Check_Tx_RX+0x128>)
 802d258:	781b      	ldrb	r3, [r3, #0]
 802d25a:	2b00      	cmp	r3, #0
 802d25c:	f040 8084 	bne.w	802d368 <bRadio_Check_Tx_RX+0x11c>
	{
		//	  printf("!\n");
		/* Read ITs, clear pending ones */
		si446x_get_int_status_fast_clear_read();
 802d260:	f7ff ff90 	bl	802d184 <si446x_get_int_status_fast_clear_read>

		if (Si446xCmd.GET_INT_STATUS.CHIP_PEND & SI446X_CMD_GET_CHIP_STATUS_REP_CHIP_PEND_CMD_ERROR_PEND_BIT)
 802d264:	4b44      	ldr	r3, [pc, #272]	; (802d378 <bRadio_Check_Tx_RX+0x12c>)
 802d266:	799b      	ldrb	r3, [r3, #6]
 802d268:	f003 0308 	and.w	r3, r3, #8
 802d26c:	2b00      	cmp	r3, #0
 802d26e:	d011      	beq.n	802d294 <bRadio_Check_Tx_RX+0x48>
		{
			/* State change to */
			si446x_change_state(SI446X_CMD_CHANGE_STATE_ARG_NEXT_STATE1_NEW_STATE_ENUM_SLEEP);
 802d270:	2001      	movs	r0, #1
 802d272:	f7ff ff0b 	bl	802d08c <si446x_change_state>

			/* Reset FIFO */
			si446x_fifo_info(SI446X_CMD_FIFO_INFO_ARG_FIFO_RX_BIT);
 802d276:	2002      	movs	r0, #2
 802d278:	f7ff ff1e 	bl	802d0b8 <si446x_fifo_info>

			/* State change to */
			si446x_change_state(SI446X_CMD_CHANGE_STATE_ARG_NEXT_STATE1_NEW_STATE_ENUM_RX);
 802d27c:	2008      	movs	r0, #8
 802d27e:	f7ff ff05 	bl	802d08c <si446x_change_state>

			nRxErr++;
 802d282:	4b3e      	ldr	r3, [pc, #248]	; (802d37c <bRadio_Check_Tx_RX+0x130>)
 802d284:	681b      	ldr	r3, [r3, #0]
 802d286:	3301      	adds	r3, #1
 802d288:	4a3c      	ldr	r2, [pc, #240]	; (802d37c <bRadio_Check_Tx_RX+0x130>)
 802d28a:	6013      	str	r3, [r2, #0]

			ret |= SI446X_CMD_GET_CHIP_STATUS_REP_CHIP_PEND_CMD_ERROR_PEND_BIT;
 802d28c:	687b      	ldr	r3, [r7, #4]
 802d28e:	f043 0308 	orr.w	r3, r3, #8
 802d292:	607b      	str	r3, [r7, #4]
		}

		if (Si446xCmd.GET_INT_STATUS.PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_PH_STATUS_CRC_ERROR_BIT)
 802d294:	4b38      	ldr	r3, [pc, #224]	; (802d378 <bRadio_Check_Tx_RX+0x12c>)
 802d296:	789b      	ldrb	r3, [r3, #2]
 802d298:	f003 0308 	and.w	r3, r3, #8
 802d29c:	2b00      	cmp	r3, #0
 802d29e:	d00b      	beq.n	802d2b8 <bRadio_Check_Tx_RX+0x6c>
		{
			/* Reset FIFO */
			si446x_fifo_info(SI446X_CMD_FIFO_INFO_ARG_FIFO_RX_BIT);
 802d2a0:	2002      	movs	r0, #2
 802d2a2:	f7ff ff09 	bl	802d0b8 <si446x_fifo_info>

			nCrcErr++;
 802d2a6:	4b36      	ldr	r3, [pc, #216]	; (802d380 <bRadio_Check_Tx_RX+0x134>)
 802d2a8:	681b      	ldr	r3, [r3, #0]
 802d2aa:	3301      	adds	r3, #1
 802d2ac:	4a34      	ldr	r2, [pc, #208]	; (802d380 <bRadio_Check_Tx_RX+0x134>)
 802d2ae:	6013      	str	r3, [r2, #0]

			ret |= SI446X_CMD_GET_INT_STATUS_REP_PH_STATUS_CRC_ERROR_BIT;
 802d2b0:	687b      	ldr	r3, [r7, #4]
 802d2b2:	f043 0308 	orr.w	r3, r3, #8
 802d2b6:	607b      	str	r3, [r7, #4]
		}

		if(Si446xCmd.GET_INT_STATUS.PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_SENT_PEND_BIT)
 802d2b8:	4b2f      	ldr	r3, [pc, #188]	; (802d378 <bRadio_Check_Tx_RX+0x12c>)
 802d2ba:	789b      	ldrb	r3, [r3, #2]
 802d2bc:	f003 0320 	and.w	r3, r3, #32
 802d2c0:	2b00      	cmp	r3, #0
 802d2c2:	d00d      	beq.n	802d2e0 <bRadio_Check_Tx_RX+0x94>
			//        printf("tx\n");
			//        printf("\n[tx]");
			// Configure PKT_CONFIG1 for RX

			//	수신기
			vRadio_StartRX (
 802d2c4:	4b2f      	ldr	r3, [pc, #188]	; (802d384 <bRadio_Check_Tx_RX+0x138>)
 802d2c6:	681b      	ldr	r3, [r3, #0]
 802d2c8:	b2da      	uxtb	r2, r3
				g_nChRx,	//g_idxTrainSet,	//	pRadioConfiguration->Radio_ChannelNumber,
				pRadioConfiguration->Radio_PacketLength );
 802d2ca:	4b2f      	ldr	r3, [pc, #188]	; (802d388 <bRadio_Check_Tx_RX+0x13c>)
 802d2cc:	681b      	ldr	r3, [r3, #0]
			vRadio_StartRX (
 802d2ce:	795b      	ldrb	r3, [r3, #5]
 802d2d0:	4619      	mov	r1, r3
 802d2d2:	4610      	mov	r0, r2
 802d2d4:	f000 f864 	bl	802d3a0 <vRadio_StartRX>

			ret |= SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_SENT_PEND_BIT;
 802d2d8:	687b      	ldr	r3, [r7, #4]
 802d2da:	f043 0320 	orr.w	r3, r3, #32
 802d2de:	607b      	str	r3, [r7, #4]
		}

		if(Si446xCmd.GET_INT_STATUS.PH_PEND & SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_RX_PEND_BIT)
 802d2e0:	4b25      	ldr	r3, [pc, #148]	; (802d378 <bRadio_Check_Tx_RX+0x12c>)
 802d2e2:	789b      	ldrb	r3, [r3, #2]
 802d2e4:	f003 0310 	and.w	r3, r3, #16
 802d2e8:	2b00      	cmp	r3, #0
 802d2ea:	d03d      	beq.n	802d368 <bRadio_Check_Tx_RX+0x11c>
		{
			/* Packet RX */

			/* Get payload length */
            si446x_fifo_info ( 0x00 );
 802d2ec:	2000      	movs	r0, #0
 802d2ee:	f7ff fee3 	bl	802d0b8 <si446x_fifo_info>

//			si446x_read_rx_fifo(Si446xCmd.FIFO_INFO.RX_FIFO_COUNT, &customRadioPacket[0]);
        	s_idxRxPkt = ( s_idxRxPkt + 1 )%2;
 802d2f2:	4b26      	ldr	r3, [pc, #152]	; (802d38c <bRadio_Check_Tx_RX+0x140>)
 802d2f4:	681b      	ldr	r3, [r3, #0]
 802d2f6:	3301      	adds	r3, #1
 802d2f8:	2b00      	cmp	r3, #0
 802d2fa:	f003 0301 	and.w	r3, r3, #1
 802d2fe:	bfb8      	it	lt
 802d300:	425b      	neglt	r3, r3
 802d302:	4a22      	ldr	r2, [pc, #136]	; (802d38c <bRadio_Check_Tx_RX+0x140>)
 802d304:	6013      	str	r3, [r2, #0]
        	g_pRadioRxPkt = &g_RadioRxPkt[s_idxRxPkt][0];
 802d306:	4b21      	ldr	r3, [pc, #132]	; (802d38c <bRadio_Check_Tx_RX+0x140>)
 802d308:	681b      	ldr	r3, [r3, #0]
 802d30a:	019b      	lsls	r3, r3, #6
 802d30c:	4a20      	ldr	r2, [pc, #128]	; (802d390 <bRadio_Check_Tx_RX+0x144>)
 802d30e:	4413      	add	r3, r2
 802d310:	4a20      	ldr	r2, [pc, #128]	; (802d394 <bRadio_Check_Tx_RX+0x148>)
 802d312:	6013      	str	r3, [r2, #0]
			si446x_read_rx_fifo(Si446xCmd.FIFO_INFO.RX_FIFO_COUNT, g_pRadioRxPkt);
 802d314:	4b18      	ldr	r3, [pc, #96]	; (802d378 <bRadio_Check_Tx_RX+0x12c>)
 802d316:	781b      	ldrb	r3, [r3, #0]
 802d318:	461a      	mov	r2, r3
 802d31a:	4b1e      	ldr	r3, [pc, #120]	; (802d394 <bRadio_Check_Tx_RX+0x148>)
 802d31c:	681b      	ldr	r3, [r3, #0]
 802d31e:	4619      	mov	r1, r3
 802d320:	4610      	mov	r0, r2
 802d322:	f7ff fefb 	bl	802d11c <si446x_read_rx_fifo>

			//========================================================================
			si446x_frr_b_read(1);
 802d326:	2001      	movs	r0, #1
 802d328:	f7ff ff08 	bl	802d13c <si446x_frr_b_read>

			g_nRSSI = Si446xCmd.FRR_B_READ.FRR_B_VALUE;		//	RSSI Value
 802d32c:	4b12      	ldr	r3, [pc, #72]	; (802d378 <bRadio_Check_Tx_RX+0x12c>)
 802d32e:	781b      	ldrb	r3, [r3, #0]
 802d330:	461a      	mov	r2, r3
 802d332:	4b19      	ldr	r3, [pc, #100]	; (802d398 <bRadio_Check_Tx_RX+0x14c>)
 802d334:	601a      	str	r2, [r3, #0]

			if( GetDbg() > 2 )
 802d336:	f003 fdf3 	bl	8030f20 <GetDbg>
 802d33a:	4603      	mov	r3, r0
 802d33c:	2b02      	cmp	r3, #2
 802d33e:	dd05      	ble.n	802d34c <bRadio_Check_Tx_RX+0x100>
				printf("Latch RSSI : %02d\n",Si446xCmd.FRR_B_READ.FRR_B_VALUE);
 802d340:	4b0d      	ldr	r3, [pc, #52]	; (802d378 <bRadio_Check_Tx_RX+0x12c>)
 802d342:	781b      	ldrb	r3, [r3, #0]
 802d344:	4619      	mov	r1, r3
 802d346:	4815      	ldr	r0, [pc, #84]	; (802d39c <bRadio_Check_Tx_RX+0x150>)
 802d348:	f009 ffa4 	bl	8037294 <iprintf>
			//========================================================================

			//      printf("rx");
			// Configure PKT_CONFIG1 for RX
			vRadio_StartRX (
 802d34c:	4b0d      	ldr	r3, [pc, #52]	; (802d384 <bRadio_Check_Tx_RX+0x138>)
 802d34e:	681b      	ldr	r3, [r3, #0]
 802d350:	b2da      	uxtb	r2, r3
				g_nChRx, //g_idxTrainSet,	//				pRadioConfiguration->Radio_ChannelNumber,
				pRadioConfiguration->Radio_PacketLength );
 802d352:	4b0d      	ldr	r3, [pc, #52]	; (802d388 <bRadio_Check_Tx_RX+0x13c>)
 802d354:	681b      	ldr	r3, [r3, #0]
			vRadio_StartRX (
 802d356:	795b      	ldrb	r3, [r3, #5]
 802d358:	4619      	mov	r1, r3
 802d35a:	4610      	mov	r0, r2
 802d35c:	f000 f820 	bl	802d3a0 <vRadio_StartRX>

			ret |= SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_RX_PEND_BIT;
 802d360:	687b      	ldr	r3, [r7, #4]
 802d362:	f043 0310 	orr.w	r3, r3, #16
 802d366:	607b      	str	r3, [r7, #4]
		}

	}

	return ret;
 802d368:	687b      	ldr	r3, [r7, #4]
 802d36a:	b2db      	uxtb	r3, r3
}
 802d36c:	4618      	mov	r0, r3
 802d36e:	3708      	adds	r7, #8
 802d370:	46bd      	mov	sp, r7
 802d372:	bd80      	pop	{r7, pc}
 802d374:	20001224 	.word	0x20001224
 802d378:	200012c8 	.word	0x200012c8
 802d37c:	20001388 	.word	0x20001388
 802d380:	2000138c 	.word	0x2000138c
 802d384:	20000be8 	.word	0x20000be8
 802d388:	200004f0 	.word	0x200004f0
 802d38c:	20001370 	.word	0x20001370
 802d390:	200012f0 	.word	0x200012f0
 802d394:	200012ec 	.word	0x200012ec
 802d398:	2000234c 	.word	0x2000234c
 802d39c:	08039734 	.word	0x08039734

0802d3a0 <vRadio_StartRX>:
 *
 *  @note
 *
 */
void vRadio_StartRX(U8 channel, U8 packetLenght )
{
 802d3a0:	b580      	push	{r7, lr}
 802d3a2:	b084      	sub	sp, #16
 802d3a4:	af02      	add	r7, sp, #8
 802d3a6:	4603      	mov	r3, r0
 802d3a8:	460a      	mov	r2, r1
 802d3aa:	71fb      	strb	r3, [r7, #7]
 802d3ac:	4613      	mov	r3, r2
 802d3ae:	71bb      	strb	r3, [r7, #6]
	// Read ITs, clear pending ones
	si446x_get_int_status(0u, 0u, 0u);
 802d3b0:	2200      	movs	r2, #0
 802d3b2:	2100      	movs	r1, #0
 802d3b4:	2000      	movs	r0, #0
 802d3b6:	f7ff fdeb 	bl	802cf90 <si446x_get_int_status>

	// Reset the Rx Fifo
	si446x_fifo_info(SI446X_CMD_FIFO_INFO_ARG_FIFO_RX_BIT);
 802d3ba:	2002      	movs	r0, #2
 802d3bc:	f7ff fe7c 	bl	802d0b8 <si446x_fifo_info>

	/* Start Receiving packet, channel 0, START immediately, Packet length used or not according to packetLength */
	si446x_start_rx(channel, 0u, packetLenght,
 802d3c0:	79ba      	ldrb	r2, [r7, #6]
 802d3c2:	79f8      	ldrb	r0, [r7, #7]
 802d3c4:	2308      	movs	r3, #8
 802d3c6:	9301      	str	r3, [sp, #4]
 802d3c8:	2303      	movs	r3, #3
 802d3ca:	9300      	str	r3, [sp, #0]
 802d3cc:	2300      	movs	r3, #0
 802d3ce:	2100      	movs	r1, #0
 802d3d0:	f7ff fdae 	bl	802cf30 <si446x_start_rx>
			SI446X_CMD_START_RX_ARG_NEXT_STATE1_RXTIMEOUT_STATE_ENUM_NOCHANGE,
			SI446X_CMD_START_RX_ARG_NEXT_STATE2_RXVALID_STATE_ENUM_READY,
			SI446X_CMD_START_RX_ARG_NEXT_STATE3_RXINVALID_STATE_ENUM_RX );
}
 802d3d4:	bf00      	nop
 802d3d6:	3708      	adds	r7, #8
 802d3d8:	46bd      	mov	sp, r7
 802d3da:	bd80      	pop	{r7, pc}

0802d3dc <get_CCA>:


U8 get_CCA(void)
{
 802d3dc:	b580      	push	{r7, lr}
 802d3de:	af00      	add	r7, sp, #0
#if 1
	//	CCA - GPIO1 ( CCA )

	//	Si4463 - GPIO1 ( 0 : Clear / 1 : Busy )

	return !( HAL_GPIO_ReadPin( GPIO1_GPIO_Port, GPIO1_Pin ) );
 802d3e0:	2140      	movs	r1, #64	; 0x40
 802d3e2:	4805      	ldr	r0, [pc, #20]	; (802d3f8 <get_CCA+0x1c>)
 802d3e4:	f7f6 f882 	bl	80234ec <HAL_GPIO_ReadPin>
 802d3e8:	4603      	mov	r3, r0
 802d3ea:	2b00      	cmp	r3, #0
 802d3ec:	bf0c      	ite	eq
 802d3ee:	2301      	moveq	r3, #1
 802d3f0:	2300      	movne	r3, #0
 802d3f2:	b2db      	uxtb	r3, r3
	}

	//	return tmp[3] > 0xa0 ? 1 : 0;
	//	return gpio_get_value(GPIO0)>0 ? 1 : 0;
#endif
}
 802d3f4:	4618      	mov	r0, r3
 802d3f6:	bd80      	pop	{r7, pc}
 802d3f8:	40021000 	.word	0x40021000

0802d3fc <vRadio_Set_TxPower>:


//=============================================================================
void vRadio_Set_TxPower( U8 powerlvl )
//=============================================================================
{
 802d3fc:	b580      	push	{r7, lr}
 802d3fe:	b082      	sub	sp, #8
 802d400:	af00      	add	r7, sp, #0
 802d402:	4603      	mov	r3, r0
 802d404:	71fb      	strb	r3, [r7, #7]
	//	dBm			powerlvl
	//	20 dBm	-	0x7F		Max
	//	0 dBm	-	0x07		환경시험
	si446x_set_property( 0x22, 0x01, 0x01, powerlvl );
 802d406:	79fb      	ldrb	r3, [r7, #7]
 802d408:	2201      	movs	r2, #1
 802d40a:	2101      	movs	r1, #1
 802d40c:	2022      	movs	r0, #34	; 0x22
 802d40e:	f7ff fe03 	bl	802d018 <si446x_set_property>
}
 802d412:	bf00      	nop
 802d414:	3708      	adds	r7, #8
 802d416:	46bd      	mov	sp, r7
 802d418:	bd80      	pop	{r7, pc}

0802d41a <vRadio_StartTx_Variable_Packet>:
 *
 *  @note
 *
 */
void vRadio_StartTx_Variable_Packet(U8 channel, U8 *pioRadioPacket, U8 length)
{
 802d41a:	b580      	push	{r7, lr}
 802d41c:	b082      	sub	sp, #8
 802d41e:	af00      	add	r7, sp, #0
 802d420:	4603      	mov	r3, r0
 802d422:	6039      	str	r1, [r7, #0]
 802d424:	71fb      	strb	r3, [r7, #7]
 802d426:	4613      	mov	r3, r2
 802d428:	71bb      	strb	r3, [r7, #6]
	/* Leave RX state */
	si446x_change_state(SI446X_CMD_CHANGE_STATE_ARG_NEXT_STATE1_NEW_STATE_ENUM_READY);
 802d42a:	2003      	movs	r0, #3
 802d42c:	f7ff fe2e 	bl	802d08c <si446x_change_state>

	/* Read ITs, clear pending ones */
	si446x_get_int_status(0u, 0u, 0u);
 802d430:	2200      	movs	r2, #0
 802d432:	2100      	movs	r1, #0
 802d434:	2000      	movs	r0, #0
 802d436:	f7ff fdab 	bl	802cf90 <si446x_get_int_status>

	/* Reset the Tx Fifo */
	si446x_fifo_info(SI446X_CMD_FIFO_INFO_ARG_FIFO_TX_BIT);
 802d43a:	2001      	movs	r0, #1
 802d43c:	f7ff fe3c 	bl	802d0b8 <si446x_fifo_info>

	/* Fill the TX fifo with datas */
	si446x_write_tx_fifo(length, pioRadioPacket);
 802d440:	79bb      	ldrb	r3, [r7, #6]
 802d442:	6839      	ldr	r1, [r7, #0]
 802d444:	4618      	mov	r0, r3
 802d446:	f7ff fe59 	bl	802d0fc <si446x_write_tx_fifo>

	//	CCA ( Clear Channel Assessment )
	//	Wait CCA
	while (!get_CCA())
 802d44a:	e002      	b.n	802d452 <vRadio_StartTx_Variable_Packet+0x38>
	{
		//			ndelay(1000);
		//			tx_approved = 0;
		//			add_timer(&tx_withdraw_timer);
		//			wait_event_interruptible(wait_withdraw, tx_approved);
		HAL_Delay(1);
 802d44c:	2001      	movs	r0, #1
 802d44e:	f7f4 fb97 	bl	8021b80 <HAL_Delay>
	while (!get_CCA())
 802d452:	f7ff ffc3 	bl	802d3dc <get_CCA>
 802d456:	4603      	mov	r3, r0
 802d458:	2b00      	cmp	r3, #0
 802d45a:	d0f7      	beq.n	802d44c <vRadio_StartTx_Variable_Packet+0x32>
		//		goto again;
	}

	/* Start sending packet, channel 0, START immediately */
	si446x_start_tx(channel, 0x80, length);
 802d45c:	79ba      	ldrb	r2, [r7, #6]
 802d45e:	79fb      	ldrb	r3, [r7, #7]
 802d460:	2180      	movs	r1, #128	; 0x80
 802d462:	4618      	mov	r0, r3
 802d464:	f7ff fd3a 	bl	802cedc <si446x_start_tx>
}
 802d468:	bf00      	nop
 802d46a:	3708      	adds	r7, #8
 802d46c:	46bd      	mov	sp, r7
 802d46e:	bd80      	pop	{r7, pc}

0802d470 <radio_comm_GetResp>:
 * @param pData         Pointer to where to put the data
 *
 * @return CTS value
 */
U8 radio_comm_GetResp(U8 byteCount, U8* pData)
{
 802d470:	b580      	push	{r7, lr}
 802d472:	b084      	sub	sp, #16
 802d474:	af00      	add	r7, sp, #0
 802d476:	4603      	mov	r3, r0
 802d478:	6039      	str	r1, [r7, #0]
 802d47a:	71fb      	strb	r3, [r7, #7]
  SEGMENT_VARIABLE(ctsVal = 0u, U8, SEG_DATA);
 802d47c:	2300      	movs	r3, #0
 802d47e:	73fb      	strb	r3, [r7, #15]
  SEGMENT_VARIABLE(errCnt = RADIO_CTS_TIMEOUT, U16, SEG_DATA);
 802d480:	f242 7310 	movw	r3, #10000	; 0x2710
 802d484:	60bb      	str	r3, [r7, #8]

  while (errCnt != 0)      //wait until radio IC is ready with the data
 802d486:	e01b      	b.n	802d4c0 <radio_comm_GetResp+0x50>
  {
    radio_hal_ClearNsel();
 802d488:	f000 f8f8 	bl	802d67c <radio_hal_ClearNsel>
    radio_hal_SpiWriteByte(0x44);    //read CMD buffer
 802d48c:	2044      	movs	r0, #68	; 0x44
 802d48e:	f000 f97b 	bl	802d788 <radio_hal_SpiWriteByte>
    ctsVal = radio_hal_SpiReadByte();
 802d492:	f000 f986 	bl	802d7a2 <radio_hal_SpiReadByte>
 802d496:	4603      	mov	r3, r0
 802d498:	73fb      	strb	r3, [r7, #15]
    if (ctsVal == 0xFF)
 802d49a:	7bfb      	ldrb	r3, [r7, #15]
 802d49c:	2bff      	cmp	r3, #255	; 0xff
 802d49e:	d10a      	bne.n	802d4b6 <radio_comm_GetResp+0x46>
    {
      if (byteCount)
 802d4a0:	79fb      	ldrb	r3, [r7, #7]
 802d4a2:	2b00      	cmp	r3, #0
 802d4a4:	d004      	beq.n	802d4b0 <radio_comm_GetResp+0x40>
      {
        radio_hal_SpiReadData(byteCount, pData);
 802d4a6:	79fb      	ldrb	r3, [r7, #7]
 802d4a8:	6839      	ldr	r1, [r7, #0]
 802d4aa:	4618      	mov	r0, r3
 802d4ac:	f000 f990 	bl	802d7d0 <radio_hal_SpiReadData>
      }
      radio_hal_SetNsel();
 802d4b0:	f000 f8f0 	bl	802d694 <radio_hal_SetNsel>
      break;
 802d4b4:	e007      	b.n	802d4c6 <radio_comm_GetResp+0x56>
    }
    radio_hal_SetNsel();
 802d4b6:	f000 f8ed 	bl	802d694 <radio_hal_SetNsel>
    errCnt--;
 802d4ba:	68bb      	ldr	r3, [r7, #8]
 802d4bc:	3b01      	subs	r3, #1
 802d4be:	60bb      	str	r3, [r7, #8]
  while (errCnt != 0)      //wait until radio IC is ready with the data
 802d4c0:	68bb      	ldr	r3, [r7, #8]
 802d4c2:	2b00      	cmp	r3, #0
 802d4c4:	d1e0      	bne.n	802d488 <radio_comm_GetResp+0x18>
  }

  if (errCnt == 0)
 802d4c6:	68bb      	ldr	r3, [r7, #8]
 802d4c8:	2b00      	cmp	r3, #0
 802d4ca:	d100      	bne.n	802d4ce <radio_comm_GetResp+0x5e>
  {
    while(1)
 802d4cc:	e7fe      	b.n	802d4cc <radio_comm_GetResp+0x5c>
        RADIO_COMM_ERROR_CALLBACK();
      #endif
    }
  }

  if (ctsVal == 0xFF)
 802d4ce:	7bfb      	ldrb	r3, [r7, #15]
 802d4d0:	2bff      	cmp	r3, #255	; 0xff
 802d4d2:	d102      	bne.n	802d4da <radio_comm_GetResp+0x6a>
  {
    ctsWentHigh = 1;
 802d4d4:	4b03      	ldr	r3, [pc, #12]	; (802d4e4 <radio_comm_GetResp+0x74>)
 802d4d6:	2201      	movs	r2, #1
 802d4d8:	701a      	strb	r2, [r3, #0]
  }

  return ctsVal;
 802d4da:	7bfb      	ldrb	r3, [r7, #15]
}
 802d4dc:	4618      	mov	r0, r3
 802d4de:	3710      	adds	r7, #16
 802d4e0:	46bd      	mov	sp, r7
 802d4e2:	bd80      	pop	{r7, pc}
 802d4e4:	20001374 	.word	0x20001374

0802d4e8 <radio_comm_SendCmd>:
 *
 * @param byteCount     Number of bytes in the command to send to the radio device
 * @param pData         Pointer to the command to send.
 */
void radio_comm_SendCmd(U8 byteCount, U8* pData)
{
 802d4e8:	b580      	push	{r7, lr}
 802d4ea:	b082      	sub	sp, #8
 802d4ec:	af00      	add	r7, sp, #0
 802d4ee:	4603      	mov	r3, r0
 802d4f0:	6039      	str	r1, [r7, #0]
 802d4f2:	71fb      	strb	r3, [r7, #7]
    while (!ctsWentHigh)
 802d4f4:	e001      	b.n	802d4fa <radio_comm_SendCmd+0x12>
    {
        radio_comm_PollCTS();
 802d4f6:	f000 f86b 	bl	802d5d0 <radio_comm_PollCTS>
    while (!ctsWentHigh)
 802d4fa:	4b0a      	ldr	r3, [pc, #40]	; (802d524 <radio_comm_SendCmd+0x3c>)
 802d4fc:	781b      	ldrb	r3, [r3, #0]
 802d4fe:	2b00      	cmp	r3, #0
 802d500:	d0f9      	beq.n	802d4f6 <radio_comm_SendCmd+0xe>
    }
    radio_hal_ClearNsel();
 802d502:	f000 f8bb 	bl	802d67c <radio_hal_ClearNsel>
    radio_hal_SpiWriteData(byteCount, pData);
 802d506:	79fb      	ldrb	r3, [r7, #7]
 802d508:	6839      	ldr	r1, [r7, #0]
 802d50a:	4618      	mov	r0, r3
 802d50c:	f000 f951 	bl	802d7b2 <radio_hal_SpiWriteData>
    radio_hal_SetNsel();
 802d510:	f000 f8c0 	bl	802d694 <radio_hal_SetNsel>
    ctsWentHigh = 0;
 802d514:	4b03      	ldr	r3, [pc, #12]	; (802d524 <radio_comm_SendCmd+0x3c>)
 802d516:	2200      	movs	r2, #0
 802d518:	701a      	strb	r2, [r3, #0]
}
 802d51a:	bf00      	nop
 802d51c:	3708      	adds	r7, #8
 802d51e:	46bd      	mov	sp, r7
 802d520:	bd80      	pop	{r7, pc}
 802d522:	bf00      	nop
 802d524:	20001374 	.word	0x20001374

0802d528 <radio_comm_ReadData>:
 * @param pollCts       Set to poll CTS
 * @param byteCount     Number of bytes to get from the radio chip.
 * @param pData         Pointer to where to put the data.
 */
void radio_comm_ReadData(U8 cmd, BIT pollCts, U8 byteCount, U8* pData)
{
 802d528:	b580      	push	{r7, lr}
 802d52a:	b082      	sub	sp, #8
 802d52c:	af00      	add	r7, sp, #0
 802d52e:	603b      	str	r3, [r7, #0]
 802d530:	4603      	mov	r3, r0
 802d532:	71fb      	strb	r3, [r7, #7]
 802d534:	460b      	mov	r3, r1
 802d536:	71bb      	strb	r3, [r7, #6]
 802d538:	4613      	mov	r3, r2
 802d53a:	717b      	strb	r3, [r7, #5]
    if(pollCts)
 802d53c:	79bb      	ldrb	r3, [r7, #6]
 802d53e:	2b00      	cmp	r3, #0
 802d540:	d006      	beq.n	802d550 <radio_comm_ReadData+0x28>
    {
        while(!ctsWentHigh)
 802d542:	e001      	b.n	802d548 <radio_comm_ReadData+0x20>
        {
            radio_comm_PollCTS();
 802d544:	f000 f844 	bl	802d5d0 <radio_comm_PollCTS>
        while(!ctsWentHigh)
 802d548:	4b0b      	ldr	r3, [pc, #44]	; (802d578 <radio_comm_ReadData+0x50>)
 802d54a:	781b      	ldrb	r3, [r3, #0]
 802d54c:	2b00      	cmp	r3, #0
 802d54e:	d0f9      	beq.n	802d544 <radio_comm_ReadData+0x1c>
        }
    }
    radio_hal_ClearNsel();
 802d550:	f000 f894 	bl	802d67c <radio_hal_ClearNsel>
    radio_hal_SpiWriteByte(cmd);
 802d554:	79fb      	ldrb	r3, [r7, #7]
 802d556:	4618      	mov	r0, r3
 802d558:	f000 f916 	bl	802d788 <radio_hal_SpiWriteByte>
    radio_hal_SpiReadData(byteCount, pData);
 802d55c:	797b      	ldrb	r3, [r7, #5]
 802d55e:	6839      	ldr	r1, [r7, #0]
 802d560:	4618      	mov	r0, r3
 802d562:	f000 f935 	bl	802d7d0 <radio_hal_SpiReadData>
    radio_hal_SetNsel();
 802d566:	f000 f895 	bl	802d694 <radio_hal_SetNsel>
    ctsWentHigh = 0;
 802d56a:	4b03      	ldr	r3, [pc, #12]	; (802d578 <radio_comm_ReadData+0x50>)
 802d56c:	2200      	movs	r2, #0
 802d56e:	701a      	strb	r2, [r3, #0]
}
 802d570:	bf00      	nop
 802d572:	3708      	adds	r7, #8
 802d574:	46bd      	mov	sp, r7
 802d576:	bd80      	pop	{r7, pc}
 802d578:	20001374 	.word	0x20001374

0802d57c <radio_comm_WriteData>:
 * @param pollCts       Set to poll CTS
 * @param byteCount     Number of bytes to get from the radio chip
 * @param pData         Pointer to where to put the data
 */
void radio_comm_WriteData(U8 cmd, BIT pollCts, U8 byteCount, U8* pData)
{
 802d57c:	b580      	push	{r7, lr}
 802d57e:	b082      	sub	sp, #8
 802d580:	af00      	add	r7, sp, #0
 802d582:	603b      	str	r3, [r7, #0]
 802d584:	4603      	mov	r3, r0
 802d586:	71fb      	strb	r3, [r7, #7]
 802d588:	460b      	mov	r3, r1
 802d58a:	71bb      	strb	r3, [r7, #6]
 802d58c:	4613      	mov	r3, r2
 802d58e:	717b      	strb	r3, [r7, #5]
    if(pollCts)
 802d590:	79bb      	ldrb	r3, [r7, #6]
 802d592:	2b00      	cmp	r3, #0
 802d594:	d006      	beq.n	802d5a4 <radio_comm_WriteData+0x28>
    {
        while(!ctsWentHigh)
 802d596:	e001      	b.n	802d59c <radio_comm_WriteData+0x20>
        {
            radio_comm_PollCTS();
 802d598:	f000 f81a 	bl	802d5d0 <radio_comm_PollCTS>
        while(!ctsWentHigh)
 802d59c:	4b0b      	ldr	r3, [pc, #44]	; (802d5cc <radio_comm_WriteData+0x50>)
 802d59e:	781b      	ldrb	r3, [r3, #0]
 802d5a0:	2b00      	cmp	r3, #0
 802d5a2:	d0f9      	beq.n	802d598 <radio_comm_WriteData+0x1c>
        }
    }
    radio_hal_ClearNsel();
 802d5a4:	f000 f86a 	bl	802d67c <radio_hal_ClearNsel>
    radio_hal_SpiWriteByte(cmd);
 802d5a8:	79fb      	ldrb	r3, [r7, #7]
 802d5aa:	4618      	mov	r0, r3
 802d5ac:	f000 f8ec 	bl	802d788 <radio_hal_SpiWriteByte>
    radio_hal_SpiWriteData(byteCount, pData);
 802d5b0:	797b      	ldrb	r3, [r7, #5]
 802d5b2:	6839      	ldr	r1, [r7, #0]
 802d5b4:	4618      	mov	r0, r3
 802d5b6:	f000 f8fc 	bl	802d7b2 <radio_hal_SpiWriteData>
    radio_hal_SetNsel();
 802d5ba:	f000 f86b 	bl	802d694 <radio_hal_SetNsel>
    ctsWentHigh = 0;
 802d5be:	4b03      	ldr	r3, [pc, #12]	; (802d5cc <radio_comm_WriteData+0x50>)
 802d5c0:	2200      	movs	r2, #0
 802d5c2:	701a      	strb	r2, [r3, #0]
}
 802d5c4:	bf00      	nop
 802d5c6:	3708      	adds	r7, #8
 802d5c8:	46bd      	mov	sp, r7
 802d5ca:	bd80      	pop	{r7, pc}
 802d5cc:	20001374 	.word	0x20001374

0802d5d0 <radio_comm_PollCTS>:
 * Waits for CTS to be high
 *
 * @return CTS value
 */
U8 radio_comm_PollCTS(void)
{
 802d5d0:	b580      	push	{r7, lr}
 802d5d2:	af00      	add	r7, sp, #0
        /* Wait...*/
    }
    ctsWentHigh = 1;
    return 0xFF;
#else
    return radio_comm_GetResp(0, 0);
 802d5d4:	2100      	movs	r1, #0
 802d5d6:	2000      	movs	r0, #0
 802d5d8:	f7ff ff4a 	bl	802d470 <radio_comm_GetResp>
 802d5dc:	4603      	mov	r3, r0
#endif
}
 802d5de:	4618      	mov	r0, r3
 802d5e0:	bd80      	pop	{r7, pc}
	...

0802d5e4 <radio_comm_ClearCTS>:

/**
 * Clears the CTS state variable.
 */
void radio_comm_ClearCTS()
{
 802d5e4:	b480      	push	{r7}
 802d5e6:	af00      	add	r7, sp, #0
  ctsWentHigh = 0;
 802d5e8:	4b03      	ldr	r3, [pc, #12]	; (802d5f8 <radio_comm_ClearCTS+0x14>)
 802d5ea:	2200      	movs	r2, #0
 802d5ec:	701a      	strb	r2, [r3, #0]
}
 802d5ee:	bf00      	nop
 802d5f0:	46bd      	mov	sp, r7
 802d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d5f6:	4770      	bx	lr
 802d5f8:	20001374 	.word	0x20001374

0802d5fc <radio_comm_SendCmdGetResp>:
 * @param pRespData     Pointer to where to put the response data
 *
 * @return CTS value
 */
U8 radio_comm_SendCmdGetResp(U8 cmdByteCount, U8* pCmdData, U8 respByteCount, U8* pRespData)
{
 802d5fc:	b580      	push	{r7, lr}
 802d5fe:	b084      	sub	sp, #16
 802d600:	af00      	add	r7, sp, #0
 802d602:	60b9      	str	r1, [r7, #8]
 802d604:	607b      	str	r3, [r7, #4]
 802d606:	4603      	mov	r3, r0
 802d608:	73fb      	strb	r3, [r7, #15]
 802d60a:	4613      	mov	r3, r2
 802d60c:	73bb      	strb	r3, [r7, #14]
    radio_comm_SendCmd(cmdByteCount, pCmdData);
 802d60e:	7bfb      	ldrb	r3, [r7, #15]
 802d610:	68b9      	ldr	r1, [r7, #8]
 802d612:	4618      	mov	r0, r3
 802d614:	f7ff ff68 	bl	802d4e8 <radio_comm_SendCmd>
    return radio_comm_GetResp(respByteCount, pRespData);
 802d618:	7bbb      	ldrb	r3, [r7, #14]
 802d61a:	6879      	ldr	r1, [r7, #4]
 802d61c:	4618      	mov	r0, r3
 802d61e:	f7ff ff27 	bl	802d470 <radio_comm_GetResp>
 802d622:	4603      	mov	r3, r0
}
 802d624:	4618      	mov	r0, r3
 802d626:	3710      	adds	r7, #16
 802d628:	46bd      	mov	sp, r7
 802d62a:	bd80      	pop	{r7, pc}

0802d62c <radio_hal_AssertShutdown>:
                /* ======================================= *
                 *     P U B L I C   F U N C T I O N S     *
                 * ======================================= */

void radio_hal_AssertShutdown(void)
{
 802d62c:	b580      	push	{r7, lr}
 802d62e:	af00      	add	r7, sp, #0
//  PWRDN = 1;
	/*
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_SET);
	/*/
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PWR_RF_GPIO_Port, PWR_RF_Pin, GPIO_PIN_RESET);
 802d630:	2200      	movs	r2, #0
 802d632:	2104      	movs	r1, #4
 802d634:	4806      	ldr	r0, [pc, #24]	; (802d650 <radio_hal_AssertShutdown+0x24>)
 802d636:	f7f5 ff71 	bl	802351c <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(PWR_RF_GPIO_Port, PWR_RF_Pin, GPIO_PIN_SET);
  HAL_Delay(1);
 802d63a:	2001      	movs	r0, #1
 802d63c:	f7f4 faa0 	bl	8021b80 <HAL_Delay>
  HAL_GPIO_WritePin(TRN_RST_GPIO_Port,TRN_RST_Pin,GPIO_PIN_SET);
 802d640:	2201      	movs	r2, #1
 802d642:	2120      	movs	r1, #32
 802d644:	4803      	ldr	r0, [pc, #12]	; (802d654 <radio_hal_AssertShutdown+0x28>)
 802d646:	f7f5 ff69 	bl	802351c <HAL_GPIO_WritePin>
	//	*/
}
 802d64a:	bf00      	nop
 802d64c:	bd80      	pop	{r7, pc}
 802d64e:	bf00      	nop
 802d650:	40021000 	.word	0x40021000
 802d654:	40020800 	.word	0x40020800

0802d658 <radio_hal_DeassertShutdown>:

void radio_hal_DeassertShutdown(void)
{
 802d658:	b580      	push	{r7, lr}
 802d65a:	af00      	add	r7, sp, #0
//  PWRDN = 0;
	/*
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
	/*/
	HAL_GPIO_WritePin(PWR_RF_GPIO_Port, PWR_RF_Pin, GPIO_PIN_SET);
 802d65c:	2201      	movs	r2, #1
 802d65e:	2104      	movs	r1, #4
 802d660:	4804      	ldr	r0, [pc, #16]	; (802d674 <radio_hal_DeassertShutdown+0x1c>)
 802d662:	f7f5 ff5b 	bl	802351c <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(TRN_RST_GPIO_Port,TRN_RST_Pin,GPIO_PIN_RESET);
 802d666:	2200      	movs	r2, #0
 802d668:	2120      	movs	r1, #32
 802d66a:	4803      	ldr	r0, [pc, #12]	; (802d678 <radio_hal_DeassertShutdown+0x20>)
 802d66c:	f7f5 ff56 	bl	802351c <HAL_GPIO_WritePin>
	//	*/
}
 802d670:	bf00      	nop
 802d672:	bd80      	pop	{r7, pc}
 802d674:	40021000 	.word	0x40021000
 802d678:	40020800 	.word	0x40020800

0802d67c <radio_hal_ClearNsel>:

void radio_hal_ClearNsel(void)
{
 802d67c:	b580      	push	{r7, lr}
 802d67e:	af00      	add	r7, sp, #0
//    RF_NSEL = 0;
    HAL_GPIO_WritePin(SPI_CSN_GPIO_Port,SPI_CSN_Pin,GPIO_PIN_RESET);
 802d680:	2200      	movs	r2, #0
 802d682:	2110      	movs	r1, #16
 802d684:	4802      	ldr	r0, [pc, #8]	; (802d690 <radio_hal_ClearNsel+0x14>)
 802d686:	f7f5 ff49 	bl	802351c <HAL_GPIO_WritePin>
}
 802d68a:	bf00      	nop
 802d68c:	bd80      	pop	{r7, pc}
 802d68e:	bf00      	nop
 802d690:	40020000 	.word	0x40020000

0802d694 <radio_hal_SetNsel>:

void radio_hal_SetNsel(void)
{
 802d694:	b580      	push	{r7, lr}
 802d696:	af00      	add	r7, sp, #0
//    RF_NSEL = 1;
     HAL_GPIO_WritePin(SPI_CSN_GPIO_Port,SPI_CSN_Pin,GPIO_PIN_SET);
 802d698:	2201      	movs	r2, #1
 802d69a:	2110      	movs	r1, #16
 802d69c:	4802      	ldr	r0, [pc, #8]	; (802d6a8 <radio_hal_SetNsel+0x14>)
 802d69e:	f7f5 ff3d 	bl	802351c <HAL_GPIO_WritePin>
}
 802d6a2:	bf00      	nop
 802d6a4:	bd80      	pop	{r7, pc}
 802d6a6:	bf00      	nop
 802d6a8:	40020000 	.word	0x40020000

0802d6ac <radio_hal_NirqLevel>:

BIT radio_hal_NirqLevel(void)
{
 802d6ac:	b580      	push	{r7, lr}
 802d6ae:	af00      	add	r7, sp, #0
//	return (GPIO_PinState) RF_NIRQ;
    return HAL_GPIO_ReadPin(RF_INT_GPIO_Port,RF_INT_Pin);
 802d6b0:	2110      	movs	r1, #16
 802d6b2:	4803      	ldr	r0, [pc, #12]	; (802d6c0 <radio_hal_NirqLevel+0x14>)
 802d6b4:	f7f5 ff1a 	bl	80234ec <HAL_GPIO_ReadPin>
 802d6b8:	4603      	mov	r3, r0
}
 802d6ba:	4618      	mov	r0, r3
 802d6bc:	bd80      	pop	{r7, pc}
 802d6be:	bf00      	nop
 802d6c0:	40020800 	.word	0x40020800

0802d6c4 <SpiReadWrite>:
  
}


U8 SpiReadWrite( U8 byteToWrite )
{
 802d6c4:	b580      	push	{r7, lr}
 802d6c6:	b0a6      	sub	sp, #152	; 0x98
 802d6c8:	af02      	add	r7, sp, #8
 802d6ca:	4603      	mov	r3, r0
 802d6cc:	71fb      	strb	r3, [r7, #7]
	U8 wdata[64];
	U8 rdata[64];

	uint16_t byteCount;

	wdata[0] = byteToWrite;	//	0xFF;
 802d6ce:	79fb      	ldrb	r3, [r7, #7]
 802d6d0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	rdata[0] = 0;
 802d6d4:	2300      	movs	r3, #0
 802d6d6:	733b      	strb	r3, [r7, #12]

	byteCount = 1;
 802d6d8:	2301      	movs	r3, #1
 802d6da:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	}

	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
#else

	HAL_SPI_TransmitReceive(&hspi1, wdata, rdata, byteCount,HAL_MAX_DELAY);
 802d6de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 802d6e2:	f107 020c 	add.w	r2, r7, #12
 802d6e6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802d6ea:	f04f 30ff 	mov.w	r0, #4294967295
 802d6ee:	9000      	str	r0, [sp, #0]
 802d6f0:	4803      	ldr	r0, [pc, #12]	; (802d700 <SpiReadWrite+0x3c>)
 802d6f2:	f7fa f98b 	bl	8027a0c <HAL_SPI_TransmitReceive>

#endif

	return rdata[0];
 802d6f6:	7b3b      	ldrb	r3, [r7, #12]
}
 802d6f8:	4618      	mov	r0, r3
 802d6fa:	3790      	adds	r7, #144	; 0x90
 802d6fc:	46bd      	mov	sp, r7
 802d6fe:	bd80      	pop	{r7, pc}
 802d700:	20000ff4 	.word	0x20000ff4

0802d704 <SpiWriteData>:


U8 *SpiWriteData( U16 byteCount, U8 *byteToWrite )
{
 802d704:	b580      	push	{r7, lr}
 802d706:	b096      	sub	sp, #88	; 0x58
 802d708:	af02      	add	r7, sp, #8
 802d70a:	6078      	str	r0, [r7, #4]
 802d70c:	6039      	str	r1, [r7, #0]
	U8 rdata[64];
	U8 *wdata = byteToWrite;
 802d70e:	683b      	ldr	r3, [r7, #0]
 802d710:	64fb      	str	r3, [r7, #76]	; 0x4c

	rdata[0] = 0;
 802d712:	2300      	movs	r3, #0
 802d714:	733b      	strb	r3, [r7, #12]

	memset( rdata, 0, sizeof(rdata) );
 802d716:	f107 030c 	add.w	r3, r7, #12
 802d71a:	2240      	movs	r2, #64	; 0x40
 802d71c:	2100      	movs	r1, #0
 802d71e:	4618      	mov	r0, r3
 802d720:	f009 fcd0 	bl	80370c4 <memset>
	}

	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
#else

	HAL_SPI_TransmitReceive(&hspi1, wdata, rdata, byteCount,HAL_MAX_DELAY);
 802d724:	687b      	ldr	r3, [r7, #4]
 802d726:	b29b      	uxth	r3, r3
 802d728:	f107 020c 	add.w	r2, r7, #12
 802d72c:	f04f 31ff 	mov.w	r1, #4294967295
 802d730:	9100      	str	r1, [sp, #0]
 802d732:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 802d734:	4803      	ldr	r0, [pc, #12]	; (802d744 <SpiWriteData+0x40>)
 802d736:	f7fa f969 	bl	8027a0c <HAL_SPI_TransmitReceive>

#endif

	return byteToWrite;
 802d73a:	683b      	ldr	r3, [r7, #0]
}
 802d73c:	4618      	mov	r0, r3
 802d73e:	3750      	adds	r7, #80	; 0x50
 802d740:	46bd      	mov	sp, r7
 802d742:	bd80      	pop	{r7, pc}
 802d744:	20000ff4 	.word	0x20000ff4

0802d748 <SpiReadData>:


U8 *SpiReadData( U16 byteCount, U8 *byteToWrite )
{
 802d748:	b580      	push	{r7, lr}
 802d74a:	b096      	sub	sp, #88	; 0x58
 802d74c:	af02      	add	r7, sp, #8
 802d74e:	6078      	str	r0, [r7, #4]
 802d750:	6039      	str	r1, [r7, #0]

	U8 wdata[64];
	U8 *rdata = byteToWrite;
 802d752:	683b      	ldr	r3, [r7, #0]
 802d754:	64fb      	str	r3, [r7, #76]	; 0x4c

	memset(wdata, 0xFF, byteCount);
 802d756:	f107 030c 	add.w	r3, r7, #12
 802d75a:	687a      	ldr	r2, [r7, #4]
 802d75c:	21ff      	movs	r1, #255	; 0xff
 802d75e:	4618      	mov	r0, r3
 802d760:	f009 fcb0 	bl	80370c4 <memset>
	}

	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY){}
#else

	HAL_SPI_TransmitReceive(&hspi1, wdata, rdata, byteCount,HAL_MAX_DELAY);
 802d764:	687b      	ldr	r3, [r7, #4]
 802d766:	b29b      	uxth	r3, r3
 802d768:	f107 010c 	add.w	r1, r7, #12
 802d76c:	f04f 32ff 	mov.w	r2, #4294967295
 802d770:	9200      	str	r2, [sp, #0]
 802d772:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802d774:	4803      	ldr	r0, [pc, #12]	; (802d784 <SpiReadData+0x3c>)
 802d776:	f7fa f949 	bl	8027a0c <HAL_SPI_TransmitReceive>

#endif

	return byteToWrite;
 802d77a:	683b      	ldr	r3, [r7, #0]
}
 802d77c:	4618      	mov	r0, r3
 802d77e:	3750      	adds	r7, #80	; 0x50
 802d780:	46bd      	mov	sp, r7
 802d782:	bd80      	pop	{r7, pc}
 802d784:	20000ff4 	.word	0x20000ff4

0802d788 <radio_hal_SpiWriteByte>:

void radio_hal_SpiWriteByte(U8 byteToWrite)
{
 802d788:	b580      	push	{r7, lr}
 802d78a:	b082      	sub	sp, #8
 802d78c:	af00      	add	r7, sp, #0
 802d78e:	4603      	mov	r3, r0
 802d790:	71fb      	strb	r3, [r7, #7]
#if (defined SILABS_PLATFORM_RFSTICK) || (defined SILABS_PLATFORM_LCDBB) || (defined SILABS_PLATFORM_WMB)
  bSpi_ReadWriteSpi1(byteToWrite);
#else
  SpiReadWrite(byteToWrite);
 802d792:	79fb      	ldrb	r3, [r7, #7]
 802d794:	4618      	mov	r0, r3
 802d796:	f7ff ff95 	bl	802d6c4 <SpiReadWrite>
#endif
}
 802d79a:	bf00      	nop
 802d79c:	3708      	adds	r7, #8
 802d79e:	46bd      	mov	sp, r7
 802d7a0:	bd80      	pop	{r7, pc}

0802d7a2 <radio_hal_SpiReadByte>:

U8 radio_hal_SpiReadByte(void)
{
 802d7a2:	b580      	push	{r7, lr}
 802d7a4:	af00      	add	r7, sp, #0
#if (defined SILABS_PLATFORM_RFSTICK) || (defined SILABS_PLATFORM_LCDBB) || (defined SILABS_PLATFORM_WMB)
  return bSpi_ReadWriteSpi1(0xFF);
#else
  return SpiReadWrite(0xFF);
 802d7a6:	20ff      	movs	r0, #255	; 0xff
 802d7a8:	f7ff ff8c 	bl	802d6c4 <SpiReadWrite>
 802d7ac:	4603      	mov	r3, r0
#endif
}
 802d7ae:	4618      	mov	r0, r3
 802d7b0:	bd80      	pop	{r7, pc}

0802d7b2 <radio_hal_SpiWriteData>:

void radio_hal_SpiWriteData(U8 byteCount, U8* pData)
{
 802d7b2:	b580      	push	{r7, lr}
 802d7b4:	b082      	sub	sp, #8
 802d7b6:	af00      	add	r7, sp, #0
 802d7b8:	4603      	mov	r3, r0
 802d7ba:	6039      	str	r1, [r7, #0]
 802d7bc:	71fb      	strb	r3, [r7, #7]
#if (defined SILABS_PLATFORM_RFSTICK) || (defined SILABS_PLATFORM_LCDBB) || (defined SILABS_PLATFORM_WMB)
  vSpi_WriteDataSpi1(byteCount, pData);
#else
  SpiWriteData(byteCount, pData);
 802d7be:	79fb      	ldrb	r3, [r7, #7]
 802d7c0:	6839      	ldr	r1, [r7, #0]
 802d7c2:	4618      	mov	r0, r3
 802d7c4:	f7ff ff9e 	bl	802d704 <SpiWriteData>
#endif
}
 802d7c8:	bf00      	nop
 802d7ca:	3708      	adds	r7, #8
 802d7cc:	46bd      	mov	sp, r7
 802d7ce:	bd80      	pop	{r7, pc}

0802d7d0 <radio_hal_SpiReadData>:

void radio_hal_SpiReadData(U8 byteCount, U8* pData)
{
 802d7d0:	b580      	push	{r7, lr}
 802d7d2:	b082      	sub	sp, #8
 802d7d4:	af00      	add	r7, sp, #0
 802d7d6:	4603      	mov	r3, r0
 802d7d8:	6039      	str	r1, [r7, #0]
 802d7da:	71fb      	strb	r3, [r7, #7]
#if (defined SILABS_PLATFORM_RFSTICK) || (defined SILABS_PLATFORM_LCDBB) || (defined SILABS_PLATFORM_WMB)
  vSpi_ReadDataSpi1(byteCount, pData);
#else
  SpiReadData(byteCount, pData);
 802d7dc:	79fb      	ldrb	r3, [r7, #7]
 802d7de:	6839      	ldr	r1, [r7, #0]
 802d7e0:	4618      	mov	r0, r3
 802d7e2:	f7ff ffb1 	bl	802d748 <SpiReadData>
#endif
}
 802d7e6:	bf00      	nop
 802d7e8:	3708      	adds	r7, #8
 802d7ea:	46bd      	mov	sp, r7
 802d7ec:	bd80      	pop	{r7, pc}
	...

0802d7f0 <Dump>:
/*------------------------------------------------------------------------*/

//========================================================================
void Dump( const char *sTitle, const char *sBuf, int nSize )
//========================================================================
{
 802d7f0:	b580      	push	{r7, lr}
 802d7f2:	b086      	sub	sp, #24
 802d7f4:	af00      	add	r7, sp, #0
 802d7f6:	60f8      	str	r0, [r7, #12]
 802d7f8:	60b9      	str	r1, [r7, #8]
 802d7fa:	607a      	str	r2, [r7, #4]
	if ( GetDbg() < 2 )	return;
 802d7fc:	f003 fb90 	bl	8030f20 <GetDbg>
 802d800:	4603      	mov	r3, r0
 802d802:	2b01      	cmp	r3, #1
 802d804:	dd19      	ble.n	802d83a <Dump+0x4a>

	printf( "%s : ", sTitle );
 802d806:	68f9      	ldr	r1, [r7, #12]
 802d808:	480e      	ldr	r0, [pc, #56]	; (802d844 <Dump+0x54>)
 802d80a:	f009 fd43 	bl	8037294 <iprintf>

	int i;

	for( i = 0; i < nSize; i++ )
 802d80e:	2300      	movs	r3, #0
 802d810:	617b      	str	r3, [r7, #20]
 802d812:	e00a      	b.n	802d82a <Dump+0x3a>
	{
		printf("%02X ", sBuf[i]);
 802d814:	697b      	ldr	r3, [r7, #20]
 802d816:	68ba      	ldr	r2, [r7, #8]
 802d818:	4413      	add	r3, r2
 802d81a:	781b      	ldrb	r3, [r3, #0]
 802d81c:	4619      	mov	r1, r3
 802d81e:	480a      	ldr	r0, [pc, #40]	; (802d848 <Dump+0x58>)
 802d820:	f009 fd38 	bl	8037294 <iprintf>
	for( i = 0; i < nSize; i++ )
 802d824:	697b      	ldr	r3, [r7, #20]
 802d826:	3301      	adds	r3, #1
 802d828:	617b      	str	r3, [r7, #20]
 802d82a:	697a      	ldr	r2, [r7, #20]
 802d82c:	687b      	ldr	r3, [r7, #4]
 802d82e:	429a      	cmp	r2, r3
 802d830:	dbf0      	blt.n	802d814 <Dump+0x24>
	}

	printf("\n");
 802d832:	200a      	movs	r0, #10
 802d834:	f009 fd46 	bl	80372c4 <putchar>
 802d838:	e000      	b.n	802d83c <Dump+0x4c>
	if ( GetDbg() < 2 )	return;
 802d83a:	bf00      	nop
}
 802d83c:	3718      	adds	r7, #24
 802d83e:	46bd      	mov	sp, r7
 802d840:	bd80      	pop	{r7, pc}
 802d842:	bf00      	nop
 802d844:	08039748 	.word	0x08039748
 802d848:	08039750 	.word	0x08039750

0802d84c <InitProcPkt>:
}

//========================================================================
int	InitProcPkt ( void )
//========================================================================
{
 802d84c:	b580      	push	{r7, lr}
 802d84e:	af00      	add	r7, sp, #0
	vRadio_StartRX(pRadioConfiguration->Radio_ChannelNumber,0u);

#else

	//  RF 수신 Start
	g_nChRx = GetChRx();	//	ChTS1_1 + g_idxTrainSet * 2 + ((g_nCarNo+1) % 2);	// 현재 호차 채널
 802d850:	f004 ffe4 	bl	803281c <GetChRx>
 802d854:	4603      	mov	r3, r0
 802d856:	4a07      	ldr	r2, [pc, #28]	; (802d874 <InitProcPkt+0x28>)
 802d858:	6013      	str	r3, [r2, #0]

	vRadio_StartRX(
 802d85a:	4b06      	ldr	r3, [pc, #24]	; (802d874 <InitProcPkt+0x28>)
 802d85c:	681b      	ldr	r3, [r3, #0]
 802d85e:	b2da      	uxtb	r2, r3
		g_nChRx,	//g_idxTrainSet,	//		pRadioConfiguration->Radio_ChannelNumber,
		pRadioConfiguration->Radio_PacketLength );
 802d860:	4b05      	ldr	r3, [pc, #20]	; (802d878 <InitProcPkt+0x2c>)
 802d862:	681b      	ldr	r3, [r3, #0]
	vRadio_StartRX(
 802d864:	795b      	ldrb	r3, [r3, #5]
 802d866:	4619      	mov	r1, r3
 802d868:	4610      	mov	r0, r2
 802d86a:	f7ff fd99 	bl	802d3a0 <vRadio_StartRX>

#endif

	return TRUE;
 802d86e:	2301      	movs	r3, #1
}
 802d870:	4618      	mov	r0, r3
 802d872:	bd80      	pop	{r7, pc}
 802d874:	20000be8 	.word	0x20000be8
 802d878:	200004f0 	.word	0x200004f0

0802d87c <_ChkDropPktSeq>:

//========================================================================
int _ChkDropPktSeq( uint8_t _nRxSeq, uint8_t _currSeq )
//========================================================================
{
 802d87c:	b480      	push	{r7}
 802d87e:	b085      	sub	sp, #20
 802d880:	af00      	add	r7, sp, #0
 802d882:	4603      	mov	r3, r0
 802d884:	460a      	mov	r2, r1
 802d886:	71fb      	strb	r3, [r7, #7]
 802d888:	4613      	mov	r3, r2
 802d88a:	71bb      	strb	r3, [r7, #6]
	//	현재 받은 Packet Sequence가 새로운 패킷인지 확인.
	//		-> 이전 Packet인 경우 Drop

	if ( _nRxSeq == _currSeq )		//	Seq가 같은 Packet 수신시 Drop
 802d88c:	79fa      	ldrb	r2, [r7, #7]
 802d88e:	79bb      	ldrb	r3, [r7, #6]
 802d890:	429a      	cmp	r2, r3
 802d892:	d101      	bne.n	802d898 <_ChkDropPktSeq+0x1c>
	{
		return 1;	//	Pkt Drop
 802d894:	2301      	movs	r3, #1
 802d896:	e029      	b.n	802d8ec <_ChkDropPktSeq+0x70>
	}

	//	Rx Packet이 currPkt보다 1크면 처리.
	uint8_t currSeq = _currSeq;
 802d898:	79bb      	ldrb	r3, [r7, #6]
 802d89a:	73fb      	strb	r3, [r7, #15]
	if ( ++currSeq == 0 )	currSeq++;
 802d89c:	7bfb      	ldrb	r3, [r7, #15]
 802d89e:	3301      	adds	r3, #1
 802d8a0:	73fb      	strb	r3, [r7, #15]
 802d8a2:	7bfb      	ldrb	r3, [r7, #15]
 802d8a4:	2b00      	cmp	r3, #0
 802d8a6:	d102      	bne.n	802d8ae <_ChkDropPktSeq+0x32>
 802d8a8:	7bfb      	ldrb	r3, [r7, #15]
 802d8aa:	3301      	adds	r3, #1
 802d8ac:	73fb      	strb	r3, [r7, #15]
	if ( _nRxSeq == currSeq )		//	Seq가 같은 Packet 수신시 Drop
 802d8ae:	79fa      	ldrb	r2, [r7, #7]
 802d8b0:	7bfb      	ldrb	r3, [r7, #15]
 802d8b2:	429a      	cmp	r2, r3
 802d8b4:	d101      	bne.n	802d8ba <_ChkDropPktSeq+0x3e>
	{
		return 0;	//	Valid Pkt
 802d8b6:	2300      	movs	r3, #0
 802d8b8:	e018      	b.n	802d8ec <_ChkDropPktSeq+0x70>
	}

	//	현재 패킷보다 이전에 받은 5개 패킷은 Drop
	for( int i = 0; i < 5; i++ )
 802d8ba:	2300      	movs	r3, #0
 802d8bc:	60bb      	str	r3, [r7, #8]
 802d8be:	e011      	b.n	802d8e4 <_ChkDropPktSeq+0x68>
	{
		if ( ++_nRxSeq == 0 )	_nRxSeq++;
 802d8c0:	79fb      	ldrb	r3, [r7, #7]
 802d8c2:	3301      	adds	r3, #1
 802d8c4:	71fb      	strb	r3, [r7, #7]
 802d8c6:	79fb      	ldrb	r3, [r7, #7]
 802d8c8:	2b00      	cmp	r3, #0
 802d8ca:	d102      	bne.n	802d8d2 <_ChkDropPktSeq+0x56>
 802d8cc:	79fb      	ldrb	r3, [r7, #7]
 802d8ce:	3301      	adds	r3, #1
 802d8d0:	71fb      	strb	r3, [r7, #7]
		if ( _nRxSeq == _currSeq )		//	Seq가 같은 Packet 수신시 Drop
 802d8d2:	79fa      	ldrb	r2, [r7, #7]
 802d8d4:	79bb      	ldrb	r3, [r7, #6]
 802d8d6:	429a      	cmp	r2, r3
 802d8d8:	d101      	bne.n	802d8de <_ChkDropPktSeq+0x62>
		{
			return 1;	//	Pkt Drop
 802d8da:	2301      	movs	r3, #1
 802d8dc:	e006      	b.n	802d8ec <_ChkDropPktSeq+0x70>
	for( int i = 0; i < 5; i++ )
 802d8de:	68bb      	ldr	r3, [r7, #8]
 802d8e0:	3301      	adds	r3, #1
 802d8e2:	60bb      	str	r3, [r7, #8]
 802d8e4:	68bb      	ldr	r3, [r7, #8]
 802d8e6:	2b04      	cmp	r3, #4
 802d8e8:	ddea      	ble.n	802d8c0 <_ChkDropPktSeq+0x44>
		}
	}

	return 0;	//	Valid Pkt
 802d8ea:	2300      	movs	r3, #0
}
 802d8ec:	4618      	mov	r0, r3
 802d8ee:	3714      	adds	r7, #20
 802d8f0:	46bd      	mov	sp, r7
 802d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d8f6:	4770      	bx	lr

0802d8f8 <ProcPktHdr1>:

//========================================================================
int ProcPktHdr1( const RFMPkt *pRFPkt, int nSize  )
//========================================================================
{
 802d8f8:	b580      	push	{r7, lr}
 802d8fa:	b082      	sub	sp, #8
 802d8fc:	af00      	add	r7, sp, #0
 802d8fe:	6078      	str	r0, [r7, #4]
 802d900:	6039      	str	r1, [r7, #0]

#if defined(USE_HOPPING)
	//========================================================================
	//	Packet Filtering
	//		- Pkt 처리 여부 확인.
	if	(	pRFPkt->hdr.nSeq != 0 &&
 802d902:	687b      	ldr	r3, [r7, #4]
 802d904:	789b      	ldrb	r3, [r3, #2]
 802d906:	2b00      	cmp	r3, #0
 802d908:	d016      	beq.n	802d938 <ProcPktHdr1+0x40>
			(
//				(pRFPkt->hdr.nSeq == g_nPktSeq)		//	Seq가 같은 Packet 수신시 Drop
				_ChkDropPktSeq(pRFPkt->hdr.nSeq, g_nPktSeq)		//	Seq가 같은 Packet 수신시 Drop
 802d90a:	687b      	ldr	r3, [r7, #4]
 802d90c:	789b      	ldrb	r3, [r3, #2]
 802d90e:	4a11      	ldr	r2, [pc, #68]	; (802d954 <ProcPktHdr1+0x5c>)
 802d910:	7812      	ldrb	r2, [r2, #0]
 802d912:	4611      	mov	r1, r2
 802d914:	4618      	mov	r0, r3
 802d916:	f7ff ffb1 	bl	802d87c <_ChkDropPktSeq>
 802d91a:	4603      	mov	r3, r0
	if	(	pRFPkt->hdr.nSeq != 0 &&
 802d91c:	2b00      	cmp	r3, #0
 802d91e:	d104      	bne.n	802d92a <ProcPktHdr1+0x32>
				|| GetRFMMode() == RFMModeTx		//	송신모드에서는 Packet Drop
 802d920:	f004 ff02 	bl	8032728 <GetRFMMode>
 802d924:	4603      	mov	r3, r0
 802d926:	2b01      	cmp	r3, #1
 802d928:	d106      	bne.n	802d938 <ProcPktHdr1+0x40>
			)
		)
	{
		//	이미 처리된 Packet Skip.
		nDropPkt++;
 802d92a:	4b0b      	ldr	r3, [pc, #44]	; (802d958 <ProcPktHdr1+0x60>)
 802d92c:	681b      	ldr	r3, [r3, #0]
 802d92e:	3301      	adds	r3, #1
 802d930:	4a09      	ldr	r2, [pc, #36]	; (802d958 <ProcPktHdr1+0x60>)
 802d932:	6013      	str	r3, [r2, #0]
		return 0;		//	Skip
 802d934:	2300      	movs	r3, #0
 802d936:	e008      	b.n	802d94a <ProcPktHdr1+0x52>
		//==========================================================================
	}

#endif	//	defined(USE_CH_ISO_DEV)

	if ( pRFPkt->hdr.nSeq != 0 )
 802d938:	687b      	ldr	r3, [r7, #4]
 802d93a:	789b      	ldrb	r3, [r3, #2]
 802d93c:	2b00      	cmp	r3, #0
 802d93e:	d003      	beq.n	802d948 <ProcPktHdr1+0x50>
	{
		//	Seq No. 가 0이 아닌경우 Seq 갱신.
		g_nPktSeq = pRFPkt->hdr.nSeq;	//	Packet Seq 갱신.
 802d940:	687b      	ldr	r3, [r7, #4]
 802d942:	789a      	ldrb	r2, [r3, #2]
 802d944:	4b03      	ldr	r3, [pc, #12]	; (802d954 <ProcPktHdr1+0x5c>)
 802d946:	701a      	strb	r2, [r3, #0]
	//	Device ID Flag 확인.

#endif	//	defined(USE_HOPPING)
	//========================================================================

	return 1;
 802d948:	2301      	movs	r3, #1
}
 802d94a:	4618      	mov	r0, r3
 802d94c:	3708      	adds	r7, #8
 802d94e:	46bd      	mov	sp, r7
 802d950:	bd80      	pop	{r7, pc}
 802d952:	bf00      	nop
 802d954:	200013a2 	.word	0x200013a2
 802d958:	20001384 	.word	0x20001384

0802d95c <ProcPktHdr2>:


//========================================================================
int ProcPktHdr2( const RFMPkt *pRFPkt, int nSize  )
//========================================================================
{
 802d95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d95e:	b097      	sub	sp, #92	; 0x5c
 802d960:	af00      	add	r7, sp, #0
 802d962:	6078      	str	r0, [r7, #4]
 802d964:	6039      	str	r1, [r7, #0]
	//	편성번호가 다른경우 Skip

	const RFMPktHdr2 *pHdr = &pRFPkt->hdr2;
 802d966:	687b      	ldr	r3, [r7, #4]
 802d968:	657b      	str	r3, [r7, #84]	; 0x54

	char buf[64];

	if ( pHdr->nTS != GetTrainSetIdx() )
 802d96a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d96c:	781b      	ldrb	r3, [r3, #0]
 802d96e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 802d972:	b2db      	uxtb	r3, r3
 802d974:	461c      	mov	r4, r3
 802d976:	f005 f903 	bl	8032b80 <GetTrainSetIdx>
 802d97a:	4603      	mov	r3, r0
 802d97c:	429c      	cmp	r4, r3
 802d97e:	d001      	beq.n	802d984 <ProcPktHdr2+0x28>
	{
		//	열차번호가 다른경우 : Skip
		return 0;	//	Skip
 802d980:	2300      	movs	r3, #0
 802d982:	e1aa      	b.n	802dcda <ProcPktHdr2+0x37e>
	}

#if defined(USE_HOPPING)

	if ( GetDevID() == DevRF900T )
 802d984:	f004 fea4 	bl	80326d0 <GetDevID>
 802d988:	4603      	mov	r3, r0
 802d98a:	2b02      	cmp	r3, #2
 802d98c:	d101      	bne.n	802d992 <ProcPktHdr2+0x36>
	{
		//	송신기의 경우 중계하지 않음.
		return 1;
 802d98e:	2301      	movs	r3, #1
 802d990:	e1a3      	b.n	802dcda <ProcPktHdr2+0x37e>
	}
	else if ( GetDevID() == DevRF900M )
 802d992:	f004 fe9d 	bl	80326d0 <GetDevID>
 802d996:	4603      	mov	r3, r0
 802d998:	2b01      	cmp	r3, #1
 802d99a:	f040 819e 	bne.w	802dcda <ProcPktHdr2+0x37e>
	{
		//	송신기로부터 Data 수신 시
		if( pHdr->nSrcCh == ChTx_1 || pHdr->nSrcCh == ChTx_2 )
 802d99e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d9a0:	785b      	ldrb	r3, [r3, #1]
 802d9a2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 802d9a6:	b2db      	uxtb	r3, r3
 802d9a8:	461a      	mov	r2, r3
 802d9aa:	4ba4      	ldr	r3, [pc, #656]	; (802dc3c <ProcPktHdr2+0x2e0>)
 802d9ac:	681b      	ldr	r3, [r3, #0]
 802d9ae:	429a      	cmp	r2, r3
 802d9b0:	d009      	beq.n	802d9c6 <ProcPktHdr2+0x6a>
 802d9b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802d9b4:	785b      	ldrb	r3, [r3, #1]
 802d9b6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 802d9ba:	b2db      	uxtb	r3, r3
 802d9bc:	461a      	mov	r2, r3
 802d9be:	4ba0      	ldr	r3, [pc, #640]	; (802dc40 <ProcPktHdr2+0x2e4>)
 802d9c0:	681b      	ldr	r3, [r3, #0]
 802d9c2:	429a      	cmp	r2, r3
 802d9c4:	d15f      	bne.n	802da86 <ProcPktHdr2+0x12a>
		{
			//	상위 / 하위 채널로 중계.
			//	1 <= 2 => 3
			nHopPkt++;
 802d9c6:	4b9f      	ldr	r3, [pc, #636]	; (802dc44 <ProcPktHdr2+0x2e8>)
 802d9c8:	681b      	ldr	r3, [r3, #0]
 802d9ca:	3301      	adds	r3, #1
 802d9cc:	4a9d      	ldr	r2, [pc, #628]	; (802dc44 <ProcPktHdr2+0x2e8>)
 802d9ce:	6013      	str	r3, [r2, #0]
			memcpy( buf, pRFPkt, 64 );
 802d9d0:	687b      	ldr	r3, [r7, #4]
 802d9d2:	461c      	mov	r4, r3
 802d9d4:	f107 0608 	add.w	r6, r7, #8
 802d9d8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 802d9dc:	4635      	mov	r5, r6
 802d9de:	4623      	mov	r3, r4
 802d9e0:	6818      	ldr	r0, [r3, #0]
 802d9e2:	6859      	ldr	r1, [r3, #4]
 802d9e4:	689a      	ldr	r2, [r3, #8]
 802d9e6:	68db      	ldr	r3, [r3, #12]
 802d9e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802d9ea:	3410      	adds	r4, #16
 802d9ec:	3610      	adds	r6, #16
 802d9ee:	4564      	cmp	r4, ip
 802d9f0:	d1f4      	bne.n	802d9dc <ProcPktHdr2+0x80>
			RFMPkt	*pSendPkt = (RFMPkt *)buf;
 802d9f2:	f107 0308 	add.w	r3, r7, #8
 802d9f6:	64bb      	str	r3, [r7, #72]	; 0x48
			pSendPkt->hdr2.nSrcCh = GetChRx();
 802d9f8:	f004 ff10 	bl	803281c <GetChRx>
 802d9fc:	4603      	mov	r3, r0
 802d9fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802da02:	b2d9      	uxtb	r1, r3
 802da04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802da06:	7853      	ldrb	r3, [r2, #1]
 802da08:	f361 0305 	bfi	r3, r1, #0, #6
 802da0c:	7053      	strb	r3, [r2, #1]


			if( g_nRFMode == RFMode2 )//#if defined(USE_COMM_MODE_CH_GRP)	//	그룹주파수 모드. - [ 1, 2 ] [ 3, 4 ] ...
 802da0e:	4b8e      	ldr	r3, [pc, #568]	; (802dc48 <ProcPktHdr2+0x2ec>)
 802da10:	681b      	ldr	r3, [r3, #0]
 802da12:	2b02      	cmp	r3, #2
 802da14:	d11b      	bne.n	802da4e <ProcPktHdr2+0xf2>
			{
				if ( g_nCarNo % 2 == 0 )	SendPktCh( GetChRx() + ChGap, buf, nSize ); //	짝수 Car
 802da16:	4b8d      	ldr	r3, [pc, #564]	; (802dc4c <ProcPktHdr2+0x2f0>)
 802da18:	681b      	ldr	r3, [r3, #0]
 802da1a:	f003 0301 	and.w	r3, r3, #1
 802da1e:	2b00      	cmp	r3, #0
 802da20:	d10a      	bne.n	802da38 <ProcPktHdr2+0xdc>
 802da22:	f004 fefb 	bl	803281c <GetChRx>
 802da26:	4603      	mov	r3, r0
 802da28:	3304      	adds	r3, #4
 802da2a:	f107 0108 	add.w	r1, r7, #8
 802da2e:	683a      	ldr	r2, [r7, #0]
 802da30:	4618      	mov	r0, r3
 802da32:	f000 fb19 	bl	802e068 <SendPktCh>
		{
 802da36:	e14f      	b.n	802dcd8 <ProcPktHdr2+0x37c>
				else						SendPktCh( GetChRx() - ChGap, buf, nSize ); //	홀수 Car
 802da38:	f004 fef0 	bl	803281c <GetChRx>
 802da3c:	4603      	mov	r3, r0
 802da3e:	3b04      	subs	r3, #4
 802da40:	f107 0108 	add.w	r1, r7, #8
 802da44:	683a      	ldr	r2, [r7, #0]
 802da46:	4618      	mov	r0, r3
 802da48:	f000 fb0e 	bl	802e068 <SendPktCh>
		{
 802da4c:	e144      	b.n	802dcd8 <ProcPktHdr2+0x37c>
			}
			else	//#else
			{
				//	현재 동작중인 상위 / 하위 채널로 중계.
#if defined(USE_ROUTE_REQ)
				if( GetChRFMUp() )		SendPktCh( GetChRFMUp(), buf, nSize );
 802da4e:	f005 f81b 	bl	8032a88 <GetChRFMUp>
 802da52:	4603      	mov	r3, r0
 802da54:	2b00      	cmp	r3, #0
 802da56:	d007      	beq.n	802da68 <ProcPktHdr2+0x10c>
 802da58:	f005 f816 	bl	8032a88 <GetChRFMUp>
 802da5c:	f107 0308 	add.w	r3, r7, #8
 802da60:	683a      	ldr	r2, [r7, #0]
 802da62:	4619      	mov	r1, r3
 802da64:	f000 fb00 	bl	802e068 <SendPktCh>

				if( GetChRFMDown() )	SendPktCh( GetChRFMDown(), buf, nSize );
 802da68:	f005 f82a 	bl	8032ac0 <GetChRFMDown>
 802da6c:	4603      	mov	r3, r0
 802da6e:	2b00      	cmp	r3, #0
 802da70:	f000 8132 	beq.w	802dcd8 <ProcPktHdr2+0x37c>
 802da74:	f005 f824 	bl	8032ac0 <GetChRFMDown>
 802da78:	f107 0308 	add.w	r3, r7, #8
 802da7c:	683a      	ldr	r2, [r7, #0]
 802da7e:	4619      	mov	r1, r3
 802da80:	f000 faf2 	bl	802e068 <SendPktCh>
		{
 802da84:	e128      	b.n	802dcd8 <ProcPktHdr2+0x37c>
#endif
			}//#endif
		}
		//	수신기로부터 Data 수신 시
#if defined(USE_ROUTE_REQ)
		else if( pHdr->nSrcCh <= ( GetChRx() - ChGap ) )
 802da86:	f004 fec9 	bl	803281c <GetChRx>
 802da8a:	4603      	mov	r3, r0
 802da8c:	3b03      	subs	r3, #3
 802da8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802da90:	7852      	ldrb	r2, [r2, #1]
 802da92:	f3c2 0205 	ubfx	r2, r2, #0, #6
 802da96:	b2d2      	uxtb	r2, r2
 802da98:	4293      	cmp	r3, r2
 802da9a:	f340 8082 	ble.w	802dba2 <ProcPktHdr2+0x246>
		else if( pHdr->nSrcCh == ( GetChRx() - ChGap ) )
#endif
		{
			//	상위 채널로 중계.
			//	1 -> 2 => 3
			nHopPkt++;
 802da9e:	4b69      	ldr	r3, [pc, #420]	; (802dc44 <ProcPktHdr2+0x2e8>)
 802daa0:	681b      	ldr	r3, [r3, #0]
 802daa2:	3301      	adds	r3, #1
 802daa4:	4a67      	ldr	r2, [pc, #412]	; (802dc44 <ProcPktHdr2+0x2e8>)
 802daa6:	6013      	str	r3, [r2, #0]
			memcpy( buf, pRFPkt, 64 );
 802daa8:	687b      	ldr	r3, [r7, #4]
 802daaa:	461c      	mov	r4, r3
 802daac:	f107 0608 	add.w	r6, r7, #8
 802dab0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 802dab4:	4635      	mov	r5, r6
 802dab6:	4623      	mov	r3, r4
 802dab8:	6818      	ldr	r0, [r3, #0]
 802daba:	6859      	ldr	r1, [r3, #4]
 802dabc:	689a      	ldr	r2, [r3, #8]
 802dabe:	68db      	ldr	r3, [r3, #12]
 802dac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802dac2:	3410      	adds	r4, #16
 802dac4:	3610      	adds	r6, #16
 802dac6:	4564      	cmp	r4, ip
 802dac8:	d1f4      	bne.n	802dab4 <ProcPktHdr2+0x158>
			RFMPkt	*pSendPkt = (RFMPkt *)buf;
 802daca:	f107 0308 	add.w	r3, r7, #8
 802dace:	64fb      	str	r3, [r7, #76]	; 0x4c
			pSendPkt->hdr2.nSrcCh = GetChRx();
 802dad0:	f004 fea4 	bl	803281c <GetChRx>
 802dad4:	4603      	mov	r3, r0
 802dad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802dada:	b2d9      	uxtb	r1, r3
 802dadc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802dade:	7853      	ldrb	r3, [r2, #1]
 802dae0:	f361 0305 	bfi	r3, r1, #0, #6
 802dae4:	7053      	strb	r3, [r2, #1]

#if defined(USE_ROUTE_NEAREST_RFM)	//	수신기 -> 송신기 중계 연결. ( 가장가까운 수신기에서 송신기로 중계 )
			if ( g_devStat[RFTCarNo1].nNearCh == GetChRx()		//	송신기의 가까운 채널이 자신의 채널이면 송신기로 중계.
 802dae6:	4b5a      	ldr	r3, [pc, #360]	; (802dc50 <ProcPktHdr2+0x2f4>)
 802dae8:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 802daec:	f004 fe96 	bl	803281c <GetChRx>
 802daf0:	4603      	mov	r3, r0
 802daf2:	429c      	cmp	r4, r3
 802daf4:	d114      	bne.n	802db20 <ProcPktHdr2+0x1c4>
					&& pSendPkt->hdr2.bRFT1 == 0 )
 802daf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802daf8:	785b      	ldrb	r3, [r3, #1]
 802dafa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802dafe:	b2db      	uxtb	r3, r3
 802db00:	2b00      	cmp	r3, #0
 802db02:	d10d      	bne.n	802db20 <ProcPktHdr2+0x1c4>
			{
				pSendPkt->hdr2.bRFT1 = 1;
 802db04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802db06:	7853      	ldrb	r3, [r2, #1]
 802db08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802db0c:	7053      	strb	r3, [r2, #1]
				SendPktCh( ChTx_1, buf, nSize );
 802db0e:	4b4b      	ldr	r3, [pc, #300]	; (802dc3c <ProcPktHdr2+0x2e0>)
 802db10:	681b      	ldr	r3, [r3, #0]
 802db12:	f107 0108 	add.w	r1, r7, #8
 802db16:	683a      	ldr	r2, [r7, #0]
 802db18:	4618      	mov	r0, r3
 802db1a:	f000 faa5 	bl	802e068 <SendPktCh>
 802db1e:	e01b      	b.n	802db58 <ProcPktHdr2+0x1fc>
			}
			else if ( g_devStat[RFTCarNo2].nNearCh == GetChRx()	//	송신기의 가까운 채널이 자신의 채널이면 송신기로 중계.
 802db20:	4b4b      	ldr	r3, [pc, #300]	; (802dc50 <ProcPktHdr2+0x2f4>)
 802db22:	f8d3 41dd 	ldr.w	r4, [r3, #477]	; 0x1dd
 802db26:	f004 fe79 	bl	803281c <GetChRx>
 802db2a:	4603      	mov	r3, r0
 802db2c:	429c      	cmp	r4, r3
 802db2e:	d113      	bne.n	802db58 <ProcPktHdr2+0x1fc>
					&& pSendPkt->hdr2.bRFT2 == 0 )
 802db30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802db32:	785b      	ldrb	r3, [r3, #1]
 802db34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802db38:	b2db      	uxtb	r3, r3
 802db3a:	2b00      	cmp	r3, #0
 802db3c:	d10c      	bne.n	802db58 <ProcPktHdr2+0x1fc>
			{
				pSendPkt->hdr2.bRFT2 = 1;
 802db3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802db40:	7853      	ldrb	r3, [r2, #1]
 802db42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802db46:	7053      	strb	r3, [r2, #1]
				SendPktCh( ChTx_2, buf, nSize );
 802db48:	4b3d      	ldr	r3, [pc, #244]	; (802dc40 <ProcPktHdr2+0x2e4>)
 802db4a:	681b      	ldr	r3, [r3, #0]
 802db4c:	f107 0108 	add.w	r1, r7, #8
 802db50:	683a      	ldr	r2, [r7, #0]
 802db52:	4618      	mov	r0, r3
 802db54:	f000 fa88 	bl	802e068 <SendPktCh>
				pSendPkt->hdr2.bRFT2 = 1;
				SendPktCh( ChTx_2, buf, nSize );
			}
#endif	//	defined(USE_RFT_REG_TO_RFM)

			if( g_nRFMode == RFMode2 )//#if defined(USE_COMM_MODE_CH_GRP)	//	그룹주파수 모드. - [ 1, 2 ] [ 3, 4 ] ...
 802db58:	4b3b      	ldr	r3, [pc, #236]	; (802dc48 <ProcPktHdr2+0x2ec>)
 802db5a:	681b      	ldr	r3, [r3, #0]
 802db5c:	2b02      	cmp	r3, #2
 802db5e:	d111      	bne.n	802db84 <ProcPktHdr2+0x228>
			{
				if ( g_nCarNo % 2 == 0 )	SendPktCh( GetChRx() + ChGap, buf, nSize ); //	짝수 Car
 802db60:	4b3a      	ldr	r3, [pc, #232]	; (802dc4c <ProcPktHdr2+0x2f0>)
 802db62:	681b      	ldr	r3, [r3, #0]
 802db64:	f003 0301 	and.w	r3, r3, #1
 802db68:	2b00      	cmp	r3, #0
 802db6a:	f040 80b6 	bne.w	802dcda <ProcPktHdr2+0x37e>
 802db6e:	f004 fe55 	bl	803281c <GetChRx>
 802db72:	4603      	mov	r3, r0
 802db74:	3304      	adds	r3, #4
 802db76:	f107 0108 	add.w	r1, r7, #8
 802db7a:	683a      	ldr	r2, [r7, #0]
 802db7c:	4618      	mov	r0, r3
 802db7e:	f000 fa73 	bl	802e068 <SendPktCh>
 802db82:	e0aa      	b.n	802dcda <ProcPktHdr2+0x37e>
			}
			else	//	#else
			{
#if defined(USE_ROUTE_REQ)
				//	현재 동작중인 상위 채널로 중계
				if( GetChRFMUp() )	SendPktCh( GetChRFMUp(), buf, nSize );
 802db84:	f004 ff80 	bl	8032a88 <GetChRFMUp>
 802db88:	4603      	mov	r3, r0
 802db8a:	2b00      	cmp	r3, #0
 802db8c:	f000 80a5 	beq.w	802dcda <ProcPktHdr2+0x37e>
 802db90:	f004 ff7a 	bl	8032a88 <GetChRFMUp>
 802db94:	f107 0308 	add.w	r3, r7, #8
 802db98:	683a      	ldr	r2, [r7, #0]
 802db9a:	4619      	mov	r1, r3
 802db9c:	f000 fa64 	bl	802e068 <SendPktCh>
 802dba0:	e09b      	b.n	802dcda <ProcPktHdr2+0x37e>
				SendPktCh( GetChRx() + ChGap, buf, nSize );
#endif
			}//#endif
		}
#if defined(USE_ROUTE_REQ)
		else if( pHdr->nSrcCh >= ( GetChRx() + ChGap ) )
 802dba2:	f004 fe3b 	bl	803281c <GetChRx>
 802dba6:	4603      	mov	r3, r0
 802dba8:	3303      	adds	r3, #3
 802dbaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802dbac:	7852      	ldrb	r2, [r2, #1]
 802dbae:	f3c2 0205 	ubfx	r2, r2, #0, #6
 802dbb2:	b2d2      	uxtb	r2, r2
 802dbb4:	4293      	cmp	r3, r2
 802dbb6:	f280 8090 	bge.w	802dcda <ProcPktHdr2+0x37e>
		else if( pHdr->nSrcCh == ( GetChRx() + ChGap ) )
#endif
		{
			//	하위 채널로 중계.
			//	1 <= 2 <- 3
			nHopPkt++;
 802dbba:	4b22      	ldr	r3, [pc, #136]	; (802dc44 <ProcPktHdr2+0x2e8>)
 802dbbc:	681b      	ldr	r3, [r3, #0]
 802dbbe:	3301      	adds	r3, #1
 802dbc0:	4a20      	ldr	r2, [pc, #128]	; (802dc44 <ProcPktHdr2+0x2e8>)
 802dbc2:	6013      	str	r3, [r2, #0]
			memcpy( buf, pRFPkt, 64 );
 802dbc4:	687b      	ldr	r3, [r7, #4]
 802dbc6:	461c      	mov	r4, r3
 802dbc8:	f107 0608 	add.w	r6, r7, #8
 802dbcc:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 802dbd0:	4635      	mov	r5, r6
 802dbd2:	4623      	mov	r3, r4
 802dbd4:	6818      	ldr	r0, [r3, #0]
 802dbd6:	6859      	ldr	r1, [r3, #4]
 802dbd8:	689a      	ldr	r2, [r3, #8]
 802dbda:	68db      	ldr	r3, [r3, #12]
 802dbdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802dbde:	3410      	adds	r4, #16
 802dbe0:	3610      	adds	r6, #16
 802dbe2:	4564      	cmp	r4, ip
 802dbe4:	d1f4      	bne.n	802dbd0 <ProcPktHdr2+0x274>
			RFMPkt	*pSendPkt = (RFMPkt *)buf;
 802dbe6:	f107 0308 	add.w	r3, r7, #8
 802dbea:	653b      	str	r3, [r7, #80]	; 0x50
			pSendPkt->hdr2.nSrcCh = GetChRx();
 802dbec:	f004 fe16 	bl	803281c <GetChRx>
 802dbf0:	4603      	mov	r3, r0
 802dbf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802dbf6:	b2d9      	uxtb	r1, r3
 802dbf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802dbfa:	7853      	ldrb	r3, [r2, #1]
 802dbfc:	f361 0305 	bfi	r3, r1, #0, #6
 802dc00:	7053      	strb	r3, [r2, #1]

#if defined(USE_ROUTE_NEAREST_RFM)	//	수신기 -> 송신기 중계 연결. ( 가장가까운 수신기에서 송신기로 중계 )
			if ( g_devStat[RFTCarNo1].nNearCh == GetChRx()		//	송신기의 가까운 채널이 자신의 채널이면 송신기로 중계.
 802dc02:	4b13      	ldr	r3, [pc, #76]	; (802dc50 <ProcPktHdr2+0x2f4>)
 802dc04:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 802dc08:	f004 fe08 	bl	803281c <GetChRx>
 802dc0c:	4603      	mov	r3, r0
 802dc0e:	429c      	cmp	r4, r3
 802dc10:	d120      	bne.n	802dc54 <ProcPktHdr2+0x2f8>
					&& pSendPkt->hdr2.bRFT1 == 0 )
 802dc12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802dc14:	785b      	ldrb	r3, [r3, #1]
 802dc16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802dc1a:	b2db      	uxtb	r3, r3
 802dc1c:	2b00      	cmp	r3, #0
 802dc1e:	d119      	bne.n	802dc54 <ProcPktHdr2+0x2f8>
			{
				pSendPkt->hdr2.bRFT1 = 1;
 802dc20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802dc22:	7853      	ldrb	r3, [r2, #1]
 802dc24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802dc28:	7053      	strb	r3, [r2, #1]
				SendPktCh( ChTx_1, buf, nSize );
 802dc2a:	4b04      	ldr	r3, [pc, #16]	; (802dc3c <ProcPktHdr2+0x2e0>)
 802dc2c:	681b      	ldr	r3, [r3, #0]
 802dc2e:	f107 0108 	add.w	r1, r7, #8
 802dc32:	683a      	ldr	r2, [r7, #0]
 802dc34:	4618      	mov	r0, r3
 802dc36:	f000 fa17 	bl	802e068 <SendPktCh>
 802dc3a:	e027      	b.n	802dc8c <ProcPktHdr2+0x330>
 802dc3c:	200004f4 	.word	0x200004f4
 802dc40:	200004f8 	.word	0x200004f8
 802dc44:	20001380 	.word	0x20001380
 802dc48:	20002350 	.word	0x20002350
 802dc4c:	2000233c 	.word	0x2000233c
 802dc50:	20002358 	.word	0x20002358
			}
			else if ( g_devStat[RFTCarNo2].nNearCh == GetChRx()	//	송신기의 가까운 채널이 자신의 채널이면 송신기로 중계.
 802dc54:	4b23      	ldr	r3, [pc, #140]	; (802dce4 <ProcPktHdr2+0x388>)
 802dc56:	f8d3 41dd 	ldr.w	r4, [r3, #477]	; 0x1dd
 802dc5a:	f004 fddf 	bl	803281c <GetChRx>
 802dc5e:	4603      	mov	r3, r0
 802dc60:	429c      	cmp	r4, r3
 802dc62:	d113      	bne.n	802dc8c <ProcPktHdr2+0x330>
					&& pSendPkt->hdr2.bRFT2 == 0 )
 802dc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802dc66:	785b      	ldrb	r3, [r3, #1]
 802dc68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802dc6c:	b2db      	uxtb	r3, r3
 802dc6e:	2b00      	cmp	r3, #0
 802dc70:	d10c      	bne.n	802dc8c <ProcPktHdr2+0x330>
			{
				pSendPkt->hdr2.bRFT2 = 1;
 802dc72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802dc74:	7853      	ldrb	r3, [r2, #1]
 802dc76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802dc7a:	7053      	strb	r3, [r2, #1]
				SendPktCh( ChTx_2, buf, nSize );
 802dc7c:	4b1a      	ldr	r3, [pc, #104]	; (802dce8 <ProcPktHdr2+0x38c>)
 802dc7e:	681b      	ldr	r3, [r3, #0]
 802dc80:	f107 0108 	add.w	r1, r7, #8
 802dc84:	683a      	ldr	r2, [r7, #0]
 802dc86:	4618      	mov	r0, r3
 802dc88:	f000 f9ee 	bl	802e068 <SendPktCh>
				pSendPkt->hdr2.bRFT2 = 1;
				SendPktCh( GetChPARFT(), buf, nSize );
			}
#endif	//	defined(USE_RFT_REG_TO_RFM)

			if( g_nRFMode == RFMode2 )	//#if defined(USE_COMM_MODE_CH_GRP)	//	그룹주파수 모드. - [ 1, 2 ] [ 3, 4 ] ...
 802dc8c:	4b17      	ldr	r3, [pc, #92]	; (802dcec <ProcPktHdr2+0x390>)
 802dc8e:	681b      	ldr	r3, [r3, #0]
 802dc90:	2b02      	cmp	r3, #2
 802dc92:	d113      	bne.n	802dcbc <ProcPktHdr2+0x360>
			{
				if ( g_nCarNo % 2 == 1 )	SendPktCh( GetChRx() - ChGap, buf, nSize ); //	홀수 Car
 802dc94:	4b16      	ldr	r3, [pc, #88]	; (802dcf0 <ProcPktHdr2+0x394>)
 802dc96:	681b      	ldr	r3, [r3, #0]
 802dc98:	2b00      	cmp	r3, #0
 802dc9a:	f003 0301 	and.w	r3, r3, #1
 802dc9e:	bfb8      	it	lt
 802dca0:	425b      	neglt	r3, r3
 802dca2:	2b01      	cmp	r3, #1
 802dca4:	d119      	bne.n	802dcda <ProcPktHdr2+0x37e>
 802dca6:	f004 fdb9 	bl	803281c <GetChRx>
 802dcaa:	4603      	mov	r3, r0
 802dcac:	3b04      	subs	r3, #4
 802dcae:	f107 0108 	add.w	r1, r7, #8
 802dcb2:	683a      	ldr	r2, [r7, #0]
 802dcb4:	4618      	mov	r0, r3
 802dcb6:	f000 f9d7 	bl	802e068 <SendPktCh>
 802dcba:	e00e      	b.n	802dcda <ProcPktHdr2+0x37e>
			}
			else//#else
			{
#if defined(USE_ROUTE_REQ)
				//	현재 동작중인 하위 채널로 중계
				if( GetChRFMDown() )	SendPktCh( GetChRFMDown(), buf, nSize );
 802dcbc:	f004 ff00 	bl	8032ac0 <GetChRFMDown>
 802dcc0:	4603      	mov	r3, r0
 802dcc2:	2b00      	cmp	r3, #0
 802dcc4:	d009      	beq.n	802dcda <ProcPktHdr2+0x37e>
 802dcc6:	f004 fefb 	bl	8032ac0 <GetChRFMDown>
 802dcca:	f107 0308 	add.w	r3, r7, #8
 802dcce:	683a      	ldr	r2, [r7, #0]
 802dcd0:	4619      	mov	r1, r3
 802dcd2:	f000 f9c9 	bl	802e068 <SendPktCh>
 802dcd6:	e000      	b.n	802dcda <ProcPktHdr2+0x37e>
		{
 802dcd8:	bf00      	nop
#endif
			}//#endif
		}
	}
#endif	//	defined(USE_HOPPING)
}
 802dcda:	4618      	mov	r0, r3
 802dcdc:	375c      	adds	r7, #92	; 0x5c
 802dcde:	46bd      	mov	sp, r7
 802dce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802dce2:	bf00      	nop
 802dce4:	20002358 	.word	0x20002358
 802dce8:	200004f8 	.word	0x200004f8
 802dcec:	20002350 	.word	0x20002350
 802dcf0:	2000233c 	.word	0x2000233c

0802dcf4 <CallbackRecvPacket>:
//}

//========================================================================
void CallbackRecvPacket( const char *pData, int nSize )
//========================================================================
{
 802dcf4:	b580      	push	{r7, lr}
 802dcf6:	b084      	sub	sp, #16
 802dcf8:	af00      	add	r7, sp, #0
 802dcfa:	6078      	str	r0, [r7, #4]
 802dcfc:	6039      	str	r1, [r7, #0]
	const RFMPkt	*pRFPkt = (const RFMPkt *)pData;
 802dcfe:	687b      	ldr	r3, [r7, #4]
 802dd00:	60fb      	str	r3, [r7, #12]

	//========================================================================
	//	Header
	//if ( ( pRFPkt->hdr2.nTS & 0xC0 ) == 0x00 )	//	[7:6] 00 : Hdr#1 / 01 : Hdr#2
	if ( pRFPkt->hdr2.bHdrID == 0 )
 802dd02:	68fb      	ldr	r3, [r7, #12]
 802dd04:	781b      	ldrb	r3, [r3, #0]
 802dd06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802dd0a:	b2db      	uxtb	r3, r3
 802dd0c:	2b00      	cmp	r3, #0
 802dd0e:	d107      	bne.n	802dd20 <CallbackRecvPacket+0x2c>
	{
		//	Header #1
		if ( ProcPktHdr1( pRFPkt, nSize ) == 0 )
 802dd10:	6839      	ldr	r1, [r7, #0]
 802dd12:	68f8      	ldr	r0, [r7, #12]
 802dd14:	f7ff fdf0 	bl	802d8f8 <ProcPktHdr1>
 802dd18:	4603      	mov	r3, r0
 802dd1a:	2b00      	cmp	r3, #0
 802dd1c:	d113      	bne.n	802dd46 <CallbackRecvPacket+0x52>
		{
			return;
 802dd1e:	e0cd      	b.n	802debc <CallbackRecvPacket+0x1c8>
		}
	}
	else if ( pRFPkt->hdr2.bHdrID == 0x01 )
 802dd20:	68fb      	ldr	r3, [r7, #12]
 802dd22:	781b      	ldrb	r3, [r3, #0]
 802dd24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802dd28:	b2db      	uxtb	r3, r3
 802dd2a:	2b40      	cmp	r3, #64	; 0x40
 802dd2c:	d107      	bne.n	802dd3e <CallbackRecvPacket+0x4a>
	{
		//	Header #2
		if ( ProcPktHdr2( pRFPkt, nSize ) == 0 )
 802dd2e:	6839      	ldr	r1, [r7, #0]
 802dd30:	68f8      	ldr	r0, [r7, #12]
 802dd32:	f7ff fe13 	bl	802d95c <ProcPktHdr2>
 802dd36:	4603      	mov	r3, r0
 802dd38:	2b00      	cmp	r3, #0
 802dd3a:	d104      	bne.n	802dd46 <CallbackRecvPacket+0x52>
		{
			return;
 802dd3c:	e0be      	b.n	802debc <CallbackRecvPacket+0x1c8>
		}
	}
	else
	{
		printf( "H" );	//	Packet Header Error
 802dd3e:	2048      	movs	r0, #72	; 0x48
 802dd40:	f009 fac0 	bl	80372c4 <putchar>
		return ;
 802dd44:	e0ba      	b.n	802debc <CallbackRecvPacket+0x1c8>
	}

	//========================================================================
	//	Proc Packet
	switch ( pRFPkt->hdr.nPktCmd )
 802dd46:	68fb      	ldr	r3, [r7, #12]
 802dd48:	78db      	ldrb	r3, [r3, #3]
 802dd4a:	3b01      	subs	r3, #1
 802dd4c:	2b40      	cmp	r3, #64	; 0x40
 802dd4e:	f200 80b1 	bhi.w	802deb4 <CallbackRecvPacket+0x1c0>
 802dd52:	a201      	add	r2, pc, #4	; (adr r2, 802dd58 <CallbackRecvPacket+0x64>)
 802dd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dd58:	0802de6d 	.word	0x0802de6d
 802dd5c:	0802de65 	.word	0x0802de65
 802dd60:	0802de5d 	.word	0x0802de5d
 802dd64:	0802de7d 	.word	0x0802de7d
 802dd68:	0802deb5 	.word	0x0802deb5
 802dd6c:	0802deb5 	.word	0x0802deb5
 802dd70:	0802deb5 	.word	0x0802deb5
 802dd74:	0802de85 	.word	0x0802de85
 802dd78:	0802deb5 	.word	0x0802deb5
 802dd7c:	0802deb5 	.word	0x0802deb5
 802dd80:	0802deb5 	.word	0x0802deb5
 802dd84:	0802deb5 	.word	0x0802deb5
 802dd88:	0802deb5 	.word	0x0802deb5
 802dd8c:	0802deb5 	.word	0x0802deb5
 802dd90:	0802deb5 	.word	0x0802deb5
 802dd94:	0802deb5 	.word	0x0802deb5
 802dd98:	0802de75 	.word	0x0802de75
 802dd9c:	0802deb5 	.word	0x0802deb5
 802dda0:	0802deb5 	.word	0x0802deb5
 802dda4:	0802deb5 	.word	0x0802deb5
 802dda8:	0802deb5 	.word	0x0802deb5
 802ddac:	0802deb5 	.word	0x0802deb5
 802ddb0:	0802deb5 	.word	0x0802deb5
 802ddb4:	0802deb5 	.word	0x0802deb5
 802ddb8:	0802deb5 	.word	0x0802deb5
 802ddbc:	0802deb5 	.word	0x0802deb5
 802ddc0:	0802deb5 	.word	0x0802deb5
 802ddc4:	0802deb5 	.word	0x0802deb5
 802ddc8:	0802deb5 	.word	0x0802deb5
 802ddcc:	0802deb5 	.word	0x0802deb5
 802ddd0:	0802deb5 	.word	0x0802deb5
 802ddd4:	0802de8d 	.word	0x0802de8d
 802ddd8:	0802deb5 	.word	0x0802deb5
 802dddc:	0802deb5 	.word	0x0802deb5
 802dde0:	0802deb5 	.word	0x0802deb5
 802dde4:	0802deb5 	.word	0x0802deb5
 802dde8:	0802deb5 	.word	0x0802deb5
 802ddec:	0802deb5 	.word	0x0802deb5
 802ddf0:	0802deb5 	.word	0x0802deb5
 802ddf4:	0802deb5 	.word	0x0802deb5
 802ddf8:	0802deb5 	.word	0x0802deb5
 802ddfc:	0802deb5 	.word	0x0802deb5
 802de00:	0802deb5 	.word	0x0802deb5
 802de04:	0802deb5 	.word	0x0802deb5
 802de08:	0802deb5 	.word	0x0802deb5
 802de0c:	0802deb5 	.word	0x0802deb5
 802de10:	0802deb5 	.word	0x0802deb5
 802de14:	0802deb5 	.word	0x0802deb5
 802de18:	0802dea5 	.word	0x0802dea5
 802de1c:	0802dead 	.word	0x0802dead
 802de20:	0802deb5 	.word	0x0802deb5
 802de24:	0802deb5 	.word	0x0802deb5
 802de28:	0802deb5 	.word	0x0802deb5
 802de2c:	0802deb5 	.word	0x0802deb5
 802de30:	0802deb5 	.word	0x0802deb5
 802de34:	0802deb5 	.word	0x0802deb5
 802de38:	0802deb5 	.word	0x0802deb5
 802de3c:	0802deb5 	.word	0x0802deb5
 802de40:	0802deb5 	.word	0x0802deb5
 802de44:	0802deb5 	.word	0x0802deb5
 802de48:	0802deb5 	.word	0x0802deb5
 802de4c:	0802deb5 	.word	0x0802deb5
 802de50:	0802deb5 	.word	0x0802deb5
 802de54:	0802de95 	.word	0x0802de95
 802de58:	0802de9d 	.word	0x0802de9d
	{
	case PktCall:		ProcPktCall			( pRFPkt );		break;
 802de5c:	68f8      	ldr	r0, [r7, #12]
 802de5e:	f001 f96d 	bl	802f13c <ProcPktCall>
 802de62:	e02b      	b.n	802debc <CallbackRecvPacket+0x1c8>
	case PktPA:			ProcPktPA			( pRFPkt );		break;
 802de64:	68f8      	ldr	r0, [r7, #12]
 802de66:	f001 f90f 	bl	802f088 <ProcPktPA>
 802de6a:	e027      	b.n	802debc <CallbackRecvPacket+0x1c8>
	case PktStat:		ProcPktStat			( pRFPkt );		break;
 802de6c:	68f8      	ldr	r0, [r7, #12]
 802de6e:	f000 ffb7 	bl	802ede0 <ProcPktStat>
 802de72:	e023      	b.n	802debc <CallbackRecvPacket+0x1c8>
	case PktStatReq:	ProcPktStatReq		( pRFPkt );		break;
 802de74:	68f8      	ldr	r0, [r7, #12]
 802de76:	f000 ff4d 	bl	802ed14 <ProcPktStatReq>
 802de7a:	e01f      	b.n	802debc <CallbackRecvPacket+0x1c8>
	case PktLight:		ProcPktLight		( pRFPkt );		break;
 802de7c:	68f8      	ldr	r0, [r7, #12]
 802de7e:	f001 f9a3 	bl	802f1c8 <ProcPktLight>
 802de82:	e01b      	b.n	802debc <CallbackRecvPacket+0x1c8>
	case PktCtrlPaCall:	ProcPktCtrlPaCall	( pRFPkt );		break;
 802de84:	68f8      	ldr	r0, [r7, #12]
 802de86:	f001 f883 	bl	802ef90 <ProcPktCtrlPaCall>
 802de8a:	e017      	b.n	802debc <CallbackRecvPacket+0x1c8>
	case PktCmd:		ProcPktCmd			( pRFPkt );		break;
 802de8c:	68f8      	ldr	r0, [r7, #12]
 802de8e:	f001 f9d3 	bl	802f238 <ProcPktCmd>
 802de92:	e013      	b.n	802debc <CallbackRecvPacket+0x1c8>
	case PktUpgr:		ProcPktUpgr			( pRFPkt );		break;
 802de94:	68f8      	ldr	r0, [r7, #12]
 802de96:	f001 fa01 	bl	802f29c <ProcPktUpgr>
 802de9a:	e00f      	b.n	802debc <CallbackRecvPacket+0x1c8>
	case PktUpgrStat:	ProcPktUpgrStat		( pRFPkt );		break;
 802de9c:	68f8      	ldr	r0, [r7, #12]
 802de9e:	f001 fbbf 	bl	802f620 <ProcPktUpgrStat>
 802dea2:	e00b      	b.n	802debc <CallbackRecvPacket+0x1c8>
	case PktRouteReq:	ProcPktRouteReq		( pRFPkt );		break;
 802dea4:	68f8      	ldr	r0, [r7, #12]
 802dea6:	f000 ffd7 	bl	802ee58 <ProcPktRouteReq>
 802deaa:	e007      	b.n	802debc <CallbackRecvPacket+0x1c8>
	case PktRouteRsp:	ProcPktRouteRsp		( pRFPkt );		break;
 802deac:	68f8      	ldr	r0, [r7, #12]
 802deae:	f001 f81d 	bl	802eeec <ProcPktRouteRsp>
 802deb2:	e003      	b.n	802debc <CallbackRecvPacket+0x1c8>
	default:
//		printf( "%s(%d) - Invalid Value(%d)\n", __func__, __LINE__, pRFPkt->hdr.nPktCmd );
		printf( "E\n" );	//	Packet Error
 802deb4:	4803      	ldr	r0, [pc, #12]	; (802dec4 <CallbackRecvPacket+0x1d0>)
 802deb6:	f009 fa89 	bl	80373cc <puts>
		break;
 802deba:	bf00      	nop
	}
}
 802debc:	3710      	adds	r7, #16
 802debe:	46bd      	mov	sp, r7
 802dec0:	bd80      	pop	{r7, pc}
 802dec2:	bf00      	nop
 802dec4:	08039758 	.word	0x08039758

0802dec8 <LoopProcPkt>:
 *
 */
//========================================================================
void LoopProcPkt( int nTick )
//========================================================================
{
 802dec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802deca:	b089      	sub	sp, #36	; 0x24
 802decc:	af06      	add	r7, sp, #24
 802dece:	6078      	str	r0, [r7, #4]
	bMain_IT_Status = bRadio_Check_Tx_RX();
 802ded0:	f7ff f9bc 	bl	802d24c <bRadio_Check_Tx_RX>
 802ded4:	4603      	mov	r3, r0
 802ded6:	461a      	mov	r2, r3
 802ded8:	4b51      	ldr	r3, [pc, #324]	; (802e020 <LoopProcPkt+0x158>)
 802deda:	701a      	strb	r2, [r3, #0]

	if( ( bMain_IT_Status & SI446X_CMD_GET_CHIP_STATUS_REP_CHIP_PEND_CMD_ERROR_PEND_BIT )
 802dedc:	4b50      	ldr	r3, [pc, #320]	; (802e020 <LoopProcPkt+0x158>)
 802dede:	781b      	ldrb	r3, [r3, #0]
 802dee0:	f003 0308 	and.w	r3, r3, #8
 802dee4:	2b00      	cmp	r3, #0
 802dee6:	d105      	bne.n	802def4 <LoopProcPkt+0x2c>
			|| ( bMain_IT_Status & SI446X_CMD_GET_INT_STATUS_REP_PH_STATUS_CRC_ERROR_BIT ) )
 802dee8:	4b4d      	ldr	r3, [pc, #308]	; (802e020 <LoopProcPkt+0x158>)
 802deea:	781b      	ldrb	r3, [r3, #0]
 802deec:	f003 0308 	and.w	r3, r3, #8
 802def0:	2b00      	cmp	r3, #0
 802def2:	d003      	beq.n	802defc <LoopProcPkt+0x34>
	{
		//	Rx Packet Error or CRC Error
		printf ( "E" );
 802def4:	2045      	movs	r0, #69	; 0x45
 802def6:	f009 f9e5 	bl	80372c4 <putchar>
	{
 802defa:	e03a      	b.n	802df72 <LoopProcPkt+0xaa>
	}
	else if( bMain_IT_Status & SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_RX_PEND_BIT )
 802defc:	4b48      	ldr	r3, [pc, #288]	; (802e020 <LoopProcPkt+0x158>)
 802defe:	781b      	ldrb	r3, [r3, #0]
 802df00:	f003 0310 	and.w	r3, r3, #16
 802df04:	2b00      	cmp	r3, #0
 802df06:	d034      	beq.n	802df72 <LoopProcPkt+0xaa>
	{
		//	Rx Packet Receive Complete
		HAL_GPIO_TogglePin ( LED_ST_GPIO_Port, LED_ST_Pin );
 802df08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802df0c:	4845      	ldr	r0, [pc, #276]	; (802e024 <LoopProcPkt+0x15c>)
 802df0e:	f7f5 fb1e 	bl	802354e <HAL_GPIO_TogglePin>

		nRxPkt++;
 802df12:	4b45      	ldr	r3, [pc, #276]	; (802e028 <LoopProcPkt+0x160>)
 802df14:	681b      	ldr	r3, [r3, #0]
 802df16:	3301      	adds	r3, #1
 802df18:	4a43      	ldr	r2, [pc, #268]	; (802e028 <LoopProcPkt+0x160>)
 802df1a:	6013      	str	r3, [r2, #0]
		nRxStamp = HAL_GetTick();
 802df1c:	f7f3 fe24 	bl	8021b68 <HAL_GetTick>
 802df20:	4603      	mov	r3, r0
 802df22:	461a      	mov	r2, r3
 802df24:	4b41      	ldr	r3, [pc, #260]	; (802e02c <LoopProcPkt+0x164>)
 802df26:	601a      	str	r2, [r3, #0]

		Dump("Rx", g_pRadioRxPkt, 0x40);
 802df28:	4b41      	ldr	r3, [pc, #260]	; (802e030 <LoopProcPkt+0x168>)
 802df2a:	681b      	ldr	r3, [r3, #0]
 802df2c:	2240      	movs	r2, #64	; 0x40
 802df2e:	4619      	mov	r1, r3
 802df30:	4840      	ldr	r0, [pc, #256]	; (802e034 <LoopProcPkt+0x16c>)
 802df32:	f7ff fc5d 	bl	802d7f0 <Dump>
		if ( nRxPkt % 250 == 0 )
 802df36:	4b3c      	ldr	r3, [pc, #240]	; (802e028 <LoopProcPkt+0x160>)
 802df38:	681a      	ldr	r2, [r3, #0]
 802df3a:	4b3f      	ldr	r3, [pc, #252]	; (802e038 <LoopProcPkt+0x170>)
 802df3c:	fb83 1302 	smull	r1, r3, r3, r2
 802df40:	1119      	asrs	r1, r3, #4
 802df42:	17d3      	asrs	r3, r2, #31
 802df44:	1acb      	subs	r3, r1, r3
 802df46:	21fa      	movs	r1, #250	; 0xfa
 802df48:	fb01 f303 	mul.w	r3, r1, r3
 802df4c:	1ad3      	subs	r3, r2, r3
 802df4e:	2b00      	cmp	r3, #0
 802df50:	d102      	bne.n	802df58 <LoopProcPkt+0x90>
		{
			printf ( "R" );
 802df52:	2052      	movs	r0, #82	; 0x52
 802df54:	f009 f9b6 	bl	80372c4 <putchar>
		}

		CallbackRecvPacket( g_pRadioRxPkt, 0x40 );
 802df58:	4b35      	ldr	r3, [pc, #212]	; (802e030 <LoopProcPkt+0x168>)
 802df5a:	681b      	ldr	r3, [r3, #0]
 802df5c:	2140      	movs	r1, #64	; 0x40
 802df5e:	4618      	mov	r0, r3
 802df60:	f7ff fec8 	bl	802dcf4 <CallbackRecvPacket>
		memset( g_pRadioRxPkt, 0, 0x40 );			//	Buffer Clear
 802df64:	4b32      	ldr	r3, [pc, #200]	; (802e030 <LoopProcPkt+0x168>)
 802df66:	681b      	ldr	r3, [r3, #0]
 802df68:	2240      	movs	r2, #64	; 0x40
 802df6a:	2100      	movs	r1, #0
 802df6c:	4618      	mov	r0, r3
 802df6e:	f009 f8a9 	bl	80370c4 <memset>
	}

	if( bMain_IT_Status & SI446X_CMD_GET_INT_STATUS_REP_PH_PEND_PACKET_SENT_PEND_BIT )
 802df72:	4b2b      	ldr	r3, [pc, #172]	; (802e020 <LoopProcPkt+0x158>)
 802df74:	781b      	ldrb	r3, [r3, #0]
 802df76:	f003 0320 	and.w	r3, r3, #32
 802df7a:	2b00      	cmp	r3, #0
 802df7c:	d020      	beq.n	802dfc0 <LoopProcPkt+0xf8>
	{
		HAL_GPIO_TogglePin ( LED_ST_GPIO_Port, LED_ST_Pin );
 802df7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802df82:	4828      	ldr	r0, [pc, #160]	; (802e024 <LoopProcPkt+0x15c>)
 802df84:	f7f5 fae3 	bl	802354e <HAL_GPIO_TogglePin>

		nTxPkt++;
 802df88:	4b2c      	ldr	r3, [pc, #176]	; (802e03c <LoopProcPkt+0x174>)
 802df8a:	681b      	ldr	r3, [r3, #0]
 802df8c:	3301      	adds	r3, #1
 802df8e:	4a2b      	ldr	r2, [pc, #172]	; (802e03c <LoopProcPkt+0x174>)
 802df90:	6013      	str	r3, [r2, #0]
		nTxStampComp = HAL_GetTick();	//	송신완료 Stamp
 802df92:	f7f3 fde9 	bl	8021b68 <HAL_GetTick>
 802df96:	4603      	mov	r3, r0
 802df98:	461a      	mov	r2, r3
 802df9a:	4b29      	ldr	r3, [pc, #164]	; (802e040 <LoopProcPkt+0x178>)
 802df9c:	601a      	str	r2, [r3, #0]

		// Custom message sent successfully
		if ( nTxPkt % 250 == 0 )
 802df9e:	4b27      	ldr	r3, [pc, #156]	; (802e03c <LoopProcPkt+0x174>)
 802dfa0:	681a      	ldr	r2, [r3, #0]
 802dfa2:	4b25      	ldr	r3, [pc, #148]	; (802e038 <LoopProcPkt+0x170>)
 802dfa4:	fb83 1302 	smull	r1, r3, r3, r2
 802dfa8:	1119      	asrs	r1, r3, #4
 802dfaa:	17d3      	asrs	r3, r2, #31
 802dfac:	1acb      	subs	r3, r1, r3
 802dfae:	21fa      	movs	r1, #250	; 0xfa
 802dfb0:	fb01 f303 	mul.w	r3, r1, r3
 802dfb4:	1ad3      	subs	r3, r2, r3
 802dfb6:	2b00      	cmp	r3, #0
 802dfb8:	d102      	bne.n	802dfc0 <LoopProcPkt+0xf8>
		{
			printf ( "T" );
 802dfba:	2054      	movs	r0, #84	; 0x54
 802dfbc:	f009 f982 	bl	80372c4 <putchar>

#if defined(USE_SHOW_PKT)

	static int s_oldTick = 0;

	if ( s_bShowPkt != 0 &&
 802dfc0:	4b20      	ldr	r3, [pc, #128]	; (802e044 <LoopProcPkt+0x17c>)
 802dfc2:	681b      	ldr	r3, [r3, #0]
 802dfc4:	2b00      	cmp	r3, #0
 802dfc6:	d026      	beq.n	802e016 <LoopProcPkt+0x14e>
		( nTick - s_oldTick ) >= 1000 )
 802dfc8:	4b1f      	ldr	r3, [pc, #124]	; (802e048 <LoopProcPkt+0x180>)
 802dfca:	681b      	ldr	r3, [r3, #0]
 802dfcc:	687a      	ldr	r2, [r7, #4]
 802dfce:	1ad3      	subs	r3, r2, r3
	if ( s_bShowPkt != 0 &&
 802dfd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802dfd4:	db1f      	blt.n	802e016 <LoopProcPkt+0x14e>
	{
		//	1 sec

		printf("PKT : Tx(%d) / Rx(%d) / Hop(%d) / Drop(%d) / RspID( 0x%04X ) / RxErr(%d) / Crc(%d) / RSSI(%d)\n", //__func__,
 802dfd6:	4b19      	ldr	r3, [pc, #100]	; (802e03c <LoopProcPkt+0x174>)
 802dfd8:	681c      	ldr	r4, [r3, #0]
 802dfda:	4b13      	ldr	r3, [pc, #76]	; (802e028 <LoopProcPkt+0x160>)
 802dfdc:	681d      	ldr	r5, [r3, #0]
 802dfde:	4b1b      	ldr	r3, [pc, #108]	; (802e04c <LoopProcPkt+0x184>)
 802dfe0:	681e      	ldr	r6, [r3, #0]
 802dfe2:	4b1b      	ldr	r3, [pc, #108]	; (802e050 <LoopProcPkt+0x188>)
 802dfe4:	681b      	ldr	r3, [r3, #0]
 802dfe6:	4a1b      	ldr	r2, [pc, #108]	; (802e054 <LoopProcPkt+0x18c>)
 802dfe8:	8812      	ldrh	r2, [r2, #0]
 802dfea:	603a      	str	r2, [r7, #0]
 802dfec:	4a1a      	ldr	r2, [pc, #104]	; (802e058 <LoopProcPkt+0x190>)
 802dfee:	6812      	ldr	r2, [r2, #0]
 802dff0:	491a      	ldr	r1, [pc, #104]	; (802e05c <LoopProcPkt+0x194>)
 802dff2:	6809      	ldr	r1, [r1, #0]
 802dff4:	481a      	ldr	r0, [pc, #104]	; (802e060 <LoopProcPkt+0x198>)
 802dff6:	6800      	ldr	r0, [r0, #0]
 802dff8:	9004      	str	r0, [sp, #16]
 802dffa:	9103      	str	r1, [sp, #12]
 802dffc:	9202      	str	r2, [sp, #8]
 802dffe:	683a      	ldr	r2, [r7, #0]
 802e000:	9201      	str	r2, [sp, #4]
 802e002:	9300      	str	r3, [sp, #0]
 802e004:	4633      	mov	r3, r6
 802e006:	462a      	mov	r2, r5
 802e008:	4621      	mov	r1, r4
 802e00a:	4816      	ldr	r0, [pc, #88]	; (802e064 <LoopProcPkt+0x19c>)
 802e00c:	f009 f942 	bl	8037294 <iprintf>
				nTxPkt, nRxPkt, nHopPkt, nDropPkt, g_flagRspID, nRxErr, nCrcErr, g_nRSSI );

		s_oldTick = nTick;
 802e010:	4a0d      	ldr	r2, [pc, #52]	; (802e048 <LoopProcPkt+0x180>)
 802e012:	687b      	ldr	r3, [r7, #4]
 802e014:	6013      	str	r3, [r2, #0]
	}
#endif
}
 802e016:	bf00      	nop
 802e018:	370c      	adds	r7, #12
 802e01a:	46bd      	mov	sp, r7
 802e01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e01e:	bf00      	nop
 802e020:	20001375 	.word	0x20001375
 802e024:	40020c00 	.word	0x40020c00
 802e028:	2000137c 	.word	0x2000137c
 802e02c:	20001398 	.word	0x20001398
 802e030:	200012ec 	.word	0x200012ec
 802e034:	0803975c 	.word	0x0803975c
 802e038:	10624dd3 	.word	0x10624dd3
 802e03c:	20001378 	.word	0x20001378
 802e040:	20001394 	.word	0x20001394
 802e044:	200013a4 	.word	0x200013a4
 802e048:	200013a8 	.word	0x200013a8
 802e04c:	20001380 	.word	0x20001380
 802e050:	20001384 	.word	0x20001384
 802e054:	200013a0 	.word	0x200013a0
 802e058:	20001388 	.word	0x20001388
 802e05c:	2000138c 	.word	0x2000138c
 802e060:	2000234c 	.word	0x2000234c
 802e064:	08039760 	.word	0x08039760

0802e068 <SendPktCh>:
}

//========================================================================
int SendPktCh	( int nCh, const char *sBuf, int nSize )
//========================================================================
{
 802e068:	b580      	push	{r7, lr}
 802e06a:	b084      	sub	sp, #16
 802e06c:	af00      	add	r7, sp, #0
 802e06e:	60f8      	str	r0, [r7, #12]
 802e070:	60b9      	str	r1, [r7, #8]
 802e072:	607a      	str	r2, [r7, #4]
	Dump("Tx", sBuf, 0x40);
 802e074:	2240      	movs	r2, #64	; 0x40
 802e076:	68b9      	ldr	r1, [r7, #8]
 802e078:	480f      	ldr	r0, [pc, #60]	; (802e0b8 <SendPktCh+0x50>)
 802e07a:	f7ff fbb9 	bl	802d7f0 <Dump>

	//========================================================================
//	while( ( HAL_GetTick() - nTxStamp) <= 3 )	;	//	Tx 시작 후 완료까지 : 3msec
	while( ( HAL_GetTick() - nTxStamp) <= 4 )	;	//	Tx 시작 후 완료까지 : 3msec
 802e07e:	bf00      	nop
 802e080:	f7f3 fd72 	bl	8021b68 <HAL_GetTick>
 802e084:	4603      	mov	r3, r0
 802e086:	4a0d      	ldr	r2, [pc, #52]	; (802e0bc <SendPktCh+0x54>)
 802e088:	6812      	ldr	r2, [r2, #0]
 802e08a:	1a9b      	subs	r3, r3, r2
 802e08c:	2b04      	cmp	r3, #4
 802e08e:	d9f7      	bls.n	802e080 <SendPktCh+0x18>
	//========================================================================

	vRadio_StartTx_Variable_Packet (
 802e090:	68fb      	ldr	r3, [r7, #12]
 802e092:	b2d8      	uxtb	r0, r3
		nCh,	//		pRadioConfiguration->Radio_ChannelNumber,
		(U8 *)&sBuf[0],
		pRadioConfiguration->Radio_PacketLength );
 802e094:	4b0a      	ldr	r3, [pc, #40]	; (802e0c0 <SendPktCh+0x58>)
 802e096:	681b      	ldr	r3, [r3, #0]
	vRadio_StartTx_Variable_Packet (
 802e098:	795b      	ldrb	r3, [r3, #5]
 802e09a:	461a      	mov	r2, r3
 802e09c:	68b9      	ldr	r1, [r7, #8]
 802e09e:	f7ff f9bc 	bl	802d41a <vRadio_StartTx_Variable_Packet>

	//========================================================================
	nTxStamp = HAL_GetTick();
 802e0a2:	f7f3 fd61 	bl	8021b68 <HAL_GetTick>
 802e0a6:	4603      	mov	r3, r0
 802e0a8:	461a      	mov	r2, r3
 802e0aa:	4b04      	ldr	r3, [pc, #16]	; (802e0bc <SendPktCh+0x54>)
 802e0ac:	601a      	str	r2, [r3, #0]
	//========================================================================

	return TRUE;
 802e0ae:	2301      	movs	r3, #1
}
 802e0b0:	4618      	mov	r0, r3
 802e0b2:	3710      	adds	r7, #16
 802e0b4:	46bd      	mov	sp, r7
 802e0b6:	bd80      	pop	{r7, pc}
 802e0b8:	080397c0 	.word	0x080397c0
 802e0bc:	20001390 	.word	0x20001390
 802e0c0:	200004f0 	.word	0x200004f0

0802e0c4 <cmd_pktmon>:


//========================================================================
int cmd_pktmon      ( int argc, char * argv[] )
//========================================================================
{
 802e0c4:	b580      	push	{r7, lr}
 802e0c6:	b084      	sub	sp, #16
 802e0c8:	af00      	add	r7, sp, #0
 802e0ca:	6078      	str	r0, [r7, #4]
 802e0cc:	6039      	str	r1, [r7, #0]
	//	bEnable ( 1 / 0 )
	int bEnable = 1;	//	Default : Enable
 802e0ce:	2301      	movs	r3, #1
 802e0d0:	60fb      	str	r3, [r7, #12]

	switch ( argc )
 802e0d2:	687b      	ldr	r3, [r7, #4]
 802e0d4:	2b02      	cmp	r3, #2
 802e0d6:	d109      	bne.n	802e0ec <cmd_pktmon+0x28>
	{
	case 2:		sscanf( argv[1], "%d", &bEnable );	//	cmd [Enable]
 802e0d8:	683b      	ldr	r3, [r7, #0]
 802e0da:	3304      	adds	r3, #4
 802e0dc:	681b      	ldr	r3, [r3, #0]
 802e0de:	f107 020c 	add.w	r2, r7, #12
 802e0e2:	490a      	ldr	r1, [pc, #40]	; (802e10c <cmd_pktmon+0x48>)
 802e0e4:	4618      	mov	r0, r3
 802e0e6:	f009 fb27 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];					//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
		break;
 802e0ea:	bf00      	nop
	}

	printf( "%s(%d) - En(%d)\n", __func__, __LINE__, bEnable );
 802e0ec:	68fb      	ldr	r3, [r7, #12]
 802e0ee:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 802e0f2:	4907      	ldr	r1, [pc, #28]	; (802e110 <cmd_pktmon+0x4c>)
 802e0f4:	4807      	ldr	r0, [pc, #28]	; (802e114 <cmd_pktmon+0x50>)
 802e0f6:	f009 f8cd 	bl	8037294 <iprintf>

	s_bShowPkt = bEnable;
 802e0fa:	68fb      	ldr	r3, [r7, #12]
 802e0fc:	4a06      	ldr	r2, [pc, #24]	; (802e118 <cmd_pktmon+0x54>)
 802e0fe:	6013      	str	r3, [r2, #0]
}
 802e100:	bf00      	nop
 802e102:	4618      	mov	r0, r3
 802e104:	3710      	adds	r7, #16
 802e106:	46bd      	mov	sp, r7
 802e108:	bd80      	pop	{r7, pc}
 802e10a:	bf00      	nop
 802e10c:	080397c4 	.word	0x080397c4
 802e110:	080415dc 	.word	0x080415dc
 802e114:	080397c8 	.word	0x080397c8
 802e118:	200013a4 	.word	0x200013a4

0802e11c <init_queue>:


//===========================================================================
void init_queue( Queue_t *q )
//===========================================================================
{
 802e11c:	b480      	push	{r7}
 802e11e:	b083      	sub	sp, #12
 802e120:	af00      	add	r7, sp, #0
 802e122:	6078      	str	r0, [r7, #4]
	q->front = q->rear = 0;
 802e124:	687b      	ldr	r3, [r7, #4]
 802e126:	2200      	movs	r2, #0
 802e128:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 802e12c:	687b      	ldr	r3, [r7, #4]
 802e12e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 802e132:	687b      	ldr	r3, [r7, #4]
 802e134:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 802e138:	bf00      	nop
 802e13a:	370c      	adds	r7, #12
 802e13c:	46bd      	mov	sp, r7
 802e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e142:	4770      	bx	lr

0802e144 <qcount>:
}

//===========================================================================
int qcount( Queue_t *q )
//===========================================================================
{
 802e144:	b480      	push	{r7}
 802e146:	b083      	sub	sp, #12
 802e148:	af00      	add	r7, sp, #0
 802e14a:	6078      	str	r0, [r7, #4]
	return (((q->rear+QMAX)-q->front) % QMAX);
 802e14c:	687b      	ldr	r3, [r7, #4]
 802e14e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 802e152:	f503 7280 	add.w	r2, r3, #256	; 0x100
 802e156:	687b      	ldr	r3, [r7, #4]
 802e158:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802e15c:	1ad3      	subs	r3, r2, r3
 802e15e:	425a      	negs	r2, r3
 802e160:	b2db      	uxtb	r3, r3
 802e162:	b2d2      	uxtb	r2, r2
 802e164:	bf58      	it	pl
 802e166:	4253      	negpl	r3, r2
}
 802e168:	4618      	mov	r0, r3
 802e16a:	370c      	adds	r7, #12
 802e16c:	46bd      	mov	sp, r7
 802e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e172:	4770      	bx	lr

0802e174 <qput>:

//===========================================================================
int qput( Queue_t *q, unsigned char k )
//===========================================================================
{
 802e174:	b480      	push	{r7}
 802e176:	b083      	sub	sp, #12
 802e178:	af00      	add	r7, sp, #0
 802e17a:	6078      	str	r0, [r7, #4]
 802e17c:	460b      	mov	r3, r1
 802e17e:	70fb      	strb	r3, [r7, #3]
	if ( (q->rear + 1) % QMAX == q->front )
 802e180:	687b      	ldr	r3, [r7, #4]
 802e182:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 802e186:	3301      	adds	r3, #1
 802e188:	425a      	negs	r2, r3
 802e18a:	b2db      	uxtb	r3, r3
 802e18c:	b2d2      	uxtb	r2, r2
 802e18e:	bf58      	it	pl
 802e190:	4253      	negpl	r3, r2
 802e192:	687a      	ldr	r2, [r7, #4]
 802e194:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 802e198:	4293      	cmp	r3, r2
 802e19a:	d102      	bne.n	802e1a2 <qput+0x2e>
	{
//		printf( "\n\tCircular Queue Overflow." );
//		printf( "\n\tQOver" );
		return -1;
 802e19c:	f04f 33ff 	mov.w	r3, #4294967295
 802e1a0:	e012      	b.n	802e1c8 <qput+0x54>
	}
	q->queue[q->rear] = k;
 802e1a2:	687b      	ldr	r3, [r7, #4]
 802e1a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 802e1a8:	687a      	ldr	r2, [r7, #4]
 802e1aa:	78f9      	ldrb	r1, [r7, #3]
 802e1ac:	54d1      	strb	r1, [r2, r3]
	q->rear = (q->rear + 1) % QMAX;
 802e1ae:	687b      	ldr	r3, [r7, #4]
 802e1b0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 802e1b4:	3301      	adds	r3, #1
 802e1b6:	425a      	negs	r2, r3
 802e1b8:	b2db      	uxtb	r3, r3
 802e1ba:	b2d2      	uxtb	r2, r2
 802e1bc:	bf58      	it	pl
 802e1be:	4253      	negpl	r3, r2
 802e1c0:	687a      	ldr	r2, [r7, #4]
 802e1c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	return k;
 802e1c6:	78fb      	ldrb	r3, [r7, #3]
}
 802e1c8:	4618      	mov	r0, r3
 802e1ca:	370c      	adds	r7, #12
 802e1cc:	46bd      	mov	sp, r7
 802e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e1d2:	4770      	bx	lr

0802e1d4 <qget>:

//===========================================================================
unsigned char qget( Queue_t *q )
//===========================================================================
{
 802e1d4:	b480      	push	{r7}
 802e1d6:	b085      	sub	sp, #20
 802e1d8:	af00      	add	r7, sp, #0
 802e1da:	6078      	str	r0, [r7, #4]
	if(front == rear){
		printf("\n\tCircular Queue Underflow.");
		return -1;
	}
	*/
	i = q->queue[q->front];
 802e1dc:	687b      	ldr	r3, [r7, #4]
 802e1de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802e1e2:	687a      	ldr	r2, [r7, #4]
 802e1e4:	5cd3      	ldrb	r3, [r2, r3]
 802e1e6:	73fb      	strb	r3, [r7, #15]
	q->front = (q->front + 1) % QMAX;
 802e1e8:	687b      	ldr	r3, [r7, #4]
 802e1ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802e1ee:	3301      	adds	r3, #1
 802e1f0:	425a      	negs	r2, r3
 802e1f2:	b2db      	uxtb	r3, r3
 802e1f4:	b2d2      	uxtb	r2, r2
 802e1f6:	bf58      	it	pl
 802e1f8:	4253      	negpl	r3, r2
 802e1fa:	687a      	ldr	r2, [r7, #4]
 802e1fc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	return i;
 802e200:	7bfb      	ldrb	r3, [r7, #15]
}
 802e202:	4618      	mov	r0, r3
 802e204:	3714      	adds	r7, #20
 802e206:	46bd      	mov	sp, r7
 802e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e20c:	4770      	bx	lr

0802e20e <qBufInit>:


//===========================================================================
void qBufInit( QBuf_t *q, uint8_t *_qBuf, int _size )
//===========================================================================
{
 802e20e:	b480      	push	{r7}
 802e210:	b085      	sub	sp, #20
 802e212:	af00      	add	r7, sp, #0
 802e214:	60f8      	str	r0, [r7, #12]
 802e216:	60b9      	str	r1, [r7, #8]
 802e218:	607a      	str	r2, [r7, #4]
	q->front = q->rear = 0;
 802e21a:	68fb      	ldr	r3, [r7, #12]
 802e21c:	2200      	movs	r2, #0
 802e21e:	60da      	str	r2, [r3, #12]
 802e220:	68fb      	ldr	r3, [r7, #12]
 802e222:	68da      	ldr	r2, [r3, #12]
 802e224:	68fb      	ldr	r3, [r7, #12]
 802e226:	609a      	str	r2, [r3, #8]

	q->qBuf = _qBuf;
 802e228:	68fb      	ldr	r3, [r7, #12]
 802e22a:	68ba      	ldr	r2, [r7, #8]
 802e22c:	601a      	str	r2, [r3, #0]
	q->size = _size;
 802e22e:	68fb      	ldr	r3, [r7, #12]
 802e230:	687a      	ldr	r2, [r7, #4]
 802e232:	605a      	str	r2, [r3, #4]

//	printf( "%s(%d) - q(%p) / _qBuf(%p) / _size(%d)\n", __func__, __LINE__,
//		q, _qBuf, _size);
}
 802e234:	bf00      	nop
 802e236:	3714      	adds	r7, #20
 802e238:	46bd      	mov	sp, r7
 802e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e23e:	4770      	bx	lr

0802e240 <qBufClear>:

//===========================================================================
void qBufClear( QBuf_t *q )
//===========================================================================
{
 802e240:	b480      	push	{r7}
 802e242:	b083      	sub	sp, #12
 802e244:	af00      	add	r7, sp, #0
 802e246:	6078      	str	r0, [r7, #4]
	q->front = q->rear;
 802e248:	687b      	ldr	r3, [r7, #4]
 802e24a:	68da      	ldr	r2, [r3, #12]
 802e24c:	687b      	ldr	r3, [r7, #4]
 802e24e:	609a      	str	r2, [r3, #8]
}
 802e250:	bf00      	nop
 802e252:	370c      	adds	r7, #12
 802e254:	46bd      	mov	sp, r7
 802e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e25a:	4770      	bx	lr

0802e25c <qBufCnt>:

//===========================================================================
int qBufCnt( QBuf_t *q )
//===========================================================================
{
 802e25c:	b480      	push	{r7}
 802e25e:	b083      	sub	sp, #12
 802e260:	af00      	add	r7, sp, #0
 802e262:	6078      	str	r0, [r7, #4]
	return ( ( ( q->rear + q->size ) - q->front ) % q->size );
 802e264:	687b      	ldr	r3, [r7, #4]
 802e266:	68da      	ldr	r2, [r3, #12]
 802e268:	687b      	ldr	r3, [r7, #4]
 802e26a:	685b      	ldr	r3, [r3, #4]
 802e26c:	441a      	add	r2, r3
 802e26e:	687b      	ldr	r3, [r7, #4]
 802e270:	689b      	ldr	r3, [r3, #8]
 802e272:	1ad3      	subs	r3, r2, r3
 802e274:	687a      	ldr	r2, [r7, #4]
 802e276:	6852      	ldr	r2, [r2, #4]
 802e278:	fb93 f1f2 	sdiv	r1, r3, r2
 802e27c:	fb01 f202 	mul.w	r2, r1, r2
 802e280:	1a9b      	subs	r3, r3, r2
}
 802e282:	4618      	mov	r0, r3
 802e284:	370c      	adds	r7, #12
 802e286:	46bd      	mov	sp, r7
 802e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e28c:	4770      	bx	lr

0802e28e <qBufPut>:

//===========================================================================
int qBufPut( QBuf_t *q, uint8_t *pBuf, int size )
//===========================================================================
{
 802e28e:	b580      	push	{r7, lr}
 802e290:	b084      	sub	sp, #16
 802e292:	af00      	add	r7, sp, #0
 802e294:	60f8      	str	r0, [r7, #12]
 802e296:	60b9      	str	r1, [r7, #8]
 802e298:	607a      	str	r2, [r7, #4]
	if ( ( q->rear + size ) % q->size == q->front )
 802e29a:	68fb      	ldr	r3, [r7, #12]
 802e29c:	68da      	ldr	r2, [r3, #12]
 802e29e:	687b      	ldr	r3, [r7, #4]
 802e2a0:	4413      	add	r3, r2
 802e2a2:	68fa      	ldr	r2, [r7, #12]
 802e2a4:	6852      	ldr	r2, [r2, #4]
 802e2a6:	fb93 f1f2 	sdiv	r1, r3, r2
 802e2aa:	fb01 f202 	mul.w	r2, r1, r2
 802e2ae:	1a9a      	subs	r2, r3, r2
 802e2b0:	68fb      	ldr	r3, [r7, #12]
 802e2b2:	689b      	ldr	r3, [r3, #8]
 802e2b4:	429a      	cmp	r2, r3
 802e2b6:	d102      	bne.n	802e2be <qBufPut+0x30>
	{
//		printf( "\n\tCircular Queue Overflow." );
		return -1;
 802e2b8:	f04f 33ff 	mov.w	r3, #4294967295
 802e2bc:	e017      	b.n	802e2ee <qBufPut+0x60>
	}

	memcpy( &q->qBuf[q->rear], pBuf, size );
 802e2be:	68fb      	ldr	r3, [r7, #12]
 802e2c0:	681b      	ldr	r3, [r3, #0]
 802e2c2:	68fa      	ldr	r2, [r7, #12]
 802e2c4:	68d2      	ldr	r2, [r2, #12]
 802e2c6:	4413      	add	r3, r2
 802e2c8:	687a      	ldr	r2, [r7, #4]
 802e2ca:	68b9      	ldr	r1, [r7, #8]
 802e2cc:	4618      	mov	r0, r3
 802e2ce:	f008 feeb 	bl	80370a8 <memcpy>
//	q->qBuf[q->rear] = k;
	q->rear = ( q->rear + size ) % q->size;
 802e2d2:	68fb      	ldr	r3, [r7, #12]
 802e2d4:	68da      	ldr	r2, [r3, #12]
 802e2d6:	687b      	ldr	r3, [r7, #4]
 802e2d8:	4413      	add	r3, r2
 802e2da:	68fa      	ldr	r2, [r7, #12]
 802e2dc:	6852      	ldr	r2, [r2, #4]
 802e2de:	fb93 f1f2 	sdiv	r1, r3, r2
 802e2e2:	fb01 f202 	mul.w	r2, r1, r2
 802e2e6:	1a9a      	subs	r2, r3, r2
 802e2e8:	68fb      	ldr	r3, [r7, #12]
 802e2ea:	60da      	str	r2, [r3, #12]

//	printf( "%s(%d) - q(%p) / q->rear(%d) / q->front(%d)\n", __func__, __LINE__,
//		q, q->rear, q->front );

	return size;
 802e2ec:	687b      	ldr	r3, [r7, #4]
}
 802e2ee:	4618      	mov	r0, r3
 802e2f0:	3710      	adds	r7, #16
 802e2f2:	46bd      	mov	sp, r7
 802e2f4:	bd80      	pop	{r7, pc}

0802e2f6 <qBufGet>:

//===========================================================================
int qBufGet( QBuf_t *q, uint8_t *pBuf, int size )
//===========================================================================
{
 802e2f6:	b580      	push	{r7, lr}
 802e2f8:	b084      	sub	sp, #16
 802e2fa:	af00      	add	r7, sp, #0
 802e2fc:	60f8      	str	r0, [r7, #12]
 802e2fe:	60b9      	str	r1, [r7, #8]
 802e300:	607a      	str	r2, [r7, #4]
	//*
	if ( q->front == q->rear )
 802e302:	68fb      	ldr	r3, [r7, #12]
 802e304:	689a      	ldr	r2, [r3, #8]
 802e306:	68fb      	ldr	r3, [r7, #12]
 802e308:	68db      	ldr	r3, [r3, #12]
 802e30a:	429a      	cmp	r2, r3
 802e30c:	d102      	bne.n	802e314 <qBufGet+0x1e>
	{
//		printf( "\n\tCircular Queue Underflow." );
		return -1;
 802e30e:	f04f 33ff 	mov.w	r3, #4294967295
 802e312:	e017      	b.n	802e344 <qBufGet+0x4e>
	}
	//	*/

	memcpy( pBuf, &q->qBuf[q->front], size );
 802e314:	68fb      	ldr	r3, [r7, #12]
 802e316:	681b      	ldr	r3, [r3, #0]
 802e318:	68fa      	ldr	r2, [r7, #12]
 802e31a:	6892      	ldr	r2, [r2, #8]
 802e31c:	4413      	add	r3, r2
 802e31e:	687a      	ldr	r2, [r7, #4]
 802e320:	4619      	mov	r1, r3
 802e322:	68b8      	ldr	r0, [r7, #8]
 802e324:	f008 fec0 	bl	80370a8 <memcpy>

	q->front = ( q->front + size ) % q->size;
 802e328:	68fb      	ldr	r3, [r7, #12]
 802e32a:	689a      	ldr	r2, [r3, #8]
 802e32c:	687b      	ldr	r3, [r7, #4]
 802e32e:	4413      	add	r3, r2
 802e330:	68fa      	ldr	r2, [r7, #12]
 802e332:	6852      	ldr	r2, [r2, #4]
 802e334:	fb93 f1f2 	sdiv	r1, r3, r2
 802e338:	fb01 f202 	mul.w	r2, r1, r2
 802e33c:	1a9a      	subs	r2, r3, r2
 802e33e:	68fb      	ldr	r3, [r7, #12]
 802e340:	609a      	str	r2, [r3, #8]

//	printf( "%s(%d) - q(%p) / q->rear(%d) / q->front(%d)\n", __func__, __LINE__,
//		q, q->rear, q->front );

	return size;
 802e342:	687b      	ldr	r3, [r7, #4]
}
 802e344:	4618      	mov	r0, r3
 802e346:	3710      	adds	r7, #16
 802e348:	46bd      	mov	sp, r7
 802e34a:	bd80      	pop	{r7, pc}

0802e34c <_MakePktHdr>:
//==========================================================================

//========================================================================
void _MakePktHdr	( RFMPkt *pPkt, int addrSrc, int addrDest, int nLen, int nPktCmd )
//========================================================================
{
 802e34c:	b580      	push	{r7, lr}
 802e34e:	b084      	sub	sp, #16
 802e350:	af00      	add	r7, sp, #0
 802e352:	60f8      	str	r0, [r7, #12]
 802e354:	60b9      	str	r1, [r7, #8]
 802e356:	607a      	str	r2, [r7, #4]
 802e358:	603b      	str	r3, [r7, #0]
#if	defined(USE_HOPPING)

	if ( nPktCmd == PktStat
 802e35a:	69bb      	ldr	r3, [r7, #24]
 802e35c:	2b01      	cmp	r3, #1
 802e35e:	d00e      	beq.n	802e37e <_MakePktHdr+0x32>
		|| nPktCmd == PktStatReq
 802e360:	69bb      	ldr	r3, [r7, #24]
 802e362:	2b11      	cmp	r3, #17
 802e364:	d00b      	beq.n	802e37e <_MakePktHdr+0x32>
		|| nPktCmd == PktCmd
 802e366:	69bb      	ldr	r3, [r7, #24]
 802e368:	2b20      	cmp	r3, #32
 802e36a:	d008      	beq.n	802e37e <_MakePktHdr+0x32>
		|| nPktCmd == PktUpgr
 802e36c:	69bb      	ldr	r3, [r7, #24]
 802e36e:	2b40      	cmp	r3, #64	; 0x40
 802e370:	d005      	beq.n	802e37e <_MakePktHdr+0x32>
		|| nPktCmd == PktRouteReq
 802e372:	69bb      	ldr	r3, [r7, #24]
 802e374:	2b31      	cmp	r3, #49	; 0x31
 802e376:	d002      	beq.n	802e37e <_MakePktHdr+0x32>
		|| nPktCmd == PktRouteRsp
 802e378:	69bb      	ldr	r3, [r7, #24]
 802e37a:	2b32      	cmp	r3, #50	; 0x32
 802e37c:	d10f      	bne.n	802e39e <_MakePktHdr+0x52>
		)
	{
		//	상태정보의 경우 Seq / ID : 0x00
		pPkt->hdr.bHdrID		=	HdrID1;		//	Header ID #1
 802e37e:	68fa      	ldr	r2, [r7, #12]
 802e380:	7853      	ldrb	r3, [r2, #1]
 802e382:	f36f 1387 	bfc	r3, #6, #2
 802e386:	7053      	strb	r3, [r2, #1]
		pPkt->hdr.nSeq			=	0x00;		//	Sequence
 802e388:	68fb      	ldr	r3, [r7, #12]
 802e38a:	2200      	movs	r2, #0
 802e38c:	709a      	strb	r2, [r3, #2]
		pPkt->hdr.nIDFlag		=	0x00;		//	ID Flag
 802e38e:	68fb      	ldr	r3, [r7, #12]
 802e390:	2200      	movs	r2, #0
 802e392:	701a      	strb	r2, [r3, #0]
 802e394:	785a      	ldrb	r2, [r3, #1]
 802e396:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 802e39a:	705a      	strb	r2, [r3, #1]
 802e39c:	e04b      	b.n	802e436 <_MakePktHdr+0xea>
	}
	else
	{
		g_nPktSeq++;
 802e39e:	4b2a      	ldr	r3, [pc, #168]	; (802e448 <_MakePktHdr+0xfc>)
 802e3a0:	781b      	ldrb	r3, [r3, #0]
 802e3a2:	3301      	adds	r3, #1
 802e3a4:	b2da      	uxtb	r2, r3
 802e3a6:	4b28      	ldr	r3, [pc, #160]	; (802e448 <_MakePktHdr+0xfc>)
 802e3a8:	701a      	strb	r2, [r3, #0]
		if ( g_nPktSeq == 0 )	g_nPktSeq++;
 802e3aa:	4b27      	ldr	r3, [pc, #156]	; (802e448 <_MakePktHdr+0xfc>)
 802e3ac:	781b      	ldrb	r3, [r3, #0]
 802e3ae:	2b00      	cmp	r3, #0
 802e3b0:	d105      	bne.n	802e3be <_MakePktHdr+0x72>
 802e3b2:	4b25      	ldr	r3, [pc, #148]	; (802e448 <_MakePktHdr+0xfc>)
 802e3b4:	781b      	ldrb	r3, [r3, #0]
 802e3b6:	3301      	adds	r3, #1
 802e3b8:	b2da      	uxtb	r2, r3
 802e3ba:	4b23      	ldr	r3, [pc, #140]	; (802e448 <_MakePktHdr+0xfc>)
 802e3bc:	701a      	strb	r2, [r3, #0]
		pPkt->hdr.nSeq			=	g_nPktSeq;			//
 802e3be:	4b22      	ldr	r3, [pc, #136]	; (802e448 <_MakePktHdr+0xfc>)
 802e3c0:	781a      	ldrb	r2, [r3, #0]
 802e3c2:	68fb      	ldr	r3, [r7, #12]
 802e3c4:	709a      	strb	r2, [r3, #2]

		if ( GetDevID() == DevRF900T )
 802e3c6:	f004 f983 	bl	80326d0 <GetDevID>
 802e3ca:	4603      	mov	r3, r0
 802e3cc:	2b02      	cmp	r3, #2
 802e3ce:	d11b      	bne.n	802e408 <_MakePktHdr+0xbc>
		{
			//	송신기.
			//		송신기의 송/수신반경과 수신기의 송/수신반경의 차이로 
			//		송신기가 상태정보를 수신후에 수신기에 송신을 할때 범위에 도달하지 못하는 경우가 있으므로, 
			//		수신기에서 중계를 할 수 있도록 송신기 ID만 설정하여 송신함.
			pPkt->hdr.nIDFlag		=	(0x1 << GetCarNo());	//	송신기는 자신의 ID만 Set하여 전송.
 802e3d0:	f004 fd48 	bl	8032e64 <GetCarNo>
 802e3d4:	4603      	mov	r3, r0
 802e3d6:	2201      	movs	r2, #1
 802e3d8:	fa02 f303 	lsl.w	r3, r2, r3
 802e3dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 802e3e0:	b29a      	uxth	r2, r3
 802e3e2:	68fb      	ldr	r3, [r7, #12]
 802e3e4:	b2d1      	uxtb	r1, r2
 802e3e6:	2000      	movs	r0, #0
 802e3e8:	4301      	orrs	r1, r0
 802e3ea:	7019      	strb	r1, [r3, #0]
 802e3ec:	0a12      	lsrs	r2, r2, #8
 802e3ee:	b292      	uxth	r2, r2
 802e3f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 802e3f4:	f002 003f 	and.w	r0, r2, #63	; 0x3f
 802e3f8:	785a      	ldrb	r2, [r3, #1]
 802e3fa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 802e3fe:	4611      	mov	r1, r2
 802e400:	4602      	mov	r2, r0
 802e402:	430a      	orrs	r2, r1
 802e404:	705a      	strb	r2, [r3, #1]
 802e406:	e016      	b.n	802e436 <_MakePktHdr+0xea>
		}
		else
		{
			//	수신기.
			pPkt->hdr.nIDFlag		=	g_flagRspID;		//
 802e408:	4b10      	ldr	r3, [pc, #64]	; (802e44c <_MakePktHdr+0x100>)
 802e40a:	881b      	ldrh	r3, [r3, #0]
 802e40c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 802e410:	b29a      	uxth	r2, r3
 802e412:	68fb      	ldr	r3, [r7, #12]
 802e414:	b2d1      	uxtb	r1, r2
 802e416:	2000      	movs	r0, #0
 802e418:	4301      	orrs	r1, r0
 802e41a:	7019      	strb	r1, [r3, #0]
 802e41c:	0a12      	lsrs	r2, r2, #8
 802e41e:	b292      	uxth	r2, r2
 802e420:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 802e424:	f002 003f 	and.w	r0, r2, #63	; 0x3f
 802e428:	785a      	ldrb	r2, [r3, #1]
 802e42a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 802e42e:	4611      	mov	r1, r2
 802e430:	4602      	mov	r2, r0
 802e432:	430a      	orrs	r2, r1
 802e434:	705a      	strb	r2, [r3, #1]
	pPkt->hdr.addrDest		=	addrDest;		//	Broadcast
	pPkt->hdr.nLen			=	nLen;			//	Length

#endif

	pPkt->hdr.nPktCmd		=	nPktCmd;		//	Status
 802e436:	69bb      	ldr	r3, [r7, #24]
 802e438:	b2da      	uxtb	r2, r3
 802e43a:	68fb      	ldr	r3, [r7, #12]
 802e43c:	70da      	strb	r2, [r3, #3]
}
 802e43e:	bf00      	nop
 802e440:	3710      	adds	r7, #16
 802e442:	46bd      	mov	sp, r7
 802e444:	bd80      	pop	{r7, pc}
 802e446:	bf00      	nop
 802e448:	200013a2 	.word	0x200013a2
 802e44c:	200013a0 	.word	0x200013a0

0802e450 <_MakePktHdr2>:
#if defined(USE_CH_ISO_DEV)		//	장치별 채널분리.

//========================================================================
void _MakePktHdr2	( RFMPkt *pPkt, int nPktCmd )
//========================================================================
{
 802e450:	b580      	push	{r7, lr}
 802e452:	b082      	sub	sp, #8
 802e454:	af00      	add	r7, sp, #0
 802e456:	6078      	str	r0, [r7, #4]
 802e458:	6039      	str	r1, [r7, #0]
	//	상태정보의 경우 Seq / ID : 0x00
	pPkt->hdr2.bHdrID		=	HdrID2;				//	Header ID #1
 802e45a:	687a      	ldr	r2, [r7, #4]
 802e45c:	7813      	ldrb	r3, [r2, #0]
 802e45e:	2101      	movs	r1, #1
 802e460:	f361 1387 	bfi	r3, r1, #6, #2
 802e464:	7013      	strb	r3, [r2, #0]
	pPkt->hdr2.nSrcCh		=	GetChRx();			//	Source Channel
 802e466:	f004 f9d9 	bl	803281c <GetChRx>
 802e46a:	4603      	mov	r3, r0
 802e46c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802e470:	b2d9      	uxtb	r1, r3
 802e472:	687a      	ldr	r2, [r7, #4]
 802e474:	7853      	ldrb	r3, [r2, #1]
 802e476:	f361 0305 	bfi	r3, r1, #0, #6
 802e47a:	7053      	strb	r3, [r2, #1]
	pPkt->hdr2.nTS			=	GetTrainSetIdx();	//	ID Flag
 802e47c:	f004 fb80 	bl	8032b80 <GetTrainSetIdx>
 802e480:	4603      	mov	r3, r0
 802e482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802e486:	b2d9      	uxtb	r1, r3
 802e488:	687a      	ldr	r2, [r7, #4]
 802e48a:	7813      	ldrb	r3, [r2, #0]
 802e48c:	f361 0305 	bfi	r3, r1, #0, #6
 802e490:	7013      	strb	r3, [r2, #0]
	pPkt->hdr2.nPktCmd		=	nPktCmd;			//	Status
 802e492:	683b      	ldr	r3, [r7, #0]
 802e494:	b2da      	uxtb	r2, r3
 802e496:	687b      	ldr	r3, [r7, #4]
 802e498:	70da      	strb	r2, [r3, #3]
//	CLEAR_BIT(pPkt->hdr2.nTS, (0x1<<7));
//	SET_BIT(pPkt->hdr2.nTS, (0x1<<6));

#if defined( USE_RFT_REG_TO_RFM )
	//	자신의 송신기 ID Flag 설정.	-	재수신 받지 않음.
	if( GetRFTID() == 1 )
 802e49a:	f004 f9a9 	bl	80327f0 <GetRFTID>
 802e49e:	4603      	mov	r3, r0
 802e4a0:	2b01      	cmp	r3, #1
 802e4a2:	d10f      	bne.n	802e4c4 <_MakePktHdr2+0x74>
	{
		pPkt->hdr2.bRFT1	=	1;	//	SET_BIT( pPkt->hdr2.nSrcCh, (0x1<<6) );	//
 802e4a4:	687a      	ldr	r2, [r7, #4]
 802e4a6:	7853      	ldrb	r3, [r2, #1]
 802e4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e4ac:	7053      	strb	r3, [r2, #1]
		if( GetChPARFT() != 0 )	pPkt->hdr2.bRFT2	=	1;	//	송신기에 직접 전송하는경우.
 802e4ae:	f004 facf 	bl	8032a50 <GetChPARFT>
 802e4b2:	4603      	mov	r3, r0
 802e4b4:	2b00      	cmp	r3, #0
 802e4b6:	d019      	beq.n	802e4ec <_MakePktHdr2+0x9c>
 802e4b8:	687a      	ldr	r2, [r7, #4]
 802e4ba:	7853      	ldrb	r3, [r2, #1]
 802e4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e4c0:	7053      	strb	r3, [r2, #1]
		pPkt->hdr2.bRFT2	=	1;	//	SET_BIT( pPkt->hdr2.nSrcCh, (0x1<<7) );//
		if( GetChPARFT() != 0 )	pPkt->hdr2.bRFT1	=	1;	//	송신기에 직접 전송하는경우.
	}

#endif
}
 802e4c2:	e013      	b.n	802e4ec <_MakePktHdr2+0x9c>
	else if( GetRFTID() == 2 )
 802e4c4:	f004 f994 	bl	80327f0 <GetRFTID>
 802e4c8:	4603      	mov	r3, r0
 802e4ca:	2b02      	cmp	r3, #2
 802e4cc:	d10e      	bne.n	802e4ec <_MakePktHdr2+0x9c>
		pPkt->hdr2.bRFT2	=	1;	//	SET_BIT( pPkt->hdr2.nSrcCh, (0x1<<7) );//
 802e4ce:	687a      	ldr	r2, [r7, #4]
 802e4d0:	7853      	ldrb	r3, [r2, #1]
 802e4d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e4d6:	7053      	strb	r3, [r2, #1]
		if( GetChPARFT() != 0 )	pPkt->hdr2.bRFT1	=	1;	//	송신기에 직접 전송하는경우.
 802e4d8:	f004 faba 	bl	8032a50 <GetChPARFT>
 802e4dc:	4603      	mov	r3, r0
 802e4de:	2b00      	cmp	r3, #0
 802e4e0:	d004      	beq.n	802e4ec <_MakePktHdr2+0x9c>
 802e4e2:	687a      	ldr	r2, [r7, #4]
 802e4e4:	7853      	ldrb	r3, [r2, #1]
 802e4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e4ea:	7053      	strb	r3, [r2, #1]
}
 802e4ec:	bf00      	nop
 802e4ee:	3708      	adds	r7, #8
 802e4f0:	46bd      	mov	sp, r7
 802e4f2:	bd80      	pop	{r7, pc}

0802e4f4 <_MakeRFCmd>:
#endif	//	defined(USE_CH_ISO_DEV)		//	장치별 채널분리.

//==========================================================================
void _MakeRFCmd( RFMPkt	*pPkt, char *sCmd, int nRSSI )
//==========================================================================
{
 802e4f4:	b580      	push	{r7, lr}
 802e4f6:	b086      	sub	sp, #24
 802e4f8:	af02      	add	r7, sp, #8
 802e4fa:	60f8      	str	r0, [r7, #12]
 802e4fc:	60b9      	str	r1, [r7, #8]
 802e4fe:	607a      	str	r2, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802e500:	229a      	movs	r2, #154	; 0x9a
 802e502:	4910      	ldr	r1, [pc, #64]	; (802e544 <_MakeRFCmd+0x50>)
 802e504:	4810      	ldr	r0, [pc, #64]	; (802e548 <_MakeRFCmd+0x54>)
 802e506:	f008 fec5 	bl	8037294 <iprintf>

	memset( pPkt, 0, sizeof( RFMPkt ) );
 802e50a:	2240      	movs	r2, #64	; 0x40
 802e50c:	2100      	movs	r1, #0
 802e50e:	68f8      	ldr	r0, [r7, #12]
 802e510:	f008 fdd8 	bl	80370c4 <memset>

	//========================================================================
	//	Packet Header
	_MakePktHdr( pPkt, GetDevID(), 0xFF, RFPktDataLen, PktCmd );
 802e514:	f004 f8dc 	bl	80326d0 <GetDevID>
 802e518:	4601      	mov	r1, r0
 802e51a:	2320      	movs	r3, #32
 802e51c:	9300      	str	r3, [sp, #0]
 802e51e:	233c      	movs	r3, #60	; 0x3c
 802e520:	22ff      	movs	r2, #255	; 0xff
 802e522:	68f8      	ldr	r0, [r7, #12]
 802e524:	f7ff ff12 	bl	802e34c <_MakePktHdr>

	//========================================================================
	//	Command
	pPkt->dat.cmd.nRSSIOver = nRSSI;		//	명령 동작 RSSI 범위.
 802e528:	687b      	ldr	r3, [r7, #4]
 802e52a:	b25a      	sxtb	r2, r3
 802e52c:	68fb      	ldr	r3, [r7, #12]
 802e52e:	711a      	strb	r2, [r3, #4]
	strcpy( pPkt->dat.cmd.sCmd, sCmd );		//	명령 전송.
 802e530:	68fb      	ldr	r3, [r7, #12]
 802e532:	3308      	adds	r3, #8
 802e534:	68b9      	ldr	r1, [r7, #8]
 802e536:	4618      	mov	r0, r3
 802e538:	f009 f97c 	bl	8037834 <strcpy>

	//========================================================================
}
 802e53c:	bf00      	nop
 802e53e:	3710      	adds	r7, #16
 802e540:	46bd      	mov	sp, r7
 802e542:	bd80      	pop	{r7, pc}
 802e544:	080415e8 	.word	0x080415e8
 802e548:	080397dc 	.word	0x080397dc

0802e54c <SendStatReq>:


//========================================================================
void SendStatReq( int nDestCh )
//========================================================================
{
 802e54c:	b580      	push	{r7, lr}
 802e54e:	b096      	sub	sp, #88	; 0x58
 802e550:	af02      	add	r7, sp, #8
 802e552:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )	printf( "%s(%d)\n", __func__, __LINE__ );
 802e554:	f002 fce4 	bl	8030f20 <GetDbg>
 802e558:	4603      	mov	r3, r0
 802e55a:	2b00      	cmp	r3, #0
 802e55c:	d004      	beq.n	802e568 <SendStatReq+0x1c>
 802e55e:	22af      	movs	r2, #175	; 0xaf
 802e560:	491e      	ldr	r1, [pc, #120]	; (802e5dc <SendStatReq+0x90>)
 802e562:	481f      	ldr	r0, [pc, #124]	; (802e5e0 <SendStatReq+0x94>)
 802e564:	f008 fe96 	bl	8037294 <iprintf>

	RFMPkt			stPkt;
	RFMPktStatReq	*pStatReq;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e568:	f107 030c 	add.w	r3, r7, #12
 802e56c:	2240      	movs	r2, #64	; 0x40
 802e56e:	2100      	movs	r1, #0
 802e570:	4618      	mov	r0, r3
 802e572:	f008 fda7 	bl	80370c4 <memset>
	pStatReq = (RFMPktStatReq *)&stPkt.dat.statReq;
 802e576:	f107 030c 	add.w	r3, r7, #12
 802e57a:	3304      	adds	r3, #4
 802e57c:	64fb      	str	r3, [r7, #76]	; 0x4c

	//========================================================================
	//	Packet Header
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktStatReq ), PktStatReq );
 802e57e:	f004 f8a7 	bl	80326d0 <GetDevID>
 802e582:	4601      	mov	r1, r0
 802e584:	f107 000c 	add.w	r0, r7, #12
 802e588:	2311      	movs	r3, #17
 802e58a:	9300      	str	r3, [sp, #0]
 802e58c:	230c      	movs	r3, #12
 802e58e:	22ff      	movs	r2, #255	; 0xff
 802e590:	f7ff fedc 	bl	802e34c <_MakePktHdr>

	//========================================================================
	//	Packet Body
	pStatReq->nSrcCh	=	GetChRx();			//	수신받을 채널
 802e594:	f004 f942 	bl	803281c <GetChRx>
 802e598:	4603      	mov	r3, r0
 802e59a:	b2da      	uxtb	r2, r3
 802e59c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e59e:	701a      	strb	r2, [r3, #0]

	pStatReq->nCarNo	=	GetCarNo();			//	호차번호.
 802e5a0:	f004 fc60 	bl	8032e64 <GetCarNo>
 802e5a4:	4603      	mov	r3, r0
 802e5a6:	b2da      	uxtb	r2, r3
 802e5a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e5aa:	715a      	strb	r2, [r3, #5]
	pStatReq->nTrainNo	=	GetTrainSetIdx();	//	편성번호.
 802e5ac:	f004 fae8 	bl	8032b80 <GetTrainSetIdx>
 802e5b0:	4603      	mov	r3, r0
 802e5b2:	b2da      	uxtb	r2, r3
 802e5b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e5b6:	711a      	strb	r2, [r3, #4]

#if defined(USE_ROUTE_NEAREST_RFM)

	pStatReq->nNearCh	=	GetChNearRFM();		//	가장 가까운 수신기(RFM) 채널
 802e5b8:	f004 f9b0 	bl	803291c <GetChNearRFM>
 802e5bc:	4603      	mov	r3, r0
 802e5be:	b2da      	uxtb	r2, r3
 802e5c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e5c2:	721a      	strb	r2, [r3, #8]

#endif	//	 defined(USE_ROUTE_NEAREST_RFM)

	//========================================================================
	//	Send RF
	SendPktCh( nDestCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktStatReq ) );
 802e5c4:	f107 030c 	add.w	r3, r7, #12
 802e5c8:	2210      	movs	r2, #16
 802e5ca:	4619      	mov	r1, r3
 802e5cc:	6878      	ldr	r0, [r7, #4]
 802e5ce:	f7ff fd4b 	bl	802e068 <SendPktCh>
}
 802e5d2:	bf00      	nop
 802e5d4:	3750      	adds	r7, #80	; 0x50
 802e5d6:	46bd      	mov	sp, r7
 802e5d8:	bd80      	pop	{r7, pc}
 802e5da:	bf00      	nop
 802e5dc:	080415f4 	.word	0x080415f4
 802e5e0:	080397dc 	.word	0x080397dc

0802e5e4 <SendStat>:

//========================================================================
void SendStat( int nDestCh )
//========================================================================
{
 802e5e4:	b580      	push	{r7, lr}
 802e5e6:	b096      	sub	sp, #88	; 0x58
 802e5e8:	af02      	add	r7, sp, #8
 802e5ea:	6078      	str	r0, [r7, #4]
	//	RF Mode가 RFMModeNormal인 경우.
	//		상태정보 전송.

	if ( GetDbg() )	printf( "%s(%d)\n", __func__, __LINE__ );
 802e5ec:	f002 fc98 	bl	8030f20 <GetDbg>
 802e5f0:	4603      	mov	r3, r0
 802e5f2:	2b00      	cmp	r3, #0
 802e5f4:	d004      	beq.n	802e600 <SendStat+0x1c>
 802e5f6:	22d4      	movs	r2, #212	; 0xd4
 802e5f8:	4944      	ldr	r1, [pc, #272]	; (802e70c <SendStat+0x128>)
 802e5fa:	4845      	ldr	r0, [pc, #276]	; (802e710 <SendStat+0x12c>)
 802e5fc:	f008 fe4a 	bl	8037294 <iprintf>

	RFMPkt		stPkt;
	RFMPktStat	*pStat;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e600:	f107 0308 	add.w	r3, r7, #8
 802e604:	2240      	movs	r2, #64	; 0x40
 802e606:	2100      	movs	r1, #0
 802e608:	4618      	mov	r0, r3
 802e60a:	f008 fd5b 	bl	80370c4 <memset>
	pStat = (RFMPktStat *)&stPkt.dat.stat;
 802e60e:	f107 0308 	add.w	r3, r7, #8
 802e612:	3304      	adds	r3, #4
 802e614:	64bb      	str	r3, [r7, #72]	; 0x48

	//========================================================================
	//	Packet Header
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktStat ), PktStat );
 802e616:	f004 f85b 	bl	80326d0 <GetDevID>
 802e61a:	4601      	mov	r1, r0
 802e61c:	f107 0008 	add.w	r0, r7, #8
 802e620:	2301      	movs	r3, #1
 802e622:	9300      	str	r3, [sp, #0]
 802e624:	2319      	movs	r3, #25
 802e626:	22ff      	movs	r2, #255	; 0xff
 802e628:	f7ff fe90 	bl	802e34c <_MakePktHdr>

	//========================================================================
	//	Status Data
	pStat->ver_main		=	APP_MAIN_VER;		//	1;
 802e62c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e62e:	2202      	movs	r2, #2
 802e630:	739a      	strb	r2, [r3, #14]
	pStat->ver_sub		=	APP_SUB_VER;		//	0;
 802e632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e634:	2200      	movs	r2, #0
 802e636:	73da      	strb	r2, [r3, #15]
	pStat->ver_det		=	APP_DETAIL_VER;		//	0;
 802e638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e63a:	2200      	movs	r2, #0
 802e63c:	741a      	strb	r2, [r3, #16]
 802e63e:	2200      	movs	r2, #0
 802e640:	745a      	strb	r2, [r3, #17]
	pStat->ver_build	=	APP_BUILD_VER;		//	0;
 802e642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e644:	2200      	movs	r2, #0
 802e646:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 802e64a:	749a      	strb	r2, [r3, #18]
 802e64c:	2200      	movs	r2, #0
 802e64e:	f042 0201 	orr.w	r2, r2, #1
 802e652:	74da      	strb	r2, [r3, #19]

	pStat->nMagicNum	=	0xAA55;				//	패킷 요류검출용.
 802e654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e656:	2200      	movs	r2, #0
 802e658:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 802e65c:	709a      	strb	r2, [r3, #2]
 802e65e:	2200      	movs	r2, #0
 802e660:	f062 0255 	orn	r2, r2, #85	; 0x55
 802e664:	70da      	strb	r2, [r3, #3]

	pStat->nCarNo		=	GetCarNo();
 802e666:	f004 fbfd 	bl	8032e64 <GetCarNo>
 802e66a:	4603      	mov	r3, r0
 802e66c:	b2da      	uxtb	r2, r3
 802e66e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e670:	735a      	strb	r2, [r3, #13]
	pStat->nDevID		=	GetDevID();
 802e672:	f004 f82d 	bl	80326d0 <GetDevID>
 802e676:	4603      	mov	r3, r0
 802e678:	b2da      	uxtb	r2, r3
 802e67a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e67c:	705a      	strb	r2, [r3, #1]

	pStat->nTrainNo		=	GetTrainSetIdx();	//	편성번호.
 802e67e:	f004 fa7f 	bl	8032b80 <GetTrainSetIdx>
 802e682:	4603      	mov	r3, r0
 802e684:	b2da      	uxtb	r2, r3
 802e686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e688:	731a      	strb	r2, [r3, #12]

	pStat->upTime		=	HAL_GetTick();
 802e68a:	f7f3 fa6d 	bl	8021b68 <HAL_GetTick>
 802e68e:	4602      	mov	r2, r0
 802e690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e692:	605a      	str	r2, [r3, #4]

	pStat->rspID		=	g_flagRspID;		//	Rsp ID Flag
 802e694:	4b1f      	ldr	r3, [pc, #124]	; (802e714 <SendStat+0x130>)
 802e696:	881a      	ldrh	r2, [r3, #0]
 802e698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e69a:	829a      	strh	r2, [r3, #20]

	pStat->nManHop		=	g_nManHopping;		//	Manual Hopping Setting
 802e69c:	4b1e      	ldr	r3, [pc, #120]	; (802e718 <SendStat+0x134>)
 802e69e:	681b      	ldr	r3, [r3, #0]
 802e6a0:	b2da      	uxtb	r2, r3
 802e6a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e6a4:	759a      	strb	r2, [r3, #22]
	pStat->nRFMode		=	g_nRFMode;			//	RFMode
 802e6a6:	4b1d      	ldr	r3, [pc, #116]	; (802e71c <SendStat+0x138>)
 802e6a8:	681b      	ldr	r3, [r3, #0]
 802e6aa:	b2da      	uxtb	r2, r3
 802e6ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e6ae:	75da      	strb	r2, [r3, #23]

	pStat->nDevFlag		=	g_nDevFlag;			//	Device Flag : 조명 상태 등.
 802e6b0:	4b1b      	ldr	r3, [pc, #108]	; (802e720 <SendStat+0x13c>)
 802e6b2:	681b      	ldr	r3, [r3, #0]
 802e6b4:	b2da      	uxtb	r2, r3
 802e6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e6b8:	761a      	strb	r2, [r3, #24]

	pStat->nChRx		=	GetChRx();			//	수신 채널
 802e6ba:	f004 f8af 	bl	803281c <GetChRx>
 802e6be:	4603      	mov	r3, r0
 802e6c0:	b2da      	uxtb	r2, r3
 802e6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e6c4:	729a      	strb	r2, [r3, #10]

	//========================================================================
	//	Send RF

	if( g_nRFMode == RFMode2 )//#if defined(USE_COMM_MODE_CH_GRP)	//	그룹주파수 모드. - [ 1, 2 ] [ 3, 4 ] ...
 802e6c6:	4b15      	ldr	r3, [pc, #84]	; (802e71c <SendStat+0x138>)
 802e6c8:	681b      	ldr	r3, [r3, #0]
 802e6ca:	2b02      	cmp	r3, #2
 802e6cc:	d109      	bne.n	802e6e2 <SendStat+0xfe>
	{
		//	짝수 호차는 3msec Delay ( 송신시 충돌 방지 )
		if( pStat->nCarNo % 2 == 0 ) HAL_Delay( 3 );
 802e6ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802e6d0:	7b5b      	ldrb	r3, [r3, #13]
 802e6d2:	f003 0301 	and.w	r3, r3, #1
 802e6d6:	b2db      	uxtb	r3, r3
 802e6d8:	2b00      	cmp	r3, #0
 802e6da:	d102      	bne.n	802e6e2 <SendStat+0xfe>
 802e6dc:	2003      	movs	r0, #3
 802e6de:	f7f3 fa4f 	bl	8021b80 <HAL_Delay>
#if defined(USE_CH_ISO_DEV)
	//	상태정보는 송신기로 전송.
	int nCh;

	//========================================================================
	if ( nDestCh == 0 )	nCh = ChTx_1;	//	Default
 802e6e2:	687b      	ldr	r3, [r7, #4]
 802e6e4:	2b00      	cmp	r3, #0
 802e6e6:	d103      	bne.n	802e6f0 <SendStat+0x10c>
 802e6e8:	4b0e      	ldr	r3, [pc, #56]	; (802e724 <SendStat+0x140>)
 802e6ea:	681b      	ldr	r3, [r3, #0]
 802e6ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 802e6ee:	e001      	b.n	802e6f4 <SendStat+0x110>
	else				nCh = nDestCh;
 802e6f0:	687b      	ldr	r3, [r7, #4]
 802e6f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	//========================================================================

	SendPktCh(nCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktStat ) );
 802e6f4:	f107 0308 	add.w	r3, r7, #8
 802e6f8:	221d      	movs	r2, #29
 802e6fa:	4619      	mov	r1, r3
 802e6fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802e6fe:	f7ff fcb3 	bl	802e068 <SendPktCh>
#else
	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktStat ) );
#endif
	//========================================================================
}
 802e702:	bf00      	nop
 802e704:	3750      	adds	r7, #80	; 0x50
 802e706:	46bd      	mov	sp, r7
 802e708:	bd80      	pop	{r7, pc}
 802e70a:	bf00      	nop
 802e70c:	08041600 	.word	0x08041600
 802e710:	080397dc 	.word	0x080397dc
 802e714:	200013a0 	.word	0x200013a0
 802e718:	20002354 	.word	0x20002354
 802e71c:	20002350 	.word	0x20002350
 802e720:	20002334 	.word	0x20002334
 802e724:	200004f4 	.word	0x200004f4

0802e728 <SendRouteReq>:


//========================================================================
void SendRouteReq( int nDestCh )
//========================================================================
{
 802e728:	b580      	push	{r7, lr}
 802e72a:	b096      	sub	sp, #88	; 0x58
 802e72c:	af02      	add	r7, sp, #8
 802e72e:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )	printf( "%s(%d)\n", __func__, __LINE__ );
 802e730:	f002 fbf6 	bl	8030f20 <GetDbg>
 802e734:	4603      	mov	r3, r0
 802e736:	2b00      	cmp	r3, #0
 802e738:	d005      	beq.n	802e746 <SendRouteReq+0x1e>
 802e73a:	f240 1217 	movw	r2, #279	; 0x117
 802e73e:	491e      	ldr	r1, [pc, #120]	; (802e7b8 <SendRouteReq+0x90>)
 802e740:	481e      	ldr	r0, [pc, #120]	; (802e7bc <SendRouteReq+0x94>)
 802e742:	f008 fda7 	bl	8037294 <iprintf>

	RFMPkt			stPkt;
	RFMPktRoute		*pRouteReq;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e746:	f107 030c 	add.w	r3, r7, #12
 802e74a:	2240      	movs	r2, #64	; 0x40
 802e74c:	2100      	movs	r1, #0
 802e74e:	4618      	mov	r0, r3
 802e750:	f008 fcb8 	bl	80370c4 <memset>
	pRouteReq = (RFMPktRoute *)&stPkt.dat.routeReq;
 802e754:	f107 030c 	add.w	r3, r7, #12
 802e758:	3304      	adds	r3, #4
 802e75a:	64fb      	str	r3, [r7, #76]	; 0x4c

	//========================================================================
	//	Packet Header
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktRoute ), PktRouteReq );
 802e75c:	f003 ffb8 	bl	80326d0 <GetDevID>
 802e760:	4601      	mov	r1, r0
 802e762:	f107 000c 	add.w	r0, r7, #12
 802e766:	2331      	movs	r3, #49	; 0x31
 802e768:	9300      	str	r3, [sp, #0]
 802e76a:	2307      	movs	r3, #7
 802e76c:	22ff      	movs	r2, #255	; 0xff
 802e76e:	f7ff fded 	bl	802e34c <_MakePktHdr>

	//========================================================================
	//	Packet Body
	pRouteReq->nSrcCh	=	GetChRx();			//	수신받을 채널
 802e772:	f004 f853 	bl	803281c <GetChRx>
 802e776:	4603      	mov	r3, r0
 802e778:	b2da      	uxtb	r2, r3
 802e77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e77c:	701a      	strb	r2, [r3, #0]
	pRouteReq->nSrcDev	=	GetDevID();			//	RFT / RFM
 802e77e:	f003 ffa7 	bl	80326d0 <GetDevID>
 802e782:	4603      	mov	r3, r0
 802e784:	b2da      	uxtb	r2, r3
 802e786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e788:	705a      	strb	r2, [r3, #1]

	pRouteReq->nCarNo	=	GetCarNo();			//	호차번호.
 802e78a:	f004 fb6b 	bl	8032e64 <GetCarNo>
 802e78e:	4603      	mov	r3, r0
 802e790:	b2da      	uxtb	r2, r3
 802e792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e794:	719a      	strb	r2, [r3, #6]
	pRouteReq->nTrainNo	=	GetTrainSetIdx();	//	편성번호.
 802e796:	f004 f9f3 	bl	8032b80 <GetTrainSetIdx>
 802e79a:	4603      	mov	r3, r0
 802e79c:	b2da      	uxtb	r2, r3
 802e79e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e7a0:	715a      	strb	r2, [r3, #5]

	//========================================================================
	//	Send RF
	SendPktCh( nDestCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktRoute ) );
 802e7a2:	f107 030c 	add.w	r3, r7, #12
 802e7a6:	220b      	movs	r2, #11
 802e7a8:	4619      	mov	r1, r3
 802e7aa:	6878      	ldr	r0, [r7, #4]
 802e7ac:	f7ff fc5c 	bl	802e068 <SendPktCh>
}
 802e7b0:	bf00      	nop
 802e7b2:	3750      	adds	r7, #80	; 0x50
 802e7b4:	46bd      	mov	sp, r7
 802e7b6:	bd80      	pop	{r7, pc}
 802e7b8:	0804160c 	.word	0x0804160c
 802e7bc:	080397dc 	.word	0x080397dc

0802e7c0 <SendRouteRsp>:

//========================================================================
void SendRouteRsp( int nDestCh )
//========================================================================
{
 802e7c0:	b580      	push	{r7, lr}
 802e7c2:	b096      	sub	sp, #88	; 0x58
 802e7c4:	af02      	add	r7, sp, #8
 802e7c6:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )	printf( "%s(%d)\n", __func__, __LINE__ );
 802e7c8:	f002 fbaa 	bl	8030f20 <GetDbg>
 802e7cc:	4603      	mov	r3, r0
 802e7ce:	2b00      	cmp	r3, #0
 802e7d0:	d005      	beq.n	802e7de <SendRouteRsp+0x1e>
 802e7d2:	f44f 729a 	mov.w	r2, #308	; 0x134
 802e7d6:	491e      	ldr	r1, [pc, #120]	; (802e850 <SendRouteRsp+0x90>)
 802e7d8:	481e      	ldr	r0, [pc, #120]	; (802e854 <SendRouteRsp+0x94>)
 802e7da:	f008 fd5b 	bl	8037294 <iprintf>

	RFMPkt			stPkt;
	RFMPktRoute	*pRouteRsp;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e7de:	f107 030c 	add.w	r3, r7, #12
 802e7e2:	2240      	movs	r2, #64	; 0x40
 802e7e4:	2100      	movs	r1, #0
 802e7e6:	4618      	mov	r0, r3
 802e7e8:	f008 fc6c 	bl	80370c4 <memset>
	pRouteRsp = (RFMPktRoute *)&stPkt.dat.routeRsp;
 802e7ec:	f107 030c 	add.w	r3, r7, #12
 802e7f0:	3304      	adds	r3, #4
 802e7f2:	64fb      	str	r3, [r7, #76]	; 0x4c

	//========================================================================
	//	Packet Header
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktRoute ), PktRouteRsp );
 802e7f4:	f003 ff6c 	bl	80326d0 <GetDevID>
 802e7f8:	4601      	mov	r1, r0
 802e7fa:	f107 000c 	add.w	r0, r7, #12
 802e7fe:	2332      	movs	r3, #50	; 0x32
 802e800:	9300      	str	r3, [sp, #0]
 802e802:	2307      	movs	r3, #7
 802e804:	22ff      	movs	r2, #255	; 0xff
 802e806:	f7ff fda1 	bl	802e34c <_MakePktHdr>

	//========================================================================
	//	Packet Body
	pRouteRsp->nSrcCh	=	GetChRx();			//	수신받을 채널
 802e80a:	f004 f807 	bl	803281c <GetChRx>
 802e80e:	4603      	mov	r3, r0
 802e810:	b2da      	uxtb	r2, r3
 802e812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e814:	701a      	strb	r2, [r3, #0]
	pRouteRsp->nSrcDev	=	GetDevID();			//	RFT / RFM
 802e816:	f003 ff5b 	bl	80326d0 <GetDevID>
 802e81a:	4603      	mov	r3, r0
 802e81c:	b2da      	uxtb	r2, r3
 802e81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e820:	705a      	strb	r2, [r3, #1]

	pRouteRsp->nCarNo	=	GetCarNo();			//	호차번호.
 802e822:	f004 fb1f 	bl	8032e64 <GetCarNo>
 802e826:	4603      	mov	r3, r0
 802e828:	b2da      	uxtb	r2, r3
 802e82a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e82c:	719a      	strb	r2, [r3, #6]
	pRouteRsp->nTrainNo	=	GetTrainSetIdx();	//	편성번호.
 802e82e:	f004 f9a7 	bl	8032b80 <GetTrainSetIdx>
 802e832:	4603      	mov	r3, r0
 802e834:	b2da      	uxtb	r2, r3
 802e836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e838:	715a      	strb	r2, [r3, #5]

	//========================================================================
	//	Send RF
	SendPktCh( nDestCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktRoute ) );
 802e83a:	f107 030c 	add.w	r3, r7, #12
 802e83e:	220b      	movs	r2, #11
 802e840:	4619      	mov	r1, r3
 802e842:	6878      	ldr	r0, [r7, #4]
 802e844:	f7ff fc10 	bl	802e068 <SendPktCh>
}
 802e848:	bf00      	nop
 802e84a:	3750      	adds	r7, #80	; 0x50
 802e84c:	46bd      	mov	sp, r7
 802e84e:	bd80      	pop	{r7, pc}
 802e850:	0804161c 	.word	0x0804161c
 802e854:	080397dc 	.word	0x080397dc

0802e858 <SendPA>:


//========================================================================
void SendPA( int nStartStop )
//========================================================================
{
 802e858:	b580      	push	{r7, lr}
 802e85a:	b094      	sub	sp, #80	; 0x50
 802e85c:	af00      	add	r7, sp, #0
 802e85e:	6078      	str	r0, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802e860:	f44f 72a9 	mov.w	r2, #338	; 0x152
 802e864:	491a      	ldr	r1, [pc, #104]	; (802e8d0 <SendPA+0x78>)
 802e866:	481b      	ldr	r0, [pc, #108]	; (802e8d4 <SendPA+0x7c>)
 802e868:	f008 fd14 	bl	8037294 <iprintf>

	RFMPkt				stPkt;
	RFMPktCtrlPACall	*pPACall;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e86c:	f107 030c 	add.w	r3, r7, #12
 802e870:	2240      	movs	r2, #64	; 0x40
 802e872:	2100      	movs	r1, #0
 802e874:	4618      	mov	r0, r3
 802e876:	f008 fc25 	bl	80370c4 <memset>
	pPACall = (RFMPktCtrlPACall *)&stPkt.dat.pacall;
 802e87a:	f107 030c 	add.w	r3, r7, #12
 802e87e:	3304      	adds	r3, #4
 802e880:	64fb      	str	r3, [r7, #76]	; 0x4c

	//========================================================================
	//	Packet Header
#if defined(USE_CH_ISO_DEV)
	_MakePktHdr2( &stPkt, PktCtrlPaCall );
 802e882:	f107 030c 	add.w	r3, r7, #12
 802e886:	2108      	movs	r1, #8
 802e888:	4618      	mov	r0, r3
 802e88a:	f7ff fde1 	bl	802e450 <_MakePktHdr2>
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktCtrlPACall ), PktCtrlPaCall );
#endif

	//========================================================================
	//	Status Data
	pPACall->nStartStop		=	nStartStop;
 802e88e:	687b      	ldr	r3, [r7, #4]
 802e890:	b2da      	uxtb	r2, r3
 802e892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e894:	701a      	strb	r2, [r3, #0]

	pPACall->nTypePACall	=	CtrlPA;
 802e896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e898:	2201      	movs	r2, #1
 802e89a:	705a      	strb	r2, [r3, #1]
	//========================================================================
	//	Send RF

#if defined(USE_CH_ISO_DEV)

	if ( GetChPARFT() != 0 )
 802e89c:	f004 f8d8 	bl	8032a50 <GetChPARFT>
 802e8a0:	4603      	mov	r3, r0
 802e8a2:	2b00      	cmp	r3, #0
 802e8a4:	d007      	beq.n	802e8b6 <SendPA+0x5e>
	{
		//	송신기에 전송.
		SendPktCh( GetChPARFT(), (uint8_t *)&stPkt,
 802e8a6:	f004 f8d3 	bl	8032a50 <GetChPARFT>
 802e8aa:	f107 030c 	add.w	r3, r7, #12
 802e8ae:	2208      	movs	r2, #8
 802e8b0:	4619      	mov	r1, r3
 802e8b2:	f7ff fbd9 	bl	802e068 <SendPktCh>
			(U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );
	}

	//	수신기에 전송
	SendPktCh( GetChPA(), (uint8_t *)&stPkt,
 802e8b6:	f004 f883 	bl	80329c0 <GetChPA>
 802e8ba:	f107 030c 	add.w	r3, r7, #12
 802e8be:	2208      	movs	r2, #8
 802e8c0:	4619      	mov	r1, r3
 802e8c2:	f7ff fbd1 	bl	802e068 <SendPktCh>
#else
	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );
#endif

	//========================================================================
}
 802e8c6:	bf00      	nop
 802e8c8:	3750      	adds	r7, #80	; 0x50
 802e8ca:	46bd      	mov	sp, r7
 802e8cc:	bd80      	pop	{r7, pc}
 802e8ce:	bf00      	nop
 802e8d0:	0804162c 	.word	0x0804162c
 802e8d4:	080397dc 	.word	0x080397dc

0802e8d8 <SendCall>:


//========================================================================
void SendCall( int nStartStop )
//========================================================================
{
 802e8d8:	b580      	push	{r7, lr}
 802e8da:	b094      	sub	sp, #80	; 0x50
 802e8dc:	af00      	add	r7, sp, #0
 802e8de:	6078      	str	r0, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802e8e0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 802e8e4:	491a      	ldr	r1, [pc, #104]	; (802e950 <SendCall+0x78>)
 802e8e6:	481b      	ldr	r0, [pc, #108]	; (802e954 <SendCall+0x7c>)
 802e8e8:	f008 fcd4 	bl	8037294 <iprintf>

	RFMPkt			stPkt;
	RFMPktCtrlPACall	*pPACall;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e8ec:	f107 030c 	add.w	r3, r7, #12
 802e8f0:	2240      	movs	r2, #64	; 0x40
 802e8f2:	2100      	movs	r1, #0
 802e8f4:	4618      	mov	r0, r3
 802e8f6:	f008 fbe5 	bl	80370c4 <memset>
	pPACall = (RFMPktCtrlPACall *)&stPkt.dat.pacall;
 802e8fa:	f107 030c 	add.w	r3, r7, #12
 802e8fe:	3304      	adds	r3, #4
 802e900:	64fb      	str	r3, [r7, #76]	; 0x4c

	//========================================================================
	//	Packet Header
#if defined(USE_CH_ISO_DEV)
	_MakePktHdr2( &stPkt, PktCtrlPaCall );
 802e902:	f107 030c 	add.w	r3, r7, #12
 802e906:	2108      	movs	r1, #8
 802e908:	4618      	mov	r0, r3
 802e90a:	f7ff fda1 	bl	802e450 <_MakePktHdr2>
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktCtrlPACall ), PktCtrlPaCall );
#endif

	//========================================================================
	//	Status Data
	pPACall->nStartStop		=	nStartStop;
 802e90e:	687b      	ldr	r3, [r7, #4]
 802e910:	b2da      	uxtb	r2, r3
 802e912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e914:	701a      	strb	r2, [r3, #0]

	pPACall->nTypePACall	=	CtrlCall;
 802e916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e918:	2202      	movs	r2, #2
 802e91a:	705a      	strb	r2, [r3, #1]
	//========================================================================
	//	Send RF

#if defined(USE_CH_ISO_DEV)

	if ( GetChPARFT() != 0 )
 802e91c:	f004 f898 	bl	8032a50 <GetChPARFT>
 802e920:	4603      	mov	r3, r0
 802e922:	2b00      	cmp	r3, #0
 802e924:	d008      	beq.n	802e938 <SendCall+0x60>
	{
		//	송신기에 직접 전송.
		SendPktCh( GetChPARFT(), (uint8_t *)&stPkt,
 802e926:	f004 f893 	bl	8032a50 <GetChPARFT>
 802e92a:	f107 030c 	add.w	r3, r7, #12
 802e92e:	2208      	movs	r2, #8
 802e930:	4619      	mov	r1, r3
 802e932:	f7ff fb99 	bl	802e068 <SendPktCh>
	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );

#endif

	//========================================================================
}
 802e936:	e007      	b.n	802e948 <SendCall+0x70>
		SendPktCh( GetChPA(),	//GetChOtherRFT(),
 802e938:	f004 f842 	bl	80329c0 <GetChPA>
 802e93c:	f107 030c 	add.w	r3, r7, #12
 802e940:	2208      	movs	r2, #8
 802e942:	4619      	mov	r1, r3
 802e944:	f7ff fb90 	bl	802e068 <SendPktCh>
}
 802e948:	bf00      	nop
 802e94a:	3750      	adds	r7, #80	; 0x50
 802e94c:	46bd      	mov	sp, r7
 802e94e:	bd80      	pop	{r7, pc}
 802e950:	08041634 	.word	0x08041634
 802e954:	080397dc 	.word	0x080397dc

0802e958 <SendLight>:


//========================================================================
void SendLight( int nOnOff )
//========================================================================
{
 802e958:	b580      	push	{r7, lr}
 802e95a:	b094      	sub	sp, #80	; 0x50
 802e95c:	af00      	add	r7, sp, #0
 802e95e:	6078      	str	r0, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802e960:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 802e964:	4912      	ldr	r1, [pc, #72]	; (802e9b0 <SendLight+0x58>)
 802e966:	4813      	ldr	r0, [pc, #76]	; (802e9b4 <SendLight+0x5c>)
 802e968:	f008 fc94 	bl	8037294 <iprintf>

	RFMPkt			stPkt;
	RFMPktLight		*pLight;

	memset( &stPkt, 0, sizeof( stPkt ) );
 802e96c:	f107 030c 	add.w	r3, r7, #12
 802e970:	2240      	movs	r2, #64	; 0x40
 802e972:	2100      	movs	r1, #0
 802e974:	4618      	mov	r0, r3
 802e976:	f008 fba5 	bl	80370c4 <memset>
	pLight = (RFMPktLight *)&stPkt.dat.light;
 802e97a:	f107 030c 	add.w	r3, r7, #12
 802e97e:	3304      	adds	r3, #4
 802e980:	64fb      	str	r3, [r7, #76]	; 0x4c

	//========================================================================
	//	Packet Header
#if defined(USE_CH_ISO_DEV)

	_MakePktHdr2( &stPkt, PktLight );
 802e982:	f107 030c 	add.w	r3, r7, #12
 802e986:	2104      	movs	r1, #4
 802e988:	4618      	mov	r0, r3
 802e98a:	f7ff fd61 	bl	802e450 <_MakePktHdr2>

#endif

	//========================================================================
	//	Status Data
	pLight->nOnOff = nOnOff;
 802e98e:	687b      	ldr	r3, [r7, #4]
 802e990:	b2da      	uxtb	r2, r3
 802e992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802e994:	701a      	strb	r2, [r3, #0]

	//========================================================================
	//	Send RF
#if defined(USE_CH_ISO_DEV)

	SendPktCh( GetChPA(), (uint8_t *)&stPkt,
 802e996:	f004 f813 	bl	80329c0 <GetChPA>
 802e99a:	f107 030c 	add.w	r3, r7, #12
 802e99e:	2208      	movs	r2, #8
 802e9a0:	4619      	mov	r1, r3
 802e9a2:	f7ff fb61 	bl	802e068 <SendPktCh>
	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktLight ) );

#endif

	//========================================================================
}
 802e9a6:	bf00      	nop
 802e9a8:	3750      	adds	r7, #80	; 0x50
 802e9aa:	46bd      	mov	sp, r7
 802e9ac:	bd80      	pop	{r7, pc}
 802e9ae:	bf00      	nop
 802e9b0:	08041640 	.word	0x08041640
 802e9b4:	080397dc 	.word	0x080397dc

0802e9b8 <SendLightOn>:

//==========================================================================
void SendLightOn( void )
//==========================================================================
{
 802e9b8:	b580      	push	{r7, lr}
 802e9ba:	af00      	add	r7, sp, #0
	SendLight( 1 );		//	Light On
 802e9bc:	2001      	movs	r0, #1
 802e9be:	f7ff ffcb 	bl	802e958 <SendLight>
}
 802e9c2:	bf00      	nop
 802e9c4:	bd80      	pop	{r7, pc}

0802e9c6 <SendLightOff>:

//==========================================================================
void SendLightOff( void )
//==========================================================================
{
 802e9c6:	b580      	push	{r7, lr}
 802e9c8:	af00      	add	r7, sp, #0
	SendLight( 0 );		//	Light Off
 802e9ca:	2000      	movs	r0, #0
 802e9cc:	f7ff ffc4 	bl	802e958 <SendLight>
}
 802e9d0:	bf00      	nop
 802e9d2:	bd80      	pop	{r7, pc}

0802e9d4 <SendRFCmdCh>:

//==========================================================================
void SendRFCmdCh( int nCh, char *sCmd, int nRSSI )
//==========================================================================
{
 802e9d4:	b580      	push	{r7, lr}
 802e9d6:	b094      	sub	sp, #80	; 0x50
 802e9d8:	af00      	add	r7, sp, #0
 802e9da:	60f8      	str	r0, [r7, #12]
 802e9dc:	60b9      	str	r1, [r7, #8]
 802e9de:	607a      	str	r2, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802e9e0:	f240 2226 	movw	r2, #550	; 0x226
 802e9e4:	490a      	ldr	r1, [pc, #40]	; (802ea10 <SendRFCmdCh+0x3c>)
 802e9e6:	480b      	ldr	r0, [pc, #44]	; (802ea14 <SendRFCmdCh+0x40>)
 802e9e8:	f008 fc54 	bl	8037294 <iprintf>
	//========================================================================
	RFMPkt			stPkt;
	_MakeRFCmd( &stPkt, sCmd, nRSSI );
 802e9ec:	f107 0310 	add.w	r3, r7, #16
 802e9f0:	687a      	ldr	r2, [r7, #4]
 802e9f2:	68b9      	ldr	r1, [r7, #8]
 802e9f4:	4618      	mov	r0, r3
 802e9f6:	f7ff fd7d 	bl	802e4f4 <_MakeRFCmd>

	//========================================================================
	//	Send RF
	SendPktCh( nCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
 802e9fa:	f107 0310 	add.w	r3, r7, #16
 802e9fe:	2240      	movs	r2, #64	; 0x40
 802ea00:	4619      	mov	r1, r3
 802ea02:	68f8      	ldr	r0, [r7, #12]
 802ea04:	f7ff fb30 	bl	802e068 <SendPktCh>
	//========================================================================
}
 802ea08:	bf00      	nop
 802ea0a:	3750      	adds	r7, #80	; 0x50
 802ea0c:	46bd      	mov	sp, r7
 802ea0e:	bd80      	pop	{r7, pc}
 802ea10:	0804164c 	.word	0x0804164c
 802ea14:	080397dc 	.word	0x080397dc

0802ea18 <SendRFCmd>:

//==========================================================================
void SendRFCmd( char *sCmd, int nRSSI )
//==========================================================================
{
 802ea18:	b580      	push	{r7, lr}
 802ea1a:	b094      	sub	sp, #80	; 0x50
 802ea1c:	af00      	add	r7, sp, #0
 802ea1e:	6078      	str	r0, [r7, #4]
 802ea20:	6039      	str	r1, [r7, #0]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802ea22:	f240 2235 	movw	r2, #565	; 0x235
 802ea26:	4911      	ldr	r1, [pc, #68]	; (802ea6c <SendRFCmd+0x54>)
 802ea28:	4811      	ldr	r0, [pc, #68]	; (802ea70 <SendRFCmd+0x58>)
 802ea2a:	f008 fc33 	bl	8037294 <iprintf>
	//========================================================================
	RFMPkt			stPkt;
	_MakeRFCmd( &stPkt, sCmd, nRSSI );
 802ea2e:	f107 030c 	add.w	r3, r7, #12
 802ea32:	683a      	ldr	r2, [r7, #0]
 802ea34:	6879      	ldr	r1, [r7, #4]
 802ea36:	4618      	mov	r0, r3
 802ea38:	f7ff fd5c 	bl	802e4f4 <_MakeRFCmd>
//	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );

	//========================================================================
	//	모든 수신기로 전송.
//	for ( int nCh = ChTS_base; nCh < ChTS1_1 + (ChGap * 10); nCh++ )
	for ( int nCh = ChTS_base; nCh < ChMax; nCh++ )
 802ea3c:	230b      	movs	r3, #11
 802ea3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 802ea40:	e00c      	b.n	802ea5c <SendRFCmd+0x44>
	{
		SendPktCh( nCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
 802ea42:	f107 030c 	add.w	r3, r7, #12
 802ea46:	2240      	movs	r2, #64	; 0x40
 802ea48:	4619      	mov	r1, r3
 802ea4a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 802ea4c:	f7ff fb0c 	bl	802e068 <SendPktCh>

		HAL_Delay(3);	//	Tx Delay
 802ea50:	2003      	movs	r0, #3
 802ea52:	f7f3 f895 	bl	8021b80 <HAL_Delay>
	for ( int nCh = ChTS_base; nCh < ChMax; nCh++ )
 802ea56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ea58:	3301      	adds	r3, #1
 802ea5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802ea5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ea5e:	2b3f      	cmp	r3, #63	; 0x3f
 802ea60:	ddef      	ble.n	802ea42 <SendRFCmd+0x2a>
	}
	//========================================================================
}
 802ea62:	bf00      	nop
 802ea64:	bf00      	nop
 802ea66:	3750      	adds	r7, #80	; 0x50
 802ea68:	46bd      	mov	sp, r7
 802ea6a:	bd80      	pop	{r7, pc}
 802ea6c:	08041658 	.word	0x08041658
 802ea70:	080397dc 	.word	0x080397dc

0802ea74 <SendRFCmdReset>:

//==========================================================================
void SendRFCmdReset( void )
//==========================================================================
{
 802ea74:	b580      	push	{r7, lr}
 802ea76:	b090      	sub	sp, #64	; 0x40
 802ea78:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 802ea7a:	f240 224e 	movw	r2, #590	; 0x24e
 802ea7e:	490c      	ldr	r1, [pc, #48]	; (802eab0 <SendRFCmdReset+0x3c>)
 802ea80:	480c      	ldr	r0, [pc, #48]	; (802eab4 <SendRFCmdReset+0x40>)
 802ea82:	f008 fc07 	bl	8037294 <iprintf>

	SendRFCmd( "reset", 190 );
 802ea86:	21be      	movs	r1, #190	; 0xbe
 802ea88:	480b      	ldr	r0, [pc, #44]	; (802eab8 <SendRFCmdReset+0x44>)
 802ea8a:	f7ff ffc5 	bl	802ea18 <SendRFCmd>

	//========================================================================
	//	Reset시 Upgrade채널도 reset
	RFMPkt			stPkt;
	_MakeRFCmd( &stPkt, "reset", 190 );
 802ea8e:	463b      	mov	r3, r7
 802ea90:	22be      	movs	r2, #190	; 0xbe
 802ea92:	4909      	ldr	r1, [pc, #36]	; (802eab8 <SendRFCmdReset+0x44>)
 802ea94:	4618      	mov	r0, r3
 802ea96:	f7ff fd2d 	bl	802e4f4 <_MakeRFCmd>
	SendPktCh( ChUpgrDst, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
 802ea9a:	463b      	mov	r3, r7
 802ea9c:	2240      	movs	r2, #64	; 0x40
 802ea9e:	4619      	mov	r1, r3
 802eaa0:	2003      	movs	r0, #3
 802eaa2:	f7ff fae1 	bl	802e068 <SendPktCh>
	//========================================================================
}
 802eaa6:	bf00      	nop
 802eaa8:	3740      	adds	r7, #64	; 0x40
 802eaaa:	46bd      	mov	sp, r7
 802eaac:	bd80      	pop	{r7, pc}
 802eaae:	bf00      	nop
 802eab0:	08041664 	.word	0x08041664
 802eab4:	080397dc 	.word	0x080397dc
 802eab8:	080397e4 	.word	0x080397e4

0802eabc <SendRFCmdCar>:

//==========================================================================
void SendRFCmdCar( int nCar )
//==========================================================================
{
 802eabc:	b580      	push	{r7, lr}
 802eabe:	b09c      	sub	sp, #112	; 0x70
 802eac0:	af00      	add	r7, sp, #0
 802eac2:	6078      	str	r0, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802eac4:	f240 225e 	movw	r2, #606	; 0x25e
 802eac8:	490a      	ldr	r1, [pc, #40]	; (802eaf4 <SendRFCmdCar+0x38>)
 802eaca:	480b      	ldr	r0, [pc, #44]	; (802eaf8 <SendRFCmdCar+0x3c>)
 802eacc:	f008 fbe2 	bl	8037294 <iprintf>

	char sBuf[100];
	sprintf(sBuf, "car %d", nCar );
 802ead0:	f107 030c 	add.w	r3, r7, #12
 802ead4:	687a      	ldr	r2, [r7, #4]
 802ead6:	4909      	ldr	r1, [pc, #36]	; (802eafc <SendRFCmdCar+0x40>)
 802ead8:	4618      	mov	r0, r3
 802eada:	f008 fe0d 	bl	80376f8 <siprintf>

	SendRFCmd( sBuf, 190 );
 802eade:	f107 030c 	add.w	r3, r7, #12
 802eae2:	21be      	movs	r1, #190	; 0xbe
 802eae4:	4618      	mov	r0, r3
 802eae6:	f7ff ff97 	bl	802ea18 <SendRFCmd>
}
 802eaea:	bf00      	nop
 802eaec:	3770      	adds	r7, #112	; 0x70
 802eaee:	46bd      	mov	sp, r7
 802eaf0:	bd80      	pop	{r7, pc}
 802eaf2:	bf00      	nop
 802eaf4:	08041674 	.word	0x08041674
 802eaf8:	080397dc 	.word	0x080397dc
 802eafc:	080397ec 	.word	0x080397ec

0802eb00 <SendRFCmdTS>:

//==========================================================================
void SendRFCmdTS( int nIdx )
//==========================================================================
{
 802eb00:	b580      	push	{r7, lr}
 802eb02:	b09c      	sub	sp, #112	; 0x70
 802eb04:	af00      	add	r7, sp, #0
 802eb06:	6078      	str	r0, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802eb08:	f240 226a 	movw	r2, #618	; 0x26a
 802eb0c:	490a      	ldr	r1, [pc, #40]	; (802eb38 <SendRFCmdTS+0x38>)
 802eb0e:	480b      	ldr	r0, [pc, #44]	; (802eb3c <SendRFCmdTS+0x3c>)
 802eb10:	f008 fbc0 	bl	8037294 <iprintf>

	char sBuf[100];
	sprintf(sBuf, "ts %d", nIdx );
 802eb14:	f107 030c 	add.w	r3, r7, #12
 802eb18:	687a      	ldr	r2, [r7, #4]
 802eb1a:	4909      	ldr	r1, [pc, #36]	; (802eb40 <SendRFCmdTS+0x40>)
 802eb1c:	4618      	mov	r0, r3
 802eb1e:	f008 fdeb 	bl	80376f8 <siprintf>

	SendRFCmd( sBuf, 190 );
 802eb22:	f107 030c 	add.w	r3, r7, #12
 802eb26:	21be      	movs	r1, #190	; 0xbe
 802eb28:	4618      	mov	r0, r3
 802eb2a:	f7ff ff75 	bl	802ea18 <SendRFCmd>
}
 802eb2e:	bf00      	nop
 802eb30:	3770      	adds	r7, #112	; 0x70
 802eb32:	46bd      	mov	sp, r7
 802eb34:	bd80      	pop	{r7, pc}
 802eb36:	bf00      	nop
 802eb38:	08041684 	.word	0x08041684
 802eb3c:	080397dc 	.word	0x080397dc
 802eb40:	080397f4 	.word	0x080397f4

0802eb44 <SendRFCmdRFMode>:

//==========================================================================
void SendRFCmdRFMode( int nMode )
//==========================================================================
{
 802eb44:	b580      	push	{r7, lr}
 802eb46:	b09c      	sub	sp, #112	; 0x70
 802eb48:	af00      	add	r7, sp, #0
 802eb4a:	6078      	str	r0, [r7, #4]
	printf( "%s(%d)\n", __func__, __LINE__ );
 802eb4c:	f240 2276 	movw	r2, #630	; 0x276
 802eb50:	490a      	ldr	r1, [pc, #40]	; (802eb7c <SendRFCmdRFMode+0x38>)
 802eb52:	480b      	ldr	r0, [pc, #44]	; (802eb80 <SendRFCmdRFMode+0x3c>)
 802eb54:	f008 fb9e 	bl	8037294 <iprintf>

	char sBuf[100];
	sprintf(sBuf, "rfmod %d", nMode );
 802eb58:	f107 030c 	add.w	r3, r7, #12
 802eb5c:	687a      	ldr	r2, [r7, #4]
 802eb5e:	4909      	ldr	r1, [pc, #36]	; (802eb84 <SendRFCmdRFMode+0x40>)
 802eb60:	4618      	mov	r0, r3
 802eb62:	f008 fdc9 	bl	80376f8 <siprintf>

	SendRFCmd( sBuf, 190 );
 802eb66:	f107 030c 	add.w	r3, r7, #12
 802eb6a:	21be      	movs	r1, #190	; 0xbe
 802eb6c:	4618      	mov	r0, r3
 802eb6e:	f7ff ff53 	bl	802ea18 <SendRFCmd>
}
 802eb72:	bf00      	nop
 802eb74:	3770      	adds	r7, #112	; 0x70
 802eb76:	46bd      	mov	sp, r7
 802eb78:	bd80      	pop	{r7, pc}
 802eb7a:	bf00      	nop
 802eb7c:	08041690 	.word	0x08041690
 802eb80:	080397dc 	.word	0x080397dc
 802eb84:	080397fc 	.word	0x080397fc

0802eb88 <SendRFCmdUpgrade>:
}

//==========================================================================
void SendRFCmdUpgrade( int bRetry )
//==========================================================================
{
 802eb88:	b580      	push	{r7, lr}
 802eb8a:	b082      	sub	sp, #8
 802eb8c:	af00      	add	r7, sp, #0
 802eb8e:	6078      	str	r0, [r7, #4]
	//==========================================================================
	//	송신기에서 Upgrade 명령 전송.
	//==========================================================================

	printf( "%s(%d)\n", __func__, __LINE__ );
 802eb90:	f44f 7224 	mov.w	r2, #656	; 0x290
 802eb94:	490e      	ldr	r1, [pc, #56]	; (802ebd0 <SendRFCmdUpgrade+0x48>)
 802eb96:	480f      	ldr	r0, [pc, #60]	; (802ebd4 <SendRFCmdUpgrade+0x4c>)
 802eb98:	f008 fb7c 	bl	8037294 <iprintf>
	//==========================================================================
	//	Upgrade Start Command

	if ( bRetry )
 802eb9c:	687b      	ldr	r3, [r7, #4]
 802eb9e:	2b00      	cmp	r3, #0
 802eba0:	d005      	beq.n	802ebae <SendRFCmdUpgrade+0x26>
	{
		//	Upgrade 채널로 전송
		//	Upgrade Mode로 변경.
		SendRFCmdCh( ChUpgrDst, "upgrade 1", 200 );	//	DFU모드의 경우 근접(RSSI-200)하지 않으면 동작하지 않도록 한다!!!
 802eba2:	22c8      	movs	r2, #200	; 0xc8
 802eba4:	490c      	ldr	r1, [pc, #48]	; (802ebd8 <SendRFCmdUpgrade+0x50>)
 802eba6:	2003      	movs	r0, #3
 802eba8:	f7ff ff14 	bl	802e9d4 <SendRFCmdCh>
 802ebac:	e003      	b.n	802ebb6 <SendRFCmdUpgrade+0x2e>
	}
	else
	{
		//	Upgrade Mode로 변경.
		SendRFCmd( "upgrade 1", 200 );	//	DFU모드의 경우 근접(RSSI-200)하지 않으면 동작하지 않도록 한다!!!
 802ebae:	21c8      	movs	r1, #200	; 0xc8
 802ebb0:	4809      	ldr	r0, [pc, #36]	; (802ebd8 <SendRFCmdUpgrade+0x50>)
 802ebb2:	f7ff ff31 	bl	802ea18 <SendRFCmd>
	}
	//==========================================================================

	SetUpgrReTry( bRetry );			//	Retry 설정.
 802ebb6:	6878      	ldr	r0, [r7, #4]
 802ebb8:	f005 ff68 	bl	8034a8c <SetUpgrReTry>

	HAL_Delay( 500 );	//	sleep 200 msec
 802ebbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 802ebc0:	f7f2 ffde 	bl	8021b80 <HAL_Delay>

	//========================================================================
	//	Upgrade Image 전송.
	UpgrSendImageApp();
 802ebc4:	f006 f85c 	bl	8034c80 <UpgrSendImageApp>

	//==========================================================================
	//	Upgrade End Command
//DEL	SendRFCmd( "upgrade 0", 200 );	//	DFU모드의 경우 근접(RSSI-200)하지 않으면 동작하지 않도록 한다!!!
	//==========================================================================
}
 802ebc8:	bf00      	nop
 802ebca:	3708      	adds	r7, #8
 802ebcc:	46bd      	mov	sp, r7
 802ebce:	bd80      	pop	{r7, pc}
 802ebd0:	080416a0 	.word	0x080416a0
 802ebd4:	080397dc 	.word	0x080397dc
 802ebd8:	08039810 	.word	0x08039810

0802ebdc <SendUpgrData>:

//==========================================================================
void	SendUpgrData		( uint32_t nAddrTarget, int nPktTot, int nPktIdx, uint8_t *sBuf, int nSize )	//	Send Upgrade Data
//==========================================================================
{
 802ebdc:	b580      	push	{r7, lr}
 802ebde:	b098      	sub	sp, #96	; 0x60
 802ebe0:	af02      	add	r7, sp, #8
 802ebe2:	60f8      	str	r0, [r7, #12]
 802ebe4:	60b9      	str	r1, [r7, #8]
 802ebe6:	607a      	str	r2, [r7, #4]
 802ebe8:	603b      	str	r3, [r7, #0]
//	printf( "%s(%d)\n", __func__, __LINE__ );

	RFMPkt			stPkt;
	memset( &stPkt, 0, sizeof( stPkt ) );
 802ebea:	f107 0314 	add.w	r3, r7, #20
 802ebee:	2240      	movs	r2, #64	; 0x40
 802ebf0:	2100      	movs	r1, #0
 802ebf2:	4618      	mov	r0, r3
 802ebf4:	f008 fa66 	bl	80370c4 <memset>

	//========================================================================
	//	Packet Header
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, RFPktDataLen, PktUpgr );
 802ebf8:	f003 fd6a 	bl	80326d0 <GetDevID>
 802ebfc:	4601      	mov	r1, r0
 802ebfe:	f107 0014 	add.w	r0, r7, #20
 802ec02:	2340      	movs	r3, #64	; 0x40
 802ec04:	9300      	str	r3, [sp, #0]
 802ec06:	233c      	movs	r3, #60	; 0x3c
 802ec08:	22ff      	movs	r2, #255	; 0xff
 802ec0a:	f7ff fb9f 	bl	802e34c <_MakePktHdr>

	//========================================================================
	//	Packet Body
	RFMPktUpgr	*pUpgr = (RFMPktUpgr *)&stPkt.dat.upgr;
 802ec0e:	f107 0314 	add.w	r3, r7, #20
 802ec12:	3304      	adds	r3, #4
 802ec14:	657b      	str	r3, [r7, #84]	; 0x54

	pUpgr->baseAddr		=	nAddrTarget;
 802ec16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec18:	68fa      	ldr	r2, [r7, #12]
 802ec1a:	601a      	str	r2, [r3, #0]
	pUpgr->totPkt		=	nPktTot;
 802ec1c:	68bb      	ldr	r3, [r7, #8]
 802ec1e:	b29a      	uxth	r2, r3
 802ec20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec22:	809a      	strh	r2, [r3, #4]
	pUpgr->idxPkt		=	nPktIdx;
 802ec24:	687b      	ldr	r3, [r7, #4]
 802ec26:	b29a      	uxth	r2, r3
 802ec28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec2a:	80da      	strh	r2, [r3, #6]
	pUpgr->nSize		=	nSize;
 802ec2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802ec2e:	b2da      	uxtb	r2, r3
 802ec30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec32:	721a      	strb	r2, [r3, #8]

	if( GetUpgrReTry() ) pUpgr->bFlag	|=	PktUpgrFlagRetry;	//	Retry Flag
 802ec34:	f005 ff3a 	bl	8034aac <GetUpgrReTry>
 802ec38:	4603      	mov	r3, r0
 802ec3a:	2b00      	cmp	r3, #0
 802ec3c:	d006      	beq.n	802ec4c <SendUpgrData+0x70>
 802ec3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec40:	7a5b      	ldrb	r3, [r3, #9]
 802ec42:	f043 0301 	orr.w	r3, r3, #1
 802ec46:	b2da      	uxtb	r2, r3
 802ec48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec4a:	725a      	strb	r2, [r3, #9]

	memcpy( pUpgr->data, sBuf, nSize );
 802ec4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ec4e:	330a      	adds	r3, #10
 802ec50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802ec52:	6839      	ldr	r1, [r7, #0]
 802ec54:	4618      	mov	r0, r3
 802ec56:	f008 fa27 	bl	80370a8 <memcpy>

	//========================================================================
	//	Send RF
	SendPktCh( ChUpgrDst, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
 802ec5a:	f107 0314 	add.w	r3, r7, #20
 802ec5e:	2240      	movs	r2, #64	; 0x40
 802ec60:	4619      	mov	r1, r3
 802ec62:	2003      	movs	r0, #3
 802ec64:	f7ff fa00 	bl	802e068 <SendPktCh>

	//========================================================================
}
 802ec68:	bf00      	nop
 802ec6a:	3758      	adds	r7, #88	; 0x58
 802ec6c:	46bd      	mov	sp, r7
 802ec6e:	bd80      	pop	{r7, pc}

0802ec70 <SendUpgrStat>:

//==========================================================================
void	SendUpgrStat		( int nUpgrResult )	//	Send Upgrade Data
//==========================================================================
{
 802ec70:	b580      	push	{r7, lr}
 802ec72:	b096      	sub	sp, #88	; 0x58
 802ec74:	af02      	add	r7, sp, #8
 802ec76:	6078      	str	r0, [r7, #4]
	printf( "%s(%d) - %d\n", __func__, __LINE__, nUpgrResult );
 802ec78:	687b      	ldr	r3, [r7, #4]
 802ec7a:	f240 22d5 	movw	r2, #725	; 0x2d5
 802ec7e:	491f      	ldr	r1, [pc, #124]	; (802ecfc <SendUpgrStat+0x8c>)
 802ec80:	481f      	ldr	r0, [pc, #124]	; (802ed00 <SendUpgrStat+0x90>)
 802ec82:	f008 fb07 	bl	8037294 <iprintf>

	RFMPkt			stPkt;
	memset( &stPkt, 0, sizeof( stPkt ) );
 802ec86:	f107 030c 	add.w	r3, r7, #12
 802ec8a:	2240      	movs	r2, #64	; 0x40
 802ec8c:	2100      	movs	r1, #0
 802ec8e:	4618      	mov	r0, r3
 802ec90:	f008 fa18 	bl	80370c4 <memset>

	//========================================================================
	//	Packet Header
	_MakePktHdr( &stPkt, GetDevID(), 0xFF, RFPktDataLen, PktUpgrStat );
 802ec94:	f003 fd1c 	bl	80326d0 <GetDevID>
 802ec98:	4601      	mov	r1, r0
 802ec9a:	f107 000c 	add.w	r0, r7, #12
 802ec9e:	2341      	movs	r3, #65	; 0x41
 802eca0:	9300      	str	r3, [sp, #0]
 802eca2:	233c      	movs	r3, #60	; 0x3c
 802eca4:	22ff      	movs	r2, #255	; 0xff
 802eca6:	f7ff fb51 	bl	802e34c <_MakePktHdr>

	//========================================================================
	//	Packet Body
	RFMPktUpgrStat	*pUpgrStat = (RFMPktUpgrStat *)&stPkt.dat.upgrStat;
 802ecaa:	f107 030c 	add.w	r3, r7, #12
 802ecae:	3304      	adds	r3, #4
 802ecb0:	64fb      	str	r3, [r7, #76]	; 0x4c

	pUpgrStat->nResult		=	nUpgrResult;
 802ecb2:	687b      	ldr	r3, [r7, #4]
 802ecb4:	b2da      	uxtb	r2, r3
 802ecb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ecb8:	701a      	strb	r2, [r3, #0]
	pUpgrStat->nTrainSet	=	g_idxTrainSet;
 802ecba:	4b12      	ldr	r3, [pc, #72]	; (802ed04 <SendUpgrStat+0x94>)
 802ecbc:	681b      	ldr	r3, [r3, #0]
 802ecbe:	b2da      	uxtb	r2, r3
 802ecc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ecc2:	711a      	strb	r2, [r3, #4]
	pUpgrStat->nCarNo 		=	g_nCarNo;
 802ecc4:	4b10      	ldr	r3, [pc, #64]	; (802ed08 <SendUpgrStat+0x98>)
 802ecc6:	681b      	ldr	r3, [r3, #0]
 802ecc8:	b2da      	uxtb	r2, r3
 802ecca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802eccc:	715a      	strb	r2, [r3, #5]
	//========================================================================
	//	Send RF
#if defined( USE_CH_ISO_DEV )

	//	송신기#1
	SendPktCh( ChTx_1, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
 802ecce:	4b0f      	ldr	r3, [pc, #60]	; (802ed0c <SendUpgrStat+0x9c>)
 802ecd0:	681b      	ldr	r3, [r3, #0]
 802ecd2:	f107 010c 	add.w	r1, r7, #12
 802ecd6:	2240      	movs	r2, #64	; 0x40
 802ecd8:	4618      	mov	r0, r3
 802ecda:	f7ff f9c5 	bl	802e068 <SendPktCh>

	HAL_Delay(3);	//	재전송 전 Delay
 802ecde:	2003      	movs	r0, #3
 802ece0:	f7f2 ff4e 	bl	8021b80 <HAL_Delay>

	//	송신기#2
	SendPktCh( ChTx_2, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
 802ece4:	4b0a      	ldr	r3, [pc, #40]	; (802ed10 <SendUpgrStat+0xa0>)
 802ece6:	681b      	ldr	r3, [r3, #0]
 802ece8:	f107 010c 	add.w	r1, r7, #12
 802ecec:	2240      	movs	r2, #64	; 0x40
 802ecee:	4618      	mov	r0, r3
 802ecf0:	f7ff f9ba 	bl	802e068 <SendPktCh>
	nCh = ChTS1_1 + g_idxTrainSet * 2 + ((g_nCarNo+1) % 2);	// 현재 호차 채널
	SendPktCh( nCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
#endif

	//========================================================================
}
 802ecf4:	bf00      	nop
 802ecf6:	3750      	adds	r7, #80	; 0x50
 802ecf8:	46bd      	mov	sp, r7
 802ecfa:	bd80      	pop	{r7, pc}
 802ecfc:	080416b4 	.word	0x080416b4
 802ed00:	0803981c 	.word	0x0803981c
 802ed04:	20002338 	.word	0x20002338
 802ed08:	2000233c 	.word	0x2000233c
 802ed0c:	200004f4 	.word	0x200004f4
 802ed10:	200004f8 	.word	0x200004f8

0802ed14 <ProcPktStatReq>:


//========================================================================
int	ProcPktStatReq		( const RFMPkt *pRFPkt )
//========================================================================
{
 802ed14:	b580      	push	{r7, lr}
 802ed16:	b084      	sub	sp, #16
 802ed18:	af00      	add	r7, sp, #0
 802ed1a:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802ed1c:	f002 f900 	bl	8030f20 <GetDbg>
 802ed20:	4603      	mov	r3, r0
 802ed22:	2b00      	cmp	r3, #0
 802ed24:	d005      	beq.n	802ed32 <ProcPktStatReq+0x1e>
 802ed26:	f240 3209 	movw	r2, #777	; 0x309
 802ed2a:	4929      	ldr	r1, [pc, #164]	; (802edd0 <ProcPktStatReq+0xbc>)
 802ed2c:	4829      	ldr	r0, [pc, #164]	; (802edd4 <ProcPktStatReq+0xc0>)
 802ed2e:	f008 fab1 	bl	8037294 <iprintf>

	const RFMPktStatReq *pStatReq = &pRFPkt->dat.statReq;
 802ed32:	687b      	ldr	r3, [r7, #4]
 802ed34:	3304      	adds	r3, #4
 802ed36:	60fb      	str	r3, [r7, #12]

	//	수신기의 경우 송신기 상태정보 갱신.
	//		-> 상태정보 요청한 송신기의 상태정보를 갱신한다.
	if ( GetDevID() == DevRF900M )
 802ed38:	f003 fcca 	bl	80326d0 <GetDevID>
 802ed3c:	4603      	mov	r3, r0
 802ed3e:	2b01      	cmp	r3, #1
 802ed40:	d13c      	bne.n	802edbc <ProcPktStatReq+0xa8>
	{
		int idx = pStatReq->nCarNo;
 802ed42:	68fb      	ldr	r3, [r7, #12]
 802ed44:	795b      	ldrb	r3, [r3, #5]
 802ed46:	60bb      	str	r3, [r7, #8]

		//========================================================================
		//	장치 응답 Flag 설정.
		SetStat( idx );		//	상태정보 설정.
 802ed48:	68b8      	ldr	r0, [r7, #8]
 802ed4a:	f005 fa75 	bl	8034238 <SetStat>

		//========================================================================
		//	RSSI 갱신
		g_devStat[idx].stat.nChRx 	= pStatReq->nSrcCh;
 802ed4e:	68fb      	ldr	r3, [r7, #12]
 802ed50:	7818      	ldrb	r0, [r3, #0]
 802ed52:	4921      	ldr	r1, [pc, #132]	; (802edd8 <ProcPktStatReq+0xc4>)
 802ed54:	68ba      	ldr	r2, [r7, #8]
 802ed56:	4613      	mov	r3, r2
 802ed58:	00db      	lsls	r3, r3, #3
 802ed5a:	4413      	add	r3, r2
 802ed5c:	009b      	lsls	r3, r3, #2
 802ed5e:	4413      	add	r3, r2
 802ed60:	440b      	add	r3, r1
 802ed62:	330a      	adds	r3, #10
 802ed64:	4602      	mov	r2, r0
 802ed66:	701a      	strb	r2, [r3, #0]
		g_devStat[idx].stampRx 		= HAL_GetTick();
 802ed68:	f7f2 fefe 	bl	8021b68 <HAL_GetTick>
 802ed6c:	4603      	mov	r3, r0
 802ed6e:	4618      	mov	r0, r3
 802ed70:	4919      	ldr	r1, [pc, #100]	; (802edd8 <ProcPktStatReq+0xc4>)
 802ed72:	68ba      	ldr	r2, [r7, #8]
 802ed74:	4613      	mov	r3, r2
 802ed76:	00db      	lsls	r3, r3, #3
 802ed78:	4413      	add	r3, r2
 802ed7a:	009b      	lsls	r3, r3, #2
 802ed7c:	4413      	add	r3, r2
 802ed7e:	440b      	add	r3, r1
 802ed80:	3318      	adds	r3, #24
 802ed82:	f8c3 0001 	str.w	r0, [r3, #1]
		g_devStat[idx].nRSSI 		= g_nRSSI;
 802ed86:	4b15      	ldr	r3, [pc, #84]	; (802eddc <ProcPktStatReq+0xc8>)
 802ed88:	6819      	ldr	r1, [r3, #0]
 802ed8a:	4813      	ldr	r0, [pc, #76]	; (802edd8 <ProcPktStatReq+0xc4>)
 802ed8c:	68ba      	ldr	r2, [r7, #8]
 802ed8e:	4613      	mov	r3, r2
 802ed90:	00db      	lsls	r3, r3, #3
 802ed92:	4413      	add	r3, r2
 802ed94:	009b      	lsls	r3, r3, #2
 802ed96:	4413      	add	r3, r2
 802ed98:	4403      	add	r3, r0
 802ed9a:	3318      	adds	r3, #24
 802ed9c:	f8c3 1005 	str.w	r1, [r3, #5]
#if defined(USE_ROUTE_NEAREST_RFM)	//	수신기 -> 송신기 중계 연결. ( 가장가까운 수신기에서 송신기로 중계 )
		g_devStat[idx].nNearCh 		= pStatReq->nNearCh;	//	송신기 입장에서 가까운 수신기(RFM)채널.
 802eda0:	68fb      	ldr	r3, [r7, #12]
 802eda2:	7a1b      	ldrb	r3, [r3, #8]
 802eda4:	4618      	mov	r0, r3
 802eda6:	490c      	ldr	r1, [pc, #48]	; (802edd8 <ProcPktStatReq+0xc4>)
 802eda8:	68ba      	ldr	r2, [r7, #8]
 802edaa:	4613      	mov	r3, r2
 802edac:	00db      	lsls	r3, r3, #3
 802edae:	4413      	add	r3, r2
 802edb0:	009b      	lsls	r3, r3, #2
 802edb2:	4413      	add	r3, r2
 802edb4:	440b      	add	r3, r1
 802edb6:	3320      	adds	r3, #32
 802edb8:	f8c3 0001 	str.w	r0, [r3, #1]
#endif	//	defined(USE_ROUTE_NEAREST_RFM)
	}

	//	Source Channel로 상태정보 송신.
	SendStat( pStatReq->nSrcCh );
 802edbc:	68fb      	ldr	r3, [r7, #12]
 802edbe:	781b      	ldrb	r3, [r3, #0]
 802edc0:	4618      	mov	r0, r3
 802edc2:	f7ff fc0f 	bl	802e5e4 <SendStat>
}
 802edc6:	bf00      	nop
 802edc8:	4618      	mov	r0, r3
 802edca:	3710      	adds	r7, #16
 802edcc:	46bd      	mov	sp, r7
 802edce:	bd80      	pop	{r7, pc}
 802edd0:	080416c4 	.word	0x080416c4
 802edd4:	080397dc 	.word	0x080397dc
 802edd8:	20002358 	.word	0x20002358
 802eddc:	2000234c 	.word	0x2000234c

0802ede0 <ProcPktStat>:


//========================================================================
int	ProcPktStat			( const RFMPkt *pRFPkt )
//========================================================================
{
 802ede0:	b580      	push	{r7, lr}
 802ede2:	b084      	sub	sp, #16
 802ede4:	af00      	add	r7, sp, #0
 802ede6:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802ede8:	f002 f89a 	bl	8030f20 <GetDbg>
 802edec:	4603      	mov	r3, r0
 802edee:	2b00      	cmp	r3, #0
 802edf0:	d005      	beq.n	802edfe <ProcPktStat+0x1e>
 802edf2:	f240 322a 	movw	r2, #810	; 0x32a
 802edf6:	4915      	ldr	r1, [pc, #84]	; (802ee4c <ProcPktStat+0x6c>)
 802edf8:	4815      	ldr	r0, [pc, #84]	; (802ee50 <ProcPktStat+0x70>)
 802edfa:	f008 fa4b 	bl	8037294 <iprintf>

	int nRspID = pRFPkt->dat.stat.nCarNo;
 802edfe:	687b      	ldr	r3, [r7, #4]
 802ee00:	7c5b      	ldrb	r3, [r3, #17]
 802ee02:	60fb      	str	r3, [r7, #12]
	const RFMPktStat *pStat = &pRFPkt->dat.stat;
 802ee04:	687b      	ldr	r3, [r7, #4]
 802ee06:	3304      	adds	r3, #4
 802ee08:	60bb      	str	r3, [r7, #8]
	//	상태정보 수신.
//		printf ( "[Stat] Car:%d\n", pRFPkt->dat.stat.nCarNo );

	if( nRspID < MaxCarNo	//	MaxCarNo(13)
 802ee0a:	68fb      	ldr	r3, [r7, #12]
 802ee0c:	2b0c      	cmp	r3, #12
 802ee0e:	dc18      	bgt.n	802ee42 <ProcPktStat+0x62>
		&& ( pStat->nDevID == DevRF900M || pStat->nDevID == DevRF900T )
 802ee10:	68bb      	ldr	r3, [r7, #8]
 802ee12:	785b      	ldrb	r3, [r3, #1]
 802ee14:	2b01      	cmp	r3, #1
 802ee16:	d003      	beq.n	802ee20 <ProcPktStat+0x40>
 802ee18:	68bb      	ldr	r3, [r7, #8]
 802ee1a:	785b      	ldrb	r3, [r3, #1]
 802ee1c:	2b02      	cmp	r3, #2
 802ee1e:	d110      	bne.n	802ee42 <ProcPktStat+0x62>
		&& pStat->nMagicNum == 0xAA55
 802ee20:	68bb      	ldr	r3, [r7, #8]
 802ee22:	885b      	ldrh	r3, [r3, #2]
 802ee24:	b29b      	uxth	r3, r3
 802ee26:	f64a 2255 	movw	r2, #43605	; 0xaa55
 802ee2a:	4293      	cmp	r3, r2
 802ee2c:	d109      	bne.n	802ee42 <ProcPktStat+0x62>
		&& g_bSetRspIDManual == 0		//	수동설정모드가 아닌경우.
 802ee2e:	4b09      	ldr	r3, [pc, #36]	; (802ee54 <ProcPktStat+0x74>)
 802ee30:	681b      	ldr	r3, [r3, #0]
 802ee32:	2b00      	cmp	r3, #0
 802ee34:	d105      	bne.n	802ee42 <ProcPktStat+0x62>
		)
	{
		//	장치 응답 Flag 설정.
		SetStat( nRspID );		//	상태정보 설정.
 802ee36:	68f8      	ldr	r0, [r7, #12]
 802ee38:	f005 f9fe 	bl	8034238 <SetStat>

		UpdateStat( pStat );	//	상태정보 Update. ( 버전정보 갱신 등 )
 802ee3c:	68b8      	ldr	r0, [r7, #8]
 802ee3e:	f005 f9a1 	bl	8034184 <UpdateStat>
			HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_RESET );
		}
	}
#endif
	//========================================================================
}
 802ee42:	bf00      	nop
 802ee44:	4618      	mov	r0, r3
 802ee46:	3710      	adds	r7, #16
 802ee48:	46bd      	mov	sp, r7
 802ee4a:	bd80      	pop	{r7, pc}
 802ee4c:	080416d4 	.word	0x080416d4
 802ee50:	080397dc 	.word	0x080397dc
 802ee54:	2000139c 	.word	0x2000139c

0802ee58 <ProcPktRouteReq>:


//========================================================================
int	ProcPktRouteReq		( const RFMPkt *pRFPkt )
//========================================================================
{
 802ee58:	b590      	push	{r4, r7, lr}
 802ee5a:	b085      	sub	sp, #20
 802ee5c:	af00      	add	r7, sp, #0
 802ee5e:	6078      	str	r0, [r7, #4]
	//	Source Channel로 Route 응답.
	const RFMPktRoute *pRouteReq = &pRFPkt->dat.routeReq;
 802ee60:	687b      	ldr	r3, [r7, #4]
 802ee62:	3304      	adds	r3, #4
 802ee64:	60fb      	str	r3, [r7, #12]

	if ( GetDbg() )		printf( "%s(%d) - %d\n", __func__, __LINE__, pRouteReq->nSrcCh );
 802ee66:	f002 f85b 	bl	8030f20 <GetDbg>
 802ee6a:	4603      	mov	r3, r0
 802ee6c:	2b00      	cmp	r3, #0
 802ee6e:	d007      	beq.n	802ee80 <ProcPktRouteReq+0x28>
 802ee70:	68fb      	ldr	r3, [r7, #12]
 802ee72:	781b      	ldrb	r3, [r3, #0]
 802ee74:	f44f 7257 	mov.w	r2, #860	; 0x35c
 802ee78:	491a      	ldr	r1, [pc, #104]	; (802eee4 <ProcPktRouteReq+0x8c>)
 802ee7a:	481b      	ldr	r0, [pc, #108]	; (802eee8 <ProcPktRouteReq+0x90>)
 802ee7c:	f008 fa0a 	bl	8037294 <iprintf>

	if ( GetDevID() == DevRF900M )
 802ee80:	f003 fc26 	bl	80326d0 <GetDevID>
 802ee84:	4603      	mov	r3, r0
 802ee86:	2b01      	cmp	r3, #1
 802ee88:	d121      	bne.n	802eece <ProcPktRouteReq+0x76>
	{
		//	수신기의 경우 Route경로 설정.
		int idx = pRouteReq->nCarNo;
 802ee8a:	68fb      	ldr	r3, [r7, #12]
 802ee8c:	799b      	ldrb	r3, [r3, #6]
 802ee8e:	60bb      	str	r3, [r7, #8]

		if( pRouteReq->nSrcDev == DevRF900M )
 802ee90:	68fb      	ldr	r3, [r7, #12]
 802ee92:	785b      	ldrb	r3, [r3, #1]
 802ee94:	2b01      	cmp	r3, #1
 802ee96:	d11a      	bne.n	802eece <ProcPktRouteReq+0x76>
		{
			//	1. 인접한 송신기로 등록.

			//	2. 가까운 수신기에 Route정보 요청.

			if ( pRouteReq->nSrcCh < GetChRx() )
 802ee98:	68fb      	ldr	r3, [r7, #12]
 802ee9a:	781b      	ldrb	r3, [r3, #0]
 802ee9c:	461c      	mov	r4, r3
 802ee9e:	f003 fcbd 	bl	803281c <GetChRx>
 802eea2:	4603      	mov	r3, r0
 802eea4:	429c      	cmp	r4, r3
 802eea6:	da05      	bge.n	802eeb4 <ProcPktRouteReq+0x5c>
			{
				//	1 -> 2 ...
				SetChRFMDown( pRouteReq->nSrcCh );
 802eea8:	68fb      	ldr	r3, [r7, #12]
 802eeaa:	781b      	ldrb	r3, [r3, #0]
 802eeac:	4618      	mov	r0, r3
 802eeae:	f003 fdf7 	bl	8032aa0 <SetChRFMDown>
 802eeb2:	e00c      	b.n	802eece <ProcPktRouteReq+0x76>
#else
				//	다음 수신기로 Route 요청.
				SendRouteReq( GetChRx() + ChGap );
#endif
			}
			else if ( pRouteReq->nSrcCh > GetChRx() )
 802eeb4:	68fb      	ldr	r3, [r7, #12]
 802eeb6:	781b      	ldrb	r3, [r3, #0]
 802eeb8:	461c      	mov	r4, r3
 802eeba:	f003 fcaf 	bl	803281c <GetChRx>
 802eebe:	4603      	mov	r3, r0
 802eec0:	429c      	cmp	r4, r3
 802eec2:	dd04      	ble.n	802eece <ProcPktRouteReq+0x76>
			{
				//	... 3 <- 4
				SetChRFMUp( pRouteReq->nSrcCh );
 802eec4:	68fb      	ldr	r3, [r7, #12]
 802eec6:	781b      	ldrb	r3, [r3, #0]
 802eec8:	4618      	mov	r0, r3
 802eeca:	f003 fdcd 	bl	8032a68 <SetChRFMUp>
		//	Route 정보 갱신
	}

	//	Resp Delay
//	HAL_Delay( 3 );	//	Route 응답 Delay
	SendRouteRsp( pRouteReq->nSrcCh );
 802eece:	68fb      	ldr	r3, [r7, #12]
 802eed0:	781b      	ldrb	r3, [r3, #0]
 802eed2:	4618      	mov	r0, r3
 802eed4:	f7ff fc74 	bl	802e7c0 <SendRouteRsp>
}
 802eed8:	bf00      	nop
 802eeda:	4618      	mov	r0, r3
 802eedc:	3714      	adds	r7, #20
 802eede:	46bd      	mov	sp, r7
 802eee0:	bd90      	pop	{r4, r7, pc}
 802eee2:	bf00      	nop
 802eee4:	080416e0 	.word	0x080416e0
 802eee8:	0803981c 	.word	0x0803981c

0802eeec <ProcPktRouteRsp>:


//========================================================================
int	ProcPktRouteRsp		( const RFMPkt *pRFPkt )
//========================================================================
{
 802eeec:	b590      	push	{r4, r7, lr}
 802eeee:	b085      	sub	sp, #20
 802eef0:	af00      	add	r7, sp, #0
 802eef2:	6078      	str	r0, [r7, #4]
	const RFMPktRoute *pRouteRsp = &pRFPkt->dat.routeRsp;
 802eef4:	687b      	ldr	r3, [r7, #4]
 802eef6:	3304      	adds	r3, #4
 802eef8:	60fb      	str	r3, [r7, #12]

	g_nStampRouteRsp = HAL_GetTick();		//	응답 시간 저장.
 802eefa:	f7f2 fe35 	bl	8021b68 <HAL_GetTick>
 802eefe:	4603      	mov	r3, r0
 802ef00:	461a      	mov	r2, r3
 802ef02:	4b1f      	ldr	r3, [pc, #124]	; (802ef80 <ProcPktRouteRsp+0x94>)
 802ef04:	601a      	str	r2, [r3, #0]
	g_nIdxRouteFindNext = 0;				//	Find Index 초기화.
 802ef06:	4b1f      	ldr	r3, [pc, #124]	; (802ef84 <ProcPktRouteRsp+0x98>)
 802ef08:	2200      	movs	r2, #0
 802ef0a:	601a      	str	r2, [r3, #0]

	if ( GetDbg() )		printf( "%s(%d) - %d\n", __func__, __LINE__, pRouteRsp->nSrcCh );
 802ef0c:	f002 f808 	bl	8030f20 <GetDbg>
 802ef10:	4603      	mov	r3, r0
 802ef12:	2b00      	cmp	r3, #0
 802ef14:	d007      	beq.n	802ef26 <ProcPktRouteRsp+0x3a>
 802ef16:	68fb      	ldr	r3, [r7, #12]
 802ef18:	781b      	ldrb	r3, [r3, #0]
 802ef1a:	f240 32a6 	movw	r2, #934	; 0x3a6
 802ef1e:	491a      	ldr	r1, [pc, #104]	; (802ef88 <ProcPktRouteRsp+0x9c>)
 802ef20:	481a      	ldr	r0, [pc, #104]	; (802ef8c <ProcPktRouteRsp+0xa0>)
 802ef22:	f008 f9b7 	bl	8037294 <iprintf>

	if ( GetDevID() == DevRF900M )
 802ef26:	f003 fbd3 	bl	80326d0 <GetDevID>
 802ef2a:	4603      	mov	r3, r0
 802ef2c:	2b01      	cmp	r3, #1
 802ef2e:	d121      	bne.n	802ef74 <ProcPktRouteRsp+0x88>
	{
		//	수신기의 경우 Route경로 설정.
		int idx = pRouteRsp->nCarNo;
 802ef30:	68fb      	ldr	r3, [r7, #12]
 802ef32:	799b      	ldrb	r3, [r3, #6]
 802ef34:	60bb      	str	r3, [r7, #8]

		if( pRouteRsp->nSrcDev == DevRF900M )
 802ef36:	68fb      	ldr	r3, [r7, #12]
 802ef38:	785b      	ldrb	r3, [r3, #1]
 802ef3a:	2b01      	cmp	r3, #1
 802ef3c:	d11a      	bne.n	802ef74 <ProcPktRouteRsp+0x88>
		{
			//	1. 인접한 송신기로 등록.

			//	2. 가까운 수신기에 Route정보 요청.

			if ( pRouteRsp->nSrcCh < GetChRx() )
 802ef3e:	68fb      	ldr	r3, [r7, #12]
 802ef40:	781b      	ldrb	r3, [r3, #0]
 802ef42:	461c      	mov	r4, r3
 802ef44:	f003 fc6a 	bl	803281c <GetChRx>
 802ef48:	4603      	mov	r3, r0
 802ef4a:	429c      	cmp	r4, r3
 802ef4c:	da05      	bge.n	802ef5a <ProcPktRouteRsp+0x6e>
			{
				//	1 -> 2 ...
				SetChRFMDown( pRouteRsp->nSrcCh );
 802ef4e:	68fb      	ldr	r3, [r7, #12]
 802ef50:	781b      	ldrb	r3, [r3, #0]
 802ef52:	4618      	mov	r0, r3
 802ef54:	f003 fda4 	bl	8032aa0 <SetChRFMDown>
 802ef58:	e00c      	b.n	802ef74 <ProcPktRouteRsp+0x88>

				//	다음 수신기로 Route 요청.
			}
			else if ( pRouteRsp->nSrcCh > GetChRx() )
 802ef5a:	68fb      	ldr	r3, [r7, #12]
 802ef5c:	781b      	ldrb	r3, [r3, #0]
 802ef5e:	461c      	mov	r4, r3
 802ef60:	f003 fc5c 	bl	803281c <GetChRx>
 802ef64:	4603      	mov	r3, r0
 802ef66:	429c      	cmp	r4, r3
 802ef68:	dd04      	ble.n	802ef74 <ProcPktRouteRsp+0x88>
			{
				//	... 3 <- 4
				SetChRFMUp( pRouteRsp->nSrcCh );
 802ef6a:	68fb      	ldr	r3, [r7, #12]
 802ef6c:	781b      	ldrb	r3, [r3, #0]
 802ef6e:	4618      	mov	r0, r3
 802ef70:	f003 fd7a 	bl	8032a68 <SetChRFMUp>
		}

		//========================================================================
		//	Route 정보 갱신
	}
}
 802ef74:	bf00      	nop
 802ef76:	4618      	mov	r0, r3
 802ef78:	3714      	adds	r7, #20
 802ef7a:	46bd      	mov	sp, r7
 802ef7c:	bd90      	pop	{r4, r7, pc}
 802ef7e:	bf00      	nop
 802ef80:	20002548 	.word	0x20002548
 802ef84:	2000254c 	.word	0x2000254c
 802ef88:	080416f0 	.word	0x080416f0
 802ef8c:	0803981c 	.word	0x0803981c

0802ef90 <ProcPktCtrlPaCall>:


//========================================================================
int	ProcPktCtrlPaCall	( const RFMPkt *pRFPkt )
//========================================================================
{
 802ef90:	b580      	push	{r7, lr}
 802ef92:	b084      	sub	sp, #16
 802ef94:	af00      	add	r7, sp, #0
 802ef96:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802ef98:	f001 ffc2 	bl	8030f20 <GetDbg>
 802ef9c:	4603      	mov	r3, r0
 802ef9e:	2b00      	cmp	r3, #0
 802efa0:	d005      	beq.n	802efae <ProcPktCtrlPaCall+0x1e>
 802efa2:	f240 32d5 	movw	r2, #981	; 0x3d5
 802efa6:	492e      	ldr	r1, [pc, #184]	; (802f060 <ProcPktCtrlPaCall+0xd0>)
 802efa8:	482e      	ldr	r0, [pc, #184]	; (802f064 <ProcPktCtrlPaCall+0xd4>)
 802efaa:	f008 f973 	bl	8037294 <iprintf>

	//	방송/통화 시작 종료 명령.
	const RFMPktCtrlPACall	*pCtrl = &pRFPkt->dat.pacall;
 802efae:	687b      	ldr	r3, [r7, #4]
 802efb0:	3304      	adds	r3, #4
 802efb2:	60fb      	str	r3, [r7, #12]

	switch ( pCtrl->nStartStop )
 802efb4:	68fb      	ldr	r3, [r7, #12]
 802efb6:	781b      	ldrb	r3, [r3, #0]
 802efb8:	2b00      	cmp	r3, #0
 802efba:	d008      	beq.n	802efce <ProcPktCtrlPaCall+0x3e>
 802efbc:	2b01      	cmp	r3, #1
 802efbe:	d113      	bne.n	802efe8 <ProcPktCtrlPaCall+0x58>
	{
	case CtrlStart:
		printf("[Start]");
 802efc0:	4829      	ldr	r0, [pc, #164]	; (802f068 <ProcPktCtrlPaCall+0xd8>)
 802efc2:	f008 f967 	bl	8037294 <iprintf>
		SetRFMMode( RFMModeRx );
 802efc6:	2002      	movs	r0, #2
 802efc8:	f003 fbba 	bl	8032740 <SetRFMMode>
		break;
 802efcc:	e012      	b.n	802eff4 <ProcPktCtrlPaCall+0x64>
	case CtrlStop:
		printf("[Stop]");
 802efce:	4827      	ldr	r0, [pc, #156]	; (802f06c <ProcPktCtrlPaCall+0xdc>)
 802efd0:	f008 f960 	bl	8037294 <iprintf>
		SetRFMMode( RFMModeNormal );
 802efd4:	2000      	movs	r0, #0
 802efd6:	f003 fbb3 	bl	8032740 <SetRFMMode>
		//  송신기 & 수신기 Spk Relay Off
		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_RESET );
 802efda:	2200      	movs	r2, #0
 802efdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 802efe0:	4823      	ldr	r0, [pc, #140]	; (802f070 <ProcPktCtrlPaCall+0xe0>)
 802efe2:	f7f4 fa9b 	bl	802351c <HAL_GPIO_WritePin>
		break;
 802efe6:	e005      	b.n	802eff4 <ProcPktCtrlPaCall+0x64>
	default:			printf("%s:Invalid\n", __func__);	return 0;
 802efe8:	491d      	ldr	r1, [pc, #116]	; (802f060 <ProcPktCtrlPaCall+0xd0>)
 802efea:	4822      	ldr	r0, [pc, #136]	; (802f074 <ProcPktCtrlPaCall+0xe4>)
 802efec:	f008 f952 	bl	8037294 <iprintf>
 802eff0:	2300      	movs	r3, #0
 802eff2:	e031      	b.n	802f058 <ProcPktCtrlPaCall+0xc8>
	}

	switch ( pCtrl->nTypePACall )
 802eff4:	68fb      	ldr	r3, [r7, #12]
 802eff6:	785b      	ldrb	r3, [r3, #1]
 802eff8:	2b03      	cmp	r3, #3
 802effa:	d00e      	beq.n	802f01a <ProcPktCtrlPaCall+0x8a>
 802effc:	2b03      	cmp	r3, #3
 802effe:	dc10      	bgt.n	802f022 <ProcPktCtrlPaCall+0x92>
 802f000:	2b01      	cmp	r3, #1
 802f002:	d002      	beq.n	802f00a <ProcPktCtrlPaCall+0x7a>
 802f004:	2b02      	cmp	r3, #2
 802f006:	d004      	beq.n	802f012 <ProcPktCtrlPaCall+0x82>
 802f008:	e00b      	b.n	802f022 <ProcPktCtrlPaCall+0x92>
	{
	case CtrlPA:		printf("[PA]");						break;
 802f00a:	481b      	ldr	r0, [pc, #108]	; (802f078 <ProcPktCtrlPaCall+0xe8>)
 802f00c:	f008 f942 	bl	8037294 <iprintf>
 802f010:	e00d      	b.n	802f02e <ProcPktCtrlPaCall+0x9e>
	case CtrlCall:		printf("[Call]");					break;
 802f012:	481a      	ldr	r0, [pc, #104]	; (802f07c <ProcPktCtrlPaCall+0xec>)
 802f014:	f008 f93e 	bl	8037294 <iprintf>
 802f018:	e009      	b.n	802f02e <ProcPktCtrlPaCall+0x9e>
	case CtrlOccPa:		printf("[OccPa]");					break;
 802f01a:	4819      	ldr	r0, [pc, #100]	; (802f080 <ProcPktCtrlPaCall+0xf0>)
 802f01c:	f008 f93a 	bl	8037294 <iprintf>
 802f020:	e005      	b.n	802f02e <ProcPktCtrlPaCall+0x9e>
	default:			printf("%s:Invalid\n", __func__);	return 0;
 802f022:	490f      	ldr	r1, [pc, #60]	; (802f060 <ProcPktCtrlPaCall+0xd0>)
 802f024:	4813      	ldr	r0, [pc, #76]	; (802f074 <ProcPktCtrlPaCall+0xe4>)
 802f026:	f008 f935 	bl	8037294 <iprintf>
 802f02a:	2300      	movs	r3, #0
 802f02c:	e014      	b.n	802f058 <ProcPktCtrlPaCall+0xc8>
	}

	printf("\n");
 802f02e:	200a      	movs	r0, #10
 802f030:	f008 f948 	bl	80372c4 <putchar>

	if ( GetDevID() == DevRF900M )
 802f034:	f003 fb4c 	bl	80326d0 <GetDevID>
 802f038:	4603      	mov	r3, r0
 802f03a:	2b01      	cmp	r3, #1
 802f03c:	d106      	bne.n	802f04c <ProcPktCtrlPaCall+0xbc>
	{
		//	수신기

		//	가까이 있는 송신기 설정. ( 수신기 -> 송신기 중계시 사용 )
		SetChPARFT( GetChNearRFT( 190 ) );	//	RSSI 190 이상인경우 : 수신기 -> 송신기 중계
 802f03e:	20be      	movs	r0, #190	; 0xbe
 802f040:	f003 fc26 	bl	8032890 <GetChNearRFT>
 802f044:	4603      	mov	r3, r0
 802f046:	4618      	mov	r0, r3
 802f048:	f003 fcf2 	bl	8032a30 <SetChPARFT>
	}

	g_nStampRxPkt = HAL_GetTick();		//	방송/통화 Stamp
 802f04c:	f7f2 fd8c 	bl	8021b68 <HAL_GetTick>
 802f050:	4603      	mov	r3, r0
 802f052:	461a      	mov	r2, r3
 802f054:	4b0b      	ldr	r3, [pc, #44]	; (802f084 <ProcPktCtrlPaCall+0xf4>)
 802f056:	601a      	str	r2, [r3, #0]
}
 802f058:	4618      	mov	r0, r3
 802f05a:	3710      	adds	r7, #16
 802f05c:	46bd      	mov	sp, r7
 802f05e:	bd80      	pop	{r7, pc}
 802f060:	08041700 	.word	0x08041700
 802f064:	080397dc 	.word	0x080397dc
 802f068:	0803982c 	.word	0x0803982c
 802f06c:	08039834 	.word	0x08039834
 802f070:	40021000 	.word	0x40021000
 802f074:	0803983c 	.word	0x0803983c
 802f078:	08039848 	.word	0x08039848
 802f07c:	08039850 	.word	0x08039850
 802f080:	08039858 	.word	0x08039858
 802f084:	20002348 	.word	0x20002348

0802f088 <ProcPktPA>:

//========================================================================
int	ProcPktPA			( const RFMPkt *pRFPkt )
//========================================================================
{
 802f088:	b580      	push	{r7, lr}
 802f08a:	b084      	sub	sp, #16
 802f08c:	af00      	add	r7, sp, #0
 802f08e:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802f090:	f001 ff46 	bl	8030f20 <GetDbg>
 802f094:	4603      	mov	r3, r0
 802f096:	2b00      	cmp	r3, #0
 802f098:	d005      	beq.n	802f0a6 <ProcPktPA+0x1e>
 802f09a:	f240 4202 	movw	r2, #1026	; 0x402
 802f09e:	4921      	ldr	r1, [pc, #132]	; (802f124 <ProcPktPA+0x9c>)
 802f0a0:	4821      	ldr	r0, [pc, #132]	; (802f128 <ProcPktPA+0xa0>)
 802f0a2:	f008 f8f7 	bl	8037294 <iprintf>

	//========================================================================
	//  방송 ( PTT )
	if ( GetDevID() == DevRF900M )
 802f0a6:	f003 fb13 	bl	80326d0 <GetDevID>
 802f0aa:	4603      	mov	r3, r0
 802f0ac:	2b01      	cmp	r3, #1
 802f0ae:	d11a      	bne.n	802f0e6 <ProcPktPA+0x5e>
	{
		//  수신기
		uint16_t	 *pAudioBuf = (uint16_t*)pRFPkt->dat.data;
 802f0b0:	687b      	ldr	r3, [r7, #4]
 802f0b2:	3304      	adds	r3, #4
 802f0b4:	60bb      	str	r3, [r7, #8]

		//  방송 : 송신기 -> 수신기
		qBufPut( &g_qBufAudioRx, (uint8_t*)pAudioBuf, ( I2S_DMA_LOOP_SIZE * 2 ) );
 802f0b6:	223c      	movs	r2, #60	; 0x3c
 802f0b8:	68b9      	ldr	r1, [r7, #8]
 802f0ba:	481c      	ldr	r0, [pc, #112]	; (802f12c <ProcPktPA+0xa4>)
 802f0bc:	f7ff f8e7 	bl	802e28e <qBufPut>

		// 조명 On
		HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
 802f0c0:	2201      	movs	r2, #1
 802f0c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 802f0c6:	481a      	ldr	r0, [pc, #104]	; (802f130 <ProcPktPA+0xa8>)
 802f0c8:	f7f4 fa28 	bl	802351c <HAL_GPIO_WritePin>

		SetRFMMode( RFMModeRx );
 802f0cc:	2002      	movs	r0, #2
 802f0ce:	f003 fb37 	bl	8032740 <SetRFMMode>

		//	Codec Speaker On
		RFM_Spk(1);
 802f0d2:	2001      	movs	r0, #1
 802f0d4:	f003 fff4 	bl	80330c0 <RFM_Spk>
		//  수신기 Spk Relay On
		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_SET );
 802f0d8:	2201      	movs	r2, #1
 802f0da:	f44f 7180 	mov.w	r1, #256	; 0x100
 802f0de:	4814      	ldr	r0, [pc, #80]	; (802f130 <ProcPktPA+0xa8>)
 802f0e0:	f7f4 fa1c 	bl	802351c <HAL_GPIO_WritePin>
 802f0e4:	e013      	b.n	802f10e <ProcPktPA+0x86>
	}
	else
	{
		//========================================================================
		uint16_t	 *pAudioBuf = (uint16_t*)pRFPkt->dat.data;
 802f0e6:	687b      	ldr	r3, [r7, #4]
 802f0e8:	3304      	adds	r3, #4
 802f0ea:	60fb      	str	r3, [r7, #12]

#if defined(USE_RFT_ONLY_RX_SPK_ON)
		//  송신기 : 수신중인 경우 SPK ON
//			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
		RFM_Spk(1);
 802f0ec:	2001      	movs	r0, #1
 802f0ee:	f003 ffe7 	bl	80330c0 <RFM_Spk>
#endif

		//  방송 : 송신기 -> 수신기
		qBufPut( &g_qBufAudioRx, (uint8_t*)pAudioBuf, ( I2S_DMA_LOOP_SIZE * 2 ) );
 802f0f2:	223c      	movs	r2, #60	; 0x3c
 802f0f4:	68f9      	ldr	r1, [r7, #12]
 802f0f6:	480d      	ldr	r0, [pc, #52]	; (802f12c <ProcPktPA+0xa4>)
 802f0f8:	f7ff f8c9 	bl	802e28e <qBufPut>
		//========================================================================

		//  송신기
		SetRFMMode( RFMModeRx );
 802f0fc:	2002      	movs	r0, #2
 802f0fe:	f003 fb1f 	bl	8032740 <SetRFMMode>

		//  Red LED On
		HAL_GPIO_WritePin ( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_SET ); //  RED LED
 802f102:	2201      	movs	r2, #1
 802f104:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802f108:	480a      	ldr	r0, [pc, #40]	; (802f134 <ProcPktPA+0xac>)
 802f10a:	f7f4 fa07 	bl	802351c <HAL_GPIO_WritePin>
	}
	g_nStampRxPkt = HAL_GetTick();		//	방송/통화 Stamp
 802f10e:	f7f2 fd2b 	bl	8021b68 <HAL_GetTick>
 802f112:	4603      	mov	r3, r0
 802f114:	461a      	mov	r2, r3
 802f116:	4b08      	ldr	r3, [pc, #32]	; (802f138 <ProcPktPA+0xb0>)
 802f118:	601a      	str	r2, [r3, #0]
}
 802f11a:	bf00      	nop
 802f11c:	4618      	mov	r0, r3
 802f11e:	3710      	adds	r7, #16
 802f120:	46bd      	mov	sp, r7
 802f122:	bd80      	pop	{r7, pc}
 802f124:	08041714 	.word	0x08041714
 802f128:	080397dc 	.word	0x080397dc
 802f12c:	20001d88 	.word	0x20001d88
 802f130:	40021000 	.word	0x40021000
 802f134:	40020400 	.word	0x40020400
 802f138:	20002348 	.word	0x20002348

0802f13c <ProcPktCall>:

//========================================================================
int	ProcPktCall			( const RFMPkt *pRFPkt )
//========================================================================
{
 802f13c:	b580      	push	{r7, lr}
 802f13e:	b084      	sub	sp, #16
 802f140:	af00      	add	r7, sp, #0
 802f142:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802f144:	f001 feec 	bl	8030f20 <GetDbg>
 802f148:	4603      	mov	r3, r0
 802f14a:	2b00      	cmp	r3, #0
 802f14c:	d005      	beq.n	802f15a <ProcPktCall+0x1e>
 802f14e:	f240 4234 	movw	r2, #1076	; 0x434
 802f152:	4918      	ldr	r1, [pc, #96]	; (802f1b4 <ProcPktCall+0x78>)
 802f154:	4818      	ldr	r0, [pc, #96]	; (802f1b8 <ProcPktCall+0x7c>)
 802f156:	f008 f89d 	bl	8037294 <iprintf>

	if( GetDevID() == DevRF900T )
 802f15a:	f003 fab9 	bl	80326d0 <GetDevID>
 802f15e:	4603      	mov	r3, r0
 802f160:	2b02      	cmp	r3, #2
 802f162:	d114      	bne.n	802f18e <ProcPktCall+0x52>
	{
		//	송신기

		//========================================================================
		//  통화 ( SOS )
		uint16_t	 *pAudioBuf = (uint16_t*)pRFPkt->dat.data;
 802f164:	687b      	ldr	r3, [r7, #4]
 802f166:	3304      	adds	r3, #4
 802f168:	60fb      	str	r3, [r7, #12]

		SetRFMMode( RFMModeRx );
 802f16a:	2002      	movs	r0, #2
 802f16c:	f003 fae8 	bl	8032740 <SetRFMMode>

#if defined(USE_RFT_ONLY_RX_SPK_ON)
		//  송신기 : 수신중인 경우 SPK ON
//		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
		RFM_Spk(1);
 802f170:	2001      	movs	r0, #1
 802f172:	f003 ffa5 	bl	80330c0 <RFM_Spk>
#endif

		//  Red LED On
		HAL_GPIO_WritePin ( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_SET ); //  RED LED
 802f176:	2201      	movs	r2, #1
 802f178:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802f17c:	480f      	ldr	r0, [pc, #60]	; (802f1bc <ProcPktCall+0x80>)
 802f17e:	f7f4 f9cd 	bl	802351c <HAL_GPIO_WritePin>

		//  통화 : 송신기 -> 송신기

		qBufPut( &g_qBufAudioRx, (uint8_t*)pAudioBuf, ( I2S_DMA_LOOP_SIZE * 2 ) );
 802f182:	223c      	movs	r2, #60	; 0x3c
 802f184:	68f9      	ldr	r1, [r7, #12]
 802f186:	480e      	ldr	r0, [pc, #56]	; (802f1c0 <ProcPktCall+0x84>)
 802f188:	f7ff f881 	bl	802e28e <qBufPut>
 802f18c:	e007      	b.n	802f19e <ProcPktCall+0x62>
	}
	else if ( GetDevID() == DevRF900M )
 802f18e:	f003 fa9f 	bl	80326d0 <GetDevID>
 802f192:	4603      	mov	r3, r0
 802f194:	2b01      	cmp	r3, #1
 802f196:	d102      	bne.n	802f19e <ProcPktCall+0x62>
	{
		//	수신기

		SetRFMMode( RFMModeRx );
 802f198:	2002      	movs	r0, #2
 802f19a:	f003 fad1 	bl	8032740 <SetRFMMode>
	}

	g_nStampRxPkt = HAL_GetTick();		//	방송/통화 Stamp
 802f19e:	f7f2 fce3 	bl	8021b68 <HAL_GetTick>
 802f1a2:	4603      	mov	r3, r0
 802f1a4:	461a      	mov	r2, r3
 802f1a6:	4b07      	ldr	r3, [pc, #28]	; (802f1c4 <ProcPktCall+0x88>)
 802f1a8:	601a      	str	r2, [r3, #0]
}
 802f1aa:	bf00      	nop
 802f1ac:	4618      	mov	r0, r3
 802f1ae:	3710      	adds	r7, #16
 802f1b0:	46bd      	mov	sp, r7
 802f1b2:	bd80      	pop	{r7, pc}
 802f1b4:	08041720 	.word	0x08041720
 802f1b8:	080397dc 	.word	0x080397dc
 802f1bc:	40020400 	.word	0x40020400
 802f1c0:	20001d88 	.word	0x20001d88
 802f1c4:	20002348 	.word	0x20002348

0802f1c8 <ProcPktLight>:
}

//========================================================================
int	ProcPktLight		( const RFMPkt *pRFPkt )
//========================================================================
{
 802f1c8:	b580      	push	{r7, lr}
 802f1ca:	b082      	sub	sp, #8
 802f1cc:	af00      	add	r7, sp, #0
 802f1ce:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802f1d0:	f001 fea6 	bl	8030f20 <GetDbg>
 802f1d4:	4603      	mov	r3, r0
 802f1d6:	2b00      	cmp	r3, #0
 802f1d8:	d005      	beq.n	802f1e6 <ProcPktLight+0x1e>
 802f1da:	f240 4273 	movw	r2, #1139	; 0x473
 802f1de:	4913      	ldr	r1, [pc, #76]	; (802f22c <ProcPktLight+0x64>)
 802f1e0:	4813      	ldr	r0, [pc, #76]	; (802f230 <ProcPktLight+0x68>)
 802f1e2:	f008 f857 	bl	8037294 <iprintf>

	if ( GetDevID() == DevRF900M && pRFPkt->hdr.nPktCmd == PktLight )
 802f1e6:	f003 fa73 	bl	80326d0 <GetDevID>
 802f1ea:	4603      	mov	r3, r0
 802f1ec:	2b01      	cmp	r3, #1
 802f1ee:	d118      	bne.n	802f222 <ProcPktLight+0x5a>
 802f1f0:	687b      	ldr	r3, [r7, #4]
 802f1f2:	78db      	ldrb	r3, [r3, #3]
 802f1f4:	2b04      	cmp	r3, #4
 802f1f6:	d114      	bne.n	802f222 <ProcPktLight+0x5a>
	{
		//  수신기 조명제어.
		if ( pRFPkt->dat.light.nOnOff == 0 )
 802f1f8:	687b      	ldr	r3, [r7, #4]
 802f1fa:	791b      	ldrb	r3, [r3, #4]
 802f1fc:	2b00      	cmp	r3, #0
 802f1fe:	d106      	bne.n	802f20e <ProcPktLight+0x46>
		{
			// 조명 Off 명령 수신시.
			HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_RESET );
 802f200:	2200      	movs	r2, #0
 802f202:	f44f 7100 	mov.w	r1, #512	; 0x200
 802f206:	480b      	ldr	r0, [pc, #44]	; (802f234 <ProcPktLight+0x6c>)
 802f208:	f7f4 f988 	bl	802351c <HAL_GPIO_WritePin>
 802f20c:	e009      	b.n	802f222 <ProcPktLight+0x5a>
		}
		else if ( pRFPkt->dat.light.nOnOff == 1 )
 802f20e:	687b      	ldr	r3, [r7, #4]
 802f210:	791b      	ldrb	r3, [r3, #4]
 802f212:	2b01      	cmp	r3, #1
 802f214:	d105      	bne.n	802f222 <ProcPktLight+0x5a>
		{
			// 조명 On 명령 수신시.
			HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
 802f216:	2201      	movs	r2, #1
 802f218:	f44f 7100 	mov.w	r1, #512	; 0x200
 802f21c:	4805      	ldr	r0, [pc, #20]	; (802f234 <ProcPktLight+0x6c>)
 802f21e:	f7f4 f97d 	bl	802351c <HAL_GPIO_WritePin>
		}
	}
}
 802f222:	bf00      	nop
 802f224:	4618      	mov	r0, r3
 802f226:	3708      	adds	r7, #8
 802f228:	46bd      	mov	sp, r7
 802f22a:	bd80      	pop	{r7, pc}
 802f22c:	0804172c 	.word	0x0804172c
 802f230:	080397dc 	.word	0x080397dc
 802f234:	40021000 	.word	0x40021000

0802f238 <ProcPktCmd>:


//========================================================================
int	ProcPktCmd			( const RFMPkt *pRFPkt )
//========================================================================
{
 802f238:	b580      	push	{r7, lr}
 802f23a:	b082      	sub	sp, #8
 802f23c:	af00      	add	r7, sp, #0
 802f23e:	6078      	str	r0, [r7, #4]
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802f240:	f001 fe6e 	bl	8030f20 <GetDbg>
 802f244:	4603      	mov	r3, r0
 802f246:	2b00      	cmp	r3, #0
 802f248:	d005      	beq.n	802f256 <ProcPktCmd+0x1e>
 802f24a:	f240 428a 	movw	r2, #1162	; 0x48a
 802f24e:	490f      	ldr	r1, [pc, #60]	; (802f28c <ProcPktCmd+0x54>)
 802f250:	480f      	ldr	r0, [pc, #60]	; (802f290 <ProcPktCmd+0x58>)
 802f252:	f008 f81f 	bl	8037294 <iprintf>

	//	RSSI Check
	printf( "%s(%d) - %s\n", __func__, __LINE__, pRFPkt->dat.cmd.sCmd );
 802f256:	687b      	ldr	r3, [r7, #4]
 802f258:	3308      	adds	r3, #8
 802f25a:	f240 428d 	movw	r2, #1165	; 0x48d
 802f25e:	490b      	ldr	r1, [pc, #44]	; (802f28c <ProcPktCmd+0x54>)
 802f260:	480c      	ldr	r0, [pc, #48]	; (802f294 <ProcPktCmd+0x5c>)
 802f262:	f008 f817 	bl	8037294 <iprintf>

	if ( g_nRSSI >= pRFPkt->dat.cmd.nRSSIOver )
 802f266:	687b      	ldr	r3, [r7, #4]
 802f268:	f993 3004 	ldrsb.w	r3, [r3, #4]
 802f26c:	461a      	mov	r2, r3
 802f26e:	4b0a      	ldr	r3, [pc, #40]	; (802f298 <ProcPktCmd+0x60>)
 802f270:	681b      	ldr	r3, [r3, #0]
 802f272:	429a      	cmp	r2, r3
 802f274:	dc04      	bgt.n	802f280 <ProcPktCmd+0x48>

			//	ToDo
		}

		//	RSSI값 확인 후 해당 범위 내에 있는 경우 명령 동작.
		ProcessCommand( pRFPkt->dat.cmd.sCmd );
 802f276:	687b      	ldr	r3, [r7, #4]
 802f278:	3308      	adds	r3, #8
 802f27a:	4618      	mov	r0, r3
 802f27c:	f001 f93a 	bl	80304f4 <ProcessCommand>
	}
}
 802f280:	bf00      	nop
 802f282:	4618      	mov	r0, r3
 802f284:	3708      	adds	r7, #8
 802f286:	46bd      	mov	sp, r7
 802f288:	bd80      	pop	{r7, pc}
 802f28a:	bf00      	nop
 802f28c:	0804173c 	.word	0x0804173c
 802f290:	080397dc 	.word	0x080397dc
 802f294:	08039860 	.word	0x08039860
 802f298:	2000234c 	.word	0x2000234c

0802f29c <ProcPktUpgr>:
//========================================================================

//========================================================================
int	ProcPktUpgr			( const RFMPkt *pRFPkt )
//========================================================================
{
 802f29c:	b580      	push	{r7, lr}
 802f29e:	b08c      	sub	sp, #48	; 0x30
 802f2a0:	af02      	add	r7, sp, #8
 802f2a2:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	Upgrade Flash Image
	//========================================================================

	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802f2a4:	f001 fe3c 	bl	8030f20 <GetDbg>
 802f2a8:	4603      	mov	r3, r0
 802f2aa:	2b00      	cmp	r3, #0
 802f2ac:	d005      	beq.n	802f2ba <ProcPktUpgr+0x1e>
 802f2ae:	f240 42b5 	movw	r2, #1205	; 0x4b5
 802f2b2:	497a      	ldr	r1, [pc, #488]	; (802f49c <ProcPktUpgr+0x200>)
 802f2b4:	487a      	ldr	r0, [pc, #488]	; (802f4a0 <ProcPktUpgr+0x204>)
 802f2b6:	f007 ffed 	bl	8037294 <iprintf>

	//========================================================================
	//	Data Flash영역에 Write
	const RFMPktUpgr	*pUpgr = &pRFPkt->dat.upgr;
 802f2ba:	687b      	ldr	r3, [r7, #4]
 802f2bc:	3304      	adds	r3, #4
 802f2be:	61fb      	str	r3, [r7, #28]

	if ( pUpgr->baseAddr < 0x08080000 || 0x080FFFFF < pUpgr->baseAddr )
 802f2c0:	69fb      	ldr	r3, [r7, #28]
 802f2c2:	681b      	ldr	r3, [r3, #0]
 802f2c4:	4a77      	ldr	r2, [pc, #476]	; (802f4a4 <ProcPktUpgr+0x208>)
 802f2c6:	4293      	cmp	r3, r2
 802f2c8:	d904      	bls.n	802f2d4 <ProcPktUpgr+0x38>
 802f2ca:	69fb      	ldr	r3, [r7, #28]
 802f2cc:	681b      	ldr	r3, [r3, #0]
 802f2ce:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 802f2d2:	d309      	bcc.n	802f2e8 <ProcPktUpgr+0x4c>
	{
		printf("%s(%d) - Out Of Range - baseAddr(0x%08X)\n", __func__, __LINE__, pUpgr->baseAddr );
 802f2d4:	69fb      	ldr	r3, [r7, #28]
 802f2d6:	681b      	ldr	r3, [r3, #0]
 802f2d8:	f240 42bd 	movw	r2, #1213	; 0x4bd
 802f2dc:	496f      	ldr	r1, [pc, #444]	; (802f49c <ProcPktUpgr+0x200>)
 802f2de:	4872      	ldr	r0, [pc, #456]	; (802f4a8 <ProcPktUpgr+0x20c>)
 802f2e0:	f007 ffd8 	bl	8037294 <iprintf>
		return 0;
 802f2e4:	2300      	movs	r3, #0
 802f2e6:	e18d      	b.n	802f604 <ProcPktUpgr+0x368>
//	memcpy( pUpgr->data, sBuf, nSize );

	//========================================================================
	static int	s_rxPkt;

	if ( pUpgr->idxPkt == 0 )
 802f2e8:	69fb      	ldr	r3, [r7, #28]
 802f2ea:	88db      	ldrh	r3, [r3, #6]
 802f2ec:	b29b      	uxth	r3, r3
 802f2ee:	2b00      	cmp	r3, #0
 802f2f0:	d133      	bne.n	802f35a <ProcPktUpgr+0xbe>
	{
		//	Start Uprade
		printf("%s(%d) - Start Upgrade\n", __func__, __LINE__ );
 802f2f2:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
 802f2f6:	4969      	ldr	r1, [pc, #420]	; (802f49c <ProcPktUpgr+0x200>)
 802f2f8:	486c      	ldr	r0, [pc, #432]	; (802f4ac <ProcPktUpgr+0x210>)
 802f2fa:	f007 ffcb 	bl	8037294 <iprintf>

		if( pUpgr->bFlag & PktUpgrFlagRetry )
 802f2fe:	69fb      	ldr	r3, [r7, #28]
 802f300:	7a5b      	ldrb	r3, [r3, #9]
 802f302:	f003 0301 	and.w	r3, r3, #1
 802f306:	2b00      	cmp	r3, #0
 802f308:	d007      	beq.n	802f31a <ProcPktUpgr+0x7e>
		{
			//	No Erase
			printf( "[%08d] Flash Erase - Skip ( Retry - Upgrade )\n", HAL_GetTick() );
 802f30a:	f7f2 fc2d 	bl	8021b68 <HAL_GetTick>
 802f30e:	4603      	mov	r3, r0
 802f310:	4619      	mov	r1, r3
 802f312:	4867      	ldr	r0, [pc, #412]	; (802f4b0 <ProcPktUpgr+0x214>)
 802f314:	f007 ffbe 	bl	8037294 <iprintf>
 802f318:	e01c      	b.n	802f354 <ProcPktUpgr+0xb8>
		else
		{
			//========================================================================
			//	Flash Erase
	//		 __HAL_RCC_DBGMCU_CLK_ENABLE();
			 __HAL_DBGMCU_FREEZE_IWDG();
 802f31a:	4b66      	ldr	r3, [pc, #408]	; (802f4b4 <ProcPktUpgr+0x218>)
 802f31c:	689b      	ldr	r3, [r3, #8]
 802f31e:	4a65      	ldr	r2, [pc, #404]	; (802f4b4 <ProcPktUpgr+0x218>)
 802f320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802f324:	6093      	str	r3, [r2, #8]
	//		MX_IWDG_Disable();		//	Disable Watchdog
			printf( "[%08d] Flash Erase - Start\n", HAL_GetTick() );
 802f326:	f7f2 fc1f 	bl	8021b68 <HAL_GetTick>
 802f32a:	4603      	mov	r3, r0
 802f32c:	4619      	mov	r1, r3
 802f32e:	4862      	ldr	r0, [pc, #392]	; (802f4b8 <ProcPktUpgr+0x21c>)
 802f330:	f007 ffb0 	bl	8037294 <iprintf>
	//        FLASH_If_Erase( ADDR_FLASH_IMGAPP );
			FLASH_If_Erase( ADDR_FLASH_IMGBOOT );		//	0x08080000
 802f334:	4861      	ldr	r0, [pc, #388]	; (802f4bc <ProcPktUpgr+0x220>)
 802f336:	f002 f815 	bl	8031364 <FLASH_If_Erase>
			printf( "[%08d] Flash Erase - End\n", HAL_GetTick() );
 802f33a:	f7f2 fc15 	bl	8021b68 <HAL_GetTick>
 802f33e:	4603      	mov	r3, r0
 802f340:	4619      	mov	r1, r3
 802f342:	485f      	ldr	r0, [pc, #380]	; (802f4c0 <ProcPktUpgr+0x224>)
 802f344:	f007 ffa6 	bl	8037294 <iprintf>
	    	//========================================================================

			memset( s_bUpgrDataValid, 0, sizeof(s_bUpgrDataValid) );
 802f348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802f34c:	2100      	movs	r1, #0
 802f34e:	485d      	ldr	r0, [pc, #372]	; (802f4c4 <ProcPktUpgr+0x228>)
 802f350:	f007 feb8 	bl	80370c4 <memset>
		}

		s_rxPkt = 0;
 802f354:	4b5c      	ldr	r3, [pc, #368]	; (802f4c8 <ProcPktUpgr+0x22c>)
 802f356:	2200      	movs	r2, #0
 802f358:	601a      	str	r2, [r3, #0]
	}

	s_rxPkt++;
 802f35a:	4b5b      	ldr	r3, [pc, #364]	; (802f4c8 <ProcPktUpgr+0x22c>)
 802f35c:	681b      	ldr	r3, [r3, #0]
 802f35e:	3301      	adds	r3, #1
 802f360:	4a59      	ldr	r2, [pc, #356]	; (802f4c8 <ProcPktUpgr+0x22c>)
 802f362:	6013      	str	r3, [r2, #0]

	//========================================================================
	//	Write Upgrade Image Data

	if ( FLASH_If_Write( pUpgr->baseAddr + (pUpgr->idxPkt * PktUpgrDataSize),
 802f364:	69fb      	ldr	r3, [r7, #28]
 802f366:	681a      	ldr	r2, [r3, #0]
 802f368:	69fb      	ldr	r3, [r7, #28]
 802f36a:	88db      	ldrh	r3, [r3, #6]
 802f36c:	b29b      	uxth	r3, r3
 802f36e:	4619      	mov	r1, r3
 802f370:	460b      	mov	r3, r1
 802f372:	005b      	lsls	r3, r3, #1
 802f374:	440b      	add	r3, r1
 802f376:	011b      	lsls	r3, r3, #4
 802f378:	18d0      	adds	r0, r2, r3
						(uint32_t *)pUpgr->data,
 802f37a:	69fb      	ldr	r3, [r7, #28]
 802f37c:	f103 010a 	add.w	r1, r3, #10
						pUpgr->nSize / 4 ) == FLASHIF_OK )
 802f380:	69fb      	ldr	r3, [r7, #28]
 802f382:	7a1b      	ldrb	r3, [r3, #8]
	if ( FLASH_If_Write( pUpgr->baseAddr + (pUpgr->idxPkt * PktUpgrDataSize),
 802f384:	089b      	lsrs	r3, r3, #2
 802f386:	b2db      	uxtb	r3, r3
 802f388:	461a      	mov	r2, r3
 802f38a:	f002 f80f 	bl	80313ac <FLASH_If_Write>
 802f38e:	4603      	mov	r3, r0
 802f390:	2b00      	cmp	r3, #0
 802f392:	d11d      	bne.n	802f3d0 <ProcPktUpgr+0x134>
	{
		//	Valid Check Data
		SET_BIT( s_bUpgrDataValid[pUpgr->idxPkt/8], (0x1 << (pUpgr->idxPkt % 8)) );
 802f394:	69fb      	ldr	r3, [r7, #28]
 802f396:	88db      	ldrh	r3, [r3, #6]
 802f398:	b29b      	uxth	r3, r3
 802f39a:	08db      	lsrs	r3, r3, #3
 802f39c:	b29b      	uxth	r3, r3
 802f39e:	461a      	mov	r2, r3
 802f3a0:	4b48      	ldr	r3, [pc, #288]	; (802f4c4 <ProcPktUpgr+0x228>)
 802f3a2:	5c9b      	ldrb	r3, [r3, r2]
 802f3a4:	b25a      	sxtb	r2, r3
 802f3a6:	69fb      	ldr	r3, [r7, #28]
 802f3a8:	88db      	ldrh	r3, [r3, #6]
 802f3aa:	b29b      	uxth	r3, r3
 802f3ac:	f003 0307 	and.w	r3, r3, #7
 802f3b0:	2101      	movs	r1, #1
 802f3b2:	fa01 f303 	lsl.w	r3, r1, r3
 802f3b6:	b25b      	sxtb	r3, r3
 802f3b8:	4313      	orrs	r3, r2
 802f3ba:	b259      	sxtb	r1, r3
 802f3bc:	69fb      	ldr	r3, [r7, #28]
 802f3be:	88db      	ldrh	r3, [r3, #6]
 802f3c0:	b29b      	uxth	r3, r3
 802f3c2:	08db      	lsrs	r3, r3, #3
 802f3c4:	b29b      	uxth	r3, r3
 802f3c6:	461a      	mov	r2, r3
 802f3c8:	b2c9      	uxtb	r1, r1
 802f3ca:	4b3e      	ldr	r3, [pc, #248]	; (802f4c4 <ProcPktUpgr+0x228>)
 802f3cc:	5499      	strb	r1, [r3, r2]
 802f3ce:	e027      	b.n	802f420 <ProcPktUpgr+0x184>
	}
	else /* An error occurred while writing to Flash memory */
	{
		/* End session */
		printf("%s(%d) - Error idx(%d)\n", __func__, __LINE__, pUpgr->idxPkt );
 802f3d0:	69fb      	ldr	r3, [r7, #28]
 802f3d2:	88db      	ldrh	r3, [r3, #6]
 802f3d4:	b29b      	uxth	r3, r3
 802f3d6:	f240 42f9 	movw	r2, #1273	; 0x4f9
 802f3da:	4930      	ldr	r1, [pc, #192]	; (802f49c <ProcPktUpgr+0x200>)
 802f3dc:	483b      	ldr	r0, [pc, #236]	; (802f4cc <ProcPktUpgr+0x230>)
 802f3de:	f007 ff59 	bl	8037294 <iprintf>
		CLEAR_BIT( s_bUpgrDataValid[pUpgr->idxPkt/8], (0x1 << (pUpgr->idxPkt % 8)) );	//	Clear
 802f3e2:	69fb      	ldr	r3, [r7, #28]
 802f3e4:	88db      	ldrh	r3, [r3, #6]
 802f3e6:	b29b      	uxth	r3, r3
 802f3e8:	08db      	lsrs	r3, r3, #3
 802f3ea:	b29b      	uxth	r3, r3
 802f3ec:	461a      	mov	r2, r3
 802f3ee:	4b35      	ldr	r3, [pc, #212]	; (802f4c4 <ProcPktUpgr+0x228>)
 802f3f0:	5c9b      	ldrb	r3, [r3, r2]
 802f3f2:	b25a      	sxtb	r2, r3
 802f3f4:	69fb      	ldr	r3, [r7, #28]
 802f3f6:	88db      	ldrh	r3, [r3, #6]
 802f3f8:	b29b      	uxth	r3, r3
 802f3fa:	f003 0307 	and.w	r3, r3, #7
 802f3fe:	2101      	movs	r1, #1
 802f400:	fa01 f303 	lsl.w	r3, r1, r3
 802f404:	b25b      	sxtb	r3, r3
 802f406:	43db      	mvns	r3, r3
 802f408:	b25b      	sxtb	r3, r3
 802f40a:	4013      	ands	r3, r2
 802f40c:	b259      	sxtb	r1, r3
 802f40e:	69fb      	ldr	r3, [r7, #28]
 802f410:	88db      	ldrh	r3, [r3, #6]
 802f412:	b29b      	uxth	r3, r3
 802f414:	08db      	lsrs	r3, r3, #3
 802f416:	b29b      	uxth	r3, r3
 802f418:	461a      	mov	r2, r3
 802f41a:	b2c9      	uxtb	r1, r1
 802f41c:	4b29      	ldr	r3, [pc, #164]	; (802f4c4 <ProcPktUpgr+0x228>)
 802f41e:	5499      	strb	r1, [r3, r2]
	}

	g_nStampRxPkt = HAL_GetTick();		//	Rx Pkt Stamp
 802f420:	f7f2 fba2 	bl	8021b68 <HAL_GetTick>
 802f424:	4603      	mov	r3, r0
 802f426:	461a      	mov	r2, r3
 802f428:	4b29      	ldr	r3, [pc, #164]	; (802f4d0 <ProcPktUpgr+0x234>)
 802f42a:	601a      	str	r2, [r3, #0]
	//========================================================================

	//========================================================================
	if ( pUpgr->idxPkt == (pUpgr->totPkt - 1) )
 802f42c:	69fb      	ldr	r3, [r7, #28]
 802f42e:	88db      	ldrh	r3, [r3, #6]
 802f430:	b29b      	uxth	r3, r3
 802f432:	461a      	mov	r2, r3
 802f434:	69fb      	ldr	r3, [r7, #28]
 802f436:	889b      	ldrh	r3, [r3, #4]
 802f438:	b29b      	uxth	r3, r3
 802f43a:	3b01      	subs	r3, #1
 802f43c:	429a      	cmp	r2, r3
 802f43e:	f040 80e1 	bne.w	802f604 <ProcPktUpgr+0x368>
	{
		//	End Upgrade
//		s_rxPkt++;

		printf("%s(%d) - End Upgrade ( rxPkt : %d / totPkt : %d )\n", __func__, __LINE__,
 802f442:	4b21      	ldr	r3, [pc, #132]	; (802f4c8 <ProcPktUpgr+0x22c>)
 802f444:	681a      	ldr	r2, [r3, #0]
					s_rxPkt, pUpgr->totPkt );
 802f446:	69fb      	ldr	r3, [r7, #28]
 802f448:	889b      	ldrh	r3, [r3, #4]
 802f44a:	b29b      	uxth	r3, r3
		printf("%s(%d) - End Upgrade ( rxPkt : %d / totPkt : %d )\n", __func__, __LINE__,
 802f44c:	9300      	str	r3, [sp, #0]
 802f44e:	4613      	mov	r3, r2
 802f450:	f240 5206 	movw	r2, #1286	; 0x506
 802f454:	4911      	ldr	r1, [pc, #68]	; (802f49c <ProcPktUpgr+0x200>)
 802f456:	481f      	ldr	r0, [pc, #124]	; (802f4d4 <ProcPktUpgr+0x238>)
 802f458:	f007 ff1c 	bl	8037294 <iprintf>

		int result = UpgrStatSuccess;
 802f45c:	2301      	movs	r3, #1
 802f45e:	627b      	str	r3, [r7, #36]	; 0x24
		for( int i = 0; i < pUpgr->totPkt; i++ )
 802f460:	2300      	movs	r3, #0
 802f462:	623b      	str	r3, [r7, #32]
 802f464:	e03b      	b.n	802f4de <ProcPktUpgr+0x242>
		{
			if( READ_BIT( s_bUpgrDataValid[i / 8], (0x1 << (i % 8)) ) == 0 )
 802f466:	6a3b      	ldr	r3, [r7, #32]
 802f468:	2b00      	cmp	r3, #0
 802f46a:	da00      	bge.n	802f46e <ProcPktUpgr+0x1d2>
 802f46c:	3307      	adds	r3, #7
 802f46e:	10db      	asrs	r3, r3, #3
 802f470:	461a      	mov	r2, r3
 802f472:	4b14      	ldr	r3, [pc, #80]	; (802f4c4 <ProcPktUpgr+0x228>)
 802f474:	5c9b      	ldrb	r3, [r3, r2]
 802f476:	4619      	mov	r1, r3
 802f478:	6a3b      	ldr	r3, [r7, #32]
 802f47a:	425a      	negs	r2, r3
 802f47c:	f003 0307 	and.w	r3, r3, #7
 802f480:	f002 0207 	and.w	r2, r2, #7
 802f484:	bf58      	it	pl
 802f486:	4253      	negpl	r3, r2
 802f488:	fa41 f303 	asr.w	r3, r1, r3
 802f48c:	f003 0301 	and.w	r3, r3, #1
 802f490:	2b00      	cmp	r3, #0
 802f492:	d121      	bne.n	802f4d8 <ProcPktUpgr+0x23c>
			{
				result = UpgrStatFailed;
 802f494:	2300      	movs	r3, #0
 802f496:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 802f498:	e028      	b.n	802f4ec <ProcPktUpgr+0x250>
 802f49a:	bf00      	nop
 802f49c:	08041748 	.word	0x08041748
 802f4a0:	080397dc 	.word	0x080397dc
 802f4a4:	0807ffff 	.word	0x0807ffff
 802f4a8:	08039870 	.word	0x08039870
 802f4ac:	0803989c 	.word	0x0803989c
 802f4b0:	080398b4 	.word	0x080398b4
 802f4b4:	e0042000 	.word	0xe0042000
 802f4b8:	080398e4 	.word	0x080398e4
 802f4bc:	08080000 	.word	0x08080000
 802f4c0:	08039900 	.word	0x08039900
 802f4c4:	200013ac 	.word	0x200013ac
 802f4c8:	200017ac 	.word	0x200017ac
 802f4cc:	0803991c 	.word	0x0803991c
 802f4d0:	20002348 	.word	0x20002348
 802f4d4:	08039934 	.word	0x08039934
		for( int i = 0; i < pUpgr->totPkt; i++ )
 802f4d8:	6a3b      	ldr	r3, [r7, #32]
 802f4da:	3301      	adds	r3, #1
 802f4dc:	623b      	str	r3, [r7, #32]
 802f4de:	69fb      	ldr	r3, [r7, #28]
 802f4e0:	889b      	ldrh	r3, [r3, #4]
 802f4e2:	b29b      	uxth	r3, r3
 802f4e4:	461a      	mov	r2, r3
 802f4e6:	6a3b      	ldr	r3, [r7, #32]
 802f4e8:	4293      	cmp	r3, r2
 802f4ea:	dbbc      	blt.n	802f466 <ProcPktUpgr+0x1ca>
			}
		}

		//========================================================================
		if ( result == UpgrStatSuccess )//( s_rxPkt == pUpgr->totPkt )
 802f4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f4ee:	2b01      	cmp	r3, #1
 802f4f0:	d16c      	bne.n	802f5cc <ProcPktUpgr+0x330>
		{
			//	Upgrade Success

			char buf[10];
			int filesize = pUpgr->totPkt * PktUpgrDataSize;
 802f4f2:	69fb      	ldr	r3, [r7, #28]
 802f4f4:	889b      	ldrh	r3, [r3, #4]
 802f4f6:	b29b      	uxth	r3, r3
 802f4f8:	461a      	mov	r2, r3
 802f4fa:	4613      	mov	r3, r2
 802f4fc:	005b      	lsls	r3, r3, #1
 802f4fe:	4413      	add	r3, r2
 802f500:	011b      	lsls	r3, r3, #4
 802f502:	61bb      	str	r3, [r7, #24]

			printf("%s(%d) - Upgrade Success ( Size : %d )\n", __func__, __LINE__, filesize );
 802f504:	69bb      	ldr	r3, [r7, #24]
 802f506:	f240 521b 	movw	r2, #1307	; 0x51b
 802f50a:	4940      	ldr	r1, [pc, #256]	; (802f60c <ProcPktUpgr+0x370>)
 802f50c:	4840      	ldr	r0, [pc, #256]	; (802f610 <ProcPktUpgr+0x374>)
 802f50e:	f007 fec1 	bl	8037294 <iprintf>

			memset( buf, 0, sizeof( buf ) );
 802f512:	f107 030c 	add.w	r3, r7, #12
 802f516:	220a      	movs	r2, #10
 802f518:	2100      	movs	r1, #0
 802f51a:	4618      	mov	r0, r3
 802f51c:	f007 fdd2 	bl	80370c4 <memset>

			buf[0] = 0xaa;
 802f520:	23aa      	movs	r3, #170	; 0xaa
 802f522:	733b      	strb	r3, [r7, #12]
			buf[1] = 0x55;
 802f524:	2355      	movs	r3, #85	; 0x55
 802f526:	737b      	strb	r3, [r7, #13]
			buf[2] = ( filesize >> 16 ) & 0xFF;
 802f528:	69bb      	ldr	r3, [r7, #24]
 802f52a:	141b      	asrs	r3, r3, #16
 802f52c:	b2db      	uxtb	r3, r3
 802f52e:	73bb      	strb	r3, [r7, #14]
			buf[3] = ( filesize >> 8 ) & 0xFF;
 802f530:	69bb      	ldr	r3, [r7, #24]
 802f532:	121b      	asrs	r3, r3, #8
 802f534:	b2db      	uxtb	r3, r3
 802f536:	73fb      	strb	r3, [r7, #15]
			buf[4] = ( filesize >> 0 ) & 0xFF;
 802f538:	69bb      	ldr	r3, [r7, #24]
 802f53a:	b2db      	uxtb	r3, r3
 802f53c:	743b      	strb	r3, [r7, #16]

		    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPUpgrMGN1, (uint8_t *)buf, 5 );
 802f53e:	f107 030c 	add.w	r3, r7, #12
 802f542:	2205      	movs	r2, #5
 802f544:	9200      	str	r2, [sp, #0]
 802f546:	2220      	movs	r2, #32
 802f548:	21a0      	movs	r1, #160	; 0xa0
 802f54a:	4832      	ldr	r0, [pc, #200]	; (802f614 <ProcPktUpgr+0x378>)
 802f54c:	f001 fdb8 	bl	80310c0 <M24_HAL_WriteBytes>

			memset( buf, 0, sizeof( buf ) );
 802f550:	f107 030c 	add.w	r3, r7, #12
 802f554:	220a      	movs	r2, #10
 802f556:	2100      	movs	r1, #0
 802f558:	4618      	mov	r0, r3
 802f55a:	f007 fdb3 	bl	80370c4 <memset>

		    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPUpgrMGN1, (uint8_t *)buf, 5 );
 802f55e:	f107 030c 	add.w	r3, r7, #12
 802f562:	2205      	movs	r2, #5
 802f564:	9200      	str	r2, [sp, #0]
 802f566:	2220      	movs	r2, #32
 802f568:	21a0      	movs	r1, #160	; 0xa0
 802f56a:	482a      	ldr	r0, [pc, #168]	; (802f614 <ProcPktUpgr+0x378>)
 802f56c:	f001 fdca 	bl	8031104 <M24_HAL_ReadBytes>

		    filesize = ( buf[2] << 16 ) | ( buf[3] << 8 ) | ( buf[4] );
 802f570:	7bbb      	ldrb	r3, [r7, #14]
 802f572:	041a      	lsls	r2, r3, #16
 802f574:	7bfb      	ldrb	r3, [r7, #15]
 802f576:	021b      	lsls	r3, r3, #8
 802f578:	4313      	orrs	r3, r2
 802f57a:	7c3a      	ldrb	r2, [r7, #16]
 802f57c:	4313      	orrs	r3, r2
 802f57e:	61bb      	str	r3, [r7, #24]

			printf( "%s(%d) - EEPROM [0,1] : 0x%02X 0x%02X / ( bin size : %d )\n", __func__, __LINE__, buf[0], buf[1], filesize );
 802f580:	7b3b      	ldrb	r3, [r7, #12]
 802f582:	4619      	mov	r1, r3
 802f584:	7b7b      	ldrb	r3, [r7, #13]
 802f586:	461a      	mov	r2, r3
 802f588:	69bb      	ldr	r3, [r7, #24]
 802f58a:	9301      	str	r3, [sp, #4]
 802f58c:	9200      	str	r2, [sp, #0]
 802f58e:	460b      	mov	r3, r1
 802f590:	f240 522d 	movw	r2, #1325	; 0x52d
 802f594:	491d      	ldr	r1, [pc, #116]	; (802f60c <ProcPktUpgr+0x370>)
 802f596:	4820      	ldr	r0, [pc, #128]	; (802f618 <ProcPktUpgr+0x37c>)
 802f598:	f007 fe7c 	bl	8037294 <iprintf>

			HAL_Delay( 2000 );	//	Upgrade 결과전송 전 Delay
 802f59c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 802f5a0:	f7f2 faee 	bl	8021b80 <HAL_Delay>

			//===========================================================================
			//	Send Upgrade Result
			SendUpgrStat( UpgrStatSuccess );	//	Upgrade 결과전송.
 802f5a4:	2001      	movs	r0, #1
 802f5a6:	f7ff fb63 	bl	802ec70 <SendUpgrStat>
			HAL_Delay( 100 );	//	Upgrade 결과전송 전 Delay
 802f5aa:	2064      	movs	r0, #100	; 0x64
 802f5ac:	f7f2 fae8 	bl	8021b80 <HAL_Delay>
			SendUpgrStat( UpgrStatSuccess );	//	Upgrade 결과전송.
 802f5b0:	2001      	movs	r0, #1
 802f5b2:	f7ff fb5d 	bl	802ec70 <SendUpgrStat>
			HAL_Delay( 100 );	//	Upgrade 결과전송 전 Delay
 802f5b6:	2064      	movs	r0, #100	; 0x64
 802f5b8:	f7f2 fae2 	bl	8021b80 <HAL_Delay>
			SendUpgrStat( UpgrStatSuccess );	//	Upgrade 결과전송.
 802f5bc:	2001      	movs	r0, #1
 802f5be:	f7ff fb57 	bl	802ec70 <SendUpgrStat>

			//===========================================================================
			//	Reset
			cmd_reset(0, 0);
 802f5c2:	2100      	movs	r1, #0
 802f5c4:	2000      	movs	r0, #0
 802f5c6:	f001 faa7 	bl	8030b18 <cmd_reset>
 802f5ca:	e018      	b.n	802f5fe <ProcPktUpgr+0x362>
			//===========================================================================
		}
		else
		{
			HAL_Delay( 2000 );	//	Upgrade 결과전송 전 Delay
 802f5cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 802f5d0:	f7f2 fad6 	bl	8021b80 <HAL_Delay>

			//===========================================================================
			//	Send Upgrade Result
			SendUpgrStat( UpgrStatFailed );		//	Upgrade 결과전송.
 802f5d4:	2000      	movs	r0, #0
 802f5d6:	f7ff fb4b 	bl	802ec70 <SendUpgrStat>
			HAL_Delay( 100 );	//	Upgrade 결과전송 전 Delay
 802f5da:	2064      	movs	r0, #100	; 0x64
 802f5dc:	f7f2 fad0 	bl	8021b80 <HAL_Delay>
			SendUpgrStat( UpgrStatFailed );	//	Upgrade 결과전송.
 802f5e0:	2000      	movs	r0, #0
 802f5e2:	f7ff fb45 	bl	802ec70 <SendUpgrStat>
			HAL_Delay( 100 );	//	Upgrade 결과전송 전 Delay
 802f5e6:	2064      	movs	r0, #100	; 0x64
 802f5e8:	f7f2 faca 	bl	8021b80 <HAL_Delay>
			SendUpgrStat( UpgrStatFailed );	//	Upgrade 결과전송.
 802f5ec:	2000      	movs	r0, #0
 802f5ee:	f7ff fb3f 	bl	802ec70 <SendUpgrStat>

			//	Upgrade Failed
			printf("%s(%d) - Upgrade Failed\n", __func__, __LINE__ );
 802f5f2:	f240 524b 	movw	r2, #1355	; 0x54b
 802f5f6:	4905      	ldr	r1, [pc, #20]	; (802f60c <ProcPktUpgr+0x370>)
 802f5f8:	4808      	ldr	r0, [pc, #32]	; (802f61c <ProcPktUpgr+0x380>)
 802f5fa:	f007 fe4b 	bl	8037294 <iprintf>
		}
		//========================================================================

		//========================================================================
		SetRFMMode( RFMModeNormal );	//	Normal 모드로 설정.
 802f5fe:	2000      	movs	r0, #0
 802f600:	f003 f89e 	bl	8032740 <SetRFMMode>
		//========================================================================
	}
}
 802f604:	4618      	mov	r0, r3
 802f606:	3728      	adds	r7, #40	; 0x28
 802f608:	46bd      	mov	sp, r7
 802f60a:	bd80      	pop	{r7, pc}
 802f60c:	08041748 	.word	0x08041748
 802f610:	08039968 	.word	0x08039968
 802f614:	20000e38 	.word	0x20000e38
 802f618:	08039990 	.word	0x08039990
 802f61c:	080399cc 	.word	0x080399cc

0802f620 <ProcPktUpgrStat>:


//========================================================================
int	ProcPktUpgrStat			( const RFMPkt *pRFPkt )
//========================================================================
{
 802f620:	b580      	push	{r7, lr}
 802f622:	b090      	sub	sp, #64	; 0x40
 802f624:	af00      	add	r7, sp, #0
 802f626:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	Upgrade Status
	//========================================================================

	//	Upgrade 결과 수신후 수신기 LCD창에 표시.
	if ( GetDbg() )		printf( "%s(%d)\n", __func__, __LINE__ );
 802f628:	f001 fc7a 	bl	8030f20 <GetDbg>
 802f62c:	4603      	mov	r3, r0
 802f62e:	2b00      	cmp	r3, #0
 802f630:	d005      	beq.n	802f63e <ProcPktUpgrStat+0x1e>
 802f632:	f240 525f 	movw	r2, #1375	; 0x55f
 802f636:	491f      	ldr	r1, [pc, #124]	; (802f6b4 <ProcPktUpgrStat+0x94>)
 802f638:	481f      	ldr	r0, [pc, #124]	; (802f6b8 <ProcPktUpgrStat+0x98>)
 802f63a:	f007 fe2b 	bl	8037294 <iprintf>

	char sBuf[50];

	//========================================================================
	//	Data Flash영역에 Write
	RFMPktUpgrStat	*pUpgrStat = (RFMPktUpgrStat *)&pRFPkt->dat.upgrStat;
 802f63e:	687b      	ldr	r3, [r7, #4]
 802f640:	3304      	adds	r3, #4
 802f642:	63fb      	str	r3, [r7, #60]	; 0x3c

	printf( "%s(%d) - %d\n", __func__, __LINE__, pUpgrStat->nResult );
 802f644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f646:	781b      	ldrb	r3, [r3, #0]
 802f648:	f240 5267 	movw	r2, #1383	; 0x567
 802f64c:	4919      	ldr	r1, [pc, #100]	; (802f6b4 <ProcPktUpgrStat+0x94>)
 802f64e:	481b      	ldr	r0, [pc, #108]	; (802f6bc <ProcPktUpgrStat+0x9c>)
 802f650:	f007 fe20 	bl	8037294 <iprintf>

	if ( pUpgrStat->nResult == UpgrStatSuccess )
 802f654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f656:	781b      	ldrb	r3, [r3, #0]
 802f658:	2b01      	cmp	r3, #1
 802f65a:	d111      	bne.n	802f680 <ProcPktUpgrStat+0x60>
	{
		//	송신기 : Upgr Success

		sprintf(sBuf, "Success(%d/%d)", pUpgrStat->nTrainSet, pUpgrStat->nCarNo);
 802f65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f65e:	791b      	ldrb	r3, [r3, #4]
 802f660:	461a      	mov	r2, r3
 802f662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f664:	795b      	ldrb	r3, [r3, #5]
 802f666:	f107 0008 	add.w	r0, r7, #8
 802f66a:	4915      	ldr	r1, [pc, #84]	; (802f6c0 <ProcPktUpgrStat+0xa0>)
 802f66c:	f008 f844 	bl	80376f8 <siprintf>
		LCDPrintfXY( 0, 13, sBuf );
 802f670:	f107 0308 	add.w	r3, r7, #8
 802f674:	461a      	mov	r2, r3
 802f676:	210d      	movs	r1, #13
 802f678:	2000      	movs	r0, #0
 802f67a:	f7fd f9b3 	bl	802c9e4 <LCDPrintfXY>
 802f67e:	e014      	b.n	802f6aa <ProcPktUpgrStat+0x8a>

//		HAL_Delay(2000);
	}
	else if( pUpgrStat->nResult == UpgrStatFailed )
 802f680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f682:	781b      	ldrb	r3, [r3, #0]
 802f684:	2b00      	cmp	r3, #0
 802f686:	d110      	bne.n	802f6aa <ProcPktUpgrStat+0x8a>
	{
		//	송신기 : Upgr Failed

		sprintf(sBuf, "Failed(%d/%d)", pUpgrStat->nTrainSet, pUpgrStat->nCarNo);
 802f688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f68a:	791b      	ldrb	r3, [r3, #4]
 802f68c:	461a      	mov	r2, r3
 802f68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802f690:	795b      	ldrb	r3, [r3, #5]
 802f692:	f107 0008 	add.w	r0, r7, #8
 802f696:	490b      	ldr	r1, [pc, #44]	; (802f6c4 <ProcPktUpgrStat+0xa4>)
 802f698:	f008 f82e 	bl	80376f8 <siprintf>
		LCDPrintfXY( 0, 13, sBuf );
 802f69c:	f107 0308 	add.w	r3, r7, #8
 802f6a0:	461a      	mov	r2, r3
 802f6a2:	210d      	movs	r1, #13
 802f6a4:	2000      	movs	r0, #0
 802f6a6:	f7fd f99d 	bl	802c9e4 <LCDPrintfXY>

//		HAL_Delay(2000);
	}

	return 1;
 802f6aa:	2301      	movs	r3, #1
}
 802f6ac:	4618      	mov	r0, r3
 802f6ae:	3740      	adds	r7, #64	; 0x40
 802f6b0:	46bd      	mov	sp, r7
 802f6b2:	bd80      	pop	{r7, pc}
 802f6b4:	08041754 	.word	0x08041754
 802f6b8:	080397dc 	.word	0x080397dc
 802f6bc:	0803981c 	.word	0x0803981c
 802f6c0:	080399e8 	.word	0x080399e8
 802f6c4:	080399f8 	.word	0x080399f8

0802f6c8 <Adc_Power>:
// Function

//========================================================================
void Adc_Power( void )
//========================================================================
{
 802f6c8:	b580      	push	{r7, lr}
 802f6ca:	b082      	sub	sp, #8
 802f6cc:	af00      	add	r7, sp, #0
    int adc_pwr;

    static int  bOldIsCharge = 0;        //  충전중.
    int         bIsCharge;       //  충전중.

    HAL_ADC_Start( &hadc1 );
 802f6ce:	484f      	ldr	r0, [pc, #316]	; (802f80c <Adc_Power+0x144>)
 802f6d0:	f7f2 fabe 	bl	8021c50 <HAL_ADC_Start>
    HAL_ADC_PollForConversion( &hadc1, 100 );
 802f6d4:	2164      	movs	r1, #100	; 0x64
 802f6d6:	484d      	ldr	r0, [pc, #308]	; (802f80c <Adc_Power+0x144>)
 802f6d8:	f7f2 fb80 	bl	8021ddc <HAL_ADC_PollForConversion>

    adc_pwr = HAL_ADC_GetValue( &hadc1 );
 802f6dc:	484b      	ldr	r0, [pc, #300]	; (802f80c <Adc_Power+0x144>)
 802f6de:	f7f2 fc01 	bl	8021ee4 <HAL_ADC_GetValue>
 802f6e2:	4603      	mov	r3, r0
 802f6e4:	607b      	str	r3, [r7, #4]

    //  충전중인지 검사.
    bIsCharge = ( HAL_GPIO_ReadPin( BAT_CHRG_GPIO_Port, BAT_CHRG_Pin ) ) ? 0 : 1;
 802f6e6:	2101      	movs	r1, #1
 802f6e8:	4849      	ldr	r0, [pc, #292]	; (802f810 <Adc_Power+0x148>)
 802f6ea:	f7f3 feff 	bl	80234ec <HAL_GPIO_ReadPin>
 802f6ee:	4603      	mov	r3, r0
 802f6f0:	2b00      	cmp	r3, #0
 802f6f2:	bf0c      	ite	eq
 802f6f4:	2301      	moveq	r3, #1
 802f6f6:	2300      	movne	r3, #0
 802f6f8:	b2db      	uxtb	r3, r3
 802f6fa:	603b      	str	r3, [r7, #0]
            adc_pwr, old_adc_pwr,
            bIsCharge
        );
    }

    if ( bOldIsCharge != bIsCharge )
 802f6fc:	4b45      	ldr	r3, [pc, #276]	; (802f814 <Adc_Power+0x14c>)
 802f6fe:	681b      	ldr	r3, [r3, #0]
 802f700:	683a      	ldr	r2, [r7, #0]
 802f702:	429a      	cmp	r2, r3
 802f704:	d011      	beq.n	802f72a <Adc_Power+0x62>
    {
        if ( bIsCharge == 0 )
 802f706:	683b      	ldr	r3, [r7, #0]
 802f708:	2b00      	cmp	r3, #0
 802f70a:	d10b      	bne.n	802f724 <Adc_Power+0x5c>
        {
            //  충전 단자 제거시 -  LED Off
            HAL_GPIO_WritePin( LED_ON_A_GPIO_Port, LED_ON_A_Pin, GPIO_PIN_RESET );  //  Green
 802f70c:	2200      	movs	r2, #0
 802f70e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802f712:	4841      	ldr	r0, [pc, #260]	; (802f818 <Adc_Power+0x150>)
 802f714:	f7f3 ff02 	bl	802351c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_RESET );  //  Red
 802f718:	2200      	movs	r2, #0
 802f71a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802f71e:	483e      	ldr	r0, [pc, #248]	; (802f818 <Adc_Power+0x150>)
 802f720:	f7f3 fefc 	bl	802351c <HAL_GPIO_WritePin>
        }

        bOldIsCharge = bIsCharge;
 802f724:	4a3b      	ldr	r2, [pc, #236]	; (802f814 <Adc_Power+0x14c>)
 802f726:	683b      	ldr	r3, [r7, #0]
 802f728:	6013      	str	r3, [r2, #0]
    }

    if( bIsCharge )
 802f72a:	683b      	ldr	r3, [r7, #0]
 802f72c:	2b00      	cmp	r3, #0
 802f72e:	d021      	beq.n	802f774 <Adc_Power+0xac>
    {
        //  충전중. - Charging Start.

        LCDBattery( 6 );
 802f730:	2006      	movs	r0, #6
 802f732:	f7fc ffeb 	bl	802c70c <LCDBattery>

        //  LED 상태. - 충전중 Red / 충전완료 : Green

        if ( adc_pwr < 2550 )
 802f736:	687b      	ldr	r3, [r7, #4]
 802f738:	f640 12f5 	movw	r2, #2549	; 0x9f5
 802f73c:	4293      	cmp	r3, r2
 802f73e:	dc0c      	bgt.n	802f75a <Adc_Power+0x92>
        {
            //  충전중.
            //  Red LED
            HAL_GPIO_WritePin( LED_ON_A_GPIO_Port, LED_ON_A_Pin, GPIO_PIN_RESET );  //  Green
 802f740:	2200      	movs	r2, #0
 802f742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802f746:	4834      	ldr	r0, [pc, #208]	; (802f818 <Adc_Power+0x150>)
 802f748:	f7f3 fee8 	bl	802351c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_SET );    //  Red
 802f74c:	2201      	movs	r2, #1
 802f74e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802f752:	4831      	ldr	r0, [pc, #196]	; (802f818 <Adc_Power+0x150>)
 802f754:	f7f3 fee2 	bl	802351c <HAL_GPIO_WritePin>
 802f758:	e051      	b.n	802f7fe <Adc_Power+0x136>
        }
        else
        {
            //  충전완료.
            //  Green LED
            HAL_GPIO_WritePin( LED_ON_A_GPIO_Port, LED_ON_A_Pin, GPIO_PIN_SET );    //  Green
 802f75a:	2201      	movs	r2, #1
 802f75c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802f760:	482d      	ldr	r0, [pc, #180]	; (802f818 <Adc_Power+0x150>)
 802f762:	f7f3 fedb 	bl	802351c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_RESET );  //  Red
 802f766:	2200      	movs	r2, #0
 802f768:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802f76c:	482a      	ldr	r0, [pc, #168]	; (802f818 <Adc_Power+0x150>)
 802f76e:	f7f3 fed5 	bl	802351c <HAL_GPIO_WritePin>
 802f772:	e044      	b.n	802f7fe <Adc_Power+0x136>
        }
    }
    else
    {
        if ( adc_pwr > 2450 )                           LCDBattery( 5 );
 802f774:	687b      	ldr	r3, [r7, #4]
 802f776:	f640 1292 	movw	r2, #2450	; 0x992
 802f77a:	4293      	cmp	r3, r2
 802f77c:	dd03      	ble.n	802f786 <Adc_Power+0xbe>
 802f77e:	2005      	movs	r0, #5
 802f780:	f7fc ffc4 	bl	802c70c <LCDBattery>
 802f784:	e03b      	b.n	802f7fe <Adc_Power+0x136>
        else if ( 2400 < adc_pwr && adc_pwr <= 2450 )   LCDBattery( 4 );
 802f786:	687b      	ldr	r3, [r7, #4]
 802f788:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 802f78c:	dd08      	ble.n	802f7a0 <Adc_Power+0xd8>
 802f78e:	687b      	ldr	r3, [r7, #4]
 802f790:	f640 1292 	movw	r2, #2450	; 0x992
 802f794:	4293      	cmp	r3, r2
 802f796:	dc03      	bgt.n	802f7a0 <Adc_Power+0xd8>
 802f798:	2004      	movs	r0, #4
 802f79a:	f7fc ffb7 	bl	802c70c <LCDBattery>
 802f79e:	e02e      	b.n	802f7fe <Adc_Power+0x136>
        else if ( 2350 < adc_pwr && adc_pwr <= 2400 )   LCDBattery( 3 );
 802f7a0:	687b      	ldr	r3, [r7, #4]
 802f7a2:	f640 122e 	movw	r2, #2350	; 0x92e
 802f7a6:	4293      	cmp	r3, r2
 802f7a8:	dd07      	ble.n	802f7ba <Adc_Power+0xf2>
 802f7aa:	687b      	ldr	r3, [r7, #4]
 802f7ac:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 802f7b0:	dc03      	bgt.n	802f7ba <Adc_Power+0xf2>
 802f7b2:	2003      	movs	r0, #3
 802f7b4:	f7fc ffaa 	bl	802c70c <LCDBattery>
 802f7b8:	e021      	b.n	802f7fe <Adc_Power+0x136>
        else if ( 2200 < adc_pwr && adc_pwr <= 2350 )   LCDBattery( 2 );
 802f7ba:	687b      	ldr	r3, [r7, #4]
 802f7bc:	f640 0298 	movw	r2, #2200	; 0x898
 802f7c0:	4293      	cmp	r3, r2
 802f7c2:	dd08      	ble.n	802f7d6 <Adc_Power+0x10e>
 802f7c4:	687b      	ldr	r3, [r7, #4]
 802f7c6:	f640 122e 	movw	r2, #2350	; 0x92e
 802f7ca:	4293      	cmp	r3, r2
 802f7cc:	dc03      	bgt.n	802f7d6 <Adc_Power+0x10e>
 802f7ce:	2002      	movs	r0, #2
 802f7d0:	f7fc ff9c 	bl	802c70c <LCDBattery>
 802f7d4:	e013      	b.n	802f7fe <Adc_Power+0x136>
        else if ( 1000 < adc_pwr && adc_pwr <= 2200 )   LCDBattery( 1 );
 802f7d6:	687b      	ldr	r3, [r7, #4]
 802f7d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802f7dc:	dd08      	ble.n	802f7f0 <Adc_Power+0x128>
 802f7de:	687b      	ldr	r3, [r7, #4]
 802f7e0:	f640 0298 	movw	r2, #2200	; 0x898
 802f7e4:	4293      	cmp	r3, r2
 802f7e6:	dc03      	bgt.n	802f7f0 <Adc_Power+0x128>
 802f7e8:	2001      	movs	r0, #1
 802f7ea:	f7fc ff8f 	bl	802c70c <LCDBattery>
 802f7ee:	e006      	b.n	802f7fe <Adc_Power+0x136>
        else if ( adc_pwr <= 1000 )                     LCDBattery( 0 );
 802f7f0:	687b      	ldr	r3, [r7, #4]
 802f7f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802f7f6:	dc02      	bgt.n	802f7fe <Adc_Power+0x136>
 802f7f8:	2000      	movs	r0, #0
 802f7fa:	f7fc ff87 	bl	802c70c <LCDBattery>
    }

    old_adc_pwr = adc_pwr;
 802f7fe:	4a07      	ldr	r2, [pc, #28]	; (802f81c <Adc_Power+0x154>)
 802f800:	687b      	ldr	r3, [r7, #4]
 802f802:	6013      	str	r3, [r2, #0]
}
 802f804:	bf00      	nop
 802f806:	3708      	adds	r7, #8
 802f808:	46bd      	mov	sp, r7
 802f80a:	bd80      	pop	{r7, pc}
 802f80c:	20000df0 	.word	0x20000df0
 802f810:	40020800 	.word	0x40020800
 802f814:	200017b0 	.word	0x200017b0
 802f818:	40020400 	.word	0x40020400
 802f81c:	20000500 	.word	0x20000500

0802f820 <LoopProcAdc>:

//========================================================================
void LoopProcAdc( int nTick )
//========================================================================
{
 802f820:	b580      	push	{r7, lr}
 802f822:	b082      	sub	sp, #8
 802f824:	af00      	add	r7, sp, #0
 802f826:	6078      	str	r0, [r7, #4]
	//  ADC_Power
	//  Normal Mode 일때 Battery 체크.
	//	RSSI 수신감도 체크.
	static int oldTick = 0;

	if ( nTick - oldTick > 1000 )
 802f828:	4b0a      	ldr	r3, [pc, #40]	; (802f854 <LoopProcAdc+0x34>)
 802f82a:	681b      	ldr	r3, [r3, #0]
 802f82c:	687a      	ldr	r2, [r7, #4]
 802f82e:	1ad3      	subs	r3, r2, r3
 802f830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802f834:	dd09      	ble.n	802f84a <LoopProcAdc+0x2a>
	{
		//  Period : 1 sec
		if ( GetRFMMode() == RFMModeNormal )
 802f836:	f002 ff77 	bl	8032728 <GetRFMMode>
 802f83a:	4603      	mov	r3, r0
 802f83c:	2b00      	cmp	r3, #0
 802f83e:	d101      	bne.n	802f844 <LoopProcAdc+0x24>
		{
			Adc_Power();
 802f840:	f7ff ff42 	bl	802f6c8 <Adc_Power>
		}

		oldTick = nTick;
 802f844:	4a03      	ldr	r2, [pc, #12]	; (802f854 <LoopProcAdc+0x34>)
 802f846:	687b      	ldr	r3, [r7, #4]
 802f848:	6013      	str	r3, [r2, #0]
	}
}
 802f84a:	bf00      	nop
 802f84c:	3708      	adds	r7, #8
 802f84e:	46bd      	mov	sp, r7
 802f850:	bd80      	pop	{r7, pc}
 802f852:	bf00      	nop
 802f854:	200017b4 	.word	0x200017b4

0802f858 <ADPCM_ClearEncodeBuf>:
static int32_t predsampleDec 	= 	0;

//========================================================================

void	ADPCM_ClearEncodeBuf( void )
{
 802f858:	b480      	push	{r7}
 802f85a:	af00      	add	r7, sp, #0
	indexEn 		= 	0;
 802f85c:	4b05      	ldr	r3, [pc, #20]	; (802f874 <ADPCM_ClearEncodeBuf+0x1c>)
 802f85e:	2200      	movs	r2, #0
 802f860:	801a      	strh	r2, [r3, #0]
	predsampleEn 	= 	0;
 802f862:	4b05      	ldr	r3, [pc, #20]	; (802f878 <ADPCM_ClearEncodeBuf+0x20>)
 802f864:	2200      	movs	r2, #0
 802f866:	601a      	str	r2, [r3, #0]
}
 802f868:	bf00      	nop
 802f86a:	46bd      	mov	sp, r7
 802f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f870:	4770      	bx	lr
 802f872:	bf00      	nop
 802f874:	200017b8 	.word	0x200017b8
 802f878:	200017bc 	.word	0x200017bc

0802f87c <ADPCM_ClearDecodeBuf>:

void	ADPCM_ClearDecodeBuf( void )
{
 802f87c:	b480      	push	{r7}
 802f87e:	af00      	add	r7, sp, #0
	indexDec 		= 	0;
 802f880:	4b05      	ldr	r3, [pc, #20]	; (802f898 <ADPCM_ClearDecodeBuf+0x1c>)
 802f882:	2200      	movs	r2, #0
 802f884:	801a      	strh	r2, [r3, #0]
	predsampleDec 	= 	0;
 802f886:	4b05      	ldr	r3, [pc, #20]	; (802f89c <ADPCM_ClearDecodeBuf+0x20>)
 802f888:	2200      	movs	r2, #0
 802f88a:	601a      	str	r2, [r3, #0]
}
 802f88c:	bf00      	nop
 802f88e:	46bd      	mov	sp, r7
 802f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f894:	4770      	bx	lr
 802f896:	bf00      	nop
 802f898:	200017c0 	.word	0x200017c0
 802f89c:	200017c4 	.word	0x200017c4

0802f8a0 <ADPCM_Encode>:
  * @brief  ADPCM_Encode.
  * @param sample: a 16-bit PCM sample
  * @retval : a 4-bit ADPCM sample
  */
uint8_t ADPCM_Encode(int32_t sample)
{
 802f8a0:	b480      	push	{r7}
 802f8a2:	b087      	sub	sp, #28
 802f8a4:	af00      	add	r7, sp, #0
 802f8a6:	6078      	str	r0, [r7, #4]
  uint8_t code=0;
 802f8a8:	2300      	movs	r3, #0
 802f8aa:	75fb      	strb	r3, [r7, #23]
  uint16_t tmpstep=0;
 802f8ac:	2300      	movs	r3, #0
 802f8ae:	817b      	strh	r3, [r7, #10]
  int32_t diff=0;
 802f8b0:	2300      	movs	r3, #0
 802f8b2:	613b      	str	r3, [r7, #16]
  int32_t diffq=0;
 802f8b4:	2300      	movs	r3, #0
 802f8b6:	60fb      	str	r3, [r7, #12]
  uint16_t step=0;
 802f8b8:	2300      	movs	r3, #0
 802f8ba:	813b      	strh	r3, [r7, #8]
  
  step = StepSizeTable[indexEn];
 802f8bc:	4b4f      	ldr	r3, [pc, #316]	; (802f9fc <ADPCM_Encode+0x15c>)
 802f8be:	f9b3 3000 	ldrsh.w	r3, [r3]
 802f8c2:	461a      	mov	r2, r3
 802f8c4:	4b4e      	ldr	r3, [pc, #312]	; (802fa00 <ADPCM_Encode+0x160>)
 802f8c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802f8ca:	813b      	strh	r3, [r7, #8]

  /* 2. compute diff and record sign and absolut value */
  diff = sample - predsampleEn;
 802f8cc:	4b4d      	ldr	r3, [pc, #308]	; (802fa04 <ADPCM_Encode+0x164>)
 802f8ce:	681b      	ldr	r3, [r3, #0]
 802f8d0:	687a      	ldr	r2, [r7, #4]
 802f8d2:	1ad3      	subs	r3, r2, r3
 802f8d4:	613b      	str	r3, [r7, #16]
  if (diff < 0)  
 802f8d6:	693b      	ldr	r3, [r7, #16]
 802f8d8:	2b00      	cmp	r3, #0
 802f8da:	da04      	bge.n	802f8e6 <ADPCM_Encode+0x46>
  {
    code=8;
 802f8dc:	2308      	movs	r3, #8
 802f8de:	75fb      	strb	r3, [r7, #23]
    diff = -diff;
 802f8e0:	693b      	ldr	r3, [r7, #16]
 802f8e2:	425b      	negs	r3, r3
 802f8e4:	613b      	str	r3, [r7, #16]
  }    
  
  /* 3. quantize the diff into ADPCM code */
  /* 4. inverse quantize the code into a predicted diff */
  tmpstep = step;
 802f8e6:	893b      	ldrh	r3, [r7, #8]
 802f8e8:	817b      	strh	r3, [r7, #10]
  diffq = (step >> 3);
 802f8ea:	893b      	ldrh	r3, [r7, #8]
 802f8ec:	08db      	lsrs	r3, r3, #3
 802f8ee:	b29b      	uxth	r3, r3
 802f8f0:	60fb      	str	r3, [r7, #12]

  if (diff >= tmpstep)
 802f8f2:	897b      	ldrh	r3, [r7, #10]
 802f8f4:	693a      	ldr	r2, [r7, #16]
 802f8f6:	429a      	cmp	r2, r3
 802f8f8:	db0b      	blt.n	802f912 <ADPCM_Encode+0x72>
  {
    code |= 0x04;
 802f8fa:	7dfb      	ldrb	r3, [r7, #23]
 802f8fc:	f043 0304 	orr.w	r3, r3, #4
 802f900:	75fb      	strb	r3, [r7, #23]
    diff -= tmpstep;
 802f902:	897b      	ldrh	r3, [r7, #10]
 802f904:	693a      	ldr	r2, [r7, #16]
 802f906:	1ad3      	subs	r3, r2, r3
 802f908:	613b      	str	r3, [r7, #16]
    diffq += step;
 802f90a:	893b      	ldrh	r3, [r7, #8]
 802f90c:	68fa      	ldr	r2, [r7, #12]
 802f90e:	4413      	add	r3, r2
 802f910:	60fb      	str	r3, [r7, #12]
  }
  
  tmpstep = tmpstep >> 1;
 802f912:	897b      	ldrh	r3, [r7, #10]
 802f914:	085b      	lsrs	r3, r3, #1
 802f916:	817b      	strh	r3, [r7, #10]

  if (diff >= tmpstep)
 802f918:	897b      	ldrh	r3, [r7, #10]
 802f91a:	693a      	ldr	r2, [r7, #16]
 802f91c:	429a      	cmp	r2, r3
 802f91e:	db0e      	blt.n	802f93e <ADPCM_Encode+0x9e>
  {
    code |= 0x02;
 802f920:	7dfb      	ldrb	r3, [r7, #23]
 802f922:	f043 0302 	orr.w	r3, r3, #2
 802f926:	75fb      	strb	r3, [r7, #23]
    diff -= tmpstep;
 802f928:	897b      	ldrh	r3, [r7, #10]
 802f92a:	693a      	ldr	r2, [r7, #16]
 802f92c:	1ad3      	subs	r3, r2, r3
 802f92e:	613b      	str	r3, [r7, #16]
    diffq+=(step >> 1);
 802f930:	893b      	ldrh	r3, [r7, #8]
 802f932:	085b      	lsrs	r3, r3, #1
 802f934:	b29b      	uxth	r3, r3
 802f936:	461a      	mov	r2, r3
 802f938:	68fb      	ldr	r3, [r7, #12]
 802f93a:	4413      	add	r3, r2
 802f93c:	60fb      	str	r3, [r7, #12]
  }
  
  tmpstep = tmpstep >> 1;
 802f93e:	897b      	ldrh	r3, [r7, #10]
 802f940:	085b      	lsrs	r3, r3, #1
 802f942:	817b      	strh	r3, [r7, #10]
  
  if (diff >= tmpstep)
 802f944:	897b      	ldrh	r3, [r7, #10]
 802f946:	693a      	ldr	r2, [r7, #16]
 802f948:	429a      	cmp	r2, r3
 802f94a:	db0a      	blt.n	802f962 <ADPCM_Encode+0xc2>
  {
    code |=0x01;
 802f94c:	7dfb      	ldrb	r3, [r7, #23]
 802f94e:	f043 0301 	orr.w	r3, r3, #1
 802f952:	75fb      	strb	r3, [r7, #23]
    diffq+=(step >> 2);
 802f954:	893b      	ldrh	r3, [r7, #8]
 802f956:	089b      	lsrs	r3, r3, #2
 802f958:	b29b      	uxth	r3, r3
 802f95a:	461a      	mov	r2, r3
 802f95c:	68fb      	ldr	r3, [r7, #12]
 802f95e:	4413      	add	r3, r2
 802f960:	60fb      	str	r3, [r7, #12]
  }
  
  /* 5. fixed predictor to get new predicted sample*/
  if (code & 8)
 802f962:	7dfb      	ldrb	r3, [r7, #23]
 802f964:	f003 0308 	and.w	r3, r3, #8
 802f968:	2b00      	cmp	r3, #0
 802f96a:	d006      	beq.n	802f97a <ADPCM_Encode+0xda>
  {
	  predsampleEn -= diffq;
 802f96c:	4b25      	ldr	r3, [pc, #148]	; (802fa04 <ADPCM_Encode+0x164>)
 802f96e:	681a      	ldr	r2, [r3, #0]
 802f970:	68fb      	ldr	r3, [r7, #12]
 802f972:	1ad3      	subs	r3, r2, r3
 802f974:	4a23      	ldr	r2, [pc, #140]	; (802fa04 <ADPCM_Encode+0x164>)
 802f976:	6013      	str	r3, [r2, #0]
 802f978:	e005      	b.n	802f986 <ADPCM_Encode+0xe6>
  }
  else
  {
	  predsampleEn += diffq;
 802f97a:	4b22      	ldr	r3, [pc, #136]	; (802fa04 <ADPCM_Encode+0x164>)
 802f97c:	681a      	ldr	r2, [r3, #0]
 802f97e:	68fb      	ldr	r3, [r7, #12]
 802f980:	4413      	add	r3, r2
 802f982:	4a20      	ldr	r2, [pc, #128]	; (802fa04 <ADPCM_Encode+0x164>)
 802f984:	6013      	str	r3, [r2, #0]
  }  

  /* check for overflow*/
  if (predsampleEn > 32767)
 802f986:	4b1f      	ldr	r3, [pc, #124]	; (802fa04 <ADPCM_Encode+0x164>)
 802f988:	681b      	ldr	r3, [r3, #0]
 802f98a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f98e:	db04      	blt.n	802f99a <ADPCM_Encode+0xfa>
  {
	  predsampleEn = 32767;
 802f990:	4b1c      	ldr	r3, [pc, #112]	; (802fa04 <ADPCM_Encode+0x164>)
 802f992:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802f996:	601a      	str	r2, [r3, #0]
 802f998:	e007      	b.n	802f9aa <ADPCM_Encode+0x10a>
  }
  else if (predsampleEn < -32768)
 802f99a:	4b1a      	ldr	r3, [pc, #104]	; (802fa04 <ADPCM_Encode+0x164>)
 802f99c:	681b      	ldr	r3, [r3, #0]
 802f99e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802f9a2:	da02      	bge.n	802f9aa <ADPCM_Encode+0x10a>
  {
	  predsampleEn = -32768;
 802f9a4:	4b17      	ldr	r3, [pc, #92]	; (802fa04 <ADPCM_Encode+0x164>)
 802f9a6:	4a18      	ldr	r2, [pc, #96]	; (802fa08 <ADPCM_Encode+0x168>)
 802f9a8:	601a      	str	r2, [r3, #0]
  }
  
  /* 6. find new stepsize index */
  indexEn += IndexTable[code];
 802f9aa:	7dfb      	ldrb	r3, [r7, #23]
 802f9ac:	4a17      	ldr	r2, [pc, #92]	; (802fa0c <ADPCM_Encode+0x16c>)
 802f9ae:	56d3      	ldrsb	r3, [r2, r3]
 802f9b0:	b29a      	uxth	r2, r3
 802f9b2:	4b12      	ldr	r3, [pc, #72]	; (802f9fc <ADPCM_Encode+0x15c>)
 802f9b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 802f9b8:	b29b      	uxth	r3, r3
 802f9ba:	4413      	add	r3, r2
 802f9bc:	b29b      	uxth	r3, r3
 802f9be:	b21a      	sxth	r2, r3
 802f9c0:	4b0e      	ldr	r3, [pc, #56]	; (802f9fc <ADPCM_Encode+0x15c>)
 802f9c2:	801a      	strh	r2, [r3, #0]
  /* check for overflow*/
  if (indexEn <0)
 802f9c4:	4b0d      	ldr	r3, [pc, #52]	; (802f9fc <ADPCM_Encode+0x15c>)
 802f9c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 802f9ca:	2b00      	cmp	r3, #0
 802f9cc:	da03      	bge.n	802f9d6 <ADPCM_Encode+0x136>
  {
	  indexEn = 0;
 802f9ce:	4b0b      	ldr	r3, [pc, #44]	; (802f9fc <ADPCM_Encode+0x15c>)
 802f9d0:	2200      	movs	r2, #0
 802f9d2:	801a      	strh	r2, [r3, #0]
 802f9d4:	e007      	b.n	802f9e6 <ADPCM_Encode+0x146>
  }
  else if (indexEn > 88)
 802f9d6:	4b09      	ldr	r3, [pc, #36]	; (802f9fc <ADPCM_Encode+0x15c>)
 802f9d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 802f9dc:	2b58      	cmp	r3, #88	; 0x58
 802f9de:	dd02      	ble.n	802f9e6 <ADPCM_Encode+0x146>
  {
	  indexEn = 88;
 802f9e0:	4b06      	ldr	r3, [pc, #24]	; (802f9fc <ADPCM_Encode+0x15c>)
 802f9e2:	2258      	movs	r2, #88	; 0x58
 802f9e4:	801a      	strh	r2, [r3, #0]
  }
  
  /* 8. return new ADPCM code*/
  return (code & 0x0f);
 802f9e6:	7dfb      	ldrb	r3, [r7, #23]
 802f9e8:	f003 030f 	and.w	r3, r3, #15
 802f9ec:	b2db      	uxtb	r3, r3
}
 802f9ee:	4618      	mov	r0, r3
 802f9f0:	371c      	adds	r7, #28
 802f9f2:	46bd      	mov	sp, r7
 802f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f9f8:	4770      	bx	lr
 802f9fa:	bf00      	nop
 802f9fc:	200017b8 	.word	0x200017b8
 802fa00:	08041764 	.word	0x08041764
 802fa04:	200017bc 	.word	0x200017bc
 802fa08:	ffff8000 	.word	0xffff8000
 802fa0c:	08041818 	.word	0x08041818

0802fa10 <ADPCM_Decode>:
  * @brief  ADPCM_Decode.
  * @param code: a byte containing a 4-bit ADPCM sample. 
  * @retval : 16-bit ADPCM sample
  */
int16_t ADPCM_Decode(uint8_t code)
{
 802fa10:	b480      	push	{r7}
 802fa12:	b085      	sub	sp, #20
 802fa14:	af00      	add	r7, sp, #0
 802fa16:	4603      	mov	r3, r0
 802fa18:	71fb      	strb	r3, [r7, #7]
  uint16_t step=0;
 802fa1a:	2300      	movs	r3, #0
 802fa1c:	817b      	strh	r3, [r7, #10]
  int32_t diffq=0;
 802fa1e:	2300      	movs	r3, #0
 802fa20:	60fb      	str	r3, [r7, #12]
  
  step = StepSizeTable[indexDec];
 802fa22:	4b3b      	ldr	r3, [pc, #236]	; (802fb10 <ADPCM_Decode+0x100>)
 802fa24:	f9b3 3000 	ldrsh.w	r3, [r3]
 802fa28:	461a      	mov	r2, r3
 802fa2a:	4b3a      	ldr	r3, [pc, #232]	; (802fb14 <ADPCM_Decode+0x104>)
 802fa2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802fa30:	817b      	strh	r3, [r7, #10]

  /* 2. inverse code into diff */
  diffq = step>> 3;
 802fa32:	897b      	ldrh	r3, [r7, #10]
 802fa34:	08db      	lsrs	r3, r3, #3
 802fa36:	b29b      	uxth	r3, r3
 802fa38:	60fb      	str	r3, [r7, #12]
  if (code&4)
 802fa3a:	79fb      	ldrb	r3, [r7, #7]
 802fa3c:	f003 0304 	and.w	r3, r3, #4
 802fa40:	2b00      	cmp	r3, #0
 802fa42:	d003      	beq.n	802fa4c <ADPCM_Decode+0x3c>
  {
    diffq += step;
 802fa44:	897b      	ldrh	r3, [r7, #10]
 802fa46:	68fa      	ldr	r2, [r7, #12]
 802fa48:	4413      	add	r3, r2
 802fa4a:	60fb      	str	r3, [r7, #12]
  }
  
  if (code&2)
 802fa4c:	79fb      	ldrb	r3, [r7, #7]
 802fa4e:	f003 0302 	and.w	r3, r3, #2
 802fa52:	2b00      	cmp	r3, #0
 802fa54:	d006      	beq.n	802fa64 <ADPCM_Decode+0x54>
  {
    diffq += step>>1;
 802fa56:	897b      	ldrh	r3, [r7, #10]
 802fa58:	085b      	lsrs	r3, r3, #1
 802fa5a:	b29b      	uxth	r3, r3
 802fa5c:	461a      	mov	r2, r3
 802fa5e:	68fb      	ldr	r3, [r7, #12]
 802fa60:	4413      	add	r3, r2
 802fa62:	60fb      	str	r3, [r7, #12]
  }
  
  if (code&1)
 802fa64:	79fb      	ldrb	r3, [r7, #7]
 802fa66:	f003 0301 	and.w	r3, r3, #1
 802fa6a:	2b00      	cmp	r3, #0
 802fa6c:	d006      	beq.n	802fa7c <ADPCM_Decode+0x6c>
  {
    diffq += step>>2;
 802fa6e:	897b      	ldrh	r3, [r7, #10]
 802fa70:	089b      	lsrs	r3, r3, #2
 802fa72:	b29b      	uxth	r3, r3
 802fa74:	461a      	mov	r2, r3
 802fa76:	68fb      	ldr	r3, [r7, #12]
 802fa78:	4413      	add	r3, r2
 802fa7a:	60fb      	str	r3, [r7, #12]
  }

  /* 3. add diff to predicted sample*/
  if (code&8)
 802fa7c:	79fb      	ldrb	r3, [r7, #7]
 802fa7e:	f003 0308 	and.w	r3, r3, #8
 802fa82:	2b00      	cmp	r3, #0
 802fa84:	d006      	beq.n	802fa94 <ADPCM_Decode+0x84>
  {
	  predsampleDec -= diffq;
 802fa86:	4b24      	ldr	r3, [pc, #144]	; (802fb18 <ADPCM_Decode+0x108>)
 802fa88:	681a      	ldr	r2, [r3, #0]
 802fa8a:	68fb      	ldr	r3, [r7, #12]
 802fa8c:	1ad3      	subs	r3, r2, r3
 802fa8e:	4a22      	ldr	r2, [pc, #136]	; (802fb18 <ADPCM_Decode+0x108>)
 802fa90:	6013      	str	r3, [r2, #0]
 802fa92:	e005      	b.n	802faa0 <ADPCM_Decode+0x90>
  }
  else
  {
	  predsampleDec += diffq;
 802fa94:	4b20      	ldr	r3, [pc, #128]	; (802fb18 <ADPCM_Decode+0x108>)
 802fa96:	681a      	ldr	r2, [r3, #0]
 802fa98:	68fb      	ldr	r3, [r7, #12]
 802fa9a:	4413      	add	r3, r2
 802fa9c:	4a1e      	ldr	r2, [pc, #120]	; (802fb18 <ADPCM_Decode+0x108>)
 802fa9e:	6013      	str	r3, [r2, #0]
  }
  
  /* check for overflow*/
  if (predsampleDec > 32767)
 802faa0:	4b1d      	ldr	r3, [pc, #116]	; (802fb18 <ADPCM_Decode+0x108>)
 802faa2:	681b      	ldr	r3, [r3, #0]
 802faa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802faa8:	db04      	blt.n	802fab4 <ADPCM_Decode+0xa4>
  {
	  predsampleDec = 32767;
 802faaa:	4b1b      	ldr	r3, [pc, #108]	; (802fb18 <ADPCM_Decode+0x108>)
 802faac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802fab0:	601a      	str	r2, [r3, #0]
 802fab2:	e007      	b.n	802fac4 <ADPCM_Decode+0xb4>
  }
  else if (predsampleDec < -32768)
 802fab4:	4b18      	ldr	r3, [pc, #96]	; (802fb18 <ADPCM_Decode+0x108>)
 802fab6:	681b      	ldr	r3, [r3, #0]
 802fab8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802fabc:	da02      	bge.n	802fac4 <ADPCM_Decode+0xb4>
  {
	  predsampleDec = -32768;
 802fabe:	4b16      	ldr	r3, [pc, #88]	; (802fb18 <ADPCM_Decode+0x108>)
 802fac0:	4a16      	ldr	r2, [pc, #88]	; (802fb1c <ADPCM_Decode+0x10c>)
 802fac2:	601a      	str	r2, [r3, #0]
  }

  /* 4. find new quantizer step size */
  indexDec += IndexTable [code];
 802fac4:	79fb      	ldrb	r3, [r7, #7]
 802fac6:	4a16      	ldr	r2, [pc, #88]	; (802fb20 <ADPCM_Decode+0x110>)
 802fac8:	56d3      	ldrsb	r3, [r2, r3]
 802faca:	b29a      	uxth	r2, r3
 802facc:	4b10      	ldr	r3, [pc, #64]	; (802fb10 <ADPCM_Decode+0x100>)
 802face:	f9b3 3000 	ldrsh.w	r3, [r3]
 802fad2:	b29b      	uxth	r3, r3
 802fad4:	4413      	add	r3, r2
 802fad6:	b29b      	uxth	r3, r3
 802fad8:	b21a      	sxth	r2, r3
 802fada:	4b0d      	ldr	r3, [pc, #52]	; (802fb10 <ADPCM_Decode+0x100>)
 802fadc:	801a      	strh	r2, [r3, #0]
  /* check for overflow*/
  if (indexDec < 0)
 802fade:	4b0c      	ldr	r3, [pc, #48]	; (802fb10 <ADPCM_Decode+0x100>)
 802fae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 802fae4:	2b00      	cmp	r3, #0
 802fae6:	da02      	bge.n	802faee <ADPCM_Decode+0xde>
  {
	  indexDec = 0;
 802fae8:	4b09      	ldr	r3, [pc, #36]	; (802fb10 <ADPCM_Decode+0x100>)
 802faea:	2200      	movs	r2, #0
 802faec:	801a      	strh	r2, [r3, #0]
  }
  if (indexDec > 88)
 802faee:	4b08      	ldr	r3, [pc, #32]	; (802fb10 <ADPCM_Decode+0x100>)
 802faf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 802faf4:	2b58      	cmp	r3, #88	; 0x58
 802faf6:	dd02      	ble.n	802fafe <ADPCM_Decode+0xee>
  {
	  indexDec = 88;
 802faf8:	4b05      	ldr	r3, [pc, #20]	; (802fb10 <ADPCM_Decode+0x100>)
 802fafa:	2258      	movs	r2, #88	; 0x58
 802fafc:	801a      	strh	r2, [r3, #0]
  
  /* 5. save predict sample and index for next iteration */
  /* done! static variables */
  
  /* 6. return new speech sample*/
  return ((int16_t)predsampleDec);
 802fafe:	4b06      	ldr	r3, [pc, #24]	; (802fb18 <ADPCM_Decode+0x108>)
 802fb00:	681b      	ldr	r3, [r3, #0]
 802fb02:	b21b      	sxth	r3, r3
}
 802fb04:	4618      	mov	r0, r3
 802fb06:	3714      	adds	r7, #20
 802fb08:	46bd      	mov	sp, r7
 802fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fb0e:	4770      	bx	lr
 802fb10:	200017c0 	.word	0x200017c0
 802fb14:	08041764 	.word	0x08041764
 802fb18:	200017c4 	.word	0x200017c4
 802fb1c:	ffff8000 	.word	0xffff8000
 802fb20:	08041818 	.word	0x08041818

0802fb24 <AudioInit>:
// Function

//========================================================================
void AudioInit( void )
//========================================================================
{
 802fb24:	b580      	push	{r7, lr}
 802fb26:	b086      	sub	sp, #24
 802fb28:	af02      	add	r7, sp, #8
//DEL	printf( "%s(%d)\n", __func__, __LINE__ );

	//	pAudioTable = sine_table;
	//========================================================================
	//	Init RF Audio Rx Buffer
	qBufInit( &g_qBufAudioRx, (uint8_t *)g_bufAudioRx, ( I2S_DMA_LOOP_SIZE * 2 ) * I2S_DMA_LOOP_QCNT );
 802fb2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 802fb2e:	4919      	ldr	r1, [pc, #100]	; (802fb94 <AudioInit+0x70>)
 802fb30:	4819      	ldr	r0, [pc, #100]	; (802fb98 <AudioInit+0x74>)
 802fb32:	f7fe fb6c 	bl	802e20e <qBufInit>
	qBufInit( &g_qBufAudioTx, (uint8_t *)g_bufAudioTx, ( I2S_DMA_LOOP_SIZE * 2 ) * I2S_DMA_LOOP_QCNT );
 802fb36:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 802fb3a:	4918      	ldr	r1, [pc, #96]	; (802fb9c <AudioInit+0x78>)
 802fb3c:	4818      	ldr	r0, [pc, #96]	; (802fba0 <AudioInit+0x7c>)
 802fb3e:	f7fe fb66 	bl	802e20e <qBufInit>

	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)sine_table, (uint16_t*)bufAudio, 256 );
 802fb42:	f44f 7380 	mov.w	r3, #256	; 0x100
 802fb46:	4a17      	ldr	r2, [pc, #92]	; (802fba4 <AudioInit+0x80>)
 802fb48:	4917      	ldr	r1, [pc, #92]	; (802fba8 <AudioInit+0x84>)
 802fb4a:	4818      	ldr	r0, [pc, #96]	; (802fbac <AudioInit+0x88>)
 802fb4c:	f7f5 f9e6 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>

	int i;
	int index;

	index = 0;
 802fb50:	2300      	movs	r3, #0
 802fb52:	60fb      	str	r3, [r7, #12]

	//	sine table copy
	memcpy( speex_sine_table, sine_table, 160 * 2 );
 802fb54:	4a16      	ldr	r2, [pc, #88]	; (802fbb0 <AudioInit+0x8c>)
 802fb56:	4b14      	ldr	r3, [pc, #80]	; (802fba8 <AudioInit+0x84>)
 802fb58:	4610      	mov	r0, r2
 802fb5a:	4619      	mov	r1, r3
 802fb5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 802fb60:	461a      	mov	r2, r3
 802fb62:	f007 faa1 	bl	80370a8 <memcpy>

	int tick_start, tick_end;

	tick_start = HAL_GetTick();
 802fb66:	f7f1 ffff 	bl	8021b68 <HAL_GetTick>
 802fb6a:	4603      	mov	r3, r0
 802fb6c:	60bb      	str	r3, [r7, #8]

	tick_end = HAL_GetTick();
 802fb6e:	f7f1 fffb 	bl	8021b68 <HAL_GetTick>
 802fb72:	4603      	mov	r3, r0
 802fb74:	607b      	str	r3, [r7, #4]

	printf("%s : [%d] %d / %d\n", __func__, tick_end - tick_start, tick_start, tick_end);
 802fb76:	687a      	ldr	r2, [r7, #4]
 802fb78:	68bb      	ldr	r3, [r7, #8]
 802fb7a:	1ad2      	subs	r2, r2, r3
 802fb7c:	687b      	ldr	r3, [r7, #4]
 802fb7e:	9300      	str	r3, [sp, #0]
 802fb80:	68bb      	ldr	r3, [r7, #8]
 802fb82:	490c      	ldr	r1, [pc, #48]	; (802fbb4 <AudioInit+0x90>)
 802fb84:	480c      	ldr	r0, [pc, #48]	; (802fbb8 <AudioInit+0x94>)
 802fb86:	f007 fb85 	bl	8037294 <iprintf>

	//========================================================================
}
 802fb8a:	bf00      	nop
 802fb8c:	3710      	adds	r7, #16
 802fb8e:	46bd      	mov	sp, r7
 802fb90:	bd80      	pop	{r7, pc}
 802fb92:	bf00      	nop
 802fb94:	20001d98 	.word	0x20001d98
 802fb98:	20001d88 	.word	0x20001d88
 802fb9c:	20001f88 	.word	0x20001f88
 802fba0:	20001f78 	.word	0x20001f78
 802fba4:	20001b08 	.word	0x20001b08
 802fba8:	20000504 	.word	0x20000504
 802fbac:	20000ee0 	.word	0x20000ee0
 802fbb0:	200017c8 	.word	0x200017c8
 802fbb4:	08041828 	.word	0x08041828
 802fbb8:	08039a08 	.word	0x08039a08

0802fbbc <AudioStop>:


//========================================================================
void AudioStop( void )
//========================================================================
{
 802fbbc:	b580      	push	{r7, lr}
 802fbbe:	af00      	add	r7, sp, #0
	SetCallbackI2STxRxCplt( NULL );
 802fbc0:	2000      	movs	r0, #0
 802fbc2:	f000 f80f 	bl	802fbe4 <SetCallbackI2STxRxCplt>
	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)null_table, (uint16_t*)bufAudio, 256 );
 802fbc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 802fbca:	4a03      	ldr	r2, [pc, #12]	; (802fbd8 <AudioStop+0x1c>)
 802fbcc:	4903      	ldr	r1, [pc, #12]	; (802fbdc <AudioStop+0x20>)
 802fbce:	4804      	ldr	r0, [pc, #16]	; (802fbe0 <AudioStop+0x24>)
 802fbd0:	f7f5 f9a4 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>
}
 802fbd4:	bf00      	nop
 802fbd6:	bd80      	pop	{r7, pc}
 802fbd8:	20001b08 	.word	0x20001b08
 802fbdc:	20001908 	.word	0x20001908
 802fbe0:	20000ee0 	.word	0x20000ee0

0802fbe4 <SetCallbackI2STxRxCplt>:


//========================================================================
void	SetCallbackI2STxRxCplt	( void ( *pCallbackTxRxCplt )( I2S_HandleTypeDef *hi2s ) )
//========================================================================
{
 802fbe4:	b480      	push	{r7}
 802fbe6:	b083      	sub	sp, #12
 802fbe8:	af00      	add	r7, sp, #0
 802fbea:	6078      	str	r0, [r7, #4]
	pCallback_I2SEx_TxRxCpltCallback = pCallbackTxRxCplt;
 802fbec:	4a04      	ldr	r2, [pc, #16]	; (802fc00 <SetCallbackI2STxRxCplt+0x1c>)
 802fbee:	687b      	ldr	r3, [r7, #4]
 802fbf0:	6013      	str	r3, [r2, #0]
}
 802fbf2:	bf00      	nop
 802fbf4:	370c      	adds	r7, #12
 802fbf6:	46bd      	mov	sp, r7
 802fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fbfc:	4770      	bx	lr
 802fbfe:	bf00      	nop
 802fc00:	20002258 	.word	0x20002258

0802fc04 <HAL_I2SEx_TxRxCpltCallback>:
  * @retval None
  */
//========================================================================
void HAL_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
//========================================================================
{
 802fc04:	b580      	push	{r7, lr}
 802fc06:	b082      	sub	sp, #8
 802fc08:	af00      	add	r7, sp, #0
 802fc0a:	6078      	str	r0, [r7, #4]
			  the HAL_I2S_RxCpltCallback could be implemented in the user file
	 */

//	printf( "%s(%d)\n", __func__, __LINE__ );

	if ( pCallback_I2SEx_TxRxCpltCallback )
 802fc0c:	4b0b      	ldr	r3, [pc, #44]	; (802fc3c <HAL_I2SEx_TxRxCpltCallback+0x38>)
 802fc0e:	681b      	ldr	r3, [r3, #0]
 802fc10:	2b00      	cmp	r3, #0
 802fc12:	d004      	beq.n	802fc1e <HAL_I2SEx_TxRxCpltCallback+0x1a>
	{
		pCallback_I2SEx_TxRxCpltCallback( hi2s );
 802fc14:	4b09      	ldr	r3, [pc, #36]	; (802fc3c <HAL_I2SEx_TxRxCpltCallback+0x38>)
 802fc16:	681b      	ldr	r3, [r3, #0]
 802fc18:	6878      	ldr	r0, [r7, #4]
 802fc1a:	4798      	blx	r3
		//	Default Loopback
		//	pAudioTable = sine_table;
		memcpy( (void *)&bufAudio[0], (void *)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE * 2 );
		HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE );
	}
}
 802fc1c:	e00a      	b.n	802fc34 <HAL_I2SEx_TxRxCpltCallback+0x30>
		memcpy( (void *)&bufAudio[0], (void *)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE * 2 );
 802fc1e:	223c      	movs	r2, #60	; 0x3c
 802fc20:	4907      	ldr	r1, [pc, #28]	; (802fc40 <HAL_I2SEx_TxRxCpltCallback+0x3c>)
 802fc22:	4808      	ldr	r0, [pc, #32]	; (802fc44 <HAL_I2SEx_TxRxCpltCallback+0x40>)
 802fc24:	f007 fa40 	bl	80370a8 <memcpy>
		HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE );
 802fc28:	231e      	movs	r3, #30
 802fc2a:	4a05      	ldr	r2, [pc, #20]	; (802fc40 <HAL_I2SEx_TxRxCpltCallback+0x3c>)
 802fc2c:	4905      	ldr	r1, [pc, #20]	; (802fc44 <HAL_I2SEx_TxRxCpltCallback+0x40>)
 802fc2e:	4806      	ldr	r0, [pc, #24]	; (802fc48 <HAL_I2SEx_TxRxCpltCallback+0x44>)
 802fc30:	f7f5 f974 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>
}
 802fc34:	bf00      	nop
 802fc36:	3708      	adds	r7, #8
 802fc38:	46bd      	mov	sp, r7
 802fc3a:	bd80      	pop	{r7, pc}
 802fc3c:	20002258 	.word	0x20002258
 802fc40:	20001b44 	.word	0x20001b44
 802fc44:	20001b08 	.word	0x20001b08
 802fc48:	20000ee0 	.word	0x20000ee0

0802fc4c <SetAudioIC>:
int		g_nAudioIC = AudioNone;

//========================================================================
void SetAudioIC( int nAudioIC )
//========================================================================
{
 802fc4c:	b480      	push	{r7}
 802fc4e:	b083      	sub	sp, #12
 802fc50:	af00      	add	r7, sp, #0
 802fc52:	6078      	str	r0, [r7, #4]
	g_nAudioIC = nAudioIC;
 802fc54:	4a04      	ldr	r2, [pc, #16]	; (802fc68 <SetAudioIC+0x1c>)
 802fc56:	687b      	ldr	r3, [r7, #4]
 802fc58:	6013      	str	r3, [r2, #0]
}
 802fc5a:	bf00      	nop
 802fc5c:	370c      	adds	r7, #12
 802fc5e:	46bd      	mov	sp, r7
 802fc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fc64:	4770      	bx	lr
 802fc66:	bf00      	nop
 802fc68:	2000225c 	.word	0x2000225c

0802fc6c <GetAudioIC>:

//========================================================================
int GetAudioIC( void )
//========================================================================
{
 802fc6c:	b480      	push	{r7}
 802fc6e:	af00      	add	r7, sp, #0
	return g_nAudioIC;
 802fc70:	4b03      	ldr	r3, [pc, #12]	; (802fc80 <GetAudioIC+0x14>)
 802fc72:	681b      	ldr	r3, [r3, #0]
}
 802fc74:	4618      	mov	r0, r3
 802fc76:	46bd      	mov	sp, r7
 802fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fc7c:	4770      	bx	lr
 802fc7e:	bf00      	nop
 802fc80:	2000225c 	.word	0x2000225c

0802fc84 <WriteI2CCodec>:
//========================================================================

//========================================================================
int WriteI2CCodec( uint8_t addr, uint8_t data )
//========================================================================
{
 802fc84:	b580      	push	{r7, lr}
 802fc86:	b08a      	sub	sp, #40	; 0x28
 802fc88:	af04      	add	r7, sp, #16
 802fc8a:	4603      	mov	r3, r0
 802fc8c:	460a      	mov	r2, r1
 802fc8e:	71fb      	strb	r3, [r7, #7]
 802fc90:	4613      	mov	r3, r2
 802fc92:	71bb      	strb	r3, [r7, #6]
	if ( GetAudioIC() != AudioMAX9860 )	return 0;
 802fc94:	f7ff ffea 	bl	802fc6c <GetAudioIC>
 802fc98:	4603      	mov	r3, r0
 802fc9a:	2b01      	cmp	r3, #1
 802fc9c:	d001      	beq.n	802fca2 <WriteI2CCodec+0x1e>
 802fc9e:	2300      	movs	r3, #0
 802fca0:	e029      	b.n	802fcf6 <WriteI2CCodec+0x72>

	int cntRetry;

	cntRetry = 0;
 802fca2:	2300      	movs	r3, #0
 802fca4:	617b      	str	r3, [r7, #20]

	char buf[10];
	memset( buf, 0, sizeof( buf ) );
 802fca6:	f107 0308 	add.w	r3, r7, #8
 802fcaa:	220a      	movs	r2, #10
 802fcac:	2100      	movs	r1, #0
 802fcae:	4618      	mov	r0, r3
 802fcb0:	f007 fa08 	bl	80370c4 <memset>
	buf[0] = data;
 802fcb4:	79bb      	ldrb	r3, [r7, #6]
 802fcb6:	723b      	strb	r3, [r7, #8]

	while ( HAL_I2C_Mem_Write( &hi2c1, (uint16_t)( 0x10 << 1 ), (uint16_t)addr, I2C_MEMADD_SIZE_8BIT, buf, (uint16_t)1, 1000 ) != HAL_OK && cntRetry < 10 ) cntRetry++;
 802fcb8:	e002      	b.n	802fcc0 <WriteI2CCodec+0x3c>
 802fcba:	697b      	ldr	r3, [r7, #20]
 802fcbc:	3301      	adds	r3, #1
 802fcbe:	617b      	str	r3, [r7, #20]
 802fcc0:	79fb      	ldrb	r3, [r7, #7]
 802fcc2:	b29a      	uxth	r2, r3
 802fcc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802fcc8:	9302      	str	r3, [sp, #8]
 802fcca:	2301      	movs	r3, #1
 802fccc:	9301      	str	r3, [sp, #4]
 802fcce:	f107 0308 	add.w	r3, r7, #8
 802fcd2:	9300      	str	r3, [sp, #0]
 802fcd4:	2301      	movs	r3, #1
 802fcd6:	2120      	movs	r1, #32
 802fcd8:	4809      	ldr	r0, [pc, #36]	; (802fd00 <WriteI2CCodec+0x7c>)
 802fcda:	f7f3 fead 	bl	8023a38 <HAL_I2C_Mem_Write>
 802fcde:	4603      	mov	r3, r0
 802fce0:	2b00      	cmp	r3, #0
 802fce2:	d002      	beq.n	802fcea <WriteI2CCodec+0x66>
 802fce4:	697b      	ldr	r3, [r7, #20]
 802fce6:	2b09      	cmp	r3, #9
 802fce8:	dde7      	ble.n	802fcba <WriteI2CCodec+0x36>

	if ( cntRetry == 10 )   return 0;
 802fcea:	697b      	ldr	r3, [r7, #20]
 802fcec:	2b0a      	cmp	r3, #10
 802fcee:	d101      	bne.n	802fcf4 <WriteI2CCodec+0x70>
 802fcf0:	2300      	movs	r3, #0
 802fcf2:	e000      	b.n	802fcf6 <WriteI2CCodec+0x72>
	else					return 1;
 802fcf4:	2301      	movs	r3, #1
}
 802fcf6:	4618      	mov	r0, r3
 802fcf8:	3718      	adds	r7, #24
 802fcfa:	46bd      	mov	sp, r7
 802fcfc:	bd80      	pop	{r7, pc}
 802fcfe:	bf00      	nop
 802fd00:	20000e38 	.word	0x20000e38

0802fd04 <InitCodecMAX9860>:

//========================================================================
void InitCodecMAX9860   ( void )
//========================================================================
{
 802fd04:	b580      	push	{r7, lr}
 802fd06:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 802fd08:	f44f 7288 	mov.w	r2, #272	; 0x110
 802fd0c:	491e      	ldr	r1, [pc, #120]	; (802fd88 <InitCodecMAX9860+0x84>)
 802fd0e:	481f      	ldr	r0, [pc, #124]	; (802fd8c <InitCodecMAX9860+0x88>)
 802fd10:	f007 fac0 	bl	8037294 <iprintf>

	SetAudioIC( AudioMAX9860 );
 802fd14:	2001      	movs	r0, #1
 802fd16:	f7ff ff99 	bl	802fc4c <SetAudioIC>
	//========================================================================
	//  Codec 초기화. ( MAX9860ETG+ )

	/*	Initialize the MAX9860 by setting registers	*/
	//	registers at 0x03, 0x04, and 0x05 are clock control registers
	WriteI2CCodec( 0X03, 0X12 );	//	PSCLK = 01, FREQ = 10(12MHz), 8KHz = 0 (LRCLK = 8KHz)
 802fd1a:	2112      	movs	r1, #18
 802fd1c:	2003      	movs	r0, #3
 802fd1e:	f7ff ffb1 	bl	802fc84 <WriteI2CCodec>

	WriteI2CCodec( 0X04, NHI );	//	PLL =0,
 802fd22:	21ff      	movs	r1, #255	; 0xff
 802fd24:	2004      	movs	r0, #4
 802fd26:	f7ff ffad 	bl	802fc84 <WriteI2CCodec>
	WriteI2CCodec( 0X05, NLO );
 802fd2a:	219c      	movs	r1, #156	; 0x9c
 802fd2c:	2005      	movs	r0, #5
 802fd2e:	f7ff ffa9 	bl	802fc84 <WriteI2CCodec>

	//	WriteI2CCodec( 0X06, 0x2C );	//	MAS = 0, WCI = 0 (really not sure), DBCI = 1( Falling Edge SDIN ), DDLY = 0, HIZ = 1, TDM = 1, 
	//	WriteI2CCodec( 0X06, 0x24 );	//	MAS = 0, WCI = 0 (really not sure), DBCI = 1( Falling Edge SDIN ), DDLY = 0, HIZ = 0, TDM = 1, 
		//	Rising Edge
	WriteI2CCodec( 0X06, 0x04 );	//	MAS = 0, WCI = 0 (really not sure), DBCI = 0( Rising Edge SDIN ), DDLY = 0, HIZ = 0, TDM = 1, 
 802fd32:	2104      	movs	r1, #4
 802fd34:	2006      	movs	r0, #6
 802fd36:	f7ff ffa5 	bl	802fc84 <WriteI2CCodec>
//sendTwoBytes(MAX9860, 0X07, 0x00);	//	ABCI = 0, ADLY = 0, ST = 0, BSEL = 000

//	WriteI2CCodec( 0X07, 0x20 );	//	ABCI = 1 ( Falling Edge SDOUT ), ADLY = 0, ST = 0, BSEL = 000

	//	Rising Edge
	WriteI2CCodec( 0X07, 0x00 );	//	ABCI = 0 ( Rising Edge SDOUT ), ADLY = 0, ST = 0, BSEL = 000
 802fd3a:	2100      	movs	r1, #0
 802fd3c:	2007      	movs	r0, #7
 802fd3e:	f7ff ffa1 	bl	802fc84 <WriteI2CCodec>

	//	Digital filters
	WriteI2CCodec( 0x08, 0x00 );	//AVFLT = 0, DVFLT = 0 (not sure which filter would be best for this, choosing no filter)
 802fd42:	2100      	movs	r1, #0
 802fd44:	2008      	movs	r0, #8
 802fd46:	f7ff ff9d 	bl	802fc84 <WriteI2CCodec>

	//	Digital level control registers
	//		Spk. Vol
	WriteI2CCodec( 0x09, 0x06 );	//0 DAC adjustment, this would require testing and/or a better understanding of the overall system
 802fd4a:	2106      	movs	r1, #6
 802fd4c:	2009      	movs	r0, #9
 802fd4e:	f7ff ff99 	bl	802fc84 <WriteI2CCodec>
	WriteI2CCodec( 0x0A, 0x33 );	//both ADC's set to 0 adjustment, same reason as above AND mic not supported yet
 802fd52:	2133      	movs	r1, #51	; 0x33
 802fd54:	200a      	movs	r0, #10
 802fd56:	f7ff ff95 	bl	802fc84 <WriteI2CCodec>
	WriteI2CCodec( 0x0B, 0x00 );	//no gain on DAC, unsure of DVST bits safer to disable
 802fd5a:	2100      	movs	r1, #0
 802fd5c:	200b      	movs	r0, #11
 802fd5e:	f7ff ff91 	bl	802fc84 <WriteI2CCodec>

	//	microphone input register
//	WriteI2CCodec( 0x0c, 0x00 );	//I haven't set this up to allow microphones (make MAX9860 master, ARM slave)
//	WriteI2CCodec( 0x0c, 0x4A );	// PAM = 10(+20) / PGAM = 0x0A(+10)

	WriteI2CCodec( 0x0c, 0x2A );	// PAM = 01(+0) / PGAM = 0x0A(+10)
 802fd62:	212a      	movs	r1, #42	; 0x2a
 802fd64:	200c      	movs	r0, #12
 802fd66:	f7ff ff8d 	bl	802fc84 <WriteI2CCodec>

//	WriteI2CCodec( 0x0c, 0x34 );	// PAM = 01(+0) / PGAM = 0x14(+0)

	//	AGC and Noise gate registers
//	WriteI2CCodec( 0x0E, 0x80 );	//sum of left & right noise gates for AGC & noise gate, AGCRLS shortest time, but AGC disabled since I am unsure of its need
	WriteI2CCodec( 0x0E, 0x00 );	//  Disable AGC
 802fd6a:	2100      	movs	r1, #0
 802fd6c:	200e      	movs	r0, #14
 802fd6e:	f7ff ff89 	bl	802fc84 <WriteI2CCodec>
	WriteI2CCodec( 0x0F, 0x00 );	//Noise gate threshhold disabled, AGC signal threshhold -3bBFS
 802fd72:	2100      	movs	r1, #0
 802fd74:	200f      	movs	r0, #15
 802fd76:	f7ff ff85 	bl	802fc84 <WriteI2CCodec>

	//	power management register
//	WriteI2CCodec( 0x10, 0x88 );	//powered on, DAC on, both ADC's off (since this is not set up for microphone input)
	WriteI2CCodec( 0x10, 0x8A );	//powered on, DAC on, both ADC(Left) Enable
 802fd7a:	218a      	movs	r1, #138	; 0x8a
 802fd7c:	2010      	movs	r0, #16
 802fd7e:	f7ff ff81 	bl	802fc84 <WriteI2CCodec>
//	//	sine 파 출력 검사. ( I2S Data 영역 검사 )
//	WriteI2CCodec( 0x09, 0x36 );	//  0x0C ( -24 )

//	WriteI2CCodec( 0x09, 0x3E );	//  0x0C ( -28 )
//	WriteI2CCodec( 0x0B, 0x20 );	//  01 ( +6 dB )
}
 802fd82:	bf00      	nop
 802fd84:	bd80      	pop	{r7, pc}
 802fd86:	bf00      	nop
 802fd88:	08041834 	.word	0x08041834
 802fd8c:	08039a1c 	.word	0x08039a1c

0802fd90 <Default_I2SEx_TxRxCpltCallback>:

//========================================================================
void Default_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
//========================================================================
{
 802fd90:	b580      	push	{r7, lr}
 802fd92:	b082      	sub	sp, #8
 802fd94:	af00      	add	r7, sp, #0
 802fd96:	6078      	str	r0, [r7, #4]
	//	printf( "%s(%d)\n", __func__, __LINE__ );

	//========================================================================
	//	Loopback
	memcpy( (void *)&bufAudio[0], (void *)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE * 2 );
 802fd98:	223c      	movs	r2, #60	; 0x3c
 802fd9a:	4907      	ldr	r1, [pc, #28]	; (802fdb8 <Default_I2SEx_TxRxCpltCallback+0x28>)
 802fd9c:	4807      	ldr	r0, [pc, #28]	; (802fdbc <Default_I2SEx_TxRxCpltCallback+0x2c>)
 802fd9e:	f007 f983 	bl	80370a8 <memcpy>
	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE );
 802fda2:	231e      	movs	r3, #30
 802fda4:	4a04      	ldr	r2, [pc, #16]	; (802fdb8 <Default_I2SEx_TxRxCpltCallback+0x28>)
 802fda6:	4905      	ldr	r1, [pc, #20]	; (802fdbc <Default_I2SEx_TxRxCpltCallback+0x2c>)
 802fda8:	4805      	ldr	r0, [pc, #20]	; (802fdc0 <Default_I2SEx_TxRxCpltCallback+0x30>)
 802fdaa:	f7f5 f8b7 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>
}
 802fdae:	bf00      	nop
 802fdb0:	3708      	adds	r7, #8
 802fdb2:	46bd      	mov	sp, r7
 802fdb4:	bd80      	pop	{r7, pc}
 802fdb6:	bf00      	nop
 802fdb8:	20001b44 	.word	0x20001b44
 802fdbc:	20001b08 	.word	0x20001b08
 802fdc0:	20000ee0 	.word	0x20000ee0

0802fdc4 <AudioDMALoopback>:

//========================================================================
int	AudioDMALoopback( void )
//========================================================================
{
 802fdc4:	b580      	push	{r7, lr}
 802fdc6:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 802fdc8:	f240 1273 	movw	r2, #371	; 0x173
 802fdcc:	4907      	ldr	r1, [pc, #28]	; (802fdec <AudioDMALoopback+0x28>)
 802fdce:	4808      	ldr	r0, [pc, #32]	; (802fdf0 <AudioDMALoopback+0x2c>)
 802fdd0:	f007 fa60 	bl	8037294 <iprintf>

	SetCallbackI2STxRxCplt( Default_I2SEx_TxRxCpltCallback );
 802fdd4:	4807      	ldr	r0, [pc, #28]	; (802fdf4 <AudioDMALoopback+0x30>)
 802fdd6:	f7ff ff05 	bl	802fbe4 <SetCallbackI2STxRxCplt>

	//	Speex ( 1 frame ) : 160 sample ( 320 bytes ) / 20 msec
	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[FRAME_SIZE], I2S_DMA_LOOP_SIZE );
 802fdda:	231e      	movs	r3, #30
 802fddc:	4a06      	ldr	r2, [pc, #24]	; (802fdf8 <AudioDMALoopback+0x34>)
 802fdde:	4907      	ldr	r1, [pc, #28]	; (802fdfc <AudioDMALoopback+0x38>)
 802fde0:	4807      	ldr	r0, [pc, #28]	; (802fe00 <AudioDMALoopback+0x3c>)
 802fde2:	f7f5 f89b 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>

	return 0;
 802fde6:	2300      	movs	r3, #0
}
 802fde8:	4618      	mov	r0, r3
 802fdea:	bd80      	pop	{r7, pc}
 802fdec:	08041848 	.word	0x08041848
 802fdf0:	08039a1c 	.word	0x08039a1c
 802fdf4:	0802fd91 	.word	0x0802fd91
 802fdf8:	20001c48 	.word	0x20001c48
 802fdfc:	20001b08 	.word	0x20001b08
 802fe00:	20000ee0 	.word	0x20000ee0

0802fe04 <AudioSine_I2SEx_TxRxCpltCallback>:
}

//========================================================================
void AudioSine_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
//========================================================================
{
 802fe04:	b580      	push	{r7, lr}
 802fe06:	b082      	sub	sp, #8
 802fe08:	af00      	add	r7, sp, #0
 802fe0a:	6078      	str	r0, [r7, #4]

//	idx = (idx + 1) % 8;

#else

	HAL_I2SEx_TransmitReceive_DMA( 	&hi2s3,
 802fe0c:	23a0      	movs	r3, #160	; 0xa0
 802fe0e:	4a04      	ldr	r2, [pc, #16]	; (802fe20 <AudioSine_I2SEx_TxRxCpltCallback+0x1c>)
 802fe10:	4904      	ldr	r1, [pc, #16]	; (802fe24 <AudioSine_I2SEx_TxRxCpltCallback+0x20>)
 802fe12:	4805      	ldr	r0, [pc, #20]	; (802fe28 <AudioSine_I2SEx_TxRxCpltCallback+0x24>)
 802fe14:	f7f5 f882 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>
									(uint16_t*)&bufAudio[FRAME_SIZE],
									FRAME_SIZE
									);

#endif
}
 802fe18:	bf00      	nop
 802fe1a:	3708      	adds	r7, #8
 802fe1c:	46bd      	mov	sp, r7
 802fe1e:	bd80      	pop	{r7, pc}
 802fe20:	20001c48 	.word	0x20001c48
 802fe24:	20000504 	.word	0x20000504
 802fe28:	20000ee0 	.word	0x20000ee0

0802fe2c <AudioPlayDMASine>:
}

//========================================================================
int		AudioPlayDMASine( void )
//========================================================================
{
 802fe2c:	b580      	push	{r7, lr}
 802fe2e:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 802fe30:	f240 12d5 	movw	r2, #469	; 0x1d5
 802fe34:	4907      	ldr	r1, [pc, #28]	; (802fe54 <AudioPlayDMASine+0x28>)
 802fe36:	4808      	ldr	r0, [pc, #32]	; (802fe58 <AudioPlayDMASine+0x2c>)
 802fe38:	f007 fa2c 	bl	8037294 <iprintf>

	SetCallbackI2STxRxCplt( AudioSine_I2SEx_TxRxCpltCallback );
 802fe3c:	4807      	ldr	r0, [pc, #28]	; (802fe5c <AudioPlayDMASine+0x30>)
 802fe3e:	f7ff fed1 	bl	802fbe4 <SetCallbackI2STxRxCplt>

	//	Speex ( 1 frame ) : 160 sample ( 320 bytes ) / 20 msec
	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[FRAME_SIZE], FRAME_SIZE );
 802fe42:	23a0      	movs	r3, #160	; 0xa0
 802fe44:	4a06      	ldr	r2, [pc, #24]	; (802fe60 <AudioPlayDMASine+0x34>)
 802fe46:	4907      	ldr	r1, [pc, #28]	; (802fe64 <AudioPlayDMASine+0x38>)
 802fe48:	4807      	ldr	r0, [pc, #28]	; (802fe68 <AudioPlayDMASine+0x3c>)
 802fe4a:	f7f5 f867 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>

	return 0;
 802fe4e:	2300      	movs	r3, #0
}
 802fe50:	4618      	mov	r0, r3
 802fe52:	bd80      	pop	{r7, pc}
 802fe54:	0804185c 	.word	0x0804185c
 802fe58:	08039a1c 	.word	0x08039a1c
 802fe5c:	0802fe05 	.word	0x0802fe05
 802fe60:	20001c48 	.word	0x20001c48
 802fe64:	20001b08 	.word	0x20001b08
 802fe68:	20000ee0 	.word	0x20000ee0

0802fe6c <AudioSpkVol>:

//========================================================================
void	AudioSpkVol	    ( int nSpkVol )
//========================================================================
{
 802fe6c:	b580      	push	{r7, lr}
 802fe6e:	b082      	sub	sp, #8
 802fe70:	af00      	add	r7, sp, #0
 802fe72:	6078      	str	r0, [r7, #4]
    //========================================================================
    //	Codec MAX9860ETG+
    if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), 2, 2 ) )
 802fe74:	2302      	movs	r3, #2
 802fe76:	2202      	movs	r2, #2
 802fe78:	2120      	movs	r1, #32
 802fe7a:	4817      	ldr	r0, [pc, #92]	; (802fed8 <AudioSpkVol+0x6c>)
 802fe7c:	f7f4 f8fc 	bl	8024078 <HAL_I2C_IsDeviceReady>
 802fe80:	4603      	mov	r3, r0
 802fe82:	2b00      	cmp	r3, #0
 802fe84:	d122      	bne.n	802fecc <AudioSpkVol+0x60>
    {
        // Power DAC / ADC Disable
//        WriteI2CCodec( 0x10, 0x00 );	//powered on, DAC on, both ADC(Left) Enable

    	switch ( nSpkVol )
 802fe86:	687b      	ldr	r3, [r7, #4]
 802fe88:	2b03      	cmp	r3, #3
 802fe8a:	d820      	bhi.n	802fece <AudioSpkVol+0x62>
 802fe8c:	a201      	add	r2, pc, #4	; (adr r2, 802fe94 <AudioSpkVol+0x28>)
 802fe8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fe92:	bf00      	nop
 802fe94:	0802fea5 	.word	0x0802fea5
 802fe98:	0802feaf 	.word	0x0802feaf
 802fe9c:	0802feb9 	.word	0x0802feb9
 802fea0:	0802fec3 	.word	0x0802fec3
        {
        case 0:		WriteI2CCodec( 0x09, 0xBA );	break;	//  Mute ( 0xBC )
 802fea4:	21ba      	movs	r1, #186	; 0xba
 802fea6:	2009      	movs	r0, #9
 802fea8:	f7ff feec 	bl	802fc84 <WriteI2CCodec>
 802feac:	e00f      	b.n	802fece <AudioSpkVol+0x62>
        case 1:		WriteI2CCodec( 0x09, 0x0C );	break;	//  0x0C ( -3 )
 802feae:	210c      	movs	r1, #12
 802feb0:	2009      	movs	r0, #9
 802feb2:	f7ff fee7 	bl	802fc84 <WriteI2CCodec>
 802feb6:	e00a      	b.n	802fece <AudioSpkVol+0x62>
        case 2:		WriteI2CCodec( 0x09, 0x06 );	break;	//  0x02 ( 0 dB ) DAC adjustment, this would require testing and/or a better understanding of the overall system
 802feb8:	2106      	movs	r1, #6
 802feba:	2009      	movs	r0, #9
 802febc:	f7ff fee2 	bl	802fc84 <WriteI2CCodec>
 802fec0:	e005      	b.n	802fece <AudioSpkVol+0x62>
        case 3:		WriteI2CCodec( 0x09, 0x00 );	break;	//  0x02 ( +3 )
 802fec2:	2100      	movs	r1, #0
 802fec4:	2009      	movs	r0, #9
 802fec6:	f7ff fedd 	bl	802fc84 <WriteI2CCodec>
 802feca:	e000      	b.n	802fece <AudioSpkVol+0x62>
        }

        // Power DAC / ADC Enable
//        WriteI2CCodec( 0x10, 0x8A );	//powered on, DAC on, both ADC(Left) Enable
    }
 802fecc:	bf00      	nop
}
 802fece:	bf00      	nop
 802fed0:	3708      	adds	r7, #8
 802fed2:	46bd      	mov	sp, r7
 802fed4:	bd80      	pop	{r7, pc}
 802fed6:	bf00      	nop
 802fed8:	20000e38 	.word	0x20000e38

0802fedc <AudioMicVol>:


//========================================================================
void	AudioMicVol	    ( int nMicVol )
//========================================================================
{
 802fedc:	b580      	push	{r7, lr}
 802fede:	b082      	sub	sp, #8
 802fee0:	af00      	add	r7, sp, #0
 802fee2:	6078      	str	r0, [r7, #4]
    //========================================================================
    //	Codec MAX9860ETG+
    if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), 2, 2 ) )
 802fee4:	2302      	movs	r3, #2
 802fee6:	2202      	movs	r2, #2
 802fee8:	2120      	movs	r1, #32
 802feea:	482c      	ldr	r0, [pc, #176]	; (802ff9c <AudioMicVol+0xc0>)
 802feec:	f7f4 f8c4 	bl	8024078 <HAL_I2C_IsDeviceReady>
 802fef0:	4603      	mov	r3, r0
 802fef2:	2b00      	cmp	r3, #0
 802fef4:	d14c      	bne.n	802ff90 <AudioMicVol+0xb4>
    {
        // Power DAC / ADC Disable
//        WriteI2CCodec( 0x10, 0x00 );	//powered on, DAC on, both ADC(Left) Enable
        switch ( nMicVol )
 802fef6:	687b      	ldr	r3, [r7, #4]
 802fef8:	2b09      	cmp	r3, #9
 802fefa:	d830      	bhi.n	802ff5e <AudioMicVol+0x82>
 802fefc:	a201      	add	r2, pc, #4	; (adr r2, 802ff04 <AudioMicVol+0x28>)
 802fefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ff02:	bf00      	nop
 802ff04:	0802ff2d 	.word	0x0802ff2d
 802ff08:	0802ff37 	.word	0x0802ff37
 802ff0c:	0802ff41 	.word	0x0802ff41
 802ff10:	0802ff4b 	.word	0x0802ff4b
 802ff14:	0802ff55 	.word	0x0802ff55
 802ff18:	0802ff5f 	.word	0x0802ff5f
 802ff1c:	0802ff69 	.word	0x0802ff69
 802ff20:	0802ff73 	.word	0x0802ff73
 802ff24:	0802ff7d 	.word	0x0802ff7d
 802ff28:	0802ff87 	.word	0x0802ff87
		{
		case 0:		WriteI2CCodec( 0x0c, 0x34 );	break;	// ( 0 dB ) PAM = 01(+0) / PGAM = 0x14(+0)
 802ff2c:	2134      	movs	r1, #52	; 0x34
 802ff2e:	200c      	movs	r0, #12
 802ff30:	f7ff fea8 	bl	802fc84 <WriteI2CCodec>
 802ff34:	e02d      	b.n	802ff92 <AudioMicVol+0xb6>
		case 1:		WriteI2CCodec( 0x0c, 0x32 );	break;	// ( 2 dB ) PAM = 01(+0) / PGAM = 0x12(+2)
 802ff36:	2132      	movs	r1, #50	; 0x32
 802ff38:	200c      	movs	r0, #12
 802ff3a:	f7ff fea3 	bl	802fc84 <WriteI2CCodec>
 802ff3e:	e028      	b.n	802ff92 <AudioMicVol+0xb6>
		case 2:		WriteI2CCodec( 0x0c, 0x30 );	break;	// ( 4 dB ) PAM = 01(+0) / PGAM = 0x10(+4)
 802ff40:	2130      	movs	r1, #48	; 0x30
 802ff42:	200c      	movs	r0, #12
 802ff44:	f7ff fe9e 	bl	802fc84 <WriteI2CCodec>
 802ff48:	e023      	b.n	802ff92 <AudioMicVol+0xb6>
		case 3:		WriteI2CCodec( 0x0c, 0x2E );	break;	// ( 6 dB ) PAM = 01(+0) / PGAM = 0x0E(+6)
 802ff4a:	212e      	movs	r1, #46	; 0x2e
 802ff4c:	200c      	movs	r0, #12
 802ff4e:	f7ff fe99 	bl	802fc84 <WriteI2CCodec>
 802ff52:	e01e      	b.n	802ff92 <AudioMicVol+0xb6>
		case 4:		WriteI2CCodec( 0x0c, 0x2C );	break;	// ( 8 dB ) PAM = 01(+0) / PGAM = 0x0C(+8)
 802ff54:	212c      	movs	r1, #44	; 0x2c
 802ff56:	200c      	movs	r0, #12
 802ff58:	f7ff fe94 	bl	802fc84 <WriteI2CCodec>
 802ff5c:	e019      	b.n	802ff92 <AudioMicVol+0xb6>
		default:	//	Default ( 5 )
		case 5:		WriteI2CCodec( 0x0c, 0x2A );	break;	// ( 10 dB ) PAM = 01(+0) / PGAM = 0x0A(+10) - Default
 802ff5e:	212a      	movs	r1, #42	; 0x2a
 802ff60:	200c      	movs	r0, #12
 802ff62:	f7ff fe8f 	bl	802fc84 <WriteI2CCodec>
 802ff66:	e014      	b.n	802ff92 <AudioMicVol+0xb6>
		case 6:		WriteI2CCodec( 0x0c, 0x28 );	break;	// ( 12 dB ) PAM = 01(+0) / PGAM = 0x08(+12)
 802ff68:	2128      	movs	r1, #40	; 0x28
 802ff6a:	200c      	movs	r0, #12
 802ff6c:	f7ff fe8a 	bl	802fc84 <WriteI2CCodec>
 802ff70:	e00f      	b.n	802ff92 <AudioMicVol+0xb6>
		case 7:		WriteI2CCodec( 0x0c, 0x26 );	break;	// ( 14 dB ) PAM = 01(+0) / PGAM = 0x06(+14)
 802ff72:	2126      	movs	r1, #38	; 0x26
 802ff74:	200c      	movs	r0, #12
 802ff76:	f7ff fe85 	bl	802fc84 <WriteI2CCodec>
 802ff7a:	e00a      	b.n	802ff92 <AudioMicVol+0xb6>
		case 8:		WriteI2CCodec( 0x0c, 0x24 );	break;	// ( 16 dB ) PAM = 01(+0) / PGAM = 0x04(+16)
 802ff7c:	2124      	movs	r1, #36	; 0x24
 802ff7e:	200c      	movs	r0, #12
 802ff80:	f7ff fe80 	bl	802fc84 <WriteI2CCodec>
 802ff84:	e005      	b.n	802ff92 <AudioMicVol+0xb6>
		case 9:		WriteI2CCodec( 0x0c, 0x22 );	break;	// ( 18 dB ) PAM = 01(+0) / PGAM = 0x02(+18)
 802ff86:	2122      	movs	r1, #34	; 0x22
 802ff88:	200c      	movs	r0, #12
 802ff8a:	f7ff fe7b 	bl	802fc84 <WriteI2CCodec>
 802ff8e:	e000      	b.n	802ff92 <AudioMicVol+0xb6>
		}

        // Power DAC / ADC Enable
//        WriteI2CCodec( 0x10, 0x8A );	//powered on, DAC on, both ADC(Left) Enable
    }
 802ff90:	bf00      	nop
}
 802ff92:	bf00      	nop
 802ff94:	3708      	adds	r7, #8
 802ff96:	46bd      	mov	sp, r7
 802ff98:	bd80      	pop	{r7, pc}
 802ff9a:	bf00      	nop
 802ff9c:	20000e38 	.word	0x20000e38

0802ffa0 <cmd_audio>:

//========================================================================
int cmd_audio( int argc, char *argv[] )
//========================================================================
{
 802ffa0:	b580      	push	{r7, lr}
 802ffa2:	b084      	sub	sp, #16
 802ffa4:	af00      	add	r7, sp, #0
 802ffa6:	6078      	str	r0, [r7, #4]
 802ffa8:	6039      	str	r1, [r7, #0]
	//	audio [ loop / null / sine / spk / mute / vol ] [0/1 - spk relay]
	if ( argc < 2 )
 802ffaa:	687b      	ldr	r3, [r7, #4]
 802ffac:	2b01      	cmp	r3, #1
 802ffae:	dc07      	bgt.n	802ffc0 <cmd_audio+0x20>
	{
		printf( "%s(%d) - return\n", __func__, __LINE__ );
 802ffb0:	f240 221d 	movw	r2, #541	; 0x21d
 802ffb4:	49a4      	ldr	r1, [pc, #656]	; (8030248 <cmd_audio+0x2a8>)
 802ffb6:	48a5      	ldr	r0, [pc, #660]	; (803024c <cmd_audio+0x2ac>)
 802ffb8:	f007 f96c 	bl	8037294 <iprintf>
		return 0;
 802ffbc:	2300      	movs	r3, #0
 802ffbe:	e13e      	b.n	803023e <cmd_audio+0x29e>
	}

	char	*sCmd;
	int		nVal;

	switch ( argc )
 802ffc0:	687b      	ldr	r3, [r7, #4]
 802ffc2:	2b02      	cmp	r3, #2
 802ffc4:	d00b      	beq.n	802ffde <cmd_audio+0x3e>
 802ffc6:	687b      	ldr	r3, [r7, #4]
 802ffc8:	2b03      	cmp	r3, #3
 802ffca:	d10c      	bne.n	802ffe6 <cmd_audio+0x46>
	{
	case 3:		sscanf( argv[2], "%d", &nVal );		//	Value
 802ffcc:	683b      	ldr	r3, [r7, #0]
 802ffce:	3308      	adds	r3, #8
 802ffd0:	681b      	ldr	r3, [r3, #0]
 802ffd2:	f107 0208 	add.w	r2, r7, #8
 802ffd6:	499e      	ldr	r1, [pc, #632]	; (8030250 <cmd_audio+0x2b0>)
 802ffd8:	4618      	mov	r0, r3
 802ffda:	f007 fbad 	bl	8037738 <siscanf>
	case 2:		sCmd = argv[1];						//	Command
 802ffde:	683b      	ldr	r3, [r7, #0]
 802ffe0:	685b      	ldr	r3, [r3, #4]
 802ffe2:	60fb      	str	r3, [r7, #12]
//	case 2:		sText = argv[1];					//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
		break;
 802ffe4:	bf00      	nop
	}

	if ( strcmp( argv[1], "spk" ) == 0 )
 802ffe6:	683b      	ldr	r3, [r7, #0]
 802ffe8:	3304      	adds	r3, #4
 802ffea:	681b      	ldr	r3, [r3, #0]
 802ffec:	4999      	ldr	r1, [pc, #612]	; (8030254 <cmd_audio+0x2b4>)
 802ffee:	4618      	mov	r0, r3
 802fff0:	f7f0 f8ee 	bl	80201d0 <strcmp>
 802fff4:	4603      	mov	r3, r0
 802fff6:	2b00      	cmp	r3, #0
 802fff8:	d11a      	bne.n	8030030 <cmd_audio+0x90>
	{
		if ( nVal == 1 )	//	strcmp( argv[2], "1" ) == 0 )
 802fffa:	68bb      	ldr	r3, [r7, #8]
 802fffc:	2b01      	cmp	r3, #1
 802fffe:	d10b      	bne.n	8030018 <cmd_audio+0x78>
		{
			//	Spk On
			printf( "%s(%d) - Spk Relay : On\n", __func__, __LINE__ );
 8030000:	f240 2231 	movw	r2, #561	; 0x231
 8030004:	4990      	ldr	r1, [pc, #576]	; (8030248 <cmd_audio+0x2a8>)
 8030006:	4894      	ldr	r0, [pc, #592]	; (8030258 <cmd_audio+0x2b8>)
 8030008:	f007 f944 	bl	8037294 <iprintf>
			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
 803000c:	2201      	movs	r2, #1
 803000e:	2120      	movs	r1, #32
 8030010:	4892      	ldr	r0, [pc, #584]	; (803025c <cmd_audio+0x2bc>)
 8030012:	f7f3 fa83 	bl	802351c <HAL_GPIO_WritePin>
 8030016:	e111      	b.n	803023c <cmd_audio+0x29c>
		}
		else	//	if ( strcmp( argv[2], "0" ) == 0 )
		{
			//	Spk On
			printf( "%s(%d) - Spk Relay : Off\n", __func__, __LINE__ );
 8030018:	f240 2237 	movw	r2, #567	; 0x237
 803001c:	498a      	ldr	r1, [pc, #552]	; (8030248 <cmd_audio+0x2a8>)
 803001e:	4890      	ldr	r0, [pc, #576]	; (8030260 <cmd_audio+0x2c0>)
 8030020:	f007 f938 	bl	8037294 <iprintf>
			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
 8030024:	2200      	movs	r2, #0
 8030026:	2120      	movs	r1, #32
 8030028:	488c      	ldr	r0, [pc, #560]	; (803025c <cmd_audio+0x2bc>)
 803002a:	f7f3 fa77 	bl	802351c <HAL_GPIO_WritePin>
 803002e:	e105      	b.n	803023c <cmd_audio+0x29c>
		}
	}
	else if ( strcmp( argv[1], "loop" ) == 0 )
 8030030:	683b      	ldr	r3, [r7, #0]
 8030032:	3304      	adds	r3, #4
 8030034:	681b      	ldr	r3, [r3, #0]
 8030036:	498b      	ldr	r1, [pc, #556]	; (8030264 <cmd_audio+0x2c4>)
 8030038:	4618      	mov	r0, r3
 803003a:	f7f0 f8c9 	bl	80201d0 <strcmp>
 803003e:	4603      	mov	r3, r0
 8030040:	2b00      	cmp	r3, #0
 8030042:	d10d      	bne.n	8030060 <cmd_audio+0xc0>
	{
		//	Audio Loop Test
		printf( "%s(%d) - loop\n", __func__, __LINE__ );
 8030044:	f240 223e 	movw	r2, #574	; 0x23e
 8030048:	497f      	ldr	r1, [pc, #508]	; (8030248 <cmd_audio+0x2a8>)
 803004a:	4887      	ldr	r0, [pc, #540]	; (8030268 <cmd_audio+0x2c8>)
 803004c:	f007 f922 	bl	8037294 <iprintf>

		AudioDMALoopback();
 8030050:	f7ff feb8 	bl	802fdc4 <AudioDMALoopback>

		//	Spk On
		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
 8030054:	2201      	movs	r2, #1
 8030056:	2120      	movs	r1, #32
 8030058:	4880      	ldr	r0, [pc, #512]	; (803025c <cmd_audio+0x2bc>)
 803005a:	f7f3 fa5f 	bl	802351c <HAL_GPIO_WritePin>
 803005e:	e0ed      	b.n	803023c <cmd_audio+0x29c>
	}
	else if ( strcmp( argv[1], "sine" ) == 0 )
 8030060:	683b      	ldr	r3, [r7, #0]
 8030062:	3304      	adds	r3, #4
 8030064:	681b      	ldr	r3, [r3, #0]
 8030066:	4981      	ldr	r1, [pc, #516]	; (803026c <cmd_audio+0x2cc>)
 8030068:	4618      	mov	r0, r3
 803006a:	f7f0 f8b1 	bl	80201d0 <strcmp>
 803006e:	4603      	mov	r3, r0
 8030070:	2b00      	cmp	r3, #0
 8030072:	d108      	bne.n	8030086 <cmd_audio+0xe6>
	{
		//	Audio Output Sine Wave
		printf( "%s(%d) - sine\n", __func__, __LINE__ );
 8030074:	f44f 7212 	mov.w	r2, #584	; 0x248
 8030078:	4973      	ldr	r1, [pc, #460]	; (8030248 <cmd_audio+0x2a8>)
 803007a:	487d      	ldr	r0, [pc, #500]	; (8030270 <cmd_audio+0x2d0>)
 803007c:	f007 f90a 	bl	8037294 <iprintf>
		AudioPlayDMASine();
 8030080:	f7ff fed4 	bl	802fe2c <AudioPlayDMASine>
 8030084:	e0da      	b.n	803023c <cmd_audio+0x29c>

//		//	Spk On
//		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
	}
	else if ( strcmp( argv[1], "stop" ) == 0 )
 8030086:	683b      	ldr	r3, [r7, #0]
 8030088:	3304      	adds	r3, #4
 803008a:	681b      	ldr	r3, [r3, #0]
 803008c:	4979      	ldr	r1, [pc, #484]	; (8030274 <cmd_audio+0x2d4>)
 803008e:	4618      	mov	r0, r3
 8030090:	f7f0 f89e 	bl	80201d0 <strcmp>
 8030094:	4603      	mov	r3, r0
 8030096:	2b00      	cmp	r3, #0
 8030098:	d10b      	bne.n	80300b2 <cmd_audio+0x112>
	{
		//	Audio Loop Test
		printf( "%s(%d) - %s\n", __func__, __LINE__, argv[1] );
 803009a:	683b      	ldr	r3, [r7, #0]
 803009c:	3304      	adds	r3, #4
 803009e:	681b      	ldr	r3, [r3, #0]
 80300a0:	f240 2251 	movw	r2, #593	; 0x251
 80300a4:	4968      	ldr	r1, [pc, #416]	; (8030248 <cmd_audio+0x2a8>)
 80300a6:	4874      	ldr	r0, [pc, #464]	; (8030278 <cmd_audio+0x2d8>)
 80300a8:	f007 f8f4 	bl	8037294 <iprintf>

//		//	Spk Off
//		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );

		AudioStop();
 80300ac:	f7ff fd86 	bl	802fbbc <AudioStop>
 80300b0:	e0c4      	b.n	803023c <cmd_audio+0x29c>
	}
	else if ( strcmp( argv[1], "vol" ) == 0 )
 80300b2:	683b      	ldr	r3, [r7, #0]
 80300b4:	3304      	adds	r3, #4
 80300b6:	681b      	ldr	r3, [r3, #0]
 80300b8:	4970      	ldr	r1, [pc, #448]	; (803027c <cmd_audio+0x2dc>)
 80300ba:	4618      	mov	r0, r3
 80300bc:	f7f0 f888 	bl	80201d0 <strcmp>
 80300c0:	4603      	mov	r3, r0
 80300c2:	2b00      	cmp	r3, #0
 80300c4:	d153      	bne.n	803016e <cmd_audio+0x1ce>
	{
		switch( nVal )
 80300c6:	68bb      	ldr	r3, [r7, #8]
 80300c8:	2b09      	cmp	r3, #9
 80300ca:	d849      	bhi.n	8030160 <cmd_audio+0x1c0>
 80300cc:	a201      	add	r2, pc, #4	; (adr r2, 80300d4 <cmd_audio+0x134>)
 80300ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80300d2:	bf00      	nop
 80300d4:	080300fd 	.word	0x080300fd
 80300d8:	08030107 	.word	0x08030107
 80300dc:	08030111 	.word	0x08030111
 80300e0:	0803011b 	.word	0x0803011b
 80300e4:	08030125 	.word	0x08030125
 80300e8:	0803012f 	.word	0x0803012f
 80300ec:	08030139 	.word	0x08030139
 80300f0:	08030143 	.word	0x08030143
 80300f4:	0803014d 	.word	0x0803014d
 80300f8:	08030157 	.word	0x08030157
		{
	    case 0:		WriteI2CCodec( 0x09, 0xBA );	break;	//  Mute ( 0xBC )
 80300fc:	21ba      	movs	r1, #186	; 0xba
 80300fe:	2009      	movs	r0, #9
 8030100:	f7ff fdc0 	bl	802fc84 <WriteI2CCodec>
 8030104:	e09a      	b.n	803023c <cmd_audio+0x29c>
	    case 1:		WriteI2CCodec( 0x09, 0x36 );	break;	// ( -24 )
 8030106:	2136      	movs	r1, #54	; 0x36
 8030108:	2009      	movs	r0, #9
 803010a:	f7ff fdbb 	bl	802fc84 <WriteI2CCodec>
 803010e:	e095      	b.n	803023c <cmd_audio+0x29c>
	    case 2:		WriteI2CCodec( 0x09, 0x30 );	break;	// ( -21 )
 8030110:	2130      	movs	r1, #48	; 0x30
 8030112:	2009      	movs	r0, #9
 8030114:	f7ff fdb6 	bl	802fc84 <WriteI2CCodec>
 8030118:	e090      	b.n	803023c <cmd_audio+0x29c>
	    case 3:		WriteI2CCodec( 0x09, 0x2A );	break;	// ( -18 )
 803011a:	212a      	movs	r1, #42	; 0x2a
 803011c:	2009      	movs	r0, #9
 803011e:	f7ff fdb1 	bl	802fc84 <WriteI2CCodec>
 8030122:	e08b      	b.n	803023c <cmd_audio+0x29c>
	    case 4:		WriteI2CCodec( 0x09, 0x1E );	break;	// ( -12 )
 8030124:	211e      	movs	r1, #30
 8030126:	2009      	movs	r0, #9
 8030128:	f7ff fdac 	bl	802fc84 <WriteI2CCodec>
 803012c:	e086      	b.n	803023c <cmd_audio+0x29c>
	    case 5:		WriteI2CCodec( 0x09, 0x18 );	break;	// ( -9 )
 803012e:	2118      	movs	r1, #24
 8030130:	2009      	movs	r0, #9
 8030132:	f7ff fda7 	bl	802fc84 <WriteI2CCodec>
 8030136:	e081      	b.n	803023c <cmd_audio+0x29c>
	    case 6:		WriteI2CCodec( 0x09, 0x12 );	break;	// ( -6 )
 8030138:	2112      	movs	r1, #18
 803013a:	2009      	movs	r0, #9
 803013c:	f7ff fda2 	bl	802fc84 <WriteI2CCodec>
 8030140:	e07c      	b.n	803023c <cmd_audio+0x29c>
	    case 7:		WriteI2CCodec( 0x09, 0x0C );	break;	// ( -3 )
 8030142:	210c      	movs	r1, #12
 8030144:	2009      	movs	r0, #9
 8030146:	f7ff fd9d 	bl	802fc84 <WriteI2CCodec>
 803014a:	e077      	b.n	803023c <cmd_audio+0x29c>
        case 8:		WriteI2CCodec( 0x09, 0x06 );	break;	// ( 0 dB ) DAC adjustment, this would require testing and/or a better understanding of the overall system
 803014c:	2106      	movs	r1, #6
 803014e:	2009      	movs	r0, #9
 8030150:	f7ff fd98 	bl	802fc84 <WriteI2CCodec>
 8030154:	e072      	b.n	803023c <cmd_audio+0x29c>
        case 9:		WriteI2CCodec( 0x09, 0x00 );	break;	// ( +3 )
 8030156:	2100      	movs	r1, #0
 8030158:	2009      	movs	r0, #9
 803015a:	f7ff fd93 	bl	802fc84 <WriteI2CCodec>
 803015e:	e06d      	b.n	803023c <cmd_audio+0x29c>
        default:	printf( "%s(%d) - invalid\n", __func__, __LINE__ );	break;
 8030160:	f240 2266 	movw	r2, #614	; 0x266
 8030164:	4938      	ldr	r1, [pc, #224]	; (8030248 <cmd_audio+0x2a8>)
 8030166:	4846      	ldr	r0, [pc, #280]	; (8030280 <cmd_audio+0x2e0>)
 8030168:	f007 f894 	bl	8037294 <iprintf>
 803016c:	e066      	b.n	803023c <cmd_audio+0x29c>
		}
	}
	else if ( strcmp( argv[1], "mic" ) == 0 )
 803016e:	683b      	ldr	r3, [r7, #0]
 8030170:	3304      	adds	r3, #4
 8030172:	681b      	ldr	r3, [r3, #0]
 8030174:	4943      	ldr	r1, [pc, #268]	; (8030284 <cmd_audio+0x2e4>)
 8030176:	4618      	mov	r0, r3
 8030178:	f7f0 f82a 	bl	80201d0 <strcmp>
 803017c:	4603      	mov	r3, r0
 803017e:	2b00      	cmp	r3, #0
 8030180:	d153      	bne.n	803022a <cmd_audio+0x28a>
	{
		switch( nVal )
 8030182:	68bb      	ldr	r3, [r7, #8]
 8030184:	2b09      	cmp	r3, #9
 8030186:	d849      	bhi.n	803021c <cmd_audio+0x27c>
 8030188:	a201      	add	r2, pc, #4	; (adr r2, 8030190 <cmd_audio+0x1f0>)
 803018a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803018e:	bf00      	nop
 8030190:	080301b9 	.word	0x080301b9
 8030194:	080301c3 	.word	0x080301c3
 8030198:	080301cd 	.word	0x080301cd
 803019c:	080301d7 	.word	0x080301d7
 80301a0:	080301e1 	.word	0x080301e1
 80301a4:	080301eb 	.word	0x080301eb
 80301a8:	080301f5 	.word	0x080301f5
 80301ac:	080301ff 	.word	0x080301ff
 80301b0:	08030209 	.word	0x08030209
 80301b4:	08030213 	.word	0x08030213
		{
		case 0:		WriteI2CCodec( 0x0c, 0x34 );	break;	// ( 0 dB ) PAM = 01(+0) / PGAM = 0x14(+0)
 80301b8:	2134      	movs	r1, #52	; 0x34
 80301ba:	200c      	movs	r0, #12
 80301bc:	f7ff fd62 	bl	802fc84 <WriteI2CCodec>
 80301c0:	e03c      	b.n	803023c <cmd_audio+0x29c>
		case 1:		WriteI2CCodec( 0x0c, 0x32 );	break;	// ( 2 dB ) PAM = 01(+0) / PGAM = 0x12(+2)
 80301c2:	2132      	movs	r1, #50	; 0x32
 80301c4:	200c      	movs	r0, #12
 80301c6:	f7ff fd5d 	bl	802fc84 <WriteI2CCodec>
 80301ca:	e037      	b.n	803023c <cmd_audio+0x29c>
		case 2:		WriteI2CCodec( 0x0c, 0x30 );	break;	// ( 4 dB ) PAM = 01(+0) / PGAM = 0x10(+4)
 80301cc:	2130      	movs	r1, #48	; 0x30
 80301ce:	200c      	movs	r0, #12
 80301d0:	f7ff fd58 	bl	802fc84 <WriteI2CCodec>
 80301d4:	e032      	b.n	803023c <cmd_audio+0x29c>
		case 3:		WriteI2CCodec( 0x0c, 0x2E );	break;	// ( 6 dB ) PAM = 01(+0) / PGAM = 0x0E(+6)
 80301d6:	212e      	movs	r1, #46	; 0x2e
 80301d8:	200c      	movs	r0, #12
 80301da:	f7ff fd53 	bl	802fc84 <WriteI2CCodec>
 80301de:	e02d      	b.n	803023c <cmd_audio+0x29c>
		case 4:		WriteI2CCodec( 0x0c, 0x2C );	break;	// ( 8 dB ) PAM = 01(+0) / PGAM = 0x0C(+8)
 80301e0:	212c      	movs	r1, #44	; 0x2c
 80301e2:	200c      	movs	r0, #12
 80301e4:	f7ff fd4e 	bl	802fc84 <WriteI2CCodec>
 80301e8:	e028      	b.n	803023c <cmd_audio+0x29c>
		case 5:		WriteI2CCodec( 0x0c, 0x2A );	break;	// ( 10 dB ) PAM = 01(+0) / PGAM = 0x0A(+10) - Default
 80301ea:	212a      	movs	r1, #42	; 0x2a
 80301ec:	200c      	movs	r0, #12
 80301ee:	f7ff fd49 	bl	802fc84 <WriteI2CCodec>
 80301f2:	e023      	b.n	803023c <cmd_audio+0x29c>
		case 6:		WriteI2CCodec( 0x0c, 0x28 );	break;	// ( 12 dB ) PAM = 01(+0) / PGAM = 0x08(+12)
 80301f4:	2128      	movs	r1, #40	; 0x28
 80301f6:	200c      	movs	r0, #12
 80301f8:	f7ff fd44 	bl	802fc84 <WriteI2CCodec>
 80301fc:	e01e      	b.n	803023c <cmd_audio+0x29c>
		case 7:		WriteI2CCodec( 0x0c, 0x26 );	break;	// ( 14 dB ) PAM = 01(+0) / PGAM = 0x06(+14)
 80301fe:	2126      	movs	r1, #38	; 0x26
 8030200:	200c      	movs	r0, #12
 8030202:	f7ff fd3f 	bl	802fc84 <WriteI2CCodec>
 8030206:	e019      	b.n	803023c <cmd_audio+0x29c>
		case 8:		WriteI2CCodec( 0x0c, 0x24 );	break;	// ( 16 dB ) PAM = 01(+0) / PGAM = 0x04(+16)
 8030208:	2124      	movs	r1, #36	; 0x24
 803020a:	200c      	movs	r0, #12
 803020c:	f7ff fd3a 	bl	802fc84 <WriteI2CCodec>
 8030210:	e014      	b.n	803023c <cmd_audio+0x29c>
		case 9:		WriteI2CCodec( 0x0c, 0x22 );	break;	// ( 18 dB ) PAM = 01(+0) / PGAM = 0x02(+18)
 8030212:	2122      	movs	r1, #34	; 0x22
 8030214:	200c      	movs	r0, #12
 8030216:	f7ff fd35 	bl	802fc84 <WriteI2CCodec>
 803021a:	e00f      	b.n	803023c <cmd_audio+0x29c>
        default:	printf( "%s(%d) - invalid\n", __func__, __LINE__ );	break;
 803021c:	f240 2277 	movw	r2, #631	; 0x277
 8030220:	4909      	ldr	r1, [pc, #36]	; (8030248 <cmd_audio+0x2a8>)
 8030222:	4817      	ldr	r0, [pc, #92]	; (8030280 <cmd_audio+0x2e0>)
 8030224:	f007 f836 	bl	8037294 <iprintf>
 8030228:	e008      	b.n	803023c <cmd_audio+0x29c>
		}
	}
	else
	{
		printf( "%s(%d) - Invalid Cmd : %s\n", __func__, __LINE__, argv[1] );
 803022a:	683b      	ldr	r3, [r7, #0]
 803022c:	3304      	adds	r3, #4
 803022e:	681b      	ldr	r3, [r3, #0]
 8030230:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8030234:	4904      	ldr	r1, [pc, #16]	; (8030248 <cmd_audio+0x2a8>)
 8030236:	4814      	ldr	r0, [pc, #80]	; (8030288 <cmd_audio+0x2e8>)
 8030238:	f007 f82c 	bl	8037294 <iprintf>
	}

	return 1;
 803023c:	2301      	movs	r3, #1
}
 803023e:	4618      	mov	r0, r3
 8030240:	3710      	adds	r7, #16
 8030242:	46bd      	mov	sp, r7
 8030244:	bd80      	pop	{r7, pc}
 8030246:	bf00      	nop
 8030248:	08041870 	.word	0x08041870
 803024c:	08039a24 	.word	0x08039a24
 8030250:	08039a38 	.word	0x08039a38
 8030254:	08039a3c 	.word	0x08039a3c
 8030258:	08039a40 	.word	0x08039a40
 803025c:	40021000 	.word	0x40021000
 8030260:	08039a5c 	.word	0x08039a5c
 8030264:	08039a78 	.word	0x08039a78
 8030268:	08039a80 	.word	0x08039a80
 803026c:	08039a90 	.word	0x08039a90
 8030270:	08039a98 	.word	0x08039a98
 8030274:	08039aa8 	.word	0x08039aa8
 8030278:	08039ab0 	.word	0x08039ab0
 803027c:	08039ac0 	.word	0x08039ac0
 8030280:	08039ac4 	.word	0x08039ac4
 8030284:	08039ad8 	.word	0x08039ad8
 8030288:	08039adc 	.word	0x08039adc

0803028c <cmd_codec>:


//========================================================================
int cmd_codec( int argc, char *argv[] )
//========================================================================
{
 803028c:	b580      	push	{r7, lr}
 803028e:	b086      	sub	sp, #24
 8030290:	af02      	add	r7, sp, #8
 8030292:	6078      	str	r0, [r7, #4]
 8030294:	6039      	str	r1, [r7, #0]
	//	audio [ loop / null / sine / spk / mute ] [0/1 - spk relay]
	if ( argc < 2 )
 8030296:	687b      	ldr	r3, [r7, #4]
 8030298:	2b01      	cmp	r3, #1
 803029a:	dc07      	bgt.n	80302ac <cmd_codec+0x20>
	{
		printf( "%s(%d) - return\n", __func__, __LINE__ );
 803029c:	f240 228a 	movw	r2, #650	; 0x28a
 80302a0:	4939      	ldr	r1, [pc, #228]	; (8030388 <cmd_codec+0xfc>)
 80302a2:	483a      	ldr	r0, [pc, #232]	; (803038c <cmd_codec+0x100>)
 80302a4:	f006 fff6 	bl	8037294 <iprintf>
		return 0;
 80302a8:	2300      	movs	r3, #0
 80302aa:	e068      	b.n	803037e <cmd_codec+0xf2>
	}

	int bOnOff = 0;
 80302ac:	2300      	movs	r3, #0
 80302ae:	60fb      	str	r3, [r7, #12]

	if ( argc >= 3 )
 80302b0:	687b      	ldr	r3, [r7, #4]
 80302b2:	2b02      	cmp	r3, #2
 80302b4:	dd18      	ble.n	80302e8 <cmd_codec+0x5c>
	{
		if ( strcmp( argv[2], "1" ) == 0 )
 80302b6:	683b      	ldr	r3, [r7, #0]
 80302b8:	3308      	adds	r3, #8
 80302ba:	681b      	ldr	r3, [r3, #0]
 80302bc:	4934      	ldr	r1, [pc, #208]	; (8030390 <cmd_codec+0x104>)
 80302be:	4618      	mov	r0, r3
 80302c0:	f7ef ff86 	bl	80201d0 <strcmp>
 80302c4:	4603      	mov	r3, r0
 80302c6:	2b00      	cmp	r3, #0
 80302c8:	d102      	bne.n	80302d0 <cmd_codec+0x44>
		{
			bOnOff = 1;
 80302ca:	2301      	movs	r3, #1
 80302cc:	60fb      	str	r3, [r7, #12]
 80302ce:	e00b      	b.n	80302e8 <cmd_codec+0x5c>
		}
		else if ( strcmp( argv[2], "0" ) == 0 )
 80302d0:	683b      	ldr	r3, [r7, #0]
 80302d2:	3308      	adds	r3, #8
 80302d4:	681b      	ldr	r3, [r3, #0]
 80302d6:	492f      	ldr	r1, [pc, #188]	; (8030394 <cmd_codec+0x108>)
 80302d8:	4618      	mov	r0, r3
 80302da:	f7ef ff79 	bl	80201d0 <strcmp>
 80302de:	4603      	mov	r3, r0
 80302e0:	2b00      	cmp	r3, #0
 80302e2:	d101      	bne.n	80302e8 <cmd_codec+0x5c>
		{
			bOnOff = 0;
 80302e4:	2300      	movs	r3, #0
 80302e6:	60fb      	str	r3, [r7, #12]
		}
	}

	if ( strcmp( argv[1], "init" ) == 0 )
 80302e8:	683b      	ldr	r3, [r7, #0]
 80302ea:	3304      	adds	r3, #4
 80302ec:	681b      	ldr	r3, [r3, #0]
 80302ee:	492a      	ldr	r1, [pc, #168]	; (8030398 <cmd_codec+0x10c>)
 80302f0:	4618      	mov	r0, r3
 80302f2:	f7ef ff6d 	bl	80201d0 <strcmp>
 80302f6:	4603      	mov	r3, r0
 80302f8:	2b00      	cmp	r3, #0
 80302fa:	d108      	bne.n	803030e <cmd_codec+0x82>
	{
		//	Audio Init
		printf( "%s(%d) - init\n", __func__, __LINE__ );
 80302fc:	f240 229f 	movw	r2, #671	; 0x29f
 8030300:	4921      	ldr	r1, [pc, #132]	; (8030388 <cmd_codec+0xfc>)
 8030302:	4826      	ldr	r0, [pc, #152]	; (803039c <cmd_codec+0x110>)
 8030304:	f006 ffc6 	bl	8037294 <iprintf>

		AudioInit();
 8030308:	f7ff fc0c 	bl	802fb24 <AudioInit>
 803030c:	e036      	b.n	803037c <cmd_codec+0xf0>
	}
	else if ( strcmp( argv[1], "mute" ) == 0 )
 803030e:	683b      	ldr	r3, [r7, #0]
 8030310:	3304      	adds	r3, #4
 8030312:	681b      	ldr	r3, [r3, #0]
 8030314:	4922      	ldr	r1, [pc, #136]	; (80303a0 <cmd_codec+0x114>)
 8030316:	4618      	mov	r0, r3
 8030318:	f7ef ff5a 	bl	80201d0 <strcmp>
 803031c:	4603      	mov	r3, r0
 803031e:	2b00      	cmp	r3, #0
 8030320:	d10c      	bne.n	803033c <cmd_codec+0xb0>
	{
		//	Audio Output Sine Wave
		printf( "%s(%d) - %s(%d)\n", __func__, __LINE__, argv[1], bOnOff );
 8030322:	683b      	ldr	r3, [r7, #0]
 8030324:	3304      	adds	r3, #4
 8030326:	681a      	ldr	r2, [r3, #0]
 8030328:	68fb      	ldr	r3, [r7, #12]
 803032a:	9300      	str	r3, [sp, #0]
 803032c:	4613      	mov	r3, r2
 803032e:	f240 22a6 	movw	r2, #678	; 0x2a6
 8030332:	4915      	ldr	r1, [pc, #84]	; (8030388 <cmd_codec+0xfc>)
 8030334:	481b      	ldr	r0, [pc, #108]	; (80303a4 <cmd_codec+0x118>)
 8030336:	f006 ffad 	bl	8037294 <iprintf>
 803033a:	e01f      	b.n	803037c <cmd_codec+0xf0>

//		CodecMuteDAC( bOnOff );
	}
	else if ( strcmp( argv[1], "loop" ) == 0 )
 803033c:	683b      	ldr	r3, [r7, #0]
 803033e:	3304      	adds	r3, #4
 8030340:	681b      	ldr	r3, [r3, #0]
 8030342:	4919      	ldr	r1, [pc, #100]	; (80303a8 <cmd_codec+0x11c>)
 8030344:	4618      	mov	r0, r3
 8030346:	f7ef ff43 	bl	80201d0 <strcmp>
 803034a:	4603      	mov	r3, r0
 803034c:	2b00      	cmp	r3, #0
 803034e:	d10c      	bne.n	803036a <cmd_codec+0xde>
	{
		//	Audio Codec Loopback
		printf( "%s(%d) - %s(%d)\n", __func__, __LINE__, argv[1], bOnOff );
 8030350:	683b      	ldr	r3, [r7, #0]
 8030352:	3304      	adds	r3, #4
 8030354:	681a      	ldr	r2, [r3, #0]
 8030356:	68fb      	ldr	r3, [r7, #12]
 8030358:	9300      	str	r3, [sp, #0]
 803035a:	4613      	mov	r3, r2
 803035c:	f240 22ad 	movw	r2, #685	; 0x2ad
 8030360:	4909      	ldr	r1, [pc, #36]	; (8030388 <cmd_codec+0xfc>)
 8030362:	4810      	ldr	r0, [pc, #64]	; (80303a4 <cmd_codec+0x118>)
 8030364:	f006 ff96 	bl	8037294 <iprintf>
 8030368:	e008      	b.n	803037c <cmd_codec+0xf0>

//		CodecLoopback( bOnOff );
	}
	else
	{
		printf( "%s(%d) - Invalid Cmd : %s\n", __func__, __LINE__, argv[1] );
 803036a:	683b      	ldr	r3, [r7, #0]
 803036c:	3304      	adds	r3, #4
 803036e:	681b      	ldr	r3, [r3, #0]
 8030370:	f240 22b3 	movw	r2, #691	; 0x2b3
 8030374:	4904      	ldr	r1, [pc, #16]	; (8030388 <cmd_codec+0xfc>)
 8030376:	480d      	ldr	r0, [pc, #52]	; (80303ac <cmd_codec+0x120>)
 8030378:	f006 ff8c 	bl	8037294 <iprintf>
	}

	return 1;
 803037c:	2301      	movs	r3, #1
}
 803037e:	4618      	mov	r0, r3
 8030380:	3710      	adds	r7, #16
 8030382:	46bd      	mov	sp, r7
 8030384:	bd80      	pop	{r7, pc}
 8030386:	bf00      	nop
 8030388:	0804187c 	.word	0x0804187c
 803038c:	08039a24 	.word	0x08039a24
 8030390:	08039af8 	.word	0x08039af8
 8030394:	08039afc 	.word	0x08039afc
 8030398:	08039b00 	.word	0x08039b00
 803039c:	08039b08 	.word	0x08039b08
 80303a0:	08039b18 	.word	0x08039b18
 80303a4:	08039b20 	.word	0x08039b20
 80303a8:	08039a78 	.word	0x08039a78
 80303ac:	08039adc 	.word	0x08039adc

080303b0 <JumpToSTBootloader>:
}

//========================================================================
void JumpToSTBootloader(void)
//========================================================================
{
 80303b0:	b580      	push	{r7, lr}
 80303b2:	b084      	sub	sp, #16
 80303b4:	af00      	add	r7, sp, #0
  pFunction JumpToApplication;
  uint32_t JumpAddress;

  //========================================================================
  //	Disable Watchdog
  MX_IWDG_Disable();
 80303b6:	f7f0 f92b 	bl	8020610 <MX_IWDG_Disable>
  //========================================================================

  /* Disable all interrupts, clocks and PLLs */
  HAL_RCC_DeInit();
 80303ba:	f7f7 f9f5 	bl	80277a8 <HAL_RCC_DeInit>
  __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();

#endif

  /* Jump to system memory */
  JumpAddress = *(__IO uint32_t*) (SYS_MEM_ADDRESS + 4);
 80303be:	4b09      	ldr	r3, [pc, #36]	; (80303e4 <JumpToSTBootloader+0x34>)
 80303c0:	681b      	ldr	r3, [r3, #0]
 80303c2:	60fb      	str	r3, [r7, #12]
  JumpToApplication = (pFunction) JumpAddress;
 80303c4:	68fb      	ldr	r3, [r7, #12]
 80303c6:	60bb      	str	r3, [r7, #8]
  /* Initialize user application's Stack Pointer */
  __set_MSP(*(__IO uint32_t*) SYS_MEM_ADDRESS);
 80303c8:	4b07      	ldr	r3, [pc, #28]	; (80303e8 <JumpToSTBootloader+0x38>)
 80303ca:	681b      	ldr	r3, [r3, #0]
 80303cc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80303ce:	687b      	ldr	r3, [r7, #4]
 80303d0:	f383 8808 	msr	MSP, r3
}
 80303d4:	bf00      	nop
  JumpToApplication();
 80303d6:	68bb      	ldr	r3, [r7, #8]
 80303d8:	4798      	blx	r3
}
 80303da:	bf00      	nop
 80303dc:	3710      	adds	r7, #16
 80303de:	46bd      	mov	sp, r7
 80303e0:	bd80      	pop	{r7, pc}
 80303e2:	bf00      	nop
 80303e4:	1fff0004 	.word	0x1fff0004
 80303e8:	1fff0000 	.word	0x1fff0000

080303ec <DispDFUMode>:

//========================================================================
void	DispDFUMode( void )
//========================================================================
{
 80303ec:	b580      	push	{r7, lr}
 80303ee:	af00      	add	r7, sp, #0
	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c3, (uint16_t)( SSD1306_I2C_ADDRESS ), 2, 2 ) )
 80303f0:	2302      	movs	r3, #2
 80303f2:	2202      	movs	r2, #2
 80303f4:	2178      	movs	r1, #120	; 0x78
 80303f6:	4808      	ldr	r0, [pc, #32]	; (8030418 <DispDFUMode+0x2c>)
 80303f8:	f7f3 fe3e 	bl	8024078 <HAL_I2C_IsDeviceReady>
 80303fc:	4603      	mov	r3, r0
 80303fe:	2b00      	cmp	r3, #0
 8030400:	d108      	bne.n	8030414 <DispDFUMode+0x28>
	{
		//  화면 Clear
		LCDClear();
 8030402:	f7fc fb09 	bl	802ca18 <LCDClear>

		LCDSetCursor( 0, 13 );
 8030406:	210d      	movs	r1, #13
 8030408:	2000      	movs	r0, #0
 803040a:	f7fc fa89 	bl	802c920 <LCDSetCursor>
//		LCDPrintf( "DFU Mode" );
		LCDPrintf( "USB Upgrade Mode" );
 803040e:	4803      	ldr	r0, [pc, #12]	; (803041c <DispDFUMode+0x30>)
 8030410:	f7fc fab6 	bl	802c980 <LCDPrintf>
	}
}
 8030414:	bf00      	nop
 8030416:	bd80      	pop	{r7, pc}
 8030418:	20000e8c 	.word	0x20000e8c
 803041c:	08039b4c 	.word	0x08039b4c

08030420 <cmd_stboot>:


//========================================================================
int cmd_stboot(int argc, char *argv[])
//========================================================================
{
 8030420:	b580      	push	{r7, lr}
 8030422:	b082      	sub	sp, #8
 8030424:	af00      	add	r7, sp, #0
 8030426:	6078      	str	r0, [r7, #4]
 8030428:	6039      	str	r1, [r7, #0]
	printf( "Jump To STM32 Bootloader\n" );
 803042a:	4806      	ldr	r0, [pc, #24]	; (8030444 <cmd_stboot+0x24>)
 803042c:	f006 ffce 	bl	80373cc <puts>

	DispDFUMode();
 8030430:	f7ff ffdc 	bl	80303ec <DispDFUMode>

	JumpToSTBootloader();
 8030434:	f7ff ffbc 	bl	80303b0 <JumpToSTBootloader>

	return 0;
 8030438:	2300      	movs	r3, #0
}
 803043a:	4618      	mov	r0, r3
 803043c:	3708      	adds	r7, #8
 803043e:	46bd      	mov	sp, r7
 8030440:	bd80      	pop	{r7, pc}
 8030442:	bf00      	nop
 8030444:	08039d20 	.word	0x08039d20

08030448 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8030448:	b480      	push	{r7}
 803044a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 803044c:	f3bf 8f4f 	dsb	sy
}
 8030450:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8030452:	4b06      	ldr	r3, [pc, #24]	; (803046c <__NVIC_SystemReset+0x24>)
 8030454:	68db      	ldr	r3, [r3, #12]
 8030456:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 803045a:	4904      	ldr	r1, [pc, #16]	; (803046c <__NVIC_SystemReset+0x24>)
 803045c:	4b04      	ldr	r3, [pc, #16]	; (8030470 <__NVIC_SystemReset+0x28>)
 803045e:	4313      	orrs	r3, r2
 8030460:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8030462:	f3bf 8f4f 	dsb	sy
}
 8030466:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8030468:	bf00      	nop
 803046a:	e7fd      	b.n	8030468 <__NVIC_SystemReset+0x20>
 803046c:	e000ed00 	.word	0xe000ed00
 8030470:	05fa0004 	.word	0x05fa0004

08030474 <a2hex>:
}

//========================================================================
int 	a2hex(char *pv)
//========================================================================
{
 8030474:	b580      	push	{r7, lr}
 8030476:	b084      	sub	sp, #16
 8030478:	af00      	add	r7, sp, #0
 803047a:	6078      	str	r0, [r7, #4]
	char **pos=NULL;
 803047c:	2300      	movs	r3, #0
 803047e:	60fb      	str	r3, [r7, #12]

	return strtol(pv, pos, 16 );
 8030480:	2210      	movs	r2, #16
 8030482:	68f9      	ldr	r1, [r7, #12]
 8030484:	6878      	ldr	r0, [r7, #4]
 8030486:	f007 fa8d 	bl	80379a4 <strtol>
 803048a:	4603      	mov	r3, r0
}
 803048c:	4618      	mov	r0, r3
 803048e:	3710      	adds	r7, #16
 8030490:	46bd      	mov	sp, r7
 8030492:	bd80      	pop	{r7, pc}

08030494 <getarg>:
 * parse cmd & argument, return argc
 */
//========================================================================
int getarg(char *buffer, char *argv[])
//========================================================================
{
 8030494:	b580      	push	{r7, lr}
 8030496:	b086      	sub	sp, #24
 8030498:	af00      	add	r7, sp, #0
 803049a:	6078      	str	r0, [r7, #4]
 803049c:	6039      	str	r1, [r7, #0]
	int		argc;
	char	*p;
	char	*sepchr = " \t";
 803049e:	4b14      	ldr	r3, [pc, #80]	; (80304f0 <getarg+0x5c>)
 80304a0:	60fb      	str	r3, [r7, #12]
	char	*saveptr;

#define	MAXP	20

	p = (char *)strtok_r(buffer, sepchr, &saveptr);
 80304a2:	f107 0308 	add.w	r3, r7, #8
 80304a6:	461a      	mov	r2, r3
 80304a8:	68f9      	ldr	r1, [r7, #12]
 80304aa:	6878      	ldr	r0, [r7, #4]
 80304ac:	f007 f9f2 	bl	8037894 <strtok_r>
 80304b0:	6138      	str	r0, [r7, #16]

	for ( argc = 0; argc < MAXP && p != NULL; p = (char *)strtok_r( NULL, sepchr, &saveptr ) )
 80304b2:	2300      	movs	r3, #0
 80304b4:	617b      	str	r3, [r7, #20]
 80304b6:	e00f      	b.n	80304d8 <getarg+0x44>
	{
//		printf( "%s(%d) - %s\n", __func__, __LINE__, p );
		argv[argc++] = p;
 80304b8:	697b      	ldr	r3, [r7, #20]
 80304ba:	1c5a      	adds	r2, r3, #1
 80304bc:	617a      	str	r2, [r7, #20]
 80304be:	009b      	lsls	r3, r3, #2
 80304c0:	683a      	ldr	r2, [r7, #0]
 80304c2:	4413      	add	r3, r2
 80304c4:	693a      	ldr	r2, [r7, #16]
 80304c6:	601a      	str	r2, [r3, #0]
	for ( argc = 0; argc < MAXP && p != NULL; p = (char *)strtok_r( NULL, sepchr, &saveptr ) )
 80304c8:	f107 0308 	add.w	r3, r7, #8
 80304cc:	461a      	mov	r2, r3
 80304ce:	68f9      	ldr	r1, [r7, #12]
 80304d0:	2000      	movs	r0, #0
 80304d2:	f007 f9df 	bl	8037894 <strtok_r>
 80304d6:	6138      	str	r0, [r7, #16]
 80304d8:	697b      	ldr	r3, [r7, #20]
 80304da:	2b13      	cmp	r3, #19
 80304dc:	dc02      	bgt.n	80304e4 <getarg+0x50>
 80304de:	693b      	ldr	r3, [r7, #16]
 80304e0:	2b00      	cmp	r3, #0
 80304e2:	d1e9      	bne.n	80304b8 <getarg+0x24>
	}

	return argc;
 80304e4:	697b      	ldr	r3, [r7, #20]
}
 80304e6:	4618      	mov	r0, r3
 80304e8:	3718      	adds	r7, #24
 80304ea:	46bd      	mov	sp, r7
 80304ec:	bd80      	pop	{r7, pc}
 80304ee:	bf00      	nop
 80304f0:	0803a2d4 	.word	0x0803a2d4

080304f4 <ProcessCommand>:

//========================================================================
int ProcessCommand( char *cmd )
//========================================================================
{
 80304f4:	b580      	push	{r7, lr}
 80304f6:	b0b0      	sub	sp, #192	; 0xc0
 80304f8:	af00      	add	r7, sp, #0
 80304fa:	6078      	str	r0, [r7, #4]
	char	*argv[MAXP];
	int		argc;
	char	*p;
	int		v = 0;
 80304fc:	2300      	movs	r3, #0
 80304fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int		i;
	char	temp[80];
	char	upstr[4] = { 0x1b, '[', 'A', 0 };
 8030502:	4b85      	ldr	r3, [pc, #532]	; (8030718 <ProcessCommand+0x224>)
 8030504:	60fb      	str	r3, [r7, #12]

	if ( strcmp( "!!", cmd ) == 0 || strcmp( cmd, upstr ) == 0 )
 8030506:	6879      	ldr	r1, [r7, #4]
 8030508:	4884      	ldr	r0, [pc, #528]	; (803071c <ProcessCommand+0x228>)
 803050a:	f7ef fe61 	bl	80201d0 <strcmp>
 803050e:	4603      	mov	r3, r0
 8030510:	2b00      	cmp	r3, #0
 8030512:	d008      	beq.n	8030526 <ProcessCommand+0x32>
 8030514:	f107 030c 	add.w	r3, r7, #12
 8030518:	4619      	mov	r1, r3
 803051a:	6878      	ldr	r0, [r7, #4]
 803051c:	f7ef fe58 	bl	80201d0 <strcmp>
 8030520:	4603      	mov	r3, r0
 8030522:	2b00      	cmp	r3, #0
 8030524:	d10a      	bne.n	803053c <ProcessCommand+0x48>
	{
		strcpy( temp, old_cmd );
 8030526:	f107 0310 	add.w	r3, r7, #16
 803052a:	497d      	ldr	r1, [pc, #500]	; (8030720 <ProcessCommand+0x22c>)
 803052c:	4618      	mov	r0, r3
 803052e:	f007 f981 	bl	8037834 <strcpy>
		strcpy( cmd, old_cmd );
 8030532:	497b      	ldr	r1, [pc, #492]	; (8030720 <ProcessCommand+0x22c>)
 8030534:	6878      	ldr	r0, [r7, #4]
 8030536:	f007 f97d 	bl	8037834 <strcpy>
 803053a:	e005      	b.n	8030548 <ProcessCommand+0x54>
	}
	else
	{
		strcpy( temp, cmd );
 803053c:	f107 0310 	add.w	r3, r7, #16
 8030540:	6879      	ldr	r1, [r7, #4]
 8030542:	4618      	mov	r0, r3
 8030544:	f007 f976 	bl	8037834 <strcpy>
	}

	memset( argv, 0, sizeof( argv ) );
 8030548:	f107 0360 	add.w	r3, r7, #96	; 0x60
 803054c:	2250      	movs	r2, #80	; 0x50
 803054e:	2100      	movs	r1, #0
 8030550:	4618      	mov	r0, r3
 8030552:	f006 fdb7 	bl	80370c4 <memset>

	// ignore after # char
	p = (char *)strchr( cmd, '#' );
 8030556:	2123      	movs	r1, #35	; 0x23
 8030558:	6878      	ldr	r0, [r7, #4]
 803055a:	f007 f95e 	bl	803781a <strchr>
 803055e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	if ( p )
 8030562:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8030566:	2b00      	cmp	r3, #0
 8030568:	d003      	beq.n	8030572 <ProcessCommand+0x7e>
	{
		*p = (char)NULL;
 803056a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 803056e:	2200      	movs	r2, #0
 8030570:	701a      	strb	r2, [r3, #0]
	}

	// 명령라인을 arg,argv 로 분해
	argc = getarg( cmd, argv );
 8030572:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8030576:	4619      	mov	r1, r3
 8030578:	6878      	ldr	r0, [r7, #4]
 803057a:	f7ff ff8b 	bl	8030494 <getarg>
 803057e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

//	printf( "%s(%d) - argc(%d) / argv(%s)\n", __func__, __LINE__, argc, argv[0] );

	if ( argc != 0 )
 8030582:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8030586:	2b00      	cmp	r3, #0
 8030588:	f000 80c1 	beq.w	803070e <ProcessCommand+0x21a>
	{

		// md/mm 등에 따르는 "[.b|.w|.l]에 대한 처리
		p = strchr( argv[0], '.' );
 803058c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803058e:	212e      	movs	r1, #46	; 0x2e
 8030590:	4618      	mov	r0, r3
 8030592:	f007 f942 	bl	803781a <strchr>
 8030596:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if ( p != NULL )
 803059a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 803059e:	2b00      	cmp	r3, #0
 80305a0:	d021      	beq.n	80305e6 <ProcessCommand+0xf2>
		{
			if ( p[1] == 'b' )
 80305a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80305a6:	3301      	adds	r3, #1
 80305a8:	781b      	ldrb	r3, [r3, #0]
 80305aa:	2b62      	cmp	r3, #98	; 0x62
 80305ac:	d103      	bne.n	80305b6 <ProcessCommand+0xc2>
			{
				data_option = 1;
 80305ae:	4b5d      	ldr	r3, [pc, #372]	; (8030724 <ProcessCommand+0x230>)
 80305b0:	2201      	movs	r2, #1
 80305b2:	601a      	str	r2, [r3, #0]
 80305b4:	e012      	b.n	80305dc <ProcessCommand+0xe8>
			}
			else if ( p[1] == 'w' )
 80305b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80305ba:	3301      	adds	r3, #1
 80305bc:	781b      	ldrb	r3, [r3, #0]
 80305be:	2b77      	cmp	r3, #119	; 0x77
 80305c0:	d103      	bne.n	80305ca <ProcessCommand+0xd6>
			{
				data_option = 2;
 80305c2:	4b58      	ldr	r3, [pc, #352]	; (8030724 <ProcessCommand+0x230>)
 80305c4:	2202      	movs	r2, #2
 80305c6:	601a      	str	r2, [r3, #0]
 80305c8:	e008      	b.n	80305dc <ProcessCommand+0xe8>
			}
			else if ( p[1] == 'l' )
 80305ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80305ce:	3301      	adds	r3, #1
 80305d0:	781b      	ldrb	r3, [r3, #0]
 80305d2:	2b6c      	cmp	r3, #108	; 0x6c
 80305d4:	d102      	bne.n	80305dc <ProcessCommand+0xe8>
			{
				data_option = 4;
 80305d6:	4b53      	ldr	r3, [pc, #332]	; (8030724 <ProcessCommand+0x230>)
 80305d8:	2204      	movs	r2, #4
 80305da:	601a      	str	r2, [r3, #0]
			}
			*p = (char)NULL;
 80305dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80305e0:	2200      	movs	r2, #0
 80305e2:	701a      	strb	r2, [r3, #0]
 80305e4:	e002      	b.n	80305ec <ProcessCommand+0xf8>
		}
		else
		{
			//	default
			data_option = 1;
 80305e6:	4b4f      	ldr	r3, [pc, #316]	; (8030724 <ProcessCommand+0x230>)
 80305e8:	2201      	movs	r2, #1
 80305ea:	601a      	str	r2, [r3, #0]
		}

		// 명령을 table에서 찾아서 
		for ( i = 0; i < NELEMENTS( user_command_table ); i++ )
 80305ec:	2300      	movs	r3, #0
 80305ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80305f2:	e078      	b.n	80306e6 <ProcessCommand+0x1f2>
		{
			if ( strcmp( argv[0], user_command_table[i].command_name ) == 0 )
 80305f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80305f6:	494c      	ldr	r1, [pc, #304]	; (8030728 <ProcessCommand+0x234>)
 80305f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80305fc:	011b      	lsls	r3, r3, #4
 80305fe:	440b      	add	r3, r1
 8030600:	681b      	ldr	r3, [r3, #0]
 8030602:	4619      	mov	r1, r3
 8030604:	4610      	mov	r0, r2
 8030606:	f7ef fde3 	bl	80201d0 <strcmp>
 803060a:	4603      	mov	r3, r0
 803060c:	2b00      	cmp	r3, #0
 803060e:	d165      	bne.n	80306dc <ProcessCommand+0x1e8>
			{
				if ( argc >= 2 )
 8030610:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8030614:	2b01      	cmp	r3, #1
 8030616:	dd30      	ble.n	803067a <ProcessCommand+0x186>
				{
					if ( (strcmp( argv[1], "help" ) == 0) || (strcmp( argv[1], "-h" ) == 0) )
 8030618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803061a:	4944      	ldr	r1, [pc, #272]	; (803072c <ProcessCommand+0x238>)
 803061c:	4618      	mov	r0, r3
 803061e:	f7ef fdd7 	bl	80201d0 <strcmp>
 8030622:	4603      	mov	r3, r0
 8030624:	2b00      	cmp	r3, #0
 8030626:	d007      	beq.n	8030638 <ProcessCommand+0x144>
 8030628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803062a:	4941      	ldr	r1, [pc, #260]	; (8030730 <ProcessCommand+0x23c>)
 803062c:	4618      	mov	r0, r3
 803062e:	f7ef fdcf 	bl	80201d0 <strcmp>
 8030632:	4603      	mov	r3, r0
 8030634:	2b00      	cmp	r3, #0
 8030636:	d120      	bne.n	803067a <ProcessCommand+0x186>
					{
						printf( "%s\n", user_command_table[i].command_help1 );
 8030638:	4a3b      	ldr	r2, [pc, #236]	; (8030728 <ProcessCommand+0x234>)
 803063a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 803063e:	011b      	lsls	r3, r3, #4
 8030640:	4413      	add	r3, r2
 8030642:	3304      	adds	r3, #4
 8030644:	681b      	ldr	r3, [r3, #0]
 8030646:	4618      	mov	r0, r3
 8030648:	f006 fec0 	bl	80373cc <puts>
						if ( user_command_table[i].command_help2 != NULL )
 803064c:	4a36      	ldr	r2, [pc, #216]	; (8030728 <ProcessCommand+0x234>)
 803064e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8030652:	011b      	lsls	r3, r3, #4
 8030654:	4413      	add	r3, r2
 8030656:	3308      	adds	r3, #8
 8030658:	681b      	ldr	r3, [r3, #0]
 803065a:	2b00      	cmp	r3, #0
 803065c:	d009      	beq.n	8030672 <ProcessCommand+0x17e>
						{
							printf( "%s\n", user_command_table[i].command_help2 );
 803065e:	4a32      	ldr	r2, [pc, #200]	; (8030728 <ProcessCommand+0x234>)
 8030660:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8030664:	011b      	lsls	r3, r3, #4
 8030666:	4413      	add	r3, r2
 8030668:	3308      	adds	r3, #8
 803066a:	681b      	ldr	r3, [r3, #0]
 803066c:	4618      	mov	r0, r3
 803066e:	f006 fead 	bl	80373cc <puts>
						}
						v = 1;
 8030672:	2301      	movs	r3, #1
 8030674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						break;
 8030678:	e039      	b.n	80306ee <ProcessCommand+0x1fa>
					}
				}
				// 처리함수를 호출
				if ( user_command_table[i].func( argc, argv ) < 0 )
 803067a:	4a2b      	ldr	r2, [pc, #172]	; (8030728 <ProcessCommand+0x234>)
 803067c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8030680:	011b      	lsls	r3, r3, #4
 8030682:	4413      	add	r3, r2
 8030684:	330c      	adds	r3, #12
 8030686:	681b      	ldr	r3, [r3, #0]
 8030688:	f107 0260 	add.w	r2, r7, #96	; 0x60
 803068c:	4611      	mov	r1, r2
 803068e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8030692:	4798      	blx	r3
 8030694:	4603      	mov	r3, r0
 8030696:	2b00      	cmp	r3, #0
 8030698:	da1c      	bge.n	80306d4 <ProcessCommand+0x1e0>
				{
					printf( "%s\n", user_command_table[i].command_help1 );
 803069a:	4a23      	ldr	r2, [pc, #140]	; (8030728 <ProcessCommand+0x234>)
 803069c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80306a0:	011b      	lsls	r3, r3, #4
 80306a2:	4413      	add	r3, r2
 80306a4:	3304      	adds	r3, #4
 80306a6:	681b      	ldr	r3, [r3, #0]
 80306a8:	4618      	mov	r0, r3
 80306aa:	f006 fe8f 	bl	80373cc <puts>
					if ( user_command_table[i].command_help2 != NULL )
 80306ae:	4a1e      	ldr	r2, [pc, #120]	; (8030728 <ProcessCommand+0x234>)
 80306b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80306b4:	011b      	lsls	r3, r3, #4
 80306b6:	4413      	add	r3, r2
 80306b8:	3308      	adds	r3, #8
 80306ba:	681b      	ldr	r3, [r3, #0]
 80306bc:	2b00      	cmp	r3, #0
 80306be:	d009      	beq.n	80306d4 <ProcessCommand+0x1e0>
					{
						printf( "%s\n", user_command_table[i].command_help2 );
 80306c0:	4a19      	ldr	r2, [pc, #100]	; (8030728 <ProcessCommand+0x234>)
 80306c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80306c6:	011b      	lsls	r3, r3, #4
 80306c8:	4413      	add	r3, r2
 80306ca:	3308      	adds	r3, #8
 80306cc:	681b      	ldr	r3, [r3, #0]
 80306ce:	4618      	mov	r0, r3
 80306d0:	f006 fe7c 	bl	80373cc <puts>
					}
				}
				v = 1;	// 명령을 찾아서 처리했음을 표시
 80306d4:	2301      	movs	r3, #1
 80306d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				break;
 80306da:	e008      	b.n	80306ee <ProcessCommand+0x1fa>
		for ( i = 0; i < NELEMENTS( user_command_table ); i++ )
 80306dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80306e0:	3301      	adds	r3, #1
 80306e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80306e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80306ea:	2b19      	cmp	r3, #25
 80306ec:	d982      	bls.n	80305f4 <ProcessCommand+0x100>
			}
		}
		if ( v == 0 )
 80306ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80306f2:	2b00      	cmp	r3, #0
 80306f4:	d105      	bne.n	8030702 <ProcessCommand+0x20e>
		{
			// 엉뚱하게 입력한 경우
			printf( "%s: command not found\n\r", argv[0] );
 80306f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80306f8:	4619      	mov	r1, r3
 80306fa:	480e      	ldr	r0, [pc, #56]	; (8030734 <ProcessCommand+0x240>)
 80306fc:	f006 fdca 	bl	8037294 <iprintf>
 8030700:	e005      	b.n	803070e <ProcessCommand+0x21a>
		}
		else
		{
			// !! 처리를 위해서 old_cmd로 명령 복사
			strcpy( old_cmd, temp );
 8030702:	f107 0310 	add.w	r3, r7, #16
 8030706:	4619      	mov	r1, r3
 8030708:	4805      	ldr	r0, [pc, #20]	; (8030720 <ProcessCommand+0x22c>)
 803070a:	f007 f893 	bl	8037834 <strcpy>
		}
	}

	return 1;
 803070e:	2301      	movs	r3, #1
}
 8030710:	4618      	mov	r0, r3
 8030712:	37c0      	adds	r7, #192	; 0xc0
 8030714:	46bd      	mov	sp, r7
 8030716:	bd80      	pop	{r7, pc}
 8030718:	00415b1b 	.word	0x00415b1b
 803071c:	0803a2d8 	.word	0x0803a2d8
 8030720:	20002260 	.word	0x20002260
 8030724:	20000644 	.word	0x20000644
 8030728:	20000648 	.word	0x20000648
 803072c:	08039d58 	.word	0x08039d58
 8030730:	0803a2dc 	.word	0x0803a2dc
 8030734:	0803a2e0 	.word	0x0803a2e0

08030738 <readline>:
static int		command_index = 0;

//========================================================================
int readline( char *bufp )
//========================================================================
{
 8030738:	b580      	push	{r7, lr}
 803073a:	b086      	sub	sp, #24
 803073c:	af00      	add	r7, sp, #0
 803073e:	6078      	str	r0, [r7, #4]
	//	printf( "%s\n", __func__ );

	char	ch;
	char	*command_buf = bufp;	//[MAX_COMMAND_LENGTH];
 8030740:	687b      	ldr	r3, [r7, #4]
 8030742:	617b      	str	r3, [r7, #20]

	int		ret = 0;
 8030744:	2300      	movs	r3, #0
 8030746:	613b      	str	r3, [r7, #16]

	for ( ;;)
	{
		ch = getchar();
 8030748:	f006 fc58 	bl	8036ffc <getchar>
 803074c:	4603      	mov	r3, r0
 803074e:	73fb      	strb	r3, [r7, #15]

#if defined(USE_FREERTOS)
#else
		if ( ch == (char)-1 )
 8030750:	7bfb      	ldrb	r3, [r7, #15]
 8030752:	2bff      	cmp	r3, #255	; 0xff
 8030754:	d102      	bne.n	803075c <readline+0x24>
		{
			//	Input Data가 없는 경우 ( Non-Blocking - OS less )
			return -1;
 8030756:	f04f 33ff 	mov.w	r3, #4294967295
 803075a:	e09e      	b.n	803089a <readline+0x162>
		}
#endif

		if ( ch == 0x08 || ch == 0x7F )	// Backspace
 803075c:	7bfb      	ldrb	r3, [r7, #15]
 803075e:	2b08      	cmp	r3, #8
 8030760:	d002      	beq.n	8030768 <readline+0x30>
 8030762:	7bfb      	ldrb	r3, [r7, #15]
 8030764:	2b7f      	cmp	r3, #127	; 0x7f
 8030766:	d10f      	bne.n	8030788 <readline+0x50>
		{
			if ( command_index > 0 )
 8030768:	4b4e      	ldr	r3, [pc, #312]	; (80308a4 <readline+0x16c>)
 803076a:	681b      	ldr	r3, [r3, #0]
 803076c:	2b00      	cmp	r3, #0
 803076e:	f340 8093 	ble.w	8030898 <readline+0x160>
			{
				printf( "%c %c", 8, 8 );
 8030772:	2208      	movs	r2, #8
 8030774:	2108      	movs	r1, #8
 8030776:	484c      	ldr	r0, [pc, #304]	; (80308a8 <readline+0x170>)
 8030778:	f006 fd8c 	bl	8037294 <iprintf>
				command_index--;
 803077c:	4b49      	ldr	r3, [pc, #292]	; (80308a4 <readline+0x16c>)
 803077e:	681b      	ldr	r3, [r3, #0]
 8030780:	3b01      	subs	r3, #1
 8030782:	4a48      	ldr	r2, [pc, #288]	; (80308a4 <readline+0x16c>)
 8030784:	6013      	str	r3, [r2, #0]
			if ( command_index > 0 )
 8030786:	e087      	b.n	8030898 <readline+0x160>
			}
		}
		else if ( ch == 0x15 )			// control-u, all input clear
 8030788:	7bfb      	ldrb	r3, [r7, #15]
 803078a:	2b15      	cmp	r3, #21
 803078c:	d10f      	bne.n	80307ae <readline+0x76>
		{
			while ( 0 < command_index )
 803078e:	e009      	b.n	80307a4 <readline+0x6c>
			{
				printf( "%c %c", 8, 8 );
 8030790:	2208      	movs	r2, #8
 8030792:	2108      	movs	r1, #8
 8030794:	4844      	ldr	r0, [pc, #272]	; (80308a8 <readline+0x170>)
 8030796:	f006 fd7d 	bl	8037294 <iprintf>
				command_index--;
 803079a:	4b42      	ldr	r3, [pc, #264]	; (80308a4 <readline+0x16c>)
 803079c:	681b      	ldr	r3, [r3, #0]
 803079e:	3b01      	subs	r3, #1
 80307a0:	4a40      	ldr	r2, [pc, #256]	; (80308a4 <readline+0x16c>)
 80307a2:	6013      	str	r3, [r2, #0]
			while ( 0 < command_index )
 80307a4:	4b3f      	ldr	r3, [pc, #252]	; (80308a4 <readline+0x16c>)
 80307a6:	681b      	ldr	r3, [r3, #0]
 80307a8:	2b00      	cmp	r3, #0
 80307aa:	dcf1      	bgt.n	8030790 <readline+0x58>
 80307ac:	e7cc      	b.n	8030748 <readline+0x10>
			}
		}
		else if ( ch == 0x17 )			// control-w, erase one word
 80307ae:	7bfb      	ldrb	r3, [r7, #15]
 80307b0:	2b17      	cmp	r3, #23
 80307b2:	d12e      	bne.n	8030812 <readline+0xda>
		{
			/* erase space */
			while ( (0 < command_index) && (command_buf[command_index] == ' ') ) {
 80307b4:	e009      	b.n	80307ca <readline+0x92>
				printf( "%c %c", 8, 8 );
 80307b6:	2208      	movs	r2, #8
 80307b8:	2108      	movs	r1, #8
 80307ba:	483b      	ldr	r0, [pc, #236]	; (80308a8 <readline+0x170>)
 80307bc:	f006 fd6a 	bl	8037294 <iprintf>
				command_index--;
 80307c0:	4b38      	ldr	r3, [pc, #224]	; (80308a4 <readline+0x16c>)
 80307c2:	681b      	ldr	r3, [r3, #0]
 80307c4:	3b01      	subs	r3, #1
 80307c6:	4a37      	ldr	r2, [pc, #220]	; (80308a4 <readline+0x16c>)
 80307c8:	6013      	str	r3, [r2, #0]
			while ( (0 < command_index) && (command_buf[command_index] == ' ') ) {
 80307ca:	4b36      	ldr	r3, [pc, #216]	; (80308a4 <readline+0x16c>)
 80307cc:	681b      	ldr	r3, [r3, #0]
 80307ce:	2b00      	cmp	r3, #0
 80307d0:	dd12      	ble.n	80307f8 <readline+0xc0>
 80307d2:	4b34      	ldr	r3, [pc, #208]	; (80308a4 <readline+0x16c>)
 80307d4:	681b      	ldr	r3, [r3, #0]
 80307d6:	461a      	mov	r2, r3
 80307d8:	697b      	ldr	r3, [r7, #20]
 80307da:	4413      	add	r3, r2
 80307dc:	781b      	ldrb	r3, [r3, #0]
 80307de:	2b20      	cmp	r3, #32
 80307e0:	d0e9      	beq.n	80307b6 <readline+0x7e>
			}
			/* erase char not space */
			while ( (0 < command_index) && (command_buf[command_index] != ' ') ) {
 80307e2:	e009      	b.n	80307f8 <readline+0xc0>
				printf( "%c %c", 8, 8 );
 80307e4:	2208      	movs	r2, #8
 80307e6:	2108      	movs	r1, #8
 80307e8:	482f      	ldr	r0, [pc, #188]	; (80308a8 <readline+0x170>)
 80307ea:	f006 fd53 	bl	8037294 <iprintf>
				command_index--;
 80307ee:	4b2d      	ldr	r3, [pc, #180]	; (80308a4 <readline+0x16c>)
 80307f0:	681b      	ldr	r3, [r3, #0]
 80307f2:	3b01      	subs	r3, #1
 80307f4:	4a2b      	ldr	r2, [pc, #172]	; (80308a4 <readline+0x16c>)
 80307f6:	6013      	str	r3, [r2, #0]
			while ( (0 < command_index) && (command_buf[command_index] != ' ') ) {
 80307f8:	4b2a      	ldr	r3, [pc, #168]	; (80308a4 <readline+0x16c>)
 80307fa:	681b      	ldr	r3, [r3, #0]
 80307fc:	2b00      	cmp	r3, #0
 80307fe:	dda3      	ble.n	8030748 <readline+0x10>
 8030800:	4b28      	ldr	r3, [pc, #160]	; (80308a4 <readline+0x16c>)
 8030802:	681b      	ldr	r3, [r3, #0]
 8030804:	461a      	mov	r2, r3
 8030806:	697b      	ldr	r3, [r7, #20]
 8030808:	4413      	add	r3, r2
 803080a:	781b      	ldrb	r3, [r3, #0]
 803080c:	2b20      	cmp	r3, #32
 803080e:	d1e9      	bne.n	80307e4 <readline+0xac>
 8030810:	e79a      	b.n	8030748 <readline+0x10>
			}
		}
		else if ( (ch == 0x0D) || (ch == 0x0A) )
 8030812:	7bfb      	ldrb	r3, [r7, #15]
 8030814:	2b0d      	cmp	r3, #13
 8030816:	d002      	beq.n	803081e <readline+0xe6>
 8030818:	7bfb      	ldrb	r3, [r7, #15]
 803081a:	2b0a      	cmp	r3, #10
 803081c:	d111      	bne.n	8030842 <readline+0x10a>
		{
			printf( "\n\r" );
 803081e:	4823      	ldr	r0, [pc, #140]	; (80308ac <readline+0x174>)
 8030820:	f006 fd38 	bl	8037294 <iprintf>
			command_buf[command_index] = 0; // Null terminate the input command
 8030824:	4b1f      	ldr	r3, [pc, #124]	; (80308a4 <readline+0x16c>)
 8030826:	681b      	ldr	r3, [r3, #0]
 8030828:	461a      	mov	r2, r3
 803082a:	697b      	ldr	r3, [r7, #20]
 803082c:	4413      	add	r3, r2
 803082e:	2200      	movs	r2, #0
 8030830:	701a      	strb	r2, [r3, #0]

			ret = command_index;
 8030832:	4b1c      	ldr	r3, [pc, #112]	; (80308a4 <readline+0x16c>)
 8030834:	681b      	ldr	r3, [r3, #0]
 8030836:	613b      	str	r3, [r7, #16]
			command_index = 0;		//	입력후 index 초기화.
 8030838:	4b1a      	ldr	r3, [pc, #104]	; (80308a4 <readline+0x16c>)
 803083a:	2200      	movs	r2, #0
 803083c:	601a      	str	r2, [r3, #0]

			return ret;
 803083e:	693b      	ldr	r3, [r7, #16]
 8030840:	e02b      	b.n	803089a <readline+0x162>
		}
		else if ( (0x20 <= ch) && (ch <= 0x7E) )
 8030842:	7bfb      	ldrb	r3, [r7, #15]
 8030844:	2b1f      	cmp	r3, #31
 8030846:	d915      	bls.n	8030874 <readline+0x13c>
 8030848:	7bfb      	ldrb	r3, [r7, #15]
 803084a:	2b7e      	cmp	r3, #126	; 0x7e
 803084c:	d812      	bhi.n	8030874 <readline+0x13c>
		{
			//	ANSI 입력.
			if ( command_index < (MAX_COMMAND_LENGTH - 2) )
 803084e:	4b15      	ldr	r3, [pc, #84]	; (80308a4 <readline+0x16c>)
 8030850:	681b      	ldr	r3, [r3, #0]
 8030852:	2b3d      	cmp	r3, #61	; 0x3d
 8030854:	dc09      	bgt.n	803086a <readline+0x132>
			{
				command_buf[command_index++] = ch;
 8030856:	4b13      	ldr	r3, [pc, #76]	; (80308a4 <readline+0x16c>)
 8030858:	681b      	ldr	r3, [r3, #0]
 803085a:	1c5a      	adds	r2, r3, #1
 803085c:	4911      	ldr	r1, [pc, #68]	; (80308a4 <readline+0x16c>)
 803085e:	600a      	str	r2, [r1, #0]
 8030860:	461a      	mov	r2, r3
 8030862:	697b      	ldr	r3, [r7, #20]
 8030864:	4413      	add	r3, r2
 8030866:	7bfa      	ldrb	r2, [r7, #15]
 8030868:	701a      	strb	r2, [r3, #0]
			}
			printf( "%c", ch );    // Echo the character
 803086a:	7bfb      	ldrb	r3, [r7, #15]
 803086c:	4618      	mov	r0, r3
 803086e:	f006 fd29 	bl	80372c4 <putchar>
 8030872:	e011      	b.n	8030898 <readline+0x160>
//			printf( "[%02X]", ch );    // Echo the character
		}
		else 
		{
			//	한글입력.
			if ( command_index < ( MAX_COMMAND_LENGTH - 2 ) )
 8030874:	4b0b      	ldr	r3, [pc, #44]	; (80308a4 <readline+0x16c>)
 8030876:	681b      	ldr	r3, [r3, #0]
 8030878:	2b3d      	cmp	r3, #61	; 0x3d
 803087a:	dc09      	bgt.n	8030890 <readline+0x158>
			{
				command_buf[command_index++] = ch;
 803087c:	4b09      	ldr	r3, [pc, #36]	; (80308a4 <readline+0x16c>)
 803087e:	681b      	ldr	r3, [r3, #0]
 8030880:	1c5a      	adds	r2, r3, #1
 8030882:	4908      	ldr	r1, [pc, #32]	; (80308a4 <readline+0x16c>)
 8030884:	600a      	str	r2, [r1, #0]
 8030886:	461a      	mov	r2, r3
 8030888:	697b      	ldr	r3, [r7, #20]
 803088a:	4413      	add	r3, r2
 803088c:	7bfa      	ldrb	r2, [r7, #15]
 803088e:	701a      	strb	r2, [r3, #0]
			}
			printf( "%c", ch );    // Echo the character
 8030890:	7bfb      	ldrb	r3, [r7, #15]
 8030892:	4618      	mov	r0, r3
 8030894:	f006 fd16 	bl	80372c4 <putchar>
		ch = getchar();
 8030898:	e756      	b.n	8030748 <readline+0x10>
//		HAL_Delay( 0 );
#endif
	}

	return 0;
}
 803089a:	4618      	mov	r0, r3
 803089c:	3718      	adds	r7, #24
 803089e:	46bd      	mov	sp, r7
 80308a0:	bd80      	pop	{r7, pc}
 80308a2:	bf00      	nop
 80308a4:	200022e0 	.word	0x200022e0
 80308a8:	0803a2f8 	.word	0x0803a2f8
 80308ac:	0803a300 	.word	0x0803a300

080308b0 <CLIPrompt>:

//========================================================================
void	CLIPrompt( void )
//========================================================================
{
 80308b0:	b580      	push	{r7, lr}
 80308b2:	af00      	add	r7, sp, #0
	printf( "%s", PROMPT_STRING );
 80308b4:	4902      	ldr	r1, [pc, #8]	; (80308c0 <CLIPrompt+0x10>)
 80308b6:	4803      	ldr	r0, [pc, #12]	; (80308c4 <CLIPrompt+0x14>)
 80308b8:	f006 fcec 	bl	8037294 <iprintf>
}
 80308bc:	bf00      	nop
 80308be:	bd80      	pop	{r7, pc}
 80308c0:	0803a304 	.word	0x0803a304
 80308c4:	0803a30c 	.word	0x0803a30c

080308c8 <SetCLIPrompt>:
int		( *g_fnCLIProc )( char * ) = ProcessCommand;

//========================================================================
void	SetCLIPrompt( void ( *fnPrompt )( void ) )
//========================================================================
{
 80308c8:	b480      	push	{r7}
 80308ca:	b083      	sub	sp, #12
 80308cc:	af00      	add	r7, sp, #0
 80308ce:	6078      	str	r0, [r7, #4]
	g_fnCLIPrompt = fnPrompt;
 80308d0:	4a04      	ldr	r2, [pc, #16]	; (80308e4 <SetCLIPrompt+0x1c>)
 80308d2:	687b      	ldr	r3, [r7, #4]
 80308d4:	6013      	str	r3, [r2, #0]
}
 80308d6:	bf00      	nop
 80308d8:	370c      	adds	r7, #12
 80308da:	46bd      	mov	sp, r7
 80308dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80308e0:	4770      	bx	lr
 80308e2:	bf00      	nop
 80308e4:	200007e8 	.word	0x200007e8

080308e8 <SetCLIProc>:

//========================================================================
void	SetCLIProc( int ( *fnProc )( char *cmd ) )
//========================================================================
{
 80308e8:	b480      	push	{r7}
 80308ea:	b083      	sub	sp, #12
 80308ec:	af00      	add	r7, sp, #0
 80308ee:	6078      	str	r0, [r7, #4]
	g_fnCLIProc = fnProc;
 80308f0:	4a04      	ldr	r2, [pc, #16]	; (8030904 <SetCLIProc+0x1c>)
 80308f2:	687b      	ldr	r3, [r7, #4]
 80308f4:	6013      	str	r3, [r2, #0]
}
 80308f6:	bf00      	nop
 80308f8:	370c      	adds	r7, #12
 80308fa:	46bd      	mov	sp, r7
 80308fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030900:	4770      	bx	lr
 8030902:	bf00      	nop
 8030904:	200007ec 	.word	0x200007ec

08030908 <LoopProcCLI>:


//========================================================================
void	LoopProcCLI ( void )
//========================================================================
{
 8030908:	b580      	push	{r7, lr}
 803090a:	b082      	sub	sp, #8
 803090c:	af00      	add	r7, sp, #0
	int len;
	if ( input_check() )
 803090e:	f003 fe2d 	bl	803456c <input_check>
 8030912:	4603      	mov	r3, r0
 8030914:	2b00      	cmp	r3, #0
 8030916:	d00d      	beq.n	8030934 <LoopProcCLI+0x2c>
	{
		len = readline( command_buf );
 8030918:	4808      	ldr	r0, [pc, #32]	; (803093c <LoopProcCLI+0x34>)
 803091a:	f7ff ff0d 	bl	8030738 <readline>
 803091e:	6078      	str	r0, [r7, #4]
		if ( len >= 0 )
 8030920:	687b      	ldr	r3, [r7, #4]
 8030922:	2b00      	cmp	r3, #0
 8030924:	db06      	blt.n	8030934 <LoopProcCLI+0x2c>
		{
//			printf( "%s(%d) : %s\n", __func__, __LINE__, command_buf );
			//	Process Command
//			ProcessCommand( command_buf );
			g_fnCLIProc( command_buf );
 8030926:	4b06      	ldr	r3, [pc, #24]	; (8030940 <LoopProcCLI+0x38>)
 8030928:	681b      	ldr	r3, [r3, #0]
 803092a:	4804      	ldr	r0, [pc, #16]	; (803093c <LoopProcCLI+0x34>)
 803092c:	4798      	blx	r3

			//	Print Prompt
//			printf( "%s", PROMPT_STRING );
			g_fnCLIPrompt();
 803092e:	4b05      	ldr	r3, [pc, #20]	; (8030944 <LoopProcCLI+0x3c>)
 8030930:	681b      	ldr	r3, [r3, #0]
 8030932:	4798      	blx	r3
		}
	}
}
 8030934:	bf00      	nop
 8030936:	3708      	adds	r7, #8
 8030938:	46bd      	mov	sp, r7
 803093a:	bd80      	pop	{r7, pc}
 803093c:	200022a0 	.word	0x200022a0
 8030940:	200007ec 	.word	0x200007ec
 8030944:	200007e8 	.word	0x200007e8

08030948 <cmd_help>:
}

//========================================================================
int cmd_help( int argc, char *argv[] )
//========================================================================
{
 8030948:	b580      	push	{r7, lr}
 803094a:	b084      	sub	sp, #16
 803094c:	af00      	add	r7, sp, #0
 803094e:	6078      	str	r0, [r7, #4]
 8030950:	6039      	str	r1, [r7, #0]
	int	i;
	int	ok = 0;
 8030952:	2300      	movs	r3, #0
 8030954:	60bb      	str	r3, [r7, #8]

//	printf( "%s(%d)\n", __func__, __LINE__ );

	for ( i = 1; i < NELEMENTS( user_command_table ); i++ )
 8030956:	2301      	movs	r3, #1
 8030958:	60fb      	str	r3, [r7, #12]
 803095a:	e04c      	b.n	80309f6 <cmd_help+0xae>
	{
		if ( 1 < argc )
 803095c:	687b      	ldr	r3, [r7, #4]
 803095e:	2b01      	cmp	r3, #1
 8030960:	dd33      	ble.n	80309ca <cmd_help+0x82>
		{
			if ( strcmp( argv[1], user_command_table[i].command_name ) == 0 )
 8030962:	683b      	ldr	r3, [r7, #0]
 8030964:	3304      	adds	r3, #4
 8030966:	681a      	ldr	r2, [r3, #0]
 8030968:	492c      	ldr	r1, [pc, #176]	; (8030a1c <cmd_help+0xd4>)
 803096a:	68fb      	ldr	r3, [r7, #12]
 803096c:	011b      	lsls	r3, r3, #4
 803096e:	440b      	add	r3, r1
 8030970:	681b      	ldr	r3, [r3, #0]
 8030972:	4619      	mov	r1, r3
 8030974:	4610      	mov	r0, r2
 8030976:	f7ef fc2b 	bl	80201d0 <strcmp>
 803097a:	4603      	mov	r3, r0
 803097c:	2b00      	cmp	r3, #0
 803097e:	d137      	bne.n	80309f0 <cmd_help+0xa8>
			{
				if ( user_command_table[i].command_help1 != NULL )
 8030980:	4a26      	ldr	r2, [pc, #152]	; (8030a1c <cmd_help+0xd4>)
 8030982:	68fb      	ldr	r3, [r7, #12]
 8030984:	011b      	lsls	r3, r3, #4
 8030986:	4413      	add	r3, r2
 8030988:	3304      	adds	r3, #4
 803098a:	681b      	ldr	r3, [r3, #0]
 803098c:	2b00      	cmp	r3, #0
 803098e:	d008      	beq.n	80309a2 <cmd_help+0x5a>
				{
					printf( "%s\n", user_command_table[i].command_help1 );
 8030990:	4a22      	ldr	r2, [pc, #136]	; (8030a1c <cmd_help+0xd4>)
 8030992:	68fb      	ldr	r3, [r7, #12]
 8030994:	011b      	lsls	r3, r3, #4
 8030996:	4413      	add	r3, r2
 8030998:	3304      	adds	r3, #4
 803099a:	681b      	ldr	r3, [r3, #0]
 803099c:	4618      	mov	r0, r3
 803099e:	f006 fd15 	bl	80373cc <puts>
				}
				if ( user_command_table[i].command_help2 != NULL )
 80309a2:	4a1e      	ldr	r2, [pc, #120]	; (8030a1c <cmd_help+0xd4>)
 80309a4:	68fb      	ldr	r3, [r7, #12]
 80309a6:	011b      	lsls	r3, r3, #4
 80309a8:	4413      	add	r3, r2
 80309aa:	3308      	adds	r3, #8
 80309ac:	681b      	ldr	r3, [r3, #0]
 80309ae:	2b00      	cmp	r3, #0
 80309b0:	d008      	beq.n	80309c4 <cmd_help+0x7c>
				{
					printf( "%s\n", user_command_table[i].command_help2 );
 80309b2:	4a1a      	ldr	r2, [pc, #104]	; (8030a1c <cmd_help+0xd4>)
 80309b4:	68fb      	ldr	r3, [r7, #12]
 80309b6:	011b      	lsls	r3, r3, #4
 80309b8:	4413      	add	r3, r2
 80309ba:	3308      	adds	r3, #8
 80309bc:	681b      	ldr	r3, [r3, #0]
 80309be:	4618      	mov	r0, r3
 80309c0:	f006 fd04 	bl	80373cc <puts>
				}
				ok = 1;
 80309c4:	2301      	movs	r3, #1
 80309c6:	60bb      	str	r3, [r7, #8]
 80309c8:	e012      	b.n	80309f0 <cmd_help+0xa8>
			}
		}
		else
		{
			if ( user_command_table[i].command_help1 != NULL )
 80309ca:	4a14      	ldr	r2, [pc, #80]	; (8030a1c <cmd_help+0xd4>)
 80309cc:	68fb      	ldr	r3, [r7, #12]
 80309ce:	011b      	lsls	r3, r3, #4
 80309d0:	4413      	add	r3, r2
 80309d2:	3304      	adds	r3, #4
 80309d4:	681b      	ldr	r3, [r3, #0]
 80309d6:	2b00      	cmp	r3, #0
 80309d8:	d008      	beq.n	80309ec <cmd_help+0xa4>
			{
				printf( "%s\n", user_command_table[i].command_help1 );
 80309da:	4a10      	ldr	r2, [pc, #64]	; (8030a1c <cmd_help+0xd4>)
 80309dc:	68fb      	ldr	r3, [r7, #12]
 80309de:	011b      	lsls	r3, r3, #4
 80309e0:	4413      	add	r3, r2
 80309e2:	3304      	adds	r3, #4
 80309e4:	681b      	ldr	r3, [r3, #0]
 80309e6:	4618      	mov	r0, r3
 80309e8:	f006 fcf0 	bl	80373cc <puts>
			}
			ok = 1;
 80309ec:	2301      	movs	r3, #1
 80309ee:	60bb      	str	r3, [r7, #8]
	for ( i = 1; i < NELEMENTS( user_command_table ); i++ )
 80309f0:	68fb      	ldr	r3, [r7, #12]
 80309f2:	3301      	adds	r3, #1
 80309f4:	60fb      	str	r3, [r7, #12]
 80309f6:	68fb      	ldr	r3, [r7, #12]
 80309f8:	2b19      	cmp	r3, #25
 80309fa:	d9af      	bls.n	803095c <cmd_help+0x14>
		}
	}
	if ( ok == 0 )
 80309fc:	68bb      	ldr	r3, [r7, #8]
 80309fe:	2b00      	cmp	r3, #0
 8030a00:	d106      	bne.n	8030a10 <cmd_help+0xc8>
	{
		printf( "unknown command %s\n", argv[1] );
 8030a02:	683b      	ldr	r3, [r7, #0]
 8030a04:	3304      	adds	r3, #4
 8030a06:	681b      	ldr	r3, [r3, #0]
 8030a08:	4619      	mov	r1, r3
 8030a0a:	4805      	ldr	r0, [pc, #20]	; (8030a20 <cmd_help+0xd8>)
 8030a0c:	f006 fc42 	bl	8037294 <iprintf>
	}
	return 0;
 8030a10:	2300      	movs	r3, #0
}
 8030a12:	4618      	mov	r0, r3
 8030a14:	3710      	adds	r7, #16
 8030a16:	46bd      	mov	sp, r7
 8030a18:	bd80      	pop	{r7, pc}
 8030a1a:	bf00      	nop
 8030a1c:	20000648 	.word	0x20000648
 8030a20:	0803a310 	.word	0x0803a310

08030a24 <cmd_uptime>:

//========================================================================
int cmd_uptime(int argc, char *argv[])
//========================================================================
{
 8030a24:	b580      	push	{r7, lr}
 8030a26:	b08a      	sub	sp, #40	; 0x28
 8030a28:	af02      	add	r7, sp, #8
 8030a2a:	6078      	str	r0, [r7, #4]
 8030a2c:	6039      	str	r1, [r7, #0]
//=============================================================================

#if defined( USE_FREERTOS )
	unsigned long	tmp = xTaskGetTickCount() / configTICK_RATE_HZ;
#else
	unsigned long	tmp = HAL_GetTick() / 1000;
 8030a2e:	f7f1 f89b 	bl	8021b68 <HAL_GetTick>
 8030a32:	4603      	mov	r3, r0
 8030a34:	4a26      	ldr	r2, [pc, #152]	; (8030ad0 <cmd_uptime+0xac>)
 8030a36:	fba2 2303 	umull	r2, r3, r2, r3
 8030a3a:	099b      	lsrs	r3, r3, #6
 8030a3c:	61fb      	str	r3, [r7, #28]
#endif

	int	sec, min, hour;
	int	day;

	day = (tmp / 3600 / 24);
 8030a3e:	69fb      	ldr	r3, [r7, #28]
 8030a40:	4a24      	ldr	r2, [pc, #144]	; (8030ad4 <cmd_uptime+0xb0>)
 8030a42:	fba2 2303 	umull	r2, r3, r2, r3
 8030a46:	0c1b      	lsrs	r3, r3, #16
 8030a48:	61bb      	str	r3, [r7, #24]
	tmp = tmp % (3600 * 24);
 8030a4a:	69fb      	ldr	r3, [r7, #28]
 8030a4c:	4a21      	ldr	r2, [pc, #132]	; (8030ad4 <cmd_uptime+0xb0>)
 8030a4e:	fba2 1203 	umull	r1, r2, r2, r3
 8030a52:	0c12      	lsrs	r2, r2, #16
 8030a54:	4920      	ldr	r1, [pc, #128]	; (8030ad8 <cmd_uptime+0xb4>)
 8030a56:	fb01 f202 	mul.w	r2, r1, r2
 8030a5a:	1a9b      	subs	r3, r3, r2
 8030a5c:	61fb      	str	r3, [r7, #28]

	hour = tmp / 3600;
 8030a5e:	69fb      	ldr	r3, [r7, #28]
 8030a60:	4a1e      	ldr	r2, [pc, #120]	; (8030adc <cmd_uptime+0xb8>)
 8030a62:	fba2 2303 	umull	r2, r3, r2, r3
 8030a66:	0adb      	lsrs	r3, r3, #11
 8030a68:	617b      	str	r3, [r7, #20]
	tmp = tmp % 3600;
 8030a6a:	69fb      	ldr	r3, [r7, #28]
 8030a6c:	4a1b      	ldr	r2, [pc, #108]	; (8030adc <cmd_uptime+0xb8>)
 8030a6e:	fba2 1203 	umull	r1, r2, r2, r3
 8030a72:	0ad2      	lsrs	r2, r2, #11
 8030a74:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8030a78:	fb01 f202 	mul.w	r2, r1, r2
 8030a7c:	1a9b      	subs	r3, r3, r2
 8030a7e:	61fb      	str	r3, [r7, #28]

	min = tmp / 60;
 8030a80:	69fb      	ldr	r3, [r7, #28]
 8030a82:	4a17      	ldr	r2, [pc, #92]	; (8030ae0 <cmd_uptime+0xbc>)
 8030a84:	fba2 2303 	umull	r2, r3, r2, r3
 8030a88:	095b      	lsrs	r3, r3, #5
 8030a8a:	613b      	str	r3, [r7, #16]
	sec = tmp % 60;
 8030a8c:	69f9      	ldr	r1, [r7, #28]
 8030a8e:	4b14      	ldr	r3, [pc, #80]	; (8030ae0 <cmd_uptime+0xbc>)
 8030a90:	fba3 2301 	umull	r2, r3, r3, r1
 8030a94:	095a      	lsrs	r2, r3, #5
 8030a96:	4613      	mov	r3, r2
 8030a98:	011b      	lsls	r3, r3, #4
 8030a9a:	1a9b      	subs	r3, r3, r2
 8030a9c:	009b      	lsls	r3, r3, #2
 8030a9e:	1aca      	subs	r2, r1, r3
 8030aa0:	60fa      	str	r2, [r7, #12]

	if (0 < day)
 8030aa2:	69bb      	ldr	r3, [r7, #24]
 8030aa4:	2b00      	cmp	r3, #0
 8030aa6:	dd08      	ble.n	8030aba <cmd_uptime+0x96>
	{
		printf("%d day(s) %d:%02d:%02d up.\n", day, hour, min, sec);
 8030aa8:	68fb      	ldr	r3, [r7, #12]
 8030aaa:	9300      	str	r3, [sp, #0]
 8030aac:	693b      	ldr	r3, [r7, #16]
 8030aae:	697a      	ldr	r2, [r7, #20]
 8030ab0:	69b9      	ldr	r1, [r7, #24]
 8030ab2:	480c      	ldr	r0, [pc, #48]	; (8030ae4 <cmd_uptime+0xc0>)
 8030ab4:	f006 fbee 	bl	8037294 <iprintf>
 8030ab8:	e005      	b.n	8030ac6 <cmd_uptime+0xa2>
	}
	else
	{
		printf("%d:%02d:%02d up.\n", hour, min, sec);
 8030aba:	68fb      	ldr	r3, [r7, #12]
 8030abc:	693a      	ldr	r2, [r7, #16]
 8030abe:	6979      	ldr	r1, [r7, #20]
 8030ac0:	4809      	ldr	r0, [pc, #36]	; (8030ae8 <cmd_uptime+0xc4>)
 8030ac2:	f006 fbe7 	bl	8037294 <iprintf>

//=============================================================================
#endif
//=============================================================================

	return 0;
 8030ac6:	2300      	movs	r3, #0
}
 8030ac8:	4618      	mov	r0, r3
 8030aca:	3720      	adds	r7, #32
 8030acc:	46bd      	mov	sp, r7
 8030ace:	bd80      	pop	{r7, pc}
 8030ad0:	10624dd3 	.word	0x10624dd3
 8030ad4:	c22e4507 	.word	0xc22e4507
 8030ad8:	00015180 	.word	0x00015180
 8030adc:	91a2b3c5 	.word	0x91a2b3c5
 8030ae0:	88888889 	.word	0x88888889
 8030ae4:	0803a324 	.word	0x0803a324
 8030ae8:	0803a340 	.word	0x0803a340

08030aec <cmd_ver>:

//========================================================================
int cmd_ver(int argc, char *argv[])
//========================================================================
{
 8030aec:	b580      	push	{r7, lr}
 8030aee:	b082      	sub	sp, #8
 8030af0:	af00      	add	r7, sp, #0
 8030af2:	6078      	str	r0, [r7, #4]
 8030af4:	6039      	str	r1, [r7, #0]
	printf("Version = %s(%s)\n", APP_VER, APP_BUILD_DATE );
 8030af6:	4a05      	ldr	r2, [pc, #20]	; (8030b0c <cmd_ver+0x20>)
 8030af8:	4905      	ldr	r1, [pc, #20]	; (8030b10 <cmd_ver+0x24>)
 8030afa:	4806      	ldr	r0, [pc, #24]	; (8030b14 <cmd_ver+0x28>)
 8030afc:	f006 fbca 	bl	8037294 <iprintf>

	return 0;
 8030b00:	2300      	movs	r3, #0
}
 8030b02:	4618      	mov	r0, r3
 8030b04:	3708      	adds	r7, #8
 8030b06:	46bd      	mov	sp, r7
 8030b08:	bd80      	pop	{r7, pc}
 8030b0a:	bf00      	nop
 8030b0c:	0803a354 	.word	0x0803a354
 8030b10:	0803a36c 	.word	0x0803a36c
 8030b14:	0803a378 	.word	0x0803a378

08030b18 <cmd_reset>:


//========================================================================
int cmd_reset(int argc, char *argv[])
//========================================================================
{
 8030b18:	b580      	push	{r7, lr}
 8030b1a:	b082      	sub	sp, #8
 8030b1c:	af00      	add	r7, sp, #0
 8030b1e:	6078      	str	r0, [r7, #4]
 8030b20:	6039      	str	r1, [r7, #0]
  	NVIC_SystemReset();
 8030b22:	f7ff fc91 	bl	8030448 <__NVIC_SystemReset>
	...

08030b28 <cmd_WDGStOff>:
}

//========================================================================
extern int g_bEnIWDGStat;	//	WatchDog Stat Enable
int	cmd_WDGStOff(int argc, char *argv[])
{
 8030b28:	b480      	push	{r7}
 8030b2a:	b083      	sub	sp, #12
 8030b2c:	af00      	add	r7, sp, #0
 8030b2e:	6078      	str	r0, [r7, #4]
 8030b30:	6039      	str	r1, [r7, #0]
	g_bEnIWDGStat = 0;
 8030b32:	4b05      	ldr	r3, [pc, #20]	; (8030b48 <cmd_WDGStOff+0x20>)
 8030b34:	2200      	movs	r2, #0
 8030b36:	601a      	str	r2, [r3, #0]
}
 8030b38:	bf00      	nop
 8030b3a:	4618      	mov	r0, r3
 8030b3c:	370c      	adds	r7, #12
 8030b3e:	46bd      	mov	sp, r7
 8030b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b44:	4770      	bx	lr
 8030b46:	bf00      	nop
 8030b48:	20000000 	.word	0x20000000

08030b4c <display_diag_menu>:
 * diag main menu를 display
 */
//========================================================================
void display_diag_menu( void )
//========================================================================
{
 8030b4c:	b580      	push	{r7, lr}
 8030b4e:	af00      	add	r7, sp, #0
	CLEAR_VT_SCREEN();
 8030b50:	481d      	ldr	r0, [pc, #116]	; (8030bc8 <display_diag_menu+0x7c>)
 8030b52:	f006 fb9f 	bl	8037294 <iprintf>
	GOTO_VT_XY();
 8030b56:	481d      	ldr	r0, [pc, #116]	; (8030bcc <display_diag_menu+0x80>)
 8030b58:	f006 fb9c 	bl	8037294 <iprintf>

	printf( "\n" );
 8030b5c:	200a      	movs	r0, #10
 8030b5e:	f006 fbb1 	bl	80372c4 <putchar>
	printf( "\n" );
 8030b62:	200a      	movs	r0, #10
 8030b64:	f006 fbae 	bl	80372c4 <putchar>
	printf( "\n" );
 8030b68:	200a      	movs	r0, #10
 8030b6a:	f006 fbab 	bl	80372c4 <putchar>
	printf( "\n" );
 8030b6e:	200a      	movs	r0, #10
 8030b70:	f006 fba8 	bl	80372c4 <putchar>

	printf( "       **************************************************************\n" );
 8030b74:	4816      	ldr	r0, [pc, #88]	; (8030bd0 <display_diag_menu+0x84>)
 8030b76:	f006 fc29 	bl	80373cc <puts>
	printf( "       *                       Board Test V1.0                      *\n" );
 8030b7a:	4816      	ldr	r0, [pc, #88]	; (8030bd4 <display_diag_menu+0x88>)
 8030b7c:	f006 fc26 	bl	80373cc <puts>
	printf( "       *                                                            *\n" );
 8030b80:	4815      	ldr	r0, [pc, #84]	; (8030bd8 <display_diag_menu+0x8c>)
 8030b82:	f006 fc23 	bl	80373cc <puts>
	printf( "       *  1 : Audio Test.                                           *\n" );
 8030b86:	4815      	ldr	r0, [pc, #84]	; (8030bdc <display_diag_menu+0x90>)
 8030b88:	f006 fc20 	bl	80373cc <puts>
	printf( "       *  2 : RF test.                                              *\n" );
 8030b8c:	4814      	ldr	r0, [pc, #80]	; (8030be0 <display_diag_menu+0x94>)
 8030b8e:	f006 fc1d 	bl	80373cc <puts>
	printf( "       **************************************************************\n" );
 8030b92:	480f      	ldr	r0, [pc, #60]	; (8030bd0 <display_diag_menu+0x84>)
 8030b94:	f006 fc1a 	bl	80373cc <puts>
	printf( "       *  4 : spi test.                                             *\n" );
 8030b98:	4812      	ldr	r0, [pc, #72]	; (8030be4 <display_diag_menu+0x98>)
 8030b9a:	f006 fc17 	bl	80373cc <puts>
	printf( "       *  5 : External Flash Memory Test.(Write/Read/Compare)       *\n" );
 8030b9e:	4812      	ldr	r0, [pc, #72]	; (8030be8 <display_diag_menu+0x9c>)
 8030ba0:	f006 fc14 	bl	80373cc <puts>
	printf( "       **************************************************************\n" );
 8030ba4:	480a      	ldr	r0, [pc, #40]	; (8030bd0 <display_diag_menu+0x84>)
 8030ba6:	f006 fc11 	bl	80373cc <puts>
	printf( "       *  e : print log.                                            *\n" );
 8030baa:	4810      	ldr	r0, [pc, #64]	; (8030bec <display_diag_menu+0xa0>)
 8030bac:	f006 fc0e 	bl	80373cc <puts>
	printf( "       **************************************************************\n" );
 8030bb0:	4807      	ldr	r0, [pc, #28]	; (8030bd0 <display_diag_menu+0x84>)
 8030bb2:	f006 fc0b 	bl	80373cc <puts>
	printf( "\n" );
 8030bb6:	200a      	movs	r0, #10
 8030bb8:	f006 fb84 	bl	80372c4 <putchar>
	printf( "           Please select number[to quit, push 'q', 'Q']:" );
 8030bbc:	480c      	ldr	r0, [pc, #48]	; (8030bf0 <display_diag_menu+0xa4>)
 8030bbe:	f006 fb69 	bl	8037294 <iprintf>
}
 8030bc2:	bf00      	nop
 8030bc4:	bd80      	pop	{r7, pc}
 8030bc6:	bf00      	nop
 8030bc8:	0803a38c 	.word	0x0803a38c
 8030bcc:	0803a394 	.word	0x0803a394
 8030bd0:	0803a39c 	.word	0x0803a39c
 8030bd4:	0803a3e4 	.word	0x0803a3e4
 8030bd8:	0803a42c 	.word	0x0803a42c
 8030bdc:	0803a474 	.word	0x0803a474
 8030be0:	0803a4bc 	.word	0x0803a4bc
 8030be4:	0803a504 	.word	0x0803a504
 8030be8:	0803a54c 	.word	0x0803a54c
 8030bec:	0803a594 	.word	0x0803a594
 8030bf0:	0803a5dc 	.word	0x0803a5dc

08030bf4 <cmd_diag_proc>:

//========================================================================
int cmd_diag_proc( char *cmd )
//========================================================================
{
 8030bf4:	b580      	push	{r7, lr}
 8030bf6:	b084      	sub	sp, #16
 8030bf8:	af00      	add	r7, sp, #0
 8030bfa:	6078      	str	r0, [r7, #4]
//	sel = ibuf[0];
	char sel = cmd[0];
 8030bfc:	687b      	ldr	r3, [r7, #4]
 8030bfe:	781b      	ldrb	r3, [r3, #0]
 8030c00:	73fb      	strb	r3, [r7, #15]

	switch ( sel )
 8030c02:	7bfb      	ldrb	r3, [r7, #15]
 8030c04:	2b71      	cmp	r3, #113	; 0x71
 8030c06:	d014      	beq.n	8030c32 <cmd_diag_proc+0x3e>
 8030c08:	2b71      	cmp	r3, #113	; 0x71
 8030c0a:	dc1a      	bgt.n	8030c42 <cmd_diag_proc+0x4e>
 8030c0c:	2b51      	cmp	r3, #81	; 0x51
 8030c0e:	d010      	beq.n	8030c32 <cmd_diag_proc+0x3e>
 8030c10:	2b51      	cmp	r3, #81	; 0x51
 8030c12:	dc16      	bgt.n	8030c42 <cmd_diag_proc+0x4e>
 8030c14:	2b31      	cmp	r3, #49	; 0x31
 8030c16:	d002      	beq.n	8030c1e <cmd_diag_proc+0x2a>
 8030c18:	2b32      	cmp	r3, #50	; 0x32
 8030c1a:	d005      	beq.n	8030c28 <cmd_diag_proc+0x34>
		SetCLIPrompt( CLIPrompt );
		SetCLIProc( ProcessCommand );
#endif
		return 0;
	default:
		break;
 8030c1c:	e011      	b.n	8030c42 <cmd_diag_proc+0x4e>
	case '1':	cmd_diag_Audio( 0, 0 );		break;
 8030c1e:	2100      	movs	r1, #0
 8030c20:	2000      	movs	r0, #0
 8030c22:	f000 f8c5 	bl	8030db0 <cmd_diag_Audio>
 8030c26:	e00d      	b.n	8030c44 <cmd_diag_proc+0x50>
	case '2':	cmd_diag_RF( 0, 0 );		break;
 8030c28:	2100      	movs	r1, #0
 8030c2a:	2000      	movs	r0, #0
 8030c2c:	f000 f94e 	bl	8030ecc <cmd_diag_RF>
 8030c30:	e008      	b.n	8030c44 <cmd_diag_proc+0x50>
		SetCLIPrompt( CLIPrompt );
 8030c32:	4807      	ldr	r0, [pc, #28]	; (8030c50 <cmd_diag_proc+0x5c>)
 8030c34:	f7ff fe48 	bl	80308c8 <SetCLIPrompt>
		SetCLIProc( ProcessCommand );
 8030c38:	4806      	ldr	r0, [pc, #24]	; (8030c54 <cmd_diag_proc+0x60>)
 8030c3a:	f7ff fe55 	bl	80308e8 <SetCLIProc>
		return 0;
 8030c3e:	2300      	movs	r3, #0
 8030c40:	e001      	b.n	8030c46 <cmd_diag_proc+0x52>
		break;
 8030c42:	bf00      	nop
	}

	return 1;
 8030c44:	2301      	movs	r3, #1
}
 8030c46:	4618      	mov	r0, r3
 8030c48:	3710      	adds	r7, #16
 8030c4a:	46bd      	mov	sp, r7
 8030c4c:	bd80      	pop	{r7, pc}
 8030c4e:	bf00      	nop
 8030c50:	080308b1 	.word	0x080308b1
 8030c54:	080304f5 	.word	0x080304f5

08030c58 <cmd_diag>:
//========================================================================
//					diag main command function
//========================================================================
int cmd_diag( int argc, char *argv[] )
//========================================================================
{
 8030c58:	b580      	push	{r7, lr}
 8030c5a:	b082      	sub	sp, #8
 8030c5c:	af00      	add	r7, sp, #0
 8030c5e:	6078      	str	r0, [r7, #4]
 8030c60:	6039      	str	r1, [r7, #0]

		taskYIELD();
	}
#else
//	HAL_Delay( 0 );
	SetCLIPrompt( display_diag_menu );
 8030c62:	4805      	ldr	r0, [pc, #20]	; (8030c78 <cmd_diag+0x20>)
 8030c64:	f7ff fe30 	bl	80308c8 <SetCLIPrompt>
	SetCLIProc( cmd_diag_proc );
 8030c68:	4804      	ldr	r0, [pc, #16]	; (8030c7c <cmd_diag+0x24>)
 8030c6a:	f7ff fe3d 	bl	80308e8 <SetCLIProc>

#endif

	/* NOTREACHED */

	return 0;
 8030c6e:	2300      	movs	r3, #0
}
 8030c70:	4618      	mov	r0, r3
 8030c72:	3708      	adds	r7, #8
 8030c74:	46bd      	mov	sp, r7
 8030c76:	bd80      	pop	{r7, pc}
 8030c78:	08030b4d 	.word	0x08030b4d
 8030c7c:	08030bf5 	.word	0x08030bf5

08030c80 <display_diag_Audio>:


//========================================================================
void display_diag_Audio( void )
//========================================================================
{
 8030c80:	b580      	push	{r7, lr}
 8030c82:	af00      	add	r7, sp, #0
	CLEAR_VT_SCREEN();
 8030c84:	4829      	ldr	r0, [pc, #164]	; (8030d2c <display_diag_Audio+0xac>)
 8030c86:	f006 fb05 	bl	8037294 <iprintf>
	GOTO_VT_XY();
 8030c8a:	4829      	ldr	r0, [pc, #164]	; (8030d30 <display_diag_Audio+0xb0>)
 8030c8c:	f006 fb02 	bl	8037294 <iprintf>

	printf( "\n" );
 8030c90:	200a      	movs	r0, #10
 8030c92:	f006 fb17 	bl	80372c4 <putchar>
	printf( "\n" );
 8030c96:	200a      	movs	r0, #10
 8030c98:	f006 fb14 	bl	80372c4 <putchar>
	printf( "\n" );
 8030c9c:	200a      	movs	r0, #10
 8030c9e:	f006 fb11 	bl	80372c4 <putchar>
	printf( "\n" );
 8030ca2:	200a      	movs	r0, #10
 8030ca4:	f006 fb0e 	bl	80372c4 <putchar>

	printf( "       **************************************************************\n" );
 8030ca8:	4822      	ldr	r0, [pc, #136]	; (8030d34 <display_diag_Audio+0xb4>)
 8030caa:	f006 fb8f 	bl	80373cc <puts>
	printf( "       *                      Audio Test.                           *\n" );
 8030cae:	4822      	ldr	r0, [pc, #136]	; (8030d38 <display_diag_Audio+0xb8>)
 8030cb0:	f006 fb8c 	bl	80373cc <puts>
	printf( "       *                                                            *\n" );
 8030cb4:	4821      	ldr	r0, [pc, #132]	; (8030d3c <display_diag_Audio+0xbc>)
 8030cb6:	f006 fb89 	bl	80373cc <puts>
	printf( "       *  1 : audio tx sine.                                        *\n" );
 8030cba:	4821      	ldr	r0, [pc, #132]	; (8030d40 <display_diag_Audio+0xc0>)
 8030cbc:	f006 fb86 	bl	80373cc <puts>
	printf( "       *  2 : audio tx null.                                        *\n" );
 8030cc0:	4820      	ldr	r0, [pc, #128]	; (8030d44 <display_diag_Audio+0xc4>)
 8030cc2:	f006 fb83 	bl	80373cc <puts>
	printf( "       *  3 : audio tx stop.                                        *\n" );
 8030cc6:	4820      	ldr	r0, [pc, #128]	; (8030d48 <display_diag_Audio+0xc8>)
 8030cc8:	f006 fb80 	bl	80373cc <puts>
	printf( "       *  4 : Audio Loopback. ( Internal Codec )                    *\n" );
 8030ccc:	481f      	ldr	r0, [pc, #124]	; (8030d4c <display_diag_Audio+0xcc>)
 8030cce:	f006 fb7d 	bl	80373cc <puts>
	printf( "       *  5 : Audio Loopback. ( DMA )                               *\n" );
 8030cd2:	481f      	ldr	r0, [pc, #124]	; (8030d50 <display_diag_Audio+0xd0>)
 8030cd4:	f006 fb7a 	bl	80373cc <puts>
	printf( "       *  6 : Audio RF Tx/Rx. ( DMA )                               *\n" );
 8030cd8:	481e      	ldr	r0, [pc, #120]	; (8030d54 <display_diag_Audio+0xd4>)
 8030cda:	f006 fb77 	bl	80373cc <puts>
	printf( "       *  7 : Audio Loopback. ( DMA - speex )                       *\n" );
 8030cde:	481e      	ldr	r0, [pc, #120]	; (8030d58 <display_diag_Audio+0xd8>)
 8030ce0:	f006 fb74 	bl	80373cc <puts>
	printf( "       *  8 : Audio RF Tx. ( DMA )                                  *\n" );
 8030ce4:	481d      	ldr	r0, [pc, #116]	; (8030d5c <display_diag_Audio+0xdc>)
 8030ce6:	f006 fb71 	bl	80373cc <puts>
	printf( "       *  9 : Audio RF Rx. ( DMA )                                  *\n" );
 8030cea:	481d      	ldr	r0, [pc, #116]	; (8030d60 <display_diag_Audio+0xe0>)
 8030cec:	f006 fb6e 	bl	80373cc <puts>
	printf( "       *  a : Audio Sampling ( 8 KHz )                              *\n" );
 8030cf0:	481c      	ldr	r0, [pc, #112]	; (8030d64 <display_diag_Audio+0xe4>)
 8030cf2:	f006 fb6b 	bl	80373cc <puts>
	printf( "       *  b : Audio Sampling ( 4 KHz )                              *\n" );
 8030cf6:	481c      	ldr	r0, [pc, #112]	; (8030d68 <display_diag_Audio+0xe8>)
 8030cf8:	f006 fb68 	bl	80373cc <puts>
	printf( "       *  c : Audio Sampling ( 2 KHz )                              *\n" );
 8030cfc:	481b      	ldr	r0, [pc, #108]	; (8030d6c <display_diag_Audio+0xec>)
 8030cfe:	f006 fb65 	bl	80373cc <puts>
	printf( "       *  d : Audio Sampling ( 1 KHz )                              *\n" );
 8030d02:	481b      	ldr	r0, [pc, #108]	; (8030d70 <display_diag_Audio+0xf0>)
 8030d04:	f006 fb62 	bl	80373cc <puts>
	printf( "       *  i : audio Init                                            *\n" );
 8030d08:	481a      	ldr	r0, [pc, #104]	; (8030d74 <display_diag_Audio+0xf4>)
 8030d0a:	f006 fb5f 	bl	80373cc <puts>
	printf( "       *  e : Enable Debug SPI                                      *\n" );
 8030d0e:	481a      	ldr	r0, [pc, #104]	; (8030d78 <display_diag_Audio+0xf8>)
 8030d10:	f006 fb5c 	bl	80373cc <puts>
	printf( "       **************************************************************\n" );
 8030d14:	4807      	ldr	r0, [pc, #28]	; (8030d34 <display_diag_Audio+0xb4>)
 8030d16:	f006 fb59 	bl	80373cc <puts>
	printf( "\n" );
 8030d1a:	200a      	movs	r0, #10
 8030d1c:	f006 fad2 	bl	80372c4 <putchar>
	printf( "           Please select number[to quit, push 'q', 'Q']:" );
 8030d20:	4816      	ldr	r0, [pc, #88]	; (8030d7c <display_diag_Audio+0xfc>)
 8030d22:	f006 fab7 	bl	8037294 <iprintf>
}
 8030d26:	bf00      	nop
 8030d28:	bd80      	pop	{r7, pc}
 8030d2a:	bf00      	nop
 8030d2c:	0803a38c 	.word	0x0803a38c
 8030d30:	0803a394 	.word	0x0803a394
 8030d34:	0803a39c 	.word	0x0803a39c
 8030d38:	0803a618 	.word	0x0803a618
 8030d3c:	0803a42c 	.word	0x0803a42c
 8030d40:	0803a660 	.word	0x0803a660
 8030d44:	0803a6a8 	.word	0x0803a6a8
 8030d48:	0803a6f0 	.word	0x0803a6f0
 8030d4c:	0803a738 	.word	0x0803a738
 8030d50:	0803a780 	.word	0x0803a780
 8030d54:	0803a7c8 	.word	0x0803a7c8
 8030d58:	0803a810 	.word	0x0803a810
 8030d5c:	0803a858 	.word	0x0803a858
 8030d60:	0803a8a0 	.word	0x0803a8a0
 8030d64:	0803a8e8 	.word	0x0803a8e8
 8030d68:	0803a930 	.word	0x0803a930
 8030d6c:	0803a978 	.word	0x0803a978
 8030d70:	0803a9c0 	.word	0x0803a9c0
 8030d74:	0803aa08 	.word	0x0803aa08
 8030d78:	0803aa50 	.word	0x0803aa50
 8030d7c:	0803a5dc 	.word	0x0803a5dc

08030d80 <cmd_diag_proc_Audio>:


//========================================================================
int cmd_diag_proc_Audio( char *cmd )
//========================================================================
{
 8030d80:	b580      	push	{r7, lr}
 8030d82:	b084      	sub	sp, #16
 8030d84:	af00      	add	r7, sp, #0
 8030d86:	6078      	str	r0, [r7, #4]
//	sel = ibuf[0];
	char sel = cmd[0];
 8030d88:	687b      	ldr	r3, [r7, #4]
 8030d8a:	781b      	ldrb	r3, [r3, #0]
 8030d8c:	73fb      	strb	r3, [r7, #15]

	switch ( sel )
 8030d8e:	7bfb      	ldrb	r3, [r7, #15]
 8030d90:	2b51      	cmp	r3, #81	; 0x51
 8030d92:	d001      	beq.n	8030d98 <cmd_diag_proc_Audio+0x18>
 8030d94:	2b71      	cmp	r3, #113	; 0x71
 8030d96:	d105      	bne.n	8030da4 <cmd_diag_proc_Audio+0x24>
#endif
	case 'q':
	case 'Q':
#if defined(USE_FREERTOS)
#else
		cmd_diag(0, 0);
 8030d98:	2100      	movs	r1, #0
 8030d9a:	2000      	movs	r0, #0
 8030d9c:	f7ff ff5c 	bl	8030c58 <cmd_diag>
#endif
		return 0;
 8030da0:	2300      	movs	r3, #0
 8030da2:	e001      	b.n	8030da8 <cmd_diag_proc_Audio+0x28>
	default:
		break;
 8030da4:	bf00      	nop
	}

	return 1;
 8030da6:	2301      	movs	r3, #1
}
 8030da8:	4618      	mov	r0, r3
 8030daa:	3710      	adds	r7, #16
 8030dac:	46bd      	mov	sp, r7
 8030dae:	bd80      	pop	{r7, pc}

08030db0 <cmd_diag_Audio>:

//========================================================================
int cmd_diag_Audio( int argc, char *argv[] )
//========================================================================
{
 8030db0:	b580      	push	{r7, lr}
 8030db2:	b082      	sub	sp, #8
 8030db4:	af00      	add	r7, sp, #0
 8030db6:	6078      	str	r0, [r7, #4]
 8030db8:	6039      	str	r1, [r7, #0]
		taskYIELD();
	}

#else
	//	HAL_Delay( 0 );
	SetCLIPrompt( display_diag_Audio );
 8030dba:	4805      	ldr	r0, [pc, #20]	; (8030dd0 <cmd_diag_Audio+0x20>)
 8030dbc:	f7ff fd84 	bl	80308c8 <SetCLIPrompt>
	SetCLIProc( cmd_diag_proc_Audio );
 8030dc0:	4804      	ldr	r0, [pc, #16]	; (8030dd4 <cmd_diag_Audio+0x24>)
 8030dc2:	f7ff fd91 	bl	80308e8 <SetCLIProc>

#endif

	return 0;
 8030dc6:	2300      	movs	r3, #0
}
 8030dc8:	4618      	mov	r0, r3
 8030dca:	3708      	adds	r7, #8
 8030dcc:	46bd      	mov	sp, r7
 8030dce:	bd80      	pop	{r7, pc}
 8030dd0:	08030c81 	.word	0x08030c81
 8030dd4:	08030d81 	.word	0x08030d81

08030dd8 <display_diag_RF>:


//========================================================================
void display_diag_RF( void )
//========================================================================
{
 8030dd8:	b580      	push	{r7, lr}
 8030dda:	af00      	add	r7, sp, #0
	CLEAR_VT_SCREEN();
 8030ddc:	481d      	ldr	r0, [pc, #116]	; (8030e54 <display_diag_RF+0x7c>)
 8030dde:	f006 fa59 	bl	8037294 <iprintf>
	GOTO_VT_XY();
 8030de2:	481d      	ldr	r0, [pc, #116]	; (8030e58 <display_diag_RF+0x80>)
 8030de4:	f006 fa56 	bl	8037294 <iprintf>

	printf( "\n" );
 8030de8:	200a      	movs	r0, #10
 8030dea:	f006 fa6b 	bl	80372c4 <putchar>
	printf( "\n" );
 8030dee:	200a      	movs	r0, #10
 8030df0:	f006 fa68 	bl	80372c4 <putchar>
	printf( "\n" );
 8030df4:	200a      	movs	r0, #10
 8030df6:	f006 fa65 	bl	80372c4 <putchar>
	printf( "\n" );
 8030dfa:	200a      	movs	r0, #10
 8030dfc:	f006 fa62 	bl	80372c4 <putchar>

	printf( "       **************************************************************\n" );
 8030e00:	4816      	ldr	r0, [pc, #88]	; (8030e5c <display_diag_RF+0x84>)
 8030e02:	f006 fae3 	bl	80373cc <puts>
	printf( "       *                         RF Test.                           *\n" );
 8030e06:	4816      	ldr	r0, [pc, #88]	; (8030e60 <display_diag_RF+0x88>)
 8030e08:	f006 fae0 	bl	80373cc <puts>
	printf( "       *                                                            *\n" );
 8030e0c:	4815      	ldr	r0, [pc, #84]	; (8030e64 <display_diag_RF+0x8c>)
 8030e0e:	f006 fadd 	bl	80373cc <puts>
	printf( "       *  0 : RF-IC Info                                            *\n" );
 8030e12:	4815      	ldr	r0, [pc, #84]	; (8030e68 <display_diag_RF+0x90>)
 8030e14:	f006 fada 	bl	80373cc <puts>
	printf( "       *  1 : RF Tx.                                                *\n" );
 8030e18:	4814      	ldr	r0, [pc, #80]	; (8030e6c <display_diag_RF+0x94>)
 8030e1a:	f006 fad7 	bl	80373cc <puts>
	printf( "       *  2 : RF Rx.                                                *\n" );
 8030e1e:	4814      	ldr	r0, [pc, #80]	; (8030e70 <display_diag_RF+0x98>)
 8030e20:	f006 fad4 	bl	80373cc <puts>
	printf( "       *  3 : RF Tx->Rx Loopback                                    *\n" );
 8030e24:	4813      	ldr	r0, [pc, #76]	; (8030e74 <display_diag_RF+0x9c>)
 8030e26:	f006 fad1 	bl	80373cc <puts>
	printf( "       *  i : RF-Init                                               *\n" );
 8030e2a:	4813      	ldr	r0, [pc, #76]	; (8030e78 <display_diag_RF+0xa0>)
 8030e2c:	f006 face 	bl	80373cc <puts>
	printf( "       *  v : Verify RF-Init                                        *\n" );
 8030e30:	4812      	ldr	r0, [pc, #72]	; (8030e7c <display_diag_RF+0xa4>)
 8030e32:	f006 facb 	bl	80373cc <puts>
	printf( "       *  d : Enable Debug SPI                                      *\n" );
 8030e36:	4812      	ldr	r0, [pc, #72]	; (8030e80 <display_diag_RF+0xa8>)
 8030e38:	f006 fac8 	bl	80373cc <puts>
	printf( "       **************************************************************\n" );
 8030e3c:	4807      	ldr	r0, [pc, #28]	; (8030e5c <display_diag_RF+0x84>)
 8030e3e:	f006 fac5 	bl	80373cc <puts>
	printf( "\n" );
 8030e42:	200a      	movs	r0, #10
 8030e44:	f006 fa3e 	bl	80372c4 <putchar>
	printf( "           Please select number[to quit, push 'q', 'Q']:" );
 8030e48:	480e      	ldr	r0, [pc, #56]	; (8030e84 <display_diag_RF+0xac>)
 8030e4a:	f006 fa23 	bl	8037294 <iprintf>
}
 8030e4e:	bf00      	nop
 8030e50:	bd80      	pop	{r7, pc}
 8030e52:	bf00      	nop
 8030e54:	0803a38c 	.word	0x0803a38c
 8030e58:	0803a394 	.word	0x0803a394
 8030e5c:	0803a39c 	.word	0x0803a39c
 8030e60:	0803aa98 	.word	0x0803aa98
 8030e64:	0803a42c 	.word	0x0803a42c
 8030e68:	0803aae0 	.word	0x0803aae0
 8030e6c:	0803ab28 	.word	0x0803ab28
 8030e70:	0803ab70 	.word	0x0803ab70
 8030e74:	0803abb8 	.word	0x0803abb8
 8030e78:	0803ac00 	.word	0x0803ac00
 8030e7c:	0803ac48 	.word	0x0803ac48
 8030e80:	0803ac90 	.word	0x0803ac90
 8030e84:	0803a5dc 	.word	0x0803a5dc

08030e88 <cmd_diag_proc_RF>:


//========================================================================
int cmd_diag_proc_RF( char *cmd )
//========================================================================
{
 8030e88:	b580      	push	{r7, lr}
 8030e8a:	b084      	sub	sp, #16
 8030e8c:	af00      	add	r7, sp, #0
 8030e8e:	6078      	str	r0, [r7, #4]
//	sel = ibuf[0];
	char sel = cmd[0];
 8030e90:	687b      	ldr	r3, [r7, #4]
 8030e92:	781b      	ldrb	r3, [r3, #0]
 8030e94:	73fb      	strb	r3, [r7, #15]

	switch ( sel )
 8030e96:	7bfb      	ldrb	r3, [r7, #15]
 8030e98:	2b71      	cmp	r3, #113	; 0x71
 8030e9a:	d00a      	beq.n	8030eb2 <cmd_diag_proc_RF+0x2a>
 8030e9c:	2b71      	cmp	r3, #113	; 0x71
 8030e9e:	dc0e      	bgt.n	8030ebe <cmd_diag_proc_RF+0x36>
 8030ea0:	2b51      	cmp	r3, #81	; 0x51
 8030ea2:	d006      	beq.n	8030eb2 <cmd_diag_proc_RF+0x2a>
 8030ea4:	2b69      	cmp	r3, #105	; 0x69
 8030ea6:	d10a      	bne.n	8030ebe <cmd_diag_proc_RF+0x36>
	{
#if defined(_WIN32)
#else
		case 'i':	cmd_rfwds_init( 0, 0 );	break;
 8030ea8:	2100      	movs	r1, #0
 8030eaa:	2000      	movs	r0, #0
 8030eac:	f000 f822 	bl	8030ef4 <cmd_rfwds_init>
 8030eb0:	e006      	b.n	8030ec0 <cmd_diag_proc_RF+0x38>
#endif
	case 'q':
	case 'Q':
#if defined(USE_FREERTOS)
#else
		cmd_diag(0, 0);
 8030eb2:	2100      	movs	r1, #0
 8030eb4:	2000      	movs	r0, #0
 8030eb6:	f7ff fecf 	bl	8030c58 <cmd_diag>
#endif
		return 0;
 8030eba:	2300      	movs	r3, #0
 8030ebc:	e001      	b.n	8030ec2 <cmd_diag_proc_RF+0x3a>
	default:
		break;
 8030ebe:	bf00      	nop
	}

	return 1;
 8030ec0:	2301      	movs	r3, #1
}
 8030ec2:	4618      	mov	r0, r3
 8030ec4:	3710      	adds	r7, #16
 8030ec6:	46bd      	mov	sp, r7
 8030ec8:	bd80      	pop	{r7, pc}
	...

08030ecc <cmd_diag_RF>:

//========================================================================
int cmd_diag_RF( int argc, char *argv[] )
//========================================================================
{
 8030ecc:	b580      	push	{r7, lr}
 8030ece:	b082      	sub	sp, #8
 8030ed0:	af00      	add	r7, sp, #0
 8030ed2:	6078      	str	r0, [r7, #4]
 8030ed4:	6039      	str	r1, [r7, #0]
		taskYIELD();
	}

#else
	//	HAL_Delay( 0 );
	SetCLIPrompt( display_diag_RF );
 8030ed6:	4805      	ldr	r0, [pc, #20]	; (8030eec <cmd_diag_RF+0x20>)
 8030ed8:	f7ff fcf6 	bl	80308c8 <SetCLIPrompt>
	SetCLIProc( cmd_diag_proc_RF );
 8030edc:	4804      	ldr	r0, [pc, #16]	; (8030ef0 <cmd_diag_RF+0x24>)
 8030ede:	f7ff fd03 	bl	80308e8 <SetCLIProc>

#endif

	/* NOTREACHED */

	return 0;
 8030ee2:	2300      	movs	r3, #0
}
 8030ee4:	4618      	mov	r0, r3
 8030ee6:	3708      	adds	r7, #8
 8030ee8:	46bd      	mov	sp, r7
 8030eea:	bd80      	pop	{r7, pc}
 8030eec:	08030dd9 	.word	0x08030dd9
 8030ef0:	08030e89 	.word	0x08030e89

08030ef4 <cmd_rfwds_init>:
}

//========================================================================
int		cmd_rfwds_init	( int argc, char *argv[] )
//========================================================================
{
 8030ef4:	b580      	push	{r7, lr}
 8030ef6:	b082      	sub	sp, #8
 8030ef8:	af00      	add	r7, sp, #0
 8030efa:	6078      	str	r0, [r7, #4]
 8030efc:	6039      	str	r1, [r7, #0]
	printf( "%s(%d)\n", __func__, __LINE__ );
 8030efe:	f240 221a 	movw	r2, #538	; 0x21a
 8030f02:	4905      	ldr	r1, [pc, #20]	; (8030f18 <cmd_rfwds_init+0x24>)
 8030f04:	4805      	ldr	r0, [pc, #20]	; (8030f1c <cmd_rfwds_init+0x28>)
 8030f06:	f006 f9c5 	bl	8037294 <iprintf>

#if defined(_WIN32)
#else

	vRadio_Init();
 8030f0a:	f7fc f97b 	bl	802d204 <vRadio_Init>

#endif

	return 0;
 8030f0e:	2300      	movs	r3, #0
}
 8030f10:	4618      	mov	r0, r3
 8030f12:	3708      	adds	r7, #8
 8030f14:	46bd      	mov	sp, r7
 8030f16:	bd80      	pop	{r7, pc}
 8030f18:	08041888 	.word	0x08041888
 8030f1c:	0803acd8 	.word	0x0803acd8

08030f20 <GetDbg>:


//========================================================================
int GetDbg( void )
//========================================================================
{
 8030f20:	b480      	push	{r7}
 8030f22:	af00      	add	r7, sp, #0
	return debug_level;
 8030f24:	4b03      	ldr	r3, [pc, #12]	; (8030f34 <GetDbg+0x14>)
 8030f26:	681b      	ldr	r3, [r3, #0]
}
 8030f28:	4618      	mov	r0, r3
 8030f2a:	46bd      	mov	sp, r7
 8030f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030f30:	4770      	bx	lr
 8030f32:	bf00      	nop
 8030f34:	200022e4 	.word	0x200022e4

08030f38 <cmd_debug>:
}

//========================================================================
int cmd_debug(int argc, char *argv[])
//========================================================================
{
 8030f38:	b580      	push	{r7, lr}
 8030f3a:	b082      	sub	sp, #8
 8030f3c:	af00      	add	r7, sp, #0
 8030f3e:	6078      	str	r0, [r7, #4]
 8030f40:	6039      	str	r1, [r7, #0]
	if (argc == 1)
 8030f42:	687b      	ldr	r3, [r7, #4]
 8030f44:	2b01      	cmp	r3, #1
 8030f46:	d106      	bne.n	8030f56 <cmd_debug+0x1e>
	{
		printf("current debug level = 0x%x\n", debug_level);
 8030f48:	4b0d      	ldr	r3, [pc, #52]	; (8030f80 <cmd_debug+0x48>)
 8030f4a:	681b      	ldr	r3, [r3, #0]
 8030f4c:	4619      	mov	r1, r3
 8030f4e:	480d      	ldr	r0, [pc, #52]	; (8030f84 <cmd_debug+0x4c>)
 8030f50:	f006 f9a0 	bl	8037294 <iprintf>
 8030f54:	e00e      	b.n	8030f74 <cmd_debug+0x3c>
	}
	else
	{
		debug_level = a2hex(argv[1]);
 8030f56:	683b      	ldr	r3, [r7, #0]
 8030f58:	3304      	adds	r3, #4
 8030f5a:	681b      	ldr	r3, [r3, #0]
 8030f5c:	4618      	mov	r0, r3
 8030f5e:	f7ff fa89 	bl	8030474 <a2hex>
 8030f62:	4603      	mov	r3, r0
 8030f64:	4a06      	ldr	r2, [pc, #24]	; (8030f80 <cmd_debug+0x48>)
 8030f66:	6013      	str	r3, [r2, #0]
		printf("debug level = 0x%x\n", debug_level);
 8030f68:	4b05      	ldr	r3, [pc, #20]	; (8030f80 <cmd_debug+0x48>)
 8030f6a:	681b      	ldr	r3, [r3, #0]
 8030f6c:	4619      	mov	r1, r3
 8030f6e:	4806      	ldr	r0, [pc, #24]	; (8030f88 <cmd_debug+0x50>)
 8030f70:	f006 f990 	bl	8037294 <iprintf>
	}

	return 0;
 8030f74:	2300      	movs	r3, #0
}
 8030f76:	4618      	mov	r0, r3
 8030f78:	3708      	adds	r7, #8
 8030f7a:	46bd      	mov	sp, r7
 8030f7c:	bd80      	pop	{r7, pc}
 8030f7e:	bf00      	nop
 8030f80:	200022e4 	.word	0x200022e4
 8030f84:	0803ad4c 	.word	0x0803ad4c
 8030f88:	0803ad68 	.word	0x0803ad68

08030f8c <I2C_BusScan>:
#include "main.h"		//	hi2c1

//========================================================================
void I2C_BusScan( I2C_HandleTypeDef *phi2c )
//========================================================================
{
 8030f8c:	b580      	push	{r7, lr}
 8030f8e:	b084      	sub	sp, #16
 8030f90:	af00      	add	r7, sp, #0
 8030f92:	6078      	str	r0, [r7, #4]

	printf( "Scanning I2C bus:\r\n" );
 8030f94:	4816      	ldr	r0, [pc, #88]	; (8030ff0 <I2C_BusScan+0x64>)
 8030f96:	f006 fa19 	bl	80373cc <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for ( i = 1; i < 128; i++ )
 8030f9a:	2301      	movs	r3, #1
 8030f9c:	73fb      	strb	r3, [r7, #15]
 8030f9e:	e01b      	b.n	8030fd8 <I2C_BusScan+0x4c>
		 * &hi2c1 is the handle
		 * (uint16_t)(i<<1) is the i2c address left aligned
		 * retries 2
		 * timeout 2
		 */
		result = HAL_I2C_IsDeviceReady( phi2c, (uint16_t)( i << 1 ), 2, 2 );
 8030fa0:	7bfb      	ldrb	r3, [r7, #15]
 8030fa2:	b29b      	uxth	r3, r3
 8030fa4:	005b      	lsls	r3, r3, #1
 8030fa6:	b299      	uxth	r1, r3
 8030fa8:	2302      	movs	r3, #2
 8030faa:	2202      	movs	r2, #2
 8030fac:	6878      	ldr	r0, [r7, #4]
 8030fae:	f7f3 f863 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8030fb2:	4603      	mov	r3, r0
 8030fb4:	73bb      	strb	r3, [r7, #14]
		if ( result != HAL_OK ) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 8030fb6:	7bbb      	ldrb	r3, [r7, #14]
 8030fb8:	2b00      	cmp	r3, #0
 8030fba:	d002      	beq.n	8030fc2 <I2C_BusScan+0x36>
		{
			printf( "." ); // No ACK received at that address
 8030fbc:	202e      	movs	r0, #46	; 0x2e
 8030fbe:	f006 f981 	bl	80372c4 <putchar>
		}
		if ( result == HAL_OK )
 8030fc2:	7bbb      	ldrb	r3, [r7, #14]
 8030fc4:	2b00      	cmp	r3, #0
 8030fc6:	d104      	bne.n	8030fd2 <I2C_BusScan+0x46>
		{
			printf( "0x%X", i ); // Received an ACK at that address
 8030fc8:	7bfb      	ldrb	r3, [r7, #15]
 8030fca:	4619      	mov	r1, r3
 8030fcc:	4809      	ldr	r0, [pc, #36]	; (8030ff4 <I2C_BusScan+0x68>)
 8030fce:	f006 f961 	bl	8037294 <iprintf>
	for ( i = 1; i < 128; i++ )
 8030fd2:	7bfb      	ldrb	r3, [r7, #15]
 8030fd4:	3301      	adds	r3, #1
 8030fd6:	73fb      	strb	r3, [r7, #15]
 8030fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8030fdc:	2b00      	cmp	r3, #0
 8030fde:	dadf      	bge.n	8030fa0 <I2C_BusScan+0x14>
		}
	}
	printf( "\r\n" );
 8030fe0:	4805      	ldr	r0, [pc, #20]	; (8030ff8 <I2C_BusScan+0x6c>)
 8030fe2:	f006 f9f3 	bl	80373cc <puts>
}
 8030fe6:	bf00      	nop
 8030fe8:	3710      	adds	r7, #16
 8030fea:	46bd      	mov	sp, r7
 8030fec:	bd80      	pop	{r7, pc}
 8030fee:	bf00      	nop
 8030ff0:	0803add8 	.word	0x0803add8
 8030ff4:	0803adec 	.word	0x0803adec
 8030ff8:	0803adf4 	.word	0x0803adf4

08030ffc <TestEEPROM>:
//int at24_HAL_ReadString(I2C_HandleTypeDef *hi2c,char *pString,uint16_t MemAddress,uint8_t length);

//========================================================================
void TestEEPROM( I2C_HandleTypeDef *hi2c )
//========================================================================
{
 8030ffc:	b580      	push	{r7, lr}
 8030ffe:	b0b6      	sub	sp, #216	; 0xd8
 8031000:	af02      	add	r7, sp, #8
 8031002:	6078      	str	r0, [r7, #4]
	char d[100]={7,5,10};
 8031004:	4b2a      	ldr	r3, [pc, #168]	; (80310b0 <TestEEPROM+0xb4>)
 8031006:	66fb      	str	r3, [r7, #108]	; 0x6c
 8031008:	f107 0370 	add.w	r3, r7, #112	; 0x70
 803100c:	2260      	movs	r2, #96	; 0x60
 803100e:	2100      	movs	r1, #0
 8031010:	4618      	mov	r0, r3
 8031012:	f006 f857 	bl	80370c4 <memset>
	char c[100]={20,20,20};
 8031016:	4b27      	ldr	r3, [pc, #156]	; (80310b4 <TestEEPROM+0xb8>)
 8031018:	60bb      	str	r3, [r7, #8]
 803101a:	f107 030c 	add.w	r3, r7, #12
 803101e:	2260      	movs	r2, #96	; 0x60
 8031020:	2100      	movs	r1, #0
 8031022:	4618      	mov	r0, r3
 8031024:	f006 f84e 	bl	80370c4 <memset>
	
	printf("%s - 0x%02X, 0x%02X, 0x%02X\r\n", __func__, c[0],c[1],c[2]);
 8031028:	7a3b      	ldrb	r3, [r7, #8]
 803102a:	461a      	mov	r2, r3
 803102c:	7a7b      	ldrb	r3, [r7, #9]
 803102e:	4619      	mov	r1, r3
 8031030:	7abb      	ldrb	r3, [r7, #10]
 8031032:	9300      	str	r3, [sp, #0]
 8031034:	460b      	mov	r3, r1
 8031036:	4920      	ldr	r1, [pc, #128]	; (80310b8 <TestEEPROM+0xbc>)
 8031038:	4820      	ldr	r0, [pc, #128]	; (80310bc <TestEEPROM+0xc0>)
 803103a:	f006 f92b 	bl	8037294 <iprintf>
	M24_HAL_ReadBytes(hi2c, 0xA0, 0x100, (uint8_t *)c, 100);
 803103e:	f107 0308 	add.w	r3, r7, #8
 8031042:	2264      	movs	r2, #100	; 0x64
 8031044:	9200      	str	r2, [sp, #0]
 8031046:	f44f 7280 	mov.w	r2, #256	; 0x100
 803104a:	21a0      	movs	r1, #160	; 0xa0
 803104c:	6878      	ldr	r0, [r7, #4]
 803104e:	f000 f859 	bl	8031104 <M24_HAL_ReadBytes>
	printf("%s - 0x%02X, 0x%02X, 0x%02X\r\n", __func__, c[0],c[1],c[2]);
 8031052:	7a3b      	ldrb	r3, [r7, #8]
 8031054:	461a      	mov	r2, r3
 8031056:	7a7b      	ldrb	r3, [r7, #9]
 8031058:	4619      	mov	r1, r3
 803105a:	7abb      	ldrb	r3, [r7, #10]
 803105c:	9300      	str	r3, [sp, #0]
 803105e:	460b      	mov	r3, r1
 8031060:	4915      	ldr	r1, [pc, #84]	; (80310b8 <TestEEPROM+0xbc>)
 8031062:	4816      	ldr	r0, [pc, #88]	; (80310bc <TestEEPROM+0xc0>)
 8031064:	f006 f916 	bl	8037294 <iprintf>
	
	M24_HAL_WriteBytes(hi2c, 0xA0, 0x100, (uint8_t *)d, 100);
 8031068:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 803106c:	2264      	movs	r2, #100	; 0x64
 803106e:	9200      	str	r2, [sp, #0]
 8031070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8031074:	21a0      	movs	r1, #160	; 0xa0
 8031076:	6878      	ldr	r0, [r7, #4]
 8031078:	f000 f822 	bl	80310c0 <M24_HAL_WriteBytes>

	M24_HAL_ReadBytes(hi2c, 0xA0, 0x100, (uint8_t *)c, 100);
 803107c:	f107 0308 	add.w	r3, r7, #8
 8031080:	2264      	movs	r2, #100	; 0x64
 8031082:	9200      	str	r2, [sp, #0]
 8031084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8031088:	21a0      	movs	r1, #160	; 0xa0
 803108a:	6878      	ldr	r0, [r7, #4]
 803108c:	f000 f83a 	bl	8031104 <M24_HAL_ReadBytes>
	printf("%s - 0x%02X, 0x%02X, 0x%02X\r\n", __func__, c[0],c[1],c[2]);
 8031090:	7a3b      	ldrb	r3, [r7, #8]
 8031092:	461a      	mov	r2, r3
 8031094:	7a7b      	ldrb	r3, [r7, #9]
 8031096:	4619      	mov	r1, r3
 8031098:	7abb      	ldrb	r3, [r7, #10]
 803109a:	9300      	str	r3, [sp, #0]
 803109c:	460b      	mov	r3, r1
 803109e:	4906      	ldr	r1, [pc, #24]	; (80310b8 <TestEEPROM+0xbc>)
 80310a0:	4806      	ldr	r0, [pc, #24]	; (80310bc <TestEEPROM+0xc0>)
 80310a2:	f006 f8f7 	bl	8037294 <iprintf>
}
 80310a6:	bf00      	nop
 80310a8:	37d0      	adds	r7, #208	; 0xd0
 80310aa:	46bd      	mov	sp, r7
 80310ac:	bd80      	pop	{r7, pc}
 80310ae:	bf00      	nop
 80310b0:	000a0507 	.word	0x000a0507
 80310b4:	00141414 	.word	0x00141414
 80310b8:	08041898 	.word	0x08041898
 80310bc:	0803adf8 	.word	0x0803adf8

080310c0 <M24_HAL_WriteBytes>:
  * @retval
  */
//========================================================================
int M24_HAL_WriteBytes( I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t TxBufferSize )
//========================================================================
{
 80310c0:	b580      	push	{r7, lr}
 80310c2:	b088      	sub	sp, #32
 80310c4:	af04      	add	r7, sp, #16
 80310c6:	60f8      	str	r0, [r7, #12]
 80310c8:	607b      	str	r3, [r7, #4]
 80310ca:	460b      	mov	r3, r1
 80310cc:	817b      	strh	r3, [r7, #10]
 80310ce:	4613      	mov	r3, r2
 80310d0:	813b      	strh	r3, [r7, #8]
	while ( HAL_I2C_Mem_Write( hi2c, (uint16_t)DevAddress, (uint16_t)MemAddress, I2C_MEMADD_SIZE_16BIT, pData, (uint16_t)TxBufferSize, 1000 ) != HAL_OK );
 80310d2:	bf00      	nop
 80310d4:	893a      	ldrh	r2, [r7, #8]
 80310d6:	8979      	ldrh	r1, [r7, #10]
 80310d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80310dc:	9302      	str	r3, [sp, #8]
 80310de:	8b3b      	ldrh	r3, [r7, #24]
 80310e0:	9301      	str	r3, [sp, #4]
 80310e2:	687b      	ldr	r3, [r7, #4]
 80310e4:	9300      	str	r3, [sp, #0]
 80310e6:	2310      	movs	r3, #16
 80310e8:	68f8      	ldr	r0, [r7, #12]
 80310ea:	f7f2 fca5 	bl	8023a38 <HAL_I2C_Mem_Write>
 80310ee:	4603      	mov	r3, r0
 80310f0:	2b00      	cmp	r3, #0
 80310f2:	d1ef      	bne.n	80310d4 <M24_HAL_WriteBytes+0x14>

	HAL_Delay(5);
 80310f4:	2005      	movs	r0, #5
 80310f6:	f7f0 fd43 	bl	8021b80 <HAL_Delay>

	return 1;
 80310fa:	2301      	movs	r3, #1
}
 80310fc:	4618      	mov	r0, r3
 80310fe:	3710      	adds	r7, #16
 8031100:	46bd      	mov	sp, r7
 8031102:	bd80      	pop	{r7, pc}

08031104 <M24_HAL_ReadBytes>:


//========================================================================
int M24_HAL_ReadBytes( I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t RxBufferSize )
//========================================================================
{
 8031104:	b580      	push	{r7, lr}
 8031106:	b08a      	sub	sp, #40	; 0x28
 8031108:	af04      	add	r7, sp, #16
 803110a:	60f8      	str	r0, [r7, #12]
 803110c:	607b      	str	r3, [r7, #4]
 803110e:	460b      	mov	r3, r1
 8031110:	817b      	strh	r3, [r7, #10]
 8031112:	4613      	mov	r3, r2
 8031114:	813b      	strh	r3, [r7, #8]
	int TimeOut;

	TimeOut = 0;
 8031116:	2300      	movs	r3, #0
 8031118:	617b      	str	r3, [r7, #20]
	while ( HAL_I2C_Mem_Read( hi2c, (uint16_t)DevAddress, (uint16_t)MemAddress, I2C_MEMADD_SIZE_16BIT, pData, (uint16_t)RxBufferSize, 1000 ) != HAL_OK && TimeOut < 10 ) TimeOut++;
 803111a:	e002      	b.n	8031122 <M24_HAL_ReadBytes+0x1e>
 803111c:	697b      	ldr	r3, [r7, #20]
 803111e:	3301      	adds	r3, #1
 8031120:	617b      	str	r3, [r7, #20]
 8031122:	893a      	ldrh	r2, [r7, #8]
 8031124:	8979      	ldrh	r1, [r7, #10]
 8031126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 803112a:	9302      	str	r3, [sp, #8]
 803112c:	8c3b      	ldrh	r3, [r7, #32]
 803112e:	9301      	str	r3, [sp, #4]
 8031130:	687b      	ldr	r3, [r7, #4]
 8031132:	9300      	str	r3, [sp, #0]
 8031134:	2310      	movs	r3, #16
 8031136:	68f8      	ldr	r0, [r7, #12]
 8031138:	f7f2 fd78 	bl	8023c2c <HAL_I2C_Mem_Read>
 803113c:	4603      	mov	r3, r0
 803113e:	2b00      	cmp	r3, #0
 8031140:	d002      	beq.n	8031148 <M24_HAL_ReadBytes+0x44>
 8031142:	697b      	ldr	r3, [r7, #20]
 8031144:	2b09      	cmp	r3, #9
 8031146:	dde9      	ble.n	803111c <M24_HAL_ReadBytes+0x18>

	return 1;
 8031148:	2301      	movs	r3, #1
}
 803114a:	4618      	mov	r0, r3
 803114c:	3718      	adds	r7, #24
 803114e:	46bd      	mov	sp, r7
 8031150:	bd80      	pop	{r7, pc}
	...

08031154 <cmd_eepromRead>:

//========================================================================
int cmd_eepromRead		( int argc, char * argv[] )
//========================================================================
{
 8031154:	b580      	push	{r7, lr}
 8031156:	b088      	sub	sp, #32
 8031158:	af02      	add	r7, sp, #8
 803115a:	6078      	str	r0, [r7, #4]
 803115c:	6039      	str	r1, [r7, #0]
    //	eepr [address]
    int 	nAddr = 0;
 803115e:	2300      	movs	r3, #0
 8031160:	617b      	str	r3, [r7, #20]
    uint8_t	buf[10];

    switch ( argc )
 8031162:	687b      	ldr	r3, [r7, #4]
 8031164:	2b02      	cmp	r3, #2
 8031166:	d109      	bne.n	803117c <cmd_eepromRead+0x28>
    {
    case 2:		sscanf( argv[1], "%d", &nAddr );		//	cmd [address]
 8031168:	683b      	ldr	r3, [r7, #0]
 803116a:	3304      	adds	r3, #4
 803116c:	681b      	ldr	r3, [r3, #0]
 803116e:	f107 0214 	add.w	r2, r7, #20
 8031172:	490d      	ldr	r1, [pc, #52]	; (80311a8 <cmd_eepromRead+0x54>)
 8031174:	4618      	mov	r0, r3
 8031176:	f006 fadf 	bl	8037738 <siscanf>
        break;
 803117a:	bf00      	nop
    }

	M24_HAL_ReadBytes(&hi2c1, 0xA0, nAddr, (uint8_t *)buf, 1);
 803117c:	697b      	ldr	r3, [r7, #20]
 803117e:	b29a      	uxth	r2, r3
 8031180:	f107 0308 	add.w	r3, r7, #8
 8031184:	2101      	movs	r1, #1
 8031186:	9100      	str	r1, [sp, #0]
 8031188:	21a0      	movs	r1, #160	; 0xa0
 803118a:	4808      	ldr	r0, [pc, #32]	; (80311ac <cmd_eepromRead+0x58>)
 803118c:	f7ff ffba 	bl	8031104 <M24_HAL_ReadBytes>

	printf("[0x%04X] 0x%02X\n", nAddr, buf[0]);
 8031190:	697b      	ldr	r3, [r7, #20]
 8031192:	7a3a      	ldrb	r2, [r7, #8]
 8031194:	4619      	mov	r1, r3
 8031196:	4806      	ldr	r0, [pc, #24]	; (80311b0 <cmd_eepromRead+0x5c>)
 8031198:	f006 f87c 	bl	8037294 <iprintf>
}
 803119c:	bf00      	nop
 803119e:	4618      	mov	r0, r3
 80311a0:	3718      	adds	r7, #24
 80311a2:	46bd      	mov	sp, r7
 80311a4:	bd80      	pop	{r7, pc}
 80311a6:	bf00      	nop
 80311a8:	0803ae18 	.word	0x0803ae18
 80311ac:	20000e38 	.word	0x20000e38
 80311b0:	0803ae1c 	.word	0x0803ae1c

080311b4 <cmd_eepromWrite>:


//========================================================================
int cmd_eepromWrite	( int argc, char * argv[] )
//========================================================================
{
 80311b4:	b580      	push	{r7, lr}
 80311b6:	b08a      	sub	sp, #40	; 0x28
 80311b8:	af02      	add	r7, sp, #8
 80311ba:	6078      	str	r0, [r7, #4]
 80311bc:	6039      	str	r1, [r7, #0]
    //	eepw [address] [value]
    int 	nAddr = 0;
 80311be:	2300      	movs	r3, #0
 80311c0:	61fb      	str	r3, [r7, #28]
    int		nVal = 0;
 80311c2:	2300      	movs	r3, #0
 80311c4:	61bb      	str	r3, [r7, #24]
    uint8_t	buf[10];

    switch ( argc )
 80311c6:	687b      	ldr	r3, [r7, #4]
 80311c8:	2b02      	cmp	r3, #2
 80311ca:	d00b      	beq.n	80311e4 <cmd_eepromWrite+0x30>
 80311cc:	687b      	ldr	r3, [r7, #4]
 80311ce:	2b03      	cmp	r3, #3
 80311d0:	d112      	bne.n	80311f8 <cmd_eepromWrite+0x44>
    {
    case 3:		sscanf( argv[2], "%d", &nVal );			//	cmd [address] [value]
 80311d2:	683b      	ldr	r3, [r7, #0]
 80311d4:	3308      	adds	r3, #8
 80311d6:	681b      	ldr	r3, [r3, #0]
 80311d8:	f107 0218 	add.w	r2, r7, #24
 80311dc:	4915      	ldr	r1, [pc, #84]	; (8031234 <cmd_eepromWrite+0x80>)
 80311de:	4618      	mov	r0, r3
 80311e0:	f006 faaa 	bl	8037738 <siscanf>
    case 2:		sscanf( argv[1], "%d", &nAddr );		//	cmd [address]
 80311e4:	683b      	ldr	r3, [r7, #0]
 80311e6:	3304      	adds	r3, #4
 80311e8:	681b      	ldr	r3, [r3, #0]
 80311ea:	f107 021c 	add.w	r2, r7, #28
 80311ee:	4911      	ldr	r1, [pc, #68]	; (8031234 <cmd_eepromWrite+0x80>)
 80311f0:	4618      	mov	r0, r3
 80311f2:	f006 faa1 	bl	8037738 <siscanf>
        break;
 80311f6:	bf00      	nop
    }

    buf[0] = nVal;
 80311f8:	69bb      	ldr	r3, [r7, #24]
 80311fa:	b2db      	uxtb	r3, r3
 80311fc:	733b      	strb	r3, [r7, #12]

    printf("[0x%04X] 0x%02X\n", nAddr, buf[0]);
 80311fe:	69fb      	ldr	r3, [r7, #28]
 8031200:	7b3a      	ldrb	r2, [r7, #12]
 8031202:	4619      	mov	r1, r3
 8031204:	480c      	ldr	r0, [pc, #48]	; (8031238 <cmd_eepromWrite+0x84>)
 8031206:	f006 f845 	bl	8037294 <iprintf>

	M24_HAL_WriteBytes(&hi2c1, 0xA0, nAddr, (uint8_t *)buf, 1);
 803120a:	69fb      	ldr	r3, [r7, #28]
 803120c:	b29a      	uxth	r2, r3
 803120e:	f107 030c 	add.w	r3, r7, #12
 8031212:	2101      	movs	r1, #1
 8031214:	9100      	str	r1, [sp, #0]
 8031216:	21a0      	movs	r1, #160	; 0xa0
 8031218:	4808      	ldr	r0, [pc, #32]	; (803123c <cmd_eepromWrite+0x88>)
 803121a:	f7ff ff51 	bl	80310c0 <M24_HAL_WriteBytes>

	printf("[0x%04X] 0x%02X\n", nAddr, buf[0]);
 803121e:	69fb      	ldr	r3, [r7, #28]
 8031220:	7b3a      	ldrb	r2, [r7, #12]
 8031222:	4619      	mov	r1, r3
 8031224:	4804      	ldr	r0, [pc, #16]	; (8031238 <cmd_eepromWrite+0x84>)
 8031226:	f006 f835 	bl	8037294 <iprintf>
}
 803122a:	bf00      	nop
 803122c:	4618      	mov	r0, r3
 803122e:	3720      	adds	r7, #32
 8031230:	46bd      	mov	sp, r7
 8031232:	bd80      	pop	{r7, pc}
 8031234:	0803ae18 	.word	0x0803ae18
 8031238:	0803ae1c 	.word	0x0803ae1c
 803123c:	20000e38 	.word	0x20000e38

08031240 <cmd_eepromDump>:


//========================================================================
int cmd_eepromDump		( int argc, char * argv[] )
//========================================================================
{
 8031240:	b580      	push	{r7, lr}
 8031242:	b0c8      	sub	sp, #288	; 0x120
 8031244:	af02      	add	r7, sp, #8
 8031246:	f507 738c 	add.w	r3, r7, #280	; 0x118
 803124a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 803124e:	6018      	str	r0, [r3, #0]
 8031250:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8031254:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8031258:	6019      	str	r1, [r3, #0]
    //	eepr [address]
	int		nAddr = 0;
 803125a:	2300      	movs	r3, #0
 803125c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int 	nSize = 256;
 8031260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8031264:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    int		i;

    uint8_t	buf[256];		//	Page

    switch ( argc )
 8031268:	f507 738c 	add.w	r3, r7, #280	; 0x118
 803126c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8031270:	681b      	ldr	r3, [r3, #0]
 8031272:	2b02      	cmp	r3, #2
 8031274:	d013      	beq.n	803129e <cmd_eepromDump+0x5e>
 8031276:	f507 738c 	add.w	r3, r7, #280	; 0x118
 803127a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 803127e:	681b      	ldr	r3, [r3, #0]
 8031280:	2b03      	cmp	r3, #3
 8031282:	d11a      	bne.n	80312ba <cmd_eepromDump+0x7a>
    {
    case 3:		sscanf( argv[2], "%d", &nSize );		//	cmd [address] [Size]
 8031284:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8031288:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 803128c:	681b      	ldr	r3, [r3, #0]
 803128e:	3308      	adds	r3, #8
 8031290:	681b      	ldr	r3, [r3, #0]
 8031292:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8031296:	4929      	ldr	r1, [pc, #164]	; (803133c <cmd_eepromDump+0xfc>)
 8031298:	4618      	mov	r0, r3
 803129a:	f006 fa4d 	bl	8037738 <siscanf>
    case 2:		sscanf( argv[1], "%d", &nAddr );		//	cmd [address]
 803129e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80312a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80312a6:	681b      	ldr	r3, [r3, #0]
 80312a8:	3304      	adds	r3, #4
 80312aa:	681b      	ldr	r3, [r3, #0]
 80312ac:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80312b0:	4922      	ldr	r1, [pc, #136]	; (803133c <cmd_eepromDump+0xfc>)
 80312b2:	4618      	mov	r0, r3
 80312b4:	f006 fa40 	bl	8037738 <siscanf>
        break;
 80312b8:	bf00      	nop
    }

	M24_HAL_ReadBytes(&hi2c1, 0xA0, nAddr, (uint8_t *)buf, nSize);
 80312ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80312be:	b29a      	uxth	r2, r3
 80312c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80312c4:	b29b      	uxth	r3, r3
 80312c6:	f107 010c 	add.w	r1, r7, #12
 80312ca:	9300      	str	r3, [sp, #0]
 80312cc:	460b      	mov	r3, r1
 80312ce:	21a0      	movs	r1, #160	; 0xa0
 80312d0:	481b      	ldr	r0, [pc, #108]	; (8031340 <cmd_eepromDump+0x100>)
 80312d2:	f7ff ff17 	bl	8031104 <M24_HAL_ReadBytes>

	printf("[0x%04X] size : %d\n", nAddr, nSize);
 80312d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80312da:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80312de:	4619      	mov	r1, r3
 80312e0:	4818      	ldr	r0, [pc, #96]	; (8031344 <cmd_eepromDump+0x104>)
 80312e2:	f005 ffd7 	bl	8037294 <iprintf>

	for( i = 0; i < nSize; i++ )
 80312e6:	2300      	movs	r3, #0
 80312e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80312ec:	e01a      	b.n	8031324 <cmd_eepromDump+0xe4>
	{
		printf("0x%02X ", buf[i]);
 80312ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80312f2:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80312f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80312fa:	4413      	add	r3, r2
 80312fc:	781b      	ldrb	r3, [r3, #0]
 80312fe:	4619      	mov	r1, r3
 8031300:	4811      	ldr	r0, [pc, #68]	; (8031348 <cmd_eepromDump+0x108>)
 8031302:	f005 ffc7 	bl	8037294 <iprintf>
		if ( ((i+1)%16) == 0 ) printf("\n");
 8031306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 803130a:	3301      	adds	r3, #1
 803130c:	f003 030f 	and.w	r3, r3, #15
 8031310:	2b00      	cmp	r3, #0
 8031312:	d102      	bne.n	803131a <cmd_eepromDump+0xda>
 8031314:	200a      	movs	r0, #10
 8031316:	f005 ffd5 	bl	80372c4 <putchar>
	for( i = 0; i < nSize; i++ )
 803131a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 803131e:	3301      	adds	r3, #1
 8031320:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8031324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8031328:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 803132c:	429a      	cmp	r2, r3
 803132e:	dbde      	blt.n	80312ee <cmd_eepromDump+0xae>
	}
}
 8031330:	bf00      	nop
 8031332:	4618      	mov	r0, r3
 8031334:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8031338:	46bd      	mov	sp, r7
 803133a:	bd80      	pop	{r7, pc}
 803133c:	0803ae18 	.word	0x0803ae18
 8031340:	20000e38 	.word	0x20000e38
 8031344:	0803ae30 	.word	0x0803ae30
 8031348:	0803ae44 	.word	0x0803ae44

0803134c <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 803134c:	b580      	push	{r7, lr}
 803134e:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock(); 
 8031350:	f7f1 fcbc 	bl	8022ccc <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
 8031354:	4b02      	ldr	r3, [pc, #8]	; (8031360 <FLASH_If_Init+0x14>)
 8031356:	22f3      	movs	r2, #243	; 0xf3
 8031358:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
}
 803135a:	bf00      	nop
 803135c:	bd80      	pop	{r7, pc}
 803135e:	bf00      	nop
 8031360:	40023c00 	.word	0x40023c00

08031364 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 8031364:	b580      	push	{r7, lr}
 8031366:	b08a      	sub	sp, #40	; 0x28
 8031368:	af00      	add	r7, sp, #0
 803136a:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  FLASH_If_Init();
 803136c:	f7ff ffee 	bl	803134c <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(StartSector);
 8031370:	6878      	ldr	r0, [r7, #4]
 8031372:	f000 f85b 	bl	803142c <GetSector>
 8031376:	6278      	str	r0, [r7, #36]	; 0x24
  
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8031378:	2300      	movs	r3, #0
 803137a:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = UserStartSector;
 803137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803137e:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors = 10;
 8031380:	230a      	movs	r3, #10
 8031382:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 8031384:	2302      	movs	r3, #2
 8031386:	61fb      	str	r3, [r7, #28]
    
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 8031388:	f107 0220 	add.w	r2, r7, #32
 803138c:	f107 030c 	add.w	r3, r7, #12
 8031390:	4611      	mov	r1, r2
 8031392:	4618      	mov	r0, r3
 8031394:	f7f1 fdec 	bl	8022f70 <HAL_FLASHEx_Erase>
 8031398:	4603      	mov	r3, r0
 803139a:	2b00      	cmp	r3, #0
 803139c:	d001      	beq.n	80313a2 <FLASH_If_Erase+0x3e>
  {
     /* Error occurred while page erase */
     return (1);
 803139e:	2301      	movs	r3, #1
 80313a0:	e000      	b.n	80313a4 <FLASH_If_Erase+0x40>
  }
  
  return (0);
 80313a2:	2300      	movs	r3, #0
}
 80313a4:	4618      	mov	r0, r3
 80313a6:	3728      	adds	r7, #40	; 0x28
 80313a8:	46bd      	mov	sp, r7
 80313aa:	bd80      	pop	{r7, pc}

080313ac <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t FlashAddress, uint32_t* Data ,uint32_t DataLength)
{
 80313ac:	b5b0      	push	{r4, r5, r7, lr}
 80313ae:	b086      	sub	sp, #24
 80313b0:	af00      	add	r7, sp, #0
 80313b2:	60f8      	str	r0, [r7, #12]
 80313b4:	60b9      	str	r1, [r7, #8]
 80313b6:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 80313b8:	2300      	movs	r3, #0
 80313ba:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80313bc:	2300      	movs	r3, #0
 80313be:	617b      	str	r3, [r7, #20]
 80313c0:	e024      	b.n	803140c <FLASH_If_Write+0x60>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)      
 80313c2:	697b      	ldr	r3, [r7, #20]
 80313c4:	009b      	lsls	r3, r3, #2
 80313c6:	68ba      	ldr	r2, [r7, #8]
 80313c8:	4413      	add	r3, r2
 80313ca:	681b      	ldr	r3, [r3, #0]
 80313cc:	2200      	movs	r2, #0
 80313ce:	461c      	mov	r4, r3
 80313d0:	4615      	mov	r5, r2
 80313d2:	4622      	mov	r2, r4
 80313d4:	462b      	mov	r3, r5
 80313d6:	68f9      	ldr	r1, [r7, #12]
 80313d8:	2002      	movs	r0, #2
 80313da:	f7f1 fc23 	bl	8022c24 <HAL_FLASH_Program>
 80313de:	4603      	mov	r3, r0
 80313e0:	2b00      	cmp	r3, #0
 80313e2:	d10e      	bne.n	8031402 <FLASH_If_Write+0x56>
    {
     /* Check the written value */
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 80313e4:	68fb      	ldr	r3, [r7, #12]
 80313e6:	681a      	ldr	r2, [r3, #0]
 80313e8:	697b      	ldr	r3, [r7, #20]
 80313ea:	009b      	lsls	r3, r3, #2
 80313ec:	68b9      	ldr	r1, [r7, #8]
 80313ee:	440b      	add	r3, r1
 80313f0:	681b      	ldr	r3, [r3, #0]
 80313f2:	429a      	cmp	r2, r3
 80313f4:	d001      	beq.n	80313fa <FLASH_If_Write+0x4e>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 80313f6:	2302      	movs	r3, #2
 80313f8:	e011      	b.n	803141e <FLASH_If_Write+0x72>
      }
      /* Increment FLASH destination address */
      FlashAddress += 4;
 80313fa:	68fb      	ldr	r3, [r7, #12]
 80313fc:	3304      	adds	r3, #4
 80313fe:	60fb      	str	r3, [r7, #12]
 8031400:	e001      	b.n	8031406 <FLASH_If_Write+0x5a>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 8031402:	2303      	movs	r3, #3
 8031404:	e00b      	b.n	803141e <FLASH_If_Write+0x72>
  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8031406:	697b      	ldr	r3, [r7, #20]
 8031408:	3301      	adds	r3, #1
 803140a:	617b      	str	r3, [r7, #20]
 803140c:	697a      	ldr	r2, [r7, #20]
 803140e:	687b      	ldr	r3, [r7, #4]
 8031410:	429a      	cmp	r2, r3
 8031412:	d203      	bcs.n	803141c <FLASH_If_Write+0x70>
 8031414:	68fb      	ldr	r3, [r7, #12]
 8031416:	4a04      	ldr	r2, [pc, #16]	; (8031428 <FLASH_If_Write+0x7c>)
 8031418:	4293      	cmp	r3, r2
 803141a:	d9d2      	bls.n	80313c2 <FLASH_If_Write+0x16>
    }
  }

  return (FLASHIF_OK);
 803141c:	2300      	movs	r3, #0
}
 803141e:	4618      	mov	r0, r3
 8031420:	3718      	adds	r7, #24
 8031422:	46bd      	mov	sp, r7
 8031424:	bdb0      	pop	{r4, r5, r7, pc}
 8031426:	bf00      	nop
 8031428:	080ffffb 	.word	0x080ffffb

0803142c <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 803142c:	b480      	push	{r7}
 803142e:	b085      	sub	sp, #20
 8031430:	af00      	add	r7, sp, #0
 8031432:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8031434:	2300      	movs	r3, #0
 8031436:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8031438:	687b      	ldr	r3, [r7, #4]
 803143a:	4a40      	ldr	r2, [pc, #256]	; (803153c <GetSector+0x110>)
 803143c:	4293      	cmp	r3, r2
 803143e:	d206      	bcs.n	803144e <GetSector+0x22>
 8031440:	687b      	ldr	r3, [r7, #4]
 8031442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8031446:	d302      	bcc.n	803144e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 8031448:	2300      	movs	r3, #0
 803144a:	60fb      	str	r3, [r7, #12]
 803144c:	e06f      	b.n	803152e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 803144e:	687b      	ldr	r3, [r7, #4]
 8031450:	4a3b      	ldr	r2, [pc, #236]	; (8031540 <GetSector+0x114>)
 8031452:	4293      	cmp	r3, r2
 8031454:	d206      	bcs.n	8031464 <GetSector+0x38>
 8031456:	687b      	ldr	r3, [r7, #4]
 8031458:	4a38      	ldr	r2, [pc, #224]	; (803153c <GetSector+0x110>)
 803145a:	4293      	cmp	r3, r2
 803145c:	d302      	bcc.n	8031464 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 803145e:	2301      	movs	r3, #1
 8031460:	60fb      	str	r3, [r7, #12]
 8031462:	e064      	b.n	803152e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8031464:	687b      	ldr	r3, [r7, #4]
 8031466:	4a37      	ldr	r2, [pc, #220]	; (8031544 <GetSector+0x118>)
 8031468:	4293      	cmp	r3, r2
 803146a:	d206      	bcs.n	803147a <GetSector+0x4e>
 803146c:	687b      	ldr	r3, [r7, #4]
 803146e:	4a34      	ldr	r2, [pc, #208]	; (8031540 <GetSector+0x114>)
 8031470:	4293      	cmp	r3, r2
 8031472:	d302      	bcc.n	803147a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 8031474:	2302      	movs	r3, #2
 8031476:	60fb      	str	r3, [r7, #12]
 8031478:	e059      	b.n	803152e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 803147a:	687b      	ldr	r3, [r7, #4]
 803147c:	4a32      	ldr	r2, [pc, #200]	; (8031548 <GetSector+0x11c>)
 803147e:	4293      	cmp	r3, r2
 8031480:	d806      	bhi.n	8031490 <GetSector+0x64>
 8031482:	687b      	ldr	r3, [r7, #4]
 8031484:	4a2f      	ldr	r2, [pc, #188]	; (8031544 <GetSector+0x118>)
 8031486:	4293      	cmp	r3, r2
 8031488:	d302      	bcc.n	8031490 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 803148a:	2303      	movs	r3, #3
 803148c:	60fb      	str	r3, [r7, #12]
 803148e:	e04e      	b.n	803152e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8031490:	687b      	ldr	r3, [r7, #4]
 8031492:	4a2e      	ldr	r2, [pc, #184]	; (803154c <GetSector+0x120>)
 8031494:	4293      	cmp	r3, r2
 8031496:	d806      	bhi.n	80314a6 <GetSector+0x7a>
 8031498:	687b      	ldr	r3, [r7, #4]
 803149a:	4a2b      	ldr	r2, [pc, #172]	; (8031548 <GetSector+0x11c>)
 803149c:	4293      	cmp	r3, r2
 803149e:	d902      	bls.n	80314a6 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 80314a0:	2304      	movs	r3, #4
 80314a2:	60fb      	str	r3, [r7, #12]
 80314a4:	e043      	b.n	803152e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80314a6:	687b      	ldr	r3, [r7, #4]
 80314a8:	4a29      	ldr	r2, [pc, #164]	; (8031550 <GetSector+0x124>)
 80314aa:	4293      	cmp	r3, r2
 80314ac:	d806      	bhi.n	80314bc <GetSector+0x90>
 80314ae:	687b      	ldr	r3, [r7, #4]
 80314b0:	4a26      	ldr	r2, [pc, #152]	; (803154c <GetSector+0x120>)
 80314b2:	4293      	cmp	r3, r2
 80314b4:	d902      	bls.n	80314bc <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 80314b6:	2305      	movs	r3, #5
 80314b8:	60fb      	str	r3, [r7, #12]
 80314ba:	e038      	b.n	803152e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80314bc:	687b      	ldr	r3, [r7, #4]
 80314be:	4a25      	ldr	r2, [pc, #148]	; (8031554 <GetSector+0x128>)
 80314c0:	4293      	cmp	r3, r2
 80314c2:	d806      	bhi.n	80314d2 <GetSector+0xa6>
 80314c4:	687b      	ldr	r3, [r7, #4]
 80314c6:	4a22      	ldr	r2, [pc, #136]	; (8031550 <GetSector+0x124>)
 80314c8:	4293      	cmp	r3, r2
 80314ca:	d902      	bls.n	80314d2 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 80314cc:	2306      	movs	r3, #6
 80314ce:	60fb      	str	r3, [r7, #12]
 80314d0:	e02d      	b.n	803152e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 80314d2:	687b      	ldr	r3, [r7, #4]
 80314d4:	4a20      	ldr	r2, [pc, #128]	; (8031558 <GetSector+0x12c>)
 80314d6:	4293      	cmp	r3, r2
 80314d8:	d806      	bhi.n	80314e8 <GetSector+0xbc>
 80314da:	687b      	ldr	r3, [r7, #4]
 80314dc:	4a1d      	ldr	r2, [pc, #116]	; (8031554 <GetSector+0x128>)
 80314de:	4293      	cmp	r3, r2
 80314e0:	d902      	bls.n	80314e8 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;  
 80314e2:	2307      	movs	r3, #7
 80314e4:	60fb      	str	r3, [r7, #12]
 80314e6:	e022      	b.n	803152e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 80314e8:	687b      	ldr	r3, [r7, #4]
 80314ea:	4a1c      	ldr	r2, [pc, #112]	; (803155c <GetSector+0x130>)
 80314ec:	4293      	cmp	r3, r2
 80314ee:	d806      	bhi.n	80314fe <GetSector+0xd2>
 80314f0:	687b      	ldr	r3, [r7, #4]
 80314f2:	4a19      	ldr	r2, [pc, #100]	; (8031558 <GetSector+0x12c>)
 80314f4:	4293      	cmp	r3, r2
 80314f6:	d902      	bls.n	80314fe <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;  
 80314f8:	2308      	movs	r3, #8
 80314fa:	60fb      	str	r3, [r7, #12]
 80314fc:	e017      	b.n	803152e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 80314fe:	687b      	ldr	r3, [r7, #4]
 8031500:	4a17      	ldr	r2, [pc, #92]	; (8031560 <GetSector+0x134>)
 8031502:	4293      	cmp	r3, r2
 8031504:	d806      	bhi.n	8031514 <GetSector+0xe8>
 8031506:	687b      	ldr	r3, [r7, #4]
 8031508:	4a14      	ldr	r2, [pc, #80]	; (803155c <GetSector+0x130>)
 803150a:	4293      	cmp	r3, r2
 803150c:	d902      	bls.n	8031514 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;  
 803150e:	2309      	movs	r3, #9
 8031510:	60fb      	str	r3, [r7, #12]
 8031512:	e00c      	b.n	803152e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8031514:	687b      	ldr	r3, [r7, #4]
 8031516:	4a13      	ldr	r2, [pc, #76]	; (8031564 <GetSector+0x138>)
 8031518:	4293      	cmp	r3, r2
 803151a:	d806      	bhi.n	803152a <GetSector+0xfe>
 803151c:	687b      	ldr	r3, [r7, #4]
 803151e:	4a10      	ldr	r2, [pc, #64]	; (8031560 <GetSector+0x134>)
 8031520:	4293      	cmp	r3, r2
 8031522:	d902      	bls.n	803152a <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;  
 8031524:	230a      	movs	r3, #10
 8031526:	60fb      	str	r3, [r7, #12]
 8031528:	e001      	b.n	803152e <GetSector+0x102>
  }
  else /*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
  {
    sector = FLASH_SECTOR_11;  
 803152a:	230b      	movs	r3, #11
 803152c:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 803152e:	68fb      	ldr	r3, [r7, #12]
}
 8031530:	4618      	mov	r0, r3
 8031532:	3714      	adds	r7, #20
 8031534:	46bd      	mov	sp, r7
 8031536:	f85d 7b04 	ldr.w	r7, [sp], #4
 803153a:	4770      	bx	lr
 803153c:	08004000 	.word	0x08004000
 8031540:	08008000 	.word	0x08008000
 8031544:	0800c000 	.word	0x0800c000
 8031548:	0800ffff 	.word	0x0800ffff
 803154c:	0801ffff 	.word	0x0801ffff
 8031550:	0803ffff 	.word	0x0803ffff
 8031554:	0805ffff 	.word	0x0805ffff
 8031558:	0807ffff 	.word	0x0807ffff
 803155c:	0809ffff 	.word	0x0809ffff
 8031560:	080bffff 	.word	0x080bffff
 8031564:	080dffff 	.word	0x080dffff

08031568 <FLASH_If_FindLastData>:
}

//========================================================================
uint32_t	FLASH_If_FindLastData	( uint32_t baseAddr, uint32_t endAddr )
//========================================================================
{
 8031568:	b580      	push	{r7, lr}
 803156a:	b084      	sub	sp, #16
 803156c:	af00      	add	r7, sp, #0
 803156e:	6078      	str	r0, [r7, #4]
 8031570:	6039      	str	r1, [r7, #0]
	//	해당영역의 마지막 Data를 찾는다.
	//	Flash 영역 Binary Data Size 확인용.
	printf( "%s(%d)\n", __func__, __LINE__ );
 8031572:	f44f 7291 	mov.w	r2, #290	; 0x122
 8031576:	4912      	ldr	r1, [pc, #72]	; (80315c0 <FLASH_If_FindLastData+0x58>)
 8031578:	4812      	ldr	r0, [pc, #72]	; (80315c4 <FLASH_If_FindLastData+0x5c>)
 803157a:	f005 fe8b 	bl	8037294 <iprintf>

	uint32_t findAddr;

	int	nFound = 0;
 803157e:	2300      	movs	r3, #0
 8031580:	60bb      	str	r3, [r7, #8]

	for( findAddr = endAddr; findAddr > baseAddr; findAddr -= 4 )
 8031582:	683b      	ldr	r3, [r7, #0]
 8031584:	60fb      	str	r3, [r7, #12]
 8031586:	e00a      	b.n	803159e <FLASH_If_FindLastData+0x36>
	{
		if( *(__IO uint32_t*)findAddr != 0xFFFFFFFF )
 8031588:	68fb      	ldr	r3, [r7, #12]
 803158a:	681b      	ldr	r3, [r3, #0]
 803158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8031590:	d002      	beq.n	8031598 <FLASH_If_FindLastData+0x30>
		{
			//	Found Last Valid Data.
			nFound = 1;
 8031592:	2301      	movs	r3, #1
 8031594:	60bb      	str	r3, [r7, #8]
			break;
 8031596:	e006      	b.n	80315a6 <FLASH_If_FindLastData+0x3e>
	for( findAddr = endAddr; findAddr > baseAddr; findAddr -= 4 )
 8031598:	68fb      	ldr	r3, [r7, #12]
 803159a:	3b04      	subs	r3, #4
 803159c:	60fb      	str	r3, [r7, #12]
 803159e:	68fa      	ldr	r2, [r7, #12]
 80315a0:	687b      	ldr	r3, [r7, #4]
 80315a2:	429a      	cmp	r2, r3
 80315a4:	d8f0      	bhi.n	8031588 <FLASH_If_FindLastData+0x20>
		}
	}

	if ( nFound == 0 )	return 0;		//	Not Found
 80315a6:	68bb      	ldr	r3, [r7, #8]
 80315a8:	2b00      	cmp	r3, #0
 80315aa:	d101      	bne.n	80315b0 <FLASH_If_FindLastData+0x48>
 80315ac:	2300      	movs	r3, #0
 80315ae:	e003      	b.n	80315b8 <FLASH_If_FindLastData+0x50>
	else 				return (findAddr - baseAddr) + 4;
 80315b0:	68fa      	ldr	r2, [r7, #12]
 80315b2:	687b      	ldr	r3, [r7, #4]
 80315b4:	1ad3      	subs	r3, r2, r3
 80315b6:	3304      	adds	r3, #4
}
 80315b8:	4618      	mov	r0, r3
 80315ba:	3710      	adds	r7, #16
 80315bc:	46bd      	mov	sp, r7
 80315be:	bd80      	pop	{r7, pc}
 80315c0:	080418a4 	.word	0x080418a4
 80315c4:	0803ae4c 	.word	0x0803ae4c

080315c8 <FLASH_If_GetBootSize>:

//========================================================================
uint32_t	FLASH_If_GetBootSize	( void )
//========================================================================
{
 80315c8:	b580      	push	{r7, lr}
 80315ca:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 80315cc:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80315d0:	4905      	ldr	r1, [pc, #20]	; (80315e8 <FLASH_If_GetBootSize+0x20>)
 80315d2:	4806      	ldr	r0, [pc, #24]	; (80315ec <FLASH_If_GetBootSize+0x24>)
 80315d4:	f005 fe5e 	bl	8037294 <iprintf>

	return FLASH_If_FindLastData( ADDR_FLASH_BOOT, (ADDR_FLASH_CONF - 4) );
 80315d8:	4905      	ldr	r1, [pc, #20]	; (80315f0 <FLASH_If_GetBootSize+0x28>)
 80315da:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80315de:	f7ff ffc3 	bl	8031568 <FLASH_If_FindLastData>
 80315e2:	4603      	mov	r3, r0
}
 80315e4:	4618      	mov	r0, r3
 80315e6:	bd80      	pop	{r7, pc}
 80315e8:	080418bc 	.word	0x080418bc
 80315ec:	0803ae4c 	.word	0x0803ae4c
 80315f0:	0800fffc 	.word	0x0800fffc

080315f4 <FLASH_If_GetAppSize>:

//========================================================================
uint32_t	FLASH_If_GetAppSize		( void )
//========================================================================
{
 80315f4:	b580      	push	{r7, lr}
 80315f6:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 80315f8:	f240 1243 	movw	r2, #323	; 0x143
 80315fc:	4905      	ldr	r1, [pc, #20]	; (8031614 <FLASH_If_GetAppSize+0x20>)
 80315fe:	4806      	ldr	r0, [pc, #24]	; (8031618 <FLASH_If_GetAppSize+0x24>)
 8031600:	f005 fe48 	bl	8037294 <iprintf>

	return FLASH_If_FindLastData( ADDR_FLASH_APP, (ADDR_FLASH_IMGBOOT - 4) );
 8031604:	4905      	ldr	r1, [pc, #20]	; (803161c <FLASH_If_GetAppSize+0x28>)
 8031606:	4806      	ldr	r0, [pc, #24]	; (8031620 <FLASH_If_GetAppSize+0x2c>)
 8031608:	f7ff ffae 	bl	8031568 <FLASH_If_FindLastData>
 803160c:	4603      	mov	r3, r0
}
 803160e:	4618      	mov	r0, r3
 8031610:	bd80      	pop	{r7, pc}
 8031612:	bf00      	nop
 8031614:	080418d4 	.word	0x080418d4
 8031618:	0803ae4c 	.word	0x0803ae4c
 803161c:	0807fffc 	.word	0x0807fffc
 8031620:	08020000 	.word	0x08020000

08031624 <GetKey>:
static int s_btnStat[9] = { 0, };	//	Default ( 1 - pull-up )

//========================================================================
int	GetKey( int eKey )
//========================================================================
{
 8031624:	b480      	push	{r7}
 8031626:	b083      	sub	sp, #12
 8031628:	af00      	add	r7, sp, #0
 803162a:	6078      	str	r0, [r7, #4]
	return (s_btnStat[eKey]);
 803162c:	4a04      	ldr	r2, [pc, #16]	; (8031640 <GetKey+0x1c>)
 803162e:	687b      	ldr	r3, [r7, #4]
 8031630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8031634:	4618      	mov	r0, r3
 8031636:	370c      	adds	r7, #12
 8031638:	46bd      	mov	sp, r7
 803163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803163e:	4770      	bx	lr
 8031640:	200022e8 	.word	0x200022e8

08031644 <GetKeyStat>:


//========================================================================
void GetKeyStat( int *btnStat )
//========================================================================
{
 8031644:	b580      	push	{r7, lr}
 8031646:	b082      	sub	sp, #8
 8031648:	af00      	add	r7, sp, #0
 803164a:	6078      	str	r0, [r7, #4]
	//	Pull-Up ( Active Low )
	btnStat[0] = !( HAL_GPIO_ReadPin( DOME1_GPIO_Port, DOME1_Pin ) );	//	Menu
 803164c:	2101      	movs	r1, #1
 803164e:	483a      	ldr	r0, [pc, #232]	; (8031738 <GetKeyStat+0xf4>)
 8031650:	f7f1 ff4c 	bl	80234ec <HAL_GPIO_ReadPin>
 8031654:	4603      	mov	r3, r0
 8031656:	2b00      	cmp	r3, #0
 8031658:	bf0c      	ite	eq
 803165a:	2301      	moveq	r3, #1
 803165c:	2300      	movne	r3, #0
 803165e:	b2db      	uxtb	r3, r3
 8031660:	461a      	mov	r2, r3
 8031662:	687b      	ldr	r3, [r7, #4]
 8031664:	601a      	str	r2, [r3, #0]
	btnStat[1] = !( HAL_GPIO_ReadPin( DOME2_GPIO_Port, DOME2_Pin ) );	//	Up
 8031666:	2102      	movs	r1, #2
 8031668:	4833      	ldr	r0, [pc, #204]	; (8031738 <GetKeyStat+0xf4>)
 803166a:	f7f1 ff3f 	bl	80234ec <HAL_GPIO_ReadPin>
 803166e:	4603      	mov	r3, r0
 8031670:	2b00      	cmp	r3, #0
 8031672:	bf0c      	ite	eq
 8031674:	2301      	moveq	r3, #1
 8031676:	2300      	movne	r3, #0
 8031678:	b2da      	uxtb	r2, r3
 803167a:	687b      	ldr	r3, [r7, #4]
 803167c:	3304      	adds	r3, #4
 803167e:	601a      	str	r2, [r3, #0]
	btnStat[2] = !( HAL_GPIO_ReadPin( DOME3_GPIO_Port, DOME3_Pin ) );	//	OK
 8031680:	2104      	movs	r1, #4
 8031682:	482d      	ldr	r0, [pc, #180]	; (8031738 <GetKeyStat+0xf4>)
 8031684:	f7f1 ff32 	bl	80234ec <HAL_GPIO_ReadPin>
 8031688:	4603      	mov	r3, r0
 803168a:	2b00      	cmp	r3, #0
 803168c:	bf0c      	ite	eq
 803168e:	2301      	moveq	r3, #1
 8031690:	2300      	movne	r3, #0
 8031692:	b2da      	uxtb	r2, r3
 8031694:	687b      	ldr	r3, [r7, #4]
 8031696:	3308      	adds	r3, #8
 8031698:	601a      	str	r2, [r3, #0]
	btnStat[3] = !( HAL_GPIO_ReadPin( DOME4_GPIO_Port, DOME4_Pin ) );	//	Light
 803169a:	2108      	movs	r1, #8
 803169c:	4826      	ldr	r0, [pc, #152]	; (8031738 <GetKeyStat+0xf4>)
 803169e:	f7f1 ff25 	bl	80234ec <HAL_GPIO_ReadPin>
 80316a2:	4603      	mov	r3, r0
 80316a4:	2b00      	cmp	r3, #0
 80316a6:	bf0c      	ite	eq
 80316a8:	2301      	moveq	r3, #1
 80316aa:	2300      	movne	r3, #0
 80316ac:	b2da      	uxtb	r2, r3
 80316ae:	687b      	ldr	r3, [r7, #4]
 80316b0:	330c      	adds	r3, #12
 80316b2:	601a      	str	r2, [r3, #0]
	btnStat[4] = !( HAL_GPIO_ReadPin( DOME5_GPIO_Port, DOME5_Pin ) );	//	Down
 80316b4:	2110      	movs	r1, #16
 80316b6:	4820      	ldr	r0, [pc, #128]	; (8031738 <GetKeyStat+0xf4>)
 80316b8:	f7f1 ff18 	bl	80234ec <HAL_GPIO_ReadPin>
 80316bc:	4603      	mov	r3, r0
 80316be:	2b00      	cmp	r3, #0
 80316c0:	bf0c      	ite	eq
 80316c2:	2301      	moveq	r3, #1
 80316c4:	2300      	movne	r3, #0
 80316c6:	b2da      	uxtb	r2, r3
 80316c8:	687b      	ldr	r3, [r7, #4]
 80316ca:	3310      	adds	r3, #16
 80316cc:	601a      	str	r2, [r3, #0]
	btnStat[5] = !( HAL_GPIO_ReadPin( DOME6_GPIO_Port, DOME6_Pin ) );	//	Vol
 80316ce:	2120      	movs	r1, #32
 80316d0:	4819      	ldr	r0, [pc, #100]	; (8031738 <GetKeyStat+0xf4>)
 80316d2:	f7f1 ff0b 	bl	80234ec <HAL_GPIO_ReadPin>
 80316d6:	4603      	mov	r3, r0
 80316d8:	2b00      	cmp	r3, #0
 80316da:	bf0c      	ite	eq
 80316dc:	2301      	moveq	r3, #1
 80316de:	2300      	movne	r3, #0
 80316e0:	b2da      	uxtb	r2, r3
 80316e2:	687b      	ldr	r3, [r7, #4]
 80316e4:	3314      	adds	r3, #20
 80316e6:	601a      	str	r2, [r3, #0]
	btnStat[6] = !( HAL_GPIO_ReadPin( PTT_KEY_GPIO_Port, PTT_KEY_Pin ) );
 80316e8:	2180      	movs	r1, #128	; 0x80
 80316ea:	4813      	ldr	r0, [pc, #76]	; (8031738 <GetKeyStat+0xf4>)
 80316ec:	f7f1 fefe 	bl	80234ec <HAL_GPIO_ReadPin>
 80316f0:	4603      	mov	r3, r0
 80316f2:	2b00      	cmp	r3, #0
 80316f4:	bf0c      	ite	eq
 80316f6:	2301      	moveq	r3, #1
 80316f8:	2300      	movne	r3, #0
 80316fa:	b2da      	uxtb	r2, r3
 80316fc:	687b      	ldr	r3, [r7, #4]
 80316fe:	3318      	adds	r3, #24
 8031700:	601a      	str	r2, [r3, #0]
	btnStat[7] = !( HAL_GPIO_ReadPin( SOS_KEY_GPIO_Port, SOS_KEY_Pin ) );
 8031702:	2140      	movs	r1, #64	; 0x40
 8031704:	480c      	ldr	r0, [pc, #48]	; (8031738 <GetKeyStat+0xf4>)
 8031706:	f7f1 fef1 	bl	80234ec <HAL_GPIO_ReadPin>
 803170a:	4603      	mov	r3, r0
 803170c:	2b00      	cmp	r3, #0
 803170e:	bf0c      	ite	eq
 8031710:	2301      	moveq	r3, #1
 8031712:	2300      	movne	r3, #0
 8031714:	b2da      	uxtb	r2, r3
 8031716:	687b      	ldr	r3, [r7, #4]
 8031718:	331c      	adds	r3, #28
 803171a:	601a      	str	r2, [r3, #0]

	//	Pull-Down ( Active High )
	btnStat[8] = ( HAL_GPIO_ReadPin( ON_OFF_KEY_GPIO_Port, ON_OFF_KEY_Pin ) );
 803171c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8031720:	4805      	ldr	r0, [pc, #20]	; (8031738 <GetKeyStat+0xf4>)
 8031722:	f7f1 fee3 	bl	80234ec <HAL_GPIO_ReadPin>
 8031726:	4603      	mov	r3, r0
 8031728:	461a      	mov	r2, r3
 803172a:	687b      	ldr	r3, [r7, #4]
 803172c:	3320      	adds	r3, #32
 803172e:	601a      	str	r2, [r3, #0]
}
 8031730:	bf00      	nop
 8031732:	3708      	adds	r7, #8
 8031734:	46bd      	mov	sp, r7
 8031736:	bd80      	pop	{r7, pc}
 8031738:	40020c00 	.word	0x40020c00

0803173c <LoopProcKey>:
#include <string.h>		//	memcmp()

//========================================================================
void LoopProcKey ( uint32_t tickCurr )
//========================================================================
{
 803173c:	b5b0      	push	{r4, r5, r7, lr}
 803173e:	b08c      	sub	sp, #48	; 0x30
 8031740:	af00      	add	r7, sp, #0
 8031742:	6078      	str	r0, [r7, #4]
	//========================================================================
	static uint32_t tickBase = 0;
	int 	btnStat[9];

	//    if( ( HAL_GetTick() - tickBase ) >= 1000 )
	if ( ( tickCurr - tickBase ) >= 100 )
 8031744:	4b4e      	ldr	r3, [pc, #312]	; (8031880 <LoopProcKey+0x144>)
 8031746:	681b      	ldr	r3, [r3, #0]
 8031748:	687a      	ldr	r2, [r7, #4]
 803174a:	1ad3      	subs	r3, r2, r3
 803174c:	2b63      	cmp	r3, #99	; 0x63
 803174e:	d96c      	bls.n	803182a <LoopProcKey+0xee>
		//========================================================================
		//  Period : 100 ms

		//========================================================================
		//	Key 값 얻기.
		GetKeyStat( btnStat );
 8031750:	f107 030c 	add.w	r3, r7, #12
 8031754:	4618      	mov	r0, r3
 8031756:	f7ff ff75 	bl	8031644 <GetKeyStat>

		if ( memcmp( s_btnStat, btnStat, sizeof( btnStat ) ) != 0 )
 803175a:	f107 030c 	add.w	r3, r7, #12
 803175e:	2224      	movs	r2, #36	; 0x24
 8031760:	4619      	mov	r1, r3
 8031762:	4848      	ldr	r0, [pc, #288]	; (8031884 <LoopProcKey+0x148>)
 8031764:	f005 fc90 	bl	8037088 <memcmp>
 8031768:	4603      	mov	r3, r0
 803176a:	2b00      	cmp	r3, #0
 803176c:	d05a      	beq.n	8031824 <LoopProcKey+0xe8>
//			printf("\n");
//			printf("[btnStat] ");
//			for( i = 0; i < 9; i++ ) printf("%d ", btnStat[i]);
//			printf("\n");

			if ( s_btnStat[0] != btnStat[0] )	KeyMenu		( btnStat[0] );	//	DOME1
 803176e:	4b45      	ldr	r3, [pc, #276]	; (8031884 <LoopProcKey+0x148>)
 8031770:	681a      	ldr	r2, [r3, #0]
 8031772:	68fb      	ldr	r3, [r7, #12]
 8031774:	429a      	cmp	r2, r3
 8031776:	d003      	beq.n	8031780 <LoopProcKey+0x44>
 8031778:	68fb      	ldr	r3, [r7, #12]
 803177a:	4618      	mov	r0, r3
 803177c:	f000 f888 	bl	8031890 <KeyMenu>
			if ( s_btnStat[1] != btnStat[1] )	KeyUp		( btnStat[1] );	//	DOME2
 8031780:	4b40      	ldr	r3, [pc, #256]	; (8031884 <LoopProcKey+0x148>)
 8031782:	685a      	ldr	r2, [r3, #4]
 8031784:	693b      	ldr	r3, [r7, #16]
 8031786:	429a      	cmp	r2, r3
 8031788:	d003      	beq.n	8031792 <LoopProcKey+0x56>
 803178a:	693b      	ldr	r3, [r7, #16]
 803178c:	4618      	mov	r0, r3
 803178e:	f000 f8e5 	bl	803195c <KeyUp>
			if ( s_btnStat[2] != btnStat[2] )	KeyOK		( btnStat[2] );	//	DOME3
 8031792:	4b3c      	ldr	r3, [pc, #240]	; (8031884 <LoopProcKey+0x148>)
 8031794:	689a      	ldr	r2, [r3, #8]
 8031796:	697b      	ldr	r3, [r7, #20]
 8031798:	429a      	cmp	r2, r3
 803179a:	d003      	beq.n	80317a4 <LoopProcKey+0x68>
 803179c:	697b      	ldr	r3, [r7, #20]
 803179e:	4618      	mov	r0, r3
 80317a0:	f000 f88e 	bl	80318c0 <KeyOK>
			if ( s_btnStat[3] != btnStat[3] )	KeyLight	( btnStat[3] );	//	DOME4
 80317a4:	4b37      	ldr	r3, [pc, #220]	; (8031884 <LoopProcKey+0x148>)
 80317a6:	68da      	ldr	r2, [r3, #12]
 80317a8:	69bb      	ldr	r3, [r7, #24]
 80317aa:	429a      	cmp	r2, r3
 80317ac:	d003      	beq.n	80317b6 <LoopProcKey+0x7a>
 80317ae:	69bb      	ldr	r3, [r7, #24]
 80317b0:	4618      	mov	r0, r3
 80317b2:	f000 f89d 	bl	80318f0 <KeyLight>
			if ( s_btnStat[4] != btnStat[4] )	KeyDown		( btnStat[4] );	//	DOME5
 80317b6:	4b33      	ldr	r3, [pc, #204]	; (8031884 <LoopProcKey+0x148>)
 80317b8:	691a      	ldr	r2, [r3, #16]
 80317ba:	69fb      	ldr	r3, [r7, #28]
 80317bc:	429a      	cmp	r2, r3
 80317be:	d003      	beq.n	80317c8 <LoopProcKey+0x8c>
 80317c0:	69fb      	ldr	r3, [r7, #28]
 80317c2:	4618      	mov	r0, r3
 80317c4:	f000 f8e2 	bl	803198c <KeyDown>
			if ( s_btnStat[5] != btnStat[5] )	KeyVol		( btnStat[5] );	//	DOME6
 80317c8:	4b2e      	ldr	r3, [pc, #184]	; (8031884 <LoopProcKey+0x148>)
 80317ca:	695a      	ldr	r2, [r3, #20]
 80317cc:	6a3b      	ldr	r3, [r7, #32]
 80317ce:	429a      	cmp	r2, r3
 80317d0:	d003      	beq.n	80317da <LoopProcKey+0x9e>
 80317d2:	6a3b      	ldr	r3, [r7, #32]
 80317d4:	4618      	mov	r0, r3
 80317d6:	f000 f8f1 	bl	80319bc <KeyVol>
			if ( s_btnStat[6] != btnStat[6] )	KeyPtt		( btnStat[6] );	//	PTT
 80317da:	4b2a      	ldr	r3, [pc, #168]	; (8031884 <LoopProcKey+0x148>)
 80317dc:	699a      	ldr	r2, [r3, #24]
 80317de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80317e0:	429a      	cmp	r2, r3
 80317e2:	d003      	beq.n	80317ec <LoopProcKey+0xb0>
 80317e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80317e6:	4618      	mov	r0, r3
 80317e8:	f000 f924 	bl	8031a34 <KeyPtt>
			if ( s_btnStat[7] != btnStat[7] )	KeySos		( btnStat[7] );	//	SOS
 80317ec:	4b25      	ldr	r3, [pc, #148]	; (8031884 <LoopProcKey+0x148>)
 80317ee:	69da      	ldr	r2, [r3, #28]
 80317f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80317f2:	429a      	cmp	r2, r3
 80317f4:	d003      	beq.n	80317fe <LoopProcKey+0xc2>
 80317f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80317f8:	4618      	mov	r0, r3
 80317fa:	f000 f995 	bl	8031b28 <KeySos>
			if ( s_btnStat[8] != btnStat[8] )	KeyPwrOnOff	( btnStat[8] );	//	ON/OFF
 80317fe:	4b21      	ldr	r3, [pc, #132]	; (8031884 <LoopProcKey+0x148>)
 8031800:	6a1a      	ldr	r2, [r3, #32]
 8031802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031804:	429a      	cmp	r2, r3
 8031806:	d003      	beq.n	8031810 <LoopProcKey+0xd4>
 8031808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803180a:	4618      	mov	r0, r3
 803180c:	f000 f9f8 	bl	8031c00 <KeyPwrOnOff>

			//	값 저장.
			memcpy( s_btnStat, btnStat, sizeof( btnStat ) );
 8031810:	4b1c      	ldr	r3, [pc, #112]	; (8031884 <LoopProcKey+0x148>)
 8031812:	461d      	mov	r5, r3
 8031814:	f107 040c 	add.w	r4, r7, #12
 8031818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 803181a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 803181c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 803181e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8031820:	6823      	ldr	r3, [r4, #0]
 8031822:	602b      	str	r3, [r5, #0]
		}

		tickBase = tickCurr;
 8031824:	4a16      	ldr	r2, [pc, #88]	; (8031880 <LoopProcKey+0x144>)
 8031826:	687b      	ldr	r3, [r7, #4]
 8031828:	6013      	str	r3, [r2, #0]
	//	* [송신기][MENU] : 유지보수 메뉴 진입 기능 추가.
	//		- [OK]버튼을 누른상태에서 [MENU]버튼을 3초간 누를 경우 Maintance모드로 진입함.

	static uint32_t tickBase2 = 0;

	if ( ( tickCurr - tickBase2 ) >= 1000 && IsMenuMaint() == 0 )
 803182a:	4b17      	ldr	r3, [pc, #92]	; (8031888 <LoopProcKey+0x14c>)
 803182c:	681b      	ldr	r3, [r3, #0]
 803182e:	687a      	ldr	r2, [r7, #4]
 8031830:	1ad3      	subs	r3, r2, r3
 8031832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8031836:	d31f      	bcc.n	8031878 <LoopProcKey+0x13c>
 8031838:	f000 fa12 	bl	8031c60 <IsMenuMaint>
 803183c:	4603      	mov	r3, r0
 803183e:	2b00      	cmp	r3, #0
 8031840:	d11a      	bne.n	8031878 <LoopProcKey+0x13c>
	{
		//	Period : 1 sec
		static int s_cntKeyOkMenu = 0;
		if ( s_btnStat[eKeyOk] && s_btnStat[eKeyMenu] )
 8031842:	4b10      	ldr	r3, [pc, #64]	; (8031884 <LoopProcKey+0x148>)
 8031844:	689b      	ldr	r3, [r3, #8]
 8031846:	2b00      	cmp	r3, #0
 8031848:	d009      	beq.n	803185e <LoopProcKey+0x122>
 803184a:	4b0e      	ldr	r3, [pc, #56]	; (8031884 <LoopProcKey+0x148>)
 803184c:	681b      	ldr	r3, [r3, #0]
 803184e:	2b00      	cmp	r3, #0
 8031850:	d005      	beq.n	803185e <LoopProcKey+0x122>
		{
			s_cntKeyOkMenu++;
 8031852:	4b0e      	ldr	r3, [pc, #56]	; (803188c <LoopProcKey+0x150>)
 8031854:	681b      	ldr	r3, [r3, #0]
 8031856:	3301      	adds	r3, #1
 8031858:	4a0c      	ldr	r2, [pc, #48]	; (803188c <LoopProcKey+0x150>)
 803185a:	6013      	str	r3, [r2, #0]
 803185c:	e002      	b.n	8031864 <LoopProcKey+0x128>
		}
		else
		{
			s_cntKeyOkMenu = 0;
 803185e:	4b0b      	ldr	r3, [pc, #44]	; (803188c <LoopProcKey+0x150>)
 8031860:	2200      	movs	r2, #0
 8031862:	601a      	str	r2, [r3, #0]
		}

		if ( s_cntKeyOkMenu > 3 )	//	3초 이상 누를 경우.
 8031864:	4b09      	ldr	r3, [pc, #36]	; (803188c <LoopProcKey+0x150>)
 8031866:	681b      	ldr	r3, [r3, #0]
 8031868:	2b03      	cmp	r3, #3
 803186a:	dd02      	ble.n	8031872 <LoopProcKey+0x136>
		{
			EnableMenuMaint( 1 );
 803186c:	2001      	movs	r0, #1
 803186e:	f000 fa03 	bl	8031c78 <EnableMenuMaint>
		}

		tickBase2 = tickCurr;
 8031872:	4a05      	ldr	r2, [pc, #20]	; (8031888 <LoopProcKey+0x14c>)
 8031874:	687b      	ldr	r3, [r7, #4]
 8031876:	6013      	str	r3, [r2, #0]
#if defined(USE_FREERTOS)
	osDelay( 1 );		//	1 msec
#else
//        HAL_Delay( 1 );
#endif
}
 8031878:	bf00      	nop
 803187a:	3730      	adds	r7, #48	; 0x30
 803187c:	46bd      	mov	sp, r7
 803187e:	bdb0      	pop	{r4, r5, r7, pc}
 8031880:	2000230c 	.word	0x2000230c
 8031884:	200022e8 	.word	0x200022e8
 8031888:	20002310 	.word	0x20002310
 803188c:	20002314 	.word	0x20002314

08031890 <KeyMenu>:
//========================================================================

//========================================================================
void KeyMenu( int bValue )
//========================================================================
{
 8031890:	b580      	push	{r7, lr}
 8031892:	b082      	sub	sp, #8
 8031894:	af00      	add	r7, sp, #0
 8031896:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 8031898:	687b      	ldr	r3, [r7, #4]
 803189a:	22a0      	movs	r2, #160	; 0xa0
 803189c:	4906      	ldr	r1, [pc, #24]	; (80318b8 <KeyMenu+0x28>)
 803189e:	4807      	ldr	r0, [pc, #28]	; (80318bc <KeyMenu+0x2c>)
 80318a0:	f005 fcf8 	bl	8037294 <iprintf>

	if ( bValue )
 80318a4:	687b      	ldr	r3, [r7, #4]
 80318a6:	2b00      	cmp	r3, #0
 80318a8:	d001      	beq.n	80318ae <KeyMenu+0x1e>
	{
//		LCDMenu();
		ProcBtnMenu();
 80318aa:	f000 fad5 	bl	8031e58 <ProcBtnMenu>
	}
}
 80318ae:	bf00      	nop
 80318b0:	3708      	adds	r7, #8
 80318b2:	46bd      	mov	sp, r7
 80318b4:	bd80      	pop	{r7, pc}
 80318b6:	bf00      	nop
 80318b8:	080418e8 	.word	0x080418e8
 80318bc:	0803ae54 	.word	0x0803ae54

080318c0 <KeyOK>:

//========================================================================
void KeyOK( int bValue )
//========================================================================
{
 80318c0:	b580      	push	{r7, lr}
 80318c2:	b082      	sub	sp, #8
 80318c4:	af00      	add	r7, sp, #0
 80318c6:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 80318c8:	687b      	ldr	r3, [r7, #4]
 80318ca:	22af      	movs	r2, #175	; 0xaf
 80318cc:	4906      	ldr	r1, [pc, #24]	; (80318e8 <KeyOK+0x28>)
 80318ce:	4807      	ldr	r0, [pc, #28]	; (80318ec <KeyOK+0x2c>)
 80318d0:	f005 fce0 	bl	8037294 <iprintf>

	if ( bValue )
 80318d4:	687b      	ldr	r3, [r7, #4]
 80318d6:	2b00      	cmp	r3, #0
 80318d8:	d001      	beq.n	80318de <KeyOK+0x1e>
	{
		ProcBtnOK();
 80318da:	f000 fed7 	bl	803268c <ProcBtnOK>
	}
}
 80318de:	bf00      	nop
 80318e0:	3708      	adds	r7, #8
 80318e2:	46bd      	mov	sp, r7
 80318e4:	bd80      	pop	{r7, pc}
 80318e6:	bf00      	nop
 80318e8:	080418f0 	.word	0x080418f0
 80318ec:	0803ae54 	.word	0x0803ae54

080318f0 <KeyLight>:


//========================================================================
void KeyLight( int bValue )
//========================================================================
{
 80318f0:	b580      	push	{r7, lr}
 80318f2:	b082      	sub	sp, #8
 80318f4:	af00      	add	r7, sp, #0
 80318f6:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 80318f8:	687b      	ldr	r3, [r7, #4]
 80318fa:	22be      	movs	r2, #190	; 0xbe
 80318fc:	4913      	ldr	r1, [pc, #76]	; (803194c <KeyLight+0x5c>)
 80318fe:	4814      	ldr	r0, [pc, #80]	; (8031950 <KeyLight+0x60>)
 8031900:	f005 fcc8 	bl	8037294 <iprintf>
	//	Light On/Off Toggle
	static int bOnOff = 0;

	//========================================================================
	//	GPIO제어.
	if ( bValue )
 8031904:	687b      	ldr	r3, [r7, #4]
 8031906:	2b00      	cmp	r3, #0
 8031908:	d01c      	beq.n	8031944 <KeyLight+0x54>
	{
		if ( bOnOff == 0 )
 803190a:	4b12      	ldr	r3, [pc, #72]	; (8031954 <KeyLight+0x64>)
 803190c:	681b      	ldr	r3, [r3, #0]
 803190e:	2b00      	cmp	r3, #0
 8031910:	d10c      	bne.n	803192c <KeyLight+0x3c>
		{
			//	Flash Light On
			HAL_GPIO_WritePin( FLASH_ON_GPIO_Port, FLASH_ON_Pin, GPIO_PIN_SET );
 8031912:	2201      	movs	r2, #1
 8031914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8031918:	480f      	ldr	r0, [pc, #60]	; (8031958 <KeyLight+0x68>)
 803191a:	f7f1 fdff 	bl	802351c <HAL_GPIO_WritePin>

			LCDLight( 1 );
 803191e:	2001      	movs	r0, #1
 8031920:	f7fa ff2c 	bl	802c77c <LCDLight>
			bOnOff = 1;
 8031924:	4b0b      	ldr	r3, [pc, #44]	; (8031954 <KeyLight+0x64>)
 8031926:	2201      	movs	r2, #1
 8031928:	601a      	str	r2, [r3, #0]

			LCDLight( 0 );
			bOnOff = 0;
		}
	}
}
 803192a:	e00b      	b.n	8031944 <KeyLight+0x54>
			HAL_GPIO_WritePin( FLASH_ON_GPIO_Port, FLASH_ON_Pin, GPIO_PIN_RESET );
 803192c:	2200      	movs	r2, #0
 803192e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8031932:	4809      	ldr	r0, [pc, #36]	; (8031958 <KeyLight+0x68>)
 8031934:	f7f1 fdf2 	bl	802351c <HAL_GPIO_WritePin>
			LCDLight( 0 );
 8031938:	2000      	movs	r0, #0
 803193a:	f7fa ff1f 	bl	802c77c <LCDLight>
			bOnOff = 0;
 803193e:	4b05      	ldr	r3, [pc, #20]	; (8031954 <KeyLight+0x64>)
 8031940:	2200      	movs	r2, #0
 8031942:	601a      	str	r2, [r3, #0]
}
 8031944:	bf00      	nop
 8031946:	3708      	adds	r7, #8
 8031948:	46bd      	mov	sp, r7
 803194a:	bd80      	pop	{r7, pc}
 803194c:	080418f8 	.word	0x080418f8
 8031950:	0803ae54 	.word	0x0803ae54
 8031954:	20002318 	.word	0x20002318
 8031958:	40020400 	.word	0x40020400

0803195c <KeyUp>:

//========================================================================
void KeyUp( int bValue )
//========================================================================
{
 803195c:	b580      	push	{r7, lr}
 803195e:	b082      	sub	sp, #8
 8031960:	af00      	add	r7, sp, #0
 8031962:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 8031964:	687b      	ldr	r3, [r7, #4]
 8031966:	22e1      	movs	r2, #225	; 0xe1
 8031968:	4906      	ldr	r1, [pc, #24]	; (8031984 <KeyUp+0x28>)
 803196a:	4807      	ldr	r0, [pc, #28]	; (8031988 <KeyUp+0x2c>)
 803196c:	f005 fc92 	bl	8037294 <iprintf>

	if( bValue )
 8031970:	687b      	ldr	r3, [r7, #4]
 8031972:	2b00      	cmp	r3, #0
 8031974:	d001      	beq.n	803197a <KeyUp+0x1e>
	{
		ProcBtnUp();
 8031976:	f000 fa2f 	bl	8031dd8 <ProcBtnUp>
	}
}
 803197a:	bf00      	nop
 803197c:	3708      	adds	r7, #8
 803197e:	46bd      	mov	sp, r7
 8031980:	bd80      	pop	{r7, pc}
 8031982:	bf00      	nop
 8031984:	08041904 	.word	0x08041904
 8031988:	0803ae54 	.word	0x0803ae54

0803198c <KeyDown>:

//========================================================================
void KeyDown( int bValue )
//========================================================================
{
 803198c:	b580      	push	{r7, lr}
 803198e:	b082      	sub	sp, #8
 8031990:	af00      	add	r7, sp, #0
 8031992:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 8031994:	687b      	ldr	r3, [r7, #4]
 8031996:	22ef      	movs	r2, #239	; 0xef
 8031998:	4906      	ldr	r1, [pc, #24]	; (80319b4 <KeyDown+0x28>)
 803199a:	4807      	ldr	r0, [pc, #28]	; (80319b8 <KeyDown+0x2c>)
 803199c:	f005 fc7a 	bl	8037294 <iprintf>

	if( bValue )
 80319a0:	687b      	ldr	r3, [r7, #4]
 80319a2:	2b00      	cmp	r3, #0
 80319a4:	d001      	beq.n	80319aa <KeyDown+0x1e>
	{
		ProcBtnDown();
 80319a6:	f000 fa37 	bl	8031e18 <ProcBtnDown>
	}
}
 80319aa:	bf00      	nop
 80319ac:	3708      	adds	r7, #8
 80319ae:	46bd      	mov	sp, r7
 80319b0:	bd80      	pop	{r7, pc}
 80319b2:	bf00      	nop
 80319b4:	0804190c 	.word	0x0804190c
 80319b8:	0803ae54 	.word	0x0803ae54

080319bc <KeyVol>:

//========================================================================
void KeyVol( int bValue )
//========================================================================
{
 80319bc:	b580      	push	{r7, lr}
 80319be:	b082      	sub	sp, #8
 80319c0:	af00      	add	r7, sp, #0
 80319c2:	6078      	str	r0, [r7, #4]
	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 80319c4:	687b      	ldr	r3, [r7, #4]
 80319c6:	22fd      	movs	r2, #253	; 0xfd
 80319c8:	4917      	ldr	r1, [pc, #92]	; (8031a28 <KeyVol+0x6c>)
 80319ca:	4818      	ldr	r0, [pc, #96]	; (8031a2c <KeyVol+0x70>)
 80319cc:	f005 fc62 	bl	8037294 <iprintf>

	if( bValue )
 80319d0:	687b      	ldr	r3, [r7, #4]
 80319d2:	2b00      	cmp	r3, #0
 80319d4:	d023      	beq.n	8031a1e <KeyVol+0x62>
	{

		g_nSpkLevel = ( g_nSpkLevel + 1 ) % 4;  //  0, 1, 2, 3
 80319d6:	4b16      	ldr	r3, [pc, #88]	; (8031a30 <KeyVol+0x74>)
 80319d8:	681b      	ldr	r3, [r3, #0]
 80319da:	3301      	adds	r3, #1
 80319dc:	425a      	negs	r2, r3
 80319de:	f003 0303 	and.w	r3, r3, #3
 80319e2:	f002 0203 	and.w	r2, r2, #3
 80319e6:	bf58      	it	pl
 80319e8:	4253      	negpl	r3, r2
 80319ea:	4a11      	ldr	r2, [pc, #68]	; (8031a30 <KeyVol+0x74>)
 80319ec:	6013      	str	r3, [r2, #0]

		//========================================================================
		SetSpkVol( g_nSpkLevel );
 80319ee:	4b10      	ldr	r3, [pc, #64]	; (8031a30 <KeyVol+0x74>)
 80319f0:	681b      	ldr	r3, [r3, #0]
 80319f2:	4618      	mov	r0, r3
 80319f4:	f001 fab8 	bl	8032f68 <SetSpkVol>
		//========================================================================

		if ( g_nSpkLevel )
 80319f8:	4b0d      	ldr	r3, [pc, #52]	; (8031a30 <KeyVol+0x74>)
 80319fa:	681b      	ldr	r3, [r3, #0]
 80319fc:	2b00      	cmp	r3, #0
 80319fe:	d008      	beq.n	8031a12 <KeyVol+0x56>
		{
			//	RFM SPK On
//				HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
			//	RFM SPK Off
//			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
			RFM_Spk(0);
 8031a00:	2000      	movs	r0, #0
 8031a02:	f001 fb5d 	bl	80330c0 <RFM_Spk>

			LCDSpeaker( g_nSpkLevel );
 8031a06:	4b0a      	ldr	r3, [pc, #40]	; (8031a30 <KeyVol+0x74>)
 8031a08:	681b      	ldr	r3, [r3, #0]
 8031a0a:	4618      	mov	r0, r3
 8031a0c:	f7fa feee 	bl	802c7ec <LCDSpeaker>
			RFM_Spk(0);

			LCDSpeaker( 0 );
		}
	}
}
 8031a10:	e005      	b.n	8031a1e <KeyVol+0x62>
			RFM_Spk(0);
 8031a12:	2000      	movs	r0, #0
 8031a14:	f001 fb54 	bl	80330c0 <RFM_Spk>
			LCDSpeaker( 0 );
 8031a18:	2000      	movs	r0, #0
 8031a1a:	f7fa fee7 	bl	802c7ec <LCDSpeaker>
}
 8031a1e:	bf00      	nop
 8031a20:	3708      	adds	r7, #8
 8031a22:	46bd      	mov	sp, r7
 8031a24:	bd80      	pop	{r7, pc}
 8031a26:	bf00      	nop
 8031a28:	08041914 	.word	0x08041914
 8031a2c:	0803ae54 	.word	0x0803ae54
 8031a30:	20000bec 	.word	0x20000bec

08031a34 <KeyPtt>:


//========================================================================
void KeyPtt( int bValue )
//========================================================================
{
 8031a34:	b590      	push	{r4, r7, lr}
 8031a36:	b089      	sub	sp, #36	; 0x24
 8031a38:	af00      	add	r7, sp, #0
 8031a3a:	6078      	str	r0, [r7, #4]
#endif
	//========================================================================

	//========================================================================
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 8031a3c:	687b      	ldr	r3, [r7, #4]
 8031a3e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8031a42:	4933      	ldr	r1, [pc, #204]	; (8031b10 <KeyPtt+0xdc>)
 8031a44:	4833      	ldr	r0, [pc, #204]	; (8031b14 <KeyPtt+0xe0>)
 8031a46:	f005 fc25 	bl	8037294 <iprintf>

	//	송신기 -> 수신기	:	방송

	if ( bValue )
 8031a4a:	687b      	ldr	r3, [r7, #4]
 8031a4c:	2b00      	cmp	r3, #0
 8031a4e:	d040      	beq.n	8031ad2 <KeyPtt+0x9e>
	{
#if defined(USE_CH_ISO_DEV)
		SetChPA( GetChNearRFM() );		//	가장 가까운 수신기 설정.
 8031a50:	f000 ff64 	bl	803291c <GetChNearRFM>
 8031a54:	4603      	mov	r3, r0
 8031a56:	4618      	mov	r0, r3
 8031a58:	f000 ffa2 	bl	80329a0 <SetChPA>

		SetChPARFT( GetChNearRFT( 190 ) );	//	가까운 송신기 설정.
 8031a5c:	20be      	movs	r0, #190	; 0xbe
 8031a5e:	f000 ff17 	bl	8032890 <GetChNearRFT>
 8031a62:	4603      	mov	r3, r0
 8031a64:	4618      	mov	r0, r3
 8031a66:	f000 ffe3 	bl	8032a30 <SetChPARFT>
#endif

#if defined( USE_AUDIO_ADPCM )	//	ADPCM 사용. - 1/4 압축
		ADPCM_ClearEncodeBuf();			//	인코딩 버퍼 Clear
 8031a6a:	f7fd fef5 	bl	802f858 <ADPCM_ClearEncodeBuf>
		qBufClear( &g_qBufAudioTx );	//	Tx Buffer Clear
 8031a6e:	482a      	ldr	r0, [pc, #168]	; (8031b18 <KeyPtt+0xe4>)
 8031a70:	f7fc fbe6 	bl	802e240 <qBufClear>
#endif

		LCDSetCursor( 20, 13 );
 8031a74:	210d      	movs	r1, #13
 8031a76:	2014      	movs	r0, #20
 8031a78:	f7fa ff52 	bl	802c920 <LCDSetCursor>

		if ( IsMenuMaint() )
 8031a7c:	f000 f8f0 	bl	8031c60 <IsMenuMaint>
 8031a80:	4603      	mov	r3, r0
 8031a82:	2b00      	cmp	r3, #0
 8031a84:	d015      	beq.n	8031ab2 <KeyPtt+0x7e>
		{
			//	Maint Mode : 송신채널 표시.
			char sBuf[20];
			sprintf( sBuf, "방송중(%d/%d)", GetCh2Car(GetChPA()), GetChPA() );	//	Channel -> Car
 8031a86:	f000 ff9b 	bl	80329c0 <GetChPA>
 8031a8a:	4603      	mov	r3, r0
 8031a8c:	4618      	mov	r0, r3
 8031a8e:	f000 ffa3 	bl	80329d8 <GetCh2Car>
 8031a92:	4604      	mov	r4, r0
 8031a94:	f000 ff94 	bl	80329c0 <GetChPA>
 8031a98:	4603      	mov	r3, r0
 8031a9a:	f107 000c 	add.w	r0, r7, #12
 8031a9e:	4622      	mov	r2, r4
 8031aa0:	491e      	ldr	r1, [pc, #120]	; (8031b1c <KeyPtt+0xe8>)
 8031aa2:	f005 fe29 	bl	80376f8 <siprintf>
			LCDPrintf( sBuf );
 8031aa6:	f107 030c 	add.w	r3, r7, #12
 8031aaa:	4618      	mov	r0, r3
 8031aac:	f7fa ff68 	bl	802c980 <LCDPrintf>
 8031ab0:	e002      	b.n	8031ab8 <KeyPtt+0x84>
		}
		else
		{
			LCDPrintf( "방송중..." );
 8031ab2:	481b      	ldr	r0, [pc, #108]	; (8031b20 <KeyPtt+0xec>)
 8031ab4:	f7fa ff64 	bl	802c980 <LCDPrintf>
		}

		SetRFMMode( RFMModeTx );
 8031ab8:	2001      	movs	r0, #1
 8031aba:	f000 fe41 	bl	8032740 <SetRFMMode>

		//  Green LED On
		HAL_GPIO_WritePin ( LED_ON_A_GPIO_Port, LED_ON_A_Pin, GPIO_PIN_SET ); //  Green LED
 8031abe:	2201      	movs	r2, #1
 8031ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8031ac4:	4817      	ldr	r0, [pc, #92]	; (8031b24 <KeyPtt+0xf0>)
 8031ac6:	f7f1 fd29 	bl	802351c <HAL_GPIO_WritePin>

		//	방송 - 시작
		SendPA( 1 );		//	SendRF - Send PA ( 송신기 -> 수신기 )
 8031aca:	2001      	movs	r0, #1
 8031acc:	f7fc fec4 	bl	802e858 <SendPA>
		HAL_GPIO_WritePin ( LED_ON_A_GPIO_Port, LED_ON_A_Pin, GPIO_PIN_RESET ); //  Green LED

		//	방송 - 종료
		SendPA( 0 );		//	SendRF - Send PA ( 송신기 -> 수신기 )
	}
}
 8031ad0:	e01a      	b.n	8031b08 <KeyPtt+0xd4>
		UpdateLCDMain();
 8031ad2:	f000 f905 	bl	8031ce0 <UpdateLCDMain>
		SetRFMMode( RFMModeNormal );
 8031ad6:	2000      	movs	r0, #0
 8031ad8:	f000 fe32 	bl	8032740 <SetRFMMode>
		SetChPA( GetChNearRFM() );		//	가장 가까운 수신기 설정.
 8031adc:	f000 ff1e 	bl	803291c <GetChNearRFM>
 8031ae0:	4603      	mov	r3, r0
 8031ae2:	4618      	mov	r0, r3
 8031ae4:	f000 ff5c 	bl	80329a0 <SetChPA>
		SetChPARFT( GetChNearRFT( 190 ) );	//	가까운 송신기 설정.
 8031ae8:	20be      	movs	r0, #190	; 0xbe
 8031aea:	f000 fed1 	bl	8032890 <GetChNearRFT>
 8031aee:	4603      	mov	r3, r0
 8031af0:	4618      	mov	r0, r3
 8031af2:	f000 ff9d 	bl	8032a30 <SetChPARFT>
		HAL_GPIO_WritePin ( LED_ON_A_GPIO_Port, LED_ON_A_Pin, GPIO_PIN_RESET ); //  Green LED
 8031af6:	2200      	movs	r2, #0
 8031af8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8031afc:	4809      	ldr	r0, [pc, #36]	; (8031b24 <KeyPtt+0xf0>)
 8031afe:	f7f1 fd0d 	bl	802351c <HAL_GPIO_WritePin>
		SendPA( 0 );		//	SendRF - Send PA ( 송신기 -> 수신기 )
 8031b02:	2000      	movs	r0, #0
 8031b04:	f7fc fea8 	bl	802e858 <SendPA>
}
 8031b08:	bf00      	nop
 8031b0a:	3724      	adds	r7, #36	; 0x24
 8031b0c:	46bd      	mov	sp, r7
 8031b0e:	bd90      	pop	{r4, r7, pc}
 8031b10:	0804191c 	.word	0x0804191c
 8031b14:	0803ae54 	.word	0x0803ae54
 8031b18:	20001f78 	.word	0x20001f78
 8031b1c:	0803ae64 	.word	0x0803ae64
 8031b20:	0803ae78 	.word	0x0803ae78
 8031b24:	40020400 	.word	0x40020400

08031b28 <KeySos>:


//========================================================================
void KeySos( int bValue )
//========================================================================
{
 8031b28:	b590      	push	{r4, r7, lr}
 8031b2a:	b089      	sub	sp, #36	; 0x24
 8031b2c:	af00      	add	r7, sp, #0
 8031b2e:	6078      	str	r0, [r7, #4]
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 8031b30:	687b      	ldr	r3, [r7, #4]
 8031b32:	f240 1275 	movw	r2, #373	; 0x175
 8031b36:	492d      	ldr	r1, [pc, #180]	; (8031bec <KeySos+0xc4>)
 8031b38:	482d      	ldr	r0, [pc, #180]	; (8031bf0 <KeySos+0xc8>)
 8031b3a:	f005 fbab 	bl	8037294 <iprintf>

	//	송신기 -> 송신기	:	통화

	if ( bValue )
 8031b3e:	687b      	ldr	r3, [r7, #4]
 8031b40:	2b00      	cmp	r3, #0
 8031b42:	d03a      	beq.n	8031bba <KeySos+0x92>
	{
#if defined(USE_CH_ISO_DEV)
		SetChPARFT( GetChNearRFT( 190 ) );	//	가까운 송신기 설정.
 8031b44:	20be      	movs	r0, #190	; 0xbe
 8031b46:	f000 fea3 	bl	8032890 <GetChNearRFT>
 8031b4a:	4603      	mov	r3, r0
 8031b4c:	4618      	mov	r0, r3
 8031b4e:	f000 ff6f 	bl	8032a30 <SetChPARFT>

		SetChPA( GetChNearRFM() );		//	가장 가까운 수신기 설정.
 8031b52:	f000 fee3 	bl	803291c <GetChNearRFM>
 8031b56:	4603      	mov	r3, r0
 8031b58:	4618      	mov	r0, r3
 8031b5a:	f000 ff21 	bl	80329a0 <SetChPA>
#endif

#if defined( USE_AUDIO_ADPCM )	//	ADPCM 사용. - 1/4 압축
		ADPCM_ClearEncodeBuf();			//	인코딩 버퍼 Clear
 8031b5e:	f7fd fe7b 	bl	802f858 <ADPCM_ClearEncodeBuf>
		qBufClear( &g_qBufAudioTx );	//	Tx Buffer Clear
 8031b62:	4824      	ldr	r0, [pc, #144]	; (8031bf4 <KeySos+0xcc>)
 8031b64:	f7fc fb6c 	bl	802e240 <qBufClear>
#endif

		//	송신중
		LCDSetCursor( 20, 13 );
 8031b68:	210d      	movs	r1, #13
 8031b6a:	2014      	movs	r0, #20
 8031b6c:	f7fa fed8 	bl	802c920 <LCDSetCursor>
		if ( IsMenuMaint() )
 8031b70:	f000 f876 	bl	8031c60 <IsMenuMaint>
 8031b74:	4603      	mov	r3, r0
 8031b76:	2b00      	cmp	r3, #0
 8031b78:	d015      	beq.n	8031ba6 <KeySos+0x7e>
		{
			//	Maint Mode : 송신채널 표시.
			char sBuf[20];
			sprintf( sBuf, "통화중(%d/%d)", GetCh2Car(GetChPA()), GetChPA() );	//	Channel -> Car
 8031b7a:	f000 ff21 	bl	80329c0 <GetChPA>
 8031b7e:	4603      	mov	r3, r0
 8031b80:	4618      	mov	r0, r3
 8031b82:	f000 ff29 	bl	80329d8 <GetCh2Car>
 8031b86:	4604      	mov	r4, r0
 8031b88:	f000 ff1a 	bl	80329c0 <GetChPA>
 8031b8c:	4603      	mov	r3, r0
 8031b8e:	f107 000c 	add.w	r0, r7, #12
 8031b92:	4622      	mov	r2, r4
 8031b94:	4918      	ldr	r1, [pc, #96]	; (8031bf8 <KeySos+0xd0>)
 8031b96:	f005 fdaf 	bl	80376f8 <siprintf>
			LCDPrintf( sBuf );
 8031b9a:	f107 030c 	add.w	r3, r7, #12
 8031b9e:	4618      	mov	r0, r3
 8031ba0:	f7fa feee 	bl	802c980 <LCDPrintf>
 8031ba4:	e002      	b.n	8031bac <KeySos+0x84>
		}
		else
		{
			LCDPrintf( "통화중..." );
 8031ba6:	4815      	ldr	r0, [pc, #84]	; (8031bfc <KeySos+0xd4>)
 8031ba8:	f7fa feea 	bl	802c980 <LCDPrintf>
		}

		SetRFMMode( RFMModeTx );
 8031bac:	2001      	movs	r0, #1
 8031bae:	f000 fdc7 	bl	8032740 <SetRFMMode>

		//	통화 - 시작
		SendCall( CtrlStart );		//	SendRF - Send Call ( 송신기 -> 송신기 )
 8031bb2:	2001      	movs	r0, #1
 8031bb4:	f7fc fe90 	bl	802e8d8 <SendCall>
		SetRFMMode( RFMModeNormal );

		//	통화 - 종료
		SendCall( CtrlStop );		//	SendRF - Send Call ( 송신기 -> 송신기 )
	}
}
 8031bb8:	e014      	b.n	8031be4 <KeySos+0xbc>
		SetChPARFT( GetChNearRFT( 190 ) );	//	가까운 송신기 설정.
 8031bba:	20be      	movs	r0, #190	; 0xbe
 8031bbc:	f000 fe68 	bl	8032890 <GetChNearRFT>
 8031bc0:	4603      	mov	r3, r0
 8031bc2:	4618      	mov	r0, r3
 8031bc4:	f000 ff34 	bl	8032a30 <SetChPARFT>
		SetChPA( GetChNearRFM() );		//	가장 가까운 수신기 설정.
 8031bc8:	f000 fea8 	bl	803291c <GetChNearRFM>
 8031bcc:	4603      	mov	r3, r0
 8031bce:	4618      	mov	r0, r3
 8031bd0:	f000 fee6 	bl	80329a0 <SetChPA>
		UpdateLCDMain();
 8031bd4:	f000 f884 	bl	8031ce0 <UpdateLCDMain>
		SetRFMMode( RFMModeNormal );
 8031bd8:	2000      	movs	r0, #0
 8031bda:	f000 fdb1 	bl	8032740 <SetRFMMode>
		SendCall( CtrlStop );		//	SendRF - Send Call ( 송신기 -> 송신기 )
 8031bde:	2000      	movs	r0, #0
 8031be0:	f7fc fe7a 	bl	802e8d8 <SendCall>
}
 8031be4:	bf00      	nop
 8031be6:	3724      	adds	r7, #36	; 0x24
 8031be8:	46bd      	mov	sp, r7
 8031bea:	bd90      	pop	{r4, r7, pc}
 8031bec:	08041924 	.word	0x08041924
 8031bf0:	0803ae54 	.word	0x0803ae54
 8031bf4:	20001f78 	.word	0x20001f78
 8031bf8:	0803ae88 	.word	0x0803ae88
 8031bfc:	0803ae9c 	.word	0x0803ae9c

08031c00 <KeyPwrOnOff>:
//========================================================================

//========================================================================
void	KeyPwrOnOff		( int bValue )
//========================================================================
{
 8031c00:	b580      	push	{r7, lr}
 8031c02:	b082      	sub	sp, #8
 8031c04:	af00      	add	r7, sp, #0
 8031c06:	6078      	str	r0, [r7, #4]
	//	bValue : 0(Up) / 1(Down)
	printf( "%s(%d) - %d\n", __func__, __LINE__, bValue );
 8031c08:	687b      	ldr	r3, [r7, #4]
 8031c0a:	f240 12b7 	movw	r2, #439	; 0x1b7
 8031c0e:	490f      	ldr	r1, [pc, #60]	; (8031c4c <KeyPwrOnOff+0x4c>)
 8031c10:	480f      	ldr	r0, [pc, #60]	; (8031c50 <KeyPwrOnOff+0x50>)
 8031c12:	f005 fb3f 	bl	8037294 <iprintf>

	static int bPowerOn = 0;

	if ( bValue )
 8031c16:	687b      	ldr	r3, [r7, #4]
 8031c18:	2b00      	cmp	r3, #0
 8031c1a:	d003      	beq.n	8031c24 <KeyPwrOnOff+0x24>
	{
		bPowerOn = 1;
 8031c1c:	4b0d      	ldr	r3, [pc, #52]	; (8031c54 <KeyPwrOnOff+0x54>)
 8031c1e:	2201      	movs	r2, #1
 8031c20:	601a      	str	r2, [r3, #0]
			printf( "%s(%d) - Power Off\n", __func__, __LINE__  );

			HAL_GPIO_WritePin( ON_OFF_EN_GPIO_Port, ON_OFF_EN_Pin, GPIO_PIN_RESET );
		}
	}
}
 8031c22:	e00f      	b.n	8031c44 <KeyPwrOnOff+0x44>
		if( bPowerOn )
 8031c24:	4b0b      	ldr	r3, [pc, #44]	; (8031c54 <KeyPwrOnOff+0x54>)
 8031c26:	681b      	ldr	r3, [r3, #0]
 8031c28:	2b00      	cmp	r3, #0
 8031c2a:	d00b      	beq.n	8031c44 <KeyPwrOnOff+0x44>
			printf( "%s(%d) - Power Off\n", __func__, __LINE__  );
 8031c2c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8031c30:	4906      	ldr	r1, [pc, #24]	; (8031c4c <KeyPwrOnOff+0x4c>)
 8031c32:	4809      	ldr	r0, [pc, #36]	; (8031c58 <KeyPwrOnOff+0x58>)
 8031c34:	f005 fb2e 	bl	8037294 <iprintf>
			HAL_GPIO_WritePin( ON_OFF_EN_GPIO_Port, ON_OFF_EN_Pin, GPIO_PIN_RESET );
 8031c38:	2200      	movs	r2, #0
 8031c3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8031c3e:	4807      	ldr	r0, [pc, #28]	; (8031c5c <KeyPwrOnOff+0x5c>)
 8031c40:	f7f1 fc6c 	bl	802351c <HAL_GPIO_WritePin>
}
 8031c44:	bf00      	nop
 8031c46:	3708      	adds	r7, #8
 8031c48:	46bd      	mov	sp, r7
 8031c4a:	bd80      	pop	{r7, pc}
 8031c4c:	0804192c 	.word	0x0804192c
 8031c50:	0803ae54 	.word	0x0803ae54
 8031c54:	2000231c 	.word	0x2000231c
 8031c58:	0803aeac 	.word	0x0803aeac
 8031c5c:	40020c00 	.word	0x40020c00

08031c60 <IsMenuMaint>:

//========================================================================
int	g_bEnMenuMaint	= 	0;	//	MainMenu Maintenace Menu활성화.

int 	IsMenuMaint			( void )			//	MainMenu Maintenace Menu활성화.
{
 8031c60:	b480      	push	{r7}
 8031c62:	af00      	add	r7, sp, #0
	return g_bEnMenuMaint;
 8031c64:	4b03      	ldr	r3, [pc, #12]	; (8031c74 <IsMenuMaint+0x14>)
 8031c66:	681b      	ldr	r3, [r3, #0]
}
 8031c68:	4618      	mov	r0, r3
 8031c6a:	46bd      	mov	sp, r7
 8031c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031c70:	4770      	bx	lr
 8031c72:	bf00      	nop
 8031c74:	20002320 	.word	0x20002320

08031c78 <EnableMenuMaint>:

//========================================================================
void EnableMenuMaint( int bEnable )
//========================================================================
{
 8031c78:	b580      	push	{r7, lr}
 8031c7a:	b082      	sub	sp, #8
 8031c7c:	af00      	add	r7, sp, #0
 8031c7e:	6078      	str	r0, [r7, #4]
	g_bEnMenuMaint = bEnable;
 8031c80:	4a07      	ldr	r2, [pc, #28]	; (8031ca0 <EnableMenuMaint+0x28>)
 8031c82:	687b      	ldr	r3, [r7, #4]
 8031c84:	6013      	str	r3, [r2, #0]

	if ( bEnable )
 8031c86:	687b      	ldr	r3, [r7, #4]
 8031c88:	2b00      	cmp	r3, #0
 8031c8a:	d004      	beq.n	8031c96 <EnableMenuMaint+0x1e>
	{
		//	LCD [Menu Maint.]
		LCDPrintfXY( 10, 13, "[Maint. Menu]" );
 8031c8c:	4a05      	ldr	r2, [pc, #20]	; (8031ca4 <EnableMenuMaint+0x2c>)
 8031c8e:	210d      	movs	r1, #13
 8031c90:	200a      	movs	r0, #10
 8031c92:	f7fa fea7 	bl	802c9e4 <LCDPrintfXY>
	}
}
 8031c96:	bf00      	nop
 8031c98:	3708      	adds	r7, #8
 8031c9a:	46bd      	mov	sp, r7
 8031c9c:	bd80      	pop	{r7, pc}
 8031c9e:	bf00      	nop
 8031ca0:	20002320 	.word	0x20002320
 8031ca4:	0803b2b8 	.word	0x0803b2b8

08031ca8 <SetActiveMenu>:
static int _bEnDispStat = 0;

//========================================================================
void	SetActiveMenu( Menu_t *pActiveMenu )
//========================================================================
{
 8031ca8:	b480      	push	{r7}
 8031caa:	b083      	sub	sp, #12
 8031cac:	af00      	add	r7, sp, #0
 8031cae:	6078      	str	r0, [r7, #4]
	g_pActiveMenu = pActiveMenu;
 8031cb0:	4a04      	ldr	r2, [pc, #16]	; (8031cc4 <SetActiveMenu+0x1c>)
 8031cb2:	687b      	ldr	r3, [r7, #4]
 8031cb4:	6013      	str	r3, [r2, #0]
}
 8031cb6:	bf00      	nop
 8031cb8:	370c      	adds	r7, #12
 8031cba:	46bd      	mov	sp, r7
 8031cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031cc0:	4770      	bx	lr
 8031cc2:	bf00      	nop
 8031cc4:	20002324 	.word	0x20002324

08031cc8 <GetActiveMenu>:

//========================================================================
Menu_t	*GetActiveMenu( void )
//========================================================================
{
 8031cc8:	b480      	push	{r7}
 8031cca:	af00      	add	r7, sp, #0
	return g_pActiveMenu;
 8031ccc:	4b03      	ldr	r3, [pc, #12]	; (8031cdc <GetActiveMenu+0x14>)
 8031cce:	681b      	ldr	r3, [r3, #0]
}
 8031cd0:	4618      	mov	r0, r3
 8031cd2:	46bd      	mov	sp, r7
 8031cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031cd8:	4770      	bx	lr
 8031cda:	bf00      	nop
 8031cdc:	20002324 	.word	0x20002324

08031ce0 <UpdateLCDMain>:

//========================================================================
void	UpdateLCDMain( void )
//========================================================================
{
 8031ce0:	b580      	push	{r7, lr}
 8031ce2:	b088      	sub	sp, #32
 8031ce4:	af00      	add	r7, sp, #0
	char sBuf[30];

	sprintf( sBuf, "편성 : %d", 100 + g_idxTrainSet );
 8031ce6:	4b09      	ldr	r3, [pc, #36]	; (8031d0c <UpdateLCDMain+0x2c>)
 8031ce8:	681b      	ldr	r3, [r3, #0]
 8031cea:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8031cee:	463b      	mov	r3, r7
 8031cf0:	4907      	ldr	r1, [pc, #28]	; (8031d10 <UpdateLCDMain+0x30>)
 8031cf2:	4618      	mov	r0, r3
 8031cf4:	f005 fd00 	bl	80376f8 <siprintf>

//	LCDPrintf( "편성 : 100" );
	LCDPrintfXY( 20, 13, sBuf );
 8031cf8:	463b      	mov	r3, r7
 8031cfa:	461a      	mov	r2, r3
 8031cfc:	210d      	movs	r1, #13
 8031cfe:	2014      	movs	r0, #20
 8031d00:	f7fa fe70 	bl	802c9e4 <LCDPrintfXY>
}
 8031d04:	bf00      	nop
 8031d06:	3720      	adds	r7, #32
 8031d08:	46bd      	mov	sp, r7
 8031d0a:	bd80      	pop	{r7, pc}
 8031d0c:	20002338 	.word	0x20002338
 8031d10:	0803b358 	.word	0x0803b358

08031d14 <UpdateLCDMenu>:

//========================================================================
void	UpdateLCDMenu( void )
//========================================================================
{
 8031d14:	b580      	push	{r7, lr}
 8031d16:	b084      	sub	sp, #16
 8031d18:	af00      	add	r7, sp, #0
	if ( GetActiveMenu() == NULL )
 8031d1a:	f7ff ffd5 	bl	8031cc8 <GetActiveMenu>
 8031d1e:	4603      	mov	r3, r0
 8031d20:	2b00      	cmp	r3, #0
 8031d22:	d102      	bne.n	8031d2a <UpdateLCDMenu+0x16>
	{
		UpdateLCDMain();
 8031d24:	f7ff ffdc 	bl	8031ce0 <UpdateLCDMain>
		return;
 8031d28:	e01d      	b.n	8031d66 <UpdateLCDMenu+0x52>
	}

	char	**sMenu;
	int		*pIdxMenu, *pCntMenu;

	sMenu		=	g_pActiveMenu->sItem;
 8031d2a:	4b10      	ldr	r3, [pc, #64]	; (8031d6c <UpdateLCDMenu+0x58>)
 8031d2c:	681b      	ldr	r3, [r3, #0]
 8031d2e:	681b      	ldr	r3, [r3, #0]
 8031d30:	60fb      	str	r3, [r7, #12]
	pIdxMenu	=	&g_pActiveMenu->currIdx;
 8031d32:	4b0e      	ldr	r3, [pc, #56]	; (8031d6c <UpdateLCDMenu+0x58>)
 8031d34:	681b      	ldr	r3, [r3, #0]
 8031d36:	3308      	adds	r3, #8
 8031d38:	60bb      	str	r3, [r7, #8]
	pCntMenu	=	&g_pActiveMenu->cntItem;
 8031d3a:	4b0c      	ldr	r3, [pc, #48]	; (8031d6c <UpdateLCDMenu+0x58>)
 8031d3c:	681b      	ldr	r3, [r3, #0]
 8031d3e:	3304      	adds	r3, #4
 8031d40:	607b      	str	r3, [r7, #4]

	//  Main화면 Clear
	LCDClearMain();
 8031d42:	f7fa fe7d 	bl	802ca40 <LCDClearMain>

#if defined(USE_RFT_MENU_LOOP)

	LCDMenuUpDown( 3 ); //  3. Up/Down
 8031d46:	2003      	movs	r0, #3
 8031d48:	f7fa fdac 	bl	802c8a4 <LCDMenuUpDown>
	else if ( *pIdxMenu == *pCntMenu - 1 )				LCDMenuUpDown( 1 ); //  1. Up
	else												LCDMenuUpDown( 0 ); //  0. None

#endif

	LCDSetCursor( 20, 13 );
 8031d4c:	210d      	movs	r1, #13
 8031d4e:	2014      	movs	r0, #20
 8031d50:	f7fa fde6 	bl	802c920 <LCDSetCursor>
	LCDPrintf( sMenu[*pIdxMenu] );
 8031d54:	68bb      	ldr	r3, [r7, #8]
 8031d56:	681b      	ldr	r3, [r3, #0]
 8031d58:	009b      	lsls	r3, r3, #2
 8031d5a:	68fa      	ldr	r2, [r7, #12]
 8031d5c:	4413      	add	r3, r2
 8031d5e:	681b      	ldr	r3, [r3, #0]
 8031d60:	4618      	mov	r0, r3
 8031d62:	f7fa fe0d 	bl	802c980 <LCDPrintf>
}
 8031d66:	3710      	adds	r7, #16
 8031d68:	46bd      	mov	sp, r7
 8031d6a:	bd80      	pop	{r7, pc}
 8031d6c:	20002324 	.word	0x20002324

08031d70 <UpdateLCDMonitor>:

//========================================================================
void	UpdateLCDMonitor( int nTick )
//========================================================================
{
 8031d70:	b580      	push	{r7, lr}
 8031d72:	b09c      	sub	sp, #112	; 0x70
 8031d74:	af00      	add	r7, sp, #0
 8031d76:	6078      	str	r0, [r7, #4]
	static int oldTick = 0;

	if ( nTick - oldTick > 1000 )
 8031d78:	4b12      	ldr	r3, [pc, #72]	; (8031dc4 <UpdateLCDMonitor+0x54>)
 8031d7a:	681b      	ldr	r3, [r3, #0]
 8031d7c:	687a      	ldr	r2, [r7, #4]
 8031d7e:	1ad3      	subs	r3, r2, r3
 8031d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8031d84:	dd19      	ble.n	8031dba <UpdateLCDMonitor+0x4a>
	{
		if( _bEnDispStat )
 8031d86:	4b10      	ldr	r3, [pc, #64]	; (8031dc8 <UpdateLCDMonitor+0x58>)
 8031d88:	681b      	ldr	r3, [r3, #0]
 8031d8a:	2b00      	cmp	r3, #0
 8031d8c:	d012      	beq.n	8031db4 <UpdateLCDMonitor+0x44>
		{
			//	상태정보 현시.
			LCDSetCursor( 5, 13 );
 8031d8e:	210d      	movs	r1, #13
 8031d90:	2005      	movs	r0, #5
 8031d92:	f7fa fdc5 	bl	802c920 <LCDSetCursor>

			char sBuf[100];
			sprintf(sBuf, "Stat:%04X / %02d", g_flagRspID, g_nRSSI );
 8031d96:	4b0d      	ldr	r3, [pc, #52]	; (8031dcc <UpdateLCDMonitor+0x5c>)
 8031d98:	881b      	ldrh	r3, [r3, #0]
 8031d9a:	461a      	mov	r2, r3
 8031d9c:	4b0c      	ldr	r3, [pc, #48]	; (8031dd0 <UpdateLCDMonitor+0x60>)
 8031d9e:	681b      	ldr	r3, [r3, #0]
 8031da0:	f107 000c 	add.w	r0, r7, #12
 8031da4:	490b      	ldr	r1, [pc, #44]	; (8031dd4 <UpdateLCDMonitor+0x64>)
 8031da6:	f005 fca7 	bl	80376f8 <siprintf>
			LCDPrintf( sBuf );
 8031daa:	f107 030c 	add.w	r3, r7, #12
 8031dae:	4618      	mov	r0, r3
 8031db0:	f7fa fde6 	bl	802c980 <LCDPrintf>
		}
		oldTick = nTick;
 8031db4:	4a03      	ldr	r2, [pc, #12]	; (8031dc4 <UpdateLCDMonitor+0x54>)
 8031db6:	687b      	ldr	r3, [r7, #4]
 8031db8:	6013      	str	r3, [r2, #0]
	}
}
 8031dba:	bf00      	nop
 8031dbc:	3770      	adds	r7, #112	; 0x70
 8031dbe:	46bd      	mov	sp, r7
 8031dc0:	bd80      	pop	{r7, pc}
 8031dc2:	bf00      	nop
 8031dc4:	2000232c 	.word	0x2000232c
 8031dc8:	20002328 	.word	0x20002328
 8031dcc:	200013a0 	.word	0x200013a0
 8031dd0:	2000234c 	.word	0x2000234c
 8031dd4:	0803b364 	.word	0x0803b364

08031dd8 <ProcBtnUp>:


//========================================================================
void	ProcBtnUp( void )
//========================================================================
{
 8031dd8:	b580      	push	{r7, lr}
 8031dda:	af00      	add	r7, sp, #0
	if ( GetActiveMenu() == NULL ) return;
 8031ddc:	f7ff ff74 	bl	8031cc8 <GetActiveMenu>
 8031de0:	4603      	mov	r3, r0
 8031de2:	2b00      	cmp	r3, #0
 8031de4:	d013      	beq.n	8031e0e <ProcBtnUp+0x36>

	//	Menu : Up Key Press

	g_pActiveMenu->currIdx--;
 8031de6:	4b0b      	ldr	r3, [pc, #44]	; (8031e14 <ProcBtnUp+0x3c>)
 8031de8:	681b      	ldr	r3, [r3, #0]
 8031dea:	689a      	ldr	r2, [r3, #8]
 8031dec:	3a01      	subs	r2, #1
 8031dee:	609a      	str	r2, [r3, #8]

	if ( g_pActiveMenu->currIdx < 0 )
 8031df0:	4b08      	ldr	r3, [pc, #32]	; (8031e14 <ProcBtnUp+0x3c>)
 8031df2:	681b      	ldr	r3, [r3, #0]
 8031df4:	689b      	ldr	r3, [r3, #8]
 8031df6:	2b00      	cmp	r3, #0
 8031df8:	da06      	bge.n	8031e08 <ProcBtnUp+0x30>
	{
#if defined(USE_RFT_MENU_LOOP)

		//	Menu Up/Down Loop
		g_pActiveMenu->currIdx = g_pActiveMenu->cntItem  - 1;
 8031dfa:	4b06      	ldr	r3, [pc, #24]	; (8031e14 <ProcBtnUp+0x3c>)
 8031dfc:	681b      	ldr	r3, [r3, #0]
 8031dfe:	685a      	ldr	r2, [r3, #4]
 8031e00:	4b04      	ldr	r3, [pc, #16]	; (8031e14 <ProcBtnUp+0x3c>)
 8031e02:	681b      	ldr	r3, [r3, #0]
 8031e04:	3a01      	subs	r2, #1
 8031e06:	609a      	str	r2, [r3, #8]

#endif
	}


	UpdateLCDMenu();   //  메뉴화면 Update
 8031e08:	f7ff ff84 	bl	8031d14 <UpdateLCDMenu>
 8031e0c:	e000      	b.n	8031e10 <ProcBtnUp+0x38>
	if ( GetActiveMenu() == NULL ) return;
 8031e0e:	bf00      	nop
}
 8031e10:	bd80      	pop	{r7, pc}
 8031e12:	bf00      	nop
 8031e14:	20002324 	.word	0x20002324

08031e18 <ProcBtnDown>:

//========================================================================
void	ProcBtnDown( void )
//========================================================================
{
 8031e18:	b580      	push	{r7, lr}
 8031e1a:	af00      	add	r7, sp, #0
	if ( GetActiveMenu() == NULL ) return;
 8031e1c:	f7ff ff54 	bl	8031cc8 <GetActiveMenu>
 8031e20:	4603      	mov	r3, r0
 8031e22:	2b00      	cmp	r3, #0
 8031e24:	d013      	beq.n	8031e4e <ProcBtnDown+0x36>

	//	Menu : Down Key Press
	g_pActiveMenu->currIdx++;
 8031e26:	4b0b      	ldr	r3, [pc, #44]	; (8031e54 <ProcBtnDown+0x3c>)
 8031e28:	681b      	ldr	r3, [r3, #0]
 8031e2a:	689a      	ldr	r2, [r3, #8]
 8031e2c:	3201      	adds	r2, #1
 8031e2e:	609a      	str	r2, [r3, #8]

	if ( g_pActiveMenu->currIdx >= g_pActiveMenu->cntItem )
 8031e30:	4b08      	ldr	r3, [pc, #32]	; (8031e54 <ProcBtnDown+0x3c>)
 8031e32:	681b      	ldr	r3, [r3, #0]
 8031e34:	689a      	ldr	r2, [r3, #8]
 8031e36:	4b07      	ldr	r3, [pc, #28]	; (8031e54 <ProcBtnDown+0x3c>)
 8031e38:	681b      	ldr	r3, [r3, #0]
 8031e3a:	685b      	ldr	r3, [r3, #4]
 8031e3c:	429a      	cmp	r2, r3
 8031e3e:	db03      	blt.n	8031e48 <ProcBtnDown+0x30>
	{
#if defined(USE_RFT_MENU_LOOP)

		//	Menu Up/Down Loop
		g_pActiveMenu->currIdx = 0;
 8031e40:	4b04      	ldr	r3, [pc, #16]	; (8031e54 <ProcBtnDown+0x3c>)
 8031e42:	681b      	ldr	r3, [r3, #0]
 8031e44:	2200      	movs	r2, #0
 8031e46:	609a      	str	r2, [r3, #8]
		g_pActiveMenu->currIdx = g_pActiveMenu->cntItem  - 1;

#endif
	}

	UpdateLCDMenu();   //  메뉴화면 Update
 8031e48:	f7ff ff64 	bl	8031d14 <UpdateLCDMenu>
 8031e4c:	e000      	b.n	8031e50 <ProcBtnDown+0x38>
	if ( GetActiveMenu() == NULL ) return;
 8031e4e:	bf00      	nop
}
 8031e50:	bd80      	pop	{r7, pc}
 8031e52:	bf00      	nop
 8031e54:	20002324 	.word	0x20002324

08031e58 <ProcBtnMenu>:

//========================================================================
void	ProcBtnMenu( void )
//========================================================================
{
 8031e58:	b580      	push	{r7, lr}
 8031e5a:	af00      	add	r7, sp, #0
	//	Menu

	if ( GetActiveMenu() == NULL )
 8031e5c:	f7ff ff34 	bl	8031cc8 <GetActiveMenu>
 8031e60:	4603      	mov	r3, r0
 8031e62:	2b00      	cmp	r3, #0
 8031e64:	d110      	bne.n	8031e88 <ProcBtnMenu+0x30>
	{
		//  메뉴모드가 아닌경우 메뉴로 진입.

		//	Set Main Menu

		if ( g_bEnMenuMaint )
 8031e66:	4b0c      	ldr	r3, [pc, #48]	; (8031e98 <ProcBtnMenu+0x40>)
 8031e68:	681b      	ldr	r3, [r3, #0]
 8031e6a:	2b00      	cmp	r3, #0
 8031e6c:	d003      	beq.n	8031e76 <ProcBtnMenu+0x1e>
		{
			//	Maintenance 유지보수 메뉴 활성화.
			SetActiveMenu( &g_MenuMainMaint );
 8031e6e:	480b      	ldr	r0, [pc, #44]	; (8031e9c <ProcBtnMenu+0x44>)
 8031e70:	f7ff ff1a 	bl	8031ca8 <SetActiveMenu>
 8031e74:	e002      	b.n	8031e7c <ProcBtnMenu+0x24>
		}
		else
		{
			//	Base 기본메뉴.
			SetActiveMenu( &g_MenuMainBase );
 8031e76:	480a      	ldr	r0, [pc, #40]	; (8031ea0 <ProcBtnMenu+0x48>)
 8031e78:	f7ff ff16 	bl	8031ca8 <SetActiveMenu>
		}
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8031e7c:	f7ff ff24 	bl	8031cc8 <GetActiveMenu>
 8031e80:	4603      	mov	r3, r0
 8031e82:	2200      	movs	r2, #0
 8031e84:	609a      	str	r2, [r3, #8]
 8031e86:	e002      	b.n	8031e8e <ProcBtnMenu+0x36>
	else
	{
		//  메뉴 진입상태 -> 메인화면으로 이동.

		//	Set Main Menu
		SetActiveMenu( NULL );
 8031e88:	2000      	movs	r0, #0
 8031e8a:	f7ff ff0d 	bl	8031ca8 <SetActiveMenu>
	}

	UpdateLCDMenu();	//	메뉴화면 Update
 8031e8e:	f7ff ff41 	bl	8031d14 <UpdateLCDMenu>
}
 8031e92:	bf00      	nop
 8031e94:	bd80      	pop	{r7, pc}
 8031e96:	bf00      	nop
 8031e98:	20002320 	.word	0x20002320
 8031e9c:	20000bd8 	.word	0x20000bd8
 8031ea0:	20000ba4 	.word	0x20000ba4

08031ea4 <ProcLightOn>:

//========================================================================
void	ProcLightOn ( void )
//========================================================================
{
 8031ea4:	b580      	push	{r7, lr}
 8031ea6:	af00      	add	r7, sp, #0
	LCDSetCursor( 20, 13 );
 8031ea8:	210d      	movs	r1, #13
 8031eaa:	2014      	movs	r0, #20
 8031eac:	f7fa fd38 	bl	802c920 <LCDSetCursor>
	LCDPrintf( "[조명 점등]" );
 8031eb0:	480d      	ldr	r0, [pc, #52]	; (8031ee8 <ProcLightOn+0x44>)
 8031eb2:	f7fa fd65 	bl	802c980 <LCDPrintf>

	//========================================================================
	//	숭신기와 가까운 수신기 설정.
	SetChPA( GetChNearRFM() );
 8031eb6:	f000 fd31 	bl	803291c <GetChNearRFM>
 8031eba:	4603      	mov	r3, r0
 8031ebc:	4618      	mov	r0, r3
 8031ebe:	f000 fd6f 	bl	80329a0 <SetChPA>
	//========================================================================

	SendLightOn();	 //  조명On 명령 전송.
 8031ec2:	f7fc fd79 	bl	802e9b8 <SendLightOn>
	HAL_Delay( 200 );
 8031ec6:	20c8      	movs	r0, #200	; 0xc8
 8031ec8:	f7ef fe5a 	bl	8021b80 <HAL_Delay>
	SendLightOn();	 //  조명On 명령 전송.
 8031ecc:	f7fc fd74 	bl	802e9b8 <SendLightOn>
	HAL_Delay( 200 );
 8031ed0:	20c8      	movs	r0, #200	; 0xc8
 8031ed2:	f7ef fe55 	bl	8021b80 <HAL_Delay>
	SendLightOn();	 //  조명On 명령 전송.
 8031ed6:	f7fc fd6f 	bl	802e9b8 <SendLightOn>
	HAL_Delay( 200 );
 8031eda:	20c8      	movs	r0, #200	; 0xc8
 8031edc:	f7ef fe50 	bl	8021b80 <HAL_Delay>
	SendLightOn();	 //  조명On 명령 전송.
 8031ee0:	f7fc fd6a 	bl	802e9b8 <SendLightOn>

#if defined(USE_STAT_LIGHT)
	g_nDevFlag |= DevFlagLight;
#endif
}
 8031ee4:	bf00      	nop
 8031ee6:	bd80      	pop	{r7, pc}
 8031ee8:	0803b378 	.word	0x0803b378

08031eec <ProcLightOff>:

//========================================================================
void	ProcLightOff ( void )
//========================================================================
{
 8031eec:	b580      	push	{r7, lr}
 8031eee:	af00      	add	r7, sp, #0
	LCDSetCursor( 20, 13 );
 8031ef0:	210d      	movs	r1, #13
 8031ef2:	2014      	movs	r0, #20
 8031ef4:	f7fa fd14 	bl	802c920 <LCDSetCursor>
	LCDPrintf( "[조명 소등]" );
 8031ef8:	480d      	ldr	r0, [pc, #52]	; (8031f30 <ProcLightOff+0x44>)
 8031efa:	f7fa fd41 	bl	802c980 <LCDPrintf>

	//========================================================================
	//	숭신기와 가까운 수신기 설정.
	SetChPA( GetChNearRFM() );
 8031efe:	f000 fd0d 	bl	803291c <GetChNearRFM>
 8031f02:	4603      	mov	r3, r0
 8031f04:	4618      	mov	r0, r3
 8031f06:	f000 fd4b 	bl	80329a0 <SetChPA>
	//========================================================================

	SendLightOff();	 //  조명Off 명령 전송.
 8031f0a:	f7fc fd5c 	bl	802e9c6 <SendLightOff>
	HAL_Delay( 200 );
 8031f0e:	20c8      	movs	r0, #200	; 0xc8
 8031f10:	f7ef fe36 	bl	8021b80 <HAL_Delay>
	SendLightOff();	 //  조명Off 명령 전송.
 8031f14:	f7fc fd57 	bl	802e9c6 <SendLightOff>
	HAL_Delay( 200 );
 8031f18:	20c8      	movs	r0, #200	; 0xc8
 8031f1a:	f7ef fe31 	bl	8021b80 <HAL_Delay>
	SendLightOff();	 //  조명Off 명령 전송.
 8031f1e:	f7fc fd52 	bl	802e9c6 <SendLightOff>
	HAL_Delay( 200 );
 8031f22:	20c8      	movs	r0, #200	; 0xc8
 8031f24:	f7ef fe2c 	bl	8021b80 <HAL_Delay>
	SendLightOff();	 //  조명Off 명령 전송.
 8031f28:	f7fc fd4d 	bl	802e9c6 <SendLightOff>

#if defined(USE_STAT_LIGHT)
	g_nDevFlag &= ~(DevFlagLight);
#endif
}
 8031f2c:	bf00      	nop
 8031f2e:	bd80      	pop	{r7, pc}
 8031f30:	0803b388 	.word	0x0803b388

08031f34 <ProcDispVer>:

//========================================================================
void	ProcDispVer ( void )
//========================================================================
{
 8031f34:	b580      	push	{r7, lr}
 8031f36:	af00      	add	r7, sp, #0
	//  S/W 버전
	LCDSetCursor( 5, 13 );
 8031f38:	210d      	movs	r1, #13
 8031f3a:	2005      	movs	r0, #5
 8031f3c:	f7fa fcf0 	bl	802c920 <LCDSetCursor>
	LCDPrintf( "RFM v" APP_VER );
 8031f40:	4802      	ldr	r0, [pc, #8]	; (8031f4c <ProcDispVer+0x18>)
 8031f42:	f7fa fd1d 	bl	802c980 <LCDPrintf>
}
 8031f46:	bf00      	nop
 8031f48:	bd80      	pop	{r7, pc}
 8031f4a:	bf00      	nop
 8031f4c:	0803b398 	.word	0x0803b398

08031f50 <ProcDispStat>:

//========================================================================
void	ProcDispStat ( void )
//========================================================================
{
 8031f50:	b480      	push	{r7}
 8031f52:	af00      	add	r7, sp, #0
	//========================================================================
	//	Display Status Enable
	_bEnDispStat		=	1;
 8031f54:	4b03      	ldr	r3, [pc, #12]	; (8031f64 <ProcDispStat+0x14>)
 8031f56:	2201      	movs	r2, #1
 8031f58:	601a      	str	r2, [r3, #0]
}
 8031f5a:	bf00      	nop
 8031f5c:	46bd      	mov	sp, r7
 8031f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031f62:	4770      	bx	lr
 8031f64:	20002328 	.word	0x20002328

08031f68 <ProcMenuTrainSet>:

//========================================================================
void	ProcMenuTrainSet( int idxItem  )
//========================================================================
{
 8031f68:	b580      	push	{r7, lr}
 8031f6a:	b082      	sub	sp, #8
 8031f6c:	af00      	add	r7, sp, #0
 8031f6e:	6078      	str	r0, [r7, #4]
	LCDSetCursor( 20, 13 );
 8031f70:	210d      	movs	r1, #13
 8031f72:	2014      	movs	r0, #20
 8031f74:	f7fa fcd4 	bl	802c920 <LCDSetCursor>
	LCDPrintf( "[편성설정]" );
 8031f78:	480b      	ldr	r0, [pc, #44]	; (8031fa8 <ProcMenuTrainSet+0x40>)
 8031f7a:	f7fa fd01 	bl	802c980 <LCDPrintf>
	g_idxTrainSet = idxItem;	//	메뉴 Index값으로 설정.
 8031f7e:	4a0b      	ldr	r2, [pc, #44]	; (8031fac <ProcMenuTrainSet+0x44>)
 8031f80:	687b      	ldr	r3, [r7, #4]
 8031f82:	6013      	str	r3, [r2, #0]
	SetTrainSetIdx( g_idxTrainSet );
 8031f84:	4b09      	ldr	r3, [pc, #36]	; (8031fac <ProcMenuTrainSet+0x44>)
 8031f86:	681b      	ldr	r3, [r3, #0]
 8031f88:	4618      	mov	r0, r3
 8031f8a:	f000 fe0f 	bl	8032bac <SetTrainSetIdx>
	//  Radio Channel 설정.
	pRadioConfiguration->Radio_ChannelNumber = g_idxTrainSet;
#endif

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 8031f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8031f92:	f7ef fdf5 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 8031f96:	f7ff fea3 	bl	8031ce0 <UpdateLCDMain>

	//  메뉴 Exit
	SetActiveMenu( NULL );
 8031f9a:	2000      	movs	r0, #0
 8031f9c:	f7ff fe84 	bl	8031ca8 <SetActiveMenu>
}
 8031fa0:	bf00      	nop
 8031fa2:	3708      	adds	r7, #8
 8031fa4:	46bd      	mov	sp, r7
 8031fa6:	bd80      	pop	{r7, pc}
 8031fa8:	0803b3a8 	.word	0x0803b3a8
 8031fac:	20002338 	.word	0x20002338

08031fb0 <ProcMenuVer>:


//========================================================================
void	ProcMenuVer( int idxItem  )
//========================================================================
{
 8031fb0:	b580      	push	{r7, lr}
 8031fb2:	b082      	sub	sp, #8
 8031fb4:	af00      	add	r7, sp, #0
 8031fb6:	6078      	str	r0, [r7, #4]
	//	Upgrade Ok / Cancel

	//  메뉴 Exit
	SetActiveMenu( NULL );
 8031fb8:	2000      	movs	r0, #0
 8031fba:	f7ff fe75 	bl	8031ca8 <SetActiveMenu>

	//	메인화면 갱신.
	UpdateLCDMain();
 8031fbe:	f7ff fe8f 	bl	8031ce0 <UpdateLCDMain>
}
 8031fc2:	bf00      	nop
 8031fc4:	3708      	adds	r7, #8
 8031fc6:	46bd      	mov	sp, r7
 8031fc8:	bd80      	pop	{r7, pc}
	...

08031fcc <ProcMenuCmd>:


//========================================================================
void	ProcMenuCmd( int idxItem  )
//========================================================================
{
 8031fcc:	b580      	push	{r7, lr}
 8031fce:	b082      	sub	sp, #8
 8031fd0:	af00      	add	r7, sp, #0
 8031fd2:	6078      	str	r0, [r7, #4]
	//	하위매뉴진입 : 편성 / 호차 설정.
	switch ( idxItem )
 8031fd4:	687b      	ldr	r3, [r7, #4]
 8031fd6:	2b03      	cmp	r3, #3
 8031fd8:	d01f      	beq.n	803201a <ProcMenuCmd+0x4e>
 8031fda:	687b      	ldr	r3, [r7, #4]
 8031fdc:	2b03      	cmp	r3, #3
 8031fde:	dc27      	bgt.n	8032030 <ProcMenuCmd+0x64>
 8031fe0:	687b      	ldr	r3, [r7, #4]
 8031fe2:	2b01      	cmp	r3, #1
 8031fe4:	d003      	beq.n	8031fee <ProcMenuCmd+0x22>
 8031fe6:	687b      	ldr	r3, [r7, #4]
 8031fe8:	2b02      	cmp	r3, #2
 8031fea:	d00b      	beq.n	8032004 <ProcMenuCmd+0x38>
 8031fec:	e020      	b.n	8032030 <ProcMenuCmd+0x64>
	{
	case 1:		//	Train Set
		SetActiveMenu( &g_MenuSetCmdTSList );
 8031fee:	4826      	ldr	r0, [pc, #152]	; (8032088 <ProcMenuCmd+0xbc>)
 8031ff0:	f7ff fe5a 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8031ff4:	f7ff fe68 	bl	8031cc8 <GetActiveMenu>
 8031ff8:	4603      	mov	r3, r0
 8031ffa:	2200      	movs	r2, #0
 8031ffc:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8031ffe:	f7ff fe89 	bl	8031d14 <UpdateLCDMenu>
		return;
 8032002:	e03d      	b.n	8032080 <ProcMenuCmd+0xb4>
	case 2:		//	Car Set
		SetActiveMenu( &g_MenuSetCmdCarList );
 8032004:	4821      	ldr	r0, [pc, #132]	; (803208c <ProcMenuCmd+0xc0>)
 8032006:	f7ff fe4f 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 803200a:	f7ff fe5d 	bl	8031cc8 <GetActiveMenu>
 803200e:	4603      	mov	r3, r0
 8032010:	2200      	movs	r2, #0
 8032012:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8032014:	f7ff fe7e 	bl	8031d14 <UpdateLCDMenu>
		return;
 8032018:	e032      	b.n	8032080 <ProcMenuCmd+0xb4>
	case 3:		//	RFMode Set
		SetActiveMenu( &g_MenuSetCmdRFModeList );
 803201a:	481d      	ldr	r0, [pc, #116]	; (8032090 <ProcMenuCmd+0xc4>)
 803201c:	f7ff fe44 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8032020:	f7ff fe52 	bl	8031cc8 <GetActiveMenu>
 8032024:	4603      	mov	r3, r0
 8032026:	2200      	movs	r2, #0
 8032028:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 803202a:	f7ff fe73 	bl	8031d14 <UpdateLCDMenu>
		return;
 803202e:	e027      	b.n	8032080 <ProcMenuCmd+0xb4>
	}

	LCDSetCursor( 20, 13 );
 8032030:	210d      	movs	r1, #13
 8032032:	2014      	movs	r0, #20
 8032034:	f7fa fc74 	bl	802c920 <LCDSetCursor>
	LCDPrintf( "[명령전송]" );
 8032038:	4816      	ldr	r0, [pc, #88]	; (8032094 <ProcMenuCmd+0xc8>)
 803203a:	f7fa fca1 	bl	802c980 <LCDPrintf>

	switch( idxItem )
 803203e:	687b      	ldr	r3, [r7, #4]
 8032040:	2b05      	cmp	r3, #5
 8032042:	d010      	beq.n	8032066 <ProcMenuCmd+0x9a>
 8032044:	687b      	ldr	r3, [r7, #4]
 8032046:	2b05      	cmp	r3, #5
 8032048:	dc11      	bgt.n	803206e <ProcMenuCmd+0xa2>
 803204a:	687b      	ldr	r3, [r7, #4]
 803204c:	2b00      	cmp	r3, #0
 803204e:	d003      	beq.n	8032058 <ProcMenuCmd+0x8c>
 8032050:	687b      	ldr	r3, [r7, #4]
 8032052:	2b04      	cmp	r3, #4
 8032054:	d003      	beq.n	803205e <ProcMenuCmd+0x92>
 8032056:	e00a      	b.n	803206e <ProcMenuCmd+0xa2>
	{
	case 0:		SendRFCmdReset();		break;		//	Reset 명령.
 8032058:	f7fc fd0c 	bl	802ea74 <SendRFCmdReset>
 803205c:	e007      	b.n	803206e <ProcMenuCmd+0xa2>
//DEL	case 1:		SendRFCmdDFUMode();		break;		//	DFU Mode 명령.
	case 4:		SendRFCmdUpgrade(1);	break;		//	Upgrade(Re-Try 명령.
 803205e:	2001      	movs	r0, #1
 8032060:	f7fc fd92 	bl	802eb88 <SendRFCmdUpgrade>
 8032064:	e003      	b.n	803206e <ProcMenuCmd+0xa2>
	case 5:		SendRFCmdUpgrade(0);	break;		//	Upgrade 명령.
 8032066:	2000      	movs	r0, #0
 8032068:	f7fc fd8e 	bl	802eb88 <SendRFCmdUpgrade>
 803206c:	bf00      	nop
	}

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 803206e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8032072:	f7ef fd85 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 8032076:	f7ff fe33 	bl	8031ce0 <UpdateLCDMain>

	//  메뉴 Exit
	SetActiveMenu( NULL );
 803207a:	2000      	movs	r0, #0
 803207c:	f7ff fe14 	bl	8031ca8 <SetActiveMenu>
}
 8032080:	3708      	adds	r7, #8
 8032082:	46bd      	mov	sp, r7
 8032084:	bd80      	pop	{r7, pc}
 8032086:	bf00      	nop
 8032088:	20000b74 	.word	0x20000b74
 803208c:	20000b64 	.word	0x20000b64
 8032090:	20000b8c 	.word	0x20000b8c
 8032094:	0803b3b8 	.word	0x0803b3b8

08032098 <ProcMenuSetCmdTS>:


//========================================================================
void	ProcMenuSetCmdTS( int idxItem  )
//========================================================================
{
 8032098:	b580      	push	{r7, lr}
 803209a:	b082      	sub	sp, #8
 803209c:	af00      	add	r7, sp, #0
 803209e:	6078      	str	r0, [r7, #4]
	LCDSetCursor( 20, 13 );
 80320a0:	210d      	movs	r1, #13
 80320a2:	2014      	movs	r0, #20
 80320a4:	f7fa fc3c 	bl	802c920 <LCDSetCursor>
	LCDPrintf( "[명령전송]" );
 80320a8:	4809      	ldr	r0, [pc, #36]	; (80320d0 <ProcMenuSetCmdTS+0x38>)
 80320aa:	f7fa fc69 	bl	802c980 <LCDPrintf>

	SendRFCmdTS(idxItem);		//	편성설정.
 80320ae:	6878      	ldr	r0, [r7, #4]
 80320b0:	f7fc fd26 	bl	802eb00 <SendRFCmdTS>

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 80320b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80320b8:	f7ef fd62 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 80320bc:	f7ff fe10 	bl	8031ce0 <UpdateLCDMain>

	//  메뉴 Exit
	SetActiveMenu( NULL );
 80320c0:	2000      	movs	r0, #0
 80320c2:	f7ff fdf1 	bl	8031ca8 <SetActiveMenu>
}
 80320c6:	bf00      	nop
 80320c8:	3708      	adds	r7, #8
 80320ca:	46bd      	mov	sp, r7
 80320cc:	bd80      	pop	{r7, pc}
 80320ce:	bf00      	nop
 80320d0:	0803b3b8 	.word	0x0803b3b8

080320d4 <ProcMenuSetCmdCar>:

//========================================================================
void	ProcMenuSetCmdCar( int idxItem  )
//========================================================================
{
 80320d4:	b580      	push	{r7, lr}
 80320d6:	b082      	sub	sp, #8
 80320d8:	af00      	add	r7, sp, #0
 80320da:	6078      	str	r0, [r7, #4]
	LCDSetCursor( 20, 13 );
 80320dc:	210d      	movs	r1, #13
 80320de:	2014      	movs	r0, #20
 80320e0:	f7fa fc1e 	bl	802c920 <LCDSetCursor>
	LCDPrintf( "[명령전송]" );
 80320e4:	480a      	ldr	r0, [pc, #40]	; (8032110 <ProcMenuSetCmdCar+0x3c>)
 80320e6:	f7fa fc4b 	bl	802c980 <LCDPrintf>

	SendRFCmdCar(idxItem + 1);		//	호차설정.
 80320ea:	687b      	ldr	r3, [r7, #4]
 80320ec:	3301      	adds	r3, #1
 80320ee:	4618      	mov	r0, r3
 80320f0:	f7fc fce4 	bl	802eabc <SendRFCmdCar>

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 80320f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80320f8:	f7ef fd42 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 80320fc:	f7ff fdf0 	bl	8031ce0 <UpdateLCDMain>

	//  메뉴 Exit
	SetActiveMenu( NULL );
 8032100:	2000      	movs	r0, #0
 8032102:	f7ff fdd1 	bl	8031ca8 <SetActiveMenu>
}
 8032106:	bf00      	nop
 8032108:	3708      	adds	r7, #8
 803210a:	46bd      	mov	sp, r7
 803210c:	bd80      	pop	{r7, pc}
 803210e:	bf00      	nop
 8032110:	0803b3b8 	.word	0x0803b3b8

08032114 <ProcMenuSetCmdRFMode>:

//========================================================================
void	ProcMenuSetCmdRFMode( int idxItem  )
//========================================================================
{
 8032114:	b580      	push	{r7, lr}
 8032116:	b082      	sub	sp, #8
 8032118:	af00      	add	r7, sp, #0
 803211a:	6078      	str	r0, [r7, #4]
	LCDSetCursor( 20, 13 );
 803211c:	210d      	movs	r1, #13
 803211e:	2014      	movs	r0, #20
 8032120:	f7fa fbfe 	bl	802c920 <LCDSetCursor>
	LCDPrintf( "[명령전송]" );
 8032124:	480c      	ldr	r0, [pc, #48]	; (8032158 <ProcMenuSetCmdRFMode+0x44>)
 8032126:	f7fa fc2b 	bl	802c980 <LCDPrintf>

	SendRFCmdRFMode(idxItem + 1);		//	RF Mode 설정.
 803212a:	687b      	ldr	r3, [r7, #4]
 803212c:	3301      	adds	r3, #1
 803212e:	4618      	mov	r0, r3
 8032130:	f7fc fd08 	bl	802eb44 <SendRFCmdRFMode>

	HAL_Delay( 100 );	//	100 msec
 8032134:	2064      	movs	r0, #100	; 0x64
 8032136:	f7ef fd23 	bl	8021b80 <HAL_Delay>

	//	RF Mode 설정 후 Reset 명령
	SendRFCmdReset();
 803213a:	f7fc fc9b 	bl	802ea74 <SendRFCmdReset>

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 803213e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8032142:	f7ef fd1d 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 8032146:	f7ff fdcb 	bl	8031ce0 <UpdateLCDMain>

	//  메뉴 Exit
	SetActiveMenu( NULL );
 803214a:	2000      	movs	r0, #0
 803214c:	f7ff fdac 	bl	8031ca8 <SetActiveMenu>
}
 8032150:	bf00      	nop
 8032152:	3708      	adds	r7, #8
 8032154:	46bd      	mov	sp, r7
 8032156:	bd80      	pop	{r7, pc}
 8032158:	0803b3b8 	.word	0x0803b3b8

0803215c <ProcMenuMain>:


//========================================================================
void 	ProcMenuMain( int idxItem )
//========================================================================
{
 803215c:	b590      	push	{r4, r7, lr}
 803215e:	b083      	sub	sp, #12
 8032160:	af00      	add	r7, sp, #0
 8032162:	6078      	str	r0, [r7, #4]
	switch ( idxItem )
 8032164:	687b      	ldr	r3, [r7, #4]
 8032166:	2b08      	cmp	r3, #8
 8032168:	f200 8086 	bhi.w	8032278 <ProcMenuMain+0x11c>
 803216c:	a201      	add	r2, pc, #4	; (adr r2, 8032174 <ProcMenuMain+0x18>)
 803216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032172:	bf00      	nop
 8032174:	08032199 	.word	0x08032199
 8032178:	080321af 	.word	0x080321af
 803217c:	080321d7 	.word	0x080321d7
 8032180:	080321ef 	.word	0x080321ef
 8032184:	08032215 	.word	0x08032215
 8032188:	0803222b 	.word	0x0803222b
 803218c:	08032241 	.word	0x08032241
 8032190:	08032257 	.word	0x08032257
 8032194:	08032263 	.word	0x08032263
	{
	case eMenuIdxCtlLight:	//	0:		 //  조명제어
		//	Menu

		SetActiveMenu( &g_MenuLightCtrl );
 8032198:	4839      	ldr	r0, [pc, #228]	; (8032280 <ProcMenuMain+0x124>)
 803219a:	f7ff fd85 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 803219e:	f7ff fd93 	bl	8031cc8 <GetActiveMenu>
 80321a2:	4603      	mov	r3, r0
 80321a4:	2200      	movs	r2, #0
 80321a6:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 80321a8:	f7ff fdb4 	bl	8031d14 <UpdateLCDMenu>

		break;
 80321ac:	e064      	b.n	8032278 <ProcMenuMain+0x11c>
	case eMenuIdxSWVer:		//	1:		 //  S/W 버전
		//  메뉴 Exit

#if defined(USE_RFT_MENU_DEV_VER)

		if ( IsMenuMaint() )
 80321ae:	f7ff fd57 	bl	8031c60 <IsMenuMaint>
 80321b2:	4603      	mov	r3, r0
 80321b4:	2b00      	cmp	r3, #0
 80321b6:	d008      	beq.n	80321ca <ProcMenuMain+0x6e>
		{
			SetActiveMenu( &g_MenuVerList );	//	버전 List 현시.
 80321b8:	4832      	ldr	r0, [pc, #200]	; (8032284 <ProcMenuMain+0x128>)
 80321ba:	f7ff fd75 	bl	8031ca8 <SetActiveMenu>
			GetActiveMenu()->currIdx = 0;		//	메뉴 Index초기화.
 80321be:	f7ff fd83 	bl	8031cc8 <GetActiveMenu>
 80321c2:	4603      	mov	r3, r0
 80321c4:	2200      	movs	r2, #0
 80321c6:	609a      	str	r2, [r3, #8]
 80321c8:	e002      	b.n	80321d0 <ProcMenuMain+0x74>
		}
		else
		{
			SetActiveMenu( NULL );
 80321ca:	2000      	movs	r0, #0
 80321cc:	f7ff fd6c 	bl	8031ca8 <SetActiveMenu>
		}

		ProcDispVer();
 80321d0:	f7ff feb0 	bl	8031f34 <ProcDispVer>
#else
		SetActiveMenu( NULL );
		ProcDispVer();
#endif

		break;
 80321d4:	e050      	b.n	8032278 <ProcMenuMain+0x11c>

	case eMenuIdxTrainSet:	//	2:		 //  편성설정.

		SetActiveMenu( &g_MenuTrainSet );
 80321d6:	482c      	ldr	r0, [pc, #176]	; (8032288 <ProcMenuMain+0x12c>)
 80321d8:	f7ff fd66 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = g_idxTrainSet;	//	메뉴 Index초기화.
 80321dc:	f7ff fd74 	bl	8031cc8 <GetActiveMenu>
 80321e0:	4602      	mov	r2, r0
 80321e2:	4b2a      	ldr	r3, [pc, #168]	; (803228c <ProcMenuMain+0x130>)
 80321e4:	681b      	ldr	r3, [r3, #0]
 80321e6:	6093      	str	r3, [r2, #8]

		UpdateLCDMenu();
 80321e8:	f7ff fd94 	bl	8031d14 <UpdateLCDMenu>
		break;
 80321ec:	e044      	b.n	8032278 <ProcMenuMain+0x11c>

#if defined(USE_RFT_MENU_RFTID)

	case eMenuIdxRFTID:		//	3:		 //  송신기 ID

		SetActiveMenu( &g_MenuRFTIDList );
 80321ee:	4828      	ldr	r0, [pc, #160]	; (8032290 <ProcMenuMain+0x134>)
 80321f0:	f7ff fd5a 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = ( ( GetCarNo() + 1 ) % 2 );	//	메뉴 Index초기화.
 80321f4:	f000 fe36 	bl	8032e64 <GetCarNo>
 80321f8:	4603      	mov	r3, r0
 80321fa:	1c5c      	adds	r4, r3, #1
 80321fc:	f7ff fd64 	bl	8031cc8 <GetActiveMenu>
 8032200:	4602      	mov	r2, r0
 8032202:	2c00      	cmp	r4, #0
 8032204:	f004 0301 	and.w	r3, r4, #1
 8032208:	bfb8      	it	lt
 803220a:	425b      	neglt	r3, r3
 803220c:	6093      	str	r3, [r2, #8]

		UpdateLCDMenu();
 803220e:	f7ff fd81 	bl	8031d14 <UpdateLCDMenu>
		break;
 8032212:	e031      	b.n	8032278 <ProcMenuMain+0x11c>

#if defined(USE_RFT_MENU_SELFTEST)

	case eMenuIdxSelfTest:	//	4:		 //  송신기 ID

		SetActiveMenu( &g_MenuSelfTestList );
 8032214:	481f      	ldr	r0, [pc, #124]	; (8032294 <ProcMenuMain+0x138>)
 8032216:	f7ff fd47 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 803221a:	f7ff fd55 	bl	8031cc8 <GetActiveMenu>
 803221e:	4603      	mov	r3, r0
 8032220:	2200      	movs	r2, #0
 8032222:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8032224:	f7ff fd76 	bl	8031d14 <UpdateLCDMenu>
		break;
 8032228:	e026      	b.n	8032278 <ProcMenuMain+0x11c>

#if defined(USE_RFT_MENU_DIAG)

	case eMenuIdxDiag:		//	5:		 //  진단

		SetActiveMenu( &g_MenuDiagList );
 803222a:	481b      	ldr	r0, [pc, #108]	; (8032298 <ProcMenuMain+0x13c>)
 803222c:	f7ff fd3c 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8032230:	f7ff fd4a 	bl	8031cc8 <GetActiveMenu>
 8032234:	4603      	mov	r3, r0
 8032236:	2200      	movs	r2, #0
 8032238:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 803223a:	f7ff fd6b 	bl	8031d14 <UpdateLCDMenu>
		break;
 803223e:	e01b      	b.n	8032278 <ProcMenuMain+0x11c>

#if defined(USE_RFT_MENU_SETTING)

	case eMenuIdxSetting:	//	6:		 //  설정

		SetActiveMenu( &g_MenuSettingList );
 8032240:	4816      	ldr	r0, [pc, #88]	; (803229c <ProcMenuMain+0x140>)
 8032242:	f7ff fd31 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8032246:	f7ff fd3f 	bl	8031cc8 <GetActiveMenu>
 803224a:	4603      	mov	r3, r0
 803224c:	2200      	movs	r2, #0
 803224e:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8032250:	f7ff fd60 	bl	8031d14 <UpdateLCDMenu>
		break;
 8032254:	e010      	b.n	8032278 <ProcMenuMain+0x11c>

#if defined(USE_RFT_MENU_STAT)

	case eMenuIdxStat:		//	7:		 //  상태정보.

		SetActiveMenu( NULL );
 8032256:	2000      	movs	r0, #0
 8032258:	f7ff fd26 	bl	8031ca8 <SetActiveMenu>

		ProcDispStat();			//	상태정보 표출.
 803225c:	f7ff fe78 	bl	8031f50 <ProcDispStat>
		break;
 8032260:	e00a      	b.n	8032278 <ProcMenuMain+0x11c>

#if defined(USE_RFT_MENU_CMD)

	case eMenuIdxCmd:		//	8:		 //  명령전송.

		SetActiveMenu( &g_MenuCmdList );
 8032262:	480f      	ldr	r0, [pc, #60]	; (80322a0 <ProcMenuMain+0x144>)
 8032264:	f7ff fd20 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = 0;	//	메뉴 Index초기화.
 8032268:	f7ff fd2e 	bl	8031cc8 <GetActiveMenu>
 803226c:	4603      	mov	r3, r0
 803226e:	2200      	movs	r2, #0
 8032270:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8032272:	f7ff fd4f 	bl	8031d14 <UpdateLCDMenu>
		break;
 8032276:	bf00      	nop
		SetActiveMenu( NULL );

		break;
#endif	//	defined(USE_ENV_TEST)
	}
}
 8032278:	bf00      	nop
 803227a:	370c      	adds	r7, #12
 803227c:	46bd      	mov	sp, r7
 803227e:	bd90      	pop	{r4, r7, pc}
 8032280:	200007f8 	.word	0x200007f8
 8032284:	20000988 	.word	0x20000988
 8032288:	200009e8 	.word	0x200009e8
 803228c:	20002338 	.word	0x20002338
 8032290:	20000a00 	.word	0x20000a00
 8032294:	20000a28 	.word	0x20000a28
 8032298:	20000a44 	.word	0x20000a44
 803229c:	20000a64 	.word	0x20000a64
 80322a0:	20000b2c 	.word	0x20000b2c

080322a4 <ProcMenuLightCtrl>:


//========================================================================
void 	ProcMenuLightCtrl( int idxItem )
//========================================================================
{
 80322a4:	b580      	push	{r7, lr}
 80322a6:	b082      	sub	sp, #8
 80322a8:	af00      	add	r7, sp, #0
 80322aa:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 80322ac:	2000      	movs	r0, #0
 80322ae:	f7fa faf9 	bl	802c8a4 <LCDMenuUpDown>

	if ( idxItem == 0 )
 80322b2:	687b      	ldr	r3, [r7, #4]
 80322b4:	2b00      	cmp	r3, #0
 80322b6:	d102      	bne.n	80322be <ProcMenuLightCtrl+0x1a>
	{
		ProcLightOff();
 80322b8:	f7ff fe18 	bl	8031eec <ProcLightOff>
 80322bc:	e001      	b.n	80322c2 <ProcMenuLightCtrl+0x1e>
	}
	else
	{
		ProcLightOn();
 80322be:	f7ff fdf1 	bl	8031ea4 <ProcLightOn>
	}

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 80322c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80322c6:	f7ef fc5b 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 80322ca:	f7ff fd09 	bl	8031ce0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 80322ce:	2000      	movs	r0, #0
 80322d0:	f7ff fcea 	bl	8031ca8 <SetActiveMenu>
}
 80322d4:	bf00      	nop
 80322d6:	3708      	adds	r7, #8
 80322d8:	46bd      	mov	sp, r7
 80322da:	bd80      	pop	{r7, pc}

080322dc <ProcMenuRFTID>:

//========================================================================
void 	ProcMenuRFTID( int idxItem )
//========================================================================
{
 80322dc:	b580      	push	{r7, lr}
 80322de:	b082      	sub	sp, #8
 80322e0:	af00      	add	r7, sp, #0
 80322e2:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );	//	UpDown Off
 80322e4:	2000      	movs	r0, #0
 80322e6:	f7fa fadd 	bl	802c8a4 <LCDMenuUpDown>

	switch( idxItem )
 80322ea:	687b      	ldr	r3, [r7, #4]
 80322ec:	2b00      	cmp	r3, #0
 80322ee:	d003      	beq.n	80322f8 <ProcMenuRFTID+0x1c>
 80322f0:	687b      	ldr	r3, [r7, #4]
 80322f2:	2b01      	cmp	r3, #1
 80322f4:	d007      	beq.n	8032306 <ProcMenuRFTID+0x2a>
 80322f6:	e00d      	b.n	8032314 <ProcMenuRFTID+0x38>
	{
	case 0:	//	송신기 #1
		SetCarNo( RFTCarNo1 );	//	CarNo ( 11 )
 80322f8:	200b      	movs	r0, #11
 80322fa:	f000 fdc9 	bl	8032e90 <SetCarNo>
		LCDPrintf( "Set RFT#1" );
 80322fe:	4810      	ldr	r0, [pc, #64]	; (8032340 <ProcMenuRFTID+0x64>)
 8032300:	f7fa fb3e 	bl	802c980 <LCDPrintf>
		break;
 8032304:	e00e      	b.n	8032324 <ProcMenuRFTID+0x48>

	case 1:	//	송신기 #2
		SetCarNo( RFTCarNo2 );	//	CarNo ( 12 )
 8032306:	200c      	movs	r0, #12
 8032308:	f000 fdc2 	bl	8032e90 <SetCarNo>
		LCDPrintf( "Set RFT#2" );
 803230c:	480d      	ldr	r0, [pc, #52]	; (8032344 <ProcMenuRFTID+0x68>)
 803230e:	f7fa fb37 	bl	802c980 <LCDPrintf>
		break;
 8032312:	e007      	b.n	8032324 <ProcMenuRFTID+0x48>

	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 8032314:	687b      	ldr	r3, [r7, #4]
 8032316:	f240 4209 	movw	r2, #1033	; 0x409
 803231a:	490b      	ldr	r1, [pc, #44]	; (8032348 <ProcMenuRFTID+0x6c>)
 803231c:	480b      	ldr	r0, [pc, #44]	; (803234c <ProcMenuRFTID+0x70>)
 803231e:	f004 ffb9 	bl	8037294 <iprintf>
		break;
 8032322:	bf00      	nop
	}

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 8032324:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8032328:	f7ef fc2a 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 803232c:	f7ff fcd8 	bl	8031ce0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 8032330:	2000      	movs	r0, #0
 8032332:	f7ff fcb9 	bl	8031ca8 <SetActiveMenu>
}
 8032336:	bf00      	nop
 8032338:	3708      	adds	r7, #8
 803233a:	46bd      	mov	sp, r7
 803233c:	bd80      	pop	{r7, pc}
 803233e:	bf00      	nop
 8032340:	0803b3c8 	.word	0x0803b3c8
 8032344:	0803b3d4 	.word	0x0803b3d4
 8032348:	08041938 	.word	0x08041938
 803234c:	0803b3e0 	.word	0x0803b3e0

08032350 <ProcMenuSelfTest>:

//========================================================================
void 	ProcMenuSelfTest( int idxItem )
//========================================================================
{
 8032350:	b580      	push	{r7, lr}
 8032352:	b082      	sub	sp, #8
 8032354:	af00      	add	r7, sp, #0
 8032356:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 8032358:	2000      	movs	r0, #0
 803235a:	f7fa faa3 	bl	802c8a4 <LCDMenuUpDown>

	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 803235e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8032362:	f7ef fc0d 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 8032366:	f7ff fcbb 	bl	8031ce0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 803236a:	2000      	movs	r0, #0
 803236c:	f7ff fc9c 	bl	8031ca8 <SetActiveMenu>
}
 8032370:	bf00      	nop
 8032372:	3708      	adds	r7, #8
 8032374:	46bd      	mov	sp, r7
 8032376:	bd80      	pop	{r7, pc}

08032378 <ProcMenuDiag>:

//========================================================================
void 	ProcMenuDiag( int idxItem )
//========================================================================
{
 8032378:	b580      	push	{r7, lr}
 803237a:	b082      	sub	sp, #8
 803237c:	af00      	add	r7, sp, #0
 803237e:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 8032380:	2000      	movs	r0, #0
 8032382:	f7fa fa8f 	bl	802c8a4 <LCDMenuUpDown>

//	" AudioLoop:Off",	//  Loopback Off
//	" AudioLoop:On",	//  Loopback On
//	" AudioSine:On",	//  Sine Wave On

	switch( idxItem )
 8032386:	687b      	ldr	r3, [r7, #4]
 8032388:	2b02      	cmp	r3, #2
 803238a:	d022      	beq.n	80323d2 <ProcMenuDiag+0x5a>
 803238c:	687b      	ldr	r3, [r7, #4]
 803238e:	2b02      	cmp	r3, #2
 8032390:	dc30      	bgt.n	80323f4 <ProcMenuDiag+0x7c>
 8032392:	687b      	ldr	r3, [r7, #4]
 8032394:	2b00      	cmp	r3, #0
 8032396:	d003      	beq.n	80323a0 <ProcMenuDiag+0x28>
 8032398:	687b      	ldr	r3, [r7, #4]
 803239a:	2b01      	cmp	r3, #1
 803239c:	d008      	beq.n	80323b0 <ProcMenuDiag+0x38>
 803239e:	e029      	b.n	80323f4 <ProcMenuDiag+0x7c>
	{
	case 0:	//	Audio Loopback Off
		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
 80323a0:	2200      	movs	r2, #0
 80323a2:	2120      	movs	r1, #32
 80323a4:	4819      	ldr	r0, [pc, #100]	; (803240c <ProcMenuDiag+0x94>)
 80323a6:	f7f1 f8b9 	bl	802351c <HAL_GPIO_WritePin>

		//	Codec Loopback Off
		AudioStop();
 80323aa:	f7fd fc07 	bl	802fbbc <AudioStop>

		break;
 80323ae:	e029      	b.n	8032404 <ProcMenuDiag+0x8c>

	case 1:	//	Audio Loopback On
		printf( "%s(%d) - sine\n", __func__, __LINE__ );
 80323b0:	f240 4236 	movw	r2, #1078	; 0x436
 80323b4:	4916      	ldr	r1, [pc, #88]	; (8032410 <ProcMenuDiag+0x98>)
 80323b6:	4817      	ldr	r0, [pc, #92]	; (8032414 <ProcMenuDiag+0x9c>)
 80323b8:	f004 ff6c 	bl	8037294 <iprintf>
		LCDPrintf( "Audio Loop" );
 80323bc:	4816      	ldr	r0, [pc, #88]	; (8032418 <ProcMenuDiag+0xa0>)
 80323be:	f7fa fadf 	bl	802c980 <LCDPrintf>

		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
 80323c2:	2201      	movs	r2, #1
 80323c4:	2120      	movs	r1, #32
 80323c6:	4811      	ldr	r0, [pc, #68]	; (803240c <ProcMenuDiag+0x94>)
 80323c8:	f7f1 f8a8 	bl	802351c <HAL_GPIO_WritePin>

		AudioDMALoopback();
 80323cc:	f7fd fcfa 	bl	802fdc4 <AudioDMALoopback>
		break;
 80323d0:	e018      	b.n	8032404 <ProcMenuDiag+0x8c>

	case 2:	//	Audio Sine Wave On
		printf( "%s(%d) - sine\n", __func__, __LINE__ );
 80323d2:	f240 423f 	movw	r2, #1087	; 0x43f
 80323d6:	490e      	ldr	r1, [pc, #56]	; (8032410 <ProcMenuDiag+0x98>)
 80323d8:	480e      	ldr	r0, [pc, #56]	; (8032414 <ProcMenuDiag+0x9c>)
 80323da:	f004 ff5b 	bl	8037294 <iprintf>
		LCDPrintf( "Audio Sine" );
 80323de:	480f      	ldr	r0, [pc, #60]	; (803241c <ProcMenuDiag+0xa4>)
 80323e0:	f7fa face 	bl	802c980 <LCDPrintf>

		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
 80323e4:	2201      	movs	r2, #1
 80323e6:	2120      	movs	r1, #32
 80323e8:	4808      	ldr	r0, [pc, #32]	; (803240c <ProcMenuDiag+0x94>)
 80323ea:	f7f1 f897 	bl	802351c <HAL_GPIO_WritePin>

		AudioPlayDMASine();
 80323ee:	f7fd fd1d 	bl	802fe2c <AudioPlayDMASine>
		break;
 80323f2:	e007      	b.n	8032404 <ProcMenuDiag+0x8c>

	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 80323f4:	687b      	ldr	r3, [r7, #4]
 80323f6:	f44f 6289 	mov.w	r2, #1096	; 0x448
 80323fa:	4905      	ldr	r1, [pc, #20]	; (8032410 <ProcMenuDiag+0x98>)
 80323fc:	4808      	ldr	r0, [pc, #32]	; (8032420 <ProcMenuDiag+0xa8>)
 80323fe:	f004 ff49 	bl	8037294 <iprintf>
		break;
 8032402:	bf00      	nop
	//  1초후 Main화면 갱신.
//	HAL_Delay( 1000 );
//	UpdateLCDMain();

//	SetActiveMenu( NULL );
}
 8032404:	bf00      	nop
 8032406:	3708      	adds	r7, #8
 8032408:	46bd      	mov	sp, r7
 803240a:	bd80      	pop	{r7, pc}
 803240c:	40021000 	.word	0x40021000
 8032410:	08041948 	.word	0x08041948
 8032414:	0803b3fc 	.word	0x0803b3fc
 8032418:	0803b40c 	.word	0x0803b40c
 803241c:	0803b418 	.word	0x0803b418
 8032420:	0803b3e0 	.word	0x0803b3e0

08032424 <ProcMenuSetting>:


//========================================================================
void 	ProcMenuSetting( int idxItem )
//========================================================================
{
 8032424:	b590      	push	{r4, r7, lr}
 8032426:	b083      	sub	sp, #12
 8032428:	af00      	add	r7, sp, #0
 803242a:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 803242c:	2000      	movs	r0, #0
 803242e:	f7fa fa39 	bl	802c8a4 <LCDMenuUpDown>

//	" Mic Vol",		//	Mic Volume
//	" Spk Vol",		//	Spk Volume
//	" RF Tx Pwr",	//	RF Tx Power

	switch( idxItem )
 8032432:	687b      	ldr	r3, [r7, #4]
 8032434:	2b03      	cmp	r3, #3
 8032436:	d83d      	bhi.n	80324b4 <ProcMenuSetting+0x90>
 8032438:	a201      	add	r2, pc, #4	; (adr r2, 8032440 <ProcMenuSetting+0x1c>)
 803243a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803243e:	bf00      	nop
 8032440:	08032451 	.word	0x08032451
 8032444:	0803246b 	.word	0x0803246b
 8032448:	08032485 	.word	0x08032485
 803244c:	0803249b 	.word	0x0803249b
	{
	case 0:		//	Mic Volume
		SetActiveMenu( &g_MenuSetMicList );
 8032450:	481e      	ldr	r0, [pc, #120]	; (80324cc <ProcMenuSetting+0xa8>)
 8032452:	f7ff fc29 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = GetMicVol();	//	메뉴 Index초기화.
 8032456:	f7ff fc37 	bl	8031cc8 <GetActiveMenu>
 803245a:	4604      	mov	r4, r0
 803245c:	f000 fdc0 	bl	8032fe0 <GetMicVol>
 8032460:	4603      	mov	r3, r0
 8032462:	60a3      	str	r3, [r4, #8]

		UpdateLCDMenu();
 8032464:	f7ff fc56 	bl	8031d14 <UpdateLCDMenu>

		break;
 8032468:	e02c      	b.n	80324c4 <ProcMenuSetting+0xa0>

	case 1:		//	Spk Volume
		SetActiveMenu( &g_MenuSetSpkList );
 803246a:	4819      	ldr	r0, [pc, #100]	; (80324d0 <ProcMenuSetting+0xac>)
 803246c:	f7ff fc1c 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = GetSpkVol();	//	메뉴 Index초기화.
 8032470:	f7ff fc2a 	bl	8031cc8 <GetActiveMenu>
 8032474:	4604      	mov	r4, r0
 8032476:	f000 fd43 	bl	8032f00 <GetSpkVol>
 803247a:	4603      	mov	r3, r0
 803247c:	60a3      	str	r3, [r4, #8]

		UpdateLCDMenu();
 803247e:	f7ff fc49 	bl	8031d14 <UpdateLCDMenu>
		break;
 8032482:	e01f      	b.n	80324c4 <ProcMenuSetting+0xa0>

	case 2:		//	RF Tx Power
		SetActiveMenu( &g_MenuSetTxPwrList );
 8032484:	4813      	ldr	r0, [pc, #76]	; (80324d4 <ProcMenuSetting+0xb0>)
 8032486:	f7ff fc0f 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = 7;	//	메뉴 Index초기화.
 803248a:	f7ff fc1d 	bl	8031cc8 <GetActiveMenu>
 803248e:	4603      	mov	r3, r0
 8032490:	2207      	movs	r2, #7
 8032492:	609a      	str	r2, [r3, #8]

		UpdateLCDMenu();
 8032494:	f7ff fc3e 	bl	8031d14 <UpdateLCDMenu>
		break;
 8032498:	e014      	b.n	80324c4 <ProcMenuSetting+0xa0>

	case 3:		//	RF Mode
		SetActiveMenu( &g_MenuSetRFModeList );
 803249a:	480f      	ldr	r0, [pc, #60]	; (80324d8 <ProcMenuSetting+0xb4>)
 803249c:	f7ff fc04 	bl	8031ca8 <SetActiveMenu>
		GetActiveMenu()->currIdx = g_nRFMode - 1;	//	메뉴 Index초기화.
 80324a0:	4b0e      	ldr	r3, [pc, #56]	; (80324dc <ProcMenuSetting+0xb8>)
 80324a2:	681c      	ldr	r4, [r3, #0]
 80324a4:	f7ff fc10 	bl	8031cc8 <GetActiveMenu>
 80324a8:	4602      	mov	r2, r0
 80324aa:	1e63      	subs	r3, r4, #1
 80324ac:	6093      	str	r3, [r2, #8]

		UpdateLCDMenu();
 80324ae:	f7ff fc31 	bl	8031d14 <UpdateLCDMenu>
		break;
 80324b2:	e007      	b.n	80324c4 <ProcMenuSetting+0xa0>

	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 80324b4:	687b      	ldr	r3, [r7, #4]
 80324b6:	f240 427e 	movw	r2, #1150	; 0x47e
 80324ba:	4909      	ldr	r1, [pc, #36]	; (80324e0 <ProcMenuSetting+0xbc>)
 80324bc:	4809      	ldr	r0, [pc, #36]	; (80324e4 <ProcMenuSetting+0xc0>)
 80324be:	f004 fee9 	bl	8037294 <iprintf>
		break;
 80324c2:	bf00      	nop
	}
}
 80324c4:	bf00      	nop
 80324c6:	370c      	adds	r7, #12
 80324c8:	46bd      	mov	sp, r7
 80324ca:	bd90      	pop	{r4, r7, pc}
 80324cc:	20000a9c 	.word	0x20000a9c
 80324d0:	20000abc 	.word	0x20000abc
 80324d4:	20000aec 	.word	0x20000aec
 80324d8:	20000b04 	.word	0x20000b04
 80324dc:	20002350 	.word	0x20002350
 80324e0:	08041958 	.word	0x08041958
 80324e4:	0803b3e0 	.word	0x0803b3e0

080324e8 <ProcMenuSetMic>:

//========================================================================
void 	ProcMenuSetMic( int idxItem )
//========================================================================
{
 80324e8:	b580      	push	{r7, lr}
 80324ea:	b082      	sub	sp, #8
 80324ec:	af00      	add	r7, sp, #0
 80324ee:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 80324f0:	2000      	movs	r0, #0
 80324f2:	f7fa f9d7 	bl	802c8a4 <LCDMenuUpDown>
 80324f6:	687b      	ldr	r3, [r7, #4]

	//	Mic : 0 ~ 9

	switch( idxItem )
 80324f8:	2b09      	cmp	r3, #9
 80324fa:	d803      	bhi.n	8032504 <ProcMenuSetMic+0x1c>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		SetMicVol(idxItem);
 80324fc:	6878      	ldr	r0, [r7, #4]
 80324fe:	f000 fda3 	bl	8033048 <SetMicVol>
		break;
 8032502:	e007      	b.n	8032514 <ProcMenuSetMic+0x2c>
	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 8032504:	687b      	ldr	r3, [r7, #4]
 8032506:	f240 429a 	movw	r2, #1178	; 0x49a
 803250a:	4909      	ldr	r1, [pc, #36]	; (8032530 <ProcMenuSetMic+0x48>)
 803250c:	4809      	ldr	r0, [pc, #36]	; (8032534 <ProcMenuSetMic+0x4c>)
 803250e:	f004 fec1 	bl	8037294 <iprintf>
		break;
 8032512:	bf00      	nop
	}
	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 8032514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8032518:	f7ef fb32 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 803251c:	f7ff fbe0 	bl	8031ce0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 8032520:	2000      	movs	r0, #0
 8032522:	f7ff fbc1 	bl	8031ca8 <SetActiveMenu>
}
 8032526:	bf00      	nop
 8032528:	3708      	adds	r7, #8
 803252a:	46bd      	mov	sp, r7
 803252c:	bd80      	pop	{r7, pc}
 803252e:	bf00      	nop
 8032530:	08041968 	.word	0x08041968
 8032534:	0803b3e0 	.word	0x0803b3e0

08032538 <ProcMenuSetSpk>:

//========================================================================
void 	ProcMenuSetSpk( int idxItem )
//========================================================================
{
 8032538:	b580      	push	{r7, lr}
 803253a:	b082      	sub	sp, #8
 803253c:	af00      	add	r7, sp, #0
 803253e:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 8032540:	2000      	movs	r0, #0
 8032542:	f7fa f9af 	bl	802c8a4 <LCDMenuUpDown>
 8032546:	687b      	ldr	r3, [r7, #4]

	//	Spk : 0 ~ 3

	switch( idxItem )
 8032548:	2b03      	cmp	r3, #3
 803254a:	d803      	bhi.n	8032554 <ProcMenuSetSpk+0x1c>
	{
	case 0:
	case 1:
	case 2:
	case 3:
		SetSpkVol(idxItem);
 803254c:	6878      	ldr	r0, [r7, #4]
 803254e:	f000 fd0b 	bl	8032f68 <SetSpkVol>
		break;
 8032552:	e007      	b.n	8032564 <ProcMenuSetSpk+0x2c>
	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 8032554:	687b      	ldr	r3, [r7, #4]
 8032556:	f240 42b5 	movw	r2, #1205	; 0x4b5
 803255a:	4909      	ldr	r1, [pc, #36]	; (8032580 <ProcMenuSetSpk+0x48>)
 803255c:	4809      	ldr	r0, [pc, #36]	; (8032584 <ProcMenuSetSpk+0x4c>)
 803255e:	f004 fe99 	bl	8037294 <iprintf>
		break;
 8032562:	bf00      	nop
	}
	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 8032564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8032568:	f7ef fb0a 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 803256c:	f7ff fbb8 	bl	8031ce0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 8032570:	2000      	movs	r0, #0
 8032572:	f7ff fb99 	bl	8031ca8 <SetActiveMenu>
}
 8032576:	bf00      	nop
 8032578:	3708      	adds	r7, #8
 803257a:	46bd      	mov	sp, r7
 803257c:	bd80      	pop	{r7, pc}
 803257e:	bf00      	nop
 8032580:	08041978 	.word	0x08041978
 8032584:	0803b3e0 	.word	0x0803b3e0

08032588 <ProcMenuSetTxPwr>:


//========================================================================
void 	ProcMenuSetTxPwr( int idxItem )
//========================================================================
{
 8032588:	b580      	push	{r7, lr}
 803258a:	b082      	sub	sp, #8
 803258c:	af00      	add	r7, sp, #0
 803258e:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 8032590:	2000      	movs	r0, #0
 8032592:	f7fa f987 	bl	802c8a4 <LCDMenuUpDown>
//								" Pwr : 10 dBm",	//	22
//								" Pwr : 15 dBm",	//	40
//								" Pwr : 20 dBm",	//	127
//							};

	switch( idxItem )
 8032596:	687b      	ldr	r3, [r7, #4]
 8032598:	2b06      	cmp	r3, #6
 803259a:	d82d      	bhi.n	80325f8 <ProcMenuSetTxPwr+0x70>
 803259c:	a201      	add	r2, pc, #4	; (adr r2, 80325a4 <ProcMenuSetTxPwr+0x1c>)
 803259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80325a2:	bf00      	nop
 80325a4:	080325c1 	.word	0x080325c1
 80325a8:	080325c9 	.word	0x080325c9
 80325ac:	080325d1 	.word	0x080325d1
 80325b0:	080325d9 	.word	0x080325d9
 80325b4:	080325e1 	.word	0x080325e1
 80325b8:	080325e9 	.word	0x080325e9
 80325bc:	080325f1 	.word	0x080325f1
	{
	case 0:	vRadio_Set_TxPower(0);		break;
 80325c0:	2000      	movs	r0, #0
 80325c2:	f7fa ff1b 	bl	802d3fc <vRadio_Set_TxPower>
 80325c6:	e01f      	b.n	8032608 <ProcMenuSetTxPwr+0x80>
	case 1:	vRadio_Set_TxPower(1);		break;
 80325c8:	2001      	movs	r0, #1
 80325ca:	f7fa ff17 	bl	802d3fc <vRadio_Set_TxPower>
 80325ce:	e01b      	b.n	8032608 <ProcMenuSetTxPwr+0x80>
	case 2:	vRadio_Set_TxPower(4);		break;
 80325d0:	2004      	movs	r0, #4
 80325d2:	f7fa ff13 	bl	802d3fc <vRadio_Set_TxPower>
 80325d6:	e017      	b.n	8032608 <ProcMenuSetTxPwr+0x80>
	case 3:	vRadio_Set_TxPower(7);		break;
 80325d8:	2007      	movs	r0, #7
 80325da:	f7fa ff0f 	bl	802d3fc <vRadio_Set_TxPower>
 80325de:	e013      	b.n	8032608 <ProcMenuSetTxPwr+0x80>
	case 4:	vRadio_Set_TxPower(12);		break;
 80325e0:	200c      	movs	r0, #12
 80325e2:	f7fa ff0b 	bl	802d3fc <vRadio_Set_TxPower>
 80325e6:	e00f      	b.n	8032608 <ProcMenuSetTxPwr+0x80>
	case 5:	vRadio_Set_TxPower(40);		break;
 80325e8:	2028      	movs	r0, #40	; 0x28
 80325ea:	f7fa ff07 	bl	802d3fc <vRadio_Set_TxPower>
 80325ee:	e00b      	b.n	8032608 <ProcMenuSetTxPwr+0x80>
	case 6:	vRadio_Set_TxPower(127);	break;
 80325f0:	207f      	movs	r0, #127	; 0x7f
 80325f2:	f7fa ff03 	bl	802d3fc <vRadio_Set_TxPower>
 80325f6:	e007      	b.n	8032608 <ProcMenuSetTxPwr+0x80>
	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 80325f8:	687b      	ldr	r3, [r7, #4]
 80325fa:	f240 42da 	movw	r2, #1242	; 0x4da
 80325fe:	4909      	ldr	r1, [pc, #36]	; (8032624 <ProcMenuSetTxPwr+0x9c>)
 8032600:	4809      	ldr	r0, [pc, #36]	; (8032628 <ProcMenuSetTxPwr+0xa0>)
 8032602:	f004 fe47 	bl	8037294 <iprintf>
		break;
 8032606:	bf00      	nop
	}
	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 8032608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803260c:	f7ef fab8 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 8032610:	f7ff fb66 	bl	8031ce0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 8032614:	2000      	movs	r0, #0
 8032616:	f7ff fb47 	bl	8031ca8 <SetActiveMenu>
}
 803261a:	bf00      	nop
 803261c:	3708      	adds	r7, #8
 803261e:	46bd      	mov	sp, r7
 8032620:	bd80      	pop	{r7, pc}
 8032622:	bf00      	nop
 8032624:	08041988 	.word	0x08041988
 8032628:	0803b3e0 	.word	0x0803b3e0

0803262c <ProcMenuSetRFMode>:


//========================================================================
void 	ProcMenuSetRFMode( int idxItem )
//========================================================================
{
 803262c:	b580      	push	{r7, lr}
 803262e:	b082      	sub	sp, #8
 8032630:	af00      	add	r7, sp, #0
 8032632:	6078      	str	r0, [r7, #4]
	LCDMenuUpDown( 0 );
 8032634:	2000      	movs	r0, #0
 8032636:	f7fa f935 	bl	802c8a4 <LCDMenuUpDown>

	switch( idxItem )
 803263a:	687b      	ldr	r3, [r7, #4]
 803263c:	2b00      	cmp	r3, #0
 803263e:	d003      	beq.n	8032648 <ProcMenuSetRFMode+0x1c>
 8032640:	687b      	ldr	r3, [r7, #4]
 8032642:	2b01      	cmp	r3, #1
 8032644:	d004      	beq.n	8032650 <ProcMenuSetRFMode+0x24>
 8032646:	e007      	b.n	8032658 <ProcMenuSetRFMode+0x2c>
	{
	case 0:	SetRFMode(1);		break;
 8032648:	2001      	movs	r0, #1
 803264a:	f000 fb27 	bl	8032c9c <SetRFMode>
 803264e:	e00b      	b.n	8032668 <ProcMenuSetRFMode+0x3c>
	case 1:	SetRFMode(2);		break;
 8032650:	2002      	movs	r0, #2
 8032652:	f000 fb23 	bl	8032c9c <SetRFMode>
 8032656:	e007      	b.n	8032668 <ProcMenuSetRFMode+0x3c>
	default:
		printf("%s(%d) - invalid menu(%d)\n", __func__, __LINE__, idxItem);
 8032658:	687b      	ldr	r3, [r7, #4]
 803265a:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
 803265e:	4909      	ldr	r1, [pc, #36]	; (8032684 <ProcMenuSetRFMode+0x58>)
 8032660:	4809      	ldr	r0, [pc, #36]	; (8032688 <ProcMenuSetRFMode+0x5c>)
 8032662:	f004 fe17 	bl	8037294 <iprintf>
		break;
 8032666:	bf00      	nop
	}
	//  1초후 Main화면 갱신.
	HAL_Delay( 1000 );
 8032668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803266c:	f7ef fa88 	bl	8021b80 <HAL_Delay>
	UpdateLCDMain();
 8032670:	f7ff fb36 	bl	8031ce0 <UpdateLCDMain>

	SetActiveMenu( NULL );
 8032674:	2000      	movs	r0, #0
 8032676:	f7ff fb17 	bl	8031ca8 <SetActiveMenu>
}
 803267a:	bf00      	nop
 803267c:	3708      	adds	r7, #8
 803267e:	46bd      	mov	sp, r7
 8032680:	bd80      	pop	{r7, pc}
 8032682:	bf00      	nop
 8032684:	0804199c 	.word	0x0804199c
 8032688:	0803b3e0 	.word	0x0803b3e0

0803268c <ProcBtnOK>:

//========================================================================
void	ProcBtnOK( void )
//========================================================================
{
 803268c:	b580      	push	{r7, lr}
 803268e:	af00      	add	r7, sp, #0
	if ( GetActiveMenu() == NULL )
 8032690:	f7ff fb1a 	bl	8031cc8 <GetActiveMenu>
 8032694:	4603      	mov	r3, r0
 8032696:	2b00      	cmp	r3, #0
 8032698:	d107      	bne.n	80326aa <ProcBtnOK+0x1e>
	{
		LCDClearMain();
 803269a:	f7fa f9d1 	bl	802ca40 <LCDClearMain>
		//========================================================================
		//  편성 : XXX
		UpdateLCDMain();
 803269e:	f7ff fb1f 	bl	8031ce0 <UpdateLCDMain>

		//========================================================================
		//	Display Status Disable
		_bEnDispStat		=	0;
 80326a2:	4b09      	ldr	r3, [pc, #36]	; (80326c8 <ProcBtnOK+0x3c>)
 80326a4:	2200      	movs	r2, #0
 80326a6:	601a      	str	r2, [r3, #0]

		return;
 80326a8:	e00c      	b.n	80326c4 <ProcBtnOK+0x38>
	}
	else if ( g_pActiveMenu->cbFunc != NULL )
 80326aa:	4b08      	ldr	r3, [pc, #32]	; (80326cc <ProcBtnOK+0x40>)
 80326ac:	681b      	ldr	r3, [r3, #0]
 80326ae:	68db      	ldr	r3, [r3, #12]
 80326b0:	2b00      	cmp	r3, #0
 80326b2:	d007      	beq.n	80326c4 <ProcBtnOK+0x38>
	{
		//	Menu Procedure Function
		g_pActiveMenu->cbFunc( g_pActiveMenu->currIdx );
 80326b4:	4b05      	ldr	r3, [pc, #20]	; (80326cc <ProcBtnOK+0x40>)
 80326b6:	681b      	ldr	r3, [r3, #0]
 80326b8:	68db      	ldr	r3, [r3, #12]
 80326ba:	4a04      	ldr	r2, [pc, #16]	; (80326cc <ProcBtnOK+0x40>)
 80326bc:	6812      	ldr	r2, [r2, #0]
 80326be:	6892      	ldr	r2, [r2, #8]
 80326c0:	4610      	mov	r0, r2
 80326c2:	4798      	blx	r3
	}
}
 80326c4:	bd80      	pop	{r7, pc}
 80326c6:	bf00      	nop
 80326c8:	20002328 	.word	0x20002328
 80326cc:	20002324 	.word	0x20002324

080326d0 <GetDevID>:
// Function

//========================================================================
int GetDevID    ( void )
//========================================================================
{
 80326d0:	b480      	push	{r7}
 80326d2:	af00      	add	r7, sp, #0
	return g_nDevID;
 80326d4:	4b03      	ldr	r3, [pc, #12]	; (80326e4 <GetDevID+0x14>)
 80326d6:	681b      	ldr	r3, [r3, #0]
}
 80326d8:	4618      	mov	r0, r3
 80326da:	46bd      	mov	sp, r7
 80326dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80326e0:	4770      	bx	lr
 80326e2:	bf00      	nop
 80326e4:	20002330 	.word	0x20002330

080326e8 <SetDevID>:

//========================================================================
void SetDevID    ( int nDevID )
//========================================================================
{
 80326e8:	b580      	push	{r7, lr}
 80326ea:	b082      	sub	sp, #8
 80326ec:	af00      	add	r7, sp, #0
 80326ee:	6078      	str	r0, [r7, #4]
	printf( "%s : %s(%d)\n", __func__,
 80326f0:	687b      	ldr	r3, [r7, #4]
 80326f2:	2b01      	cmp	r3, #1
 80326f4:	d101      	bne.n	80326fa <SetDevID+0x12>
 80326f6:	4a07      	ldr	r2, [pc, #28]	; (8032714 <SetDevID+0x2c>)
 80326f8:	e000      	b.n	80326fc <SetDevID+0x14>
 80326fa:	4a07      	ldr	r2, [pc, #28]	; (8032718 <SetDevID+0x30>)
 80326fc:	687b      	ldr	r3, [r7, #4]
 80326fe:	4907      	ldr	r1, [pc, #28]	; (803271c <SetDevID+0x34>)
 8032700:	4807      	ldr	r0, [pc, #28]	; (8032720 <SetDevID+0x38>)
 8032702:	f004 fdc7 	bl	8037294 <iprintf>
							( nDevID == DevRF900M )? "RFM":"RFT",
							nDevID );
	g_nDevID = nDevID;
 8032706:	4a07      	ldr	r2, [pc, #28]	; (8032724 <SetDevID+0x3c>)
 8032708:	687b      	ldr	r3, [r7, #4]
 803270a:	6013      	str	r3, [r2, #0]
}
 803270c:	bf00      	nop
 803270e:	3708      	adds	r7, #8
 8032710:	46bd      	mov	sp, r7
 8032712:	bd80      	pop	{r7, pc}
 8032714:	0803b424 	.word	0x0803b424
 8032718:	0803b428 	.word	0x0803b428
 803271c:	080419b0 	.word	0x080419b0
 8032720:	0803b42c 	.word	0x0803b42c
 8032724:	20002330 	.word	0x20002330

08032728 <GetRFMMode>:

//========================================================================
int		GetRFMMode	( void )
//========================================================================
{
 8032728:	b480      	push	{r7}
 803272a:	af00      	add	r7, sp, #0
	return g_nRFMMode;
 803272c:	4b03      	ldr	r3, [pc, #12]	; (803273c <GetRFMMode+0x14>)
 803272e:	681b      	ldr	r3, [r3, #0]
}
 8032730:	4618      	mov	r0, r3
 8032732:	46bd      	mov	sp, r7
 8032734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032738:	4770      	bx	lr
 803273a:	bf00      	nop
 803273c:	20002340 	.word	0x20002340

08032740 <SetRFMMode>:

//========================================================================
void	SetRFMMode	( int nRFMMode )
//========================================================================
{
 8032740:	b580      	push	{r7, lr}
 8032742:	b082      	sub	sp, #8
 8032744:	af00      	add	r7, sp, #0
 8032746:	6078      	str	r0, [r7, #4]
	if ( g_nRFMMode != nRFMMode && nRFMMode == RFMModeNormal )
 8032748:	4b0e      	ldr	r3, [pc, #56]	; (8032784 <SetRFMMode+0x44>)
 803274a:	681b      	ldr	r3, [r3, #0]
 803274c:	687a      	ldr	r2, [r7, #4]
 803274e:	429a      	cmp	r2, r3
 8032750:	d004      	beq.n	803275c <SetRFMMode+0x1c>
 8032752:	687b      	ldr	r3, [r7, #4]
 8032754:	2b00      	cmp	r3, #0
 8032756:	d101      	bne.n	803275c <SetRFMMode+0x1c>
	{
		//	타 모드에서 Normal 모드로 변경시 상태정보 ID Flag값 유지.
		ReloadStampStat();
 8032758:	f001 fdfc 	bl	8034354 <ReloadStampStat>
	}

	if ( g_nRFMMode != nRFMMode )
 803275c:	4b09      	ldr	r3, [pc, #36]	; (8032784 <SetRFMMode+0x44>)
 803275e:	681b      	ldr	r3, [r3, #0]
 8032760:	687a      	ldr	r2, [r7, #4]
 8032762:	429a      	cmp	r2, r3
 8032764:	d007      	beq.n	8032776 <SetRFMMode+0x36>
	{
		//	타 모드에서 Normal 모드로 변경시 상태정보 ID Flag값 유지.
		printf( "%s", StrRFMMode( nRFMMode ) );
 8032766:	6878      	ldr	r0, [r7, #4]
 8032768:	f000 f810 	bl	803278c <StrRFMMode>
 803276c:	4603      	mov	r3, r0
 803276e:	4619      	mov	r1, r3
 8032770:	4805      	ldr	r0, [pc, #20]	; (8032788 <SetRFMMode+0x48>)
 8032772:	f004 fd8f 	bl	8037294 <iprintf>
	}

	g_nRFMMode = nRFMMode;
 8032776:	4a03      	ldr	r2, [pc, #12]	; (8032784 <SetRFMMode+0x44>)
 8032778:	687b      	ldr	r3, [r7, #4]
 803277a:	6013      	str	r3, [r2, #0]
}
 803277c:	bf00      	nop
 803277e:	3708      	adds	r7, #8
 8032780:	46bd      	mov	sp, r7
 8032782:	bd80      	pop	{r7, pc}
 8032784:	20002340 	.word	0x20002340
 8032788:	0803b43c 	.word	0x0803b43c

0803278c <StrRFMMode>:

//========================================================================
char	*StrRFMMode		( int nRFMMode )
//========================================================================
{
 803278c:	b480      	push	{r7}
 803278e:	b083      	sub	sp, #12
 8032790:	af00      	add	r7, sp, #0
 8032792:	6078      	str	r0, [r7, #4]
	switch( nRFMMode )
 8032794:	687b      	ldr	r3, [r7, #4]
 8032796:	2b04      	cmp	r3, #4
 8032798:	d816      	bhi.n	80327c8 <StrRFMMode+0x3c>
 803279a:	a201      	add	r2, pc, #4	; (adr r2, 80327a0 <StrRFMMode+0x14>)
 803279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80327a0:	080327b5 	.word	0x080327b5
 80327a4:	080327b9 	.word	0x080327b9
 80327a8:	080327bd 	.word	0x080327bd
 80327ac:	080327c1 	.word	0x080327c1
 80327b0:	080327c5 	.word	0x080327c5
	{
	case RFMModeNormal:		return "[Normal]";
 80327b4:	4b08      	ldr	r3, [pc, #32]	; (80327d8 <StrRFMMode+0x4c>)
 80327b6:	e008      	b.n	80327ca <StrRFMMode+0x3e>
	case RFMModeTx:			return "[Tx]";
 80327b8:	4b08      	ldr	r3, [pc, #32]	; (80327dc <StrRFMMode+0x50>)
 80327ba:	e006      	b.n	80327ca <StrRFMMode+0x3e>
	case RFMModeRx:			return "[Rx]";
 80327bc:	4b08      	ldr	r3, [pc, #32]	; (80327e0 <StrRFMMode+0x54>)
 80327be:	e004      	b.n	80327ca <StrRFMMode+0x3e>
	case RFMModeOcc:		return "[Occ]";
 80327c0:	4b08      	ldr	r3, [pc, #32]	; (80327e4 <StrRFMMode+0x58>)
 80327c2:	e002      	b.n	80327ca <StrRFMMode+0x3e>
	case RFMModeUpgr:		return "[Upgr]";
 80327c4:	4b08      	ldr	r3, [pc, #32]	; (80327e8 <StrRFMMode+0x5c>)
 80327c6:	e000      	b.n	80327ca <StrRFMMode+0x3e>
	default:				return "[N/A]";
 80327c8:	4b08      	ldr	r3, [pc, #32]	; (80327ec <StrRFMMode+0x60>)
	}
}
 80327ca:	4618      	mov	r0, r3
 80327cc:	370c      	adds	r7, #12
 80327ce:	46bd      	mov	sp, r7
 80327d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80327d4:	4770      	bx	lr
 80327d6:	bf00      	nop
 80327d8:	0803b440 	.word	0x0803b440
 80327dc:	0803b44c 	.word	0x0803b44c
 80327e0:	0803b454 	.word	0x0803b454
 80327e4:	0803b45c 	.word	0x0803b45c
 80327e8:	0803b464 	.word	0x0803b464
 80327ec:	0803b46c 	.word	0x0803b46c

080327f0 <GetRFTID>:

//========================================================================
int	GetRFTID( void )	//	송신기 ID
//========================================================================
{
 80327f0:	b480      	push	{r7}
 80327f2:	af00      	add	r7, sp, #0
	//	송신기 ID 얻기.
	//========================================================================
	//	송신기 #1 / #2
	//	ChTx_1			=	8,			//	* CH8 : 송신기#1 - (Car No : 11)
	//	ChTx_2			=	9,			//	* CH9 : 송신기#2 - (Car No : 12)
	if ( g_nCarNo == RFTCarNo1 ) return 1;			//	11
 80327f4:	4b08      	ldr	r3, [pc, #32]	; (8032818 <GetRFTID+0x28>)
 80327f6:	681b      	ldr	r3, [r3, #0]
 80327f8:	2b0b      	cmp	r3, #11
 80327fa:	d101      	bne.n	8032800 <GetRFTID+0x10>
 80327fc:	2301      	movs	r3, #1
 80327fe:	e006      	b.n	803280e <GetRFTID+0x1e>
	else if ( g_nCarNo == RFTCarNo2 ) return 2;		//	12
 8032800:	4b05      	ldr	r3, [pc, #20]	; (8032818 <GetRFTID+0x28>)
 8032802:	681b      	ldr	r3, [r3, #0]
 8032804:	2b0c      	cmp	r3, #12
 8032806:	d101      	bne.n	803280c <GetRFTID+0x1c>
 8032808:	2302      	movs	r3, #2
 803280a:	e000      	b.n	803280e <GetRFTID+0x1e>
	else return 0;
 803280c:	2300      	movs	r3, #0
	//========================================================================
}
 803280e:	4618      	mov	r0, r3
 8032810:	46bd      	mov	sp, r7
 8032812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032816:	4770      	bx	lr
 8032818:	2000233c 	.word	0x2000233c

0803281c <GetChRx>:

//========================================================================
int GetChRx( void )
//========================================================================
{
 803281c:	b580      	push	{r7, lr}
 803281e:	af00      	add	r7, sp, #0
	//	Get Self Rx Channel

	//========================================================================
#if defined(USE_CH_ISO_DEV)

	if ( GetDevID() == DevRF900T )
 8032820:	f7ff ff56 	bl	80326d0 <GetDevID>
 8032824:	4603      	mov	r3, r0
 8032826:	2b02      	cmp	r3, #2
 8032828:	d10c      	bne.n	8032844 <GetChRx+0x28>
	{
		//========================================================================
		//	송신기 #1 / #2
		//	ChTx_1			=	8,				//	* CH8 : 송신기#1 - (Car No : 11)
		//	ChTx_2			=	ChTx_1+ChGap,	//	* CH9 : 송신기#2 - (Car No : 12)
		return ChTx_1 + ( ( g_nCarNo + 1) % 2 )*ChGap;	// 현재 호차 채널
 803282a:	4b15      	ldr	r3, [pc, #84]	; (8032880 <GetChRx+0x64>)
 803282c:	681b      	ldr	r3, [r3, #0]
 803282e:	3301      	adds	r3, #1
 8032830:	2b00      	cmp	r3, #0
 8032832:	f003 0301 	and.w	r3, r3, #1
 8032836:	bfb8      	it	lt
 8032838:	425b      	neglt	r3, r3
 803283a:	009a      	lsls	r2, r3, #2
 803283c:	4b11      	ldr	r3, [pc, #68]	; (8032884 <GetChRx+0x68>)
 803283e:	681b      	ldr	r3, [r3, #0]
 8032840:	4413      	add	r3, r2
 8032842:	e01b      	b.n	803287c <GetChRx+0x60>
		//========================================================================
	}
	else if ( GetDevID() == DevRF900M )
 8032844:	f7ff ff44 	bl	80326d0 <GetDevID>
 8032848:	4603      	mov	r3, r0
 803284a:	2b01      	cmp	r3, #1
 803284c:	d116      	bne.n	803287c <GetChRx+0x60>
	{
		if( g_nRFMode == RFMode2 )//#if defined(USE_COMM_MODE_CH_GRP)
 803284e:	4b0e      	ldr	r3, [pc, #56]	; (8032888 <GetChRx+0x6c>)
 8032850:	681b      	ldr	r3, [r3, #0]
 8032852:	2b02      	cmp	r3, #2
 8032854:	d10a      	bne.n	803286c <GetChRx+0x50>
		{
			//	그룹주파수 모드. - [ 1, 2 ] [ 3, 4 ] ...
			return ChTS1_1 + (( g_nCarNo - 1 )/2)*ChGap;	// 현재 호차 채널
 8032856:	4b0a      	ldr	r3, [pc, #40]	; (8032880 <GetChRx+0x64>)
 8032858:	681b      	ldr	r3, [r3, #0]
 803285a:	3b01      	subs	r3, #1
 803285c:	0fda      	lsrs	r2, r3, #31
 803285e:	4413      	add	r3, r2
 8032860:	105b      	asrs	r3, r3, #1
 8032862:	009a      	lsls	r2, r3, #2
 8032864:	4b09      	ldr	r3, [pc, #36]	; (803288c <GetChRx+0x70>)
 8032866:	681b      	ldr	r3, [r3, #0]
 8032868:	4413      	add	r3, r2
 803286a:	e007      	b.n	803287c <GetChRx+0x60>
			//	ChTS1_2			=	12,			//	* CH12 : 1편성 ( 2호차 )
			//
			//		...
			//
			//	ChTS1_10		=	20,			//	* CH20 : 1편성 ( 10호차 )
			return ChTS1_1 + ( g_nCarNo - 1 )*ChGap;	// 현재 호차 채널
 803286c:	4b04      	ldr	r3, [pc, #16]	; (8032880 <GetChRx+0x64>)
 803286e:	681b      	ldr	r3, [r3, #0]
 8032870:	3b01      	subs	r3, #1
 8032872:	009a      	lsls	r2, r3, #2
 8032874:	4b05      	ldr	r3, [pc, #20]	; (803288c <GetChRx+0x70>)
 8032876:	681b      	ldr	r3, [r3, #0]
 8032878:	4413      	add	r3, r2
 803287a:	e7ff      	b.n	803287c <GetChRx+0x60>
	//	CH1 : 1, 3, 5
	//	CH2 :  2, 4, 6
	return ChTS1_1 + g_idxTrainSet * 2 + ( ( g_nCarNo + 1 ) % 2 );	// 현재 호차 채널
#endif
	//========================================================================
}
 803287c:	4618      	mov	r0, r3
 803287e:	bd80      	pop	{r7, pc}
 8032880:	2000233c 	.word	0x2000233c
 8032884:	200004f4 	.word	0x200004f4
 8032888:	20002350 	.word	0x20002350
 803288c:	200004fc 	.word	0x200004fc

08032890 <GetChNearRFT>:


//========================================================================
int		GetChNearRFT	( int nMinRSSI )			//	가장 가까운 송신기 채널.
//========================================================================
{
 8032890:	b480      	push	{r7}
 8032892:	b087      	sub	sp, #28
 8032894:	af00      	add	r7, sp, #0
 8032896:	6078      	str	r0, [r7, #4]
	int nCh = 0;		//	Default
 8032898:	2300      	movs	r3, #0
 803289a:	617b      	str	r3, [r7, #20]

	//	가장가까운 송신기 검색.
	int nMaxRSSI = 0;
 803289c:	2300      	movs	r3, #0
 803289e:	613b      	str	r3, [r7, #16]
	for ( int idx = 11; idx <= 12; idx++ )			//	송신기 채널 검색.
 80328a0:	230b      	movs	r3, #11
 80328a2:	60fb      	str	r3, [r7, #12]
 80328a4:	e027      	b.n	80328f6 <GetChNearRFT+0x66>
	{
		//	Car #1 ~ #10
		if ( g_devStat[idx].nRSSI > nMaxRSSI )
 80328a6:	491c      	ldr	r1, [pc, #112]	; (8032918 <GetChNearRFT+0x88>)
 80328a8:	68fa      	ldr	r2, [r7, #12]
 80328aa:	4613      	mov	r3, r2
 80328ac:	00db      	lsls	r3, r3, #3
 80328ae:	4413      	add	r3, r2
 80328b0:	009b      	lsls	r3, r3, #2
 80328b2:	4413      	add	r3, r2
 80328b4:	440b      	add	r3, r1
 80328b6:	3318      	adds	r3, #24
 80328b8:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80328bc:	693a      	ldr	r2, [r7, #16]
 80328be:	429a      	cmp	r2, r3
 80328c0:	da16      	bge.n	80328f0 <GetChNearRFT+0x60>
		{
			nCh = g_devStat[idx].stat.nChRx;		//	채널 설정.
 80328c2:	4915      	ldr	r1, [pc, #84]	; (8032918 <GetChNearRFT+0x88>)
 80328c4:	68fa      	ldr	r2, [r7, #12]
 80328c6:	4613      	mov	r3, r2
 80328c8:	00db      	lsls	r3, r3, #3
 80328ca:	4413      	add	r3, r2
 80328cc:	009b      	lsls	r3, r3, #2
 80328ce:	4413      	add	r3, r2
 80328d0:	440b      	add	r3, r1
 80328d2:	330a      	adds	r3, #10
 80328d4:	781b      	ldrb	r3, [r3, #0]
 80328d6:	617b      	str	r3, [r7, #20]
			nMaxRSSI = g_devStat[idx].nRSSI;
 80328d8:	490f      	ldr	r1, [pc, #60]	; (8032918 <GetChNearRFT+0x88>)
 80328da:	68fa      	ldr	r2, [r7, #12]
 80328dc:	4613      	mov	r3, r2
 80328de:	00db      	lsls	r3, r3, #3
 80328e0:	4413      	add	r3, r2
 80328e2:	009b      	lsls	r3, r3, #2
 80328e4:	4413      	add	r3, r2
 80328e6:	440b      	add	r3, r1
 80328e8:	3318      	adds	r3, #24
 80328ea:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80328ee:	613b      	str	r3, [r7, #16]
	for ( int idx = 11; idx <= 12; idx++ )			//	송신기 채널 검색.
 80328f0:	68fb      	ldr	r3, [r7, #12]
 80328f2:	3301      	adds	r3, #1
 80328f4:	60fb      	str	r3, [r7, #12]
 80328f6:	68fb      	ldr	r3, [r7, #12]
 80328f8:	2b0c      	cmp	r3, #12
 80328fa:	ddd4      	ble.n	80328a6 <GetChNearRFT+0x16>
		}
	}

	if ( nMinRSSI > nMaxRSSI )
 80328fc:	687a      	ldr	r2, [r7, #4]
 80328fe:	693b      	ldr	r3, [r7, #16]
 8032900:	429a      	cmp	r2, r3
 8032902:	dd01      	ble.n	8032908 <GetChNearRFT+0x78>
	{
		//	RSSI값이 한계 이상 낮은경우 선택 X
		nCh = 0;
 8032904:	2300      	movs	r3, #0
 8032906:	617b      	str	r3, [r7, #20]
	}

	return nCh;
 8032908:	697b      	ldr	r3, [r7, #20]
}
 803290a:	4618      	mov	r0, r3
 803290c:	371c      	adds	r7, #28
 803290e:	46bd      	mov	sp, r7
 8032910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032914:	4770      	bx	lr
 8032916:	bf00      	nop
 8032918:	20002358 	.word	0x20002358

0803291c <GetChNearRFM>:

//========================================================================
int		GetChNearRFM	( void )			//	가장 가까운 수신기 채널.
//========================================================================
{
 803291c:	b480      	push	{r7}
 803291e:	b085      	sub	sp, #20
 8032920:	af00      	add	r7, sp, #0
	int nCh = ChTS1_1;		//	Default
 8032922:	4b1d      	ldr	r3, [pc, #116]	; (8032998 <GetChNearRFM+0x7c>)
 8032924:	681b      	ldr	r3, [r3, #0]
 8032926:	60fb      	str	r3, [r7, #12]

	//	가장가까운 호차 검색.
	int nMaxRSSI = 0;
 8032928:	2300      	movs	r3, #0
 803292a:	60bb      	str	r3, [r7, #8]
	for ( int idx = 1; idx <= 10; idx++ )
 803292c:	2301      	movs	r3, #1
 803292e:	607b      	str	r3, [r7, #4]
 8032930:	e027      	b.n	8032982 <GetChNearRFM+0x66>
	{
		//	Car #1 ~ #10
		if ( g_devStat[idx].nRSSI > nMaxRSSI )
 8032932:	491a      	ldr	r1, [pc, #104]	; (803299c <GetChNearRFM+0x80>)
 8032934:	687a      	ldr	r2, [r7, #4]
 8032936:	4613      	mov	r3, r2
 8032938:	00db      	lsls	r3, r3, #3
 803293a:	4413      	add	r3, r2
 803293c:	009b      	lsls	r3, r3, #2
 803293e:	4413      	add	r3, r2
 8032940:	440b      	add	r3, r1
 8032942:	3318      	adds	r3, #24
 8032944:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8032948:	68ba      	ldr	r2, [r7, #8]
 803294a:	429a      	cmp	r2, r3
 803294c:	da16      	bge.n	803297c <GetChNearRFM+0x60>
		{
			nCh = g_devStat[idx].stat.nChRx;		//	채널 설정.
 803294e:	4913      	ldr	r1, [pc, #76]	; (803299c <GetChNearRFM+0x80>)
 8032950:	687a      	ldr	r2, [r7, #4]
 8032952:	4613      	mov	r3, r2
 8032954:	00db      	lsls	r3, r3, #3
 8032956:	4413      	add	r3, r2
 8032958:	009b      	lsls	r3, r3, #2
 803295a:	4413      	add	r3, r2
 803295c:	440b      	add	r3, r1
 803295e:	330a      	adds	r3, #10
 8032960:	781b      	ldrb	r3, [r3, #0]
 8032962:	60fb      	str	r3, [r7, #12]
			nMaxRSSI = g_devStat[idx].nRSSI;
 8032964:	490d      	ldr	r1, [pc, #52]	; (803299c <GetChNearRFM+0x80>)
 8032966:	687a      	ldr	r2, [r7, #4]
 8032968:	4613      	mov	r3, r2
 803296a:	00db      	lsls	r3, r3, #3
 803296c:	4413      	add	r3, r2
 803296e:	009b      	lsls	r3, r3, #2
 8032970:	4413      	add	r3, r2
 8032972:	440b      	add	r3, r1
 8032974:	3318      	adds	r3, #24
 8032976:	f8d3 3005 	ldr.w	r3, [r3, #5]
 803297a:	60bb      	str	r3, [r7, #8]
	for ( int idx = 1; idx <= 10; idx++ )
 803297c:	687b      	ldr	r3, [r7, #4]
 803297e:	3301      	adds	r3, #1
 8032980:	607b      	str	r3, [r7, #4]
 8032982:	687b      	ldr	r3, [r7, #4]
 8032984:	2b0a      	cmp	r3, #10
 8032986:	ddd4      	ble.n	8032932 <GetChNearRFM+0x16>
		}
	}

	return nCh;
 8032988:	68fb      	ldr	r3, [r7, #12]
}
 803298a:	4618      	mov	r0, r3
 803298c:	3714      	adds	r7, #20
 803298e:	46bd      	mov	sp, r7
 8032990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032994:	4770      	bx	lr
 8032996:	bf00      	nop
 8032998:	200004fc 	.word	0x200004fc
 803299c:	20002358 	.word	0x20002358

080329a0 <SetChPA>:
int		g_nChPA	=	_ChTS1_1;		//	Default

//========================================================================
void	SetChPA( int nCh )
//========================================================================
{
 80329a0:	b480      	push	{r7}
 80329a2:	b083      	sub	sp, #12
 80329a4:	af00      	add	r7, sp, #0
 80329a6:	6078      	str	r0, [r7, #4]
	//	방송채널 설정.
	g_nChPA	= nCh;
 80329a8:	4a04      	ldr	r2, [pc, #16]	; (80329bc <SetChPA+0x1c>)
 80329aa:	687b      	ldr	r3, [r7, #4]
 80329ac:	6013      	str	r3, [r2, #0]
}
 80329ae:	bf00      	nop
 80329b0:	370c      	adds	r7, #12
 80329b2:	46bd      	mov	sp, r7
 80329b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80329b8:	4770      	bx	lr
 80329ba:	bf00      	nop
 80329bc:	20000bf0 	.word	0x20000bf0

080329c0 <GetChPA>:

//========================================================================
int		GetChPA( void )
//========================================================================
{
 80329c0:	b480      	push	{r7}
 80329c2:	af00      	add	r7, sp, #0
	//	방송채널 설정.
	return g_nChPA;
 80329c4:	4b03      	ldr	r3, [pc, #12]	; (80329d4 <GetChPA+0x14>)
 80329c6:	681b      	ldr	r3, [r3, #0]
}
 80329c8:	4618      	mov	r0, r3
 80329ca:	46bd      	mov	sp, r7
 80329cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80329d0:	4770      	bx	lr
 80329d2:	bf00      	nop
 80329d4:	20000bf0 	.word	0x20000bf0

080329d8 <GetCh2Car>:

//========================================================================
int		GetCh2Car( int nCh )	//	채널 -> 호차정보 변환.
//========================================================================
{
 80329d8:	b480      	push	{r7}
 80329da:	b085      	sub	sp, #20
 80329dc:	af00      	add	r7, sp, #0
 80329de:	6078      	str	r0, [r7, #4]
	//	채널 -> 호차정보.
	int nCar;
	if ( nCh == ChTx_1 )		nCar = RFTCarNo1;	//	송신기#1
 80329e0:	4b10      	ldr	r3, [pc, #64]	; (8032a24 <GetCh2Car+0x4c>)
 80329e2:	681b      	ldr	r3, [r3, #0]
 80329e4:	687a      	ldr	r2, [r7, #4]
 80329e6:	429a      	cmp	r2, r3
 80329e8:	d102      	bne.n	80329f0 <GetCh2Car+0x18>
 80329ea:	230b      	movs	r3, #11
 80329ec:	60fb      	str	r3, [r7, #12]
 80329ee:	e011      	b.n	8032a14 <GetCh2Car+0x3c>
	else if ( nCh == ChTx_2 )	nCar = RFTCarNo2;	//	송신기#2
 80329f0:	4b0d      	ldr	r3, [pc, #52]	; (8032a28 <GetCh2Car+0x50>)
 80329f2:	681b      	ldr	r3, [r3, #0]
 80329f4:	687a      	ldr	r2, [r7, #4]
 80329f6:	429a      	cmp	r2, r3
 80329f8:	d102      	bne.n	8032a00 <GetCh2Car+0x28>
 80329fa:	230c      	movs	r3, #12
 80329fc:	60fb      	str	r3, [r7, #12]
 80329fe:	e009      	b.n	8032a14 <GetCh2Car+0x3c>
	else
	{
		//	ChTS1_1 - 21	:	1호차.
		//	1 ~ 10호차.
		nCar = ( nCh - ChTS1_1 ) / ChGap + 1;
 8032a00:	4b0a      	ldr	r3, [pc, #40]	; (8032a2c <GetCh2Car+0x54>)
 8032a02:	681b      	ldr	r3, [r3, #0]
 8032a04:	687a      	ldr	r2, [r7, #4]
 8032a06:	1ad3      	subs	r3, r2, r3
 8032a08:	2b00      	cmp	r3, #0
 8032a0a:	da00      	bge.n	8032a0e <GetCh2Car+0x36>
 8032a0c:	3303      	adds	r3, #3
 8032a0e:	109b      	asrs	r3, r3, #2
 8032a10:	3301      	adds	r3, #1
 8032a12:	60fb      	str	r3, [r7, #12]
	}

	return nCar;
 8032a14:	68fb      	ldr	r3, [r7, #12]
}
 8032a16:	4618      	mov	r0, r3
 8032a18:	3714      	adds	r7, #20
 8032a1a:	46bd      	mov	sp, r7
 8032a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a20:	4770      	bx	lr
 8032a22:	bf00      	nop
 8032a24:	200004f4 	.word	0x200004f4
 8032a28:	200004f8 	.word	0x200004f8
 8032a2c:	200004fc 	.word	0x200004fc

08032a30 <SetChPARFT>:
int		g_nChRFT	=	0;		//	Default

//========================================================================
void	SetChPARFT( int nCh )	//	가까운 송신기 채널(방송/통화용) 설정.
//========================================================================
{
 8032a30:	b480      	push	{r7}
 8032a32:	b083      	sub	sp, #12
 8032a34:	af00      	add	r7, sp, #0
 8032a36:	6078      	str	r0, [r7, #4]
	//	방송채널 설정.
	g_nChRFT	= nCh;
 8032a38:	4a04      	ldr	r2, [pc, #16]	; (8032a4c <SetChPARFT+0x1c>)
 8032a3a:	687b      	ldr	r3, [r7, #4]
 8032a3c:	6013      	str	r3, [r2, #0]
}
 8032a3e:	bf00      	nop
 8032a40:	370c      	adds	r7, #12
 8032a42:	46bd      	mov	sp, r7
 8032a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a48:	4770      	bx	lr
 8032a4a:	bf00      	nop
 8032a4c:	2000253c 	.word	0x2000253c

08032a50 <GetChPARFT>:

//========================================================================
int		GetChPARFT( void )		//	가까운 송신기 채널(방송/통화용) 설정.
//========================================================================
{
 8032a50:	b480      	push	{r7}
 8032a52:	af00      	add	r7, sp, #0
	//	방송채널 설정.
	return g_nChRFT;
 8032a54:	4b03      	ldr	r3, [pc, #12]	; (8032a64 <GetChPARFT+0x14>)
 8032a56:	681b      	ldr	r3, [r3, #0]
}
 8032a58:	4618      	mov	r0, r3
 8032a5a:	46bd      	mov	sp, r7
 8032a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a60:	4770      	bx	lr
 8032a62:	bf00      	nop
 8032a64:	2000253c 	.word	0x2000253c

08032a68 <SetChRFMUp>:
int		g_nIdxRouteFindNext		=	0;	//	Next호차 Find Index / Route Rsp 수신시 Reset

//========================================================================
void	SetChRFMUp( int nCh )	//	가까운 수신기 채널 ( Up )
//========================================================================
{
 8032a68:	b480      	push	{r7}
 8032a6a:	b083      	sub	sp, #12
 8032a6c:	af00      	add	r7, sp, #0
 8032a6e:	6078      	str	r0, [r7, #4]
	//	방송채널 설정.
	g_nChRFMUp	= nCh;
 8032a70:	4a04      	ldr	r2, [pc, #16]	; (8032a84 <SetChRFMUp+0x1c>)
 8032a72:	687b      	ldr	r3, [r7, #4]
 8032a74:	6013      	str	r3, [r2, #0]
}
 8032a76:	bf00      	nop
 8032a78:	370c      	adds	r7, #12
 8032a7a:	46bd      	mov	sp, r7
 8032a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a80:	4770      	bx	lr
 8032a82:	bf00      	nop
 8032a84:	20002540 	.word	0x20002540

08032a88 <GetChRFMUp>:

//========================================================================
int		GetChRFMUp( void )		//	가까운 수신기 채널 ( Up )
//========================================================================
{
 8032a88:	b480      	push	{r7}
 8032a8a:	af00      	add	r7, sp, #0
	//	방송채널 설정.
	return g_nChRFMUp;
 8032a8c:	4b03      	ldr	r3, [pc, #12]	; (8032a9c <GetChRFMUp+0x14>)
 8032a8e:	681b      	ldr	r3, [r3, #0]
}
 8032a90:	4618      	mov	r0, r3
 8032a92:	46bd      	mov	sp, r7
 8032a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a98:	4770      	bx	lr
 8032a9a:	bf00      	nop
 8032a9c:	20002540 	.word	0x20002540

08032aa0 <SetChRFMDown>:

//========================================================================
void	SetChRFMDown( int nCh )	//	가까운 수신기 채널 ( Down )
//========================================================================
{
 8032aa0:	b480      	push	{r7}
 8032aa2:	b083      	sub	sp, #12
 8032aa4:	af00      	add	r7, sp, #0
 8032aa6:	6078      	str	r0, [r7, #4]
	//	방송채널 설정.
	g_nChRFMDown	= nCh;
 8032aa8:	4a04      	ldr	r2, [pc, #16]	; (8032abc <SetChRFMDown+0x1c>)
 8032aaa:	687b      	ldr	r3, [r7, #4]
 8032aac:	6013      	str	r3, [r2, #0]
}
 8032aae:	bf00      	nop
 8032ab0:	370c      	adds	r7, #12
 8032ab2:	46bd      	mov	sp, r7
 8032ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032ab8:	4770      	bx	lr
 8032aba:	bf00      	nop
 8032abc:	20002544 	.word	0x20002544

08032ac0 <GetChRFMDown>:

//========================================================================
int		GetChRFMDown( void )	//	가까운 수신기 채널 ( Down )
//========================================================================
{
 8032ac0:	b480      	push	{r7}
 8032ac2:	af00      	add	r7, sp, #0
	//	방송채널 설정.
	return g_nChRFMDown;
 8032ac4:	4b03      	ldr	r3, [pc, #12]	; (8032ad4 <GetChRFMDown+0x14>)
 8032ac6:	681b      	ldr	r3, [r3, #0]
}
 8032ac8:	4618      	mov	r0, r3
 8032aca:	46bd      	mov	sp, r7
 8032acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032ad0:	4770      	bx	lr
 8032ad2:	bf00      	nop
 8032ad4:	20002544 	.word	0x20002544

08032ad8 <LoadTrainSetIdx>:
#include "eeprom.h"    //  EEPROM

//========================================================================
int		LoadTrainSetIdx	( void )
//========================================================================
{
 8032ad8:	b580      	push	{r7, lr}
 8032ada:	b084      	sub	sp, #16
 8032adc:	af02      	add	r7, sp, #8
    uint8_t     idxTrainSet = 0;
 8032ade:	2300      	movs	r3, #0
 8032ae0:	71fb      	strb	r3, [r7, #7]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032ae2:	2302      	movs	r3, #2
 8032ae4:	2202      	movs	r2, #2
 8032ae6:	21a0      	movs	r1, #160	; 0xa0
 8032ae8:	481e      	ldr	r0, [pc, #120]	; (8032b64 <LoadTrainSetIdx+0x8c>)
 8032aea:	f7f1 fac5 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032aee:	4603      	mov	r3, r0
 8032af0:	2b00      	cmp	r3, #0
 8032af2:	d008      	beq.n	8032b06 <LoadTrainSetIdx+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032af4:	f240 1293 	movw	r2, #403	; 0x193
 8032af8:	491b      	ldr	r1, [pc, #108]	; (8032b68 <LoadTrainSetIdx+0x90>)
 8032afa:	481c      	ldr	r0, [pc, #112]	; (8032b6c <LoadTrainSetIdx+0x94>)
 8032afc:	f004 fbca 	bl	8037294 <iprintf>

        return -1;
 8032b00:	f04f 33ff 	mov.w	r3, #4294967295
 8032b04:	e029      	b.n	8032b5a <LoadTrainSetIdx+0x82>
    }

//    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x10, (uint8_t *)&idxTrainSet, 1 );
    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPTrainSet, (uint8_t *)&idxTrainSet, 1 );
 8032b06:	1dfb      	adds	r3, r7, #7
 8032b08:	2201      	movs	r2, #1
 8032b0a:	9200      	str	r2, [sp, #0]
 8032b0c:	2210      	movs	r2, #16
 8032b0e:	21a0      	movs	r1, #160	; 0xa0
 8032b10:	4814      	ldr	r0, [pc, #80]	; (8032b64 <LoadTrainSetIdx+0x8c>)
 8032b12:	f7fe faf7 	bl	8031104 <M24_HAL_ReadBytes>

    if ( GetDbg() > 0 )
 8032b16:	f7fe fa03 	bl	8030f20 <GetDbg>
 8032b1a:	4603      	mov	r3, r0
 8032b1c:	2b00      	cmp	r3, #0
 8032b1e:	dd06      	ble.n	8032b2e <LoadTrainSetIdx+0x56>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, idxTrainSet );
 8032b20:	79fb      	ldrb	r3, [r7, #7]
 8032b22:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8032b26:	4910      	ldr	r1, [pc, #64]	; (8032b68 <LoadTrainSetIdx+0x90>)
 8032b28:	4811      	ldr	r0, [pc, #68]	; (8032b70 <LoadTrainSetIdx+0x98>)
 8032b2a:	f004 fbb3 	bl	8037294 <iprintf>

    //========================================================================
#if defined(USE_ODD_TS_CH_SHIFT)
    if( (idxTrainSet%2) == 1 )
 8032b2e:	79fb      	ldrb	r3, [r7, #7]
 8032b30:	f003 0301 	and.w	r3, r3, #1
 8032b34:	b2db      	uxtb	r3, r3
 8032b36:	2b00      	cmp	r3, #0
 8032b38:	d00e      	beq.n	8032b58 <LoadTrainSetIdx+0x80>
    {
    	//	홀수 편성 채널 ( Shift ChGap/2 )
    	ChTx_1		=	ChTx_1 + (ChGap/2);
 8032b3a:	4b0e      	ldr	r3, [pc, #56]	; (8032b74 <LoadTrainSetIdx+0x9c>)
 8032b3c:	681b      	ldr	r3, [r3, #0]
 8032b3e:	3302      	adds	r3, #2
 8032b40:	4a0c      	ldr	r2, [pc, #48]	; (8032b74 <LoadTrainSetIdx+0x9c>)
 8032b42:	6013      	str	r3, [r2, #0]
    	ChTx_2		=	ChTx_2 + (ChGap/2);
 8032b44:	4b0c      	ldr	r3, [pc, #48]	; (8032b78 <LoadTrainSetIdx+0xa0>)
 8032b46:	681b      	ldr	r3, [r3, #0]
 8032b48:	3302      	adds	r3, #2
 8032b4a:	4a0b      	ldr	r2, [pc, #44]	; (8032b78 <LoadTrainSetIdx+0xa0>)
 8032b4c:	6013      	str	r3, [r2, #0]
        ChTS1_1		= 	ChTS1_1 + (ChGap/2);
 8032b4e:	4b0b      	ldr	r3, [pc, #44]	; (8032b7c <LoadTrainSetIdx+0xa4>)
 8032b50:	681b      	ldr	r3, [r3, #0]
 8032b52:	3302      	adds	r3, #2
 8032b54:	4a09      	ldr	r2, [pc, #36]	; (8032b7c <LoadTrainSetIdx+0xa4>)
 8032b56:	6013      	str	r3, [r2, #0]
    }
#endif
    //========================================================================


    return idxTrainSet;
 8032b58:	79fb      	ldrb	r3, [r7, #7]
}
 8032b5a:	4618      	mov	r0, r3
 8032b5c:	3708      	adds	r7, #8
 8032b5e:	46bd      	mov	sp, r7
 8032b60:	bd80      	pop	{r7, pc}
 8032b62:	bf00      	nop
 8032b64:	20000e38 	.word	0x20000e38
 8032b68:	080419bc 	.word	0x080419bc
 8032b6c:	0803b474 	.word	0x0803b474
 8032b70:	0803b48c 	.word	0x0803b48c
 8032b74:	200004f4 	.word	0x200004f4
 8032b78:	200004f8 	.word	0x200004f8
 8032b7c:	200004fc 	.word	0x200004fc

08032b80 <GetTrainSetIdx>:


//========================================================================
int		GetTrainSetIdx		( void )
//========================================================================
{
 8032b80:	b580      	push	{r7, lr}
 8032b82:	af00      	add	r7, sp, #0
	static int s_bOnce 			=	0;

	if ( s_bOnce == 0 )
 8032b84:	4b07      	ldr	r3, [pc, #28]	; (8032ba4 <GetTrainSetIdx+0x24>)
 8032b86:	681b      	ldr	r3, [r3, #0]
 8032b88:	2b00      	cmp	r3, #0
 8032b8a:	d107      	bne.n	8032b9c <GetTrainSetIdx+0x1c>
	{
		//	초기로딩시 I2C에서 Load
		g_idxTrainSet = LoadTrainSetIdx();
 8032b8c:	f7ff ffa4 	bl	8032ad8 <LoadTrainSetIdx>
 8032b90:	4603      	mov	r3, r0
 8032b92:	4a05      	ldr	r2, [pc, #20]	; (8032ba8 <GetTrainSetIdx+0x28>)
 8032b94:	6013      	str	r3, [r2, #0]
		s_bOnce = 1;
 8032b96:	4b03      	ldr	r3, [pc, #12]	; (8032ba4 <GetTrainSetIdx+0x24>)
 8032b98:	2201      	movs	r2, #1
 8032b9a:	601a      	str	r2, [r3, #0]
	}

	return g_idxTrainSet;
 8032b9c:	4b02      	ldr	r3, [pc, #8]	; (8032ba8 <GetTrainSetIdx+0x28>)
 8032b9e:	681b      	ldr	r3, [r3, #0]
}
 8032ba0:	4618      	mov	r0, r3
 8032ba2:	bd80      	pop	{r7, pc}
 8032ba4:	20002910 	.word	0x20002910
 8032ba8:	20002338 	.word	0x20002338

08032bac <SetTrainSetIdx>:


//========================================================================
void	SetTrainSetIdx	( int idxTrainSet )
//========================================================================
{
 8032bac:	b580      	push	{r7, lr}
 8032bae:	b084      	sub	sp, #16
 8032bb0:	af02      	add	r7, sp, #8
 8032bb2:	6078      	str	r0, [r7, #4]
	g_idxTrainSet = idxTrainSet;
 8032bb4:	687b      	ldr	r3, [r7, #4]
 8032bb6:	4a14      	ldr	r2, [pc, #80]	; (8032c08 <SetTrainSetIdx+0x5c>)
 8032bb8:	6013      	str	r3, [r2, #0]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032bba:	2302      	movs	r3, #2
 8032bbc:	2202      	movs	r2, #2
 8032bbe:	21a0      	movs	r1, #160	; 0xa0
 8032bc0:	4812      	ldr	r0, [pc, #72]	; (8032c0c <SetTrainSetIdx+0x60>)
 8032bc2:	f7f1 fa59 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032bc6:	4603      	mov	r3, r0
 8032bc8:	2b00      	cmp	r3, #0
 8032bca:	d006      	beq.n	8032bda <SetTrainSetIdx+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032bcc:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8032bd0:	490f      	ldr	r1, [pc, #60]	; (8032c10 <SetTrainSetIdx+0x64>)
 8032bd2:	4810      	ldr	r0, [pc, #64]	; (8032c14 <SetTrainSetIdx+0x68>)
 8032bd4:	f004 fb5e 	bl	8037294 <iprintf>

        return ;
 8032bd8:	e013      	b.n	8032c02 <SetTrainSetIdx+0x56>
    }

    if ( GetDbg() > 0 )
 8032bda:	f7fe f9a1 	bl	8030f20 <GetDbg>
 8032bde:	4603      	mov	r3, r0
 8032be0:	2b00      	cmp	r3, #0
 8032be2:	dd06      	ble.n	8032bf2 <SetTrainSetIdx+0x46>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, idxTrainSet );
 8032be4:	687b      	ldr	r3, [r7, #4]
 8032be6:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8032bea:	4909      	ldr	r1, [pc, #36]	; (8032c10 <SetTrainSetIdx+0x64>)
 8032bec:	480a      	ldr	r0, [pc, #40]	; (8032c18 <SetTrainSetIdx+0x6c>)
 8032bee:	f004 fb51 	bl	8037294 <iprintf>
//    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x10, (uint8_t *)&idxTrainSet, 1 );
    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPTrainSet, (uint8_t *)&idxTrainSet, 1 );
 8032bf2:	1d3b      	adds	r3, r7, #4
 8032bf4:	2201      	movs	r2, #1
 8032bf6:	9200      	str	r2, [sp, #0]
 8032bf8:	2210      	movs	r2, #16
 8032bfa:	21a0      	movs	r1, #160	; 0xa0
 8032bfc:	4803      	ldr	r0, [pc, #12]	; (8032c0c <SetTrainSetIdx+0x60>)
 8032bfe:	f7fe fa5f 	bl	80310c0 <M24_HAL_WriteBytes>
}
 8032c02:	3708      	adds	r7, #8
 8032c04:	46bd      	mov	sp, r7
 8032c06:	bd80      	pop	{r7, pc}
 8032c08:	20002338 	.word	0x20002338
 8032c0c:	20000e38 	.word	0x20000e38
 8032c10:	080419cc 	.word	0x080419cc
 8032c14:	0803b474 	.word	0x0803b474
 8032c18:	0803b48c 	.word	0x0803b48c

08032c1c <GetRFMode>:
#if defined(USE_RF_COMM_MODE)

//========================================================================
int		GetRFMode	( void )
//========================================================================
{
 8032c1c:	b580      	push	{r7, lr}
 8032c1e:	b084      	sub	sp, #16
 8032c20:	af02      	add	r7, sp, #8
    uint8_t     nRFMode = 0;
 8032c22:	2300      	movs	r3, #0
 8032c24:	71fb      	strb	r3, [r7, #7]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032c26:	2302      	movs	r3, #2
 8032c28:	2202      	movs	r2, #2
 8032c2a:	21a0      	movs	r1, #160	; 0xa0
 8032c2c:	4817      	ldr	r0, [pc, #92]	; (8032c8c <GetRFMode+0x70>)
 8032c2e:	f7f1 fa23 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032c32:	4603      	mov	r3, r0
 8032c34:	2b00      	cmp	r3, #0
 8032c36:	d008      	beq.n	8032c4a <GetRFMode+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032c38:	f240 12dd 	movw	r2, #477	; 0x1dd
 8032c3c:	4914      	ldr	r1, [pc, #80]	; (8032c90 <GetRFMode+0x74>)
 8032c3e:	4815      	ldr	r0, [pc, #84]	; (8032c94 <GetRFMode+0x78>)
 8032c40:	f004 fb28 	bl	8037294 <iprintf>

        return -1;
 8032c44:	f04f 33ff 	mov.w	r3, #4294967295
 8032c48:	e01c      	b.n	8032c84 <GetRFMode+0x68>
    }

    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPRFMode, (uint8_t *)&nRFMode, 1 );
 8032c4a:	1dfb      	adds	r3, r7, #7
 8032c4c:	2201      	movs	r2, #1
 8032c4e:	9200      	str	r2, [sp, #0]
 8032c50:	2230      	movs	r2, #48	; 0x30
 8032c52:	21a0      	movs	r1, #160	; 0xa0
 8032c54:	480d      	ldr	r0, [pc, #52]	; (8032c8c <GetRFMode+0x70>)
 8032c56:	f7fe fa55 	bl	8031104 <M24_HAL_ReadBytes>

    if ( nRFMode > RFModeMax || nRFMode < 1 ) nRFMode = RFModeDefault;	//	Default Hop Man
 8032c5a:	79fb      	ldrb	r3, [r7, #7]
 8032c5c:	2b02      	cmp	r3, #2
 8032c5e:	d802      	bhi.n	8032c66 <GetRFMode+0x4a>
 8032c60:	79fb      	ldrb	r3, [r7, #7]
 8032c62:	2b00      	cmp	r3, #0
 8032c64:	d101      	bne.n	8032c6a <GetRFMode+0x4e>
 8032c66:	2301      	movs	r3, #1
 8032c68:	71fb      	strb	r3, [r7, #7]

    if ( GetDbg() > 0 )
 8032c6a:	f7fe f959 	bl	8030f20 <GetDbg>
 8032c6e:	4603      	mov	r3, r0
 8032c70:	2b00      	cmp	r3, #0
 8032c72:	dd06      	ble.n	8032c82 <GetRFMode+0x66>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, nRFMode );
 8032c74:	79fb      	ldrb	r3, [r7, #7]
 8032c76:	f240 12e7 	movw	r2, #487	; 0x1e7
 8032c7a:	4905      	ldr	r1, [pc, #20]	; (8032c90 <GetRFMode+0x74>)
 8032c7c:	4806      	ldr	r0, [pc, #24]	; (8032c98 <GetRFMode+0x7c>)
 8032c7e:	f004 fb09 	bl	8037294 <iprintf>

    return nRFMode;
 8032c82:	79fb      	ldrb	r3, [r7, #7]
}
 8032c84:	4618      	mov	r0, r3
 8032c86:	3708      	adds	r7, #8
 8032c88:	46bd      	mov	sp, r7
 8032c8a:	bd80      	pop	{r7, pc}
 8032c8c:	20000e38 	.word	0x20000e38
 8032c90:	080419dc 	.word	0x080419dc
 8032c94:	0803b474 	.word	0x0803b474
 8032c98:	0803b48c 	.word	0x0803b48c

08032c9c <SetRFMode>:

//========================================================================
void	SetRFMode	( int nRFMode )
//========================================================================
{
 8032c9c:	b580      	push	{r7, lr}
 8032c9e:	b084      	sub	sp, #16
 8032ca0:	af02      	add	r7, sp, #8
 8032ca2:	6078      	str	r0, [r7, #4]
    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032ca4:	2302      	movs	r3, #2
 8032ca6:	2202      	movs	r2, #2
 8032ca8:	21a0      	movs	r1, #160	; 0xa0
 8032caa:	4812      	ldr	r0, [pc, #72]	; (8032cf4 <SetRFMode+0x58>)
 8032cac:	f7f1 f9e4 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032cb0:	4603      	mov	r3, r0
 8032cb2:	2b00      	cmp	r3, #0
 8032cb4:	d006      	beq.n	8032cc4 <SetRFMode+0x28>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032cb6:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8032cba:	490f      	ldr	r1, [pc, #60]	; (8032cf8 <SetRFMode+0x5c>)
 8032cbc:	480f      	ldr	r0, [pc, #60]	; (8032cfc <SetRFMode+0x60>)
 8032cbe:	f004 fae9 	bl	8037294 <iprintf>

        return ;
 8032cc2:	e013      	b.n	8032cec <SetRFMode+0x50>
    }

    if ( GetDbg() > 0 )
 8032cc4:	f7fe f92c 	bl	8030f20 <GetDbg>
 8032cc8:	4603      	mov	r3, r0
 8032cca:	2b00      	cmp	r3, #0
 8032ccc:	dd06      	ble.n	8032cdc <SetRFMode+0x40>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, nRFMode );
 8032cce:	687b      	ldr	r3, [r7, #4]
 8032cd0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8032cd4:	4908      	ldr	r1, [pc, #32]	; (8032cf8 <SetRFMode+0x5c>)
 8032cd6:	480a      	ldr	r0, [pc, #40]	; (8032d00 <SetRFMode+0x64>)
 8032cd8:	f004 fadc 	bl	8037294 <iprintf>

    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPRFMode, (uint8_t *)&nRFMode, 1 );
 8032cdc:	1d3b      	adds	r3, r7, #4
 8032cde:	2201      	movs	r2, #1
 8032ce0:	9200      	str	r2, [sp, #0]
 8032ce2:	2230      	movs	r2, #48	; 0x30
 8032ce4:	21a0      	movs	r1, #160	; 0xa0
 8032ce6:	4803      	ldr	r0, [pc, #12]	; (8032cf4 <SetRFMode+0x58>)
 8032ce8:	f7fe f9ea 	bl	80310c0 <M24_HAL_WriteBytes>
}
 8032cec:	3708      	adds	r7, #8
 8032cee:	46bd      	mov	sp, r7
 8032cf0:	bd80      	pop	{r7, pc}
 8032cf2:	bf00      	nop
 8032cf4:	20000e38 	.word	0x20000e38
 8032cf8:	080419e8 	.word	0x080419e8
 8032cfc:	0803b474 	.word	0x0803b474
 8032d00:	0803b48c 	.word	0x0803b48c

08032d04 <GetManHop>:
#if defined(USE_HOP_MANUAL)

//========================================================================
int		GetManHop	( void )
//========================================================================
{
 8032d04:	b580      	push	{r7, lr}
 8032d06:	b084      	sub	sp, #16
 8032d08:	af02      	add	r7, sp, #8
    uint8_t     nManHop = 0;
 8032d0a:	2300      	movs	r3, #0
 8032d0c:	71fb      	strb	r3, [r7, #7]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032d0e:	2302      	movs	r3, #2
 8032d10:	2202      	movs	r2, #2
 8032d12:	21a0      	movs	r1, #160	; 0xa0
 8032d14:	4816      	ldr	r0, [pc, #88]	; (8032d70 <GetManHop+0x6c>)
 8032d16:	f7f1 f9af 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032d1a:	4603      	mov	r3, r0
 8032d1c:	2b00      	cmp	r3, #0
 8032d1e:	d008      	beq.n	8032d32 <GetManHop+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032d20:	f240 2209 	movw	r2, #521	; 0x209
 8032d24:	4913      	ldr	r1, [pc, #76]	; (8032d74 <GetManHop+0x70>)
 8032d26:	4814      	ldr	r0, [pc, #80]	; (8032d78 <GetManHop+0x74>)
 8032d28:	f004 fab4 	bl	8037294 <iprintf>

        return -1;
 8032d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8032d30:	e019      	b.n	8032d66 <GetManHop+0x62>
    }

//    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x0D, (uint8_t *)&nManHop, 1 );
    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPManHop, (uint8_t *)&nManHop, 1 );
 8032d32:	1dfb      	adds	r3, r7, #7
 8032d34:	2201      	movs	r2, #1
 8032d36:	9200      	str	r2, [sp, #0]
 8032d38:	220d      	movs	r2, #13
 8032d3a:	21a0      	movs	r1, #160	; 0xa0
 8032d3c:	480c      	ldr	r0, [pc, #48]	; (8032d70 <GetManHop+0x6c>)
 8032d3e:	f7fe f9e1 	bl	8031104 <M24_HAL_ReadBytes>

//    if ( nManHop > 2 || nManHop < 0 ) nManHop = 0;
    if ( nManHop > 2 || nManHop < 0 ) nManHop = DEFAULT_HOP_MAN_VAL;	//	Default Hop Man
 8032d42:	79fb      	ldrb	r3, [r7, #7]
 8032d44:	2b02      	cmp	r3, #2
 8032d46:	d901      	bls.n	8032d4c <GetManHop+0x48>
 8032d48:	2302      	movs	r3, #2
 8032d4a:	71fb      	strb	r3, [r7, #7]

    if ( GetDbg() > 0 )
 8032d4c:	f7fe f8e8 	bl	8030f20 <GetDbg>
 8032d50:	4603      	mov	r3, r0
 8032d52:	2b00      	cmp	r3, #0
 8032d54:	dd06      	ble.n	8032d64 <GetManHop+0x60>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, nManHop );
 8032d56:	79fb      	ldrb	r3, [r7, #7]
 8032d58:	f240 2215 	movw	r2, #533	; 0x215
 8032d5c:	4905      	ldr	r1, [pc, #20]	; (8032d74 <GetManHop+0x70>)
 8032d5e:	4807      	ldr	r0, [pc, #28]	; (8032d7c <GetManHop+0x78>)
 8032d60:	f004 fa98 	bl	8037294 <iprintf>

    return nManHop;
 8032d64:	79fb      	ldrb	r3, [r7, #7]
}
 8032d66:	4618      	mov	r0, r3
 8032d68:	3708      	adds	r7, #8
 8032d6a:	46bd      	mov	sp, r7
 8032d6c:	bd80      	pop	{r7, pc}
 8032d6e:	bf00      	nop
 8032d70:	20000e38 	.word	0x20000e38
 8032d74:	080419f4 	.word	0x080419f4
 8032d78:	0803b474 	.word	0x0803b474
 8032d7c:	0803b48c 	.word	0x0803b48c

08032d80 <SetManHop>:

//========================================================================
void	SetManHop	( int nManHop )
//========================================================================
{
 8032d80:	b580      	push	{r7, lr}
 8032d82:	b084      	sub	sp, #16
 8032d84:	af02      	add	r7, sp, #8
 8032d86:	6078      	str	r0, [r7, #4]
    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032d88:	2302      	movs	r3, #2
 8032d8a:	2202      	movs	r2, #2
 8032d8c:	21a0      	movs	r1, #160	; 0xa0
 8032d8e:	4812      	ldr	r0, [pc, #72]	; (8032dd8 <SetManHop+0x58>)
 8032d90:	f7f1 f972 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032d94:	4603      	mov	r3, r0
 8032d96:	2b00      	cmp	r3, #0
 8032d98:	d006      	beq.n	8032da8 <SetManHop+0x28>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032d9a:	f44f 7208 	mov.w	r2, #544	; 0x220
 8032d9e:	490f      	ldr	r1, [pc, #60]	; (8032ddc <SetManHop+0x5c>)
 8032da0:	480f      	ldr	r0, [pc, #60]	; (8032de0 <SetManHop+0x60>)
 8032da2:	f004 fa77 	bl	8037294 <iprintf>

        return ;
 8032da6:	e013      	b.n	8032dd0 <SetManHop+0x50>
    }

    if ( GetDbg() > 0 )
 8032da8:	f7fe f8ba 	bl	8030f20 <GetDbg>
 8032dac:	4603      	mov	r3, r0
 8032dae:	2b00      	cmp	r3, #0
 8032db0:	dd06      	ble.n	8032dc0 <SetManHop+0x40>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, nManHop );
 8032db2:	687b      	ldr	r3, [r7, #4]
 8032db4:	f240 2226 	movw	r2, #550	; 0x226
 8032db8:	4908      	ldr	r1, [pc, #32]	; (8032ddc <SetManHop+0x5c>)
 8032dba:	480a      	ldr	r0, [pc, #40]	; (8032de4 <SetManHop+0x64>)
 8032dbc:	f004 fa6a 	bl	8037294 <iprintf>

//    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x0D, (uint8_t *)&nManHop, 1 );
    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPManHop, (uint8_t *)&nManHop, 1 );
 8032dc0:	1d3b      	adds	r3, r7, #4
 8032dc2:	2201      	movs	r2, #1
 8032dc4:	9200      	str	r2, [sp, #0]
 8032dc6:	220d      	movs	r2, #13
 8032dc8:	21a0      	movs	r1, #160	; 0xa0
 8032dca:	4803      	ldr	r0, [pc, #12]	; (8032dd8 <SetManHop+0x58>)
 8032dcc:	f7fe f978 	bl	80310c0 <M24_HAL_WriteBytes>
}
 8032dd0:	3708      	adds	r7, #8
 8032dd2:	46bd      	mov	sp, r7
 8032dd4:	bd80      	pop	{r7, pc}
 8032dd6:	bf00      	nop
 8032dd8:	20000e38 	.word	0x20000e38
 8032ddc:	08041a00 	.word	0x08041a00
 8032de0:	0803b474 	.word	0x0803b474
 8032de4:	0803b48c 	.word	0x0803b48c

08032de8 <LoadCarNo>:
#endif	//	defined(USE_HOP_MANUAL)

//========================================================================
int		LoadCarNo		( void )
//========================================================================
{
 8032de8:	b580      	push	{r7, lr}
 8032dea:	b084      	sub	sp, #16
 8032dec:	af02      	add	r7, sp, #8
    uint8_t     nCarNo = 0;
 8032dee:	2300      	movs	r3, #0
 8032df0:	71fb      	strb	r3, [r7, #7]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032df2:	2302      	movs	r3, #2
 8032df4:	2202      	movs	r2, #2
 8032df6:	21a0      	movs	r1, #160	; 0xa0
 8032df8:	4815      	ldr	r0, [pc, #84]	; (8032e50 <LoadCarNo+0x68>)
 8032dfa:	f7f1 f93d 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032dfe:	4603      	mov	r3, r0
 8032e00:	2b00      	cmp	r3, #0
 8032e02:	d008      	beq.n	8032e16 <LoadCarNo+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032e04:	f240 2236 	movw	r2, #566	; 0x236
 8032e08:	4912      	ldr	r1, [pc, #72]	; (8032e54 <LoadCarNo+0x6c>)
 8032e0a:	4813      	ldr	r0, [pc, #76]	; (8032e58 <LoadCarNo+0x70>)
 8032e0c:	f004 fa42 	bl	8037294 <iprintf>

        return -1;
 8032e10:	f04f 33ff 	mov.w	r3, #4294967295
 8032e14:	e018      	b.n	8032e48 <LoadCarNo+0x60>
    }

//    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x0E, (uint8_t *)&nCarNo, 1 );
    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPCarNo, (uint8_t *)&nCarNo, 1 );
 8032e16:	1dfb      	adds	r3, r7, #7
 8032e18:	2201      	movs	r2, #1
 8032e1a:	9200      	str	r2, [sp, #0]
 8032e1c:	220e      	movs	r2, #14
 8032e1e:	21a0      	movs	r1, #160	; 0xa0
 8032e20:	480b      	ldr	r0, [pc, #44]	; (8032e50 <LoadCarNo+0x68>)
 8032e22:	f7fe f96f 	bl	8031104 <M24_HAL_ReadBytes>

    if ( GetDbg() > 0 )
 8032e26:	f7fe f87b 	bl	8030f20 <GetDbg>
 8032e2a:	4603      	mov	r3, r0
 8032e2c:	2b00      	cmp	r3, #0
 8032e2e:	dd06      	ble.n	8032e3e <LoadCarNo+0x56>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, nCarNo );
 8032e30:	79fb      	ldrb	r3, [r7, #7]
 8032e32:	f240 223f 	movw	r2, #575	; 0x23f
 8032e36:	4907      	ldr	r1, [pc, #28]	; (8032e54 <LoadCarNo+0x6c>)
 8032e38:	4808      	ldr	r0, [pc, #32]	; (8032e5c <LoadCarNo+0x74>)
 8032e3a:	f004 fa2b 	bl	8037294 <iprintf>

    g_nCarNo = nCarNo;
 8032e3e:	79fb      	ldrb	r3, [r7, #7]
 8032e40:	461a      	mov	r2, r3
 8032e42:	4b07      	ldr	r3, [pc, #28]	; (8032e60 <LoadCarNo+0x78>)
 8032e44:	601a      	str	r2, [r3, #0]

    return nCarNo;
 8032e46:	79fb      	ldrb	r3, [r7, #7]
}
 8032e48:	4618      	mov	r0, r3
 8032e4a:	3708      	adds	r7, #8
 8032e4c:	46bd      	mov	sp, r7
 8032e4e:	bd80      	pop	{r7, pc}
 8032e50:	20000e38 	.word	0x20000e38
 8032e54:	08041a0c 	.word	0x08041a0c
 8032e58:	0803b474 	.word	0x0803b474
 8032e5c:	0803b48c 	.word	0x0803b48c
 8032e60:	2000233c 	.word	0x2000233c

08032e64 <GetCarNo>:

//========================================================================
int		GetCarNo		( void )
//========================================================================
{
 8032e64:	b580      	push	{r7, lr}
 8032e66:	af00      	add	r7, sp, #0
	static int s_bOnce = 0;

	if ( s_bOnce == 0 )
 8032e68:	4b07      	ldr	r3, [pc, #28]	; (8032e88 <GetCarNo+0x24>)
 8032e6a:	681b      	ldr	r3, [r3, #0]
 8032e6c:	2b00      	cmp	r3, #0
 8032e6e:	d107      	bne.n	8032e80 <GetCarNo+0x1c>
	{
		//	초기로딩시 I2C에서 Load
		g_nCarNo = LoadCarNo();
 8032e70:	f7ff ffba 	bl	8032de8 <LoadCarNo>
 8032e74:	4603      	mov	r3, r0
 8032e76:	4a05      	ldr	r2, [pc, #20]	; (8032e8c <GetCarNo+0x28>)
 8032e78:	6013      	str	r3, [r2, #0]
		s_bOnce = 1;
 8032e7a:	4b03      	ldr	r3, [pc, #12]	; (8032e88 <GetCarNo+0x24>)
 8032e7c:	2201      	movs	r2, #1
 8032e7e:	601a      	str	r2, [r3, #0]
	}

	return g_nCarNo;
 8032e80:	4b02      	ldr	r3, [pc, #8]	; (8032e8c <GetCarNo+0x28>)
 8032e82:	681b      	ldr	r3, [r3, #0]
}
 8032e84:	4618      	mov	r0, r3
 8032e86:	bd80      	pop	{r7, pc}
 8032e88:	20002914 	.word	0x20002914
 8032e8c:	2000233c 	.word	0x2000233c

08032e90 <SetCarNo>:

//========================================================================
void	SetCarNo		( int nCarNo )
//========================================================================
{
 8032e90:	b580      	push	{r7, lr}
 8032e92:	b084      	sub	sp, #16
 8032e94:	af02      	add	r7, sp, #8
 8032e96:	6078      	str	r0, [r7, #4]
    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032e98:	2302      	movs	r3, #2
 8032e9a:	2202      	movs	r2, #2
 8032e9c:	21a0      	movs	r1, #160	; 0xa0
 8032e9e:	4813      	ldr	r0, [pc, #76]	; (8032eec <SetCarNo+0x5c>)
 8032ea0:	f7f1 f8ea 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032ea4:	4603      	mov	r3, r0
 8032ea6:	2b00      	cmp	r3, #0
 8032ea8:	d006      	beq.n	8032eb8 <SetCarNo+0x28>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032eaa:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8032eae:	4910      	ldr	r1, [pc, #64]	; (8032ef0 <SetCarNo+0x60>)
 8032eb0:	4810      	ldr	r0, [pc, #64]	; (8032ef4 <SetCarNo+0x64>)
 8032eb2:	f004 f9ef 	bl	8037294 <iprintf>

        return ;
 8032eb6:	e016      	b.n	8032ee6 <SetCarNo+0x56>
    }

	if ( GetDbg() > 0 )
 8032eb8:	f7fe f832 	bl	8030f20 <GetDbg>
 8032ebc:	4603      	mov	r3, r0
 8032ebe:	2b00      	cmp	r3, #0
 8032ec0:	dd06      	ble.n	8032ed0 <SetCarNo+0x40>
    	printf( "%s(%d) - %d\n", __func__, __LINE__, nCarNo );
 8032ec2:	687b      	ldr	r3, [r7, #4]
 8032ec4:	f240 2262 	movw	r2, #610	; 0x262
 8032ec8:	4909      	ldr	r1, [pc, #36]	; (8032ef0 <SetCarNo+0x60>)
 8032eca:	480b      	ldr	r0, [pc, #44]	; (8032ef8 <SetCarNo+0x68>)
 8032ecc:	f004 f9e2 	bl	8037294 <iprintf>

	g_nCarNo = nCarNo;
 8032ed0:	687b      	ldr	r3, [r7, #4]
 8032ed2:	4a0a      	ldr	r2, [pc, #40]	; (8032efc <SetCarNo+0x6c>)
 8032ed4:	6013      	str	r3, [r2, #0]

//    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x0E, (uint8_t *)&nCarNo, 1 );
    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPCarNo, (uint8_t *)&nCarNo, 1 );
 8032ed6:	1d3b      	adds	r3, r7, #4
 8032ed8:	2201      	movs	r2, #1
 8032eda:	9200      	str	r2, [sp, #0]
 8032edc:	220e      	movs	r2, #14
 8032ede:	21a0      	movs	r1, #160	; 0xa0
 8032ee0:	4802      	ldr	r0, [pc, #8]	; (8032eec <SetCarNo+0x5c>)
 8032ee2:	f7fe f8ed 	bl	80310c0 <M24_HAL_WriteBytes>
}
 8032ee6:	3708      	adds	r7, #8
 8032ee8:	46bd      	mov	sp, r7
 8032eea:	bd80      	pop	{r7, pc}
 8032eec:	20000e38 	.word	0x20000e38
 8032ef0:	08041a18 	.word	0x08041a18
 8032ef4:	0803b474 	.word	0x0803b474
 8032ef8:	0803b48c 	.word	0x0803b48c
 8032efc:	2000233c 	.word	0x2000233c

08032f00 <GetSpkVol>:

//========================================================================
int		GetSpkVol	    ( void )
//========================================================================
{
 8032f00:	b580      	push	{r7, lr}
 8032f02:	b084      	sub	sp, #16
 8032f04:	af02      	add	r7, sp, #8
    uint8_t     nSpkVol = 0;
 8032f06:	2300      	movs	r3, #0
 8032f08:	71fb      	strb	r3, [r7, #7]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032f0a:	2302      	movs	r3, #2
 8032f0c:	2202      	movs	r2, #2
 8032f0e:	21a0      	movs	r1, #160	; 0xa0
 8032f10:	4811      	ldr	r0, [pc, #68]	; (8032f58 <GetSpkVol+0x58>)
 8032f12:	f7f1 f8b1 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032f16:	4603      	mov	r3, r0
 8032f18:	2b00      	cmp	r3, #0
 8032f1a:	d008      	beq.n	8032f2e <GetSpkVol+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032f1c:	f240 2272 	movw	r2, #626	; 0x272
 8032f20:	490e      	ldr	r1, [pc, #56]	; (8032f5c <GetSpkVol+0x5c>)
 8032f22:	480f      	ldr	r0, [pc, #60]	; (8032f60 <GetSpkVol+0x60>)
 8032f24:	f004 f9b6 	bl	8037294 <iprintf>

        return -1;
 8032f28:	f04f 33ff 	mov.w	r3, #4294967295
 8032f2c:	e00f      	b.n	8032f4e <GetSpkVol+0x4e>
    }

//    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x0F, (uint8_t *)&nSpkVol, 1 );
    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPSpkVol, (uint8_t *)&nSpkVol, 1 );
 8032f2e:	1dfb      	adds	r3, r7, #7
 8032f30:	2201      	movs	r2, #1
 8032f32:	9200      	str	r2, [sp, #0]
 8032f34:	220f      	movs	r2, #15
 8032f36:	21a0      	movs	r1, #160	; 0xa0
 8032f38:	4807      	ldr	r0, [pc, #28]	; (8032f58 <GetSpkVol+0x58>)
 8032f3a:	f7fe f8e3 	bl	8031104 <M24_HAL_ReadBytes>

    printf( "%s(%d) - %d\n", __func__, __LINE__, nSpkVol );
 8032f3e:	79fb      	ldrb	r3, [r7, #7]
 8032f40:	f240 227a 	movw	r2, #634	; 0x27a
 8032f44:	4905      	ldr	r1, [pc, #20]	; (8032f5c <GetSpkVol+0x5c>)
 8032f46:	4807      	ldr	r0, [pc, #28]	; (8032f64 <GetSpkVol+0x64>)
 8032f48:	f004 f9a4 	bl	8037294 <iprintf>

    return nSpkVol;
 8032f4c:	79fb      	ldrb	r3, [r7, #7]
}
 8032f4e:	4618      	mov	r0, r3
 8032f50:	3708      	adds	r7, #8
 8032f52:	46bd      	mov	sp, r7
 8032f54:	bd80      	pop	{r7, pc}
 8032f56:	bf00      	nop
 8032f58:	20000e38 	.word	0x20000e38
 8032f5c:	08041a24 	.word	0x08041a24
 8032f60:	0803b474 	.word	0x0803b474
 8032f64:	0803b48c 	.word	0x0803b48c

08032f68 <SetSpkVol>:

//========================================================================
void	SetSpkVol	    ( int nSpkVol )
//========================================================================
{
 8032f68:	b580      	push	{r7, lr}
 8032f6a:	b084      	sub	sp, #16
 8032f6c:	af02      	add	r7, sp, #8
 8032f6e:	6078      	str	r0, [r7, #4]
    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032f70:	2302      	movs	r3, #2
 8032f72:	2202      	movs	r2, #2
 8032f74:	21a0      	movs	r1, #160	; 0xa0
 8032f76:	4816      	ldr	r0, [pc, #88]	; (8032fd0 <SetSpkVol+0x68>)
 8032f78:	f7f1 f87e 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032f7c:	4603      	mov	r3, r0
 8032f7e:	2b00      	cmp	r3, #0
 8032f80:	d006      	beq.n	8032f90 <SetSpkVol+0x28>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032f82:	f240 2285 	movw	r2, #645	; 0x285
 8032f86:	4913      	ldr	r1, [pc, #76]	; (8032fd4 <SetSpkVol+0x6c>)
 8032f88:	4813      	ldr	r0, [pc, #76]	; (8032fd8 <SetSpkVol+0x70>)
 8032f8a:	f004 f983 	bl	8037294 <iprintf>

        return ;
 8032f8e:	e01b      	b.n	8032fc8 <SetSpkVol+0x60>
    }

    printf( "%s(%d) - %d\n", __func__, __LINE__, nSpkVol );
 8032f90:	687b      	ldr	r3, [r7, #4]
 8032f92:	f240 228a 	movw	r2, #650	; 0x28a
 8032f96:	490f      	ldr	r1, [pc, #60]	; (8032fd4 <SetSpkVol+0x6c>)
 8032f98:	4810      	ldr	r0, [pc, #64]	; (8032fdc <SetSpkVol+0x74>)
 8032f9a:	f004 f97b 	bl	8037294 <iprintf>

//    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x0F, (uint8_t *)&nSpkVol, 1 );
    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPSpkVol, (uint8_t *)&nSpkVol, 1 );
 8032f9e:	1d3b      	adds	r3, r7, #4
 8032fa0:	2201      	movs	r2, #1
 8032fa2:	9200      	str	r2, [sp, #0]
 8032fa4:	220f      	movs	r2, #15
 8032fa6:	21a0      	movs	r1, #160	; 0xa0
 8032fa8:	4809      	ldr	r0, [pc, #36]	; (8032fd0 <SetSpkVol+0x68>)
 8032faa:	f7fe f889 	bl	80310c0 <M24_HAL_WriteBytes>

    //========================================================================
    //	Codec MAX9860ETG+
    if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), 2, 2 ) )
 8032fae:	2302      	movs	r3, #2
 8032fb0:	2202      	movs	r2, #2
 8032fb2:	2120      	movs	r1, #32
 8032fb4:	4806      	ldr	r0, [pc, #24]	; (8032fd0 <SetSpkVol+0x68>)
 8032fb6:	f7f1 f85f 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032fba:	4603      	mov	r3, r0
 8032fbc:	2b00      	cmp	r3, #0
 8032fbe:	d103      	bne.n	8032fc8 <SetSpkVol+0x60>
    {
    	AudioSpkVol( nSpkVol );
 8032fc0:	687b      	ldr	r3, [r7, #4]
 8032fc2:	4618      	mov	r0, r3
 8032fc4:	f7fc ff52 	bl	802fe6c <AudioSpkVol>
    }
}
 8032fc8:	3708      	adds	r7, #8
 8032fca:	46bd      	mov	sp, r7
 8032fcc:	bd80      	pop	{r7, pc}
 8032fce:	bf00      	nop
 8032fd0:	20000e38 	.word	0x20000e38
 8032fd4:	08041a30 	.word	0x08041a30
 8032fd8:	0803b474 	.word	0x0803b474
 8032fdc:	0803b48c 	.word	0x0803b48c

08032fe0 <GetMicVol>:


//========================================================================
int		GetMicVol	    ( void )
//========================================================================
{
 8032fe0:	b580      	push	{r7, lr}
 8032fe2:	b084      	sub	sp, #16
 8032fe4:	af02      	add	r7, sp, #8
    uint8_t     nMicVol = 0;
 8032fe6:	2300      	movs	r3, #0
 8032fe8:	71fb      	strb	r3, [r7, #7]

    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8032fea:	2302      	movs	r3, #2
 8032fec:	2202      	movs	r2, #2
 8032fee:	21a0      	movs	r1, #160	; 0xa0
 8032ff0:	4811      	ldr	r0, [pc, #68]	; (8033038 <GetMicVol+0x58>)
 8032ff2:	f7f1 f841 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8032ff6:	4603      	mov	r3, r0
 8032ff8:	2b00      	cmp	r3, #0
 8032ffa:	d008      	beq.n	803300e <GetMicVol+0x2e>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8032ffc:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 8033000:	490e      	ldr	r1, [pc, #56]	; (803303c <GetMicVol+0x5c>)
 8033002:	480f      	ldr	r0, [pc, #60]	; (8033040 <GetMicVol+0x60>)
 8033004:	f004 f946 	bl	8037294 <iprintf>

        return -1;
 8033008:	f04f 33ff 	mov.w	r3, #4294967295
 803300c:	e00f      	b.n	803302e <GetMicVol+0x4e>
    }

//    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x0F, (uint8_t *)&nSpkVol, 1 );
    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPMicVol, (uint8_t *)&nMicVol, 1 );
 803300e:	1dfb      	adds	r3, r7, #7
 8033010:	2201      	movs	r2, #1
 8033012:	9200      	str	r2, [sp, #0]
 8033014:	220c      	movs	r2, #12
 8033016:	21a0      	movs	r1, #160	; 0xa0
 8033018:	4807      	ldr	r0, [pc, #28]	; (8033038 <GetMicVol+0x58>)
 803301a:	f7fe f873 	bl	8031104 <M24_HAL_ReadBytes>

    printf( "%s(%d) - %d\n", __func__, __LINE__, nMicVol );
 803301e:	79fb      	ldrb	r3, [r7, #7]
 8033020:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8033024:	4905      	ldr	r1, [pc, #20]	; (803303c <GetMicVol+0x5c>)
 8033026:	4807      	ldr	r0, [pc, #28]	; (8033044 <GetMicVol+0x64>)
 8033028:	f004 f934 	bl	8037294 <iprintf>

    return nMicVol;
 803302c:	79fb      	ldrb	r3, [r7, #7]
}
 803302e:	4618      	mov	r0, r3
 8033030:	3708      	adds	r7, #8
 8033032:	46bd      	mov	sp, r7
 8033034:	bd80      	pop	{r7, pc}
 8033036:	bf00      	nop
 8033038:	20000e38 	.word	0x20000e38
 803303c:	08041a3c 	.word	0x08041a3c
 8033040:	0803b474 	.word	0x0803b474
 8033044:	0803b48c 	.word	0x0803b48c

08033048 <SetMicVol>:

//========================================================================
void	SetMicVol	    ( int nMicVol )
//========================================================================
{
 8033048:	b580      	push	{r7, lr}
 803304a:	b084      	sub	sp, #16
 803304c:	af02      	add	r7, sp, #8
 803304e:	6078      	str	r0, [r7, #4]
    if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 8033050:	2302      	movs	r3, #2
 8033052:	2202      	movs	r2, #2
 8033054:	21a0      	movs	r1, #160	; 0xa0
 8033056:	4816      	ldr	r0, [pc, #88]	; (80330b0 <SetMicVol+0x68>)
 8033058:	f7f1 f80e 	bl	8024078 <HAL_I2C_IsDeviceReady>
 803305c:	4603      	mov	r3, r0
 803305e:	2b00      	cmp	r3, #0
 8033060:	d006      	beq.n	8033070 <SetMicVol+0x28>
    {
        printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
 8033062:	f240 22b3 	movw	r2, #691	; 0x2b3
 8033066:	4913      	ldr	r1, [pc, #76]	; (80330b4 <SetMicVol+0x6c>)
 8033068:	4813      	ldr	r0, [pc, #76]	; (80330b8 <SetMicVol+0x70>)
 803306a:	f004 f913 	bl	8037294 <iprintf>

        return ;
 803306e:	e01b      	b.n	80330a8 <SetMicVol+0x60>
    }

    printf( "%s(%d) - %d\n", __func__, __LINE__, nMicVol );
 8033070:	687b      	ldr	r3, [r7, #4]
 8033072:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8033076:	490f      	ldr	r1, [pc, #60]	; (80330b4 <SetMicVol+0x6c>)
 8033078:	4810      	ldr	r0, [pc, #64]	; (80330bc <SetMicVol+0x74>)
 803307a:	f004 f90b 	bl	8037294 <iprintf>

//    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x0F, (uint8_t *)&nSpkVol, 1 );
    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPMicVol, (uint8_t *)&nMicVol, 1 );
 803307e:	1d3b      	adds	r3, r7, #4
 8033080:	2201      	movs	r2, #1
 8033082:	9200      	str	r2, [sp, #0]
 8033084:	220c      	movs	r2, #12
 8033086:	21a0      	movs	r1, #160	; 0xa0
 8033088:	4809      	ldr	r0, [pc, #36]	; (80330b0 <SetMicVol+0x68>)
 803308a:	f7fe f819 	bl	80310c0 <M24_HAL_WriteBytes>

    //========================================================================
    //	Codec MAX9860ETG+
    if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), 2, 2 ) )
 803308e:	2302      	movs	r3, #2
 8033090:	2202      	movs	r2, #2
 8033092:	2120      	movs	r1, #32
 8033094:	4806      	ldr	r0, [pc, #24]	; (80330b0 <SetMicVol+0x68>)
 8033096:	f7f0 ffef 	bl	8024078 <HAL_I2C_IsDeviceReady>
 803309a:	4603      	mov	r3, r0
 803309c:	2b00      	cmp	r3, #0
 803309e:	d103      	bne.n	80330a8 <SetMicVol+0x60>
    {
    	AudioMicVol( nMicVol );
 80330a0:	687b      	ldr	r3, [r7, #4]
 80330a2:	4618      	mov	r0, r3
 80330a4:	f7fc ff1a 	bl	802fedc <AudioMicVol>
    }
}
 80330a8:	3708      	adds	r7, #8
 80330aa:	46bd      	mov	sp, r7
 80330ac:	bd80      	pop	{r7, pc}
 80330ae:	bf00      	nop
 80330b0:	20000e38 	.word	0x20000e38
 80330b4:	08041a48 	.word	0x08041a48
 80330b8:	0803b474 	.word	0x0803b474
 80330bc:	0803b48c 	.word	0x0803b48c

080330c0 <RFM_Spk>:
}

//========================================================================
void	RFM_Spk			( int bOnOff )		//	1(On) / 0(Off)
//========================================================================
{
 80330c0:	b580      	push	{r7, lr}
 80330c2:	b082      	sub	sp, #8
 80330c4:	af00      	add	r7, sp, #0
 80330c6:	6078      	str	r0, [r7, #4]
	if( GetDbg() > 1 )
 80330c8:	f7fd ff2a 	bl	8030f20 <GetDbg>
 80330cc:	4603      	mov	r3, r0
 80330ce:	2b01      	cmp	r3, #1
 80330d0:	dd06      	ble.n	80330e0 <RFM_Spk+0x20>
		printf("%s(%d) - %d\n", __func__, __LINE__, bOnOff);
 80330d2:	687b      	ldr	r3, [r7, #4]
 80330d4:	f240 22ed 	movw	r2, #749	; 0x2ed
 80330d8:	490a      	ldr	r1, [pc, #40]	; (8033104 <RFM_Spk+0x44>)
 80330da:	480b      	ldr	r0, [pc, #44]	; (8033108 <RFM_Spk+0x48>)
 80330dc:	f004 f8da 	bl	8037294 <iprintf>

    if ( bOnOff )
 80330e0:	687b      	ldr	r3, [r7, #4]
 80330e2:	2b00      	cmp	r3, #0
 80330e4:	d005      	beq.n	80330f2 <RFM_Spk+0x32>
    {
        //  Spk Relay On
        HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
 80330e6:	2201      	movs	r2, #1
 80330e8:	2120      	movs	r1, #32
 80330ea:	4808      	ldr	r0, [pc, #32]	; (803310c <RFM_Spk+0x4c>)
 80330ec:	f7f0 fa16 	bl	802351c <HAL_GPIO_WritePin>
    else
    {
        //  Spk Relay Off
        HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
    }
}
 80330f0:	e004      	b.n	80330fc <RFM_Spk+0x3c>
        HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
 80330f2:	2200      	movs	r2, #0
 80330f4:	2120      	movs	r1, #32
 80330f6:	4805      	ldr	r0, [pc, #20]	; (803310c <RFM_Spk+0x4c>)
 80330f8:	f7f0 fa10 	bl	802351c <HAL_GPIO_WritePin>
}
 80330fc:	bf00      	nop
 80330fe:	3708      	adds	r7, #8
 8033100:	46bd      	mov	sp, r7
 8033102:	bd80      	pop	{r7, pc}
 8033104:	08041a54 	.word	0x08041a54
 8033108:	0803b48c 	.word	0x0803b48c
 803310c:	40021000 	.word	0x40021000

08033110 <cmd_ts>:


//========================================================================
int cmd_ts      ( int argc, char * argv[] )
//========================================================================
{
 8033110:	b580      	push	{r7, lr}
 8033112:	b084      	sub	sp, #16
 8033114:	af00      	add	r7, sp, #0
 8033116:	6078      	str	r0, [r7, #4]
 8033118:	6039      	str	r1, [r7, #0]
    //	ts [train set] ( 0 ~ 9 )
    int 		nTrainSet = 0;
 803311a:	2300      	movs	r3, #0
 803311c:	60fb      	str	r3, [r7, #12]

    if( argc <= 1 )
 803311e:	687b      	ldr	r3, [r7, #4]
 8033120:	2b01      	cmp	r3, #1
 8033122:	dc09      	bgt.n	8033138 <cmd_ts+0x28>
    {
        printf( "Train Set : %d\n", 100 + GetTrainSetIdx() );
 8033124:	f7ff fd2c 	bl	8032b80 <GetTrainSetIdx>
 8033128:	4603      	mov	r3, r0
 803312a:	3364      	adds	r3, #100	; 0x64
 803312c:	4619      	mov	r1, r3
 803312e:	4815      	ldr	r0, [pc, #84]	; (8033184 <cmd_ts+0x74>)
 8033130:	f004 f8b0 	bl	8037294 <iprintf>

    	return 0;
 8033134:	2300      	movs	r3, #0
 8033136:	e021      	b.n	803317c <cmd_ts+0x6c>
    }

    switch ( argc )
 8033138:	687b      	ldr	r3, [r7, #4]
 803313a:	2b02      	cmp	r3, #2
 803313c:	d109      	bne.n	8033152 <cmd_ts+0x42>
    {
    case 2:		sscanf( argv[1], "%d", &nTrainSet );	        //	cmd [channel]
 803313e:	683b      	ldr	r3, [r7, #0]
 8033140:	3304      	adds	r3, #4
 8033142:	681b      	ldr	r3, [r3, #0]
 8033144:	f107 020c 	add.w	r2, r7, #12
 8033148:	490f      	ldr	r1, [pc, #60]	; (8033188 <cmd_ts+0x78>)
 803314a:	4618      	mov	r0, r3
 803314c:	f004 faf4 	bl	8037738 <siscanf>
        break;
 8033150:	bf00      	nop
    }

    if ( nTrainSet < 0 || MaxTrainSet <= nTrainSet )  nTrainSet = 0;
 8033152:	68fb      	ldr	r3, [r7, #12]
 8033154:	2b00      	cmp	r3, #0
 8033156:	db02      	blt.n	803315e <cmd_ts+0x4e>
 8033158:	68fb      	ldr	r3, [r7, #12]
 803315a:	2b13      	cmp	r3, #19
 803315c:	dd01      	ble.n	8033162 <cmd_ts+0x52>
 803315e:	2300      	movs	r3, #0
 8033160:	60fb      	str	r3, [r7, #12]

   	printf( "%s(%d) - Train Set : %d\n", __func__, __LINE__, nTrainSet + 100 );
 8033162:	68fb      	ldr	r3, [r7, #12]
 8033164:	3364      	adds	r3, #100	; 0x64
 8033166:	f240 3236 	movw	r2, #822	; 0x336
 803316a:	4908      	ldr	r1, [pc, #32]	; (803318c <cmd_ts+0x7c>)
 803316c:	4808      	ldr	r0, [pc, #32]	; (8033190 <cmd_ts+0x80>)
 803316e:	f004 f891 	bl	8037294 <iprintf>

    SetTrainSetIdx( nTrainSet );
 8033172:	68fb      	ldr	r3, [r7, #12]
 8033174:	4618      	mov	r0, r3
 8033176:	f7ff fd19 	bl	8032bac <SetTrainSetIdx>

    return 0;
 803317a:	2300      	movs	r3, #0
}
 803317c:	4618      	mov	r0, r3
 803317e:	3710      	adds	r7, #16
 8033180:	46bd      	mov	sp, r7
 8033182:	bd80      	pop	{r7, pc}
 8033184:	0803b518 	.word	0x0803b518
 8033188:	0803b528 	.word	0x0803b528
 803318c:	08041a5c 	.word	0x08041a5c
 8033190:	0803b52c 	.word	0x0803b52c

08033194 <cmd_ch>:

//========================================================================
int cmd_ch      ( int argc, char * argv[] )
//========================================================================
{
 8033194:	b580      	push	{r7, lr}
 8033196:	b084      	sub	sp, #16
 8033198:	af00      	add	r7, sp, #0
 803319a:	6078      	str	r0, [r7, #4]
 803319c:	6039      	str	r1, [r7, #0]
    //	ch [channel] ( 0 ~ 9 )
    int 		nCh = 0;
 803319e:	2300      	movs	r3, #0
 80331a0:	60fb      	str	r3, [r7, #12]

    if( argc <= 1 )
 80331a2:	687b      	ldr	r3, [r7, #4]
 80331a4:	2b01      	cmp	r3, #1
 80331a6:	dc08      	bgt.n	80331ba <cmd_ch+0x26>
    {
        printf( "RF Channel: %d\n", GetChRx() );
 80331a8:	f7ff fb38 	bl	803281c <GetChRx>
 80331ac:	4603      	mov	r3, r0
 80331ae:	4619      	mov	r1, r3
 80331b0:	4817      	ldr	r0, [pc, #92]	; (8033210 <cmd_ch+0x7c>)
 80331b2:	f004 f86f 	bl	8037294 <iprintf>

    	return 0;
 80331b6:	2300      	movs	r3, #0
 80331b8:	e025      	b.n	8033206 <cmd_ch+0x72>
    }

    switch ( argc )
 80331ba:	687b      	ldr	r3, [r7, #4]
 80331bc:	2b02      	cmp	r3, #2
 80331be:	d109      	bne.n	80331d4 <cmd_ch+0x40>
    {
    case 2:		sscanf( argv[1], "%d", &nCh );	        //	cmd [channel]
 80331c0:	683b      	ldr	r3, [r7, #0]
 80331c2:	3304      	adds	r3, #4
 80331c4:	681b      	ldr	r3, [r3, #0]
 80331c6:	f107 020c 	add.w	r2, r7, #12
 80331ca:	4912      	ldr	r1, [pc, #72]	; (8033214 <cmd_ch+0x80>)
 80331cc:	4618      	mov	r0, r3
 80331ce:	f004 fab3 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text] 
        break;
 80331d2:	bf00      	nop
    }

    if ( nCh < 0 || MaxTrainSet <= nCh )  nCh = 0;
 80331d4:	68fb      	ldr	r3, [r7, #12]
 80331d6:	2b00      	cmp	r3, #0
 80331d8:	db02      	blt.n	80331e0 <cmd_ch+0x4c>
 80331da:	68fb      	ldr	r3, [r7, #12]
 80331dc:	2b13      	cmp	r3, #19
 80331de:	dd01      	ble.n	80331e4 <cmd_ch+0x50>
 80331e0:	2300      	movs	r3, #0
 80331e2:	60fb      	str	r3, [r7, #12]

    if ( GetDbg() > 0 )
 80331e4:	f7fd fe9c 	bl	8030f20 <GetDbg>
 80331e8:	4603      	mov	r3, r0
 80331ea:	2b00      	cmp	r3, #0
 80331ec:	dd06      	ble.n	80331fc <cmd_ch+0x68>
    	printf( "%s(%d) - Channel : %d\n", __func__, __LINE__, nCh );
 80331ee:	68fb      	ldr	r3, [r7, #12]
 80331f0:	f240 3255 	movw	r2, #853	; 0x355
 80331f4:	4908      	ldr	r1, [pc, #32]	; (8033218 <cmd_ch+0x84>)
 80331f6:	4809      	ldr	r0, [pc, #36]	; (803321c <cmd_ch+0x88>)
 80331f8:	f004 f84c 	bl	8037294 <iprintf>

    SetTrainSetIdx( nCh );
 80331fc:	68fb      	ldr	r3, [r7, #12]
 80331fe:	4618      	mov	r0, r3
 8033200:	f7ff fcd4 	bl	8032bac <SetTrainSetIdx>

	return 0;
 8033204:	2300      	movs	r3, #0
}
 8033206:	4618      	mov	r0, r3
 8033208:	3710      	adds	r7, #16
 803320a:	46bd      	mov	sp, r7
 803320c:	bd80      	pop	{r7, pc}
 803320e:	bf00      	nop
 8033210:	0803b548 	.word	0x0803b548
 8033214:	0803b528 	.word	0x0803b528
 8033218:	08041a64 	.word	0x08041a64
 803321c:	0803b558 	.word	0x0803b558

08033220 <cmd_car>:


//========================================================================
int cmd_car     ( int argc, char * argv[] )
//========================================================================
{
 8033220:	b580      	push	{r7, lr}
 8033222:	b084      	sub	sp, #16
 8033224:	af00      	add	r7, sp, #0
 8033226:	6078      	str	r0, [r7, #4]
 8033228:	6039      	str	r1, [r7, #0]
    //	car [Car No] ( 0 ~ 9 )
    int 		nCar = 0;
 803322a:	2300      	movs	r3, #0
 803322c:	60fb      	str	r3, [r7, #12]

    if( argc <= 1 )
 803322e:	687b      	ldr	r3, [r7, #4]
 8033230:	2b01      	cmp	r3, #1
 8033232:	dc08      	bgt.n	8033246 <cmd_car+0x26>
    {
        printf( "Car No : %d\n", GetCarNo() );
 8033234:	f7ff fe16 	bl	8032e64 <GetCarNo>
 8033238:	4603      	mov	r3, r0
 803323a:	4619      	mov	r1, r3
 803323c:	4814      	ldr	r0, [pc, #80]	; (8033290 <cmd_car+0x70>)
 803323e:	f004 f829 	bl	8037294 <iprintf>

        return 0;
 8033242:	2300      	movs	r3, #0
 8033244:	e020      	b.n	8033288 <cmd_car+0x68>
    }

    switch ( argc )
 8033246:	687b      	ldr	r3, [r7, #4]
 8033248:	2b02      	cmp	r3, #2
 803324a:	d109      	bne.n	8033260 <cmd_car+0x40>
    {
    case 2:		sscanf( argv[1], "%d", &nCar );	        //	cmd [Car No]
 803324c:	683b      	ldr	r3, [r7, #0]
 803324e:	3304      	adds	r3, #4
 8033250:	681b      	ldr	r3, [r3, #0]
 8033252:	f107 020c 	add.w	r2, r7, #12
 8033256:	490f      	ldr	r1, [pc, #60]	; (8033294 <cmd_car+0x74>)
 8033258:	4618      	mov	r0, r3
 803325a:	f004 fa6d 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text] 
        break;
 803325e:	bf00      	nop
    }

    if ( nCar < 0 || MaxCarNo < nCar )  nCar = 0;
 8033260:	68fb      	ldr	r3, [r7, #12]
 8033262:	2b00      	cmp	r3, #0
 8033264:	db02      	blt.n	803326c <cmd_car+0x4c>
 8033266:	68fb      	ldr	r3, [r7, #12]
 8033268:	2b0d      	cmp	r3, #13
 803326a:	dd01      	ble.n	8033270 <cmd_car+0x50>
 803326c:	2300      	movs	r3, #0
 803326e:	60fb      	str	r3, [r7, #12]

    printf( "%s(%d) - Car No : %d\n", __func__, __LINE__, nCar );
 8033270:	68fb      	ldr	r3, [r7, #12]
 8033272:	f44f 725d 	mov.w	r2, #884	; 0x374
 8033276:	4908      	ldr	r1, [pc, #32]	; (8033298 <cmd_car+0x78>)
 8033278:	4808      	ldr	r0, [pc, #32]	; (803329c <cmd_car+0x7c>)
 803327a:	f004 f80b 	bl	8037294 <iprintf>

    SetCarNo( nCar );
 803327e:	68fb      	ldr	r3, [r7, #12]
 8033280:	4618      	mov	r0, r3
 8033282:	f7ff fe05 	bl	8032e90 <SetCarNo>

	return 0;
 8033286:	2300      	movs	r3, #0
}
 8033288:	4618      	mov	r0, r3
 803328a:	3710      	adds	r7, #16
 803328c:	46bd      	mov	sp, r7
 803328e:	bd80      	pop	{r7, pc}
 8033290:	0803b570 	.word	0x0803b570
 8033294:	0803b528 	.word	0x0803b528
 8033298:	08041a6c 	.word	0x08041a6c
 803329c:	0803b580 	.word	0x0803b580

080332a0 <cmd_hop>:


//========================================================================
int cmd_hop     ( int argc, char * argv[] )
//========================================================================
{
 80332a0:	b580      	push	{r7, lr}
 80332a2:	b084      	sub	sp, #16
 80332a4:	af00      	add	r7, sp, #0
 80332a6:	6078      	str	r0, [r7, #4]
 80332a8:	6039      	str	r1, [r7, #0]
    //	car [Car No] ( 0 ~ 9 )
    int 		nManHop = 0;
 80332aa:	2300      	movs	r3, #0
 80332ac:	60fb      	str	r3, [r7, #12]

    switch ( argc )
 80332ae:	687b      	ldr	r3, [r7, #4]
 80332b0:	2b02      	cmp	r3, #2
 80332b2:	d109      	bne.n	80332c8 <cmd_hop+0x28>
    {
    case 2:		sscanf( argv[1], "%d", &nManHop );	        //	cmd [Car No]
 80332b4:	683b      	ldr	r3, [r7, #0]
 80332b6:	3304      	adds	r3, #4
 80332b8:	681b      	ldr	r3, [r3, #0]
 80332ba:	f107 020c 	add.w	r2, r7, #12
 80332be:	4910      	ldr	r1, [pc, #64]	; (8033300 <cmd_hop+0x60>)
 80332c0:	4618      	mov	r0, r3
 80332c2:	f004 fa39 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
        break;
 80332c6:	bf00      	nop
    }

//  g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
    if ( nManHop < 0 || 2 < nManHop )  nManHop = 0;
 80332c8:	68fb      	ldr	r3, [r7, #12]
 80332ca:	2b00      	cmp	r3, #0
 80332cc:	db02      	blt.n	80332d4 <cmd_hop+0x34>
 80332ce:	68fb      	ldr	r3, [r7, #12]
 80332d0:	2b02      	cmp	r3, #2
 80332d2:	dd01      	ble.n	80332d8 <cmd_hop+0x38>
 80332d4:	2300      	movs	r3, #0
 80332d6:	60fb      	str	r3, [r7, #12]

    printf( "%s(%d) - Manual Hop : %d\n", __func__, __LINE__, nManHop );
 80332d8:	68fb      	ldr	r3, [r7, #12]
 80332da:	f240 328d 	movw	r2, #909	; 0x38d
 80332de:	4909      	ldr	r1, [pc, #36]	; (8033304 <cmd_hop+0x64>)
 80332e0:	4809      	ldr	r0, [pc, #36]	; (8033308 <cmd_hop+0x68>)
 80332e2:	f003 ffd7 	bl	8037294 <iprintf>

    g_nManHopping = nManHop;
 80332e6:	68fb      	ldr	r3, [r7, #12]
 80332e8:	4a08      	ldr	r2, [pc, #32]	; (803330c <cmd_hop+0x6c>)
 80332ea:	6013      	str	r3, [r2, #0]
    SetManHop( nManHop );
 80332ec:	68fb      	ldr	r3, [r7, #12]
 80332ee:	4618      	mov	r0, r3
 80332f0:	f7ff fd46 	bl	8032d80 <SetManHop>
}
 80332f4:	bf00      	nop
 80332f6:	4618      	mov	r0, r3
 80332f8:	3710      	adds	r7, #16
 80332fa:	46bd      	mov	sp, r7
 80332fc:	bd80      	pop	{r7, pc}
 80332fe:	bf00      	nop
 8033300:	0803b528 	.word	0x0803b528
 8033304:	08041a74 	.word	0x08041a74
 8033308:	0803b598 	.word	0x0803b598
 803330c:	20002354 	.word	0x20002354

08033310 <cmd_rfmod>:


//========================================================================
int cmd_rfmod     ( int argc, char * argv[] )
//========================================================================
{
 8033310:	b580      	push	{r7, lr}
 8033312:	b084      	sub	sp, #16
 8033314:	af00      	add	r7, sp, #0
 8033316:	6078      	str	r0, [r7, #4]
 8033318:	6039      	str	r1, [r7, #0]
    int 		nRFMode = 0;
 803331a:	2300      	movs	r3, #0
 803331c:	60fb      	str	r3, [r7, #12]

    switch ( argc )
 803331e:	687b      	ldr	r3, [r7, #4]
 8033320:	2b02      	cmp	r3, #2
 8033322:	d109      	bne.n	8033338 <cmd_rfmod+0x28>
    {
    case 2:		sscanf( argv[1], "%d", &nRFMode );	        //	cmd [Car No]
 8033324:	683b      	ldr	r3, [r7, #0]
 8033326:	3304      	adds	r3, #4
 8033328:	681b      	ldr	r3, [r3, #0]
 803332a:	f107 020c 	add.w	r2, r7, #12
 803332e:	4910      	ldr	r1, [pc, #64]	; (8033370 <cmd_rfmod+0x60>)
 8033330:	4618      	mov	r0, r3
 8033332:	f004 fa01 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
        break;
 8033336:	bf00      	nop
    }

//  g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
    if ( nRFMode < 1 || RFModeMax < nRFMode )  nRFMode = RFModeDefault;
 8033338:	68fb      	ldr	r3, [r7, #12]
 803333a:	2b00      	cmp	r3, #0
 803333c:	dd02      	ble.n	8033344 <cmd_rfmod+0x34>
 803333e:	68fb      	ldr	r3, [r7, #12]
 8033340:	2b02      	cmp	r3, #2
 8033342:	dd01      	ble.n	8033348 <cmd_rfmod+0x38>
 8033344:	2301      	movs	r3, #1
 8033346:	60fb      	str	r3, [r7, #12]

    printf( "%s(%d) - RFMode : %d\n", __func__, __LINE__, nRFMode );
 8033348:	68fb      	ldr	r3, [r7, #12]
 803334a:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 803334e:	4909      	ldr	r1, [pc, #36]	; (8033374 <cmd_rfmod+0x64>)
 8033350:	4809      	ldr	r0, [pc, #36]	; (8033378 <cmd_rfmod+0x68>)
 8033352:	f003 ff9f 	bl	8037294 <iprintf>

    g_nRFMode = nRFMode;
 8033356:	68fb      	ldr	r3, [r7, #12]
 8033358:	4a08      	ldr	r2, [pc, #32]	; (803337c <cmd_rfmod+0x6c>)
 803335a:	6013      	str	r3, [r2, #0]
    SetRFMode( nRFMode );
 803335c:	68fb      	ldr	r3, [r7, #12]
 803335e:	4618      	mov	r0, r3
 8033360:	f7ff fc9c 	bl	8032c9c <SetRFMode>
}
 8033364:	bf00      	nop
 8033366:	4618      	mov	r0, r3
 8033368:	3710      	adds	r7, #16
 803336a:	46bd      	mov	sp, r7
 803336c:	bd80      	pop	{r7, pc}
 803336e:	bf00      	nop
 8033370:	0803b528 	.word	0x0803b528
 8033374:	08041a7c 	.word	0x08041a7c
 8033378:	0803b5b4 	.word	0x0803b5b4
 803337c:	20002350 	.word	0x20002350

08033380 <cmd_swinfo>:

//========================================================================
int cmd_swinfo    ( int argc, char * argv[] )
//========================================================================
{
 8033380:	b580      	push	{r7, lr}
 8033382:	b082      	sub	sp, #8
 8033384:	af00      	add	r7, sp, #0
 8033386:	6078      	str	r0, [r7, #4]
 8033388:	6039      	str	r1, [r7, #0]
    printf( "[S/W Info]\n" );
 803338a:	480b      	ldr	r0, [pc, #44]	; (80333b8 <cmd_swinfo+0x38>)
 803338c:	f004 f81e 	bl	80373cc <puts>
    printf( " - Boot : %d Byte\n", FLASH_If_GetBootSize() );
 8033390:	f7fe f91a 	bl	80315c8 <FLASH_If_GetBootSize>
 8033394:	4603      	mov	r3, r0
 8033396:	4619      	mov	r1, r3
 8033398:	4808      	ldr	r0, [pc, #32]	; (80333bc <cmd_swinfo+0x3c>)
 803339a:	f003 ff7b 	bl	8037294 <iprintf>
    printf( " - App : %d Byte\n", FLASH_If_GetAppSize() );
 803339e:	f7fe f929 	bl	80315f4 <FLASH_If_GetAppSize>
 80333a2:	4603      	mov	r3, r0
 80333a4:	4619      	mov	r1, r3
 80333a6:	4806      	ldr	r0, [pc, #24]	; (80333c0 <cmd_swinfo+0x40>)
 80333a8:	f003 ff74 	bl	8037294 <iprintf>
}
 80333ac:	bf00      	nop
 80333ae:	4618      	mov	r0, r3
 80333b0:	3708      	adds	r7, #8
 80333b2:	46bd      	mov	sp, r7
 80333b4:	bd80      	pop	{r7, pc}
 80333b6:	bf00      	nop
 80333b8:	0803b5cc 	.word	0x0803b5cc
 80333bc:	0803b5d8 	.word	0x0803b5d8
 80333c0:	0803b5ec 	.word	0x0803b5ec

080333c4 <cmd_info>:

//========================================================================
int cmd_info    ( int argc, char * argv[] )
//========================================================================
{
 80333c4:	b590      	push	{r4, r7, lr}
 80333c6:	b087      	sub	sp, #28
 80333c8:	af00      	add	r7, sp, #0
 80333ca:	6078      	str	r0, [r7, #4]
 80333cc:	6039      	str	r1, [r7, #0]
    //	info - Train Setting Config
    uint8_t		nBuf[10];
    int 		nCh = 0;
 80333ce:	2300      	movs	r3, #0
 80333d0:	617b      	str	r3, [r7, #20]
    uint16_t	nData;

    printf( "[Setting]\n" );
 80333d2:	482c      	ldr	r0, [pc, #176]	; (8033484 <cmd_info+0xc0>)
 80333d4:	f003 fffa 	bl	80373cc <puts>
    printf( " - Train Set : %d\n", 100 + GetTrainSetIdx() );
 80333d8:	f7ff fbd2 	bl	8032b80 <GetTrainSetIdx>
 80333dc:	4603      	mov	r3, r0
 80333de:	3364      	adds	r3, #100	; 0x64
 80333e0:	4619      	mov	r1, r3
 80333e2:	4829      	ldr	r0, [pc, #164]	; (8033488 <cmd_info+0xc4>)
 80333e4:	f003 ff56 	bl	8037294 <iprintf>
    printf( " - Car No : %d\n", GetCarNo() );
 80333e8:	f7ff fd3c 	bl	8032e64 <GetCarNo>
 80333ec:	4603      	mov	r3, r0
 80333ee:	4619      	mov	r1, r3
 80333f0:	4826      	ldr	r0, [pc, #152]	; (803348c <cmd_info+0xc8>)
 80333f2:	f003 ff4f 	bl	8037294 <iprintf>
    printf( " - RF Channel: %d\n", GetChRx() );
 80333f6:	f7ff fa11 	bl	803281c <GetChRx>
 80333fa:	4603      	mov	r3, r0
 80333fc:	4619      	mov	r1, r3
 80333fe:	4824      	ldr	r0, [pc, #144]	; (8033490 <cmd_info+0xcc>)
 8033400:	f003 ff48 	bl	8037294 <iprintf>
    printf( " - Mode : %s(%d)\n", StrRFMMode( GetRFMMode() ), GetRFMMode()  );	//	Normal / Tx / Rx / Upgrade
 8033404:	f7ff f990 	bl	8032728 <GetRFMMode>
 8033408:	4603      	mov	r3, r0
 803340a:	4618      	mov	r0, r3
 803340c:	f7ff f9be 	bl	803278c <StrRFMMode>
 8033410:	4604      	mov	r4, r0
 8033412:	f7ff f989 	bl	8032728 <GetRFMMode>
 8033416:	4603      	mov	r3, r0
 8033418:	461a      	mov	r2, r3
 803341a:	4621      	mov	r1, r4
 803341c:	481d      	ldr	r0, [pc, #116]	; (8033494 <cmd_info+0xd0>)
 803341e:	f003 ff39 	bl	8037294 <iprintf>
    printf( " - GetChNearRFM() : %d\n", GetChNearRFM() );
 8033422:	f7ff fa7b 	bl	803291c <GetChNearRFM>
 8033426:	4603      	mov	r3, r0
 8033428:	4619      	mov	r1, r3
 803342a:	481b      	ldr	r0, [pc, #108]	; (8033498 <cmd_info+0xd4>)
 803342c:	f003 ff32 	bl	8037294 <iprintf>
    printf( " - GetChNearRFT() : %d\n", GetChNearRFT( 190 ) );
 8033430:	20be      	movs	r0, #190	; 0xbe
 8033432:	f7ff fa2d 	bl	8032890 <GetChNearRFT>
 8033436:	4603      	mov	r3, r0
 8033438:	4619      	mov	r1, r3
 803343a:	4818      	ldr	r0, [pc, #96]	; (803349c <cmd_info+0xd8>)
 803343c:	f003 ff2a 	bl	8037294 <iprintf>
    printf( " - GetChPARFT() : %d\n", GetChPARFT() );
 8033440:	f7ff fb06 	bl	8032a50 <GetChPARFT>
 8033444:	4603      	mov	r3, r0
 8033446:	4619      	mov	r1, r3
 8033448:	4815      	ldr	r0, [pc, #84]	; (80334a0 <cmd_info+0xdc>)
 803344a:	f003 ff23 	bl	8037294 <iprintf>
    printf( " - GetChPA() : %d\n", GetChPA() );
 803344e:	f7ff fab7 	bl	80329c0 <GetChPA>
 8033452:	4603      	mov	r3, r0
 8033454:	4619      	mov	r1, r3
 8033456:	4813      	ldr	r0, [pc, #76]	; (80334a4 <cmd_info+0xe0>)
 8033458:	f003 ff1c 	bl	8037294 <iprintf>
    printf( " - GetChRFMUp() : %d\n", GetChRFMUp() );
 803345c:	f7ff fb14 	bl	8032a88 <GetChRFMUp>
 8033460:	4603      	mov	r3, r0
 8033462:	4619      	mov	r1, r3
 8033464:	4810      	ldr	r0, [pc, #64]	; (80334a8 <cmd_info+0xe4>)
 8033466:	f003 ff15 	bl	8037294 <iprintf>
    printf( " - GetChRFMDown() : %d\n", GetChRFMDown() );
 803346a:	f7ff fb29 	bl	8032ac0 <GetChRFMDown>
 803346e:	4603      	mov	r3, r0
 8033470:	4619      	mov	r1, r3
 8033472:	480e      	ldr	r0, [pc, #56]	; (80334ac <cmd_info+0xe8>)
 8033474:	f003 ff0e 	bl	8037294 <iprintf>
}
 8033478:	bf00      	nop
 803347a:	4618      	mov	r0, r3
 803347c:	371c      	adds	r7, #28
 803347e:	46bd      	mov	sp, r7
 8033480:	bd90      	pop	{r4, r7, pc}
 8033482:	bf00      	nop
 8033484:	0803b600 	.word	0x0803b600
 8033488:	0803b60c 	.word	0x0803b60c
 803348c:	0803b620 	.word	0x0803b620
 8033490:	0803b630 	.word	0x0803b630
 8033494:	0803b644 	.word	0x0803b644
 8033498:	0803b658 	.word	0x0803b658
 803349c:	0803b670 	.word	0x0803b670
 80334a0:	0803b688 	.word	0x0803b688
 80334a4:	0803b6a0 	.word	0x0803b6a0
 80334a8:	0803b6b4 	.word	0x0803b6b4
 80334ac:	0803b6cc 	.word	0x0803b6cc

080334b0 <cmd_rfstat>:


//========================================================================
int cmd_rfstat    ( int argc, char * argv[] )
//========================================================================
{
 80334b0:	b580      	push	{r7, lr}
 80334b2:	b082      	sub	sp, #8
 80334b4:	af00      	add	r7, sp, #0
 80334b6:	6078      	str	r0, [r7, #4]
 80334b8:	6039      	str	r1, [r7, #0]
    //	rfstat - RF Tx / Rx Status
    printf( "[RF Info] Tx : %d / Rx : %d\n", nTxPkt, nRxPkt );
 80334ba:	4b06      	ldr	r3, [pc, #24]	; (80334d4 <cmd_rfstat+0x24>)
 80334bc:	681b      	ldr	r3, [r3, #0]
 80334be:	4a06      	ldr	r2, [pc, #24]	; (80334d8 <cmd_rfstat+0x28>)
 80334c0:	6812      	ldr	r2, [r2, #0]
 80334c2:	4619      	mov	r1, r3
 80334c4:	4805      	ldr	r0, [pc, #20]	; (80334dc <cmd_rfstat+0x2c>)
 80334c6:	f003 fee5 	bl	8037294 <iprintf>
}
 80334ca:	bf00      	nop
 80334cc:	4618      	mov	r0, r3
 80334ce:	3708      	adds	r7, #8
 80334d0:	46bd      	mov	sp, r7
 80334d2:	bd80      	pop	{r7, pc}
 80334d4:	20001378 	.word	0x20001378
 80334d8:	2000137c 	.word	0x2000137c
 80334dc:	0803b6e4 	.word	0x0803b6e4

080334e0 <cmd_txpwr>:
#endif

//========================================================================
int cmd_txpwr    ( int argc, char * argv[] )
//========================================================================
{
 80334e0:	b580      	push	{r7, lr}
 80334e2:	b084      	sub	sp, #16
 80334e4:	af00      	add	r7, sp, #0
 80334e6:	6078      	str	r0, [r7, #4]
 80334e8:	6039      	str	r1, [r7, #0]
    //	RF Tx
    uint8_t		nPwr	=	0x7F;
 80334ea:	237f      	movs	r3, #127	; 0x7f
 80334ec:	73fb      	strb	r3, [r7, #15]

    switch ( argc )
 80334ee:	687b      	ldr	r3, [r7, #4]
 80334f0:	2b02      	cmp	r3, #2
 80334f2:	d109      	bne.n	8033508 <cmd_txpwr+0x28>
    {
    case 2:		sscanf( argv[1], "%d", &nPwr );	        //	ID
 80334f4:	683b      	ldr	r3, [r7, #0]
 80334f6:	3304      	adds	r3, #4
 80334f8:	681b      	ldr	r3, [r3, #0]
 80334fa:	f107 020f 	add.w	r2, r7, #15
 80334fe:	490a      	ldr	r1, [pc, #40]	; (8033528 <cmd_txpwr+0x48>)
 8033500:	4618      	mov	r0, r3
 8033502:	f004 f919 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
        break;
 8033506:	bf00      	nop
    }

    printf( "%s(%d) - Tx Pwr(%d)\n", __func__, __LINE__, nPwr );
 8033508:	7bfb      	ldrb	r3, [r7, #15]
 803350a:	f240 4216 	movw	r2, #1046	; 0x416
 803350e:	4907      	ldr	r1, [pc, #28]	; (803352c <cmd_txpwr+0x4c>)
 8033510:	4807      	ldr	r0, [pc, #28]	; (8033530 <cmd_txpwr+0x50>)
 8033512:	f003 febf 	bl	8037294 <iprintf>

    vRadio_Set_TxPower( nPwr );
 8033516:	7bfb      	ldrb	r3, [r7, #15]
 8033518:	4618      	mov	r0, r3
 803351a:	f7f9 ff6f 	bl	802d3fc <vRadio_Set_TxPower>
}
 803351e:	bf00      	nop
 8033520:	4618      	mov	r0, r3
 8033522:	3710      	adds	r7, #16
 8033524:	46bd      	mov	sp, r7
 8033526:	bd80      	pop	{r7, pc}
 8033528:	0803b528 	.word	0x0803b528
 803352c:	08041a88 	.word	0x08041a88
 8033530:	0803b704 	.word	0x0803b704

08033534 <cmd_rspid>:

//========================================================================
int cmd_rspid     ( int argc, char * argv[] )
//========================================================================
{
 8033534:	b580      	push	{r7, lr}
 8033536:	b084      	sub	sp, #16
 8033538:	af00      	add	r7, sp, #0
 803353a:	6078      	str	r0, [r7, #4]
 803353c:	6039      	str	r1, [r7, #0]
    //	rspid [Car No] [0/1]
    int 		nID 	= 0;
 803353e:	2300      	movs	r3, #0
 8033540:	60fb      	str	r3, [r7, #12]
    int 		nSet 	= 0;
 8033542:	2300      	movs	r3, #0
 8033544:	60bb      	str	r3, [r7, #8]

    switch ( argc )
 8033546:	687b      	ldr	r3, [r7, #4]
 8033548:	2b02      	cmp	r3, #2
 803354a:	d00b      	beq.n	8033564 <cmd_rspid+0x30>
 803354c:	687b      	ldr	r3, [r7, #4]
 803354e:	2b03      	cmp	r3, #3
 8033550:	d112      	bne.n	8033578 <cmd_rspid+0x44>
    {
    case 3:		sscanf( argv[2], "%d", &nSet );	        //	Set
 8033552:	683b      	ldr	r3, [r7, #0]
 8033554:	3308      	adds	r3, #8
 8033556:	681b      	ldr	r3, [r3, #0]
 8033558:	f107 0208 	add.w	r2, r7, #8
 803355c:	4937      	ldr	r1, [pc, #220]	; (803363c <cmd_rspid+0x108>)
 803355e:	4618      	mov	r0, r3
 8033560:	f004 f8ea 	bl	8037738 <siscanf>
    case 2:		sscanf( argv[1], "%d", &nID );	        //	ID
 8033564:	683b      	ldr	r3, [r7, #0]
 8033566:	3304      	adds	r3, #4
 8033568:	681b      	ldr	r3, [r3, #0]
 803356a:	f107 020c 	add.w	r2, r7, #12
 803356e:	4933      	ldr	r1, [pc, #204]	; (803363c <cmd_rspid+0x108>)
 8033570:	4618      	mov	r0, r3
 8033572:	f004 f8e1 	bl	8037738 <siscanf>
//	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
        break;
 8033576:	bf00      	nop
    }

    if ( nID < 0 || MaxCarNo < nID )
 8033578:	68fb      	ldr	r3, [r7, #12]
 803357a:	2b00      	cmp	r3, #0
 803357c:	db02      	blt.n	8033584 <cmd_rspid+0x50>
 803357e:	68fb      	ldr	r3, [r7, #12]
 8033580:	2b0d      	cmp	r3, #13
 8033582:	dd07      	ble.n	8033594 <cmd_rspid+0x60>
    {
    	printf("%s(%d) - return\n", __func__, __LINE__);
 8033584:	f240 422d 	movw	r2, #1069	; 0x42d
 8033588:	492d      	ldr	r1, [pc, #180]	; (8033640 <cmd_rspid+0x10c>)
 803358a:	482e      	ldr	r0, [pc, #184]	; (8033644 <cmd_rspid+0x110>)
 803358c:	f003 fe82 	bl	8037294 <iprintf>
    	return 0;
 8033590:	2300      	movs	r3, #0
 8033592:	e04f      	b.n	8033634 <cmd_rspid+0x100>
    }

    //	ID Flag Manual 설정.
    g_bSetRspIDManual = 1;
 8033594:	4b2c      	ldr	r3, [pc, #176]	; (8033648 <cmd_rspid+0x114>)
 8033596:	2201      	movs	r2, #1
 8033598:	601a      	str	r2, [r3, #0]

    if ( nSet )
 803359a:	68bb      	ldr	r3, [r7, #8]
 803359c:	2b00      	cmp	r3, #0
 803359e:	d020      	beq.n	80335e2 <cmd_rspid+0xae>
    {
    	//	Set ID Flag
    	g_flagRspID |= ( 0x1 << nID );
 80335a0:	68fb      	ldr	r3, [r7, #12]
 80335a2:	2201      	movs	r2, #1
 80335a4:	fa02 f303 	lsl.w	r3, r2, r3
 80335a8:	b21a      	sxth	r2, r3
 80335aa:	4b28      	ldr	r3, [pc, #160]	; (803364c <cmd_rspid+0x118>)
 80335ac:	881b      	ldrh	r3, [r3, #0]
 80335ae:	b21b      	sxth	r3, r3
 80335b0:	4313      	orrs	r3, r2
 80335b2:	b21b      	sxth	r3, r3
 80335b4:	b29a      	uxth	r2, r3
 80335b6:	4b25      	ldr	r3, [pc, #148]	; (803364c <cmd_rspid+0x118>)
 80335b8:	801a      	strh	r2, [r3, #0]
		g_devStat[nID].nRSSI = 200;
 80335ba:	68fa      	ldr	r2, [r7, #12]
 80335bc:	4924      	ldr	r1, [pc, #144]	; (8033650 <cmd_rspid+0x11c>)
 80335be:	4613      	mov	r3, r2
 80335c0:	00db      	lsls	r3, r3, #3
 80335c2:	4413      	add	r3, r2
 80335c4:	009b      	lsls	r3, r3, #2
 80335c6:	4413      	add	r3, r2
 80335c8:	440b      	add	r3, r1
 80335ca:	3318      	adds	r3, #24
 80335cc:	2200      	movs	r2, #0
 80335ce:	f062 0237 	orn	r2, r2, #55	; 0x37
 80335d2:	715a      	strb	r2, [r3, #5]
 80335d4:	2200      	movs	r2, #0
 80335d6:	719a      	strb	r2, [r3, #6]
 80335d8:	2200      	movs	r2, #0
 80335da:	71da      	strb	r2, [r3, #7]
 80335dc:	2200      	movs	r2, #0
 80335de:	721a      	strb	r2, [r3, #8]
 80335e0:	e01f      	b.n	8033622 <cmd_rspid+0xee>
    }
    else
    {
    	//	Clear ID Flag
    	g_flagRspID &= ~( 0x1 << nID );
 80335e2:	68fb      	ldr	r3, [r7, #12]
 80335e4:	2201      	movs	r2, #1
 80335e6:	fa02 f303 	lsl.w	r3, r2, r3
 80335ea:	b21b      	sxth	r3, r3
 80335ec:	43db      	mvns	r3, r3
 80335ee:	b21a      	sxth	r2, r3
 80335f0:	4b16      	ldr	r3, [pc, #88]	; (803364c <cmd_rspid+0x118>)
 80335f2:	881b      	ldrh	r3, [r3, #0]
 80335f4:	b21b      	sxth	r3, r3
 80335f6:	4013      	ands	r3, r2
 80335f8:	b21b      	sxth	r3, r3
 80335fa:	b29a      	uxth	r2, r3
 80335fc:	4b13      	ldr	r3, [pc, #76]	; (803364c <cmd_rspid+0x118>)
 80335fe:	801a      	strh	r2, [r3, #0]
		g_devStat[nID].nRSSI = 0;
 8033600:	68fa      	ldr	r2, [r7, #12]
 8033602:	4913      	ldr	r1, [pc, #76]	; (8033650 <cmd_rspid+0x11c>)
 8033604:	4613      	mov	r3, r2
 8033606:	00db      	lsls	r3, r3, #3
 8033608:	4413      	add	r3, r2
 803360a:	009b      	lsls	r3, r3, #2
 803360c:	4413      	add	r3, r2
 803360e:	440b      	add	r3, r1
 8033610:	3318      	adds	r3, #24
 8033612:	2200      	movs	r2, #0
 8033614:	715a      	strb	r2, [r3, #5]
 8033616:	2200      	movs	r2, #0
 8033618:	719a      	strb	r2, [r3, #6]
 803361a:	2200      	movs	r2, #0
 803361c:	71da      	strb	r2, [r3, #7]
 803361e:	2200      	movs	r2, #0
 8033620:	721a      	strb	r2, [r3, #8]
    }

    printf( "%s(%d) - ID Flag : 0x%04X\n", __func__, __LINE__, g_flagRspID );
 8033622:	4b0a      	ldr	r3, [pc, #40]	; (803364c <cmd_rspid+0x118>)
 8033624:	881b      	ldrh	r3, [r3, #0]
 8033626:	f240 4241 	movw	r2, #1089	; 0x441
 803362a:	4905      	ldr	r1, [pc, #20]	; (8033640 <cmd_rspid+0x10c>)
 803362c:	4809      	ldr	r0, [pc, #36]	; (8033654 <cmd_rspid+0x120>)
 803362e:	f003 fe31 	bl	8037294 <iprintf>

	return 1;
 8033632:	2301      	movs	r3, #1
}
 8033634:	4618      	mov	r0, r3
 8033636:	3710      	adds	r7, #16
 8033638:	46bd      	mov	sp, r7
 803363a:	bd80      	pop	{r7, pc}
 803363c:	0803b528 	.word	0x0803b528
 8033640:	08041a94 	.word	0x08041a94
 8033644:	0803b71c 	.word	0x0803b71c
 8033648:	2000139c 	.word	0x2000139c
 803364c:	200013a0 	.word	0x200013a0
 8033650:	20002358 	.word	0x20002358
 8033654:	0803b730 	.word	0x0803b730

08033658 <cmd_OccPa>:


//========================================================================
int cmd_OccPa     ( int argc, char * argv[] )
//========================================================================
{
 8033658:	b580      	push	{r7, lr}
 803365a:	b084      	sub	sp, #16
 803365c:	af00      	add	r7, sp, #0
 803365e:	6078      	str	r0, [r7, #4]
 8033660:	6039      	str	r1, [r7, #0]
    //	occ [1(start)/0(stop)]	-	대승객방송

//	printf("%s(%d)\n", __func__, __LINE__ );

	//	대승객방송 시작/종료
    int 		nOnOff 	= 0;
 8033662:	2300      	movs	r3, #0
 8033664:	60fb      	str	r3, [r7, #12]

    switch ( argc )
 8033666:	687b      	ldr	r3, [r7, #4]
 8033668:	2b02      	cmp	r3, #2
 803366a:	d109      	bne.n	8033680 <cmd_OccPa+0x28>
    {
    case 2:		sscanf( argv[1], "%d", &nOnOff );	    //	On/Off
 803366c:	683b      	ldr	r3, [r7, #0]
 803366e:	3304      	adds	r3, #4
 8033670:	681b      	ldr	r3, [r3, #0]
 8033672:	f107 020c 	add.w	r2, r7, #12
 8033676:	491b      	ldr	r1, [pc, #108]	; (80336e4 <cmd_OccPa+0x8c>)
 8033678:	4618      	mov	r0, r3
 803367a:	f004 f85d 	bl	8037738 <siscanf>
        break;
 803367e:	bf00      	nop
    }

    if ( nOnOff == 1 )
 8033680:	68fb      	ldr	r3, [r7, #12]
 8033682:	2b01      	cmp	r3, #1
 8033684:	d117      	bne.n	80336b6 <cmd_OccPa+0x5e>
    {
//    	printf("%s(%d) - Start\n", __func__, __LINE__ );
    	printf("[Start][OCC]\n");
 8033686:	4818      	ldr	r0, [pc, #96]	; (80336e8 <cmd_OccPa+0x90>)
 8033688:	f003 fea0 	bl	80373cc <puts>

    	//	OCC Mode
    	SetRFMMode( RFMModeOcc );
 803368c:	2003      	movs	r0, #3
 803368e:	f7ff f857 	bl	8032740 <SetRFMMode>
    	//	Audio Loopback On
		AudioDMALoopback();
#endif

		// 조명 On
		HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
 8033692:	2201      	movs	r2, #1
 8033694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8033698:	4814      	ldr	r0, [pc, #80]	; (80336ec <cmd_OccPa+0x94>)
 803369a:	f7ef ff3f 	bl	802351c <HAL_GPIO_WritePin>

		//	Spk On
		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
 803369e:	2201      	movs	r2, #1
 80336a0:	2120      	movs	r1, #32
 80336a2:	4812      	ldr	r0, [pc, #72]	; (80336ec <cmd_OccPa+0x94>)
 80336a4:	f7ef ff3a 	bl	802351c <HAL_GPIO_WritePin>

		//  수신기 Spk Relay On
		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_SET );
 80336a8:	2201      	movs	r2, #1
 80336aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80336ae:	480f      	ldr	r0, [pc, #60]	; (80336ec <cmd_OccPa+0x94>)
 80336b0:	f7ef ff34 	bl	802351c <HAL_GPIO_WritePin>
 80336b4:	e010      	b.n	80336d8 <cmd_OccPa+0x80>
    }
    else
    {
//    	printf("%s(%d) - Stop\n", __func__, __LINE__ );
    	printf("[Stop][OCC]\n");
 80336b6:	480e      	ldr	r0, [pc, #56]	; (80336f0 <cmd_OccPa+0x98>)
 80336b8:	f003 fe88 	bl	80373cc <puts>

    	//	Normal Mode
    	SetRFMMode( RFMModeNormal );
 80336bc:	2000      	movs	r0, #0
 80336be:	f7ff f83f 	bl	8032740 <SetRFMMode>
    	//	Audio Loopback Off
    	AudioDMARFM();
#endif

    	//	Spk Off.
		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
 80336c2:	2200      	movs	r2, #0
 80336c4:	2120      	movs	r1, #32
 80336c6:	4809      	ldr	r0, [pc, #36]	; (80336ec <cmd_OccPa+0x94>)
 80336c8:	f7ef ff28 	bl	802351c <HAL_GPIO_WritePin>

		//  수신기 Spk Relay Off
		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_RESET );
 80336cc:	2200      	movs	r2, #0
 80336ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80336d2:	4806      	ldr	r0, [pc, #24]	; (80336ec <cmd_OccPa+0x94>)
 80336d4:	f7ef ff22 	bl	802351c <HAL_GPIO_WritePin>
    }
}
 80336d8:	bf00      	nop
 80336da:	4618      	mov	r0, r3
 80336dc:	3710      	adds	r7, #16
 80336de:	46bd      	mov	sp, r7
 80336e0:	bd80      	pop	{r7, pc}
 80336e2:	bf00      	nop
 80336e4:	0803b528 	.word	0x0803b528
 80336e8:	0803b74c 	.word	0x0803b74c
 80336ec:	40021000 	.word	0x40021000
 80336f0:	0803b75c 	.word	0x0803b75c

080336f4 <lowpass_Filter>:

static int16_t	bufAudioEnc[FRAME_ENC_SIZE * 2];	//	Rx
static int16_t	bufAudioDec[FRAME_ENC_SIZE * 2];	//	Tx

signed short lowpass_Filter(signed short input)
{
 80336f4:	b480      	push	{r7}
 80336f6:	b085      	sub	sp, #20
 80336f8:	af00      	add	r7, sp, #0
 80336fa:	4603      	mov	r3, r0
 80336fc:	80fb      	strh	r3, [r7, #6]
	static signed short last_sample=0;
	signed short retvalue = ((input + (last_sample * 7)) >> 3);
 80336fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8033702:	4b0a      	ldr	r3, [pc, #40]	; (803372c <lowpass_Filter+0x38>)
 8033704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8033708:	4619      	mov	r1, r3
 803370a:	460b      	mov	r3, r1
 803370c:	00db      	lsls	r3, r3, #3
 803370e:	1a5b      	subs	r3, r3, r1
 8033710:	4413      	add	r3, r2
 8033712:	10db      	asrs	r3, r3, #3
 8033714:	81fb      	strh	r3, [r7, #14]
	last_sample = retvalue;
 8033716:	4a05      	ldr	r2, [pc, #20]	; (803372c <lowpass_Filter+0x38>)
 8033718:	89fb      	ldrh	r3, [r7, #14]
 803371a:	8013      	strh	r3, [r2, #0]
	return retvalue;
 803371c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8033720:	4618      	mov	r0, r3
 8033722:	3714      	adds	r7, #20
 8033724:	46bd      	mov	sp, r7
 8033726:	f85d 7b04 	ldr.w	r7, [sp], #4
 803372a:	4770      	bx	lr
 803372c:	20002918 	.word	0x20002918

08033730 <RFM_I2SEx_TxRxCpltCallback>:
static int bRxBuffering = 1;	//  Rx Buffering. ( Packet 4 ~ Packet 0)

//========================================================================
void RFM_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
//========================================================================
{
 8033730:	b590      	push	{r4, r7, lr}
 8033732:	b089      	sub	sp, #36	; 0x24
 8033734:	af00      	add	r7, sp, #0
 8033736:	6078      	str	r0, [r7, #4]
	int16_t		*pAudioRx;

	{
#if defined( USE_AUDIO_INTERPOL_COMPRESS )	|| defined( USE_AUDIO_ADPCM ) //	보간압축사용 or ADPCM 사용.

		pAudioTx = &bufAudioDec[FRAME_ENC_SIZE * idx];
 8033738:	4b6f      	ldr	r3, [pc, #444]	; (80338f8 <RFM_I2SEx_TxRxCpltCallback+0x1c8>)
 803373a:	681a      	ldr	r2, [r3, #0]
 803373c:	4613      	mov	r3, r2
 803373e:	011b      	lsls	r3, r3, #4
 8033740:	1a9b      	subs	r3, r3, r2
 8033742:	00db      	lsls	r3, r3, #3
 8033744:	005b      	lsls	r3, r3, #1
 8033746:	4a6d      	ldr	r2, [pc, #436]	; (80338fc <RFM_I2SEx_TxRxCpltCallback+0x1cc>)
 8033748:	4413      	add	r3, r2
 803374a:	617b      	str	r3, [r7, #20]
		pAudioRx = &bufAudioEnc[FRAME_ENC_SIZE * (( idx + 1 ) % 2)];
 803374c:	4b6a      	ldr	r3, [pc, #424]	; (80338f8 <RFM_I2SEx_TxRxCpltCallback+0x1c8>)
 803374e:	681b      	ldr	r3, [r3, #0]
 8033750:	3301      	adds	r3, #1
 8033752:	2b00      	cmp	r3, #0
 8033754:	f003 0301 	and.w	r3, r3, #1
 8033758:	bfb8      	it	lt
 803375a:	425b      	neglt	r3, r3
 803375c:	461a      	mov	r2, r3
 803375e:	4613      	mov	r3, r2
 8033760:	011b      	lsls	r3, r3, #4
 8033762:	1a9b      	subs	r3, r3, r2
 8033764:	00db      	lsls	r3, r3, #3
 8033766:	005b      	lsls	r3, r3, #1
 8033768:	4a65      	ldr	r2, [pc, #404]	; (8033900 <RFM_I2SEx_TxRxCpltCallback+0x1d0>)
 803376a:	4413      	add	r3, r2
 803376c:	613b      	str	r3, [r7, #16]

		HAL_I2SEx_TransmitReceive_DMA( &hi2s3,
 803376e:	2378      	movs	r3, #120	; 0x78
 8033770:	693a      	ldr	r2, [r7, #16]
 8033772:	6979      	ldr	r1, [r7, #20]
 8033774:	4863      	ldr	r0, [pc, #396]	; (8033904 <RFM_I2SEx_TxRxCpltCallback+0x1d4>)
 8033776:	f7f1 fbd1 	bl	8024f1c <HAL_I2SEx_TransmitReceive_DMA>
										pAudioTx,	//	Tx
										pAudioRx,	//	Rx
										FRAME_ENC_SIZE ); // 32byte

		pAudioRx = &bufAudioEnc[FRAME_ENC_SIZE * idx];
 803377a:	4b5f      	ldr	r3, [pc, #380]	; (80338f8 <RFM_I2SEx_TxRxCpltCallback+0x1c8>)
 803377c:	681a      	ldr	r2, [r3, #0]
 803377e:	4613      	mov	r3, r2
 8033780:	011b      	lsls	r3, r3, #4
 8033782:	1a9b      	subs	r3, r3, r2
 8033784:	00db      	lsls	r3, r3, #3
 8033786:	005b      	lsls	r3, r3, #1
 8033788:	4a5d      	ldr	r2, [pc, #372]	; (8033900 <RFM_I2SEx_TxRxCpltCallback+0x1d0>)
 803378a:	4413      	add	r3, r2
 803378c:	613b      	str	r3, [r7, #16]
		idx = ( idx + 1 ) % 2;
 803378e:	4b5a      	ldr	r3, [pc, #360]	; (80338f8 <RFM_I2SEx_TxRxCpltCallback+0x1c8>)
 8033790:	681b      	ldr	r3, [r3, #0]
 8033792:	3301      	adds	r3, #1
 8033794:	2b00      	cmp	r3, #0
 8033796:	f003 0301 	and.w	r3, r3, #1
 803379a:	bfb8      	it	lt
 803379c:	425b      	neglt	r3, r3
 803379e:	4a56      	ldr	r2, [pc, #344]	; (80338f8 <RFM_I2SEx_TxRxCpltCallback+0x1c8>)
 80337a0:	6013      	str	r3, [r2, #0]
		pAudioTx = &bufAudioDec[FRAME_ENC_SIZE * idx];
 80337a2:	4b55      	ldr	r3, [pc, #340]	; (80338f8 <RFM_I2SEx_TxRxCpltCallback+0x1c8>)
 80337a4:	681a      	ldr	r2, [r3, #0]
 80337a6:	4613      	mov	r3, r2
 80337a8:	011b      	lsls	r3, r3, #4
 80337aa:	1a9b      	subs	r3, r3, r2
 80337ac:	00db      	lsls	r3, r3, #3
 80337ae:	005b      	lsls	r3, r3, #1
 80337b0:	4a52      	ldr	r2, [pc, #328]	; (80338fc <RFM_I2SEx_TxRxCpltCallback+0x1cc>)
 80337b2:	4413      	add	r3, r2
 80337b4:	617b      	str	r3, [r7, #20]
		//========================================================================
		//  송신기.

		//  r_audio_buff -> RF-Tx

		if ( qBufCnt( &g_qBufAudioTx ) < ( ( I2S_DMA_LOOP_SIZE * 2 ) * ( I2S_DMA_LOOP_QCNT - 1 ) ) )
 80337b6:	4854      	ldr	r0, [pc, #336]	; (8033908 <RFM_I2SEx_TxRxCpltCallback+0x1d8>)
 80337b8:	f7fa fd50 	bl	802e25c <qBufCnt>
 80337bc:	4603      	mov	r3, r0
 80337be:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80337c2:	da3c      	bge.n	803383e <RFM_I2SEx_TxRxCpltCallback+0x10e>

#elif defined( USE_AUDIO_ADPCM )	//	ADPCM 사용. - 1/4 압축

			//	ADPCM : 16 bit -> 4 bit
			int i;
			uint8_t *pABuf = (uint8_t *)r_audio_buff;
 80337c4:	4b51      	ldr	r3, [pc, #324]	; (803390c <RFM_I2SEx_TxRxCpltCallback+0x1dc>)
 80337c6:	60fb      	str	r3, [r7, #12]
			for( i = 0; i < I2S_DMA_LOOP_SIZE*2; i++ )
 80337c8:	2300      	movs	r3, #0
 80337ca:	61fb      	str	r3, [r7, #28]
 80337cc:	e02f      	b.n	803382e <RFM_I2SEx_TxRxCpltCallback+0xfe>
			{
				//*
				pABuf[i] = (uint8_t)((uint8_t)((ADPCM_Encode(lowpass_Filter((int16_t)pAudioRx[i*2])<<1)&(0x0F))<<4)
 80337ce:	69fb      	ldr	r3, [r7, #28]
 80337d0:	009b      	lsls	r3, r3, #2
 80337d2:	693a      	ldr	r2, [r7, #16]
 80337d4:	4413      	add	r3, r2
 80337d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80337da:	4618      	mov	r0, r3
 80337dc:	f7ff ff8a 	bl	80336f4 <lowpass_Filter>
 80337e0:	4603      	mov	r3, r0
 80337e2:	005b      	lsls	r3, r3, #1
 80337e4:	4618      	mov	r0, r3
 80337e6:	f7fc f85b 	bl	802f8a0 <ADPCM_Encode>
 80337ea:	4603      	mov	r3, r0
 80337ec:	011b      	lsls	r3, r3, #4
 80337ee:	b2db      	uxtb	r3, r3
 80337f0:	b25c      	sxtb	r4, r3
								| (uint8_t)(ADPCM_Encode(lowpass_Filter((int16_t)pAudioRx[i*2+1])<<1)&0x0F));
 80337f2:	69fb      	ldr	r3, [r7, #28]
 80337f4:	009b      	lsls	r3, r3, #2
 80337f6:	3302      	adds	r3, #2
 80337f8:	693a      	ldr	r2, [r7, #16]
 80337fa:	4413      	add	r3, r2
 80337fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8033800:	4618      	mov	r0, r3
 8033802:	f7ff ff77 	bl	80336f4 <lowpass_Filter>
 8033806:	4603      	mov	r3, r0
 8033808:	005b      	lsls	r3, r3, #1
 803380a:	4618      	mov	r0, r3
 803380c:	f7fc f848 	bl	802f8a0 <ADPCM_Encode>
 8033810:	4603      	mov	r3, r0
 8033812:	b25b      	sxtb	r3, r3
 8033814:	f003 030f 	and.w	r3, r3, #15
 8033818:	b25b      	sxtb	r3, r3
 803381a:	4323      	orrs	r3, r4
 803381c:	b259      	sxtb	r1, r3
				pABuf[i] = (uint8_t)((uint8_t)((ADPCM_Encode(lowpass_Filter((int16_t)pAudioRx[i*2])<<1)&(0x0F))<<4)
 803381e:	69fb      	ldr	r3, [r7, #28]
 8033820:	68fa      	ldr	r2, [r7, #12]
 8033822:	4413      	add	r3, r2
 8033824:	b2ca      	uxtb	r2, r1
 8033826:	701a      	strb	r2, [r3, #0]
			for( i = 0; i < I2S_DMA_LOOP_SIZE*2; i++ )
 8033828:	69fb      	ldr	r3, [r7, #28]
 803382a:	3301      	adds	r3, #1
 803382c:	61fb      	str	r3, [r7, #28]
 803382e:	69fb      	ldr	r3, [r7, #28]
 8033830:	2b3b      	cmp	r3, #59	; 0x3b
 8033832:	ddcc      	ble.n	80337ce <RFM_I2SEx_TxRxCpltCallback+0x9e>
				pABuf[i] = (uint8_t)((uint8_t)((ADPCM_Encode((int16_t)pAudioRx[i*2])&(0x0F))<<4)
								| (uint8_t)(ADPCM_Encode((int16_t)pAudioRx[i*2+1])&0x0F));
				//	*/
			}

			qBufPut( &g_qBufAudioTx, (uint8_t *)r_audio_buff, ( I2S_DMA_LOOP_SIZE * 2 ) );
 8033834:	223c      	movs	r2, #60	; 0x3c
 8033836:	4935      	ldr	r1, [pc, #212]	; (803390c <RFM_I2SEx_TxRxCpltCallback+0x1dc>)
 8033838:	4833      	ldr	r0, [pc, #204]	; (8033908 <RFM_I2SEx_TxRxCpltCallback+0x1d8>)
 803383a:	f7fa fd28 	bl	802e28e <qBufPut>
		memcpy( t_audio_buff, r_audio_buff, 64 );

		/*/

#if defined( USE_AUDIO_INTERPOL_COMPRESS ) || defined( USE_AUDIO_ADPCM )	//	보간압축사용 or ACPCM 사용
		memset( pAudioTx, 0, FRAME_ENC_SIZE * 2 );	//	Tx
 803383e:	22f0      	movs	r2, #240	; 0xf0
 8033840:	2100      	movs	r1, #0
 8033842:	6978      	ldr	r0, [r7, #20]
 8033844:	f003 fc3e 	bl	80370c4 <memset>
#endif

		//========================================================================
		//  Rx Buffering ( Packet Count : 0 ~ 4 )
		//  RF-Rx -> t_audio_buff
		if ( bRxBuffering )
 8033848:	4b31      	ldr	r3, [pc, #196]	; (8033910 <RFM_I2SEx_TxRxCpltCallback+0x1e0>)
 803384a:	681b      	ldr	r3, [r3, #0]
 803384c:	2b00      	cmp	r3, #0
 803384e:	d00b      	beq.n	8033868 <RFM_I2SEx_TxRxCpltCallback+0x138>
		{
			//  Buffering
			if ( qBufCnt( &g_qBufAudioRx ) > ( ( I2S_DMA_LOOP_SIZE * 2 ) * 3 ) )
 8033850:	4830      	ldr	r0, [pc, #192]	; (8033914 <RFM_I2SEx_TxRxCpltCallback+0x1e4>)
 8033852:	f7fa fd03 	bl	802e25c <qBufCnt>
 8033856:	4603      	mov	r3, r0
 8033858:	2bb4      	cmp	r3, #180	; 0xb4
 803385a:	dd05      	ble.n	8033868 <RFM_I2SEx_TxRxCpltCallback+0x138>
			{
				//  패킷이 4개 이상인경우 버퍼링 종료.
				bRxBuffering = 0;
 803385c:	4b2c      	ldr	r3, [pc, #176]	; (8033910 <RFM_I2SEx_TxRxCpltCallback+0x1e0>)
 803385e:	2200      	movs	r2, #0
 8033860:	601a      	str	r2, [r3, #0]

				printf ( "F" );	 //  버퍼링종료 ( Buffering End - Buffer Full )
 8033862:	2046      	movs	r0, #70	; 0x46
 8033864:	f003 fd2e 	bl	80372c4 <putchar>
			}
		}

		if ( bRxBuffering == 0 )
 8033868:	4b29      	ldr	r3, [pc, #164]	; (8033910 <RFM_I2SEx_TxRxCpltCallback+0x1e0>)
 803386a:	681b      	ldr	r3, [r3, #0]
 803386c:	2b00      	cmp	r3, #0
 803386e:	d13e      	bne.n	80338ee <RFM_I2SEx_TxRxCpltCallback+0x1be>
		{
			//  Rx Audio Out
			if ( qBufCnt( &g_qBufAudioRx ) >= ( I2S_DMA_LOOP_SIZE * 2 ) )
 8033870:	4828      	ldr	r0, [pc, #160]	; (8033914 <RFM_I2SEx_TxRxCpltCallback+0x1e4>)
 8033872:	f7fa fcf3 	bl	802e25c <qBufCnt>
 8033876:	4603      	mov	r3, r0
 8033878:	2b3b      	cmp	r3, #59	; 0x3b
 803387a:	dd30      	ble.n	80338de <RFM_I2SEx_TxRxCpltCallback+0x1ae>
			//		outBuf[ i ] = bufAudioDec[i / AUDIO_COMPR_RATE];
				}

#elif defined( USE_AUDIO_ADPCM )	//	ADPCM 사용. - 1/4 압축

				qBufGet( &g_qBufAudioRx, (uint8_t*)t_audio_buff, ( I2S_DMA_LOOP_SIZE * 2 ) );
 803387c:	223c      	movs	r2, #60	; 0x3c
 803387e:	4926      	ldr	r1, [pc, #152]	; (8033918 <RFM_I2SEx_TxRxCpltCallback+0x1e8>)
 8033880:	4824      	ldr	r0, [pc, #144]	; (8033914 <RFM_I2SEx_TxRxCpltCallback+0x1e4>)
 8033882:	f7fa fd38 	bl	802e2f6 <qBufGet>

				uint8_t *pABuf = (uint8_t *)t_audio_buff;
 8033886:	4b24      	ldr	r3, [pc, #144]	; (8033918 <RFM_I2SEx_TxRxCpltCallback+0x1e8>)
 8033888:	60bb      	str	r3, [r7, #8]
				//	Decoding : 4 bit -> 16 bit
				int i;
				for( i = 0; i < FRAME_ENC_SIZE/2; i++ )
 803388a:	2300      	movs	r3, #0
 803388c:	61bb      	str	r3, [r7, #24]
 803388e:	e022      	b.n	80338d6 <RFM_I2SEx_TxRxCpltCallback+0x1a6>
				{
					pAudioTx[i*2] = (uint16_t)ADPCM_Decode((uint8_t)((pABuf[i]&(0xF0)))>>4);
 8033890:	69bb      	ldr	r3, [r7, #24]
 8033892:	68ba      	ldr	r2, [r7, #8]
 8033894:	4413      	add	r3, r2
 8033896:	781b      	ldrb	r3, [r3, #0]
 8033898:	091b      	lsrs	r3, r3, #4
 803389a:	b2d9      	uxtb	r1, r3
 803389c:	69bb      	ldr	r3, [r7, #24]
 803389e:	009b      	lsls	r3, r3, #2
 80338a0:	697a      	ldr	r2, [r7, #20]
 80338a2:	18d4      	adds	r4, r2, r3
 80338a4:	4608      	mov	r0, r1
 80338a6:	f7fc f8b3 	bl	802fa10 <ADPCM_Decode>
 80338aa:	4603      	mov	r3, r0
 80338ac:	8023      	strh	r3, [r4, #0]
					pAudioTx[i*2+1] = (uint16_t)ADPCM_Decode((uint8_t)(pABuf[i]&0x0F));
 80338ae:	69bb      	ldr	r3, [r7, #24]
 80338b0:	68ba      	ldr	r2, [r7, #8]
 80338b2:	4413      	add	r3, r2
 80338b4:	781b      	ldrb	r3, [r3, #0]
 80338b6:	f003 030f 	and.w	r3, r3, #15
 80338ba:	b2d9      	uxtb	r1, r3
 80338bc:	69bb      	ldr	r3, [r7, #24]
 80338be:	009b      	lsls	r3, r3, #2
 80338c0:	3302      	adds	r3, #2
 80338c2:	697a      	ldr	r2, [r7, #20]
 80338c4:	18d4      	adds	r4, r2, r3
 80338c6:	4608      	mov	r0, r1
 80338c8:	f7fc f8a2 	bl	802fa10 <ADPCM_Decode>
 80338cc:	4603      	mov	r3, r0
 80338ce:	8023      	strh	r3, [r4, #0]
				for( i = 0; i < FRAME_ENC_SIZE/2; i++ )
 80338d0:	69bb      	ldr	r3, [r7, #24]
 80338d2:	3301      	adds	r3, #1
 80338d4:	61bb      	str	r3, [r7, #24]
 80338d6:	69bb      	ldr	r3, [r7, #24]
 80338d8:	2b3b      	cmp	r3, #59	; 0x3b
 80338da:	ddd9      	ble.n	8033890 <RFM_I2SEx_TxRxCpltCallback+0x160>

			}
		}
		//  */
	}
}
 80338dc:	e007      	b.n	80338ee <RFM_I2SEx_TxRxCpltCallback+0x1be>
				printf ( "B" );	 //  버퍼링시작 ( Buffering )
 80338de:	2042      	movs	r0, #66	; 0x42
 80338e0:	f003 fcf0 	bl	80372c4 <putchar>
				bRxBuffering = 1;
 80338e4:	4b0a      	ldr	r3, [pc, #40]	; (8033910 <RFM_I2SEx_TxRxCpltCallback+0x1e0>)
 80338e6:	2201      	movs	r2, #1
 80338e8:	601a      	str	r2, [r3, #0]
				ADPCM_ClearDecodeBuf();
 80338ea:	f7fb ffc7 	bl	802f87c <ADPCM_ClearDecodeBuf>
}
 80338ee:	bf00      	nop
 80338f0:	3724      	adds	r7, #36	; 0x24
 80338f2:	46bd      	mov	sp, r7
 80338f4:	bd90      	pop	{r4, r7, pc}
 80338f6:	bf00      	nop
 80338f8:	2000291c 	.word	0x2000291c
 80338fc:	20002730 	.word	0x20002730
 8033900:	20002550 	.word	0x20002550
 8033904:	20000ee0 	.word	0x20000ee0
 8033908:	20001f78 	.word	0x20001f78
 803390c:	200021e0 	.word	0x200021e0
 8033910:	20000bf4 	.word	0x20000bf4
 8033914:	20001d88 	.word	0x20001d88
 8033918:	20002168 	.word	0x20002168

0803391c <InitRFM>:
//========================================================================

//========================================================================
int InitRFM( void )
//========================================================================
{
 803391c:	b590      	push	{r4, r7, lr}
 803391e:	b08d      	sub	sp, #52	; 0x34
 8033920:	af04      	add	r7, sp, #16
	printf( "%s(%d)\n", __func__, __LINE__ );
 8033922:	f240 5275 	movw	r2, #1397	; 0x575
 8033926:	49b2      	ldr	r1, [pc, #712]	; (8033bf0 <InitRFM+0x2d4>)
 8033928:	48b2      	ldr	r0, [pc, #712]	; (8033bf4 <InitRFM+0x2d8>)
 803392a:	f003 fcb3 	bl	8037294 <iprintf>

	//========================================================================
	I2C_BusScan( &hi2c1 );
 803392e:	48b2      	ldr	r0, [pc, #712]	; (8033bf8 <InitRFM+0x2dc>)
 8033930:	f7fd fb2c 	bl	8030f8c <I2C_BusScan>
	I2C_BusScan( &hi2c3 );
 8033934:	48b1      	ldr	r0, [pc, #708]	; (8033bfc <InitRFM+0x2e0>)
 8033936:	f7fd fb29 	bl	8030f8c <I2C_BusScan>

	//========================================================================
	//	Car Number 설정.
	g_flagRspID |= (0x1 << GetCarNo());		//	자신의 ID Flag 설정.
 803393a:	f7ff fa93 	bl	8032e64 <GetCarNo>
 803393e:	4603      	mov	r3, r0
 8033940:	2201      	movs	r2, #1
 8033942:	fa02 f303 	lsl.w	r3, r2, r3
 8033946:	b21a      	sxth	r2, r3
 8033948:	4bad      	ldr	r3, [pc, #692]	; (8033c00 <InitRFM+0x2e4>)
 803394a:	881b      	ldrh	r3, [r3, #0]
 803394c:	b21b      	sxth	r3, r3
 803394e:	4313      	orrs	r3, r2
 8033950:	b21b      	sxth	r3, r3
 8033952:	b29a      	uxth	r2, r3
 8033954:	4baa      	ldr	r3, [pc, #680]	; (8033c00 <InitRFM+0x2e4>)
 8033956:	801a      	strh	r2, [r3, #0]

	//========================================================================
	//	Codec MAX9860ETG+
	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), 2, 2 ) )
 8033958:	2302      	movs	r3, #2
 803395a:	2202      	movs	r2, #2
 803395c:	2120      	movs	r1, #32
 803395e:	48a6      	ldr	r0, [pc, #664]	; (8033bf8 <InitRFM+0x2dc>)
 8033960:	f7f0 fb8a 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8033964:	4603      	mov	r3, r0
 8033966:	2b00      	cmp	r3, #0
 8033968:	d12c      	bne.n	80339c4 <InitRFM+0xa8>
	{
		//  Read Rev.
		char buf[10];
		int cntRetry;

		cntRetry = 0;
 803396a:	2300      	movs	r3, #0
 803396c:	61fb      	str	r3, [r7, #28]

		memset( buf, 0, sizeof( buf ) );
 803396e:	1d3b      	adds	r3, r7, #4
 8033970:	220a      	movs	r2, #10
 8033972:	2100      	movs	r1, #0
 8033974:	4618      	mov	r0, r3
 8033976:	f003 fba5 	bl	80370c4 <memset>
		while ( HAL_I2C_Mem_Read( &hi2c1, (uint16_t)( 0x10 << 1 ), (uint16_t)0xFF, I2C_MEMADD_SIZE_8BIT, buf, (uint16_t)1, 1000 ) != HAL_OK && cntRetry < 10 ) cntRetry++;
 803397a:	e002      	b.n	8033982 <InitRFM+0x66>
 803397c:	69fb      	ldr	r3, [r7, #28]
 803397e:	3301      	adds	r3, #1
 8033980:	61fb      	str	r3, [r7, #28]
 8033982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8033986:	9302      	str	r3, [sp, #8]
 8033988:	2301      	movs	r3, #1
 803398a:	9301      	str	r3, [sp, #4]
 803398c:	1d3b      	adds	r3, r7, #4
 803398e:	9300      	str	r3, [sp, #0]
 8033990:	2301      	movs	r3, #1
 8033992:	22ff      	movs	r2, #255	; 0xff
 8033994:	2120      	movs	r1, #32
 8033996:	4898      	ldr	r0, [pc, #608]	; (8033bf8 <InitRFM+0x2dc>)
 8033998:	f7f0 f948 	bl	8023c2c <HAL_I2C_Mem_Read>
 803399c:	4603      	mov	r3, r0
 803399e:	2b00      	cmp	r3, #0
 80339a0:	d002      	beq.n	80339a8 <InitRFM+0x8c>
 80339a2:	69fb      	ldr	r3, [r7, #28]
 80339a4:	2b09      	cmp	r3, #9
 80339a6:	dde9      	ble.n	803397c <InitRFM+0x60>

		printf( "%s(%d) - Codec ( MAX9860ETG+ ) / Rev. 0x%02X\n", __func__, __LINE__, buf[0] );
 80339a8:	793b      	ldrb	r3, [r7, #4]
 80339aa:	f240 528c 	movw	r2, #1420	; 0x58c
 80339ae:	4990      	ldr	r1, [pc, #576]	; (8033bf0 <InitRFM+0x2d4>)
 80339b0:	4894      	ldr	r0, [pc, #592]	; (8033c04 <InitRFM+0x2e8>)
 80339b2:	f003 fc6f 	bl	8037294 <iprintf>

		//========================================================================
		//  Codec 초기화.
		InitCodecMAX9860();
 80339b6:	f7fc f9a5 	bl	802fd04 <InitCodecMAX9860>

		//========================================================================
		//	Init Audio ( I2S PCM )
		AudioInit();
 80339ba:	f7fc f8b3 	bl	802fb24 <AudioInit>

		//========================================================================
		//	I2S Callback 등록.
		SetCallbackI2STxRxCplt( RFM_I2SEx_TxRxCpltCallback );
 80339be:	4892      	ldr	r0, [pc, #584]	; (8033c08 <InitRFM+0x2ec>)
 80339c0:	f7fc f910 	bl	802fbe4 <SetCallbackI2STxRxCplt>
		//========================================================================
	}

	//========================================================================
	//	편성번호 Load
	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), 2, 2 ) )
 80339c4:	2302      	movs	r3, #2
 80339c6:	2202      	movs	r2, #2
 80339c8:	21a0      	movs	r1, #160	; 0xa0
 80339ca:	488b      	ldr	r0, [pc, #556]	; (8033bf8 <InitRFM+0x2dc>)
 80339cc:	f7f0 fb54 	bl	8024078 <HAL_I2C_IsDeviceReady>
 80339d0:	4603      	mov	r3, r0
 80339d2:	2b00      	cmp	r3, #0
 80339d4:	d118      	bne.n	8033a08 <InitRFM+0xec>
	{
		printf( "%s(%d) - EEPROM OK\n", __func__, __LINE__ );
 80339d6:	f240 52a2 	movw	r2, #1442	; 0x5a2
 80339da:	4985      	ldr	r1, [pc, #532]	; (8033bf0 <InitRFM+0x2d4>)
 80339dc:	488b      	ldr	r0, [pc, #556]	; (8033c0c <InitRFM+0x2f0>)
 80339de:	f003 fc59 	bl	8037294 <iprintf>
		TestEEPROM( &hi2c1 ); //  Test EEPROM
 80339e2:	4885      	ldr	r0, [pc, #532]	; (8033bf8 <InitRFM+0x2dc>)
 80339e4:	f7fd fb0a 	bl	8030ffc <TestEEPROM>

		//========================================================================
		//  Read TrainSet
		uint8_t	 idxTrainSet;
		idxTrainSet = GetTrainSetIdx();
 80339e8:	f7ff f8ca 	bl	8032b80 <GetTrainSetIdx>
 80339ec:	4603      	mov	r3, r0
 80339ee:	76fb      	strb	r3, [r7, #27]

		if ( idxTrainSet < 0 || idxTrainSet >= MaxTrainSet )
 80339f0:	7efb      	ldrb	r3, [r7, #27]
 80339f2:	2b13      	cmp	r3, #19
 80339f4:	d905      	bls.n	8033a02 <InitRFM+0xe6>
		{
			idxTrainSet = 0;
 80339f6:	2300      	movs	r3, #0
 80339f8:	76fb      	strb	r3, [r7, #27]

			SetTrainSetIdx( idxTrainSet );
 80339fa:	7efb      	ldrb	r3, [r7, #27]
 80339fc:	4618      	mov	r0, r3
 80339fe:	f7ff f8d5 	bl	8032bac <SetTrainSetIdx>
		}

		g_idxTrainSet = idxTrainSet;
 8033a02:	7efb      	ldrb	r3, [r7, #27]
 8033a04:	4a82      	ldr	r2, [pc, #520]	; (8033c10 <InitRFM+0x2f4>)
 8033a06:	6013      	str	r3, [r2, #0]
	}

	//========================================================================
	//	OLED
	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c3, (uint16_t)( SSD1306_I2C_ADDRESS ), 2, 2 ) )
 8033a08:	2302      	movs	r3, #2
 8033a0a:	2202      	movs	r2, #2
 8033a0c:	2178      	movs	r1, #120	; 0x78
 8033a0e:	487b      	ldr	r0, [pc, #492]	; (8033bfc <InitRFM+0x2e0>)
 8033a10:	f7f0 fb32 	bl	8024078 <HAL_I2C_IsDeviceReady>
 8033a14:	4603      	mov	r3, r0
 8033a16:	2b00      	cmp	r3, #0
 8033a18:	d145      	bne.n	8033aa6 <InitRFM+0x18a>
	{
		//========================================================================
		//	OLED가 연결되어있음.
		SetDevID( DevRF900T );	 //  송신기.
 8033a1a:	2002      	movs	r0, #2
 8033a1c:	f7fe fe64 	bl	80326e8 <SetDevID>

		//	LCD Init
		LCDInit();
 8033a20:	f7f8 fe62 	bl	802c6e8 <LCDInit>

		LCDClear();
 8033a24:	f7f8 fff8 	bl	802ca18 <LCDClear>
		LCDDrawRect( 0, 0, 128, 32, 1 );
 8033a28:	2301      	movs	r3, #1
 8033a2a:	9300      	str	r3, [sp, #0]
 8033a2c:	2320      	movs	r3, #32
 8033a2e:	2280      	movs	r2, #128	; 0x80
 8033a30:	2100      	movs	r1, #0
 8033a32:	2000      	movs	r0, #0
 8033a34:	f7f9 f81e 	bl	802ca74 <LCDDrawRect>

		HAL_Delay( 500 );
 8033a38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8033a3c:	f7ee f8a0 	bl	8021b80 <HAL_Delay>

		//  LCD : 메뉴 화면.
		LCDMenu();
 8033a40:	f7f8 ff12 	bl	802c868 <LCDMenu>

		//  LCD :   편성 : 100
		//========================================================================
		//  편성 : XXX
		UpdateLCDMain();
 8033a44:	f7fe f94c 	bl	8031ce0 <UpdateLCDMain>

		//  LCD : Light Icon
		LCDLight( 0 );
 8033a48:	2000      	movs	r0, #0
 8033a4a:	f7f8 fe97 	bl	802c77c <LCDLight>
		//========================================================================
		//  Spk Vol Set
		//  Default (1) - 0(Mute) / 1 / 2(Normal) / 3

		int	 nSpkVol;
		nSpkVol = GetSpkVol();
 8033a4e:	f7ff fa57 	bl	8032f00 <GetSpkVol>
 8033a52:	6178      	str	r0, [r7, #20]

		if ( nSpkVol < 0 || nSpkVol > MaxSpkVol )
 8033a54:	697b      	ldr	r3, [r7, #20]
 8033a56:	2b00      	cmp	r3, #0
 8033a58:	db02      	blt.n	8033a60 <InitRFM+0x144>
 8033a5a:	697b      	ldr	r3, [r7, #20]
 8033a5c:	2b03      	cmp	r3, #3
 8033a5e:	dd04      	ble.n	8033a6a <InitRFM+0x14e>
		{
			nSpkVol = DefaultSpkVol;
 8033a60:	2301      	movs	r3, #1
 8033a62:	617b      	str	r3, [r7, #20]
			SetSpkVol( nSpkVol );
 8033a64:	6978      	ldr	r0, [r7, #20]
 8033a66:	f7ff fa7f 	bl	8032f68 <SetSpkVol>
		}

		g_nSpkLevel = nSpkVol;
 8033a6a:	4a6a      	ldr	r2, [pc, #424]	; (8033c14 <InitRFM+0x2f8>)
 8033a6c:	697b      	ldr	r3, [r7, #20]
 8033a6e:	6013      	str	r3, [r2, #0]

		//  LCD : Spk Icon
		LCDSpeaker( g_nSpkLevel );		//  Spk Icon : Spk On
 8033a70:	4b68      	ldr	r3, [pc, #416]	; (8033c14 <InitRFM+0x2f8>)
 8033a72:	681b      	ldr	r3, [r3, #0]
 8033a74:	4618      	mov	r0, r3
 8033a76:	f7f8 feb9 	bl	802c7ec <LCDSpeaker>
		//========================================================================
		//  Mic Vol Set
		//  Default (5) - 0 ~ 9

		int	 nMicVol;
		nMicVol = GetMicVol();
 8033a7a:	f7ff fab1 	bl	8032fe0 <GetMicVol>
 8033a7e:	6138      	str	r0, [r7, #16]

		if ( nMicVol < 0 || nMicVol > MaxMicVol )
 8033a80:	693b      	ldr	r3, [r7, #16]
 8033a82:	2b00      	cmp	r3, #0
 8033a84:	db02      	blt.n	8033a8c <InitRFM+0x170>
 8033a86:	693b      	ldr	r3, [r7, #16]
 8033a88:	2b09      	cmp	r3, #9
 8033a8a:	dd04      	ble.n	8033a96 <InitRFM+0x17a>
		{
			nMicVol = DefaultMicVol;
 8033a8c:	2305      	movs	r3, #5
 8033a8e:	613b      	str	r3, [r7, #16]
			SetMicVol( nMicVol );
 8033a90:	6938      	ldr	r0, [r7, #16]
 8033a92:	f7ff fad9 	bl	8033048 <SetMicVol>
		}

		//========================================================================
#if defined(USE_AUDIO_INTERPOL_COMPRESS) || defined( USE_AUDIO_ADPCM )
		//	보간압축 or ADPCM 사용시 음량 Level 조절.
		WriteI2CCodec( 0x0B, 0x60 );	//  10 ( +18 dB )
 8033a96:	2160      	movs	r1, #96	; 0x60
 8033a98:	200b      	movs	r0, #11
 8033a9a:	f7fc f8f3 	bl	802fc84 <WriteI2CCodec>
#endif

#if defined(USE_HOP_MANUAL)
		//	g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
		g_nManHopping	=	2;	//	Hopping Diable
 8033a9e:	4b5e      	ldr	r3, [pc, #376]	; (8033c18 <InitRFM+0x2fc>)
 8033aa0:	2202      	movs	r2, #2
 8033aa2:	601a      	str	r2, [r3, #0]
 8033aa4:	e013      	b.n	8033ace <InitRFM+0x1b2>
	}
	else
	{
		//========================================================================
		//	OLED가 없으면 -> 수신기
		SetDevID( DevRF900M );	 //  수신기.
 8033aa6:	2001      	movs	r0, #1
 8033aa8:	f7fe fe1e 	bl	80326e8 <SetDevID>

		//  수신기 스피커 레벨 변경.
		//	20.09.01 - 2호선 24칸차량설정.
		WriteI2CCodec( 0x09, 0x06 );	//  0x06 ( 0 )
 8033aac:	2106      	movs	r1, #6
 8033aae:	2009      	movs	r0, #9
 8033ab0:	f7fc f8e8 	bl	802fc84 <WriteI2CCodec>

#if defined(USE_HOP_MANUAL)
		//	g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
		g_nManHopping	=	GetManHop();	//	Hopping Diable
 8033ab4:	f7ff f926 	bl	8032d04 <GetManHop>
 8033ab8:	4603      	mov	r3, r0
 8033aba:	4a57      	ldr	r2, [pc, #348]	; (8033c18 <InitRFM+0x2fc>)
 8033abc:	6013      	str	r3, [r2, #0]

		printf("%s(%d) - Man Hopping ( %d )\n", __func__, __LINE__, g_nManHopping );
 8033abe:	4b56      	ldr	r3, [pc, #344]	; (8033c18 <InitRFM+0x2fc>)
 8033ac0:	681b      	ldr	r3, [r3, #0]
 8033ac2:	f44f 62c1 	mov.w	r2, #1544	; 0x608
 8033ac6:	494a      	ldr	r1, [pc, #296]	; (8033bf0 <InitRFM+0x2d4>)
 8033ac8:	4854      	ldr	r0, [pc, #336]	; (8033c1c <InitRFM+0x300>)
 8033aca:	f003 fbe3 	bl	8037294 <iprintf>
	}
	//========================================================================

#if defined(USE_RF_COMM_MODE)
		//	g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
		g_nRFMode	=	GetRFMode();	//	Hopping Diable
 8033ace:	f7ff f8a5 	bl	8032c1c <GetRFMode>
 8033ad2:	4603      	mov	r3, r0
 8033ad4:	4a52      	ldr	r2, [pc, #328]	; (8033c20 <InitRFM+0x304>)
 8033ad6:	6013      	str	r3, [r2, #0]

		printf("%s(%d) - RFMode ( %d )\n", __func__, __LINE__, g_nRFMode );
 8033ad8:	4b51      	ldr	r3, [pc, #324]	; (8033c20 <InitRFM+0x304>)
 8033ada:	681b      	ldr	r3, [r3, #0]
 8033adc:	f240 6212 	movw	r2, #1554	; 0x612
 8033ae0:	4943      	ldr	r1, [pc, #268]	; (8033bf0 <InitRFM+0x2d4>)
 8033ae2:	4850      	ldr	r0, [pc, #320]	; (8033c24 <InitRFM+0x308>)
 8033ae4:	f003 fbd6 	bl	8037294 <iprintf>
#endif	//	defined(USE_HOP_MANUAL)

#if defined(USE_RFT_ONLY_RX_SPK_ON)

	if ( GetDevID() == DevRF900T )
 8033ae8:	f7fe fdf2 	bl	80326d0 <GetDevID>
 8033aec:	4603      	mov	r3, r0
 8033aee:	2b02      	cmp	r3, #2
 8033af0:	d102      	bne.n	8033af8 <InitRFM+0x1dc>
	{
		//  송신기 : 수신중이 아닌경우 SPK OFF
//		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
		RFM_Spk(0);
 8033af2:	2000      	movs	r0, #0
 8033af4:	f7ff fae4 	bl	80330c0 <RFM_Spk>

#else

	//========================================================================
	//	Drivers/radio
	vRadio_Init ();
 8033af8:	f7f9 fb84 	bl	802d204 <vRadio_Init>

	//========================================================================
	vRadio_Init ();		//	FIXME : 일부 송신기가 2회 초기화를 해야 초기화되는 경우가 있음.
 8033afc:	f7f9 fb82 	bl	802d204 <vRadio_Init>
	//========================================================================

	si446x_part_info ();
 8033b00:	f7f9 f9b0 	bl	802ce64 <si446x_part_info>

	printf ( "=========================\n" );
 8033b04:	4848      	ldr	r0, [pc, #288]	; (8033c28 <InitRFM+0x30c>)
 8033b06:	f003 fc61 	bl	80373cc <puts>
	printf ( "%08x\n", Si446xCmd.PART_INFO.CHIPREV );
 8033b0a:	4b48      	ldr	r3, [pc, #288]	; (8033c2c <InitRFM+0x310>)
 8033b0c:	781b      	ldrb	r3, [r3, #0]
 8033b0e:	4619      	mov	r1, r3
 8033b10:	4847      	ldr	r0, [pc, #284]	; (8033c30 <InitRFM+0x314>)
 8033b12:	f003 fbbf 	bl	8037294 <iprintf>
	printf ( "%08x\n", Si446xCmd.PART_INFO.PART );
 8033b16:	4b45      	ldr	r3, [pc, #276]	; (8033c2c <InitRFM+0x310>)
 8033b18:	685b      	ldr	r3, [r3, #4]
 8033b1a:	4619      	mov	r1, r3
 8033b1c:	4844      	ldr	r0, [pc, #272]	; (8033c30 <InitRFM+0x314>)
 8033b1e:	f003 fbb9 	bl	8037294 <iprintf>
	printf ( "%08x\n", Si446xCmd.PART_INFO.PBUILD );
 8033b22:	4b42      	ldr	r3, [pc, #264]	; (8033c2c <InitRFM+0x310>)
 8033b24:	7a1b      	ldrb	r3, [r3, #8]
 8033b26:	4619      	mov	r1, r3
 8033b28:	4841      	ldr	r0, [pc, #260]	; (8033c30 <InitRFM+0x314>)
 8033b2a:	f003 fbb3 	bl	8037294 <iprintf>
	printf ( "%08x\n", Si446xCmd.PART_INFO.ID );
 8033b2e:	4b3f      	ldr	r3, [pc, #252]	; (8033c2c <InitRFM+0x310>)
 8033b30:	68db      	ldr	r3, [r3, #12]
 8033b32:	4619      	mov	r1, r3
 8033b34:	483e      	ldr	r0, [pc, #248]	; (8033c30 <InitRFM+0x314>)
 8033b36:	f003 fbad 	bl	8037294 <iprintf>
	printf ( "%08x\n", Si446xCmd.PART_INFO.CUSTOMER );
 8033b3a:	4b3c      	ldr	r3, [pc, #240]	; (8033c2c <InitRFM+0x310>)
 8033b3c:	7c1b      	ldrb	r3, [r3, #16]
 8033b3e:	4619      	mov	r1, r3
 8033b40:	483b      	ldr	r0, [pc, #236]	; (8033c30 <InitRFM+0x314>)
 8033b42:	f003 fba7 	bl	8037294 <iprintf>
	printf ( "%08x\n", Si446xCmd.PART_INFO.ROMID );
 8033b46:	4b39      	ldr	r3, [pc, #228]	; (8033c2c <InitRFM+0x310>)
 8033b48:	7c5b      	ldrb	r3, [r3, #17]
 8033b4a:	4619      	mov	r1, r3
 8033b4c:	4838      	ldr	r0, [pc, #224]	; (8033c30 <InitRFM+0x314>)
 8033b4e:	f003 fba1 	bl	8037294 <iprintf>
	printf ( "-------------------------\n" );
 8033b52:	4838      	ldr	r0, [pc, #224]	; (8033c34 <InitRFM+0x318>)
 8033b54:	f003 fc3a 	bl	80373cc <puts>
	//========================================================================
	//	Radio 초기화 이후 채널 설정해줌.
	{
		//========================================================================
		//  Radio Channel 설정.
		pRadioConfiguration->Radio_ChannelNumber = g_idxTrainSet;
 8033b58:	4b2d      	ldr	r3, [pc, #180]	; (8033c10 <InitRFM+0x2f4>)
 8033b5a:	681a      	ldr	r2, [r3, #0]
 8033b5c:	4b36      	ldr	r3, [pc, #216]	; (8033c38 <InitRFM+0x31c>)
 8033b5e:	681b      	ldr	r3, [r3, #0]
 8033b60:	b2d2      	uxtb	r2, r2
 8033b62:	711a      	strb	r2, [r3, #4]
		printf("%s(%d) - Radio Ch(%d) / g_idxTrainSet(%d)\n", __func__, __LINE__,
				pRadioConfiguration->Radio_ChannelNumber, g_idxTrainSet );
 8033b64:	4b34      	ldr	r3, [pc, #208]	; (8033c38 <InitRFM+0x31c>)
 8033b66:	681b      	ldr	r3, [r3, #0]
 8033b68:	791b      	ldrb	r3, [r3, #4]
		printf("%s(%d) - Radio Ch(%d) / g_idxTrainSet(%d)\n", __func__, __LINE__,
 8033b6a:	461a      	mov	r2, r3
 8033b6c:	4b28      	ldr	r3, [pc, #160]	; (8033c10 <InitRFM+0x2f4>)
 8033b6e:	681b      	ldr	r3, [r3, #0]
 8033b70:	9300      	str	r3, [sp, #0]
 8033b72:	4613      	mov	r3, r2
 8033b74:	f240 6245 	movw	r2, #1605	; 0x645
 8033b78:	491d      	ldr	r1, [pc, #116]	; (8033bf0 <InitRFM+0x2d4>)
 8033b7a:	4830      	ldr	r0, [pc, #192]	; (8033c3c <InitRFM+0x320>)
 8033b7c:	f003 fb8a 	bl	8037294 <iprintf>

	//========================================================================
	//	Random seed 설정.
	//	편성 & 호차 & TickCount로 설정.

	srand( HAL_GetTick() * 100 + GetTrainSetIdx() * 10 + GetCarNo() );
 8033b80:	f7ed fff2 	bl	8021b68 <HAL_GetTick>
 8033b84:	4603      	mov	r3, r0
 8033b86:	2264      	movs	r2, #100	; 0x64
 8033b88:	fb02 f403 	mul.w	r4, r2, r3
 8033b8c:	f7fe fff8 	bl	8032b80 <GetTrainSetIdx>
 8033b90:	4602      	mov	r2, r0
 8033b92:	4613      	mov	r3, r2
 8033b94:	009b      	lsls	r3, r3, #2
 8033b96:	4413      	add	r3, r2
 8033b98:	005b      	lsls	r3, r3, #1
 8033b9a:	441c      	add	r4, r3
 8033b9c:	f7ff f962 	bl	8032e64 <GetCarNo>
 8033ba0:	4603      	mov	r3, r0
 8033ba2:	4423      	add	r3, r4
 8033ba4:	4618      	mov	r0, r3
 8033ba6:	f003 fc19 	bl	80373dc <srand>

	//	Set Offset
	g_offsetCA = rand() % 1000;
 8033baa:	f003 fc45 	bl	8037438 <rand>
 8033bae:	4602      	mov	r2, r0
 8033bb0:	4b23      	ldr	r3, [pc, #140]	; (8033c40 <InitRFM+0x324>)
 8033bb2:	fb83 1302 	smull	r1, r3, r3, r2
 8033bb6:	1199      	asrs	r1, r3, #6
 8033bb8:	17d3      	asrs	r3, r2, #31
 8033bba:	1acb      	subs	r3, r1, r3
 8033bbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8033bc0:	fb01 f303 	mul.w	r3, r1, r3
 8033bc4:	1ad3      	subs	r3, r2, r3
 8033bc6:	4a1f      	ldr	r2, [pc, #124]	; (8033c44 <InitRFM+0x328>)
 8033bc8:	6013      	str	r3, [r2, #0]
	printf( "%s(%d) - offsetCA( %d )\n", __func__, __LINE__, g_offsetCA );
 8033bca:	4b1e      	ldr	r3, [pc, #120]	; (8033c44 <InitRFM+0x328>)
 8033bcc:	681b      	ldr	r3, [r3, #0]
 8033bce:	f240 6251 	movw	r2, #1617	; 0x651
 8033bd2:	4907      	ldr	r1, [pc, #28]	; (8033bf0 <InitRFM+0x2d4>)
 8033bd4:	481c      	ldr	r0, [pc, #112]	; (8033c48 <InitRFM+0x32c>)
 8033bd6:	f003 fb5d 	bl	8037294 <iprintf>

	//	초기 시작 Delay
	HAL_Delay(g_offsetCA);
 8033bda:	4b1a      	ldr	r3, [pc, #104]	; (8033c44 <InitRFM+0x328>)
 8033bdc:	681b      	ldr	r3, [r3, #0]
 8033bde:	4618      	mov	r0, r3
 8033be0:	f7ed ffce 	bl	8021b80 <HAL_Delay>

	//========================================================================
}
 8033be4:	bf00      	nop
 8033be6:	4618      	mov	r0, r3
 8033be8:	3724      	adds	r7, #36	; 0x24
 8033bea:	46bd      	mov	sp, r7
 8033bec:	bd90      	pop	{r4, r7, pc}
 8033bee:	bf00      	nop
 8033bf0:	08041aa0 	.word	0x08041aa0
 8033bf4:	0803b768 	.word	0x0803b768
 8033bf8:	20000e38 	.word	0x20000e38
 8033bfc:	20000e8c 	.word	0x20000e8c
 8033c00:	200013a0 	.word	0x200013a0
 8033c04:	0803b770 	.word	0x0803b770
 8033c08:	08033731 	.word	0x08033731
 8033c0c:	0803b7a0 	.word	0x0803b7a0
 8033c10:	20002338 	.word	0x20002338
 8033c14:	20000bec 	.word	0x20000bec
 8033c18:	20002354 	.word	0x20002354
 8033c1c:	0803b7b4 	.word	0x0803b7b4
 8033c20:	20002350 	.word	0x20002350
 8033c24:	0803b7d4 	.word	0x0803b7d4
 8033c28:	0803b7ec 	.word	0x0803b7ec
 8033c2c:	200012c8 	.word	0x200012c8
 8033c30:	0803b808 	.word	0x0803b808
 8033c34:	0803b810 	.word	0x0803b810
 8033c38:	200004f0 	.word	0x200004f0
 8033c3c:	0803b82c 	.word	0x0803b82c
 8033c40:	10624dd3 	.word	0x10624dd3
 8033c44:	20002344 	.word	0x20002344
 8033c48:	0803b858 	.word	0x0803b858

08033c4c <RFM_main>:

//========================================================================
int RFM_main( void )
//========================================================================
{
 8033c4c:	b580      	push	{r7, lr}
 8033c4e:	b082      	sub	sp, #8
 8033c50:	af00      	add	r7, sp, #0
	printf( "%s(%d)\n", __func__, __LINE__ );
 8033c52:	f240 625d 	movw	r2, #1629	; 0x65d
 8033c56:	4912      	ldr	r1, [pc, #72]	; (8033ca0 <RFM_main+0x54>)
 8033c58:	4812      	ldr	r0, [pc, #72]	; (8033ca4 <RFM_main+0x58>)
 8033c5a:	f003 fb1b 	bl	8037294 <iprintf>

	InitRFM();
 8033c5e:	f7ff fe5d 	bl	803391c <InitRFM>
	char *argv[] = {"tx", "0"};
	cmd_rftx( 2, argv );

#endif

	InitProcPkt();
 8033c62:	f7f9 fdf3 	bl	802d84c <InitProcPkt>
	int nTick;

	/* Infinite main loop */
	while ( 1 )
	{
		nTick = HAL_GetTick();
 8033c66:	f7ed ff7f 	bl	8021b68 <HAL_GetTick>
 8033c6a:	4603      	mov	r3, r0
 8033c6c:	607b      	str	r3, [r7, #4]

		if ( GetDevID() == DevRF900T )
 8033c6e:	f7fe fd2f 	bl	80326d0 <GetDevID>
 8033c72:	4603      	mov	r3, r0
 8033c74:	2b02      	cmp	r3, #2
 8033c76:	d106      	bne.n	8033c86 <RFM_main+0x3a>
		{
			//	송신기 - KeyPad 동작.
			LoopProcKey( nTick );
 8033c78:	687b      	ldr	r3, [r7, #4]
 8033c7a:	4618      	mov	r0, r3
 8033c7c:	f7fd fd5e 	bl	803173c <LoopProcKey>

			//	ADC Power : Battery
			LoopProcAdc( nTick );
 8033c80:	6878      	ldr	r0, [r7, #4]
 8033c82:	f7fb fdcd 	bl	802f820 <LoopProcAdc>
		}

		//	Loop RFM
		LoopProcRFM( nTick );
 8033c86:	6878      	ldr	r0, [r7, #4]
 8033c88:	f000 f80e 	bl	8033ca8 <LoopProcRFM>

		//	Loop Process ( CLI )
		LoopProcCLI();
 8033c8c:	f7fc fe3c 	bl	8030908 <LoopProcCLI>

		//	Loop Proc Packet : RF Packet
		LoopProcPkt( nTick );
 8033c90:	6878      	ldr	r0, [r7, #4]
 8033c92:	f7fa f919 	bl	802dec8 <LoopProcPkt>

		//	Loop Proc Main Watchdog Count Reload
		LoopProcMain( nTick );
 8033c96:	6878      	ldr	r0, [r7, #4]
 8033c98:	f7ec fca2 	bl	80205e0 <LoopProcMain>
	{
 8033c9c:	e7e3      	b.n	8033c66 <RFM_main+0x1a>
 8033c9e:	bf00      	nop
 8033ca0:	08041aa8 	.word	0x08041aa8
 8033ca4:	0803b768 	.word	0x0803b768

08033ca8 <LoopProcRFM>:


//========================================================================
void LoopProcRFM ( int nTick )
//========================================================================
{
 8033ca8:	b590      	push	{r4, r7, lr}
 8033caa:	b099      	sub	sp, #100	; 0x64
 8033cac:	af00      	add	r7, sp, #0
 8033cae:	6078      	str	r0, [r7, #4]
	RFMPkt	bufRFTx;

	//========================================================================
	//  Transmit - 송신기
	if ( GetDevID() == DevRF900T )
 8033cb0:	f7fe fd0e 	bl	80326d0 <GetDevID>
 8033cb4:	4603      	mov	r3, r0
 8033cb6:	2b02      	cmp	r3, #2
 8033cb8:	f040 80b8 	bne.w	8033e2c <LoopProcRFM+0x184>
	{
		if( GetRFMMode() != RFMModeRx )
 8033cbc:	f7fe fd34 	bl	8032728 <GetRFMMode>
 8033cc0:	4603      	mov	r3, r0
 8033cc2:	2b02      	cmp	r3, #2
 8033cc4:	d064      	beq.n	8033d90 <LoopProcRFM+0xe8>
		{
			if( GetKey(eKeyPtt) || GetKey(eKeySos) )
 8033cc6:	2006      	movs	r0, #6
 8033cc8:	f7fd fcac 	bl	8031624 <GetKey>
 8033ccc:	4603      	mov	r3, r0
 8033cce:	2b00      	cmp	r3, #0
 8033cd0:	d105      	bne.n	8033cde <LoopProcRFM+0x36>
 8033cd2:	2007      	movs	r0, #7
 8033cd4:	f7fd fca6 	bl	8031624 <GetKey>
 8033cd8:	4603      	mov	r3, r0
 8033cda:	2b00      	cmp	r3, #0
 8033cdc:	d058      	beq.n	8033d90 <LoopProcRFM+0xe8>
			{
				// PTT Key가 눌려있을시 전송.
				if( qBufCnt( &g_qBufAudioTx ) >= ( I2S_DMA_LOOP_SIZE * 2 ) )
 8033cde:	489a      	ldr	r0, [pc, #616]	; (8033f48 <LoopProcRFM+0x2a0>)
 8033ce0:	f7fa fabc 	bl	802e25c <qBufCnt>
 8033ce4:	4603      	mov	r3, r0
 8033ce6:	2b3b      	cmp	r3, #59	; 0x3b
 8033ce8:	dd52      	ble.n	8033d90 <LoopProcRFM+0xe8>
				{
					//		printf ( "G" );
					qBufGet( &g_qBufAudioTx, (uint8_t*)bufRFTx.dat.data, ( I2S_DMA_LOOP_SIZE * 2 ) );
 8033cea:	f107 031c 	add.w	r3, r7, #28
 8033cee:	3304      	adds	r3, #4
 8033cf0:	223c      	movs	r2, #60	; 0x3c
 8033cf2:	4619      	mov	r1, r3
 8033cf4:	4894      	ldr	r0, [pc, #592]	; (8033f48 <LoopProcRFM+0x2a0>)
 8033cf6:	f7fa fafe 	bl	802e2f6 <qBufGet>
#if defined(USE_HOPPING)
					//========================================================================
					//	Packet Header
#if defined( USE_CH_ISO_DEV )
					//	Header #2
					if( GetKey(eKeyPtt) )
 8033cfa:	2006      	movs	r0, #6
 8033cfc:	f7fd fc92 	bl	8031624 <GetKey>
 8033d00:	4603      	mov	r3, r0
 8033d02:	2b00      	cmp	r3, #0
 8033d04:	d006      	beq.n	8033d14 <LoopProcRFM+0x6c>
					{
						_MakePktHdr2( &bufRFTx, PktPA );
 8033d06:	f107 031c 	add.w	r3, r7, #28
 8033d0a:	2102      	movs	r1, #2
 8033d0c:	4618      	mov	r0, r3
 8033d0e:	f7fa fb9f 	bl	802e450 <_MakePktHdr2>
 8033d12:	e005      	b.n	8033d20 <LoopProcRFM+0x78>
					}
					else
					{
						_MakePktHdr2( &bufRFTx, PktCall );
 8033d14:	f107 031c 	add.w	r3, r7, #28
 8033d18:	2103      	movs	r1, #3
 8033d1a:	4618      	mov	r0, r3
 8033d1c:	f7fa fb98 	bl	802e450 <_MakePktHdr2>
					if( GetKey(eKeyPtt) )	bufRFTx.hdr.nPktCmd = PktPA;	//  송신기 -> 수신기
					else					bufRFTx.hdr.nPktCmd = PktCall;	//  송신기 -> 송신기
#endif

#if defined( USE_CH_ISO_DEV )
					if( GetKey(eKeyPtt) )
 8033d20:	2006      	movs	r0, #6
 8033d22:	f7fd fc7f 	bl	8031624 <GetKey>
 8033d26:	4603      	mov	r3, r0
 8033d28:	2b00      	cmp	r3, #0
 8033d2a:	d018      	beq.n	8033d5e <LoopProcRFM+0xb6>
					{
						//========================================================================
						//	PA

						if ( GetChPARFT() != 0 )
 8033d2c:	f7fe fe90 	bl	8032a50 <GetChPARFT>
 8033d30:	4603      	mov	r3, r0
 8033d32:	2b00      	cmp	r3, #0
 8033d34:	d007      	beq.n	8033d46 <LoopProcRFM+0x9e>
						{
							//	송신기에 전송.
							SendPktCh( GetChPARFT(), (uint8_t *)&bufRFTx,
 8033d36:	f7fe fe8b 	bl	8032a50 <GetChPARFT>
 8033d3a:	f107 031c 	add.w	r3, r7, #28
 8033d3e:	2208      	movs	r2, #8
 8033d40:	4619      	mov	r1, r3
 8033d42:	f7fa f991 	bl	802e068 <SendPktCh>
								(U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );
						}

						SendPktCh( GetChPA(), (uint8_t *)&bufRFTx,
 8033d46:	f7fe fe3b 	bl	80329c0 <GetChPA>
							pRadioConfiguration->Radio_PacketLength );
 8033d4a:	4b80      	ldr	r3, [pc, #512]	; (8033f4c <LoopProcRFM+0x2a4>)
 8033d4c:	681b      	ldr	r3, [r3, #0]
 8033d4e:	795b      	ldrb	r3, [r3, #5]
						SendPktCh( GetChPA(), (uint8_t *)&bufRFTx,
 8033d50:	461a      	mov	r2, r3
 8033d52:	f107 031c 	add.w	r3, r7, #28
 8033d56:	4619      	mov	r1, r3
 8033d58:	f7fa f986 	bl	802e068 <SendPktCh>
 8033d5c:	e018      	b.n	8033d90 <LoopProcRFM+0xe8>
					}
					else
					{
						//========================================================================
						//	Call
						if ( GetChPARFT() != 0 )
 8033d5e:	f7fe fe77 	bl	8032a50 <GetChPARFT>
 8033d62:	4603      	mov	r3, r0
 8033d64:	2b00      	cmp	r3, #0
 8033d66:	d008      	beq.n	8033d7a <LoopProcRFM+0xd2>
						{
							//	송신기에 직접 전송.
							SendPktCh( GetChPARFT(), (uint8_t *)&bufRFTx,
 8033d68:	f7fe fe72 	bl	8032a50 <GetChPARFT>
 8033d6c:	f107 031c 	add.w	r3, r7, #28
 8033d70:	2208      	movs	r2, #8
 8033d72:	4619      	mov	r1, r3
 8033d74:	f7fa f978 	bl	802e068 <SendPktCh>
 8033d78:	e00a      	b.n	8033d90 <LoopProcRFM+0xe8>
								(U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );
						}
						else
						{
							//	수신기를 통해 전송.
							SendPktCh( GetChPA(), (uint8_t *)&bufRFTx,
 8033d7a:	f7fe fe21 	bl	80329c0 <GetChPA>
								pRadioConfiguration->Radio_PacketLength );
 8033d7e:	4b73      	ldr	r3, [pc, #460]	; (8033f4c <LoopProcRFM+0x2a4>)
 8033d80:	681b      	ldr	r3, [r3, #0]
 8033d82:	795b      	ldrb	r3, [r3, #5]
							SendPktCh( GetChPA(), (uint8_t *)&bufRFTx,
 8033d84:	461a      	mov	r2, r3
 8033d86:	f107 031c 	add.w	r3, r7, #28
 8033d8a:	4619      	mov	r1, r3
 8033d8c:	f7fa f96c 	bl	802e068 <SendPktCh>
		}

		//========================================================================
		static int nOldRFMMode = 0;

		int nRFMMode = GetRFMMode();
 8033d90:	f7fe fcca 	bl	8032728 <GetRFMMode>
 8033d94:	65f8      	str	r0, [r7, #92]	; 0x5c
		if( nRFMMode != nOldRFMMode )
 8033d96:	4b6e      	ldr	r3, [pc, #440]	; (8033f50 <LoopProcRFM+0x2a8>)
 8033d98:	681b      	ldr	r3, [r3, #0]
 8033d9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8033d9c:	429a      	cmp	r2, r3
 8033d9e:	d03c      	beq.n	8033e1a <LoopProcRFM+0x172>
		{
			switch ( nRFMMode )
 8033da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033da2:	2b00      	cmp	r3, #0
 8033da4:	d025      	beq.n	8033df2 <LoopProcRFM+0x14a>
 8033da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033da8:	2b02      	cmp	r3, #2
 8033daa:	d133      	bne.n	8033e14 <LoopProcRFM+0x16c>
			{
			case RFMModeRx:
				LCDSetCursor( 20, 13 );
 8033dac:	210d      	movs	r1, #13
 8033dae:	2014      	movs	r0, #20
 8033db0:	f7f8 fdb6 	bl	802c920 <LCDSetCursor>
				if ( IsMenuMaint() )
 8033db4:	f7fd ff54 	bl	8031c60 <IsMenuMaint>
 8033db8:	4603      	mov	r3, r0
 8033dba:	2b00      	cmp	r3, #0
 8033dbc:	d015      	beq.n	8033dea <LoopProcRFM+0x142>
				{
					//	Maint Mode : 송신채널 표시.
					char sBuf[20];
					sprintf( sBuf, "수신중(%d/%d)", GetCh2Car(GetChNearRFM()), GetChNearRFM() );	//	Channel -> Car
 8033dbe:	f7fe fdad 	bl	803291c <GetChNearRFM>
 8033dc2:	4603      	mov	r3, r0
 8033dc4:	4618      	mov	r0, r3
 8033dc6:	f7fe fe07 	bl	80329d8 <GetCh2Car>
 8033dca:	4604      	mov	r4, r0
 8033dcc:	f7fe fda6 	bl	803291c <GetChNearRFM>
 8033dd0:	4603      	mov	r3, r0
 8033dd2:	f107 0008 	add.w	r0, r7, #8
 8033dd6:	4622      	mov	r2, r4
 8033dd8:	495e      	ldr	r1, [pc, #376]	; (8033f54 <LoopProcRFM+0x2ac>)
 8033dda:	f003 fc8d 	bl	80376f8 <siprintf>
					LCDPrintf( sBuf );
 8033dde:	f107 0308 	add.w	r3, r7, #8
 8033de2:	4618      	mov	r0, r3
 8033de4:	f7f8 fdcc 	bl	802c980 <LCDPrintf>
				}
				else
				{
					LCDPrintf( "수신중..." );
				}
				break;
 8033de8:	e014      	b.n	8033e14 <LoopProcRFM+0x16c>
					LCDPrintf( "수신중..." );
 8033dea:	485b      	ldr	r0, [pc, #364]	; (8033f58 <LoopProcRFM+0x2b0>)
 8033dec:	f7f8 fdc8 	bl	802c980 <LCDPrintf>
				break;
 8033df0:	e010      	b.n	8033e14 <LoopProcRFM+0x16c>

			case RFMModeNormal:
				//========================================================================
				//  편성 : XXX
				UpdateLCDMain();
 8033df2:	f7fd ff75 	bl	8031ce0 <UpdateLCDMain>
				//	송신기 Speaker Mute
#if defined(USE_RFT_ONLY_RX_SPK_ON)
				if ( GetDevID() == DevRF900T )
 8033df6:	f7fe fc6b 	bl	80326d0 <GetDevID>
 8033dfa:	4603      	mov	r3, r0
 8033dfc:	2b02      	cmp	r3, #2
 8033dfe:	d108      	bne.n	8033e12 <LoopProcRFM+0x16a>
				{
					//  송신기 : 수신중이 아닌경우 SPK OFF
					RFM_Spk(0);
 8033e00:	2000      	movs	r0, #0
 8033e02:	f7ff f95d 	bl	80330c0 <RFM_Spk>

					//  Red LED Off
					HAL_GPIO_WritePin ( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_RESET ); //  RED LED
 8033e06:	2200      	movs	r2, #0
 8033e08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8033e0c:	4853      	ldr	r0, [pc, #332]	; (8033f5c <LoopProcRFM+0x2b4>)
 8033e0e:	f7ef fb85 	bl	802351c <HAL_GPIO_WritePin>
				}
#endif
				break;
 8033e12:	bf00      	nop
			}

			nOldRFMMode = nRFMMode;
 8033e14:	4a4e      	ldr	r2, [pc, #312]	; (8033f50 <LoopProcRFM+0x2a8>)
 8033e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033e18:	6013      	str	r3, [r2, #0]
		}

		//========================================================================
		//	상태정보 모니터링중 - 상태정보값 갱신.
		if( GetRFMMode() == RFMModeNormal )
 8033e1a:	f7fe fc85 	bl	8032728 <GetRFMMode>
 8033e1e:	4603      	mov	r3, r0
 8033e20:	2b00      	cmp	r3, #0
 8033e22:	d151      	bne.n	8033ec8 <LoopProcRFM+0x220>
		{
			UpdateLCDMonitor( nTick );		//	LCD : 모니터링 상태 Update
 8033e24:	6878      	ldr	r0, [r7, #4]
 8033e26:	f7fd ffa3 	bl	8031d70 <UpdateLCDMonitor>
 8033e2a:	e04d      	b.n	8033ec8 <LoopProcRFM+0x220>
		}
	}
	//========================================================================
	//  RFM - 수신기 - 대승객방송
	else if ( GetDevID() == DevRF900M )
 8033e2c:	f7fe fc50 	bl	80326d0 <GetDevID>
 8033e30:	4603      	mov	r3, r0
 8033e32:	2b01      	cmp	r3, #1
 8033e34:	d148      	bne.n	8033ec8 <LoopProcRFM+0x220>
	{
		if( GetRFMMode() == RFMModeOcc )
 8033e36:	f7fe fc77 	bl	8032728 <GetRFMMode>
 8033e3a:	4603      	mov	r3, r0
 8033e3c:	2b03      	cmp	r3, #3
 8033e3e:	d143      	bne.n	8033ec8 <LoopProcRFM+0x220>
		{
			//	대승객 방송 모드인 경우 대승객 방송 음성 송출.
			if( qBufCnt( &g_qBufAudioTx ) >= ( I2S_DMA_LOOP_SIZE * 2 ) )
 8033e40:	4841      	ldr	r0, [pc, #260]	; (8033f48 <LoopProcRFM+0x2a0>)
 8033e42:	f7fa fa0b 	bl	802e25c <qBufCnt>
 8033e46:	4603      	mov	r3, r0
 8033e48:	2b3b      	cmp	r3, #59	; 0x3b
 8033e4a:	dd3d      	ble.n	8033ec8 <LoopProcRFM+0x220>
			{
				//		printf ( "G" );
				//========================================================================
				//	Audio ( 대승객방송 음성 )
				qBufGet( &g_qBufAudioTx, (uint8_t*)bufRFTx.dat.data, ( I2S_DMA_LOOP_SIZE * 2 ) );
 8033e4c:	f107 031c 	add.w	r3, r7, #28
 8033e50:	3304      	adds	r3, #4
 8033e52:	223c      	movs	r2, #60	; 0x3c
 8033e54:	4619      	mov	r1, r3
 8033e56:	483c      	ldr	r0, [pc, #240]	; (8033f48 <LoopProcRFM+0x2a0>)
 8033e58:	f7fa fa4d 	bl	802e2f6 <qBufGet>
				//	Audio Loopback ( 대승객방송 음성 )
				qBufPut( &g_qBufAudioRx, (uint8_t*)bufRFTx.dat.data, ( I2S_DMA_LOOP_SIZE * 2 ) );
 8033e5c:	f107 031c 	add.w	r3, r7, #28
 8033e60:	3304      	adds	r3, #4
 8033e62:	223c      	movs	r2, #60	; 0x3c
 8033e64:	4619      	mov	r1, r3
 8033e66:	483e      	ldr	r0, [pc, #248]	; (8033f60 <LoopProcRFM+0x2b8>)
 8033e68:	f7fa fa11 	bl	802e28e <qBufPut>

				//========================================================================
				//	Packet Header	-	OCC PA 전송

				//	Header #2
				_MakePktHdr2( &bufRFTx, PktPA );
 8033e6c:	f107 031c 	add.w	r3, r7, #28
 8033e70:	2102      	movs	r1, #2
 8033e72:	4618      	mov	r0, r3
 8033e74:	f7fa faec 	bl	802e450 <_MakePktHdr2>

				if( GetChRx() == ChTS1_1 )	//	1호차 수신기
 8033e78:	f7fe fcd0 	bl	803281c <GetChRx>
 8033e7c:	4602      	mov	r2, r0
 8033e7e:	4b39      	ldr	r3, [pc, #228]	; (8033f64 <LoopProcRFM+0x2bc>)
 8033e80:	681b      	ldr	r3, [r3, #0]
 8033e82:	429a      	cmp	r2, r3
 8033e84:	d10d      	bne.n	8033ea2 <LoopProcRFM+0x1fa>
				{
					//	1 -> 2 ... -> 10
					SendPktCh( GetChPA() + 1, (uint8_t *)&bufRFTx,
 8033e86:	f7fe fd9b 	bl	80329c0 <GetChPA>
 8033e8a:	4603      	mov	r3, r0
 8033e8c:	1c58      	adds	r0, r3, #1
						pRadioConfiguration->Radio_PacketLength );
 8033e8e:	4b2f      	ldr	r3, [pc, #188]	; (8033f4c <LoopProcRFM+0x2a4>)
 8033e90:	681b      	ldr	r3, [r3, #0]
 8033e92:	795b      	ldrb	r3, [r3, #5]
					SendPktCh( GetChPA() + 1, (uint8_t *)&bufRFTx,
 8033e94:	461a      	mov	r2, r3
 8033e96:	f107 031c 	add.w	r3, r7, #28
 8033e9a:	4619      	mov	r1, r3
 8033e9c:	f7fa f8e4 	bl	802e068 <SendPktCh>
 8033ea0:	e00c      	b.n	8033ebc <LoopProcRFM+0x214>
				}
				else
				{
					// 10 -> 9 ... -> 1
					SendPktCh( GetChPA() - 1, (uint8_t *)&bufRFTx,
 8033ea2:	f7fe fd8d 	bl	80329c0 <GetChPA>
 8033ea6:	4603      	mov	r3, r0
 8033ea8:	1e58      	subs	r0, r3, #1
						pRadioConfiguration->Radio_PacketLength );
 8033eaa:	4b28      	ldr	r3, [pc, #160]	; (8033f4c <LoopProcRFM+0x2a4>)
 8033eac:	681b      	ldr	r3, [r3, #0]
 8033eae:	795b      	ldrb	r3, [r3, #5]
					SendPktCh( GetChPA() - 1, (uint8_t *)&bufRFTx,
 8033eb0:	461a      	mov	r2, r3
 8033eb2:	f107 031c 	add.w	r3, r7, #28
 8033eb6:	4619      	mov	r1, r3
 8033eb8:	f7fa f8d6 	bl	802e068 <SendPktCh>
				}

				// 조명 On
				HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
 8033ebc:	2201      	movs	r2, #1
 8033ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8033ec2:	4829      	ldr	r0, [pc, #164]	; (8033f68 <LoopProcRFM+0x2c0>)
 8033ec4:	f7ef fb2a 	bl	802351c <HAL_GPIO_WritePin>
		}
	}

	//========================================================================
	//	수신중 해제
	if ( (nTick - g_nStampRxPkt) > TIMEOUT_RXSTAT && GetRFMMode() == RFMModeRx
 8033ec8:	4b28      	ldr	r3, [pc, #160]	; (8033f6c <LoopProcRFM+0x2c4>)
 8033eca:	681b      	ldr	r3, [r3, #0]
 8033ecc:	687a      	ldr	r2, [r7, #4]
 8033ece:	1ad3      	subs	r3, r2, r3
 8033ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8033ed4:	dd25      	ble.n	8033f22 <LoopProcRFM+0x27a>
 8033ed6:	f7fe fc27 	bl	8032728 <GetRFMMode>
 8033eda:	4603      	mov	r3, r0
 8033edc:	2b02      	cmp	r3, #2
 8033ede:	d120      	bne.n	8033f22 <LoopProcRFM+0x27a>
			&& ( GetRFMMode() != RFMModeOcc )		//	OCC Mode - Skip
 8033ee0:	f7fe fc22 	bl	8032728 <GetRFMMode>
 8033ee4:	4603      	mov	r3, r0
 8033ee6:	2b03      	cmp	r3, #3
 8033ee8:	d01b      	beq.n	8033f22 <LoopProcRFM+0x27a>
			&& ( GetRFMMode() != RFMModeUpgr )		//	Upgrade Mode - Skip
 8033eea:	f7fe fc1d 	bl	8032728 <GetRFMMode>
 8033eee:	4603      	mov	r3, r0
 8033ef0:	2b04      	cmp	r3, #4
 8033ef2:	d016      	beq.n	8033f22 <LoopProcRFM+0x27a>
		)
	{
		// Rx 패킷이 500 ms 없을 경우 수신모드 해제
		SetRFMMode( RFMModeNormal );
 8033ef4:	2000      	movs	r0, #0
 8033ef6:	f7fe fc23 	bl	8032740 <SetRFMMode>

		//  수신기 Spk Relay Off
		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_RESET );
 8033efa:	2200      	movs	r2, #0
 8033efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8033f00:	4819      	ldr	r0, [pc, #100]	; (8033f68 <LoopProcRFM+0x2c0>)
 8033f02:	f7ef fb0b 	bl	802351c <HAL_GPIO_WritePin>

#if defined(USE_RFT_ONLY_RX_SPK_ON)
		if ( GetDevID() == DevRF900T )
 8033f06:	f7fe fbe3 	bl	80326d0 <GetDevID>
 8033f0a:	4603      	mov	r3, r0
 8033f0c:	2b02      	cmp	r3, #2
 8033f0e:	d102      	bne.n	8033f16 <LoopProcRFM+0x26e>
		{
			//  송신기 : 수신중이 아닌경우 SPK OFF
//			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
			RFM_Spk(0);
 8033f10:	2000      	movs	r0, #0
 8033f12:	f7ff f8d5 	bl	80330c0 <RFM_Spk>
		}
#endif

		//  Red LED Off
		HAL_GPIO_WritePin ( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_RESET ); //  RED LED
 8033f16:	2200      	movs	r2, #0
 8033f18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8033f1c:	480f      	ldr	r0, [pc, #60]	; (8033f5c <LoopProcRFM+0x2b4>)
 8033f1e:	f7ef fafd 	bl	802351c <HAL_GPIO_WritePin>

	//========================================================================
	//  수신기 Standby GPIO 제어 : 모듈동작시 1초간격 Blink
	static int s_nTickStandby;

	if ( nTick - s_nTickStandby >= 1000 )
 8033f22:	4b13      	ldr	r3, [pc, #76]	; (8033f70 <LoopProcRFM+0x2c8>)
 8033f24:	681b      	ldr	r3, [r3, #0]
 8033f26:	687a      	ldr	r2, [r7, #4]
 8033f28:	1ad3      	subs	r3, r2, r3
 8033f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8033f2e:	db35      	blt.n	8033f9c <LoopProcRFM+0x2f4>
	{
		//	Standby GPIO Toggle
		if ( GetRFMMode() == RFMModeRx )
 8033f30:	f7fe fbfa 	bl	8032728 <GetRFMMode>
 8033f34:	4603      	mov	r3, r0
 8033f36:	2b02      	cmp	r3, #2
 8033f38:	d11c      	bne.n	8033f74 <LoopProcRFM+0x2cc>
		{
			//  수신기:수신중 LED On ( Standby LED On )
			HAL_GPIO_WritePin( STANDBY_GPIO_Port, STANDBY_Pin, GPIO_PIN_SET );
 8033f3a:	2201      	movs	r2, #1
 8033f3c:	2180      	movs	r1, #128	; 0x80
 8033f3e:	480a      	ldr	r0, [pc, #40]	; (8033f68 <LoopProcRFM+0x2c0>)
 8033f40:	f7ef faec 	bl	802351c <HAL_GPIO_WritePin>
 8033f44:	e01f      	b.n	8033f86 <LoopProcRFM+0x2de>
 8033f46:	bf00      	nop
 8033f48:	20001f78 	.word	0x20001f78
 8033f4c:	200004f0 	.word	0x200004f0
 8033f50:	20002920 	.word	0x20002920
 8033f54:	0803b874 	.word	0x0803b874
 8033f58:	0803b888 	.word	0x0803b888
 8033f5c:	40020400 	.word	0x40020400
 8033f60:	20001d88 	.word	0x20001d88
 8033f64:	200004fc 	.word	0x200004fc
 8033f68:	40021000 	.word	0x40021000
 8033f6c:	20002348 	.word	0x20002348
 8033f70:	20002924 	.word	0x20002924
		}
		else
		{
			//  Standby LED Toggle
			HAL_GPIO_TogglePin( STANDBY_GPIO_Port, STANDBY_Pin );
 8033f74:	2180      	movs	r1, #128	; 0x80
 8033f76:	4872      	ldr	r0, [pc, #456]	; (8034140 <LoopProcRFM+0x498>)
 8033f78:	f7ef fae9 	bl	802354e <HAL_GPIO_TogglePin>

			//	RFM(Board) Status LED
			HAL_GPIO_TogglePin ( LED_ST_GPIO_Port, LED_ST_Pin );
 8033f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8033f80:	4870      	ldr	r0, [pc, #448]	; (8034144 <LoopProcRFM+0x49c>)
 8033f82:	f7ef fae4 	bl	802354e <HAL_GPIO_TogglePin>
		}

		if ( GetRFMMode() == RFMModeNormal )
 8033f86:	f7fe fbcf 	bl	8032728 <GetRFMMode>
 8033f8a:	4603      	mov	r3, r0
 8033f8c:	2b00      	cmp	r3, #0
 8033f8e:	d102      	bne.n	8033f96 <LoopProcRFM+0x2ee>
		{
			//	Normal 모드인 경우 상태정보 갱신.
		    //	Reflash Status
		    ReflashStat( nTick );	//	상태정보 갱신.
 8033f90:	6878      	ldr	r0, [r7, #4]
 8033f92:	f000 f979 	bl	8034288 <ReflashStat>
		    //	Reflash Status
		    ReflashStat( nTick );	//	상태정보 갱신.
		}
		//========================================================================
#endif
		s_nTickStandby = nTick;
 8033f96:	4a6c      	ldr	r2, [pc, #432]	; (8034148 <LoopProcRFM+0x4a0>)
 8033f98:	687b      	ldr	r3, [r7, #4]
 8033f9a:	6013      	str	r3, [r2, #0]

#if defined(TIMEOUT_UPGRADE)

	//========================================================================
	//	Upgrade Mode 진입후 5분간 Rx가 없는경우 Normal모드로 변경.
	if ( ( GetDevID() == DevRF900M )						//	수신기.
 8033f9c:	f7fe fb98 	bl	80326d0 <GetDevID>
 8033fa0:	4603      	mov	r3, r0
 8033fa2:	2b01      	cmp	r3, #1
 8033fa4:	d11d      	bne.n	8033fe2 <LoopProcRFM+0x33a>
		&& ( ( nTick - g_nStampRxPkt ) > (TIMEOUT_UPGRADE * 1000) )	//	Timeout
 8033fa6:	4b69      	ldr	r3, [pc, #420]	; (803414c <LoopProcRFM+0x4a4>)
 8033fa8:	681b      	ldr	r3, [r3, #0]
 8033faa:	687a      	ldr	r2, [r7, #4]
 8033fac:	1ad3      	subs	r3, r2, r3
 8033fae:	4a68      	ldr	r2, [pc, #416]	; (8034150 <LoopProcRFM+0x4a8>)
 8033fb0:	4293      	cmp	r3, r2
 8033fb2:	dd16      	ble.n	8033fe2 <LoopProcRFM+0x33a>
		&& ( GetRFMMode() == RFMModeUpgr )
 8033fb4:	f7fe fbb8 	bl	8032728 <GetRFMMode>
 8033fb8:	4603      	mov	r3, r0
 8033fba:	2b04      	cmp	r3, #4
 8033fbc:	d111      	bne.n	8033fe2 <LoopProcRFM+0x33a>
		)
	{
		//========================================================================
		//	Normal 모드로 변경.
		SetRFMMode( RFMModeNormal );	//	Normal Mode 로 변경
 8033fbe:	2000      	movs	r0, #0
 8033fc0:	f7fe fbbe 	bl	8032740 <SetRFMMode>
		//========================================================================

		//  RF 수신 Start
		g_nChRx = GetChRx();	//	ChTS1_1 + g_idxTrainSet * 2 + ((g_nCarNo+1) % 2);	// 현재 호차 채널
 8033fc4:	f7fe fc2a 	bl	803281c <GetChRx>
 8033fc8:	4603      	mov	r3, r0
 8033fca:	4a62      	ldr	r2, [pc, #392]	; (8034154 <LoopProcRFM+0x4ac>)
 8033fcc:	6013      	str	r3, [r2, #0]

		vRadio_StartRX(
 8033fce:	4b61      	ldr	r3, [pc, #388]	; (8034154 <LoopProcRFM+0x4ac>)
 8033fd0:	681b      	ldr	r3, [r3, #0]
 8033fd2:	b2da      	uxtb	r2, r3
			g_nChRx,	//g_idxTrainSet,	//		pRadioConfiguration->Radio_ChannelNumber,
			pRadioConfiguration->Radio_PacketLength );
 8033fd4:	4b60      	ldr	r3, [pc, #384]	; (8034158 <LoopProcRFM+0x4b0>)
 8033fd6:	681b      	ldr	r3, [r3, #0]
		vRadio_StartRX(
 8033fd8:	795b      	ldrb	r3, [r3, #5]
 8033fda:	4619      	mov	r1, r3
 8033fdc:	4610      	mov	r0, r2
 8033fde:	f7f9 f9df 	bl	802d3a0 <vRadio_StartRX>
	//========================================================================
	//	송신기 장치 상태정보 요청.
	static int oldTickStatReq = 0;
	static int s_idxCh = 0;

	if	( 	GetDevID() == DevRF900T						//	송신기
 8033fe2:	f7fe fb75 	bl	80326d0 <GetDevID>
 8033fe6:	4603      	mov	r3, r0
 8033fe8:	2b02      	cmp	r3, #2
 8033fea:	d14a      	bne.n	8034082 <LoopProcRFM+0x3da>
			&&	GetRFMMode() == RFMModeNormal			//	Normal모드 : 상태정보 요청.
 8033fec:	f7fe fb9c 	bl	8032728 <GetRFMMode>
 8033ff0:	4603      	mov	r3, r0
 8033ff2:	2b00      	cmp	r3, #0
 8033ff4:	d145      	bne.n	8034082 <LoopProcRFM+0x3da>
			oldTickStatReq = nTick + 1000;		//	1초 이후 부터 시작.
		}
		else
#endif		//	defined(USE_ROUTE_REQ)	//	송신기 : Route 정보 요청.
#endif
		if	( (nTick - oldTickStatReq) > TIME_STAT_REQ )	//	주기 : 300 msec
 8033ff6:	4b59      	ldr	r3, [pc, #356]	; (803415c <LoopProcRFM+0x4b4>)
 8033ff8:	681b      	ldr	r3, [r3, #0]
 8033ffa:	687a      	ldr	r2, [r7, #4]
 8033ffc:	1ad3      	subs	r3, r2, r3
 8033ffe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8034002:	dd3e      	ble.n	8034082 <LoopProcRFM+0x3da>
		{
			//	상태정보 요청.
			if ( s_idxCh < MaxRFMNo )
 8034004:	4b56      	ldr	r3, [pc, #344]	; (8034160 <LoopProcRFM+0x4b8>)
 8034006:	681b      	ldr	r3, [r3, #0]
 8034008:	2b09      	cmp	r3, #9
 803400a:	dc09      	bgt.n	8034020 <LoopProcRFM+0x378>
			{
				//========================================================================
				//	수신기 상태정보
				SendStatReq( ChTS1_1 + (s_idxCh*ChGap) );
 803400c:	4b54      	ldr	r3, [pc, #336]	; (8034160 <LoopProcRFM+0x4b8>)
 803400e:	681b      	ldr	r3, [r3, #0]
 8034010:	009a      	lsls	r2, r3, #2
 8034012:	4b54      	ldr	r3, [pc, #336]	; (8034164 <LoopProcRFM+0x4bc>)
 8034014:	681b      	ldr	r3, [r3, #0]
 8034016:	4413      	add	r3, r2
 8034018:	4618      	mov	r0, r3
 803401a:	f7fa fa97 	bl	802e54c <SendStatReq>
 803401e:	e01d      	b.n	803405c <LoopProcRFM+0x3b4>
			}
			else
			{
				//========================================================================
				//	송신기 상태정보
				if( ChTx_1 + ( s_idxCh % 2 )*ChGap != GetChRx() )
 8034020:	4b4f      	ldr	r3, [pc, #316]	; (8034160 <LoopProcRFM+0x4b8>)
 8034022:	681b      	ldr	r3, [r3, #0]
 8034024:	2b00      	cmp	r3, #0
 8034026:	f003 0301 	and.w	r3, r3, #1
 803402a:	bfb8      	it	lt
 803402c:	425b      	neglt	r3, r3
 803402e:	009a      	lsls	r2, r3, #2
 8034030:	4b4d      	ldr	r3, [pc, #308]	; (8034168 <LoopProcRFM+0x4c0>)
 8034032:	681b      	ldr	r3, [r3, #0]
 8034034:	18d4      	adds	r4, r2, r3
 8034036:	f7fe fbf1 	bl	803281c <GetChRx>
 803403a:	4603      	mov	r3, r0
 803403c:	429c      	cmp	r4, r3
 803403e:	d00d      	beq.n	803405c <LoopProcRFM+0x3b4>
				{
					//	타 송신기에 상태정보 요청.
					SendStatReq( ChTx_1 + ( s_idxCh % 2 )*ChGap );
 8034040:	4b47      	ldr	r3, [pc, #284]	; (8034160 <LoopProcRFM+0x4b8>)
 8034042:	681b      	ldr	r3, [r3, #0]
 8034044:	2b00      	cmp	r3, #0
 8034046:	f003 0301 	and.w	r3, r3, #1
 803404a:	bfb8      	it	lt
 803404c:	425b      	neglt	r3, r3
 803404e:	009a      	lsls	r2, r3, #2
 8034050:	4b45      	ldr	r3, [pc, #276]	; (8034168 <LoopProcRFM+0x4c0>)
 8034052:	681b      	ldr	r3, [r3, #0]
 8034054:	4413      	add	r3, r2
 8034056:	4618      	mov	r0, r3
 8034058:	f7fa fa78 	bl	802e54c <SendStatReq>
	//		{
	//		    //	Reflash Status
	//		    ReflashStat( nTick );	//	상태정보 갱신.
	//		}

			s_idxCh = ( s_idxCh + 1 ) % ( MaxRFMNo + 2 );	//	MaxRFMNo : 10 + 2(송신기 2채널)
 803405c:	4b40      	ldr	r3, [pc, #256]	; (8034160 <LoopProcRFM+0x4b8>)
 803405e:	681b      	ldr	r3, [r3, #0]
 8034060:	1c59      	adds	r1, r3, #1
 8034062:	4b42      	ldr	r3, [pc, #264]	; (803416c <LoopProcRFM+0x4c4>)
 8034064:	fb83 2301 	smull	r2, r3, r3, r1
 8034068:	105a      	asrs	r2, r3, #1
 803406a:	17cb      	asrs	r3, r1, #31
 803406c:	1ad2      	subs	r2, r2, r3
 803406e:	4613      	mov	r3, r2
 8034070:	005b      	lsls	r3, r3, #1
 8034072:	4413      	add	r3, r2
 8034074:	009b      	lsls	r3, r3, #2
 8034076:	1aca      	subs	r2, r1, r3
 8034078:	4b39      	ldr	r3, [pc, #228]	; (8034160 <LoopProcRFM+0x4b8>)
 803407a:	601a      	str	r2, [r3, #0]

			oldTickStatReq = nTick;
 803407c:	4a37      	ldr	r2, [pc, #220]	; (803415c <LoopProcRFM+0x4b4>)
 803407e:	687b      	ldr	r3, [r7, #4]
 8034080:	6013      	str	r3, [r2, #0]
#if defined(USE_ROUTE_REQ_RFM)	//	수신기 Route 요청.
	static int oldTickRouteReq = 0;

	static int s_ChkRsp = 0;

	if	( 	GetDevID() == DevRF900M						//	수신기
 8034082:	f7fe fb25 	bl	80326d0 <GetDevID>
 8034086:	4603      	mov	r3, r0
 8034088:	2b01      	cmp	r3, #1
 803408a:	d155      	bne.n	8034138 <LoopProcRFM+0x490>
			&&	GetRFMMode() == RFMModeNormal			//	Normal모드 : 상태정보 요청.
 803408c:	f7fe fb4c 	bl	8032728 <GetRFMMode>
 8034090:	4603      	mov	r3, r0
 8034092:	2b00      	cmp	r3, #0
 8034094:	d150      	bne.n	8034138 <LoopProcRFM+0x490>
			)
	{

		if( (nTick - oldTickRouteReq ) > (TIME_ROUTE_REQ * 1000) )
 8034096:	4b36      	ldr	r3, [pc, #216]	; (8034170 <LoopProcRFM+0x4c8>)
 8034098:	681b      	ldr	r3, [r3, #0]
 803409a:	687a      	ldr	r2, [r7, #4]
 803409c:	1ad3      	subs	r3, r2, r3
 803409e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80340a2:	dd10      	ble.n	80340c6 <LoopProcRFM+0x41e>
		{
			//	수신기 -> 수신기 : Route 정보 요청.
			//	1 -> 2
			//		 2 -> 3
			//			  3 -> 4
			if ( g_nCarNo != 10 )	//	10호차 Skip
 80340a4:	4b33      	ldr	r3, [pc, #204]	; (8034174 <LoopProcRFM+0x4cc>)
 80340a6:	681b      	ldr	r3, [r3, #0]
 80340a8:	2b0a      	cmp	r3, #10
 80340aa:	d006      	beq.n	80340ba <LoopProcRFM+0x412>
			{
				//	다음번 수신기에 정보 요청
				SendRouteReq( GetChRx() + ChGap );		//
 80340ac:	f7fe fbb6 	bl	803281c <GetChRx>
 80340b0:	4603      	mov	r3, r0
 80340b2:	3304      	adds	r3, #4
 80340b4:	4618      	mov	r0, r3
 80340b6:	f7fa fb37 	bl	802e728 <SendRouteReq>

				//	Timeout 발생시 그 다음 수신기로 정보 요청.
			}

			oldTickRouteReq = nTick;			//	1초 이후 부터 시작.
 80340ba:	4a2d      	ldr	r2, [pc, #180]	; (8034170 <LoopProcRFM+0x4c8>)
 80340bc:	687b      	ldr	r3, [r7, #4]
 80340be:	6013      	str	r3, [r2, #0]
			s_ChkRsp = 1;
 80340c0:	4b2d      	ldr	r3, [pc, #180]	; (8034178 <LoopProcRFM+0x4d0>)
 80340c2:	2201      	movs	r2, #1
 80340c4:	601a      	str	r2, [r3, #0]
		}

		if( s_ChkRsp == 1
 80340c6:	4b2c      	ldr	r3, [pc, #176]	; (8034178 <LoopProcRFM+0x4d0>)
 80340c8:	681b      	ldr	r3, [r3, #0]
 80340ca:	2b01      	cmp	r3, #1
 80340cc:	d134      	bne.n	8034138 <LoopProcRFM+0x490>
				&& (nTick - oldTickRouteReq ) > 100		//	송신후 응답시간 ( 100 msec )
 80340ce:	4b28      	ldr	r3, [pc, #160]	; (8034170 <LoopProcRFM+0x4c8>)
 80340d0:	681b      	ldr	r3, [r3, #0]
 80340d2:	687a      	ldr	r2, [r7, #4]
 80340d4:	1ad3      	subs	r3, r2, r3
 80340d6:	2b64      	cmp	r3, #100	; 0x64
 80340d8:	dd2e      	ble.n	8034138 <LoopProcRFM+0x490>
				&& ( g_nCarNo != 9 && g_nCarNo != 10 )	//	다음호차 검색은 9/10호차 Skip
 80340da:	4b26      	ldr	r3, [pc, #152]	; (8034174 <LoopProcRFM+0x4cc>)
 80340dc:	681b      	ldr	r3, [r3, #0]
 80340de:	2b09      	cmp	r3, #9
 80340e0:	d02a      	beq.n	8034138 <LoopProcRFM+0x490>
 80340e2:	4b24      	ldr	r3, [pc, #144]	; (8034174 <LoopProcRFM+0x4cc>)
 80340e4:	681b      	ldr	r3, [r3, #0]
 80340e6:	2b0a      	cmp	r3, #10
 80340e8:	d026      	beq.n	8034138 <LoopProcRFM+0x490>
				)
		{
			//	다음 호차검색

			if ( ( nTick - g_nStampRouteRsp ) > TIMEOUT_RECV_ROUTE * 1000 )
 80340ea:	4b24      	ldr	r3, [pc, #144]	; (803417c <LoopProcRFM+0x4d4>)
 80340ec:	681b      	ldr	r3, [r3, #0]
 80340ee:	687a      	ldr	r2, [r7, #4]
 80340f0:	1ad3      	subs	r3, r2, r3
 80340f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80340f6:	4293      	cmp	r3, r2
 80340f8:	dd1b      	ble.n	8034132 <LoopProcRFM+0x48a>
				//	Timeout 발생시.
				//	다음호차부터  ~ 10까지 상태정보 전송 검색.

				//	g_nIdxRouteFindNext	Index 증가하면서 10호차 까지 상태정보 검색.
				//	[1] [2-X] ->[3] ->[4] ... -> [10]
				SendRouteReq( GetChRx() + (2 + g_nIdxRouteFindNext) * ChGap );
 80340fa:	f7fe fb8f 	bl	803281c <GetChRx>
 80340fe:	4602      	mov	r2, r0
 8034100:	4b1f      	ldr	r3, [pc, #124]	; (8034180 <LoopProcRFM+0x4d8>)
 8034102:	681b      	ldr	r3, [r3, #0]
 8034104:	3302      	adds	r3, #2
 8034106:	009b      	lsls	r3, r3, #2
 8034108:	4413      	add	r3, r2
 803410a:	4618      	mov	r0, r3
 803410c:	f7fa fb0c 	bl	802e728 <SendRouteReq>

				if ( ( g_nCarNo + 2 + g_nIdxRouteFindNext ) > 10 )
 8034110:	4b18      	ldr	r3, [pc, #96]	; (8034174 <LoopProcRFM+0x4cc>)
 8034112:	681b      	ldr	r3, [r3, #0]
 8034114:	1c9a      	adds	r2, r3, #2
 8034116:	4b1a      	ldr	r3, [pc, #104]	; (8034180 <LoopProcRFM+0x4d8>)
 8034118:	681b      	ldr	r3, [r3, #0]
 803411a:	4413      	add	r3, r2
 803411c:	2b0a      	cmp	r3, #10
 803411e:	dd03      	ble.n	8034128 <LoopProcRFM+0x480>
					g_nIdxRouteFindNext = 0;
 8034120:	4b17      	ldr	r3, [pc, #92]	; (8034180 <LoopProcRFM+0x4d8>)
 8034122:	2200      	movs	r2, #0
 8034124:	601a      	str	r2, [r3, #0]
 8034126:	e004      	b.n	8034132 <LoopProcRFM+0x48a>
				else
					g_nIdxRouteFindNext++;
 8034128:	4b15      	ldr	r3, [pc, #84]	; (8034180 <LoopProcRFM+0x4d8>)
 803412a:	681b      	ldr	r3, [r3, #0]
 803412c:	3301      	adds	r3, #1
 803412e:	4a14      	ldr	r2, [pc, #80]	; (8034180 <LoopProcRFM+0x4d8>)
 8034130:	6013      	str	r3, [r2, #0]
			}
			s_ChkRsp = 0;
 8034132:	4b11      	ldr	r3, [pc, #68]	; (8034178 <LoopProcRFM+0x4d0>)
 8034134:	2200      	movs	r2, #0
 8034136:	601a      	str	r2, [r3, #0]
		}
	}

#endif

}
 8034138:	bf00      	nop
 803413a:	3764      	adds	r7, #100	; 0x64
 803413c:	46bd      	mov	sp, r7
 803413e:	bd90      	pop	{r4, r7, pc}
 8034140:	40021000 	.word	0x40021000
 8034144:	40020c00 	.word	0x40020c00
 8034148:	20002924 	.word	0x20002924
 803414c:	20002348 	.word	0x20002348
 8034150:	000493e0 	.word	0x000493e0
 8034154:	20000be8 	.word	0x20000be8
 8034158:	200004f0 	.word	0x200004f0
 803415c:	20002928 	.word	0x20002928
 8034160:	2000292c 	.word	0x2000292c
 8034164:	200004fc 	.word	0x200004fc
 8034168:	200004f4 	.word	0x200004f4
 803416c:	2aaaaaab 	.word	0x2aaaaaab
 8034170:	20002930 	.word	0x20002930
 8034174:	2000233c 	.word	0x2000233c
 8034178:	20002934 	.word	0x20002934
 803417c:	20002548 	.word	0x20002548
 8034180:	2000254c 	.word	0x2000254c

08034184 <UpdateStat>:

//========================================================================
void UpdateStat( RFMPktStat *pStat )
//========================================================================
{
 8034184:	b5b0      	push	{r4, r5, r7, lr}
 8034186:	b086      	sub	sp, #24
 8034188:	af02      	add	r7, sp, #8
 803418a:	6078      	str	r0, [r7, #4]
	//	버전정보 갱신.
	if ( pStat == NULL ) return ;
 803418c:	687b      	ldr	r3, [r7, #4]
 803418e:	2b00      	cmp	r3, #0
 8034190:	d045      	beq.n	803421e <UpdateStat+0x9a>

	if ( 0 < pStat->nCarNo && pStat->nCarNo <= MaxCarNo )
 8034192:	687b      	ldr	r3, [r7, #4]
 8034194:	7b5b      	ldrb	r3, [r3, #13]
 8034196:	2b00      	cmp	r3, #0
 8034198:	d042      	beq.n	8034220 <UpdateStat+0x9c>
 803419a:	687b      	ldr	r3, [r7, #4]
 803419c:	7b5b      	ldrb	r3, [r3, #13]
 803419e:	2b0d      	cmp	r3, #13
 80341a0:	d83e      	bhi.n	8034220 <UpdateStat+0x9c>
	{
		int idx = pStat->nCarNo;
 80341a2:	687b      	ldr	r3, [r7, #4]
 80341a4:	7b5b      	ldrb	r3, [r3, #13]
 80341a6:	60fb      	str	r3, [r7, #12]

		//========================================================================
		//	상태정보 갱신.
		memcpy( &g_devStat[idx].stat, pStat, sizeof(RFMPktStat) );
 80341a8:	68fa      	ldr	r2, [r7, #12]
 80341aa:	4613      	mov	r3, r2
 80341ac:	00db      	lsls	r3, r3, #3
 80341ae:	4413      	add	r3, r2
 80341b0:	009b      	lsls	r3, r3, #2
 80341b2:	4413      	add	r3, r2
 80341b4:	4a1c      	ldr	r2, [pc, #112]	; (8034228 <UpdateStat+0xa4>)
 80341b6:	4413      	add	r3, r2
 80341b8:	2219      	movs	r2, #25
 80341ba:	6879      	ldr	r1, [r7, #4]
 80341bc:	4618      	mov	r0, r3
 80341be:	f002 ff73 	bl	80370a8 <memcpy>

		//========================================================================
		//	RSSI 갱신
		g_devStat[idx].nRSSI = g_nRSSI;
 80341c2:	4b1a      	ldr	r3, [pc, #104]	; (803422c <UpdateStat+0xa8>)
 80341c4:	6819      	ldr	r1, [r3, #0]
 80341c6:	4818      	ldr	r0, [pc, #96]	; (8034228 <UpdateStat+0xa4>)
 80341c8:	68fa      	ldr	r2, [r7, #12]
 80341ca:	4613      	mov	r3, r2
 80341cc:	00db      	lsls	r3, r3, #3
 80341ce:	4413      	add	r3, r2
 80341d0:	009b      	lsls	r3, r3, #2
 80341d2:	4413      	add	r3, r2
 80341d4:	4403      	add	r3, r0
 80341d6:	3318      	adds	r3, #24
 80341d8:	f8c3 1005 	str.w	r1, [r3, #5]

		//========================================================================
		//	버전정보 갱신.

#if defined( USE_COMM_MODE_CH_GRP )
		sprintf(_sVerList[idx], "%02d:%d/R%d,%03d", idx,
 80341dc:	68fa      	ldr	r2, [r7, #12]
 80341de:	4613      	mov	r3, r2
 80341e0:	009b      	lsls	r3, r3, #2
 80341e2:	4413      	add	r3, r2
 80341e4:	009b      	lsls	r3, r3, #2
 80341e6:	4a12      	ldr	r2, [pc, #72]	; (8034230 <UpdateStat+0xac>)
 80341e8:	1898      	adds	r0, r3, r2
				pStat->ver_build,
 80341ea:	687b      	ldr	r3, [r7, #4]
 80341ec:	8a5b      	ldrh	r3, [r3, #18]
 80341ee:	b29b      	uxth	r3, r3
		sprintf(_sVerList[idx], "%02d:%d/R%d,%03d", idx,
 80341f0:	461d      	mov	r5, r3
				pStat->nRFMode,
 80341f2:	687b      	ldr	r3, [r7, #4]
 80341f4:	7ddb      	ldrb	r3, [r3, #23]
		sprintf(_sVerList[idx], "%02d:%d/R%d,%03d", idx,
 80341f6:	461c      	mov	r4, r3
 80341f8:	490b      	ldr	r1, [pc, #44]	; (8034228 <UpdateStat+0xa4>)
 80341fa:	68fa      	ldr	r2, [r7, #12]
 80341fc:	4613      	mov	r3, r2
 80341fe:	00db      	lsls	r3, r3, #3
 8034200:	4413      	add	r3, r2
 8034202:	009b      	lsls	r3, r3, #2
 8034204:	4413      	add	r3, r2
 8034206:	440b      	add	r3, r1
 8034208:	3318      	adds	r3, #24
 803420a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 803420e:	9301      	str	r3, [sp, #4]
 8034210:	9400      	str	r4, [sp, #0]
 8034212:	462b      	mov	r3, r5
 8034214:	68fa      	ldr	r2, [r7, #12]
 8034216:	4907      	ldr	r1, [pc, #28]	; (8034234 <UpdateStat+0xb0>)
 8034218:	f003 fa6e 	bl	80376f8 <siprintf>
 803421c:	e000      	b.n	8034220 <UpdateStat+0x9c>
	if ( pStat == NULL ) return ;
 803421e:	bf00      	nop
				pStat->ver_det,
				pStat->ver_build
				);
#endif
	}
}
 8034220:	3710      	adds	r7, #16
 8034222:	46bd      	mov	sp, r7
 8034224:	bdb0      	pop	{r4, r5, r7, pc}
 8034226:	bf00      	nop
 8034228:	20002358 	.word	0x20002358
 803422c:	2000234c 	.word	0x2000234c
 8034230:	20000808 	.word	0x20000808
 8034234:	0803b898 	.word	0x0803b898

08034238 <SetStat>:

//========================================================================
void SetStat( int nRspID )
//========================================================================
{
 8034238:	b580      	push	{r7, lr}
 803423a:	b082      	sub	sp, #8
 803423c:	af00      	add	r7, sp, #0
 803423e:	6078      	str	r0, [r7, #4]
	//	상태정보 저장.
	//	상태정보 수신 시간 저장.

	//	장치 응답 Flag 설정.
	g_flagRspID	|= ( 0x1 << nRspID );
 8034240:	2201      	movs	r2, #1
 8034242:	687b      	ldr	r3, [r7, #4]
 8034244:	fa02 f303 	lsl.w	r3, r2, r3
 8034248:	b21a      	sxth	r2, r3
 803424a:	4b0d      	ldr	r3, [pc, #52]	; (8034280 <SetStat+0x48>)
 803424c:	881b      	ldrh	r3, [r3, #0]
 803424e:	b21b      	sxth	r3, r3
 8034250:	4313      	orrs	r3, r2
 8034252:	b21b      	sxth	r3, r3
 8034254:	b29a      	uxth	r2, r3
 8034256:	4b0a      	ldr	r3, [pc, #40]	; (8034280 <SetStat+0x48>)
 8034258:	801a      	strh	r2, [r3, #0]

	//	TimeStamp 저장.
//DEL	stampStat[nRspID] = HAL_GetTick();
	g_devStat[nRspID].stampRx = HAL_GetTick();
 803425a:	f7ed fc85 	bl	8021b68 <HAL_GetTick>
 803425e:	4603      	mov	r3, r0
 8034260:	4618      	mov	r0, r3
 8034262:	4908      	ldr	r1, [pc, #32]	; (8034284 <SetStat+0x4c>)
 8034264:	687a      	ldr	r2, [r7, #4]
 8034266:	4613      	mov	r3, r2
 8034268:	00db      	lsls	r3, r3, #3
 803426a:	4413      	add	r3, r2
 803426c:	009b      	lsls	r3, r3, #2
 803426e:	4413      	add	r3, r2
 8034270:	440b      	add	r3, r1
 8034272:	3318      	adds	r3, #24
 8034274:	f8c3 0001 	str.w	r0, [r3, #1]
}
 8034278:	bf00      	nop
 803427a:	3708      	adds	r7, #8
 803427c:	46bd      	mov	sp, r7
 803427e:	bd80      	pop	{r7, pc}
 8034280:	200013a0 	.word	0x200013a0
 8034284:	20002358 	.word	0x20002358

08034288 <ReflashStat>:

//========================================================================
void ReflashStat( int nTick )
//========================================================================
{
 8034288:	b580      	push	{r7, lr}
 803428a:	b084      	sub	sp, #16
 803428c:	af00      	add	r7, sp, #0
 803428e:	6078      	str	r0, [r7, #4]
	//	상태정보 갱신.
	//	Timeout 초과 상태정보 Disable
	if( g_bSetRspIDManual )
 8034290:	4b2d      	ldr	r3, [pc, #180]	; (8034348 <ReflashStat+0xc0>)
 8034292:	681b      	ldr	r3, [r3, #0]
 8034294:	2b00      	cmp	r3, #0
 8034296:	d152      	bne.n	803433e <ReflashStat+0xb6>
		return ;
	}

	int idx;

	for( idx = 0; idx < MaxCarNo; idx++ )
 8034298:	2300      	movs	r3, #0
 803429a:	60fb      	str	r3, [r7, #12]
 803429c:	e04b      	b.n	8034336 <ReflashStat+0xae>
	{
		if ( GetCarNo() == idx )
 803429e:	f7fe fde1 	bl	8032e64 <GetCarNo>
 80342a2:	4602      	mov	r2, r0
 80342a4:	68fb      	ldr	r3, [r7, #12]
 80342a6:	4293      	cmp	r3, r2
 80342a8:	d041      	beq.n	803432e <ReflashStat+0xa6>
		{
			//	자신의 ID Skip
			continue;
		}

		if ( ( nTick - g_devStat[idx].stampRx ) > TIMEOUT_RECV_STATUS * 1000 )
 80342aa:	4928      	ldr	r1, [pc, #160]	; (803434c <ReflashStat+0xc4>)
 80342ac:	68fa      	ldr	r2, [r7, #12]
 80342ae:	4613      	mov	r3, r2
 80342b0:	00db      	lsls	r3, r3, #3
 80342b2:	4413      	add	r3, r2
 80342b4:	009b      	lsls	r3, r3, #2
 80342b6:	4413      	add	r3, r2
 80342b8:	440b      	add	r3, r1
 80342ba:	3318      	adds	r3, #24
 80342bc:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80342c0:	687a      	ldr	r2, [r7, #4]
 80342c2:	1ad3      	subs	r3, r2, r3
 80342c4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80342c8:	dd32      	ble.n	8034330 <ReflashStat+0xa8>
		{
			g_flagRspID &= ~( 0x1 << idx );
 80342ca:	2201      	movs	r2, #1
 80342cc:	68fb      	ldr	r3, [r7, #12]
 80342ce:	fa02 f303 	lsl.w	r3, r2, r3
 80342d2:	b21b      	sxth	r3, r3
 80342d4:	43db      	mvns	r3, r3
 80342d6:	b21a      	sxth	r2, r3
 80342d8:	4b1d      	ldr	r3, [pc, #116]	; (8034350 <ReflashStat+0xc8>)
 80342da:	881b      	ldrh	r3, [r3, #0]
 80342dc:	b21b      	sxth	r3, r3
 80342de:	4013      	ands	r3, r2
 80342e0:	b21b      	sxth	r3, r3
 80342e2:	b29a      	uxth	r2, r3
 80342e4:	4b1a      	ldr	r3, [pc, #104]	; (8034350 <ReflashStat+0xc8>)
 80342e6:	801a      	strh	r2, [r3, #0]

			//========================================================================
			//	Timeout 발생시 RSSI값 초기화.
			g_devStat[idx].nRSSI 	= 	0;
 80342e8:	4918      	ldr	r1, [pc, #96]	; (803434c <ReflashStat+0xc4>)
 80342ea:	68fa      	ldr	r2, [r7, #12]
 80342ec:	4613      	mov	r3, r2
 80342ee:	00db      	lsls	r3, r3, #3
 80342f0:	4413      	add	r3, r2
 80342f2:	009b      	lsls	r3, r3, #2
 80342f4:	4413      	add	r3, r2
 80342f6:	440b      	add	r3, r1
 80342f8:	3318      	adds	r3, #24
 80342fa:	2200      	movs	r2, #0
 80342fc:	715a      	strb	r2, [r3, #5]
 80342fe:	2200      	movs	r2, #0
 8034300:	719a      	strb	r2, [r3, #6]
 8034302:	2200      	movs	r2, #0
 8034304:	71da      	strb	r2, [r3, #7]
 8034306:	2200      	movs	r2, #0
 8034308:	721a      	strb	r2, [r3, #8]
			g_devStat[idx].nNearCh 	= 	0;	//	nNearCh 초기화.
 803430a:	4910      	ldr	r1, [pc, #64]	; (803434c <ReflashStat+0xc4>)
 803430c:	68fa      	ldr	r2, [r7, #12]
 803430e:	4613      	mov	r3, r2
 8034310:	00db      	lsls	r3, r3, #3
 8034312:	4413      	add	r3, r2
 8034314:	009b      	lsls	r3, r3, #2
 8034316:	4413      	add	r3, r2
 8034318:	440b      	add	r3, r1
 803431a:	3320      	adds	r3, #32
 803431c:	2200      	movs	r2, #0
 803431e:	705a      	strb	r2, [r3, #1]
 8034320:	2200      	movs	r2, #0
 8034322:	709a      	strb	r2, [r3, #2]
 8034324:	2200      	movs	r2, #0
 8034326:	70da      	strb	r2, [r3, #3]
 8034328:	2200      	movs	r2, #0
 803432a:	711a      	strb	r2, [r3, #4]
 803432c:	e000      	b.n	8034330 <ReflashStat+0xa8>
			continue;
 803432e:	bf00      	nop
	for( idx = 0; idx < MaxCarNo; idx++ )
 8034330:	68fb      	ldr	r3, [r7, #12]
 8034332:	3301      	adds	r3, #1
 8034334:	60fb      	str	r3, [r7, #12]
 8034336:	68fb      	ldr	r3, [r7, #12]
 8034338:	2b0c      	cmp	r3, #12
 803433a:	ddb0      	ble.n	803429e <ReflashStat+0x16>
 803433c:	e000      	b.n	8034340 <ReflashStat+0xb8>
		return ;
 803433e:	bf00      	nop
			//========================================================================
		}
	}
}
 8034340:	3710      	adds	r7, #16
 8034342:	46bd      	mov	sp, r7
 8034344:	bd80      	pop	{r7, pc}
 8034346:	bf00      	nop
 8034348:	2000139c 	.word	0x2000139c
 803434c:	20002358 	.word	0x20002358
 8034350:	200013a0 	.word	0x200013a0

08034354 <ReloadStampStat>:


//========================================================================
void ReloadStampStat( void )
//========================================================================
{
 8034354:	b580      	push	{r7, lr}
 8034356:	b082      	sub	sp, #8
 8034358:	af00      	add	r7, sp, #0
	//	상태정보 시간 갱신.
	//	-> 상태정보 시간 최신값으로 유지.
	//	-> 방송/통화 중 상태정보 전송을 하지 않기 때문에 방송통화 이후에 상태정보가 Reset되는 현상 방지.

	int nStamp = HAL_GetTick();
 803435a:	f7ed fc05 	bl	8021b68 <HAL_GetTick>
 803435e:	4603      	mov	r3, r0
 8034360:	603b      	str	r3, [r7, #0]

	int idx;

	for( idx = 0; idx < 16; idx++ )
 8034362:	2300      	movs	r3, #0
 8034364:	607b      	str	r3, [r7, #4]
 8034366:	e018      	b.n	803439a <ReloadStampStat+0x46>
	{
		if( g_flagRspID & ( 0x1 << idx ) )
 8034368:	4b12      	ldr	r3, [pc, #72]	; (80343b4 <ReloadStampStat+0x60>)
 803436a:	881b      	ldrh	r3, [r3, #0]
 803436c:	461a      	mov	r2, r3
 803436e:	687b      	ldr	r3, [r7, #4]
 8034370:	fa42 f303 	asr.w	r3, r2, r3
 8034374:	f003 0301 	and.w	r3, r3, #1
 8034378:	2b00      	cmp	r3, #0
 803437a:	d00b      	beq.n	8034394 <ReloadStampStat+0x40>
		{
			g_devStat[idx].stampRx = nStamp;
 803437c:	490e      	ldr	r1, [pc, #56]	; (80343b8 <ReloadStampStat+0x64>)
 803437e:	687a      	ldr	r2, [r7, #4]
 8034380:	4613      	mov	r3, r2
 8034382:	00db      	lsls	r3, r3, #3
 8034384:	4413      	add	r3, r2
 8034386:	009b      	lsls	r3, r3, #2
 8034388:	4413      	add	r3, r2
 803438a:	440b      	add	r3, r1
 803438c:	3318      	adds	r3, #24
 803438e:	683a      	ldr	r2, [r7, #0]
 8034390:	f8c3 2001 	str.w	r2, [r3, #1]
	for( idx = 0; idx < 16; idx++ )
 8034394:	687b      	ldr	r3, [r7, #4]
 8034396:	3301      	adds	r3, #1
 8034398:	607b      	str	r3, [r7, #4]
 803439a:	687b      	ldr	r3, [r7, #4]
 803439c:	2b0f      	cmp	r3, #15
 803439e:	dde3      	ble.n	8034368 <ReloadStampStat+0x14>
		}
	}

	g_nStampRouteRsp = HAL_GetTick();		//	Normal 모드로 전환시 응답 시간 Reset
 80343a0:	f7ed fbe2 	bl	8021b68 <HAL_GetTick>
 80343a4:	4603      	mov	r3, r0
 80343a6:	461a      	mov	r2, r3
 80343a8:	4b04      	ldr	r3, [pc, #16]	; (80343bc <ReloadStampStat+0x68>)
 80343aa:	601a      	str	r2, [r3, #0]
}
 80343ac:	bf00      	nop
 80343ae:	3708      	adds	r7, #8
 80343b0:	46bd      	mov	sp, r7
 80343b2:	bd80      	pop	{r7, pc}
 80343b4:	200013a0 	.word	0x200013a0
 80343b8:	20002358 	.word	0x20002358
 80343bc:	20002548 	.word	0x20002548

080343c0 <__io_putchar>:
  * @retval None
  */
//===========================================================================
PUTCHAR_PROTOTYPE
//===========================================================================
{
 80343c0:	b580      	push	{r7, lr}
 80343c2:	b082      	sub	sp, #8
 80343c4:	af00      	add	r7, sp, #0
 80343c6:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */

	//========================================================================
	//	Console
	if ( phuart2 )
 80343c8:	4b1f      	ldr	r3, [pc, #124]	; (8034448 <__io_putchar+0x88>)
 80343ca:	681b      	ldr	r3, [r3, #0]
 80343cc:	2b00      	cmp	r3, #0
 80343ce:	d012      	beq.n	80343f6 <__io_putchar+0x36>
	{
		HAL_UART_Transmit( phuart2, (uint8_t *)&ch, 1, 0xFFFF );
 80343d0:	4b1d      	ldr	r3, [pc, #116]	; (8034448 <__io_putchar+0x88>)
 80343d2:	6818      	ldr	r0, [r3, #0]
 80343d4:	1d39      	adds	r1, r7, #4
 80343d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80343da:	2201      	movs	r2, #1
 80343dc:	f7f4 fbbe 	bl	8028b5c <HAL_UART_Transmit>
		if ( ch == '\n' )
 80343e0:	687b      	ldr	r3, [r7, #4]
 80343e2:	2b0a      	cmp	r3, #10
 80343e4:	d107      	bne.n	80343f6 <__io_putchar+0x36>
		{
			HAL_UART_Transmit( phuart2, (uint8_t *)"\r", 1, 0xFFFF );
 80343e6:	4b18      	ldr	r3, [pc, #96]	; (8034448 <__io_putchar+0x88>)
 80343e8:	6818      	ldr	r0, [r3, #0]
 80343ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80343ee:	2201      	movs	r2, #1
 80343f0:	4916      	ldr	r1, [pc, #88]	; (803444c <__io_putchar+0x8c>)
 80343f2:	f7f4 fbb3 	bl	8028b5c <HAL_UART_Transmit>
	}

	//========================================================================
	//	RS232
	//*
	if ( phuart1 )
 80343f6:	4b16      	ldr	r3, [pc, #88]	; (8034450 <__io_putchar+0x90>)
 80343f8:	681b      	ldr	r3, [r3, #0]
 80343fa:	2b00      	cmp	r3, #0
 80343fc:	d012      	beq.n	8034424 <__io_putchar+0x64>
	{
		HAL_UART_Transmit( phuart1, (uint8_t *)&ch, 1, 0xFFFF );
 80343fe:	4b14      	ldr	r3, [pc, #80]	; (8034450 <__io_putchar+0x90>)
 8034400:	6818      	ldr	r0, [r3, #0]
 8034402:	1d39      	adds	r1, r7, #4
 8034404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8034408:	2201      	movs	r2, #1
 803440a:	f7f4 fba7 	bl	8028b5c <HAL_UART_Transmit>

		if ( ch == '\n' )
 803440e:	687b      	ldr	r3, [r7, #4]
 8034410:	2b0a      	cmp	r3, #10
 8034412:	d107      	bne.n	8034424 <__io_putchar+0x64>
		{
			HAL_UART_Transmit( phuart1, (uint8_t *)"\r", 1, 0xFFFF );
 8034414:	4b0e      	ldr	r3, [pc, #56]	; (8034450 <__io_putchar+0x90>)
 8034416:	6818      	ldr	r0, [r3, #0]
 8034418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 803441c:	2201      	movs	r2, #1
 803441e:	490b      	ldr	r1, [pc, #44]	; (803444c <__io_putchar+0x8c>)
 8034420:	f7f4 fb9c 	bl	8028b5c <HAL_UART_Transmit>
	//	*/
	//========================================================================
	//	USB Serial - RFM 송신기/수신기
	if ( 1 )//g_nDevID != DevNone && g_nDevID == DevRF900T )
	{
		if ( ch == '\n' )
 8034424:	687b      	ldr	r3, [r7, #4]
 8034426:	2b0a      	cmp	r3, #10
 8034428:	d104      	bne.n	8034434 <__io_putchar+0x74>
		{
			CDC_Transmit_FS( (uint8_t *)"\n\r", 2 );
 803442a:	2102      	movs	r1, #2
 803442c:	4809      	ldr	r0, [pc, #36]	; (8034454 <__io_putchar+0x94>)
 803442e:	f002 f97f 	bl	8036730 <CDC_Transmit_FS>
 8034432:	e004      	b.n	803443e <__io_putchar+0x7e>
		}
		else
		{
			CDC_Transmit_FS( (uint8_t *)&ch, 1 );
 8034434:	1d3b      	adds	r3, r7, #4
 8034436:	2101      	movs	r1, #1
 8034438:	4618      	mov	r0, r3
 803443a:	f002 f979 	bl	8036730 <CDC_Transmit_FS>
		}
	}
	//========================================================================

	return ch;
 803443e:	687b      	ldr	r3, [r7, #4]
}
 8034440:	4618      	mov	r0, r3
 8034442:	3708      	adds	r7, #8
 8034444:	46bd      	mov	sp, r7
 8034446:	bd80      	pop	{r7, pc}
 8034448:	20002b5c 	.word	0x20002b5c
 803444c:	0803b8ac 	.word	0x0803b8ac
 8034450:	20002b58 	.word	0x20002b58
 8034454:	0803b8b0 	.word	0x0803b8b0

08034458 <__io_getchar>:

//===========================================================================
GETCHAR_PROTOTYPE
//===========================================================================
{
 8034458:	b580      	push	{r7, lr}
 803445a:	b082      	sub	sp, #8
 803445c:	af00      	add	r7, sp, #0
	char	c;

	while( !qcount( &g_qDebug ) )
 803445e:	bf00      	nop
 8034460:	4809      	ldr	r0, [pc, #36]	; (8034488 <__io_getchar+0x30>)
 8034462:	f7f9 fe6f 	bl	802e144 <qcount>
 8034466:	4603      	mov	r3, r0
 8034468:	2b00      	cmp	r3, #0
 803446a:	d102      	bne.n	8034472 <__io_getchar+0x1a>
	{
//		osDelay(0);
#if defined( USE_FREERTOS )
		taskYIELD();
#else
		return -1;		//	Non-Blocking ( OS less )
 803446c:	f04f 33ff 	mov.w	r3, #4294967295
 8034470:	e005      	b.n	803447e <__io_getchar+0x26>
//		HAL_Delay( 0 );
#endif
	}
	c = qget( &g_qDebug );
 8034472:	4805      	ldr	r0, [pc, #20]	; (8034488 <__io_getchar+0x30>)
 8034474:	f7f9 feae 	bl	802e1d4 <qget>
 8034478:	4603      	mov	r3, r0
 803447a:	71fb      	strb	r3, [r7, #7]

	return c;
 803447c:	79fb      	ldrb	r3, [r7, #7]
}
 803447e:	4618      	mov	r0, r3
 8034480:	3708      	adds	r7, #8
 8034482:	46bd      	mov	sp, r7
 8034484:	bd80      	pop	{r7, pc}
 8034486:	bf00      	nop
 8034488:	20002938 	.word	0x20002938

0803448c <HAL_UART_RxCpltCallback>:
  * @retval None
  */
//===========================================================================
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
//===========================================================================
{
 803448c:	b580      	push	{r7, lr}
 803448e:	b082      	sub	sp, #8
 8034490:	af00      	add	r7, sp, #0
 8034492:	6078      	str	r0, [r7, #4]
	//	portBASE_TYPE	xHigherPriorityTaskWoken = pdFALSE;
	//	인터럽트.

	//===========================================================================
	//	Debug Console
	if ( huart->Instance == USART2 )
 8034494:	687b      	ldr	r3, [r7, #4]
 8034496:	681b      	ldr	r3, [r3, #0]
 8034498:	4a10      	ldr	r2, [pc, #64]	; (80344dc <HAL_UART_RxCpltCallback+0x50>)
 803449a:	4293      	cmp	r3, r2
 803449c:	d10a      	bne.n	80344b4 <HAL_UART_RxCpltCallback+0x28>
	{
		//	문자 Queue에 쌓기.
		qput( &g_qDebug, dataDbgTx[0] );
 803449e:	4b10      	ldr	r3, [pc, #64]	; (80344e0 <HAL_UART_RxCpltCallback+0x54>)
 80344a0:	781b      	ldrb	r3, [r3, #0]
 80344a2:	4619      	mov	r1, r3
 80344a4:	480f      	ldr	r0, [pc, #60]	; (80344e4 <HAL_UART_RxCpltCallback+0x58>)
 80344a6:	f7f9 fe65 	bl	802e174 <qput>

		//	입력내용 콘솔로 출력.
//DEL		HAL_UART_Transmit( huart, (uint8_t *)&dataDbgTx[0], 1, 0xFFFF );

		HAL_UART_Receive_IT( huart, dataDbgTx, 1 );
 80344aa:	2201      	movs	r2, #1
 80344ac:	490c      	ldr	r1, [pc, #48]	; (80344e0 <HAL_UART_RxCpltCallback+0x54>)
 80344ae:	6878      	ldr	r0, [r7, #4]
 80344b0:	f7f4 fbed 	bl	8028c8e <HAL_UART_Receive_IT>
	}

	//===========================================================================
	//	RS232
	if ( huart->Instance == USART1 )
 80344b4:	687b      	ldr	r3, [r7, #4]
 80344b6:	681b      	ldr	r3, [r3, #0]
 80344b8:	4a0b      	ldr	r2, [pc, #44]	; (80344e8 <HAL_UART_RxCpltCallback+0x5c>)
 80344ba:	4293      	cmp	r3, r2
 80344bc:	d10a      	bne.n	80344d4 <HAL_UART_RxCpltCallback+0x48>
	{
		qput( &g_qDebug, dataTx1[0] );
 80344be:	4b0b      	ldr	r3, [pc, #44]	; (80344ec <HAL_UART_RxCpltCallback+0x60>)
 80344c0:	781b      	ldrb	r3, [r3, #0]
 80344c2:	4619      	mov	r1, r3
 80344c4:	4807      	ldr	r0, [pc, #28]	; (80344e4 <HAL_UART_RxCpltCallback+0x58>)
 80344c6:	f7f9 fe55 	bl	802e174 <qput>
//		qput( &g_qRS485, dataTx1[0] );	//	입력내용 콘솔로 출력.

//DEL		HAL_UART_Transmit( huart, (uint8_t *)&dataTx1[0], 1, 0xFFFF );

		HAL_UART_Receive_IT( huart, dataTx1, 1 );
 80344ca:	2201      	movs	r2, #1
 80344cc:	4907      	ldr	r1, [pc, #28]	; (80344ec <HAL_UART_RxCpltCallback+0x60>)
 80344ce:	6878      	ldr	r0, [r7, #4]
 80344d0:	f7f4 fbdd 	bl	8028c8e <HAL_UART_Receive_IT>
	}

	//===========================================================================
}
 80344d4:	bf00      	nop
 80344d6:	3708      	adds	r7, #8
 80344d8:	46bd      	mov	sp, r7
 80344da:	bd80      	pop	{r7, pc}
 80344dc:	40004400 	.word	0x40004400
 80344e0:	20002b48 	.word	0x20002b48
 80344e4:	20002938 	.word	0x20002938
 80344e8:	40011000 	.word	0x40011000
 80344ec:	20002b50 	.word	0x20002b50

080344f0 <SerialInitQueue>:


// ============================================================================
void SerialInitQueue( void )
//===========================================================================
{
 80344f0:	b580      	push	{r7, lr}
 80344f2:	af00      	add	r7, sp, #0
//	xDebugQueueRx = xQueueCreate( DEBUG_RX_QUEUE_SIZE, sizeof( char ) );

	//	Debug Queue
	init_queue( &g_qDebug );
 80344f4:	4803      	ldr	r0, [pc, #12]	; (8034504 <SerialInitQueue+0x14>)
 80344f6:	f7f9 fe11 	bl	802e11c <init_queue>

	//	RS485 Queue
	init_queue( &g_qRS485 );
 80344fa:	4803      	ldr	r0, [pc, #12]	; (8034508 <SerialInitQueue+0x18>)
 80344fc:	f7f9 fe0e 	bl	802e11c <init_queue>
}
 8034500:	bf00      	nop
 8034502:	bd80      	pop	{r7, pc}
 8034504:	20002938 	.word	0x20002938
 8034508:	20002a40 	.word	0x20002a40

0803450c <SerialInit>:

//===========================================================================
void SerialInit( UART_HandleTypeDef *_phuart1, UART_HandleTypeDef *_phuart2 )
//===========================================================================
{
 803450c:	b580      	push	{r7, lr}
 803450e:	b082      	sub	sp, #8
 8034510:	af00      	add	r7, sp, #0
 8034512:	6078      	str	r0, [r7, #4]
 8034514:	6039      	str	r1, [r7, #0]
	SerialInitQueue();
 8034516:	f7ff ffeb 	bl	80344f0 <SerialInitQueue>

	//===========================================================================
	//	Set Serial Handle
	phuart1 = _phuart1;
 803451a:	4a10      	ldr	r2, [pc, #64]	; (803455c <SerialInit+0x50>)
 803451c:	687b      	ldr	r3, [r7, #4]
 803451e:	6013      	str	r3, [r2, #0]
	phuart2 = _phuart2;
 8034520:	4a0f      	ldr	r2, [pc, #60]	; (8034560 <SerialInit+0x54>)
 8034522:	683b      	ldr	r3, [r7, #0]
 8034524:	6013      	str	r3, [r2, #0]

#if defined(_WIN32)
#else

	//	UART Console
	if ( phuart2 )
 8034526:	4b0e      	ldr	r3, [pc, #56]	; (8034560 <SerialInit+0x54>)
 8034528:	681b      	ldr	r3, [r3, #0]
 803452a:	2b00      	cmp	r3, #0
 803452c:	d006      	beq.n	803453c <SerialInit+0x30>
	{
		HAL_UART_Receive_IT( phuart2, dataDbgTx, 1 );
 803452e:	4b0c      	ldr	r3, [pc, #48]	; (8034560 <SerialInit+0x54>)
 8034530:	681b      	ldr	r3, [r3, #0]
 8034532:	2201      	movs	r2, #1
 8034534:	490b      	ldr	r1, [pc, #44]	; (8034564 <SerialInit+0x58>)
 8034536:	4618      	mov	r0, r3
 8034538:	f7f4 fba9 	bl	8028c8e <HAL_UART_Receive_IT>
	}

	//	UART RS485
	if ( phuart1 )
 803453c:	4b07      	ldr	r3, [pc, #28]	; (803455c <SerialInit+0x50>)
 803453e:	681b      	ldr	r3, [r3, #0]
 8034540:	2b00      	cmp	r3, #0
 8034542:	d006      	beq.n	8034552 <SerialInit+0x46>
	{
		HAL_UART_Receive_IT( phuart1, dataTx1, 1 );
 8034544:	4b05      	ldr	r3, [pc, #20]	; (803455c <SerialInit+0x50>)
 8034546:	681b      	ldr	r3, [r3, #0]
 8034548:	2201      	movs	r2, #1
 803454a:	4907      	ldr	r1, [pc, #28]	; (8034568 <SerialInit+0x5c>)
 803454c:	4618      	mov	r0, r3
 803454e:	f7f4 fb9e 	bl	8028c8e <HAL_UART_Receive_IT>
	}

#endif
}
 8034552:	bf00      	nop
 8034554:	3708      	adds	r7, #8
 8034556:	46bd      	mov	sp, r7
 8034558:	bd80      	pop	{r7, pc}
 803455a:	bf00      	nop
 803455c:	20002b58 	.word	0x20002b58
 8034560:	20002b5c 	.word	0x20002b5c
 8034564:	20002b48 	.word	0x20002b48
 8034568:	20002b50 	.word	0x20002b50

0803456c <input_check>:

//===========================================================================
int input_check( void )
//===========================================================================
{
 803456c:	b580      	push	{r7, lr}
 803456e:	af00      	add	r7, sp, #0
	return qcount( &g_qDebug );
 8034570:	4802      	ldr	r0, [pc, #8]	; (803457c <input_check+0x10>)
 8034572:	f7f9 fde7 	bl	802e144 <qcount>
 8034576:	4603      	mov	r3, r0
	uint8_t	c;

	xStatus = xQueuePeek(xDebugQueueRx, &c, 0);
	return xStatus;
	*/
}
 8034578:	4618      	mov	r0, r3
 803457a:	bd80      	pop	{r7, pc}
 803457c:	20002938 	.word	0x20002938

08034580 <_UTF8ToUnicode>:


//===========================================================================
static int _UTF8ToUnicode ( const char_t * UTF8, uint16_t  *uc )
//===========================================================================
{
 8034580:	b480      	push	{r7}
 8034582:	b085      	sub	sp, #20
 8034584:	af00      	add	r7, sp, #0
 8034586:	6078      	str	r0, [r7, #4]
 8034588:	6039      	str	r1, [r7, #0]
	int tRequiredSize = 0;
 803458a:	2300      	movs	r3, #0
 803458c:	60fb      	str	r3, [r7, #12]

	*uc = 0x0000;
 803458e:	683b      	ldr	r3, [r7, #0]
 8034590:	2200      	movs	r2, #0
 8034592:	801a      	strh	r2, [r3, #0]

	// ASCII byte 
	if ( 0 == ( UTF8[0] & 0x80 ) )
 8034594:	687b      	ldr	r3, [r7, #4]
 8034596:	781b      	ldrb	r3, [r3, #0]
 8034598:	b25b      	sxtb	r3, r3
 803459a:	2b00      	cmp	r3, #0
 803459c:	db07      	blt.n	80345ae <_UTF8ToUnicode+0x2e>
	{
		*uc = UTF8[0];
 803459e:	687b      	ldr	r3, [r7, #4]
 80345a0:	781b      	ldrb	r3, [r3, #0]
 80345a2:	b29a      	uxth	r2, r3
 80345a4:	683b      	ldr	r3, [r7, #0]
 80345a6:	801a      	strh	r2, [r3, #0]
		tRequiredSize = 1;
 80345a8:	2301      	movs	r3, #1
 80345aa:	60fb      	str	r3, [r7, #12]
 80345ac:	e069      	b.n	8034682 <_UTF8ToUnicode+0x102>
	}
	// Start byte for 2byte
	else if ( 0xC0 == ( UTF8[0] & 0xE0 ) &&
 80345ae:	687b      	ldr	r3, [r7, #4]
 80345b0:	781b      	ldrb	r3, [r3, #0]
 80345b2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80345b6:	2bc0      	cmp	r3, #192	; 0xc0
 80345b8:	d123      	bne.n	8034602 <_UTF8ToUnicode+0x82>
		0x80 == ( UTF8[1] & 0xC0 ) )
 80345ba:	687b      	ldr	r3, [r7, #4]
 80345bc:	3301      	adds	r3, #1
 80345be:	781b      	ldrb	r3, [r3, #0]
 80345c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	else if ( 0xC0 == ( UTF8[0] & 0xE0 ) &&
 80345c4:	2b80      	cmp	r3, #128	; 0x80
 80345c6:	d11c      	bne.n	8034602 <_UTF8ToUnicode+0x82>
	{
		*uc += ( UTF8[0] & 0x1F ) << 6;
 80345c8:	683b      	ldr	r3, [r7, #0]
 80345ca:	881a      	ldrh	r2, [r3, #0]
 80345cc:	687b      	ldr	r3, [r7, #4]
 80345ce:	781b      	ldrb	r3, [r3, #0]
 80345d0:	019b      	lsls	r3, r3, #6
 80345d2:	b29b      	uxth	r3, r3
 80345d4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80345d8:	b29b      	uxth	r3, r3
 80345da:	4413      	add	r3, r2
 80345dc:	b29a      	uxth	r2, r3
 80345de:	683b      	ldr	r3, [r7, #0]
 80345e0:	801a      	strh	r2, [r3, #0]
		*uc += ( UTF8[1] & 0x3F ) << 0;
 80345e2:	683b      	ldr	r3, [r7, #0]
 80345e4:	881a      	ldrh	r2, [r3, #0]
 80345e6:	687b      	ldr	r3, [r7, #4]
 80345e8:	3301      	adds	r3, #1
 80345ea:	781b      	ldrb	r3, [r3, #0]
 80345ec:	b29b      	uxth	r3, r3
 80345ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80345f2:	b29b      	uxth	r3, r3
 80345f4:	4413      	add	r3, r2
 80345f6:	b29a      	uxth	r2, r3
 80345f8:	683b      	ldr	r3, [r7, #0]
 80345fa:	801a      	strh	r2, [r3, #0]
		tRequiredSize = 2;
 80345fc:	2302      	movs	r3, #2
 80345fe:	60fb      	str	r3, [r7, #12]
 8034600:	e03f      	b.n	8034682 <_UTF8ToUnicode+0x102>
	}
	// Start byte for 3byte
	else if ( 0xE0 == ( UTF8[0] & 0xE0 ) &&
 8034602:	687b      	ldr	r3, [r7, #4]
 8034604:	781b      	ldrb	r3, [r3, #0]
 8034606:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 803460a:	2be0      	cmp	r3, #224	; 0xe0
 803460c:	d139      	bne.n	8034682 <_UTF8ToUnicode+0x102>
		0x80 == ( UTF8[1] & 0xC0 ) &&
 803460e:	687b      	ldr	r3, [r7, #4]
 8034610:	3301      	adds	r3, #1
 8034612:	781b      	ldrb	r3, [r3, #0]
 8034614:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	else if ( 0xE0 == ( UTF8[0] & 0xE0 ) &&
 8034618:	2b80      	cmp	r3, #128	; 0x80
 803461a:	d132      	bne.n	8034682 <_UTF8ToUnicode+0x102>
		0x80 == ( UTF8[2] & 0xC0 ) )
 803461c:	687b      	ldr	r3, [r7, #4]
 803461e:	3302      	adds	r3, #2
 8034620:	781b      	ldrb	r3, [r3, #0]
 8034622:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		0x80 == ( UTF8[1] & 0xC0 ) &&
 8034626:	2b80      	cmp	r3, #128	; 0x80
 8034628:	d12b      	bne.n	8034682 <_UTF8ToUnicode+0x102>
	{
		*uc += ( UTF8[0] & 0x1F ) << 12;
 803462a:	683b      	ldr	r3, [r7, #0]
 803462c:	881a      	ldrh	r2, [r3, #0]
 803462e:	687b      	ldr	r3, [r7, #4]
 8034630:	781b      	ldrb	r3, [r3, #0]
 8034632:	031b      	lsls	r3, r3, #12
 8034634:	b29b      	uxth	r3, r3
 8034636:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 803463a:	f023 030f 	bic.w	r3, r3, #15
 803463e:	b29b      	uxth	r3, r3
 8034640:	4413      	add	r3, r2
 8034642:	b29a      	uxth	r2, r3
 8034644:	683b      	ldr	r3, [r7, #0]
 8034646:	801a      	strh	r2, [r3, #0]
		*uc += ( UTF8[1] & 0x3F ) << 6;
 8034648:	683b      	ldr	r3, [r7, #0]
 803464a:	881a      	ldrh	r2, [r3, #0]
 803464c:	687b      	ldr	r3, [r7, #4]
 803464e:	3301      	adds	r3, #1
 8034650:	781b      	ldrb	r3, [r3, #0]
 8034652:	019b      	lsls	r3, r3, #6
 8034654:	b29b      	uxth	r3, r3
 8034656:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 803465a:	b29b      	uxth	r3, r3
 803465c:	4413      	add	r3, r2
 803465e:	b29a      	uxth	r2, r3
 8034660:	683b      	ldr	r3, [r7, #0]
 8034662:	801a      	strh	r2, [r3, #0]
		*uc += ( UTF8[2] & 0x3F ) << 0;
 8034664:	683b      	ldr	r3, [r7, #0]
 8034666:	881a      	ldrh	r2, [r3, #0]
 8034668:	687b      	ldr	r3, [r7, #4]
 803466a:	3302      	adds	r3, #2
 803466c:	781b      	ldrb	r3, [r3, #0]
 803466e:	b29b      	uxth	r3, r3
 8034670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034674:	b29b      	uxth	r3, r3
 8034676:	4413      	add	r3, r2
 8034678:	b29a      	uxth	r2, r3
 803467a:	683b      	ldr	r3, [r7, #0]
 803467c:	801a      	strh	r2, [r3, #0]
		tRequiredSize = 3;
 803467e:	2303      	movs	r3, #3
 8034680:	60fb      	str	r3, [r7, #12]
	{
		// Invalid case
		//assert(false);
	}

	return tRequiredSize;
 8034682:	68fb      	ldr	r3, [r7, #12]
}
 8034684:	4618      	mov	r0, r3
 8034686:	3714      	adds	r7, #20
 8034688:	46bd      	mov	sp, r7
 803468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803468e:	4770      	bx	lr

08034690 <UTF8ToUnicode>:
*/

//===========================================================================
int UTF8ToUnicode( const char_t * szUTF8, uint16_t* szUni )
//===========================================================================
{
 8034690:	b580      	push	{r7, lr}
 8034692:	b088      	sub	sp, #32
 8034694:	af00      	add	r7, sp, #0
 8034696:	6078      	str	r0, [r7, #4]
 8034698:	6039      	str	r1, [r7, #0]
	int tReadPos = 0;
 803469a:	2300      	movs	r3, #0
 803469c:	61fb      	str	r3, [r7, #28]
	int i = 0;
 803469e:	2300      	movs	r3, #0
 80346a0:	61bb      	str	r3, [r7, #24]
	int tUTF8Len;

	tUTF8Len = strlen( szUTF8 );
 80346a2:	6878      	ldr	r0, [r7, #4]
 80346a4:	f7eb fd9e 	bl	80201e4 <strlen>
 80346a8:	4603      	mov	r3, r0
 80346aa:	617b      	str	r3, [r7, #20]

	for ( i = 0; tReadPos < tUTF8Len; i++ )
 80346ac:	2300      	movs	r3, #0
 80346ae:	61bb      	str	r3, [r7, #24]
 80346b0:	e02a      	b.n	8034708 <UTF8ToUnicode+0x78>
	{
		if ( szUTF8[i] == NULL )
 80346b2:	69bb      	ldr	r3, [r7, #24]
 80346b4:	687a      	ldr	r2, [r7, #4]
 80346b6:	4413      	add	r3, r2
 80346b8:	781b      	ldrb	r3, [r3, #0]
 80346ba:	2b00      	cmp	r3, #0
 80346bc:	d101      	bne.n	80346c2 <UTF8ToUnicode+0x32>
			return i;
 80346be:	69bb      	ldr	r3, [r7, #24]
 80346c0:	e027      	b.n	8034712 <UTF8ToUnicode+0x82>

		uint16_t tTempUnicodeChar = 0;
 80346c2:	2300      	movs	r3, #0
 80346c4:	81fb      	strh	r3, [r7, #14]
		int tSize = _UTF8ToUnicode( szUTF8 + tReadPos, &tTempUnicodeChar );
 80346c6:	69fb      	ldr	r3, [r7, #28]
 80346c8:	687a      	ldr	r2, [r7, #4]
 80346ca:	4413      	add	r3, r2
 80346cc:	f107 020e 	add.w	r2, r7, #14
 80346d0:	4611      	mov	r1, r2
 80346d2:	4618      	mov	r0, r3
 80346d4:	f7ff ff54 	bl	8034580 <_UTF8ToUnicode>
 80346d8:	6138      	str	r0, [r7, #16]
		if ( NULL != szUni )
 80346da:	683b      	ldr	r3, [r7, #0]
 80346dc:	2b00      	cmp	r3, #0
 80346de:	d005      	beq.n	80346ec <UTF8ToUnicode+0x5c>
			szUni[i] = tTempUnicodeChar;
 80346e0:	69bb      	ldr	r3, [r7, #24]
 80346e2:	005b      	lsls	r3, r3, #1
 80346e4:	683a      	ldr	r2, [r7, #0]
 80346e6:	4413      	add	r3, r2
 80346e8:	89fa      	ldrh	r2, [r7, #14]
 80346ea:	801a      	strh	r2, [r3, #0]
		szUni[i + 1] = '\0';
 80346ec:	69bb      	ldr	r3, [r7, #24]
 80346ee:	3301      	adds	r3, #1
 80346f0:	005b      	lsls	r3, r3, #1
 80346f2:	683a      	ldr	r2, [r7, #0]
 80346f4:	4413      	add	r3, r2
 80346f6:	2200      	movs	r2, #0
 80346f8:	801a      	strh	r2, [r3, #0]
		tReadPos += tSize;
 80346fa:	69fa      	ldr	r2, [r7, #28]
 80346fc:	693b      	ldr	r3, [r7, #16]
 80346fe:	4413      	add	r3, r2
 8034700:	61fb      	str	r3, [r7, #28]
	for ( i = 0; tReadPos < tUTF8Len; i++ )
 8034702:	69bb      	ldr	r3, [r7, #24]
 8034704:	3301      	adds	r3, #1
 8034706:	61bb      	str	r3, [r7, #24]
 8034708:	69fa      	ldr	r2, [r7, #28]
 803470a:	697b      	ldr	r3, [r7, #20]
 803470c:	429a      	cmp	r2, r3
 803470e:	dbd0      	blt.n	80346b2 <UTF8ToUnicode+0x22>
	}
	return i;
 8034710:	69bb      	ldr	r3, [r7, #24]
}
 8034712:	4618      	mov	r0, r3
 8034714:	3720      	adds	r7, #32
 8034716:	46bd      	mov	sp, r7
 8034718:	bd80      	pop	{r7, pc}
	...

0803471c <ksc5601_wctomb>:
  { 8221, 0x0000 }, { 8221, 0x0000 }, { 8221, 0x006f },
};

static int
ksc5601_wctomb (unsigned char *r, const uint16_t wc)
{
 803471c:	b480      	push	{r7}
 803471e:	b087      	sub	sp, #28
 8034720:	af00      	add	r7, sp, #0
 8034722:	6078      	str	r0, [r7, #4]
 8034724:	460b      	mov	r3, r1
 8034726:	807b      	strh	r3, [r7, #2]
    const Summary16 *summary = NULL;
 8034728:	2300      	movs	r3, #0
 803472a:	617b      	str	r3, [r7, #20]
    if (wc >= 0x0000 && wc < 0x0460)
 803472c:	887b      	ldrh	r3, [r7, #2]
 803472e:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8034732:	d207      	bcs.n	8034744 <ksc5601_wctomb+0x28>
      summary = &ksc5601_uni2indx_page00[(wc>>4)];
 8034734:	887b      	ldrh	r3, [r7, #2]
 8034736:	091b      	lsrs	r3, r3, #4
 8034738:	b29b      	uxth	r3, r3
 803473a:	009b      	lsls	r3, r3, #2
 803473c:	4a75      	ldr	r2, [pc, #468]	; (8034914 <ksc5601_wctomb+0x1f8>)
 803473e:	4413      	add	r3, r2
 8034740:	617b      	str	r3, [r7, #20]
 8034742:	e070      	b.n	8034826 <ksc5601_wctomb+0x10a>
    else if (wc >= 0x2000 && wc < 0x2670)
 8034744:	887b      	ldrh	r3, [r7, #2]
 8034746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803474a:	d30e      	bcc.n	803476a <ksc5601_wctomb+0x4e>
 803474c:	887b      	ldrh	r3, [r7, #2]
 803474e:	f242 626f 	movw	r2, #9839	; 0x266f
 8034752:	4293      	cmp	r3, r2
 8034754:	d809      	bhi.n	803476a <ksc5601_wctomb+0x4e>
      summary = &ksc5601_uni2indx_page20[(wc>>4)-0x200];
 8034756:	887b      	ldrh	r3, [r7, #2]
 8034758:	091b      	lsrs	r3, r3, #4
 803475a:	b29b      	uxth	r3, r3
 803475c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8034760:	009b      	lsls	r3, r3, #2
 8034762:	4a6d      	ldr	r2, [pc, #436]	; (8034918 <ksc5601_wctomb+0x1fc>)
 8034764:	4413      	add	r3, r2
 8034766:	617b      	str	r3, [r7, #20]
 8034768:	e05d      	b.n	8034826 <ksc5601_wctomb+0x10a>
    else if (wc >= 0x3000 && wc < 0x33e0)
 803476a:	887b      	ldrh	r3, [r7, #2]
 803476c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8034770:	d30e      	bcc.n	8034790 <ksc5601_wctomb+0x74>
 8034772:	887b      	ldrh	r3, [r7, #2]
 8034774:	f243 32df 	movw	r2, #13279	; 0x33df
 8034778:	4293      	cmp	r3, r2
 803477a:	d809      	bhi.n	8034790 <ksc5601_wctomb+0x74>
      summary = &ksc5601_uni2indx_page30[(wc>>4)-0x300];
 803477c:	887b      	ldrh	r3, [r7, #2]
 803477e:	091b      	lsrs	r3, r3, #4
 8034780:	b29b      	uxth	r3, r3
 8034782:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8034786:	009b      	lsls	r3, r3, #2
 8034788:	4a64      	ldr	r2, [pc, #400]	; (803491c <ksc5601_wctomb+0x200>)
 803478a:	4413      	add	r3, r2
 803478c:	617b      	str	r3, [r7, #20]
 803478e:	e04a      	b.n	8034826 <ksc5601_wctomb+0x10a>
    else if (wc >= 0x4e00 && wc < 0x9fa0)
 8034790:	887b      	ldrh	r3, [r7, #2]
 8034792:	f5b3 4f9c 	cmp.w	r3, #19968	; 0x4e00
 8034796:	d30e      	bcc.n	80347b6 <ksc5601_wctomb+0x9a>
 8034798:	887b      	ldrh	r3, [r7, #2]
 803479a:	f649 729f 	movw	r2, #40863	; 0x9f9f
 803479e:	4293      	cmp	r3, r2
 80347a0:	d809      	bhi.n	80347b6 <ksc5601_wctomb+0x9a>
      summary = &ksc5601_uni2indx_page4e[(wc>>4)-0x4e0];
 80347a2:	887b      	ldrh	r3, [r7, #2]
 80347a4:	091b      	lsrs	r3, r3, #4
 80347a6:	b29b      	uxth	r3, r3
 80347a8:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80347ac:	009b      	lsls	r3, r3, #2
 80347ae:	4a5c      	ldr	r2, [pc, #368]	; (8034920 <ksc5601_wctomb+0x204>)
 80347b0:	4413      	add	r3, r2
 80347b2:	617b      	str	r3, [r7, #20]
 80347b4:	e037      	b.n	8034826 <ksc5601_wctomb+0x10a>
    else if (wc >= 0xac00 && wc < 0xd7a0)
 80347b6:	887b      	ldrh	r3, [r7, #2]
 80347b8:	f5b3 4f2c 	cmp.w	r3, #44032	; 0xac00
 80347bc:	d30e      	bcc.n	80347dc <ksc5601_wctomb+0xc0>
 80347be:	887b      	ldrh	r3, [r7, #2]
 80347c0:	f24d 729f 	movw	r2, #55199	; 0xd79f
 80347c4:	4293      	cmp	r3, r2
 80347c6:	d809      	bhi.n	80347dc <ksc5601_wctomb+0xc0>
      summary = &ksc5601_uni2indx_pageac[(wc>>4)-0xac0];
 80347c8:	887b      	ldrh	r3, [r7, #2]
 80347ca:	091b      	lsrs	r3, r3, #4
 80347cc:	b29b      	uxth	r3, r3
 80347ce:	f5a3 632c 	sub.w	r3, r3, #2752	; 0xac0
 80347d2:	009b      	lsls	r3, r3, #2
 80347d4:	4a53      	ldr	r2, [pc, #332]	; (8034924 <ksc5601_wctomb+0x208>)
 80347d6:	4413      	add	r3, r2
 80347d8:	617b      	str	r3, [r7, #20]
 80347da:	e024      	b.n	8034826 <ksc5601_wctomb+0x10a>
    else if (wc >= 0xf900 && wc < 0xfa10)
 80347dc:	887b      	ldrh	r3, [r7, #2]
 80347de:	f5b3 4f79 	cmp.w	r3, #63744	; 0xf900
 80347e2:	d30e      	bcc.n	8034802 <ksc5601_wctomb+0xe6>
 80347e4:	887b      	ldrh	r3, [r7, #2]
 80347e6:	f64f 220f 	movw	r2, #64015	; 0xfa0f
 80347ea:	4293      	cmp	r3, r2
 80347ec:	d809      	bhi.n	8034802 <ksc5601_wctomb+0xe6>
      summary = &ksc5601_uni2indx_pagef9[(wc>>4)-0xf90];
 80347ee:	887b      	ldrh	r3, [r7, #2]
 80347f0:	091b      	lsrs	r3, r3, #4
 80347f2:	b29b      	uxth	r3, r3
 80347f4:	f5a3 6379 	sub.w	r3, r3, #3984	; 0xf90
 80347f8:	009b      	lsls	r3, r3, #2
 80347fa:	4a4b      	ldr	r2, [pc, #300]	; (8034928 <ksc5601_wctomb+0x20c>)
 80347fc:	4413      	add	r3, r2
 80347fe:	617b      	str	r3, [r7, #20]
 8034800:	e011      	b.n	8034826 <ksc5601_wctomb+0x10a>
    else if (wc >= 0xff00 && wc < 0xfff0)
 8034802:	887b      	ldrh	r3, [r7, #2]
 8034804:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8034808:	d30d      	bcc.n	8034826 <ksc5601_wctomb+0x10a>
 803480a:	887b      	ldrh	r3, [r7, #2]
 803480c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8034810:	4293      	cmp	r3, r2
 8034812:	d808      	bhi.n	8034826 <ksc5601_wctomb+0x10a>
      summary = &ksc5601_uni2indx_pageff[(wc>>4)-0xff0];
 8034814:	887b      	ldrh	r3, [r7, #2]
 8034816:	091b      	lsrs	r3, r3, #4
 8034818:	b29b      	uxth	r3, r3
 803481a:	f5a3 637f 	sub.w	r3, r3, #4080	; 0xff0
 803481e:	009b      	lsls	r3, r3, #2
 8034820:	4a42      	ldr	r2, [pc, #264]	; (803492c <ksc5601_wctomb+0x210>)
 8034822:	4413      	add	r3, r2
 8034824:	617b      	str	r3, [r7, #20]

    if (summary)
 8034826:	697b      	ldr	r3, [r7, #20]
 8034828:	2b00      	cmp	r3, #0
 803482a:	d06a      	beq.n	8034902 <ksc5601_wctomb+0x1e6>
	{
      unsigned short used = summary->used;
 803482c:	697b      	ldr	r3, [r7, #20]
 803482e:	885b      	ldrh	r3, [r3, #2]
 8034830:	827b      	strh	r3, [r7, #18]
      unsigned int i = wc & 0x0f;
 8034832:	887b      	ldrh	r3, [r7, #2]
 8034834:	f003 030f 	and.w	r3, r3, #15
 8034838:	60fb      	str	r3, [r7, #12]
      if (used & ((unsigned short) 1 << i)) {
 803483a:	8a7a      	ldrh	r2, [r7, #18]
 803483c:	68fb      	ldr	r3, [r7, #12]
 803483e:	fa42 f303 	asr.w	r3, r2, r3
 8034842:	f003 0301 	and.w	r3, r3, #1
 8034846:	2b00      	cmp	r3, #0
 8034848:	d05b      	beq.n	8034902 <ksc5601_wctomb+0x1e6>
        unsigned short c;
        /* Keep in 'used' only the bits 0..i-1. */
        used &= ((unsigned short) 1 << i) - 1;
 803484a:	2201      	movs	r2, #1
 803484c:	68fb      	ldr	r3, [r7, #12]
 803484e:	fa02 f303 	lsl.w	r3, r2, r3
 8034852:	b29b      	uxth	r3, r3
 8034854:	3b01      	subs	r3, #1
 8034856:	b29b      	uxth	r3, r3
 8034858:	b21a      	sxth	r2, r3
 803485a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803485e:	4013      	ands	r3, r2
 8034860:	b21b      	sxth	r3, r3
 8034862:	827b      	strh	r3, [r7, #18]
        /* Add 'summary->indx' and the number of bits set in 'used'. */
        used = (used & 0x5555) + ((used & 0xaaaa) >> 1);
 8034864:	8a7b      	ldrh	r3, [r7, #18]
 8034866:	f423 532a 	bic.w	r3, r3, #10880	; 0x2a80
 803486a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 803486e:	045b      	lsls	r3, r3, #17
 8034870:	0c5b      	lsrs	r3, r3, #17
 8034872:	b29a      	uxth	r2, r3
 8034874:	8a7b      	ldrh	r3, [r7, #18]
 8034876:	105b      	asrs	r3, r3, #1
 8034878:	b299      	uxth	r1, r3
 803487a:	f245 5355 	movw	r3, #21845	; 0x5555
 803487e:	400b      	ands	r3, r1
 8034880:	b29b      	uxth	r3, r3
 8034882:	4413      	add	r3, r2
 8034884:	827b      	strh	r3, [r7, #18]
        used = (used & 0x3333) + ((used & 0xcccc) >> 2);
 8034886:	8a7b      	ldrh	r3, [r7, #18]
 8034888:	f423 634c 	bic.w	r3, r3, #3264	; 0xcc0
 803488c:	f023 030c 	bic.w	r3, r3, #12
 8034890:	049b      	lsls	r3, r3, #18
 8034892:	0c9b      	lsrs	r3, r3, #18
 8034894:	b29a      	uxth	r2, r3
 8034896:	8a7b      	ldrh	r3, [r7, #18]
 8034898:	109b      	asrs	r3, r3, #2
 803489a:	b299      	uxth	r1, r3
 803489c:	f243 3333 	movw	r3, #13107	; 0x3333
 80348a0:	400b      	ands	r3, r1
 80348a2:	b29b      	uxth	r3, r3
 80348a4:	4413      	add	r3, r2
 80348a6:	827b      	strh	r3, [r7, #18]
        used = (used & 0x0f0f) + ((used & 0xf0f0) >> 4);
 80348a8:	8a7b      	ldrh	r3, [r7, #18]
 80348aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80348ae:	051b      	lsls	r3, r3, #20
 80348b0:	0d1b      	lsrs	r3, r3, #20
 80348b2:	b29a      	uxth	r2, r3
 80348b4:	8a7b      	ldrh	r3, [r7, #18]
 80348b6:	111b      	asrs	r3, r3, #4
 80348b8:	b299      	uxth	r1, r3
 80348ba:	f640 730f 	movw	r3, #3855	; 0xf0f
 80348be:	400b      	ands	r3, r1
 80348c0:	b29b      	uxth	r3, r3
 80348c2:	4413      	add	r3, r2
 80348c4:	827b      	strh	r3, [r7, #18]
        used = (used & 0x00ff) + (used >> 8);
 80348c6:	8a7b      	ldrh	r3, [r7, #18]
 80348c8:	b2db      	uxtb	r3, r3
 80348ca:	b29a      	uxth	r2, r3
 80348cc:	8a7b      	ldrh	r3, [r7, #18]
 80348ce:	0a1b      	lsrs	r3, r3, #8
 80348d0:	b29b      	uxth	r3, r3
 80348d2:	4413      	add	r3, r2
 80348d4:	827b      	strh	r3, [r7, #18]
        c = ksc5601_2charset[summary->indx + used];
 80348d6:	697b      	ldr	r3, [r7, #20]
 80348d8:	881b      	ldrh	r3, [r3, #0]
 80348da:	461a      	mov	r2, r3
 80348dc:	8a7b      	ldrh	r3, [r7, #18]
 80348de:	4413      	add	r3, r2
 80348e0:	4a13      	ldr	r2, [pc, #76]	; (8034930 <ksc5601_wctomb+0x214>)
 80348e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80348e6:	817b      	strh	r3, [r7, #10]
        r[0] = (c >> 8); r[1] = (c & 0xff);
 80348e8:	897b      	ldrh	r3, [r7, #10]
 80348ea:	0a1b      	lsrs	r3, r3, #8
 80348ec:	b29b      	uxth	r3, r3
 80348ee:	b2da      	uxtb	r2, r3
 80348f0:	687b      	ldr	r3, [r7, #4]
 80348f2:	701a      	strb	r2, [r3, #0]
 80348f4:	687b      	ldr	r3, [r7, #4]
 80348f6:	3301      	adds	r3, #1
 80348f8:	897a      	ldrh	r2, [r7, #10]
 80348fa:	b2d2      	uxtb	r2, r2
 80348fc:	701a      	strb	r2, [r3, #0]
        return 2;
 80348fe:	2302      	movs	r3, #2
 8034900:	e001      	b.n	8034906 <ksc5601_wctomb+0x1ea>
      }
    }
    return RET_ILUNI;
 8034902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8034906:	4618      	mov	r0, r3
 8034908:	371c      	adds	r7, #28
 803490a:	46bd      	mov	sp, r7
 803490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034910:	4770      	bx	lr
 8034912:	bf00      	nop
 8034914:	08045afc 	.word	0x08045afc
 8034918:	08045c14 	.word	0x08045c14
 803491c:	08045db0 	.word	0x08045db0
 8034920:	08045ea8 	.word	0x08045ea8
 8034924:	08047310 	.word	0x08047310
 8034928:	08047df8 	.word	0x08047df8
 803492c:	08047e3c 	.word	0x08047e3c
 8034930:	08041ab4 	.word	0x08041ab4

08034934 <cp949_wctomb>:
}

//===========================================================================
static int cp949_wctomb ( const uint16_t wc, char_t *r )
//===========================================================================
{
 8034934:	b580      	push	{r7, lr}
 8034936:	b084      	sub	sp, #16
 8034938:	af00      	add	r7, sp, #0
 803493a:	4603      	mov	r3, r0
 803493c:	6039      	str	r1, [r7, #0]
 803493e:	80fb      	strh	r3, [r7, #6]
	unsigned char buf[2];
	int ret;

	/* Code set 0 (ASCII) */

	if ( wc < 0x80 )
 8034940:	88fb      	ldrh	r3, [r7, #6]
 8034942:	2b7f      	cmp	r3, #127	; 0x7f
 8034944:	d809      	bhi.n	803495a <cp949_wctomb+0x26>
	{
		*r = ( wc & 0xFF );
 8034946:	88fb      	ldrh	r3, [r7, #6]
 8034948:	b2da      	uxtb	r2, r3
 803494a:	683b      	ldr	r3, [r7, #0]
 803494c:	701a      	strb	r2, [r3, #0]
		r[1] = '\0';
 803494e:	683b      	ldr	r3, [r7, #0]
 8034950:	3301      	adds	r3, #1
 8034952:	2200      	movs	r2, #0
 8034954:	701a      	strb	r2, [r3, #0]

		return 1;
 8034956:	2301      	movs	r3, #1
 8034958:	e049      	b.n	80349ee <cp949_wctomb+0xba>
//	ret = ascii_wctomb( conv, r, wc, n );
//	if ( ret != RET_ILUNI )
//		return ret;

	/* Code set 1 (KS C 5601-1992, now KS X 1001:1998) */
	if ( wc != 0x327e )
 803495a:	88fb      	ldrh	r3, [r7, #6]
 803495c:	f243 227e 	movw	r2, #12926	; 0x327e
 8034960:	4293      	cmp	r3, r2
 8034962:	d01d      	beq.n	80349a0 <cp949_wctomb+0x6c>
	{
		ret = ksc5601_wctomb( buf, wc );
 8034964:	88fa      	ldrh	r2, [r7, #6]
 8034966:	f107 0308 	add.w	r3, r7, #8
 803496a:	4611      	mov	r1, r2
 803496c:	4618      	mov	r0, r3
 803496e:	f7ff fed5 	bl	803471c <ksc5601_wctomb>
 8034972:	60f8      	str	r0, [r7, #12]
		if ( ret != RET_ILUNI )
 8034974:	68fb      	ldr	r3, [r7, #12]
 8034976:	f1b3 3fff 	cmp.w	r3, #4294967295
 803497a:	d011      	beq.n	80349a0 <cp949_wctomb+0x6c>
		{
			if ( ret != 2 ) abort();
 803497c:	68fb      	ldr	r3, [r7, #12]
 803497e:	2b02      	cmp	r3, #2
 8034980:	d001      	beq.n	8034986 <cp949_wctomb+0x52>
 8034982:	f002 fb2e 	bl	8036fe2 <abort>
//			if ( n < 2 )
//				return RET_TOOSMALL;
			r[0] = buf[0] + 0x80;
 8034986:	7a3b      	ldrb	r3, [r7, #8]
 8034988:	3b80      	subs	r3, #128	; 0x80
 803498a:	b2da      	uxtb	r2, r3
 803498c:	683b      	ldr	r3, [r7, #0]
 803498e:	701a      	strb	r2, [r3, #0]
			r[1] = buf[1] + 0x80;
 8034990:	7a7a      	ldrb	r2, [r7, #9]
 8034992:	683b      	ldr	r3, [r7, #0]
 8034994:	3301      	adds	r3, #1
 8034996:	3a80      	subs	r2, #128	; 0x80
 8034998:	b2d2      	uxtb	r2, r2
 803499a:	701a      	strb	r2, [r3, #0]
			return 2;
 803499c:	2302      	movs	r3, #2
 803499e:	e026      	b.n	80349ee <cp949_wctomb+0xba>
//		else
//			return uhc_2_wctomb( conv, r, wc, n );
//	}

	/* User-defined characters */
	if ( wc >= 0xe000 && wc < 0xe0bc )
 80349a0:	88fb      	ldrh	r3, [r7, #6]
 80349a2:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80349a6:	d320      	bcc.n	80349ea <cp949_wctomb+0xb6>
 80349a8:	88fb      	ldrh	r3, [r7, #6]
 80349aa:	f24e 02bb 	movw	r2, #57531	; 0xe0bb
 80349ae:	4293      	cmp	r3, r2
 80349b0:	d81b      	bhi.n	80349ea <cp949_wctomb+0xb6>
	{
//		if ( n < 2 )
//			return RET_TOOSMALL;
		if ( wc < 0xe05e )
 80349b2:	88fb      	ldrh	r3, [r7, #6]
 80349b4:	f24e 025d 	movw	r2, #57437	; 0xe05d
 80349b8:	4293      	cmp	r3, r2
 80349ba:	d80a      	bhi.n	80349d2 <cp949_wctomb+0x9e>
		{
			r[0] = 0xc9;
 80349bc:	683b      	ldr	r3, [r7, #0]
 80349be:	22c9      	movs	r2, #201	; 0xc9
 80349c0:	701a      	strb	r2, [r3, #0]
			r[1] = wc - 0xe000 + 0xa1;
 80349c2:	88fb      	ldrh	r3, [r7, #6]
 80349c4:	b2da      	uxtb	r2, r3
 80349c6:	683b      	ldr	r3, [r7, #0]
 80349c8:	3301      	adds	r3, #1
 80349ca:	3a5f      	subs	r2, #95	; 0x5f
 80349cc:	b2d2      	uxtb	r2, r2
 80349ce:	701a      	strb	r2, [r3, #0]
 80349d0:	e009      	b.n	80349e6 <cp949_wctomb+0xb2>
		}
		else
		{
			r[0] = 0xfe;
 80349d2:	683b      	ldr	r3, [r7, #0]
 80349d4:	22fe      	movs	r2, #254	; 0xfe
 80349d6:	701a      	strb	r2, [r3, #0]
			r[1] = wc - 0xe05e + 0xa1;
 80349d8:	88fb      	ldrh	r3, [r7, #6]
 80349da:	b2da      	uxtb	r2, r3
 80349dc:	683b      	ldr	r3, [r7, #0]
 80349de:	3301      	adds	r3, #1
 80349e0:	3243      	adds	r2, #67	; 0x43
 80349e2:	b2d2      	uxtb	r2, r2
 80349e4:	701a      	strb	r2, [r3, #0]
		}
		return 2;
 80349e6:	2302      	movs	r3, #2
 80349e8:	e001      	b.n	80349ee <cp949_wctomb+0xba>
	}

	return RET_ILUNI;
 80349ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80349ee:	4618      	mov	r0, r3
 80349f0:	3710      	adds	r7, #16
 80349f2:	46bd      	mov	sp, r7
 80349f4:	bd80      	pop	{r7, pc}

080349f6 <UnicodeToCP949>:


//===========================================================================
int UnicodeToCP949( const uint16_t * szUni, char_t * CP949 )
//===========================================================================
{
 80349f6:	b580      	push	{r7, lr}
 80349f8:	b086      	sub	sp, #24
 80349fa:	af00      	add	r7, sp, #0
 80349fc:	6078      	str	r0, [r7, #4]
 80349fe:	6039      	str	r1, [r7, #0]
	int tReadPos = 0;
 8034a00:	2300      	movs	r3, #0
 8034a02:	617b      	str	r3, [r7, #20]
	int i = 0;
 8034a04:	2300      	movs	r3, #0
 8034a06:	613b      	str	r3, [r7, #16]

	for ( i = 0; szUni[i] != NULL; i++ )
 8034a08:	2300      	movs	r3, #0
 8034a0a:	613b      	str	r3, [r7, #16]
 8034a0c:	e014      	b.n	8034a38 <UnicodeToCP949+0x42>
	{
		uint16_t tTempUnicodeChar = 0;
 8034a0e:	2300      	movs	r3, #0
 8034a10:	81fb      	strh	r3, [r7, #14]
		int tSize = cp949_wctomb( szUni[i], CP949 + tReadPos );
 8034a12:	693b      	ldr	r3, [r7, #16]
 8034a14:	005b      	lsls	r3, r3, #1
 8034a16:	687a      	ldr	r2, [r7, #4]
 8034a18:	4413      	add	r3, r2
 8034a1a:	8818      	ldrh	r0, [r3, #0]
 8034a1c:	697b      	ldr	r3, [r7, #20]
 8034a1e:	683a      	ldr	r2, [r7, #0]
 8034a20:	4413      	add	r3, r2
 8034a22:	4619      	mov	r1, r3
 8034a24:	f7ff ff86 	bl	8034934 <cp949_wctomb>
 8034a28:	60b8      	str	r0, [r7, #8]

		tReadPos += tSize;
 8034a2a:	697a      	ldr	r2, [r7, #20]
 8034a2c:	68bb      	ldr	r3, [r7, #8]
 8034a2e:	4413      	add	r3, r2
 8034a30:	617b      	str	r3, [r7, #20]
	for ( i = 0; szUni[i] != NULL; i++ )
 8034a32:	693b      	ldr	r3, [r7, #16]
 8034a34:	3301      	adds	r3, #1
 8034a36:	613b      	str	r3, [r7, #16]
 8034a38:	693b      	ldr	r3, [r7, #16]
 8034a3a:	005b      	lsls	r3, r3, #1
 8034a3c:	687a      	ldr	r2, [r7, #4]
 8034a3e:	4413      	add	r3, r2
 8034a40:	881b      	ldrh	r3, [r3, #0]
 8034a42:	2b00      	cmp	r3, #0
 8034a44:	d1e3      	bne.n	8034a0e <UnicodeToCP949+0x18>
	}

	return 0;
 8034a46:	2300      	movs	r3, #0
}
 8034a48:	4618      	mov	r0, r3
 8034a4a:	3718      	adds	r7, #24
 8034a4c:	46bd      	mov	sp, r7
 8034a4e:	bd80      	pop	{r7, pc}

08034a50 <UTF8ToCP949>:
}

//===========================================================================
int UTF8ToCP949 		( const char_t *szUTF8, char_t *szCP949 )
//===========================================================================
{
 8034a50:	b580      	push	{r7, lr}
 8034a52:	b0a2      	sub	sp, #136	; 0x88
 8034a54:	af00      	add	r7, sp, #0
 8034a56:	6078      	str	r0, [r7, #4]
 8034a58:	6039      	str	r1, [r7, #0]
	uint16_t	szBuf[64];
	memset( szBuf, 0, sizeof( szBuf ) );
 8034a5a:	f107 0308 	add.w	r3, r7, #8
 8034a5e:	2280      	movs	r2, #128	; 0x80
 8034a60:	2100      	movs	r1, #0
 8034a62:	4618      	mov	r0, r3
 8034a64:	f002 fb2e 	bl	80370c4 <memset>

	UTF8ToUnicode( szUTF8, szBuf );
 8034a68:	f107 0308 	add.w	r3, r7, #8
 8034a6c:	4619      	mov	r1, r3
 8034a6e:	6878      	ldr	r0, [r7, #4]
 8034a70:	f7ff fe0e 	bl	8034690 <UTF8ToUnicode>

	return UnicodeToCP949( szBuf, szCP949 );
 8034a74:	f107 0308 	add.w	r3, r7, #8
 8034a78:	6839      	ldr	r1, [r7, #0]
 8034a7a:	4618      	mov	r0, r3
 8034a7c:	f7ff ffbb 	bl	80349f6 <UnicodeToCP949>
 8034a80:	4603      	mov	r3, r0
}
 8034a82:	4618      	mov	r0, r3
 8034a84:	3788      	adds	r7, #136	; 0x88
 8034a86:	46bd      	mov	sp, r7
 8034a88:	bd80      	pop	{r7, pc}
	...

08034a8c <SetUpgrReTry>:
// Function

//========================================================================
void SetUpgrReTry( int _bUpgrRetry )
//========================================================================
{
 8034a8c:	b480      	push	{r7}
 8034a8e:	b083      	sub	sp, #12
 8034a90:	af00      	add	r7, sp, #0
 8034a92:	6078      	str	r0, [r7, #4]
	s_bUpgrRetry = _bUpgrRetry;
 8034a94:	4a04      	ldr	r2, [pc, #16]	; (8034aa8 <SetUpgrReTry+0x1c>)
 8034a96:	687b      	ldr	r3, [r7, #4]
 8034a98:	6013      	str	r3, [r2, #0]
}
 8034a9a:	bf00      	nop
 8034a9c:	370c      	adds	r7, #12
 8034a9e:	46bd      	mov	sp, r7
 8034aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034aa4:	4770      	bx	lr
 8034aa6:	bf00      	nop
 8034aa8:	20002b60 	.word	0x20002b60

08034aac <GetUpgrReTry>:

//========================================================================
int GetUpgrReTry( void )
//========================================================================
{
 8034aac:	b480      	push	{r7}
 8034aae:	af00      	add	r7, sp, #0
	return s_bUpgrRetry;
 8034ab0:	4b03      	ldr	r3, [pc, #12]	; (8034ac0 <GetUpgrReTry+0x14>)
 8034ab2:	681b      	ldr	r3, [r3, #0]
}
 8034ab4:	4618      	mov	r0, r3
 8034ab6:	46bd      	mov	sp, r7
 8034ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034abc:	4770      	bx	lr
 8034abe:	bf00      	nop
 8034ac0:	20002b60 	.word	0x20002b60

08034ac4 <UpgrSendImage>:


//========================================================================
int UpgrSendImage		( uint32_t nAddrBase, uint32_t nSizeImage )
//========================================================================
{
 8034ac4:	b580      	push	{r7, lr}
 8034ac6:	b0ba      	sub	sp, #232	; 0xe8
 8034ac8:	af02      	add	r7, sp, #8
 8034aca:	6078      	str	r0, [r7, #4]
 8034acc:	6039      	str	r1, [r7, #0]
	//	송신기 Upgrade 명령.
	printf( "%s(%d) - baseAddr(0x%08X) / size(%d)\n", __func__, __LINE__, nAddrBase, nSizeImage );
 8034ace:	683b      	ldr	r3, [r7, #0]
 8034ad0:	9300      	str	r3, [sp, #0]
 8034ad2:	687b      	ldr	r3, [r7, #4]
 8034ad4:	2237      	movs	r2, #55	; 0x37
 8034ad6:	4962      	ldr	r1, [pc, #392]	; (8034c60 <UpgrSendImage+0x19c>)
 8034ad8:	4862      	ldr	r0, [pc, #392]	; (8034c64 <UpgrSendImage+0x1a0>)
 8034ada:	f002 fbdb 	bl	8037294 <iprintf>
	//========================================================================
	//	0x0800 0000 ~ 0x0807 FFFF	:	Bootloader + Application
	//========================================================================
	//	0x0808 0000 ~ 0x080F FFFF	:	Upgrade Image
	//========================================================================
	nAddrTarget		=	nAddrBase + 0x80000;// + SIZE_FLASH_BOOTAPP;
 8034ade:	687b      	ldr	r3, [r7, #4]
 8034ae0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8034ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	int i, j;
//	int nTotPkt = ( ( nSizeImage + 49 ) / 50 );
	int nTotPkt = ( ( nSizeImage + (PktUpgrDataSize - 1) ) / PktUpgrDataSize );
 8034ae8:	683b      	ldr	r3, [r7, #0]
 8034aea:	332f      	adds	r3, #47	; 0x2f
 8034aec:	4a5e      	ldr	r2, [pc, #376]	; (8034c68 <UpgrSendImage+0x1a4>)
 8034aee:	fba2 2303 	umull	r2, r3, r2, r3
 8034af2:	095b      	lsrs	r3, r3, #5
 8034af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	char	sLCD[100];

	LCDEnableDebug( 0 );	//	LCD - console printf Off
 8034af8:	2000      	movs	r0, #0
 8034afa:	f7f7 ff2b 	bl	802c954 <LCDEnableDebug>

	for ( i = 0; i < nTotPkt; i++ )
 8034afe:	2300      	movs	r3, #0
 8034b00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8034b04:	e08d      	b.n	8034c22 <UpgrSendImage+0x15e>
	{
		//	Flash Data 전송.
//		memcpy( sBuf, (__IO uint8_t*)(nAddrBase + (i * 50)), 50 );
//		SendUpgrData( nAddrTarget, nTotPkt, i, sBuf, 50 );
		memcpy( sBuf, (__IO uint8_t*)(nAddrBase + (i * PktUpgrDataSize)), PktUpgrDataSize );
 8034b06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034b0a:	4613      	mov	r3, r2
 8034b0c:	005b      	lsls	r3, r3, #1
 8034b0e:	4413      	add	r3, r2
 8034b10:	011b      	lsls	r3, r3, #4
 8034b12:	461a      	mov	r2, r3
 8034b14:	687b      	ldr	r3, [r7, #4]
 8034b16:	4413      	add	r3, r2
 8034b18:	4619      	mov	r1, r3
 8034b1a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8034b1e:	2230      	movs	r2, #48	; 0x30
 8034b20:	4618      	mov	r0, r3
 8034b22:	f002 fac1 	bl	80370a8 <memcpy>
		SendUpgrData( nAddrTarget, nTotPkt, i, sBuf, PktUpgrDataSize );
 8034b26:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8034b2a:	2230      	movs	r2, #48	; 0x30
 8034b2c:	9200      	str	r2, [sp, #0]
 8034b2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034b32:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8034b36:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8034b3a:	f7fa f84f 	bl	802ebdc <SendUpgrData>

		//========================================================================
		if ( i == 0 && GetUpgrReTry() == 0 )
 8034b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8034b42:	2b00      	cmp	r3, #0
 8034b44:	d131      	bne.n	8034baa <UpgrSendImage+0xe6>
 8034b46:	f7ff ffb1 	bl	8034aac <GetUpgrReTry>
 8034b4a:	4603      	mov	r3, r0
 8034b4c:	2b00      	cmp	r3, #0
 8034b4e:	d12c      	bne.n	8034baa <UpgrSendImage+0xe6>
		{
			//	첫번째 패킷 전송후  Flash Erase Delay : 3 sec
			__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8034b50:	4b46      	ldr	r3, [pc, #280]	; (8034c6c <UpgrSendImage+0x1a8>)
 8034b52:	681b      	ldr	r3, [r3, #0]
 8034b54:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8034b58:	601a      	str	r2, [r3, #0]
			sprintf( sLCD, "Upgr:FL Erase", i, nTotPkt );
 8034b5a:	f107 0008 	add.w	r0, r7, #8
 8034b5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8034b62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034b66:	4942      	ldr	r1, [pc, #264]	; (8034c70 <UpgrSendImage+0x1ac>)
 8034b68:	f002 fdc6 	bl	80376f8 <siprintf>
			LCDSetCursor( 1, 13 );
 8034b6c:	210d      	movs	r1, #13
 8034b6e:	2001      	movs	r0, #1
 8034b70:	f7f7 fed6 	bl	802c920 <LCDSetCursor>
			LCDPrintf( sLCD );
 8034b74:	f107 0308 	add.w	r3, r7, #8
 8034b78:	4618      	mov	r0, r3
 8034b7a:	f7f7 ff01 	bl	802c980 <LCDPrintf>
//			HAL_Delay( 3000 );		//	sleep 3 sec
			for( j = 0; j < 7; j++ )	//	sleep 7 sec
 8034b7e:	2300      	movs	r3, #0
 8034b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8034b84:	e00d      	b.n	8034ba2 <UpgrSendImage+0xde>
			{
				HAL_Delay( 1000 );
 8034b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8034b8a:	f7ec fff9 	bl	8021b80 <HAL_Delay>
				__HAL_IWDG_RELOAD_COUNTER(&hiwdg);	//	Watchdog Re-Flash
 8034b8e:	4b37      	ldr	r3, [pc, #220]	; (8034c6c <UpgrSendImage+0x1a8>)
 8034b90:	681b      	ldr	r3, [r3, #0]
 8034b92:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8034b96:	601a      	str	r2, [r3, #0]
			for( j = 0; j < 7; j++ )	//	sleep 7 sec
 8034b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8034b9c:	3301      	adds	r3, #1
 8034b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8034ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8034ba6:	2b06      	cmp	r3, #6
 8034ba8:	dded      	ble.n	8034b86 <UpgrSendImage+0xc2>
		//========================================================================

		//	수신기 Message 표시.
		//	159,596 Byte = 3191 Pkt * 50 Byte
		//	Upgr:[   1 / 3191 ]
		if ( ( i % 10 ) == 0 )
 8034baa:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8034bae:	4b31      	ldr	r3, [pc, #196]	; (8034c74 <UpgrSendImage+0x1b0>)
 8034bb0:	fb83 2301 	smull	r2, r3, r3, r1
 8034bb4:	109a      	asrs	r2, r3, #2
 8034bb6:	17cb      	asrs	r3, r1, #31
 8034bb8:	1ad2      	subs	r2, r2, r3
 8034bba:	4613      	mov	r3, r2
 8034bbc:	009b      	lsls	r3, r3, #2
 8034bbe:	4413      	add	r3, r2
 8034bc0:	005b      	lsls	r3, r3, #1
 8034bc2:	1aca      	subs	r2, r1, r3
 8034bc4:	2a00      	cmp	r2, #0
 8034bc6:	d111      	bne.n	8034bec <UpgrSendImage+0x128>
		{
			sprintf( sLCD, "Upgr:[%4d/%4d]", i, nTotPkt );
 8034bc8:	f107 0008 	add.w	r0, r7, #8
 8034bcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8034bd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034bd4:	4928      	ldr	r1, [pc, #160]	; (8034c78 <UpgrSendImage+0x1b4>)
 8034bd6:	f002 fd8f 	bl	80376f8 <siprintf>
			LCDSetCursor( 1, 13 );
 8034bda:	210d      	movs	r1, #13
 8034bdc:	2001      	movs	r0, #1
 8034bde:	f7f7 fe9f 	bl	802c920 <LCDSetCursor>
			LCDPrintf( sLCD );
 8034be2:	f107 0308 	add.w	r3, r7, #8
 8034be6:	4618      	mov	r0, r3
 8034be8:	f7f7 feca 	bl	802c980 <LCDPrintf>
		}

//		HAL_Delay( 4 );	//	4 msec Delay
//		HAL_Delay( 3 );	//	2 msec Delay
		HAL_Delay( 2 );	//	2 msec Delay
 8034bec:	2002      	movs	r0, #2
 8034bee:	f7ec ffc7 	bl	8021b80 <HAL_Delay>

		//========================================================================
		//	Watchdog Reload
		if ( ( i % 50 ) == 0 )
 8034bf2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034bf6:	4b21      	ldr	r3, [pc, #132]	; (8034c7c <UpgrSendImage+0x1b8>)
 8034bf8:	fb83 1302 	smull	r1, r3, r3, r2
 8034bfc:	1119      	asrs	r1, r3, #4
 8034bfe:	17d3      	asrs	r3, r2, #31
 8034c00:	1acb      	subs	r3, r1, r3
 8034c02:	2132      	movs	r1, #50	; 0x32
 8034c04:	fb01 f303 	mul.w	r3, r1, r3
 8034c08:	1ad3      	subs	r3, r2, r3
 8034c0a:	2b00      	cmp	r3, #0
 8034c0c:	d104      	bne.n	8034c18 <UpgrSendImage+0x154>
		{
			__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8034c0e:	4b17      	ldr	r3, [pc, #92]	; (8034c6c <UpgrSendImage+0x1a8>)
 8034c10:	681b      	ldr	r3, [r3, #0]
 8034c12:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8034c16:	601a      	str	r2, [r3, #0]
	for ( i = 0; i < nTotPkt; i++ )
 8034c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8034c1c:	3301      	adds	r3, #1
 8034c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8034c22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034c26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8034c2a:	429a      	cmp	r2, r3
 8034c2c:	f6ff af6b 	blt.w	8034b06 <UpgrSendImage+0x42>
		}
		//========================================================================
	}

	sprintf( sLCD, "Upgr:[%4d/%4d]", i, nTotPkt );
 8034c30:	f107 0008 	add.w	r0, r7, #8
 8034c34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8034c38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8034c3c:	490e      	ldr	r1, [pc, #56]	; (8034c78 <UpgrSendImage+0x1b4>)
 8034c3e:	f002 fd5b 	bl	80376f8 <siprintf>
	LCDSetCursor( 1, 13 );
 8034c42:	210d      	movs	r1, #13
 8034c44:	2001      	movs	r0, #1
 8034c46:	f7f7 fe6b 	bl	802c920 <LCDSetCursor>
	LCDPrintf( sLCD );
 8034c4a:	f107 0308 	add.w	r3, r7, #8
 8034c4e:	4618      	mov	r0, r3
 8034c50:	f7f7 fe96 	bl	802c980 <LCDPrintf>
}
 8034c54:	bf00      	nop
 8034c56:	4618      	mov	r0, r3
 8034c58:	37e0      	adds	r7, #224	; 0xe0
 8034c5a:	46bd      	mov	sp, r7
 8034c5c:	bd80      	pop	{r7, pc}
 8034c5e:	bf00      	nop
 8034c60:	08047e78 	.word	0x08047e78
 8034c64:	0803b8b4 	.word	0x0803b8b4
 8034c68:	aaaaaaab 	.word	0xaaaaaaab
 8034c6c:	20000fe8 	.word	0x20000fe8
 8034c70:	0803b8dc 	.word	0x0803b8dc
 8034c74:	66666667 	.word	0x66666667
 8034c78:	0803b8ec 	.word	0x0803b8ec
 8034c7c:	51eb851f 	.word	0x51eb851f

08034c80 <UpgrSendImageApp>:
}

//========================================================================
int UpgrSendImageApp	( void )
//========================================================================
{
 8034c80:	b580      	push	{r7, lr}
 8034c82:	af00      	add	r7, sp, #0
	//	송신기 Upgrade 명령. - Application
	UpgrSendImage( ADDR_FLASH_APP, FLASH_If_GetAppSize() );
 8034c84:	f7fc fcb6 	bl	80315f4 <FLASH_If_GetAppSize>
 8034c88:	4603      	mov	r3, r0
 8034c8a:	4619      	mov	r1, r3
 8034c8c:	4802      	ldr	r0, [pc, #8]	; (8034c98 <UpgrSendImageApp+0x18>)
 8034c8e:	f7ff ff19 	bl	8034ac4 <UpgrSendImage>
}
 8034c92:	bf00      	nop
 8034c94:	4618      	mov	r0, r3
 8034c96:	bd80      	pop	{r7, pc}
 8034c98:	08020000 	.word	0x08020000

08034c9c <cmd_upgrade>:

//========================================================================
int cmd_upgrade	( int argc, char * argv[] )
//========================================================================
{
 8034c9c:	b580      	push	{r7, lr}
 8034c9e:	b084      	sub	sp, #16
 8034ca0:	af00      	add	r7, sp, #0
 8034ca2:	6078      	str	r0, [r7, #4]
 8034ca4:	6039      	str	r1, [r7, #0]
	//	Upgrade 수신측에서 동작.
	//========================================================================
	//	upgrade ch 1	//	Upgrade 채널 변경.
	//	upgrade [1/0]	//	1(Start) / 0(End)

	int nVal = 1;
 8034ca6:	2301      	movs	r3, #1
 8034ca8:	60fb      	str	r3, [r7, #12]

	printf( "%s(%d)\n", __func__, __LINE__ );
 8034caa:	229f      	movs	r2, #159	; 0x9f
 8034cac:	4922      	ldr	r1, [pc, #136]	; (8034d38 <cmd_upgrade+0x9c>)
 8034cae:	4823      	ldr	r0, [pc, #140]	; (8034d3c <cmd_upgrade+0xa0>)
 8034cb0:	f002 faf0 	bl	8037294 <iprintf>

	//========================================================================
	switch ( argc )
 8034cb4:	687b      	ldr	r3, [r7, #4]
 8034cb6:	2b02      	cmp	r3, #2
 8034cb8:	d109      	bne.n	8034cce <cmd_upgrade+0x32>
	{
	case 2:		sscanf( argv[2], "%d", &nVal );			//	cmd [address] [value]
 8034cba:	683b      	ldr	r3, [r7, #0]
 8034cbc:	3308      	adds	r3, #8
 8034cbe:	681b      	ldr	r3, [r3, #0]
 8034cc0:	f107 020c 	add.w	r2, r7, #12
 8034cc4:	491e      	ldr	r1, [pc, #120]	; (8034d40 <cmd_upgrade+0xa4>)
 8034cc6:	4618      	mov	r0, r3
 8034cc8:	f002 fd36 	bl	8037738 <siscanf>
//    case 2:		sscanf( argv[1], "%d", &nAddr );		//	cmd [address]
		break;
 8034ccc:	bf00      	nop
	}

	if ( nVal == 1 )
 8034cce:	68fb      	ldr	r3, [r7, #12]
 8034cd0:	2b01      	cmp	r3, #1
 8034cd2:	d116      	bne.n	8034d02 <cmd_upgrade+0x66>
		//========================================================================
		//	Upgrade Start

		//========================================================================
		//	채널변경. => CH #1
		g_nChRx = ChUpgrDst;		//	Upgrade Channel
 8034cd4:	4b1b      	ldr	r3, [pc, #108]	; (8034d44 <cmd_upgrade+0xa8>)
 8034cd6:	2203      	movs	r2, #3
 8034cd8:	601a      	str	r2, [r3, #0]

		vRadio_StartRX (
 8034cda:	4b1a      	ldr	r3, [pc, #104]	; (8034d44 <cmd_upgrade+0xa8>)
 8034cdc:	681b      	ldr	r3, [r3, #0]
 8034cde:	b2da      	uxtb	r2, r3
			g_nChRx,	//g_idxTrainSet,	//	pRadioConfiguration->Radio_ChannelNumber,
			pRadioConfiguration->Radio_PacketLength );
 8034ce0:	4b19      	ldr	r3, [pc, #100]	; (8034d48 <cmd_upgrade+0xac>)
 8034ce2:	681b      	ldr	r3, [r3, #0]
		vRadio_StartRX (
 8034ce4:	795b      	ldrb	r3, [r3, #5]
 8034ce6:	4619      	mov	r1, r3
 8034ce8:	4610      	mov	r0, r2
 8034cea:	f7f8 fb59 	bl	802d3a0 <vRadio_StartRX>

		//========================================================================
		//	Upgrade시 수신기 조명 점등.
		HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
 8034cee:	2201      	movs	r2, #1
 8034cf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8034cf4:	4815      	ldr	r0, [pc, #84]	; (8034d4c <cmd_upgrade+0xb0>)
 8034cf6:	f7ee fc11 	bl	802351c <HAL_GPIO_WritePin>
		//========================================================================
		//	Log 출력 Off

		//========================================================================
		//	Upgrade Mode
		SetRFMMode( RFMModeUpgr );		//	Upgrade Mode 설정. ( 상태정보 전송 X )
 8034cfa:	2004      	movs	r0, #4
 8034cfc:	f7fd fd20 	bl	8032740 <SetRFMMode>
 8034d00:	e014      	b.n	8034d2c <cmd_upgrade+0x90>
		//========================================================================
	}
	else if ( nVal == 0 )
 8034d02:	68fb      	ldr	r3, [r7, #12]
 8034d04:	2b00      	cmp	r3, #0
 8034d06:	d111      	bne.n	8034d2c <cmd_upgrade+0x90>
	{
		//========================================================================
		//	Normal Mode
		SetRFMMode( RFMModeNormal );	//	Normal Mode 로 변경
 8034d08:	2000      	movs	r0, #0
 8034d0a:	f7fd fd19 	bl	8032740 <SetRFMMode>
		//========================================================================

		//  RF 수신 Start
		g_nChRx = GetChRx();	//	ChTS1_1 + g_idxTrainSet * 2 + ((g_nCarNo+1) % 2);	// 현재 호차 채널
 8034d0e:	f7fd fd85 	bl	803281c <GetChRx>
 8034d12:	4603      	mov	r3, r0
 8034d14:	4a0b      	ldr	r2, [pc, #44]	; (8034d44 <cmd_upgrade+0xa8>)
 8034d16:	6013      	str	r3, [r2, #0]

		vRadio_StartRX(
 8034d18:	4b0a      	ldr	r3, [pc, #40]	; (8034d44 <cmd_upgrade+0xa8>)
 8034d1a:	681b      	ldr	r3, [r3, #0]
 8034d1c:	b2da      	uxtb	r2, r3
			g_nChRx,	//g_idxTrainSet,	//		pRadioConfiguration->Radio_ChannelNumber,
			pRadioConfiguration->Radio_PacketLength );
 8034d1e:	4b0a      	ldr	r3, [pc, #40]	; (8034d48 <cmd_upgrade+0xac>)
 8034d20:	681b      	ldr	r3, [r3, #0]
		vRadio_StartRX(
 8034d22:	795b      	ldrb	r3, [r3, #5]
 8034d24:	4619      	mov	r1, r3
 8034d26:	4610      	mov	r0, r2
 8034d28:	f7f8 fb3a 	bl	802d3a0 <vRadio_StartRX>
	}
}
 8034d2c:	bf00      	nop
 8034d2e:	4618      	mov	r0, r3
 8034d30:	3710      	adds	r7, #16
 8034d32:	46bd      	mov	sp, r7
 8034d34:	bd80      	pop	{r7, pc}
 8034d36:	bf00      	nop
 8034d38:	08047e88 	.word	0x08047e88
 8034d3c:	0803b8fc 	.word	0x0803b8fc
 8034d40:	0803b904 	.word	0x0803b904
 8034d44:	20000be8 	.word	0x20000be8
 8034d48:	200004f0 	.word	0x200004f0
 8034d4c:	40021000 	.word	0x40021000

08034d50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8034d50:	b580      	push	{r7, lr}
 8034d52:	b084      	sub	sp, #16
 8034d54:	af00      	add	r7, sp, #0
 8034d56:	6078      	str	r0, [r7, #4]
 8034d58:	460b      	mov	r3, r1
 8034d5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8034d5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8034d60:	f002 f982 	bl	8037068 <malloc>
 8034d64:	4603      	mov	r3, r0
 8034d66:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8034d68:	68fb      	ldr	r3, [r7, #12]
 8034d6a:	2b00      	cmp	r3, #0
 8034d6c:	d105      	bne.n	8034d7a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8034d6e:	687b      	ldr	r3, [r7, #4]
 8034d70:	2200      	movs	r2, #0
 8034d72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8034d76:	2302      	movs	r3, #2
 8034d78:	e066      	b.n	8034e48 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8034d7a:	687b      	ldr	r3, [r7, #4]
 8034d7c:	68fa      	ldr	r2, [r7, #12]
 8034d7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8034d82:	687b      	ldr	r3, [r7, #4]
 8034d84:	7c1b      	ldrb	r3, [r3, #16]
 8034d86:	2b00      	cmp	r3, #0
 8034d88:	d119      	bne.n	8034dbe <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8034d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8034d8e:	2202      	movs	r2, #2
 8034d90:	2181      	movs	r1, #129	; 0x81
 8034d92:	6878      	ldr	r0, [r7, #4]
 8034d94:	f001 ffc1 	bl	8036d1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8034d98:	687b      	ldr	r3, [r7, #4]
 8034d9a:	2201      	movs	r2, #1
 8034d9c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8034d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8034da2:	2202      	movs	r2, #2
 8034da4:	2101      	movs	r1, #1
 8034da6:	6878      	ldr	r0, [r7, #4]
 8034da8:	f001 ffb7 	bl	8036d1a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8034dac:	687b      	ldr	r3, [r7, #4]
 8034dae:	2201      	movs	r2, #1
 8034db0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8034db4:	687b      	ldr	r3, [r7, #4]
 8034db6:	2210      	movs	r2, #16
 8034db8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8034dbc:	e016      	b.n	8034dec <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8034dbe:	2340      	movs	r3, #64	; 0x40
 8034dc0:	2202      	movs	r2, #2
 8034dc2:	2181      	movs	r1, #129	; 0x81
 8034dc4:	6878      	ldr	r0, [r7, #4]
 8034dc6:	f001 ffa8 	bl	8036d1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8034dca:	687b      	ldr	r3, [r7, #4]
 8034dcc:	2201      	movs	r2, #1
 8034dce:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8034dd0:	2340      	movs	r3, #64	; 0x40
 8034dd2:	2202      	movs	r2, #2
 8034dd4:	2101      	movs	r1, #1
 8034dd6:	6878      	ldr	r0, [r7, #4]
 8034dd8:	f001 ff9f 	bl	8036d1a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8034ddc:	687b      	ldr	r3, [r7, #4]
 8034dde:	2201      	movs	r2, #1
 8034de0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8034de4:	687b      	ldr	r3, [r7, #4]
 8034de6:	2210      	movs	r2, #16
 8034de8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8034dec:	2308      	movs	r3, #8
 8034dee:	2203      	movs	r2, #3
 8034df0:	2182      	movs	r1, #130	; 0x82
 8034df2:	6878      	ldr	r0, [r7, #4]
 8034df4:	f001 ff91 	bl	8036d1a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8034df8:	687b      	ldr	r3, [r7, #4]
 8034dfa:	2201      	movs	r2, #1
 8034dfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8034e00:	687b      	ldr	r3, [r7, #4]
 8034e02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8034e06:	681b      	ldr	r3, [r3, #0]
 8034e08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8034e0a:	68fb      	ldr	r3, [r7, #12]
 8034e0c:	2200      	movs	r2, #0
 8034e0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8034e12:	68fb      	ldr	r3, [r7, #12]
 8034e14:	2200      	movs	r2, #0
 8034e16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8034e1a:	687b      	ldr	r3, [r7, #4]
 8034e1c:	7c1b      	ldrb	r3, [r3, #16]
 8034e1e:	2b00      	cmp	r3, #0
 8034e20:	d109      	bne.n	8034e36 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8034e22:	68fb      	ldr	r3, [r7, #12]
 8034e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8034e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8034e2c:	2101      	movs	r1, #1
 8034e2e:	6878      	ldr	r0, [r7, #4]
 8034e30:	f002 f862 	bl	8036ef8 <USBD_LL_PrepareReceive>
 8034e34:	e007      	b.n	8034e46 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8034e36:	68fb      	ldr	r3, [r7, #12]
 8034e38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8034e3c:	2340      	movs	r3, #64	; 0x40
 8034e3e:	2101      	movs	r1, #1
 8034e40:	6878      	ldr	r0, [r7, #4]
 8034e42:	f002 f859 	bl	8036ef8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8034e46:	2300      	movs	r3, #0
}
 8034e48:	4618      	mov	r0, r3
 8034e4a:	3710      	adds	r7, #16
 8034e4c:	46bd      	mov	sp, r7
 8034e4e:	bd80      	pop	{r7, pc}

08034e50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8034e50:	b580      	push	{r7, lr}
 8034e52:	b084      	sub	sp, #16
 8034e54:	af00      	add	r7, sp, #0
 8034e56:	6078      	str	r0, [r7, #4]
 8034e58:	460b      	mov	r3, r1
 8034e5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8034e5c:	2300      	movs	r3, #0
 8034e5e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8034e60:	2181      	movs	r1, #129	; 0x81
 8034e62:	6878      	ldr	r0, [r7, #4]
 8034e64:	f001 ff7f 	bl	8036d66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8034e68:	687b      	ldr	r3, [r7, #4]
 8034e6a:	2200      	movs	r2, #0
 8034e6c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8034e6e:	2101      	movs	r1, #1
 8034e70:	6878      	ldr	r0, [r7, #4]
 8034e72:	f001 ff78 	bl	8036d66 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8034e76:	687b      	ldr	r3, [r7, #4]
 8034e78:	2200      	movs	r2, #0
 8034e7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8034e7e:	2182      	movs	r1, #130	; 0x82
 8034e80:	6878      	ldr	r0, [r7, #4]
 8034e82:	f001 ff70 	bl	8036d66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8034e86:	687b      	ldr	r3, [r7, #4]
 8034e88:	2200      	movs	r2, #0
 8034e8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8034e8e:	687b      	ldr	r3, [r7, #4]
 8034e90:	2200      	movs	r2, #0
 8034e92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8034e96:	687b      	ldr	r3, [r7, #4]
 8034e98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8034e9c:	2b00      	cmp	r3, #0
 8034e9e:	d00e      	beq.n	8034ebe <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8034ea0:	687b      	ldr	r3, [r7, #4]
 8034ea2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8034ea6:	685b      	ldr	r3, [r3, #4]
 8034ea8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8034eaa:	687b      	ldr	r3, [r7, #4]
 8034eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8034eb0:	4618      	mov	r0, r3
 8034eb2:	f002 f8e1 	bl	8037078 <free>
    pdev->pClassData = NULL;
 8034eb6:	687b      	ldr	r3, [r7, #4]
 8034eb8:	2200      	movs	r2, #0
 8034eba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8034ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8034ec0:	4618      	mov	r0, r3
 8034ec2:	3710      	adds	r7, #16
 8034ec4:	46bd      	mov	sp, r7
 8034ec6:	bd80      	pop	{r7, pc}

08034ec8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8034ec8:	b580      	push	{r7, lr}
 8034eca:	b086      	sub	sp, #24
 8034ecc:	af00      	add	r7, sp, #0
 8034ece:	6078      	str	r0, [r7, #4]
 8034ed0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8034ed2:	687b      	ldr	r3, [r7, #4]
 8034ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8034ed8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8034eda:	2300      	movs	r3, #0
 8034edc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8034ede:	2300      	movs	r3, #0
 8034ee0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8034ee2:	2300      	movs	r3, #0
 8034ee4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8034ee6:	683b      	ldr	r3, [r7, #0]
 8034ee8:	781b      	ldrb	r3, [r3, #0]
 8034eea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8034eee:	2b00      	cmp	r3, #0
 8034ef0:	d03a      	beq.n	8034f68 <USBD_CDC_Setup+0xa0>
 8034ef2:	2b20      	cmp	r3, #32
 8034ef4:	f040 8097 	bne.w	8035026 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8034ef8:	683b      	ldr	r3, [r7, #0]
 8034efa:	88db      	ldrh	r3, [r3, #6]
 8034efc:	2b00      	cmp	r3, #0
 8034efe:	d029      	beq.n	8034f54 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8034f00:	683b      	ldr	r3, [r7, #0]
 8034f02:	781b      	ldrb	r3, [r3, #0]
 8034f04:	b25b      	sxtb	r3, r3
 8034f06:	2b00      	cmp	r3, #0
 8034f08:	da11      	bge.n	8034f2e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8034f0a:	687b      	ldr	r3, [r7, #4]
 8034f0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8034f10:	689b      	ldr	r3, [r3, #8]
 8034f12:	683a      	ldr	r2, [r7, #0]
 8034f14:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8034f16:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8034f18:	683a      	ldr	r2, [r7, #0]
 8034f1a:	88d2      	ldrh	r2, [r2, #6]
 8034f1c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8034f1e:	6939      	ldr	r1, [r7, #16]
 8034f20:	683b      	ldr	r3, [r7, #0]
 8034f22:	88db      	ldrh	r3, [r3, #6]
 8034f24:	461a      	mov	r2, r3
 8034f26:	6878      	ldr	r0, [r7, #4]
 8034f28:	f001 faac 	bl	8036484 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8034f2c:	e082      	b.n	8035034 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8034f2e:	683b      	ldr	r3, [r7, #0]
 8034f30:	785a      	ldrb	r2, [r3, #1]
 8034f32:	693b      	ldr	r3, [r7, #16]
 8034f34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8034f38:	683b      	ldr	r3, [r7, #0]
 8034f3a:	88db      	ldrh	r3, [r3, #6]
 8034f3c:	b2da      	uxtb	r2, r3
 8034f3e:	693b      	ldr	r3, [r7, #16]
 8034f40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8034f44:	6939      	ldr	r1, [r7, #16]
 8034f46:	683b      	ldr	r3, [r7, #0]
 8034f48:	88db      	ldrh	r3, [r3, #6]
 8034f4a:	461a      	mov	r2, r3
 8034f4c:	6878      	ldr	r0, [r7, #4]
 8034f4e:	f001 fac5 	bl	80364dc <USBD_CtlPrepareRx>
    break;
 8034f52:	e06f      	b.n	8035034 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8034f54:	687b      	ldr	r3, [r7, #4]
 8034f56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8034f5a:	689b      	ldr	r3, [r3, #8]
 8034f5c:	683a      	ldr	r2, [r7, #0]
 8034f5e:	7850      	ldrb	r0, [r2, #1]
 8034f60:	2200      	movs	r2, #0
 8034f62:	6839      	ldr	r1, [r7, #0]
 8034f64:	4798      	blx	r3
    break;
 8034f66:	e065      	b.n	8035034 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8034f68:	683b      	ldr	r3, [r7, #0]
 8034f6a:	785b      	ldrb	r3, [r3, #1]
 8034f6c:	2b0b      	cmp	r3, #11
 8034f6e:	d84f      	bhi.n	8035010 <USBD_CDC_Setup+0x148>
 8034f70:	a201      	add	r2, pc, #4	; (adr r2, 8034f78 <USBD_CDC_Setup+0xb0>)
 8034f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034f76:	bf00      	nop
 8034f78:	08034fa9 	.word	0x08034fa9
 8034f7c:	0803501f 	.word	0x0803501f
 8034f80:	08035011 	.word	0x08035011
 8034f84:	08035011 	.word	0x08035011
 8034f88:	08035011 	.word	0x08035011
 8034f8c:	08035011 	.word	0x08035011
 8034f90:	08035011 	.word	0x08035011
 8034f94:	08035011 	.word	0x08035011
 8034f98:	08035011 	.word	0x08035011
 8034f9c:	08035011 	.word	0x08035011
 8034fa0:	08034fd1 	.word	0x08034fd1
 8034fa4:	08034ff9 	.word	0x08034ff9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8034fa8:	687b      	ldr	r3, [r7, #4]
 8034faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034fae:	2b03      	cmp	r3, #3
 8034fb0:	d107      	bne.n	8034fc2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8034fb2:	f107 030c 	add.w	r3, r7, #12
 8034fb6:	2202      	movs	r2, #2
 8034fb8:	4619      	mov	r1, r3
 8034fba:	6878      	ldr	r0, [r7, #4]
 8034fbc:	f001 fa62 	bl	8036484 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8034fc0:	e030      	b.n	8035024 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8034fc2:	6839      	ldr	r1, [r7, #0]
 8034fc4:	6878      	ldr	r0, [r7, #4]
 8034fc6:	f001 f9ec 	bl	80363a2 <USBD_CtlError>
        ret = USBD_FAIL;
 8034fca:	2303      	movs	r3, #3
 8034fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8034fce:	e029      	b.n	8035024 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8034fd0:	687b      	ldr	r3, [r7, #4]
 8034fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034fd6:	2b03      	cmp	r3, #3
 8034fd8:	d107      	bne.n	8034fea <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8034fda:	f107 030f 	add.w	r3, r7, #15
 8034fde:	2201      	movs	r2, #1
 8034fe0:	4619      	mov	r1, r3
 8034fe2:	6878      	ldr	r0, [r7, #4]
 8034fe4:	f001 fa4e 	bl	8036484 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8034fe8:	e01c      	b.n	8035024 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8034fea:	6839      	ldr	r1, [r7, #0]
 8034fec:	6878      	ldr	r0, [r7, #4]
 8034fee:	f001 f9d8 	bl	80363a2 <USBD_CtlError>
        ret = USBD_FAIL;
 8034ff2:	2303      	movs	r3, #3
 8034ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8034ff6:	e015      	b.n	8035024 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8034ff8:	687b      	ldr	r3, [r7, #4]
 8034ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8034ffe:	2b03      	cmp	r3, #3
 8035000:	d00f      	beq.n	8035022 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8035002:	6839      	ldr	r1, [r7, #0]
 8035004:	6878      	ldr	r0, [r7, #4]
 8035006:	f001 f9cc 	bl	80363a2 <USBD_CtlError>
        ret = USBD_FAIL;
 803500a:	2303      	movs	r3, #3
 803500c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 803500e:	e008      	b.n	8035022 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8035010:	6839      	ldr	r1, [r7, #0]
 8035012:	6878      	ldr	r0, [r7, #4]
 8035014:	f001 f9c5 	bl	80363a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8035018:	2303      	movs	r3, #3
 803501a:	75fb      	strb	r3, [r7, #23]
      break;
 803501c:	e002      	b.n	8035024 <USBD_CDC_Setup+0x15c>
      break;
 803501e:	bf00      	nop
 8035020:	e008      	b.n	8035034 <USBD_CDC_Setup+0x16c>
      break;
 8035022:	bf00      	nop
    }
    break;
 8035024:	e006      	b.n	8035034 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8035026:	6839      	ldr	r1, [r7, #0]
 8035028:	6878      	ldr	r0, [r7, #4]
 803502a:	f001 f9ba 	bl	80363a2 <USBD_CtlError>
    ret = USBD_FAIL;
 803502e:	2303      	movs	r3, #3
 8035030:	75fb      	strb	r3, [r7, #23]
    break;
 8035032:	bf00      	nop
  }

  return (uint8_t)ret;
 8035034:	7dfb      	ldrb	r3, [r7, #23]
}
 8035036:	4618      	mov	r0, r3
 8035038:	3718      	adds	r7, #24
 803503a:	46bd      	mov	sp, r7
 803503c:	bd80      	pop	{r7, pc}
 803503e:	bf00      	nop

08035040 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8035040:	b580      	push	{r7, lr}
 8035042:	b084      	sub	sp, #16
 8035044:	af00      	add	r7, sp, #0
 8035046:	6078      	str	r0, [r7, #4]
 8035048:	460b      	mov	r3, r1
 803504a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 803504c:	687b      	ldr	r3, [r7, #4]
 803504e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8035052:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8035054:	687b      	ldr	r3, [r7, #4]
 8035056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 803505a:	2b00      	cmp	r3, #0
 803505c:	d101      	bne.n	8035062 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 803505e:	2303      	movs	r3, #3
 8035060:	e049      	b.n	80350f6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8035062:	687b      	ldr	r3, [r7, #4]
 8035064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035068:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 803506a:	78fa      	ldrb	r2, [r7, #3]
 803506c:	6879      	ldr	r1, [r7, #4]
 803506e:	4613      	mov	r3, r2
 8035070:	009b      	lsls	r3, r3, #2
 8035072:	4413      	add	r3, r2
 8035074:	009b      	lsls	r3, r3, #2
 8035076:	440b      	add	r3, r1
 8035078:	3318      	adds	r3, #24
 803507a:	681b      	ldr	r3, [r3, #0]
 803507c:	2b00      	cmp	r3, #0
 803507e:	d029      	beq.n	80350d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8035080:	78fa      	ldrb	r2, [r7, #3]
 8035082:	6879      	ldr	r1, [r7, #4]
 8035084:	4613      	mov	r3, r2
 8035086:	009b      	lsls	r3, r3, #2
 8035088:	4413      	add	r3, r2
 803508a:	009b      	lsls	r3, r3, #2
 803508c:	440b      	add	r3, r1
 803508e:	3318      	adds	r3, #24
 8035090:	681a      	ldr	r2, [r3, #0]
 8035092:	78f9      	ldrb	r1, [r7, #3]
 8035094:	68f8      	ldr	r0, [r7, #12]
 8035096:	460b      	mov	r3, r1
 8035098:	00db      	lsls	r3, r3, #3
 803509a:	1a5b      	subs	r3, r3, r1
 803509c:	009b      	lsls	r3, r3, #2
 803509e:	4403      	add	r3, r0
 80350a0:	3344      	adds	r3, #68	; 0x44
 80350a2:	681b      	ldr	r3, [r3, #0]
 80350a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80350a8:	fb01 f303 	mul.w	r3, r1, r3
 80350ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80350ae:	2b00      	cmp	r3, #0
 80350b0:	d110      	bne.n	80350d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80350b2:	78fa      	ldrb	r2, [r7, #3]
 80350b4:	6879      	ldr	r1, [r7, #4]
 80350b6:	4613      	mov	r3, r2
 80350b8:	009b      	lsls	r3, r3, #2
 80350ba:	4413      	add	r3, r2
 80350bc:	009b      	lsls	r3, r3, #2
 80350be:	440b      	add	r3, r1
 80350c0:	3318      	adds	r3, #24
 80350c2:	2200      	movs	r2, #0
 80350c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80350c6:	78f9      	ldrb	r1, [r7, #3]
 80350c8:	2300      	movs	r3, #0
 80350ca:	2200      	movs	r2, #0
 80350cc:	6878      	ldr	r0, [r7, #4]
 80350ce:	f001 fef2 	bl	8036eb6 <USBD_LL_Transmit>
 80350d2:	e00f      	b.n	80350f4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80350d4:	68bb      	ldr	r3, [r7, #8]
 80350d6:	2200      	movs	r2, #0
 80350d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80350dc:	687b      	ldr	r3, [r7, #4]
 80350de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80350e2:	691b      	ldr	r3, [r3, #16]
 80350e4:	68ba      	ldr	r2, [r7, #8]
 80350e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80350ea:	68ba      	ldr	r2, [r7, #8]
 80350ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80350f0:	78fa      	ldrb	r2, [r7, #3]
 80350f2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80350f4:	2300      	movs	r3, #0
}
 80350f6:	4618      	mov	r0, r3
 80350f8:	3710      	adds	r7, #16
 80350fa:	46bd      	mov	sp, r7
 80350fc:	bd80      	pop	{r7, pc}

080350fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80350fe:	b580      	push	{r7, lr}
 8035100:	b084      	sub	sp, #16
 8035102:	af00      	add	r7, sp, #0
 8035104:	6078      	str	r0, [r7, #4]
 8035106:	460b      	mov	r3, r1
 8035108:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 803510a:	687b      	ldr	r3, [r7, #4]
 803510c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035110:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8035112:	687b      	ldr	r3, [r7, #4]
 8035114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035118:	2b00      	cmp	r3, #0
 803511a:	d101      	bne.n	8035120 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 803511c:	2303      	movs	r3, #3
 803511e:	e015      	b.n	803514c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8035120:	78fb      	ldrb	r3, [r7, #3]
 8035122:	4619      	mov	r1, r3
 8035124:	6878      	ldr	r0, [r7, #4]
 8035126:	f001 ff08 	bl	8036f3a <USBD_LL_GetRxDataSize>
 803512a:	4602      	mov	r2, r0
 803512c:	68fb      	ldr	r3, [r7, #12]
 803512e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8035132:	687b      	ldr	r3, [r7, #4]
 8035134:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8035138:	68db      	ldr	r3, [r3, #12]
 803513a:	68fa      	ldr	r2, [r7, #12]
 803513c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8035140:	68fa      	ldr	r2, [r7, #12]
 8035142:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8035146:	4611      	mov	r1, r2
 8035148:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 803514a:	2300      	movs	r3, #0
}
 803514c:	4618      	mov	r0, r3
 803514e:	3710      	adds	r7, #16
 8035150:	46bd      	mov	sp, r7
 8035152:	bd80      	pop	{r7, pc}

08035154 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8035154:	b580      	push	{r7, lr}
 8035156:	b084      	sub	sp, #16
 8035158:	af00      	add	r7, sp, #0
 803515a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 803515c:	687b      	ldr	r3, [r7, #4]
 803515e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035162:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8035164:	687b      	ldr	r3, [r7, #4]
 8035166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 803516a:	2b00      	cmp	r3, #0
 803516c:	d015      	beq.n	803519a <USBD_CDC_EP0_RxReady+0x46>
 803516e:	68fb      	ldr	r3, [r7, #12]
 8035170:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8035174:	2bff      	cmp	r3, #255	; 0xff
 8035176:	d010      	beq.n	803519a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8035178:	687b      	ldr	r3, [r7, #4]
 803517a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 803517e:	689b      	ldr	r3, [r3, #8]
 8035180:	68fa      	ldr	r2, [r7, #12]
 8035182:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8035186:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8035188:	68fa      	ldr	r2, [r7, #12]
 803518a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 803518e:	b292      	uxth	r2, r2
 8035190:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8035192:	68fb      	ldr	r3, [r7, #12]
 8035194:	22ff      	movs	r2, #255	; 0xff
 8035196:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 803519a:	2300      	movs	r3, #0
}
 803519c:	4618      	mov	r0, r3
 803519e:	3710      	adds	r7, #16
 80351a0:	46bd      	mov	sp, r7
 80351a2:	bd80      	pop	{r7, pc}

080351a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80351a4:	b480      	push	{r7}
 80351a6:	b083      	sub	sp, #12
 80351a8:	af00      	add	r7, sp, #0
 80351aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80351ac:	687b      	ldr	r3, [r7, #4]
 80351ae:	2243      	movs	r2, #67	; 0x43
 80351b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80351b2:	4b03      	ldr	r3, [pc, #12]	; (80351c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80351b4:	4618      	mov	r0, r3
 80351b6:	370c      	adds	r7, #12
 80351b8:	46bd      	mov	sp, r7
 80351ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80351be:	4770      	bx	lr
 80351c0:	20000c80 	.word	0x20000c80

080351c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80351c4:	b480      	push	{r7}
 80351c6:	b083      	sub	sp, #12
 80351c8:	af00      	add	r7, sp, #0
 80351ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80351cc:	687b      	ldr	r3, [r7, #4]
 80351ce:	2243      	movs	r2, #67	; 0x43
 80351d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80351d2:	4b03      	ldr	r3, [pc, #12]	; (80351e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80351d4:	4618      	mov	r0, r3
 80351d6:	370c      	adds	r7, #12
 80351d8:	46bd      	mov	sp, r7
 80351da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80351de:	4770      	bx	lr
 80351e0:	20000c3c 	.word	0x20000c3c

080351e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80351e4:	b480      	push	{r7}
 80351e6:	b083      	sub	sp, #12
 80351e8:	af00      	add	r7, sp, #0
 80351ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80351ec:	687b      	ldr	r3, [r7, #4]
 80351ee:	2243      	movs	r2, #67	; 0x43
 80351f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80351f2:	4b03      	ldr	r3, [pc, #12]	; (8035200 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80351f4:	4618      	mov	r0, r3
 80351f6:	370c      	adds	r7, #12
 80351f8:	46bd      	mov	sp, r7
 80351fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80351fe:	4770      	bx	lr
 8035200:	20000cc4 	.word	0x20000cc4

08035204 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8035204:	b480      	push	{r7}
 8035206:	b083      	sub	sp, #12
 8035208:	af00      	add	r7, sp, #0
 803520a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 803520c:	687b      	ldr	r3, [r7, #4]
 803520e:	220a      	movs	r2, #10
 8035210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8035212:	4b03      	ldr	r3, [pc, #12]	; (8035220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8035214:	4618      	mov	r0, r3
 8035216:	370c      	adds	r7, #12
 8035218:	46bd      	mov	sp, r7
 803521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803521e:	4770      	bx	lr
 8035220:	20000bf8 	.word	0x20000bf8

08035224 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8035224:	b480      	push	{r7}
 8035226:	b083      	sub	sp, #12
 8035228:	af00      	add	r7, sp, #0
 803522a:	6078      	str	r0, [r7, #4]
 803522c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 803522e:	683b      	ldr	r3, [r7, #0]
 8035230:	2b00      	cmp	r3, #0
 8035232:	d101      	bne.n	8035238 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8035234:	2303      	movs	r3, #3
 8035236:	e004      	b.n	8035242 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8035238:	687b      	ldr	r3, [r7, #4]
 803523a:	683a      	ldr	r2, [r7, #0]
 803523c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8035240:	2300      	movs	r3, #0
}
 8035242:	4618      	mov	r0, r3
 8035244:	370c      	adds	r7, #12
 8035246:	46bd      	mov	sp, r7
 8035248:	f85d 7b04 	ldr.w	r7, [sp], #4
 803524c:	4770      	bx	lr

0803524e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 803524e:	b480      	push	{r7}
 8035250:	b087      	sub	sp, #28
 8035252:	af00      	add	r7, sp, #0
 8035254:	60f8      	str	r0, [r7, #12]
 8035256:	60b9      	str	r1, [r7, #8]
 8035258:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 803525a:	68fb      	ldr	r3, [r7, #12]
 803525c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035260:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8035262:	697b      	ldr	r3, [r7, #20]
 8035264:	68ba      	ldr	r2, [r7, #8]
 8035266:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 803526a:	697b      	ldr	r3, [r7, #20]
 803526c:	687a      	ldr	r2, [r7, #4]
 803526e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8035272:	2300      	movs	r3, #0
}
 8035274:	4618      	mov	r0, r3
 8035276:	371c      	adds	r7, #28
 8035278:	46bd      	mov	sp, r7
 803527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803527e:	4770      	bx	lr

08035280 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8035280:	b480      	push	{r7}
 8035282:	b085      	sub	sp, #20
 8035284:	af00      	add	r7, sp, #0
 8035286:	6078      	str	r0, [r7, #4]
 8035288:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 803528a:	687b      	ldr	r3, [r7, #4]
 803528c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035290:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8035292:	68fb      	ldr	r3, [r7, #12]
 8035294:	683a      	ldr	r2, [r7, #0]
 8035296:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 803529a:	2300      	movs	r3, #0
}
 803529c:	4618      	mov	r0, r3
 803529e:	3714      	adds	r7, #20
 80352a0:	46bd      	mov	sp, r7
 80352a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80352a6:	4770      	bx	lr

080352a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80352a8:	b580      	push	{r7, lr}
 80352aa:	b084      	sub	sp, #16
 80352ac:	af00      	add	r7, sp, #0
 80352ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80352b0:	687b      	ldr	r3, [r7, #4]
 80352b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80352b6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80352b8:	2301      	movs	r3, #1
 80352ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80352bc:	687b      	ldr	r3, [r7, #4]
 80352be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80352c2:	2b00      	cmp	r3, #0
 80352c4:	d101      	bne.n	80352ca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80352c6:	2303      	movs	r3, #3
 80352c8:	e01a      	b.n	8035300 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80352ca:	68bb      	ldr	r3, [r7, #8]
 80352cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80352d0:	2b00      	cmp	r3, #0
 80352d2:	d114      	bne.n	80352fe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80352d4:	68bb      	ldr	r3, [r7, #8]
 80352d6:	2201      	movs	r2, #1
 80352d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80352dc:	68bb      	ldr	r3, [r7, #8]
 80352de:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80352e2:	687b      	ldr	r3, [r7, #4]
 80352e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80352e6:	68bb      	ldr	r3, [r7, #8]
 80352e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80352ec:	68bb      	ldr	r3, [r7, #8]
 80352ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80352f2:	2181      	movs	r1, #129	; 0x81
 80352f4:	6878      	ldr	r0, [r7, #4]
 80352f6:	f001 fdde 	bl	8036eb6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80352fa:	2300      	movs	r3, #0
 80352fc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80352fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8035300:	4618      	mov	r0, r3
 8035302:	3710      	adds	r7, #16
 8035304:	46bd      	mov	sp, r7
 8035306:	bd80      	pop	{r7, pc}

08035308 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8035308:	b580      	push	{r7, lr}
 803530a:	b084      	sub	sp, #16
 803530c:	af00      	add	r7, sp, #0
 803530e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8035310:	687b      	ldr	r3, [r7, #4]
 8035312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035316:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8035318:	687b      	ldr	r3, [r7, #4]
 803531a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 803531e:	2b00      	cmp	r3, #0
 8035320:	d101      	bne.n	8035326 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8035322:	2303      	movs	r3, #3
 8035324:	e016      	b.n	8035354 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8035326:	687b      	ldr	r3, [r7, #4]
 8035328:	7c1b      	ldrb	r3, [r3, #16]
 803532a:	2b00      	cmp	r3, #0
 803532c:	d109      	bne.n	8035342 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 803532e:	68fb      	ldr	r3, [r7, #12]
 8035330:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8035334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8035338:	2101      	movs	r1, #1
 803533a:	6878      	ldr	r0, [r7, #4]
 803533c:	f001 fddc 	bl	8036ef8 <USBD_LL_PrepareReceive>
 8035340:	e007      	b.n	8035352 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8035342:	68fb      	ldr	r3, [r7, #12]
 8035344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8035348:	2340      	movs	r3, #64	; 0x40
 803534a:	2101      	movs	r1, #1
 803534c:	6878      	ldr	r0, [r7, #4]
 803534e:	f001 fdd3 	bl	8036ef8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8035352:	2300      	movs	r3, #0
}
 8035354:	4618      	mov	r0, r3
 8035356:	3710      	adds	r7, #16
 8035358:	46bd      	mov	sp, r7
 803535a:	bd80      	pop	{r7, pc}

0803535c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 803535c:	b580      	push	{r7, lr}
 803535e:	b086      	sub	sp, #24
 8035360:	af00      	add	r7, sp, #0
 8035362:	60f8      	str	r0, [r7, #12]
 8035364:	60b9      	str	r1, [r7, #8]
 8035366:	4613      	mov	r3, r2
 8035368:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 803536a:	68fb      	ldr	r3, [r7, #12]
 803536c:	2b00      	cmp	r3, #0
 803536e:	d101      	bne.n	8035374 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8035370:	2303      	movs	r3, #3
 8035372:	e025      	b.n	80353c0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8035374:	68fb      	ldr	r3, [r7, #12]
 8035376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803537a:	2b00      	cmp	r3, #0
 803537c:	d003      	beq.n	8035386 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 803537e:	68fb      	ldr	r3, [r7, #12]
 8035380:	2200      	movs	r2, #0
 8035382:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8035386:	68fb      	ldr	r3, [r7, #12]
 8035388:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 803538c:	2b00      	cmp	r3, #0
 803538e:	d003      	beq.n	8035398 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8035390:	68fb      	ldr	r3, [r7, #12]
 8035392:	2200      	movs	r2, #0
 8035394:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8035398:	68bb      	ldr	r3, [r7, #8]
 803539a:	2b00      	cmp	r3, #0
 803539c:	d003      	beq.n	80353a6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 803539e:	68fb      	ldr	r3, [r7, #12]
 80353a0:	68ba      	ldr	r2, [r7, #8]
 80353a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80353a6:	68fb      	ldr	r3, [r7, #12]
 80353a8:	2201      	movs	r2, #1
 80353aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80353ae:	68fb      	ldr	r3, [r7, #12]
 80353b0:	79fa      	ldrb	r2, [r7, #7]
 80353b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80353b4:	68f8      	ldr	r0, [r7, #12]
 80353b6:	f001 fc49 	bl	8036c4c <USBD_LL_Init>
 80353ba:	4603      	mov	r3, r0
 80353bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80353be:	7dfb      	ldrb	r3, [r7, #23]
}
 80353c0:	4618      	mov	r0, r3
 80353c2:	3718      	adds	r7, #24
 80353c4:	46bd      	mov	sp, r7
 80353c6:	bd80      	pop	{r7, pc}

080353c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80353c8:	b580      	push	{r7, lr}
 80353ca:	b084      	sub	sp, #16
 80353cc:	af00      	add	r7, sp, #0
 80353ce:	6078      	str	r0, [r7, #4]
 80353d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80353d2:	2300      	movs	r3, #0
 80353d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80353d6:	683b      	ldr	r3, [r7, #0]
 80353d8:	2b00      	cmp	r3, #0
 80353da:	d101      	bne.n	80353e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80353dc:	2303      	movs	r3, #3
 80353de:	e010      	b.n	8035402 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80353e0:	687b      	ldr	r3, [r7, #4]
 80353e2:	683a      	ldr	r2, [r7, #0]
 80353e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80353e8:	687b      	ldr	r3, [r7, #4]
 80353ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80353ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80353f0:	f107 020e 	add.w	r2, r7, #14
 80353f4:	4610      	mov	r0, r2
 80353f6:	4798      	blx	r3
 80353f8:	4602      	mov	r2, r0
 80353fa:	687b      	ldr	r3, [r7, #4]
 80353fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8035400:	2300      	movs	r3, #0
}
 8035402:	4618      	mov	r0, r3
 8035404:	3710      	adds	r7, #16
 8035406:	46bd      	mov	sp, r7
 8035408:	bd80      	pop	{r7, pc}

0803540a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 803540a:	b580      	push	{r7, lr}
 803540c:	b082      	sub	sp, #8
 803540e:	af00      	add	r7, sp, #0
 8035410:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8035412:	6878      	ldr	r0, [r7, #4]
 8035414:	f001 fc66 	bl	8036ce4 <USBD_LL_Start>
 8035418:	4603      	mov	r3, r0
}
 803541a:	4618      	mov	r0, r3
 803541c:	3708      	adds	r7, #8
 803541e:	46bd      	mov	sp, r7
 8035420:	bd80      	pop	{r7, pc}

08035422 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8035422:	b480      	push	{r7}
 8035424:	b083      	sub	sp, #12
 8035426:	af00      	add	r7, sp, #0
 8035428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803542a:	2300      	movs	r3, #0
}
 803542c:	4618      	mov	r0, r3
 803542e:	370c      	adds	r7, #12
 8035430:	46bd      	mov	sp, r7
 8035432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035436:	4770      	bx	lr

08035438 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8035438:	b580      	push	{r7, lr}
 803543a:	b084      	sub	sp, #16
 803543c:	af00      	add	r7, sp, #0
 803543e:	6078      	str	r0, [r7, #4]
 8035440:	460b      	mov	r3, r1
 8035442:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8035444:	2303      	movs	r3, #3
 8035446:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8035448:	687b      	ldr	r3, [r7, #4]
 803544a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803544e:	2b00      	cmp	r3, #0
 8035450:	d009      	beq.n	8035466 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8035452:	687b      	ldr	r3, [r7, #4]
 8035454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035458:	681b      	ldr	r3, [r3, #0]
 803545a:	78fa      	ldrb	r2, [r7, #3]
 803545c:	4611      	mov	r1, r2
 803545e:	6878      	ldr	r0, [r7, #4]
 8035460:	4798      	blx	r3
 8035462:	4603      	mov	r3, r0
 8035464:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8035466:	7bfb      	ldrb	r3, [r7, #15]
}
 8035468:	4618      	mov	r0, r3
 803546a:	3710      	adds	r7, #16
 803546c:	46bd      	mov	sp, r7
 803546e:	bd80      	pop	{r7, pc}

08035470 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8035470:	b580      	push	{r7, lr}
 8035472:	b082      	sub	sp, #8
 8035474:	af00      	add	r7, sp, #0
 8035476:	6078      	str	r0, [r7, #4]
 8035478:	460b      	mov	r3, r1
 803547a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 803547c:	687b      	ldr	r3, [r7, #4]
 803547e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035482:	2b00      	cmp	r3, #0
 8035484:	d007      	beq.n	8035496 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8035486:	687b      	ldr	r3, [r7, #4]
 8035488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803548c:	685b      	ldr	r3, [r3, #4]
 803548e:	78fa      	ldrb	r2, [r7, #3]
 8035490:	4611      	mov	r1, r2
 8035492:	6878      	ldr	r0, [r7, #4]
 8035494:	4798      	blx	r3
  }

  return USBD_OK;
 8035496:	2300      	movs	r3, #0
}
 8035498:	4618      	mov	r0, r3
 803549a:	3708      	adds	r7, #8
 803549c:	46bd      	mov	sp, r7
 803549e:	bd80      	pop	{r7, pc}

080354a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80354a0:	b580      	push	{r7, lr}
 80354a2:	b084      	sub	sp, #16
 80354a4:	af00      	add	r7, sp, #0
 80354a6:	6078      	str	r0, [r7, #4]
 80354a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80354aa:	687b      	ldr	r3, [r7, #4]
 80354ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80354b0:	6839      	ldr	r1, [r7, #0]
 80354b2:	4618      	mov	r0, r3
 80354b4:	f000 ff3b 	bl	803632e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80354b8:	687b      	ldr	r3, [r7, #4]
 80354ba:	2201      	movs	r2, #1
 80354bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80354c0:	687b      	ldr	r3, [r7, #4]
 80354c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80354c6:	461a      	mov	r2, r3
 80354c8:	687b      	ldr	r3, [r7, #4]
 80354ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80354ce:	687b      	ldr	r3, [r7, #4]
 80354d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80354d4:	f003 031f 	and.w	r3, r3, #31
 80354d8:	2b02      	cmp	r3, #2
 80354da:	d01a      	beq.n	8035512 <USBD_LL_SetupStage+0x72>
 80354dc:	2b02      	cmp	r3, #2
 80354de:	d822      	bhi.n	8035526 <USBD_LL_SetupStage+0x86>
 80354e0:	2b00      	cmp	r3, #0
 80354e2:	d002      	beq.n	80354ea <USBD_LL_SetupStage+0x4a>
 80354e4:	2b01      	cmp	r3, #1
 80354e6:	d00a      	beq.n	80354fe <USBD_LL_SetupStage+0x5e>
 80354e8:	e01d      	b.n	8035526 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80354ea:	687b      	ldr	r3, [r7, #4]
 80354ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80354f0:	4619      	mov	r1, r3
 80354f2:	6878      	ldr	r0, [r7, #4]
 80354f4:	f000 fa18 	bl	8035928 <USBD_StdDevReq>
 80354f8:	4603      	mov	r3, r0
 80354fa:	73fb      	strb	r3, [r7, #15]
      break;
 80354fc:	e020      	b.n	8035540 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80354fe:	687b      	ldr	r3, [r7, #4]
 8035500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8035504:	4619      	mov	r1, r3
 8035506:	6878      	ldr	r0, [r7, #4]
 8035508:	f000 fa7c 	bl	8035a04 <USBD_StdItfReq>
 803550c:	4603      	mov	r3, r0
 803550e:	73fb      	strb	r3, [r7, #15]
      break;
 8035510:	e016      	b.n	8035540 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8035512:	687b      	ldr	r3, [r7, #4]
 8035514:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8035518:	4619      	mov	r1, r3
 803551a:	6878      	ldr	r0, [r7, #4]
 803551c:	f000 faba 	bl	8035a94 <USBD_StdEPReq>
 8035520:	4603      	mov	r3, r0
 8035522:	73fb      	strb	r3, [r7, #15]
      break;
 8035524:	e00c      	b.n	8035540 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8035526:	687b      	ldr	r3, [r7, #4]
 8035528:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803552c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8035530:	b2db      	uxtb	r3, r3
 8035532:	4619      	mov	r1, r3
 8035534:	6878      	ldr	r0, [r7, #4]
 8035536:	f001 fc35 	bl	8036da4 <USBD_LL_StallEP>
 803553a:	4603      	mov	r3, r0
 803553c:	73fb      	strb	r3, [r7, #15]
      break;
 803553e:	bf00      	nop
  }

  return ret;
 8035540:	7bfb      	ldrb	r3, [r7, #15]
}
 8035542:	4618      	mov	r0, r3
 8035544:	3710      	adds	r7, #16
 8035546:	46bd      	mov	sp, r7
 8035548:	bd80      	pop	{r7, pc}

0803554a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 803554a:	b580      	push	{r7, lr}
 803554c:	b086      	sub	sp, #24
 803554e:	af00      	add	r7, sp, #0
 8035550:	60f8      	str	r0, [r7, #12]
 8035552:	460b      	mov	r3, r1
 8035554:	607a      	str	r2, [r7, #4]
 8035556:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8035558:	7afb      	ldrb	r3, [r7, #11]
 803555a:	2b00      	cmp	r3, #0
 803555c:	d137      	bne.n	80355ce <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 803555e:	68fb      	ldr	r3, [r7, #12]
 8035560:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8035564:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8035566:	68fb      	ldr	r3, [r7, #12]
 8035568:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803556c:	2b03      	cmp	r3, #3
 803556e:	d14a      	bne.n	8035606 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8035570:	693b      	ldr	r3, [r7, #16]
 8035572:	689a      	ldr	r2, [r3, #8]
 8035574:	693b      	ldr	r3, [r7, #16]
 8035576:	68db      	ldr	r3, [r3, #12]
 8035578:	429a      	cmp	r2, r3
 803557a:	d913      	bls.n	80355a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 803557c:	693b      	ldr	r3, [r7, #16]
 803557e:	689a      	ldr	r2, [r3, #8]
 8035580:	693b      	ldr	r3, [r7, #16]
 8035582:	68db      	ldr	r3, [r3, #12]
 8035584:	1ad2      	subs	r2, r2, r3
 8035586:	693b      	ldr	r3, [r7, #16]
 8035588:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 803558a:	693b      	ldr	r3, [r7, #16]
 803558c:	68da      	ldr	r2, [r3, #12]
 803558e:	693b      	ldr	r3, [r7, #16]
 8035590:	689b      	ldr	r3, [r3, #8]
 8035592:	4293      	cmp	r3, r2
 8035594:	bf28      	it	cs
 8035596:	4613      	movcs	r3, r2
 8035598:	461a      	mov	r2, r3
 803559a:	6879      	ldr	r1, [r7, #4]
 803559c:	68f8      	ldr	r0, [r7, #12]
 803559e:	f000 ffba 	bl	8036516 <USBD_CtlContinueRx>
 80355a2:	e030      	b.n	8035606 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80355a4:	68fb      	ldr	r3, [r7, #12]
 80355a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80355aa:	691b      	ldr	r3, [r3, #16]
 80355ac:	2b00      	cmp	r3, #0
 80355ae:	d00a      	beq.n	80355c6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80355b0:	68fb      	ldr	r3, [r7, #12]
 80355b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80355b6:	2b03      	cmp	r3, #3
 80355b8:	d105      	bne.n	80355c6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80355ba:	68fb      	ldr	r3, [r7, #12]
 80355bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80355c0:	691b      	ldr	r3, [r3, #16]
 80355c2:	68f8      	ldr	r0, [r7, #12]
 80355c4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80355c6:	68f8      	ldr	r0, [r7, #12]
 80355c8:	f000 ffb6 	bl	8036538 <USBD_CtlSendStatus>
 80355cc:	e01b      	b.n	8035606 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80355ce:	68fb      	ldr	r3, [r7, #12]
 80355d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80355d4:	699b      	ldr	r3, [r3, #24]
 80355d6:	2b00      	cmp	r3, #0
 80355d8:	d013      	beq.n	8035602 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80355da:	68fb      	ldr	r3, [r7, #12]
 80355dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80355e0:	2b03      	cmp	r3, #3
 80355e2:	d10e      	bne.n	8035602 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80355e4:	68fb      	ldr	r3, [r7, #12]
 80355e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80355ea:	699b      	ldr	r3, [r3, #24]
 80355ec:	7afa      	ldrb	r2, [r7, #11]
 80355ee:	4611      	mov	r1, r2
 80355f0:	68f8      	ldr	r0, [r7, #12]
 80355f2:	4798      	blx	r3
 80355f4:	4603      	mov	r3, r0
 80355f6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80355f8:	7dfb      	ldrb	r3, [r7, #23]
 80355fa:	2b00      	cmp	r3, #0
 80355fc:	d003      	beq.n	8035606 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80355fe:	7dfb      	ldrb	r3, [r7, #23]
 8035600:	e002      	b.n	8035608 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8035602:	2303      	movs	r3, #3
 8035604:	e000      	b.n	8035608 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8035606:	2300      	movs	r3, #0
}
 8035608:	4618      	mov	r0, r3
 803560a:	3718      	adds	r7, #24
 803560c:	46bd      	mov	sp, r7
 803560e:	bd80      	pop	{r7, pc}

08035610 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8035610:	b580      	push	{r7, lr}
 8035612:	b086      	sub	sp, #24
 8035614:	af00      	add	r7, sp, #0
 8035616:	60f8      	str	r0, [r7, #12]
 8035618:	460b      	mov	r3, r1
 803561a:	607a      	str	r2, [r7, #4]
 803561c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 803561e:	7afb      	ldrb	r3, [r7, #11]
 8035620:	2b00      	cmp	r3, #0
 8035622:	d16a      	bne.n	80356fa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8035624:	68fb      	ldr	r3, [r7, #12]
 8035626:	3314      	adds	r3, #20
 8035628:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 803562a:	68fb      	ldr	r3, [r7, #12]
 803562c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8035630:	2b02      	cmp	r3, #2
 8035632:	d155      	bne.n	80356e0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8035634:	693b      	ldr	r3, [r7, #16]
 8035636:	689a      	ldr	r2, [r3, #8]
 8035638:	693b      	ldr	r3, [r7, #16]
 803563a:	68db      	ldr	r3, [r3, #12]
 803563c:	429a      	cmp	r2, r3
 803563e:	d914      	bls.n	803566a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8035640:	693b      	ldr	r3, [r7, #16]
 8035642:	689a      	ldr	r2, [r3, #8]
 8035644:	693b      	ldr	r3, [r7, #16]
 8035646:	68db      	ldr	r3, [r3, #12]
 8035648:	1ad2      	subs	r2, r2, r3
 803564a:	693b      	ldr	r3, [r7, #16]
 803564c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 803564e:	693b      	ldr	r3, [r7, #16]
 8035650:	689b      	ldr	r3, [r3, #8]
 8035652:	461a      	mov	r2, r3
 8035654:	6879      	ldr	r1, [r7, #4]
 8035656:	68f8      	ldr	r0, [r7, #12]
 8035658:	f000 ff2f 	bl	80364ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803565c:	2300      	movs	r3, #0
 803565e:	2200      	movs	r2, #0
 8035660:	2100      	movs	r1, #0
 8035662:	68f8      	ldr	r0, [r7, #12]
 8035664:	f001 fc48 	bl	8036ef8 <USBD_LL_PrepareReceive>
 8035668:	e03a      	b.n	80356e0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 803566a:	693b      	ldr	r3, [r7, #16]
 803566c:	68da      	ldr	r2, [r3, #12]
 803566e:	693b      	ldr	r3, [r7, #16]
 8035670:	689b      	ldr	r3, [r3, #8]
 8035672:	429a      	cmp	r2, r3
 8035674:	d11c      	bne.n	80356b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8035676:	693b      	ldr	r3, [r7, #16]
 8035678:	685a      	ldr	r2, [r3, #4]
 803567a:	693b      	ldr	r3, [r7, #16]
 803567c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 803567e:	429a      	cmp	r2, r3
 8035680:	d316      	bcc.n	80356b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8035682:	693b      	ldr	r3, [r7, #16]
 8035684:	685a      	ldr	r2, [r3, #4]
 8035686:	68fb      	ldr	r3, [r7, #12]
 8035688:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 803568c:	429a      	cmp	r2, r3
 803568e:	d20f      	bcs.n	80356b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8035690:	2200      	movs	r2, #0
 8035692:	2100      	movs	r1, #0
 8035694:	68f8      	ldr	r0, [r7, #12]
 8035696:	f000 ff10 	bl	80364ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 803569a:	68fb      	ldr	r3, [r7, #12]
 803569c:	2200      	movs	r2, #0
 803569e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80356a2:	2300      	movs	r3, #0
 80356a4:	2200      	movs	r2, #0
 80356a6:	2100      	movs	r1, #0
 80356a8:	68f8      	ldr	r0, [r7, #12]
 80356aa:	f001 fc25 	bl	8036ef8 <USBD_LL_PrepareReceive>
 80356ae:	e017      	b.n	80356e0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80356b0:	68fb      	ldr	r3, [r7, #12]
 80356b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80356b6:	68db      	ldr	r3, [r3, #12]
 80356b8:	2b00      	cmp	r3, #0
 80356ba:	d00a      	beq.n	80356d2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80356bc:	68fb      	ldr	r3, [r7, #12]
 80356be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80356c2:	2b03      	cmp	r3, #3
 80356c4:	d105      	bne.n	80356d2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80356c6:	68fb      	ldr	r3, [r7, #12]
 80356c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80356cc:	68db      	ldr	r3, [r3, #12]
 80356ce:	68f8      	ldr	r0, [r7, #12]
 80356d0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80356d2:	2180      	movs	r1, #128	; 0x80
 80356d4:	68f8      	ldr	r0, [r7, #12]
 80356d6:	f001 fb65 	bl	8036da4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80356da:	68f8      	ldr	r0, [r7, #12]
 80356dc:	f000 ff3f 	bl	803655e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80356e0:	68fb      	ldr	r3, [r7, #12]
 80356e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80356e6:	2b01      	cmp	r3, #1
 80356e8:	d123      	bne.n	8035732 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80356ea:	68f8      	ldr	r0, [r7, #12]
 80356ec:	f7ff fe99 	bl	8035422 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80356f0:	68fb      	ldr	r3, [r7, #12]
 80356f2:	2200      	movs	r2, #0
 80356f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80356f8:	e01b      	b.n	8035732 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80356fa:	68fb      	ldr	r3, [r7, #12]
 80356fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035700:	695b      	ldr	r3, [r3, #20]
 8035702:	2b00      	cmp	r3, #0
 8035704:	d013      	beq.n	803572e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8035706:	68fb      	ldr	r3, [r7, #12]
 8035708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 803570c:	2b03      	cmp	r3, #3
 803570e:	d10e      	bne.n	803572e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8035710:	68fb      	ldr	r3, [r7, #12]
 8035712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035716:	695b      	ldr	r3, [r3, #20]
 8035718:	7afa      	ldrb	r2, [r7, #11]
 803571a:	4611      	mov	r1, r2
 803571c:	68f8      	ldr	r0, [r7, #12]
 803571e:	4798      	blx	r3
 8035720:	4603      	mov	r3, r0
 8035722:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8035724:	7dfb      	ldrb	r3, [r7, #23]
 8035726:	2b00      	cmp	r3, #0
 8035728:	d003      	beq.n	8035732 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 803572a:	7dfb      	ldrb	r3, [r7, #23]
 803572c:	e002      	b.n	8035734 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 803572e:	2303      	movs	r3, #3
 8035730:	e000      	b.n	8035734 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8035732:	2300      	movs	r3, #0
}
 8035734:	4618      	mov	r0, r3
 8035736:	3718      	adds	r7, #24
 8035738:	46bd      	mov	sp, r7
 803573a:	bd80      	pop	{r7, pc}

0803573c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 803573c:	b580      	push	{r7, lr}
 803573e:	b082      	sub	sp, #8
 8035740:	af00      	add	r7, sp, #0
 8035742:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8035744:	687b      	ldr	r3, [r7, #4]
 8035746:	2201      	movs	r2, #1
 8035748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 803574c:	687b      	ldr	r3, [r7, #4]
 803574e:	2200      	movs	r2, #0
 8035750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8035754:	687b      	ldr	r3, [r7, #4]
 8035756:	2200      	movs	r2, #0
 8035758:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 803575a:	687b      	ldr	r3, [r7, #4]
 803575c:	2200      	movs	r2, #0
 803575e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8035762:	687b      	ldr	r3, [r7, #4]
 8035764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8035768:	2b00      	cmp	r3, #0
 803576a:	d009      	beq.n	8035780 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 803576c:	687b      	ldr	r3, [r7, #4]
 803576e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035772:	685b      	ldr	r3, [r3, #4]
 8035774:	687a      	ldr	r2, [r7, #4]
 8035776:	6852      	ldr	r2, [r2, #4]
 8035778:	b2d2      	uxtb	r2, r2
 803577a:	4611      	mov	r1, r2
 803577c:	6878      	ldr	r0, [r7, #4]
 803577e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8035780:	2340      	movs	r3, #64	; 0x40
 8035782:	2200      	movs	r2, #0
 8035784:	2100      	movs	r1, #0
 8035786:	6878      	ldr	r0, [r7, #4]
 8035788:	f001 fac7 	bl	8036d1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 803578c:	687b      	ldr	r3, [r7, #4]
 803578e:	2201      	movs	r2, #1
 8035790:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8035794:	687b      	ldr	r3, [r7, #4]
 8035796:	2240      	movs	r2, #64	; 0x40
 8035798:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803579c:	2340      	movs	r3, #64	; 0x40
 803579e:	2200      	movs	r2, #0
 80357a0:	2180      	movs	r1, #128	; 0x80
 80357a2:	6878      	ldr	r0, [r7, #4]
 80357a4:	f001 fab9 	bl	8036d1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80357a8:	687b      	ldr	r3, [r7, #4]
 80357aa:	2201      	movs	r2, #1
 80357ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80357ae:	687b      	ldr	r3, [r7, #4]
 80357b0:	2240      	movs	r2, #64	; 0x40
 80357b2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80357b4:	2300      	movs	r3, #0
}
 80357b6:	4618      	mov	r0, r3
 80357b8:	3708      	adds	r7, #8
 80357ba:	46bd      	mov	sp, r7
 80357bc:	bd80      	pop	{r7, pc}

080357be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80357be:	b480      	push	{r7}
 80357c0:	b083      	sub	sp, #12
 80357c2:	af00      	add	r7, sp, #0
 80357c4:	6078      	str	r0, [r7, #4]
 80357c6:	460b      	mov	r3, r1
 80357c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80357ca:	687b      	ldr	r3, [r7, #4]
 80357cc:	78fa      	ldrb	r2, [r7, #3]
 80357ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80357d0:	2300      	movs	r3, #0
}
 80357d2:	4618      	mov	r0, r3
 80357d4:	370c      	adds	r7, #12
 80357d6:	46bd      	mov	sp, r7
 80357d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80357dc:	4770      	bx	lr

080357de <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80357de:	b480      	push	{r7}
 80357e0:	b083      	sub	sp, #12
 80357e2:	af00      	add	r7, sp, #0
 80357e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80357e6:	687b      	ldr	r3, [r7, #4]
 80357e8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80357ec:	687b      	ldr	r3, [r7, #4]
 80357ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80357f2:	687b      	ldr	r3, [r7, #4]
 80357f4:	2204      	movs	r2, #4
 80357f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80357fa:	2300      	movs	r3, #0
}
 80357fc:	4618      	mov	r0, r3
 80357fe:	370c      	adds	r7, #12
 8035800:	46bd      	mov	sp, r7
 8035802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035806:	4770      	bx	lr

08035808 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8035808:	b480      	push	{r7}
 803580a:	b083      	sub	sp, #12
 803580c:	af00      	add	r7, sp, #0
 803580e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8035810:	687b      	ldr	r3, [r7, #4]
 8035812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8035816:	2b04      	cmp	r3, #4
 8035818:	d105      	bne.n	8035826 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 803581a:	687b      	ldr	r3, [r7, #4]
 803581c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8035820:	687b      	ldr	r3, [r7, #4]
 8035822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8035826:	2300      	movs	r3, #0
}
 8035828:	4618      	mov	r0, r3
 803582a:	370c      	adds	r7, #12
 803582c:	46bd      	mov	sp, r7
 803582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035832:	4770      	bx	lr

08035834 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8035834:	b580      	push	{r7, lr}
 8035836:	b082      	sub	sp, #8
 8035838:	af00      	add	r7, sp, #0
 803583a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803583c:	687b      	ldr	r3, [r7, #4]
 803583e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8035842:	2b03      	cmp	r3, #3
 8035844:	d10b      	bne.n	803585e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8035846:	687b      	ldr	r3, [r7, #4]
 8035848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803584c:	69db      	ldr	r3, [r3, #28]
 803584e:	2b00      	cmp	r3, #0
 8035850:	d005      	beq.n	803585e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8035852:	687b      	ldr	r3, [r7, #4]
 8035854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035858:	69db      	ldr	r3, [r3, #28]
 803585a:	6878      	ldr	r0, [r7, #4]
 803585c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803585e:	2300      	movs	r3, #0
}
 8035860:	4618      	mov	r0, r3
 8035862:	3708      	adds	r7, #8
 8035864:	46bd      	mov	sp, r7
 8035866:	bd80      	pop	{r7, pc}

08035868 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8035868:	b480      	push	{r7}
 803586a:	b083      	sub	sp, #12
 803586c:	af00      	add	r7, sp, #0
 803586e:	6078      	str	r0, [r7, #4]
 8035870:	460b      	mov	r3, r1
 8035872:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8035874:	2300      	movs	r3, #0
}
 8035876:	4618      	mov	r0, r3
 8035878:	370c      	adds	r7, #12
 803587a:	46bd      	mov	sp, r7
 803587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035880:	4770      	bx	lr

08035882 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8035882:	b480      	push	{r7}
 8035884:	b083      	sub	sp, #12
 8035886:	af00      	add	r7, sp, #0
 8035888:	6078      	str	r0, [r7, #4]
 803588a:	460b      	mov	r3, r1
 803588c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 803588e:	2300      	movs	r3, #0
}
 8035890:	4618      	mov	r0, r3
 8035892:	370c      	adds	r7, #12
 8035894:	46bd      	mov	sp, r7
 8035896:	f85d 7b04 	ldr.w	r7, [sp], #4
 803589a:	4770      	bx	lr

0803589c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 803589c:	b480      	push	{r7}
 803589e:	b083      	sub	sp, #12
 80358a0:	af00      	add	r7, sp, #0
 80358a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80358a4:	2300      	movs	r3, #0
}
 80358a6:	4618      	mov	r0, r3
 80358a8:	370c      	adds	r7, #12
 80358aa:	46bd      	mov	sp, r7
 80358ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80358b0:	4770      	bx	lr

080358b2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80358b2:	b580      	push	{r7, lr}
 80358b4:	b082      	sub	sp, #8
 80358b6:	af00      	add	r7, sp, #0
 80358b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80358ba:	687b      	ldr	r3, [r7, #4]
 80358bc:	2201      	movs	r2, #1
 80358be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80358c2:	687b      	ldr	r3, [r7, #4]
 80358c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80358c8:	2b00      	cmp	r3, #0
 80358ca:	d009      	beq.n	80358e0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80358cc:	687b      	ldr	r3, [r7, #4]
 80358ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80358d2:	685b      	ldr	r3, [r3, #4]
 80358d4:	687a      	ldr	r2, [r7, #4]
 80358d6:	6852      	ldr	r2, [r2, #4]
 80358d8:	b2d2      	uxtb	r2, r2
 80358da:	4611      	mov	r1, r2
 80358dc:	6878      	ldr	r0, [r7, #4]
 80358de:	4798      	blx	r3
  }

  return USBD_OK;
 80358e0:	2300      	movs	r3, #0
}
 80358e2:	4618      	mov	r0, r3
 80358e4:	3708      	adds	r7, #8
 80358e6:	46bd      	mov	sp, r7
 80358e8:	bd80      	pop	{r7, pc}

080358ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80358ea:	b480      	push	{r7}
 80358ec:	b087      	sub	sp, #28
 80358ee:	af00      	add	r7, sp, #0
 80358f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80358f2:	687b      	ldr	r3, [r7, #4]
 80358f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80358f6:	697b      	ldr	r3, [r7, #20]
 80358f8:	781b      	ldrb	r3, [r3, #0]
 80358fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80358fc:	697b      	ldr	r3, [r7, #20]
 80358fe:	3301      	adds	r3, #1
 8035900:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8035902:	697b      	ldr	r3, [r7, #20]
 8035904:	781b      	ldrb	r3, [r3, #0]
 8035906:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8035908:	8a3b      	ldrh	r3, [r7, #16]
 803590a:	021b      	lsls	r3, r3, #8
 803590c:	b21a      	sxth	r2, r3
 803590e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8035912:	4313      	orrs	r3, r2
 8035914:	b21b      	sxth	r3, r3
 8035916:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8035918:	89fb      	ldrh	r3, [r7, #14]
}
 803591a:	4618      	mov	r0, r3
 803591c:	371c      	adds	r7, #28
 803591e:	46bd      	mov	sp, r7
 8035920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035924:	4770      	bx	lr
	...

08035928 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8035928:	b580      	push	{r7, lr}
 803592a:	b084      	sub	sp, #16
 803592c:	af00      	add	r7, sp, #0
 803592e:	6078      	str	r0, [r7, #4]
 8035930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8035932:	2300      	movs	r3, #0
 8035934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8035936:	683b      	ldr	r3, [r7, #0]
 8035938:	781b      	ldrb	r3, [r3, #0]
 803593a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803593e:	2b40      	cmp	r3, #64	; 0x40
 8035940:	d005      	beq.n	803594e <USBD_StdDevReq+0x26>
 8035942:	2b40      	cmp	r3, #64	; 0x40
 8035944:	d853      	bhi.n	80359ee <USBD_StdDevReq+0xc6>
 8035946:	2b00      	cmp	r3, #0
 8035948:	d00b      	beq.n	8035962 <USBD_StdDevReq+0x3a>
 803594a:	2b20      	cmp	r3, #32
 803594c:	d14f      	bne.n	80359ee <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 803594e:	687b      	ldr	r3, [r7, #4]
 8035950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035954:	689b      	ldr	r3, [r3, #8]
 8035956:	6839      	ldr	r1, [r7, #0]
 8035958:	6878      	ldr	r0, [r7, #4]
 803595a:	4798      	blx	r3
 803595c:	4603      	mov	r3, r0
 803595e:	73fb      	strb	r3, [r7, #15]
    break;
 8035960:	e04a      	b.n	80359f8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8035962:	683b      	ldr	r3, [r7, #0]
 8035964:	785b      	ldrb	r3, [r3, #1]
 8035966:	2b09      	cmp	r3, #9
 8035968:	d83b      	bhi.n	80359e2 <USBD_StdDevReq+0xba>
 803596a:	a201      	add	r2, pc, #4	; (adr r2, 8035970 <USBD_StdDevReq+0x48>)
 803596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035970:	080359c5 	.word	0x080359c5
 8035974:	080359d9 	.word	0x080359d9
 8035978:	080359e3 	.word	0x080359e3
 803597c:	080359cf 	.word	0x080359cf
 8035980:	080359e3 	.word	0x080359e3
 8035984:	080359a3 	.word	0x080359a3
 8035988:	08035999 	.word	0x08035999
 803598c:	080359e3 	.word	0x080359e3
 8035990:	080359bb 	.word	0x080359bb
 8035994:	080359ad 	.word	0x080359ad
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8035998:	6839      	ldr	r1, [r7, #0]
 803599a:	6878      	ldr	r0, [r7, #4]
 803599c:	f000 f9d8 	bl	8035d50 <USBD_GetDescriptor>
      break;
 80359a0:	e024      	b.n	80359ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80359a2:	6839      	ldr	r1, [r7, #0]
 80359a4:	6878      	ldr	r0, [r7, #4]
 80359a6:	f000 fb3d 	bl	8036024 <USBD_SetAddress>
      break;
 80359aa:	e01f      	b.n	80359ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80359ac:	6839      	ldr	r1, [r7, #0]
 80359ae:	6878      	ldr	r0, [r7, #4]
 80359b0:	f000 fb7c 	bl	80360ac <USBD_SetConfig>
 80359b4:	4603      	mov	r3, r0
 80359b6:	73fb      	strb	r3, [r7, #15]
      break;
 80359b8:	e018      	b.n	80359ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80359ba:	6839      	ldr	r1, [r7, #0]
 80359bc:	6878      	ldr	r0, [r7, #4]
 80359be:	f000 fc19 	bl	80361f4 <USBD_GetConfig>
      break;
 80359c2:	e013      	b.n	80359ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80359c4:	6839      	ldr	r1, [r7, #0]
 80359c6:	6878      	ldr	r0, [r7, #4]
 80359c8:	f000 fc49 	bl	803625e <USBD_GetStatus>
      break;
 80359cc:	e00e      	b.n	80359ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80359ce:	6839      	ldr	r1, [r7, #0]
 80359d0:	6878      	ldr	r0, [r7, #4]
 80359d2:	f000 fc77 	bl	80362c4 <USBD_SetFeature>
      break;
 80359d6:	e009      	b.n	80359ec <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80359d8:	6839      	ldr	r1, [r7, #0]
 80359da:	6878      	ldr	r0, [r7, #4]
 80359dc:	f000 fc86 	bl	80362ec <USBD_ClrFeature>
      break;
 80359e0:	e004      	b.n	80359ec <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80359e2:	6839      	ldr	r1, [r7, #0]
 80359e4:	6878      	ldr	r0, [r7, #4]
 80359e6:	f000 fcdc 	bl	80363a2 <USBD_CtlError>
      break;
 80359ea:	bf00      	nop
    }
    break;
 80359ec:	e004      	b.n	80359f8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80359ee:	6839      	ldr	r1, [r7, #0]
 80359f0:	6878      	ldr	r0, [r7, #4]
 80359f2:	f000 fcd6 	bl	80363a2 <USBD_CtlError>
    break;
 80359f6:	bf00      	nop
  }

  return ret;
 80359f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80359fa:	4618      	mov	r0, r3
 80359fc:	3710      	adds	r7, #16
 80359fe:	46bd      	mov	sp, r7
 8035a00:	bd80      	pop	{r7, pc}
 8035a02:	bf00      	nop

08035a04 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8035a04:	b580      	push	{r7, lr}
 8035a06:	b084      	sub	sp, #16
 8035a08:	af00      	add	r7, sp, #0
 8035a0a:	6078      	str	r0, [r7, #4]
 8035a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8035a0e:	2300      	movs	r3, #0
 8035a10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8035a12:	683b      	ldr	r3, [r7, #0]
 8035a14:	781b      	ldrb	r3, [r3, #0]
 8035a16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8035a1a:	2b40      	cmp	r3, #64	; 0x40
 8035a1c:	d005      	beq.n	8035a2a <USBD_StdItfReq+0x26>
 8035a1e:	2b40      	cmp	r3, #64	; 0x40
 8035a20:	d82e      	bhi.n	8035a80 <USBD_StdItfReq+0x7c>
 8035a22:	2b00      	cmp	r3, #0
 8035a24:	d001      	beq.n	8035a2a <USBD_StdItfReq+0x26>
 8035a26:	2b20      	cmp	r3, #32
 8035a28:	d12a      	bne.n	8035a80 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8035a2a:	687b      	ldr	r3, [r7, #4]
 8035a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8035a30:	3b01      	subs	r3, #1
 8035a32:	2b02      	cmp	r3, #2
 8035a34:	d81d      	bhi.n	8035a72 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8035a36:	683b      	ldr	r3, [r7, #0]
 8035a38:	889b      	ldrh	r3, [r3, #4]
 8035a3a:	b2db      	uxtb	r3, r3
 8035a3c:	2b01      	cmp	r3, #1
 8035a3e:	d813      	bhi.n	8035a68 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8035a40:	687b      	ldr	r3, [r7, #4]
 8035a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035a46:	689b      	ldr	r3, [r3, #8]
 8035a48:	6839      	ldr	r1, [r7, #0]
 8035a4a:	6878      	ldr	r0, [r7, #4]
 8035a4c:	4798      	blx	r3
 8035a4e:	4603      	mov	r3, r0
 8035a50:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8035a52:	683b      	ldr	r3, [r7, #0]
 8035a54:	88db      	ldrh	r3, [r3, #6]
 8035a56:	2b00      	cmp	r3, #0
 8035a58:	d110      	bne.n	8035a7c <USBD_StdItfReq+0x78>
 8035a5a:	7bfb      	ldrb	r3, [r7, #15]
 8035a5c:	2b00      	cmp	r3, #0
 8035a5e:	d10d      	bne.n	8035a7c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8035a60:	6878      	ldr	r0, [r7, #4]
 8035a62:	f000 fd69 	bl	8036538 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8035a66:	e009      	b.n	8035a7c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8035a68:	6839      	ldr	r1, [r7, #0]
 8035a6a:	6878      	ldr	r0, [r7, #4]
 8035a6c:	f000 fc99 	bl	80363a2 <USBD_CtlError>
      break;
 8035a70:	e004      	b.n	8035a7c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8035a72:	6839      	ldr	r1, [r7, #0]
 8035a74:	6878      	ldr	r0, [r7, #4]
 8035a76:	f000 fc94 	bl	80363a2 <USBD_CtlError>
      break;
 8035a7a:	e000      	b.n	8035a7e <USBD_StdItfReq+0x7a>
      break;
 8035a7c:	bf00      	nop
    }
    break;
 8035a7e:	e004      	b.n	8035a8a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8035a80:	6839      	ldr	r1, [r7, #0]
 8035a82:	6878      	ldr	r0, [r7, #4]
 8035a84:	f000 fc8d 	bl	80363a2 <USBD_CtlError>
    break;
 8035a88:	bf00      	nop
  }

  return ret;
 8035a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8035a8c:	4618      	mov	r0, r3
 8035a8e:	3710      	adds	r7, #16
 8035a90:	46bd      	mov	sp, r7
 8035a92:	bd80      	pop	{r7, pc}

08035a94 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8035a94:	b580      	push	{r7, lr}
 8035a96:	b084      	sub	sp, #16
 8035a98:	af00      	add	r7, sp, #0
 8035a9a:	6078      	str	r0, [r7, #4]
 8035a9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8035a9e:	2300      	movs	r3, #0
 8035aa0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8035aa2:	683b      	ldr	r3, [r7, #0]
 8035aa4:	889b      	ldrh	r3, [r3, #4]
 8035aa6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8035aa8:	683b      	ldr	r3, [r7, #0]
 8035aaa:	781b      	ldrb	r3, [r3, #0]
 8035aac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8035ab0:	2b40      	cmp	r3, #64	; 0x40
 8035ab2:	d007      	beq.n	8035ac4 <USBD_StdEPReq+0x30>
 8035ab4:	2b40      	cmp	r3, #64	; 0x40
 8035ab6:	f200 8140 	bhi.w	8035d3a <USBD_StdEPReq+0x2a6>
 8035aba:	2b00      	cmp	r3, #0
 8035abc:	d00c      	beq.n	8035ad8 <USBD_StdEPReq+0x44>
 8035abe:	2b20      	cmp	r3, #32
 8035ac0:	f040 813b 	bne.w	8035d3a <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8035ac4:	687b      	ldr	r3, [r7, #4]
 8035ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035aca:	689b      	ldr	r3, [r3, #8]
 8035acc:	6839      	ldr	r1, [r7, #0]
 8035ace:	6878      	ldr	r0, [r7, #4]
 8035ad0:	4798      	blx	r3
 8035ad2:	4603      	mov	r3, r0
 8035ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8035ad6:	e135      	b.n	8035d44 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8035ad8:	683b      	ldr	r3, [r7, #0]
 8035ada:	785b      	ldrb	r3, [r3, #1]
 8035adc:	2b03      	cmp	r3, #3
 8035ade:	d007      	beq.n	8035af0 <USBD_StdEPReq+0x5c>
 8035ae0:	2b03      	cmp	r3, #3
 8035ae2:	f300 8124 	bgt.w	8035d2e <USBD_StdEPReq+0x29a>
 8035ae6:	2b00      	cmp	r3, #0
 8035ae8:	d07b      	beq.n	8035be2 <USBD_StdEPReq+0x14e>
 8035aea:	2b01      	cmp	r3, #1
 8035aec:	d03b      	beq.n	8035b66 <USBD_StdEPReq+0xd2>
 8035aee:	e11e      	b.n	8035d2e <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8035af0:	687b      	ldr	r3, [r7, #4]
 8035af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8035af6:	2b02      	cmp	r3, #2
 8035af8:	d002      	beq.n	8035b00 <USBD_StdEPReq+0x6c>
 8035afa:	2b03      	cmp	r3, #3
 8035afc:	d016      	beq.n	8035b2c <USBD_StdEPReq+0x98>
 8035afe:	e02c      	b.n	8035b5a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8035b00:	7bbb      	ldrb	r3, [r7, #14]
 8035b02:	2b00      	cmp	r3, #0
 8035b04:	d00d      	beq.n	8035b22 <USBD_StdEPReq+0x8e>
 8035b06:	7bbb      	ldrb	r3, [r7, #14]
 8035b08:	2b80      	cmp	r3, #128	; 0x80
 8035b0a:	d00a      	beq.n	8035b22 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8035b0c:	7bbb      	ldrb	r3, [r7, #14]
 8035b0e:	4619      	mov	r1, r3
 8035b10:	6878      	ldr	r0, [r7, #4]
 8035b12:	f001 f947 	bl	8036da4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8035b16:	2180      	movs	r1, #128	; 0x80
 8035b18:	6878      	ldr	r0, [r7, #4]
 8035b1a:	f001 f943 	bl	8036da4 <USBD_LL_StallEP>
 8035b1e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8035b20:	e020      	b.n	8035b64 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8035b22:	6839      	ldr	r1, [r7, #0]
 8035b24:	6878      	ldr	r0, [r7, #4]
 8035b26:	f000 fc3c 	bl	80363a2 <USBD_CtlError>
        break;
 8035b2a:	e01b      	b.n	8035b64 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8035b2c:	683b      	ldr	r3, [r7, #0]
 8035b2e:	885b      	ldrh	r3, [r3, #2]
 8035b30:	2b00      	cmp	r3, #0
 8035b32:	d10e      	bne.n	8035b52 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8035b34:	7bbb      	ldrb	r3, [r7, #14]
 8035b36:	2b00      	cmp	r3, #0
 8035b38:	d00b      	beq.n	8035b52 <USBD_StdEPReq+0xbe>
 8035b3a:	7bbb      	ldrb	r3, [r7, #14]
 8035b3c:	2b80      	cmp	r3, #128	; 0x80
 8035b3e:	d008      	beq.n	8035b52 <USBD_StdEPReq+0xbe>
 8035b40:	683b      	ldr	r3, [r7, #0]
 8035b42:	88db      	ldrh	r3, [r3, #6]
 8035b44:	2b00      	cmp	r3, #0
 8035b46:	d104      	bne.n	8035b52 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8035b48:	7bbb      	ldrb	r3, [r7, #14]
 8035b4a:	4619      	mov	r1, r3
 8035b4c:	6878      	ldr	r0, [r7, #4]
 8035b4e:	f001 f929 	bl	8036da4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8035b52:	6878      	ldr	r0, [r7, #4]
 8035b54:	f000 fcf0 	bl	8036538 <USBD_CtlSendStatus>

        break;
 8035b58:	e004      	b.n	8035b64 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8035b5a:	6839      	ldr	r1, [r7, #0]
 8035b5c:	6878      	ldr	r0, [r7, #4]
 8035b5e:	f000 fc20 	bl	80363a2 <USBD_CtlError>
        break;
 8035b62:	bf00      	nop
      }
      break;
 8035b64:	e0e8      	b.n	8035d38 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8035b66:	687b      	ldr	r3, [r7, #4]
 8035b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8035b6c:	2b02      	cmp	r3, #2
 8035b6e:	d002      	beq.n	8035b76 <USBD_StdEPReq+0xe2>
 8035b70:	2b03      	cmp	r3, #3
 8035b72:	d016      	beq.n	8035ba2 <USBD_StdEPReq+0x10e>
 8035b74:	e02e      	b.n	8035bd4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8035b76:	7bbb      	ldrb	r3, [r7, #14]
 8035b78:	2b00      	cmp	r3, #0
 8035b7a:	d00d      	beq.n	8035b98 <USBD_StdEPReq+0x104>
 8035b7c:	7bbb      	ldrb	r3, [r7, #14]
 8035b7e:	2b80      	cmp	r3, #128	; 0x80
 8035b80:	d00a      	beq.n	8035b98 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8035b82:	7bbb      	ldrb	r3, [r7, #14]
 8035b84:	4619      	mov	r1, r3
 8035b86:	6878      	ldr	r0, [r7, #4]
 8035b88:	f001 f90c 	bl	8036da4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8035b8c:	2180      	movs	r1, #128	; 0x80
 8035b8e:	6878      	ldr	r0, [r7, #4]
 8035b90:	f001 f908 	bl	8036da4 <USBD_LL_StallEP>
 8035b94:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8035b96:	e023      	b.n	8035be0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8035b98:	6839      	ldr	r1, [r7, #0]
 8035b9a:	6878      	ldr	r0, [r7, #4]
 8035b9c:	f000 fc01 	bl	80363a2 <USBD_CtlError>
        break;
 8035ba0:	e01e      	b.n	8035be0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8035ba2:	683b      	ldr	r3, [r7, #0]
 8035ba4:	885b      	ldrh	r3, [r3, #2]
 8035ba6:	2b00      	cmp	r3, #0
 8035ba8:	d119      	bne.n	8035bde <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8035baa:	7bbb      	ldrb	r3, [r7, #14]
 8035bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8035bb0:	2b00      	cmp	r3, #0
 8035bb2:	d004      	beq.n	8035bbe <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8035bb4:	7bbb      	ldrb	r3, [r7, #14]
 8035bb6:	4619      	mov	r1, r3
 8035bb8:	6878      	ldr	r0, [r7, #4]
 8035bba:	f001 f912 	bl	8036de2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8035bbe:	6878      	ldr	r0, [r7, #4]
 8035bc0:	f000 fcba 	bl	8036538 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8035bc4:	687b      	ldr	r3, [r7, #4]
 8035bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035bca:	689b      	ldr	r3, [r3, #8]
 8035bcc:	6839      	ldr	r1, [r7, #0]
 8035bce:	6878      	ldr	r0, [r7, #4]
 8035bd0:	4798      	blx	r3
        }
        break;
 8035bd2:	e004      	b.n	8035bde <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8035bd4:	6839      	ldr	r1, [r7, #0]
 8035bd6:	6878      	ldr	r0, [r7, #4]
 8035bd8:	f000 fbe3 	bl	80363a2 <USBD_CtlError>
        break;
 8035bdc:	e000      	b.n	8035be0 <USBD_StdEPReq+0x14c>
        break;
 8035bde:	bf00      	nop
      }
      break;
 8035be0:	e0aa      	b.n	8035d38 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8035be2:	687b      	ldr	r3, [r7, #4]
 8035be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8035be8:	2b02      	cmp	r3, #2
 8035bea:	d002      	beq.n	8035bf2 <USBD_StdEPReq+0x15e>
 8035bec:	2b03      	cmp	r3, #3
 8035bee:	d032      	beq.n	8035c56 <USBD_StdEPReq+0x1c2>
 8035bf0:	e097      	b.n	8035d22 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8035bf2:	7bbb      	ldrb	r3, [r7, #14]
 8035bf4:	2b00      	cmp	r3, #0
 8035bf6:	d007      	beq.n	8035c08 <USBD_StdEPReq+0x174>
 8035bf8:	7bbb      	ldrb	r3, [r7, #14]
 8035bfa:	2b80      	cmp	r3, #128	; 0x80
 8035bfc:	d004      	beq.n	8035c08 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8035bfe:	6839      	ldr	r1, [r7, #0]
 8035c00:	6878      	ldr	r0, [r7, #4]
 8035c02:	f000 fbce 	bl	80363a2 <USBD_CtlError>
          break;
 8035c06:	e091      	b.n	8035d2c <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8035c08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8035c0c:	2b00      	cmp	r3, #0
 8035c0e:	da0b      	bge.n	8035c28 <USBD_StdEPReq+0x194>
 8035c10:	7bbb      	ldrb	r3, [r7, #14]
 8035c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8035c16:	4613      	mov	r3, r2
 8035c18:	009b      	lsls	r3, r3, #2
 8035c1a:	4413      	add	r3, r2
 8035c1c:	009b      	lsls	r3, r3, #2
 8035c1e:	3310      	adds	r3, #16
 8035c20:	687a      	ldr	r2, [r7, #4]
 8035c22:	4413      	add	r3, r2
 8035c24:	3304      	adds	r3, #4
 8035c26:	e00b      	b.n	8035c40 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8035c28:	7bbb      	ldrb	r3, [r7, #14]
 8035c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8035c2e:	4613      	mov	r3, r2
 8035c30:	009b      	lsls	r3, r3, #2
 8035c32:	4413      	add	r3, r2
 8035c34:	009b      	lsls	r3, r3, #2
 8035c36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8035c3a:	687a      	ldr	r2, [r7, #4]
 8035c3c:	4413      	add	r3, r2
 8035c3e:	3304      	adds	r3, #4
 8035c40:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8035c42:	68bb      	ldr	r3, [r7, #8]
 8035c44:	2200      	movs	r2, #0
 8035c46:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8035c48:	68bb      	ldr	r3, [r7, #8]
 8035c4a:	2202      	movs	r2, #2
 8035c4c:	4619      	mov	r1, r3
 8035c4e:	6878      	ldr	r0, [r7, #4]
 8035c50:	f000 fc18 	bl	8036484 <USBD_CtlSendData>
        break;
 8035c54:	e06a      	b.n	8035d2c <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8035c56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8035c5a:	2b00      	cmp	r3, #0
 8035c5c:	da11      	bge.n	8035c82 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8035c5e:	7bbb      	ldrb	r3, [r7, #14]
 8035c60:	f003 020f 	and.w	r2, r3, #15
 8035c64:	6879      	ldr	r1, [r7, #4]
 8035c66:	4613      	mov	r3, r2
 8035c68:	009b      	lsls	r3, r3, #2
 8035c6a:	4413      	add	r3, r2
 8035c6c:	009b      	lsls	r3, r3, #2
 8035c6e:	440b      	add	r3, r1
 8035c70:	3324      	adds	r3, #36	; 0x24
 8035c72:	881b      	ldrh	r3, [r3, #0]
 8035c74:	2b00      	cmp	r3, #0
 8035c76:	d117      	bne.n	8035ca8 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8035c78:	6839      	ldr	r1, [r7, #0]
 8035c7a:	6878      	ldr	r0, [r7, #4]
 8035c7c:	f000 fb91 	bl	80363a2 <USBD_CtlError>
            break;
 8035c80:	e054      	b.n	8035d2c <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8035c82:	7bbb      	ldrb	r3, [r7, #14]
 8035c84:	f003 020f 	and.w	r2, r3, #15
 8035c88:	6879      	ldr	r1, [r7, #4]
 8035c8a:	4613      	mov	r3, r2
 8035c8c:	009b      	lsls	r3, r3, #2
 8035c8e:	4413      	add	r3, r2
 8035c90:	009b      	lsls	r3, r3, #2
 8035c92:	440b      	add	r3, r1
 8035c94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8035c98:	881b      	ldrh	r3, [r3, #0]
 8035c9a:	2b00      	cmp	r3, #0
 8035c9c:	d104      	bne.n	8035ca8 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8035c9e:	6839      	ldr	r1, [r7, #0]
 8035ca0:	6878      	ldr	r0, [r7, #4]
 8035ca2:	f000 fb7e 	bl	80363a2 <USBD_CtlError>
            break;
 8035ca6:	e041      	b.n	8035d2c <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8035ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8035cac:	2b00      	cmp	r3, #0
 8035cae:	da0b      	bge.n	8035cc8 <USBD_StdEPReq+0x234>
 8035cb0:	7bbb      	ldrb	r3, [r7, #14]
 8035cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8035cb6:	4613      	mov	r3, r2
 8035cb8:	009b      	lsls	r3, r3, #2
 8035cba:	4413      	add	r3, r2
 8035cbc:	009b      	lsls	r3, r3, #2
 8035cbe:	3310      	adds	r3, #16
 8035cc0:	687a      	ldr	r2, [r7, #4]
 8035cc2:	4413      	add	r3, r2
 8035cc4:	3304      	adds	r3, #4
 8035cc6:	e00b      	b.n	8035ce0 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8035cc8:	7bbb      	ldrb	r3, [r7, #14]
 8035cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8035cce:	4613      	mov	r3, r2
 8035cd0:	009b      	lsls	r3, r3, #2
 8035cd2:	4413      	add	r3, r2
 8035cd4:	009b      	lsls	r3, r3, #2
 8035cd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8035cda:	687a      	ldr	r2, [r7, #4]
 8035cdc:	4413      	add	r3, r2
 8035cde:	3304      	adds	r3, #4
 8035ce0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8035ce2:	7bbb      	ldrb	r3, [r7, #14]
 8035ce4:	2b00      	cmp	r3, #0
 8035ce6:	d002      	beq.n	8035cee <USBD_StdEPReq+0x25a>
 8035ce8:	7bbb      	ldrb	r3, [r7, #14]
 8035cea:	2b80      	cmp	r3, #128	; 0x80
 8035cec:	d103      	bne.n	8035cf6 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8035cee:	68bb      	ldr	r3, [r7, #8]
 8035cf0:	2200      	movs	r2, #0
 8035cf2:	601a      	str	r2, [r3, #0]
 8035cf4:	e00e      	b.n	8035d14 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8035cf6:	7bbb      	ldrb	r3, [r7, #14]
 8035cf8:	4619      	mov	r1, r3
 8035cfa:	6878      	ldr	r0, [r7, #4]
 8035cfc:	f001 f890 	bl	8036e20 <USBD_LL_IsStallEP>
 8035d00:	4603      	mov	r3, r0
 8035d02:	2b00      	cmp	r3, #0
 8035d04:	d003      	beq.n	8035d0e <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8035d06:	68bb      	ldr	r3, [r7, #8]
 8035d08:	2201      	movs	r2, #1
 8035d0a:	601a      	str	r2, [r3, #0]
 8035d0c:	e002      	b.n	8035d14 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8035d0e:	68bb      	ldr	r3, [r7, #8]
 8035d10:	2200      	movs	r2, #0
 8035d12:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8035d14:	68bb      	ldr	r3, [r7, #8]
 8035d16:	2202      	movs	r2, #2
 8035d18:	4619      	mov	r1, r3
 8035d1a:	6878      	ldr	r0, [r7, #4]
 8035d1c:	f000 fbb2 	bl	8036484 <USBD_CtlSendData>
          break;
 8035d20:	e004      	b.n	8035d2c <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8035d22:	6839      	ldr	r1, [r7, #0]
 8035d24:	6878      	ldr	r0, [r7, #4]
 8035d26:	f000 fb3c 	bl	80363a2 <USBD_CtlError>
        break;
 8035d2a:	bf00      	nop
      }
      break;
 8035d2c:	e004      	b.n	8035d38 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8035d2e:	6839      	ldr	r1, [r7, #0]
 8035d30:	6878      	ldr	r0, [r7, #4]
 8035d32:	f000 fb36 	bl	80363a2 <USBD_CtlError>
      break;
 8035d36:	bf00      	nop
    }
    break;
 8035d38:	e004      	b.n	8035d44 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8035d3a:	6839      	ldr	r1, [r7, #0]
 8035d3c:	6878      	ldr	r0, [r7, #4]
 8035d3e:	f000 fb30 	bl	80363a2 <USBD_CtlError>
    break;
 8035d42:	bf00      	nop
  }

  return ret;
 8035d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8035d46:	4618      	mov	r0, r3
 8035d48:	3710      	adds	r7, #16
 8035d4a:	46bd      	mov	sp, r7
 8035d4c:	bd80      	pop	{r7, pc}
	...

08035d50 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8035d50:	b580      	push	{r7, lr}
 8035d52:	b084      	sub	sp, #16
 8035d54:	af00      	add	r7, sp, #0
 8035d56:	6078      	str	r0, [r7, #4]
 8035d58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8035d5a:	2300      	movs	r3, #0
 8035d5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8035d5e:	2300      	movs	r3, #0
 8035d60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8035d62:	2300      	movs	r3, #0
 8035d64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8035d66:	683b      	ldr	r3, [r7, #0]
 8035d68:	885b      	ldrh	r3, [r3, #2]
 8035d6a:	0a1b      	lsrs	r3, r3, #8
 8035d6c:	b29b      	uxth	r3, r3
 8035d6e:	3b01      	subs	r3, #1
 8035d70:	2b06      	cmp	r3, #6
 8035d72:	f200 8128 	bhi.w	8035fc6 <USBD_GetDescriptor+0x276>
 8035d76:	a201      	add	r2, pc, #4	; (adr r2, 8035d7c <USBD_GetDescriptor+0x2c>)
 8035d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035d7c:	08035d99 	.word	0x08035d99
 8035d80:	08035db1 	.word	0x08035db1
 8035d84:	08035df1 	.word	0x08035df1
 8035d88:	08035fc7 	.word	0x08035fc7
 8035d8c:	08035fc7 	.word	0x08035fc7
 8035d90:	08035f67 	.word	0x08035f67
 8035d94:	08035f93 	.word	0x08035f93
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8035d98:	687b      	ldr	r3, [r7, #4]
 8035d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035d9e:	681b      	ldr	r3, [r3, #0]
 8035da0:	687a      	ldr	r2, [r7, #4]
 8035da2:	7c12      	ldrb	r2, [r2, #16]
 8035da4:	f107 0108 	add.w	r1, r7, #8
 8035da8:	4610      	mov	r0, r2
 8035daa:	4798      	blx	r3
 8035dac:	60f8      	str	r0, [r7, #12]
    break;
 8035dae:	e112      	b.n	8035fd6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8035db0:	687b      	ldr	r3, [r7, #4]
 8035db2:	7c1b      	ldrb	r3, [r3, #16]
 8035db4:	2b00      	cmp	r3, #0
 8035db6:	d10d      	bne.n	8035dd4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8035db8:	687b      	ldr	r3, [r7, #4]
 8035dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035dc0:	f107 0208 	add.w	r2, r7, #8
 8035dc4:	4610      	mov	r0, r2
 8035dc6:	4798      	blx	r3
 8035dc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8035dca:	68fb      	ldr	r3, [r7, #12]
 8035dcc:	3301      	adds	r3, #1
 8035dce:	2202      	movs	r2, #2
 8035dd0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8035dd2:	e100      	b.n	8035fd6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8035dd4:	687b      	ldr	r3, [r7, #4]
 8035dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035ddc:	f107 0208 	add.w	r2, r7, #8
 8035de0:	4610      	mov	r0, r2
 8035de2:	4798      	blx	r3
 8035de4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8035de6:	68fb      	ldr	r3, [r7, #12]
 8035de8:	3301      	adds	r3, #1
 8035dea:	2202      	movs	r2, #2
 8035dec:	701a      	strb	r2, [r3, #0]
    break;
 8035dee:	e0f2      	b.n	8035fd6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8035df0:	683b      	ldr	r3, [r7, #0]
 8035df2:	885b      	ldrh	r3, [r3, #2]
 8035df4:	b2db      	uxtb	r3, r3
 8035df6:	2b05      	cmp	r3, #5
 8035df8:	f200 80ac 	bhi.w	8035f54 <USBD_GetDescriptor+0x204>
 8035dfc:	a201      	add	r2, pc, #4	; (adr r2, 8035e04 <USBD_GetDescriptor+0xb4>)
 8035dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035e02:	bf00      	nop
 8035e04:	08035e1d 	.word	0x08035e1d
 8035e08:	08035e51 	.word	0x08035e51
 8035e0c:	08035e85 	.word	0x08035e85
 8035e10:	08035eb9 	.word	0x08035eb9
 8035e14:	08035eed 	.word	0x08035eed
 8035e18:	08035f21 	.word	0x08035f21
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8035e1c:	687b      	ldr	r3, [r7, #4]
 8035e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035e22:	685b      	ldr	r3, [r3, #4]
 8035e24:	2b00      	cmp	r3, #0
 8035e26:	d00b      	beq.n	8035e40 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8035e28:	687b      	ldr	r3, [r7, #4]
 8035e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035e2e:	685b      	ldr	r3, [r3, #4]
 8035e30:	687a      	ldr	r2, [r7, #4]
 8035e32:	7c12      	ldrb	r2, [r2, #16]
 8035e34:	f107 0108 	add.w	r1, r7, #8
 8035e38:	4610      	mov	r0, r2
 8035e3a:	4798      	blx	r3
 8035e3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8035e3e:	e091      	b.n	8035f64 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8035e40:	6839      	ldr	r1, [r7, #0]
 8035e42:	6878      	ldr	r0, [r7, #4]
 8035e44:	f000 faad 	bl	80363a2 <USBD_CtlError>
        err++;
 8035e48:	7afb      	ldrb	r3, [r7, #11]
 8035e4a:	3301      	adds	r3, #1
 8035e4c:	72fb      	strb	r3, [r7, #11]
      break;
 8035e4e:	e089      	b.n	8035f64 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8035e50:	687b      	ldr	r3, [r7, #4]
 8035e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035e56:	689b      	ldr	r3, [r3, #8]
 8035e58:	2b00      	cmp	r3, #0
 8035e5a:	d00b      	beq.n	8035e74 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8035e5c:	687b      	ldr	r3, [r7, #4]
 8035e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035e62:	689b      	ldr	r3, [r3, #8]
 8035e64:	687a      	ldr	r2, [r7, #4]
 8035e66:	7c12      	ldrb	r2, [r2, #16]
 8035e68:	f107 0108 	add.w	r1, r7, #8
 8035e6c:	4610      	mov	r0, r2
 8035e6e:	4798      	blx	r3
 8035e70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8035e72:	e077      	b.n	8035f64 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8035e74:	6839      	ldr	r1, [r7, #0]
 8035e76:	6878      	ldr	r0, [r7, #4]
 8035e78:	f000 fa93 	bl	80363a2 <USBD_CtlError>
        err++;
 8035e7c:	7afb      	ldrb	r3, [r7, #11]
 8035e7e:	3301      	adds	r3, #1
 8035e80:	72fb      	strb	r3, [r7, #11]
      break;
 8035e82:	e06f      	b.n	8035f64 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8035e84:	687b      	ldr	r3, [r7, #4]
 8035e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035e8a:	68db      	ldr	r3, [r3, #12]
 8035e8c:	2b00      	cmp	r3, #0
 8035e8e:	d00b      	beq.n	8035ea8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8035e90:	687b      	ldr	r3, [r7, #4]
 8035e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035e96:	68db      	ldr	r3, [r3, #12]
 8035e98:	687a      	ldr	r2, [r7, #4]
 8035e9a:	7c12      	ldrb	r2, [r2, #16]
 8035e9c:	f107 0108 	add.w	r1, r7, #8
 8035ea0:	4610      	mov	r0, r2
 8035ea2:	4798      	blx	r3
 8035ea4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8035ea6:	e05d      	b.n	8035f64 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8035ea8:	6839      	ldr	r1, [r7, #0]
 8035eaa:	6878      	ldr	r0, [r7, #4]
 8035eac:	f000 fa79 	bl	80363a2 <USBD_CtlError>
        err++;
 8035eb0:	7afb      	ldrb	r3, [r7, #11]
 8035eb2:	3301      	adds	r3, #1
 8035eb4:	72fb      	strb	r3, [r7, #11]
      break;
 8035eb6:	e055      	b.n	8035f64 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8035eb8:	687b      	ldr	r3, [r7, #4]
 8035eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035ebe:	691b      	ldr	r3, [r3, #16]
 8035ec0:	2b00      	cmp	r3, #0
 8035ec2:	d00b      	beq.n	8035edc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8035ec4:	687b      	ldr	r3, [r7, #4]
 8035ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035eca:	691b      	ldr	r3, [r3, #16]
 8035ecc:	687a      	ldr	r2, [r7, #4]
 8035ece:	7c12      	ldrb	r2, [r2, #16]
 8035ed0:	f107 0108 	add.w	r1, r7, #8
 8035ed4:	4610      	mov	r0, r2
 8035ed6:	4798      	blx	r3
 8035ed8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8035eda:	e043      	b.n	8035f64 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8035edc:	6839      	ldr	r1, [r7, #0]
 8035ede:	6878      	ldr	r0, [r7, #4]
 8035ee0:	f000 fa5f 	bl	80363a2 <USBD_CtlError>
        err++;
 8035ee4:	7afb      	ldrb	r3, [r7, #11]
 8035ee6:	3301      	adds	r3, #1
 8035ee8:	72fb      	strb	r3, [r7, #11]
      break;
 8035eea:	e03b      	b.n	8035f64 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8035eec:	687b      	ldr	r3, [r7, #4]
 8035eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035ef2:	695b      	ldr	r3, [r3, #20]
 8035ef4:	2b00      	cmp	r3, #0
 8035ef6:	d00b      	beq.n	8035f10 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8035ef8:	687b      	ldr	r3, [r7, #4]
 8035efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035efe:	695b      	ldr	r3, [r3, #20]
 8035f00:	687a      	ldr	r2, [r7, #4]
 8035f02:	7c12      	ldrb	r2, [r2, #16]
 8035f04:	f107 0108 	add.w	r1, r7, #8
 8035f08:	4610      	mov	r0, r2
 8035f0a:	4798      	blx	r3
 8035f0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8035f0e:	e029      	b.n	8035f64 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8035f10:	6839      	ldr	r1, [r7, #0]
 8035f12:	6878      	ldr	r0, [r7, #4]
 8035f14:	f000 fa45 	bl	80363a2 <USBD_CtlError>
        err++;
 8035f18:	7afb      	ldrb	r3, [r7, #11]
 8035f1a:	3301      	adds	r3, #1
 8035f1c:	72fb      	strb	r3, [r7, #11]
      break;
 8035f1e:	e021      	b.n	8035f64 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8035f20:	687b      	ldr	r3, [r7, #4]
 8035f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035f26:	699b      	ldr	r3, [r3, #24]
 8035f28:	2b00      	cmp	r3, #0
 8035f2a:	d00b      	beq.n	8035f44 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8035f2c:	687b      	ldr	r3, [r7, #4]
 8035f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8035f32:	699b      	ldr	r3, [r3, #24]
 8035f34:	687a      	ldr	r2, [r7, #4]
 8035f36:	7c12      	ldrb	r2, [r2, #16]
 8035f38:	f107 0108 	add.w	r1, r7, #8
 8035f3c:	4610      	mov	r0, r2
 8035f3e:	4798      	blx	r3
 8035f40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8035f42:	e00f      	b.n	8035f64 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8035f44:	6839      	ldr	r1, [r7, #0]
 8035f46:	6878      	ldr	r0, [r7, #4]
 8035f48:	f000 fa2b 	bl	80363a2 <USBD_CtlError>
        err++;
 8035f4c:	7afb      	ldrb	r3, [r7, #11]
 8035f4e:	3301      	adds	r3, #1
 8035f50:	72fb      	strb	r3, [r7, #11]
      break;
 8035f52:	e007      	b.n	8035f64 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8035f54:	6839      	ldr	r1, [r7, #0]
 8035f56:	6878      	ldr	r0, [r7, #4]
 8035f58:	f000 fa23 	bl	80363a2 <USBD_CtlError>
      err++;
 8035f5c:	7afb      	ldrb	r3, [r7, #11]
 8035f5e:	3301      	adds	r3, #1
 8035f60:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8035f62:	bf00      	nop
    }
    break;
 8035f64:	e037      	b.n	8035fd6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8035f66:	687b      	ldr	r3, [r7, #4]
 8035f68:	7c1b      	ldrb	r3, [r3, #16]
 8035f6a:	2b00      	cmp	r3, #0
 8035f6c:	d109      	bne.n	8035f82 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8035f6e:	687b      	ldr	r3, [r7, #4]
 8035f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8035f76:	f107 0208 	add.w	r2, r7, #8
 8035f7a:	4610      	mov	r0, r2
 8035f7c:	4798      	blx	r3
 8035f7e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8035f80:	e029      	b.n	8035fd6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8035f82:	6839      	ldr	r1, [r7, #0]
 8035f84:	6878      	ldr	r0, [r7, #4]
 8035f86:	f000 fa0c 	bl	80363a2 <USBD_CtlError>
      err++;
 8035f8a:	7afb      	ldrb	r3, [r7, #11]
 8035f8c:	3301      	adds	r3, #1
 8035f8e:	72fb      	strb	r3, [r7, #11]
    break;
 8035f90:	e021      	b.n	8035fd6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8035f92:	687b      	ldr	r3, [r7, #4]
 8035f94:	7c1b      	ldrb	r3, [r3, #16]
 8035f96:	2b00      	cmp	r3, #0
 8035f98:	d10d      	bne.n	8035fb6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8035f9a:	687b      	ldr	r3, [r7, #4]
 8035f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8035fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035fa2:	f107 0208 	add.w	r2, r7, #8
 8035fa6:	4610      	mov	r0, r2
 8035fa8:	4798      	blx	r3
 8035faa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8035fac:	68fb      	ldr	r3, [r7, #12]
 8035fae:	3301      	adds	r3, #1
 8035fb0:	2207      	movs	r2, #7
 8035fb2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8035fb4:	e00f      	b.n	8035fd6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8035fb6:	6839      	ldr	r1, [r7, #0]
 8035fb8:	6878      	ldr	r0, [r7, #4]
 8035fba:	f000 f9f2 	bl	80363a2 <USBD_CtlError>
      err++;
 8035fbe:	7afb      	ldrb	r3, [r7, #11]
 8035fc0:	3301      	adds	r3, #1
 8035fc2:	72fb      	strb	r3, [r7, #11]
    break;
 8035fc4:	e007      	b.n	8035fd6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8035fc6:	6839      	ldr	r1, [r7, #0]
 8035fc8:	6878      	ldr	r0, [r7, #4]
 8035fca:	f000 f9ea 	bl	80363a2 <USBD_CtlError>
    err++;
 8035fce:	7afb      	ldrb	r3, [r7, #11]
 8035fd0:	3301      	adds	r3, #1
 8035fd2:	72fb      	strb	r3, [r7, #11]
    break;
 8035fd4:	bf00      	nop
  }

  if (err != 0U)
 8035fd6:	7afb      	ldrb	r3, [r7, #11]
 8035fd8:	2b00      	cmp	r3, #0
 8035fda:	d11e      	bne.n	803601a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8035fdc:	683b      	ldr	r3, [r7, #0]
 8035fde:	88db      	ldrh	r3, [r3, #6]
 8035fe0:	2b00      	cmp	r3, #0
 8035fe2:	d016      	beq.n	8036012 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8035fe4:	893b      	ldrh	r3, [r7, #8]
 8035fe6:	2b00      	cmp	r3, #0
 8035fe8:	d00e      	beq.n	8036008 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8035fea:	683b      	ldr	r3, [r7, #0]
 8035fec:	88da      	ldrh	r2, [r3, #6]
 8035fee:	893b      	ldrh	r3, [r7, #8]
 8035ff0:	4293      	cmp	r3, r2
 8035ff2:	bf28      	it	cs
 8035ff4:	4613      	movcs	r3, r2
 8035ff6:	b29b      	uxth	r3, r3
 8035ff8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8035ffa:	893b      	ldrh	r3, [r7, #8]
 8035ffc:	461a      	mov	r2, r3
 8035ffe:	68f9      	ldr	r1, [r7, #12]
 8036000:	6878      	ldr	r0, [r7, #4]
 8036002:	f000 fa3f 	bl	8036484 <USBD_CtlSendData>
 8036006:	e009      	b.n	803601c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8036008:	6839      	ldr	r1, [r7, #0]
 803600a:	6878      	ldr	r0, [r7, #4]
 803600c:	f000 f9c9 	bl	80363a2 <USBD_CtlError>
 8036010:	e004      	b.n	803601c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8036012:	6878      	ldr	r0, [r7, #4]
 8036014:	f000 fa90 	bl	8036538 <USBD_CtlSendStatus>
 8036018:	e000      	b.n	803601c <USBD_GetDescriptor+0x2cc>
    return;
 803601a:	bf00      	nop
    }
  }
}
 803601c:	3710      	adds	r7, #16
 803601e:	46bd      	mov	sp, r7
 8036020:	bd80      	pop	{r7, pc}
 8036022:	bf00      	nop

08036024 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8036024:	b580      	push	{r7, lr}
 8036026:	b084      	sub	sp, #16
 8036028:	af00      	add	r7, sp, #0
 803602a:	6078      	str	r0, [r7, #4]
 803602c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803602e:	683b      	ldr	r3, [r7, #0]
 8036030:	889b      	ldrh	r3, [r3, #4]
 8036032:	2b00      	cmp	r3, #0
 8036034:	d130      	bne.n	8036098 <USBD_SetAddress+0x74>
 8036036:	683b      	ldr	r3, [r7, #0]
 8036038:	88db      	ldrh	r3, [r3, #6]
 803603a:	2b00      	cmp	r3, #0
 803603c:	d12c      	bne.n	8036098 <USBD_SetAddress+0x74>
 803603e:	683b      	ldr	r3, [r7, #0]
 8036040:	885b      	ldrh	r3, [r3, #2]
 8036042:	2b7f      	cmp	r3, #127	; 0x7f
 8036044:	d828      	bhi.n	8036098 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8036046:	683b      	ldr	r3, [r7, #0]
 8036048:	885b      	ldrh	r3, [r3, #2]
 803604a:	b2db      	uxtb	r3, r3
 803604c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8036050:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8036052:	687b      	ldr	r3, [r7, #4]
 8036054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8036058:	2b03      	cmp	r3, #3
 803605a:	d104      	bne.n	8036066 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 803605c:	6839      	ldr	r1, [r7, #0]
 803605e:	6878      	ldr	r0, [r7, #4]
 8036060:	f000 f99f 	bl	80363a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8036064:	e01d      	b.n	80360a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8036066:	687b      	ldr	r3, [r7, #4]
 8036068:	7bfa      	ldrb	r2, [r7, #15]
 803606a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803606e:	7bfb      	ldrb	r3, [r7, #15]
 8036070:	4619      	mov	r1, r3
 8036072:	6878      	ldr	r0, [r7, #4]
 8036074:	f000 ff00 	bl	8036e78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8036078:	6878      	ldr	r0, [r7, #4]
 803607a:	f000 fa5d 	bl	8036538 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803607e:	7bfb      	ldrb	r3, [r7, #15]
 8036080:	2b00      	cmp	r3, #0
 8036082:	d004      	beq.n	803608e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8036084:	687b      	ldr	r3, [r7, #4]
 8036086:	2202      	movs	r2, #2
 8036088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803608c:	e009      	b.n	80360a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803608e:	687b      	ldr	r3, [r7, #4]
 8036090:	2201      	movs	r2, #1
 8036092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8036096:	e004      	b.n	80360a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8036098:	6839      	ldr	r1, [r7, #0]
 803609a:	6878      	ldr	r0, [r7, #4]
 803609c:	f000 f981 	bl	80363a2 <USBD_CtlError>
  }
}
 80360a0:	bf00      	nop
 80360a2:	bf00      	nop
 80360a4:	3710      	adds	r7, #16
 80360a6:	46bd      	mov	sp, r7
 80360a8:	bd80      	pop	{r7, pc}
	...

080360ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80360ac:	b580      	push	{r7, lr}
 80360ae:	b084      	sub	sp, #16
 80360b0:	af00      	add	r7, sp, #0
 80360b2:	6078      	str	r0, [r7, #4]
 80360b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80360b6:	2300      	movs	r3, #0
 80360b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80360ba:	683b      	ldr	r3, [r7, #0]
 80360bc:	885b      	ldrh	r3, [r3, #2]
 80360be:	b2da      	uxtb	r2, r3
 80360c0:	4b4b      	ldr	r3, [pc, #300]	; (80361f0 <USBD_SetConfig+0x144>)
 80360c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80360c4:	4b4a      	ldr	r3, [pc, #296]	; (80361f0 <USBD_SetConfig+0x144>)
 80360c6:	781b      	ldrb	r3, [r3, #0]
 80360c8:	2b01      	cmp	r3, #1
 80360ca:	d905      	bls.n	80360d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80360cc:	6839      	ldr	r1, [r7, #0]
 80360ce:	6878      	ldr	r0, [r7, #4]
 80360d0:	f000 f967 	bl	80363a2 <USBD_CtlError>
    return USBD_FAIL;
 80360d4:	2303      	movs	r3, #3
 80360d6:	e087      	b.n	80361e8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80360d8:	687b      	ldr	r3, [r7, #4]
 80360da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80360de:	2b02      	cmp	r3, #2
 80360e0:	d002      	beq.n	80360e8 <USBD_SetConfig+0x3c>
 80360e2:	2b03      	cmp	r3, #3
 80360e4:	d025      	beq.n	8036132 <USBD_SetConfig+0x86>
 80360e6:	e071      	b.n	80361cc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80360e8:	4b41      	ldr	r3, [pc, #260]	; (80361f0 <USBD_SetConfig+0x144>)
 80360ea:	781b      	ldrb	r3, [r3, #0]
 80360ec:	2b00      	cmp	r3, #0
 80360ee:	d01c      	beq.n	803612a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80360f0:	4b3f      	ldr	r3, [pc, #252]	; (80361f0 <USBD_SetConfig+0x144>)
 80360f2:	781b      	ldrb	r3, [r3, #0]
 80360f4:	461a      	mov	r2, r3
 80360f6:	687b      	ldr	r3, [r7, #4]
 80360f8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80360fa:	4b3d      	ldr	r3, [pc, #244]	; (80361f0 <USBD_SetConfig+0x144>)
 80360fc:	781b      	ldrb	r3, [r3, #0]
 80360fe:	4619      	mov	r1, r3
 8036100:	6878      	ldr	r0, [r7, #4]
 8036102:	f7ff f999 	bl	8035438 <USBD_SetClassConfig>
 8036106:	4603      	mov	r3, r0
 8036108:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 803610a:	7bfb      	ldrb	r3, [r7, #15]
 803610c:	2b00      	cmp	r3, #0
 803610e:	d004      	beq.n	803611a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8036110:	6839      	ldr	r1, [r7, #0]
 8036112:	6878      	ldr	r0, [r7, #4]
 8036114:	f000 f945 	bl	80363a2 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8036118:	e065      	b.n	80361e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 803611a:	6878      	ldr	r0, [r7, #4]
 803611c:	f000 fa0c 	bl	8036538 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8036120:	687b      	ldr	r3, [r7, #4]
 8036122:	2203      	movs	r2, #3
 8036124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8036128:	e05d      	b.n	80361e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 803612a:	6878      	ldr	r0, [r7, #4]
 803612c:	f000 fa04 	bl	8036538 <USBD_CtlSendStatus>
    break;
 8036130:	e059      	b.n	80361e6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8036132:	4b2f      	ldr	r3, [pc, #188]	; (80361f0 <USBD_SetConfig+0x144>)
 8036134:	781b      	ldrb	r3, [r3, #0]
 8036136:	2b00      	cmp	r3, #0
 8036138:	d112      	bne.n	8036160 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 803613a:	687b      	ldr	r3, [r7, #4]
 803613c:	2202      	movs	r2, #2
 803613e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8036142:	4b2b      	ldr	r3, [pc, #172]	; (80361f0 <USBD_SetConfig+0x144>)
 8036144:	781b      	ldrb	r3, [r3, #0]
 8036146:	461a      	mov	r2, r3
 8036148:	687b      	ldr	r3, [r7, #4]
 803614a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803614c:	4b28      	ldr	r3, [pc, #160]	; (80361f0 <USBD_SetConfig+0x144>)
 803614e:	781b      	ldrb	r3, [r3, #0]
 8036150:	4619      	mov	r1, r3
 8036152:	6878      	ldr	r0, [r7, #4]
 8036154:	f7ff f98c 	bl	8035470 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8036158:	6878      	ldr	r0, [r7, #4]
 803615a:	f000 f9ed 	bl	8036538 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 803615e:	e042      	b.n	80361e6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8036160:	4b23      	ldr	r3, [pc, #140]	; (80361f0 <USBD_SetConfig+0x144>)
 8036162:	781b      	ldrb	r3, [r3, #0]
 8036164:	461a      	mov	r2, r3
 8036166:	687b      	ldr	r3, [r7, #4]
 8036168:	685b      	ldr	r3, [r3, #4]
 803616a:	429a      	cmp	r2, r3
 803616c:	d02a      	beq.n	80361c4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803616e:	687b      	ldr	r3, [r7, #4]
 8036170:	685b      	ldr	r3, [r3, #4]
 8036172:	b2db      	uxtb	r3, r3
 8036174:	4619      	mov	r1, r3
 8036176:	6878      	ldr	r0, [r7, #4]
 8036178:	f7ff f97a 	bl	8035470 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 803617c:	4b1c      	ldr	r3, [pc, #112]	; (80361f0 <USBD_SetConfig+0x144>)
 803617e:	781b      	ldrb	r3, [r3, #0]
 8036180:	461a      	mov	r2, r3
 8036182:	687b      	ldr	r3, [r7, #4]
 8036184:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8036186:	4b1a      	ldr	r3, [pc, #104]	; (80361f0 <USBD_SetConfig+0x144>)
 8036188:	781b      	ldrb	r3, [r3, #0]
 803618a:	4619      	mov	r1, r3
 803618c:	6878      	ldr	r0, [r7, #4]
 803618e:	f7ff f953 	bl	8035438 <USBD_SetClassConfig>
 8036192:	4603      	mov	r3, r0
 8036194:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8036196:	7bfb      	ldrb	r3, [r7, #15]
 8036198:	2b00      	cmp	r3, #0
 803619a:	d00f      	beq.n	80361bc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 803619c:	6839      	ldr	r1, [r7, #0]
 803619e:	6878      	ldr	r0, [r7, #4]
 80361a0:	f000 f8ff 	bl	80363a2 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80361a4:	687b      	ldr	r3, [r7, #4]
 80361a6:	685b      	ldr	r3, [r3, #4]
 80361a8:	b2db      	uxtb	r3, r3
 80361aa:	4619      	mov	r1, r3
 80361ac:	6878      	ldr	r0, [r7, #4]
 80361ae:	f7ff f95f 	bl	8035470 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80361b2:	687b      	ldr	r3, [r7, #4]
 80361b4:	2202      	movs	r2, #2
 80361b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80361ba:	e014      	b.n	80361e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80361bc:	6878      	ldr	r0, [r7, #4]
 80361be:	f000 f9bb 	bl	8036538 <USBD_CtlSendStatus>
    break;
 80361c2:	e010      	b.n	80361e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80361c4:	6878      	ldr	r0, [r7, #4]
 80361c6:	f000 f9b7 	bl	8036538 <USBD_CtlSendStatus>
    break;
 80361ca:	e00c      	b.n	80361e6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80361cc:	6839      	ldr	r1, [r7, #0]
 80361ce:	6878      	ldr	r0, [r7, #4]
 80361d0:	f000 f8e7 	bl	80363a2 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80361d4:	4b06      	ldr	r3, [pc, #24]	; (80361f0 <USBD_SetConfig+0x144>)
 80361d6:	781b      	ldrb	r3, [r3, #0]
 80361d8:	4619      	mov	r1, r3
 80361da:	6878      	ldr	r0, [r7, #4]
 80361dc:	f7ff f948 	bl	8035470 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80361e0:	2303      	movs	r3, #3
 80361e2:	73fb      	strb	r3, [r7, #15]
    break;
 80361e4:	bf00      	nop
  }

  return ret;
 80361e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80361e8:	4618      	mov	r0, r3
 80361ea:	3710      	adds	r7, #16
 80361ec:	46bd      	mov	sp, r7
 80361ee:	bd80      	pop	{r7, pc}
 80361f0:	20002b64 	.word	0x20002b64

080361f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80361f4:	b580      	push	{r7, lr}
 80361f6:	b082      	sub	sp, #8
 80361f8:	af00      	add	r7, sp, #0
 80361fa:	6078      	str	r0, [r7, #4]
 80361fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80361fe:	683b      	ldr	r3, [r7, #0]
 8036200:	88db      	ldrh	r3, [r3, #6]
 8036202:	2b01      	cmp	r3, #1
 8036204:	d004      	beq.n	8036210 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8036206:	6839      	ldr	r1, [r7, #0]
 8036208:	6878      	ldr	r0, [r7, #4]
 803620a:	f000 f8ca 	bl	80363a2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 803620e:	e022      	b.n	8036256 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8036210:	687b      	ldr	r3, [r7, #4]
 8036212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8036216:	2b02      	cmp	r3, #2
 8036218:	dc02      	bgt.n	8036220 <USBD_GetConfig+0x2c>
 803621a:	2b00      	cmp	r3, #0
 803621c:	dc03      	bgt.n	8036226 <USBD_GetConfig+0x32>
 803621e:	e015      	b.n	803624c <USBD_GetConfig+0x58>
 8036220:	2b03      	cmp	r3, #3
 8036222:	d00b      	beq.n	803623c <USBD_GetConfig+0x48>
 8036224:	e012      	b.n	803624c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8036226:	687b      	ldr	r3, [r7, #4]
 8036228:	2200      	movs	r2, #0
 803622a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803622c:	687b      	ldr	r3, [r7, #4]
 803622e:	3308      	adds	r3, #8
 8036230:	2201      	movs	r2, #1
 8036232:	4619      	mov	r1, r3
 8036234:	6878      	ldr	r0, [r7, #4]
 8036236:	f000 f925 	bl	8036484 <USBD_CtlSendData>
      break;
 803623a:	e00c      	b.n	8036256 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803623c:	687b      	ldr	r3, [r7, #4]
 803623e:	3304      	adds	r3, #4
 8036240:	2201      	movs	r2, #1
 8036242:	4619      	mov	r1, r3
 8036244:	6878      	ldr	r0, [r7, #4]
 8036246:	f000 f91d 	bl	8036484 <USBD_CtlSendData>
      break;
 803624a:	e004      	b.n	8036256 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 803624c:	6839      	ldr	r1, [r7, #0]
 803624e:	6878      	ldr	r0, [r7, #4]
 8036250:	f000 f8a7 	bl	80363a2 <USBD_CtlError>
      break;
 8036254:	bf00      	nop
}
 8036256:	bf00      	nop
 8036258:	3708      	adds	r7, #8
 803625a:	46bd      	mov	sp, r7
 803625c:	bd80      	pop	{r7, pc}

0803625e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803625e:	b580      	push	{r7, lr}
 8036260:	b082      	sub	sp, #8
 8036262:	af00      	add	r7, sp, #0
 8036264:	6078      	str	r0, [r7, #4]
 8036266:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8036268:	687b      	ldr	r3, [r7, #4]
 803626a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803626e:	3b01      	subs	r3, #1
 8036270:	2b02      	cmp	r3, #2
 8036272:	d81e      	bhi.n	80362b2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8036274:	683b      	ldr	r3, [r7, #0]
 8036276:	88db      	ldrh	r3, [r3, #6]
 8036278:	2b02      	cmp	r3, #2
 803627a:	d004      	beq.n	8036286 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 803627c:	6839      	ldr	r1, [r7, #0]
 803627e:	6878      	ldr	r0, [r7, #4]
 8036280:	f000 f88f 	bl	80363a2 <USBD_CtlError>
      break;
 8036284:	e01a      	b.n	80362bc <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8036286:	687b      	ldr	r3, [r7, #4]
 8036288:	2201      	movs	r2, #1
 803628a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 803628c:	687b      	ldr	r3, [r7, #4]
 803628e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8036292:	2b00      	cmp	r3, #0
 8036294:	d005      	beq.n	80362a2 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8036296:	687b      	ldr	r3, [r7, #4]
 8036298:	68db      	ldr	r3, [r3, #12]
 803629a:	f043 0202 	orr.w	r2, r3, #2
 803629e:	687b      	ldr	r3, [r7, #4]
 80362a0:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80362a2:	687b      	ldr	r3, [r7, #4]
 80362a4:	330c      	adds	r3, #12
 80362a6:	2202      	movs	r2, #2
 80362a8:	4619      	mov	r1, r3
 80362aa:	6878      	ldr	r0, [r7, #4]
 80362ac:	f000 f8ea 	bl	8036484 <USBD_CtlSendData>
    break;
 80362b0:	e004      	b.n	80362bc <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80362b2:	6839      	ldr	r1, [r7, #0]
 80362b4:	6878      	ldr	r0, [r7, #4]
 80362b6:	f000 f874 	bl	80363a2 <USBD_CtlError>
    break;
 80362ba:	bf00      	nop
  }
}
 80362bc:	bf00      	nop
 80362be:	3708      	adds	r7, #8
 80362c0:	46bd      	mov	sp, r7
 80362c2:	bd80      	pop	{r7, pc}

080362c4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80362c4:	b580      	push	{r7, lr}
 80362c6:	b082      	sub	sp, #8
 80362c8:	af00      	add	r7, sp, #0
 80362ca:	6078      	str	r0, [r7, #4]
 80362cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80362ce:	683b      	ldr	r3, [r7, #0]
 80362d0:	885b      	ldrh	r3, [r3, #2]
 80362d2:	2b01      	cmp	r3, #1
 80362d4:	d106      	bne.n	80362e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80362d6:	687b      	ldr	r3, [r7, #4]
 80362d8:	2201      	movs	r2, #1
 80362da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80362de:	6878      	ldr	r0, [r7, #4]
 80362e0:	f000 f92a 	bl	8036538 <USBD_CtlSendStatus>
  }
}
 80362e4:	bf00      	nop
 80362e6:	3708      	adds	r7, #8
 80362e8:	46bd      	mov	sp, r7
 80362ea:	bd80      	pop	{r7, pc}

080362ec <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80362ec:	b580      	push	{r7, lr}
 80362ee:	b082      	sub	sp, #8
 80362f0:	af00      	add	r7, sp, #0
 80362f2:	6078      	str	r0, [r7, #4]
 80362f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80362f6:	687b      	ldr	r3, [r7, #4]
 80362f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80362fc:	3b01      	subs	r3, #1
 80362fe:	2b02      	cmp	r3, #2
 8036300:	d80b      	bhi.n	803631a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8036302:	683b      	ldr	r3, [r7, #0]
 8036304:	885b      	ldrh	r3, [r3, #2]
 8036306:	2b01      	cmp	r3, #1
 8036308:	d10c      	bne.n	8036324 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 803630a:	687b      	ldr	r3, [r7, #4]
 803630c:	2200      	movs	r2, #0
 803630e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8036312:	6878      	ldr	r0, [r7, #4]
 8036314:	f000 f910 	bl	8036538 <USBD_CtlSendStatus>
      }
      break;
 8036318:	e004      	b.n	8036324 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 803631a:	6839      	ldr	r1, [r7, #0]
 803631c:	6878      	ldr	r0, [r7, #4]
 803631e:	f000 f840 	bl	80363a2 <USBD_CtlError>
      break;
 8036322:	e000      	b.n	8036326 <USBD_ClrFeature+0x3a>
      break;
 8036324:	bf00      	nop
  }
}
 8036326:	bf00      	nop
 8036328:	3708      	adds	r7, #8
 803632a:	46bd      	mov	sp, r7
 803632c:	bd80      	pop	{r7, pc}

0803632e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803632e:	b580      	push	{r7, lr}
 8036330:	b084      	sub	sp, #16
 8036332:	af00      	add	r7, sp, #0
 8036334:	6078      	str	r0, [r7, #4]
 8036336:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8036338:	683b      	ldr	r3, [r7, #0]
 803633a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 803633c:	68fb      	ldr	r3, [r7, #12]
 803633e:	781a      	ldrb	r2, [r3, #0]
 8036340:	687b      	ldr	r3, [r7, #4]
 8036342:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8036344:	68fb      	ldr	r3, [r7, #12]
 8036346:	3301      	adds	r3, #1
 8036348:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 803634a:	68fb      	ldr	r3, [r7, #12]
 803634c:	781a      	ldrb	r2, [r3, #0]
 803634e:	687b      	ldr	r3, [r7, #4]
 8036350:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8036352:	68fb      	ldr	r3, [r7, #12]
 8036354:	3301      	adds	r3, #1
 8036356:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8036358:	68f8      	ldr	r0, [r7, #12]
 803635a:	f7ff fac6 	bl	80358ea <SWAPBYTE>
 803635e:	4603      	mov	r3, r0
 8036360:	461a      	mov	r2, r3
 8036362:	687b      	ldr	r3, [r7, #4]
 8036364:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8036366:	68fb      	ldr	r3, [r7, #12]
 8036368:	3301      	adds	r3, #1
 803636a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803636c:	68fb      	ldr	r3, [r7, #12]
 803636e:	3301      	adds	r3, #1
 8036370:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8036372:	68f8      	ldr	r0, [r7, #12]
 8036374:	f7ff fab9 	bl	80358ea <SWAPBYTE>
 8036378:	4603      	mov	r3, r0
 803637a:	461a      	mov	r2, r3
 803637c:	687b      	ldr	r3, [r7, #4]
 803637e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8036380:	68fb      	ldr	r3, [r7, #12]
 8036382:	3301      	adds	r3, #1
 8036384:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8036386:	68fb      	ldr	r3, [r7, #12]
 8036388:	3301      	adds	r3, #1
 803638a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 803638c:	68f8      	ldr	r0, [r7, #12]
 803638e:	f7ff faac 	bl	80358ea <SWAPBYTE>
 8036392:	4603      	mov	r3, r0
 8036394:	461a      	mov	r2, r3
 8036396:	687b      	ldr	r3, [r7, #4]
 8036398:	80da      	strh	r2, [r3, #6]
}
 803639a:	bf00      	nop
 803639c:	3710      	adds	r7, #16
 803639e:	46bd      	mov	sp, r7
 80363a0:	bd80      	pop	{r7, pc}

080363a2 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80363a2:	b580      	push	{r7, lr}
 80363a4:	b082      	sub	sp, #8
 80363a6:	af00      	add	r7, sp, #0
 80363a8:	6078      	str	r0, [r7, #4]
 80363aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80363ac:	2180      	movs	r1, #128	; 0x80
 80363ae:	6878      	ldr	r0, [r7, #4]
 80363b0:	f000 fcf8 	bl	8036da4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80363b4:	2100      	movs	r1, #0
 80363b6:	6878      	ldr	r0, [r7, #4]
 80363b8:	f000 fcf4 	bl	8036da4 <USBD_LL_StallEP>
}
 80363bc:	bf00      	nop
 80363be:	3708      	adds	r7, #8
 80363c0:	46bd      	mov	sp, r7
 80363c2:	bd80      	pop	{r7, pc}

080363c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80363c4:	b580      	push	{r7, lr}
 80363c6:	b086      	sub	sp, #24
 80363c8:	af00      	add	r7, sp, #0
 80363ca:	60f8      	str	r0, [r7, #12]
 80363cc:	60b9      	str	r1, [r7, #8]
 80363ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80363d0:	2300      	movs	r3, #0
 80363d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80363d4:	68fb      	ldr	r3, [r7, #12]
 80363d6:	2b00      	cmp	r3, #0
 80363d8:	d036      	beq.n	8036448 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80363da:	68fb      	ldr	r3, [r7, #12]
 80363dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80363de:	6938      	ldr	r0, [r7, #16]
 80363e0:	f000 f836 	bl	8036450 <USBD_GetLen>
 80363e4:	4603      	mov	r3, r0
 80363e6:	3301      	adds	r3, #1
 80363e8:	b29b      	uxth	r3, r3
 80363ea:	005b      	lsls	r3, r3, #1
 80363ec:	b29a      	uxth	r2, r3
 80363ee:	687b      	ldr	r3, [r7, #4]
 80363f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80363f2:	7dfb      	ldrb	r3, [r7, #23]
 80363f4:	68ba      	ldr	r2, [r7, #8]
 80363f6:	4413      	add	r3, r2
 80363f8:	687a      	ldr	r2, [r7, #4]
 80363fa:	7812      	ldrb	r2, [r2, #0]
 80363fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80363fe:	7dfb      	ldrb	r3, [r7, #23]
 8036400:	3301      	adds	r3, #1
 8036402:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8036404:	7dfb      	ldrb	r3, [r7, #23]
 8036406:	68ba      	ldr	r2, [r7, #8]
 8036408:	4413      	add	r3, r2
 803640a:	2203      	movs	r2, #3
 803640c:	701a      	strb	r2, [r3, #0]
  idx++;
 803640e:	7dfb      	ldrb	r3, [r7, #23]
 8036410:	3301      	adds	r3, #1
 8036412:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8036414:	e013      	b.n	803643e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8036416:	7dfb      	ldrb	r3, [r7, #23]
 8036418:	68ba      	ldr	r2, [r7, #8]
 803641a:	4413      	add	r3, r2
 803641c:	693a      	ldr	r2, [r7, #16]
 803641e:	7812      	ldrb	r2, [r2, #0]
 8036420:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8036422:	693b      	ldr	r3, [r7, #16]
 8036424:	3301      	adds	r3, #1
 8036426:	613b      	str	r3, [r7, #16]
    idx++;
 8036428:	7dfb      	ldrb	r3, [r7, #23]
 803642a:	3301      	adds	r3, #1
 803642c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803642e:	7dfb      	ldrb	r3, [r7, #23]
 8036430:	68ba      	ldr	r2, [r7, #8]
 8036432:	4413      	add	r3, r2
 8036434:	2200      	movs	r2, #0
 8036436:	701a      	strb	r2, [r3, #0]
    idx++;
 8036438:	7dfb      	ldrb	r3, [r7, #23]
 803643a:	3301      	adds	r3, #1
 803643c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803643e:	693b      	ldr	r3, [r7, #16]
 8036440:	781b      	ldrb	r3, [r3, #0]
 8036442:	2b00      	cmp	r3, #0
 8036444:	d1e7      	bne.n	8036416 <USBD_GetString+0x52>
 8036446:	e000      	b.n	803644a <USBD_GetString+0x86>
    return;
 8036448:	bf00      	nop
  }
}
 803644a:	3718      	adds	r7, #24
 803644c:	46bd      	mov	sp, r7
 803644e:	bd80      	pop	{r7, pc}

08036450 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8036450:	b480      	push	{r7}
 8036452:	b085      	sub	sp, #20
 8036454:	af00      	add	r7, sp, #0
 8036456:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8036458:	2300      	movs	r3, #0
 803645a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 803645c:	687b      	ldr	r3, [r7, #4]
 803645e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8036460:	e005      	b.n	803646e <USBD_GetLen+0x1e>
  {
    len++;
 8036462:	7bfb      	ldrb	r3, [r7, #15]
 8036464:	3301      	adds	r3, #1
 8036466:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8036468:	68bb      	ldr	r3, [r7, #8]
 803646a:	3301      	adds	r3, #1
 803646c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803646e:	68bb      	ldr	r3, [r7, #8]
 8036470:	781b      	ldrb	r3, [r3, #0]
 8036472:	2b00      	cmp	r3, #0
 8036474:	d1f5      	bne.n	8036462 <USBD_GetLen+0x12>
  }

  return len;
 8036476:	7bfb      	ldrb	r3, [r7, #15]
}
 8036478:	4618      	mov	r0, r3
 803647a:	3714      	adds	r7, #20
 803647c:	46bd      	mov	sp, r7
 803647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036482:	4770      	bx	lr

08036484 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8036484:	b580      	push	{r7, lr}
 8036486:	b084      	sub	sp, #16
 8036488:	af00      	add	r7, sp, #0
 803648a:	60f8      	str	r0, [r7, #12]
 803648c:	60b9      	str	r1, [r7, #8]
 803648e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8036490:	68fb      	ldr	r3, [r7, #12]
 8036492:	2202      	movs	r2, #2
 8036494:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8036498:	68fb      	ldr	r3, [r7, #12]
 803649a:	687a      	ldr	r2, [r7, #4]
 803649c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 803649e:	68fb      	ldr	r3, [r7, #12]
 80364a0:	687a      	ldr	r2, [r7, #4]
 80364a2:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80364a4:	687b      	ldr	r3, [r7, #4]
 80364a6:	68ba      	ldr	r2, [r7, #8]
 80364a8:	2100      	movs	r1, #0
 80364aa:	68f8      	ldr	r0, [r7, #12]
 80364ac:	f000 fd03 	bl	8036eb6 <USBD_LL_Transmit>

  return USBD_OK;
 80364b0:	2300      	movs	r3, #0
}
 80364b2:	4618      	mov	r0, r3
 80364b4:	3710      	adds	r7, #16
 80364b6:	46bd      	mov	sp, r7
 80364b8:	bd80      	pop	{r7, pc}

080364ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80364ba:	b580      	push	{r7, lr}
 80364bc:	b084      	sub	sp, #16
 80364be:	af00      	add	r7, sp, #0
 80364c0:	60f8      	str	r0, [r7, #12]
 80364c2:	60b9      	str	r1, [r7, #8]
 80364c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80364c6:	687b      	ldr	r3, [r7, #4]
 80364c8:	68ba      	ldr	r2, [r7, #8]
 80364ca:	2100      	movs	r1, #0
 80364cc:	68f8      	ldr	r0, [r7, #12]
 80364ce:	f000 fcf2 	bl	8036eb6 <USBD_LL_Transmit>

  return USBD_OK;
 80364d2:	2300      	movs	r3, #0
}
 80364d4:	4618      	mov	r0, r3
 80364d6:	3710      	adds	r7, #16
 80364d8:	46bd      	mov	sp, r7
 80364da:	bd80      	pop	{r7, pc}

080364dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80364dc:	b580      	push	{r7, lr}
 80364de:	b084      	sub	sp, #16
 80364e0:	af00      	add	r7, sp, #0
 80364e2:	60f8      	str	r0, [r7, #12]
 80364e4:	60b9      	str	r1, [r7, #8]
 80364e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80364e8:	68fb      	ldr	r3, [r7, #12]
 80364ea:	2203      	movs	r2, #3
 80364ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80364f0:	68fb      	ldr	r3, [r7, #12]
 80364f2:	687a      	ldr	r2, [r7, #4]
 80364f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80364f8:	68fb      	ldr	r3, [r7, #12]
 80364fa:	687a      	ldr	r2, [r7, #4]
 80364fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8036500:	687b      	ldr	r3, [r7, #4]
 8036502:	68ba      	ldr	r2, [r7, #8]
 8036504:	2100      	movs	r1, #0
 8036506:	68f8      	ldr	r0, [r7, #12]
 8036508:	f000 fcf6 	bl	8036ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803650c:	2300      	movs	r3, #0
}
 803650e:	4618      	mov	r0, r3
 8036510:	3710      	adds	r7, #16
 8036512:	46bd      	mov	sp, r7
 8036514:	bd80      	pop	{r7, pc}

08036516 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8036516:	b580      	push	{r7, lr}
 8036518:	b084      	sub	sp, #16
 803651a:	af00      	add	r7, sp, #0
 803651c:	60f8      	str	r0, [r7, #12]
 803651e:	60b9      	str	r1, [r7, #8]
 8036520:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8036522:	687b      	ldr	r3, [r7, #4]
 8036524:	68ba      	ldr	r2, [r7, #8]
 8036526:	2100      	movs	r1, #0
 8036528:	68f8      	ldr	r0, [r7, #12]
 803652a:	f000 fce5 	bl	8036ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803652e:	2300      	movs	r3, #0
}
 8036530:	4618      	mov	r0, r3
 8036532:	3710      	adds	r7, #16
 8036534:	46bd      	mov	sp, r7
 8036536:	bd80      	pop	{r7, pc}

08036538 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8036538:	b580      	push	{r7, lr}
 803653a:	b082      	sub	sp, #8
 803653c:	af00      	add	r7, sp, #0
 803653e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8036540:	687b      	ldr	r3, [r7, #4]
 8036542:	2204      	movs	r2, #4
 8036544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8036548:	2300      	movs	r3, #0
 803654a:	2200      	movs	r2, #0
 803654c:	2100      	movs	r1, #0
 803654e:	6878      	ldr	r0, [r7, #4]
 8036550:	f000 fcb1 	bl	8036eb6 <USBD_LL_Transmit>

  return USBD_OK;
 8036554:	2300      	movs	r3, #0
}
 8036556:	4618      	mov	r0, r3
 8036558:	3708      	adds	r7, #8
 803655a:	46bd      	mov	sp, r7
 803655c:	bd80      	pop	{r7, pc}

0803655e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803655e:	b580      	push	{r7, lr}
 8036560:	b082      	sub	sp, #8
 8036562:	af00      	add	r7, sp, #0
 8036564:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8036566:	687b      	ldr	r3, [r7, #4]
 8036568:	2205      	movs	r2, #5
 803656a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803656e:	2300      	movs	r3, #0
 8036570:	2200      	movs	r2, #0
 8036572:	2100      	movs	r1, #0
 8036574:	6878      	ldr	r0, [r7, #4]
 8036576:	f000 fcbf 	bl	8036ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803657a:	2300      	movs	r3, #0
}
 803657c:	4618      	mov	r0, r3
 803657e:	3708      	adds	r7, #8
 8036580:	46bd      	mov	sp, r7
 8036582:	bd80      	pop	{r7, pc}

08036584 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8036584:	b580      	push	{r7, lr}
 8036586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8036588:	2200      	movs	r2, #0
 803658a:	4912      	ldr	r1, [pc, #72]	; (80365d4 <MX_USB_DEVICE_Init+0x50>)
 803658c:	4812      	ldr	r0, [pc, #72]	; (80365d8 <MX_USB_DEVICE_Init+0x54>)
 803658e:	f7fe fee5 	bl	803535c <USBD_Init>
 8036592:	4603      	mov	r3, r0
 8036594:	2b00      	cmp	r3, #0
 8036596:	d001      	beq.n	803659c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8036598:	f7ea fcd2 	bl	8020f40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 803659c:	490f      	ldr	r1, [pc, #60]	; (80365dc <MX_USB_DEVICE_Init+0x58>)
 803659e:	480e      	ldr	r0, [pc, #56]	; (80365d8 <MX_USB_DEVICE_Init+0x54>)
 80365a0:	f7fe ff12 	bl	80353c8 <USBD_RegisterClass>
 80365a4:	4603      	mov	r3, r0
 80365a6:	2b00      	cmp	r3, #0
 80365a8:	d001      	beq.n	80365ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80365aa:	f7ea fcc9 	bl	8020f40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80365ae:	490c      	ldr	r1, [pc, #48]	; (80365e0 <MX_USB_DEVICE_Init+0x5c>)
 80365b0:	4809      	ldr	r0, [pc, #36]	; (80365d8 <MX_USB_DEVICE_Init+0x54>)
 80365b2:	f7fe fe37 	bl	8035224 <USBD_CDC_RegisterInterface>
 80365b6:	4603      	mov	r3, r0
 80365b8:	2b00      	cmp	r3, #0
 80365ba:	d001      	beq.n	80365c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80365bc:	f7ea fcc0 	bl	8020f40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80365c0:	4805      	ldr	r0, [pc, #20]	; (80365d8 <MX_USB_DEVICE_Init+0x54>)
 80365c2:	f7fe ff22 	bl	803540a <USBD_Start>
 80365c6:	4603      	mov	r3, r0
 80365c8:	2b00      	cmp	r3, #0
 80365ca:	d001      	beq.n	80365d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80365cc:	f7ea fcb8 	bl	8020f40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80365d0:	bf00      	nop
 80365d2:	bd80      	pop	{r7, pc}
 80365d4:	20000d1c 	.word	0x20000d1c
 80365d8:	20002b68 	.word	0x20002b68
 80365dc:	20000c04 	.word	0x20000c04
 80365e0:	20000d08 	.word	0x20000d08

080365e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80365e4:	b580      	push	{r7, lr}
 80365e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80365e8:	2200      	movs	r2, #0
 80365ea:	4905      	ldr	r1, [pc, #20]	; (8036600 <CDC_Init_FS+0x1c>)
 80365ec:	4805      	ldr	r0, [pc, #20]	; (8036604 <CDC_Init_FS+0x20>)
 80365ee:	f7fe fe2e 	bl	803524e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80365f2:	4905      	ldr	r1, [pc, #20]	; (8036608 <CDC_Init_FS+0x24>)
 80365f4:	4803      	ldr	r0, [pc, #12]	; (8036604 <CDC_Init_FS+0x20>)
 80365f6:	f7fe fe43 	bl	8035280 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80365fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80365fc:	4618      	mov	r0, r3
 80365fe:	bd80      	pop	{r7, pc}
 8036600:	20003638 	.word	0x20003638
 8036604:	20002b68 	.word	0x20002b68
 8036608:	20002e38 	.word	0x20002e38

0803660c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 803660c:	b480      	push	{r7}
 803660e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8036610:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8036612:	4618      	mov	r0, r3
 8036614:	46bd      	mov	sp, r7
 8036616:	f85d 7b04 	ldr.w	r7, [sp], #4
 803661a:	4770      	bx	lr

0803661c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 803661c:	b480      	push	{r7}
 803661e:	b083      	sub	sp, #12
 8036620:	af00      	add	r7, sp, #0
 8036622:	4603      	mov	r3, r0
 8036624:	6039      	str	r1, [r7, #0]
 8036626:	71fb      	strb	r3, [r7, #7]
 8036628:	4613      	mov	r3, r2
 803662a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 803662c:	79fb      	ldrb	r3, [r7, #7]
 803662e:	2b23      	cmp	r3, #35	; 0x23
 8036630:	d84a      	bhi.n	80366c8 <CDC_Control_FS+0xac>
 8036632:	a201      	add	r2, pc, #4	; (adr r2, 8036638 <CDC_Control_FS+0x1c>)
 8036634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036638:	080366c9 	.word	0x080366c9
 803663c:	080366c9 	.word	0x080366c9
 8036640:	080366c9 	.word	0x080366c9
 8036644:	080366c9 	.word	0x080366c9
 8036648:	080366c9 	.word	0x080366c9
 803664c:	080366c9 	.word	0x080366c9
 8036650:	080366c9 	.word	0x080366c9
 8036654:	080366c9 	.word	0x080366c9
 8036658:	080366c9 	.word	0x080366c9
 803665c:	080366c9 	.word	0x080366c9
 8036660:	080366c9 	.word	0x080366c9
 8036664:	080366c9 	.word	0x080366c9
 8036668:	080366c9 	.word	0x080366c9
 803666c:	080366c9 	.word	0x080366c9
 8036670:	080366c9 	.word	0x080366c9
 8036674:	080366c9 	.word	0x080366c9
 8036678:	080366c9 	.word	0x080366c9
 803667c:	080366c9 	.word	0x080366c9
 8036680:	080366c9 	.word	0x080366c9
 8036684:	080366c9 	.word	0x080366c9
 8036688:	080366c9 	.word	0x080366c9
 803668c:	080366c9 	.word	0x080366c9
 8036690:	080366c9 	.word	0x080366c9
 8036694:	080366c9 	.word	0x080366c9
 8036698:	080366c9 	.word	0x080366c9
 803669c:	080366c9 	.word	0x080366c9
 80366a0:	080366c9 	.word	0x080366c9
 80366a4:	080366c9 	.word	0x080366c9
 80366a8:	080366c9 	.word	0x080366c9
 80366ac:	080366c9 	.word	0x080366c9
 80366b0:	080366c9 	.word	0x080366c9
 80366b4:	080366c9 	.word	0x080366c9
 80366b8:	080366c9 	.word	0x080366c9
 80366bc:	080366c9 	.word	0x080366c9
 80366c0:	080366c9 	.word	0x080366c9
 80366c4:	080366c9 	.word	0x080366c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80366c8:	bf00      	nop
  }

  return (USBD_OK);
 80366ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80366cc:	4618      	mov	r0, r3
 80366ce:	370c      	adds	r7, #12
 80366d0:	46bd      	mov	sp, r7
 80366d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80366d6:	4770      	bx	lr

080366d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80366d8:	b580      	push	{r7, lr}
 80366da:	b084      	sub	sp, #16
 80366dc:	af00      	add	r7, sp, #0
 80366de:	6078      	str	r0, [r7, #4]
 80366e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

#if 1

	//	CLI Interface
	uint8_t *pStr = Buf;
 80366e2:	687b      	ldr	r3, [r7, #4]
 80366e4:	60fb      	str	r3, [r7, #12]
	int i = 0;
 80366e6:	2300      	movs	r3, #0
 80366e8:	60bb      	str	r3, [r7, #8]
	for ( i = 0; i < *Len; i++ )
 80366ea:	2300      	movs	r3, #0
 80366ec:	60bb      	str	r3, [r7, #8]
 80366ee:	e00a      	b.n	8036706 <CDC_Receive_FS+0x2e>
	{
		qput( &g_qDebug, *pStr++ );
 80366f0:	68fb      	ldr	r3, [r7, #12]
 80366f2:	1c5a      	adds	r2, r3, #1
 80366f4:	60fa      	str	r2, [r7, #12]
 80366f6:	781b      	ldrb	r3, [r3, #0]
 80366f8:	4619      	mov	r1, r3
 80366fa:	480b      	ldr	r0, [pc, #44]	; (8036728 <CDC_Receive_FS+0x50>)
 80366fc:	f7f7 fd3a 	bl	802e174 <qput>
	for ( i = 0; i < *Len; i++ )
 8036700:	68bb      	ldr	r3, [r7, #8]
 8036702:	3301      	adds	r3, #1
 8036704:	60bb      	str	r3, [r7, #8]
 8036706:	683b      	ldr	r3, [r7, #0]
 8036708:	681a      	ldr	r2, [r3, #0]
 803670a:	68bb      	ldr	r3, [r7, #8]
 803670c:	429a      	cmp	r2, r3
 803670e:	d8ef      	bhi.n	80366f0 <CDC_Receive_FS+0x18>
	//	Loopback
//	CDC_Transmit_FS(Buf, *Len);

#endif

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8036710:	6879      	ldr	r1, [r7, #4]
 8036712:	4806      	ldr	r0, [pc, #24]	; (803672c <CDC_Receive_FS+0x54>)
 8036714:	f7fe fdb4 	bl	8035280 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8036718:	4804      	ldr	r0, [pc, #16]	; (803672c <CDC_Receive_FS+0x54>)
 803671a:	f7fe fdf5 	bl	8035308 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803671e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8036720:	4618      	mov	r0, r3
 8036722:	3710      	adds	r7, #16
 8036724:	46bd      	mov	sp, r7
 8036726:	bd80      	pop	{r7, pc}
 8036728:	20002938 	.word	0x20002938
 803672c:	20002b68 	.word	0x20002b68

08036730 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8036730:	b580      	push	{r7, lr}
 8036732:	b084      	sub	sp, #16
 8036734:	af00      	add	r7, sp, #0
 8036736:	6078      	str	r0, [r7, #4]
 8036738:	460b      	mov	r3, r1
 803673a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 803673c:	2300      	movs	r3, #0
 803673e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8036740:	4b0d      	ldr	r3, [pc, #52]	; (8036778 <CDC_Transmit_FS+0x48>)
 8036742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8036746:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8036748:	68bb      	ldr	r3, [r7, #8]
 803674a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 803674e:	2b00      	cmp	r3, #0
 8036750:	d001      	beq.n	8036756 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8036752:	2301      	movs	r3, #1
 8036754:	e00b      	b.n	803676e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8036756:	887b      	ldrh	r3, [r7, #2]
 8036758:	461a      	mov	r2, r3
 803675a:	6879      	ldr	r1, [r7, #4]
 803675c:	4806      	ldr	r0, [pc, #24]	; (8036778 <CDC_Transmit_FS+0x48>)
 803675e:	f7fe fd76 	bl	803524e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8036762:	4805      	ldr	r0, [pc, #20]	; (8036778 <CDC_Transmit_FS+0x48>)
 8036764:	f7fe fda0 	bl	80352a8 <USBD_CDC_TransmitPacket>
 8036768:	4603      	mov	r3, r0
 803676a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 803676c:	7bfb      	ldrb	r3, [r7, #15]
}
 803676e:	4618      	mov	r0, r3
 8036770:	3710      	adds	r7, #16
 8036772:	46bd      	mov	sp, r7
 8036774:	bd80      	pop	{r7, pc}
 8036776:	bf00      	nop
 8036778:	20002b68 	.word	0x20002b68

0803677c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803677c:	b480      	push	{r7}
 803677e:	b087      	sub	sp, #28
 8036780:	af00      	add	r7, sp, #0
 8036782:	60f8      	str	r0, [r7, #12]
 8036784:	60b9      	str	r1, [r7, #8]
 8036786:	4613      	mov	r3, r2
 8036788:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803678a:	2300      	movs	r3, #0
 803678c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803678e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8036792:	4618      	mov	r0, r3
 8036794:	371c      	adds	r7, #28
 8036796:	46bd      	mov	sp, r7
 8036798:	f85d 7b04 	ldr.w	r7, [sp], #4
 803679c:	4770      	bx	lr
	...

080367a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80367a0:	b480      	push	{r7}
 80367a2:	b083      	sub	sp, #12
 80367a4:	af00      	add	r7, sp, #0
 80367a6:	4603      	mov	r3, r0
 80367a8:	6039      	str	r1, [r7, #0]
 80367aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80367ac:	683b      	ldr	r3, [r7, #0]
 80367ae:	2212      	movs	r2, #18
 80367b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80367b2:	4b03      	ldr	r3, [pc, #12]	; (80367c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80367b4:	4618      	mov	r0, r3
 80367b6:	370c      	adds	r7, #12
 80367b8:	46bd      	mov	sp, r7
 80367ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80367be:	4770      	bx	lr
 80367c0:	20000d38 	.word	0x20000d38

080367c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80367c4:	b480      	push	{r7}
 80367c6:	b083      	sub	sp, #12
 80367c8:	af00      	add	r7, sp, #0
 80367ca:	4603      	mov	r3, r0
 80367cc:	6039      	str	r1, [r7, #0]
 80367ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80367d0:	683b      	ldr	r3, [r7, #0]
 80367d2:	2204      	movs	r2, #4
 80367d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80367d6:	4b03      	ldr	r3, [pc, #12]	; (80367e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80367d8:	4618      	mov	r0, r3
 80367da:	370c      	adds	r7, #12
 80367dc:	46bd      	mov	sp, r7
 80367de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80367e2:	4770      	bx	lr
 80367e4:	20000d4c 	.word	0x20000d4c

080367e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80367e8:	b580      	push	{r7, lr}
 80367ea:	b082      	sub	sp, #8
 80367ec:	af00      	add	r7, sp, #0
 80367ee:	4603      	mov	r3, r0
 80367f0:	6039      	str	r1, [r7, #0]
 80367f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80367f4:	79fb      	ldrb	r3, [r7, #7]
 80367f6:	2b00      	cmp	r3, #0
 80367f8:	d105      	bne.n	8036806 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80367fa:	683a      	ldr	r2, [r7, #0]
 80367fc:	4907      	ldr	r1, [pc, #28]	; (803681c <USBD_FS_ProductStrDescriptor+0x34>)
 80367fe:	4808      	ldr	r0, [pc, #32]	; (8036820 <USBD_FS_ProductStrDescriptor+0x38>)
 8036800:	f7ff fde0 	bl	80363c4 <USBD_GetString>
 8036804:	e004      	b.n	8036810 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8036806:	683a      	ldr	r2, [r7, #0]
 8036808:	4904      	ldr	r1, [pc, #16]	; (803681c <USBD_FS_ProductStrDescriptor+0x34>)
 803680a:	4805      	ldr	r0, [pc, #20]	; (8036820 <USBD_FS_ProductStrDescriptor+0x38>)
 803680c:	f7ff fdda 	bl	80363c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8036810:	4b02      	ldr	r3, [pc, #8]	; (803681c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8036812:	4618      	mov	r0, r3
 8036814:	3708      	adds	r7, #8
 8036816:	46bd      	mov	sp, r7
 8036818:	bd80      	pop	{r7, pc}
 803681a:	bf00      	nop
 803681c:	20003e38 	.word	0x20003e38
 8036820:	0803b908 	.word	0x0803b908

08036824 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8036824:	b580      	push	{r7, lr}
 8036826:	b082      	sub	sp, #8
 8036828:	af00      	add	r7, sp, #0
 803682a:	4603      	mov	r3, r0
 803682c:	6039      	str	r1, [r7, #0]
 803682e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8036830:	683a      	ldr	r2, [r7, #0]
 8036832:	4904      	ldr	r1, [pc, #16]	; (8036844 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8036834:	4804      	ldr	r0, [pc, #16]	; (8036848 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8036836:	f7ff fdc5 	bl	80363c4 <USBD_GetString>
  return USBD_StrDesc;
 803683a:	4b02      	ldr	r3, [pc, #8]	; (8036844 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 803683c:	4618      	mov	r0, r3
 803683e:	3708      	adds	r7, #8
 8036840:	46bd      	mov	sp, r7
 8036842:	bd80      	pop	{r7, pc}
 8036844:	20003e38 	.word	0x20003e38
 8036848:	0803b920 	.word	0x0803b920

0803684c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803684c:	b580      	push	{r7, lr}
 803684e:	b082      	sub	sp, #8
 8036850:	af00      	add	r7, sp, #0
 8036852:	4603      	mov	r3, r0
 8036854:	6039      	str	r1, [r7, #0]
 8036856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8036858:	683b      	ldr	r3, [r7, #0]
 803685a:	221a      	movs	r2, #26
 803685c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803685e:	f000 f843 	bl	80368e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8036862:	4b02      	ldr	r3, [pc, #8]	; (803686c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8036864:	4618      	mov	r0, r3
 8036866:	3708      	adds	r7, #8
 8036868:	46bd      	mov	sp, r7
 803686a:	bd80      	pop	{r7, pc}
 803686c:	20000d50 	.word	0x20000d50

08036870 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8036870:	b580      	push	{r7, lr}
 8036872:	b082      	sub	sp, #8
 8036874:	af00      	add	r7, sp, #0
 8036876:	4603      	mov	r3, r0
 8036878:	6039      	str	r1, [r7, #0]
 803687a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 803687c:	79fb      	ldrb	r3, [r7, #7]
 803687e:	2b00      	cmp	r3, #0
 8036880:	d105      	bne.n	803688e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8036882:	683a      	ldr	r2, [r7, #0]
 8036884:	4907      	ldr	r1, [pc, #28]	; (80368a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8036886:	4808      	ldr	r0, [pc, #32]	; (80368a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8036888:	f7ff fd9c 	bl	80363c4 <USBD_GetString>
 803688c:	e004      	b.n	8036898 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803688e:	683a      	ldr	r2, [r7, #0]
 8036890:	4904      	ldr	r1, [pc, #16]	; (80368a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8036892:	4805      	ldr	r0, [pc, #20]	; (80368a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8036894:	f7ff fd96 	bl	80363c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8036898:	4b02      	ldr	r3, [pc, #8]	; (80368a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 803689a:	4618      	mov	r0, r3
 803689c:	3708      	adds	r7, #8
 803689e:	46bd      	mov	sp, r7
 80368a0:	bd80      	pop	{r7, pc}
 80368a2:	bf00      	nop
 80368a4:	20003e38 	.word	0x20003e38
 80368a8:	0803b934 	.word	0x0803b934

080368ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80368ac:	b580      	push	{r7, lr}
 80368ae:	b082      	sub	sp, #8
 80368b0:	af00      	add	r7, sp, #0
 80368b2:	4603      	mov	r3, r0
 80368b4:	6039      	str	r1, [r7, #0]
 80368b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80368b8:	79fb      	ldrb	r3, [r7, #7]
 80368ba:	2b00      	cmp	r3, #0
 80368bc:	d105      	bne.n	80368ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80368be:	683a      	ldr	r2, [r7, #0]
 80368c0:	4907      	ldr	r1, [pc, #28]	; (80368e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80368c2:	4808      	ldr	r0, [pc, #32]	; (80368e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80368c4:	f7ff fd7e 	bl	80363c4 <USBD_GetString>
 80368c8:	e004      	b.n	80368d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80368ca:	683a      	ldr	r2, [r7, #0]
 80368cc:	4904      	ldr	r1, [pc, #16]	; (80368e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80368ce:	4805      	ldr	r0, [pc, #20]	; (80368e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80368d0:	f7ff fd78 	bl	80363c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80368d4:	4b02      	ldr	r3, [pc, #8]	; (80368e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80368d6:	4618      	mov	r0, r3
 80368d8:	3708      	adds	r7, #8
 80368da:	46bd      	mov	sp, r7
 80368dc:	bd80      	pop	{r7, pc}
 80368de:	bf00      	nop
 80368e0:	20003e38 	.word	0x20003e38
 80368e4:	0803b940 	.word	0x0803b940

080368e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80368e8:	b580      	push	{r7, lr}
 80368ea:	b084      	sub	sp, #16
 80368ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80368ee:	4b0f      	ldr	r3, [pc, #60]	; (803692c <Get_SerialNum+0x44>)
 80368f0:	681b      	ldr	r3, [r3, #0]
 80368f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80368f4:	4b0e      	ldr	r3, [pc, #56]	; (8036930 <Get_SerialNum+0x48>)
 80368f6:	681b      	ldr	r3, [r3, #0]
 80368f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80368fa:	4b0e      	ldr	r3, [pc, #56]	; (8036934 <Get_SerialNum+0x4c>)
 80368fc:	681b      	ldr	r3, [r3, #0]
 80368fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8036900:	68fa      	ldr	r2, [r7, #12]
 8036902:	687b      	ldr	r3, [r7, #4]
 8036904:	4413      	add	r3, r2
 8036906:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8036908:	68fb      	ldr	r3, [r7, #12]
 803690a:	2b00      	cmp	r3, #0
 803690c:	d009      	beq.n	8036922 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 803690e:	2208      	movs	r2, #8
 8036910:	4909      	ldr	r1, [pc, #36]	; (8036938 <Get_SerialNum+0x50>)
 8036912:	68f8      	ldr	r0, [r7, #12]
 8036914:	f000 f814 	bl	8036940 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8036918:	2204      	movs	r2, #4
 803691a:	4908      	ldr	r1, [pc, #32]	; (803693c <Get_SerialNum+0x54>)
 803691c:	68b8      	ldr	r0, [r7, #8]
 803691e:	f000 f80f 	bl	8036940 <IntToUnicode>
  }
}
 8036922:	bf00      	nop
 8036924:	3710      	adds	r7, #16
 8036926:	46bd      	mov	sp, r7
 8036928:	bd80      	pop	{r7, pc}
 803692a:	bf00      	nop
 803692c:	1fff7a10 	.word	0x1fff7a10
 8036930:	1fff7a14 	.word	0x1fff7a14
 8036934:	1fff7a18 	.word	0x1fff7a18
 8036938:	20000d52 	.word	0x20000d52
 803693c:	20000d62 	.word	0x20000d62

08036940 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8036940:	b480      	push	{r7}
 8036942:	b087      	sub	sp, #28
 8036944:	af00      	add	r7, sp, #0
 8036946:	60f8      	str	r0, [r7, #12]
 8036948:	60b9      	str	r1, [r7, #8]
 803694a:	4613      	mov	r3, r2
 803694c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 803694e:	2300      	movs	r3, #0
 8036950:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8036952:	2300      	movs	r3, #0
 8036954:	75fb      	strb	r3, [r7, #23]
 8036956:	e027      	b.n	80369a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8036958:	68fb      	ldr	r3, [r7, #12]
 803695a:	0f1b      	lsrs	r3, r3, #28
 803695c:	2b09      	cmp	r3, #9
 803695e:	d80b      	bhi.n	8036978 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8036960:	68fb      	ldr	r3, [r7, #12]
 8036962:	0f1b      	lsrs	r3, r3, #28
 8036964:	b2da      	uxtb	r2, r3
 8036966:	7dfb      	ldrb	r3, [r7, #23]
 8036968:	005b      	lsls	r3, r3, #1
 803696a:	4619      	mov	r1, r3
 803696c:	68bb      	ldr	r3, [r7, #8]
 803696e:	440b      	add	r3, r1
 8036970:	3230      	adds	r2, #48	; 0x30
 8036972:	b2d2      	uxtb	r2, r2
 8036974:	701a      	strb	r2, [r3, #0]
 8036976:	e00a      	b.n	803698e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8036978:	68fb      	ldr	r3, [r7, #12]
 803697a:	0f1b      	lsrs	r3, r3, #28
 803697c:	b2da      	uxtb	r2, r3
 803697e:	7dfb      	ldrb	r3, [r7, #23]
 8036980:	005b      	lsls	r3, r3, #1
 8036982:	4619      	mov	r1, r3
 8036984:	68bb      	ldr	r3, [r7, #8]
 8036986:	440b      	add	r3, r1
 8036988:	3237      	adds	r2, #55	; 0x37
 803698a:	b2d2      	uxtb	r2, r2
 803698c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 803698e:	68fb      	ldr	r3, [r7, #12]
 8036990:	011b      	lsls	r3, r3, #4
 8036992:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8036994:	7dfb      	ldrb	r3, [r7, #23]
 8036996:	005b      	lsls	r3, r3, #1
 8036998:	3301      	adds	r3, #1
 803699a:	68ba      	ldr	r2, [r7, #8]
 803699c:	4413      	add	r3, r2
 803699e:	2200      	movs	r2, #0
 80369a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80369a2:	7dfb      	ldrb	r3, [r7, #23]
 80369a4:	3301      	adds	r3, #1
 80369a6:	75fb      	strb	r3, [r7, #23]
 80369a8:	7dfa      	ldrb	r2, [r7, #23]
 80369aa:	79fb      	ldrb	r3, [r7, #7]
 80369ac:	429a      	cmp	r2, r3
 80369ae:	d3d3      	bcc.n	8036958 <IntToUnicode+0x18>
  }
}
 80369b0:	bf00      	nop
 80369b2:	bf00      	nop
 80369b4:	371c      	adds	r7, #28
 80369b6:	46bd      	mov	sp, r7
 80369b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80369bc:	4770      	bx	lr
	...

080369c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80369c0:	b580      	push	{r7, lr}
 80369c2:	b08a      	sub	sp, #40	; 0x28
 80369c4:	af00      	add	r7, sp, #0
 80369c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80369c8:	f107 0314 	add.w	r3, r7, #20
 80369cc:	2200      	movs	r2, #0
 80369ce:	601a      	str	r2, [r3, #0]
 80369d0:	605a      	str	r2, [r3, #4]
 80369d2:	609a      	str	r2, [r3, #8]
 80369d4:	60da      	str	r2, [r3, #12]
 80369d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80369d8:	687b      	ldr	r3, [r7, #4]
 80369da:	681b      	ldr	r3, [r3, #0]
 80369dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80369e0:	d13a      	bne.n	8036a58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80369e2:	2300      	movs	r3, #0
 80369e4:	613b      	str	r3, [r7, #16]
 80369e6:	4b1e      	ldr	r3, [pc, #120]	; (8036a60 <HAL_PCD_MspInit+0xa0>)
 80369e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80369ea:	4a1d      	ldr	r2, [pc, #116]	; (8036a60 <HAL_PCD_MspInit+0xa0>)
 80369ec:	f043 0301 	orr.w	r3, r3, #1
 80369f0:	6313      	str	r3, [r2, #48]	; 0x30
 80369f2:	4b1b      	ldr	r3, [pc, #108]	; (8036a60 <HAL_PCD_MspInit+0xa0>)
 80369f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80369f6:	f003 0301 	and.w	r3, r3, #1
 80369fa:	613b      	str	r3, [r7, #16]
 80369fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80369fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8036a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8036a04:	2302      	movs	r3, #2
 8036a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8036a08:	2300      	movs	r3, #0
 8036a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8036a0c:	2303      	movs	r3, #3
 8036a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8036a10:	230a      	movs	r3, #10
 8036a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8036a14:	f107 0314 	add.w	r3, r7, #20
 8036a18:	4619      	mov	r1, r3
 8036a1a:	4812      	ldr	r0, [pc, #72]	; (8036a64 <HAL_PCD_MspInit+0xa4>)
 8036a1c:	f7ec fbca 	bl	80231b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8036a20:	4b0f      	ldr	r3, [pc, #60]	; (8036a60 <HAL_PCD_MspInit+0xa0>)
 8036a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036a24:	4a0e      	ldr	r2, [pc, #56]	; (8036a60 <HAL_PCD_MspInit+0xa0>)
 8036a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8036a2a:	6353      	str	r3, [r2, #52]	; 0x34
 8036a2c:	2300      	movs	r3, #0
 8036a2e:	60fb      	str	r3, [r7, #12]
 8036a30:	4b0b      	ldr	r3, [pc, #44]	; (8036a60 <HAL_PCD_MspInit+0xa0>)
 8036a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8036a34:	4a0a      	ldr	r2, [pc, #40]	; (8036a60 <HAL_PCD_MspInit+0xa0>)
 8036a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8036a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8036a3c:	4b08      	ldr	r3, [pc, #32]	; (8036a60 <HAL_PCD_MspInit+0xa0>)
 8036a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8036a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8036a44:	60fb      	str	r3, [r7, #12]
 8036a46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8036a48:	2200      	movs	r2, #0
 8036a4a:	2100      	movs	r1, #0
 8036a4c:	2043      	movs	r0, #67	; 0x43
 8036a4e:	f7eb fd2d 	bl	80224ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8036a52:	2043      	movs	r0, #67	; 0x43
 8036a54:	f7eb fd46 	bl	80224e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8036a58:	bf00      	nop
 8036a5a:	3728      	adds	r7, #40	; 0x28
 8036a5c:	46bd      	mov	sp, r7
 8036a5e:	bd80      	pop	{r7, pc}
 8036a60:	40023800 	.word	0x40023800
 8036a64:	40020000 	.word	0x40020000

08036a68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036a68:	b580      	push	{r7, lr}
 8036a6a:	b082      	sub	sp, #8
 8036a6c:	af00      	add	r7, sp, #0
 8036a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8036a70:	687b      	ldr	r3, [r7, #4]
 8036a72:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8036a76:	687b      	ldr	r3, [r7, #4]
 8036a78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8036a7c:	4619      	mov	r1, r3
 8036a7e:	4610      	mov	r0, r2
 8036a80:	f7fe fd0e 	bl	80354a0 <USBD_LL_SetupStage>
}
 8036a84:	bf00      	nop
 8036a86:	3708      	adds	r7, #8
 8036a88:	46bd      	mov	sp, r7
 8036a8a:	bd80      	pop	{r7, pc}

08036a8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036a8c:	b580      	push	{r7, lr}
 8036a8e:	b082      	sub	sp, #8
 8036a90:	af00      	add	r7, sp, #0
 8036a92:	6078      	str	r0, [r7, #4]
 8036a94:	460b      	mov	r3, r1
 8036a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8036a98:	687b      	ldr	r3, [r7, #4]
 8036a9a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8036a9e:	78fa      	ldrb	r2, [r7, #3]
 8036aa0:	6879      	ldr	r1, [r7, #4]
 8036aa2:	4613      	mov	r3, r2
 8036aa4:	00db      	lsls	r3, r3, #3
 8036aa6:	1a9b      	subs	r3, r3, r2
 8036aa8:	009b      	lsls	r3, r3, #2
 8036aaa:	440b      	add	r3, r1
 8036aac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8036ab0:	681a      	ldr	r2, [r3, #0]
 8036ab2:	78fb      	ldrb	r3, [r7, #3]
 8036ab4:	4619      	mov	r1, r3
 8036ab6:	f7fe fd48 	bl	803554a <USBD_LL_DataOutStage>
}
 8036aba:	bf00      	nop
 8036abc:	3708      	adds	r7, #8
 8036abe:	46bd      	mov	sp, r7
 8036ac0:	bd80      	pop	{r7, pc}

08036ac2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036ac2:	b580      	push	{r7, lr}
 8036ac4:	b082      	sub	sp, #8
 8036ac6:	af00      	add	r7, sp, #0
 8036ac8:	6078      	str	r0, [r7, #4]
 8036aca:	460b      	mov	r3, r1
 8036acc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8036ace:	687b      	ldr	r3, [r7, #4]
 8036ad0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8036ad4:	78fa      	ldrb	r2, [r7, #3]
 8036ad6:	6879      	ldr	r1, [r7, #4]
 8036ad8:	4613      	mov	r3, r2
 8036ada:	00db      	lsls	r3, r3, #3
 8036adc:	1a9b      	subs	r3, r3, r2
 8036ade:	009b      	lsls	r3, r3, #2
 8036ae0:	440b      	add	r3, r1
 8036ae2:	3348      	adds	r3, #72	; 0x48
 8036ae4:	681a      	ldr	r2, [r3, #0]
 8036ae6:	78fb      	ldrb	r3, [r7, #3]
 8036ae8:	4619      	mov	r1, r3
 8036aea:	f7fe fd91 	bl	8035610 <USBD_LL_DataInStage>
}
 8036aee:	bf00      	nop
 8036af0:	3708      	adds	r7, #8
 8036af2:	46bd      	mov	sp, r7
 8036af4:	bd80      	pop	{r7, pc}

08036af6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036af6:	b580      	push	{r7, lr}
 8036af8:	b082      	sub	sp, #8
 8036afa:	af00      	add	r7, sp, #0
 8036afc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8036afe:	687b      	ldr	r3, [r7, #4]
 8036b00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036b04:	4618      	mov	r0, r3
 8036b06:	f7fe fe95 	bl	8035834 <USBD_LL_SOF>
}
 8036b0a:	bf00      	nop
 8036b0c:	3708      	adds	r7, #8
 8036b0e:	46bd      	mov	sp, r7
 8036b10:	bd80      	pop	{r7, pc}

08036b12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036b12:	b580      	push	{r7, lr}
 8036b14:	b084      	sub	sp, #16
 8036b16:	af00      	add	r7, sp, #0
 8036b18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8036b1a:	2301      	movs	r3, #1
 8036b1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8036b1e:	687b      	ldr	r3, [r7, #4]
 8036b20:	68db      	ldr	r3, [r3, #12]
 8036b22:	2b00      	cmp	r3, #0
 8036b24:	d102      	bne.n	8036b2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8036b26:	2300      	movs	r3, #0
 8036b28:	73fb      	strb	r3, [r7, #15]
 8036b2a:	e008      	b.n	8036b3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8036b2c:	687b      	ldr	r3, [r7, #4]
 8036b2e:	68db      	ldr	r3, [r3, #12]
 8036b30:	2b02      	cmp	r3, #2
 8036b32:	d102      	bne.n	8036b3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8036b34:	2301      	movs	r3, #1
 8036b36:	73fb      	strb	r3, [r7, #15]
 8036b38:	e001      	b.n	8036b3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8036b3a:	f7ea fa01 	bl	8020f40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8036b3e:	687b      	ldr	r3, [r7, #4]
 8036b40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036b44:	7bfa      	ldrb	r2, [r7, #15]
 8036b46:	4611      	mov	r1, r2
 8036b48:	4618      	mov	r0, r3
 8036b4a:	f7fe fe38 	bl	80357be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8036b4e:	687b      	ldr	r3, [r7, #4]
 8036b50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036b54:	4618      	mov	r0, r3
 8036b56:	f7fe fdf1 	bl	803573c <USBD_LL_Reset>
}
 8036b5a:	bf00      	nop
 8036b5c:	3710      	adds	r7, #16
 8036b5e:	46bd      	mov	sp, r7
 8036b60:	bd80      	pop	{r7, pc}
	...

08036b64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036b64:	b580      	push	{r7, lr}
 8036b66:	b082      	sub	sp, #8
 8036b68:	af00      	add	r7, sp, #0
 8036b6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8036b6c:	687b      	ldr	r3, [r7, #4]
 8036b6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036b72:	4618      	mov	r0, r3
 8036b74:	f7fe fe33 	bl	80357de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8036b78:	687b      	ldr	r3, [r7, #4]
 8036b7a:	681b      	ldr	r3, [r3, #0]
 8036b7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8036b80:	681b      	ldr	r3, [r3, #0]
 8036b82:	687a      	ldr	r2, [r7, #4]
 8036b84:	6812      	ldr	r2, [r2, #0]
 8036b86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8036b8a:	f043 0301 	orr.w	r3, r3, #1
 8036b8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8036b90:	687b      	ldr	r3, [r7, #4]
 8036b92:	6a1b      	ldr	r3, [r3, #32]
 8036b94:	2b00      	cmp	r3, #0
 8036b96:	d005      	beq.n	8036ba4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8036b98:	4b04      	ldr	r3, [pc, #16]	; (8036bac <HAL_PCD_SuspendCallback+0x48>)
 8036b9a:	691b      	ldr	r3, [r3, #16]
 8036b9c:	4a03      	ldr	r2, [pc, #12]	; (8036bac <HAL_PCD_SuspendCallback+0x48>)
 8036b9e:	f043 0306 	orr.w	r3, r3, #6
 8036ba2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8036ba4:	bf00      	nop
 8036ba6:	3708      	adds	r7, #8
 8036ba8:	46bd      	mov	sp, r7
 8036baa:	bd80      	pop	{r7, pc}
 8036bac:	e000ed00 	.word	0xe000ed00

08036bb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036bb0:	b580      	push	{r7, lr}
 8036bb2:	b082      	sub	sp, #8
 8036bb4:	af00      	add	r7, sp, #0
 8036bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8036bb8:	687b      	ldr	r3, [r7, #4]
 8036bba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036bbe:	4618      	mov	r0, r3
 8036bc0:	f7fe fe22 	bl	8035808 <USBD_LL_Resume>
}
 8036bc4:	bf00      	nop
 8036bc6:	3708      	adds	r7, #8
 8036bc8:	46bd      	mov	sp, r7
 8036bca:	bd80      	pop	{r7, pc}

08036bcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036bcc:	b580      	push	{r7, lr}
 8036bce:	b082      	sub	sp, #8
 8036bd0:	af00      	add	r7, sp, #0
 8036bd2:	6078      	str	r0, [r7, #4]
 8036bd4:	460b      	mov	r3, r1
 8036bd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8036bd8:	687b      	ldr	r3, [r7, #4]
 8036bda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036bde:	78fa      	ldrb	r2, [r7, #3]
 8036be0:	4611      	mov	r1, r2
 8036be2:	4618      	mov	r0, r3
 8036be4:	f7fe fe4d 	bl	8035882 <USBD_LL_IsoOUTIncomplete>
}
 8036be8:	bf00      	nop
 8036bea:	3708      	adds	r7, #8
 8036bec:	46bd      	mov	sp, r7
 8036bee:	bd80      	pop	{r7, pc}

08036bf0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036bf0:	b580      	push	{r7, lr}
 8036bf2:	b082      	sub	sp, #8
 8036bf4:	af00      	add	r7, sp, #0
 8036bf6:	6078      	str	r0, [r7, #4]
 8036bf8:	460b      	mov	r3, r1
 8036bfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8036bfc:	687b      	ldr	r3, [r7, #4]
 8036bfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036c02:	78fa      	ldrb	r2, [r7, #3]
 8036c04:	4611      	mov	r1, r2
 8036c06:	4618      	mov	r0, r3
 8036c08:	f7fe fe2e 	bl	8035868 <USBD_LL_IsoINIncomplete>
}
 8036c0c:	bf00      	nop
 8036c0e:	3708      	adds	r7, #8
 8036c10:	46bd      	mov	sp, r7
 8036c12:	bd80      	pop	{r7, pc}

08036c14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036c14:	b580      	push	{r7, lr}
 8036c16:	b082      	sub	sp, #8
 8036c18:	af00      	add	r7, sp, #0
 8036c1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8036c1c:	687b      	ldr	r3, [r7, #4]
 8036c1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036c22:	4618      	mov	r0, r3
 8036c24:	f7fe fe3a 	bl	803589c <USBD_LL_DevConnected>
}
 8036c28:	bf00      	nop
 8036c2a:	3708      	adds	r7, #8
 8036c2c:	46bd      	mov	sp, r7
 8036c2e:	bd80      	pop	{r7, pc}

08036c30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8036c30:	b580      	push	{r7, lr}
 8036c32:	b082      	sub	sp, #8
 8036c34:	af00      	add	r7, sp, #0
 8036c36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8036c38:	687b      	ldr	r3, [r7, #4]
 8036c3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8036c3e:	4618      	mov	r0, r3
 8036c40:	f7fe fe37 	bl	80358b2 <USBD_LL_DevDisconnected>
}
 8036c44:	bf00      	nop
 8036c46:	3708      	adds	r7, #8
 8036c48:	46bd      	mov	sp, r7
 8036c4a:	bd80      	pop	{r7, pc}

08036c4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8036c4c:	b580      	push	{r7, lr}
 8036c4e:	b082      	sub	sp, #8
 8036c50:	af00      	add	r7, sp, #0
 8036c52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8036c54:	687b      	ldr	r3, [r7, #4]
 8036c56:	781b      	ldrb	r3, [r3, #0]
 8036c58:	2b00      	cmp	r3, #0
 8036c5a:	d13c      	bne.n	8036cd6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8036c5c:	4a20      	ldr	r2, [pc, #128]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036c5e:	687b      	ldr	r3, [r7, #4]
 8036c60:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8036c64:	687b      	ldr	r3, [r7, #4]
 8036c66:	4a1e      	ldr	r2, [pc, #120]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036c68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8036c6c:	4b1c      	ldr	r3, [pc, #112]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036c6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8036c72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8036c74:	4b1a      	ldr	r3, [pc, #104]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036c76:	2204      	movs	r2, #4
 8036c78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8036c7a:	4b19      	ldr	r3, [pc, #100]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036c7c:	2202      	movs	r2, #2
 8036c7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8036c80:	4b17      	ldr	r3, [pc, #92]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036c82:	2200      	movs	r2, #0
 8036c84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8036c86:	4b16      	ldr	r3, [pc, #88]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036c88:	2202      	movs	r2, #2
 8036c8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8036c8c:	4b14      	ldr	r3, [pc, #80]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036c8e:	2200      	movs	r2, #0
 8036c90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8036c92:	4b13      	ldr	r3, [pc, #76]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036c94:	2200      	movs	r2, #0
 8036c96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8036c98:	4b11      	ldr	r3, [pc, #68]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036c9a:	2200      	movs	r2, #0
 8036c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8036c9e:	4b10      	ldr	r3, [pc, #64]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036ca0:	2200      	movs	r2, #0
 8036ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8036ca4:	4b0e      	ldr	r3, [pc, #56]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036ca6:	2200      	movs	r2, #0
 8036ca8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8036caa:	480d      	ldr	r0, [pc, #52]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036cac:	f7ee fe39 	bl	8025922 <HAL_PCD_Init>
 8036cb0:	4603      	mov	r3, r0
 8036cb2:	2b00      	cmp	r3, #0
 8036cb4:	d001      	beq.n	8036cba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8036cb6:	f7ea f943 	bl	8020f40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8036cba:	2180      	movs	r1, #128	; 0x80
 8036cbc:	4808      	ldr	r0, [pc, #32]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036cbe:	f7ef ff96 	bl	8026bee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8036cc2:	2240      	movs	r2, #64	; 0x40
 8036cc4:	2100      	movs	r1, #0
 8036cc6:	4806      	ldr	r0, [pc, #24]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036cc8:	f7ef ff4a 	bl	8026b60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8036ccc:	2280      	movs	r2, #128	; 0x80
 8036cce:	2101      	movs	r1, #1
 8036cd0:	4803      	ldr	r0, [pc, #12]	; (8036ce0 <USBD_LL_Init+0x94>)
 8036cd2:	f7ef ff45 	bl	8026b60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8036cd6:	2300      	movs	r3, #0
}
 8036cd8:	4618      	mov	r0, r3
 8036cda:	3708      	adds	r7, #8
 8036cdc:	46bd      	mov	sp, r7
 8036cde:	bd80      	pop	{r7, pc}
 8036ce0:	20004038 	.word	0x20004038

08036ce4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8036ce4:	b580      	push	{r7, lr}
 8036ce6:	b084      	sub	sp, #16
 8036ce8:	af00      	add	r7, sp, #0
 8036cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036cec:	2300      	movs	r3, #0
 8036cee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036cf0:	2300      	movs	r3, #0
 8036cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8036cf4:	687b      	ldr	r3, [r7, #4]
 8036cf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036cfa:	4618      	mov	r0, r3
 8036cfc:	f7ee ff2e 	bl	8025b5c <HAL_PCD_Start>
 8036d00:	4603      	mov	r3, r0
 8036d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036d04:	7bfb      	ldrb	r3, [r7, #15]
 8036d06:	4618      	mov	r0, r3
 8036d08:	f000 f92a 	bl	8036f60 <USBD_Get_USB_Status>
 8036d0c:	4603      	mov	r3, r0
 8036d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8036d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8036d12:	4618      	mov	r0, r3
 8036d14:	3710      	adds	r7, #16
 8036d16:	46bd      	mov	sp, r7
 8036d18:	bd80      	pop	{r7, pc}

08036d1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8036d1a:	b580      	push	{r7, lr}
 8036d1c:	b084      	sub	sp, #16
 8036d1e:	af00      	add	r7, sp, #0
 8036d20:	6078      	str	r0, [r7, #4]
 8036d22:	4608      	mov	r0, r1
 8036d24:	4611      	mov	r1, r2
 8036d26:	461a      	mov	r2, r3
 8036d28:	4603      	mov	r3, r0
 8036d2a:	70fb      	strb	r3, [r7, #3]
 8036d2c:	460b      	mov	r3, r1
 8036d2e:	70bb      	strb	r3, [r7, #2]
 8036d30:	4613      	mov	r3, r2
 8036d32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036d34:	2300      	movs	r3, #0
 8036d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036d38:	2300      	movs	r3, #0
 8036d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8036d3c:	687b      	ldr	r3, [r7, #4]
 8036d3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8036d42:	78bb      	ldrb	r3, [r7, #2]
 8036d44:	883a      	ldrh	r2, [r7, #0]
 8036d46:	78f9      	ldrb	r1, [r7, #3]
 8036d48:	f7ef fb12 	bl	8026370 <HAL_PCD_EP_Open>
 8036d4c:	4603      	mov	r3, r0
 8036d4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036d50:	7bfb      	ldrb	r3, [r7, #15]
 8036d52:	4618      	mov	r0, r3
 8036d54:	f000 f904 	bl	8036f60 <USBD_Get_USB_Status>
 8036d58:	4603      	mov	r3, r0
 8036d5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8036d5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8036d5e:	4618      	mov	r0, r3
 8036d60:	3710      	adds	r7, #16
 8036d62:	46bd      	mov	sp, r7
 8036d64:	bd80      	pop	{r7, pc}

08036d66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8036d66:	b580      	push	{r7, lr}
 8036d68:	b084      	sub	sp, #16
 8036d6a:	af00      	add	r7, sp, #0
 8036d6c:	6078      	str	r0, [r7, #4]
 8036d6e:	460b      	mov	r3, r1
 8036d70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036d72:	2300      	movs	r3, #0
 8036d74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036d76:	2300      	movs	r3, #0
 8036d78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8036d7a:	687b      	ldr	r3, [r7, #4]
 8036d7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036d80:	78fa      	ldrb	r2, [r7, #3]
 8036d82:	4611      	mov	r1, r2
 8036d84:	4618      	mov	r0, r3
 8036d86:	f7ef fb5b 	bl	8026440 <HAL_PCD_EP_Close>
 8036d8a:	4603      	mov	r3, r0
 8036d8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036d8e:	7bfb      	ldrb	r3, [r7, #15]
 8036d90:	4618      	mov	r0, r3
 8036d92:	f000 f8e5 	bl	8036f60 <USBD_Get_USB_Status>
 8036d96:	4603      	mov	r3, r0
 8036d98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8036d9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8036d9c:	4618      	mov	r0, r3
 8036d9e:	3710      	adds	r7, #16
 8036da0:	46bd      	mov	sp, r7
 8036da2:	bd80      	pop	{r7, pc}

08036da4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8036da4:	b580      	push	{r7, lr}
 8036da6:	b084      	sub	sp, #16
 8036da8:	af00      	add	r7, sp, #0
 8036daa:	6078      	str	r0, [r7, #4]
 8036dac:	460b      	mov	r3, r1
 8036dae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036db0:	2300      	movs	r3, #0
 8036db2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036db4:	2300      	movs	r3, #0
 8036db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8036db8:	687b      	ldr	r3, [r7, #4]
 8036dba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036dbe:	78fa      	ldrb	r2, [r7, #3]
 8036dc0:	4611      	mov	r1, r2
 8036dc2:	4618      	mov	r0, r3
 8036dc4:	f7ef fc33 	bl	802662e <HAL_PCD_EP_SetStall>
 8036dc8:	4603      	mov	r3, r0
 8036dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036dcc:	7bfb      	ldrb	r3, [r7, #15]
 8036dce:	4618      	mov	r0, r3
 8036dd0:	f000 f8c6 	bl	8036f60 <USBD_Get_USB_Status>
 8036dd4:	4603      	mov	r3, r0
 8036dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8036dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8036dda:	4618      	mov	r0, r3
 8036ddc:	3710      	adds	r7, #16
 8036dde:	46bd      	mov	sp, r7
 8036de0:	bd80      	pop	{r7, pc}

08036de2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8036de2:	b580      	push	{r7, lr}
 8036de4:	b084      	sub	sp, #16
 8036de6:	af00      	add	r7, sp, #0
 8036de8:	6078      	str	r0, [r7, #4]
 8036dea:	460b      	mov	r3, r1
 8036dec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036dee:	2300      	movs	r3, #0
 8036df0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036df2:	2300      	movs	r3, #0
 8036df4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8036df6:	687b      	ldr	r3, [r7, #4]
 8036df8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036dfc:	78fa      	ldrb	r2, [r7, #3]
 8036dfe:	4611      	mov	r1, r2
 8036e00:	4618      	mov	r0, r3
 8036e02:	f7ef fc78 	bl	80266f6 <HAL_PCD_EP_ClrStall>
 8036e06:	4603      	mov	r3, r0
 8036e08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036e0a:	7bfb      	ldrb	r3, [r7, #15]
 8036e0c:	4618      	mov	r0, r3
 8036e0e:	f000 f8a7 	bl	8036f60 <USBD_Get_USB_Status>
 8036e12:	4603      	mov	r3, r0
 8036e14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8036e16:	7bbb      	ldrb	r3, [r7, #14]
}
 8036e18:	4618      	mov	r0, r3
 8036e1a:	3710      	adds	r7, #16
 8036e1c:	46bd      	mov	sp, r7
 8036e1e:	bd80      	pop	{r7, pc}

08036e20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8036e20:	b480      	push	{r7}
 8036e22:	b085      	sub	sp, #20
 8036e24:	af00      	add	r7, sp, #0
 8036e26:	6078      	str	r0, [r7, #4]
 8036e28:	460b      	mov	r3, r1
 8036e2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8036e2c:	687b      	ldr	r3, [r7, #4]
 8036e2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036e32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8036e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8036e38:	2b00      	cmp	r3, #0
 8036e3a:	da0b      	bge.n	8036e54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8036e3c:	78fb      	ldrb	r3, [r7, #3]
 8036e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8036e42:	68f9      	ldr	r1, [r7, #12]
 8036e44:	4613      	mov	r3, r2
 8036e46:	00db      	lsls	r3, r3, #3
 8036e48:	1a9b      	subs	r3, r3, r2
 8036e4a:	009b      	lsls	r3, r3, #2
 8036e4c:	440b      	add	r3, r1
 8036e4e:	333e      	adds	r3, #62	; 0x3e
 8036e50:	781b      	ldrb	r3, [r3, #0]
 8036e52:	e00b      	b.n	8036e6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8036e54:	78fb      	ldrb	r3, [r7, #3]
 8036e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8036e5a:	68f9      	ldr	r1, [r7, #12]
 8036e5c:	4613      	mov	r3, r2
 8036e5e:	00db      	lsls	r3, r3, #3
 8036e60:	1a9b      	subs	r3, r3, r2
 8036e62:	009b      	lsls	r3, r3, #2
 8036e64:	440b      	add	r3, r1
 8036e66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8036e6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8036e6c:	4618      	mov	r0, r3
 8036e6e:	3714      	adds	r7, #20
 8036e70:	46bd      	mov	sp, r7
 8036e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036e76:	4770      	bx	lr

08036e78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8036e78:	b580      	push	{r7, lr}
 8036e7a:	b084      	sub	sp, #16
 8036e7c:	af00      	add	r7, sp, #0
 8036e7e:	6078      	str	r0, [r7, #4]
 8036e80:	460b      	mov	r3, r1
 8036e82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036e84:	2300      	movs	r3, #0
 8036e86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036e88:	2300      	movs	r3, #0
 8036e8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8036e8c:	687b      	ldr	r3, [r7, #4]
 8036e8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036e92:	78fa      	ldrb	r2, [r7, #3]
 8036e94:	4611      	mov	r1, r2
 8036e96:	4618      	mov	r0, r3
 8036e98:	f7ef fa45 	bl	8026326 <HAL_PCD_SetAddress>
 8036e9c:	4603      	mov	r3, r0
 8036e9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036ea0:	7bfb      	ldrb	r3, [r7, #15]
 8036ea2:	4618      	mov	r0, r3
 8036ea4:	f000 f85c 	bl	8036f60 <USBD_Get_USB_Status>
 8036ea8:	4603      	mov	r3, r0
 8036eaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8036eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8036eae:	4618      	mov	r0, r3
 8036eb0:	3710      	adds	r7, #16
 8036eb2:	46bd      	mov	sp, r7
 8036eb4:	bd80      	pop	{r7, pc}

08036eb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8036eb6:	b580      	push	{r7, lr}
 8036eb8:	b086      	sub	sp, #24
 8036eba:	af00      	add	r7, sp, #0
 8036ebc:	60f8      	str	r0, [r7, #12]
 8036ebe:	607a      	str	r2, [r7, #4]
 8036ec0:	603b      	str	r3, [r7, #0]
 8036ec2:	460b      	mov	r3, r1
 8036ec4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036ec6:	2300      	movs	r3, #0
 8036ec8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036eca:	2300      	movs	r3, #0
 8036ecc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8036ece:	68fb      	ldr	r3, [r7, #12]
 8036ed0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8036ed4:	7af9      	ldrb	r1, [r7, #11]
 8036ed6:	683b      	ldr	r3, [r7, #0]
 8036ed8:	687a      	ldr	r2, [r7, #4]
 8036eda:	f7ef fb5e 	bl	802659a <HAL_PCD_EP_Transmit>
 8036ede:	4603      	mov	r3, r0
 8036ee0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036ee2:	7dfb      	ldrb	r3, [r7, #23]
 8036ee4:	4618      	mov	r0, r3
 8036ee6:	f000 f83b 	bl	8036f60 <USBD_Get_USB_Status>
 8036eea:	4603      	mov	r3, r0
 8036eec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8036eee:	7dbb      	ldrb	r3, [r7, #22]
}
 8036ef0:	4618      	mov	r0, r3
 8036ef2:	3718      	adds	r7, #24
 8036ef4:	46bd      	mov	sp, r7
 8036ef6:	bd80      	pop	{r7, pc}

08036ef8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8036ef8:	b580      	push	{r7, lr}
 8036efa:	b086      	sub	sp, #24
 8036efc:	af00      	add	r7, sp, #0
 8036efe:	60f8      	str	r0, [r7, #12]
 8036f00:	607a      	str	r2, [r7, #4]
 8036f02:	603b      	str	r3, [r7, #0]
 8036f04:	460b      	mov	r3, r1
 8036f06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8036f08:	2300      	movs	r3, #0
 8036f0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036f0c:	2300      	movs	r3, #0
 8036f0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8036f10:	68fb      	ldr	r3, [r7, #12]
 8036f12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8036f16:	7af9      	ldrb	r1, [r7, #11]
 8036f18:	683b      	ldr	r3, [r7, #0]
 8036f1a:	687a      	ldr	r2, [r7, #4]
 8036f1c:	f7ef fada 	bl	80264d4 <HAL_PCD_EP_Receive>
 8036f20:	4603      	mov	r3, r0
 8036f22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8036f24:	7dfb      	ldrb	r3, [r7, #23]
 8036f26:	4618      	mov	r0, r3
 8036f28:	f000 f81a 	bl	8036f60 <USBD_Get_USB_Status>
 8036f2c:	4603      	mov	r3, r0
 8036f2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8036f30:	7dbb      	ldrb	r3, [r7, #22]
}
 8036f32:	4618      	mov	r0, r3
 8036f34:	3718      	adds	r7, #24
 8036f36:	46bd      	mov	sp, r7
 8036f38:	bd80      	pop	{r7, pc}

08036f3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8036f3a:	b580      	push	{r7, lr}
 8036f3c:	b082      	sub	sp, #8
 8036f3e:	af00      	add	r7, sp, #0
 8036f40:	6078      	str	r0, [r7, #4]
 8036f42:	460b      	mov	r3, r1
 8036f44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8036f46:	687b      	ldr	r3, [r7, #4]
 8036f48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8036f4c:	78fa      	ldrb	r2, [r7, #3]
 8036f4e:	4611      	mov	r1, r2
 8036f50:	4618      	mov	r0, r3
 8036f52:	f7ef fb0a 	bl	802656a <HAL_PCD_EP_GetRxCount>
 8036f56:	4603      	mov	r3, r0
}
 8036f58:	4618      	mov	r0, r3
 8036f5a:	3708      	adds	r7, #8
 8036f5c:	46bd      	mov	sp, r7
 8036f5e:	bd80      	pop	{r7, pc}

08036f60 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8036f60:	b480      	push	{r7}
 8036f62:	b085      	sub	sp, #20
 8036f64:	af00      	add	r7, sp, #0
 8036f66:	4603      	mov	r3, r0
 8036f68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8036f6a:	2300      	movs	r3, #0
 8036f6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8036f6e:	79fb      	ldrb	r3, [r7, #7]
 8036f70:	2b03      	cmp	r3, #3
 8036f72:	d817      	bhi.n	8036fa4 <USBD_Get_USB_Status+0x44>
 8036f74:	a201      	add	r2, pc, #4	; (adr r2, 8036f7c <USBD_Get_USB_Status+0x1c>)
 8036f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036f7a:	bf00      	nop
 8036f7c:	08036f8d 	.word	0x08036f8d
 8036f80:	08036f93 	.word	0x08036f93
 8036f84:	08036f99 	.word	0x08036f99
 8036f88:	08036f9f 	.word	0x08036f9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8036f8c:	2300      	movs	r3, #0
 8036f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8036f90:	e00b      	b.n	8036faa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8036f92:	2303      	movs	r3, #3
 8036f94:	73fb      	strb	r3, [r7, #15]
    break;
 8036f96:	e008      	b.n	8036faa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8036f98:	2301      	movs	r3, #1
 8036f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8036f9c:	e005      	b.n	8036faa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8036f9e:	2303      	movs	r3, #3
 8036fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8036fa2:	e002      	b.n	8036faa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8036fa4:	2303      	movs	r3, #3
 8036fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8036fa8:	bf00      	nop
  }
  return usb_status;
 8036faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8036fac:	4618      	mov	r0, r3
 8036fae:	3714      	adds	r7, #20
 8036fb0:	46bd      	mov	sp, r7
 8036fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036fb6:	4770      	bx	lr

08036fb8 <__cxa_pure_virtual>:
 8036fb8:	b508      	push	{r3, lr}
 8036fba:	f000 f80d 	bl	8036fd8 <_ZSt9terminatev>

08036fbe <_ZN10__cxxabiv111__terminateEPFvvE>:
 8036fbe:	b508      	push	{r3, lr}
 8036fc0:	4780      	blx	r0
 8036fc2:	f000 f80e 	bl	8036fe2 <abort>
	...

08036fc8 <_ZSt13get_terminatev>:
 8036fc8:	4b02      	ldr	r3, [pc, #8]	; (8036fd4 <_ZSt13get_terminatev+0xc>)
 8036fca:	6818      	ldr	r0, [r3, #0]
 8036fcc:	f3bf 8f5b 	dmb	ish
 8036fd0:	4770      	bx	lr
 8036fd2:	bf00      	nop
 8036fd4:	20000d6c 	.word	0x20000d6c

08036fd8 <_ZSt9terminatev>:
 8036fd8:	b508      	push	{r3, lr}
 8036fda:	f7ff fff5 	bl	8036fc8 <_ZSt13get_terminatev>
 8036fde:	f7ff ffee 	bl	8036fbe <_ZN10__cxxabiv111__terminateEPFvvE>

08036fe2 <abort>:
 8036fe2:	b508      	push	{r3, lr}
 8036fe4:	2006      	movs	r0, #6
 8036fe6:	f000 fb6b 	bl	80376c0 <raise>
 8036fea:	2001      	movs	r0, #1
 8036fec:	f7ea fca2 	bl	8021934 <_exit>

08036ff0 <__errno>:
 8036ff0:	4b01      	ldr	r3, [pc, #4]	; (8036ff8 <__errno+0x8>)
 8036ff2:	6818      	ldr	r0, [r3, #0]
 8036ff4:	4770      	bx	lr
 8036ff6:	bf00      	nop
 8036ff8:	20000d70 	.word	0x20000d70

08036ffc <getchar>:
 8036ffc:	4b07      	ldr	r3, [pc, #28]	; (803701c <getchar+0x20>)
 8036ffe:	b510      	push	{r4, lr}
 8037000:	681c      	ldr	r4, [r3, #0]
 8037002:	b124      	cbz	r4, 803700e <getchar+0x12>
 8037004:	69a3      	ldr	r3, [r4, #24]
 8037006:	b913      	cbnz	r3, 803700e <getchar+0x12>
 8037008:	4620      	mov	r0, r4
 803700a:	f000 ff01 	bl	8037e10 <__sinit>
 803700e:	6861      	ldr	r1, [r4, #4]
 8037010:	4620      	mov	r0, r4
 8037012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8037016:	f000 bfc7 	b.w	8037fa8 <_getc_r>
 803701a:	bf00      	nop
 803701c:	20000d70 	.word	0x20000d70

08037020 <__libc_init_array>:
 8037020:	b570      	push	{r4, r5, r6, lr}
 8037022:	4d0d      	ldr	r5, [pc, #52]	; (8037058 <__libc_init_array+0x38>)
 8037024:	4c0d      	ldr	r4, [pc, #52]	; (803705c <__libc_init_array+0x3c>)
 8037026:	1b64      	subs	r4, r4, r5
 8037028:	10a4      	asrs	r4, r4, #2
 803702a:	2600      	movs	r6, #0
 803702c:	42a6      	cmp	r6, r4
 803702e:	d109      	bne.n	8037044 <__libc_init_array+0x24>
 8037030:	4d0b      	ldr	r5, [pc, #44]	; (8037060 <__libc_init_array+0x40>)
 8037032:	4c0c      	ldr	r4, [pc, #48]	; (8037064 <__libc_init_array+0x44>)
 8037034:	f002 fa60 	bl	80394f8 <_init>
 8037038:	1b64      	subs	r4, r4, r5
 803703a:	10a4      	asrs	r4, r4, #2
 803703c:	2600      	movs	r6, #0
 803703e:	42a6      	cmp	r6, r4
 8037040:	d105      	bne.n	803704e <__libc_init_array+0x2e>
 8037042:	bd70      	pop	{r4, r5, r6, pc}
 8037044:	f855 3b04 	ldr.w	r3, [r5], #4
 8037048:	4798      	blx	r3
 803704a:	3601      	adds	r6, #1
 803704c:	e7ee      	b.n	803702c <__libc_init_array+0xc>
 803704e:	f855 3b04 	ldr.w	r3, [r5], #4
 8037052:	4798      	blx	r3
 8037054:	3601      	adds	r6, #1
 8037056:	e7f2      	b.n	803703e <__libc_init_array+0x1e>
 8037058:	08048100 	.word	0x08048100
 803705c:	08048100 	.word	0x08048100
 8037060:	08048100 	.word	0x08048100
 8037064:	08048108 	.word	0x08048108

08037068 <malloc>:
 8037068:	4b02      	ldr	r3, [pc, #8]	; (8037074 <malloc+0xc>)
 803706a:	4601      	mov	r1, r0
 803706c:	6818      	ldr	r0, [r3, #0]
 803706e:	f000 b89d 	b.w	80371ac <_malloc_r>
 8037072:	bf00      	nop
 8037074:	20000d70 	.word	0x20000d70

08037078 <free>:
 8037078:	4b02      	ldr	r3, [pc, #8]	; (8037084 <free+0xc>)
 803707a:	4601      	mov	r1, r0
 803707c:	6818      	ldr	r0, [r3, #0]
 803707e:	f000 b829 	b.w	80370d4 <_free_r>
 8037082:	bf00      	nop
 8037084:	20000d70 	.word	0x20000d70

08037088 <memcmp>:
 8037088:	b510      	push	{r4, lr}
 803708a:	3901      	subs	r1, #1
 803708c:	4402      	add	r2, r0
 803708e:	4290      	cmp	r0, r2
 8037090:	d101      	bne.n	8037096 <memcmp+0xe>
 8037092:	2000      	movs	r0, #0
 8037094:	e005      	b.n	80370a2 <memcmp+0x1a>
 8037096:	7803      	ldrb	r3, [r0, #0]
 8037098:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 803709c:	42a3      	cmp	r3, r4
 803709e:	d001      	beq.n	80370a4 <memcmp+0x1c>
 80370a0:	1b18      	subs	r0, r3, r4
 80370a2:	bd10      	pop	{r4, pc}
 80370a4:	3001      	adds	r0, #1
 80370a6:	e7f2      	b.n	803708e <memcmp+0x6>

080370a8 <memcpy>:
 80370a8:	440a      	add	r2, r1
 80370aa:	4291      	cmp	r1, r2
 80370ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80370b0:	d100      	bne.n	80370b4 <memcpy+0xc>
 80370b2:	4770      	bx	lr
 80370b4:	b510      	push	{r4, lr}
 80370b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80370ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80370be:	4291      	cmp	r1, r2
 80370c0:	d1f9      	bne.n	80370b6 <memcpy+0xe>
 80370c2:	bd10      	pop	{r4, pc}

080370c4 <memset>:
 80370c4:	4402      	add	r2, r0
 80370c6:	4603      	mov	r3, r0
 80370c8:	4293      	cmp	r3, r2
 80370ca:	d100      	bne.n	80370ce <memset+0xa>
 80370cc:	4770      	bx	lr
 80370ce:	f803 1b01 	strb.w	r1, [r3], #1
 80370d2:	e7f9      	b.n	80370c8 <memset+0x4>

080370d4 <_free_r>:
 80370d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80370d6:	2900      	cmp	r1, #0
 80370d8:	d044      	beq.n	8037164 <_free_r+0x90>
 80370da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80370de:	9001      	str	r0, [sp, #4]
 80370e0:	2b00      	cmp	r3, #0
 80370e2:	f1a1 0404 	sub.w	r4, r1, #4
 80370e6:	bfb8      	it	lt
 80370e8:	18e4      	addlt	r4, r4, r3
 80370ea:	f001 f819 	bl	8038120 <__malloc_lock>
 80370ee:	4a1e      	ldr	r2, [pc, #120]	; (8037168 <_free_r+0x94>)
 80370f0:	9801      	ldr	r0, [sp, #4]
 80370f2:	6813      	ldr	r3, [r2, #0]
 80370f4:	b933      	cbnz	r3, 8037104 <_free_r+0x30>
 80370f6:	6063      	str	r3, [r4, #4]
 80370f8:	6014      	str	r4, [r2, #0]
 80370fa:	b003      	add	sp, #12
 80370fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8037100:	f001 b814 	b.w	803812c <__malloc_unlock>
 8037104:	42a3      	cmp	r3, r4
 8037106:	d908      	bls.n	803711a <_free_r+0x46>
 8037108:	6825      	ldr	r5, [r4, #0]
 803710a:	1961      	adds	r1, r4, r5
 803710c:	428b      	cmp	r3, r1
 803710e:	bf01      	itttt	eq
 8037110:	6819      	ldreq	r1, [r3, #0]
 8037112:	685b      	ldreq	r3, [r3, #4]
 8037114:	1949      	addeq	r1, r1, r5
 8037116:	6021      	streq	r1, [r4, #0]
 8037118:	e7ed      	b.n	80370f6 <_free_r+0x22>
 803711a:	461a      	mov	r2, r3
 803711c:	685b      	ldr	r3, [r3, #4]
 803711e:	b10b      	cbz	r3, 8037124 <_free_r+0x50>
 8037120:	42a3      	cmp	r3, r4
 8037122:	d9fa      	bls.n	803711a <_free_r+0x46>
 8037124:	6811      	ldr	r1, [r2, #0]
 8037126:	1855      	adds	r5, r2, r1
 8037128:	42a5      	cmp	r5, r4
 803712a:	d10b      	bne.n	8037144 <_free_r+0x70>
 803712c:	6824      	ldr	r4, [r4, #0]
 803712e:	4421      	add	r1, r4
 8037130:	1854      	adds	r4, r2, r1
 8037132:	42a3      	cmp	r3, r4
 8037134:	6011      	str	r1, [r2, #0]
 8037136:	d1e0      	bne.n	80370fa <_free_r+0x26>
 8037138:	681c      	ldr	r4, [r3, #0]
 803713a:	685b      	ldr	r3, [r3, #4]
 803713c:	6053      	str	r3, [r2, #4]
 803713e:	4421      	add	r1, r4
 8037140:	6011      	str	r1, [r2, #0]
 8037142:	e7da      	b.n	80370fa <_free_r+0x26>
 8037144:	d902      	bls.n	803714c <_free_r+0x78>
 8037146:	230c      	movs	r3, #12
 8037148:	6003      	str	r3, [r0, #0]
 803714a:	e7d6      	b.n	80370fa <_free_r+0x26>
 803714c:	6825      	ldr	r5, [r4, #0]
 803714e:	1961      	adds	r1, r4, r5
 8037150:	428b      	cmp	r3, r1
 8037152:	bf04      	itt	eq
 8037154:	6819      	ldreq	r1, [r3, #0]
 8037156:	685b      	ldreq	r3, [r3, #4]
 8037158:	6063      	str	r3, [r4, #4]
 803715a:	bf04      	itt	eq
 803715c:	1949      	addeq	r1, r1, r5
 803715e:	6021      	streq	r1, [r4, #0]
 8037160:	6054      	str	r4, [r2, #4]
 8037162:	e7ca      	b.n	80370fa <_free_r+0x26>
 8037164:	b003      	add	sp, #12
 8037166:	bd30      	pop	{r4, r5, pc}
 8037168:	20004440 	.word	0x20004440

0803716c <sbrk_aligned>:
 803716c:	b570      	push	{r4, r5, r6, lr}
 803716e:	4e0e      	ldr	r6, [pc, #56]	; (80371a8 <sbrk_aligned+0x3c>)
 8037170:	460c      	mov	r4, r1
 8037172:	6831      	ldr	r1, [r6, #0]
 8037174:	4605      	mov	r5, r0
 8037176:	b911      	cbnz	r1, 803717e <sbrk_aligned+0x12>
 8037178:	f000 f99c 	bl	80374b4 <_sbrk_r>
 803717c:	6030      	str	r0, [r6, #0]
 803717e:	4621      	mov	r1, r4
 8037180:	4628      	mov	r0, r5
 8037182:	f000 f997 	bl	80374b4 <_sbrk_r>
 8037186:	1c43      	adds	r3, r0, #1
 8037188:	d00a      	beq.n	80371a0 <sbrk_aligned+0x34>
 803718a:	1cc4      	adds	r4, r0, #3
 803718c:	f024 0403 	bic.w	r4, r4, #3
 8037190:	42a0      	cmp	r0, r4
 8037192:	d007      	beq.n	80371a4 <sbrk_aligned+0x38>
 8037194:	1a21      	subs	r1, r4, r0
 8037196:	4628      	mov	r0, r5
 8037198:	f000 f98c 	bl	80374b4 <_sbrk_r>
 803719c:	3001      	adds	r0, #1
 803719e:	d101      	bne.n	80371a4 <sbrk_aligned+0x38>
 80371a0:	f04f 34ff 	mov.w	r4, #4294967295
 80371a4:	4620      	mov	r0, r4
 80371a6:	bd70      	pop	{r4, r5, r6, pc}
 80371a8:	20004444 	.word	0x20004444

080371ac <_malloc_r>:
 80371ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80371b0:	1ccd      	adds	r5, r1, #3
 80371b2:	f025 0503 	bic.w	r5, r5, #3
 80371b6:	3508      	adds	r5, #8
 80371b8:	2d0c      	cmp	r5, #12
 80371ba:	bf38      	it	cc
 80371bc:	250c      	movcc	r5, #12
 80371be:	2d00      	cmp	r5, #0
 80371c0:	4607      	mov	r7, r0
 80371c2:	db01      	blt.n	80371c8 <_malloc_r+0x1c>
 80371c4:	42a9      	cmp	r1, r5
 80371c6:	d905      	bls.n	80371d4 <_malloc_r+0x28>
 80371c8:	230c      	movs	r3, #12
 80371ca:	603b      	str	r3, [r7, #0]
 80371cc:	2600      	movs	r6, #0
 80371ce:	4630      	mov	r0, r6
 80371d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80371d4:	4e2e      	ldr	r6, [pc, #184]	; (8037290 <_malloc_r+0xe4>)
 80371d6:	f000 ffa3 	bl	8038120 <__malloc_lock>
 80371da:	6833      	ldr	r3, [r6, #0]
 80371dc:	461c      	mov	r4, r3
 80371de:	bb34      	cbnz	r4, 803722e <_malloc_r+0x82>
 80371e0:	4629      	mov	r1, r5
 80371e2:	4638      	mov	r0, r7
 80371e4:	f7ff ffc2 	bl	803716c <sbrk_aligned>
 80371e8:	1c43      	adds	r3, r0, #1
 80371ea:	4604      	mov	r4, r0
 80371ec:	d14d      	bne.n	803728a <_malloc_r+0xde>
 80371ee:	6834      	ldr	r4, [r6, #0]
 80371f0:	4626      	mov	r6, r4
 80371f2:	2e00      	cmp	r6, #0
 80371f4:	d140      	bne.n	8037278 <_malloc_r+0xcc>
 80371f6:	6823      	ldr	r3, [r4, #0]
 80371f8:	4631      	mov	r1, r6
 80371fa:	4638      	mov	r0, r7
 80371fc:	eb04 0803 	add.w	r8, r4, r3
 8037200:	f000 f958 	bl	80374b4 <_sbrk_r>
 8037204:	4580      	cmp	r8, r0
 8037206:	d13a      	bne.n	803727e <_malloc_r+0xd2>
 8037208:	6821      	ldr	r1, [r4, #0]
 803720a:	3503      	adds	r5, #3
 803720c:	1a6d      	subs	r5, r5, r1
 803720e:	f025 0503 	bic.w	r5, r5, #3
 8037212:	3508      	adds	r5, #8
 8037214:	2d0c      	cmp	r5, #12
 8037216:	bf38      	it	cc
 8037218:	250c      	movcc	r5, #12
 803721a:	4629      	mov	r1, r5
 803721c:	4638      	mov	r0, r7
 803721e:	f7ff ffa5 	bl	803716c <sbrk_aligned>
 8037222:	3001      	adds	r0, #1
 8037224:	d02b      	beq.n	803727e <_malloc_r+0xd2>
 8037226:	6823      	ldr	r3, [r4, #0]
 8037228:	442b      	add	r3, r5
 803722a:	6023      	str	r3, [r4, #0]
 803722c:	e00e      	b.n	803724c <_malloc_r+0xa0>
 803722e:	6822      	ldr	r2, [r4, #0]
 8037230:	1b52      	subs	r2, r2, r5
 8037232:	d41e      	bmi.n	8037272 <_malloc_r+0xc6>
 8037234:	2a0b      	cmp	r2, #11
 8037236:	d916      	bls.n	8037266 <_malloc_r+0xba>
 8037238:	1961      	adds	r1, r4, r5
 803723a:	42a3      	cmp	r3, r4
 803723c:	6025      	str	r5, [r4, #0]
 803723e:	bf18      	it	ne
 8037240:	6059      	strne	r1, [r3, #4]
 8037242:	6863      	ldr	r3, [r4, #4]
 8037244:	bf08      	it	eq
 8037246:	6031      	streq	r1, [r6, #0]
 8037248:	5162      	str	r2, [r4, r5]
 803724a:	604b      	str	r3, [r1, #4]
 803724c:	4638      	mov	r0, r7
 803724e:	f104 060b 	add.w	r6, r4, #11
 8037252:	f000 ff6b 	bl	803812c <__malloc_unlock>
 8037256:	f026 0607 	bic.w	r6, r6, #7
 803725a:	1d23      	adds	r3, r4, #4
 803725c:	1af2      	subs	r2, r6, r3
 803725e:	d0b6      	beq.n	80371ce <_malloc_r+0x22>
 8037260:	1b9b      	subs	r3, r3, r6
 8037262:	50a3      	str	r3, [r4, r2]
 8037264:	e7b3      	b.n	80371ce <_malloc_r+0x22>
 8037266:	6862      	ldr	r2, [r4, #4]
 8037268:	42a3      	cmp	r3, r4
 803726a:	bf0c      	ite	eq
 803726c:	6032      	streq	r2, [r6, #0]
 803726e:	605a      	strne	r2, [r3, #4]
 8037270:	e7ec      	b.n	803724c <_malloc_r+0xa0>
 8037272:	4623      	mov	r3, r4
 8037274:	6864      	ldr	r4, [r4, #4]
 8037276:	e7b2      	b.n	80371de <_malloc_r+0x32>
 8037278:	4634      	mov	r4, r6
 803727a:	6876      	ldr	r6, [r6, #4]
 803727c:	e7b9      	b.n	80371f2 <_malloc_r+0x46>
 803727e:	230c      	movs	r3, #12
 8037280:	603b      	str	r3, [r7, #0]
 8037282:	4638      	mov	r0, r7
 8037284:	f000 ff52 	bl	803812c <__malloc_unlock>
 8037288:	e7a1      	b.n	80371ce <_malloc_r+0x22>
 803728a:	6025      	str	r5, [r4, #0]
 803728c:	e7de      	b.n	803724c <_malloc_r+0xa0>
 803728e:	bf00      	nop
 8037290:	20004440 	.word	0x20004440

08037294 <iprintf>:
 8037294:	b40f      	push	{r0, r1, r2, r3}
 8037296:	4b0a      	ldr	r3, [pc, #40]	; (80372c0 <iprintf+0x2c>)
 8037298:	b513      	push	{r0, r1, r4, lr}
 803729a:	681c      	ldr	r4, [r3, #0]
 803729c:	b124      	cbz	r4, 80372a8 <iprintf+0x14>
 803729e:	69a3      	ldr	r3, [r4, #24]
 80372a0:	b913      	cbnz	r3, 80372a8 <iprintf+0x14>
 80372a2:	4620      	mov	r0, r4
 80372a4:	f000 fdb4 	bl	8037e10 <__sinit>
 80372a8:	ab05      	add	r3, sp, #20
 80372aa:	9a04      	ldr	r2, [sp, #16]
 80372ac:	68a1      	ldr	r1, [r4, #8]
 80372ae:	9301      	str	r3, [sp, #4]
 80372b0:	4620      	mov	r0, r4
 80372b2:	f001 fa99 	bl	80387e8 <_vfiprintf_r>
 80372b6:	b002      	add	sp, #8
 80372b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80372bc:	b004      	add	sp, #16
 80372be:	4770      	bx	lr
 80372c0:	20000d70 	.word	0x20000d70

080372c4 <putchar>:
 80372c4:	4b09      	ldr	r3, [pc, #36]	; (80372ec <putchar+0x28>)
 80372c6:	b513      	push	{r0, r1, r4, lr}
 80372c8:	681c      	ldr	r4, [r3, #0]
 80372ca:	4601      	mov	r1, r0
 80372cc:	b134      	cbz	r4, 80372dc <putchar+0x18>
 80372ce:	69a3      	ldr	r3, [r4, #24]
 80372d0:	b923      	cbnz	r3, 80372dc <putchar+0x18>
 80372d2:	9001      	str	r0, [sp, #4]
 80372d4:	4620      	mov	r0, r4
 80372d6:	f000 fd9b 	bl	8037e10 <__sinit>
 80372da:	9901      	ldr	r1, [sp, #4]
 80372dc:	68a2      	ldr	r2, [r4, #8]
 80372de:	4620      	mov	r0, r4
 80372e0:	b002      	add	sp, #8
 80372e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80372e6:	f001 be95 	b.w	8039014 <_putc_r>
 80372ea:	bf00      	nop
 80372ec:	20000d70 	.word	0x20000d70

080372f0 <_puts_r>:
 80372f0:	b570      	push	{r4, r5, r6, lr}
 80372f2:	460e      	mov	r6, r1
 80372f4:	4605      	mov	r5, r0
 80372f6:	b118      	cbz	r0, 8037300 <_puts_r+0x10>
 80372f8:	6983      	ldr	r3, [r0, #24]
 80372fa:	b90b      	cbnz	r3, 8037300 <_puts_r+0x10>
 80372fc:	f000 fd88 	bl	8037e10 <__sinit>
 8037300:	69ab      	ldr	r3, [r5, #24]
 8037302:	68ac      	ldr	r4, [r5, #8]
 8037304:	b913      	cbnz	r3, 803730c <_puts_r+0x1c>
 8037306:	4628      	mov	r0, r5
 8037308:	f000 fd82 	bl	8037e10 <__sinit>
 803730c:	4b2c      	ldr	r3, [pc, #176]	; (80373c0 <_puts_r+0xd0>)
 803730e:	429c      	cmp	r4, r3
 8037310:	d120      	bne.n	8037354 <_puts_r+0x64>
 8037312:	686c      	ldr	r4, [r5, #4]
 8037314:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8037316:	07db      	lsls	r3, r3, #31
 8037318:	d405      	bmi.n	8037326 <_puts_r+0x36>
 803731a:	89a3      	ldrh	r3, [r4, #12]
 803731c:	0598      	lsls	r0, r3, #22
 803731e:	d402      	bmi.n	8037326 <_puts_r+0x36>
 8037320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8037322:	f000 fe82 	bl	803802a <__retarget_lock_acquire_recursive>
 8037326:	89a3      	ldrh	r3, [r4, #12]
 8037328:	0719      	lsls	r1, r3, #28
 803732a:	d51d      	bpl.n	8037368 <_puts_r+0x78>
 803732c:	6923      	ldr	r3, [r4, #16]
 803732e:	b1db      	cbz	r3, 8037368 <_puts_r+0x78>
 8037330:	3e01      	subs	r6, #1
 8037332:	68a3      	ldr	r3, [r4, #8]
 8037334:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8037338:	3b01      	subs	r3, #1
 803733a:	60a3      	str	r3, [r4, #8]
 803733c:	bb39      	cbnz	r1, 803738e <_puts_r+0x9e>
 803733e:	2b00      	cmp	r3, #0
 8037340:	da38      	bge.n	80373b4 <_puts_r+0xc4>
 8037342:	4622      	mov	r2, r4
 8037344:	210a      	movs	r1, #10
 8037346:	4628      	mov	r0, r5
 8037348:	f000 fb36 	bl	80379b8 <__swbuf_r>
 803734c:	3001      	adds	r0, #1
 803734e:	d011      	beq.n	8037374 <_puts_r+0x84>
 8037350:	250a      	movs	r5, #10
 8037352:	e011      	b.n	8037378 <_puts_r+0x88>
 8037354:	4b1b      	ldr	r3, [pc, #108]	; (80373c4 <_puts_r+0xd4>)
 8037356:	429c      	cmp	r4, r3
 8037358:	d101      	bne.n	803735e <_puts_r+0x6e>
 803735a:	68ac      	ldr	r4, [r5, #8]
 803735c:	e7da      	b.n	8037314 <_puts_r+0x24>
 803735e:	4b1a      	ldr	r3, [pc, #104]	; (80373c8 <_puts_r+0xd8>)
 8037360:	429c      	cmp	r4, r3
 8037362:	bf08      	it	eq
 8037364:	68ec      	ldreq	r4, [r5, #12]
 8037366:	e7d5      	b.n	8037314 <_puts_r+0x24>
 8037368:	4621      	mov	r1, r4
 803736a:	4628      	mov	r0, r5
 803736c:	f000 fb88 	bl	8037a80 <__swsetup_r>
 8037370:	2800      	cmp	r0, #0
 8037372:	d0dd      	beq.n	8037330 <_puts_r+0x40>
 8037374:	f04f 35ff 	mov.w	r5, #4294967295
 8037378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803737a:	07da      	lsls	r2, r3, #31
 803737c:	d405      	bmi.n	803738a <_puts_r+0x9a>
 803737e:	89a3      	ldrh	r3, [r4, #12]
 8037380:	059b      	lsls	r3, r3, #22
 8037382:	d402      	bmi.n	803738a <_puts_r+0x9a>
 8037384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8037386:	f000 fe51 	bl	803802c <__retarget_lock_release_recursive>
 803738a:	4628      	mov	r0, r5
 803738c:	bd70      	pop	{r4, r5, r6, pc}
 803738e:	2b00      	cmp	r3, #0
 8037390:	da04      	bge.n	803739c <_puts_r+0xac>
 8037392:	69a2      	ldr	r2, [r4, #24]
 8037394:	429a      	cmp	r2, r3
 8037396:	dc06      	bgt.n	80373a6 <_puts_r+0xb6>
 8037398:	290a      	cmp	r1, #10
 803739a:	d004      	beq.n	80373a6 <_puts_r+0xb6>
 803739c:	6823      	ldr	r3, [r4, #0]
 803739e:	1c5a      	adds	r2, r3, #1
 80373a0:	6022      	str	r2, [r4, #0]
 80373a2:	7019      	strb	r1, [r3, #0]
 80373a4:	e7c5      	b.n	8037332 <_puts_r+0x42>
 80373a6:	4622      	mov	r2, r4
 80373a8:	4628      	mov	r0, r5
 80373aa:	f000 fb05 	bl	80379b8 <__swbuf_r>
 80373ae:	3001      	adds	r0, #1
 80373b0:	d1bf      	bne.n	8037332 <_puts_r+0x42>
 80373b2:	e7df      	b.n	8037374 <_puts_r+0x84>
 80373b4:	6823      	ldr	r3, [r4, #0]
 80373b6:	250a      	movs	r5, #10
 80373b8:	1c5a      	adds	r2, r3, #1
 80373ba:	6022      	str	r2, [r4, #0]
 80373bc:	701d      	strb	r5, [r3, #0]
 80373be:	e7db      	b.n	8037378 <_puts_r+0x88>
 80373c0:	08048068 	.word	0x08048068
 80373c4:	08048088 	.word	0x08048088
 80373c8:	08048048 	.word	0x08048048

080373cc <puts>:
 80373cc:	4b02      	ldr	r3, [pc, #8]	; (80373d8 <puts+0xc>)
 80373ce:	4601      	mov	r1, r0
 80373d0:	6818      	ldr	r0, [r3, #0]
 80373d2:	f7ff bf8d 	b.w	80372f0 <_puts_r>
 80373d6:	bf00      	nop
 80373d8:	20000d70 	.word	0x20000d70

080373dc <srand>:
 80373dc:	b538      	push	{r3, r4, r5, lr}
 80373de:	4b10      	ldr	r3, [pc, #64]	; (8037420 <srand+0x44>)
 80373e0:	681d      	ldr	r5, [r3, #0]
 80373e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80373e4:	4604      	mov	r4, r0
 80373e6:	b9b3      	cbnz	r3, 8037416 <srand+0x3a>
 80373e8:	2018      	movs	r0, #24
 80373ea:	f7ff fe3d 	bl	8037068 <malloc>
 80373ee:	4602      	mov	r2, r0
 80373f0:	63a8      	str	r0, [r5, #56]	; 0x38
 80373f2:	b920      	cbnz	r0, 80373fe <srand+0x22>
 80373f4:	4b0b      	ldr	r3, [pc, #44]	; (8037424 <srand+0x48>)
 80373f6:	480c      	ldr	r0, [pc, #48]	; (8037428 <srand+0x4c>)
 80373f8:	2142      	movs	r1, #66	; 0x42
 80373fa:	f000 fbaf 	bl	8037b5c <__assert_func>
 80373fe:	490b      	ldr	r1, [pc, #44]	; (803742c <srand+0x50>)
 8037400:	4b0b      	ldr	r3, [pc, #44]	; (8037430 <srand+0x54>)
 8037402:	e9c0 1300 	strd	r1, r3, [r0]
 8037406:	4b0b      	ldr	r3, [pc, #44]	; (8037434 <srand+0x58>)
 8037408:	6083      	str	r3, [r0, #8]
 803740a:	230b      	movs	r3, #11
 803740c:	8183      	strh	r3, [r0, #12]
 803740e:	2100      	movs	r1, #0
 8037410:	2001      	movs	r0, #1
 8037412:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8037416:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8037418:	2200      	movs	r2, #0
 803741a:	611c      	str	r4, [r3, #16]
 803741c:	615a      	str	r2, [r3, #20]
 803741e:	bd38      	pop	{r3, r4, r5, pc}
 8037420:	20000d70 	.word	0x20000d70
 8037424:	08047e98 	.word	0x08047e98
 8037428:	08047eaf 	.word	0x08047eaf
 803742c:	abcd330e 	.word	0xabcd330e
 8037430:	e66d1234 	.word	0xe66d1234
 8037434:	0005deec 	.word	0x0005deec

08037438 <rand>:
 8037438:	4b16      	ldr	r3, [pc, #88]	; (8037494 <rand+0x5c>)
 803743a:	b510      	push	{r4, lr}
 803743c:	681c      	ldr	r4, [r3, #0]
 803743e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8037440:	b9b3      	cbnz	r3, 8037470 <rand+0x38>
 8037442:	2018      	movs	r0, #24
 8037444:	f7ff fe10 	bl	8037068 <malloc>
 8037448:	63a0      	str	r0, [r4, #56]	; 0x38
 803744a:	b928      	cbnz	r0, 8037458 <rand+0x20>
 803744c:	4602      	mov	r2, r0
 803744e:	4b12      	ldr	r3, [pc, #72]	; (8037498 <rand+0x60>)
 8037450:	4812      	ldr	r0, [pc, #72]	; (803749c <rand+0x64>)
 8037452:	214e      	movs	r1, #78	; 0x4e
 8037454:	f000 fb82 	bl	8037b5c <__assert_func>
 8037458:	4a11      	ldr	r2, [pc, #68]	; (80374a0 <rand+0x68>)
 803745a:	4b12      	ldr	r3, [pc, #72]	; (80374a4 <rand+0x6c>)
 803745c:	e9c0 2300 	strd	r2, r3, [r0]
 8037460:	4b11      	ldr	r3, [pc, #68]	; (80374a8 <rand+0x70>)
 8037462:	6083      	str	r3, [r0, #8]
 8037464:	230b      	movs	r3, #11
 8037466:	8183      	strh	r3, [r0, #12]
 8037468:	2201      	movs	r2, #1
 803746a:	2300      	movs	r3, #0
 803746c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8037470:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8037472:	4a0e      	ldr	r2, [pc, #56]	; (80374ac <rand+0x74>)
 8037474:	6920      	ldr	r0, [r4, #16]
 8037476:	6963      	ldr	r3, [r4, #20]
 8037478:	490d      	ldr	r1, [pc, #52]	; (80374b0 <rand+0x78>)
 803747a:	4342      	muls	r2, r0
 803747c:	fb01 2203 	mla	r2, r1, r3, r2
 8037480:	fba0 0101 	umull	r0, r1, r0, r1
 8037484:	1c43      	adds	r3, r0, #1
 8037486:	eb42 0001 	adc.w	r0, r2, r1
 803748a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 803748e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8037492:	bd10      	pop	{r4, pc}
 8037494:	20000d70 	.word	0x20000d70
 8037498:	08047e98 	.word	0x08047e98
 803749c:	08047eaf 	.word	0x08047eaf
 80374a0:	abcd330e 	.word	0xabcd330e
 80374a4:	e66d1234 	.word	0xe66d1234
 80374a8:	0005deec 	.word	0x0005deec
 80374ac:	5851f42d 	.word	0x5851f42d
 80374b0:	4c957f2d 	.word	0x4c957f2d

080374b4 <_sbrk_r>:
 80374b4:	b538      	push	{r3, r4, r5, lr}
 80374b6:	4d06      	ldr	r5, [pc, #24]	; (80374d0 <_sbrk_r+0x1c>)
 80374b8:	2300      	movs	r3, #0
 80374ba:	4604      	mov	r4, r0
 80374bc:	4608      	mov	r0, r1
 80374be:	602b      	str	r3, [r5, #0]
 80374c0:	f7ea fab0 	bl	8021a24 <_sbrk>
 80374c4:	1c43      	adds	r3, r0, #1
 80374c6:	d102      	bne.n	80374ce <_sbrk_r+0x1a>
 80374c8:	682b      	ldr	r3, [r5, #0]
 80374ca:	b103      	cbz	r3, 80374ce <_sbrk_r+0x1a>
 80374cc:	6023      	str	r3, [r4, #0]
 80374ce:	bd38      	pop	{r3, r4, r5, pc}
 80374d0:	2000444c 	.word	0x2000444c

080374d4 <setbuf>:
 80374d4:	2900      	cmp	r1, #0
 80374d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80374da:	bf0c      	ite	eq
 80374dc:	2202      	moveq	r2, #2
 80374de:	2200      	movne	r2, #0
 80374e0:	f000 b800 	b.w	80374e4 <setvbuf>

080374e4 <setvbuf>:
 80374e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80374e8:	461d      	mov	r5, r3
 80374ea:	4b5d      	ldr	r3, [pc, #372]	; (8037660 <setvbuf+0x17c>)
 80374ec:	681f      	ldr	r7, [r3, #0]
 80374ee:	4604      	mov	r4, r0
 80374f0:	460e      	mov	r6, r1
 80374f2:	4690      	mov	r8, r2
 80374f4:	b127      	cbz	r7, 8037500 <setvbuf+0x1c>
 80374f6:	69bb      	ldr	r3, [r7, #24]
 80374f8:	b913      	cbnz	r3, 8037500 <setvbuf+0x1c>
 80374fa:	4638      	mov	r0, r7
 80374fc:	f000 fc88 	bl	8037e10 <__sinit>
 8037500:	4b58      	ldr	r3, [pc, #352]	; (8037664 <setvbuf+0x180>)
 8037502:	429c      	cmp	r4, r3
 8037504:	d167      	bne.n	80375d6 <setvbuf+0xf2>
 8037506:	687c      	ldr	r4, [r7, #4]
 8037508:	f1b8 0f02 	cmp.w	r8, #2
 803750c:	d006      	beq.n	803751c <setvbuf+0x38>
 803750e:	f1b8 0f01 	cmp.w	r8, #1
 8037512:	f200 809f 	bhi.w	8037654 <setvbuf+0x170>
 8037516:	2d00      	cmp	r5, #0
 8037518:	f2c0 809c 	blt.w	8037654 <setvbuf+0x170>
 803751c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803751e:	07db      	lsls	r3, r3, #31
 8037520:	d405      	bmi.n	803752e <setvbuf+0x4a>
 8037522:	89a3      	ldrh	r3, [r4, #12]
 8037524:	0598      	lsls	r0, r3, #22
 8037526:	d402      	bmi.n	803752e <setvbuf+0x4a>
 8037528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803752a:	f000 fd7e 	bl	803802a <__retarget_lock_acquire_recursive>
 803752e:	4621      	mov	r1, r4
 8037530:	4638      	mov	r0, r7
 8037532:	f000 fbc7 	bl	8037cc4 <_fflush_r>
 8037536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8037538:	b141      	cbz	r1, 803754c <setvbuf+0x68>
 803753a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803753e:	4299      	cmp	r1, r3
 8037540:	d002      	beq.n	8037548 <setvbuf+0x64>
 8037542:	4638      	mov	r0, r7
 8037544:	f7ff fdc6 	bl	80370d4 <_free_r>
 8037548:	2300      	movs	r3, #0
 803754a:	6363      	str	r3, [r4, #52]	; 0x34
 803754c:	2300      	movs	r3, #0
 803754e:	61a3      	str	r3, [r4, #24]
 8037550:	6063      	str	r3, [r4, #4]
 8037552:	89a3      	ldrh	r3, [r4, #12]
 8037554:	0619      	lsls	r1, r3, #24
 8037556:	d503      	bpl.n	8037560 <setvbuf+0x7c>
 8037558:	6921      	ldr	r1, [r4, #16]
 803755a:	4638      	mov	r0, r7
 803755c:	f7ff fdba 	bl	80370d4 <_free_r>
 8037560:	89a3      	ldrh	r3, [r4, #12]
 8037562:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8037566:	f023 0303 	bic.w	r3, r3, #3
 803756a:	f1b8 0f02 	cmp.w	r8, #2
 803756e:	81a3      	strh	r3, [r4, #12]
 8037570:	d06c      	beq.n	803764c <setvbuf+0x168>
 8037572:	ab01      	add	r3, sp, #4
 8037574:	466a      	mov	r2, sp
 8037576:	4621      	mov	r1, r4
 8037578:	4638      	mov	r0, r7
 803757a:	f000 fd6b 	bl	8038054 <__swhatbuf_r>
 803757e:	89a3      	ldrh	r3, [r4, #12]
 8037580:	4318      	orrs	r0, r3
 8037582:	81a0      	strh	r0, [r4, #12]
 8037584:	2d00      	cmp	r5, #0
 8037586:	d130      	bne.n	80375ea <setvbuf+0x106>
 8037588:	9d00      	ldr	r5, [sp, #0]
 803758a:	4628      	mov	r0, r5
 803758c:	f7ff fd6c 	bl	8037068 <malloc>
 8037590:	4606      	mov	r6, r0
 8037592:	2800      	cmp	r0, #0
 8037594:	d155      	bne.n	8037642 <setvbuf+0x15e>
 8037596:	f8dd 9000 	ldr.w	r9, [sp]
 803759a:	45a9      	cmp	r9, r5
 803759c:	d14a      	bne.n	8037634 <setvbuf+0x150>
 803759e:	f04f 35ff 	mov.w	r5, #4294967295
 80375a2:	2200      	movs	r2, #0
 80375a4:	60a2      	str	r2, [r4, #8]
 80375a6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80375aa:	6022      	str	r2, [r4, #0]
 80375ac:	6122      	str	r2, [r4, #16]
 80375ae:	2201      	movs	r2, #1
 80375b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80375b4:	6162      	str	r2, [r4, #20]
 80375b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80375b8:	f043 0302 	orr.w	r3, r3, #2
 80375bc:	07d2      	lsls	r2, r2, #31
 80375be:	81a3      	strh	r3, [r4, #12]
 80375c0:	d405      	bmi.n	80375ce <setvbuf+0xea>
 80375c2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80375c6:	d102      	bne.n	80375ce <setvbuf+0xea>
 80375c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80375ca:	f000 fd2f 	bl	803802c <__retarget_lock_release_recursive>
 80375ce:	4628      	mov	r0, r5
 80375d0:	b003      	add	sp, #12
 80375d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80375d6:	4b24      	ldr	r3, [pc, #144]	; (8037668 <setvbuf+0x184>)
 80375d8:	429c      	cmp	r4, r3
 80375da:	d101      	bne.n	80375e0 <setvbuf+0xfc>
 80375dc:	68bc      	ldr	r4, [r7, #8]
 80375de:	e793      	b.n	8037508 <setvbuf+0x24>
 80375e0:	4b22      	ldr	r3, [pc, #136]	; (803766c <setvbuf+0x188>)
 80375e2:	429c      	cmp	r4, r3
 80375e4:	bf08      	it	eq
 80375e6:	68fc      	ldreq	r4, [r7, #12]
 80375e8:	e78e      	b.n	8037508 <setvbuf+0x24>
 80375ea:	2e00      	cmp	r6, #0
 80375ec:	d0cd      	beq.n	803758a <setvbuf+0xa6>
 80375ee:	69bb      	ldr	r3, [r7, #24]
 80375f0:	b913      	cbnz	r3, 80375f8 <setvbuf+0x114>
 80375f2:	4638      	mov	r0, r7
 80375f4:	f000 fc0c 	bl	8037e10 <__sinit>
 80375f8:	f1b8 0f01 	cmp.w	r8, #1
 80375fc:	bf08      	it	eq
 80375fe:	89a3      	ldrheq	r3, [r4, #12]
 8037600:	6026      	str	r6, [r4, #0]
 8037602:	bf04      	itt	eq
 8037604:	f043 0301 	orreq.w	r3, r3, #1
 8037608:	81a3      	strheq	r3, [r4, #12]
 803760a:	89a2      	ldrh	r2, [r4, #12]
 803760c:	f012 0308 	ands.w	r3, r2, #8
 8037610:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8037614:	d01c      	beq.n	8037650 <setvbuf+0x16c>
 8037616:	07d3      	lsls	r3, r2, #31
 8037618:	bf41      	itttt	mi
 803761a:	2300      	movmi	r3, #0
 803761c:	426d      	negmi	r5, r5
 803761e:	60a3      	strmi	r3, [r4, #8]
 8037620:	61a5      	strmi	r5, [r4, #24]
 8037622:	bf58      	it	pl
 8037624:	60a5      	strpl	r5, [r4, #8]
 8037626:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8037628:	f015 0501 	ands.w	r5, r5, #1
 803762c:	d115      	bne.n	803765a <setvbuf+0x176>
 803762e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8037632:	e7c8      	b.n	80375c6 <setvbuf+0xe2>
 8037634:	4648      	mov	r0, r9
 8037636:	f7ff fd17 	bl	8037068 <malloc>
 803763a:	4606      	mov	r6, r0
 803763c:	2800      	cmp	r0, #0
 803763e:	d0ae      	beq.n	803759e <setvbuf+0xba>
 8037640:	464d      	mov	r5, r9
 8037642:	89a3      	ldrh	r3, [r4, #12]
 8037644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8037648:	81a3      	strh	r3, [r4, #12]
 803764a:	e7d0      	b.n	80375ee <setvbuf+0x10a>
 803764c:	2500      	movs	r5, #0
 803764e:	e7a8      	b.n	80375a2 <setvbuf+0xbe>
 8037650:	60a3      	str	r3, [r4, #8]
 8037652:	e7e8      	b.n	8037626 <setvbuf+0x142>
 8037654:	f04f 35ff 	mov.w	r5, #4294967295
 8037658:	e7b9      	b.n	80375ce <setvbuf+0xea>
 803765a:	2500      	movs	r5, #0
 803765c:	e7b7      	b.n	80375ce <setvbuf+0xea>
 803765e:	bf00      	nop
 8037660:	20000d70 	.word	0x20000d70
 8037664:	08048068 	.word	0x08048068
 8037668:	08048088 	.word	0x08048088
 803766c:	08048048 	.word	0x08048048

08037670 <_raise_r>:
 8037670:	291f      	cmp	r1, #31
 8037672:	b538      	push	{r3, r4, r5, lr}
 8037674:	4604      	mov	r4, r0
 8037676:	460d      	mov	r5, r1
 8037678:	d904      	bls.n	8037684 <_raise_r+0x14>
 803767a:	2316      	movs	r3, #22
 803767c:	6003      	str	r3, [r0, #0]
 803767e:	f04f 30ff 	mov.w	r0, #4294967295
 8037682:	bd38      	pop	{r3, r4, r5, pc}
 8037684:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8037686:	b112      	cbz	r2, 803768e <_raise_r+0x1e>
 8037688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803768c:	b94b      	cbnz	r3, 80376a2 <_raise_r+0x32>
 803768e:	4620      	mov	r0, r4
 8037690:	f000 f830 	bl	80376f4 <_getpid_r>
 8037694:	462a      	mov	r2, r5
 8037696:	4601      	mov	r1, r0
 8037698:	4620      	mov	r0, r4
 803769a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803769e:	f000 b817 	b.w	80376d0 <_kill_r>
 80376a2:	2b01      	cmp	r3, #1
 80376a4:	d00a      	beq.n	80376bc <_raise_r+0x4c>
 80376a6:	1c59      	adds	r1, r3, #1
 80376a8:	d103      	bne.n	80376b2 <_raise_r+0x42>
 80376aa:	2316      	movs	r3, #22
 80376ac:	6003      	str	r3, [r0, #0]
 80376ae:	2001      	movs	r0, #1
 80376b0:	e7e7      	b.n	8037682 <_raise_r+0x12>
 80376b2:	2400      	movs	r4, #0
 80376b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80376b8:	4628      	mov	r0, r5
 80376ba:	4798      	blx	r3
 80376bc:	2000      	movs	r0, #0
 80376be:	e7e0      	b.n	8037682 <_raise_r+0x12>

080376c0 <raise>:
 80376c0:	4b02      	ldr	r3, [pc, #8]	; (80376cc <raise+0xc>)
 80376c2:	4601      	mov	r1, r0
 80376c4:	6818      	ldr	r0, [r3, #0]
 80376c6:	f7ff bfd3 	b.w	8037670 <_raise_r>
 80376ca:	bf00      	nop
 80376cc:	20000d70 	.word	0x20000d70

080376d0 <_kill_r>:
 80376d0:	b538      	push	{r3, r4, r5, lr}
 80376d2:	4d07      	ldr	r5, [pc, #28]	; (80376f0 <_kill_r+0x20>)
 80376d4:	2300      	movs	r3, #0
 80376d6:	4604      	mov	r4, r0
 80376d8:	4608      	mov	r0, r1
 80376da:	4611      	mov	r1, r2
 80376dc:	602b      	str	r3, [r5, #0]
 80376de:	f7ea f919 	bl	8021914 <_kill>
 80376e2:	1c43      	adds	r3, r0, #1
 80376e4:	d102      	bne.n	80376ec <_kill_r+0x1c>
 80376e6:	682b      	ldr	r3, [r5, #0]
 80376e8:	b103      	cbz	r3, 80376ec <_kill_r+0x1c>
 80376ea:	6023      	str	r3, [r4, #0]
 80376ec:	bd38      	pop	{r3, r4, r5, pc}
 80376ee:	bf00      	nop
 80376f0:	2000444c 	.word	0x2000444c

080376f4 <_getpid_r>:
 80376f4:	f7ea b906 	b.w	8021904 <_getpid>

080376f8 <siprintf>:
 80376f8:	b40e      	push	{r1, r2, r3}
 80376fa:	b500      	push	{lr}
 80376fc:	b09c      	sub	sp, #112	; 0x70
 80376fe:	ab1d      	add	r3, sp, #116	; 0x74
 8037700:	9002      	str	r0, [sp, #8]
 8037702:	9006      	str	r0, [sp, #24]
 8037704:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8037708:	4809      	ldr	r0, [pc, #36]	; (8037730 <siprintf+0x38>)
 803770a:	9107      	str	r1, [sp, #28]
 803770c:	9104      	str	r1, [sp, #16]
 803770e:	4909      	ldr	r1, [pc, #36]	; (8037734 <siprintf+0x3c>)
 8037710:	f853 2b04 	ldr.w	r2, [r3], #4
 8037714:	9105      	str	r1, [sp, #20]
 8037716:	6800      	ldr	r0, [r0, #0]
 8037718:	9301      	str	r3, [sp, #4]
 803771a:	a902      	add	r1, sp, #8
 803771c:	f000 fd68 	bl	80381f0 <_svfiprintf_r>
 8037720:	9b02      	ldr	r3, [sp, #8]
 8037722:	2200      	movs	r2, #0
 8037724:	701a      	strb	r2, [r3, #0]
 8037726:	b01c      	add	sp, #112	; 0x70
 8037728:	f85d eb04 	ldr.w	lr, [sp], #4
 803772c:	b003      	add	sp, #12
 803772e:	4770      	bx	lr
 8037730:	20000d70 	.word	0x20000d70
 8037734:	ffff0208 	.word	0xffff0208

08037738 <siscanf>:
 8037738:	b40e      	push	{r1, r2, r3}
 803773a:	b510      	push	{r4, lr}
 803773c:	b09f      	sub	sp, #124	; 0x7c
 803773e:	ac21      	add	r4, sp, #132	; 0x84
 8037740:	f44f 7101 	mov.w	r1, #516	; 0x204
 8037744:	f854 2b04 	ldr.w	r2, [r4], #4
 8037748:	9201      	str	r2, [sp, #4]
 803774a:	f8ad 101c 	strh.w	r1, [sp, #28]
 803774e:	9004      	str	r0, [sp, #16]
 8037750:	9008      	str	r0, [sp, #32]
 8037752:	f7e8 fd47 	bl	80201e4 <strlen>
 8037756:	4b0c      	ldr	r3, [pc, #48]	; (8037788 <siscanf+0x50>)
 8037758:	9005      	str	r0, [sp, #20]
 803775a:	9009      	str	r0, [sp, #36]	; 0x24
 803775c:	930d      	str	r3, [sp, #52]	; 0x34
 803775e:	480b      	ldr	r0, [pc, #44]	; (803778c <siscanf+0x54>)
 8037760:	9a01      	ldr	r2, [sp, #4]
 8037762:	6800      	ldr	r0, [r0, #0]
 8037764:	9403      	str	r4, [sp, #12]
 8037766:	2300      	movs	r3, #0
 8037768:	9311      	str	r3, [sp, #68]	; 0x44
 803776a:	9316      	str	r3, [sp, #88]	; 0x58
 803776c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8037770:	f8ad 301e 	strh.w	r3, [sp, #30]
 8037774:	a904      	add	r1, sp, #16
 8037776:	4623      	mov	r3, r4
 8037778:	f000 fe94 	bl	80384a4 <__ssvfiscanf_r>
 803777c:	b01f      	add	sp, #124	; 0x7c
 803777e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8037782:	b003      	add	sp, #12
 8037784:	4770      	bx	lr
 8037786:	bf00      	nop
 8037788:	080377b3 	.word	0x080377b3
 803778c:	20000d70 	.word	0x20000d70

08037790 <__sread>:
 8037790:	b510      	push	{r4, lr}
 8037792:	460c      	mov	r4, r1
 8037794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037798:	f001 fc84 	bl	80390a4 <_read_r>
 803779c:	2800      	cmp	r0, #0
 803779e:	bfab      	itete	ge
 80377a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80377a2:	89a3      	ldrhlt	r3, [r4, #12]
 80377a4:	181b      	addge	r3, r3, r0
 80377a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80377aa:	bfac      	ite	ge
 80377ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80377ae:	81a3      	strhlt	r3, [r4, #12]
 80377b0:	bd10      	pop	{r4, pc}

080377b2 <__seofread>:
 80377b2:	2000      	movs	r0, #0
 80377b4:	4770      	bx	lr

080377b6 <__swrite>:
 80377b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80377ba:	461f      	mov	r7, r3
 80377bc:	898b      	ldrh	r3, [r1, #12]
 80377be:	05db      	lsls	r3, r3, #23
 80377c0:	4605      	mov	r5, r0
 80377c2:	460c      	mov	r4, r1
 80377c4:	4616      	mov	r6, r2
 80377c6:	d505      	bpl.n	80377d4 <__swrite+0x1e>
 80377c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80377cc:	2302      	movs	r3, #2
 80377ce:	2200      	movs	r2, #0
 80377d0:	f000 fc2e 	bl	8038030 <_lseek_r>
 80377d4:	89a3      	ldrh	r3, [r4, #12]
 80377d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80377da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80377de:	81a3      	strh	r3, [r4, #12]
 80377e0:	4632      	mov	r2, r6
 80377e2:	463b      	mov	r3, r7
 80377e4:	4628      	mov	r0, r5
 80377e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80377ea:	f000 b937 	b.w	8037a5c <_write_r>

080377ee <__sseek>:
 80377ee:	b510      	push	{r4, lr}
 80377f0:	460c      	mov	r4, r1
 80377f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80377f6:	f000 fc1b 	bl	8038030 <_lseek_r>
 80377fa:	1c43      	adds	r3, r0, #1
 80377fc:	89a3      	ldrh	r3, [r4, #12]
 80377fe:	bf15      	itete	ne
 8037800:	6560      	strne	r0, [r4, #84]	; 0x54
 8037802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8037806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803780a:	81a3      	strheq	r3, [r4, #12]
 803780c:	bf18      	it	ne
 803780e:	81a3      	strhne	r3, [r4, #12]
 8037810:	bd10      	pop	{r4, pc}

08037812 <__sclose>:
 8037812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037816:	f000 b9bf 	b.w	8037b98 <_close_r>

0803781a <strchr>:
 803781a:	b2c9      	uxtb	r1, r1
 803781c:	4603      	mov	r3, r0
 803781e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8037822:	b11a      	cbz	r2, 803782c <strchr+0x12>
 8037824:	428a      	cmp	r2, r1
 8037826:	d1f9      	bne.n	803781c <strchr+0x2>
 8037828:	4618      	mov	r0, r3
 803782a:	4770      	bx	lr
 803782c:	2900      	cmp	r1, #0
 803782e:	bf18      	it	ne
 8037830:	2300      	movne	r3, #0
 8037832:	e7f9      	b.n	8037828 <strchr+0xe>

08037834 <strcpy>:
 8037834:	4603      	mov	r3, r0
 8037836:	f811 2b01 	ldrb.w	r2, [r1], #1
 803783a:	f803 2b01 	strb.w	r2, [r3], #1
 803783e:	2a00      	cmp	r2, #0
 8037840:	d1f9      	bne.n	8037836 <strcpy+0x2>
 8037842:	4770      	bx	lr

08037844 <__strtok_r>:
 8037844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8037846:	b908      	cbnz	r0, 803784c <__strtok_r+0x8>
 8037848:	6810      	ldr	r0, [r2, #0]
 803784a:	b188      	cbz	r0, 8037870 <__strtok_r+0x2c>
 803784c:	4604      	mov	r4, r0
 803784e:	4620      	mov	r0, r4
 8037850:	f814 5b01 	ldrb.w	r5, [r4], #1
 8037854:	460f      	mov	r7, r1
 8037856:	f817 6b01 	ldrb.w	r6, [r7], #1
 803785a:	b91e      	cbnz	r6, 8037864 <__strtok_r+0x20>
 803785c:	b965      	cbnz	r5, 8037878 <__strtok_r+0x34>
 803785e:	6015      	str	r5, [r2, #0]
 8037860:	4628      	mov	r0, r5
 8037862:	e005      	b.n	8037870 <__strtok_r+0x2c>
 8037864:	42b5      	cmp	r5, r6
 8037866:	d1f6      	bne.n	8037856 <__strtok_r+0x12>
 8037868:	2b00      	cmp	r3, #0
 803786a:	d1f0      	bne.n	803784e <__strtok_r+0xa>
 803786c:	6014      	str	r4, [r2, #0]
 803786e:	7003      	strb	r3, [r0, #0]
 8037870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8037872:	461c      	mov	r4, r3
 8037874:	e00c      	b.n	8037890 <__strtok_r+0x4c>
 8037876:	b915      	cbnz	r5, 803787e <__strtok_r+0x3a>
 8037878:	f814 3b01 	ldrb.w	r3, [r4], #1
 803787c:	460e      	mov	r6, r1
 803787e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8037882:	42ab      	cmp	r3, r5
 8037884:	d1f7      	bne.n	8037876 <__strtok_r+0x32>
 8037886:	2b00      	cmp	r3, #0
 8037888:	d0f3      	beq.n	8037872 <__strtok_r+0x2e>
 803788a:	2300      	movs	r3, #0
 803788c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8037890:	6014      	str	r4, [r2, #0]
 8037892:	e7ed      	b.n	8037870 <__strtok_r+0x2c>

08037894 <strtok_r>:
 8037894:	2301      	movs	r3, #1
 8037896:	f7ff bfd5 	b.w	8037844 <__strtok_r>
	...

0803789c <_strtol_l.constprop.0>:
 803789c:	2b01      	cmp	r3, #1
 803789e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80378a2:	d001      	beq.n	80378a8 <_strtol_l.constprop.0+0xc>
 80378a4:	2b24      	cmp	r3, #36	; 0x24
 80378a6:	d906      	bls.n	80378b6 <_strtol_l.constprop.0+0x1a>
 80378a8:	f7ff fba2 	bl	8036ff0 <__errno>
 80378ac:	2316      	movs	r3, #22
 80378ae:	6003      	str	r3, [r0, #0]
 80378b0:	2000      	movs	r0, #0
 80378b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80378b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 803799c <_strtol_l.constprop.0+0x100>
 80378ba:	460d      	mov	r5, r1
 80378bc:	462e      	mov	r6, r5
 80378be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80378c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80378c6:	f017 0708 	ands.w	r7, r7, #8
 80378ca:	d1f7      	bne.n	80378bc <_strtol_l.constprop.0+0x20>
 80378cc:	2c2d      	cmp	r4, #45	; 0x2d
 80378ce:	d132      	bne.n	8037936 <_strtol_l.constprop.0+0x9a>
 80378d0:	782c      	ldrb	r4, [r5, #0]
 80378d2:	2701      	movs	r7, #1
 80378d4:	1cb5      	adds	r5, r6, #2
 80378d6:	2b00      	cmp	r3, #0
 80378d8:	d05b      	beq.n	8037992 <_strtol_l.constprop.0+0xf6>
 80378da:	2b10      	cmp	r3, #16
 80378dc:	d109      	bne.n	80378f2 <_strtol_l.constprop.0+0x56>
 80378de:	2c30      	cmp	r4, #48	; 0x30
 80378e0:	d107      	bne.n	80378f2 <_strtol_l.constprop.0+0x56>
 80378e2:	782c      	ldrb	r4, [r5, #0]
 80378e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80378e8:	2c58      	cmp	r4, #88	; 0x58
 80378ea:	d14d      	bne.n	8037988 <_strtol_l.constprop.0+0xec>
 80378ec:	786c      	ldrb	r4, [r5, #1]
 80378ee:	2310      	movs	r3, #16
 80378f0:	3502      	adds	r5, #2
 80378f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80378f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80378fa:	f04f 0c00 	mov.w	ip, #0
 80378fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8037902:	4666      	mov	r6, ip
 8037904:	fb03 8a19 	mls	sl, r3, r9, r8
 8037908:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 803790c:	f1be 0f09 	cmp.w	lr, #9
 8037910:	d816      	bhi.n	8037940 <_strtol_l.constprop.0+0xa4>
 8037912:	4674      	mov	r4, lr
 8037914:	42a3      	cmp	r3, r4
 8037916:	dd24      	ble.n	8037962 <_strtol_l.constprop.0+0xc6>
 8037918:	f1bc 0f00 	cmp.w	ip, #0
 803791c:	db1e      	blt.n	803795c <_strtol_l.constprop.0+0xc0>
 803791e:	45b1      	cmp	r9, r6
 8037920:	d31c      	bcc.n	803795c <_strtol_l.constprop.0+0xc0>
 8037922:	d101      	bne.n	8037928 <_strtol_l.constprop.0+0x8c>
 8037924:	45a2      	cmp	sl, r4
 8037926:	db19      	blt.n	803795c <_strtol_l.constprop.0+0xc0>
 8037928:	fb06 4603 	mla	r6, r6, r3, r4
 803792c:	f04f 0c01 	mov.w	ip, #1
 8037930:	f815 4b01 	ldrb.w	r4, [r5], #1
 8037934:	e7e8      	b.n	8037908 <_strtol_l.constprop.0+0x6c>
 8037936:	2c2b      	cmp	r4, #43	; 0x2b
 8037938:	bf04      	itt	eq
 803793a:	782c      	ldrbeq	r4, [r5, #0]
 803793c:	1cb5      	addeq	r5, r6, #2
 803793e:	e7ca      	b.n	80378d6 <_strtol_l.constprop.0+0x3a>
 8037940:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8037944:	f1be 0f19 	cmp.w	lr, #25
 8037948:	d801      	bhi.n	803794e <_strtol_l.constprop.0+0xb2>
 803794a:	3c37      	subs	r4, #55	; 0x37
 803794c:	e7e2      	b.n	8037914 <_strtol_l.constprop.0+0x78>
 803794e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8037952:	f1be 0f19 	cmp.w	lr, #25
 8037956:	d804      	bhi.n	8037962 <_strtol_l.constprop.0+0xc6>
 8037958:	3c57      	subs	r4, #87	; 0x57
 803795a:	e7db      	b.n	8037914 <_strtol_l.constprop.0+0x78>
 803795c:	f04f 3cff 	mov.w	ip, #4294967295
 8037960:	e7e6      	b.n	8037930 <_strtol_l.constprop.0+0x94>
 8037962:	f1bc 0f00 	cmp.w	ip, #0
 8037966:	da05      	bge.n	8037974 <_strtol_l.constprop.0+0xd8>
 8037968:	2322      	movs	r3, #34	; 0x22
 803796a:	6003      	str	r3, [r0, #0]
 803796c:	4646      	mov	r6, r8
 803796e:	b942      	cbnz	r2, 8037982 <_strtol_l.constprop.0+0xe6>
 8037970:	4630      	mov	r0, r6
 8037972:	e79e      	b.n	80378b2 <_strtol_l.constprop.0+0x16>
 8037974:	b107      	cbz	r7, 8037978 <_strtol_l.constprop.0+0xdc>
 8037976:	4276      	negs	r6, r6
 8037978:	2a00      	cmp	r2, #0
 803797a:	d0f9      	beq.n	8037970 <_strtol_l.constprop.0+0xd4>
 803797c:	f1bc 0f00 	cmp.w	ip, #0
 8037980:	d000      	beq.n	8037984 <_strtol_l.constprop.0+0xe8>
 8037982:	1e69      	subs	r1, r5, #1
 8037984:	6011      	str	r1, [r2, #0]
 8037986:	e7f3      	b.n	8037970 <_strtol_l.constprop.0+0xd4>
 8037988:	2430      	movs	r4, #48	; 0x30
 803798a:	2b00      	cmp	r3, #0
 803798c:	d1b1      	bne.n	80378f2 <_strtol_l.constprop.0+0x56>
 803798e:	2308      	movs	r3, #8
 8037990:	e7af      	b.n	80378f2 <_strtol_l.constprop.0+0x56>
 8037992:	2c30      	cmp	r4, #48	; 0x30
 8037994:	d0a5      	beq.n	80378e2 <_strtol_l.constprop.0+0x46>
 8037996:	230a      	movs	r3, #10
 8037998:	e7ab      	b.n	80378f2 <_strtol_l.constprop.0+0x56>
 803799a:	bf00      	nop
 803799c:	08047f47 	.word	0x08047f47

080379a0 <_strtol_r>:
 80379a0:	f7ff bf7c 	b.w	803789c <_strtol_l.constprop.0>

080379a4 <strtol>:
 80379a4:	4613      	mov	r3, r2
 80379a6:	460a      	mov	r2, r1
 80379a8:	4601      	mov	r1, r0
 80379aa:	4802      	ldr	r0, [pc, #8]	; (80379b4 <strtol+0x10>)
 80379ac:	6800      	ldr	r0, [r0, #0]
 80379ae:	f7ff bf75 	b.w	803789c <_strtol_l.constprop.0>
 80379b2:	bf00      	nop
 80379b4:	20000d70 	.word	0x20000d70

080379b8 <__swbuf_r>:
 80379b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80379ba:	460e      	mov	r6, r1
 80379bc:	4614      	mov	r4, r2
 80379be:	4605      	mov	r5, r0
 80379c0:	b118      	cbz	r0, 80379ca <__swbuf_r+0x12>
 80379c2:	6983      	ldr	r3, [r0, #24]
 80379c4:	b90b      	cbnz	r3, 80379ca <__swbuf_r+0x12>
 80379c6:	f000 fa23 	bl	8037e10 <__sinit>
 80379ca:	4b21      	ldr	r3, [pc, #132]	; (8037a50 <__swbuf_r+0x98>)
 80379cc:	429c      	cmp	r4, r3
 80379ce:	d12b      	bne.n	8037a28 <__swbuf_r+0x70>
 80379d0:	686c      	ldr	r4, [r5, #4]
 80379d2:	69a3      	ldr	r3, [r4, #24]
 80379d4:	60a3      	str	r3, [r4, #8]
 80379d6:	89a3      	ldrh	r3, [r4, #12]
 80379d8:	071a      	lsls	r2, r3, #28
 80379da:	d52f      	bpl.n	8037a3c <__swbuf_r+0x84>
 80379dc:	6923      	ldr	r3, [r4, #16]
 80379de:	b36b      	cbz	r3, 8037a3c <__swbuf_r+0x84>
 80379e0:	6923      	ldr	r3, [r4, #16]
 80379e2:	6820      	ldr	r0, [r4, #0]
 80379e4:	1ac0      	subs	r0, r0, r3
 80379e6:	6963      	ldr	r3, [r4, #20]
 80379e8:	b2f6      	uxtb	r6, r6
 80379ea:	4283      	cmp	r3, r0
 80379ec:	4637      	mov	r7, r6
 80379ee:	dc04      	bgt.n	80379fa <__swbuf_r+0x42>
 80379f0:	4621      	mov	r1, r4
 80379f2:	4628      	mov	r0, r5
 80379f4:	f000 f966 	bl	8037cc4 <_fflush_r>
 80379f8:	bb30      	cbnz	r0, 8037a48 <__swbuf_r+0x90>
 80379fa:	68a3      	ldr	r3, [r4, #8]
 80379fc:	3b01      	subs	r3, #1
 80379fe:	60a3      	str	r3, [r4, #8]
 8037a00:	6823      	ldr	r3, [r4, #0]
 8037a02:	1c5a      	adds	r2, r3, #1
 8037a04:	6022      	str	r2, [r4, #0]
 8037a06:	701e      	strb	r6, [r3, #0]
 8037a08:	6963      	ldr	r3, [r4, #20]
 8037a0a:	3001      	adds	r0, #1
 8037a0c:	4283      	cmp	r3, r0
 8037a0e:	d004      	beq.n	8037a1a <__swbuf_r+0x62>
 8037a10:	89a3      	ldrh	r3, [r4, #12]
 8037a12:	07db      	lsls	r3, r3, #31
 8037a14:	d506      	bpl.n	8037a24 <__swbuf_r+0x6c>
 8037a16:	2e0a      	cmp	r6, #10
 8037a18:	d104      	bne.n	8037a24 <__swbuf_r+0x6c>
 8037a1a:	4621      	mov	r1, r4
 8037a1c:	4628      	mov	r0, r5
 8037a1e:	f000 f951 	bl	8037cc4 <_fflush_r>
 8037a22:	b988      	cbnz	r0, 8037a48 <__swbuf_r+0x90>
 8037a24:	4638      	mov	r0, r7
 8037a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8037a28:	4b0a      	ldr	r3, [pc, #40]	; (8037a54 <__swbuf_r+0x9c>)
 8037a2a:	429c      	cmp	r4, r3
 8037a2c:	d101      	bne.n	8037a32 <__swbuf_r+0x7a>
 8037a2e:	68ac      	ldr	r4, [r5, #8]
 8037a30:	e7cf      	b.n	80379d2 <__swbuf_r+0x1a>
 8037a32:	4b09      	ldr	r3, [pc, #36]	; (8037a58 <__swbuf_r+0xa0>)
 8037a34:	429c      	cmp	r4, r3
 8037a36:	bf08      	it	eq
 8037a38:	68ec      	ldreq	r4, [r5, #12]
 8037a3a:	e7ca      	b.n	80379d2 <__swbuf_r+0x1a>
 8037a3c:	4621      	mov	r1, r4
 8037a3e:	4628      	mov	r0, r5
 8037a40:	f000 f81e 	bl	8037a80 <__swsetup_r>
 8037a44:	2800      	cmp	r0, #0
 8037a46:	d0cb      	beq.n	80379e0 <__swbuf_r+0x28>
 8037a48:	f04f 37ff 	mov.w	r7, #4294967295
 8037a4c:	e7ea      	b.n	8037a24 <__swbuf_r+0x6c>
 8037a4e:	bf00      	nop
 8037a50:	08048068 	.word	0x08048068
 8037a54:	08048088 	.word	0x08048088
 8037a58:	08048048 	.word	0x08048048

08037a5c <_write_r>:
 8037a5c:	b538      	push	{r3, r4, r5, lr}
 8037a5e:	4d07      	ldr	r5, [pc, #28]	; (8037a7c <_write_r+0x20>)
 8037a60:	4604      	mov	r4, r0
 8037a62:	4608      	mov	r0, r1
 8037a64:	4611      	mov	r1, r2
 8037a66:	2200      	movs	r2, #0
 8037a68:	602a      	str	r2, [r5, #0]
 8037a6a:	461a      	mov	r2, r3
 8037a6c:	f7e9 ff89 	bl	8021982 <_write>
 8037a70:	1c43      	adds	r3, r0, #1
 8037a72:	d102      	bne.n	8037a7a <_write_r+0x1e>
 8037a74:	682b      	ldr	r3, [r5, #0]
 8037a76:	b103      	cbz	r3, 8037a7a <_write_r+0x1e>
 8037a78:	6023      	str	r3, [r4, #0]
 8037a7a:	bd38      	pop	{r3, r4, r5, pc}
 8037a7c:	2000444c 	.word	0x2000444c

08037a80 <__swsetup_r>:
 8037a80:	4b32      	ldr	r3, [pc, #200]	; (8037b4c <__swsetup_r+0xcc>)
 8037a82:	b570      	push	{r4, r5, r6, lr}
 8037a84:	681d      	ldr	r5, [r3, #0]
 8037a86:	4606      	mov	r6, r0
 8037a88:	460c      	mov	r4, r1
 8037a8a:	b125      	cbz	r5, 8037a96 <__swsetup_r+0x16>
 8037a8c:	69ab      	ldr	r3, [r5, #24]
 8037a8e:	b913      	cbnz	r3, 8037a96 <__swsetup_r+0x16>
 8037a90:	4628      	mov	r0, r5
 8037a92:	f000 f9bd 	bl	8037e10 <__sinit>
 8037a96:	4b2e      	ldr	r3, [pc, #184]	; (8037b50 <__swsetup_r+0xd0>)
 8037a98:	429c      	cmp	r4, r3
 8037a9a:	d10f      	bne.n	8037abc <__swsetup_r+0x3c>
 8037a9c:	686c      	ldr	r4, [r5, #4]
 8037a9e:	89a3      	ldrh	r3, [r4, #12]
 8037aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8037aa4:	0719      	lsls	r1, r3, #28
 8037aa6:	d42c      	bmi.n	8037b02 <__swsetup_r+0x82>
 8037aa8:	06dd      	lsls	r5, r3, #27
 8037aaa:	d411      	bmi.n	8037ad0 <__swsetup_r+0x50>
 8037aac:	2309      	movs	r3, #9
 8037aae:	6033      	str	r3, [r6, #0]
 8037ab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8037ab4:	81a3      	strh	r3, [r4, #12]
 8037ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8037aba:	e03e      	b.n	8037b3a <__swsetup_r+0xba>
 8037abc:	4b25      	ldr	r3, [pc, #148]	; (8037b54 <__swsetup_r+0xd4>)
 8037abe:	429c      	cmp	r4, r3
 8037ac0:	d101      	bne.n	8037ac6 <__swsetup_r+0x46>
 8037ac2:	68ac      	ldr	r4, [r5, #8]
 8037ac4:	e7eb      	b.n	8037a9e <__swsetup_r+0x1e>
 8037ac6:	4b24      	ldr	r3, [pc, #144]	; (8037b58 <__swsetup_r+0xd8>)
 8037ac8:	429c      	cmp	r4, r3
 8037aca:	bf08      	it	eq
 8037acc:	68ec      	ldreq	r4, [r5, #12]
 8037ace:	e7e6      	b.n	8037a9e <__swsetup_r+0x1e>
 8037ad0:	0758      	lsls	r0, r3, #29
 8037ad2:	d512      	bpl.n	8037afa <__swsetup_r+0x7a>
 8037ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8037ad6:	b141      	cbz	r1, 8037aea <__swsetup_r+0x6a>
 8037ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8037adc:	4299      	cmp	r1, r3
 8037ade:	d002      	beq.n	8037ae6 <__swsetup_r+0x66>
 8037ae0:	4630      	mov	r0, r6
 8037ae2:	f7ff faf7 	bl	80370d4 <_free_r>
 8037ae6:	2300      	movs	r3, #0
 8037ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8037aea:	89a3      	ldrh	r3, [r4, #12]
 8037aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8037af0:	81a3      	strh	r3, [r4, #12]
 8037af2:	2300      	movs	r3, #0
 8037af4:	6063      	str	r3, [r4, #4]
 8037af6:	6923      	ldr	r3, [r4, #16]
 8037af8:	6023      	str	r3, [r4, #0]
 8037afa:	89a3      	ldrh	r3, [r4, #12]
 8037afc:	f043 0308 	orr.w	r3, r3, #8
 8037b00:	81a3      	strh	r3, [r4, #12]
 8037b02:	6923      	ldr	r3, [r4, #16]
 8037b04:	b94b      	cbnz	r3, 8037b1a <__swsetup_r+0x9a>
 8037b06:	89a3      	ldrh	r3, [r4, #12]
 8037b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8037b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8037b10:	d003      	beq.n	8037b1a <__swsetup_r+0x9a>
 8037b12:	4621      	mov	r1, r4
 8037b14:	4630      	mov	r0, r6
 8037b16:	f000 fac3 	bl	80380a0 <__smakebuf_r>
 8037b1a:	89a0      	ldrh	r0, [r4, #12]
 8037b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8037b20:	f010 0301 	ands.w	r3, r0, #1
 8037b24:	d00a      	beq.n	8037b3c <__swsetup_r+0xbc>
 8037b26:	2300      	movs	r3, #0
 8037b28:	60a3      	str	r3, [r4, #8]
 8037b2a:	6963      	ldr	r3, [r4, #20]
 8037b2c:	425b      	negs	r3, r3
 8037b2e:	61a3      	str	r3, [r4, #24]
 8037b30:	6923      	ldr	r3, [r4, #16]
 8037b32:	b943      	cbnz	r3, 8037b46 <__swsetup_r+0xc6>
 8037b34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8037b38:	d1ba      	bne.n	8037ab0 <__swsetup_r+0x30>
 8037b3a:	bd70      	pop	{r4, r5, r6, pc}
 8037b3c:	0781      	lsls	r1, r0, #30
 8037b3e:	bf58      	it	pl
 8037b40:	6963      	ldrpl	r3, [r4, #20]
 8037b42:	60a3      	str	r3, [r4, #8]
 8037b44:	e7f4      	b.n	8037b30 <__swsetup_r+0xb0>
 8037b46:	2000      	movs	r0, #0
 8037b48:	e7f7      	b.n	8037b3a <__swsetup_r+0xba>
 8037b4a:	bf00      	nop
 8037b4c:	20000d70 	.word	0x20000d70
 8037b50:	08048068 	.word	0x08048068
 8037b54:	08048088 	.word	0x08048088
 8037b58:	08048048 	.word	0x08048048

08037b5c <__assert_func>:
 8037b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8037b5e:	4614      	mov	r4, r2
 8037b60:	461a      	mov	r2, r3
 8037b62:	4b09      	ldr	r3, [pc, #36]	; (8037b88 <__assert_func+0x2c>)
 8037b64:	681b      	ldr	r3, [r3, #0]
 8037b66:	4605      	mov	r5, r0
 8037b68:	68d8      	ldr	r0, [r3, #12]
 8037b6a:	b14c      	cbz	r4, 8037b80 <__assert_func+0x24>
 8037b6c:	4b07      	ldr	r3, [pc, #28]	; (8037b8c <__assert_func+0x30>)
 8037b6e:	9100      	str	r1, [sp, #0]
 8037b70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8037b74:	4906      	ldr	r1, [pc, #24]	; (8037b90 <__assert_func+0x34>)
 8037b76:	462b      	mov	r3, r5
 8037b78:	f000 f9c8 	bl	8037f0c <fiprintf>
 8037b7c:	f7ff fa31 	bl	8036fe2 <abort>
 8037b80:	4b04      	ldr	r3, [pc, #16]	; (8037b94 <__assert_func+0x38>)
 8037b82:	461c      	mov	r4, r3
 8037b84:	e7f3      	b.n	8037b6e <__assert_func+0x12>
 8037b86:	bf00      	nop
 8037b88:	20000d70 	.word	0x20000d70
 8037b8c:	08047f0a 	.word	0x08047f0a
 8037b90:	08047f17 	.word	0x08047f17
 8037b94:	08047f45 	.word	0x08047f45

08037b98 <_close_r>:
 8037b98:	b538      	push	{r3, r4, r5, lr}
 8037b9a:	4d06      	ldr	r5, [pc, #24]	; (8037bb4 <_close_r+0x1c>)
 8037b9c:	2300      	movs	r3, #0
 8037b9e:	4604      	mov	r4, r0
 8037ba0:	4608      	mov	r0, r1
 8037ba2:	602b      	str	r3, [r5, #0]
 8037ba4:	f7e9 ff09 	bl	80219ba <_close>
 8037ba8:	1c43      	adds	r3, r0, #1
 8037baa:	d102      	bne.n	8037bb2 <_close_r+0x1a>
 8037bac:	682b      	ldr	r3, [r5, #0]
 8037bae:	b103      	cbz	r3, 8037bb2 <_close_r+0x1a>
 8037bb0:	6023      	str	r3, [r4, #0]
 8037bb2:	bd38      	pop	{r3, r4, r5, pc}
 8037bb4:	2000444c 	.word	0x2000444c

08037bb8 <__sflush_r>:
 8037bb8:	898a      	ldrh	r2, [r1, #12]
 8037bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8037bbe:	4605      	mov	r5, r0
 8037bc0:	0710      	lsls	r0, r2, #28
 8037bc2:	460c      	mov	r4, r1
 8037bc4:	d458      	bmi.n	8037c78 <__sflush_r+0xc0>
 8037bc6:	684b      	ldr	r3, [r1, #4]
 8037bc8:	2b00      	cmp	r3, #0
 8037bca:	dc05      	bgt.n	8037bd8 <__sflush_r+0x20>
 8037bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8037bce:	2b00      	cmp	r3, #0
 8037bd0:	dc02      	bgt.n	8037bd8 <__sflush_r+0x20>
 8037bd2:	2000      	movs	r0, #0
 8037bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8037bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8037bda:	2e00      	cmp	r6, #0
 8037bdc:	d0f9      	beq.n	8037bd2 <__sflush_r+0x1a>
 8037bde:	2300      	movs	r3, #0
 8037be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8037be4:	682f      	ldr	r7, [r5, #0]
 8037be6:	602b      	str	r3, [r5, #0]
 8037be8:	d032      	beq.n	8037c50 <__sflush_r+0x98>
 8037bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8037bec:	89a3      	ldrh	r3, [r4, #12]
 8037bee:	075a      	lsls	r2, r3, #29
 8037bf0:	d505      	bpl.n	8037bfe <__sflush_r+0x46>
 8037bf2:	6863      	ldr	r3, [r4, #4]
 8037bf4:	1ac0      	subs	r0, r0, r3
 8037bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8037bf8:	b10b      	cbz	r3, 8037bfe <__sflush_r+0x46>
 8037bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8037bfc:	1ac0      	subs	r0, r0, r3
 8037bfe:	2300      	movs	r3, #0
 8037c00:	4602      	mov	r2, r0
 8037c02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8037c04:	6a21      	ldr	r1, [r4, #32]
 8037c06:	4628      	mov	r0, r5
 8037c08:	47b0      	blx	r6
 8037c0a:	1c43      	adds	r3, r0, #1
 8037c0c:	89a3      	ldrh	r3, [r4, #12]
 8037c0e:	d106      	bne.n	8037c1e <__sflush_r+0x66>
 8037c10:	6829      	ldr	r1, [r5, #0]
 8037c12:	291d      	cmp	r1, #29
 8037c14:	d82c      	bhi.n	8037c70 <__sflush_r+0xb8>
 8037c16:	4a2a      	ldr	r2, [pc, #168]	; (8037cc0 <__sflush_r+0x108>)
 8037c18:	40ca      	lsrs	r2, r1
 8037c1a:	07d6      	lsls	r6, r2, #31
 8037c1c:	d528      	bpl.n	8037c70 <__sflush_r+0xb8>
 8037c1e:	2200      	movs	r2, #0
 8037c20:	6062      	str	r2, [r4, #4]
 8037c22:	04d9      	lsls	r1, r3, #19
 8037c24:	6922      	ldr	r2, [r4, #16]
 8037c26:	6022      	str	r2, [r4, #0]
 8037c28:	d504      	bpl.n	8037c34 <__sflush_r+0x7c>
 8037c2a:	1c42      	adds	r2, r0, #1
 8037c2c:	d101      	bne.n	8037c32 <__sflush_r+0x7a>
 8037c2e:	682b      	ldr	r3, [r5, #0]
 8037c30:	b903      	cbnz	r3, 8037c34 <__sflush_r+0x7c>
 8037c32:	6560      	str	r0, [r4, #84]	; 0x54
 8037c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8037c36:	602f      	str	r7, [r5, #0]
 8037c38:	2900      	cmp	r1, #0
 8037c3a:	d0ca      	beq.n	8037bd2 <__sflush_r+0x1a>
 8037c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8037c40:	4299      	cmp	r1, r3
 8037c42:	d002      	beq.n	8037c4a <__sflush_r+0x92>
 8037c44:	4628      	mov	r0, r5
 8037c46:	f7ff fa45 	bl	80370d4 <_free_r>
 8037c4a:	2000      	movs	r0, #0
 8037c4c:	6360      	str	r0, [r4, #52]	; 0x34
 8037c4e:	e7c1      	b.n	8037bd4 <__sflush_r+0x1c>
 8037c50:	6a21      	ldr	r1, [r4, #32]
 8037c52:	2301      	movs	r3, #1
 8037c54:	4628      	mov	r0, r5
 8037c56:	47b0      	blx	r6
 8037c58:	1c41      	adds	r1, r0, #1
 8037c5a:	d1c7      	bne.n	8037bec <__sflush_r+0x34>
 8037c5c:	682b      	ldr	r3, [r5, #0]
 8037c5e:	2b00      	cmp	r3, #0
 8037c60:	d0c4      	beq.n	8037bec <__sflush_r+0x34>
 8037c62:	2b1d      	cmp	r3, #29
 8037c64:	d001      	beq.n	8037c6a <__sflush_r+0xb2>
 8037c66:	2b16      	cmp	r3, #22
 8037c68:	d101      	bne.n	8037c6e <__sflush_r+0xb6>
 8037c6a:	602f      	str	r7, [r5, #0]
 8037c6c:	e7b1      	b.n	8037bd2 <__sflush_r+0x1a>
 8037c6e:	89a3      	ldrh	r3, [r4, #12]
 8037c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8037c74:	81a3      	strh	r3, [r4, #12]
 8037c76:	e7ad      	b.n	8037bd4 <__sflush_r+0x1c>
 8037c78:	690f      	ldr	r7, [r1, #16]
 8037c7a:	2f00      	cmp	r7, #0
 8037c7c:	d0a9      	beq.n	8037bd2 <__sflush_r+0x1a>
 8037c7e:	0793      	lsls	r3, r2, #30
 8037c80:	680e      	ldr	r6, [r1, #0]
 8037c82:	bf08      	it	eq
 8037c84:	694b      	ldreq	r3, [r1, #20]
 8037c86:	600f      	str	r7, [r1, #0]
 8037c88:	bf18      	it	ne
 8037c8a:	2300      	movne	r3, #0
 8037c8c:	eba6 0807 	sub.w	r8, r6, r7
 8037c90:	608b      	str	r3, [r1, #8]
 8037c92:	f1b8 0f00 	cmp.w	r8, #0
 8037c96:	dd9c      	ble.n	8037bd2 <__sflush_r+0x1a>
 8037c98:	6a21      	ldr	r1, [r4, #32]
 8037c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8037c9c:	4643      	mov	r3, r8
 8037c9e:	463a      	mov	r2, r7
 8037ca0:	4628      	mov	r0, r5
 8037ca2:	47b0      	blx	r6
 8037ca4:	2800      	cmp	r0, #0
 8037ca6:	dc06      	bgt.n	8037cb6 <__sflush_r+0xfe>
 8037ca8:	89a3      	ldrh	r3, [r4, #12]
 8037caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8037cae:	81a3      	strh	r3, [r4, #12]
 8037cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8037cb4:	e78e      	b.n	8037bd4 <__sflush_r+0x1c>
 8037cb6:	4407      	add	r7, r0
 8037cb8:	eba8 0800 	sub.w	r8, r8, r0
 8037cbc:	e7e9      	b.n	8037c92 <__sflush_r+0xda>
 8037cbe:	bf00      	nop
 8037cc0:	20400001 	.word	0x20400001

08037cc4 <_fflush_r>:
 8037cc4:	b538      	push	{r3, r4, r5, lr}
 8037cc6:	690b      	ldr	r3, [r1, #16]
 8037cc8:	4605      	mov	r5, r0
 8037cca:	460c      	mov	r4, r1
 8037ccc:	b913      	cbnz	r3, 8037cd4 <_fflush_r+0x10>
 8037cce:	2500      	movs	r5, #0
 8037cd0:	4628      	mov	r0, r5
 8037cd2:	bd38      	pop	{r3, r4, r5, pc}
 8037cd4:	b118      	cbz	r0, 8037cde <_fflush_r+0x1a>
 8037cd6:	6983      	ldr	r3, [r0, #24]
 8037cd8:	b90b      	cbnz	r3, 8037cde <_fflush_r+0x1a>
 8037cda:	f000 f899 	bl	8037e10 <__sinit>
 8037cde:	4b14      	ldr	r3, [pc, #80]	; (8037d30 <_fflush_r+0x6c>)
 8037ce0:	429c      	cmp	r4, r3
 8037ce2:	d11b      	bne.n	8037d1c <_fflush_r+0x58>
 8037ce4:	686c      	ldr	r4, [r5, #4]
 8037ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8037cea:	2b00      	cmp	r3, #0
 8037cec:	d0ef      	beq.n	8037cce <_fflush_r+0xa>
 8037cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8037cf0:	07d0      	lsls	r0, r2, #31
 8037cf2:	d404      	bmi.n	8037cfe <_fflush_r+0x3a>
 8037cf4:	0599      	lsls	r1, r3, #22
 8037cf6:	d402      	bmi.n	8037cfe <_fflush_r+0x3a>
 8037cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8037cfa:	f000 f996 	bl	803802a <__retarget_lock_acquire_recursive>
 8037cfe:	4628      	mov	r0, r5
 8037d00:	4621      	mov	r1, r4
 8037d02:	f7ff ff59 	bl	8037bb8 <__sflush_r>
 8037d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8037d08:	07da      	lsls	r2, r3, #31
 8037d0a:	4605      	mov	r5, r0
 8037d0c:	d4e0      	bmi.n	8037cd0 <_fflush_r+0xc>
 8037d0e:	89a3      	ldrh	r3, [r4, #12]
 8037d10:	059b      	lsls	r3, r3, #22
 8037d12:	d4dd      	bmi.n	8037cd0 <_fflush_r+0xc>
 8037d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8037d16:	f000 f989 	bl	803802c <__retarget_lock_release_recursive>
 8037d1a:	e7d9      	b.n	8037cd0 <_fflush_r+0xc>
 8037d1c:	4b05      	ldr	r3, [pc, #20]	; (8037d34 <_fflush_r+0x70>)
 8037d1e:	429c      	cmp	r4, r3
 8037d20:	d101      	bne.n	8037d26 <_fflush_r+0x62>
 8037d22:	68ac      	ldr	r4, [r5, #8]
 8037d24:	e7df      	b.n	8037ce6 <_fflush_r+0x22>
 8037d26:	4b04      	ldr	r3, [pc, #16]	; (8037d38 <_fflush_r+0x74>)
 8037d28:	429c      	cmp	r4, r3
 8037d2a:	bf08      	it	eq
 8037d2c:	68ec      	ldreq	r4, [r5, #12]
 8037d2e:	e7da      	b.n	8037ce6 <_fflush_r+0x22>
 8037d30:	08048068 	.word	0x08048068
 8037d34:	08048088 	.word	0x08048088
 8037d38:	08048048 	.word	0x08048048

08037d3c <fflush>:
 8037d3c:	4601      	mov	r1, r0
 8037d3e:	b920      	cbnz	r0, 8037d4a <fflush+0xe>
 8037d40:	4b04      	ldr	r3, [pc, #16]	; (8037d54 <fflush+0x18>)
 8037d42:	4905      	ldr	r1, [pc, #20]	; (8037d58 <fflush+0x1c>)
 8037d44:	6818      	ldr	r0, [r3, #0]
 8037d46:	f000 b910 	b.w	8037f6a <_fwalk_reent>
 8037d4a:	4b04      	ldr	r3, [pc, #16]	; (8037d5c <fflush+0x20>)
 8037d4c:	6818      	ldr	r0, [r3, #0]
 8037d4e:	f7ff bfb9 	b.w	8037cc4 <_fflush_r>
 8037d52:	bf00      	nop
 8037d54:	08047e94 	.word	0x08047e94
 8037d58:	08037cc5 	.word	0x08037cc5
 8037d5c:	20000d70 	.word	0x20000d70

08037d60 <std>:
 8037d60:	2300      	movs	r3, #0
 8037d62:	b510      	push	{r4, lr}
 8037d64:	4604      	mov	r4, r0
 8037d66:	e9c0 3300 	strd	r3, r3, [r0]
 8037d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8037d6e:	6083      	str	r3, [r0, #8]
 8037d70:	8181      	strh	r1, [r0, #12]
 8037d72:	6643      	str	r3, [r0, #100]	; 0x64
 8037d74:	81c2      	strh	r2, [r0, #14]
 8037d76:	6183      	str	r3, [r0, #24]
 8037d78:	4619      	mov	r1, r3
 8037d7a:	2208      	movs	r2, #8
 8037d7c:	305c      	adds	r0, #92	; 0x5c
 8037d7e:	f7ff f9a1 	bl	80370c4 <memset>
 8037d82:	4b05      	ldr	r3, [pc, #20]	; (8037d98 <std+0x38>)
 8037d84:	6263      	str	r3, [r4, #36]	; 0x24
 8037d86:	4b05      	ldr	r3, [pc, #20]	; (8037d9c <std+0x3c>)
 8037d88:	62a3      	str	r3, [r4, #40]	; 0x28
 8037d8a:	4b05      	ldr	r3, [pc, #20]	; (8037da0 <std+0x40>)
 8037d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8037d8e:	4b05      	ldr	r3, [pc, #20]	; (8037da4 <std+0x44>)
 8037d90:	6224      	str	r4, [r4, #32]
 8037d92:	6323      	str	r3, [r4, #48]	; 0x30
 8037d94:	bd10      	pop	{r4, pc}
 8037d96:	bf00      	nop
 8037d98:	08037791 	.word	0x08037791
 8037d9c:	080377b7 	.word	0x080377b7
 8037da0:	080377ef 	.word	0x080377ef
 8037da4:	08037813 	.word	0x08037813

08037da8 <_cleanup_r>:
 8037da8:	4901      	ldr	r1, [pc, #4]	; (8037db0 <_cleanup_r+0x8>)
 8037daa:	f000 b8de 	b.w	8037f6a <_fwalk_reent>
 8037dae:	bf00      	nop
 8037db0:	08037cc5 	.word	0x08037cc5

08037db4 <__sfmoreglue>:
 8037db4:	b570      	push	{r4, r5, r6, lr}
 8037db6:	2268      	movs	r2, #104	; 0x68
 8037db8:	1e4d      	subs	r5, r1, #1
 8037dba:	4355      	muls	r5, r2
 8037dbc:	460e      	mov	r6, r1
 8037dbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8037dc2:	f7ff f9f3 	bl	80371ac <_malloc_r>
 8037dc6:	4604      	mov	r4, r0
 8037dc8:	b140      	cbz	r0, 8037ddc <__sfmoreglue+0x28>
 8037dca:	2100      	movs	r1, #0
 8037dcc:	e9c0 1600 	strd	r1, r6, [r0]
 8037dd0:	300c      	adds	r0, #12
 8037dd2:	60a0      	str	r0, [r4, #8]
 8037dd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8037dd8:	f7ff f974 	bl	80370c4 <memset>
 8037ddc:	4620      	mov	r0, r4
 8037dde:	bd70      	pop	{r4, r5, r6, pc}

08037de0 <__sfp_lock_acquire>:
 8037de0:	4801      	ldr	r0, [pc, #4]	; (8037de8 <__sfp_lock_acquire+0x8>)
 8037de2:	f000 b922 	b.w	803802a <__retarget_lock_acquire_recursive>
 8037de6:	bf00      	nop
 8037de8:	20004449 	.word	0x20004449

08037dec <__sfp_lock_release>:
 8037dec:	4801      	ldr	r0, [pc, #4]	; (8037df4 <__sfp_lock_release+0x8>)
 8037dee:	f000 b91d 	b.w	803802c <__retarget_lock_release_recursive>
 8037df2:	bf00      	nop
 8037df4:	20004449 	.word	0x20004449

08037df8 <__sinit_lock_acquire>:
 8037df8:	4801      	ldr	r0, [pc, #4]	; (8037e00 <__sinit_lock_acquire+0x8>)
 8037dfa:	f000 b916 	b.w	803802a <__retarget_lock_acquire_recursive>
 8037dfe:	bf00      	nop
 8037e00:	2000444a 	.word	0x2000444a

08037e04 <__sinit_lock_release>:
 8037e04:	4801      	ldr	r0, [pc, #4]	; (8037e0c <__sinit_lock_release+0x8>)
 8037e06:	f000 b911 	b.w	803802c <__retarget_lock_release_recursive>
 8037e0a:	bf00      	nop
 8037e0c:	2000444a 	.word	0x2000444a

08037e10 <__sinit>:
 8037e10:	b510      	push	{r4, lr}
 8037e12:	4604      	mov	r4, r0
 8037e14:	f7ff fff0 	bl	8037df8 <__sinit_lock_acquire>
 8037e18:	69a3      	ldr	r3, [r4, #24]
 8037e1a:	b11b      	cbz	r3, 8037e24 <__sinit+0x14>
 8037e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8037e20:	f7ff bff0 	b.w	8037e04 <__sinit_lock_release>
 8037e24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8037e28:	6523      	str	r3, [r4, #80]	; 0x50
 8037e2a:	4b13      	ldr	r3, [pc, #76]	; (8037e78 <__sinit+0x68>)
 8037e2c:	4a13      	ldr	r2, [pc, #76]	; (8037e7c <__sinit+0x6c>)
 8037e2e:	681b      	ldr	r3, [r3, #0]
 8037e30:	62a2      	str	r2, [r4, #40]	; 0x28
 8037e32:	42a3      	cmp	r3, r4
 8037e34:	bf04      	itt	eq
 8037e36:	2301      	moveq	r3, #1
 8037e38:	61a3      	streq	r3, [r4, #24]
 8037e3a:	4620      	mov	r0, r4
 8037e3c:	f000 f820 	bl	8037e80 <__sfp>
 8037e40:	6060      	str	r0, [r4, #4]
 8037e42:	4620      	mov	r0, r4
 8037e44:	f000 f81c 	bl	8037e80 <__sfp>
 8037e48:	60a0      	str	r0, [r4, #8]
 8037e4a:	4620      	mov	r0, r4
 8037e4c:	f000 f818 	bl	8037e80 <__sfp>
 8037e50:	2200      	movs	r2, #0
 8037e52:	60e0      	str	r0, [r4, #12]
 8037e54:	2104      	movs	r1, #4
 8037e56:	6860      	ldr	r0, [r4, #4]
 8037e58:	f7ff ff82 	bl	8037d60 <std>
 8037e5c:	68a0      	ldr	r0, [r4, #8]
 8037e5e:	2201      	movs	r2, #1
 8037e60:	2109      	movs	r1, #9
 8037e62:	f7ff ff7d 	bl	8037d60 <std>
 8037e66:	68e0      	ldr	r0, [r4, #12]
 8037e68:	2202      	movs	r2, #2
 8037e6a:	2112      	movs	r1, #18
 8037e6c:	f7ff ff78 	bl	8037d60 <std>
 8037e70:	2301      	movs	r3, #1
 8037e72:	61a3      	str	r3, [r4, #24]
 8037e74:	e7d2      	b.n	8037e1c <__sinit+0xc>
 8037e76:	bf00      	nop
 8037e78:	08047e94 	.word	0x08047e94
 8037e7c:	08037da9 	.word	0x08037da9

08037e80 <__sfp>:
 8037e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8037e82:	4607      	mov	r7, r0
 8037e84:	f7ff ffac 	bl	8037de0 <__sfp_lock_acquire>
 8037e88:	4b1e      	ldr	r3, [pc, #120]	; (8037f04 <__sfp+0x84>)
 8037e8a:	681e      	ldr	r6, [r3, #0]
 8037e8c:	69b3      	ldr	r3, [r6, #24]
 8037e8e:	b913      	cbnz	r3, 8037e96 <__sfp+0x16>
 8037e90:	4630      	mov	r0, r6
 8037e92:	f7ff ffbd 	bl	8037e10 <__sinit>
 8037e96:	3648      	adds	r6, #72	; 0x48
 8037e98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8037e9c:	3b01      	subs	r3, #1
 8037e9e:	d503      	bpl.n	8037ea8 <__sfp+0x28>
 8037ea0:	6833      	ldr	r3, [r6, #0]
 8037ea2:	b30b      	cbz	r3, 8037ee8 <__sfp+0x68>
 8037ea4:	6836      	ldr	r6, [r6, #0]
 8037ea6:	e7f7      	b.n	8037e98 <__sfp+0x18>
 8037ea8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8037eac:	b9d5      	cbnz	r5, 8037ee4 <__sfp+0x64>
 8037eae:	4b16      	ldr	r3, [pc, #88]	; (8037f08 <__sfp+0x88>)
 8037eb0:	60e3      	str	r3, [r4, #12]
 8037eb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8037eb6:	6665      	str	r5, [r4, #100]	; 0x64
 8037eb8:	f000 f8b6 	bl	8038028 <__retarget_lock_init_recursive>
 8037ebc:	f7ff ff96 	bl	8037dec <__sfp_lock_release>
 8037ec0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8037ec4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8037ec8:	6025      	str	r5, [r4, #0]
 8037eca:	61a5      	str	r5, [r4, #24]
 8037ecc:	2208      	movs	r2, #8
 8037ece:	4629      	mov	r1, r5
 8037ed0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8037ed4:	f7ff f8f6 	bl	80370c4 <memset>
 8037ed8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8037edc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8037ee0:	4620      	mov	r0, r4
 8037ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8037ee4:	3468      	adds	r4, #104	; 0x68
 8037ee6:	e7d9      	b.n	8037e9c <__sfp+0x1c>
 8037ee8:	2104      	movs	r1, #4
 8037eea:	4638      	mov	r0, r7
 8037eec:	f7ff ff62 	bl	8037db4 <__sfmoreglue>
 8037ef0:	4604      	mov	r4, r0
 8037ef2:	6030      	str	r0, [r6, #0]
 8037ef4:	2800      	cmp	r0, #0
 8037ef6:	d1d5      	bne.n	8037ea4 <__sfp+0x24>
 8037ef8:	f7ff ff78 	bl	8037dec <__sfp_lock_release>
 8037efc:	230c      	movs	r3, #12
 8037efe:	603b      	str	r3, [r7, #0]
 8037f00:	e7ee      	b.n	8037ee0 <__sfp+0x60>
 8037f02:	bf00      	nop
 8037f04:	08047e94 	.word	0x08047e94
 8037f08:	ffff0001 	.word	0xffff0001

08037f0c <fiprintf>:
 8037f0c:	b40e      	push	{r1, r2, r3}
 8037f0e:	b503      	push	{r0, r1, lr}
 8037f10:	4601      	mov	r1, r0
 8037f12:	ab03      	add	r3, sp, #12
 8037f14:	4805      	ldr	r0, [pc, #20]	; (8037f2c <fiprintf+0x20>)
 8037f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8037f1a:	6800      	ldr	r0, [r0, #0]
 8037f1c:	9301      	str	r3, [sp, #4]
 8037f1e:	f000 fc63 	bl	80387e8 <_vfiprintf_r>
 8037f22:	b002      	add	sp, #8
 8037f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8037f28:	b003      	add	sp, #12
 8037f2a:	4770      	bx	lr
 8037f2c:	20000d70 	.word	0x20000d70

08037f30 <_fwalk>:
 8037f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8037f34:	460f      	mov	r7, r1
 8037f36:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8037f3a:	2600      	movs	r6, #0
 8037f3c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8037f40:	f1b8 0801 	subs.w	r8, r8, #1
 8037f44:	d505      	bpl.n	8037f52 <_fwalk+0x22>
 8037f46:	6824      	ldr	r4, [r4, #0]
 8037f48:	2c00      	cmp	r4, #0
 8037f4a:	d1f7      	bne.n	8037f3c <_fwalk+0xc>
 8037f4c:	4630      	mov	r0, r6
 8037f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8037f52:	89ab      	ldrh	r3, [r5, #12]
 8037f54:	2b01      	cmp	r3, #1
 8037f56:	d906      	bls.n	8037f66 <_fwalk+0x36>
 8037f58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8037f5c:	3301      	adds	r3, #1
 8037f5e:	d002      	beq.n	8037f66 <_fwalk+0x36>
 8037f60:	4628      	mov	r0, r5
 8037f62:	47b8      	blx	r7
 8037f64:	4306      	orrs	r6, r0
 8037f66:	3568      	adds	r5, #104	; 0x68
 8037f68:	e7ea      	b.n	8037f40 <_fwalk+0x10>

08037f6a <_fwalk_reent>:
 8037f6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8037f6e:	4606      	mov	r6, r0
 8037f70:	4688      	mov	r8, r1
 8037f72:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8037f76:	2700      	movs	r7, #0
 8037f78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8037f7c:	f1b9 0901 	subs.w	r9, r9, #1
 8037f80:	d505      	bpl.n	8037f8e <_fwalk_reent+0x24>
 8037f82:	6824      	ldr	r4, [r4, #0]
 8037f84:	2c00      	cmp	r4, #0
 8037f86:	d1f7      	bne.n	8037f78 <_fwalk_reent+0xe>
 8037f88:	4638      	mov	r0, r7
 8037f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8037f8e:	89ab      	ldrh	r3, [r5, #12]
 8037f90:	2b01      	cmp	r3, #1
 8037f92:	d907      	bls.n	8037fa4 <_fwalk_reent+0x3a>
 8037f94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8037f98:	3301      	adds	r3, #1
 8037f9a:	d003      	beq.n	8037fa4 <_fwalk_reent+0x3a>
 8037f9c:	4629      	mov	r1, r5
 8037f9e:	4630      	mov	r0, r6
 8037fa0:	47c0      	blx	r8
 8037fa2:	4307      	orrs	r7, r0
 8037fa4:	3568      	adds	r5, #104	; 0x68
 8037fa6:	e7e9      	b.n	8037f7c <_fwalk_reent+0x12>

08037fa8 <_getc_r>:
 8037fa8:	b538      	push	{r3, r4, r5, lr}
 8037faa:	460c      	mov	r4, r1
 8037fac:	4605      	mov	r5, r0
 8037fae:	b118      	cbz	r0, 8037fb8 <_getc_r+0x10>
 8037fb0:	6983      	ldr	r3, [r0, #24]
 8037fb2:	b90b      	cbnz	r3, 8037fb8 <_getc_r+0x10>
 8037fb4:	f7ff ff2c 	bl	8037e10 <__sinit>
 8037fb8:	4b18      	ldr	r3, [pc, #96]	; (803801c <_getc_r+0x74>)
 8037fba:	429c      	cmp	r4, r3
 8037fbc:	d11e      	bne.n	8037ffc <_getc_r+0x54>
 8037fbe:	686c      	ldr	r4, [r5, #4]
 8037fc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8037fc2:	07d8      	lsls	r0, r3, #31
 8037fc4:	d405      	bmi.n	8037fd2 <_getc_r+0x2a>
 8037fc6:	89a3      	ldrh	r3, [r4, #12]
 8037fc8:	0599      	lsls	r1, r3, #22
 8037fca:	d402      	bmi.n	8037fd2 <_getc_r+0x2a>
 8037fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8037fce:	f000 f82c 	bl	803802a <__retarget_lock_acquire_recursive>
 8037fd2:	6863      	ldr	r3, [r4, #4]
 8037fd4:	3b01      	subs	r3, #1
 8037fd6:	2b00      	cmp	r3, #0
 8037fd8:	6063      	str	r3, [r4, #4]
 8037fda:	da19      	bge.n	8038010 <_getc_r+0x68>
 8037fdc:	4628      	mov	r0, r5
 8037fde:	4621      	mov	r1, r4
 8037fe0:	f001 f872 	bl	80390c8 <__srget_r>
 8037fe4:	4605      	mov	r5, r0
 8037fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8037fe8:	07da      	lsls	r2, r3, #31
 8037fea:	d405      	bmi.n	8037ff8 <_getc_r+0x50>
 8037fec:	89a3      	ldrh	r3, [r4, #12]
 8037fee:	059b      	lsls	r3, r3, #22
 8037ff0:	d402      	bmi.n	8037ff8 <_getc_r+0x50>
 8037ff2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8037ff4:	f000 f81a 	bl	803802c <__retarget_lock_release_recursive>
 8037ff8:	4628      	mov	r0, r5
 8037ffa:	bd38      	pop	{r3, r4, r5, pc}
 8037ffc:	4b08      	ldr	r3, [pc, #32]	; (8038020 <_getc_r+0x78>)
 8037ffe:	429c      	cmp	r4, r3
 8038000:	d101      	bne.n	8038006 <_getc_r+0x5e>
 8038002:	68ac      	ldr	r4, [r5, #8]
 8038004:	e7dc      	b.n	8037fc0 <_getc_r+0x18>
 8038006:	4b07      	ldr	r3, [pc, #28]	; (8038024 <_getc_r+0x7c>)
 8038008:	429c      	cmp	r4, r3
 803800a:	bf08      	it	eq
 803800c:	68ec      	ldreq	r4, [r5, #12]
 803800e:	e7d7      	b.n	8037fc0 <_getc_r+0x18>
 8038010:	6823      	ldr	r3, [r4, #0]
 8038012:	1c5a      	adds	r2, r3, #1
 8038014:	6022      	str	r2, [r4, #0]
 8038016:	781d      	ldrb	r5, [r3, #0]
 8038018:	e7e5      	b.n	8037fe6 <_getc_r+0x3e>
 803801a:	bf00      	nop
 803801c:	08048068 	.word	0x08048068
 8038020:	08048088 	.word	0x08048088
 8038024:	08048048 	.word	0x08048048

08038028 <__retarget_lock_init_recursive>:
 8038028:	4770      	bx	lr

0803802a <__retarget_lock_acquire_recursive>:
 803802a:	4770      	bx	lr

0803802c <__retarget_lock_release_recursive>:
 803802c:	4770      	bx	lr
	...

08038030 <_lseek_r>:
 8038030:	b538      	push	{r3, r4, r5, lr}
 8038032:	4d07      	ldr	r5, [pc, #28]	; (8038050 <_lseek_r+0x20>)
 8038034:	4604      	mov	r4, r0
 8038036:	4608      	mov	r0, r1
 8038038:	4611      	mov	r1, r2
 803803a:	2200      	movs	r2, #0
 803803c:	602a      	str	r2, [r5, #0]
 803803e:	461a      	mov	r2, r3
 8038040:	f7e9 fce2 	bl	8021a08 <_lseek>
 8038044:	1c43      	adds	r3, r0, #1
 8038046:	d102      	bne.n	803804e <_lseek_r+0x1e>
 8038048:	682b      	ldr	r3, [r5, #0]
 803804a:	b103      	cbz	r3, 803804e <_lseek_r+0x1e>
 803804c:	6023      	str	r3, [r4, #0]
 803804e:	bd38      	pop	{r3, r4, r5, pc}
 8038050:	2000444c 	.word	0x2000444c

08038054 <__swhatbuf_r>:
 8038054:	b570      	push	{r4, r5, r6, lr}
 8038056:	460e      	mov	r6, r1
 8038058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803805c:	2900      	cmp	r1, #0
 803805e:	b096      	sub	sp, #88	; 0x58
 8038060:	4614      	mov	r4, r2
 8038062:	461d      	mov	r5, r3
 8038064:	da08      	bge.n	8038078 <__swhatbuf_r+0x24>
 8038066:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803806a:	2200      	movs	r2, #0
 803806c:	602a      	str	r2, [r5, #0]
 803806e:	061a      	lsls	r2, r3, #24
 8038070:	d410      	bmi.n	8038094 <__swhatbuf_r+0x40>
 8038072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8038076:	e00e      	b.n	8038096 <__swhatbuf_r+0x42>
 8038078:	466a      	mov	r2, sp
 803807a:	f001 f937 	bl	80392ec <_fstat_r>
 803807e:	2800      	cmp	r0, #0
 8038080:	dbf1      	blt.n	8038066 <__swhatbuf_r+0x12>
 8038082:	9a01      	ldr	r2, [sp, #4]
 8038084:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8038088:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803808c:	425a      	negs	r2, r3
 803808e:	415a      	adcs	r2, r3
 8038090:	602a      	str	r2, [r5, #0]
 8038092:	e7ee      	b.n	8038072 <__swhatbuf_r+0x1e>
 8038094:	2340      	movs	r3, #64	; 0x40
 8038096:	2000      	movs	r0, #0
 8038098:	6023      	str	r3, [r4, #0]
 803809a:	b016      	add	sp, #88	; 0x58
 803809c:	bd70      	pop	{r4, r5, r6, pc}
	...

080380a0 <__smakebuf_r>:
 80380a0:	898b      	ldrh	r3, [r1, #12]
 80380a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80380a4:	079d      	lsls	r5, r3, #30
 80380a6:	4606      	mov	r6, r0
 80380a8:	460c      	mov	r4, r1
 80380aa:	d507      	bpl.n	80380bc <__smakebuf_r+0x1c>
 80380ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80380b0:	6023      	str	r3, [r4, #0]
 80380b2:	6123      	str	r3, [r4, #16]
 80380b4:	2301      	movs	r3, #1
 80380b6:	6163      	str	r3, [r4, #20]
 80380b8:	b002      	add	sp, #8
 80380ba:	bd70      	pop	{r4, r5, r6, pc}
 80380bc:	ab01      	add	r3, sp, #4
 80380be:	466a      	mov	r2, sp
 80380c0:	f7ff ffc8 	bl	8038054 <__swhatbuf_r>
 80380c4:	9900      	ldr	r1, [sp, #0]
 80380c6:	4605      	mov	r5, r0
 80380c8:	4630      	mov	r0, r6
 80380ca:	f7ff f86f 	bl	80371ac <_malloc_r>
 80380ce:	b948      	cbnz	r0, 80380e4 <__smakebuf_r+0x44>
 80380d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80380d4:	059a      	lsls	r2, r3, #22
 80380d6:	d4ef      	bmi.n	80380b8 <__smakebuf_r+0x18>
 80380d8:	f023 0303 	bic.w	r3, r3, #3
 80380dc:	f043 0302 	orr.w	r3, r3, #2
 80380e0:	81a3      	strh	r3, [r4, #12]
 80380e2:	e7e3      	b.n	80380ac <__smakebuf_r+0xc>
 80380e4:	4b0d      	ldr	r3, [pc, #52]	; (803811c <__smakebuf_r+0x7c>)
 80380e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80380e8:	89a3      	ldrh	r3, [r4, #12]
 80380ea:	6020      	str	r0, [r4, #0]
 80380ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80380f0:	81a3      	strh	r3, [r4, #12]
 80380f2:	9b00      	ldr	r3, [sp, #0]
 80380f4:	6163      	str	r3, [r4, #20]
 80380f6:	9b01      	ldr	r3, [sp, #4]
 80380f8:	6120      	str	r0, [r4, #16]
 80380fa:	b15b      	cbz	r3, 8038114 <__smakebuf_r+0x74>
 80380fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8038100:	4630      	mov	r0, r6
 8038102:	f001 f905 	bl	8039310 <_isatty_r>
 8038106:	b128      	cbz	r0, 8038114 <__smakebuf_r+0x74>
 8038108:	89a3      	ldrh	r3, [r4, #12]
 803810a:	f023 0303 	bic.w	r3, r3, #3
 803810e:	f043 0301 	orr.w	r3, r3, #1
 8038112:	81a3      	strh	r3, [r4, #12]
 8038114:	89a0      	ldrh	r0, [r4, #12]
 8038116:	4305      	orrs	r5, r0
 8038118:	81a5      	strh	r5, [r4, #12]
 803811a:	e7cd      	b.n	80380b8 <__smakebuf_r+0x18>
 803811c:	08037da9 	.word	0x08037da9

08038120 <__malloc_lock>:
 8038120:	4801      	ldr	r0, [pc, #4]	; (8038128 <__malloc_lock+0x8>)
 8038122:	f7ff bf82 	b.w	803802a <__retarget_lock_acquire_recursive>
 8038126:	bf00      	nop
 8038128:	20004448 	.word	0x20004448

0803812c <__malloc_unlock>:
 803812c:	4801      	ldr	r0, [pc, #4]	; (8038134 <__malloc_unlock+0x8>)
 803812e:	f7ff bf7d 	b.w	803802c <__retarget_lock_release_recursive>
 8038132:	bf00      	nop
 8038134:	20004448 	.word	0x20004448

08038138 <__ssputs_r>:
 8038138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803813c:	688e      	ldr	r6, [r1, #8]
 803813e:	429e      	cmp	r6, r3
 8038140:	4682      	mov	sl, r0
 8038142:	460c      	mov	r4, r1
 8038144:	4690      	mov	r8, r2
 8038146:	461f      	mov	r7, r3
 8038148:	d838      	bhi.n	80381bc <__ssputs_r+0x84>
 803814a:	898a      	ldrh	r2, [r1, #12]
 803814c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8038150:	d032      	beq.n	80381b8 <__ssputs_r+0x80>
 8038152:	6825      	ldr	r5, [r4, #0]
 8038154:	6909      	ldr	r1, [r1, #16]
 8038156:	eba5 0901 	sub.w	r9, r5, r1
 803815a:	6965      	ldr	r5, [r4, #20]
 803815c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8038160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8038164:	3301      	adds	r3, #1
 8038166:	444b      	add	r3, r9
 8038168:	106d      	asrs	r5, r5, #1
 803816a:	429d      	cmp	r5, r3
 803816c:	bf38      	it	cc
 803816e:	461d      	movcc	r5, r3
 8038170:	0553      	lsls	r3, r2, #21
 8038172:	d531      	bpl.n	80381d8 <__ssputs_r+0xa0>
 8038174:	4629      	mov	r1, r5
 8038176:	f7ff f819 	bl	80371ac <_malloc_r>
 803817a:	4606      	mov	r6, r0
 803817c:	b950      	cbnz	r0, 8038194 <__ssputs_r+0x5c>
 803817e:	230c      	movs	r3, #12
 8038180:	f8ca 3000 	str.w	r3, [sl]
 8038184:	89a3      	ldrh	r3, [r4, #12]
 8038186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803818a:	81a3      	strh	r3, [r4, #12]
 803818c:	f04f 30ff 	mov.w	r0, #4294967295
 8038190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8038194:	6921      	ldr	r1, [r4, #16]
 8038196:	464a      	mov	r2, r9
 8038198:	f7fe ff86 	bl	80370a8 <memcpy>
 803819c:	89a3      	ldrh	r3, [r4, #12]
 803819e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80381a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80381a6:	81a3      	strh	r3, [r4, #12]
 80381a8:	6126      	str	r6, [r4, #16]
 80381aa:	6165      	str	r5, [r4, #20]
 80381ac:	444e      	add	r6, r9
 80381ae:	eba5 0509 	sub.w	r5, r5, r9
 80381b2:	6026      	str	r6, [r4, #0]
 80381b4:	60a5      	str	r5, [r4, #8]
 80381b6:	463e      	mov	r6, r7
 80381b8:	42be      	cmp	r6, r7
 80381ba:	d900      	bls.n	80381be <__ssputs_r+0x86>
 80381bc:	463e      	mov	r6, r7
 80381be:	6820      	ldr	r0, [r4, #0]
 80381c0:	4632      	mov	r2, r6
 80381c2:	4641      	mov	r1, r8
 80381c4:	f001 f8b4 	bl	8039330 <memmove>
 80381c8:	68a3      	ldr	r3, [r4, #8]
 80381ca:	1b9b      	subs	r3, r3, r6
 80381cc:	60a3      	str	r3, [r4, #8]
 80381ce:	6823      	ldr	r3, [r4, #0]
 80381d0:	4433      	add	r3, r6
 80381d2:	6023      	str	r3, [r4, #0]
 80381d4:	2000      	movs	r0, #0
 80381d6:	e7db      	b.n	8038190 <__ssputs_r+0x58>
 80381d8:	462a      	mov	r2, r5
 80381da:	f001 f8c3 	bl	8039364 <_realloc_r>
 80381de:	4606      	mov	r6, r0
 80381e0:	2800      	cmp	r0, #0
 80381e2:	d1e1      	bne.n	80381a8 <__ssputs_r+0x70>
 80381e4:	6921      	ldr	r1, [r4, #16]
 80381e6:	4650      	mov	r0, sl
 80381e8:	f7fe ff74 	bl	80370d4 <_free_r>
 80381ec:	e7c7      	b.n	803817e <__ssputs_r+0x46>
	...

080381f0 <_svfiprintf_r>:
 80381f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80381f4:	4698      	mov	r8, r3
 80381f6:	898b      	ldrh	r3, [r1, #12]
 80381f8:	061b      	lsls	r3, r3, #24
 80381fa:	b09d      	sub	sp, #116	; 0x74
 80381fc:	4607      	mov	r7, r0
 80381fe:	460d      	mov	r5, r1
 8038200:	4614      	mov	r4, r2
 8038202:	d50e      	bpl.n	8038222 <_svfiprintf_r+0x32>
 8038204:	690b      	ldr	r3, [r1, #16]
 8038206:	b963      	cbnz	r3, 8038222 <_svfiprintf_r+0x32>
 8038208:	2140      	movs	r1, #64	; 0x40
 803820a:	f7fe ffcf 	bl	80371ac <_malloc_r>
 803820e:	6028      	str	r0, [r5, #0]
 8038210:	6128      	str	r0, [r5, #16]
 8038212:	b920      	cbnz	r0, 803821e <_svfiprintf_r+0x2e>
 8038214:	230c      	movs	r3, #12
 8038216:	603b      	str	r3, [r7, #0]
 8038218:	f04f 30ff 	mov.w	r0, #4294967295
 803821c:	e0d1      	b.n	80383c2 <_svfiprintf_r+0x1d2>
 803821e:	2340      	movs	r3, #64	; 0x40
 8038220:	616b      	str	r3, [r5, #20]
 8038222:	2300      	movs	r3, #0
 8038224:	9309      	str	r3, [sp, #36]	; 0x24
 8038226:	2320      	movs	r3, #32
 8038228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803822c:	f8cd 800c 	str.w	r8, [sp, #12]
 8038230:	2330      	movs	r3, #48	; 0x30
 8038232:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80383dc <_svfiprintf_r+0x1ec>
 8038236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803823a:	f04f 0901 	mov.w	r9, #1
 803823e:	4623      	mov	r3, r4
 8038240:	469a      	mov	sl, r3
 8038242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8038246:	b10a      	cbz	r2, 803824c <_svfiprintf_r+0x5c>
 8038248:	2a25      	cmp	r2, #37	; 0x25
 803824a:	d1f9      	bne.n	8038240 <_svfiprintf_r+0x50>
 803824c:	ebba 0b04 	subs.w	fp, sl, r4
 8038250:	d00b      	beq.n	803826a <_svfiprintf_r+0x7a>
 8038252:	465b      	mov	r3, fp
 8038254:	4622      	mov	r2, r4
 8038256:	4629      	mov	r1, r5
 8038258:	4638      	mov	r0, r7
 803825a:	f7ff ff6d 	bl	8038138 <__ssputs_r>
 803825e:	3001      	adds	r0, #1
 8038260:	f000 80aa 	beq.w	80383b8 <_svfiprintf_r+0x1c8>
 8038264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8038266:	445a      	add	r2, fp
 8038268:	9209      	str	r2, [sp, #36]	; 0x24
 803826a:	f89a 3000 	ldrb.w	r3, [sl]
 803826e:	2b00      	cmp	r3, #0
 8038270:	f000 80a2 	beq.w	80383b8 <_svfiprintf_r+0x1c8>
 8038274:	2300      	movs	r3, #0
 8038276:	f04f 32ff 	mov.w	r2, #4294967295
 803827a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803827e:	f10a 0a01 	add.w	sl, sl, #1
 8038282:	9304      	str	r3, [sp, #16]
 8038284:	9307      	str	r3, [sp, #28]
 8038286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803828a:	931a      	str	r3, [sp, #104]	; 0x68
 803828c:	4654      	mov	r4, sl
 803828e:	2205      	movs	r2, #5
 8038290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8038294:	4851      	ldr	r0, [pc, #324]	; (80383dc <_svfiprintf_r+0x1ec>)
 8038296:	f7e7 ffb3 	bl	8020200 <memchr>
 803829a:	9a04      	ldr	r2, [sp, #16]
 803829c:	b9d8      	cbnz	r0, 80382d6 <_svfiprintf_r+0xe6>
 803829e:	06d0      	lsls	r0, r2, #27
 80382a0:	bf44      	itt	mi
 80382a2:	2320      	movmi	r3, #32
 80382a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80382a8:	0711      	lsls	r1, r2, #28
 80382aa:	bf44      	itt	mi
 80382ac:	232b      	movmi	r3, #43	; 0x2b
 80382ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80382b2:	f89a 3000 	ldrb.w	r3, [sl]
 80382b6:	2b2a      	cmp	r3, #42	; 0x2a
 80382b8:	d015      	beq.n	80382e6 <_svfiprintf_r+0xf6>
 80382ba:	9a07      	ldr	r2, [sp, #28]
 80382bc:	4654      	mov	r4, sl
 80382be:	2000      	movs	r0, #0
 80382c0:	f04f 0c0a 	mov.w	ip, #10
 80382c4:	4621      	mov	r1, r4
 80382c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80382ca:	3b30      	subs	r3, #48	; 0x30
 80382cc:	2b09      	cmp	r3, #9
 80382ce:	d94e      	bls.n	803836e <_svfiprintf_r+0x17e>
 80382d0:	b1b0      	cbz	r0, 8038300 <_svfiprintf_r+0x110>
 80382d2:	9207      	str	r2, [sp, #28]
 80382d4:	e014      	b.n	8038300 <_svfiprintf_r+0x110>
 80382d6:	eba0 0308 	sub.w	r3, r0, r8
 80382da:	fa09 f303 	lsl.w	r3, r9, r3
 80382de:	4313      	orrs	r3, r2
 80382e0:	9304      	str	r3, [sp, #16]
 80382e2:	46a2      	mov	sl, r4
 80382e4:	e7d2      	b.n	803828c <_svfiprintf_r+0x9c>
 80382e6:	9b03      	ldr	r3, [sp, #12]
 80382e8:	1d19      	adds	r1, r3, #4
 80382ea:	681b      	ldr	r3, [r3, #0]
 80382ec:	9103      	str	r1, [sp, #12]
 80382ee:	2b00      	cmp	r3, #0
 80382f0:	bfbb      	ittet	lt
 80382f2:	425b      	neglt	r3, r3
 80382f4:	f042 0202 	orrlt.w	r2, r2, #2
 80382f8:	9307      	strge	r3, [sp, #28]
 80382fa:	9307      	strlt	r3, [sp, #28]
 80382fc:	bfb8      	it	lt
 80382fe:	9204      	strlt	r2, [sp, #16]
 8038300:	7823      	ldrb	r3, [r4, #0]
 8038302:	2b2e      	cmp	r3, #46	; 0x2e
 8038304:	d10c      	bne.n	8038320 <_svfiprintf_r+0x130>
 8038306:	7863      	ldrb	r3, [r4, #1]
 8038308:	2b2a      	cmp	r3, #42	; 0x2a
 803830a:	d135      	bne.n	8038378 <_svfiprintf_r+0x188>
 803830c:	9b03      	ldr	r3, [sp, #12]
 803830e:	1d1a      	adds	r2, r3, #4
 8038310:	681b      	ldr	r3, [r3, #0]
 8038312:	9203      	str	r2, [sp, #12]
 8038314:	2b00      	cmp	r3, #0
 8038316:	bfb8      	it	lt
 8038318:	f04f 33ff 	movlt.w	r3, #4294967295
 803831c:	3402      	adds	r4, #2
 803831e:	9305      	str	r3, [sp, #20]
 8038320:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80383ec <_svfiprintf_r+0x1fc>
 8038324:	7821      	ldrb	r1, [r4, #0]
 8038326:	2203      	movs	r2, #3
 8038328:	4650      	mov	r0, sl
 803832a:	f7e7 ff69 	bl	8020200 <memchr>
 803832e:	b140      	cbz	r0, 8038342 <_svfiprintf_r+0x152>
 8038330:	2340      	movs	r3, #64	; 0x40
 8038332:	eba0 000a 	sub.w	r0, r0, sl
 8038336:	fa03 f000 	lsl.w	r0, r3, r0
 803833a:	9b04      	ldr	r3, [sp, #16]
 803833c:	4303      	orrs	r3, r0
 803833e:	3401      	adds	r4, #1
 8038340:	9304      	str	r3, [sp, #16]
 8038342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8038346:	4826      	ldr	r0, [pc, #152]	; (80383e0 <_svfiprintf_r+0x1f0>)
 8038348:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803834c:	2206      	movs	r2, #6
 803834e:	f7e7 ff57 	bl	8020200 <memchr>
 8038352:	2800      	cmp	r0, #0
 8038354:	d038      	beq.n	80383c8 <_svfiprintf_r+0x1d8>
 8038356:	4b23      	ldr	r3, [pc, #140]	; (80383e4 <_svfiprintf_r+0x1f4>)
 8038358:	bb1b      	cbnz	r3, 80383a2 <_svfiprintf_r+0x1b2>
 803835a:	9b03      	ldr	r3, [sp, #12]
 803835c:	3307      	adds	r3, #7
 803835e:	f023 0307 	bic.w	r3, r3, #7
 8038362:	3308      	adds	r3, #8
 8038364:	9303      	str	r3, [sp, #12]
 8038366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8038368:	4433      	add	r3, r6
 803836a:	9309      	str	r3, [sp, #36]	; 0x24
 803836c:	e767      	b.n	803823e <_svfiprintf_r+0x4e>
 803836e:	fb0c 3202 	mla	r2, ip, r2, r3
 8038372:	460c      	mov	r4, r1
 8038374:	2001      	movs	r0, #1
 8038376:	e7a5      	b.n	80382c4 <_svfiprintf_r+0xd4>
 8038378:	2300      	movs	r3, #0
 803837a:	3401      	adds	r4, #1
 803837c:	9305      	str	r3, [sp, #20]
 803837e:	4619      	mov	r1, r3
 8038380:	f04f 0c0a 	mov.w	ip, #10
 8038384:	4620      	mov	r0, r4
 8038386:	f810 2b01 	ldrb.w	r2, [r0], #1
 803838a:	3a30      	subs	r2, #48	; 0x30
 803838c:	2a09      	cmp	r2, #9
 803838e:	d903      	bls.n	8038398 <_svfiprintf_r+0x1a8>
 8038390:	2b00      	cmp	r3, #0
 8038392:	d0c5      	beq.n	8038320 <_svfiprintf_r+0x130>
 8038394:	9105      	str	r1, [sp, #20]
 8038396:	e7c3      	b.n	8038320 <_svfiprintf_r+0x130>
 8038398:	fb0c 2101 	mla	r1, ip, r1, r2
 803839c:	4604      	mov	r4, r0
 803839e:	2301      	movs	r3, #1
 80383a0:	e7f0      	b.n	8038384 <_svfiprintf_r+0x194>
 80383a2:	ab03      	add	r3, sp, #12
 80383a4:	9300      	str	r3, [sp, #0]
 80383a6:	462a      	mov	r2, r5
 80383a8:	4b0f      	ldr	r3, [pc, #60]	; (80383e8 <_svfiprintf_r+0x1f8>)
 80383aa:	a904      	add	r1, sp, #16
 80383ac:	4638      	mov	r0, r7
 80383ae:	f3af 8000 	nop.w
 80383b2:	1c42      	adds	r2, r0, #1
 80383b4:	4606      	mov	r6, r0
 80383b6:	d1d6      	bne.n	8038366 <_svfiprintf_r+0x176>
 80383b8:	89ab      	ldrh	r3, [r5, #12]
 80383ba:	065b      	lsls	r3, r3, #25
 80383bc:	f53f af2c 	bmi.w	8038218 <_svfiprintf_r+0x28>
 80383c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80383c2:	b01d      	add	sp, #116	; 0x74
 80383c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80383c8:	ab03      	add	r3, sp, #12
 80383ca:	9300      	str	r3, [sp, #0]
 80383cc:	462a      	mov	r2, r5
 80383ce:	4b06      	ldr	r3, [pc, #24]	; (80383e8 <_svfiprintf_r+0x1f8>)
 80383d0:	a904      	add	r1, sp, #16
 80383d2:	4638      	mov	r0, r7
 80383d4:	f000 fba6 	bl	8038b24 <_printf_i>
 80383d8:	e7eb      	b.n	80383b2 <_svfiprintf_r+0x1c2>
 80383da:	bf00      	nop
 80383dc:	080480a8 	.word	0x080480a8
 80383e0:	080480b2 	.word	0x080480b2
 80383e4:	00000000 	.word	0x00000000
 80383e8:	08038139 	.word	0x08038139
 80383ec:	080480ae 	.word	0x080480ae

080383f0 <_sungetc_r>:
 80383f0:	b538      	push	{r3, r4, r5, lr}
 80383f2:	1c4b      	adds	r3, r1, #1
 80383f4:	4614      	mov	r4, r2
 80383f6:	d103      	bne.n	8038400 <_sungetc_r+0x10>
 80383f8:	f04f 35ff 	mov.w	r5, #4294967295
 80383fc:	4628      	mov	r0, r5
 80383fe:	bd38      	pop	{r3, r4, r5, pc}
 8038400:	8993      	ldrh	r3, [r2, #12]
 8038402:	f023 0320 	bic.w	r3, r3, #32
 8038406:	8193      	strh	r3, [r2, #12]
 8038408:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803840a:	6852      	ldr	r2, [r2, #4]
 803840c:	b2cd      	uxtb	r5, r1
 803840e:	b18b      	cbz	r3, 8038434 <_sungetc_r+0x44>
 8038410:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8038412:	4293      	cmp	r3, r2
 8038414:	dd08      	ble.n	8038428 <_sungetc_r+0x38>
 8038416:	6823      	ldr	r3, [r4, #0]
 8038418:	1e5a      	subs	r2, r3, #1
 803841a:	6022      	str	r2, [r4, #0]
 803841c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8038420:	6863      	ldr	r3, [r4, #4]
 8038422:	3301      	adds	r3, #1
 8038424:	6063      	str	r3, [r4, #4]
 8038426:	e7e9      	b.n	80383fc <_sungetc_r+0xc>
 8038428:	4621      	mov	r1, r4
 803842a:	f000 ff25 	bl	8039278 <__submore>
 803842e:	2800      	cmp	r0, #0
 8038430:	d0f1      	beq.n	8038416 <_sungetc_r+0x26>
 8038432:	e7e1      	b.n	80383f8 <_sungetc_r+0x8>
 8038434:	6921      	ldr	r1, [r4, #16]
 8038436:	6823      	ldr	r3, [r4, #0]
 8038438:	b151      	cbz	r1, 8038450 <_sungetc_r+0x60>
 803843a:	4299      	cmp	r1, r3
 803843c:	d208      	bcs.n	8038450 <_sungetc_r+0x60>
 803843e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8038442:	42a9      	cmp	r1, r5
 8038444:	d104      	bne.n	8038450 <_sungetc_r+0x60>
 8038446:	3b01      	subs	r3, #1
 8038448:	3201      	adds	r2, #1
 803844a:	6023      	str	r3, [r4, #0]
 803844c:	6062      	str	r2, [r4, #4]
 803844e:	e7d5      	b.n	80383fc <_sungetc_r+0xc>
 8038450:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8038454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8038458:	6363      	str	r3, [r4, #52]	; 0x34
 803845a:	2303      	movs	r3, #3
 803845c:	63a3      	str	r3, [r4, #56]	; 0x38
 803845e:	4623      	mov	r3, r4
 8038460:	f803 5f46 	strb.w	r5, [r3, #70]!
 8038464:	6023      	str	r3, [r4, #0]
 8038466:	2301      	movs	r3, #1
 8038468:	e7dc      	b.n	8038424 <_sungetc_r+0x34>

0803846a <__ssrefill_r>:
 803846a:	b510      	push	{r4, lr}
 803846c:	460c      	mov	r4, r1
 803846e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8038470:	b169      	cbz	r1, 803848e <__ssrefill_r+0x24>
 8038472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8038476:	4299      	cmp	r1, r3
 8038478:	d001      	beq.n	803847e <__ssrefill_r+0x14>
 803847a:	f7fe fe2b 	bl	80370d4 <_free_r>
 803847e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8038480:	6063      	str	r3, [r4, #4]
 8038482:	2000      	movs	r0, #0
 8038484:	6360      	str	r0, [r4, #52]	; 0x34
 8038486:	b113      	cbz	r3, 803848e <__ssrefill_r+0x24>
 8038488:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 803848a:	6023      	str	r3, [r4, #0]
 803848c:	bd10      	pop	{r4, pc}
 803848e:	6923      	ldr	r3, [r4, #16]
 8038490:	6023      	str	r3, [r4, #0]
 8038492:	2300      	movs	r3, #0
 8038494:	6063      	str	r3, [r4, #4]
 8038496:	89a3      	ldrh	r3, [r4, #12]
 8038498:	f043 0320 	orr.w	r3, r3, #32
 803849c:	81a3      	strh	r3, [r4, #12]
 803849e:	f04f 30ff 	mov.w	r0, #4294967295
 80384a2:	e7f3      	b.n	803848c <__ssrefill_r+0x22>

080384a4 <__ssvfiscanf_r>:
 80384a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80384a8:	460c      	mov	r4, r1
 80384aa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80384ae:	2100      	movs	r1, #0
 80384b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80384b4:	49a6      	ldr	r1, [pc, #664]	; (8038750 <__ssvfiscanf_r+0x2ac>)
 80384b6:	91a0      	str	r1, [sp, #640]	; 0x280
 80384b8:	f10d 0804 	add.w	r8, sp, #4
 80384bc:	49a5      	ldr	r1, [pc, #660]	; (8038754 <__ssvfiscanf_r+0x2b0>)
 80384be:	4fa6      	ldr	r7, [pc, #664]	; (8038758 <__ssvfiscanf_r+0x2b4>)
 80384c0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 803875c <__ssvfiscanf_r+0x2b8>
 80384c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80384c8:	4606      	mov	r6, r0
 80384ca:	91a1      	str	r1, [sp, #644]	; 0x284
 80384cc:	9300      	str	r3, [sp, #0]
 80384ce:	7813      	ldrb	r3, [r2, #0]
 80384d0:	2b00      	cmp	r3, #0
 80384d2:	f000 815a 	beq.w	803878a <__ssvfiscanf_r+0x2e6>
 80384d6:	5dd9      	ldrb	r1, [r3, r7]
 80384d8:	f011 0108 	ands.w	r1, r1, #8
 80384dc:	f102 0501 	add.w	r5, r2, #1
 80384e0:	d019      	beq.n	8038516 <__ssvfiscanf_r+0x72>
 80384e2:	6863      	ldr	r3, [r4, #4]
 80384e4:	2b00      	cmp	r3, #0
 80384e6:	dd0f      	ble.n	8038508 <__ssvfiscanf_r+0x64>
 80384e8:	6823      	ldr	r3, [r4, #0]
 80384ea:	781a      	ldrb	r2, [r3, #0]
 80384ec:	5cba      	ldrb	r2, [r7, r2]
 80384ee:	0712      	lsls	r2, r2, #28
 80384f0:	d401      	bmi.n	80384f6 <__ssvfiscanf_r+0x52>
 80384f2:	462a      	mov	r2, r5
 80384f4:	e7eb      	b.n	80384ce <__ssvfiscanf_r+0x2a>
 80384f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80384f8:	3201      	adds	r2, #1
 80384fa:	9245      	str	r2, [sp, #276]	; 0x114
 80384fc:	6862      	ldr	r2, [r4, #4]
 80384fe:	3301      	adds	r3, #1
 8038500:	3a01      	subs	r2, #1
 8038502:	6062      	str	r2, [r4, #4]
 8038504:	6023      	str	r3, [r4, #0]
 8038506:	e7ec      	b.n	80384e2 <__ssvfiscanf_r+0x3e>
 8038508:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 803850a:	4621      	mov	r1, r4
 803850c:	4630      	mov	r0, r6
 803850e:	4798      	blx	r3
 8038510:	2800      	cmp	r0, #0
 8038512:	d0e9      	beq.n	80384e8 <__ssvfiscanf_r+0x44>
 8038514:	e7ed      	b.n	80384f2 <__ssvfiscanf_r+0x4e>
 8038516:	2b25      	cmp	r3, #37	; 0x25
 8038518:	d012      	beq.n	8038540 <__ssvfiscanf_r+0x9c>
 803851a:	469a      	mov	sl, r3
 803851c:	6863      	ldr	r3, [r4, #4]
 803851e:	2b00      	cmp	r3, #0
 8038520:	f340 8091 	ble.w	8038646 <__ssvfiscanf_r+0x1a2>
 8038524:	6822      	ldr	r2, [r4, #0]
 8038526:	7813      	ldrb	r3, [r2, #0]
 8038528:	4553      	cmp	r3, sl
 803852a:	f040 812e 	bne.w	803878a <__ssvfiscanf_r+0x2e6>
 803852e:	6863      	ldr	r3, [r4, #4]
 8038530:	3b01      	subs	r3, #1
 8038532:	6063      	str	r3, [r4, #4]
 8038534:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8038536:	3201      	adds	r2, #1
 8038538:	3301      	adds	r3, #1
 803853a:	6022      	str	r2, [r4, #0]
 803853c:	9345      	str	r3, [sp, #276]	; 0x114
 803853e:	e7d8      	b.n	80384f2 <__ssvfiscanf_r+0x4e>
 8038540:	9141      	str	r1, [sp, #260]	; 0x104
 8038542:	9143      	str	r1, [sp, #268]	; 0x10c
 8038544:	7853      	ldrb	r3, [r2, #1]
 8038546:	2b2a      	cmp	r3, #42	; 0x2a
 8038548:	bf02      	ittt	eq
 803854a:	2310      	moveq	r3, #16
 803854c:	1c95      	addeq	r5, r2, #2
 803854e:	9341      	streq	r3, [sp, #260]	; 0x104
 8038550:	220a      	movs	r2, #10
 8038552:	46aa      	mov	sl, r5
 8038554:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8038558:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 803855c:	2b09      	cmp	r3, #9
 803855e:	d91d      	bls.n	803859c <__ssvfiscanf_r+0xf8>
 8038560:	487e      	ldr	r0, [pc, #504]	; (803875c <__ssvfiscanf_r+0x2b8>)
 8038562:	2203      	movs	r2, #3
 8038564:	f7e7 fe4c 	bl	8020200 <memchr>
 8038568:	b140      	cbz	r0, 803857c <__ssvfiscanf_r+0xd8>
 803856a:	2301      	movs	r3, #1
 803856c:	eba0 0009 	sub.w	r0, r0, r9
 8038570:	fa03 f000 	lsl.w	r0, r3, r0
 8038574:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8038576:	4318      	orrs	r0, r3
 8038578:	9041      	str	r0, [sp, #260]	; 0x104
 803857a:	4655      	mov	r5, sl
 803857c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8038580:	2b78      	cmp	r3, #120	; 0x78
 8038582:	d806      	bhi.n	8038592 <__ssvfiscanf_r+0xee>
 8038584:	2b57      	cmp	r3, #87	; 0x57
 8038586:	d810      	bhi.n	80385aa <__ssvfiscanf_r+0x106>
 8038588:	2b25      	cmp	r3, #37	; 0x25
 803858a:	d0c6      	beq.n	803851a <__ssvfiscanf_r+0x76>
 803858c:	d856      	bhi.n	803863c <__ssvfiscanf_r+0x198>
 803858e:	2b00      	cmp	r3, #0
 8038590:	d064      	beq.n	803865c <__ssvfiscanf_r+0x1b8>
 8038592:	2303      	movs	r3, #3
 8038594:	9347      	str	r3, [sp, #284]	; 0x11c
 8038596:	230a      	movs	r3, #10
 8038598:	9342      	str	r3, [sp, #264]	; 0x108
 803859a:	e071      	b.n	8038680 <__ssvfiscanf_r+0x1dc>
 803859c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 803859e:	fb02 1103 	mla	r1, r2, r3, r1
 80385a2:	3930      	subs	r1, #48	; 0x30
 80385a4:	9143      	str	r1, [sp, #268]	; 0x10c
 80385a6:	4655      	mov	r5, sl
 80385a8:	e7d3      	b.n	8038552 <__ssvfiscanf_r+0xae>
 80385aa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80385ae:	2a20      	cmp	r2, #32
 80385b0:	d8ef      	bhi.n	8038592 <__ssvfiscanf_r+0xee>
 80385b2:	a101      	add	r1, pc, #4	; (adr r1, 80385b8 <__ssvfiscanf_r+0x114>)
 80385b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80385b8:	0803866b 	.word	0x0803866b
 80385bc:	08038593 	.word	0x08038593
 80385c0:	08038593 	.word	0x08038593
 80385c4:	080386c9 	.word	0x080386c9
 80385c8:	08038593 	.word	0x08038593
 80385cc:	08038593 	.word	0x08038593
 80385d0:	08038593 	.word	0x08038593
 80385d4:	08038593 	.word	0x08038593
 80385d8:	08038593 	.word	0x08038593
 80385dc:	08038593 	.word	0x08038593
 80385e0:	08038593 	.word	0x08038593
 80385e4:	080386df 	.word	0x080386df
 80385e8:	080386b5 	.word	0x080386b5
 80385ec:	08038643 	.word	0x08038643
 80385f0:	08038643 	.word	0x08038643
 80385f4:	08038643 	.word	0x08038643
 80385f8:	08038593 	.word	0x08038593
 80385fc:	080386b9 	.word	0x080386b9
 8038600:	08038593 	.word	0x08038593
 8038604:	08038593 	.word	0x08038593
 8038608:	08038593 	.word	0x08038593
 803860c:	08038593 	.word	0x08038593
 8038610:	080386ef 	.word	0x080386ef
 8038614:	080386c1 	.word	0x080386c1
 8038618:	08038663 	.word	0x08038663
 803861c:	08038593 	.word	0x08038593
 8038620:	08038593 	.word	0x08038593
 8038624:	080386eb 	.word	0x080386eb
 8038628:	08038593 	.word	0x08038593
 803862c:	080386b5 	.word	0x080386b5
 8038630:	08038593 	.word	0x08038593
 8038634:	08038593 	.word	0x08038593
 8038638:	0803866b 	.word	0x0803866b
 803863c:	3b45      	subs	r3, #69	; 0x45
 803863e:	2b02      	cmp	r3, #2
 8038640:	d8a7      	bhi.n	8038592 <__ssvfiscanf_r+0xee>
 8038642:	2305      	movs	r3, #5
 8038644:	e01b      	b.n	803867e <__ssvfiscanf_r+0x1da>
 8038646:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8038648:	4621      	mov	r1, r4
 803864a:	4630      	mov	r0, r6
 803864c:	4798      	blx	r3
 803864e:	2800      	cmp	r0, #0
 8038650:	f43f af68 	beq.w	8038524 <__ssvfiscanf_r+0x80>
 8038654:	9844      	ldr	r0, [sp, #272]	; 0x110
 8038656:	2800      	cmp	r0, #0
 8038658:	f040 808d 	bne.w	8038776 <__ssvfiscanf_r+0x2d2>
 803865c:	f04f 30ff 	mov.w	r0, #4294967295
 8038660:	e08f      	b.n	8038782 <__ssvfiscanf_r+0x2de>
 8038662:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8038664:	f042 0220 	orr.w	r2, r2, #32
 8038668:	9241      	str	r2, [sp, #260]	; 0x104
 803866a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 803866c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8038670:	9241      	str	r2, [sp, #260]	; 0x104
 8038672:	2210      	movs	r2, #16
 8038674:	2b6f      	cmp	r3, #111	; 0x6f
 8038676:	9242      	str	r2, [sp, #264]	; 0x108
 8038678:	bf34      	ite	cc
 803867a:	2303      	movcc	r3, #3
 803867c:	2304      	movcs	r3, #4
 803867e:	9347      	str	r3, [sp, #284]	; 0x11c
 8038680:	6863      	ldr	r3, [r4, #4]
 8038682:	2b00      	cmp	r3, #0
 8038684:	dd42      	ble.n	803870c <__ssvfiscanf_r+0x268>
 8038686:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8038688:	0659      	lsls	r1, r3, #25
 803868a:	d404      	bmi.n	8038696 <__ssvfiscanf_r+0x1f2>
 803868c:	6823      	ldr	r3, [r4, #0]
 803868e:	781a      	ldrb	r2, [r3, #0]
 8038690:	5cba      	ldrb	r2, [r7, r2]
 8038692:	0712      	lsls	r2, r2, #28
 8038694:	d441      	bmi.n	803871a <__ssvfiscanf_r+0x276>
 8038696:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8038698:	2b02      	cmp	r3, #2
 803869a:	dc50      	bgt.n	803873e <__ssvfiscanf_r+0x29a>
 803869c:	466b      	mov	r3, sp
 803869e:	4622      	mov	r2, r4
 80386a0:	a941      	add	r1, sp, #260	; 0x104
 80386a2:	4630      	mov	r0, r6
 80386a4:	f000 fb64 	bl	8038d70 <_scanf_chars>
 80386a8:	2801      	cmp	r0, #1
 80386aa:	d06e      	beq.n	803878a <__ssvfiscanf_r+0x2e6>
 80386ac:	2802      	cmp	r0, #2
 80386ae:	f47f af20 	bne.w	80384f2 <__ssvfiscanf_r+0x4e>
 80386b2:	e7cf      	b.n	8038654 <__ssvfiscanf_r+0x1b0>
 80386b4:	220a      	movs	r2, #10
 80386b6:	e7dd      	b.n	8038674 <__ssvfiscanf_r+0x1d0>
 80386b8:	2300      	movs	r3, #0
 80386ba:	9342      	str	r3, [sp, #264]	; 0x108
 80386bc:	2303      	movs	r3, #3
 80386be:	e7de      	b.n	803867e <__ssvfiscanf_r+0x1da>
 80386c0:	2308      	movs	r3, #8
 80386c2:	9342      	str	r3, [sp, #264]	; 0x108
 80386c4:	2304      	movs	r3, #4
 80386c6:	e7da      	b.n	803867e <__ssvfiscanf_r+0x1da>
 80386c8:	4629      	mov	r1, r5
 80386ca:	4640      	mov	r0, r8
 80386cc:	f000 fd28 	bl	8039120 <__sccl>
 80386d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80386d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80386d6:	9341      	str	r3, [sp, #260]	; 0x104
 80386d8:	4605      	mov	r5, r0
 80386da:	2301      	movs	r3, #1
 80386dc:	e7cf      	b.n	803867e <__ssvfiscanf_r+0x1da>
 80386de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80386e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80386e4:	9341      	str	r3, [sp, #260]	; 0x104
 80386e6:	2300      	movs	r3, #0
 80386e8:	e7c9      	b.n	803867e <__ssvfiscanf_r+0x1da>
 80386ea:	2302      	movs	r3, #2
 80386ec:	e7c7      	b.n	803867e <__ssvfiscanf_r+0x1da>
 80386ee:	9841      	ldr	r0, [sp, #260]	; 0x104
 80386f0:	06c3      	lsls	r3, r0, #27
 80386f2:	f53f aefe 	bmi.w	80384f2 <__ssvfiscanf_r+0x4e>
 80386f6:	9b00      	ldr	r3, [sp, #0]
 80386f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80386fa:	1d19      	adds	r1, r3, #4
 80386fc:	9100      	str	r1, [sp, #0]
 80386fe:	681b      	ldr	r3, [r3, #0]
 8038700:	f010 0f01 	tst.w	r0, #1
 8038704:	bf14      	ite	ne
 8038706:	801a      	strhne	r2, [r3, #0]
 8038708:	601a      	streq	r2, [r3, #0]
 803870a:	e6f2      	b.n	80384f2 <__ssvfiscanf_r+0x4e>
 803870c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 803870e:	4621      	mov	r1, r4
 8038710:	4630      	mov	r0, r6
 8038712:	4798      	blx	r3
 8038714:	2800      	cmp	r0, #0
 8038716:	d0b6      	beq.n	8038686 <__ssvfiscanf_r+0x1e2>
 8038718:	e79c      	b.n	8038654 <__ssvfiscanf_r+0x1b0>
 803871a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803871c:	3201      	adds	r2, #1
 803871e:	9245      	str	r2, [sp, #276]	; 0x114
 8038720:	6862      	ldr	r2, [r4, #4]
 8038722:	3a01      	subs	r2, #1
 8038724:	2a00      	cmp	r2, #0
 8038726:	6062      	str	r2, [r4, #4]
 8038728:	dd02      	ble.n	8038730 <__ssvfiscanf_r+0x28c>
 803872a:	3301      	adds	r3, #1
 803872c:	6023      	str	r3, [r4, #0]
 803872e:	e7ad      	b.n	803868c <__ssvfiscanf_r+0x1e8>
 8038730:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8038732:	4621      	mov	r1, r4
 8038734:	4630      	mov	r0, r6
 8038736:	4798      	blx	r3
 8038738:	2800      	cmp	r0, #0
 803873a:	d0a7      	beq.n	803868c <__ssvfiscanf_r+0x1e8>
 803873c:	e78a      	b.n	8038654 <__ssvfiscanf_r+0x1b0>
 803873e:	2b04      	cmp	r3, #4
 8038740:	dc0e      	bgt.n	8038760 <__ssvfiscanf_r+0x2bc>
 8038742:	466b      	mov	r3, sp
 8038744:	4622      	mov	r2, r4
 8038746:	a941      	add	r1, sp, #260	; 0x104
 8038748:	4630      	mov	r0, r6
 803874a:	f000 fb6b 	bl	8038e24 <_scanf_i>
 803874e:	e7ab      	b.n	80386a8 <__ssvfiscanf_r+0x204>
 8038750:	080383f1 	.word	0x080383f1
 8038754:	0803846b 	.word	0x0803846b
 8038758:	08047f47 	.word	0x08047f47
 803875c:	080480ae 	.word	0x080480ae
 8038760:	4b0b      	ldr	r3, [pc, #44]	; (8038790 <__ssvfiscanf_r+0x2ec>)
 8038762:	2b00      	cmp	r3, #0
 8038764:	f43f aec5 	beq.w	80384f2 <__ssvfiscanf_r+0x4e>
 8038768:	466b      	mov	r3, sp
 803876a:	4622      	mov	r2, r4
 803876c:	a941      	add	r1, sp, #260	; 0x104
 803876e:	4630      	mov	r0, r6
 8038770:	f3af 8000 	nop.w
 8038774:	e798      	b.n	80386a8 <__ssvfiscanf_r+0x204>
 8038776:	89a3      	ldrh	r3, [r4, #12]
 8038778:	f013 0f40 	tst.w	r3, #64	; 0x40
 803877c:	bf18      	it	ne
 803877e:	f04f 30ff 	movne.w	r0, #4294967295
 8038782:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8038786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803878a:	9844      	ldr	r0, [sp, #272]	; 0x110
 803878c:	e7f9      	b.n	8038782 <__ssvfiscanf_r+0x2de>
 803878e:	bf00      	nop
 8038790:	00000000 	.word	0x00000000

08038794 <__sfputc_r>:
 8038794:	6893      	ldr	r3, [r2, #8]
 8038796:	3b01      	subs	r3, #1
 8038798:	2b00      	cmp	r3, #0
 803879a:	b410      	push	{r4}
 803879c:	6093      	str	r3, [r2, #8]
 803879e:	da08      	bge.n	80387b2 <__sfputc_r+0x1e>
 80387a0:	6994      	ldr	r4, [r2, #24]
 80387a2:	42a3      	cmp	r3, r4
 80387a4:	db01      	blt.n	80387aa <__sfputc_r+0x16>
 80387a6:	290a      	cmp	r1, #10
 80387a8:	d103      	bne.n	80387b2 <__sfputc_r+0x1e>
 80387aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80387ae:	f7ff b903 	b.w	80379b8 <__swbuf_r>
 80387b2:	6813      	ldr	r3, [r2, #0]
 80387b4:	1c58      	adds	r0, r3, #1
 80387b6:	6010      	str	r0, [r2, #0]
 80387b8:	7019      	strb	r1, [r3, #0]
 80387ba:	4608      	mov	r0, r1
 80387bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80387c0:	4770      	bx	lr

080387c2 <__sfputs_r>:
 80387c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80387c4:	4606      	mov	r6, r0
 80387c6:	460f      	mov	r7, r1
 80387c8:	4614      	mov	r4, r2
 80387ca:	18d5      	adds	r5, r2, r3
 80387cc:	42ac      	cmp	r4, r5
 80387ce:	d101      	bne.n	80387d4 <__sfputs_r+0x12>
 80387d0:	2000      	movs	r0, #0
 80387d2:	e007      	b.n	80387e4 <__sfputs_r+0x22>
 80387d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80387d8:	463a      	mov	r2, r7
 80387da:	4630      	mov	r0, r6
 80387dc:	f7ff ffda 	bl	8038794 <__sfputc_r>
 80387e0:	1c43      	adds	r3, r0, #1
 80387e2:	d1f3      	bne.n	80387cc <__sfputs_r+0xa>
 80387e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080387e8 <_vfiprintf_r>:
 80387e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80387ec:	460d      	mov	r5, r1
 80387ee:	b09d      	sub	sp, #116	; 0x74
 80387f0:	4614      	mov	r4, r2
 80387f2:	4698      	mov	r8, r3
 80387f4:	4606      	mov	r6, r0
 80387f6:	b118      	cbz	r0, 8038800 <_vfiprintf_r+0x18>
 80387f8:	6983      	ldr	r3, [r0, #24]
 80387fa:	b90b      	cbnz	r3, 8038800 <_vfiprintf_r+0x18>
 80387fc:	f7ff fb08 	bl	8037e10 <__sinit>
 8038800:	4b89      	ldr	r3, [pc, #548]	; (8038a28 <_vfiprintf_r+0x240>)
 8038802:	429d      	cmp	r5, r3
 8038804:	d11b      	bne.n	803883e <_vfiprintf_r+0x56>
 8038806:	6875      	ldr	r5, [r6, #4]
 8038808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803880a:	07d9      	lsls	r1, r3, #31
 803880c:	d405      	bmi.n	803881a <_vfiprintf_r+0x32>
 803880e:	89ab      	ldrh	r3, [r5, #12]
 8038810:	059a      	lsls	r2, r3, #22
 8038812:	d402      	bmi.n	803881a <_vfiprintf_r+0x32>
 8038814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8038816:	f7ff fc08 	bl	803802a <__retarget_lock_acquire_recursive>
 803881a:	89ab      	ldrh	r3, [r5, #12]
 803881c:	071b      	lsls	r3, r3, #28
 803881e:	d501      	bpl.n	8038824 <_vfiprintf_r+0x3c>
 8038820:	692b      	ldr	r3, [r5, #16]
 8038822:	b9eb      	cbnz	r3, 8038860 <_vfiprintf_r+0x78>
 8038824:	4629      	mov	r1, r5
 8038826:	4630      	mov	r0, r6
 8038828:	f7ff f92a 	bl	8037a80 <__swsetup_r>
 803882c:	b1c0      	cbz	r0, 8038860 <_vfiprintf_r+0x78>
 803882e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8038830:	07dc      	lsls	r4, r3, #31
 8038832:	d50e      	bpl.n	8038852 <_vfiprintf_r+0x6a>
 8038834:	f04f 30ff 	mov.w	r0, #4294967295
 8038838:	b01d      	add	sp, #116	; 0x74
 803883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803883e:	4b7b      	ldr	r3, [pc, #492]	; (8038a2c <_vfiprintf_r+0x244>)
 8038840:	429d      	cmp	r5, r3
 8038842:	d101      	bne.n	8038848 <_vfiprintf_r+0x60>
 8038844:	68b5      	ldr	r5, [r6, #8]
 8038846:	e7df      	b.n	8038808 <_vfiprintf_r+0x20>
 8038848:	4b79      	ldr	r3, [pc, #484]	; (8038a30 <_vfiprintf_r+0x248>)
 803884a:	429d      	cmp	r5, r3
 803884c:	bf08      	it	eq
 803884e:	68f5      	ldreq	r5, [r6, #12]
 8038850:	e7da      	b.n	8038808 <_vfiprintf_r+0x20>
 8038852:	89ab      	ldrh	r3, [r5, #12]
 8038854:	0598      	lsls	r0, r3, #22
 8038856:	d4ed      	bmi.n	8038834 <_vfiprintf_r+0x4c>
 8038858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803885a:	f7ff fbe7 	bl	803802c <__retarget_lock_release_recursive>
 803885e:	e7e9      	b.n	8038834 <_vfiprintf_r+0x4c>
 8038860:	2300      	movs	r3, #0
 8038862:	9309      	str	r3, [sp, #36]	; 0x24
 8038864:	2320      	movs	r3, #32
 8038866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803886a:	f8cd 800c 	str.w	r8, [sp, #12]
 803886e:	2330      	movs	r3, #48	; 0x30
 8038870:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8038a34 <_vfiprintf_r+0x24c>
 8038874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8038878:	f04f 0901 	mov.w	r9, #1
 803887c:	4623      	mov	r3, r4
 803887e:	469a      	mov	sl, r3
 8038880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8038884:	b10a      	cbz	r2, 803888a <_vfiprintf_r+0xa2>
 8038886:	2a25      	cmp	r2, #37	; 0x25
 8038888:	d1f9      	bne.n	803887e <_vfiprintf_r+0x96>
 803888a:	ebba 0b04 	subs.w	fp, sl, r4
 803888e:	d00b      	beq.n	80388a8 <_vfiprintf_r+0xc0>
 8038890:	465b      	mov	r3, fp
 8038892:	4622      	mov	r2, r4
 8038894:	4629      	mov	r1, r5
 8038896:	4630      	mov	r0, r6
 8038898:	f7ff ff93 	bl	80387c2 <__sfputs_r>
 803889c:	3001      	adds	r0, #1
 803889e:	f000 80aa 	beq.w	80389f6 <_vfiprintf_r+0x20e>
 80388a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80388a4:	445a      	add	r2, fp
 80388a6:	9209      	str	r2, [sp, #36]	; 0x24
 80388a8:	f89a 3000 	ldrb.w	r3, [sl]
 80388ac:	2b00      	cmp	r3, #0
 80388ae:	f000 80a2 	beq.w	80389f6 <_vfiprintf_r+0x20e>
 80388b2:	2300      	movs	r3, #0
 80388b4:	f04f 32ff 	mov.w	r2, #4294967295
 80388b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80388bc:	f10a 0a01 	add.w	sl, sl, #1
 80388c0:	9304      	str	r3, [sp, #16]
 80388c2:	9307      	str	r3, [sp, #28]
 80388c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80388c8:	931a      	str	r3, [sp, #104]	; 0x68
 80388ca:	4654      	mov	r4, sl
 80388cc:	2205      	movs	r2, #5
 80388ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80388d2:	4858      	ldr	r0, [pc, #352]	; (8038a34 <_vfiprintf_r+0x24c>)
 80388d4:	f7e7 fc94 	bl	8020200 <memchr>
 80388d8:	9a04      	ldr	r2, [sp, #16]
 80388da:	b9d8      	cbnz	r0, 8038914 <_vfiprintf_r+0x12c>
 80388dc:	06d1      	lsls	r1, r2, #27
 80388de:	bf44      	itt	mi
 80388e0:	2320      	movmi	r3, #32
 80388e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80388e6:	0713      	lsls	r3, r2, #28
 80388e8:	bf44      	itt	mi
 80388ea:	232b      	movmi	r3, #43	; 0x2b
 80388ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80388f0:	f89a 3000 	ldrb.w	r3, [sl]
 80388f4:	2b2a      	cmp	r3, #42	; 0x2a
 80388f6:	d015      	beq.n	8038924 <_vfiprintf_r+0x13c>
 80388f8:	9a07      	ldr	r2, [sp, #28]
 80388fa:	4654      	mov	r4, sl
 80388fc:	2000      	movs	r0, #0
 80388fe:	f04f 0c0a 	mov.w	ip, #10
 8038902:	4621      	mov	r1, r4
 8038904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8038908:	3b30      	subs	r3, #48	; 0x30
 803890a:	2b09      	cmp	r3, #9
 803890c:	d94e      	bls.n	80389ac <_vfiprintf_r+0x1c4>
 803890e:	b1b0      	cbz	r0, 803893e <_vfiprintf_r+0x156>
 8038910:	9207      	str	r2, [sp, #28]
 8038912:	e014      	b.n	803893e <_vfiprintf_r+0x156>
 8038914:	eba0 0308 	sub.w	r3, r0, r8
 8038918:	fa09 f303 	lsl.w	r3, r9, r3
 803891c:	4313      	orrs	r3, r2
 803891e:	9304      	str	r3, [sp, #16]
 8038920:	46a2      	mov	sl, r4
 8038922:	e7d2      	b.n	80388ca <_vfiprintf_r+0xe2>
 8038924:	9b03      	ldr	r3, [sp, #12]
 8038926:	1d19      	adds	r1, r3, #4
 8038928:	681b      	ldr	r3, [r3, #0]
 803892a:	9103      	str	r1, [sp, #12]
 803892c:	2b00      	cmp	r3, #0
 803892e:	bfbb      	ittet	lt
 8038930:	425b      	neglt	r3, r3
 8038932:	f042 0202 	orrlt.w	r2, r2, #2
 8038936:	9307      	strge	r3, [sp, #28]
 8038938:	9307      	strlt	r3, [sp, #28]
 803893a:	bfb8      	it	lt
 803893c:	9204      	strlt	r2, [sp, #16]
 803893e:	7823      	ldrb	r3, [r4, #0]
 8038940:	2b2e      	cmp	r3, #46	; 0x2e
 8038942:	d10c      	bne.n	803895e <_vfiprintf_r+0x176>
 8038944:	7863      	ldrb	r3, [r4, #1]
 8038946:	2b2a      	cmp	r3, #42	; 0x2a
 8038948:	d135      	bne.n	80389b6 <_vfiprintf_r+0x1ce>
 803894a:	9b03      	ldr	r3, [sp, #12]
 803894c:	1d1a      	adds	r2, r3, #4
 803894e:	681b      	ldr	r3, [r3, #0]
 8038950:	9203      	str	r2, [sp, #12]
 8038952:	2b00      	cmp	r3, #0
 8038954:	bfb8      	it	lt
 8038956:	f04f 33ff 	movlt.w	r3, #4294967295
 803895a:	3402      	adds	r4, #2
 803895c:	9305      	str	r3, [sp, #20]
 803895e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8038a44 <_vfiprintf_r+0x25c>
 8038962:	7821      	ldrb	r1, [r4, #0]
 8038964:	2203      	movs	r2, #3
 8038966:	4650      	mov	r0, sl
 8038968:	f7e7 fc4a 	bl	8020200 <memchr>
 803896c:	b140      	cbz	r0, 8038980 <_vfiprintf_r+0x198>
 803896e:	2340      	movs	r3, #64	; 0x40
 8038970:	eba0 000a 	sub.w	r0, r0, sl
 8038974:	fa03 f000 	lsl.w	r0, r3, r0
 8038978:	9b04      	ldr	r3, [sp, #16]
 803897a:	4303      	orrs	r3, r0
 803897c:	3401      	adds	r4, #1
 803897e:	9304      	str	r3, [sp, #16]
 8038980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8038984:	482c      	ldr	r0, [pc, #176]	; (8038a38 <_vfiprintf_r+0x250>)
 8038986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803898a:	2206      	movs	r2, #6
 803898c:	f7e7 fc38 	bl	8020200 <memchr>
 8038990:	2800      	cmp	r0, #0
 8038992:	d03f      	beq.n	8038a14 <_vfiprintf_r+0x22c>
 8038994:	4b29      	ldr	r3, [pc, #164]	; (8038a3c <_vfiprintf_r+0x254>)
 8038996:	bb1b      	cbnz	r3, 80389e0 <_vfiprintf_r+0x1f8>
 8038998:	9b03      	ldr	r3, [sp, #12]
 803899a:	3307      	adds	r3, #7
 803899c:	f023 0307 	bic.w	r3, r3, #7
 80389a0:	3308      	adds	r3, #8
 80389a2:	9303      	str	r3, [sp, #12]
 80389a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80389a6:	443b      	add	r3, r7
 80389a8:	9309      	str	r3, [sp, #36]	; 0x24
 80389aa:	e767      	b.n	803887c <_vfiprintf_r+0x94>
 80389ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80389b0:	460c      	mov	r4, r1
 80389b2:	2001      	movs	r0, #1
 80389b4:	e7a5      	b.n	8038902 <_vfiprintf_r+0x11a>
 80389b6:	2300      	movs	r3, #0
 80389b8:	3401      	adds	r4, #1
 80389ba:	9305      	str	r3, [sp, #20]
 80389bc:	4619      	mov	r1, r3
 80389be:	f04f 0c0a 	mov.w	ip, #10
 80389c2:	4620      	mov	r0, r4
 80389c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80389c8:	3a30      	subs	r2, #48	; 0x30
 80389ca:	2a09      	cmp	r2, #9
 80389cc:	d903      	bls.n	80389d6 <_vfiprintf_r+0x1ee>
 80389ce:	2b00      	cmp	r3, #0
 80389d0:	d0c5      	beq.n	803895e <_vfiprintf_r+0x176>
 80389d2:	9105      	str	r1, [sp, #20]
 80389d4:	e7c3      	b.n	803895e <_vfiprintf_r+0x176>
 80389d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80389da:	4604      	mov	r4, r0
 80389dc:	2301      	movs	r3, #1
 80389de:	e7f0      	b.n	80389c2 <_vfiprintf_r+0x1da>
 80389e0:	ab03      	add	r3, sp, #12
 80389e2:	9300      	str	r3, [sp, #0]
 80389e4:	462a      	mov	r2, r5
 80389e6:	4b16      	ldr	r3, [pc, #88]	; (8038a40 <_vfiprintf_r+0x258>)
 80389e8:	a904      	add	r1, sp, #16
 80389ea:	4630      	mov	r0, r6
 80389ec:	f3af 8000 	nop.w
 80389f0:	4607      	mov	r7, r0
 80389f2:	1c78      	adds	r0, r7, #1
 80389f4:	d1d6      	bne.n	80389a4 <_vfiprintf_r+0x1bc>
 80389f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80389f8:	07d9      	lsls	r1, r3, #31
 80389fa:	d405      	bmi.n	8038a08 <_vfiprintf_r+0x220>
 80389fc:	89ab      	ldrh	r3, [r5, #12]
 80389fe:	059a      	lsls	r2, r3, #22
 8038a00:	d402      	bmi.n	8038a08 <_vfiprintf_r+0x220>
 8038a02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8038a04:	f7ff fb12 	bl	803802c <__retarget_lock_release_recursive>
 8038a08:	89ab      	ldrh	r3, [r5, #12]
 8038a0a:	065b      	lsls	r3, r3, #25
 8038a0c:	f53f af12 	bmi.w	8038834 <_vfiprintf_r+0x4c>
 8038a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8038a12:	e711      	b.n	8038838 <_vfiprintf_r+0x50>
 8038a14:	ab03      	add	r3, sp, #12
 8038a16:	9300      	str	r3, [sp, #0]
 8038a18:	462a      	mov	r2, r5
 8038a1a:	4b09      	ldr	r3, [pc, #36]	; (8038a40 <_vfiprintf_r+0x258>)
 8038a1c:	a904      	add	r1, sp, #16
 8038a1e:	4630      	mov	r0, r6
 8038a20:	f000 f880 	bl	8038b24 <_printf_i>
 8038a24:	e7e4      	b.n	80389f0 <_vfiprintf_r+0x208>
 8038a26:	bf00      	nop
 8038a28:	08048068 	.word	0x08048068
 8038a2c:	08048088 	.word	0x08048088
 8038a30:	08048048 	.word	0x08048048
 8038a34:	080480a8 	.word	0x080480a8
 8038a38:	080480b2 	.word	0x080480b2
 8038a3c:	00000000 	.word	0x00000000
 8038a40:	080387c3 	.word	0x080387c3
 8038a44:	080480ae 	.word	0x080480ae

08038a48 <_printf_common>:
 8038a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8038a4c:	4616      	mov	r6, r2
 8038a4e:	4699      	mov	r9, r3
 8038a50:	688a      	ldr	r2, [r1, #8]
 8038a52:	690b      	ldr	r3, [r1, #16]
 8038a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8038a58:	4293      	cmp	r3, r2
 8038a5a:	bfb8      	it	lt
 8038a5c:	4613      	movlt	r3, r2
 8038a5e:	6033      	str	r3, [r6, #0]
 8038a60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8038a64:	4607      	mov	r7, r0
 8038a66:	460c      	mov	r4, r1
 8038a68:	b10a      	cbz	r2, 8038a6e <_printf_common+0x26>
 8038a6a:	3301      	adds	r3, #1
 8038a6c:	6033      	str	r3, [r6, #0]
 8038a6e:	6823      	ldr	r3, [r4, #0]
 8038a70:	0699      	lsls	r1, r3, #26
 8038a72:	bf42      	ittt	mi
 8038a74:	6833      	ldrmi	r3, [r6, #0]
 8038a76:	3302      	addmi	r3, #2
 8038a78:	6033      	strmi	r3, [r6, #0]
 8038a7a:	6825      	ldr	r5, [r4, #0]
 8038a7c:	f015 0506 	ands.w	r5, r5, #6
 8038a80:	d106      	bne.n	8038a90 <_printf_common+0x48>
 8038a82:	f104 0a19 	add.w	sl, r4, #25
 8038a86:	68e3      	ldr	r3, [r4, #12]
 8038a88:	6832      	ldr	r2, [r6, #0]
 8038a8a:	1a9b      	subs	r3, r3, r2
 8038a8c:	42ab      	cmp	r3, r5
 8038a8e:	dc26      	bgt.n	8038ade <_printf_common+0x96>
 8038a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8038a94:	1e13      	subs	r3, r2, #0
 8038a96:	6822      	ldr	r2, [r4, #0]
 8038a98:	bf18      	it	ne
 8038a9a:	2301      	movne	r3, #1
 8038a9c:	0692      	lsls	r2, r2, #26
 8038a9e:	d42b      	bmi.n	8038af8 <_printf_common+0xb0>
 8038aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8038aa4:	4649      	mov	r1, r9
 8038aa6:	4638      	mov	r0, r7
 8038aa8:	47c0      	blx	r8
 8038aaa:	3001      	adds	r0, #1
 8038aac:	d01e      	beq.n	8038aec <_printf_common+0xa4>
 8038aae:	6823      	ldr	r3, [r4, #0]
 8038ab0:	68e5      	ldr	r5, [r4, #12]
 8038ab2:	6832      	ldr	r2, [r6, #0]
 8038ab4:	f003 0306 	and.w	r3, r3, #6
 8038ab8:	2b04      	cmp	r3, #4
 8038aba:	bf08      	it	eq
 8038abc:	1aad      	subeq	r5, r5, r2
 8038abe:	68a3      	ldr	r3, [r4, #8]
 8038ac0:	6922      	ldr	r2, [r4, #16]
 8038ac2:	bf0c      	ite	eq
 8038ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8038ac8:	2500      	movne	r5, #0
 8038aca:	4293      	cmp	r3, r2
 8038acc:	bfc4      	itt	gt
 8038ace:	1a9b      	subgt	r3, r3, r2
 8038ad0:	18ed      	addgt	r5, r5, r3
 8038ad2:	2600      	movs	r6, #0
 8038ad4:	341a      	adds	r4, #26
 8038ad6:	42b5      	cmp	r5, r6
 8038ad8:	d11a      	bne.n	8038b10 <_printf_common+0xc8>
 8038ada:	2000      	movs	r0, #0
 8038adc:	e008      	b.n	8038af0 <_printf_common+0xa8>
 8038ade:	2301      	movs	r3, #1
 8038ae0:	4652      	mov	r2, sl
 8038ae2:	4649      	mov	r1, r9
 8038ae4:	4638      	mov	r0, r7
 8038ae6:	47c0      	blx	r8
 8038ae8:	3001      	adds	r0, #1
 8038aea:	d103      	bne.n	8038af4 <_printf_common+0xac>
 8038aec:	f04f 30ff 	mov.w	r0, #4294967295
 8038af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8038af4:	3501      	adds	r5, #1
 8038af6:	e7c6      	b.n	8038a86 <_printf_common+0x3e>
 8038af8:	18e1      	adds	r1, r4, r3
 8038afa:	1c5a      	adds	r2, r3, #1
 8038afc:	2030      	movs	r0, #48	; 0x30
 8038afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8038b02:	4422      	add	r2, r4
 8038b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8038b08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8038b0c:	3302      	adds	r3, #2
 8038b0e:	e7c7      	b.n	8038aa0 <_printf_common+0x58>
 8038b10:	2301      	movs	r3, #1
 8038b12:	4622      	mov	r2, r4
 8038b14:	4649      	mov	r1, r9
 8038b16:	4638      	mov	r0, r7
 8038b18:	47c0      	blx	r8
 8038b1a:	3001      	adds	r0, #1
 8038b1c:	d0e6      	beq.n	8038aec <_printf_common+0xa4>
 8038b1e:	3601      	adds	r6, #1
 8038b20:	e7d9      	b.n	8038ad6 <_printf_common+0x8e>
	...

08038b24 <_printf_i>:
 8038b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8038b28:	7e0f      	ldrb	r7, [r1, #24]
 8038b2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8038b2c:	2f78      	cmp	r7, #120	; 0x78
 8038b2e:	4691      	mov	r9, r2
 8038b30:	4680      	mov	r8, r0
 8038b32:	460c      	mov	r4, r1
 8038b34:	469a      	mov	sl, r3
 8038b36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8038b3a:	d807      	bhi.n	8038b4c <_printf_i+0x28>
 8038b3c:	2f62      	cmp	r7, #98	; 0x62
 8038b3e:	d80a      	bhi.n	8038b56 <_printf_i+0x32>
 8038b40:	2f00      	cmp	r7, #0
 8038b42:	f000 80d8 	beq.w	8038cf6 <_printf_i+0x1d2>
 8038b46:	2f58      	cmp	r7, #88	; 0x58
 8038b48:	f000 80a3 	beq.w	8038c92 <_printf_i+0x16e>
 8038b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8038b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8038b54:	e03a      	b.n	8038bcc <_printf_i+0xa8>
 8038b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8038b5a:	2b15      	cmp	r3, #21
 8038b5c:	d8f6      	bhi.n	8038b4c <_printf_i+0x28>
 8038b5e:	a101      	add	r1, pc, #4	; (adr r1, 8038b64 <_printf_i+0x40>)
 8038b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8038b64:	08038bbd 	.word	0x08038bbd
 8038b68:	08038bd1 	.word	0x08038bd1
 8038b6c:	08038b4d 	.word	0x08038b4d
 8038b70:	08038b4d 	.word	0x08038b4d
 8038b74:	08038b4d 	.word	0x08038b4d
 8038b78:	08038b4d 	.word	0x08038b4d
 8038b7c:	08038bd1 	.word	0x08038bd1
 8038b80:	08038b4d 	.word	0x08038b4d
 8038b84:	08038b4d 	.word	0x08038b4d
 8038b88:	08038b4d 	.word	0x08038b4d
 8038b8c:	08038b4d 	.word	0x08038b4d
 8038b90:	08038cdd 	.word	0x08038cdd
 8038b94:	08038c01 	.word	0x08038c01
 8038b98:	08038cbf 	.word	0x08038cbf
 8038b9c:	08038b4d 	.word	0x08038b4d
 8038ba0:	08038b4d 	.word	0x08038b4d
 8038ba4:	08038cff 	.word	0x08038cff
 8038ba8:	08038b4d 	.word	0x08038b4d
 8038bac:	08038c01 	.word	0x08038c01
 8038bb0:	08038b4d 	.word	0x08038b4d
 8038bb4:	08038b4d 	.word	0x08038b4d
 8038bb8:	08038cc7 	.word	0x08038cc7
 8038bbc:	682b      	ldr	r3, [r5, #0]
 8038bbe:	1d1a      	adds	r2, r3, #4
 8038bc0:	681b      	ldr	r3, [r3, #0]
 8038bc2:	602a      	str	r2, [r5, #0]
 8038bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8038bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8038bcc:	2301      	movs	r3, #1
 8038bce:	e0a3      	b.n	8038d18 <_printf_i+0x1f4>
 8038bd0:	6820      	ldr	r0, [r4, #0]
 8038bd2:	6829      	ldr	r1, [r5, #0]
 8038bd4:	0606      	lsls	r6, r0, #24
 8038bd6:	f101 0304 	add.w	r3, r1, #4
 8038bda:	d50a      	bpl.n	8038bf2 <_printf_i+0xce>
 8038bdc:	680e      	ldr	r6, [r1, #0]
 8038bde:	602b      	str	r3, [r5, #0]
 8038be0:	2e00      	cmp	r6, #0
 8038be2:	da03      	bge.n	8038bec <_printf_i+0xc8>
 8038be4:	232d      	movs	r3, #45	; 0x2d
 8038be6:	4276      	negs	r6, r6
 8038be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8038bec:	485e      	ldr	r0, [pc, #376]	; (8038d68 <_printf_i+0x244>)
 8038bee:	230a      	movs	r3, #10
 8038bf0:	e019      	b.n	8038c26 <_printf_i+0x102>
 8038bf2:	680e      	ldr	r6, [r1, #0]
 8038bf4:	602b      	str	r3, [r5, #0]
 8038bf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8038bfa:	bf18      	it	ne
 8038bfc:	b236      	sxthne	r6, r6
 8038bfe:	e7ef      	b.n	8038be0 <_printf_i+0xbc>
 8038c00:	682b      	ldr	r3, [r5, #0]
 8038c02:	6820      	ldr	r0, [r4, #0]
 8038c04:	1d19      	adds	r1, r3, #4
 8038c06:	6029      	str	r1, [r5, #0]
 8038c08:	0601      	lsls	r1, r0, #24
 8038c0a:	d501      	bpl.n	8038c10 <_printf_i+0xec>
 8038c0c:	681e      	ldr	r6, [r3, #0]
 8038c0e:	e002      	b.n	8038c16 <_printf_i+0xf2>
 8038c10:	0646      	lsls	r6, r0, #25
 8038c12:	d5fb      	bpl.n	8038c0c <_printf_i+0xe8>
 8038c14:	881e      	ldrh	r6, [r3, #0]
 8038c16:	4854      	ldr	r0, [pc, #336]	; (8038d68 <_printf_i+0x244>)
 8038c18:	2f6f      	cmp	r7, #111	; 0x6f
 8038c1a:	bf0c      	ite	eq
 8038c1c:	2308      	moveq	r3, #8
 8038c1e:	230a      	movne	r3, #10
 8038c20:	2100      	movs	r1, #0
 8038c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8038c26:	6865      	ldr	r5, [r4, #4]
 8038c28:	60a5      	str	r5, [r4, #8]
 8038c2a:	2d00      	cmp	r5, #0
 8038c2c:	bfa2      	ittt	ge
 8038c2e:	6821      	ldrge	r1, [r4, #0]
 8038c30:	f021 0104 	bicge.w	r1, r1, #4
 8038c34:	6021      	strge	r1, [r4, #0]
 8038c36:	b90e      	cbnz	r6, 8038c3c <_printf_i+0x118>
 8038c38:	2d00      	cmp	r5, #0
 8038c3a:	d04d      	beq.n	8038cd8 <_printf_i+0x1b4>
 8038c3c:	4615      	mov	r5, r2
 8038c3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8038c42:	fb03 6711 	mls	r7, r3, r1, r6
 8038c46:	5dc7      	ldrb	r7, [r0, r7]
 8038c48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8038c4c:	4637      	mov	r7, r6
 8038c4e:	42bb      	cmp	r3, r7
 8038c50:	460e      	mov	r6, r1
 8038c52:	d9f4      	bls.n	8038c3e <_printf_i+0x11a>
 8038c54:	2b08      	cmp	r3, #8
 8038c56:	d10b      	bne.n	8038c70 <_printf_i+0x14c>
 8038c58:	6823      	ldr	r3, [r4, #0]
 8038c5a:	07de      	lsls	r6, r3, #31
 8038c5c:	d508      	bpl.n	8038c70 <_printf_i+0x14c>
 8038c5e:	6923      	ldr	r3, [r4, #16]
 8038c60:	6861      	ldr	r1, [r4, #4]
 8038c62:	4299      	cmp	r1, r3
 8038c64:	bfde      	ittt	le
 8038c66:	2330      	movle	r3, #48	; 0x30
 8038c68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8038c6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8038c70:	1b52      	subs	r2, r2, r5
 8038c72:	6122      	str	r2, [r4, #16]
 8038c74:	f8cd a000 	str.w	sl, [sp]
 8038c78:	464b      	mov	r3, r9
 8038c7a:	aa03      	add	r2, sp, #12
 8038c7c:	4621      	mov	r1, r4
 8038c7e:	4640      	mov	r0, r8
 8038c80:	f7ff fee2 	bl	8038a48 <_printf_common>
 8038c84:	3001      	adds	r0, #1
 8038c86:	d14c      	bne.n	8038d22 <_printf_i+0x1fe>
 8038c88:	f04f 30ff 	mov.w	r0, #4294967295
 8038c8c:	b004      	add	sp, #16
 8038c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8038c92:	4835      	ldr	r0, [pc, #212]	; (8038d68 <_printf_i+0x244>)
 8038c94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8038c98:	6829      	ldr	r1, [r5, #0]
 8038c9a:	6823      	ldr	r3, [r4, #0]
 8038c9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8038ca0:	6029      	str	r1, [r5, #0]
 8038ca2:	061d      	lsls	r5, r3, #24
 8038ca4:	d514      	bpl.n	8038cd0 <_printf_i+0x1ac>
 8038ca6:	07df      	lsls	r7, r3, #31
 8038ca8:	bf44      	itt	mi
 8038caa:	f043 0320 	orrmi.w	r3, r3, #32
 8038cae:	6023      	strmi	r3, [r4, #0]
 8038cb0:	b91e      	cbnz	r6, 8038cba <_printf_i+0x196>
 8038cb2:	6823      	ldr	r3, [r4, #0]
 8038cb4:	f023 0320 	bic.w	r3, r3, #32
 8038cb8:	6023      	str	r3, [r4, #0]
 8038cba:	2310      	movs	r3, #16
 8038cbc:	e7b0      	b.n	8038c20 <_printf_i+0xfc>
 8038cbe:	6823      	ldr	r3, [r4, #0]
 8038cc0:	f043 0320 	orr.w	r3, r3, #32
 8038cc4:	6023      	str	r3, [r4, #0]
 8038cc6:	2378      	movs	r3, #120	; 0x78
 8038cc8:	4828      	ldr	r0, [pc, #160]	; (8038d6c <_printf_i+0x248>)
 8038cca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8038cce:	e7e3      	b.n	8038c98 <_printf_i+0x174>
 8038cd0:	0659      	lsls	r1, r3, #25
 8038cd2:	bf48      	it	mi
 8038cd4:	b2b6      	uxthmi	r6, r6
 8038cd6:	e7e6      	b.n	8038ca6 <_printf_i+0x182>
 8038cd8:	4615      	mov	r5, r2
 8038cda:	e7bb      	b.n	8038c54 <_printf_i+0x130>
 8038cdc:	682b      	ldr	r3, [r5, #0]
 8038cde:	6826      	ldr	r6, [r4, #0]
 8038ce0:	6961      	ldr	r1, [r4, #20]
 8038ce2:	1d18      	adds	r0, r3, #4
 8038ce4:	6028      	str	r0, [r5, #0]
 8038ce6:	0635      	lsls	r5, r6, #24
 8038ce8:	681b      	ldr	r3, [r3, #0]
 8038cea:	d501      	bpl.n	8038cf0 <_printf_i+0x1cc>
 8038cec:	6019      	str	r1, [r3, #0]
 8038cee:	e002      	b.n	8038cf6 <_printf_i+0x1d2>
 8038cf0:	0670      	lsls	r0, r6, #25
 8038cf2:	d5fb      	bpl.n	8038cec <_printf_i+0x1c8>
 8038cf4:	8019      	strh	r1, [r3, #0]
 8038cf6:	2300      	movs	r3, #0
 8038cf8:	6123      	str	r3, [r4, #16]
 8038cfa:	4615      	mov	r5, r2
 8038cfc:	e7ba      	b.n	8038c74 <_printf_i+0x150>
 8038cfe:	682b      	ldr	r3, [r5, #0]
 8038d00:	1d1a      	adds	r2, r3, #4
 8038d02:	602a      	str	r2, [r5, #0]
 8038d04:	681d      	ldr	r5, [r3, #0]
 8038d06:	6862      	ldr	r2, [r4, #4]
 8038d08:	2100      	movs	r1, #0
 8038d0a:	4628      	mov	r0, r5
 8038d0c:	f7e7 fa78 	bl	8020200 <memchr>
 8038d10:	b108      	cbz	r0, 8038d16 <_printf_i+0x1f2>
 8038d12:	1b40      	subs	r0, r0, r5
 8038d14:	6060      	str	r0, [r4, #4]
 8038d16:	6863      	ldr	r3, [r4, #4]
 8038d18:	6123      	str	r3, [r4, #16]
 8038d1a:	2300      	movs	r3, #0
 8038d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8038d20:	e7a8      	b.n	8038c74 <_printf_i+0x150>
 8038d22:	6923      	ldr	r3, [r4, #16]
 8038d24:	462a      	mov	r2, r5
 8038d26:	4649      	mov	r1, r9
 8038d28:	4640      	mov	r0, r8
 8038d2a:	47d0      	blx	sl
 8038d2c:	3001      	adds	r0, #1
 8038d2e:	d0ab      	beq.n	8038c88 <_printf_i+0x164>
 8038d30:	6823      	ldr	r3, [r4, #0]
 8038d32:	079b      	lsls	r3, r3, #30
 8038d34:	d413      	bmi.n	8038d5e <_printf_i+0x23a>
 8038d36:	68e0      	ldr	r0, [r4, #12]
 8038d38:	9b03      	ldr	r3, [sp, #12]
 8038d3a:	4298      	cmp	r0, r3
 8038d3c:	bfb8      	it	lt
 8038d3e:	4618      	movlt	r0, r3
 8038d40:	e7a4      	b.n	8038c8c <_printf_i+0x168>
 8038d42:	2301      	movs	r3, #1
 8038d44:	4632      	mov	r2, r6
 8038d46:	4649      	mov	r1, r9
 8038d48:	4640      	mov	r0, r8
 8038d4a:	47d0      	blx	sl
 8038d4c:	3001      	adds	r0, #1
 8038d4e:	d09b      	beq.n	8038c88 <_printf_i+0x164>
 8038d50:	3501      	adds	r5, #1
 8038d52:	68e3      	ldr	r3, [r4, #12]
 8038d54:	9903      	ldr	r1, [sp, #12]
 8038d56:	1a5b      	subs	r3, r3, r1
 8038d58:	42ab      	cmp	r3, r5
 8038d5a:	dcf2      	bgt.n	8038d42 <_printf_i+0x21e>
 8038d5c:	e7eb      	b.n	8038d36 <_printf_i+0x212>
 8038d5e:	2500      	movs	r5, #0
 8038d60:	f104 0619 	add.w	r6, r4, #25
 8038d64:	e7f5      	b.n	8038d52 <_printf_i+0x22e>
 8038d66:	bf00      	nop
 8038d68:	080480b9 	.word	0x080480b9
 8038d6c:	080480ca 	.word	0x080480ca

08038d70 <_scanf_chars>:
 8038d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8038d74:	4615      	mov	r5, r2
 8038d76:	688a      	ldr	r2, [r1, #8]
 8038d78:	4680      	mov	r8, r0
 8038d7a:	460c      	mov	r4, r1
 8038d7c:	b932      	cbnz	r2, 8038d8c <_scanf_chars+0x1c>
 8038d7e:	698a      	ldr	r2, [r1, #24]
 8038d80:	2a00      	cmp	r2, #0
 8038d82:	bf0c      	ite	eq
 8038d84:	2201      	moveq	r2, #1
 8038d86:	f04f 32ff 	movne.w	r2, #4294967295
 8038d8a:	608a      	str	r2, [r1, #8]
 8038d8c:	6822      	ldr	r2, [r4, #0]
 8038d8e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8038e20 <_scanf_chars+0xb0>
 8038d92:	06d1      	lsls	r1, r2, #27
 8038d94:	bf5f      	itttt	pl
 8038d96:	681a      	ldrpl	r2, [r3, #0]
 8038d98:	1d11      	addpl	r1, r2, #4
 8038d9a:	6019      	strpl	r1, [r3, #0]
 8038d9c:	6816      	ldrpl	r6, [r2, #0]
 8038d9e:	2700      	movs	r7, #0
 8038da0:	69a0      	ldr	r0, [r4, #24]
 8038da2:	b188      	cbz	r0, 8038dc8 <_scanf_chars+0x58>
 8038da4:	2801      	cmp	r0, #1
 8038da6:	d107      	bne.n	8038db8 <_scanf_chars+0x48>
 8038da8:	682a      	ldr	r2, [r5, #0]
 8038daa:	7811      	ldrb	r1, [r2, #0]
 8038dac:	6962      	ldr	r2, [r4, #20]
 8038dae:	5c52      	ldrb	r2, [r2, r1]
 8038db0:	b952      	cbnz	r2, 8038dc8 <_scanf_chars+0x58>
 8038db2:	2f00      	cmp	r7, #0
 8038db4:	d031      	beq.n	8038e1a <_scanf_chars+0xaa>
 8038db6:	e022      	b.n	8038dfe <_scanf_chars+0x8e>
 8038db8:	2802      	cmp	r0, #2
 8038dba:	d120      	bne.n	8038dfe <_scanf_chars+0x8e>
 8038dbc:	682b      	ldr	r3, [r5, #0]
 8038dbe:	781b      	ldrb	r3, [r3, #0]
 8038dc0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8038dc4:	071b      	lsls	r3, r3, #28
 8038dc6:	d41a      	bmi.n	8038dfe <_scanf_chars+0x8e>
 8038dc8:	6823      	ldr	r3, [r4, #0]
 8038dca:	06da      	lsls	r2, r3, #27
 8038dcc:	bf5e      	ittt	pl
 8038dce:	682b      	ldrpl	r3, [r5, #0]
 8038dd0:	781b      	ldrbpl	r3, [r3, #0]
 8038dd2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8038dd6:	682a      	ldr	r2, [r5, #0]
 8038dd8:	686b      	ldr	r3, [r5, #4]
 8038dda:	3201      	adds	r2, #1
 8038ddc:	602a      	str	r2, [r5, #0]
 8038dde:	68a2      	ldr	r2, [r4, #8]
 8038de0:	3b01      	subs	r3, #1
 8038de2:	3a01      	subs	r2, #1
 8038de4:	606b      	str	r3, [r5, #4]
 8038de6:	3701      	adds	r7, #1
 8038de8:	60a2      	str	r2, [r4, #8]
 8038dea:	b142      	cbz	r2, 8038dfe <_scanf_chars+0x8e>
 8038dec:	2b00      	cmp	r3, #0
 8038dee:	dcd7      	bgt.n	8038da0 <_scanf_chars+0x30>
 8038df0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8038df4:	4629      	mov	r1, r5
 8038df6:	4640      	mov	r0, r8
 8038df8:	4798      	blx	r3
 8038dfa:	2800      	cmp	r0, #0
 8038dfc:	d0d0      	beq.n	8038da0 <_scanf_chars+0x30>
 8038dfe:	6823      	ldr	r3, [r4, #0]
 8038e00:	f013 0310 	ands.w	r3, r3, #16
 8038e04:	d105      	bne.n	8038e12 <_scanf_chars+0xa2>
 8038e06:	68e2      	ldr	r2, [r4, #12]
 8038e08:	3201      	adds	r2, #1
 8038e0a:	60e2      	str	r2, [r4, #12]
 8038e0c:	69a2      	ldr	r2, [r4, #24]
 8038e0e:	b102      	cbz	r2, 8038e12 <_scanf_chars+0xa2>
 8038e10:	7033      	strb	r3, [r6, #0]
 8038e12:	6923      	ldr	r3, [r4, #16]
 8038e14:	443b      	add	r3, r7
 8038e16:	6123      	str	r3, [r4, #16]
 8038e18:	2000      	movs	r0, #0
 8038e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8038e1e:	bf00      	nop
 8038e20:	08047f47 	.word	0x08047f47

08038e24 <_scanf_i>:
 8038e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8038e28:	4698      	mov	r8, r3
 8038e2a:	4b76      	ldr	r3, [pc, #472]	; (8039004 <_scanf_i+0x1e0>)
 8038e2c:	460c      	mov	r4, r1
 8038e2e:	4682      	mov	sl, r0
 8038e30:	4616      	mov	r6, r2
 8038e32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8038e36:	b087      	sub	sp, #28
 8038e38:	ab03      	add	r3, sp, #12
 8038e3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8038e3e:	4b72      	ldr	r3, [pc, #456]	; (8039008 <_scanf_i+0x1e4>)
 8038e40:	69a1      	ldr	r1, [r4, #24]
 8038e42:	4a72      	ldr	r2, [pc, #456]	; (803900c <_scanf_i+0x1e8>)
 8038e44:	2903      	cmp	r1, #3
 8038e46:	bf18      	it	ne
 8038e48:	461a      	movne	r2, r3
 8038e4a:	68a3      	ldr	r3, [r4, #8]
 8038e4c:	9201      	str	r2, [sp, #4]
 8038e4e:	1e5a      	subs	r2, r3, #1
 8038e50:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8038e54:	bf88      	it	hi
 8038e56:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8038e5a:	4627      	mov	r7, r4
 8038e5c:	bf82      	ittt	hi
 8038e5e:	eb03 0905 	addhi.w	r9, r3, r5
 8038e62:	f240 135d 	movwhi	r3, #349	; 0x15d
 8038e66:	60a3      	strhi	r3, [r4, #8]
 8038e68:	f857 3b1c 	ldr.w	r3, [r7], #28
 8038e6c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8038e70:	bf98      	it	ls
 8038e72:	f04f 0900 	movls.w	r9, #0
 8038e76:	6023      	str	r3, [r4, #0]
 8038e78:	463d      	mov	r5, r7
 8038e7a:	f04f 0b00 	mov.w	fp, #0
 8038e7e:	6831      	ldr	r1, [r6, #0]
 8038e80:	ab03      	add	r3, sp, #12
 8038e82:	7809      	ldrb	r1, [r1, #0]
 8038e84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8038e88:	2202      	movs	r2, #2
 8038e8a:	f7e7 f9b9 	bl	8020200 <memchr>
 8038e8e:	b328      	cbz	r0, 8038edc <_scanf_i+0xb8>
 8038e90:	f1bb 0f01 	cmp.w	fp, #1
 8038e94:	d159      	bne.n	8038f4a <_scanf_i+0x126>
 8038e96:	6862      	ldr	r2, [r4, #4]
 8038e98:	b92a      	cbnz	r2, 8038ea6 <_scanf_i+0x82>
 8038e9a:	6822      	ldr	r2, [r4, #0]
 8038e9c:	2308      	movs	r3, #8
 8038e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8038ea2:	6063      	str	r3, [r4, #4]
 8038ea4:	6022      	str	r2, [r4, #0]
 8038ea6:	6822      	ldr	r2, [r4, #0]
 8038ea8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8038eac:	6022      	str	r2, [r4, #0]
 8038eae:	68a2      	ldr	r2, [r4, #8]
 8038eb0:	1e51      	subs	r1, r2, #1
 8038eb2:	60a1      	str	r1, [r4, #8]
 8038eb4:	b192      	cbz	r2, 8038edc <_scanf_i+0xb8>
 8038eb6:	6832      	ldr	r2, [r6, #0]
 8038eb8:	1c51      	adds	r1, r2, #1
 8038eba:	6031      	str	r1, [r6, #0]
 8038ebc:	7812      	ldrb	r2, [r2, #0]
 8038ebe:	f805 2b01 	strb.w	r2, [r5], #1
 8038ec2:	6872      	ldr	r2, [r6, #4]
 8038ec4:	3a01      	subs	r2, #1
 8038ec6:	2a00      	cmp	r2, #0
 8038ec8:	6072      	str	r2, [r6, #4]
 8038eca:	dc07      	bgt.n	8038edc <_scanf_i+0xb8>
 8038ecc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8038ed0:	4631      	mov	r1, r6
 8038ed2:	4650      	mov	r0, sl
 8038ed4:	4790      	blx	r2
 8038ed6:	2800      	cmp	r0, #0
 8038ed8:	f040 8085 	bne.w	8038fe6 <_scanf_i+0x1c2>
 8038edc:	f10b 0b01 	add.w	fp, fp, #1
 8038ee0:	f1bb 0f03 	cmp.w	fp, #3
 8038ee4:	d1cb      	bne.n	8038e7e <_scanf_i+0x5a>
 8038ee6:	6863      	ldr	r3, [r4, #4]
 8038ee8:	b90b      	cbnz	r3, 8038eee <_scanf_i+0xca>
 8038eea:	230a      	movs	r3, #10
 8038eec:	6063      	str	r3, [r4, #4]
 8038eee:	6863      	ldr	r3, [r4, #4]
 8038ef0:	4947      	ldr	r1, [pc, #284]	; (8039010 <_scanf_i+0x1ec>)
 8038ef2:	6960      	ldr	r0, [r4, #20]
 8038ef4:	1ac9      	subs	r1, r1, r3
 8038ef6:	f000 f913 	bl	8039120 <__sccl>
 8038efa:	f04f 0b00 	mov.w	fp, #0
 8038efe:	68a3      	ldr	r3, [r4, #8]
 8038f00:	6822      	ldr	r2, [r4, #0]
 8038f02:	2b00      	cmp	r3, #0
 8038f04:	d03d      	beq.n	8038f82 <_scanf_i+0x15e>
 8038f06:	6831      	ldr	r1, [r6, #0]
 8038f08:	6960      	ldr	r0, [r4, #20]
 8038f0a:	f891 c000 	ldrb.w	ip, [r1]
 8038f0e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8038f12:	2800      	cmp	r0, #0
 8038f14:	d035      	beq.n	8038f82 <_scanf_i+0x15e>
 8038f16:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8038f1a:	d124      	bne.n	8038f66 <_scanf_i+0x142>
 8038f1c:	0510      	lsls	r0, r2, #20
 8038f1e:	d522      	bpl.n	8038f66 <_scanf_i+0x142>
 8038f20:	f10b 0b01 	add.w	fp, fp, #1
 8038f24:	f1b9 0f00 	cmp.w	r9, #0
 8038f28:	d003      	beq.n	8038f32 <_scanf_i+0x10e>
 8038f2a:	3301      	adds	r3, #1
 8038f2c:	f109 39ff 	add.w	r9, r9, #4294967295
 8038f30:	60a3      	str	r3, [r4, #8]
 8038f32:	6873      	ldr	r3, [r6, #4]
 8038f34:	3b01      	subs	r3, #1
 8038f36:	2b00      	cmp	r3, #0
 8038f38:	6073      	str	r3, [r6, #4]
 8038f3a:	dd1b      	ble.n	8038f74 <_scanf_i+0x150>
 8038f3c:	6833      	ldr	r3, [r6, #0]
 8038f3e:	3301      	adds	r3, #1
 8038f40:	6033      	str	r3, [r6, #0]
 8038f42:	68a3      	ldr	r3, [r4, #8]
 8038f44:	3b01      	subs	r3, #1
 8038f46:	60a3      	str	r3, [r4, #8]
 8038f48:	e7d9      	b.n	8038efe <_scanf_i+0xda>
 8038f4a:	f1bb 0f02 	cmp.w	fp, #2
 8038f4e:	d1ae      	bne.n	8038eae <_scanf_i+0x8a>
 8038f50:	6822      	ldr	r2, [r4, #0]
 8038f52:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8038f56:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8038f5a:	d1bf      	bne.n	8038edc <_scanf_i+0xb8>
 8038f5c:	2310      	movs	r3, #16
 8038f5e:	6063      	str	r3, [r4, #4]
 8038f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8038f64:	e7a2      	b.n	8038eac <_scanf_i+0x88>
 8038f66:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8038f6a:	6022      	str	r2, [r4, #0]
 8038f6c:	780b      	ldrb	r3, [r1, #0]
 8038f6e:	f805 3b01 	strb.w	r3, [r5], #1
 8038f72:	e7de      	b.n	8038f32 <_scanf_i+0x10e>
 8038f74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8038f78:	4631      	mov	r1, r6
 8038f7a:	4650      	mov	r0, sl
 8038f7c:	4798      	blx	r3
 8038f7e:	2800      	cmp	r0, #0
 8038f80:	d0df      	beq.n	8038f42 <_scanf_i+0x11e>
 8038f82:	6823      	ldr	r3, [r4, #0]
 8038f84:	05db      	lsls	r3, r3, #23
 8038f86:	d50d      	bpl.n	8038fa4 <_scanf_i+0x180>
 8038f88:	42bd      	cmp	r5, r7
 8038f8a:	d909      	bls.n	8038fa0 <_scanf_i+0x17c>
 8038f8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8038f90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8038f94:	4632      	mov	r2, r6
 8038f96:	4650      	mov	r0, sl
 8038f98:	4798      	blx	r3
 8038f9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8038f9e:	464d      	mov	r5, r9
 8038fa0:	42bd      	cmp	r5, r7
 8038fa2:	d02d      	beq.n	8039000 <_scanf_i+0x1dc>
 8038fa4:	6822      	ldr	r2, [r4, #0]
 8038fa6:	f012 0210 	ands.w	r2, r2, #16
 8038faa:	d113      	bne.n	8038fd4 <_scanf_i+0x1b0>
 8038fac:	702a      	strb	r2, [r5, #0]
 8038fae:	6863      	ldr	r3, [r4, #4]
 8038fb0:	9e01      	ldr	r6, [sp, #4]
 8038fb2:	4639      	mov	r1, r7
 8038fb4:	4650      	mov	r0, sl
 8038fb6:	47b0      	blx	r6
 8038fb8:	6821      	ldr	r1, [r4, #0]
 8038fba:	f8d8 3000 	ldr.w	r3, [r8]
 8038fbe:	f011 0f20 	tst.w	r1, #32
 8038fc2:	d013      	beq.n	8038fec <_scanf_i+0x1c8>
 8038fc4:	1d1a      	adds	r2, r3, #4
 8038fc6:	f8c8 2000 	str.w	r2, [r8]
 8038fca:	681b      	ldr	r3, [r3, #0]
 8038fcc:	6018      	str	r0, [r3, #0]
 8038fce:	68e3      	ldr	r3, [r4, #12]
 8038fd0:	3301      	adds	r3, #1
 8038fd2:	60e3      	str	r3, [r4, #12]
 8038fd4:	1bed      	subs	r5, r5, r7
 8038fd6:	44ab      	add	fp, r5
 8038fd8:	6925      	ldr	r5, [r4, #16]
 8038fda:	445d      	add	r5, fp
 8038fdc:	6125      	str	r5, [r4, #16]
 8038fde:	2000      	movs	r0, #0
 8038fe0:	b007      	add	sp, #28
 8038fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8038fe6:	f04f 0b00 	mov.w	fp, #0
 8038fea:	e7ca      	b.n	8038f82 <_scanf_i+0x15e>
 8038fec:	1d1a      	adds	r2, r3, #4
 8038fee:	f8c8 2000 	str.w	r2, [r8]
 8038ff2:	681b      	ldr	r3, [r3, #0]
 8038ff4:	f011 0f01 	tst.w	r1, #1
 8038ff8:	bf14      	ite	ne
 8038ffa:	8018      	strhne	r0, [r3, #0]
 8038ffc:	6018      	streq	r0, [r3, #0]
 8038ffe:	e7e6      	b.n	8038fce <_scanf_i+0x1aa>
 8039000:	2001      	movs	r0, #1
 8039002:	e7ed      	b.n	8038fe0 <_scanf_i+0x1bc>
 8039004:	0803b950 	.word	0x0803b950
 8039008:	08039275 	.word	0x08039275
 803900c:	080379a1 	.word	0x080379a1
 8039010:	080480f4 	.word	0x080480f4

08039014 <_putc_r>:
 8039014:	b570      	push	{r4, r5, r6, lr}
 8039016:	460d      	mov	r5, r1
 8039018:	4614      	mov	r4, r2
 803901a:	4606      	mov	r6, r0
 803901c:	b118      	cbz	r0, 8039026 <_putc_r+0x12>
 803901e:	6983      	ldr	r3, [r0, #24]
 8039020:	b90b      	cbnz	r3, 8039026 <_putc_r+0x12>
 8039022:	f7fe fef5 	bl	8037e10 <__sinit>
 8039026:	4b1c      	ldr	r3, [pc, #112]	; (8039098 <_putc_r+0x84>)
 8039028:	429c      	cmp	r4, r3
 803902a:	d124      	bne.n	8039076 <_putc_r+0x62>
 803902c:	6874      	ldr	r4, [r6, #4]
 803902e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8039030:	07d8      	lsls	r0, r3, #31
 8039032:	d405      	bmi.n	8039040 <_putc_r+0x2c>
 8039034:	89a3      	ldrh	r3, [r4, #12]
 8039036:	0599      	lsls	r1, r3, #22
 8039038:	d402      	bmi.n	8039040 <_putc_r+0x2c>
 803903a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803903c:	f7fe fff5 	bl	803802a <__retarget_lock_acquire_recursive>
 8039040:	68a3      	ldr	r3, [r4, #8]
 8039042:	3b01      	subs	r3, #1
 8039044:	2b00      	cmp	r3, #0
 8039046:	60a3      	str	r3, [r4, #8]
 8039048:	da05      	bge.n	8039056 <_putc_r+0x42>
 803904a:	69a2      	ldr	r2, [r4, #24]
 803904c:	4293      	cmp	r3, r2
 803904e:	db1c      	blt.n	803908a <_putc_r+0x76>
 8039050:	b2eb      	uxtb	r3, r5
 8039052:	2b0a      	cmp	r3, #10
 8039054:	d019      	beq.n	803908a <_putc_r+0x76>
 8039056:	6823      	ldr	r3, [r4, #0]
 8039058:	1c5a      	adds	r2, r3, #1
 803905a:	6022      	str	r2, [r4, #0]
 803905c:	701d      	strb	r5, [r3, #0]
 803905e:	b2ed      	uxtb	r5, r5
 8039060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8039062:	07da      	lsls	r2, r3, #31
 8039064:	d405      	bmi.n	8039072 <_putc_r+0x5e>
 8039066:	89a3      	ldrh	r3, [r4, #12]
 8039068:	059b      	lsls	r3, r3, #22
 803906a:	d402      	bmi.n	8039072 <_putc_r+0x5e>
 803906c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803906e:	f7fe ffdd 	bl	803802c <__retarget_lock_release_recursive>
 8039072:	4628      	mov	r0, r5
 8039074:	bd70      	pop	{r4, r5, r6, pc}
 8039076:	4b09      	ldr	r3, [pc, #36]	; (803909c <_putc_r+0x88>)
 8039078:	429c      	cmp	r4, r3
 803907a:	d101      	bne.n	8039080 <_putc_r+0x6c>
 803907c:	68b4      	ldr	r4, [r6, #8]
 803907e:	e7d6      	b.n	803902e <_putc_r+0x1a>
 8039080:	4b07      	ldr	r3, [pc, #28]	; (80390a0 <_putc_r+0x8c>)
 8039082:	429c      	cmp	r4, r3
 8039084:	bf08      	it	eq
 8039086:	68f4      	ldreq	r4, [r6, #12]
 8039088:	e7d1      	b.n	803902e <_putc_r+0x1a>
 803908a:	4629      	mov	r1, r5
 803908c:	4622      	mov	r2, r4
 803908e:	4630      	mov	r0, r6
 8039090:	f7fe fc92 	bl	80379b8 <__swbuf_r>
 8039094:	4605      	mov	r5, r0
 8039096:	e7e3      	b.n	8039060 <_putc_r+0x4c>
 8039098:	08048068 	.word	0x08048068
 803909c:	08048088 	.word	0x08048088
 80390a0:	08048048 	.word	0x08048048

080390a4 <_read_r>:
 80390a4:	b538      	push	{r3, r4, r5, lr}
 80390a6:	4d07      	ldr	r5, [pc, #28]	; (80390c4 <_read_r+0x20>)
 80390a8:	4604      	mov	r4, r0
 80390aa:	4608      	mov	r0, r1
 80390ac:	4611      	mov	r1, r2
 80390ae:	2200      	movs	r2, #0
 80390b0:	602a      	str	r2, [r5, #0]
 80390b2:	461a      	mov	r2, r3
 80390b4:	f7e8 fc48 	bl	8021948 <_read>
 80390b8:	1c43      	adds	r3, r0, #1
 80390ba:	d102      	bne.n	80390c2 <_read_r+0x1e>
 80390bc:	682b      	ldr	r3, [r5, #0]
 80390be:	b103      	cbz	r3, 80390c2 <_read_r+0x1e>
 80390c0:	6023      	str	r3, [r4, #0]
 80390c2:	bd38      	pop	{r3, r4, r5, pc}
 80390c4:	2000444c 	.word	0x2000444c

080390c8 <__srget_r>:
 80390c8:	b538      	push	{r3, r4, r5, lr}
 80390ca:	460c      	mov	r4, r1
 80390cc:	4605      	mov	r5, r0
 80390ce:	b118      	cbz	r0, 80390d8 <__srget_r+0x10>
 80390d0:	6983      	ldr	r3, [r0, #24]
 80390d2:	b90b      	cbnz	r3, 80390d8 <__srget_r+0x10>
 80390d4:	f7fe fe9c 	bl	8037e10 <__sinit>
 80390d8:	4b0e      	ldr	r3, [pc, #56]	; (8039114 <__srget_r+0x4c>)
 80390da:	429c      	cmp	r4, r3
 80390dc:	d10d      	bne.n	80390fa <__srget_r+0x32>
 80390de:	686c      	ldr	r4, [r5, #4]
 80390e0:	4621      	mov	r1, r4
 80390e2:	4628      	mov	r0, r5
 80390e4:	f000 f976 	bl	80393d4 <__srefill_r>
 80390e8:	b988      	cbnz	r0, 803910e <__srget_r+0x46>
 80390ea:	6863      	ldr	r3, [r4, #4]
 80390ec:	3b01      	subs	r3, #1
 80390ee:	6063      	str	r3, [r4, #4]
 80390f0:	6823      	ldr	r3, [r4, #0]
 80390f2:	1c5a      	adds	r2, r3, #1
 80390f4:	6022      	str	r2, [r4, #0]
 80390f6:	7818      	ldrb	r0, [r3, #0]
 80390f8:	bd38      	pop	{r3, r4, r5, pc}
 80390fa:	4b07      	ldr	r3, [pc, #28]	; (8039118 <__srget_r+0x50>)
 80390fc:	429c      	cmp	r4, r3
 80390fe:	d101      	bne.n	8039104 <__srget_r+0x3c>
 8039100:	68ac      	ldr	r4, [r5, #8]
 8039102:	e7ed      	b.n	80390e0 <__srget_r+0x18>
 8039104:	4b05      	ldr	r3, [pc, #20]	; (803911c <__srget_r+0x54>)
 8039106:	429c      	cmp	r4, r3
 8039108:	bf08      	it	eq
 803910a:	68ec      	ldreq	r4, [r5, #12]
 803910c:	e7e8      	b.n	80390e0 <__srget_r+0x18>
 803910e:	f04f 30ff 	mov.w	r0, #4294967295
 8039112:	e7f1      	b.n	80390f8 <__srget_r+0x30>
 8039114:	08048068 	.word	0x08048068
 8039118:	08048088 	.word	0x08048088
 803911c:	08048048 	.word	0x08048048

08039120 <__sccl>:
 8039120:	b570      	push	{r4, r5, r6, lr}
 8039122:	780b      	ldrb	r3, [r1, #0]
 8039124:	4604      	mov	r4, r0
 8039126:	2b5e      	cmp	r3, #94	; 0x5e
 8039128:	bf0b      	itete	eq
 803912a:	784b      	ldrbeq	r3, [r1, #1]
 803912c:	1c48      	addne	r0, r1, #1
 803912e:	1c88      	addeq	r0, r1, #2
 8039130:	2200      	movne	r2, #0
 8039132:	bf08      	it	eq
 8039134:	2201      	moveq	r2, #1
 8039136:	1e61      	subs	r1, r4, #1
 8039138:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 803913c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8039140:	42a9      	cmp	r1, r5
 8039142:	d1fb      	bne.n	803913c <__sccl+0x1c>
 8039144:	b90b      	cbnz	r3, 803914a <__sccl+0x2a>
 8039146:	3801      	subs	r0, #1
 8039148:	bd70      	pop	{r4, r5, r6, pc}
 803914a:	f082 0201 	eor.w	r2, r2, #1
 803914e:	54e2      	strb	r2, [r4, r3]
 8039150:	4605      	mov	r5, r0
 8039152:	4628      	mov	r0, r5
 8039154:	f810 1b01 	ldrb.w	r1, [r0], #1
 8039158:	292d      	cmp	r1, #45	; 0x2d
 803915a:	d006      	beq.n	803916a <__sccl+0x4a>
 803915c:	295d      	cmp	r1, #93	; 0x5d
 803915e:	d0f3      	beq.n	8039148 <__sccl+0x28>
 8039160:	b909      	cbnz	r1, 8039166 <__sccl+0x46>
 8039162:	4628      	mov	r0, r5
 8039164:	e7f0      	b.n	8039148 <__sccl+0x28>
 8039166:	460b      	mov	r3, r1
 8039168:	e7f1      	b.n	803914e <__sccl+0x2e>
 803916a:	786e      	ldrb	r6, [r5, #1]
 803916c:	2e5d      	cmp	r6, #93	; 0x5d
 803916e:	d0fa      	beq.n	8039166 <__sccl+0x46>
 8039170:	42b3      	cmp	r3, r6
 8039172:	dcf8      	bgt.n	8039166 <__sccl+0x46>
 8039174:	3502      	adds	r5, #2
 8039176:	4619      	mov	r1, r3
 8039178:	3101      	adds	r1, #1
 803917a:	428e      	cmp	r6, r1
 803917c:	5462      	strb	r2, [r4, r1]
 803917e:	dcfb      	bgt.n	8039178 <__sccl+0x58>
 8039180:	1af1      	subs	r1, r6, r3
 8039182:	3901      	subs	r1, #1
 8039184:	1c58      	adds	r0, r3, #1
 8039186:	42b3      	cmp	r3, r6
 8039188:	bfa8      	it	ge
 803918a:	2100      	movge	r1, #0
 803918c:	1843      	adds	r3, r0, r1
 803918e:	e7e0      	b.n	8039152 <__sccl+0x32>

08039190 <_strtoul_l.constprop.0>:
 8039190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8039194:	4f36      	ldr	r7, [pc, #216]	; (8039270 <_strtoul_l.constprop.0+0xe0>)
 8039196:	4686      	mov	lr, r0
 8039198:	460d      	mov	r5, r1
 803919a:	4628      	mov	r0, r5
 803919c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80391a0:	5de6      	ldrb	r6, [r4, r7]
 80391a2:	f016 0608 	ands.w	r6, r6, #8
 80391a6:	d1f8      	bne.n	803919a <_strtoul_l.constprop.0+0xa>
 80391a8:	2c2d      	cmp	r4, #45	; 0x2d
 80391aa:	d12f      	bne.n	803920c <_strtoul_l.constprop.0+0x7c>
 80391ac:	782c      	ldrb	r4, [r5, #0]
 80391ae:	2601      	movs	r6, #1
 80391b0:	1c85      	adds	r5, r0, #2
 80391b2:	2b00      	cmp	r3, #0
 80391b4:	d057      	beq.n	8039266 <_strtoul_l.constprop.0+0xd6>
 80391b6:	2b10      	cmp	r3, #16
 80391b8:	d109      	bne.n	80391ce <_strtoul_l.constprop.0+0x3e>
 80391ba:	2c30      	cmp	r4, #48	; 0x30
 80391bc:	d107      	bne.n	80391ce <_strtoul_l.constprop.0+0x3e>
 80391be:	7828      	ldrb	r0, [r5, #0]
 80391c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80391c4:	2858      	cmp	r0, #88	; 0x58
 80391c6:	d149      	bne.n	803925c <_strtoul_l.constprop.0+0xcc>
 80391c8:	786c      	ldrb	r4, [r5, #1]
 80391ca:	2310      	movs	r3, #16
 80391cc:	3502      	adds	r5, #2
 80391ce:	f04f 38ff 	mov.w	r8, #4294967295
 80391d2:	2700      	movs	r7, #0
 80391d4:	fbb8 f8f3 	udiv	r8, r8, r3
 80391d8:	fb03 f908 	mul.w	r9, r3, r8
 80391dc:	ea6f 0909 	mvn.w	r9, r9
 80391e0:	4638      	mov	r0, r7
 80391e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80391e6:	f1bc 0f09 	cmp.w	ip, #9
 80391ea:	d814      	bhi.n	8039216 <_strtoul_l.constprop.0+0x86>
 80391ec:	4664      	mov	r4, ip
 80391ee:	42a3      	cmp	r3, r4
 80391f0:	dd22      	ble.n	8039238 <_strtoul_l.constprop.0+0xa8>
 80391f2:	2f00      	cmp	r7, #0
 80391f4:	db1d      	blt.n	8039232 <_strtoul_l.constprop.0+0xa2>
 80391f6:	4580      	cmp	r8, r0
 80391f8:	d31b      	bcc.n	8039232 <_strtoul_l.constprop.0+0xa2>
 80391fa:	d101      	bne.n	8039200 <_strtoul_l.constprop.0+0x70>
 80391fc:	45a1      	cmp	r9, r4
 80391fe:	db18      	blt.n	8039232 <_strtoul_l.constprop.0+0xa2>
 8039200:	fb00 4003 	mla	r0, r0, r3, r4
 8039204:	2701      	movs	r7, #1
 8039206:	f815 4b01 	ldrb.w	r4, [r5], #1
 803920a:	e7ea      	b.n	80391e2 <_strtoul_l.constprop.0+0x52>
 803920c:	2c2b      	cmp	r4, #43	; 0x2b
 803920e:	bf04      	itt	eq
 8039210:	782c      	ldrbeq	r4, [r5, #0]
 8039212:	1c85      	addeq	r5, r0, #2
 8039214:	e7cd      	b.n	80391b2 <_strtoul_l.constprop.0+0x22>
 8039216:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 803921a:	f1bc 0f19 	cmp.w	ip, #25
 803921e:	d801      	bhi.n	8039224 <_strtoul_l.constprop.0+0x94>
 8039220:	3c37      	subs	r4, #55	; 0x37
 8039222:	e7e4      	b.n	80391ee <_strtoul_l.constprop.0+0x5e>
 8039224:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8039228:	f1bc 0f19 	cmp.w	ip, #25
 803922c:	d804      	bhi.n	8039238 <_strtoul_l.constprop.0+0xa8>
 803922e:	3c57      	subs	r4, #87	; 0x57
 8039230:	e7dd      	b.n	80391ee <_strtoul_l.constprop.0+0x5e>
 8039232:	f04f 37ff 	mov.w	r7, #4294967295
 8039236:	e7e6      	b.n	8039206 <_strtoul_l.constprop.0+0x76>
 8039238:	2f00      	cmp	r7, #0
 803923a:	da07      	bge.n	803924c <_strtoul_l.constprop.0+0xbc>
 803923c:	2322      	movs	r3, #34	; 0x22
 803923e:	f8ce 3000 	str.w	r3, [lr]
 8039242:	f04f 30ff 	mov.w	r0, #4294967295
 8039246:	b932      	cbnz	r2, 8039256 <_strtoul_l.constprop.0+0xc6>
 8039248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803924c:	b106      	cbz	r6, 8039250 <_strtoul_l.constprop.0+0xc0>
 803924e:	4240      	negs	r0, r0
 8039250:	2a00      	cmp	r2, #0
 8039252:	d0f9      	beq.n	8039248 <_strtoul_l.constprop.0+0xb8>
 8039254:	b107      	cbz	r7, 8039258 <_strtoul_l.constprop.0+0xc8>
 8039256:	1e69      	subs	r1, r5, #1
 8039258:	6011      	str	r1, [r2, #0]
 803925a:	e7f5      	b.n	8039248 <_strtoul_l.constprop.0+0xb8>
 803925c:	2430      	movs	r4, #48	; 0x30
 803925e:	2b00      	cmp	r3, #0
 8039260:	d1b5      	bne.n	80391ce <_strtoul_l.constprop.0+0x3e>
 8039262:	2308      	movs	r3, #8
 8039264:	e7b3      	b.n	80391ce <_strtoul_l.constprop.0+0x3e>
 8039266:	2c30      	cmp	r4, #48	; 0x30
 8039268:	d0a9      	beq.n	80391be <_strtoul_l.constprop.0+0x2e>
 803926a:	230a      	movs	r3, #10
 803926c:	e7af      	b.n	80391ce <_strtoul_l.constprop.0+0x3e>
 803926e:	bf00      	nop
 8039270:	08047f47 	.word	0x08047f47

08039274 <_strtoul_r>:
 8039274:	f7ff bf8c 	b.w	8039190 <_strtoul_l.constprop.0>

08039278 <__submore>:
 8039278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803927c:	460c      	mov	r4, r1
 803927e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8039280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8039284:	4299      	cmp	r1, r3
 8039286:	d11d      	bne.n	80392c4 <__submore+0x4c>
 8039288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 803928c:	f7fd ff8e 	bl	80371ac <_malloc_r>
 8039290:	b918      	cbnz	r0, 803929a <__submore+0x22>
 8039292:	f04f 30ff 	mov.w	r0, #4294967295
 8039296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803929a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803929e:	63a3      	str	r3, [r4, #56]	; 0x38
 80392a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80392a4:	6360      	str	r0, [r4, #52]	; 0x34
 80392a6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80392aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80392ae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80392b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80392b6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80392ba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80392be:	6020      	str	r0, [r4, #0]
 80392c0:	2000      	movs	r0, #0
 80392c2:	e7e8      	b.n	8039296 <__submore+0x1e>
 80392c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80392c6:	0077      	lsls	r7, r6, #1
 80392c8:	463a      	mov	r2, r7
 80392ca:	f000 f84b 	bl	8039364 <_realloc_r>
 80392ce:	4605      	mov	r5, r0
 80392d0:	2800      	cmp	r0, #0
 80392d2:	d0de      	beq.n	8039292 <__submore+0x1a>
 80392d4:	eb00 0806 	add.w	r8, r0, r6
 80392d8:	4601      	mov	r1, r0
 80392da:	4632      	mov	r2, r6
 80392dc:	4640      	mov	r0, r8
 80392de:	f7fd fee3 	bl	80370a8 <memcpy>
 80392e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80392e6:	f8c4 8000 	str.w	r8, [r4]
 80392ea:	e7e9      	b.n	80392c0 <__submore+0x48>

080392ec <_fstat_r>:
 80392ec:	b538      	push	{r3, r4, r5, lr}
 80392ee:	4d07      	ldr	r5, [pc, #28]	; (803930c <_fstat_r+0x20>)
 80392f0:	2300      	movs	r3, #0
 80392f2:	4604      	mov	r4, r0
 80392f4:	4608      	mov	r0, r1
 80392f6:	4611      	mov	r1, r2
 80392f8:	602b      	str	r3, [r5, #0]
 80392fa:	f7e8 fb6a 	bl	80219d2 <_fstat>
 80392fe:	1c43      	adds	r3, r0, #1
 8039300:	d102      	bne.n	8039308 <_fstat_r+0x1c>
 8039302:	682b      	ldr	r3, [r5, #0]
 8039304:	b103      	cbz	r3, 8039308 <_fstat_r+0x1c>
 8039306:	6023      	str	r3, [r4, #0]
 8039308:	bd38      	pop	{r3, r4, r5, pc}
 803930a:	bf00      	nop
 803930c:	2000444c 	.word	0x2000444c

08039310 <_isatty_r>:
 8039310:	b538      	push	{r3, r4, r5, lr}
 8039312:	4d06      	ldr	r5, [pc, #24]	; (803932c <_isatty_r+0x1c>)
 8039314:	2300      	movs	r3, #0
 8039316:	4604      	mov	r4, r0
 8039318:	4608      	mov	r0, r1
 803931a:	602b      	str	r3, [r5, #0]
 803931c:	f7e8 fb69 	bl	80219f2 <_isatty>
 8039320:	1c43      	adds	r3, r0, #1
 8039322:	d102      	bne.n	803932a <_isatty_r+0x1a>
 8039324:	682b      	ldr	r3, [r5, #0]
 8039326:	b103      	cbz	r3, 803932a <_isatty_r+0x1a>
 8039328:	6023      	str	r3, [r4, #0]
 803932a:	bd38      	pop	{r3, r4, r5, pc}
 803932c:	2000444c 	.word	0x2000444c

08039330 <memmove>:
 8039330:	4288      	cmp	r0, r1
 8039332:	b510      	push	{r4, lr}
 8039334:	eb01 0402 	add.w	r4, r1, r2
 8039338:	d902      	bls.n	8039340 <memmove+0x10>
 803933a:	4284      	cmp	r4, r0
 803933c:	4623      	mov	r3, r4
 803933e:	d807      	bhi.n	8039350 <memmove+0x20>
 8039340:	1e43      	subs	r3, r0, #1
 8039342:	42a1      	cmp	r1, r4
 8039344:	d008      	beq.n	8039358 <memmove+0x28>
 8039346:	f811 2b01 	ldrb.w	r2, [r1], #1
 803934a:	f803 2f01 	strb.w	r2, [r3, #1]!
 803934e:	e7f8      	b.n	8039342 <memmove+0x12>
 8039350:	4402      	add	r2, r0
 8039352:	4601      	mov	r1, r0
 8039354:	428a      	cmp	r2, r1
 8039356:	d100      	bne.n	803935a <memmove+0x2a>
 8039358:	bd10      	pop	{r4, pc}
 803935a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803935e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8039362:	e7f7      	b.n	8039354 <memmove+0x24>

08039364 <_realloc_r>:
 8039364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8039368:	4680      	mov	r8, r0
 803936a:	4614      	mov	r4, r2
 803936c:	460e      	mov	r6, r1
 803936e:	b921      	cbnz	r1, 803937a <_realloc_r+0x16>
 8039370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8039374:	4611      	mov	r1, r2
 8039376:	f7fd bf19 	b.w	80371ac <_malloc_r>
 803937a:	b92a      	cbnz	r2, 8039388 <_realloc_r+0x24>
 803937c:	f7fd feaa 	bl	80370d4 <_free_r>
 8039380:	4625      	mov	r5, r4
 8039382:	4628      	mov	r0, r5
 8039384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8039388:	f000 f8ae 	bl	80394e8 <_malloc_usable_size_r>
 803938c:	4284      	cmp	r4, r0
 803938e:	4607      	mov	r7, r0
 8039390:	d802      	bhi.n	8039398 <_realloc_r+0x34>
 8039392:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8039396:	d812      	bhi.n	80393be <_realloc_r+0x5a>
 8039398:	4621      	mov	r1, r4
 803939a:	4640      	mov	r0, r8
 803939c:	f7fd ff06 	bl	80371ac <_malloc_r>
 80393a0:	4605      	mov	r5, r0
 80393a2:	2800      	cmp	r0, #0
 80393a4:	d0ed      	beq.n	8039382 <_realloc_r+0x1e>
 80393a6:	42bc      	cmp	r4, r7
 80393a8:	4622      	mov	r2, r4
 80393aa:	4631      	mov	r1, r6
 80393ac:	bf28      	it	cs
 80393ae:	463a      	movcs	r2, r7
 80393b0:	f7fd fe7a 	bl	80370a8 <memcpy>
 80393b4:	4631      	mov	r1, r6
 80393b6:	4640      	mov	r0, r8
 80393b8:	f7fd fe8c 	bl	80370d4 <_free_r>
 80393bc:	e7e1      	b.n	8039382 <_realloc_r+0x1e>
 80393be:	4635      	mov	r5, r6
 80393c0:	e7df      	b.n	8039382 <_realloc_r+0x1e>

080393c2 <lflush>:
 80393c2:	8983      	ldrh	r3, [r0, #12]
 80393c4:	f003 0309 	and.w	r3, r3, #9
 80393c8:	2b09      	cmp	r3, #9
 80393ca:	d101      	bne.n	80393d0 <lflush+0xe>
 80393cc:	f7fe bcb6 	b.w	8037d3c <fflush>
 80393d0:	2000      	movs	r0, #0
 80393d2:	4770      	bx	lr

080393d4 <__srefill_r>:
 80393d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80393d6:	460c      	mov	r4, r1
 80393d8:	4605      	mov	r5, r0
 80393da:	b118      	cbz	r0, 80393e4 <__srefill_r+0x10>
 80393dc:	6983      	ldr	r3, [r0, #24]
 80393de:	b90b      	cbnz	r3, 80393e4 <__srefill_r+0x10>
 80393e0:	f7fe fd16 	bl	8037e10 <__sinit>
 80393e4:	4b3b      	ldr	r3, [pc, #236]	; (80394d4 <__srefill_r+0x100>)
 80393e6:	429c      	cmp	r4, r3
 80393e8:	d10a      	bne.n	8039400 <__srefill_r+0x2c>
 80393ea:	686c      	ldr	r4, [r5, #4]
 80393ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80393f0:	2300      	movs	r3, #0
 80393f2:	6063      	str	r3, [r4, #4]
 80393f4:	89a3      	ldrh	r3, [r4, #12]
 80393f6:	069e      	lsls	r6, r3, #26
 80393f8:	d50c      	bpl.n	8039414 <__srefill_r+0x40>
 80393fa:	f04f 30ff 	mov.w	r0, #4294967295
 80393fe:	e066      	b.n	80394ce <__srefill_r+0xfa>
 8039400:	4b35      	ldr	r3, [pc, #212]	; (80394d8 <__srefill_r+0x104>)
 8039402:	429c      	cmp	r4, r3
 8039404:	d101      	bne.n	803940a <__srefill_r+0x36>
 8039406:	68ac      	ldr	r4, [r5, #8]
 8039408:	e7f0      	b.n	80393ec <__srefill_r+0x18>
 803940a:	4b34      	ldr	r3, [pc, #208]	; (80394dc <__srefill_r+0x108>)
 803940c:	429c      	cmp	r4, r3
 803940e:	bf08      	it	eq
 8039410:	68ec      	ldreq	r4, [r5, #12]
 8039412:	e7eb      	b.n	80393ec <__srefill_r+0x18>
 8039414:	0758      	lsls	r0, r3, #29
 8039416:	d448      	bmi.n	80394aa <__srefill_r+0xd6>
 8039418:	06d9      	lsls	r1, r3, #27
 803941a:	d405      	bmi.n	8039428 <__srefill_r+0x54>
 803941c:	2309      	movs	r3, #9
 803941e:	602b      	str	r3, [r5, #0]
 8039420:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8039424:	81a3      	strh	r3, [r4, #12]
 8039426:	e7e8      	b.n	80393fa <__srefill_r+0x26>
 8039428:	071a      	lsls	r2, r3, #28
 803942a:	d50b      	bpl.n	8039444 <__srefill_r+0x70>
 803942c:	4621      	mov	r1, r4
 803942e:	4628      	mov	r0, r5
 8039430:	f7fe fc48 	bl	8037cc4 <_fflush_r>
 8039434:	2800      	cmp	r0, #0
 8039436:	d1e0      	bne.n	80393fa <__srefill_r+0x26>
 8039438:	89a3      	ldrh	r3, [r4, #12]
 803943a:	60a0      	str	r0, [r4, #8]
 803943c:	f023 0308 	bic.w	r3, r3, #8
 8039440:	81a3      	strh	r3, [r4, #12]
 8039442:	61a0      	str	r0, [r4, #24]
 8039444:	89a3      	ldrh	r3, [r4, #12]
 8039446:	f043 0304 	orr.w	r3, r3, #4
 803944a:	81a3      	strh	r3, [r4, #12]
 803944c:	6923      	ldr	r3, [r4, #16]
 803944e:	b91b      	cbnz	r3, 8039458 <__srefill_r+0x84>
 8039450:	4621      	mov	r1, r4
 8039452:	4628      	mov	r0, r5
 8039454:	f7fe fe24 	bl	80380a0 <__smakebuf_r>
 8039458:	89a6      	ldrh	r6, [r4, #12]
 803945a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 803945e:	07b3      	lsls	r3, r6, #30
 8039460:	d00f      	beq.n	8039482 <__srefill_r+0xae>
 8039462:	2301      	movs	r3, #1
 8039464:	81a3      	strh	r3, [r4, #12]
 8039466:	4b1e      	ldr	r3, [pc, #120]	; (80394e0 <__srefill_r+0x10c>)
 8039468:	491e      	ldr	r1, [pc, #120]	; (80394e4 <__srefill_r+0x110>)
 803946a:	6818      	ldr	r0, [r3, #0]
 803946c:	f006 0609 	and.w	r6, r6, #9
 8039470:	f7fe fd5e 	bl	8037f30 <_fwalk>
 8039474:	2e09      	cmp	r6, #9
 8039476:	81a7      	strh	r7, [r4, #12]
 8039478:	d103      	bne.n	8039482 <__srefill_r+0xae>
 803947a:	4621      	mov	r1, r4
 803947c:	4628      	mov	r0, r5
 803947e:	f7fe fb9b 	bl	8037bb8 <__sflush_r>
 8039482:	6922      	ldr	r2, [r4, #16]
 8039484:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8039486:	6963      	ldr	r3, [r4, #20]
 8039488:	6a21      	ldr	r1, [r4, #32]
 803948a:	6022      	str	r2, [r4, #0]
 803948c:	4628      	mov	r0, r5
 803948e:	47b0      	blx	r6
 8039490:	2800      	cmp	r0, #0
 8039492:	6060      	str	r0, [r4, #4]
 8039494:	dc1c      	bgt.n	80394d0 <__srefill_r+0xfc>
 8039496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803949a:	bf17      	itett	ne
 803949c:	2200      	movne	r2, #0
 803949e:	f043 0320 	orreq.w	r3, r3, #32
 80394a2:	6062      	strne	r2, [r4, #4]
 80394a4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80394a8:	e7bc      	b.n	8039424 <__srefill_r+0x50>
 80394aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80394ac:	2900      	cmp	r1, #0
 80394ae:	d0cd      	beq.n	803944c <__srefill_r+0x78>
 80394b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80394b4:	4299      	cmp	r1, r3
 80394b6:	d002      	beq.n	80394be <__srefill_r+0xea>
 80394b8:	4628      	mov	r0, r5
 80394ba:	f7fd fe0b 	bl	80370d4 <_free_r>
 80394be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80394c0:	6063      	str	r3, [r4, #4]
 80394c2:	2000      	movs	r0, #0
 80394c4:	6360      	str	r0, [r4, #52]	; 0x34
 80394c6:	2b00      	cmp	r3, #0
 80394c8:	d0c0      	beq.n	803944c <__srefill_r+0x78>
 80394ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80394cc:	6023      	str	r3, [r4, #0]
 80394ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80394d0:	2000      	movs	r0, #0
 80394d2:	e7fc      	b.n	80394ce <__srefill_r+0xfa>
 80394d4:	08048068 	.word	0x08048068
 80394d8:	08048088 	.word	0x08048088
 80394dc:	08048048 	.word	0x08048048
 80394e0:	08047e94 	.word	0x08047e94
 80394e4:	080393c3 	.word	0x080393c3

080394e8 <_malloc_usable_size_r>:
 80394e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80394ec:	1f18      	subs	r0, r3, #4
 80394ee:	2b00      	cmp	r3, #0
 80394f0:	bfbc      	itt	lt
 80394f2:	580b      	ldrlt	r3, [r1, r0]
 80394f4:	18c0      	addlt	r0, r0, r3
 80394f6:	4770      	bx	lr

080394f8 <_init>:
 80394f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80394fa:	bf00      	nop
 80394fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80394fe:	bc08      	pop	{r3}
 8039500:	469e      	mov	lr, r3
 8039502:	4770      	bx	lr

08039504 <_fini>:
 8039504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8039506:	bf00      	nop
 8039508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803950a:	bc08      	pop	{r3}
 803950c:	469e      	mov	lr, r3
 803950e:	4770      	bx	lr
