
BottomBd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b48c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001590  0800b670  0800b670  0001b670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc00  0800cc00  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800cc00  0800cc00  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cc00  0800cc00  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc00  0800cc00  0001cc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc04  0800cc04  0001cc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  0800cc08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db4  200001a8  0800cdb0  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f5c  0800cdb0  00020f5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a392  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a05  00000000  00000000  0003a563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  0003ef68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c8  00000000  00000000  000407c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f273  00000000  00000000  00041e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e960  00000000  00000000  000610fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6f4b  00000000  00000000  0007fa5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001269a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007234  00000000  00000000  001269f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001a8 	.word	0x200001a8
 8000200:	00000000 	.word	0x00000000
 8000204:	0800b658 	.word	0x0800b658

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001ac 	.word	0x200001ac
 8000220:	0800b658 	.word	0x0800b658

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <LoopProcMain>:

int g_bEnIWDGStat = 1;		//	WatchDog Stat Enable
//========================================================================
void LoopProcMain( int nTick )
//========================================================================
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
	if ( g_bEnIWDGStat )
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <LoopProcMain+0x24>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d004      	beq.n	8000262 <LoopProcMain+0x1a>
	{
#if defined(USE_BOOTLOADER)
#else	//	Application
		//	Watchdog Reload
		__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <LoopProcMain+0x28>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000260:	601a      	str	r2, [r3, #0]
#endif
	}
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	20000000 	.word	0x20000000
 8000270:	2000026c 	.word	0x2000026c

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b08c      	sub	sp, #48	; 0x30
 8000278:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027a:	f001 fcf9 	bl	8001c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027e:	f000 f9c1 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000282:	f000 fc19 	bl	8000ab8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000286:	f000 fa27 	bl	80006d8 <MX_ADC1_Init>
  MX_I2C2_Init();
 800028a:	f000 faa1 	bl	80007d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800028e:	f000 fb95 	bl	80009bc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000292:	f000 fbe7 	bl	8000a64 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8000296:	f000 fa5d 	bl	8000754 <MX_ADC2_Init>
  MX_TIM2_Init();
 800029a:	f000 fb19 	bl	80008d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800029e:	f000 fbb7 	bl	8000a10 <MX_USART2_UART_Init>
  MX_UART5_Init();
 80002a2:	f000 fb61 	bl	8000968 <MX_UART5_Init>
  MX_IWDG_Init();
 80002a6:	f000 faf9 	bl	800089c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

#if defined(USE_BOOTLOADER)
#else	//	Application

  HAL_TIM_Base_Start_IT(&htim2);
 80002aa:	4882      	ldr	r0, [pc, #520]	; (80004b4 <main+0x240>)
 80002ac:	f005 f82a 	bl	8005304 <HAL_TIM_Base_Start_IT>

#else	//	Application

  //	UART Interrupt ����.
  //	UART Queue �ʱ�ȭ.
  SerialInitQueue();
 80002b0:	f008 fa90 	bl	80087d4 <SerialInitQueue>

//  SerialInit( &huart1, NULL, NULL, NULL );	//	Console Interrupt

  //	UART Interrupt ����.
  SerialInit( &huart1, &huart2, &huart3, &huart5 );
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <main+0x244>)
 80002b6:	4a81      	ldr	r2, [pc, #516]	; (80004bc <main+0x248>)
 80002b8:	4981      	ldr	r1, [pc, #516]	; (80004c0 <main+0x24c>)
 80002ba:	4882      	ldr	r0, [pc, #520]	; (80004c4 <main+0x250>)
 80002bc:	f008 faa2 	bl	8008804 <SerialInit>
//  SerialInit( &huart1, NULL, NULL, NULL );//&huart2, &huart3, &huart5 );
  InitRS485();		//	Init RS485
 80002c0:	f007 fe5a 	bl	8007f78 <InitRS485>

#endif

  setbuf ( stdout, NULL );		            //	1024 byte buffer clear
 80002c4:	4b80      	ldr	r3, [pc, #512]	; (80004c8 <main+0x254>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	2100      	movs	r1, #0
 80002cc:	4618      	mov	r0, r3
 80002ce:	f009 f923 	bl	8009518 <setbuf>
//  setvbuf ( stdout, NULL, _IOLBF, NULL );	//	Line Buffer
  setvbuf ( stdout, NULL, _IONBF, NULL );	//	No Buffer
 80002d2:	4b7d      	ldr	r3, [pc, #500]	; (80004c8 <main+0x254>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6898      	ldr	r0, [r3, #8]
 80002d8:	2300      	movs	r3, #0
 80002da:	2202      	movs	r2, #2
 80002dc:	2100      	movs	r1, #0
 80002de:	f009 f923 	bl	8009528 <setvbuf>

#if defined(USE_BOOTLOADER)
  printf( "Boot\n" );    // xTaskGetTickCount() );
#else
  printf( "[%d]Start\n", HAL_GetTick() );    // xTaskGetTickCount() );
 80002e2:	f001 fd1d 	bl	8001d20 <HAL_GetTick>
 80002e6:	4603      	mov	r3, r0
 80002e8:	4619      	mov	r1, r3
 80002ea:	4878      	ldr	r0, [pc, #480]	; (80004cc <main+0x258>)
 80002ec:	f009 f872 	bl	80093d4 <iprintf>
  BootLoaderTask();

//=============================================================================
#else	//	Application
//=============================================================================
  setAmpMute(true);
 80002f0:	2001      	movs	r0, #1
 80002f2:	f000 fdd7 	bl	8000ea4 <setAmpMute>

  TestNVRAM( &hi2c2 );
 80002f6:	4876      	ldr	r0, [pc, #472]	; (80004d0 <main+0x25c>)
 80002f8:	f007 f9a4 	bl	8007644 <TestNVRAM>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int sCnt = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t     nRbuf[10];




    printf( "*********OCC Function(ID %02X)*********\n",getRS485Id() );
 8000300:	f000 fee2 	bl	80010c8 <getRS485Id>
 8000304:	4603      	mov	r3, r0
 8000306:	4619      	mov	r1, r3
 8000308:	4872      	ldr	r0, [pc, #456]	; (80004d4 <main+0x260>)
 800030a:	f009 f863 	bl	80093d4 <iprintf>
    printf( "*********Design by DS-Jang (2022-10-18)\n" );
 800030e:	4872      	ldr	r0, [pc, #456]	; (80004d8 <main+0x264>)
 8000310:	f009 f8fa 	bl	8009508 <puts>
    
        
    HAL_StatusTypeDef result;


	result = HAL_I2C_IsDeviceReady( &hi2c2, (uint16_t)(0xD8), 2, 2 );
 8000314:	2302      	movs	r3, #2
 8000316:	2202      	movs	r2, #2
 8000318:	21d8      	movs	r1, #216	; 0xd8
 800031a:	486d      	ldr	r0, [pc, #436]	; (80004d0 <main+0x25c>)
 800031c:	f003 fd10 	bl	8003d40 <HAL_I2C_IsDeviceReady>
 8000320:	4603      	mov	r3, r0
 8000322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if ( HAL_OK == result )
 8000326:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800032a:	2b00      	cmp	r3, #0
 800032c:	d103      	bne.n	8000336 <main+0xc2>
	{
	  printf( "-0xD8 AMP_SEt_OK \n" );
 800032e:	486b      	ldr	r0, [pc, #428]	; (80004dc <main+0x268>)
 8000330:	f009 f8ea 	bl	8009508 <puts>
 8000334:	e005      	b.n	8000342 <main+0xce>
	}
	else
	{
	  printf( "-0xD8 AMP_SEt_NG(%2x)\n",result);
 8000336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800033a:	4619      	mov	r1, r3
 800033c:	4868      	ldr	r0, [pc, #416]	; (80004e0 <main+0x26c>)
 800033e:	f009 f849 	bl	80093d4 <iprintf>
	}


	nRbuf[0] = 0xFF;
 8000342:	23ff      	movs	r3, #255	; 0xff
 8000344:	703b      	strb	r3, [r7, #0]

	if(MB85_HAL_ReadBytes(&hi2c2,0xD8,0x00,(uint8_t *)nRbuf,1))
 8000346:	463b      	mov	r3, r7
 8000348:	2201      	movs	r2, #1
 800034a:	9200      	str	r2, [sp, #0]
 800034c:	2200      	movs	r2, #0
 800034e:	21d8      	movs	r1, #216	; 0xd8
 8000350:	485f      	ldr	r0, [pc, #380]	; (80004d0 <main+0x25c>)
 8000352:	f007 f94b 	bl	80075ec <MB85_HAL_ReadBytes>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d005      	beq.n	8000368 <main+0xf4>
	{
		printf( "-0x00 Read Test(%02X) \n",nRbuf[0]);
 800035c:	783b      	ldrb	r3, [r7, #0]
 800035e:	4619      	mov	r1, r3
 8000360:	4860      	ldr	r0, [pc, #384]	; (80004e4 <main+0x270>)
 8000362:	f009 f837 	bl	80093d4 <iprintf>
 8000366:	e002      	b.n	800036e <main+0xfa>
	}
	else
	{
		printf( "-0x00 Read Test(0x00-0x00) NG \n" );
 8000368:	485f      	ldr	r0, [pc, #380]	; (80004e8 <main+0x274>)
 800036a:	f009 f8cd 	bl	8009508 <puts>
	}

	nRbuf[0] = 0xFF;
 800036e:	23ff      	movs	r3, #255	; 0xff
 8000370:	703b      	strb	r3, [r7, #0]

	if(MB85_HAL_ReadBytes(&hi2c2,0xD8,0x01,(uint8_t *)nRbuf,1))
 8000372:	463b      	mov	r3, r7
 8000374:	2201      	movs	r2, #1
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	2201      	movs	r2, #1
 800037a:	21d8      	movs	r1, #216	; 0xd8
 800037c:	4854      	ldr	r0, [pc, #336]	; (80004d0 <main+0x25c>)
 800037e:	f007 f935 	bl	80075ec <MB85_HAL_ReadBytes>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d005      	beq.n	8000394 <main+0x120>
	{
		printf( "-0x01 Read Test(%02X) \n",nRbuf[0] );
 8000388:	783b      	ldrb	r3, [r7, #0]
 800038a:	4619      	mov	r1, r3
 800038c:	4857      	ldr	r0, [pc, #348]	; (80004ec <main+0x278>)
 800038e:	f009 f821 	bl	80093d4 <iprintf>
 8000392:	e002      	b.n	800039a <main+0x126>
	}
	else
	{
		printf( "-0x01 Read Test(0x00-0x01) NG \n" );
 8000394:	4856      	ldr	r0, [pc, #344]	; (80004f0 <main+0x27c>)
 8000396:	f009 f8b7 	bl	8009508 <puts>
//        printf( "-0xD8-0x9F Write Test(0x08-0xbe) NG \n" );
//    }

       

	setAmpSd(true); //AMP �ʱ� �����ϴ� �κ�.
 800039a:	2001      	movs	r0, #1
 800039c:	f000 fe16 	bl	8000fcc <setAmpSd>

	//	�ʱ� ������ Mute On
	ampMuteOn();
 80003a0:	f000 fd9a 	bl	8000ed8 <ampMuteOn>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	nTick = HAL_GetTick();
 80003a4:	f001 fcbc 	bl	8001d20 <HAL_GetTick>
 80003a8:	4603      	mov	r3, r0
 80003aa:	61fb      	str	r3, [r7, #28]

		//=============================================================================
		LoopProcCLI();		//	CLI ( Command Line Interface )
 80003ac:	f006 fc18 	bl	8006be0 <LoopProcCLI>
		LoopProcRS485_3ch();	//	RS485
 80003b0:	f007 fe40 	bl	8008034 <LoopProcRS485_3ch>
        LoopProcRS485_5ch();	//	RS485
 80003b4:	f007 fefc 	bl	80081b0 <LoopProcRS485_5ch>
        LoopProcRFM_2ch();    // Console
 80003b8:	f007 ffb6 	bl	8008328 <LoopProcRFM_2ch>

        //	Loop Proc Main Watchdog Count Reload
		LoopProcMain( nTick );
 80003bc:	69f8      	ldr	r0, [r7, #28]
 80003be:	f7ff ff43 	bl	8000248 <LoopProcMain>
		//=============================================================================

		
		processRfLed();
 80003c2:	f000 fedf 	bl	8001184 <processRfLed>
		processChargeLed();
 80003c6:	f000 fef1 	bl	80011ac <processChargeLed>
		processLightLed();
 80003ca:	f000 ff67 	bl	800129c <processLightLed>
		processAudioAmpProcess();
 80003ce:	f000 ff9f 	bl	8001310 <processAudioAmpProcess>

		processTestDebug();
 80003d2:	f001 f841 	bl	8001458 <processTestDebug>
		//	  Uart3_Process();


        if ( (nTick - s_nOccCnt) >= 100)
 80003d6:	4b47      	ldr	r3, [pc, #284]	; (80004f4 <main+0x280>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	69fa      	ldr	r2, [r7, #28]
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	2b63      	cmp	r3, #99	; 0x63
 80003e0:	f340 809e 	ble.w	8000520 <main+0x2ac>
        {

#if defined(SIL_RFM)

        	 s_nOccCnt = nTick;
 80003e4:	4a43      	ldr	r2, [pc, #268]	; (80004f4 <main+0x280>)
 80003e6:	69fb      	ldr	r3, [r7, #28]
 80003e8:	6013      	str	r3, [r2, #0]



        	if(s_vcc != getVccIn())
 80003ea:	f000 fcc9 	bl	8000d80 <getVccIn>
 80003ee:	4602      	mov	r2, r0
 80003f0:	4b41      	ldr	r3, [pc, #260]	; (80004f8 <main+0x284>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d012      	beq.n	800041e <main+0x1aa>
        	{
        		s_vcc = getVccIn();
 80003f8:	f000 fcc2 	bl	8000d80 <getVccIn>
 80003fc:	4603      	mov	r3, r0
 80003fe:	4a3e      	ldr	r2, [pc, #248]	; (80004f8 <main+0x284>)
 8000400:	6013      	str	r3, [r2, #0]
        		printf("Timer_getVccIn():%d\n", getVccIn());
 8000402:	f000 fcbd 	bl	8000d80 <getVccIn>
 8000406:	4603      	mov	r3, r0
 8000408:	4619      	mov	r1, r3
 800040a:	483c      	ldr	r0, [pc, #240]	; (80004fc <main+0x288>)
 800040c:	f008 ffe2 	bl	80093d4 <iprintf>
        		printf("Timer_getMasterIn():%d\n", getMasterIn());
 8000410:	f000 fce6 	bl	8000de0 <getMasterIn>
 8000414:	4603      	mov	r3, r0
 8000416:	4619      	mov	r1, r3
 8000418:	4839      	ldr	r0, [pc, #228]	; (8000500 <main+0x28c>)
 800041a:	f008 ffdb 	bl	80093d4 <iprintf>
        	}



        	if(getVccIn() == 1) //차량 전원이 ON 일때만 동작.
 800041e:	f000 fcaf 	bl	8000d80 <getVccIn>
 8000422:	4603      	mov	r3, r0
 8000424:	2b01      	cmp	r3, #1
 8000426:	d175      	bne.n	8000514 <main+0x2a0>
        	{
        		sVccInFlag++;
 8000428:	4b36      	ldr	r3, [pc, #216]	; (8000504 <main+0x290>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	4a35      	ldr	r2, [pc, #212]	; (8000504 <main+0x290>)
 8000430:	6013      	str	r3, [r2, #0]

        		if(sVccInFlag > 15)
 8000432:	4b34      	ldr	r3, [pc, #208]	; (8000504 <main+0x290>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b0f      	cmp	r3, #15
 8000438:	dd72      	ble.n	8000520 <main+0x2ac>
        		{

					int bMstIn = getMasterIn();
 800043a:	f000 fcd1 	bl	8000de0 <getMasterIn>
 800043e:	61b8      	str	r0, [r7, #24]

					if ( bMstIn )
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d005      	beq.n	8000452 <main+0x1de>
					{
						sVccOff_TimeCnt++;
 8000446:	4b30      	ldr	r3, [pc, #192]	; (8000508 <main+0x294>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	3301      	adds	r3, #1
 800044c:	4a2e      	ldr	r2, [pc, #184]	; (8000508 <main+0x294>)
 800044e:	6013      	str	r3, [r2, #0]
 8000450:	e002      	b.n	8000458 <main+0x1e4>
					}
					else
					{
						sVccOff_TimeCnt = 0;
 8000452:	4b2d      	ldr	r3, [pc, #180]	; (8000508 <main+0x294>)
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
					}

					if ( (s_bMstIn != bMstIn) && ((sVccOff_TimeCnt > 5) || (sVccOff_TimeCnt == 0)))
 8000458:	4b2c      	ldr	r3, [pc, #176]	; (800050c <main+0x298>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	69ba      	ldr	r2, [r7, #24]
 800045e:	429a      	cmp	r2, r3
 8000460:	d05e      	beq.n	8000520 <main+0x2ac>
 8000462:	4b29      	ldr	r3, [pc, #164]	; (8000508 <main+0x294>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b05      	cmp	r3, #5
 8000468:	dc03      	bgt.n	8000472 <main+0x1fe>
 800046a:	4b27      	ldr	r3, [pc, #156]	; (8000508 <main+0x294>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d156      	bne.n	8000520 <main+0x2ac>
					{
						s_bMstIn = bMstIn;
 8000472:	4a26      	ldr	r2, [pc, #152]	; (800050c <main+0x298>)
 8000474:	69bb      	ldr	r3, [r7, #24]
 8000476:	6013      	str	r3, [r2, #0]
							sVccOff_TimeCnt = 0;
							s_bMstIn = bMstIn;
						}*/


						if ( s_bMstIn )
 8000478:	4b24      	ldr	r3, [pc, #144]	; (800050c <main+0x298>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d00c      	beq.n	800049a <main+0x226>
						{
							printf("getVccIn():%d,%d,%d\n", getVccIn(),sVccOff_TimeCnt,sVccInFlag);
 8000480:	f000 fc7e 	bl	8000d80 <getVccIn>
 8000484:	4601      	mov	r1, r0
 8000486:	4b20      	ldr	r3, [pc, #128]	; (8000508 <main+0x294>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <main+0x290>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4820      	ldr	r0, [pc, #128]	; (8000510 <main+0x29c>)
 8000490:	f008 ffa0 	bl	80093d4 <iprintf>

							//RFMOccPaStop();
							RFMOccPaStart();
 8000494:	f007 fa34 	bl	8007900 <RFMOccPaStart>
 8000498:	e042      	b.n	8000520 <main+0x2ac>
						}
						else
						{
							printf("getVccIn():%d,%d,%d\n", getVccIn(),sVccOff_TimeCnt,sVccInFlag);
 800049a:	f000 fc71 	bl	8000d80 <getVccIn>
 800049e:	4601      	mov	r1, r0
 80004a0:	4b19      	ldr	r3, [pc, #100]	; (8000508 <main+0x294>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <main+0x290>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4819      	ldr	r0, [pc, #100]	; (8000510 <main+0x29c>)
 80004aa:	f008 ff93 	bl	80093d4 <iprintf>

							//RFMOccPaStart();
							RFMOccPaStop();
 80004ae:	f007 fa47 	bl	8007940 <RFMOccPaStop>
 80004b2:	e035      	b.n	8000520 <main+0x2ac>
 80004b4:	20000224 	.word	0x20000224
 80004b8:	200002d0 	.word	0x200002d0
 80004bc:	20000390 	.word	0x20000390
 80004c0:	20000350 	.word	0x20000350
 80004c4:	20000310 	.word	0x20000310
 80004c8:	20000144 	.word	0x20000144
 80004cc:	0800b670 	.word	0x0800b670
 80004d0:	2000027c 	.word	0x2000027c
 80004d4:	0800b67c 	.word	0x0800b67c
 80004d8:	0800b6a8 	.word	0x0800b6a8
 80004dc:	0800b6d0 	.word	0x0800b6d0
 80004e0:	0800b6e4 	.word	0x0800b6e4
 80004e4:	0800b6fc 	.word	0x0800b6fc
 80004e8:	0800b714 	.word	0x0800b714
 80004ec:	0800b734 	.word	0x0800b734
 80004f0:	0800b74c 	.word	0x0800b74c
 80004f4:	200003d0 	.word	0x200003d0
 80004f8:	200003d4 	.word	0x200003d4
 80004fc:	0800b76c 	.word	0x0800b76c
 8000500:	0800b784 	.word	0x0800b784
 8000504:	200003d8 	.word	0x200003d8
 8000508:	200003dc 	.word	0x200003dc
 800050c:	200003e0 	.word	0x200003e0
 8000510:	0800b79c 	.word	0x0800b79c
					}
        		}
        	}
        	else
        	{
        		s_bMstIn = 1;
 8000514:	4b2f      	ldr	r3, [pc, #188]	; (80005d4 <main+0x360>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]
        		//printf("getVccIn():%d\n", getVccIn());
        		sVccInFlag = 0;
 800051a:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <main+0x364>)
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
            ONTD_Function();
#endif
        }
            
                
		if ( (nTick - s_nTick) >= 1000)
 8000520:	4b2e      	ldr	r3, [pc, #184]	; (80005dc <main+0x368>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	69fa      	ldr	r2, [r7, #28]
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800052c:	db12      	blt.n	8000554 <main+0x2e0>
		{
//			printf("[%d]\n", nTick);
			s_nTick = nTick;
 800052e:	4a2b      	ldr	r2, [pc, #172]	; (80005dc <main+0x368>)
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	6013      	str	r3, [r2, #0]
			processGetBatVol();			//	ADC
 8000534:	f000 ff44 	bl	80013c0 <processGetBatVol>
            
                
			if(getAmpFault())
 8000538:	f000 fc7c 	bl	8000e34 <getAmpFault>
			{
				//printf( "getAmpFault \n" );
			}

			//=============================================================================
            checkSerial(&huart1);       //  Debug
 800053c:	4828      	ldr	r0, [pc, #160]	; (80005e0 <main+0x36c>)
 800053e:	f008 f8e3 	bl	8008708 <checkSerial>
            checkSerial(&huart2);       //  RFM
 8000542:	4828      	ldr	r0, [pc, #160]	; (80005e4 <main+0x370>)
 8000544:	f008 f8e0 	bl	8008708 <checkSerial>
            checkSerial(&huart3);       //  RS485 Line üũ.
 8000548:	4827      	ldr	r0, [pc, #156]	; (80005e8 <main+0x374>)
 800054a:	f008 f8dd 	bl	8008708 <checkSerial>
            checkSerial(&huart5);       //  RS485 Line üũ.
 800054e:	4827      	ldr	r0, [pc, #156]	; (80005ec <main+0x378>)
 8000550:	f008 f8da 	bl	8008708 <checkSerial>
		}

#if 0	//	defined(SIL_RFM)
		//	SIL - SPK Check Disable
#else
        if ( (nTick - s_currentCnt) >= 5000)
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <main+0x37c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	69fa      	ldr	r2, [r7, #28]
 800055a:	1ad3      	subs	r3, r2, r3
 800055c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000560:	4293      	cmp	r3, r2
 8000562:	dd15      	ble.n	8000590 <main+0x31c>
        {
            s_currentCnt = nTick;
 8000564:	4a22      	ldr	r2, [pc, #136]	; (80005f0 <main+0x37c>)
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	6013      	str	r3, [r2, #0]
                
             //processCurrentVal();
                 
                
             if(uAudioPlayFlag == false)
 800056a:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <main+0x380>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d10e      	bne.n	8000590 <main+0x31c>
             {
                 
                if(AMP_SPK_CHECK())
 8000572:	f000 ff77 	bl	8001464 <AMP_SPK_CHECK>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d009      	beq.n	8000590 <main+0x31c>
                {
                    if(uSpk_Stat < 6)
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <main+0x384>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b05      	cmp	r3, #5
 8000582:	d805      	bhi.n	8000590 <main+0x31c>
                    {
                        uSpk_Stat++;
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <main+0x384>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <main+0x384>)
 800058e:	701a      	strb	r2, [r3, #0]
             }
            
        }
#endif
        
        if ( (nTick - s_RssNgCleanCnt) >= 15000)
 8000590:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <main+0x388>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	69fa      	ldr	r2, [r7, #28]
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	f643 2297 	movw	r2, #14999	; 0x3a97
 800059c:	4293      	cmp	r3, r2
 800059e:	f77f af01 	ble.w	80003a4 <main+0x130>
        {
                    
            if(uRssi_NgFlag) // 10초에 ?�번 체크 ?�서 RSSI 고장?? ?�다�??1 감소 ?�다.
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <main+0x38c>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d005      	beq.n	80005b6 <main+0x342>
            {
               uRssi_NgFlag--;
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <main+0x38c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <main+0x38c>)
 80005b4:	701a      	strb	r2, [r3, #0]
            }
            
            if(uSpk_Stat)
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <main+0x384>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d005      	beq.n	80005ca <main+0x356>
            {
                uSpk_Stat--;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <main+0x384>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <main+0x384>)
 80005c8:	701a      	strb	r2, [r3, #0]
            }
            
                
             s_RssNgCleanCnt = nTick;
 80005ca:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <main+0x388>)
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	6013      	str	r3, [r2, #0]
  {
 80005d0:	e6e8      	b.n	80003a4 <main+0x130>
 80005d2:	bf00      	nop
 80005d4:	200003e0 	.word	0x200003e0
 80005d8:	200003d8 	.word	0x200003d8
 80005dc:	200003e4 	.word	0x200003e4
 80005e0:	20000310 	.word	0x20000310
 80005e4:	20000350 	.word	0x20000350
 80005e8:	20000390 	.word	0x20000390
 80005ec:	200002d0 	.word	0x200002d0
 80005f0:	200003e8 	.word	0x200003e8
 80005f4:	2000040c 	.word	0x2000040c
 80005f8:	2000040a 	.word	0x2000040a
 80005fc:	200003ec 	.word	0x200003ec
 8000600:	2000040b 	.word	0x2000040b

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	; 0x58
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800060e:	2228      	movs	r2, #40	; 0x28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f008 fed6 	bl	80093c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
 8000636:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000638:	230a      	movs	r3, #10
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000650:	4618      	mov	r0, r3
 8000652:	f004 f853 	bl	80046fc <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800065c:	f000 faf8 	bl	8000c50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fac0 	bl	8004c00 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000686:	f000 fae3 	bl	8000c50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800068a:	2302      	movs	r3, #2
 800068c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f004 fc4b 	bl	8004f30 <HAL_RCCEx_PeriphCLKConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006a0:	f000 fad6 	bl	8000c50 <Error_Handler>
  }
        /**Configure the Systick interrupt time 

    */

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80006a4:	f004 fbf4 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <SystemClock_Config+0xd0>)
 80006ac:	fba2 2303 	umull	r2, r3, r2, r3
 80006b0:	099b      	lsrs	r3, r3, #6
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 f991 	bl	80029da <HAL_SYSTICK_Config>

    /**Configure the Systick 

    */

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006b8:	2004      	movs	r0, #4
 80006ba:	f002 f99b 	bl	80029f4 <HAL_SYSTICK_CLKSourceConfig>



  /* SysTick_IRQn interrupt configuration */

  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	f04f 30ff 	mov.w	r0, #4294967295
 80006c6:	f002 f95e 	bl	8002986 <HAL_NVIC_SetPriority>


          
}
 80006ca:	bf00      	nop
 80006cc:	3758      	adds	r7, #88	; 0x58
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	10624dd3 	.word	0x10624dd3

080006d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
#if defined(USE_BOOTLOADER)
#else	//	Application

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_ADC1_Init+0x74>)
 80006ea:	4a19      	ldr	r2, [pc, #100]	; (8000750 <MX_ADC1_Init+0x78>)
 80006ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_ADC1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_ADC1_Init+0x74>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_ADC1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_ADC1_Init+0x74>)
 8000702:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000706:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_ADC1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_ADC1_Init+0x74>)
 8000710:	2201      	movs	r2, #1
 8000712:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_ADC1_Init+0x74>)
 8000716:	f001 fb31 	bl	8001d7c <HAL_ADC_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 fa96 	bl	8000c50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000724:	230c      	movs	r3, #12
 8000726:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000728:	2301      	movs	r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_ADC1_Init+0x74>)
 8000736:	f001 fec1 	bl	80024bc <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000740:	f000 fa86 	bl	8000c50 <Error_Handler>

#endif	//	Application

  /* USER CODE END ADC1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200001c4 	.word	0x200001c4
 8000750:	40012400 	.word	0x40012400

08000754 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
#if defined(USE_BOOTLOADER)
#else	//	Application

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_ADC2_Init+0x74>)
 8000766:	4a19      	ldr	r2, [pc, #100]	; (80007cc <MX_ADC2_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_ADC2_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_ADC2_Init+0x74>)
 8000772:	2201      	movs	r2, #1
 8000774:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ADC2_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_ADC2_Init+0x74>)
 800077e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000782:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_ADC2_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADC2_Init+0x74>)
 800078c:	2201      	movs	r2, #1
 800078e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_ADC2_Init+0x74>)
 8000792:	f001 faf3 	bl	8001d7c <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 fa58 	bl	8000c50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007a0:	230b      	movs	r3, #11
 80007a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_ADC2_Init+0x74>)
 80007b2:	f001 fe83 	bl	80024bc <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80007bc:	f000 fa48 	bl	8000c50 <Error_Handler>

#endif	//	Application

  /* USER CODE END ADC2_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200001f4 	.word	0x200001f4
 80007cc:	40012800 	.word	0x40012800

080007d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */
    GPIO_InitTypeDef   GPIO_InitStructure;
 __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <MX_I2C2_Init+0xb8>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a2b      	ldr	r2, [pc, #172]	; (8000888 <MX_I2C2_Init+0xb8>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6193      	str	r3, [r2, #24]
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_I2C2_Init+0xb8>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
 GPIO_InitStructure.Pin = SDL2_Pin|SDA2_Pin;
 80007ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007f2:	60bb      	str	r3, [r7, #8]
 GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80007f4:	2312      	movs	r3, #18
 80007f6:	60fb      	str	r3, [r7, #12]
 GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f8:	2303      	movs	r3, #3
 80007fa:	617b      	str	r3, [r7, #20]

 __GPIOB_CLK_ENABLE();
 80007fc:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_I2C2_Init+0xb8>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <MX_I2C2_Init+0xb8>)
 8000802:	f043 0308 	orr.w	r3, r3, #8
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_I2C2_Init+0xb8>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0308 	and.w	r3, r3, #8
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
 HAL_GPIO_Init(SDL2_GPIO_Port, &GPIO_InitStructure);
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	4619      	mov	r1, r3
 800081a:	481c      	ldr	r0, [pc, #112]	; (800088c <MX_I2C2_Init+0xbc>)
 800081c:	f002 fc0e 	bl	800303c <HAL_GPIO_Init>
 
 HAL_GPIO_WritePin(SDL2_GPIO_Port, SDL2_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000826:	4819      	ldr	r0, [pc, #100]	; (800088c <MX_I2C2_Init+0xbc>)
 8000828:	f002 fdb3 	bl	8003392 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(SDL2_GPIO_Port, SDA2_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000832:	4816      	ldr	r0, [pc, #88]	; (800088c <MX_I2C2_Init+0xbc>)
 8000834:	f002 fdad 	bl	8003392 <HAL_GPIO_WritePin>
    
   // HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_I2C2_Init+0xc0>)
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <MX_I2C2_Init+0xc4>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_I2C2_Init+0xc0>)
 8000840:	4a15      	ldr	r2, [pc, #84]	; (8000898 <MX_I2C2_Init+0xc8>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_I2C2_Init+0xc0>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_I2C2_Init+0xc0>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_I2C2_Init+0xc0>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_I2C2_Init+0xc0>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_I2C2_Init+0xc0>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_I2C2_Init+0xc0>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_I2C2_Init+0xc0>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000870:	4807      	ldr	r0, [pc, #28]	; (8000890 <MX_I2C2_Init+0xc0>)
 8000872:	f002 fdbf 	bl	80033f4 <HAL_I2C_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C2_Init+0xb0>
  {
    Error_Handler();
 800087c:	f000 f9e8 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000
 800088c:	40010c00 	.word	0x40010c00
 8000890:	2000027c 	.word	0x2000027c
 8000894:	40005800 	.word	0x40005800
 8000898:	000186a0 	.word	0x000186a0

0800089c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_IWDG_Init+0x2c>)
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <MX_IWDG_Init+0x30>)
 80008a4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_IWDG_Init+0x2c>)
 80008a8:	2205      	movs	r2, #5
 80008aa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_IWDG_Init+0x2c>)
 80008ae:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80008b2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_IWDG_Init+0x2c>)
 80008b6:	f003 fecb 	bl	8004650 <HAL_IWDG_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80008c0:	f000 f9c6 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */
#endif
  /* USER CODE END IWDG_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000026c 	.word	0x2000026c
 80008cc:	40003000 	.word	0x40003000

080008d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
#if defined(USE_BOOTLOADER)
#else	//	Application

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	463b      	mov	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_TIM2_Init+0x94>)
 80008ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_TIM2_Init+0x94>)
 80008f6:	2207      	movs	r2, #7
 80008f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_TIM2_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_TIM2_Init+0x94>)
 8000902:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_TIM2_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_TIM2_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000914:	4813      	ldr	r0, [pc, #76]	; (8000964 <MX_TIM2_Init+0x94>)
 8000916:	f004 fca5 	bl	8005264 <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000920:	f000 f996 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4619      	mov	r1, r3
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <MX_TIM2_Init+0x94>)
 8000932:	f004 fe4f 	bl	80055d4 <HAL_TIM_ConfigClockSource>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800093c:	f000 f988 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_TIM2_Init+0x94>)
 800094e:	f005 f843 	bl	80059d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 f97a 	bl	8000c50 <Error_Handler>

#endif	//	Application

  /* USER CODE END TIM2_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000224 	.word	0x20000224

08000968 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_UART5_Init+0x4c>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <MX_UART5_Init+0x50>)
 8000970:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_UART5_Init+0x4c>)
 8000974:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000978:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_UART5_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_UART5_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_UART5_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_UART5_Init+0x4c>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_UART5_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_UART5_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_UART5_Init+0x4c>)
 80009a0:	f005 f898 	bl	8005ad4 <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80009aa:	f000 f951 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200002d0 	.word	0x200002d0
 80009b8:	40005000 	.word	0x40005000

080009bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART1_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f005 f86e 	bl	8005ad4 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 f927 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000310 	.word	0x20000310
 8000a0c:	40013800 	.word	0x40013800

08000a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_USART2_UART_Init+0x50>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_USART2_UART_Init+0x4c>)
 8000a48:	f005 f844 	bl	8005ad4 <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a52:	f000 f8fd 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000350 	.word	0x20000350
 8000a60:	40004400 	.word	0x40004400

08000a64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_USART3_UART_Init+0x50>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a70:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USART3_UART_Init+0x4c>)
 8000a9c:	f005 f81a 	bl	8005ad4 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000aa6:	f000 f8d3 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000390 	.word	0x20000390
 8000ab4:	40004800 	.word	0x40004800

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	4b5c      	ldr	r3, [pc, #368]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a5b      	ldr	r2, [pc, #364]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b59      	ldr	r3, [pc, #356]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae4:	4b56      	ldr	r3, [pc, #344]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a55      	ldr	r2, [pc, #340]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000aea:	f043 0320 	orr.w	r3, r3, #32
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b53      	ldr	r3, [pc, #332]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0320 	and.w	r3, r3, #32
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b50      	ldr	r3, [pc, #320]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a4f      	ldr	r2, [pc, #316]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b4d      	ldr	r3, [pc, #308]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a49      	ldr	r2, [pc, #292]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b47      	ldr	r3, [pc, #284]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RE_Pin|SD_Pin|MUTE_Pin|LED_CTL_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 7162 	mov.w	r1, #904	; 0x388
 8000b32:	4844      	ldr	r0, [pc, #272]	; (8000c44 <MX_GPIO_Init+0x18c>)
 8000b34:	f002 fc2d 	bl	8003392 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RE1_Pin|OVERRIDE_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f241 0101 	movw	r1, #4097	; 0x1001
 8000b3e:	4842      	ldr	r0, [pc, #264]	; (8000c48 <MX_GPIO_Init+0x190>)
 8000b40:	f002 fc27 	bl	8003392 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DI_CTL_GPIO_Port, DI_CTL_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2102      	movs	r1, #2
 8000b48:	483f      	ldr	r0, [pc, #252]	; (8000c48 <MX_GPIO_Init+0x190>)
 8000b4a:	f002 fc22 	bl	8003392 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_75_Pin|RF_LED_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2128      	movs	r1, #40	; 0x28
 8000b52:	483e      	ldr	r0, [pc, #248]	; (8000c4c <MX_GPIO_Init+0x194>)
 8000b54:	f002 fc1d 	bl	8003392 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_100_RED_Pin|LED_100_GREEN_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	21c0      	movs	r1, #192	; 0xc0
 8000b5c:	483b      	ldr	r0, [pc, #236]	; (8000c4c <MX_GPIO_Init+0x194>)
 8000b5e:	f002 fc18 	bl	8003392 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MASTER_IN_Pin CHARGER_DET_Pin VCC_IN_Pin */
  GPIO_InitStruct.Pin = MASTER_IN_Pin|CHARGER_DET_Pin|VCC_IN_Pin;
 8000b62:	f246 0301 	movw	r3, #24577	; 0x6001
 8000b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	4833      	ldr	r0, [pc, #204]	; (8000c44 <MX_GPIO_Init+0x18c>)
 8000b78:	f002 fa60 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pins : RE_Pin SD_Pin MUTE_Pin LED_CTL_Pin */
  GPIO_InitStruct.Pin = RE_Pin|SD_Pin|MUTE_Pin|LED_CTL_Pin;
 8000b7c:	f44f 7362 	mov.w	r3, #904	; 0x388
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4619      	mov	r1, r3
 8000b94:	482b      	ldr	r0, [pc, #172]	; (8000c44 <MX_GPIO_Init+0x18c>)
 8000b96:	f002 fa51 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pins : RE1_Pin DI_CTL_Pin OVERRIDE_Pin */
  GPIO_InitStruct.Pin = RE1_Pin|DI_CTL_Pin|OVERRIDE_Pin;
 8000b9a:	f241 0303 	movw	r3, #4099	; 0x1003
 8000b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4825      	ldr	r0, [pc, #148]	; (8000c48 <MX_GPIO_Init+0x190>)
 8000bb4:	f002 fa42 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pins : VCC_AUDIO_IN_Pin VCC_LED_IN_Pin AMP_FAULT_Pin VCC_RF_IN_Pin */
  GPIO_InitStruct.Pin = VCC_AUDIO_IN_Pin|VCC_LED_IN_Pin|AMP_FAULT_Pin|VCC_RF_IN_Pin;
 8000bb8:	23f0      	movs	r3, #240	; 0xf0
 8000bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481f      	ldr	r0, [pc, #124]	; (8000c48 <MX_GPIO_Init+0x190>)
 8000bcc:	f002 fa36 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT_ON_Pin ST_BY_Pin */
  GPIO_InitStruct.Pin = LIGHT_ON_Pin|ST_BY_Pin;
 8000bd0:	2330      	movs	r3, #48	; 0x30
 8000bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4619      	mov	r1, r3
 8000be2:	4818      	ldr	r0, [pc, #96]	; (8000c44 <MX_GPIO_Init+0x18c>)
 8000be4:	f002 fa2a 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pins : POP_UP_Pin AUDIO_ON_Pin */
  GPIO_InitStruct.Pin = POP_UP_Pin|AUDIO_ON_Pin;
 8000be8:	2303      	movs	r3, #3
 8000bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4814      	ldr	r0, [pc, #80]	; (8000c4c <MX_GPIO_Init+0x194>)
 8000bfc:	f002 fa1e 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pins : DEV_ID3_Pin DEV_ID2_Pin DEV_ID1_Pin DEV_ID0_Pin */
  GPIO_InitStruct.Pin = DEV_ID3_Pin|DEV_ID2_Pin|DEV_ID1_Pin|DEV_ID0_Pin;
 8000c00:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4619      	mov	r1, r3
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_GPIO_Init+0x194>)
 8000c16:	f002 fa11 	bl	800303c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_75_Pin RF_LED_Pin LED_100_RED_Pin LED_100_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_75_Pin|RF_LED_Pin|LED_100_RED_Pin|LED_100_GREEN_Pin;
 8000c1a:	23e8      	movs	r3, #232	; 0xe8
 8000c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4806      	ldr	r0, [pc, #24]	; (8000c4c <MX_GPIO_Init+0x194>)
 8000c32:	f002 fa03 	bl	800303c <HAL_GPIO_Init>

}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40011000 	.word	0x40011000
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	40010c00 	.word	0x40010c00

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <toggleLed75>:
/**
  * @brief  75% LED
  */
bool getLed75(void){ return HAL_GPIO_ReadPin(LED_75_GPIO_Port, LED_75_Pin); }
void setLed75(bool state){ HAL_GPIO_WritePin(LED_75_GPIO_Port, LED_75_Pin, state); }
void toggleLed75(void){ HAL_GPIO_TogglePin(LED_75_GPIO_Port, LED_75_Pin); }
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	2108      	movs	r1, #8
 8000c62:	4802      	ldr	r0, [pc, #8]	; (8000c6c <toggleLed75+0x10>)
 8000c64:	f002 fbad 	bl	80033c2 <HAL_GPIO_TogglePin>
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <led75On>:
void led75On(void){ HAL_GPIO_WritePin(LED_75_GPIO_Port, LED_75_Pin, false); }
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	2200      	movs	r2, #0
 8000c76:	2108      	movs	r1, #8
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <led75On+0x14>)
 8000c7a:	f002 fb8a 	bl	8003392 <HAL_GPIO_WritePin>
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40010c00 	.word	0x40010c00

08000c88 <led75Off>:
void led75Off(void){ HAL_GPIO_WritePin(LED_75_GPIO_Port, LED_75_Pin, true); }
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2108      	movs	r1, #8
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <led75Off+0x14>)
 8000c92:	f002 fb7e 	bl	8003392 <HAL_GPIO_WritePin>
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010c00 	.word	0x40010c00

08000ca0 <led100RedOn>:
  */
bool getLed100Red(void){ return HAL_GPIO_ReadPin(LED_100_RED_GPIO_Port, LED_100_RED_Pin); }
void setLed100Red(bool state){ HAL_GPIO_WritePin(LED_100_RED_GPIO_Port, LED_100_RED_Pin, state); }
void toggleLed100Red(void){ HAL_GPIO_TogglePin(LED_100_RED_GPIO_Port, LED_100_RED_Pin); }

void led100RedOn(void){ HAL_GPIO_WritePin(LED_100_RED_GPIO_Port, LED_100_RED_Pin, false); }
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <led100RedOn+0x14>)
 8000caa:	f002 fb72 	bl	8003392 <HAL_GPIO_WritePin>
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <led100RedOff>:
void led100RedOff(void){ HAL_GPIO_WritePin(LED_100_RED_GPIO_Port, LED_100_RED_Pin, true); }
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2140      	movs	r1, #64	; 0x40
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <led100RedOff+0x14>)
 8000cc2:	f002 fb66 	bl	8003392 <HAL_GPIO_WritePin>
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40010c00 	.word	0x40010c00

08000cd0 <toggleLed100Grn>:
/**
  * @brief  100% Green LED
  */
bool getLed100Green(void){ return HAL_GPIO_ReadPin(LED_100_GREEN_GPIO_Port, LED_100_GREEN_Pin); }
void setLed100Green(bool state){ HAL_GPIO_WritePin(LED_100_GREEN_GPIO_Port, LED_100_GREEN_Pin, state); }
void toggleLed100Grn(void){ HAL_GPIO_TogglePin(LED_100_GREEN_GPIO_Port, LED_100_GREEN_Pin); }
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <toggleLed100Grn+0x10>)
 8000cd8:	f002 fb73 	bl	80033c2 <HAL_GPIO_TogglePin>
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <led100GreenOn>:

void led100GreenOn(void){ HAL_GPIO_WritePin(LED_100_GREEN_GPIO_Port, LED_100_GREEN_Pin, false); }
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <led100GreenOn+0x14>)
 8000cee:	f002 fb50 	bl	8003392 <HAL_GPIO_WritePin>
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40010c00 	.word	0x40010c00

08000cfc <led100GreenOff>:
void led100GreenOff(void){ HAL_GPIO_WritePin(LED_100_GREEN_GPIO_Port, LED_100_GREEN_Pin, true); }
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	2201      	movs	r2, #1
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <led100GreenOff+0x14>)
 8000d06:	f002 fb44 	bl	8003392 <HAL_GPIO_WritePin>
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40010c00 	.word	0x40010c00

08000d14 <getChargerDet>:
//
//--------------------------------------------------------------------------------------------//
/**
  * @brief  get Charger detection
  */
bool getChargerDet(void){ return HAL_GPIO_ReadPin(CHARGER_DET_GPIO_Port, CHARGER_DET_Pin); }
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <getChargerDet+0x20>)
 8000d1e:	f002 fb21 	bl	8003364 <HAL_GPIO_ReadPin>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	bf14      	ite	ne
 8000d28:	2301      	movne	r3, #1
 8000d2a:	2300      	moveq	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40011000 	.word	0x40011000

08000d38 <getChargeRate>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief  get Charge rate
  */
uint8_t getChargeRate(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
	int nRate = (Get_Adc1_Value() * 100) / ADC_MAX_DATA + 10;
 8000d3e:	f005 fcef 	bl	8006720 <Get_Adc1_Value>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2264      	movs	r2, #100	; 0x64
 8000d46:	fb03 f202 	mul.w	r2, r3, r2
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <getChargeRate+0x44>)
 8000d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d50:	1ad2      	subs	r2, r2, r3
 8000d52:	0852      	lsrs	r2, r2, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	0adb      	lsrs	r3, r3, #11
 8000d58:	330a      	adds	r3, #10
 8000d5a:	607b      	str	r3, [r7, #4]

	if( nRate > 100 )
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b64      	cmp	r3, #100	; 0x64
 8000d60:	dd01      	ble.n	8000d66 <getChargeRate+0x2e>
	{
		return 100;
 8000d62:	2364      	movs	r3, #100	; 0x64
 8000d64:	e006      	b.n	8000d74 <getChargeRate+0x3c>
	}
	else if ( nRate <= 11 )
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0b      	cmp	r3, #11
 8000d6a:	dc01      	bgt.n	8000d70 <getChargeRate+0x38>
	{
		return 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e001      	b.n	8000d74 <getChargeRate+0x3c>
	}
	else
	{
		return nRate;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	b2db      	uxtb	r3, r3
	}
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	00100101 	.word	0x00100101

08000d80 <getVccIn>:
//
//--------------------------------------------------------------------------------------------//
/**
  * @brief  get VCC input
  */
bool getVccIn(void){ return HAL_GPIO_ReadPin(VCC_IN_GPIO_Port, VCC_IN_Pin); }
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	2101      	movs	r1, #1
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <getVccIn+0x1c>)
 8000d88:	f002 faec 	bl	8003364 <HAL_GPIO_ReadPin>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bf14      	ite	ne
 8000d92:	2301      	movne	r3, #1
 8000d94:	2300      	moveq	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40011000 	.word	0x40011000

08000da0 <getStandBy>:
//
//--------------------------------------------------------------------------------------------//
/**
  * @brief  get Radio module operation state
  */
bool getStandBy(void){ return HAL_GPIO_ReadPin(ST_BY_GPIO_Port, ST_BY_Pin); }
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	2120      	movs	r1, #32
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <getStandBy+0x1c>)
 8000da8:	f002 fadc 	bl	8003364 <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf14      	ite	ne
 8000db2:	2301      	movne	r3, #1
 8000db4:	2300      	moveq	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40011000 	.word	0x40011000

08000dc0 <getLightOn>:
//
//--------------------------------------------------------------------------------------------//
/**
  * @brief  get Light state
  */
bool getLightOn(void){ return HAL_GPIO_ReadPin(LIGHT_ON_GPIO_Port, LIGHT_ON_Pin); }
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <getLightOn+0x1c>)
 8000dc8:	f002 facc 	bl	8003364 <HAL_GPIO_ReadPin>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2301      	movne	r3, #1
 8000dd4:	2300      	moveq	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40011000 	.word	0x40011000

08000de0 <getMasterIn>:
#if defined( MASTER_IN_OUT_GPIO_Port )

//	MASTER_IN 신호 Output으로 수정.
bool getMasterIn(void){ return 1; }
#else
bool getMasterIn(void){ return HAL_GPIO_ReadPin(MASTER_IN_GPIO_Port, MASTER_IN_Pin); }
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <getMasterIn+0x20>)
 8000dea:	f002 fabb 	bl	8003364 <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bf14      	ite	ne
 8000df4:	2301      	movne	r3, #1
 8000df6:	2300      	moveq	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40011000 	.word	0x40011000

08000e04 <rfLedOn>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief  set RF LED
  */
void setRfLed(GPIO_PinState state){ HAL_GPIO_WritePin(RF_LED_GPIO_Port, RF_LED_Pin, state); }
void rfLedOn(void){ HAL_GPIO_WritePin(RF_LED_GPIO_Port, RF_LED_Pin, false); }
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <rfLedOn+0x14>)
 8000e0e:	f002 fac0 	bl	8003392 <HAL_GPIO_WritePin>
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40010c00 	.word	0x40010c00

08000e1c <rfLedOff>:
void rfLedOff(void){ HAL_GPIO_WritePin(RF_LED_GPIO_Port, RF_LED_Pin, true); }
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	2201      	movs	r2, #1
 8000e22:	2120      	movs	r1, #32
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <rfLedOff+0x14>)
 8000e26:	f002 fab4 	bl	8003392 <HAL_GPIO_WritePin>
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40010c00 	.word	0x40010c00

08000e34 <getAmpFault>:
//--------------------------------------------------------------------------------------------//
//
//--------------------------------------------------------------------------------------------//

bool getVccRfIn(void){ return HAL_GPIO_ReadPin(VCC_RF_IN_GPIO_Port, VCC_RF_IN_Pin); }
bool getAmpFault(void){ return HAL_GPIO_ReadPin(AMP_FAULT_GPIO_Port, AMP_FAULT_Pin); }
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	2140      	movs	r1, #64	; 0x40
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <getAmpFault+0x1c>)
 8000e3c:	f002 fa92 	bl	8003364 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf14      	ite	ne
 8000e46:	2301      	movne	r3, #1
 8000e48:	2300      	moveq	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40010800 	.word	0x40010800

08000e54 <ledCtrOn>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief  set LED CTR pin
  */
void setLedCtr(void ){  HAL_GPIO_WritePin(LED_CTL_GPIO_Port, LED_CTL_Pin, true); }
void ledCtrOn(void){  HAL_GPIO_WritePin(LED_CTL_GPIO_Port, LED_CTL_Pin, true); }
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5e:	4802      	ldr	r0, [pc, #8]	; (8000e68 <ledCtrOn+0x14>)
 8000e60:	f002 fa97 	bl	8003392 <HAL_GPIO_WritePin>
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40011000 	.word	0x40011000

08000e6c <ledCtrOff>:
void ledCtrOff(void){  HAL_GPIO_WritePin(LED_CTL_GPIO_Port, LED_CTL_Pin, false); }
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e76:	4802      	ldr	r0, [pc, #8]	; (8000e80 <ledCtrOff+0x14>)
 8000e78:	f002 fa8b 	bl	8003392 <HAL_GPIO_WritePin>
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40011000 	.word	0x40011000

08000e84 <getAudioOn>:
//
//--------------------------------------------------------------------------------------------//
/**
  * @brief  get Audio state
  */
bool getAudioOn(void){ return HAL_GPIO_ReadPin(AUDIO_ON_GPIO_Port, AUDIO_ON_Pin); }
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <getAudioOn+0x1c>)
 8000e8c:	f002 fa6a 	bl	8003364 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bf14      	ite	ne
 8000e96:	2301      	movne	r3, #1
 8000e98:	2300      	moveq	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40010c00 	.word	0x40010c00

08000ea4 <setAmpMute>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief  set Amp mute
  */
void setAmpMute(bool state)
{ 
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(MUTE_GPIO_Port, MUTE_Pin, state); 
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb6:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <setAmpMute+0x30>)
 8000eb8:	f002 fa6b 	bl	8003392 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUTE_GPIO_Port, MUTE_Pin, state); 
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <setAmpMute+0x30>)
 8000ec6:	f002 fa64 	bl	8003392 <HAL_GPIO_WritePin>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40011000 	.word	0x40011000

08000ed8 <ampMuteOn>:


void ampMuteOn(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af02      	add	r7, sp, #8
	uint8_t     nRbuf[10];

	HAL_StatusTypeDef result;

	//HAL_GPIO_WritePin(MUTE_GPIO_Port, MUTE_Pin, false);
	result = HAL_I2C_IsDeviceReady( &hi2c2, (uint16_t)(0xD8), 2, 2 );
 8000ede:	2302      	movs	r3, #2
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	21d8      	movs	r1, #216	; 0xd8
 8000ee4:	4810      	ldr	r0, [pc, #64]	; (8000f28 <ampMuteOn+0x50>)
 8000ee6:	f002 ff2b 	bl	8003d40 <HAL_I2C_IsDeviceReady>
 8000eea:	4603      	mov	r3, r0
 8000eec:	75fb      	strb	r3, [r7, #23]

	if ( HAL_OK == result  )
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d114      	bne.n	8000f1e <ampMuteOn+0x46>
	{
		////////////////////////////////////////////////////////////////////////
		nTbuf[0] = 0X1F;
 8000ef4:	231f      	movs	r3, #31
 8000ef6:	733b      	strb	r3, [r7, #12]

		if(MB85_HAL_WriteBytes(&hi2c2,0xD8,0x0C,(uint8_t *)nTbuf,1))
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2201      	movs	r2, #1
 8000efe:	9200      	str	r2, [sp, #0]
 8000f00:	220c      	movs	r2, #12
 8000f02:	21d8      	movs	r1, #216	; 0xd8
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <ampMuteOn+0x50>)
 8000f06:	f006 fb43 	bl	8007590 <MB85_HAL_WriteBytes>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <ampMuteOn+0x40>
		{
			printf(" ampMuteOn OK \n");
 8000f10:	4806      	ldr	r0, [pc, #24]	; (8000f2c <ampMuteOn+0x54>)
 8000f12:	f008 faf9 	bl	8009508 <puts>
		else
		{
			printf( "ampMuteOn NG \n" );
		}
	}
}
 8000f16:	e002      	b.n	8000f1e <ampMuteOn+0x46>
			printf( "ampMuteOn NG \n" );
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <ampMuteOn+0x58>)
 8000f1a:	f008 faf5 	bl	8009508 <puts>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000027c 	.word	0x2000027c
 8000f2c:	0800b7b4 	.word	0x0800b7b4
 8000f30:	0800b7c4 	.word	0x0800b7c4

08000f34 <ampMuteOff>:


void ampMuteOff(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af02      	add	r7, sp, #8

	HAL_StatusTypeDef result;

	//HAL_GPIO_WritePin(MUTE_GPIO_Port, MUTE_Pin, true);

	result = HAL_I2C_IsDeviceReady( &hi2c2, (uint16_t)(0xD8), 2, 2 );
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	21d8      	movs	r1, #216	; 0xd8
 8000f40:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <ampMuteOff+0x84>)
 8000f42:	f002 fefd 	bl	8003d40 <HAL_I2C_IsDeviceReady>
 8000f46:	4603      	mov	r3, r0
 8000f48:	75fb      	strb	r3, [r7, #23]

	if ( HAL_OK == result  )
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d12f      	bne.n	8000fb0 <ampMuteOff+0x7c>
	{
		////////////////////////////////////////////////////////////////////////

        nTbuf[0] = 0x00;
 8000f50:	2300      	movs	r3, #0
 8000f52:	733b      	strb	r3, [r7, #12]
            
		if(MB85_HAL_WriteBytes(&hi2c2,0xD8,0x0C,(uint8_t *)nTbuf,1))
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2201      	movs	r2, #1
 8000f5a:	9200      	str	r2, [sp, #0]
 8000f5c:	220c      	movs	r2, #12
 8000f5e:	21d8      	movs	r1, #216	; 0xd8
 8000f60:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <ampMuteOff+0x84>)
 8000f62:	f006 fb15 	bl	8007590 <MB85_HAL_WriteBytes>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d005      	beq.n	8000f78 <ampMuteOff+0x44>
		{
			printf("-Mute OFF Write Test(0xD8-0x%02X) OK \n",nTbuf[0] );
 8000f6c:	7b3b      	ldrb	r3, [r7, #12]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <ampMuteOff+0x88>)
 8000f72:	f008 fa2f 	bl	80093d4 <iprintf>
 8000f76:	e002      	b.n	8000f7e <ampMuteOff+0x4a>
		}
		else
		{
			printf( "-Mute OFF Write Test(0xD8-0x0C) NG \n" );
 8000f78:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <ampMuteOff+0x8c>)
 8000f7a:	f008 fac5 	bl	8009508 <puts>
		}


        HAL_Delay(50);
 8000f7e:	2032      	movs	r0, #50	; 0x32
 8000f80:	f000 fed8 	bl	8001d34 <HAL_Delay>
		////////////////////////////////////////////////////////////////////////
		nRbuf[0] = 0xFF;
 8000f84:	23ff      	movs	r3, #255	; 0xff
 8000f86:	703b      	strb	r3, [r7, #0]

		if(MB85_HAL_ReadBytes(&hi2c2,0xD8,0x06,(uint8_t *)nRbuf,1))
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	9200      	str	r2, [sp, #0]
 8000f8e:	2206      	movs	r2, #6
 8000f90:	21d8      	movs	r1, #216	; 0xd8
 8000f92:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <ampMuteOff+0x84>)
 8000f94:	f006 fb2a 	bl	80075ec <MB85_HAL_ReadBytes>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <ampMuteOff+0x76>
		{
			printf("-Play and Mute Mode Read Test(0xD8-0x%02X) OK \n",nRbuf[0] );
 8000f9e:	783b      	ldrb	r3, [r7, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <ampMuteOff+0x90>)
 8000fa4:	f008 fa16 	bl	80093d4 <iprintf>
		else
		{
			printf( "-0x00 Read Test(0xD8-0x06) NG \n" );
		}
	}
}
 8000fa8:	e002      	b.n	8000fb0 <ampMuteOff+0x7c>
			printf( "-0x00 Read Test(0xD8-0x06) NG \n" );
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <ampMuteOff+0x94>)
 8000fac:	f008 faac 	bl	8009508 <puts>
}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000027c 	.word	0x2000027c
 8000fbc:	0800b7d4 	.word	0x0800b7d4
 8000fc0:	0800b7fc 	.word	0x0800b7fc
 8000fc4:	0800b820 	.word	0x0800b820
 8000fc8:	0800b850 	.word	0x0800b850

08000fcc <setAmpSd>:
/**
  * @brief  set Amp SD
  */
int		g_bSpkOn	=	0;		//	스피커On 상태.		-	OK(1) / Fault(0)
void setAmpSd(bool state)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	  uint8_t     nRbuf[10];

	  HAL_StatusTypeDef result;

    // AUDIO
	HAL_GPIO_WritePin(SD_GPIO_Port, SD_Pin, true); //
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	4835      	ldr	r0, [pc, #212]	; (80010b0 <setAmpSd+0xe4>)
 8000fdc:	f002 f9d9 	bl	8003392 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SD_GPIO_Port, SD_Pin, true); //
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	4832      	ldr	r0, [pc, #200]	; (80010b0 <setAmpSd+0xe4>)
 8000fe6:	f002 f9d4 	bl	8003392 <HAL_GPIO_WritePin>
    
        
    //HAL_GPIO_WritePin(LED_CTL_GPIO_Port, LED_CTL_Pin, state); //
    //HAL_GPIO_WritePin(LED_CTL_GPIO_Port, LED_CTL_Pin, state); //

    setAmpMute(true);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff ff5a 	bl	8000ea4 <setAmpMute>

	if(state == true)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d054      	beq.n	80010a0 <setAmpSd+0xd4>
	{
		result = HAL_I2C_IsDeviceReady( &hi2c2, (uint16_t)(0xD8), 2, 2 );
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	21d8      	movs	r1, #216	; 0xd8
 8000ffc:	482d      	ldr	r0, [pc, #180]	; (80010b4 <setAmpSd+0xe8>)
 8000ffe:	f002 fe9f 	bl	8003d40 <HAL_I2C_IsDeviceReady>
 8001002:	4603      	mov	r3, r0
 8001004:	77fb      	strb	r3, [r7, #31]

		if ( HAL_OK == result  )
 8001006:	7ffb      	ldrb	r3, [r7, #31]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d149      	bne.n	80010a0 <setAmpSd+0xd4>
				////////////////////////////////////////////////////////////////////////

				////////////////////////////////////////////////////////////////////////
				//nTbuf[0] = 0xBE;

                nTbuf[0] = 0xAA;
 800100c:	23aa      	movs	r3, #170	; 0xaa
 800100e:	753b      	strb	r3, [r7, #20]

				if(MB85_HAL_WriteBytes(&hi2c2,0xD8,0x08,(uint8_t *)nTbuf,1))
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2201      	movs	r2, #1
 8001016:	9200      	str	r2, [sp, #0]
 8001018:	2208      	movs	r2, #8
 800101a:	21d8      	movs	r1, #216	; 0xd8
 800101c:	4825      	ldr	r0, [pc, #148]	; (80010b4 <setAmpSd+0xe8>)
 800101e:	f006 fab7 	bl	8007590 <MB85_HAL_WriteBytes>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <setAmpSd+0x62>
				{
//					printf("-Gain Select (0xD8-0x%02X) OK \n",nTbuf[0] );
				}
				else
				{
					printf( "-Gain Select (0xD8-0x08) NG \n" );
 8001028:	4823      	ldr	r0, [pc, #140]	; (80010b8 <setAmpSd+0xec>)
 800102a:	f008 fa6d 	bl	8009508 <puts>
				}

				////////////////////////////////////////////////////////////////////////
//				nTbuf[0] = 0x0C;
                nTbuf[0] = 0x0C;
 800102e:	230c      	movs	r3, #12
 8001030:	753b      	strb	r3, [r7, #20]


				if(MB85_HAL_WriteBytes(&hi2c2,0xD8,0x0A,(uint8_t *)nTbuf,1))
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2201      	movs	r2, #1
 8001038:	9200      	str	r2, [sp, #0]
 800103a:	220a      	movs	r2, #10
 800103c:	21d8      	movs	r1, #216	; 0xd8
 800103e:	481d      	ldr	r0, [pc, #116]	; (80010b4 <setAmpSd+0xe8>)
 8001040:	f006 faa6 	bl	8007590 <MB85_HAL_WriteBytes>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <setAmpSd+0x84>
				{
//					printf("- Clip_OTW Configuration (0xD8-0x%02X) OK \n",nTbuf[0] );
				}
				else
				{
					printf( "- Clip_OTW Configuration (0xD8-0x0A) NG \n" );
 800104a:	481c      	ldr	r0, [pc, #112]	; (80010bc <setAmpSd+0xf0>)
 800104c:	f008 fa5c 	bl	8009508 <puts>
				}
				////////////////////////////////////////////////////////////////////////
				//nTbuf[0] = 0xD0;
                nTbuf[0] = 0xD6;
 8001050:	23d6      	movs	r3, #214	; 0xd6
 8001052:	753b      	strb	r3, [r7, #20]

				if(MB85_HAL_WriteBytes(&hi2c2,0xD8,0x0B,(uint8_t *)nTbuf,1))
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2201      	movs	r2, #1
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	220b      	movs	r2, #11
 800105e:	21d8      	movs	r1, #216	; 0xd8
 8001060:	4814      	ldr	r0, [pc, #80]	; (80010b4 <setAmpSd+0xe8>)
 8001062:	f006 fa95 	bl	8007590 <MB85_HAL_WriteBytes>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <setAmpSd+0xa6>
				{
//					printf("-Load Diagnostics (0xD8-0x%02X) OK \n",nTbuf[0] );
				}
				else
				{
					printf( "-Load Diagnostics (0xD8-0x0B) NG \n" );
 800106c:	4814      	ldr	r0, [pc, #80]	; (80010c0 <setAmpSd+0xf4>)
 800106e:	f008 fa4b 	bl	8009508 <puts>
				}

                HAL_Delay(30);
 8001072:	201e      	movs	r0, #30
 8001074:	f000 fe5e 	bl	8001d34 <HAL_Delay>
//				{
//					printf( "-0x00 Read Test(0x00-0x00) NG \n" );
//				}

            ////////////////////////////////////////////////////////////////////////
				nTbuf[0] = 0x09;
 8001078:	2309      	movs	r3, #9
 800107a:	753b      	strb	r3, [r7, #20]
                HAL_Delay(30);
 800107c:	201e      	movs	r0, #30
 800107e:	f000 fe59 	bl	8001d34 <HAL_Delay>
				if(MB85_HAL_WriteBytes(&hi2c2,0xD8,0x0C,(uint8_t *)nTbuf,1))
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	2201      	movs	r2, #1
 8001088:	9200      	str	r2, [sp, #0]
 800108a:	220c      	movs	r2, #12
 800108c:	21d8      	movs	r1, #216	; 0xd8
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <setAmpSd+0xe8>)
 8001090:	f006 fa7e 	bl	8007590 <MB85_HAL_WriteBytes>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <setAmpSd+0xd4>
				{
//					printf("-play mode (0xD8-0x%02X) OK \n",nTbuf[0] );
				}
				else
				{
					printf( "-play mode (0xD8-0x0C) NG \n" );
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <setAmpSd+0xf8>)
 800109c:	f008 fa34 	bl	8009508 <puts>
				}
		}
	}
        
   HAL_Delay(150);
 80010a0:	2096      	movs	r0, #150	; 0x96
 80010a2:	f000 fe47 	bl	8001d34 <HAL_Delay>
    
   // setAmpMute(false);

}
 80010a6:	bf00      	nop
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40011000 	.word	0x40011000
 80010b4:	2000027c 	.word	0x2000027c
 80010b8:	0800b870 	.word	0x0800b870
 80010bc:	0800b890 	.word	0x0800b890
 80010c0:	0800b8bc 	.word	0x0800b8bc
 80010c4:	0800b8e0 	.word	0x0800b8e0

080010c8 <getRS485Id>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief  get RS485 ID
  */
uint8_t getRS485Id(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	uint8_t id = HAL_GPIO_ReadPin(DEV_ID0_GPIO_Port, DEV_ID0_Pin);
 80010ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <getRS485Id+0x6c>)
 80010d4:	f002 f946 	bl	8003364 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
	id |= HAL_GPIO_ReadPin(DEV_ID1_GPIO_Port, DEV_ID1_Pin) << 1;
 80010dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e0:	4814      	ldr	r0, [pc, #80]	; (8001134 <getRS485Id+0x6c>)
 80010e2:	f002 f93f 	bl	8003364 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	71fb      	strb	r3, [r7, #7]
	id |= HAL_GPIO_ReadPin(DEV_ID2_GPIO_Port, DEV_ID2_Pin) << 2;
 80010f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fa:	480e      	ldr	r0, [pc, #56]	; (8001134 <getRS485Id+0x6c>)
 80010fc:	f002 f932 	bl	8003364 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	b25a      	sxtb	r2, r3
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	4313      	orrs	r3, r2
 800110c:	b25b      	sxtb	r3, r3
 800110e:	71fb      	strb	r3, [r7, #7]
	id |= HAL_GPIO_ReadPin(DEV_ID3_GPIO_Port, DEV_ID3_Pin) << 3;
 8001110:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <getRS485Id+0x6c>)
 8001116:	f002 f925 	bl	8003364 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	b25a      	sxtb	r2, r3
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4313      	orrs	r3, r2
 8001126:	b25b      	sxtb	r3, r3
 8001128:	71fb      	strb	r3, [r7, #7]
	return id;
 800112a:	79fb      	ldrb	r3, [r7, #7]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40010c00 	.word	0x40010c00

08001138 <getChargeRateState>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief  get Charge rate state
  */
ChargeRateState getChargeRateState(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	if(getChargerDet())
 800113e:	f7ff fde9 	bl	8000d14 <getChargerDet>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <getChargeRateState+0x14>
		return CHARGE_RATE_100;
 8001148:	2303      	movs	r3, #3
 800114a:	e016      	b.n	800117a <getChargeRateState+0x42>

#if 1	//	RFM_SIL - SIL인증용.

	int nRate = getChargeRate();
 800114c:	f7ff fdf4 	bl	8000d38 <getChargeRate>
 8001150:	4603      	mov	r3, r0
 8001152:	607b      	str	r3, [r7, #4]

	if(nRate < 75)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b4a      	cmp	r3, #74	; 0x4a
 8001158:	dc01      	bgt.n	800115e <getChargeRateState+0x26>
		return CHARGE_RATE_75_UNDER;
 800115a:	2301      	movs	r3, #1
 800115c:	e00d      	b.n	800117a <getChargeRateState+0x42>
	else if(nRate >= 75 && nRate < 97)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b4a      	cmp	r3, #74	; 0x4a
 8001162:	dd04      	ble.n	800116e <getChargeRateState+0x36>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b60      	cmp	r3, #96	; 0x60
 8001168:	dc01      	bgt.n	800116e <getChargeRateState+0x36>
		return CHARGE_RATE_100_UNDER;
 800116a:	2302      	movs	r3, #2
 800116c:	e005      	b.n	800117a <getChargeRateState+0x42>
	else if(nRate >= 98)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b61      	cmp	r3, #97	; 0x61
 8001172:	dd01      	ble.n	8001178 <getChargeRateState+0x40>
		return CHARGE_RATE_100;	//CHARGE_RATE_100_UNDER;
 8001174:	2303      	movs	r3, #3
 8001176:	e000      	b.n	800117a <getChargeRateState+0x42>
	else
		return CHARGE_RATE_UNKNOWN;
 8001178:	2300      	movs	r3, #0
	else if(u16BatVol >= VOLTAGE_BAT_100)
		return CHARGE_RATE_100_UNDER;
	else
		return CHARGE_RATE_UNKNOWN;
#endif
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <processRfLed>:
/**
  * @brief	process RF LED
  */
int		g_bRFMOk	=	0;		//	무정전 모듈 동작상태.		-	OK(1) / Fault(0)
void processRfLed(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	if(getStandBy())
 8001188:	f7ff fe0a 	bl	8000da0 <getStandBy>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <processRfLed+0x1a>
	{
		rfLedOn();
 8001192:	f7ff fe37 	bl	8000e04 <rfLedOn>
		g_bRFMOk = 1;			//	무정전 모듈 동작상태.
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <processRfLed+0x24>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		rfLedOff();
	}
}
 800119c:	e001      	b.n	80011a2 <processRfLed+0x1e>
		rfLedOff();
 800119e:	f7ff fe3d 	bl	8000e1c <rfLedOff>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000410 	.word	0x20000410

080011ac <processChargeLed>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief	process Charge LED
  */
void processChargeLed(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	ChargeRateState chargeRateState = getChargeRateState();
 80011b2:	f7ff ffc1 	bl	8001138 <getChargeRateState>
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	if(viaChargeState == CHARGE_RATE_UNKNOWN)
 80011ba:	4b33      	ldr	r3, [pc, #204]	; (8001288 <processChargeLed+0xdc>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d106      	bne.n	80011d0 <processChargeLed+0x24>
	{
		viaChargeState = chargeRateState;
 80011c2:	4a31      	ldr	r2, [pc, #196]	; (8001288 <processChargeLed+0xdc>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	7013      	strb	r3, [r2, #0]
		curChargeState = chargeRateState;
 80011c8:	4a30      	ldr	r2, [pc, #192]	; (800128c <processChargeLed+0xe0>)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	7013      	strb	r3, [r2, #0]
 80011ce:	e00b      	b.n	80011e8 <processChargeLed+0x3c>
	}
	else if(viaChargeState != chargeRateState)
 80011d0:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <processChargeLed+0xdc>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d006      	beq.n	80011e8 <processChargeLed+0x3c>
	{
		viaChargeState = chargeRateState;
 80011da:	4a2b      	ldr	r2, [pc, #172]	; (8001288 <processChargeLed+0xdc>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	7013      	strb	r3, [r2, #0]
		u16LedChangeTick = 5000;
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <processChargeLed+0xe4>)
 80011e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e6:	801a      	strh	r2, [r3, #0]
	}

	if(curChargeState != viaChargeState && u16LedChangeTick == 0)
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <processChargeLed+0xe0>)
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <processChargeLed+0xdc>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d007      	beq.n	8001204 <processChargeLed+0x58>
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <processChargeLed+0xe4>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d103      	bne.n	8001204 <processChargeLed+0x58>
		curChargeState = viaChargeState;
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <processChargeLed+0xdc>)
 80011fe:	781a      	ldrb	r2, [r3, #0]
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <processChargeLed+0xe0>)
 8001202:	701a      	strb	r2, [r3, #0]

	switch(curChargeState)
 8001204:	4b21      	ldr	r3, [pc, #132]	; (800128c <processChargeLed+0xe0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d024      	beq.n	8001256 <processChargeLed+0xaa>
 800120c:	2b03      	cmp	r3, #3
 800120e:	dc29      	bgt.n	8001264 <processChargeLed+0xb8>
 8001210:	2b01      	cmp	r3, #1
 8001212:	d002      	beq.n	800121a <processChargeLed+0x6e>
 8001214:	2b02      	cmp	r3, #2
 8001216:	d00f      	beq.n	8001238 <processChargeLed+0x8c>
 8001218:	e024      	b.n	8001264 <processChargeLed+0xb8>
	{
		case CHARGE_RATE_75_UNDER:
		{
			if(u16Led75UnderFlickerTick == 0)
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <processChargeLed+0xe8>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d12a      	bne.n	8001278 <processChargeLed+0xcc>
			{
				u16Led75UnderFlickerTick = 500;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <processChargeLed+0xe8>)
 8001224:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001228:	801a      	strh	r2, [r3, #0]
				toggleLed75();
 800122a:	f7ff fd17 	bl	8000c5c <toggleLed75>
				led100RedOff();
 800122e:	f7ff fd43 	bl	8000cb8 <led100RedOff>
				led100GreenOff();
 8001232:	f7ff fd63 	bl	8000cfc <led100GreenOff>
			}
			break;
 8001236:	e01f      	b.n	8001278 <processChargeLed+0xcc>
		}
		case CHARGE_RATE_100_UNDER:
		{
			if(u16Led100UnderFlickerTick == 0)
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <processChargeLed+0xec>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d11d      	bne.n	800127c <processChargeLed+0xd0>
			{
				u16Led100UnderFlickerTick = 500;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <processChargeLed+0xec>)
 8001242:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001246:	801a      	strh	r2, [r3, #0]
				led75On();
 8001248:	f7ff fd12 	bl	8000c70 <led75On>
				//toggleLed100Red();
				toggleLed100Grn();
 800124c:	f7ff fd40 	bl	8000cd0 <toggleLed100Grn>
				led100GreenOff();
 8001250:	f7ff fd54 	bl	8000cfc <led100GreenOff>
			}
			break;
 8001254:	e012      	b.n	800127c <processChargeLed+0xd0>
		}
		case CHARGE_RATE_100:
		{
			//led75Off();
			//led100RedOff();
			led75On();
 8001256:	f7ff fd0b 	bl	8000c70 <led75On>
			led100GreenOn();
 800125a:	f7ff fd43 	bl	8000ce4 <led100GreenOn>
			led100RedOn();
 800125e:	f7ff fd1f 	bl	8000ca0 <led100RedOn>
			break;
 8001262:	e00c      	b.n	800127e <processChargeLed+0xd2>
		}
		default:
		{
			curChargeState = CHARGE_RATE_UNKNOWN;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <processChargeLed+0xe0>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
			led75Off();
 800126a:	f7ff fd0d 	bl	8000c88 <led75Off>
			led100RedOff();
 800126e:	f7ff fd23 	bl	8000cb8 <led100RedOff>
			led100GreenOff();
 8001272:	f7ff fd43 	bl	8000cfc <led100GreenOff>
			break;
 8001276:	e002      	b.n	800127e <processChargeLed+0xd2>
			break;
 8001278:	bf00      	nop
 800127a:	e000      	b.n	800127e <processChargeLed+0xd2>
			break;
 800127c:	bf00      	nop
		}
	}
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200003f4 	.word	0x200003f4
 800128c:	200003f3 	.word	0x200003f3
 8001290:	200003f6 	.word	0x200003f6
 8001294:	200003f8 	.word	0x200003f8
 8001298:	200003fa 	.word	0x200003fa

0800129c <processLightLed>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief	process Light LED
  */
void processLightLed(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
    static int sCnnt = 0;

	if(uDI_getMasterIn)
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <processLightLed+0x60>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d01f      	beq.n	80012ea <processLightLed+0x4e>
	{
         sCnnt++;
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <processLightLed+0x64>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a13      	ldr	r2, [pc, #76]	; (8001300 <processLightLed+0x64>)
 80012b2:	6013      	str	r3, [r2, #0]

		//	방공등 Off
		bool bLightOn = getLightOn();
 80012b4:	f7ff fd84 	bl	8000dc0 <getLightOn>
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]

		if ( bCurLedCtr != bLightOn )
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <processLightLed+0x68>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	79fa      	ldrb	r2, [r7, #7]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d00d      	beq.n	80012e2 <processLightLed+0x46>
		{
			if(bLightOn)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <processLightLed+0x3c>
	        {
				ledCtrOn();
 80012cc:	f7ff fdc2 	bl	8000e54 <ledCtrOn>
				printf("[LEDOn]\n");
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <processLightLed+0x6c>)
 80012d2:	f008 f919 	bl	8009508 <puts>
 80012d6:	e004      	b.n	80012e2 <processLightLed+0x46>
	        }
			else
	        {
				ledCtrOff();
 80012d8:	f7ff fdc8 	bl	8000e6c <ledCtrOff>
				printf("[LEDOff]\n");
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <processLightLed+0x70>)
 80012de:	f008 f913 	bl	8009508 <puts>
	        }
		}
		bCurLedCtr = bLightOn;
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <processLightLed+0x68>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	7013      	strb	r3, [r2, #0]
	{
		//	방공등 On
		ledCtrOn();
		bCurLedCtr = true;
	}
}
 80012e8:	e004      	b.n	80012f4 <processLightLed+0x58>
		ledCtrOn();
 80012ea:	f7ff fdb3 	bl	8000e54 <ledCtrOn>
		bCurLedCtr = true;
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <processLightLed+0x68>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000004 	.word	0x20000004
 8001300:	20000414 	.word	0x20000414
 8001304:	200003f0 	.word	0x200003f0
 8001308:	0800b8fc 	.word	0x0800b8fc
 800130c:	0800b904 	.word	0x0800b904

08001310 <processAudioAmpProcess>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief	process audio amp
  */
void processAudioAmpProcess(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	if(getAudioOn())
 8001314:	f7ff fdb6 	bl	8000e84 <getAudioOn>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d025      	beq.n	800136a <processAudioAmpProcess+0x5a>
	{
		bAmpOnOff = true;
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <processAudioAmpProcess+0x98>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
		if(bCurAmpOnOff != bAmpOnOff)
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <processAudioAmpProcess+0x9c>)
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <processAudioAmpProcess+0x98>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d00f      	beq.n	8001350 <processAudioAmpProcess+0x40>
		{
			bCurAmpOnOff = bAmpOnOff;
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <processAudioAmpProcess+0x98>)
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <processAudioAmpProcess+0x9c>)
 8001336:	701a      	strb	r2, [r3, #0]
			setAmpSd(true);
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff fe47 	bl	8000fcc <setAmpSd>

			HAL_GPIO_WritePin(SD_GPIO_Port, SD_Pin, true); // SD
 800133e:	2201      	movs	r2, #1
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	481b      	ldr	r0, [pc, #108]	; (80013b0 <processAudioAmpProcess+0xa0>)
 8001344:	f002 f825 	bl	8003392 <HAL_GPIO_WritePin>

			u16AmpSettingTick = 500;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <processAudioAmpProcess+0xa4>)
 800134a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800134e:	801a      	strh	r2, [r3, #0]
		}

		if(bAmpSettingDetected)
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <processAudioAmpProcess+0xa8>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d025      	beq.n	80013a4 <processAudioAmpProcess+0x94>
		{
			bAmpSettingDetected = false;
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <processAudioAmpProcess+0xa8>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
			ampMuteOff();
 800135e:	f7ff fde9 	bl	8000f34 <ampMuteOff>
                
            uAudioPlayFlag = true;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <processAudioAmpProcess+0xac>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
			//setAmpSd(false);

			//HAL_GPIO_WritePin(SD_GPIO_Port, SD_Pin, false); // SD
		}
	}
}
 8001368:	e01c      	b.n	80013a4 <processAudioAmpProcess+0x94>
		bAmpOnOff = false;
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <processAudioAmpProcess+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
		if(bCurAmpOnOff != bAmpOnOff)
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <processAudioAmpProcess+0x9c>)
 8001372:	781a      	ldrb	r2, [r3, #0]
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <processAudioAmpProcess+0x98>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d00c      	beq.n	8001396 <processAudioAmpProcess+0x86>
			bCurAmpOnOff = bAmpOnOff;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <processAudioAmpProcess+0x98>)
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <processAudioAmpProcess+0x9c>)
 8001382:	701a      	strb	r2, [r3, #0]
			ampMuteOn();
 8001384:	f7ff fda8 	bl	8000ed8 <ampMuteOn>
			u16AmpSettingTick = 500;
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <processAudioAmpProcess+0xa4>)
 800138a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800138e:	801a      	strh	r2, [r3, #0]
            uAudioPlayFlag = false;
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <processAudioAmpProcess+0xac>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
		if(bAmpSettingDetected)
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <processAudioAmpProcess+0xa8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <processAudioAmpProcess+0x94>
			bAmpSettingDetected = false;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <processAudioAmpProcess+0xa8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200003f1 	.word	0x200003f1
 80013ac:	200003f2 	.word	0x200003f2
 80013b0:	40011000 	.word	0x40011000
 80013b4:	200003fc 	.word	0x200003fc
 80013b8:	200003fe 	.word	0x200003fe
 80013bc:	2000040c 	.word	0x2000040c

080013c0 <processGetBatVol>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief	process get battery voltage
  */
void processGetBatVol(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	u16CntBatVol++;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <processGetBatVol+0x84>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <processGetBatVol+0x84>)
 80013d0:	801a      	strh	r2, [r3, #0]
	uint16_t batVol = getAdc1Vol();
 80013d2:	f005 f9bf 	bl	8006754 <getAdc1Vol>
 80013d6:	4603      	mov	r3, r0
 80013d8:	80fb      	strh	r3, [r7, #6]
	u16Adc1 = batVol;
 80013da:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <processGetBatVol+0x88>)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	8013      	strh	r3, [r2, #0]

	if(getVccIn())
 80013e0:	f7ff fcce 	bl	8000d80 <getVccIn>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <processGetBatVol+0x32>
	{
		batVol-=VOLTAGE_CHARGE_BAT;
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	3b55      	subs	r3, #85	; 0x55
 80013ee:	80fb      	strh	r3, [r7, #6]
 80013f0:	e00a      	b.n	8001408 <processGetBatVol+0x48>
	}
	else
	{
		if(bCurLedCtr)
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <processGetBatVol+0x8c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <processGetBatVol+0x40>
			batVol += VOLTAGE_LOAD_LED;
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	334b      	adds	r3, #75	; 0x4b
 80013fe:	80fb      	strh	r3, [r7, #6]
		if(getAudioOn())
 8001400:	f7ff fd40 	bl	8000e84 <getAudioOn>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
			batVol += VOLTAGE_LOAD_AUDIO;
	}
	u16BatVolSum += batVol;
 8001408:	88fa      	ldrh	r2, [r7, #6]
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <processGetBatVol+0x90>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <processGetBatVol+0x90>)
 8001412:	6013      	str	r3, [r2, #0]
	if(u16CntBatVol >= 1000)
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <processGetBatVol+0x84>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800141c:	d30e      	bcc.n	800143c <processGetBatVol+0x7c>
	{
		u16BatVol = u16BatVolSum / u16CntBatVol;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <processGetBatVol+0x90>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <processGetBatVol+0x84>)
 8001424:	8812      	ldrh	r2, [r2, #0]
 8001426:	fbb3 f3f2 	udiv	r3, r3, r2
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <processGetBatVol+0x94>)
 800142e:	801a      	strh	r2, [r3, #0]
		u16CntBatVol = 0;
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <processGetBatVol+0x84>)
 8001432:	2200      	movs	r2, #0
 8001434:	801a      	strh	r2, [r3, #0]
		u16BatVolSum = 0;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <processGetBatVol+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
	}
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000402 	.word	0x20000402
 8001448:	20000408 	.word	0x20000408
 800144c:	200003f0 	.word	0x200003f0
 8001450:	20000404 	.word	0x20000404
 8001454:	20000400 	.word	0x20000400

08001458 <processTestDebug>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief	process Test Debug printf
  */
void processTestDebug(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
		PrintfUart1(printf("getDICtl():%d\n", getDICtl()));
		PrintfUart1(printf("getOverrideOn():%d\n", getOverrideOn()));
		PrintfUart1(printf("getAudioOn():%d\n", getAudioOn()));
		PrintfUart1(printf("getStandBy():%d\n\n", getStandBy()));
	}
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <AMP_SPK_CHECK>:
* @param -
* @retval-
******************************************************************************/

uint8_t AMP_SPK_CHECK(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af02      	add	r7, sp, #8
    HAL_GPIO_WritePin(SD_GPIO_Port, SD_Pin, true); // SD
//    */
    
    

    setAmpSd(true);
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff fdae 	bl	8000fcc <setAmpSd>
//	}
////    
//    ampMuteOn();
     
//    HAL_Delay(100);
    HAL_Delay(50);
 8001470:	2032      	movs	r0, #50	; 0x32
 8001472:	f000 fc5f 	bl	8001d34 <HAL_Delay>
//    printf("+++++ D8  getAmp1 Spk read :%02X\r\n", (nRbuf_1[0]));


//	*/

	MB85_HAL_ReadBytes(&hi2c2,0xD8,0x02,(uint8_t *)nRbuf_1,1);
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	2201      	movs	r2, #1
 800147c:	9200      	str	r2, [sp, #0]
 800147e:	2202      	movs	r2, #2
 8001480:	21d8      	movs	r1, #216	; 0xd8
 8001482:	481d      	ldr	r0, [pc, #116]	; (80014f8 <AMP_SPK_CHECK+0x94>)
 8001484:	f006 f8b2 	bl	80075ec <MB85_HAL_ReadBytes>
    
	MB85_HAL_ReadBytes(&hi2c2,0xD8,0x03,(uint8_t *)nRbuf_2,1);
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2201      	movs	r2, #1
 800148e:	9200      	str	r2, [sp, #0]
 8001490:	2203      	movs	r2, #3
 8001492:	21d8      	movs	r1, #216	; 0xd8
 8001494:	4818      	ldr	r0, [pc, #96]	; (80014f8 <AMP_SPK_CHECK+0x94>)
 8001496:	f006 f8a9 	bl	80075ec <MB85_HAL_ReadBytes>

	if ( nRbuf_1[0] != s_StatSpk1 || nRbuf_2[0] != s_StatSpk2 )
 800149a:	7b3a      	ldrb	r2, [r7, #12]
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <AMP_SPK_CHECK+0x98>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d104      	bne.n	80014ae <AMP_SPK_CHECK+0x4a>
 80014a4:	7a3a      	ldrb	r2, [r7, #8]
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <AMP_SPK_CHECK+0x9c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d01f      	beq.n	80014ee <AMP_SPK_CHECK+0x8a>
	{
	    printf("+++++ getAmp1 Spk read :%02X - %02X \r\n", (nRbuf_1[0]), (nRbuf_2[0]));
 80014ae:	7b3b      	ldrb	r3, [r7, #12]
 80014b0:	4619      	mov	r1, r3
 80014b2:	7a3b      	ldrb	r3, [r7, #8]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4813      	ldr	r0, [pc, #76]	; (8001504 <AMP_SPK_CHECK+0xa0>)
 80014b8:	f007 ff8c 	bl	80093d4 <iprintf>

	    sSpkData  = (nRbuf_1[0] & 0x80) == 0x80 ? 1 : 0;
 80014bc:	7b3b      	ldrb	r3, [r7, #12]
 80014be:	09db      	lsrs	r3, r3, #7
 80014c0:	73fb      	strb	r3, [r7, #15]

	    sSpkData  |= (nRbuf_2[0] & 0x08) == 0x08 ? (0x01<<1) : 0;
 80014c2:	7a3b      	ldrb	r3, [r7, #8]
 80014c4:	109b      	asrs	r3, r3, #2
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	73fb      	strb	r3, [r7, #15]

	    printf("+++++ getAmp1 Spk Retun : %02X \n",sSpkData);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	4619      	mov	r1, r3
 80014dc:	480a      	ldr	r0, [pc, #40]	; (8001508 <AMP_SPK_CHECK+0xa4>)
 80014de:	f007 ff79 	bl	80093d4 <iprintf>

	    s_StatSpk1 = nRbuf_1[0];
 80014e2:	7b3a      	ldrb	r2, [r7, #12]
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <AMP_SPK_CHECK+0x98>)
 80014e6:	701a      	strb	r2, [r3, #0]
	    s_StatSpk2 = nRbuf_2[0];
 80014e8:	7a3a      	ldrb	r2, [r7, #8]
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <AMP_SPK_CHECK+0x9c>)
 80014ec:	701a      	strb	r2, [r3, #0]
         
    //HAL_GPIO_WritePin(SD_GPIO_Port, SD_Pin, false); // SD
    //setAmpMute(false);

    //HAL_GPIO_WritePin(SD_GPIO_Port, SD_Pin, false); // SD
     return sSpkData;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]

}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000027c 	.word	0x2000027c
 80014fc:	20000418 	.word	0x20000418
 8001500:	20000419 	.word	0x20000419
 8001504:	0800ba58 	.word	0x0800ba58
 8001508:	0800ba80 	.word	0x0800ba80

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_MspInit+0x5c>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_MspInit+0x5c>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6193      	str	r3, [r2, #24]
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_MspInit+0x5c>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_MspInit+0x5c>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_MspInit+0x5c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	61d3      	str	r3, [r2, #28]
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_MspInit+0x5c>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_MspInit+0x60>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_MspInit+0x60>)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000
 800156c:	40010000 	.word	0x40010000

08001570 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a30      	ldr	r2, [pc, #192]	; (800164c <HAL_ADC_MspInit+0xdc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d12a      	bne.n	80015e6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a2e      	ldr	r2, [pc, #184]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 8001596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a28      	ldr	r2, [pc, #160]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 80015ae:	f043 0310 	orr.w	r3, r3, #16
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = BAT_VCC_Pin;
 80015c0:	2304      	movs	r3, #4
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c4:	2303      	movs	r3, #3
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_VCC_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0318 	add.w	r3, r7, #24
 80015cc:	4619      	mov	r1, r3
 80015ce:	4821      	ldr	r0, [pc, #132]	; (8001654 <HAL_ADC_MspInit+0xe4>)
 80015d0:	f001 fd34 	bl	800303c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	2012      	movs	r0, #18
 80015da:	f001 f9d4 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015de:	2012      	movs	r0, #18
 80015e0:	f001 f9ed 	bl	80029be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80015e4:	e02e      	b.n	8001644 <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <HAL_ADC_MspInit+0xe8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d129      	bne.n	8001644 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a16      	ldr	r2, [pc, #88]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 80015f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 800160e:	f043 0310 	orr.w	r3, r3, #16
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NTC_Pin;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001624:	2303      	movs	r3, #3
 8001626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(NTC_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	4619      	mov	r1, r3
 800162e:	4809      	ldr	r0, [pc, #36]	; (8001654 <HAL_ADC_MspInit+0xe4>)
 8001630:	f001 fd04 	bl	800303c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	2012      	movs	r0, #18
 800163a:	f001 f9a4 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800163e:	2012      	movs	r0, #18
 8001640:	f001 f9bd 	bl	80029be <HAL_NVIC_EnableIRQ>
}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40012400 	.word	0x40012400
 8001650:	40021000 	.word	0x40021000
 8001654:	40011000 	.word	0x40011000
 8001658:	40012800 	.word	0x40012800

0800165c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <HAL_I2C_MspInit+0x74>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d124      	bne.n	80016c6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_I2C_MspInit+0x78>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <HAL_I2C_MspInit+0x78>)
 8001682:	f043 0308 	orr.w	r3, r3, #8
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_I2C_MspInit+0x78>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SDL2_Pin|SDA2_Pin;
 8001694:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001698:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169a:	2312      	movs	r3, #18
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <HAL_I2C_MspInit+0x7c>)
 80016aa:	f001 fcc7 	bl	800303c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_I2C_MspInit+0x78>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_I2C_MspInit+0x78>)
 80016b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016b8:	61d3      	str	r3, [r2, #28]
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_I2C_MspInit+0x78>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	3720      	adds	r7, #32
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40005800 	.word	0x40005800
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010c00 	.word	0x40010c00

080016dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ec:	d113      	bne.n	8001716 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_TIM_Base_MspInit+0x44>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <HAL_TIM_Base_MspInit+0x44>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_TIM_Base_MspInit+0x44>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	201c      	movs	r0, #28
 800170c:	f001 f93b 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001710:	201c      	movs	r0, #28
 8001712:	f001 f954 	bl	80029be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000

08001724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b090      	sub	sp, #64	; 0x40
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a8e      	ldr	r2, [pc, #568]	; (8001978 <HAL_UART_MspInit+0x254>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d145      	bne.n	80017d0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001744:	4b8d      	ldr	r3, [pc, #564]	; (800197c <HAL_UART_MspInit+0x258>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	4a8c      	ldr	r2, [pc, #560]	; (800197c <HAL_UART_MspInit+0x258>)
 800174a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800174e:	61d3      	str	r3, [r2, #28]
 8001750:	4b8a      	ldr	r3, [pc, #552]	; (800197c <HAL_UART_MspInit+0x258>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175c:	4b87      	ldr	r3, [pc, #540]	; (800197c <HAL_UART_MspInit+0x258>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a86      	ldr	r2, [pc, #536]	; (800197c <HAL_UART_MspInit+0x258>)
 8001762:	f043 0310 	orr.w	r3, r3, #16
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b84      	ldr	r3, [pc, #528]	; (800197c <HAL_UART_MspInit+0x258>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001774:	4b81      	ldr	r3, [pc, #516]	; (800197c <HAL_UART_MspInit+0x258>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a80      	ldr	r2, [pc, #512]	; (800197c <HAL_UART_MspInit+0x258>)
 800177a:	f043 0320 	orr.w	r3, r3, #32
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b7e      	ldr	r3, [pc, #504]	; (800197c <HAL_UART_MspInit+0x258>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0320 	and.w	r3, r3, #32
 8001788:	623b      	str	r3, [r7, #32]
 800178a:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800178c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179e:	4619      	mov	r1, r3
 80017a0:	4877      	ldr	r0, [pc, #476]	; (8001980 <HAL_UART_MspInit+0x25c>)
 80017a2:	f001 fc4b 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017a6:	2304      	movs	r3, #4
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017aa:	2300      	movs	r3, #0
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b6:	4619      	mov	r1, r3
 80017b8:	4872      	ldr	r0, [pc, #456]	; (8001984 <HAL_UART_MspInit+0x260>)
 80017ba:	f001 fc3f 	bl	800303c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2035      	movs	r0, #53	; 0x35
 80017c4:	f001 f8df 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80017c8:	2035      	movs	r0, #53	; 0x35
 80017ca:	f001 f8f8 	bl	80029be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017ce:	e0ce      	b.n	800196e <HAL_UART_MspInit+0x24a>
  else if(huart->Instance==USART1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6c      	ldr	r2, [pc, #432]	; (8001988 <HAL_UART_MspInit+0x264>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d13a      	bne.n	8001850 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART1_CLK_ENABLE();
 80017da:	4b68      	ldr	r3, [pc, #416]	; (800197c <HAL_UART_MspInit+0x258>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	4a67      	ldr	r2, [pc, #412]	; (800197c <HAL_UART_MspInit+0x258>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6193      	str	r3, [r2, #24]
 80017e6:	4b65      	ldr	r3, [pc, #404]	; (800197c <HAL_UART_MspInit+0x258>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b62      	ldr	r3, [pc, #392]	; (800197c <HAL_UART_MspInit+0x258>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	4a61      	ldr	r2, [pc, #388]	; (800197c <HAL_UART_MspInit+0x258>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6193      	str	r3, [r2, #24]
 80017fe:	4b5f      	ldr	r3, [pc, #380]	; (800197c <HAL_UART_MspInit+0x258>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800180a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181c:	4619      	mov	r1, r3
 800181e:	485b      	ldr	r0, [pc, #364]	; (800198c <HAL_UART_MspInit+0x268>)
 8001820:	f001 fc0c 	bl	800303c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182a:	2300      	movs	r3, #0
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001836:	4619      	mov	r1, r3
 8001838:	4854      	ldr	r0, [pc, #336]	; (800198c <HAL_UART_MspInit+0x268>)
 800183a:	f001 fbff 	bl	800303c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	2025      	movs	r0, #37	; 0x25
 8001844:	f001 f89f 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001848:	2025      	movs	r0, #37	; 0x25
 800184a:	f001 f8b8 	bl	80029be <HAL_NVIC_EnableIRQ>
}
 800184e:	e08e      	b.n	800196e <HAL_UART_MspInit+0x24a>
  else if(huart->Instance==USART2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a4e      	ldr	r2, [pc, #312]	; (8001990 <HAL_UART_MspInit+0x26c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d138      	bne.n	80018cc <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800185a:	4b48      	ldr	r3, [pc, #288]	; (800197c <HAL_UART_MspInit+0x258>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a47      	ldr	r2, [pc, #284]	; (800197c <HAL_UART_MspInit+0x258>)
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b45      	ldr	r3, [pc, #276]	; (800197c <HAL_UART_MspInit+0x258>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b42      	ldr	r3, [pc, #264]	; (800197c <HAL_UART_MspInit+0x258>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	4a41      	ldr	r2, [pc, #260]	; (800197c <HAL_UART_MspInit+0x258>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6193      	str	r3, [r2, #24]
 800187e:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_UART_MspInit+0x258>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800188a:	2304      	movs	r3, #4
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189a:	4619      	mov	r1, r3
 800189c:	483b      	ldr	r0, [pc, #236]	; (800198c <HAL_UART_MspInit+0x268>)
 800189e:	f001 fbcd 	bl	800303c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018a2:	2308      	movs	r3, #8
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b2:	4619      	mov	r1, r3
 80018b4:	4835      	ldr	r0, [pc, #212]	; (800198c <HAL_UART_MspInit+0x268>)
 80018b6:	f001 fbc1 	bl	800303c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2026      	movs	r0, #38	; 0x26
 80018c0:	f001 f861 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018c4:	2026      	movs	r0, #38	; 0x26
 80018c6:	f001 f87a 	bl	80029be <HAL_NVIC_EnableIRQ>
}
 80018ca:	e050      	b.n	800196e <HAL_UART_MspInit+0x24a>
  else if(huart->Instance==USART3)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a30      	ldr	r2, [pc, #192]	; (8001994 <HAL_UART_MspInit+0x270>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d14b      	bne.n	800196e <HAL_UART_MspInit+0x24a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018d6:	4b29      	ldr	r3, [pc, #164]	; (800197c <HAL_UART_MspInit+0x258>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a28      	ldr	r2, [pc, #160]	; (800197c <HAL_UART_MspInit+0x258>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e0:	61d3      	str	r3, [r2, #28]
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <HAL_UART_MspInit+0x258>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ee:	4b23      	ldr	r3, [pc, #140]	; (800197c <HAL_UART_MspInit+0x258>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	4a22      	ldr	r2, [pc, #136]	; (800197c <HAL_UART_MspInit+0x258>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	6193      	str	r3, [r2, #24]
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_UART_MspInit+0x258>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001918:	4619      	mov	r1, r3
 800191a:	4819      	ldr	r0, [pc, #100]	; (8001980 <HAL_UART_MspInit+0x25c>)
 800191c:	f001 fb8e 	bl	800303c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001920:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001926:	2300      	movs	r3, #0
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001932:	4619      	mov	r1, r3
 8001934:	4812      	ldr	r0, [pc, #72]	; (8001980 <HAL_UART_MspInit+0x25c>)
 8001936:	f001 fb81 	bl	800303c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_UART_MspInit+0x274>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001942:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800194a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800194e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001952:	f043 0310 	orr.w	r3, r3, #16
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001958:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_UART_MspInit+0x274>)
 800195a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800195c:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	2027      	movs	r0, #39	; 0x27
 8001964:	f001 f80f 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001968:	2027      	movs	r0, #39	; 0x27
 800196a:	f001 f828 	bl	80029be <HAL_NVIC_EnableIRQ>
}
 800196e:	bf00      	nop
 8001970:	3740      	adds	r7, #64	; 0x40
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40005000 	.word	0x40005000
 800197c:	40021000 	.word	0x40021000
 8001980:	40011000 	.word	0x40011000
 8001984:	40011400 	.word	0x40011400
 8001988:	40013800 	.word	0x40013800
 800198c:	40010800 	.word	0x40010800
 8001990:	40004400 	.word	0x40004400
 8001994:	40004800 	.word	0x40004800
 8001998:	40010000 	.word	0x40010000

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <HardFault_Handler+0x4>

080019ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <MemManage_Handler+0x4>

080019b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <BusFault_Handler+0x4>

080019ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <UsageFault_Handler+0x4>

080019c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e8:	f000 f988 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <ADC1_2_IRQHandler+0x14>)
 80019f6:	f000 fc8b 	bl	8002310 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <ADC1_2_IRQHandler+0x18>)
 80019fc:	f000 fc88 	bl	8002310 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200001c4 	.word	0x200001c4
 8001a08:	200001f4 	.word	0x200001f4

08001a0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a10:	4819      	ldr	r0, [pc, #100]	; (8001a78 <TIM2_IRQHandler+0x6c>)
 8001a12:	f003 fcd7 	bl	80053c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

#if defined(USE_BOOTLOADER)
  // No Operation
#else	//	Application
  if(u16LedChangeTick)
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <TIM2_IRQHandler+0x70>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <TIM2_IRQHandler+0x1e>
	  u16LedChangeTick--;
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <TIM2_IRQHandler+0x70>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <TIM2_IRQHandler+0x70>)
 8001a28:	801a      	strh	r2, [r3, #0]

  if(u16Led75UnderFlickerTick)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <TIM2_IRQHandler+0x74>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <TIM2_IRQHandler+0x32>
	  u16Led75UnderFlickerTick--;
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <TIM2_IRQHandler+0x74>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <TIM2_IRQHandler+0x74>)
 8001a3c:	801a      	strh	r2, [r3, #0]

  if(u16Led100UnderFlickerTick)
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <TIM2_IRQHandler+0x78>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <TIM2_IRQHandler+0x46>
	  u16Led100UnderFlickerTick--;
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <TIM2_IRQHandler+0x78>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <TIM2_IRQHandler+0x78>)
 8001a50:	801a      	strh	r2, [r3, #0]

  if(u16AmpSettingTick)
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <TIM2_IRQHandler+0x7c>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00c      	beq.n	8001a74 <TIM2_IRQHandler+0x68>
  {
	  u16AmpSettingTick--;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <TIM2_IRQHandler+0x7c>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <TIM2_IRQHandler+0x7c>)
 8001a64:	801a      	strh	r2, [r3, #0]
	  if (u16AmpSettingTick == 0)
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <TIM2_IRQHandler+0x7c>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <TIM2_IRQHandler+0x68>
		  bAmpSettingDetected = true;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <TIM2_IRQHandler+0x80>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
  }
#endif
  /* USER CODE END TIM2_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000224 	.word	0x20000224
 8001a7c:	200003f6 	.word	0x200003f6
 8001a80:	200003f8 	.word	0x200003f8
 8001a84:	200003fa 	.word	0x200003fa
 8001a88:	200003fc 	.word	0x200003fc
 8001a8c:	200003fe 	.word	0x200003fe

08001a90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <USART1_IRQHandler+0x10>)
 8001a96:	f004 fa47 	bl	8005f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000310 	.word	0x20000310

08001aa4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <USART2_IRQHandler+0x10>)
 8001aaa:	f004 fa3d 	bl	8005f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000350 	.word	0x20000350

08001ab8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <USART3_IRQHandler+0x10>)
 8001abe:	f004 fa33 	bl	8005f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000390 	.word	0x20000390

08001acc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <UART5_IRQHandler+0x10>)
 8001ad2:	f004 fa29 	bl	8005f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200002d0 	.word	0x200002d0

08001ae0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e00a      	b.n	8001b08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001af2:	f006 fd57 	bl	80085a4 <__io_getchar>
 8001af6:	4601      	mov	r1, r0
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	b2ca      	uxtb	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf0      	blt.n	8001af2 <_read+0x12>
	}

return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e009      	b.n	8001b40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f006 fd11 	bl	800855c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dbf1      	blt.n	8001b2c <_write+0x12>
	}
	return len;
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_close>:

int _close(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	return -1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b78:	605a      	str	r2, [r3, #4]
	return 0;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <_isatty>:

int _isatty(int file)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
	return 0;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <_sbrk+0x50>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x16>
		heap_end = &end;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <_sbrk+0x50>)
 8001bc6:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <_sbrk+0x54>)
 8001bc8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <_sbrk+0x50>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <_sbrk+0x50>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	466a      	mov	r2, sp
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d907      	bls.n	8001bee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001bde:	f007 fba7 	bl	8009330 <__errno>
 8001be2:	4603      	mov	r3, r0
 8001be4:	220c      	movs	r2, #12
 8001be6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	e006      	b.n	8001bfc <_sbrk+0x48>
	}

	heap_end += incr;
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <_sbrk+0x50>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a03      	ldr	r2, [pc, #12]	; (8001c04 <_sbrk+0x50>)
 8001bf8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000041c 	.word	0x2000041c
 8001c08:	20000f60 	.word	0x20000f60

08001c0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)

#if		defined(USE_BOOTLOADER)	|| defined(DEBUG)//	Bootloader	memory Address : 0x08000000
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <SystemInit+0x14>)
 8001c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c16:	609a      	str	r2, [r3, #8]
 SCB->VTOR = (VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET) + 0x00004000;//VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

  
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c26:	e003      	b.n	8001c30 <LoopCopyDataInit>

08001c28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c2e:	3104      	adds	r1, #4

08001c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c30:	480a      	ldr	r0, [pc, #40]	; (8001c5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c38:	d3f6      	bcc.n	8001c28 <CopyDataInit>
  ldr r2, =_sbss
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c3c:	e002      	b.n	8001c44 <LoopFillZerobss>

08001c3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c40:	f842 3b04 	str.w	r3, [r2], #4

08001c44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c48:	d3f9      	bcc.n	8001c3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c4a:	f7ff ffdf 	bl	8001c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f007 fb87 	bl	8009360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c52:	f7fe fb0f 	bl	8000274 <main>
  bx lr
 8001c56:	4770      	bx	lr
  ldr r3, =_sidata
 8001c58:	0800cc08 	.word	0x0800cc08
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c60:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 8001c64:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 8001c68:	20000f5c 	.word	0x20000f5c

08001c6c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <ADC3_IRQHandler>
	...

08001c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <HAL_Init+0x28>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_Init+0x28>)
 8001c7a:	f043 0310 	orr.w	r3, r3, #16
 8001c7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c80:	2003      	movs	r0, #3
 8001c82:	f000 fe75 	bl	8002970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f000 f808 	bl	8001c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c8c:	f7ff fc3e 	bl	800150c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40022000 	.word	0x40022000

08001c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_InitTick+0x54>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_InitTick+0x58>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fe8d 	bl	80029da <HAL_SYSTICK_Config>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00e      	b.n	8001ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d80a      	bhi.n	8001ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f000 fe55 	bl	8002986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cdc:	4a06      	ldr	r2, [pc, #24]	; (8001cf8 <HAL_InitTick+0x5c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000010 	.word	0x20000010
 8001cf8:	2000000c 	.word	0x2000000c

08001cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_IncTick+0x1c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_IncTick+0x20>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a03      	ldr	r2, [pc, #12]	; (8001d1c <HAL_IncTick+0x20>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	20000010 	.word	0x20000010
 8001d1c:	20000420 	.word	0x20000420

08001d20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return uwTick;
 8001d24:	4b02      	ldr	r3, [pc, #8]	; (8001d30 <HAL_GetTick+0x10>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	20000420 	.word	0x20000420

08001d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff fff0 	bl	8001d20 <HAL_GetTick>
 8001d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d005      	beq.n	8001d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_Delay+0x44>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d5a:	bf00      	nop
 8001d5c:	f7ff ffe0 	bl	8001d20 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d8f7      	bhi.n	8001d5c <HAL_Delay+0x28>
  {
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000010 	.word	0x20000010

08001d7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0ce      	b.n	8001f3c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fbd8 	bl	8001570 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 fcc5 	bl	8002750 <ADC_ConversionStop_Disable>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 80a9 	bne.w	8001f2a <HAL_ADC_Init+0x1ae>
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 80a5 	bne.w	8001f2a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001de8:	f023 0302 	bic.w	r3, r3, #2
 8001dec:	f043 0202 	orr.w	r2, r3, #2
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4951      	ldr	r1, [pc, #324]	; (8001f44 <HAL_ADC_Init+0x1c8>)
 8001dfe:	428b      	cmp	r3, r1
 8001e00:	d10a      	bne.n	8001e18 <HAL_ADC_Init+0x9c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e0a:	d002      	beq.n	8001e12 <HAL_ADC_Init+0x96>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	e004      	b.n	8001e1c <HAL_ADC_Init+0xa0>
 8001e12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e16:	e001      	b.n	8001e1c <HAL_ADC_Init+0xa0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7b1b      	ldrb	r3, [r3, #12]
 8001e22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e34:	d003      	beq.n	8001e3e <HAL_ADC_Init+0xc2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d102      	bne.n	8001e44 <HAL_ADC_Init+0xc8>
 8001e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e42:	e000      	b.n	8001e46 <HAL_ADC_Init+0xca>
 8001e44:	2300      	movs	r3, #0
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7d1b      	ldrb	r3, [r3, #20]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d119      	bne.n	8001e88 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7b1b      	ldrb	r3, [r3, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	035a      	lsls	r2, r3, #13
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	e00b      	b.n	8001e88 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	f043 0220 	orr.w	r2, r3, #32
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <HAL_ADC_Init+0x1cc>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	68b9      	ldr	r1, [r7, #8]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb8:	d003      	beq.n	8001ec2 <HAL_ADC_Init+0x146>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d104      	bne.n	8001ecc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	051b      	lsls	r3, r3, #20
 8001eca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_ADC_Init+0x1d0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d10b      	bne.n	8001f08 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f06:	e018      	b.n	8001f3a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	f023 0312 	bic.w	r3, r3, #18
 8001f10:	f043 0210 	orr.w	r2, r3, #16
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f28:	e007      	b.n	8001f3a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	f043 0210 	orr.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40013c00 	.word	0x40013c00
 8001f48:	ffe1f7fd 	.word	0xffe1f7fd
 8001f4c:	ff1f0efe 	.word	0xff1f0efe

08001f50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_Start+0x1a>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e098      	b.n	800209c <HAL_ADC_Start+0x14c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fb9a 	bl	80026ac <ADC_Enable>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 8087 	bne.w	8002092 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a41      	ldr	r2, [pc, #260]	; (80020a4 <HAL_ADC_Start+0x154>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d105      	bne.n	8001fae <HAL_ADC_Start+0x5e>
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_ADC_Start+0x158>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d115      	bne.n	8001fda <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d026      	beq.n	8002016 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fd8:	e01d      	b.n	8002016 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a2f      	ldr	r2, [pc, #188]	; (80020a8 <HAL_ADC_Start+0x158>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d004      	beq.n	8001ffa <HAL_ADC_Start+0xaa>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2b      	ldr	r2, [pc, #172]	; (80020a4 <HAL_ADC_Start+0x154>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10d      	bne.n	8002016 <HAL_ADC_Start+0xc6>
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_ADC_Start+0x158>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800200e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d006      	beq.n	8002030 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	f023 0206 	bic.w	r2, r3, #6
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c
 800202e:	e002      	b.n	8002036 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f06f 0202 	mvn.w	r2, #2
 8002046:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002052:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002056:	d113      	bne.n	8002080 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800205c:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <HAL_ADC_Start+0x154>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d105      	bne.n	800206e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_ADC_Start+0x158>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800206a:	2b00      	cmp	r3, #0
 800206c:	d108      	bne.n	8002080 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	e00c      	b.n	800209a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	e003      	b.n	800209a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40012800 	.word	0x40012800
 80020a8:	40012400 	.word	0x40012400

080020ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_Stop+0x1a>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e01a      	b.n	80020fc <HAL_ADC_Stop+0x50>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fb3e 	bl	8002750 <ADC_ConversionStop_Disable>
 80020d4:	4603      	mov	r3, r0
 80020d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800211a:	f7ff fe01 	bl	8001d20 <HAL_GetTick>
 800211e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	f043 0220 	orr.w	r2, r3, #32
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0c8      	b.n	80022d8 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d12a      	bne.n	80021aa <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d123      	bne.n	80021aa <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002162:	e01a      	b.n	800219a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d016      	beq.n	800219a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <HAL_ADC_PollForConversion+0x7e>
 8002172:	f7ff fdd5 	bl	8001d20 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d20b      	bcs.n	800219a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	f043 0204 	orr.w	r2, r3, #4
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e09e      	b.n	80022d8 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0dd      	beq.n	8002164 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021a8:	e06c      	b.n	8002284 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021aa:	4b4d      	ldr	r3, [pc, #308]	; (80022e0 <HAL_ADC_PollForConversion+0x1dc>)
 80021ac:	681c      	ldr	r4, [r3, #0]
 80021ae:	2002      	movs	r0, #2
 80021b0:	f002 ff74 	bl	800509c <HAL_RCCEx_GetPeriphCLKFreq>
 80021b4:	4603      	mov	r3, r0
 80021b6:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6919      	ldr	r1, [r3, #16]
 80021c0:	4b48      	ldr	r3, [pc, #288]	; (80022e4 <HAL_ADC_PollForConversion+0x1e0>)
 80021c2:	400b      	ands	r3, r1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d118      	bne.n	80021fa <HAL_ADC_PollForConversion+0xf6>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68d9      	ldr	r1, [r3, #12]
 80021ce:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_ADC_PollForConversion+0x1e4>)
 80021d0:	400b      	ands	r3, r1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d111      	bne.n	80021fa <HAL_ADC_PollForConversion+0xf6>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6919      	ldr	r1, [r3, #16]
 80021dc:	4b43      	ldr	r3, [pc, #268]	; (80022ec <HAL_ADC_PollForConversion+0x1e8>)
 80021de:	400b      	ands	r3, r1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d108      	bne.n	80021f6 <HAL_ADC_PollForConversion+0xf2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68d9      	ldr	r1, [r3, #12]
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <HAL_ADC_PollForConversion+0x1ec>)
 80021ec:	400b      	ands	r3, r1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_PollForConversion+0xf2>
 80021f2:	2314      	movs	r3, #20
 80021f4:	e020      	b.n	8002238 <HAL_ADC_PollForConversion+0x134>
 80021f6:	2329      	movs	r3, #41	; 0x29
 80021f8:	e01e      	b.n	8002238 <HAL_ADC_PollForConversion+0x134>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6919      	ldr	r1, [r3, #16]
 8002200:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_ADC_PollForConversion+0x1e8>)
 8002202:	400b      	ands	r3, r1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <HAL_ADC_PollForConversion+0x112>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68d9      	ldr	r1, [r3, #12]
 800220e:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <HAL_ADC_PollForConversion+0x1ec>)
 8002210:	400b      	ands	r3, r1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00d      	beq.n	8002232 <HAL_ADC_PollForConversion+0x12e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6919      	ldr	r1, [r3, #16]
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <HAL_ADC_PollForConversion+0x1f0>)
 800221e:	400b      	ands	r3, r1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d108      	bne.n	8002236 <HAL_ADC_PollForConversion+0x132>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68d9      	ldr	r1, [r3, #12]
 800222a:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <HAL_ADC_PollForConversion+0x1f0>)
 800222c:	400b      	ands	r3, r1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_PollForConversion+0x132>
 8002232:	2354      	movs	r3, #84	; 0x54
 8002234:	e000      	b.n	8002238 <HAL_ADC_PollForConversion+0x134>
 8002236:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002238:	fb02 f303 	mul.w	r3, r2, r3
 800223c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800223e:	e01d      	b.n	800227c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002246:	d016      	beq.n	8002276 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <HAL_ADC_PollForConversion+0x15a>
 800224e:	f7ff fd67 	bl	8001d20 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d20b      	bcs.n	8002276 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	f043 0204 	orr.w	r2, r3, #4
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e030      	b.n	80022d8 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3301      	adds	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d8dd      	bhi.n	8002240 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0212 	mvn.w	r2, #18
 800228c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022a4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022a8:	d115      	bne.n	80022d6 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d111      	bne.n	80022d6 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d105      	bne.n	80022d6 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	f043 0201 	orr.w	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd90      	pop	{r4, r7, pc}
 80022e0:	20000008 	.word	0x20000008
 80022e4:	24924924 	.word	0x24924924
 80022e8:	00924924 	.word	0x00924924
 80022ec:	12492492 	.word	0x12492492
 80022f0:	00492492 	.word	0x00492492
 80022f4:	00249249 	.word	0x00249249

080022f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b20      	cmp	r3, #32
 8002324:	d140      	bne.n	80023a8 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d139      	bne.n	80023a8 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002356:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800235a:	d11d      	bne.n	8002398 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002360:	2b00      	cmp	r3, #0
 8002362:	d119      	bne.n	8002398 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0220 	bic.w	r2, r2, #32
 8002372:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f87c 	bl	8002496 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f06f 0212 	mvn.w	r2, #18
 80023a6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b80      	cmp	r3, #128	; 0x80
 80023b4:	d14f      	bne.n	8002456 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d148      	bne.n	8002456 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80023e6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80023ea:	d012      	beq.n	8002412 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d125      	bne.n	8002446 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002404:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002408:	d11d      	bne.n	8002446 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800240e:	2b00      	cmp	r3, #0
 8002410:	d119      	bne.n	8002446 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002420:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	f043 0201 	orr.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f9bc 	bl	80027c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 020c 	mvn.w	r2, #12
 8002454:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d114      	bne.n	800248e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d10d      	bne.n	800248e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f812 	bl	80024a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0201 	mvn.w	r2, #1
 800248c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x20>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0dc      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1da>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b06      	cmp	r3, #6
 80024ea:	d81c      	bhi.n	8002526 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	3b05      	subs	r3, #5
 80024fe:	221f      	movs	r2, #31
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	4019      	ands	r1, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	3b05      	subs	r3, #5
 8002518:	fa00 f203 	lsl.w	r2, r0, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	635a      	str	r2, [r3, #52]	; 0x34
 8002524:	e03c      	b.n	80025a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d81c      	bhi.n	8002568 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	3b23      	subs	r3, #35	; 0x23
 8002540:	221f      	movs	r2, #31
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	4019      	ands	r1, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b23      	subs	r3, #35	; 0x23
 800255a:	fa00 f203 	lsl.w	r2, r0, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
 8002566:	e01b      	b.n	80025a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	3b41      	subs	r3, #65	; 0x41
 800257a:	221f      	movs	r2, #31
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	4019      	ands	r1, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	3b41      	subs	r3, #65	; 0x41
 8002594:	fa00 f203 	lsl.w	r2, r0, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b09      	cmp	r3, #9
 80025a6:	d91c      	bls.n	80025e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68d9      	ldr	r1, [r3, #12]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	3b1e      	subs	r3, #30
 80025ba:	2207      	movs	r2, #7
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4019      	ands	r1, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6898      	ldr	r0, [r3, #8]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	3b1e      	subs	r3, #30
 80025d4:	fa00 f203 	lsl.w	r2, r0, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	e019      	b.n	8002616 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6919      	ldr	r1, [r3, #16]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	2207      	movs	r2, #7
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	4019      	ands	r1, r3
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6898      	ldr	r0, [r3, #8]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	fa00 f203 	lsl.w	r2, r0, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b10      	cmp	r3, #16
 800261c:	d003      	beq.n	8002626 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002622:	2b11      	cmp	r3, #17
 8002624:	d132      	bne.n	800268c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d125      	bne.n	800267c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d126      	bne.n	800268c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800264c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b10      	cmp	r3, #16
 8002654:	d11a      	bne.n	800268c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	0c9a      	lsrs	r2, r3, #18
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800266c:	e002      	b.n	8002674 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	3b01      	subs	r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f9      	bne.n	800266e <HAL_ADC_ConfigChannel+0x1b2>
 800267a:	e007      	b.n	800268c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	f043 0220 	orr.w	r2, r3, #32
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	40012400 	.word	0x40012400
 80026a4:	20000008 	.word	0x20000008
 80026a8:	431bde83 	.word	0x431bde83

080026ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d039      	beq.n	800273e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <ADC_Enable+0x9c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1b      	ldr	r2, [pc, #108]	; (800274c <ADC_Enable+0xa0>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	0c9b      	lsrs	r3, r3, #18
 80026e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026e8:	e002      	b.n	80026f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f9      	bne.n	80026ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026f6:	f7ff fb13 	bl	8001d20 <HAL_GetTick>
 80026fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026fc:	e018      	b.n	8002730 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026fe:	f7ff fb0f 	bl	8001d20 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d911      	bls.n	8002730 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	f043 0210 	orr.w	r2, r3, #16
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	f043 0201 	orr.w	r2, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e007      	b.n	8002740 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d1df      	bne.n	80026fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000008 	.word	0x20000008
 800274c:	431bde83 	.word	0x431bde83

08002750 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d127      	bne.n	80027ba <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800277a:	f7ff fad1 	bl	8001d20 <HAL_GetTick>
 800277e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002780:	e014      	b.n	80027ac <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002782:	f7ff facd 	bl	8001d20 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d90d      	bls.n	80027ac <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	f043 0210 	orr.w	r2, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e007      	b.n	80027bc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d0e3      	beq.n	8002782 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
	...

080027d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <__NVIC_SetPriorityGrouping+0x44>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027f4:	4013      	ands	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280a:	4a04      	ldr	r2, [pc, #16]	; (800281c <__NVIC_SetPriorityGrouping+0x44>)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	60d3      	str	r3, [r2, #12]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <__NVIC_GetPriorityGrouping+0x18>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	f003 0307 	and.w	r3, r3, #7
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	2b00      	cmp	r3, #0
 800284c:	db0b      	blt.n	8002866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	4906      	ldr	r1, [pc, #24]	; (8002870 <__NVIC_EnableIRQ+0x34>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	2001      	movs	r0, #1
 800285e:	fa00 f202 	lsl.w	r2, r0, r2
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	; (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	; (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
         );
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	; 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800293c:	d301      	bcc.n	8002942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293e:	2301      	movs	r3, #1
 8002940:	e00f      	b.n	8002962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <SysTick_Config+0x40>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294a:	210f      	movs	r1, #15
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	f7ff ff90 	bl	8002874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <SysTick_Config+0x40>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <SysTick_Config+0x40>)
 800295c:	2207      	movs	r2, #7
 800295e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	e000e010 	.word	0xe000e010

08002970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff2d 	bl	80027d8 <__NVIC_SetPriorityGrouping>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002998:	f7ff ff42 	bl	8002820 <__NVIC_GetPriorityGrouping>
 800299c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff ff90 	bl	80028c8 <NVIC_EncodePriority>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff5f 	bl	8002874 <__NVIC_SetPriority>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff35 	bl	800283c <__NVIC_EnableIRQ>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffa2 	bl	800292c <SysTick_Config>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d106      	bne.n	8002a10 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a08      	ldr	r2, [pc, #32]	; (8002a28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002a0e:	e005      	b.n	8002a1c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002a16:	f023 0304 	bic.w	r3, r3, #4
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000e010 	.word	0xe000e010

08002a2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d005      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2204      	movs	r2, #4
 8002a46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
 8002a4c:	e0d6      	b.n	8002bfc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 020e 	bic.w	r2, r2, #14
 8002a5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b64      	ldr	r3, [pc, #400]	; (8002c08 <HAL_DMA_Abort_IT+0x1dc>)
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d958      	bls.n	8002b2c <HAL_DMA_Abort_IT+0x100>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a63      	ldr	r2, [pc, #396]	; (8002c0c <HAL_DMA_Abort_IT+0x1e0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d04f      	beq.n	8002b24 <HAL_DMA_Abort_IT+0xf8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a61      	ldr	r2, [pc, #388]	; (8002c10 <HAL_DMA_Abort_IT+0x1e4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d048      	beq.n	8002b20 <HAL_DMA_Abort_IT+0xf4>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a60      	ldr	r2, [pc, #384]	; (8002c14 <HAL_DMA_Abort_IT+0x1e8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d040      	beq.n	8002b1a <HAL_DMA_Abort_IT+0xee>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5e      	ldr	r2, [pc, #376]	; (8002c18 <HAL_DMA_Abort_IT+0x1ec>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d038      	beq.n	8002b14 <HAL_DMA_Abort_IT+0xe8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5d      	ldr	r2, [pc, #372]	; (8002c1c <HAL_DMA_Abort_IT+0x1f0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d030      	beq.n	8002b0e <HAL_DMA_Abort_IT+0xe2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a5b      	ldr	r2, [pc, #364]	; (8002c20 <HAL_DMA_Abort_IT+0x1f4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d028      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xdc>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a53      	ldr	r2, [pc, #332]	; (8002c08 <HAL_DMA_Abort_IT+0x1dc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d020      	beq.n	8002b02 <HAL_DMA_Abort_IT+0xd6>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a57      	ldr	r2, [pc, #348]	; (8002c24 <HAL_DMA_Abort_IT+0x1f8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d019      	beq.n	8002afe <HAL_DMA_Abort_IT+0xd2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a56      	ldr	r2, [pc, #344]	; (8002c28 <HAL_DMA_Abort_IT+0x1fc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d012      	beq.n	8002afa <HAL_DMA_Abort_IT+0xce>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a54      	ldr	r2, [pc, #336]	; (8002c2c <HAL_DMA_Abort_IT+0x200>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00a      	beq.n	8002af4 <HAL_DMA_Abort_IT+0xc8>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a53      	ldr	r2, [pc, #332]	; (8002c30 <HAL_DMA_Abort_IT+0x204>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d102      	bne.n	8002aee <HAL_DMA_Abort_IT+0xc2>
 8002ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aec:	e01b      	b.n	8002b26 <HAL_DMA_Abort_IT+0xfa>
 8002aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002af2:	e018      	b.n	8002b26 <HAL_DMA_Abort_IT+0xfa>
 8002af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af8:	e015      	b.n	8002b26 <HAL_DMA_Abort_IT+0xfa>
 8002afa:	2310      	movs	r3, #16
 8002afc:	e013      	b.n	8002b26 <HAL_DMA_Abort_IT+0xfa>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e011      	b.n	8002b26 <HAL_DMA_Abort_IT+0xfa>
 8002b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b06:	e00e      	b.n	8002b26 <HAL_DMA_Abort_IT+0xfa>
 8002b08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b0c:	e00b      	b.n	8002b26 <HAL_DMA_Abort_IT+0xfa>
 8002b0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b12:	e008      	b.n	8002b26 <HAL_DMA_Abort_IT+0xfa>
 8002b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b18:	e005      	b.n	8002b26 <HAL_DMA_Abort_IT+0xfa>
 8002b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b1e:	e002      	b.n	8002b26 <HAL_DMA_Abort_IT+0xfa>
 8002b20:	2310      	movs	r3, #16
 8002b22:	e000      	b.n	8002b26 <HAL_DMA_Abort_IT+0xfa>
 8002b24:	2301      	movs	r3, #1
 8002b26:	4a43      	ldr	r2, [pc, #268]	; (8002c34 <HAL_DMA_Abort_IT+0x208>)
 8002b28:	6053      	str	r3, [r2, #4]
 8002b2a:	e057      	b.n	8002bdc <HAL_DMA_Abort_IT+0x1b0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a36      	ldr	r2, [pc, #216]	; (8002c0c <HAL_DMA_Abort_IT+0x1e0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d04f      	beq.n	8002bd6 <HAL_DMA_Abort_IT+0x1aa>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a35      	ldr	r2, [pc, #212]	; (8002c10 <HAL_DMA_Abort_IT+0x1e4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d048      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x1a6>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a33      	ldr	r2, [pc, #204]	; (8002c14 <HAL_DMA_Abort_IT+0x1e8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d040      	beq.n	8002bcc <HAL_DMA_Abort_IT+0x1a0>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a32      	ldr	r2, [pc, #200]	; (8002c18 <HAL_DMA_Abort_IT+0x1ec>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d038      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x19a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a30      	ldr	r2, [pc, #192]	; (8002c1c <HAL_DMA_Abort_IT+0x1f0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d030      	beq.n	8002bc0 <HAL_DMA_Abort_IT+0x194>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a2f      	ldr	r2, [pc, #188]	; (8002c20 <HAL_DMA_Abort_IT+0x1f4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d028      	beq.n	8002bba <HAL_DMA_Abort_IT+0x18e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <HAL_DMA_Abort_IT+0x1dc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d020      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x188>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a2b      	ldr	r2, [pc, #172]	; (8002c24 <HAL_DMA_Abort_IT+0x1f8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d019      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x184>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a29      	ldr	r2, [pc, #164]	; (8002c28 <HAL_DMA_Abort_IT+0x1fc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d012      	beq.n	8002bac <HAL_DMA_Abort_IT+0x180>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a28      	ldr	r2, [pc, #160]	; (8002c2c <HAL_DMA_Abort_IT+0x200>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_DMA_Abort_IT+0x17a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <HAL_DMA_Abort_IT+0x204>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d102      	bne.n	8002ba0 <HAL_DMA_Abort_IT+0x174>
 8002b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9e:	e01b      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x1ac>
 8002ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ba4:	e018      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x1ac>
 8002ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002baa:	e015      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x1ac>
 8002bac:	2310      	movs	r3, #16
 8002bae:	e013      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x1ac>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e011      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x1ac>
 8002bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb8:	e00e      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x1ac>
 8002bba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bbe:	e00b      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x1ac>
 8002bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bc4:	e008      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x1ac>
 8002bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bca:	e005      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x1ac>
 8002bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd0:	e002      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x1ac>
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	e000      	b.n	8002bd8 <HAL_DMA_Abort_IT+0x1ac>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <HAL_DMA_Abort_IT+0x20c>)
 8002bda:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
    } 
  }
  return status;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40020080 	.word	0x40020080
 8002c0c:	40020008 	.word	0x40020008
 8002c10:	4002001c 	.word	0x4002001c
 8002c14:	40020030 	.word	0x40020030
 8002c18:	40020044 	.word	0x40020044
 8002c1c:	40020058 	.word	0x40020058
 8002c20:	4002006c 	.word	0x4002006c
 8002c24:	40020408 	.word	0x40020408
 8002c28:	4002041c 	.word	0x4002041c
 8002c2c:	40020430 	.word	0x40020430
 8002c30:	40020444 	.word	0x40020444
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40020000 	.word	0x40020000

08002c3c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c56:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <HAL_FLASH_Program+0xd8>)
 8002c58:	7e1b      	ldrb	r3, [r3, #24]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_FLASH_Program+0x26>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e054      	b.n	8002d0c <HAL_FLASH_Program+0xd0>
 8002c62:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <HAL_FLASH_Program+0xd8>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002c68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c6c:	f000 f8a8 	bl	8002dc0 <FLASH_WaitForLastOperation>
 8002c70:	4603      	mov	r3, r0
 8002c72:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d144      	bne.n	8002d04 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d102      	bne.n	8002c86 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002c80:	2301      	movs	r3, #1
 8002c82:	757b      	strb	r3, [r7, #21]
 8002c84:	e007      	b.n	8002c96 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d102      	bne.n	8002c92 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	757b      	strb	r3, [r7, #21]
 8002c90:	e001      	b.n	8002c96 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002c92:	2304      	movs	r3, #4
 8002c94:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	75bb      	strb	r3, [r7, #22]
 8002c9a:	e02d      	b.n	8002cf8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002c9c:	7dbb      	ldrb	r3, [r7, #22]
 8002c9e:	005a      	lsls	r2, r3, #1
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	eb02 0c03 	add.w	ip, r2, r3
 8002ca6:	7dbb      	ldrb	r3, [r7, #22]
 8002ca8:	0119      	lsls	r1, r3, #4
 8002caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cae:	f1c1 0620 	rsb	r6, r1, #32
 8002cb2:	f1a1 0020 	sub.w	r0, r1, #32
 8002cb6:	fa22 f401 	lsr.w	r4, r2, r1
 8002cba:	fa03 f606 	lsl.w	r6, r3, r6
 8002cbe:	4334      	orrs	r4, r6
 8002cc0:	fa23 f000 	lsr.w	r0, r3, r0
 8002cc4:	4304      	orrs	r4, r0
 8002cc6:	fa23 f501 	lsr.w	r5, r3, r1
 8002cca:	b2a3      	uxth	r3, r4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4660      	mov	r0, ip
 8002cd0:	f000 f85a 	bl	8002d88 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002cd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cd8:	f000 f872 	bl	8002dc0 <FLASH_WaitForLastOperation>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_FLASH_Program+0xdc>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <HAL_FLASH_Program+0xdc>)
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d107      	bne.n	8002d02 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002cf2:	7dbb      	ldrb	r3, [r7, #22]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	75bb      	strb	r3, [r7, #22]
 8002cf8:	7dba      	ldrb	r2, [r7, #22]
 8002cfa:	7d7b      	ldrb	r3, [r7, #21]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3cd      	bcc.n	8002c9c <HAL_FLASH_Program+0x60>
 8002d00:	e000      	b.n	8002d04 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002d02:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_FLASH_Program+0xd8>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	761a      	strb	r2, [r3, #24]

  return status;
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d14:	20000428 	.word	0x20000428
 8002d18:	40022000 	.word	0x40022000

08002d1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_FLASH_Unlock+0x40>)
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_FLASH_Unlock+0x40>)
 8002d34:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <HAL_FLASH_Unlock+0x44>)
 8002d36:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_FLASH_Unlock+0x40>)
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_FLASH_Unlock+0x48>)
 8002d3c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_FLASH_Unlock+0x40>)
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40022000 	.word	0x40022000
 8002d60:	45670123 	.word	0x45670123
 8002d64:	cdef89ab 	.word	0xcdef89ab

08002d68 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_FLASH_Lock+0x1c>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_FLASH_Lock+0x1c>)
 8002d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d76:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40022000 	.word	0x40022000

08002d88 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <FLASH_Program_HalfWord+0x30>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <FLASH_Program_HalfWord+0x34>)
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <FLASH_Program_HalfWord+0x34>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	887a      	ldrh	r2, [r7, #2]
 8002daa:	801a      	strh	r2, [r3, #0]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000428 	.word	0x20000428
 8002dbc:	40022000 	.word	0x40022000

08002dc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7fe ffaa 	bl	8001d20 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002dce:	e010      	b.n	8002df2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d00c      	beq.n	8002df2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <FLASH_WaitForLastOperation+0x2e>
 8002dde:	f7fe ff9f 	bl	8001d20 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d201      	bcs.n	8002df2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e025      	b.n	8002e3e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <FLASH_WaitForLastOperation+0x88>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1e8      	bne.n	8002dd0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <FLASH_WaitForLastOperation+0x88>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <FLASH_WaitForLastOperation+0x88>)
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <FLASH_WaitForLastOperation+0x88>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <FLASH_WaitForLastOperation+0x88>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <FLASH_WaitForLastOperation+0x88>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002e34:	f000 f80a 	bl	8002e4c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40022000 	.word	0x40022000

08002e4c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002e56:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <FLASH_SetErrorCode+0x98>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <FLASH_SetErrorCode+0x9c>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ee8 <FLASH_SetErrorCode+0x9c>)
 8002e6c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f043 0310 	orr.w	r3, r3, #16
 8002e74:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <FLASH_SetErrorCode+0x98>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002e82:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <FLASH_SetErrorCode+0x9c>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <FLASH_SetErrorCode+0x9c>)
 8002e8c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f043 0304 	orr.w	r3, r3, #4
 8002e94:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <FLASH_SetErrorCode+0x98>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <FLASH_SetErrorCode+0x9c>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f043 0304 	orr.w	r3, r3, #4
 8002eaa:	4a0f      	ldr	r2, [pc, #60]	; (8002ee8 <FLASH_SetErrorCode+0x9c>)
 8002eac:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <FLASH_SetErrorCode+0x98>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4a0c      	ldr	r2, [pc, #48]	; (8002ee4 <FLASH_SetErrorCode+0x98>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f240 1201 	movw	r2, #257	; 0x101
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d106      	bne.n	8002ed2 <FLASH_SetErrorCode+0x86>
 8002ec4:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <FLASH_SetErrorCode+0x98>)
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	4a06      	ldr	r2, [pc, #24]	; (8002ee4 <FLASH_SetErrorCode+0x98>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	61d3      	str	r3, [r2, #28]
}  
 8002ed0:	e002      	b.n	8002ed8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002ed2:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <FLASH_SetErrorCode+0x98>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60d3      	str	r3, [r2, #12]
}  
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40022000 	.word	0x40022000
 8002ee8:	20000428 	.word	0x20000428

08002eec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002efe:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <HAL_FLASHEx_Erase+0xd0>)
 8002f00:	7e1b      	ldrb	r3, [r3, #24]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_FLASHEx_Erase+0x1e>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e053      	b.n	8002fb2 <HAL_FLASHEx_Erase+0xc6>
 8002f0a:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <HAL_FLASHEx_Erase+0xd0>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d116      	bne.n	8002f46 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002f18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f1c:	f7ff ff50 	bl	8002dc0 <FLASH_WaitForLastOperation>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d141      	bne.n	8002faa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002f26:	2001      	movs	r0, #1
 8002f28:	f000 f84c 	bl	8002fc4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f30:	f7ff ff46 	bl	8002dc0 <FLASH_WaitForLastOperation>
 8002f34:	4603      	mov	r3, r0
 8002f36:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_FLASHEx_Erase+0xd4>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	4a20      	ldr	r2, [pc, #128]	; (8002fc0 <HAL_FLASHEx_Erase+0xd4>)
 8002f3e:	f023 0304 	bic.w	r3, r3, #4
 8002f42:	6113      	str	r3, [r2, #16]
 8002f44:	e031      	b.n	8002faa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002f46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f4a:	f7ff ff39 	bl	8002dc0 <FLASH_WaitForLastOperation>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d12a      	bne.n	8002faa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	e019      	b.n	8002f98 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002f64:	68b8      	ldr	r0, [r7, #8]
 8002f66:	f000 f849 	bl	8002ffc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f6e:	f7ff ff27 	bl	8002dc0 <FLASH_WaitForLastOperation>
 8002f72:	4603      	mov	r3, r0
 8002f74:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_FLASHEx_Erase+0xd4>)
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	4a11      	ldr	r2, [pc, #68]	; (8002fc0 <HAL_FLASHEx_Erase+0xd4>)
 8002f7c:	f023 0302 	bic.w	r3, r3, #2
 8002f80:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	601a      	str	r2, [r3, #0]
            break;
 8002f8e:	e00c      	b.n	8002faa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f96:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	02da      	lsls	r2, r3, #11
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d3dc      	bcc.n	8002f64 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002faa:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <HAL_FLASHEx_Erase+0xd0>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	761a      	strb	r2, [r3, #24]

  return status;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000428 	.word	0x20000428
 8002fc0:	40022000 	.word	0x40022000

08002fc4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <FLASH_MassErase+0x30>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <FLASH_MassErase+0x34>)
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <FLASH_MassErase+0x34>)
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <FLASH_MassErase+0x34>)
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <FLASH_MassErase+0x34>)
 8002fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	20000428 	.word	0x20000428
 8002ff8:	40022000 	.word	0x40022000

08002ffc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <FLASH_PageErase+0x38>)
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <FLASH_PageErase+0x3c>)
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <FLASH_PageErase+0x3c>)
 8003010:	f043 0302 	orr.w	r3, r3, #2
 8003014:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003016:	4a08      	ldr	r2, [pc, #32]	; (8003038 <FLASH_PageErase+0x3c>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <FLASH_PageErase+0x3c>)
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	4a05      	ldr	r2, [pc, #20]	; (8003038 <FLASH_PageErase+0x3c>)
 8003022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003026:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000428 	.word	0x20000428
 8003038:	40022000 	.word	0x40022000

0800303c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800303c:	b480      	push	{r7}
 800303e:	b08b      	sub	sp, #44	; 0x2c
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003046:	2300      	movs	r3, #0
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800304a:	2300      	movs	r3, #0
 800304c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800304e:	e179      	b.n	8003344 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003050:	2201      	movs	r2, #1
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	429a      	cmp	r2, r3
 800306a:	f040 8168 	bne.w	800333e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4a96      	ldr	r2, [pc, #600]	; (80032cc <HAL_GPIO_Init+0x290>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d05e      	beq.n	8003136 <HAL_GPIO_Init+0xfa>
 8003078:	4a94      	ldr	r2, [pc, #592]	; (80032cc <HAL_GPIO_Init+0x290>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d875      	bhi.n	800316a <HAL_GPIO_Init+0x12e>
 800307e:	4a94      	ldr	r2, [pc, #592]	; (80032d0 <HAL_GPIO_Init+0x294>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d058      	beq.n	8003136 <HAL_GPIO_Init+0xfa>
 8003084:	4a92      	ldr	r2, [pc, #584]	; (80032d0 <HAL_GPIO_Init+0x294>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d86f      	bhi.n	800316a <HAL_GPIO_Init+0x12e>
 800308a:	4a92      	ldr	r2, [pc, #584]	; (80032d4 <HAL_GPIO_Init+0x298>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d052      	beq.n	8003136 <HAL_GPIO_Init+0xfa>
 8003090:	4a90      	ldr	r2, [pc, #576]	; (80032d4 <HAL_GPIO_Init+0x298>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d869      	bhi.n	800316a <HAL_GPIO_Init+0x12e>
 8003096:	4a90      	ldr	r2, [pc, #576]	; (80032d8 <HAL_GPIO_Init+0x29c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d04c      	beq.n	8003136 <HAL_GPIO_Init+0xfa>
 800309c:	4a8e      	ldr	r2, [pc, #568]	; (80032d8 <HAL_GPIO_Init+0x29c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d863      	bhi.n	800316a <HAL_GPIO_Init+0x12e>
 80030a2:	4a8e      	ldr	r2, [pc, #568]	; (80032dc <HAL_GPIO_Init+0x2a0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d046      	beq.n	8003136 <HAL_GPIO_Init+0xfa>
 80030a8:	4a8c      	ldr	r2, [pc, #560]	; (80032dc <HAL_GPIO_Init+0x2a0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d85d      	bhi.n	800316a <HAL_GPIO_Init+0x12e>
 80030ae:	2b12      	cmp	r3, #18
 80030b0:	d82a      	bhi.n	8003108 <HAL_GPIO_Init+0xcc>
 80030b2:	2b12      	cmp	r3, #18
 80030b4:	d859      	bhi.n	800316a <HAL_GPIO_Init+0x12e>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <HAL_GPIO_Init+0x80>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	08003137 	.word	0x08003137
 80030c0:	08003111 	.word	0x08003111
 80030c4:	08003123 	.word	0x08003123
 80030c8:	08003165 	.word	0x08003165
 80030cc:	0800316b 	.word	0x0800316b
 80030d0:	0800316b 	.word	0x0800316b
 80030d4:	0800316b 	.word	0x0800316b
 80030d8:	0800316b 	.word	0x0800316b
 80030dc:	0800316b 	.word	0x0800316b
 80030e0:	0800316b 	.word	0x0800316b
 80030e4:	0800316b 	.word	0x0800316b
 80030e8:	0800316b 	.word	0x0800316b
 80030ec:	0800316b 	.word	0x0800316b
 80030f0:	0800316b 	.word	0x0800316b
 80030f4:	0800316b 	.word	0x0800316b
 80030f8:	0800316b 	.word	0x0800316b
 80030fc:	0800316b 	.word	0x0800316b
 8003100:	08003119 	.word	0x08003119
 8003104:	0800312d 	.word	0x0800312d
 8003108:	4a75      	ldr	r2, [pc, #468]	; (80032e0 <HAL_GPIO_Init+0x2a4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800310e:	e02c      	b.n	800316a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	623b      	str	r3, [r7, #32]
          break;
 8003116:	e029      	b.n	800316c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	3304      	adds	r3, #4
 800311e:	623b      	str	r3, [r7, #32]
          break;
 8003120:	e024      	b.n	800316c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	3308      	adds	r3, #8
 8003128:	623b      	str	r3, [r7, #32]
          break;
 800312a:	e01f      	b.n	800316c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	330c      	adds	r3, #12
 8003132:	623b      	str	r3, [r7, #32]
          break;
 8003134:	e01a      	b.n	800316c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800313e:	2304      	movs	r3, #4
 8003140:	623b      	str	r3, [r7, #32]
          break;
 8003142:	e013      	b.n	800316c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d105      	bne.n	8003158 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800314c:	2308      	movs	r3, #8
 800314e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	611a      	str	r2, [r3, #16]
          break;
 8003156:	e009      	b.n	800316c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003158:	2308      	movs	r3, #8
 800315a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	615a      	str	r2, [r3, #20]
          break;
 8003162:	e003      	b.n	800316c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003164:	2300      	movs	r3, #0
 8003166:	623b      	str	r3, [r7, #32]
          break;
 8003168:	e000      	b.n	800316c <HAL_GPIO_Init+0x130>
          break;
 800316a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2bff      	cmp	r3, #255	; 0xff
 8003170:	d801      	bhi.n	8003176 <HAL_GPIO_Init+0x13a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	e001      	b.n	800317a <HAL_GPIO_Init+0x13e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2bff      	cmp	r3, #255	; 0xff
 8003180:	d802      	bhi.n	8003188 <HAL_GPIO_Init+0x14c>
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	e002      	b.n	800318e <HAL_GPIO_Init+0x152>
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	3b08      	subs	r3, #8
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	210f      	movs	r1, #15
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	401a      	ands	r2, r3
 80031a0:	6a39      	ldr	r1, [r7, #32]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	431a      	orrs	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80c1 	beq.w	800333e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031bc:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <HAL_GPIO_Init+0x2a8>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	4a48      	ldr	r2, [pc, #288]	; (80032e4 <HAL_GPIO_Init+0x2a8>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6193      	str	r3, [r2, #24]
 80031c8:	4b46      	ldr	r3, [pc, #280]	; (80032e4 <HAL_GPIO_Init+0x2a8>)
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031d4:	4a44      	ldr	r2, [pc, #272]	; (80032e8 <HAL_GPIO_Init+0x2ac>)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	089b      	lsrs	r3, r3, #2
 80031da:	3302      	adds	r3, #2
 80031dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	220f      	movs	r2, #15
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4013      	ands	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3c      	ldr	r2, [pc, #240]	; (80032ec <HAL_GPIO_Init+0x2b0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d01f      	beq.n	8003240 <HAL_GPIO_Init+0x204>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a3b      	ldr	r2, [pc, #236]	; (80032f0 <HAL_GPIO_Init+0x2b4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d019      	beq.n	800323c <HAL_GPIO_Init+0x200>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a3a      	ldr	r2, [pc, #232]	; (80032f4 <HAL_GPIO_Init+0x2b8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_GPIO_Init+0x1fc>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a39      	ldr	r2, [pc, #228]	; (80032f8 <HAL_GPIO_Init+0x2bc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00d      	beq.n	8003234 <HAL_GPIO_Init+0x1f8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a38      	ldr	r2, [pc, #224]	; (80032fc <HAL_GPIO_Init+0x2c0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <HAL_GPIO_Init+0x1f4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a37      	ldr	r2, [pc, #220]	; (8003300 <HAL_GPIO_Init+0x2c4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_GPIO_Init+0x1f0>
 8003228:	2305      	movs	r3, #5
 800322a:	e00a      	b.n	8003242 <HAL_GPIO_Init+0x206>
 800322c:	2306      	movs	r3, #6
 800322e:	e008      	b.n	8003242 <HAL_GPIO_Init+0x206>
 8003230:	2304      	movs	r3, #4
 8003232:	e006      	b.n	8003242 <HAL_GPIO_Init+0x206>
 8003234:	2303      	movs	r3, #3
 8003236:	e004      	b.n	8003242 <HAL_GPIO_Init+0x206>
 8003238:	2302      	movs	r3, #2
 800323a:	e002      	b.n	8003242 <HAL_GPIO_Init+0x206>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_GPIO_Init+0x206>
 8003240:	2300      	movs	r3, #0
 8003242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003244:	f002 0203 	and.w	r2, r2, #3
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	4093      	lsls	r3, r2
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003252:	4925      	ldr	r1, [pc, #148]	; (80032e8 <HAL_GPIO_Init+0x2ac>)
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d006      	beq.n	800327a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800326c:	4b25      	ldr	r3, [pc, #148]	; (8003304 <HAL_GPIO_Init+0x2c8>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4924      	ldr	r1, [pc, #144]	; (8003304 <HAL_GPIO_Init+0x2c8>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	600b      	str	r3, [r1, #0]
 8003278:	e006      	b.n	8003288 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800327a:	4b22      	ldr	r3, [pc, #136]	; (8003304 <HAL_GPIO_Init+0x2c8>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	43db      	mvns	r3, r3
 8003282:	4920      	ldr	r1, [pc, #128]	; (8003304 <HAL_GPIO_Init+0x2c8>)
 8003284:	4013      	ands	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_GPIO_Init+0x2c8>)
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	491a      	ldr	r1, [pc, #104]	; (8003304 <HAL_GPIO_Init+0x2c8>)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032a2:	4b18      	ldr	r3, [pc, #96]	; (8003304 <HAL_GPIO_Init+0x2c8>)
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	4916      	ldr	r1, [pc, #88]	; (8003304 <HAL_GPIO_Init+0x2c8>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d025      	beq.n	8003308 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_GPIO_Init+0x2c8>)
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	4910      	ldr	r1, [pc, #64]	; (8003304 <HAL_GPIO_Init+0x2c8>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]
 80032c8:	e025      	b.n	8003316 <HAL_GPIO_Init+0x2da>
 80032ca:	bf00      	nop
 80032cc:	10320000 	.word	0x10320000
 80032d0:	10310000 	.word	0x10310000
 80032d4:	10220000 	.word	0x10220000
 80032d8:	10210000 	.word	0x10210000
 80032dc:	10120000 	.word	0x10120000
 80032e0:	10110000 	.word	0x10110000
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40010000 	.word	0x40010000
 80032ec:	40010800 	.word	0x40010800
 80032f0:	40010c00 	.word	0x40010c00
 80032f4:	40011000 	.word	0x40011000
 80032f8:	40011400 	.word	0x40011400
 80032fc:	40011800 	.word	0x40011800
 8003300:	40011c00 	.word	0x40011c00
 8003304:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <HAL_GPIO_Init+0x324>)
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	43db      	mvns	r3, r3
 8003310:	4913      	ldr	r1, [pc, #76]	; (8003360 <HAL_GPIO_Init+0x324>)
 8003312:	4013      	ands	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d006      	beq.n	8003330 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_GPIO_Init+0x324>)
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	490e      	ldr	r1, [pc, #56]	; (8003360 <HAL_GPIO_Init+0x324>)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	60cb      	str	r3, [r1, #12]
 800332e:	e006      	b.n	800333e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_GPIO_Init+0x324>)
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	43db      	mvns	r3, r3
 8003338:	4909      	ldr	r1, [pc, #36]	; (8003360 <HAL_GPIO_Init+0x324>)
 800333a:	4013      	ands	r3, r2
 800333c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	3301      	adds	r3, #1
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	fa22 f303 	lsr.w	r3, r2, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	f47f ae7e 	bne.w	8003050 <HAL_GPIO_Init+0x14>
  }
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	372c      	adds	r7, #44	; 0x2c
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	40010400 	.word	0x40010400

08003364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
 8003380:	e001      	b.n	8003386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	460b      	mov	r3, r1
 800339c:	807b      	strh	r3, [r7, #2]
 800339e:	4613      	mov	r3, r2
 80033a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033a2:	787b      	ldrb	r3, [r7, #1]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a8:	887a      	ldrh	r2, [r7, #2]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033ae:	e003      	b.n	80033b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033b0:	887b      	ldrh	r3, [r7, #2]
 80033b2:	041a      	lsls	r2, r3, #16
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	611a      	str	r2, [r3, #16]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033d4:	887a      	ldrh	r2, [r7, #2]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	041a      	lsls	r2, r3, #16
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43d9      	mvns	r1, r3
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	400b      	ands	r3, r1
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	611a      	str	r2, [r3, #16]
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e12b      	b.n	800365e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fe f91e 	bl	800165c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	; 0x24
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003458:	f001 fd24 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 800345c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4a81      	ldr	r2, [pc, #516]	; (8003668 <HAL_I2C_Init+0x274>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d807      	bhi.n	8003478 <HAL_I2C_Init+0x84>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4a80      	ldr	r2, [pc, #512]	; (800366c <HAL_I2C_Init+0x278>)
 800346c:	4293      	cmp	r3, r2
 800346e:	bf94      	ite	ls
 8003470:	2301      	movls	r3, #1
 8003472:	2300      	movhi	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e006      	b.n	8003486 <HAL_I2C_Init+0x92>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4a7d      	ldr	r2, [pc, #500]	; (8003670 <HAL_I2C_Init+0x27c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	bf94      	ite	ls
 8003480:	2301      	movls	r3, #1
 8003482:	2300      	movhi	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0e7      	b.n	800365e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4a78      	ldr	r2, [pc, #480]	; (8003674 <HAL_I2C_Init+0x280>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	0c9b      	lsrs	r3, r3, #18
 8003498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a6a      	ldr	r2, [pc, #424]	; (8003668 <HAL_I2C_Init+0x274>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d802      	bhi.n	80034c8 <HAL_I2C_Init+0xd4>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3301      	adds	r3, #1
 80034c6:	e009      	b.n	80034dc <HAL_I2C_Init+0xe8>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	4a69      	ldr	r2, [pc, #420]	; (8003678 <HAL_I2C_Init+0x284>)
 80034d4:	fba2 2303 	umull	r2, r3, r2, r3
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	3301      	adds	r3, #1
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	495c      	ldr	r1, [pc, #368]	; (8003668 <HAL_I2C_Init+0x274>)
 80034f8:	428b      	cmp	r3, r1
 80034fa:	d819      	bhi.n	8003530 <HAL_I2C_Init+0x13c>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1e59      	subs	r1, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	fbb1 f3f3 	udiv	r3, r1, r3
 800350a:	1c59      	adds	r1, r3, #1
 800350c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003510:	400b      	ands	r3, r1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_I2C_Init+0x138>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1e59      	subs	r1, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fbb1 f3f3 	udiv	r3, r1, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352a:	e051      	b.n	80035d0 <HAL_I2C_Init+0x1dc>
 800352c:	2304      	movs	r3, #4
 800352e:	e04f      	b.n	80035d0 <HAL_I2C_Init+0x1dc>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d111      	bne.n	800355c <HAL_I2C_Init+0x168>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1e58      	subs	r0, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	440b      	add	r3, r1
 8003546:	fbb0 f3f3 	udiv	r3, r0, r3
 800354a:	3301      	adds	r3, #1
 800354c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e012      	b.n	8003582 <HAL_I2C_Init+0x18e>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1e58      	subs	r0, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6859      	ldr	r1, [r3, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	0099      	lsls	r1, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003572:	3301      	adds	r3, #1
 8003574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Init+0x196>
 8003586:	2301      	movs	r3, #1
 8003588:	e022      	b.n	80035d0 <HAL_I2C_Init+0x1dc>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10e      	bne.n	80035b0 <HAL_I2C_Init+0x1bc>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1e58      	subs	r0, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6859      	ldr	r1, [r3, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	440b      	add	r3, r1
 80035a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ae:	e00f      	b.n	80035d0 <HAL_I2C_Init+0x1dc>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	0099      	lsls	r1, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c6:	3301      	adds	r3, #1
 80035c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	6809      	ldr	r1, [r1, #0]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6911      	ldr	r1, [r2, #16]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68d2      	ldr	r2, [r2, #12]
 800360a:	4311      	orrs	r1, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	430b      	orrs	r3, r1
 8003612:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	000186a0 	.word	0x000186a0
 800366c:	001e847f 	.word	0x001e847f
 8003670:	003d08ff 	.word	0x003d08ff
 8003674:	431bde83 	.word	0x431bde83
 8003678:	10624dd3 	.word	0x10624dd3

0800367c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	4608      	mov	r0, r1
 8003686:	4611      	mov	r1, r2
 8003688:	461a      	mov	r2, r3
 800368a:	4603      	mov	r3, r0
 800368c:	817b      	strh	r3, [r7, #10]
 800368e:	460b      	mov	r3, r1
 8003690:	813b      	strh	r3, [r7, #8]
 8003692:	4613      	mov	r3, r2
 8003694:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003696:	f7fe fb43 	bl	8001d20 <HAL_GetTick>
 800369a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	f040 80d9 	bne.w	800385c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	2319      	movs	r3, #25
 80036b0:	2201      	movs	r2, #1
 80036b2:	496d      	ldr	r1, [pc, #436]	; (8003868 <HAL_I2C_Mem_Write+0x1ec>)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fdef 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036c0:	2302      	movs	r3, #2
 80036c2:	e0cc      	b.n	800385e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_I2C_Mem_Write+0x56>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e0c5      	b.n	800385e <HAL_I2C_Mem_Write+0x1e2>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d007      	beq.n	80036f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003706:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2221      	movs	r2, #33	; 0x21
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2240      	movs	r2, #64	; 0x40
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003728:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a4d      	ldr	r2, [pc, #308]	; (800386c <HAL_I2C_Mem_Write+0x1f0>)
 8003738:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800373a:	88f8      	ldrh	r0, [r7, #6]
 800373c:	893a      	ldrh	r2, [r7, #8]
 800373e:	8979      	ldrh	r1, [r7, #10]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	4603      	mov	r3, r0
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 fc26 	bl	8003f9c <I2C_RequestMemoryWrite>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d052      	beq.n	80037fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e081      	b.n	800385e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fe70 	bl	8004444 <I2C_WaitOnTXEFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00d      	beq.n	8003786 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2b04      	cmp	r3, #4
 8003770:	d107      	bne.n	8003782 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003780:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e06b      	b.n	800385e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d11b      	bne.n	80037fc <HAL_I2C_Mem_Write+0x180>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d017      	beq.n	80037fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1aa      	bne.n	800375a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fe5c 	bl	80044c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00d      	beq.n	8003830 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	2b04      	cmp	r3, #4
 800381a:	d107      	bne.n	800382c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e016      	b.n	800385e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	e000      	b.n	800385e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800385c:	2302      	movs	r3, #2
  }
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	00100002 	.word	0x00100002
 800386c:	ffff0000 	.word	0xffff0000

08003870 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	; 0x30
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4603      	mov	r3, r0
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	460b      	mov	r3, r1
 8003884:	813b      	strh	r3, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800388e:	f7fe fa47 	bl	8001d20 <HAL_GetTick>
 8003892:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b20      	cmp	r3, #32
 800389e:	f040 8244 	bne.w	8003d2a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2319      	movs	r3, #25
 80038a8:	2201      	movs	r2, #1
 80038aa:	4982      	ldr	r1, [pc, #520]	; (8003ab4 <HAL_I2C_Mem_Read+0x244>)
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fcf3 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
 80038ba:	e237      	b.n	8003d2c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_I2C_Mem_Read+0x5a>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e230      	b.n	8003d2c <HAL_I2C_Mem_Read+0x4bc>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d007      	beq.n	80038f0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2222      	movs	r2, #34	; 0x22
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2240      	movs	r2, #64	; 0x40
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4a62      	ldr	r2, [pc, #392]	; (8003ab8 <HAL_I2C_Mem_Read+0x248>)
 8003930:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003932:	88f8      	ldrh	r0, [r7, #6]
 8003934:	893a      	ldrh	r2, [r7, #8]
 8003936:	8979      	ldrh	r1, [r7, #10]
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	4603      	mov	r3, r0
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fbc0 	bl	80040c8 <I2C_RequestMemoryRead>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e1ec      	b.n	8003d2c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	d113      	bne.n	8003982 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e1c0      	b.n	8003d04 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	2b01      	cmp	r3, #1
 8003988:	d11e      	bne.n	80039c8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003998:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800399a:	b672      	cpsid	i
}
 800399c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039c4:	b662      	cpsie	i
}
 80039c6:	e035      	b.n	8003a34 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d11e      	bne.n	8003a0e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039e0:	b672      	cpsid	i
}
 80039e2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a0a:	b662      	cpsie	i
}
 8003a0c:	e012      	b.n	8003a34 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a1c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a34:	e166      	b.n	8003d04 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	f200 811f 	bhi.w	8003c7e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d123      	bne.n	8003a90 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 fd7b 	bl	8004548 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e167      	b.n	8003d2c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a8e:	e139      	b.n	8003d04 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d152      	bne.n	8003b3e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	4906      	ldr	r1, [pc, #24]	; (8003abc <HAL_I2C_Mem_Read+0x24c>)
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fbf8 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e13c      	b.n	8003d2c <HAL_I2C_Mem_Read+0x4bc>
 8003ab2:	bf00      	nop
 8003ab4:	00100002 	.word	0x00100002
 8003ab8:	ffff0000 	.word	0xffff0000
 8003abc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac0:	b672      	cpsid	i
}
 8003ac2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b06:	b662      	cpsie	i
}
 8003b08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b3c:	e0e2      	b.n	8003d04 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	2200      	movs	r2, #0
 8003b46:	497b      	ldr	r1, [pc, #492]	; (8003d34 <HAL_I2C_Mem_Read+0x4c4>)
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fba5 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0e9      	b.n	8003d2c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b68:	b672      	cpsid	i
}
 8003b6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b9e:	4b66      	ldr	r3, [pc, #408]	; (8003d38 <HAL_I2C_Mem_Read+0x4c8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	08db      	lsrs	r3, r3, #3
 8003ba4:	4a65      	ldr	r2, [pc, #404]	; (8003d3c <HAL_I2C_Mem_Read+0x4cc>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	0a1a      	lsrs	r2, r3, #8
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	00da      	lsls	r2, r3, #3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d118      	bne.n	8003bf6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f043 0220 	orr.w	r2, r3, #32
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003be6:	b662      	cpsie	i
}
 8003be8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e09a      	b.n	8003d2c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d1d9      	bne.n	8003bb8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c46:	b662      	cpsie	i
}
 8003c48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c7c:	e042      	b.n	8003d04 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fc60 	bl	8004548 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e04c      	b.n	8003d2c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d118      	bne.n	8003d04 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f47f ae94 	bne.w	8003a36 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	e000      	b.n	8003d2c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3728      	adds	r7, #40	; 0x28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	00010004 	.word	0x00010004
 8003d38:	20000008 	.word	0x20000008
 8003d3c:	14f8b589 	.word	0x14f8b589

08003d40 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08a      	sub	sp, #40	; 0x28
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d50:	f7fd ffe6 	bl	8001d20 <HAL_GetTick>
 8003d54:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003d56:	2301      	movs	r3, #1
 8003d58:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	f040 8111 	bne.w	8003f8a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	2319      	movs	r3, #25
 8003d6e:	2201      	movs	r2, #1
 8003d70:	4988      	ldr	r1, [pc, #544]	; (8003f94 <HAL_I2C_IsDeviceReady+0x254>)
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fa90 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e104      	b.n	8003f8c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_I2C_IsDeviceReady+0x50>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e0fd      	b.n	8003f8c <HAL_I2C_IsDeviceReady+0x24c>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d007      	beq.n	8003db6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2224      	movs	r2, #36	; 0x24
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a70      	ldr	r2, [pc, #448]	; (8003f98 <HAL_I2C_IsDeviceReady+0x258>)
 8003dd8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fa4e 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e10:	d103      	bne.n	8003e1a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e0b6      	b.n	8003f8c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e1e:	897b      	ldrh	r3, [r7, #10]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e2c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e2e:	f7fd ff77 	bl	8001d20 <HAL_GetTick>
 8003e32:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e62:	e025      	b.n	8003eb0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e64:	f7fd ff5c 	bl	8001d20 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d302      	bcc.n	8003e7a <HAL_I2C_IsDeviceReady+0x13a>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	22a0      	movs	r2, #160	; 0xa0
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2ba0      	cmp	r3, #160	; 0xa0
 8003eba:	d005      	beq.n	8003ec8 <HAL_I2C_IsDeviceReady+0x188>
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <HAL_I2C_IsDeviceReady+0x188>
 8003ec2:	7dbb      	ldrb	r3, [r7, #22]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0cd      	beq.n	8003e64 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d129      	bne.n	8003f32 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2319      	movs	r3, #25
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4921      	ldr	r1, [pc, #132]	; (8003f94 <HAL_I2C_IsDeviceReady+0x254>)
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f9c2 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e036      	b.n	8003f8c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e02c      	b.n	8003f8c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f40:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f4a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2319      	movs	r3, #25
 8003f52:	2201      	movs	r2, #1
 8003f54:	490f      	ldr	r1, [pc, #60]	; (8003f94 <HAL_I2C_IsDeviceReady+0x254>)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f99e 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e012      	b.n	8003f8c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	f4ff af32 	bcc.w	8003dda <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	00100002 	.word	0x00100002
 8003f98:	ffff0000 	.word	0xffff0000

08003f9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	817b      	strh	r3, [r7, #10]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	813b      	strh	r3, [r7, #8]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f960 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fec:	d103      	bne.n	8003ff6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e05f      	b.n	80040ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ffa:	897b      	ldrh	r3, [r7, #10]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004008:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	6a3a      	ldr	r2, [r7, #32]
 800400e:	492d      	ldr	r1, [pc, #180]	; (80040c4 <I2C_RequestMemoryWrite+0x128>)
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f998 	bl	8004346 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e04c      	b.n	80040ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004038:	6a39      	ldr	r1, [r7, #32]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fa02 	bl	8004444 <I2C_WaitOnTXEFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00d      	beq.n	8004062 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2b04      	cmp	r3, #4
 800404c:	d107      	bne.n	800405e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e02b      	b.n	80040ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d105      	bne.n	8004074 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004068:	893b      	ldrh	r3, [r7, #8]
 800406a:	b2da      	uxtb	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	611a      	str	r2, [r3, #16]
 8004072:	e021      	b.n	80040b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004074:	893b      	ldrh	r3, [r7, #8]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	b29b      	uxth	r3, r3
 800407a:	b2da      	uxtb	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004084:	6a39      	ldr	r1, [r7, #32]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f9dc 	bl	8004444 <I2C_WaitOnTXEFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b04      	cmp	r3, #4
 8004098:	d107      	bne.n	80040aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e005      	b.n	80040ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040ae:	893b      	ldrh	r3, [r7, #8]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	00010002 	.word	0x00010002

080040c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	4608      	mov	r0, r1
 80040d2:	4611      	mov	r1, r2
 80040d4:	461a      	mov	r2, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	817b      	strh	r3, [r7, #10]
 80040da:	460b      	mov	r3, r1
 80040dc:	813b      	strh	r3, [r7, #8]
 80040de:	4613      	mov	r3, r2
 80040e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004100:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	2200      	movs	r2, #0
 800410a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f8c2 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004128:	d103      	bne.n	8004132 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e0aa      	b.n	800428c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004136:	897b      	ldrh	r3, [r7, #10]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004144:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	6a3a      	ldr	r2, [r7, #32]
 800414a:	4952      	ldr	r1, [pc, #328]	; (8004294 <I2C_RequestMemoryRead+0x1cc>)
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f8fa 	bl	8004346 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e097      	b.n	800428c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	6a39      	ldr	r1, [r7, #32]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f964 	bl	8004444 <I2C_WaitOnTXEFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b04      	cmp	r3, #4
 8004188:	d107      	bne.n	800419a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004198:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e076      	b.n	800428c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d105      	bne.n	80041b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041a4:	893b      	ldrh	r3, [r7, #8]
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	611a      	str	r2, [r3, #16]
 80041ae:	e021      	b.n	80041f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041b0:	893b      	ldrh	r3, [r7, #8]
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	6a39      	ldr	r1, [r7, #32]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f93e 	bl	8004444 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00d      	beq.n	80041ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d107      	bne.n	80041e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e050      	b.n	800428c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ea:	893b      	ldrh	r3, [r7, #8]
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f6:	6a39      	ldr	r1, [r7, #32]
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f923 	bl	8004444 <I2C_WaitOnTXEFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00d      	beq.n	8004220 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	2b04      	cmp	r3, #4
 800420a:	d107      	bne.n	800421c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e035      	b.n	800428c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	2200      	movs	r2, #0
 8004238:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f82b 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004256:	d103      	bne.n	8004260 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e013      	b.n	800428c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004264:	897b      	ldrh	r3, [r7, #10]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	b2da      	uxtb	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	6a3a      	ldr	r2, [r7, #32]
 8004278:	4906      	ldr	r1, [pc, #24]	; (8004294 <I2C_RequestMemoryRead+0x1cc>)
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f863 	bl	8004346 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	00010002 	.word	0x00010002

08004298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a8:	e025      	b.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d021      	beq.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b2:	f7fd fd35 	bl	8001d20 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d302      	bcc.n	80042c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d116      	bne.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e023      	b.n	800433e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d10d      	bne.n	800431c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	43da      	mvns	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	bf0c      	ite	eq
 8004312:	2301      	moveq	r3, #1
 8004314:	2300      	movne	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	e00c      	b.n	8004336 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	43da      	mvns	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4013      	ands	r3, r2
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	bf0c      	ite	eq
 800432e:	2301      	moveq	r3, #1
 8004330:	2300      	movne	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	429a      	cmp	r2, r3
 800433a:	d0b6      	beq.n	80042aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004354:	e051      	b.n	80043fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004364:	d123      	bne.n	80043ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004374:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800437e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f043 0204 	orr.w	r2, r3, #4
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e046      	b.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d021      	beq.n	80043fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b6:	f7fd fcb3 	bl	8001d20 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d116      	bne.n	80043fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e020      	b.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d10c      	bne.n	800441e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	43da      	mvns	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4013      	ands	r3, r2
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	bf14      	ite	ne
 8004416:	2301      	movne	r3, #1
 8004418:	2300      	moveq	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	e00b      	b.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	43da      	mvns	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4013      	ands	r3, r2
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d18d      	bne.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004450:	e02d      	b.n	80044ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f8ce 	bl	80045f4 <I2C_IsAcknowledgeFailed>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e02d      	b.n	80044be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d021      	beq.n	80044ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7fd fc59 	bl	8001d20 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d116      	bne.n	80044ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f043 0220 	orr.w	r2, r3, #32
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e007      	b.n	80044be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b8:	2b80      	cmp	r3, #128	; 0x80
 80044ba:	d1ca      	bne.n	8004452 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044d2:	e02d      	b.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f88d 	bl	80045f4 <I2C_IsAcknowledgeFailed>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e02d      	b.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ea:	d021      	beq.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ec:	f7fd fc18 	bl	8001d20 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d302      	bcc.n	8004502 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d116      	bne.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e007      	b.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b04      	cmp	r3, #4
 800453c:	d1ca      	bne.n	80044d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004554:	e042      	b.n	80045dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b10      	cmp	r3, #16
 8004562:	d119      	bne.n	8004598 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0210 	mvn.w	r2, #16
 800456c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e029      	b.n	80045ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004598:	f7fd fbc2 	bl	8001d20 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d302      	bcc.n	80045ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d116      	bne.n	80045dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f043 0220 	orr.w	r2, r3, #32
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e007      	b.n	80045ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d1b5      	bne.n	8004556 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460a:	d11b      	bne.n	8004644 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004614:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	f043 0204 	orr.w	r2, r3, #4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <HAL_IWDG_Init>:
  * @param  hiwdg: pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e03e      	b.n	80046e0 <HAL_IWDG_Init+0x90>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload)); 
  
  /* Check pending flag, if previous update not done, return error */
  if((__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b01      	cmp	r3, #1
 800466e:	d108      	bne.n	8004682 <HAL_IWDG_Init+0x32>
     &&(__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b02      	cmp	r3, #2
 800467c:	d101      	bne.n	8004682 <HAL_IWDG_Init+0x32>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e02e      	b.n	80046e0 <HAL_IWDG_Init+0x90>
  }
    
  if(hiwdg->State == HAL_IWDG_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	7b5b      	ldrb	r3, [r3, #13]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <HAL_IWDG_Init+0x48>
  {  
    /* Allocate lock resource and initialize it */
    hiwdg->Lock = HAL_UNLOCKED;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	731a      	strb	r2, [r3, #12]
    
    /* Init the low level hardware */
    HAL_IWDG_MspInit(hiwdg);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f828 	bl	80046e8 <HAL_IWDG_MspInit>
  }
  
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;  
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	735a      	strb	r2, [r3, #13]
  
  /* Enable write access to IWDG_PR and IWDG_RLR registers */  
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f245 5255 	movw	r2, #21845	; 0x5555
 80046a6:	601a      	str	r2, [r3, #0]
  
  /* Write to IWDG registers the IWDG_Prescaler & IWDG_Reload values to work with */
  MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f023 0107 	bic.w	r1, r3, #7
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hiwdg->Instance->RLR, IWDG_RLR_RL, hiwdg->Init.Reload);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80046c8:	f023 030f 	bic.w	r3, r3, #15
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6891      	ldr	r1, [r2, #8]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6093      	str	r3, [r2, #8]
 
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	735a      	strb	r2, [r3, #13]
  
  /* Return function status */
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_IWDG_MspInit>:
  * @param  hiwdg: pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hiwdg);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr
	...

080046fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e272      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8087 	beq.w	800482a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800471c:	4b92      	ldr	r3, [pc, #584]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b04      	cmp	r3, #4
 8004726:	d00c      	beq.n	8004742 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004728:	4b8f      	ldr	r3, [pc, #572]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 030c 	and.w	r3, r3, #12
 8004730:	2b08      	cmp	r3, #8
 8004732:	d112      	bne.n	800475a <HAL_RCC_OscConfig+0x5e>
 8004734:	4b8c      	ldr	r3, [pc, #560]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d10b      	bne.n	800475a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004742:	4b89      	ldr	r3, [pc, #548]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d06c      	beq.n	8004828 <HAL_RCC_OscConfig+0x12c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d168      	bne.n	8004828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e24c      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004762:	d106      	bne.n	8004772 <HAL_RCC_OscConfig+0x76>
 8004764:	4b80      	ldr	r3, [pc, #512]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a7f      	ldr	r2, [pc, #508]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 800476a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	e02e      	b.n	80047d0 <HAL_RCC_OscConfig+0xd4>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10c      	bne.n	8004794 <HAL_RCC_OscConfig+0x98>
 800477a:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7a      	ldr	r2, [pc, #488]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 8004780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	4b78      	ldr	r3, [pc, #480]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a77      	ldr	r2, [pc, #476]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 800478c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e01d      	b.n	80047d0 <HAL_RCC_OscConfig+0xd4>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800479c:	d10c      	bne.n	80047b8 <HAL_RCC_OscConfig+0xbc>
 800479e:	4b72      	ldr	r3, [pc, #456]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a71      	ldr	r2, [pc, #452]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	4b6f      	ldr	r3, [pc, #444]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a6e      	ldr	r2, [pc, #440]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80047b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	e00b      	b.n	80047d0 <HAL_RCC_OscConfig+0xd4>
 80047b8:	4b6b      	ldr	r3, [pc, #428]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a6a      	ldr	r2, [pc, #424]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80047be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	4b68      	ldr	r3, [pc, #416]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a67      	ldr	r2, [pc, #412]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80047ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d013      	beq.n	8004800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fd faa2 	bl	8001d20 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fd fa9e 	bl	8001d20 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	; 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e200      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f2:	4b5d      	ldr	r3, [pc, #372]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0xe4>
 80047fe:	e014      	b.n	800482a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004800:	f7fd fa8e 	bl	8001d20 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004808:	f7fd fa8a 	bl	8001d20 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e1ec      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481a:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f0      	bne.n	8004808 <HAL_RCC_OscConfig+0x10c>
 8004826:	e000      	b.n	800482a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d063      	beq.n	80048fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004836:	4b4c      	ldr	r3, [pc, #304]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004842:	4b49      	ldr	r3, [pc, #292]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b08      	cmp	r3, #8
 800484c:	d11c      	bne.n	8004888 <HAL_RCC_OscConfig+0x18c>
 800484e:	4b46      	ldr	r3, [pc, #280]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d116      	bne.n	8004888 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485a:	4b43      	ldr	r3, [pc, #268]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_RCC_OscConfig+0x176>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d001      	beq.n	8004872 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e1c0      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004872:	4b3d      	ldr	r3, [pc, #244]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4939      	ldr	r1, [pc, #228]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 8004882:	4313      	orrs	r3, r2
 8004884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004886:	e03a      	b.n	80048fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d020      	beq.n	80048d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004890:	4b36      	ldr	r3, [pc, #216]	; (800496c <HAL_RCC_OscConfig+0x270>)
 8004892:	2201      	movs	r2, #1
 8004894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004896:	f7fd fa43 	bl	8001d20 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800489e:	f7fd fa3f 	bl	8001d20 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e1a1      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b0:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048bc:	4b2a      	ldr	r3, [pc, #168]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	4927      	ldr	r1, [pc, #156]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	600b      	str	r3, [r1, #0]
 80048d0:	e015      	b.n	80048fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048d2:	4b26      	ldr	r3, [pc, #152]	; (800496c <HAL_RCC_OscConfig+0x270>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fd fa22 	bl	8001d20 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e0:	f7fd fa1e 	bl	8001d20 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e180      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d03a      	beq.n	8004980 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d019      	beq.n	8004946 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004912:	4b17      	ldr	r3, [pc, #92]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004918:	f7fd fa02 	bl	8001d20 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004920:	f7fd f9fe 	bl	8001d20 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e160      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004932:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <HAL_RCC_OscConfig+0x26c>)
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800493e:	2001      	movs	r0, #1
 8004940:	f000 fad8 	bl	8004ef4 <RCC_Delay>
 8004944:	e01c      	b.n	8004980 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004946:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <HAL_RCC_OscConfig+0x274>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494c:	f7fd f9e8 	bl	8001d20 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004952:	e00f      	b.n	8004974 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004954:	f7fd f9e4 	bl	8001d20 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d908      	bls.n	8004974 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e146      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
 800496c:	42420000 	.word	0x42420000
 8004970:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004974:	4b92      	ldr	r3, [pc, #584]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e9      	bne.n	8004954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80a6 	beq.w	8004ada <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498e:	2300      	movs	r3, #0
 8004990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004992:	4b8b      	ldr	r3, [pc, #556]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10d      	bne.n	80049ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499e:	4b88      	ldr	r3, [pc, #544]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	4a87      	ldr	r2, [pc, #540]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 80049a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a8:	61d3      	str	r3, [r2, #28]
 80049aa:	4b85      	ldr	r3, [pc, #532]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b2:	60bb      	str	r3, [r7, #8]
 80049b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049b6:	2301      	movs	r3, #1
 80049b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ba:	4b82      	ldr	r3, [pc, #520]	; (8004bc4 <HAL_RCC_OscConfig+0x4c8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d118      	bne.n	80049f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049c6:	4b7f      	ldr	r3, [pc, #508]	; (8004bc4 <HAL_RCC_OscConfig+0x4c8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a7e      	ldr	r2, [pc, #504]	; (8004bc4 <HAL_RCC_OscConfig+0x4c8>)
 80049cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d2:	f7fd f9a5 	bl	8001d20 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049da:	f7fd f9a1 	bl	8001d20 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b64      	cmp	r3, #100	; 0x64
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e103      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ec:	4b75      	ldr	r3, [pc, #468]	; (8004bc4 <HAL_RCC_OscConfig+0x4c8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d106      	bne.n	8004a0e <HAL_RCC_OscConfig+0x312>
 8004a00:	4b6f      	ldr	r3, [pc, #444]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	4a6e      	ldr	r2, [pc, #440]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6213      	str	r3, [r2, #32]
 8004a0c:	e02d      	b.n	8004a6a <HAL_RCC_OscConfig+0x36e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10c      	bne.n	8004a30 <HAL_RCC_OscConfig+0x334>
 8004a16:	4b6a      	ldr	r3, [pc, #424]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	4a69      	ldr	r2, [pc, #420]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	6213      	str	r3, [r2, #32]
 8004a22:	4b67      	ldr	r3, [pc, #412]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	4a66      	ldr	r2, [pc, #408]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a28:	f023 0304 	bic.w	r3, r3, #4
 8004a2c:	6213      	str	r3, [r2, #32]
 8004a2e:	e01c      	b.n	8004a6a <HAL_RCC_OscConfig+0x36e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b05      	cmp	r3, #5
 8004a36:	d10c      	bne.n	8004a52 <HAL_RCC_OscConfig+0x356>
 8004a38:	4b61      	ldr	r3, [pc, #388]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	4a60      	ldr	r2, [pc, #384]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a3e:	f043 0304 	orr.w	r3, r3, #4
 8004a42:	6213      	str	r3, [r2, #32]
 8004a44:	4b5e      	ldr	r3, [pc, #376]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	4a5d      	ldr	r2, [pc, #372]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	6213      	str	r3, [r2, #32]
 8004a50:	e00b      	b.n	8004a6a <HAL_RCC_OscConfig+0x36e>
 8004a52:	4b5b      	ldr	r3, [pc, #364]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	4a5a      	ldr	r2, [pc, #360]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	6213      	str	r3, [r2, #32]
 8004a5e:	4b58      	ldr	r3, [pc, #352]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	4a57      	ldr	r2, [pc, #348]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a64:	f023 0304 	bic.w	r3, r3, #4
 8004a68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d015      	beq.n	8004a9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a72:	f7fd f955 	bl	8001d20 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a78:	e00a      	b.n	8004a90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7a:	f7fd f951 	bl	8001d20 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e0b1      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a90:	4b4b      	ldr	r3, [pc, #300]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0ee      	beq.n	8004a7a <HAL_RCC_OscConfig+0x37e>
 8004a9c:	e014      	b.n	8004ac8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9e:	f7fd f93f 	bl	8001d20 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa4:	e00a      	b.n	8004abc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa6:	f7fd f93b 	bl	8001d20 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e09b      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004abc:	4b40      	ldr	r3, [pc, #256]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1ee      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d105      	bne.n	8004ada <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ace:	4b3c      	ldr	r3, [pc, #240]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	4a3b      	ldr	r2, [pc, #236]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8087 	beq.w	8004bf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ae4:	4b36      	ldr	r3, [pc, #216]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 030c 	and.w	r3, r3, #12
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d061      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d146      	bne.n	8004b86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af8:	4b33      	ldr	r3, [pc, #204]	; (8004bc8 <HAL_RCC_OscConfig+0x4cc>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afe:	f7fd f90f 	bl	8001d20 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fd f90b 	bl	8001d20 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e06d      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b18:	4b29      	ldr	r3, [pc, #164]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f0      	bne.n	8004b06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2c:	d108      	bne.n	8004b40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b2e:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	4921      	ldr	r1, [pc, #132]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b40:	4b1f      	ldr	r3, [pc, #124]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a19      	ldr	r1, [r3, #32]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	430b      	orrs	r3, r1
 8004b52:	491b      	ldr	r1, [pc, #108]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <HAL_RCC_OscConfig+0x4cc>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fd f8df 	bl	8001d20 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b66:	f7fd f8db 	bl	8001d20 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e03d      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b78:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x46a>
 8004b84:	e035      	b.n	8004bf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <HAL_RCC_OscConfig+0x4cc>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fd f8c8 	bl	8001d20 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fd f8c4 	bl	8001d20 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e026      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ba6:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x498>
 8004bb2:	e01e      	b.n	8004bf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d107      	bne.n	8004bcc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e019      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	40007000 	.word	0x40007000
 8004bc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_RCC_OscConfig+0x500>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d106      	bne.n	8004bee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d001      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40021000 	.word	0x40021000

08004c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0d0      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c14:	4b6a      	ldr	r3, [pc, #424]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d910      	bls.n	8004c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c22:	4b67      	ldr	r3, [pc, #412]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 0207 	bic.w	r2, r3, #7
 8004c2a:	4965      	ldr	r1, [pc, #404]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b63      	ldr	r3, [pc, #396]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0b8      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d020      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c5c:	4b59      	ldr	r3, [pc, #356]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4a58      	ldr	r2, [pc, #352]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c74:	4b53      	ldr	r3, [pc, #332]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4a52      	ldr	r2, [pc, #328]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c80:	4b50      	ldr	r3, [pc, #320]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	494d      	ldr	r1, [pc, #308]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d040      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d115      	bne.n	8004cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e07f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d107      	bne.n	8004cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbe:	4b41      	ldr	r3, [pc, #260]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e073      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cce:	4b3d      	ldr	r3, [pc, #244]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e06b      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cde:	4b39      	ldr	r3, [pc, #228]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f023 0203 	bic.w	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4936      	ldr	r1, [pc, #216]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf0:	f7fd f816 	bl	8001d20 <HAL_GetTick>
 8004cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf6:	e00a      	b.n	8004d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf8:	f7fd f812 	bl	8001d20 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e053      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0e:	4b2d      	ldr	r3, [pc, #180]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 020c 	and.w	r2, r3, #12
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d1eb      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d20:	4b27      	ldr	r3, [pc, #156]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d210      	bcs.n	8004d50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 0207 	bic.w	r2, r3, #7
 8004d36:	4922      	ldr	r1, [pc, #136]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3e:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e032      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d5c:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4916      	ldr	r1, [pc, #88]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	490e      	ldr	r1, [pc, #56]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d8e:	f000 f821 	bl	8004dd4 <HAL_RCC_GetSysClockFreq>
 8004d92:	4602      	mov	r2, r0
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	490a      	ldr	r1, [pc, #40]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004da0:	5ccb      	ldrb	r3, [r1, r3]
 8004da2:	fa22 f303 	lsr.w	r3, r2, r3
 8004da6:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <HAL_RCC_ClockConfig+0x1cc>)
 8004da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004daa:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fc ff74 	bl	8001c9c <HAL_InitTick>

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40022000 	.word	0x40022000
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	0800c988 	.word	0x0800c988
 8004dcc:	20000008 	.word	0x20000008
 8004dd0:	2000000c 	.word	0x2000000c

08004dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd4:	b490      	push	{r4, r7}
 8004dd6:	b08a      	sub	sp, #40	; 0x28
 8004dd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004dda:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <HAL_RCC_GetSysClockFreq+0xac>)
 8004ddc:	1d3c      	adds	r4, r7, #4
 8004dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004de4:	f240 2301 	movw	r3, #513	; 0x201
 8004de8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
 8004dee:	2300      	movs	r3, #0
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	2300      	movs	r3, #0
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004dfe:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d002      	beq.n	8004e14 <HAL_RCC_GetSysClockFreq+0x40>
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d003      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0x46>
 8004e12:	e02b      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e14:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e16:	623b      	str	r3, [r7, #32]
      break;
 8004e18:	e02b      	b.n	8004e72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	0c9b      	lsrs	r3, r3, #18
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	3328      	adds	r3, #40	; 0x28
 8004e24:	443b      	add	r3, r7
 8004e26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e2a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d012      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e36:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	0c5b      	lsrs	r3, r3, #17
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	3328      	adds	r3, #40	; 0x28
 8004e42:	443b      	add	r3, r7
 8004e44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	4a0e      	ldr	r2, [pc, #56]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e4e:	fb03 f202 	mul.w	r2, r3, r2
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5a:	e004      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	4a0b      	ldr	r2, [pc, #44]	; (8004e8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	623b      	str	r3, [r7, #32]
      break;
 8004e6a:	e002      	b.n	8004e72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e6e:	623b      	str	r3, [r7, #32]
      break;
 8004e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e72:	6a3b      	ldr	r3, [r7, #32]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3728      	adds	r7, #40	; 0x28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc90      	pop	{r4, r7}
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	0800baa4 	.word	0x0800baa4
 8004e84:	40021000 	.word	0x40021000
 8004e88:	007a1200 	.word	0x007a1200
 8004e8c:	003d0900 	.word	0x003d0900

08004e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e94:	4b02      	ldr	r3, [pc, #8]	; (8004ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e96:	681b      	ldr	r3, [r3, #0]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr
 8004ea0:	20000008 	.word	0x20000008

08004ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ea8:	f7ff fff2 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	4903      	ldr	r1, [pc, #12]	; (8004ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eba:	5ccb      	ldrb	r3, [r1, r3]
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	0800c998 	.word	0x0800c998

08004ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ed0:	f7ff ffde 	bl	8004e90 <HAL_RCC_GetHCLKFreq>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	0adb      	lsrs	r3, r3, #11
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	4903      	ldr	r1, [pc, #12]	; (8004ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ee2:	5ccb      	ldrb	r3, [r1, r3]
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	0800c998 	.word	0x0800c998

08004ef4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <RCC_Delay+0x34>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <RCC_Delay+0x38>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	0a5b      	lsrs	r3, r3, #9
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f10:	bf00      	nop
  }
  while (Delay --);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	1e5a      	subs	r2, r3, #1
 8004f16:	60fa      	str	r2, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f9      	bne.n	8004f10 <RCC_Delay+0x1c>
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr
 8004f28:	20000008 	.word	0x20000008
 8004f2c:	10624dd3 	.word	0x10624dd3

08004f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d07d      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f50:	4b4f      	ldr	r3, [pc, #316]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10d      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5c:	4b4c      	ldr	r3, [pc, #304]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	4a4b      	ldr	r2, [pc, #300]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f66:	61d3      	str	r3, [r2, #28]
 8004f68:	4b49      	ldr	r3, [pc, #292]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f74:	2301      	movs	r3, #1
 8004f76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f78:	4b46      	ldr	r3, [pc, #280]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d118      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f84:	4b43      	ldr	r3, [pc, #268]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a42      	ldr	r2, [pc, #264]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f90:	f7fc fec6 	bl	8001d20 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f96:	e008      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f98:	f7fc fec2 	bl	8001d20 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b64      	cmp	r3, #100	; 0x64
 8004fa4:	d901      	bls.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e06d      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004faa:	4b3a      	ldr	r3, [pc, #232]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fb6:	4b36      	ldr	r3, [pc, #216]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d02e      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d027      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fd4:	4b2e      	ldr	r3, [pc, #184]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fde:	4b2e      	ldr	r3, [pc, #184]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe4:	4b2c      	ldr	r3, [pc, #176]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fea:	4a29      	ldr	r2, [pc, #164]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d014      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffa:	f7fc fe91 	bl	8001d20 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005000:	e00a      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005002:	f7fc fe8d 	bl	8001d20 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e036      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005018:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ee      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005024:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	4917      	ldr	r1, [pc, #92]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005032:	4313      	orrs	r3, r2
 8005034:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005036:	7dfb      	ldrb	r3, [r7, #23]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d105      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800503c:	4b14      	ldr	r3, [pc, #80]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	4a13      	ldr	r2, [pc, #76]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005046:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005054:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	490b      	ldr	r1, [pc, #44]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005062:	4313      	orrs	r3, r2
 8005064:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b00      	cmp	r3, #0
 8005070:	d008      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005072:	4b07      	ldr	r3, [pc, #28]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	4904      	ldr	r1, [pc, #16]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005080:	4313      	orrs	r3, r2
 8005082:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000
 8005094:	40007000 	.word	0x40007000
 8005098:	42420440 	.word	0x42420440

0800509c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b08d      	sub	sp, #52	; 0x34
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80050a4:	4b6a      	ldr	r3, [pc, #424]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80050a6:	f107 040c 	add.w	r4, r7, #12
 80050aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80050b0:	f240 2301 	movw	r3, #513	; 0x201
 80050b4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	2300      	movs	r3, #0
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050be:	2300      	movs	r3, #0
 80050c0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	2300      	movs	r3, #0
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	f200 80b4 	bhi.w	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 80050d4:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	080051bb 	.word	0x080051bb
 80050e0:	08005221 	.word	0x08005221
 80050e4:	0800523d 	.word	0x0800523d
 80050e8:	080051ab 	.word	0x080051ab
 80050ec:	0800523d 	.word	0x0800523d
 80050f0:	0800523d 	.word	0x0800523d
 80050f4:	0800523d 	.word	0x0800523d
 80050f8:	080051b3 	.word	0x080051b3
 80050fc:	0800523d 	.word	0x0800523d
 8005100:	0800523d 	.word	0x0800523d
 8005104:	0800523d 	.word	0x0800523d
 8005108:	0800523d 	.word	0x0800523d
 800510c:	0800523d 	.word	0x0800523d
 8005110:	0800523d 	.word	0x0800523d
 8005114:	0800523d 	.word	0x0800523d
 8005118:	0800511d 	.word	0x0800511d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800511c:	4b4d      	ldr	r3, [pc, #308]	; (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005122:	4b4c      	ldr	r3, [pc, #304]	; (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 8088 	beq.w	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	0c9b      	lsrs	r3, r3, #18
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	3330      	adds	r3, #48	; 0x30
 800513a:	443b      	add	r3, r7
 800513c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005140:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d017      	beq.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800514c:	4b41      	ldr	r3, [pc, #260]	; (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	0c5b      	lsrs	r3, r3, #17
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	3330      	adds	r3, #48	; 0x30
 8005158:	443b      	add	r3, r7
 800515a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00d      	beq.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800516a:	4a3b      	ldr	r2, [pc, #236]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	fb02 f303 	mul.w	r3, r2, r3
 8005178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800517a:	e004      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	4a37      	ldr	r2, [pc, #220]	; (800525c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8005180:	fb02 f303 	mul.w	r3, r2, r3
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005186:	4b33      	ldr	r3, [pc, #204]	; (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005192:	d102      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005198:	e052      	b.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4a30      	ldr	r2, [pc, #192]	; (8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
 80051a4:	085b      	lsrs	r3, r3, #1
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80051a8:	e04a      	b.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80051aa:	f7ff fe13 	bl	8004dd4 <HAL_RCC_GetSysClockFreq>
 80051ae:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80051b0:	e049      	b.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80051b2:	f7ff fe0f 	bl	8004dd4 <HAL_RCC_GetSysClockFreq>
 80051b6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80051b8:	e045      	b.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80051ba:	4b26      	ldr	r3, [pc, #152]	; (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ca:	d108      	bne.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 80051d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28
 80051dc:	e01f      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e8:	d109      	bne.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80051ea:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 80051f6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80051fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80051fc:	e00f      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005208:	d11c      	bne.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8005216:	f24f 4324 	movw	r3, #62500	; 0xf424
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800521c:	e012      	b.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800521e:	e011      	b.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005220:	f7ff fe54 	bl	8004ecc <HAL_RCC_GetPCLK2Freq>
 8005224:	4602      	mov	r2, r0
 8005226:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	0b9b      	lsrs	r3, r3, #14
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	3301      	adds	r3, #1
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800523a:	e004      	b.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 800523c:	bf00      	nop
 800523e:	e002      	b.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8005240:	bf00      	nop
 8005242:	e000      	b.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8005244:	bf00      	nop
    }
  }
  return (frequency);
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005248:	4618      	mov	r0, r3
 800524a:	3734      	adds	r7, #52	; 0x34
 800524c:	46bd      	mov	sp, r7
 800524e:	bd90      	pop	{r4, r7, pc}
 8005250:	0800bab4 	.word	0x0800bab4
 8005254:	40021000 	.word	0x40021000
 8005258:	007a1200 	.word	0x007a1200
 800525c:	003d0900 	.word	0x003d0900
 8005260:	aaaaaaab 	.word	0xaaaaaaab

08005264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e041      	b.n	80052fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fc fa26 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f000 fa88 	bl	80057b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d001      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e044      	b.n	80053a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1d      	ldr	r2, [pc, #116]	; (80053b0 <HAL_TIM_Base_Start_IT+0xac>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d018      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x6c>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1c      	ldr	r2, [pc, #112]	; (80053b4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x6c>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005350:	d00e      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x6c>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d009      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x6c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a16      	ldr	r2, [pc, #88]	; (80053bc <HAL_TIM_Base_Start_IT+0xb8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0x6c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <HAL_TIM_Base_Start_IT+0xbc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d111      	bne.n	8005394 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b06      	cmp	r3, #6
 8005380:	d010      	beq.n	80053a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005392:	e007      	b.n	80053a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40013400 	.word	0x40013400
 80053b8:	40000400 	.word	0x40000400
 80053bc:	40000800 	.word	0x40000800
 80053c0:	40000c00 	.word	0x40000c00

080053c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d122      	bne.n	8005420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d11b      	bne.n	8005420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0202 	mvn.w	r2, #2
 80053f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f9ba 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 800540c:	e005      	b.n	800541a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f9ad 	bl	800576e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f9bc 	bl	8005792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b04      	cmp	r3, #4
 800542c:	d122      	bne.n	8005474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b04      	cmp	r3, #4
 800543a:	d11b      	bne.n	8005474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0204 	mvn.w	r2, #4
 8005444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f990 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 8005460:	e005      	b.n	800546e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f983 	bl	800576e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f992 	bl	8005792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b08      	cmp	r3, #8
 8005480:	d122      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b08      	cmp	r3, #8
 800548e:	d11b      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0208 	mvn.w	r2, #8
 8005498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2204      	movs	r2, #4
 800549e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f966 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 80054b4:	e005      	b.n	80054c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f959 	bl	800576e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f968 	bl	8005792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0310 	and.w	r3, r3, #16
 80054d2:	2b10      	cmp	r3, #16
 80054d4:	d122      	bne.n	800551c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	d11b      	bne.n	800551c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0210 	mvn.w	r2, #16
 80054ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2208      	movs	r2, #8
 80054f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f93c 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f92f 	bl	800576e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f93e 	bl	8005792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b01      	cmp	r3, #1
 8005528:	d10e      	bne.n	8005548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	d107      	bne.n	8005548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0201 	mvn.w	r2, #1
 8005540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f90a 	bl	800575c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	2b80      	cmp	r3, #128	; 0x80
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005560:	2b80      	cmp	r3, #128	; 0x80
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 faa7 	bl	8005ac2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d10e      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f902 	bl	80057a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d10e      	bne.n	80055cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d107      	bne.n	80055cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0220 	mvn.w	r2, #32
 80055c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fa72 	bl	8005ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055cc:	bf00      	nop
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_ConfigClockSource+0x18>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e0b3      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x180>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800560a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005612:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005624:	d03e      	beq.n	80056a4 <HAL_TIM_ConfigClockSource+0xd0>
 8005626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800562a:	f200 8087 	bhi.w	800573c <HAL_TIM_ConfigClockSource+0x168>
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005632:	f000 8085 	beq.w	8005740 <HAL_TIM_ConfigClockSource+0x16c>
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563a:	d87f      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x168>
 800563c:	2b70      	cmp	r3, #112	; 0x70
 800563e:	d01a      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0xa2>
 8005640:	2b70      	cmp	r3, #112	; 0x70
 8005642:	d87b      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x168>
 8005644:	2b60      	cmp	r3, #96	; 0x60
 8005646:	d050      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0x116>
 8005648:	2b60      	cmp	r3, #96	; 0x60
 800564a:	d877      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x168>
 800564c:	2b50      	cmp	r3, #80	; 0x50
 800564e:	d03c      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0xf6>
 8005650:	2b50      	cmp	r3, #80	; 0x50
 8005652:	d873      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x168>
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d058      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x136>
 8005658:	2b40      	cmp	r3, #64	; 0x40
 800565a:	d86f      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x168>
 800565c:	2b30      	cmp	r3, #48	; 0x30
 800565e:	d064      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x156>
 8005660:	2b30      	cmp	r3, #48	; 0x30
 8005662:	d86b      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x168>
 8005664:	2b20      	cmp	r3, #32
 8005666:	d060      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x156>
 8005668:	2b20      	cmp	r3, #32
 800566a:	d867      	bhi.n	800573c <HAL_TIM_ConfigClockSource+0x168>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d05c      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x156>
 8005670:	2b10      	cmp	r3, #16
 8005672:	d05a      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005674:	e062      	b.n	800573c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6899      	ldr	r1, [r3, #8]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f000 f988 	bl	800599a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005698:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	609a      	str	r2, [r3, #8]
      break;
 80056a2:	e04e      	b.n	8005742 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	6899      	ldr	r1, [r3, #8]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f000 f971 	bl	800599a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056c6:	609a      	str	r2, [r3, #8]
      break;
 80056c8:	e03b      	b.n	8005742 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6859      	ldr	r1, [r3, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f000 f8e8 	bl	80058ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2150      	movs	r1, #80	; 0x50
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 f93f 	bl	8005966 <TIM_ITRx_SetConfig>
      break;
 80056e8:	e02b      	b.n	8005742 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6859      	ldr	r1, [r3, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	461a      	mov	r2, r3
 80056f8:	f000 f906 	bl	8005908 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2160      	movs	r1, #96	; 0x60
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f92f 	bl	8005966 <TIM_ITRx_SetConfig>
      break;
 8005708:	e01b      	b.n	8005742 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6859      	ldr	r1, [r3, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	461a      	mov	r2, r3
 8005718:	f000 f8c8 	bl	80058ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2140      	movs	r1, #64	; 0x40
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f91f 	bl	8005966 <TIM_ITRx_SetConfig>
      break;
 8005728:	e00b      	b.n	8005742 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f000 f916 	bl	8005966 <TIM_ITRx_SetConfig>
        break;
 800573a:	e002      	b.n	8005742 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800573c:	bf00      	nop
 800573e:	e000      	b.n	8005742 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005740:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr

0800576e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr

08005792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr

080057a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr
	...

080057b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a33      	ldr	r2, [pc, #204]	; (8005898 <TIM_Base_SetConfig+0xe0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d013      	beq.n	80057f8 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a32      	ldr	r2, [pc, #200]	; (800589c <TIM_Base_SetConfig+0xe4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00f      	beq.n	80057f8 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057de:	d00b      	beq.n	80057f8 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a2f      	ldr	r2, [pc, #188]	; (80058a0 <TIM_Base_SetConfig+0xe8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a2e      	ldr	r2, [pc, #184]	; (80058a4 <TIM_Base_SetConfig+0xec>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a2d      	ldr	r2, [pc, #180]	; (80058a8 <TIM_Base_SetConfig+0xf0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d108      	bne.n	800580a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a22      	ldr	r2, [pc, #136]	; (8005898 <TIM_Base_SetConfig+0xe0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <TIM_Base_SetConfig+0x82>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a21      	ldr	r2, [pc, #132]	; (800589c <TIM_Base_SetConfig+0xe4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00f      	beq.n	800583a <TIM_Base_SetConfig+0x82>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005820:	d00b      	beq.n	800583a <TIM_Base_SetConfig+0x82>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <TIM_Base_SetConfig+0xe8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d007      	beq.n	800583a <TIM_Base_SetConfig+0x82>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <TIM_Base_SetConfig+0xec>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d003      	beq.n	800583a <TIM_Base_SetConfig+0x82>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a1c      	ldr	r2, [pc, #112]	; (80058a8 <TIM_Base_SetConfig+0xf0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d108      	bne.n	800584c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a09      	ldr	r2, [pc, #36]	; (8005898 <TIM_Base_SetConfig+0xe0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_Base_SetConfig+0xc8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a08      	ldr	r2, [pc, #32]	; (800589c <TIM_Base_SetConfig+0xe4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d103      	bne.n	8005888 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	615a      	str	r2, [r3, #20]
}
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40013400 	.word	0x40013400
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40000c00 	.word	0x40000c00

080058ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f023 0201 	bic.w	r2, r3, #1
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f023 030a 	bic.w	r3, r3, #10
 80058e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	f023 0210 	bic.w	r2, r3, #16
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005932:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	031b      	lsls	r3, r3, #12
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005944:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	621a      	str	r2, [r3, #32]
}
 800595c:	bf00      	nop
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	bc80      	pop	{r7}
 8005964:	4770      	bx	lr

08005966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005966:	b480      	push	{r7}
 8005968:	b085      	sub	sp, #20
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	f043 0307 	orr.w	r3, r3, #7
 8005988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	609a      	str	r2, [r3, #8]
}
 8005990:	bf00      	nop
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800599a:	b480      	push	{r7}
 800599c:	b087      	sub	sp, #28
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	021a      	lsls	r2, r3, #8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	431a      	orrs	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	609a      	str	r2, [r3, #8]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e050      	b.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1b      	ldr	r2, [pc, #108]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d018      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a19      	ldr	r2, [pc, #100]	; (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d013      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a46:	d00e      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a15      	ldr	r2, [pc, #84]	; (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d009      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d004      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a12      	ldr	r2, [pc, #72]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d10c      	bne.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40013400 	.word	0x40013400
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00

08005ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e03f      	b.n	8005b66 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fb fe12 	bl	8001724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2224      	movs	r2, #36	; 0x24
 8005b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fcfd 	bl	8006518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b08a      	sub	sp, #40	; 0x28
 8005b72:	af02      	add	r7, sp, #8
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b20      	cmp	r3, #32
 8005b8c:	d17c      	bne.n	8005c88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <HAL_UART_Transmit+0x2c>
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e075      	b.n	8005c8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_UART_Transmit+0x3e>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e06e      	b.n	8005c8a <HAL_UART_Transmit+0x11c>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2221      	movs	r2, #33	; 0x21
 8005bbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005bc2:	f7fc f8ad 	bl	8001d20 <HAL_GetTick>
 8005bc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	88fa      	ldrh	r2, [r7, #6]
 8005bcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	88fa      	ldrh	r2, [r7, #6]
 8005bd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bdc:	d108      	bne.n	8005bf0 <HAL_UART_Transmit+0x82>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	e003      	b.n	8005bf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005c00:	e02a      	b.n	8005c58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2180      	movs	r1, #128	; 0x80
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fb0c 	bl	800622a <UART_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e036      	b.n	8005c8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	3302      	adds	r3, #2
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	e007      	b.n	8005c4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	781a      	ldrb	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	3301      	adds	r3, #1
 8005c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1cf      	bne.n	8005c02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2140      	movs	r1, #64	; 0x40
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fadc 	bl	800622a <UART_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e006      	b.n	8005c8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e000      	b.n	8005c8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c88:	2302      	movs	r3, #2
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b08a      	sub	sp, #40	; 0x28
 8005c96:	af02      	add	r7, sp, #8
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	603b      	str	r3, [r7, #0]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	f040 8089 	bne.w	8005dc6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_UART_Receive+0x2e>
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e081      	b.n	8005dc8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Receive+0x40>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e07a      	b.n	8005dc8 <HAL_UART_Receive+0x136>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2222      	movs	r2, #34	; 0x22
 8005ce4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ce8:	f7fc f81a 	bl	8001d20 <HAL_GetTick>
 8005cec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d02:	d108      	bne.n	8005d16 <HAL_UART_Receive+0x84>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d104      	bne.n	8005d16 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	e003      	b.n	8005d1e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005d26:	e043      	b.n	8005db0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2120      	movs	r1, #32
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fa79 	bl	800622a <UART_WaitOnFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e042      	b.n	8005dc8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10c      	bne.n	8005d62 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	3302      	adds	r3, #2
 8005d5e:	61bb      	str	r3, [r7, #24]
 8005d60:	e01f      	b.n	8005da2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6a:	d007      	beq.n	8005d7c <HAL_UART_Receive+0xea>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <HAL_UART_Receive+0xf8>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d106      	bne.n	8005d8a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e008      	b.n	8005d9c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1b6      	bne.n	8005d28 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e000      	b.n	8005dc8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005dc6:	2302      	movs	r3, #2
  }
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d140      	bne.n	8005e6c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <HAL_UART_Receive_IT+0x26>
 8005df0:	88fb      	ldrh	r3, [r7, #6]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e039      	b.n	8005e6e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_UART_Receive_IT+0x38>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e032      	b.n	8005e6e <HAL_UART_Receive_IT+0x9e>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	88fa      	ldrh	r2, [r7, #6]
 8005e1a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	88fa      	ldrh	r2, [r7, #6]
 8005e20:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2222      	movs	r2, #34	; 0x22
 8005e2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e46:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695a      	ldr	r2, [r3, #20]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0220 	orr.w	r2, r2, #32
 8005e66:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e000      	b.n	8005e6e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
  }
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr

08005e78 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695a      	ldr	r2, [r3, #20]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d02a      	beq.n	8005f04 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ebc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d013      	beq.n	8005eee <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eca:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <HAL_UART_AbortReceive_IT+0xac>)
 8005ecc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fc fdaa 	bl	8002a2c <HAL_DMA_Abort_IT>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01c      	beq.n	8005f18 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ee8:	4610      	mov	r0, r2
 8005eea:	4798      	blx	r3
 8005eec:	e014      	b.n	8005f18 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f925 	bl	800614c <HAL_UART_AbortReceiveCpltCallback>
 8005f02:	e009      	b.n	8005f18 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f91a 	bl	800614c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	08006321 	.word	0x08006321

08005f28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10d      	bne.n	8005f7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <HAL_UART_IRQHandler+0x52>
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fa50 	bl	8006418 <UART_Receive_IT>
      return;
 8005f78:	e0d0      	b.n	800611c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80b0 	beq.w	80060e2 <HAL_UART_IRQHandler+0x1ba>
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d105      	bne.n	8005f98 <HAL_UART_IRQHandler+0x70>
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80a5 	beq.w	80060e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x90>
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb0:	f043 0201 	orr.w	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <HAL_UART_IRQHandler+0xb0>
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	f043 0202 	orr.w	r2, r3, #2
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <HAL_UART_IRQHandler+0xd0>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff0:	f043 0204 	orr.w	r2, r3, #4
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f003 0308 	and.w	r3, r3, #8
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00f      	beq.n	8006022 <HAL_UART_IRQHandler+0xfa>
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <HAL_UART_IRQHandler+0xee>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	f043 0208 	orr.w	r2, r3, #8
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d077      	beq.n	800611a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d007      	beq.n	8006044 <HAL_UART_IRQHandler+0x11c>
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f9ea 	bl	8006418 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	bf14      	ite	ne
 8006052:	2301      	movne	r3, #1
 8006054:	2300      	moveq	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d102      	bne.n	800606c <HAL_UART_IRQHandler+0x144>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d031      	beq.n	80060d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f926 	bl	80062be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d023      	beq.n	80060c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800608e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006094:	2b00      	cmp	r3, #0
 8006096:	d013      	beq.n	80060c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609c:	4a21      	ldr	r2, [pc, #132]	; (8006124 <HAL_UART_IRQHandler+0x1fc>)
 800609e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fc fcc1 	bl	8002a2c <HAL_DMA_Abort_IT>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d016      	beq.n	80060de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060ba:	4610      	mov	r0, r2
 80060bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060be:	e00e      	b.n	80060de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f83a 	bl	800613a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c6:	e00a      	b.n	80060de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f836 	bl	800613a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ce:	e006      	b.n	80060de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f832 	bl	800613a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80060dc:	e01d      	b.n	800611a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060de:	bf00      	nop
    return;
 80060e0:	e01b      	b.n	800611a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_UART_IRQHandler+0x1d6>
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f927 	bl	800634a <UART_Transmit_IT>
    return;
 80060fc:	e00e      	b.n	800611c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <HAL_UART_IRQHandler+0x1f4>
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	d004      	beq.n	800611c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f968 	bl	80063e8 <UART_EndTransmit_IT>
    return;
 8006118:	e000      	b.n	800611c <HAL_UART_IRQHandler+0x1f4>
    return;
 800611a:	bf00      	nop
  }
}
 800611c:	3720      	adds	r7, #32
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	080062f9 	.word	0x080062f9

08006128 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr

0800613a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr

0800615e <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8006174:	2302      	movs	r3, #2
 8006176:	e020      	b.n	80061ba <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2224      	movs	r2, #36	; 0x24
 8006184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 030c 	bic.w	r3, r3, #12
 8006196:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f043 0308 	orr.w	r3, r3, #8
 800619e:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr

080061c4 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_HalfDuplex_EnableReceiver+0x1a>
 80061da:	2302      	movs	r3, #2
 80061dc:	e020      	b.n	8006220 <HAL_HalfDuplex_EnableReceiver+0x5c>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2224      	movs	r2, #36	; 0x24
 80061ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f023 030c 	bic.w	r3, r3, #12
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f043 0304 	orr.w	r3, r3, #4
 8006204:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	603b      	str	r3, [r7, #0]
 8006236:	4613      	mov	r3, r2
 8006238:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623a:	e02c      	b.n	8006296 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006242:	d028      	beq.n	8006296 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <UART_WaitOnFlagUntilTimeout+0x30>
 800624a:	f7fb fd69 	bl	8001d20 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	429a      	cmp	r2, r3
 8006258:	d21d      	bcs.n	8006296 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006268:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	695a      	ldr	r2, [r3, #20]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0201 	bic.w	r2, r2, #1
 8006278:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2220      	movs	r2, #32
 800627e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e00f      	b.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4013      	ands	r3, r2
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	bf0c      	ite	eq
 80062a6:	2301      	moveq	r3, #1
 80062a8:	2300      	movne	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d0c3      	beq.n	800623c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062d4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0201 	bic.w	r2, r2, #1
 80062e4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr

080062f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff ff11 	bl	800613a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006318:	bf00      	nop
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7ff ff05 	bl	800614c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006342:	bf00      	nop
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b21      	cmp	r3, #33	; 0x21
 800635c:	d13e      	bne.n	80063dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006366:	d114      	bne.n	8006392 <UART_Transmit_IT+0x48>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d110      	bne.n	8006392 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006384:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	1c9a      	adds	r2, r3, #2
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	621a      	str	r2, [r3, #32]
 8006390:	e008      	b.n	80063a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6211      	str	r1, [r2, #32]
 800639c:	781a      	ldrb	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4619      	mov	r1, r3
 80063b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10f      	bne.n	80063d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	e000      	b.n	80063de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063dc:	2302      	movs	r3, #2
  }
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr

080063e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff fe8d 	bl	8006128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b22      	cmp	r3, #34	; 0x22
 800642a:	d170      	bne.n	800650e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006434:	d117      	bne.n	8006466 <UART_Receive_IT+0x4e>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d113      	bne.n	8006466 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006454:	b29a      	uxth	r2, r3
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	1c9a      	adds	r2, r3, #2
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	629a      	str	r2, [r3, #40]	; 0x28
 8006464:	e026      	b.n	80064b4 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800646c:	2300      	movs	r3, #0
 800646e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006478:	d007      	beq.n	800648a <UART_Receive_IT+0x72>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10a      	bne.n	8006498 <UART_Receive_IT+0x80>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	e008      	b.n	80064aa <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29b      	uxth	r3, r3
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	4619      	mov	r1, r3
 80064c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d120      	bne.n	800650a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0220 	bic.w	r2, r2, #32
 80064d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f002 f869 	bl	80085d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	e002      	b.n	8006510 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	e000      	b.n	8006510 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800650e:	2302      	movs	r3, #2
  }
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006552:	f023 030c 	bic.w	r3, r3, #12
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6812      	ldr	r2, [r2, #0]
 800655a:	68b9      	ldr	r1, [r7, #8]
 800655c:	430b      	orrs	r3, r1
 800655e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699a      	ldr	r2, [r3, #24]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a2c      	ldr	r2, [pc, #176]	; (800662c <UART_SetConfig+0x114>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d103      	bne.n	8006588 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006580:	f7fe fca4 	bl	8004ecc <HAL_RCC_GetPCLK2Freq>
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	e002      	b.n	800658e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fe fc8c 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 800658c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	009a      	lsls	r2, r3, #2
 8006598:	441a      	add	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a4:	4a22      	ldr	r2, [pc, #136]	; (8006630 <UART_SetConfig+0x118>)
 80065a6:	fba2 2303 	umull	r2, r3, r2, r3
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	0119      	lsls	r1, r3, #4
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	009a      	lsls	r2, r3, #2
 80065b8:	441a      	add	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80065c4:	4b1a      	ldr	r3, [pc, #104]	; (8006630 <UART_SetConfig+0x118>)
 80065c6:	fba3 0302 	umull	r0, r3, r3, r2
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	2064      	movs	r0, #100	; 0x64
 80065ce:	fb00 f303 	mul.w	r3, r0, r3
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	3332      	adds	r3, #50	; 0x32
 80065d8:	4a15      	ldr	r2, [pc, #84]	; (8006630 <UART_SetConfig+0x118>)
 80065da:	fba2 2303 	umull	r2, r3, r2, r3
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065e4:	4419      	add	r1, r3
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009a      	lsls	r2, r3, #2
 80065f0:	441a      	add	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <UART_SetConfig+0x118>)
 80065fe:	fba3 0302 	umull	r0, r3, r3, r2
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	2064      	movs	r0, #100	; 0x64
 8006606:	fb00 f303 	mul.w	r3, r0, r3
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	3332      	adds	r3, #50	; 0x32
 8006610:	4a07      	ldr	r2, [pc, #28]	; (8006630 <UART_SetConfig+0x118>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	f003 020f 	and.w	r2, r3, #15
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	440a      	add	r2, r1
 8006622:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006624:	bf00      	nop
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40013800 	.word	0x40013800
 8006630:	51eb851f 	.word	0x51eb851f

08006634 <init_queue>:


//===========================================================================
void init_queue( Queue_t *q )
//===========================================================================
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
	q->front = q->rear = 0;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr

0800665a <qcount>:
}

//===========================================================================
int qcount( Queue_t *q )
//===========================================================================
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
	return ( ( ( q->rear + QMAX ) - q->front ) % QMAX);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006668:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	425a      	negs	r2, r3
 8006676:	b2db      	uxtb	r3, r3
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	bf58      	it	pl
 800667c:	4253      	negpl	r3, r2
}
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr

08006688 <qput>:

//===========================================================================
int qput( Queue_t *q, unsigned char k )
//===========================================================================
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
	if ( (q->rear + 1) % QMAX == q->front )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800669a:	3301      	adds	r3, #1
 800669c:	425a      	negs	r2, r3
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	bf58      	it	pl
 80066a4:	4253      	negpl	r3, r2
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d102      	bne.n	80066b6 <qput+0x2e>
	{
//		printf( "\n\tCircular Queue Overflow." );
//		printf( "\n\tQOver" );
		return -1;
 80066b0:	f04f 33ff 	mov.w	r3, #4294967295
 80066b4:	e012      	b.n	80066dc <qput+0x54>
	}
	q->queue[q->rear] = k;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	78f9      	ldrb	r1, [r7, #3]
 80066c0:	54d1      	strb	r1, [r2, r3]
	q->rear = (q->rear + 1) % QMAX;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80066c8:	3301      	adds	r3, #1
 80066ca:	425a      	negs	r2, r3
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	bf58      	it	pl
 80066d2:	4253      	negpl	r3, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	return k;
 80066da:	78fb      	ldrb	r3, [r7, #3]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr

080066e6 <qget>:

//===========================================================================
unsigned char qget( Queue_t *q )
//===========================================================================
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
	if(front == rear){
		printf("\n\tCircular Queue Underflow.");
		return -1;
	}
	*/
	i = q->queue[q->front];
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	5cd3      	ldrb	r3, [r2, r3]
 80066f8:	73fb      	strb	r3, [r7, #15]
	q->front = (q->front + 1) % QMAX;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006700:	3301      	adds	r3, #1
 8006702:	425a      	negs	r2, r3
 8006704:	b2db      	uxtb	r3, r3
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	bf58      	it	pl
 800670a:	4253      	negpl	r3, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	return i;
 8006712:	7bfb      	ldrb	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
	...

08006720 <Get_Adc1_Value>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief  get ADC1 value
  */
uint32_t Get_Adc1_Value(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
	uint32_t adcResult = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc1);
 800672a:	4809      	ldr	r0, [pc, #36]	; (8006750 <Get_Adc1_Value+0x30>)
 800672c:	f7fb fc10 	bl	8001f50 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8006730:	2164      	movs	r1, #100	; 0x64
 8006732:	4807      	ldr	r0, [pc, #28]	; (8006750 <Get_Adc1_Value+0x30>)
 8006734:	f7fb fce6 	bl	8002104 <HAL_ADC_PollForConversion>
	adcResult = HAL_ADC_GetValue(&hadc1);
 8006738:	4805      	ldr	r0, [pc, #20]	; (8006750 <Get_Adc1_Value+0x30>)
 800673a:	f7fb fddd 	bl	80022f8 <HAL_ADC_GetValue>
 800673e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8006740:	4803      	ldr	r0, [pc, #12]	; (8006750 <Get_Adc1_Value+0x30>)
 8006742:	f7fb fcb3 	bl	80020ac <HAL_ADC_Stop>
	return adcResult;
 8006746:	687b      	ldr	r3, [r7, #4]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	200001c4 	.word	0x200001c4

08006754 <getAdc1Vol>:
//--------------------------------------------------------------------------------------------//
/**
  * @brief  get adc1 voltage(mV)
  */
uint16_t getAdc1Vol(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
	return (Get_Adc1_Value() * ADC_MAX_VOL) / ADC_MAX_DATA;
 8006758:	f7ff ffe2 	bl	8006720 <Get_Adc1_Value>
 800675c:	4603      	mov	r3, r0
 800675e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8006762:	fb03 f202 	mul.w	r2, r3, r2
 8006766:	4b05      	ldr	r3, [pc, #20]	; (800677c <getAdc1Vol+0x28>)
 8006768:	fba3 1302 	umull	r1, r3, r3, r2
 800676c:	1ad2      	subs	r2, r2, r3
 800676e:	0852      	lsrs	r2, r2, #1
 8006770:	4413      	add	r3, r2
 8006772:	0adb      	lsrs	r3, r3, #11
 8006774:	b29b      	uxth	r3, r3
}
 8006776:	4618      	mov	r0, r3
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	00100101 	.word	0x00100101

08006780 <__NVIC_SystemReset>:
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006784:	f3bf 8f4f 	dsb	sy
}
 8006788:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800678a:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <__NVIC_SystemReset+0x24>)
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006792:	4904      	ldr	r1, [pc, #16]	; (80067a4 <__NVIC_SystemReset+0x24>)
 8006794:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <__NVIC_SystemReset+0x28>)
 8006796:	4313      	orrs	r3, r2
 8006798:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800679a:	f3bf 8f4f 	dsb	sy
}
 800679e:	bf00      	nop
    __NOP();
 80067a0:	bf00      	nop
 80067a2:	e7fd      	b.n	80067a0 <__NVIC_SystemReset+0x20>
 80067a4:	e000ed00 	.word	0xe000ed00
 80067a8:	05fa0004 	.word	0x05fa0004

080067ac <getarg>:
 * parse cmd & argument, return argc
 */
//========================================================================
int getarg(char *buffer, char *argv[])
//========================================================================
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
	int		argc;
	char	*p;
	char	*sepchr = " \t";
 80067b6:	4b14      	ldr	r3, [pc, #80]	; (8006808 <getarg+0x5c>)
 80067b8:	60fb      	str	r3, [r7, #12]
	char	*saveptr;

#define	MAXP	20

	p = (char *)strtok_r(buffer, sepchr, &saveptr);
 80067ba:	f107 0308 	add.w	r3, r7, #8
 80067be:	461a      	mov	r2, r3
 80067c0:	68f9      	ldr	r1, [r7, #12]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f003 f856 	bl	8009874 <strtok_r>
 80067c8:	6138      	str	r0, [r7, #16]

	for ( argc = 0; argc < MAXP && p != NULL; p = (char *)strtok_r( NULL, sepchr, &saveptr ) )
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	e00f      	b.n	80067f0 <getarg+0x44>
	{
//		printf( "%s(%d) - %s\n", __func__, __LINE__, p );
		argv[argc++] = p;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	617a      	str	r2, [r7, #20]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	4413      	add	r3, r2
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	601a      	str	r2, [r3, #0]
	for ( argc = 0; argc < MAXP && p != NULL; p = (char *)strtok_r( NULL, sepchr, &saveptr ) )
 80067e0:	f107 0308 	add.w	r3, r7, #8
 80067e4:	461a      	mov	r2, r3
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	2000      	movs	r0, #0
 80067ea:	f003 f843 	bl	8009874 <strtok_r>
 80067ee:	6138      	str	r0, [r7, #16]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2b13      	cmp	r3, #19
 80067f4:	dc02      	bgt.n	80067fc <getarg+0x50>
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e9      	bne.n	80067d0 <getarg+0x24>
	}

	return argc;
 80067fc:	697b      	ldr	r3, [r7, #20]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	0800be6c 	.word	0x0800be6c

0800680c <ProcessCommand>:

//========================================================================
int ProcessCommand( char *cmd )
//========================================================================
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b0b0      	sub	sp, #192	; 0xc0
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
	char	*argv[MAXP];
	int		argc;
	char	*p;
	int		v = 0;
 8006814:	2300      	movs	r3, #0
 8006816:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int		i;
	char	temp[80];
	char	upstr[4] = { 0x1b, '[', 'A', 0 };
 800681a:	4b85      	ldr	r3, [pc, #532]	; (8006a30 <ProcessCommand+0x224>)
 800681c:	60fb      	str	r3, [r7, #12]

	if ( strcmp( "!!", cmd ) == 0 || strcmp( cmd, upstr ) == 0 )
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4884      	ldr	r0, [pc, #528]	; (8006a34 <ProcessCommand+0x228>)
 8006822:	f7f9 fcff 	bl	8000224 <strcmp>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <ProcessCommand+0x32>
 800682c:	f107 030c 	add.w	r3, r7, #12
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7f9 fcf6 	bl	8000224 <strcmp>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10a      	bne.n	8006854 <ProcessCommand+0x48>
	{
		strcpy( temp, old_cmd );
 800683e:	f107 0310 	add.w	r3, r7, #16
 8006842:	497d      	ldr	r1, [pc, #500]	; (8006a38 <ProcessCommand+0x22c>)
 8006844:	4618      	mov	r0, r3
 8006846:	f002 ffd1 	bl	80097ec <strcpy>
		strcpy( cmd, old_cmd );
 800684a:	497b      	ldr	r1, [pc, #492]	; (8006a38 <ProcessCommand+0x22c>)
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f002 ffcd 	bl	80097ec <strcpy>
 8006852:	e005      	b.n	8006860 <ProcessCommand+0x54>
	}
	else
	{
		strcpy( temp, cmd );
 8006854:	f107 0310 	add.w	r3, r7, #16
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4618      	mov	r0, r3
 800685c:	f002 ffc6 	bl	80097ec <strcpy>
	}

	memset( argv, 0, sizeof( argv ) );
 8006860:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006864:	2250      	movs	r2, #80	; 0x50
 8006866:	2100      	movs	r1, #0
 8006868:	4618      	mov	r0, r3
 800686a:	f002 fdab 	bl	80093c4 <memset>

	// ignore after # char
	p = (char *)strchr( cmd, '#' );
 800686e:	2123      	movs	r1, #35	; 0x23
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f002 ffae 	bl	80097d2 <strchr>
 8006876:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	if ( p )
 800687a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <ProcessCommand+0x7e>
	{
		*p = (char)NULL;
 8006882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]
	}

	// 명령라인을 arg,argv 로 분해
	argc = getarg( cmd, argv );
 800688a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff ff8b 	bl	80067ac <getarg>
 8006896:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

//	printf( "%s(%d) - argc(%d) / argv(%s)\n", __func__, __LINE__, argc, argv[0] );

	if ( argc != 0 )
 800689a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80c1 	beq.w	8006a26 <ProcessCommand+0x21a>
	{

		// md/mm 등에 따르는 "[.b|.w|.l]에 대한 처리
		p = strchr( argv[0], '.' );
 80068a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068a6:	212e      	movs	r1, #46	; 0x2e
 80068a8:	4618      	mov	r0, r3
 80068aa:	f002 ff92 	bl	80097d2 <strchr>
 80068ae:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if ( p != NULL )
 80068b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d021      	beq.n	80068fe <ProcessCommand+0xf2>
		{
			if ( p[1] == 'b' )
 80068ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068be:	3301      	adds	r3, #1
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b62      	cmp	r3, #98	; 0x62
 80068c4:	d103      	bne.n	80068ce <ProcessCommand+0xc2>
			{
				data_option = 1;
 80068c6:	4b5d      	ldr	r3, [pc, #372]	; (8006a3c <ProcessCommand+0x230>)
 80068c8:	2201      	movs	r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	e012      	b.n	80068f4 <ProcessCommand+0xe8>
			}
			else if ( p[1] == 'w' )
 80068ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068d2:	3301      	adds	r3, #1
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b77      	cmp	r3, #119	; 0x77
 80068d8:	d103      	bne.n	80068e2 <ProcessCommand+0xd6>
			{
				data_option = 2;
 80068da:	4b58      	ldr	r3, [pc, #352]	; (8006a3c <ProcessCommand+0x230>)
 80068dc:	2202      	movs	r2, #2
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	e008      	b.n	80068f4 <ProcessCommand+0xe8>
			}
			else if ( p[1] == 'l' )
 80068e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068e6:	3301      	adds	r3, #1
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b6c      	cmp	r3, #108	; 0x6c
 80068ec:	d102      	bne.n	80068f4 <ProcessCommand+0xe8>
			{
				data_option = 4;
 80068ee:	4b53      	ldr	r3, [pc, #332]	; (8006a3c <ProcessCommand+0x230>)
 80068f0:	2204      	movs	r2, #4
 80068f2:	601a      	str	r2, [r3, #0]
			}
			*p = (char)NULL;
 80068f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	e002      	b.n	8006904 <ProcessCommand+0xf8>
		}
		else
		{
			//	default
			data_option = 1;
 80068fe:	4b4f      	ldr	r3, [pc, #316]	; (8006a3c <ProcessCommand+0x230>)
 8006900:	2201      	movs	r2, #1
 8006902:	601a      	str	r2, [r3, #0]
		}

		// 명령을 table에서 찾아서 
		for ( i = 0; i < NELEMENTS( user_command_table ); i++ )
 8006904:	2300      	movs	r3, #0
 8006906:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800690a:	e078      	b.n	80069fe <ProcessCommand+0x1f2>
		{
			if ( strcmp( argv[0], user_command_table[i].command_name ) == 0 )
 800690c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800690e:	494c      	ldr	r1, [pc, #304]	; (8006a40 <ProcessCommand+0x234>)
 8006910:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	440b      	add	r3, r1
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4619      	mov	r1, r3
 800691c:	4610      	mov	r0, r2
 800691e:	f7f9 fc81 	bl	8000224 <strcmp>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d165      	bne.n	80069f4 <ProcessCommand+0x1e8>
			{
				if ( argc >= 2 )
 8006928:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800692c:	2b01      	cmp	r3, #1
 800692e:	dd30      	ble.n	8006992 <ProcessCommand+0x186>
				{
					if ( (strcmp( argv[1], "help" ) == 0) || (strcmp( argv[1], "-h" ) == 0) )
 8006930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006932:	4944      	ldr	r1, [pc, #272]	; (8006a44 <ProcessCommand+0x238>)
 8006934:	4618      	mov	r0, r3
 8006936:	f7f9 fc75 	bl	8000224 <strcmp>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d007      	beq.n	8006950 <ProcessCommand+0x144>
 8006940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006942:	4941      	ldr	r1, [pc, #260]	; (8006a48 <ProcessCommand+0x23c>)
 8006944:	4618      	mov	r0, r3
 8006946:	f7f9 fc6d 	bl	8000224 <strcmp>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d120      	bne.n	8006992 <ProcessCommand+0x186>
					{
						printf( "%s\n", user_command_table[i].command_help1 );
 8006950:	4a3b      	ldr	r2, [pc, #236]	; (8006a40 <ProcessCommand+0x234>)
 8006952:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	4413      	add	r3, r2
 800695a:	3304      	adds	r3, #4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f002 fdd2 	bl	8009508 <puts>
						if ( user_command_table[i].command_help2 != NULL )
 8006964:	4a36      	ldr	r2, [pc, #216]	; (8006a40 <ProcessCommand+0x234>)
 8006966:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	4413      	add	r3, r2
 800696e:	3308      	adds	r3, #8
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <ProcessCommand+0x17e>
						{
							printf( "%s\n", user_command_table[i].command_help2 );
 8006976:	4a32      	ldr	r2, [pc, #200]	; (8006a40 <ProcessCommand+0x234>)
 8006978:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	4413      	add	r3, r2
 8006980:	3308      	adds	r3, #8
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f002 fdbf 	bl	8009508 <puts>
						}
						v = 1;
 800698a:	2301      	movs	r3, #1
 800698c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						break;
 8006990:	e039      	b.n	8006a06 <ProcessCommand+0x1fa>
					}
				}
				// 처리함수를 호출
				if ( user_command_table[i].func( argc, argv ) < 0 )
 8006992:	4a2b      	ldr	r2, [pc, #172]	; (8006a40 <ProcessCommand+0x234>)
 8006994:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006998:	011b      	lsls	r3, r3, #4
 800699a:	4413      	add	r3, r2
 800699c:	330c      	adds	r3, #12
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80069a4:	4611      	mov	r1, r2
 80069a6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80069aa:	4798      	blx	r3
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	da1c      	bge.n	80069ec <ProcessCommand+0x1e0>
				{
					printf( "%s\n", user_command_table[i].command_help1 );
 80069b2:	4a23      	ldr	r2, [pc, #140]	; (8006a40 <ProcessCommand+0x234>)
 80069b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	4413      	add	r3, r2
 80069bc:	3304      	adds	r3, #4
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f002 fda1 	bl	8009508 <puts>
					if ( user_command_table[i].command_help2 != NULL )
 80069c6:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <ProcessCommand+0x234>)
 80069c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	4413      	add	r3, r2
 80069d0:	3308      	adds	r3, #8
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <ProcessCommand+0x1e0>
					{
						printf( "%s\n", user_command_table[i].command_help2 );
 80069d8:	4a19      	ldr	r2, [pc, #100]	; (8006a40 <ProcessCommand+0x234>)
 80069da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	4413      	add	r3, r2
 80069e2:	3308      	adds	r3, #8
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f002 fd8e 	bl	8009508 <puts>
					}
				}
				v = 1;	// 명령을 찾아서 처리했음을 표시
 80069ec:	2301      	movs	r3, #1
 80069ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				break;
 80069f2:	e008      	b.n	8006a06 <ProcessCommand+0x1fa>
		for ( i = 0; i < NELEMENTS( user_command_table ); i++ )
 80069f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069f8:	3301      	adds	r3, #1
 80069fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a02:	2b10      	cmp	r3, #16
 8006a04:	d982      	bls.n	800690c <ProcessCommand+0x100>
			}

		}
		if ( v == 0 )
 8006a06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d105      	bne.n	8006a1a <ProcessCommand+0x20e>
		{
			// 엉뚱하게 입력한 경우
			printf( "%s: command not found\n\r", argv[0] );
 8006a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a10:	4619      	mov	r1, r3
 8006a12:	480e      	ldr	r0, [pc, #56]	; (8006a4c <ProcessCommand+0x240>)
 8006a14:	f002 fcde 	bl	80093d4 <iprintf>
 8006a18:	e005      	b.n	8006a26 <ProcessCommand+0x21a>
		}
		else
		{
			// !! 처리를 위해서 old_cmd로 명령 복사
			strcpy( old_cmd, temp );
 8006a1a:	f107 0310 	add.w	r3, r7, #16
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4805      	ldr	r0, [pc, #20]	; (8006a38 <ProcessCommand+0x22c>)
 8006a22:	f002 fee3 	bl	80097ec <strcpy>
		}
	}

	return 1;
 8006a26:	2301      	movs	r3, #1
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	37c0      	adds	r7, #192	; 0xc0
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	00415b1b 	.word	0x00415b1b
 8006a34:	0800be70 	.word	0x0800be70
 8006a38:	20000448 	.word	0x20000448
 8006a3c:	20000014 	.word	0x20000014
 8006a40:	20000018 	.word	0x20000018
 8006a44:	0800bae0 	.word	0x0800bae0
 8006a48:	0800be74 	.word	0x0800be74
 8006a4c:	0800be78 	.word	0x0800be78

08006a50 <readline>:
static int		command_index = 0;

//========================================================================
int readline( char *bufp )
//========================================================================
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	//	printf( "%s\n", __func__ );

	char	ch;
	char	*command_buf = bufp;	//[MAX_COMMAND_LENGTH];
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	617b      	str	r3, [r7, #20]

	int		ret = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	613b      	str	r3, [r7, #16]

	for ( ;; )
	{
		ch = getchar();
 8006a60:	f002 fc6c 	bl	800933c <getchar>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]

#if defined(USE_FREERTOS)
#else
		if ( ch == (char)-1 )
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	2bff      	cmp	r3, #255	; 0xff
 8006a6c:	d102      	bne.n	8006a74 <readline+0x24>
		{
			//	Input Data가 없는 경우 ( Non-Blocking - OS less )
			return -1;
 8006a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a72:	e09e      	b.n	8006bb2 <readline+0x162>
		}
#endif

		if ( ch == 0x08 || ch == 0x7F )	// Backspace
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d002      	beq.n	8006a80 <readline+0x30>
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a7e:	d10f      	bne.n	8006aa0 <readline+0x50>
		{
			if ( command_index > 0 )
 8006a80:	4b4e      	ldr	r3, [pc, #312]	; (8006bbc <readline+0x16c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f340 8093 	ble.w	8006bb0 <readline+0x160>
			{
				printf( "%c %c", 8, 8 );
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	2108      	movs	r1, #8
 8006a8e:	484c      	ldr	r0, [pc, #304]	; (8006bc0 <readline+0x170>)
 8006a90:	f002 fca0 	bl	80093d4 <iprintf>
				command_index--;
 8006a94:	4b49      	ldr	r3, [pc, #292]	; (8006bbc <readline+0x16c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	4a48      	ldr	r2, [pc, #288]	; (8006bbc <readline+0x16c>)
 8006a9c:	6013      	str	r3, [r2, #0]
			if ( command_index > 0 )
 8006a9e:	e087      	b.n	8006bb0 <readline+0x160>
			}
		}
		else if ( ch == 0x15 )			// control-u, all input clear
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	2b15      	cmp	r3, #21
 8006aa4:	d10f      	bne.n	8006ac6 <readline+0x76>
		{
			while ( 0 < command_index )
 8006aa6:	e009      	b.n	8006abc <readline+0x6c>
			{
				printf( "%c %c", 8, 8 );
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	2108      	movs	r1, #8
 8006aac:	4844      	ldr	r0, [pc, #272]	; (8006bc0 <readline+0x170>)
 8006aae:	f002 fc91 	bl	80093d4 <iprintf>
				command_index--;
 8006ab2:	4b42      	ldr	r3, [pc, #264]	; (8006bbc <readline+0x16c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	4a40      	ldr	r2, [pc, #256]	; (8006bbc <readline+0x16c>)
 8006aba:	6013      	str	r3, [r2, #0]
			while ( 0 < command_index )
 8006abc:	4b3f      	ldr	r3, [pc, #252]	; (8006bbc <readline+0x16c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	dcf1      	bgt.n	8006aa8 <readline+0x58>
 8006ac4:	e7cc      	b.n	8006a60 <readline+0x10>
			}
		}
		else if ( ch == 0x17 )			// control-w, erase one word
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	2b17      	cmp	r3, #23
 8006aca:	d12e      	bne.n	8006b2a <readline+0xda>
		{
			/* erase space */
			while ( (0 < command_index) && (command_buf[command_index] == ' ') ) {
 8006acc:	e009      	b.n	8006ae2 <readline+0x92>
				printf( "%c %c", 8, 8 );
 8006ace:	2208      	movs	r2, #8
 8006ad0:	2108      	movs	r1, #8
 8006ad2:	483b      	ldr	r0, [pc, #236]	; (8006bc0 <readline+0x170>)
 8006ad4:	f002 fc7e 	bl	80093d4 <iprintf>
				command_index--;
 8006ad8:	4b38      	ldr	r3, [pc, #224]	; (8006bbc <readline+0x16c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	4a37      	ldr	r2, [pc, #220]	; (8006bbc <readline+0x16c>)
 8006ae0:	6013      	str	r3, [r2, #0]
			while ( (0 < command_index) && (command_buf[command_index] == ' ') ) {
 8006ae2:	4b36      	ldr	r3, [pc, #216]	; (8006bbc <readline+0x16c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	dd12      	ble.n	8006b10 <readline+0xc0>
 8006aea:	4b34      	ldr	r3, [pc, #208]	; (8006bbc <readline+0x16c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	4413      	add	r3, r2
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d0e9      	beq.n	8006ace <readline+0x7e>
			}
			/* erase char not space */
			while ( (0 < command_index) && (command_buf[command_index] != ' ') ) {
 8006afa:	e009      	b.n	8006b10 <readline+0xc0>
				printf( "%c %c", 8, 8 );
 8006afc:	2208      	movs	r2, #8
 8006afe:	2108      	movs	r1, #8
 8006b00:	482f      	ldr	r0, [pc, #188]	; (8006bc0 <readline+0x170>)
 8006b02:	f002 fc67 	bl	80093d4 <iprintf>
				command_index--;
 8006b06:	4b2d      	ldr	r3, [pc, #180]	; (8006bbc <readline+0x16c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	4a2b      	ldr	r2, [pc, #172]	; (8006bbc <readline+0x16c>)
 8006b0e:	6013      	str	r3, [r2, #0]
			while ( (0 < command_index) && (command_buf[command_index] != ' ') ) {
 8006b10:	4b2a      	ldr	r3, [pc, #168]	; (8006bbc <readline+0x16c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dda3      	ble.n	8006a60 <readline+0x10>
 8006b18:	4b28      	ldr	r3, [pc, #160]	; (8006bbc <readline+0x16c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	4413      	add	r3, r2
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d1e9      	bne.n	8006afc <readline+0xac>
 8006b28:	e79a      	b.n	8006a60 <readline+0x10>
			}
		}
		else if ( (ch == 0x0D) || (ch == 0x0A) )
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	2b0d      	cmp	r3, #13
 8006b2e:	d002      	beq.n	8006b36 <readline+0xe6>
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	2b0a      	cmp	r3, #10
 8006b34:	d111      	bne.n	8006b5a <readline+0x10a>
		{
			printf( "\n\r" );
 8006b36:	4823      	ldr	r0, [pc, #140]	; (8006bc4 <readline+0x174>)
 8006b38:	f002 fc4c 	bl	80093d4 <iprintf>
			command_buf[command_index] = 0; // Null terminate the input command
 8006b3c:	4b1f      	ldr	r3, [pc, #124]	; (8006bbc <readline+0x16c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	4413      	add	r3, r2
 8006b46:	2200      	movs	r2, #0
 8006b48:	701a      	strb	r2, [r3, #0]

			ret = command_index;
 8006b4a:	4b1c      	ldr	r3, [pc, #112]	; (8006bbc <readline+0x16c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	613b      	str	r3, [r7, #16]
			command_index = 0;		//	입력후 index 초기화.
 8006b50:	4b1a      	ldr	r3, [pc, #104]	; (8006bbc <readline+0x16c>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]

			return ret;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	e02b      	b.n	8006bb2 <readline+0x162>
		}
		else if ( (0x20 <= ch) && (ch <= 0x7E) )
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b1f      	cmp	r3, #31
 8006b5e:	d915      	bls.n	8006b8c <readline+0x13c>
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	2b7e      	cmp	r3, #126	; 0x7e
 8006b64:	d812      	bhi.n	8006b8c <readline+0x13c>
		{
			//	ANSI 입력.
			if ( command_index < (MAX_COMMAND_LENGTH - 2) )
 8006b66:	4b15      	ldr	r3, [pc, #84]	; (8006bbc <readline+0x16c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b3d      	cmp	r3, #61	; 0x3d
 8006b6c:	dc09      	bgt.n	8006b82 <readline+0x132>
			{
				command_buf[command_index++] = ch;
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <readline+0x16c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	4911      	ldr	r1, [pc, #68]	; (8006bbc <readline+0x16c>)
 8006b76:	600a      	str	r2, [r1, #0]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	7bfa      	ldrb	r2, [r7, #15]
 8006b80:	701a      	strb	r2, [r3, #0]
			}
			printf( "%c", ch );    // Echo the character
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f002 fc3d 	bl	8009404 <putchar>
 8006b8a:	e011      	b.n	8006bb0 <readline+0x160>
//			printf( "[%02X]", ch );    // Echo the character
		}
		else 
		{
			//	한글입력.
			if ( command_index < ( MAX_COMMAND_LENGTH - 2 ) )
 8006b8c:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <readline+0x16c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b3d      	cmp	r3, #61	; 0x3d
 8006b92:	dc09      	bgt.n	8006ba8 <readline+0x158>
			{
				command_buf[command_index++] = ch;
 8006b94:	4b09      	ldr	r3, [pc, #36]	; (8006bbc <readline+0x16c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	4908      	ldr	r1, [pc, #32]	; (8006bbc <readline+0x16c>)
 8006b9c:	600a      	str	r2, [r1, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	7bfa      	ldrb	r2, [r7, #15]
 8006ba6:	701a      	strb	r2, [r3, #0]
			}
			printf( "%c", ch );    // Echo the character
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f002 fc2a 	bl	8009404 <putchar>
		ch = getchar();
 8006bb0:	e756      	b.n	8006a60 <readline+0x10>
//		HAL_Delay( 0 );
#endif
	}

	return 0;
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	200004c8 	.word	0x200004c8
 8006bc0:	0800be90 	.word	0x0800be90
 8006bc4:	0800be98 	.word	0x0800be98

08006bc8 <CLIPrompt>:

//========================================================================
void	CLIPrompt( void )
//========================================================================
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
	printf( "%s", PROMPT_STRING );
 8006bcc:	4902      	ldr	r1, [pc, #8]	; (8006bd8 <CLIPrompt+0x10>)
 8006bce:	4803      	ldr	r0, [pc, #12]	; (8006bdc <CLIPrompt+0x14>)
 8006bd0:	f002 fc00 	bl	80093d4 <iprintf>
}
 8006bd4:	bf00      	nop
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	0800be9c 	.word	0x0800be9c
 8006bdc:	0800bea4 	.word	0x0800bea4

08006be0 <LoopProcCLI>:


//========================================================================
void	LoopProcCLI ( void )
//========================================================================
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
	int len;
	if ( input_check() )
 8006be6:	f001 fe63 	bl	80088b0 <input_check>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00d      	beq.n	8006c0c <LoopProcCLI+0x2c>
	{
		len = readline( command_buf );
 8006bf0:	4808      	ldr	r0, [pc, #32]	; (8006c14 <LoopProcCLI+0x34>)
 8006bf2:	f7ff ff2d 	bl	8006a50 <readline>
 8006bf6:	6078      	str	r0, [r7, #4]
		if ( len >= 0 )
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	db06      	blt.n	8006c0c <LoopProcCLI+0x2c>
		{
//			printf( "%s(%d) : %s\n", __func__, __LINE__, command_buf );
			//	Process Command
//			ProcessCommand( command_buf );
			g_fnCLIProc( command_buf );
 8006bfe:	4b06      	ldr	r3, [pc, #24]	; (8006c18 <LoopProcCLI+0x38>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4804      	ldr	r0, [pc, #16]	; (8006c14 <LoopProcCLI+0x34>)
 8006c04:	4798      	blx	r3

			//	Print Prompt
//			printf( "%s", PROMPT_STRING );
			g_fnCLIPrompt();
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <LoopProcCLI+0x3c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4798      	blx	r3
		}
	}
}
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	20000488 	.word	0x20000488
 8006c18:	2000012c 	.word	0x2000012c
 8006c1c:	20000128 	.word	0x20000128

08006c20 <cmd_help>:
}

//========================================================================
int cmd_help( int argc, char *argv[] )
//========================================================================
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	int	i;
	int	ok = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60bb      	str	r3, [r7, #8]

//	printf( "%s(%d)\n", __func__, __LINE__ );

	for ( i = 1; i < NELEMENTS( user_command_table ); i++ )
 8006c2e:	2301      	movs	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	e04c      	b.n	8006cce <cmd_help+0xae>
	{
		if ( 1 < argc )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	dd33      	ble.n	8006ca2 <cmd_help+0x82>
		{
			if ( strcmp( argv[1], user_command_table[i].command_name ) == 0 )
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	492c      	ldr	r1, [pc, #176]	; (8006cf4 <cmd_help+0xd4>)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	440b      	add	r3, r1
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f7f9 fae9 	bl	8000224 <strcmp>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d137      	bne.n	8006cc8 <cmd_help+0xa8>
			{
				if ( user_command_table[i].command_help1 != NULL )
 8006c58:	4a26      	ldr	r2, [pc, #152]	; (8006cf4 <cmd_help+0xd4>)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	4413      	add	r3, r2
 8006c60:	3304      	adds	r3, #4
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <cmd_help+0x5a>
				{
					printf( "%s\n", user_command_table[i].command_help1 );
 8006c68:	4a22      	ldr	r2, [pc, #136]	; (8006cf4 <cmd_help+0xd4>)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	4413      	add	r3, r2
 8006c70:	3304      	adds	r3, #4
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f002 fc47 	bl	8009508 <puts>
				}
				if ( user_command_table[i].command_help2 != NULL )
 8006c7a:	4a1e      	ldr	r2, [pc, #120]	; (8006cf4 <cmd_help+0xd4>)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	4413      	add	r3, r2
 8006c82:	3308      	adds	r3, #8
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d008      	beq.n	8006c9c <cmd_help+0x7c>
				{
					printf( "%s\n", user_command_table[i].command_help2 );
 8006c8a:	4a1a      	ldr	r2, [pc, #104]	; (8006cf4 <cmd_help+0xd4>)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	4413      	add	r3, r2
 8006c92:	3308      	adds	r3, #8
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f002 fc36 	bl	8009508 <puts>
				}
				ok = 1;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	e012      	b.n	8006cc8 <cmd_help+0xa8>
			}
		}
		else
		{
			if ( user_command_table[i].command_help1 != NULL )
 8006ca2:	4a14      	ldr	r2, [pc, #80]	; (8006cf4 <cmd_help+0xd4>)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	4413      	add	r3, r2
 8006caa:	3304      	adds	r3, #4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d008      	beq.n	8006cc4 <cmd_help+0xa4>
			{
				printf( "%s\n", user_command_table[i].command_help1 );
 8006cb2:	4a10      	ldr	r2, [pc, #64]	; (8006cf4 <cmd_help+0xd4>)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	4413      	add	r3, r2
 8006cba:	3304      	adds	r3, #4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f002 fc22 	bl	8009508 <puts>
			}
			ok = 1;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	60bb      	str	r3, [r7, #8]
	for ( i = 1; i < NELEMENTS( user_command_table ); i++ )
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2b10      	cmp	r3, #16
 8006cd2:	d9af      	bls.n	8006c34 <cmd_help+0x14>
		}
	}
	if ( ok == 0 )
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <cmd_help+0xc8>
	{
		printf( "unknown command %s\n", argv[1] );
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4805      	ldr	r0, [pc, #20]	; (8006cf8 <cmd_help+0xd8>)
 8006ce4:	f002 fb76 	bl	80093d4 <iprintf>
	}
	return 0;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000018 	.word	0x20000018
 8006cf8:	0800bea8 	.word	0x0800bea8

08006cfc <cmd_uptime>:

//========================================================================
int cmd_uptime(int argc, char *argv[])
//========================================================================
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08a      	sub	sp, #40	; 0x28
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
//=============================================================================

#if defined( USE_FREERTOS )
	unsigned long	tmp = xTaskGetTickCount() / configTICK_RATE_HZ;
#else
	unsigned long	tmp = HAL_GetTick() / 1000;
 8006d06:	f7fb f80b 	bl	8001d20 <HAL_GetTick>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	4a26      	ldr	r2, [pc, #152]	; (8006da8 <cmd_uptime+0xac>)
 8006d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d12:	099b      	lsrs	r3, r3, #6
 8006d14:	61fb      	str	r3, [r7, #28]
#endif

	int	sec, min, hour;
	int	day;

	day = (tmp / 3600 / 24);
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4a24      	ldr	r2, [pc, #144]	; (8006dac <cmd_uptime+0xb0>)
 8006d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1e:	0c1b      	lsrs	r3, r3, #16
 8006d20:	61bb      	str	r3, [r7, #24]
	tmp = tmp % (3600 * 24);
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4a21      	ldr	r2, [pc, #132]	; (8006dac <cmd_uptime+0xb0>)
 8006d26:	fba2 1203 	umull	r1, r2, r2, r3
 8006d2a:	0c12      	lsrs	r2, r2, #16
 8006d2c:	4920      	ldr	r1, [pc, #128]	; (8006db0 <cmd_uptime+0xb4>)
 8006d2e:	fb01 f202 	mul.w	r2, r1, r2
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	61fb      	str	r3, [r7, #28]

	hour = tmp / 3600;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	4a1e      	ldr	r2, [pc, #120]	; (8006db4 <cmd_uptime+0xb8>)
 8006d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3e:	0adb      	lsrs	r3, r3, #11
 8006d40:	617b      	str	r3, [r7, #20]
	tmp = tmp % 3600;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4a1b      	ldr	r2, [pc, #108]	; (8006db4 <cmd_uptime+0xb8>)
 8006d46:	fba2 1203 	umull	r1, r2, r2, r3
 8006d4a:	0ad2      	lsrs	r2, r2, #11
 8006d4c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006d50:	fb01 f202 	mul.w	r2, r1, r2
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	61fb      	str	r3, [r7, #28]

	min = tmp / 60;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <cmd_uptime+0xbc>)
 8006d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	613b      	str	r3, [r7, #16]
	sec = tmp % 60;
 8006d64:	69f9      	ldr	r1, [r7, #28]
 8006d66:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <cmd_uptime+0xbc>)
 8006d68:	fba3 2301 	umull	r2, r3, r3, r1
 8006d6c:	095a      	lsrs	r2, r3, #5
 8006d6e:	4613      	mov	r3, r2
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	1a9b      	subs	r3, r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	1aca      	subs	r2, r1, r3
 8006d78:	60fa      	str	r2, [r7, #12]

	if (0 < day)
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dd08      	ble.n	8006d92 <cmd_uptime+0x96>
	{
		printf("%d day(s) %d:%02d:%02d up.\n", day, hour, min, sec);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	69b9      	ldr	r1, [r7, #24]
 8006d8a:	480c      	ldr	r0, [pc, #48]	; (8006dbc <cmd_uptime+0xc0>)
 8006d8c:	f002 fb22 	bl	80093d4 <iprintf>
 8006d90:	e005      	b.n	8006d9e <cmd_uptime+0xa2>
	}
	else
	{
		printf("%d:%02d:%02d up.\n", hour, min, sec);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	6979      	ldr	r1, [r7, #20]
 8006d98:	4809      	ldr	r0, [pc, #36]	; (8006dc0 <cmd_uptime+0xc4>)
 8006d9a:	f002 fb1b 	bl	80093d4 <iprintf>

//=============================================================================
#endif
//=============================================================================

	return 0;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3720      	adds	r7, #32
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	10624dd3 	.word	0x10624dd3
 8006dac:	c22e4507 	.word	0xc22e4507
 8006db0:	00015180 	.word	0x00015180
 8006db4:	91a2b3c5 	.word	0x91a2b3c5
 8006db8:	88888889 	.word	0x88888889
 8006dbc:	0800bebc 	.word	0x0800bebc
 8006dc0:	0800bed8 	.word	0x0800bed8

08006dc4 <cmd_ver>:

//========================================================================
int cmd_ver(int argc, char *argv[])
//========================================================================
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
	printf("Version = %s(%s)\n", APP_VER, APP_BUILD_DATE );
 8006dce:	4a05      	ldr	r2, [pc, #20]	; (8006de4 <cmd_ver+0x20>)
 8006dd0:	4905      	ldr	r1, [pc, #20]	; (8006de8 <cmd_ver+0x24>)
 8006dd2:	4806      	ldr	r0, [pc, #24]	; (8006dec <cmd_ver+0x28>)
 8006dd4:	f002 fafe 	bl	80093d4 <iprintf>

	return 0;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	0800beec 	.word	0x0800beec
 8006de8:	0800bf04 	.word	0x0800bf04
 8006dec:	0800bf10 	.word	0x0800bf10

08006df0 <cmd_reset>:


//========================================================================
int cmd_reset(int argc, char *argv[])
//========================================================================
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  	NVIC_SystemReset();
 8006dfa:	f7ff fcc1 	bl	8006780 <__NVIC_SystemReset>
	...

08006e00 <cmd_WDGStOff>:


//========================================================================
extern int g_bEnIWDGStat;	//	WatchDog Stat Enable
int	cmd_WDGStOff(int argc, char *argv[])
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	g_bEnIWDGStat = 0;
 8006e0a:	4b04      	ldr	r3, [pc, #16]	; (8006e1c <cmd_WDGStOff+0x1c>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]
}
 8006e10:	bf00      	nop
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bc80      	pop	{r7}
 8006e1a:	4770      	bx	lr
 8006e1c:	20000000 	.word	0x20000000

08006e20 <cmd_battery>:
//========================================================================


//========================================================================
int	cmd_battery(int argc, char *argv[])
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
	//	배터리 잔량 출력.
	printf("[Battery] Charge Rate : %d %%\n", getChargeRate() );
 8006e2a:	f7f9 ff85 	bl	8000d38 <getChargeRate>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4619      	mov	r1, r3
 8006e32:	4804      	ldr	r0, [pc, #16]	; (8006e44 <cmd_battery+0x24>)
 8006e34:	f002 face 	bl	80093d4 <iprintf>
}
 8006e38:	bf00      	nop
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	0800bf24 	.word	0x0800bf24

08006e48 <cmd_rfm>:


//========================================================================
int cmd_rfm(int argc, char *argv[])
//========================================================================
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
	//	RFM 명령 전송.
	printf("%s(%d)\n", __func__, __LINE__ );
 8006e52:	f240 3251 	movw	r2, #849	; 0x351
 8006e56:	4904      	ldr	r1, [pc, #16]	; (8006e68 <cmd_rfm+0x20>)
 8006e58:	4804      	ldr	r0, [pc, #16]	; (8006e6c <cmd_rfm+0x24>)
 8006e5a:	f002 fabb 	bl	80093d4 <iprintf>

	return 0;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	0800c9a0 	.word	0x0800c9a0
 8006e6c:	0800bf9c 	.word	0x0800bf9c

08006e70 <FLASH_If_Erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */
uint32_t FLASH_If_Erase(uint32_t start)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08a      	sub	sp, #40	; 0x28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t NbrOfPages = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t PageError = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 8006e86:	f7fb ff49 	bl	8002d1c <HAL_FLASH_Unlock>

  /* Get the sector where start the user flash area */
  NbrOfPages = (USER_FLASH_END_ADDRESS - start)/FLASH_PAGE_SIZE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f1c3 6300 	rsb	r3, r3, #134217728	; 0x8000000
 8006e90:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8006e94:	0adb      	lsrs	r3, r3, #11
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24

  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]
  pEraseInit.PageAddress = start;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	617b      	str	r3, [r7, #20]
  pEraseInit.Banks = FLASH_BANK_1;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	613b      	str	r3, [r7, #16]
  pEraseInit.NbPages = NbrOfPages;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	61bb      	str	r3, [r7, #24]
  status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8006ea8:	f107 021c 	add.w	r2, r7, #28
 8006eac:	f107 030c 	add.w	r3, r7, #12
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fc f81a 	bl	8002eec <HAL_FLASHEx_Erase>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8006ebe:	f7fb ff53 	bl	8002d68 <HAL_FLASH_Lock>

  if (status != HAL_OK)
 8006ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <FLASH_If_Erase+0x5e>
  {
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <FLASH_If_Erase+0x60>
  }

  return FLASHIF_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3728      	adds	r7, #40	; 0x28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 8006ed8:	b5b0      	push	{r4, r5, r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8006ee8:	f7fb ff18 	bl	8002d1c <HAL_FLASH_Unlock>

  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	e024      	b.n	8006f3c <FLASH_If_Write+0x64>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, *(uint32_t*)(p_source+i)) == HAL_OK)      
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	4413      	add	r3, r2
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2200      	movs	r2, #0
 8006efe:	461c      	mov	r4, r3
 8006f00:	4615      	mov	r5, r2
 8006f02:	4622      	mov	r2, r4
 8006f04:	462b      	mov	r3, r5
 8006f06:	68f9      	ldr	r1, [r7, #12]
 8006f08:	2002      	movs	r0, #2
 8006f0a:	f7fb fe97 	bl	8002c3c <HAL_FLASH_Program>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10e      	bne.n	8006f32 <FLASH_If_Write+0x5a>
    {
     /* Check the written value */
      if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	440b      	add	r3, r1
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d001      	beq.n	8006f2a <FLASH_If_Write+0x52>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 8006f26:	2302      	movs	r3, #2
 8006f28:	e013      	b.n	8006f52 <FLASH_If_Write+0x7a>
      }
      /* Increment FLASH destination address */
      destination += 4;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e001      	b.n	8006f36 <FLASH_If_Write+0x5e>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 8006f32:	2303      	movs	r3, #3
 8006f34:	e00d      	b.n	8006f52 <FLASH_If_Write+0x7a>
  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d203      	bcs.n	8006f4c <FLASH_If_Write+0x74>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4a05      	ldr	r2, [pc, #20]	; (8006f5c <FLASH_If_Write+0x84>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d9d2      	bls.n	8006ef2 <FLASH_If_Write+0x1a>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8006f4c:	f7fb ff0c 	bl	8002d68 <HAL_FLASH_Lock>

  return (FLASHIF_OK);
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bdb0      	pop	{r4, r5, r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	0803fffc 	.word	0x0803fffc

08006f60 <cmd_flRead>:


//========================================================================
int cmd_flRead( int argc, char *argv[] )
//========================================================================
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
	//	frd	[addr]
	uint32_t nAddr;

	switch ( argc )
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d109      	bne.n	8006f84 <cmd_flRead+0x24>
	{
	case 2:
		sscanf( argv[1], "%x", &nAddr );		//	nAddr
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	3304      	adds	r3, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f107 020c 	add.w	r2, r7, #12
 8006f7a:	4911      	ldr	r1, [pc, #68]	; (8006fc0 <cmd_flRead+0x60>)
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f002 fbb9 	bl	80096f4 <siscanf>
		break;
 8006f82:	bf00      	nop
	}

	if ( nAddr < ADDR_FLASH_BOOT || nAddr >= USER_FLASH_END_ADDRESS )
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f8a:	d303      	bcc.n	8006f94 <cmd_flRead+0x34>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4a0d      	ldr	r2, [pc, #52]	; (8006fc4 <cmd_flRead+0x64>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d908      	bls.n	8006fa6 <cmd_flRead+0x46>
	{
		printf( "%s(%d) - Out of Range : Addr(0x%08X)\n", __func__, __LINE__,
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f240 1211 	movw	r2, #273	; 0x111
 8006f9a:	490b      	ldr	r1, [pc, #44]	; (8006fc8 <cmd_flRead+0x68>)
 8006f9c:	480b      	ldr	r0, [pc, #44]	; (8006fcc <cmd_flRead+0x6c>)
 8006f9e:	f002 fa19 	bl	80093d4 <iprintf>
		        nAddr );
		return 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e007      	b.n	8006fb6 <cmd_flRead+0x56>
	}

	printf( "[0x%08X] : 0x%08X\n", nAddr, *(uint32_t*) nAddr );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	6812      	ldr	r2, [r2, #0]
 8006fac:	4619      	mov	r1, r3
 8006fae:	4808      	ldr	r0, [pc, #32]	; (8006fd0 <cmd_flRead+0x70>)
 8006fb0:	f002 fa10 	bl	80093d4 <iprintf>

	return 1;
 8006fb4:	2301      	movs	r3, #1
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	0800bfa4 	.word	0x0800bfa4
 8006fc4:	0803ffff 	.word	0x0803ffff
 8006fc8:	0800c9a8 	.word	0x0800c9a8
 8006fcc:	0800bfa8 	.word	0x0800bfa8
 8006fd0:	0800bfd0 	.word	0x0800bfd0

08006fd4 <cmd_flWrite>:

//========================================================================
int cmd_flWrite( int argc, char *argv[] )
//========================================================================
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
	//	fwr [addr] [value]
	uint32_t nAddr = ADDR_FLASH_IMGBOOT;
 8006fde:	4b19      	ldr	r3, [pc, #100]	; (8007044 <cmd_flWrite+0x70>)
 8006fe0:	60bb      	str	r3, [r7, #8]
	uint32_t nValue = 0x00;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]

	switch ( argc )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d00b      	beq.n	8007004 <cmd_flWrite+0x30>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d112      	bne.n	8007018 <cmd_flWrite+0x44>
	{
	case 3:
		sscanf( argv[2], "%x", &nAddr );		//	nAddr
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	3308      	adds	r3, #8
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f107 0208 	add.w	r2, r7, #8
 8006ffc:	4912      	ldr	r1, [pc, #72]	; (8007048 <cmd_flWrite+0x74>)
 8006ffe:	4618      	mov	r0, r3
 8007000:	f002 fb78 	bl	80096f4 <siscanf>
	case 2:
		sscanf( argv[1], "%x", &nAddr );		//	nAddr
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	3304      	adds	r3, #4
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f107 0208 	add.w	r2, r7, #8
 800700e:	490e      	ldr	r1, [pc, #56]	; (8007048 <cmd_flWrite+0x74>)
 8007010:	4618      	mov	r0, r3
 8007012:	f002 fb6f 	bl	80096f4 <siscanf>
		break;
 8007016:	bf00      	nop
	}

	if ( FLASH_If_Write( nAddr, (uint32_t*) nValue, 1 ) == FLASHIF_OK )
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	68f9      	ldr	r1, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff ff5a 	bl	8006ed8 <FLASH_If_Write>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d103      	bne.n	8007032 <cmd_flWrite+0x5e>
	{
		printf( "success\n" );
 800702a:	4808      	ldr	r0, [pc, #32]	; (800704c <cmd_flWrite+0x78>)
 800702c:	f002 fa6c 	bl	8009508 <puts>
 8007030:	e002      	b.n	8007038 <cmd_flWrite+0x64>
	}
	else
	{
		printf( "failed\n" );
 8007032:	4807      	ldr	r0, [pc, #28]	; (8007050 <cmd_flWrite+0x7c>)
 8007034:	f002 fa68 	bl	8009508 <puts>
	}

	return 1;
 8007038:	2301      	movs	r3, #1
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	08020000 	.word	0x08020000
 8007048:	0800bfa4 	.word	0x0800bfa4
 800704c:	0800bfe4 	.word	0x0800bfe4
 8007050:	0800bfec 	.word	0x0800bfec

08007054 <cmd_flErase>:

//========================================================================
int cmd_flErase( int argc, char *argv[] )
//========================================================================
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
	//	ferase [start addr(Hex)]
	uint32_t nAddr = ADDR_FLASH_IMGBOOT;
 800705e:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <cmd_flErase+0x80>)
 8007060:	60fb      	str	r3, [r7, #12]

	switch ( argc )
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d109      	bne.n	800707c <cmd_flErase+0x28>
	{
	case 2:
		sscanf( argv[1], "%x", &nAddr );		//	nAddr
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	3304      	adds	r3, #4
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f107 020c 	add.w	r2, r7, #12
 8007072:	4919      	ldr	r1, [pc, #100]	; (80070d8 <cmd_flErase+0x84>)
 8007074:	4618      	mov	r0, r3
 8007076:	f002 fb3d 	bl	80096f4 <siscanf>
		break;
 800707a:	bf00      	nop
	}

	if ( nAddr < ADDR_FLASH_IMGBOOT || nAddr >= USER_FLASH_END_ADDRESS )
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4a17      	ldr	r2, [pc, #92]	; (80070dc <cmd_flErase+0x88>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d903      	bls.n	800708c <cmd_flErase+0x38>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4a16      	ldr	r2, [pc, #88]	; (80070e0 <cmd_flErase+0x8c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d908      	bls.n	800709e <cmd_flErase+0x4a>
	{
		printf( "%s(%d) - Out of Range : Addr(0x%08X)\n", __func__, __LINE__,
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8007092:	4914      	ldr	r1, [pc, #80]	; (80070e4 <cmd_flErase+0x90>)
 8007094:	4814      	ldr	r0, [pc, #80]	; (80070e8 <cmd_flErase+0x94>)
 8007096:	f002 f99d 	bl	80093d4 <iprintf>
		        nAddr );
		return 0;
 800709a:	2300      	movs	r3, #0
 800709c:	e015      	b.n	80070ca <cmd_flErase+0x76>
	}

	printf( "%s(%d) - Addr(0x%08X)\n", __func__, __LINE__, nAddr );
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f240 124d 	movw	r2, #333	; 0x14d
 80070a4:	490f      	ldr	r1, [pc, #60]	; (80070e4 <cmd_flErase+0x90>)
 80070a6:	4811      	ldr	r0, [pc, #68]	; (80070ec <cmd_flErase+0x98>)
 80070a8:	f002 f994 	bl	80093d4 <iprintf>

	//========================================================================
	if ( FLASH_If_Erase( nAddr ) == FLASHIF_OK )
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff fede 	bl	8006e70 <FLASH_If_Erase>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d103      	bne.n	80070c2 <cmd_flErase+0x6e>
	{
		printf( "Success\n" );
 80070ba:	480d      	ldr	r0, [pc, #52]	; (80070f0 <cmd_flErase+0x9c>)
 80070bc:	f002 fa24 	bl	8009508 <puts>
 80070c0:	e002      	b.n	80070c8 <cmd_flErase+0x74>
	}
	else
	{
		printf( "Failed" );
 80070c2:	480c      	ldr	r0, [pc, #48]	; (80070f4 <cmd_flErase+0xa0>)
 80070c4:	f002 f986 	bl	80093d4 <iprintf>
	}
	//========================================================================

	return 1;
 80070c8:	2301      	movs	r3, #1
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	08020000 	.word	0x08020000
 80070d8:	0800bfa4 	.word	0x0800bfa4
 80070dc:	0801ffff 	.word	0x0801ffff
 80070e0:	0803ffff 	.word	0x0803ffff
 80070e4:	0800c9b4 	.word	0x0800c9b4
 80070e8:	0800bfa8 	.word	0x0800bfa8
 80070ec:	0800bff4 	.word	0x0800bff4
 80070f0:	0800c00c 	.word	0x0800c00c
 80070f4:	0800c014 	.word	0x0800c014

080070f8 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 8007102:	4b25      	ldr	r3, [pc, #148]	; (8007198 <Int2Str+0xa0>)
 8007104:	613b      	str	r3, [r7, #16]
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	2300      	movs	r3, #0
 800710c:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 800710e:	2300      	movs	r3, #0
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	e038      	b.n	8007186 <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	fbb2 f3f3 	udiv	r3, r2, r3
 800711c:	b2da      	uxtb	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	1c59      	adds	r1, r3, #1
 8007122:	60f9      	str	r1, [r7, #12]
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	440b      	add	r3, r1
 8007128:	3230      	adds	r2, #48	; 0x30
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	fbb3 f2f2 	udiv	r2, r3, r2
 8007136:	6939      	ldr	r1, [r7, #16]
 8007138:	fb01 f202 	mul.w	r2, r1, r2
 800713c:	1a9b      	subs	r3, r3, r2
 800713e:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	4a16      	ldr	r2, [pc, #88]	; (800719c <Int2Str+0xa4>)
 8007144:	fba2 2303 	umull	r2, r3, r2, r3
 8007148:	08db      	lsrs	r3, r3, #3
 800714a:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	4413      	add	r3, r2
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b30      	cmp	r3, #48	; 0x30
 8007158:	bf0c      	ite	eq
 800715a:	2301      	moveq	r3, #1
 800715c:	2300      	movne	r3, #0
 800715e:	b2da      	uxtb	r2, r3
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	bf0c      	ite	eq
 8007166:	2301      	moveq	r3, #1
 8007168:	2300      	movne	r3, #0
 800716a:	b2db      	uxtb	r3, r3
 800716c:	4013      	ands	r3, r2
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <Int2Str+0x82>
    {
      pos = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e002      	b.n	8007180 <Int2Str+0x88>
    }
    else
    {
      status++;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	3301      	adds	r3, #1
 800717e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	3301      	adds	r3, #1
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b09      	cmp	r3, #9
 800718a:	d9c3      	bls.n	8007114 <Int2Str+0x1c>
    }
  }
}
 800718c:	bf00      	nop
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	bc80      	pop	{r7}
 8007196:	4770      	bx	lr
 8007198:	3b9aca00 	.word	0x3b9aca00
 800719c:	cccccccd 	.word	0xcccccccd

080071a0 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b30      	cmp	r3, #48	; 0x30
 80071bc:	f040 80d7 	bne.w	800736e <Str2Int+0x1ce>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3301      	adds	r3, #1
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b78      	cmp	r3, #120	; 0x78
 80071c8:	d005      	beq.n	80071d6 <Str2Int+0x36>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3301      	adds	r3, #1
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b58      	cmp	r3, #88	; 0x58
 80071d2:	f040 80cc 	bne.w	800736e <Str2Int+0x1ce>
  {
    i = 2;
 80071d6:	2302      	movs	r3, #2
 80071d8:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80071da:	e057      	b.n	800728c <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	4413      	add	r3, r2
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b40      	cmp	r3, #64	; 0x40
 80071e6:	d905      	bls.n	80071f4 <Str2Int+0x54>
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	4413      	add	r3, r2
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b46      	cmp	r3, #70	; 0x46
 80071f2:	d917      	bls.n	8007224 <Str2Int+0x84>
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	4413      	add	r3, r2
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b60      	cmp	r3, #96	; 0x60
 80071fe:	d905      	bls.n	800720c <Str2Int+0x6c>
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	4413      	add	r3, r2
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b66      	cmp	r3, #102	; 0x66
 800720a:	d90b      	bls.n	8007224 <Str2Int+0x84>
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	4413      	add	r3, r2
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b2f      	cmp	r3, #47	; 0x2f
 8007216:	d936      	bls.n	8007286 <Str2Int+0xe6>
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	4413      	add	r3, r2
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b39      	cmp	r3, #57	; 0x39
 8007222:	d830      	bhi.n	8007286 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	440a      	add	r2, r1
 800722e:	7812      	ldrb	r2, [r2, #0]
 8007230:	2a2f      	cmp	r2, #47	; 0x2f
 8007232:	d90b      	bls.n	800724c <Str2Int+0xac>
 8007234:	6879      	ldr	r1, [r7, #4]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	440a      	add	r2, r1
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	2a39      	cmp	r2, #57	; 0x39
 800723e:	d805      	bhi.n	800724c <Str2Int+0xac>
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	440a      	add	r2, r1
 8007246:	7812      	ldrb	r2, [r2, #0]
 8007248:	3a30      	subs	r2, #48	; 0x30
 800724a:	e016      	b.n	800727a <Str2Int+0xda>
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	440a      	add	r2, r1
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	2a40      	cmp	r2, #64	; 0x40
 8007256:	d90b      	bls.n	8007270 <Str2Int+0xd0>
 8007258:	6879      	ldr	r1, [r7, #4]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	440a      	add	r2, r1
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	2a46      	cmp	r2, #70	; 0x46
 8007262:	d805      	bhi.n	8007270 <Str2Int+0xd0>
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	440a      	add	r2, r1
 800726a:	7812      	ldrb	r2, [r2, #0]
 800726c:	3a37      	subs	r2, #55	; 0x37
 800726e:	e004      	b.n	800727a <Str2Int+0xda>
 8007270:	6879      	ldr	r1, [r7, #4]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	440a      	add	r2, r1
 8007276:	7812      	ldrb	r2, [r2, #0]
 8007278:	3a57      	subs	r2, #87	; 0x57
 800727a:	4413      	add	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	3301      	adds	r3, #1
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	e002      	b.n	800728c <Str2Int+0xec>
        res = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	613b      	str	r3, [r7, #16]
        break;
 800728a:	e008      	b.n	800729e <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b0a      	cmp	r3, #10
 8007290:	d805      	bhi.n	800729e <Str2Int+0xfe>
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	4413      	add	r3, r2
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d19e      	bne.n	80071dc <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	4413      	add	r3, r2
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d167      	bne.n	800737a <Str2Int+0x1da>
    {
      *p_intnum = val;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	601a      	str	r2, [r3, #0]
      res = 1;
 80072b0:	2301      	movs	r3, #1
 80072b2:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 80072b4:	e061      	b.n	800737a <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	4413      	add	r3, r2
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d105      	bne.n	80072ce <Str2Int+0x12e>
      {
        *p_intnum = val;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 80072c8:	2301      	movs	r3, #1
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	e04c      	b.n	8007368 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	4413      	add	r3, r2
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2b6b      	cmp	r3, #107	; 0x6b
 80072d8:	d005      	beq.n	80072e6 <Str2Int+0x146>
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	4413      	add	r3, r2
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b4b      	cmp	r3, #75	; 0x4b
 80072e4:	d10b      	bne.n	80072fe <Str2Int+0x15e>
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d008      	beq.n	80072fe <Str2Int+0x15e>
      {
        val = val << 10;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	029b      	lsls	r3, r3, #10
 80072f0:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	601a      	str	r2, [r3, #0]
        res = 1;
 80072f8:	2301      	movs	r3, #1
 80072fa:	613b      	str	r3, [r7, #16]
 80072fc:	e034      	b.n	8007368 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	4413      	add	r3, r2
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b6d      	cmp	r3, #109	; 0x6d
 8007308:	d005      	beq.n	8007316 <Str2Int+0x176>
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	4413      	add	r3, r2
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b4d      	cmp	r3, #77	; 0x4d
 8007314:	d10b      	bne.n	800732e <Str2Int+0x18e>
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <Str2Int+0x18e>
      {
        val = val << 20;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	051b      	lsls	r3, r3, #20
 8007320:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	601a      	str	r2, [r3, #0]
        res = 1;
 8007328:	2301      	movs	r3, #1
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	e01c      	b.n	8007368 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	4413      	add	r3, r2
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b2f      	cmp	r3, #47	; 0x2f
 8007338:	d913      	bls.n	8007362 <Str2Int+0x1c2>
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	4413      	add	r3, r2
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b39      	cmp	r3, #57	; 0x39
 8007344:	d80d      	bhi.n	8007362 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	4619      	mov	r1, r3
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	4413      	add	r3, r2
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	440b      	add	r3, r1
 800735c:	3b30      	subs	r3, #48	; 0x30
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e002      	b.n	8007368 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 8007362:	2300      	movs	r3, #0
 8007364:	613b      	str	r3, [r7, #16]
        break;
 8007366:	e008      	b.n	800737a <Str2Int+0x1da>
      }
      i++;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	3301      	adds	r3, #1
 800736c:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b0a      	cmp	r3, #10
 8007372:	d802      	bhi.n	800737a <Str2Int+0x1da>
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d19d      	bne.n	80072b6 <Str2Int+0x116>
    }
  }

  return res;
 800737a:	693b      	ldr	r3, [r7, #16]
}
 800737c:	4618      	mov	r0, r3
 800737e:	371c      	adds	r7, #28
 8007380:	46bd      	mov	sp, r7
 8007382:	bc80      	pop	{r7}
 8007384:	4770      	bx	lr
	...

08007388 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	if( pUartY == &huart1 )
 8007390:	4b0e      	ldr	r3, [pc, #56]	; (80073cc <Serial_PutString+0x44>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a0e      	ldr	r2, [pc, #56]	; (80073d0 <Serial_PutString+0x48>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d013      	beq.n	80073c2 <Serial_PutString+0x3a>
	{
		//	YModem이 Console Port인경우 return
		return ;
	}

  uint16_t length = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 800739e:	e002      	b.n	80073a6 <Serial_PutString+0x1e>
  {
    length++;
 80073a0:	89fb      	ldrh	r3, [r7, #14]
 80073a2:	3301      	adds	r3, #1
 80073a4:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 80073a6:	89fb      	ldrh	r3, [r7, #14]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	4413      	add	r3, r2
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f6      	bne.n	80073a0 <Serial_PutString+0x18>
  }
  HAL_UART_Transmit(pUartY, p_string, length, TX_TIMEOUT);
 80073b2:	4b06      	ldr	r3, [pc, #24]	; (80073cc <Serial_PutString+0x44>)
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	89fa      	ldrh	r2, [r7, #14]
 80073b8:	2364      	movs	r3, #100	; 0x64
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	f7fe fbd7 	bl	8005b6e <HAL_UART_Transmit>
 80073c0:	e000      	b.n	80073c4 <Serial_PutString+0x3c>
		return ;
 80073c2:	bf00      	nop
}
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000130 	.word	0x20000130
 80073d0:	20000310 	.word	0x20000310

080073d4 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	71fb      	strb	r3, [r7, #7]
  return HAL_UART_Transmit(pUartY, &param, 1, TX_TIMEOUT);
 80073de:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <Serial_PutByte+0x24>)
 80073e0:	6818      	ldr	r0, [r3, #0]
 80073e2:	1df9      	adds	r1, r7, #7
 80073e4:	2364      	movs	r3, #100	; 0x64
 80073e6:	2201      	movs	r2, #1
 80073e8:	f7fe fbc1 	bl	8005b6e <HAL_UART_Transmit>
 80073ec:	4603      	mov	r3, r0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000130 	.word	0x20000130

080073fc <SetYmodemUart>:
  */

//=============================================================================
void	SetYmodemUart( UART_HandleTypeDef *_pUart )
//=============================================================================
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	pUartY = _pUart;
 8007404:	4a03      	ldr	r2, [pc, #12]	; (8007414 <SetYmodemUart+0x18>)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6013      	str	r3, [r2, #0]
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr
 8007414:	20000130 	.word	0x20000130

08007418 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
int SerialDownload(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08a      	sub	sp, #40	; 0x28
 800741c:	af02      	add	r7, sp, #8
  uint8_t number[11] = {0};
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	f107 0318 	add.w	r3, r7, #24
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	f8c3 2003 	str.w	r2, [r3, #3]
  uint32_t size = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	613b      	str	r3, [r7, #16]
  COM_StatusTypeDef result;

  Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 8007432:	482e      	ldr	r0, [pc, #184]	; (80074ec <SerialDownload+0xd4>)
 8007434:	f7ff ffa8 	bl	8007388 <Serial_PutString>
  result = Ymodem_Receive( &size );
 8007438:	f107 0310 	add.w	r3, r7, #16
 800743c:	4618      	mov	r0, r3
 800743e:	f001 fc33 	bl	8008ca8 <Ymodem_Receive>
 8007442:	4603      	mov	r3, r0
 8007444:	77fb      	strb	r3, [r7, #31]
  if (result == COM_OK)
 8007446:	7ffb      	ldrb	r3, [r7, #31]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d132      	bne.n	80074b2 <SerialDownload+0x9a>
  {
    Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 800744c:	4828      	ldr	r0, [pc, #160]	; (80074f0 <SerialDownload+0xd8>)
 800744e:	f7ff ff9b 	bl	8007388 <Serial_PutString>
    Serial_PutString(aFileName);
 8007452:	4828      	ldr	r0, [pc, #160]	; (80074f4 <SerialDownload+0xdc>)
 8007454:	f7ff ff98 	bl	8007388 <Serial_PutString>
    Int2Str(number, size);
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	f107 0314 	add.w	r3, r7, #20
 800745e:	4611      	mov	r1, r2
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff fe49 	bl	80070f8 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 8007466:	4824      	ldr	r0, [pc, #144]	; (80074f8 <SerialDownload+0xe0>)
 8007468:	f7ff ff8e 	bl	8007388 <Serial_PutString>
    Serial_PutString(number);
 800746c:	f107 0314 	add.w	r3, r7, #20
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff ff89 	bl	8007388 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 8007476:	4821      	ldr	r0, [pc, #132]	; (80074fc <SerialDownload+0xe4>)
 8007478:	f7ff ff86 	bl	8007388 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 800747c:	4820      	ldr	r0, [pc, #128]	; (8007500 <SerialDownload+0xe8>)
 800747e:	f7ff ff83 	bl	8007388 <Serial_PutString>

	//========================================================================
    //	Image Download Complete.
	char buf[10];
	buf[0] = 0xAA;
 8007482:	23aa      	movs	r3, #170	; 0xaa
 8007484:	713b      	strb	r3, [r7, #4]
	buf[1] = 0x55;
 8007486:	2355      	movs	r3, #85	; 0x55
 8007488:	717b      	strb	r3, [r7, #5]
	buf[2] = (size >> 16) & 0xFF;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	0c1b      	lsrs	r3, r3, #16
 800748e:	b2db      	uxtb	r3, r3
 8007490:	71bb      	strb	r3, [r7, #6]
	buf[3] = (size >> 8) & 0xFF;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	0a1b      	lsrs	r3, r3, #8
 8007496:	b2db      	uxtb	r3, r3
 8007498:	71fb      	strb	r3, [r7, #7]
	buf[4] = (size ) & 0xFF;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	723b      	strb	r3, [r7, #8]
    MB85_HAL_WriteBytes( &hi2c2, 0xA0, AddrExtUpgrMGN1, (uint8_t *)buf, 5 );
 80074a0:	1d3b      	adds	r3, r7, #4
 80074a2:	2205      	movs	r2, #5
 80074a4:	9200      	str	r2, [sp, #0]
 80074a6:	2220      	movs	r2, #32
 80074a8:	21a0      	movs	r1, #160	; 0xa0
 80074aa:	4816      	ldr	r0, [pc, #88]	; (8007504 <SerialDownload+0xec>)
 80074ac:	f000 f870 	bl	8007590 <MB85_HAL_WriteBytes>
 80074b0:	e017      	b.n	80074e2 <SerialDownload+0xca>

	//========================================================================
  }
  else if (result == COM_LIMIT)
 80074b2:	7ffb      	ldrb	r3, [r7, #31]
 80074b4:	2b05      	cmp	r3, #5
 80074b6:	d103      	bne.n	80074c0 <SerialDownload+0xa8>
  {
    Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 80074b8:	4813      	ldr	r0, [pc, #76]	; (8007508 <SerialDownload+0xf0>)
 80074ba:	f7ff ff65 	bl	8007388 <Serial_PutString>
 80074be:	e010      	b.n	80074e2 <SerialDownload+0xca>
  }
  else if (result == COM_DATA)
 80074c0:	7ffb      	ldrb	r3, [r7, #31]
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d103      	bne.n	80074ce <SerialDownload+0xb6>
  {
    Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 80074c6:	4811      	ldr	r0, [pc, #68]	; (800750c <SerialDownload+0xf4>)
 80074c8:	f7ff ff5e 	bl	8007388 <Serial_PutString>
 80074cc:	e009      	b.n	80074e2 <SerialDownload+0xca>
  }
  else if (result == COM_ABORT)
 80074ce:	7ffb      	ldrb	r3, [r7, #31]
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d103      	bne.n	80074dc <SerialDownload+0xc4>
  {
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 80074d4:	480e      	ldr	r0, [pc, #56]	; (8007510 <SerialDownload+0xf8>)
 80074d6:	f7ff ff57 	bl	8007388 <Serial_PutString>
 80074da:	e002      	b.n	80074e2 <SerialDownload+0xca>
  }
  else
  {
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 80074dc:	480d      	ldr	r0, [pc, #52]	; (8007514 <SerialDownload+0xfc>)
 80074de:	f7ff ff53 	bl	8007388 <Serial_PutString>
  }

  return result;
 80074e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	0800c01c 	.word	0x0800c01c
 80074f0:	0800c058 	.word	0x0800c058
 80074f4:	200004cc 	.word	0x200004cc
 80074f8:	0800c0ac 	.word	0x0800c0ac
 80074fc:	0800c0b8 	.word	0x0800c0b8
 8007500:	0800c0c4 	.word	0x0800c0c4
 8007504:	2000027c 	.word	0x2000027c
 8007508:	0800c0dc 	.word	0x0800c0dc
 800750c:	0800c11c 	.word	0x0800c11c
 8007510:	0800c138 	.word	0x0800c138
 8007514:	0800c150 	.word	0x0800c150

08007518 <SerialUpload>:
  * @brief  Upload a file via serial port.
  * @param  None
  * @retval None
  */
int SerialUpload(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	70fb      	strb	r3, [r7, #3]

  int result = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	607b      	str	r3, [r7, #4]

  Serial_PutString((uint8_t *)"\n\n\rSelect Receive File\n\r");
 8007526:	4814      	ldr	r0, [pc, #80]	; (8007578 <SerialUpload+0x60>)
 8007528:	f7ff ff2e 	bl	8007388 <Serial_PutString>

  HAL_UART_Receive(pUartY, &status, 1, RX_TIMEOUT);
 800752c:	4b13      	ldr	r3, [pc, #76]	; (800757c <SerialUpload+0x64>)
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	1cf9      	adds	r1, r7, #3
 8007532:	f04f 33ff 	mov.w	r3, #4294967295
 8007536:	2201      	movs	r2, #1
 8007538:	f7fe fbab 	bl	8005c92 <HAL_UART_Receive>
  if ( status == CRC16)
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	2b43      	cmp	r3, #67	; 0x43
 8007540:	d115      	bne.n	800756e <SerialUpload+0x56>
  {
    /* Transmit the flash image through ymodem protocol */
    status = Ymodem_Transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 8007542:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8007546:	490e      	ldr	r1, [pc, #56]	; (8007580 <SerialUpload+0x68>)
 8007548:	480e      	ldr	r0, [pc, #56]	; (8007584 <SerialUpload+0x6c>)
 800754a:	f001 fcd3 	bl	8008ef4 <Ymodem_Transmit>
 800754e:	4603      	mov	r3, r0
 8007550:	70fb      	strb	r3, [r7, #3]

    if (status != 0)
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <SerialUpload+0x4c>
    {
      Serial_PutString((uint8_t *)"\n\rError Occurred while Transmitting File\n\r");
 8007558:	480b      	ldr	r0, [pc, #44]	; (8007588 <SerialUpload+0x70>)
 800755a:	f7ff ff15 	bl	8007388 <Serial_PutString>
      result = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	e004      	b.n	800756e <SerialUpload+0x56>
    }
    else
    {
      Serial_PutString((uint8_t *)"\n\rFile uploaded successfully \n\r");
 8007564:	4809      	ldr	r0, [pc, #36]	; (800758c <SerialUpload+0x74>)
 8007566:	f7ff ff0f 	bl	8007388 <Serial_PutString>
      result = 1;
 800756a:	2301      	movs	r3, #1
 800756c:	607b      	str	r3, [r7, #4]
    }
  }

  return result;
 800756e:	687b      	ldr	r3, [r7, #4]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	0800c170 	.word	0x0800c170
 800757c:	20000130 	.word	0x20000130
 8007580:	0800c18c 	.word	0x0800c18c
 8007584:	08004000 	.word	0x08004000
 8007588:	0800c1a4 	.word	0x0800c1a4
 800758c:	0800c1d0 	.word	0x0800c1d0

08007590 <MB85_HAL_WriteBytes>:
  * @retval
  */
//========================================================================
int MB85_HAL_WriteBytes( I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t TxBufferSize )
//========================================================================
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08a      	sub	sp, #40	; 0x28
 8007594:	af04      	add	r7, sp, #16
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	607b      	str	r3, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	817b      	strh	r3, [r7, #10]
 800759e:	4613      	mov	r3, r2
 80075a0:	813b      	strh	r3, [r7, #8]
	int TimeOut;

	TimeOut = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
	while ( HAL_I2C_Mem_Write( hi2c, (uint16_t)DevAddress, (uint16_t)MemAddress, I2C_MEMADD_SIZE_8BIT, pData, (uint16_t)TxBufferSize, 10 ) != HAL_OK && TimeOut < 5 ) TimeOut++;
 80075a6:	e002      	b.n	80075ae <MB85_HAL_WriteBytes+0x1e>
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	3301      	adds	r3, #1
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	893a      	ldrh	r2, [r7, #8]
 80075b0:	8979      	ldrh	r1, [r7, #10]
 80075b2:	230a      	movs	r3, #10
 80075b4:	9302      	str	r3, [sp, #8]
 80075b6:	8c3b      	ldrh	r3, [r7, #32]
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	2301      	movs	r3, #1
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7fc f85b 	bl	800367c <HAL_I2C_Mem_Write>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <MB85_HAL_WriteBytes+0x42>
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	ddea      	ble.n	80075a8 <MB85_HAL_WriteBytes+0x18>

	HAL_Delay(30);
 80075d2:	201e      	movs	r0, #30
 80075d4:	f7fa fbae 	bl	8001d34 <HAL_Delay>

	 if(TimeOut == 5)
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b05      	cmp	r3, #5
 80075dc:	d101      	bne.n	80075e2 <MB85_HAL_WriteBytes+0x52>
    {
        return 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	e000      	b.n	80075e4 <MB85_HAL_WriteBytes+0x54>
    }
    else
    {
        return 1;
 80075e2:	2301      	movs	r3, #1
    }
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <MB85_HAL_ReadBytes>:


//========================================================================
int MB85_HAL_ReadBytes( I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t RxBufferSize )
//========================================================================
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	; 0x28
 80075f0:	af04      	add	r7, sp, #16
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	607b      	str	r3, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	817b      	strh	r3, [r7, #10]
 80075fa:	4613      	mov	r3, r2
 80075fc:	813b      	strh	r3, [r7, #8]
	int TimeOut;

	TimeOut = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
	while ( HAL_I2C_Mem_Read( hi2c, (uint16_t)DevAddress, (uint16_t)MemAddress, I2C_MEMADD_SIZE_8BIT, pData, (uint16_t)RxBufferSize, 10 ) != HAL_OK && TimeOut < 5 ) TimeOut++;
 8007602:	e002      	b.n	800760a <MB85_HAL_ReadBytes+0x1e>
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	3301      	adds	r3, #1
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	893a      	ldrh	r2, [r7, #8]
 800760c:	8979      	ldrh	r1, [r7, #10]
 800760e:	230a      	movs	r3, #10
 8007610:	9302      	str	r3, [sp, #8]
 8007612:	8c3b      	ldrh	r3, [r7, #32]
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	2301      	movs	r3, #1
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7fc f927 	bl	8003870 <HAL_I2C_Mem_Read>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <MB85_HAL_ReadBytes+0x42>
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2b04      	cmp	r3, #4
 800762c:	ddea      	ble.n	8007604 <MB85_HAL_ReadBytes+0x18>

    if(TimeOut == 5)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b05      	cmp	r3, #5
 8007632:	d101      	bne.n	8007638 <MB85_HAL_ReadBytes+0x4c>
    {
        return 0;
 8007634:	2300      	movs	r3, #0
 8007636:	e000      	b.n	800763a <MB85_HAL_ReadBytes+0x4e>
    }
    else
    {
        return 1;
 8007638:	2301      	movs	r3, #1
    }
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <TestNVRAM>:


//========================================================================
void TestNVRAM( I2C_HandleTypeDef *hi2c )
//========================================================================
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b0b6      	sub	sp, #216	; 0xd8
 8007648:	af02      	add	r7, sp, #8
 800764a:	6078      	str	r0, [r7, #4]
	char d[100]={7,5,10};
 800764c:	4b2a      	ldr	r3, [pc, #168]	; (80076f8 <TestNVRAM+0xb4>)
 800764e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007650:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007654:	2260      	movs	r2, #96	; 0x60
 8007656:	2100      	movs	r1, #0
 8007658:	4618      	mov	r0, r3
 800765a:	f001 feb3 	bl	80093c4 <memset>
	char c[100]={20,20,20};
 800765e:	4b27      	ldr	r3, [pc, #156]	; (80076fc <TestNVRAM+0xb8>)
 8007660:	60bb      	str	r3, [r7, #8]
 8007662:	f107 030c 	add.w	r3, r7, #12
 8007666:	2260      	movs	r2, #96	; 0x60
 8007668:	2100      	movs	r1, #0
 800766a:	4618      	mov	r0, r3
 800766c:	f001 feaa 	bl	80093c4 <memset>

	printf("%s - 0x%02X, 0x%02X, 0x%02X\r\n", __func__, c[0],c[1],c[2]);
 8007670:	7a3b      	ldrb	r3, [r7, #8]
 8007672:	461a      	mov	r2, r3
 8007674:	7a7b      	ldrb	r3, [r7, #9]
 8007676:	4619      	mov	r1, r3
 8007678:	7abb      	ldrb	r3, [r7, #10]
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	460b      	mov	r3, r1
 800767e:	4920      	ldr	r1, [pc, #128]	; (8007700 <TestNVRAM+0xbc>)
 8007680:	4820      	ldr	r0, [pc, #128]	; (8007704 <TestNVRAM+0xc0>)
 8007682:	f001 fea7 	bl	80093d4 <iprintf>
	MB85_HAL_ReadBytes(hi2c, 0xA0, 0x100, (uint8_t *)c, 3);
 8007686:	f107 0308 	add.w	r3, r7, #8
 800768a:	2203      	movs	r2, #3
 800768c:	9200      	str	r2, [sp, #0]
 800768e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007692:	21a0      	movs	r1, #160	; 0xa0
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff ffa9 	bl	80075ec <MB85_HAL_ReadBytes>
	printf("%s - 0x%02X, 0x%02X, 0x%02X\r\n", __func__, c[0],c[1],c[2]);
 800769a:	7a3b      	ldrb	r3, [r7, #8]
 800769c:	461a      	mov	r2, r3
 800769e:	7a7b      	ldrb	r3, [r7, #9]
 80076a0:	4619      	mov	r1, r3
 80076a2:	7abb      	ldrb	r3, [r7, #10]
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	460b      	mov	r3, r1
 80076a8:	4915      	ldr	r1, [pc, #84]	; (8007700 <TestNVRAM+0xbc>)
 80076aa:	4816      	ldr	r0, [pc, #88]	; (8007704 <TestNVRAM+0xc0>)
 80076ac:	f001 fe92 	bl	80093d4 <iprintf>

	MB85_HAL_WriteBytes(hi2c, 0xA0, 0x100, (uint8_t *)d, 3);
 80076b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80076b4:	2203      	movs	r2, #3
 80076b6:	9200      	str	r2, [sp, #0]
 80076b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076bc:	21a0      	movs	r1, #160	; 0xa0
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff ff66 	bl	8007590 <MB85_HAL_WriteBytes>

	MB85_HAL_ReadBytes(hi2c, 0xA0, 0x100, (uint8_t *)c, 3);
 80076c4:	f107 0308 	add.w	r3, r7, #8
 80076c8:	2203      	movs	r2, #3
 80076ca:	9200      	str	r2, [sp, #0]
 80076cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076d0:	21a0      	movs	r1, #160	; 0xa0
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7ff ff8a 	bl	80075ec <MB85_HAL_ReadBytes>
	printf("%s - 0x%02X, 0x%02X, 0x%02X\r\n", __func__, c[0],c[1],c[2]);
 80076d8:	7a3b      	ldrb	r3, [r7, #8]
 80076da:	461a      	mov	r2, r3
 80076dc:	7a7b      	ldrb	r3, [r7, #9]
 80076de:	4619      	mov	r1, r3
 80076e0:	7abb      	ldrb	r3, [r7, #10]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	460b      	mov	r3, r1
 80076e6:	4906      	ldr	r1, [pc, #24]	; (8007700 <TestNVRAM+0xbc>)
 80076e8:	4806      	ldr	r0, [pc, #24]	; (8007704 <TestNVRAM+0xc0>)
 80076ea:	f001 fe73 	bl	80093d4 <iprintf>


}
 80076ee:	bf00      	nop
 80076f0:	37d0      	adds	r7, #208	; 0xd0
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	000a0507 	.word	0x000a0507
 80076fc:	00141414 	.word	0x00141414
 8007700:	0800c9c0 	.word	0x0800c9c0
 8007704:	0800c674 	.word	0x0800c674

08007708 <cmd_nvramRead>:


//========================================================================
int cmd_nvramRead		( int argc, char * argv[] )
//========================================================================
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af02      	add	r7, sp, #8
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
    //	eepr [address]
    int 	nAddr = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
    uint8_t	buf[10];

    switch ( argc )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b02      	cmp	r3, #2
 800771a:	d109      	bne.n	8007730 <cmd_nvramRead+0x28>
    {
    case 2:		sscanf( argv[1], "%d", &nAddr );		//	cmd [address]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	3304      	adds	r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f107 0214 	add.w	r2, r7, #20
 8007726:	490d      	ldr	r1, [pc, #52]	; (800775c <cmd_nvramRead+0x54>)
 8007728:	4618      	mov	r0, r3
 800772a:	f001 ffe3 	bl	80096f4 <siscanf>
        break;
 800772e:	bf00      	nop
    }

	MB85_HAL_ReadBytes(	&hi2c2,
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	b29a      	uxth	r2, r3
 8007734:	f107 0308 	add.w	r3, r7, #8
 8007738:	2101      	movs	r1, #1
 800773a:	9100      	str	r1, [sp, #0]
 800773c:	21a0      	movs	r1, #160	; 0xa0
 800773e:	4808      	ldr	r0, [pc, #32]	; (8007760 <cmd_nvramRead+0x58>)
 8007740:	f7ff ff54 	bl	80075ec <MB85_HAL_ReadBytes>
						MB85RC64_ID,	//	0xA0
						nAddr, (uint8_t *)buf, 1);

	printf("[0x%04X] 0x%02X\n", nAddr, buf[0]);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	7a3a      	ldrb	r2, [r7, #8]
 8007748:	4619      	mov	r1, r3
 800774a:	4806      	ldr	r0, [pc, #24]	; (8007764 <cmd_nvramRead+0x5c>)
 800774c:	f001 fe42 	bl	80093d4 <iprintf>
}
 8007750:	bf00      	nop
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	0800c694 	.word	0x0800c694
 8007760:	2000027c 	.word	0x2000027c
 8007764:	0800c698 	.word	0x0800c698

08007768 <cmd_nvramWrite>:

//========================================================================
int cmd_nvramWrite	( int argc, char * argv[] )
//========================================================================
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08a      	sub	sp, #40	; 0x28
 800776c:	af02      	add	r7, sp, #8
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
    //	eepw [address] [value]
    int 	nAddr = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
    int		nVal = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	61bb      	str	r3, [r7, #24]
    uint8_t	buf[10];

    switch ( argc )
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d00b      	beq.n	8007798 <cmd_nvramWrite+0x30>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b03      	cmp	r3, #3
 8007784:	d112      	bne.n	80077ac <cmd_nvramWrite+0x44>
    {
    case 3:		sscanf( argv[2], "%d", &nVal );			//	cmd [address] [value]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	3308      	adds	r3, #8
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f107 0218 	add.w	r2, r7, #24
 8007790:	4915      	ldr	r1, [pc, #84]	; (80077e8 <cmd_nvramWrite+0x80>)
 8007792:	4618      	mov	r0, r3
 8007794:	f001 ffae 	bl	80096f4 <siscanf>
    case 2:		sscanf( argv[1], "%d", &nAddr );		//	cmd [address]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	3304      	adds	r3, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f107 021c 	add.w	r2, r7, #28
 80077a2:	4911      	ldr	r1, [pc, #68]	; (80077e8 <cmd_nvramWrite+0x80>)
 80077a4:	4618      	mov	r0, r3
 80077a6:	f001 ffa5 	bl	80096f4 <siscanf>
        break;
 80077aa:	bf00      	nop
    }

    buf[0] = nVal;
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	733b      	strb	r3, [r7, #12]

    printf("[0x%04X] 0x%02X\n", nAddr, buf[0]);
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	7b3a      	ldrb	r2, [r7, #12]
 80077b6:	4619      	mov	r1, r3
 80077b8:	480c      	ldr	r0, [pc, #48]	; (80077ec <cmd_nvramWrite+0x84>)
 80077ba:	f001 fe0b 	bl	80093d4 <iprintf>

	MB85_HAL_WriteBytes(&hi2c2,
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	f107 030c 	add.w	r3, r7, #12
 80077c6:	2101      	movs	r1, #1
 80077c8:	9100      	str	r1, [sp, #0]
 80077ca:	21a0      	movs	r1, #160	; 0xa0
 80077cc:	4808      	ldr	r0, [pc, #32]	; (80077f0 <cmd_nvramWrite+0x88>)
 80077ce:	f7ff fedf 	bl	8007590 <MB85_HAL_WriteBytes>
						MB85RC64_ID,	//0xA0,
						nAddr, (uint8_t *)buf, 1);

	printf("[0x%04X] 0x%02X\n", nAddr, buf[0]);
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	7b3a      	ldrb	r2, [r7, #12]
 80077d6:	4619      	mov	r1, r3
 80077d8:	4804      	ldr	r0, [pc, #16]	; (80077ec <cmd_nvramWrite+0x84>)
 80077da:	f001 fdfb 	bl	80093d4 <iprintf>
}
 80077de:	bf00      	nop
 80077e0:	4618      	mov	r0, r3
 80077e2:	3720      	adds	r7, #32
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	0800c694 	.word	0x0800c694
 80077ec:	0800c698 	.word	0x0800c698
 80077f0:	2000027c 	.word	0x2000027c

080077f4 <cmd_nvramDump>:


//========================================================================
int cmd_nvramDump		( int argc, char * argv[] )
//========================================================================
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b0c8      	sub	sp, #288	; 0x120
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80077fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007802:	6018      	str	r0, [r3, #0]
 8007804:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007808:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800780c:	6019      	str	r1, [r3, #0]
    //	eepr [address]
	int		nAddr = 0;
 800780e:	2300      	movs	r3, #0
 8007810:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int 	nSize = 256;
 8007814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007818:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    int		i;

    uint8_t	buf[256];		//	Page

    switch ( argc )
 800781c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007820:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d013      	beq.n	8007852 <cmd_nvramDump+0x5e>
 800782a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800782e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b03      	cmp	r3, #3
 8007836:	d11a      	bne.n	800786e <cmd_nvramDump+0x7a>
    {
    case 3:		sscanf( argv[2], "%d", &nSize );		//	cmd [address] [Size]
 8007838:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800783c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800784a:	4929      	ldr	r1, [pc, #164]	; (80078f0 <cmd_nvramDump+0xfc>)
 800784c:	4618      	mov	r0, r3
 800784e:	f001 ff51 	bl	80096f4 <siscanf>
    case 2:		sscanf( argv[1], "%d", &nAddr );		//	cmd [address]
 8007852:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007856:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3304      	adds	r3, #4
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007864:	4922      	ldr	r1, [pc, #136]	; (80078f0 <cmd_nvramDump+0xfc>)
 8007866:	4618      	mov	r0, r3
 8007868:	f001 ff44 	bl	80096f4 <siscanf>
        break;
 800786c:	bf00      	nop
    }

	MB85_HAL_ReadBytes(&hi2c2, 0xA0, nAddr, (uint8_t *)buf, nSize);
 800786e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007872:	b29a      	uxth	r2, r3
 8007874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007878:	b29b      	uxth	r3, r3
 800787a:	f107 010c 	add.w	r1, r7, #12
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	460b      	mov	r3, r1
 8007882:	21a0      	movs	r1, #160	; 0xa0
 8007884:	481b      	ldr	r0, [pc, #108]	; (80078f4 <cmd_nvramDump+0x100>)
 8007886:	f7ff feb1 	bl	80075ec <MB85_HAL_ReadBytes>

	printf("[0x%04X] size : %d\n", nAddr, nSize);
 800788a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800788e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8007892:	4619      	mov	r1, r3
 8007894:	4818      	ldr	r0, [pc, #96]	; (80078f8 <cmd_nvramDump+0x104>)
 8007896:	f001 fd9d 	bl	80093d4 <iprintf>

	for( i = 0; i < nSize; i++ )
 800789a:	2300      	movs	r3, #0
 800789c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80078a0:	e01a      	b.n	80078d8 <cmd_nvramDump+0xe4>
	{
		printf("0x%02X ", buf[i]);
 80078a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80078a6:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80078aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ae:	4413      	add	r3, r2
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	4619      	mov	r1, r3
 80078b4:	4811      	ldr	r0, [pc, #68]	; (80078fc <cmd_nvramDump+0x108>)
 80078b6:	f001 fd8d 	bl	80093d4 <iprintf>
		if ( ((i+1)%16) == 0 ) printf("\n");
 80078ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078be:	3301      	adds	r3, #1
 80078c0:	f003 030f 	and.w	r3, r3, #15
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <cmd_nvramDump+0xda>
 80078c8:	200a      	movs	r0, #10
 80078ca:	f001 fd9b 	bl	8009404 <putchar>
	for( i = 0; i < nSize; i++ )
 80078ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d2:	3301      	adds	r3, #1
 80078d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80078d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80078e0:	429a      	cmp	r2, r3
 80078e2:	dbde      	blt.n	80078a2 <cmd_nvramDump+0xae>
	}
}
 80078e4:	bf00      	nop
 80078e6:	4618      	mov	r0, r3
 80078e8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	0800c694 	.word	0x0800c694
 80078f4:	2000027c 	.word	0x2000027c
 80078f8:	0800c6ac 	.word	0x0800c6ac
 80078fc:	0800c6c0 	.word	0x0800c6c0

08007900 <RFMOccPaStart>:
// Function

//========================================================================
void RFMOccPaStart( void )
//========================================================================
{
 8007900:	b598      	push	{r3, r4, r7, lr}
 8007902:	af00      	add	r7, sp, #0
	//	RFMBase -> RFM 명령 전송 : UART2
	printf("%s(%d)\n", __func__, __LINE__ );
 8007904:	2227      	movs	r2, #39	; 0x27
 8007906:	490a      	ldr	r1, [pc, #40]	; (8007930 <RFMOccPaStart+0x30>)
 8007908:	480a      	ldr	r0, [pc, #40]	; (8007934 <RFMOccPaStart+0x34>)
 800790a:	f001 fd63 	bl	80093d4 <iprintf>

	HAL_UART_Transmit( &huart2, (uint8_t *)sCmdOccPaStart, strlen(sCmdOccPaStart), 100 );
 800790e:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <RFMOccPaStart+0x38>)
 8007910:	681c      	ldr	r4, [r3, #0]
 8007912:	4b09      	ldr	r3, [pc, #36]	; (8007938 <RFMOccPaStart+0x38>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f7f8 fc8e 	bl	8000238 <strlen>
 800791c:	4603      	mov	r3, r0
 800791e:	b29a      	uxth	r2, r3
 8007920:	2364      	movs	r3, #100	; 0x64
 8007922:	4621      	mov	r1, r4
 8007924:	4805      	ldr	r0, [pc, #20]	; (800793c <RFMOccPaStart+0x3c>)
 8007926:	f7fe f922 	bl	8005b6e <HAL_UART_Transmit>
}
 800792a:	bf00      	nop
 800792c:	bd98      	pop	{r3, r4, r7, pc}
 800792e:	bf00      	nop
 8007930:	0800c9cc 	.word	0x0800c9cc
 8007934:	0800c6d8 	.word	0x0800c6d8
 8007938:	20000134 	.word	0x20000134
 800793c:	20000350 	.word	0x20000350

08007940 <RFMOccPaStop>:

//========================================================================
void RFMOccPaStop( void )
//========================================================================
{
 8007940:	b598      	push	{r3, r4, r7, lr}
 8007942:	af00      	add	r7, sp, #0
	//	RFMBase -> RFM 명령 전송 : UART2
	printf("%s(%d)\n", __func__, __LINE__ );
 8007944:	2231      	movs	r2, #49	; 0x31
 8007946:	490a      	ldr	r1, [pc, #40]	; (8007970 <RFMOccPaStop+0x30>)
 8007948:	480a      	ldr	r0, [pc, #40]	; (8007974 <RFMOccPaStop+0x34>)
 800794a:	f001 fd43 	bl	80093d4 <iprintf>

	HAL_UART_Transmit( &huart2, (uint8_t *)sCmdOccPaStop, strlen(sCmdOccPaStop), 100 );
 800794e:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <RFMOccPaStop+0x38>)
 8007950:	681c      	ldr	r4, [r3, #0]
 8007952:	4b09      	ldr	r3, [pc, #36]	; (8007978 <RFMOccPaStop+0x38>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	f7f8 fc6e 	bl	8000238 <strlen>
 800795c:	4603      	mov	r3, r0
 800795e:	b29a      	uxth	r2, r3
 8007960:	2364      	movs	r3, #100	; 0x64
 8007962:	4621      	mov	r1, r4
 8007964:	4805      	ldr	r0, [pc, #20]	; (800797c <RFMOccPaStop+0x3c>)
 8007966:	f7fe f902 	bl	8005b6e <HAL_UART_Transmit>
}
 800796a:	bf00      	nop
 800796c:	bd98      	pop	{r3, r4, r7, pc}
 800796e:	bf00      	nop
 8007970:	0800c9dc 	.word	0x0800c9dc
 8007974:	0800c6d8 	.word	0x0800c6d8
 8007978:	20000138 	.word	0x20000138
 800797c:	20000350 	.word	0x20000350

08007980 <cmd_occ>:


//========================================================================
int cmd_occ(int argc)
//========================================================================
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
	//	RFMBase -> RFM 명령 전송 : UART2
	printf("%s(%d)\n", __func__, __LINE__ );
 8007988:	223c      	movs	r2, #60	; 0x3c
 800798a:	4927      	ldr	r1, [pc, #156]	; (8007a28 <cmd_occ+0xa8>)
 800798c:	4827      	ldr	r0, [pc, #156]	; (8007a2c <cmd_occ+0xac>)
 800798e:	f001 fd21 	bl	80093d4 <iprintf>
    static int sOccFlag = 0;
        
    static int sProCnt = 0;
        
            
    if(!uDI_getMasterIn) //접점이 ON 되면 동작.
 8007992:	4b27      	ldr	r3, [pc, #156]	; (8007a30 <cmd_occ+0xb0>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d11d      	bne.n	80079d6 <cmd_occ+0x56>
    {
        
        bOnOff = 1;
 800799a:	4b26      	ldr	r3, [pc, #152]	; (8007a34 <cmd_occ+0xb4>)
 800799c:	2201      	movs	r2, #1
 800799e:	601a      	str	r2, [r3, #0]
            
         sOccFlag = 1;
 80079a0:	4b25      	ldr	r3, [pc, #148]	; (8007a38 <cmd_occ+0xb8>)
 80079a2:	2201      	movs	r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
            
        sCnt++;
 80079a6:	4b25      	ldr	r3, [pc, #148]	; (8007a3c <cmd_occ+0xbc>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3301      	adds	r3, #1
 80079ac:	4a23      	ldr	r2, [pc, #140]	; (8007a3c <cmd_occ+0xbc>)
 80079ae:	6013      	str	r3, [r2, #0]
            
        if(!(sCnt%10))
 80079b0:	4b22      	ldr	r3, [pc, #136]	; (8007a3c <cmd_occ+0xbc>)
 80079b2:	6819      	ldr	r1, [r3, #0]
 80079b4:	4b22      	ldr	r3, [pc, #136]	; (8007a40 <cmd_occ+0xc0>)
 80079b6:	fb83 2301 	smull	r2, r3, r3, r1
 80079ba:	109a      	asrs	r2, r3, #2
 80079bc:	17cb      	asrs	r3, r1, #31
 80079be:	1ad2      	subs	r2, r2, r3
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	1aca      	subs	r2, r1, r3
 80079ca:	2a00      	cmp	r2, #0
 80079cc:	d106      	bne.n	80079dc <cmd_occ+0x5c>
        {
            printf("---Master Input \n\r" ); 
 80079ce:	481d      	ldr	r0, [pc, #116]	; (8007a44 <cmd_occ+0xc4>)
 80079d0:	f001 fd00 	bl	80093d4 <iprintf>
 80079d4:	e002      	b.n	80079dc <cmd_occ+0x5c>
        }
    }
    else
    {
        bOnOff = 0;
 80079d6:	4b17      	ldr	r3, [pc, #92]	; (8007a34 <cmd_occ+0xb4>)
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]
//    {
//    case 2:		sscanf( argv[1], "%d", &bOnOff );		//	cmd [1/0]
//        break;
//    }

    if ( (bOnOff == 1) && (sOccFlag == 1) )
 80079dc:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <cmd_occ+0xb4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d106      	bne.n	80079f2 <cmd_occ+0x72>
 80079e4:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <cmd_occ+0xb8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d102      	bne.n	80079f2 <cmd_occ+0x72>
    {
		RFMOccPaStart();
 80079ec:	f7ff ff88 	bl	8007900 <RFMOccPaStart>
 80079f0:	e015      	b.n	8007a1e <cmd_occ+0x9e>
    }
    else if ( (bOnOff == 0) && (sOccFlag == 1) )	
 80079f2:	4b10      	ldr	r3, [pc, #64]	; (8007a34 <cmd_occ+0xb4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d111      	bne.n	8007a1e <cmd_occ+0x9e>
 80079fa:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <cmd_occ+0xb8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d10d      	bne.n	8007a1e <cmd_occ+0x9e>
    {
        sProCnt++;
 8007a02:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <cmd_occ+0xc8>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3301      	adds	r3, #1
 8007a08:	4a0f      	ldr	r2, [pc, #60]	; (8007a48 <cmd_occ+0xc8>)
 8007a0a:	6013      	str	r3, [r2, #0]
        
        if(sProCnt > 3)
 8007a0c:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <cmd_occ+0xc8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	dd02      	ble.n	8007a1a <cmd_occ+0x9a>
        {
            sOccFlag = 0;
 8007a14:	4b08      	ldr	r3, [pc, #32]	; (8007a38 <cmd_occ+0xb8>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
        }
        RFMOccPaStop();
 8007a1a:	f7ff ff91 	bl	8007940 <RFMOccPaStop>
    }

	return 0;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	0800c9ec 	.word	0x0800c9ec
 8007a2c:	0800c6d8 	.word	0x0800c6d8
 8007a30:	20000004 	.word	0x20000004
 8007a34:	2000050c 	.word	0x2000050c
 8007a38:	20000510 	.word	0x20000510
 8007a3c:	20000514 	.word	0x20000514
 8007a40:	66666667 	.word	0x66666667
 8007a44:	0800c6e0 	.word	0x0800c6e0
 8007a48:	20000518 	.word	0x20000518

08007a4c <onBCCCheck>:

#include "naranja_boron.h"
//========================================================================
uint16_t onBCCCheck(unsigned char *payload, int crc_length)
//========================================================================
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
	int crc_counter = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
	//unsigned short bcc_check;
	unsigned char bccCheck[2] ={0};
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	813b      	strh	r3, [r7, #8]

	if ((crc_length % 2) == 0) // odd case
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d120      	bne.n	8007aaa <onBCCCheck+0x5e>
	{
		for (crc_counter = 1; crc_counter< crc_length; crc_counter++)
 8007a68:	2301      	movs	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	e018      	b.n	8007aa0 <onBCCCheck+0x54>
		{
			if (crc_counter % 2) {
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d008      	beq.n	8007a8a <onBCCCheck+0x3e>
				bccCheck[0] ^= payload[crc_counter];
 8007a78:	7a3a      	ldrb	r2, [r7, #8]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6879      	ldr	r1, [r7, #4]
 8007a7e:	440b      	add	r3, r1
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	4053      	eors	r3, r2
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	723b      	strb	r3, [r7, #8]
 8007a88:	e007      	b.n	8007a9a <onBCCCheck+0x4e>
			} else {
				bccCheck[1] ^= payload[crc_counter];
 8007a8a:	7a7a      	ldrb	r2, [r7, #9]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	440b      	add	r3, r1
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	4053      	eors	r3, r2
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	727b      	strb	r3, [r7, #9]
		for (crc_counter = 1; crc_counter< crc_length; crc_counter++)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	dbe2      	blt.n	8007a6e <onBCCCheck+0x22>
 8007aa8:	e028      	b.n	8007afc <onBCCCheck+0xb0>
			}
		}
	}
	else // even case
	{
		for (crc_counter = 1; crc_counter< crc_length - 1; crc_counter++)
 8007aaa:	2301      	movs	r3, #1
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	e018      	b.n	8007ae2 <onBCCCheck+0x96>
		{
			if (crc_counter % 2) {
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d008      	beq.n	8007acc <onBCCCheck+0x80>
				bccCheck[0] ^= payload[crc_counter];
 8007aba:	7a3a      	ldrb	r2, [r7, #8]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	440b      	add	r3, r1
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	4053      	eors	r3, r2
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	723b      	strb	r3, [r7, #8]
 8007aca:	e007      	b.n	8007adc <onBCCCheck+0x90>
			} else {
				bccCheck[1] ^= payload[crc_counter];
 8007acc:	7a7a      	ldrb	r2, [r7, #9]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6879      	ldr	r1, [r7, #4]
 8007ad2:	440b      	add	r3, r1
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	4053      	eors	r3, r2
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	727b      	strb	r3, [r7, #9]
		for (crc_counter = 1; crc_counter< crc_length - 1; crc_counter++)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	dbe1      	blt.n	8007ab0 <onBCCCheck+0x64>
			}
		}
		bccCheck[1] ^= payload[crc_counter];
 8007aec:	7a7a      	ldrb	r2, [r7, #9]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	440b      	add	r3, r1
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	4053      	eors	r3, r2
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	727b      	strb	r3, [r7, #9]
	}
	return ((bccCheck[0] << 8) | bccCheck[1]);
 8007afc:	7a3b      	ldrb	r3, [r7, #8]
 8007afe:	021b      	lsls	r3, r3, #8
 8007b00:	b21a      	sxth	r2, r3
 8007b02:	7a7b      	ldrb	r3, [r7, #9]
 8007b04:	b21b      	sxth	r3, r3
 8007b06:	4313      	orrs	r3, r2
 8007b08:	b21b      	sxth	r3, r3
 8007b0a:	b29b      	uxth	r3, r3
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bc80      	pop	{r7}
 8007b14:	4770      	bx	lr
	...

08007b18 <SendRS485>:


//========================================================================
int	SendRS485 ( char *bufTx, int nSize,int nCh )
//========================================================================
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]

	int idx;
	int ret;

	//========================================================================
    if(nCh == 3)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d110      	bne.n	8007b4c <SendRS485+0x34>
    {
        //	Send RS485
        rts_high( &huart3 );
 8007b2a:	4814      	ldr	r0, [pc, #80]	; (8007b7c <SendRS485+0x64>)
 8007b2c:	f000 fcc6 	bl	80084bc <rts_high>

        ret = HAL_UART_Transmit( &huart3, (uint8_t *)bufTx, nSize, 0xFFFF );
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b38:	68f9      	ldr	r1, [r7, #12]
 8007b3a:	4810      	ldr	r0, [pc, #64]	; (8007b7c <SendRS485+0x64>)
 8007b3c:	f7fe f817 	bl	8005b6e <HAL_UART_Transmit>
 8007b40:	4603      	mov	r3, r0
 8007b42:	617b      	str	r3, [r7, #20]

        rts_low( &huart3 );
 8007b44:	480d      	ldr	r0, [pc, #52]	; (8007b7c <SendRS485+0x64>)
 8007b46:	f000 fce1 	bl	800850c <rts_low>
 8007b4a:	e012      	b.n	8007b72 <SendRS485+0x5a>
    }
    else if(nCh == 5)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b05      	cmp	r3, #5
 8007b50:	d10f      	bne.n	8007b72 <SendRS485+0x5a>
    {
        //	Send RS485
        rts_high( &huart5 );
 8007b52:	480b      	ldr	r0, [pc, #44]	; (8007b80 <SendRS485+0x68>)
 8007b54:	f000 fcb2 	bl	80084bc <rts_high>

        ret = HAL_UART_Transmit( &huart5, (uint8_t *)bufTx, nSize, 0xFFFF );
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b60:	68f9      	ldr	r1, [r7, #12]
 8007b62:	4807      	ldr	r0, [pc, #28]	; (8007b80 <SendRS485+0x68>)
 8007b64:	f7fe f803 	bl	8005b6e <HAL_UART_Transmit>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	617b      	str	r3, [r7, #20]

        rts_low( &huart5 );
 8007b6c:	4804      	ldr	r0, [pc, #16]	; (8007b80 <SendRS485+0x68>)
 8007b6e:	f000 fccd 	bl	800850c <rts_low>

//=============================================================================
#endif	//	stm32f207
//=============================================================================

	return nSize;
 8007b72:	68bb      	ldr	r3, [r7, #8]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20000390 	.word	0x20000390
 8007b80:	200002d0 	.word	0x200002d0

08007b84 <SendSD_3>:

//========================================================================
void SendSD_3( const FRAME_SDR *pSdr,int nCh )		//	CH3 - TCMS
//========================================================================
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08c      	sub	sp, #48	; 0x30
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
    static int sRssCnt = 0;
    
	FRAME_SD sdfrm;
	memset( &sdfrm, 0, sizeof( sdfrm ) );
 8007b8e:	f107 030c 	add.w	r3, r7, #12
 8007b92:	2211      	movs	r2, #17
 8007b94:	2100      	movs	r1, #0
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 fc14 	bl	80093c4 <memset>

	sdfrm.nSTX				=	eSTX;	//	0x02;		//	STX
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	733b      	strb	r3, [r7, #12]

	SD_t	*pSd = &sdfrm.sd;
 8007ba0:	f107 030c 	add.w	r3, r7, #12
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

	pSd->cSD				=	eSDTcms;				//	SD
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007baa:	2231      	movs	r2, #49	; 0x31
 8007bac:	701a      	strb	r2, [r3, #0]
	pSd->c0x22				=	0x22;
 8007bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb0:	2222      	movs	r2, #34	; 0x22
 8007bb2:	705a      	strb	r2, [r3, #1]
	pSd->bRFMFault			=	(g_bRFMOk)?0:1;			//	RFM 모듈통신상태.
 8007bb4:	4b30      	ldr	r3, [pc, #192]	; (8007c78 <SendSD_3+0xf4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bf0c      	ite	eq
 8007bbc:	2301      	moveq	r3, #1
 8007bbe:	2300      	movne	r3, #0
 8007bc0:	b2d9      	uxtb	r1, r3
 8007bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc4:	7893      	ldrb	r3, [r2, #2]
 8007bc6:	f361 0300 	bfi	r3, r1, #0, #1
 8007bca:	7093      	strb	r3, [r2, #2]
	pSd->bLEDOn				=	bCurLedCtr;				//	getLightOn();	//	조명점등상태.
 8007bcc:	4b2b      	ldr	r3, [pc, #172]	; (8007c7c <SendSD_3+0xf8>)
 8007bce:	7819      	ldrb	r1, [r3, #0]
 8007bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd2:	78d3      	ldrb	r3, [r2, #3]
 8007bd4:	f361 0341 	bfi	r3, r1, #1, #1
 8007bd8:	70d3      	strb	r3, [r2, #3]
	pSd->bPAOn				=	uAudioPlayFlag;			//	방송출력상태.
 8007bda:	4b29      	ldr	r3, [pc, #164]	; (8007c80 <SendSD_3+0xfc>)
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	b2d9      	uxtb	r1, r3
 8007be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007be6:	78d3      	ldrb	r3, [r2, #3]
 8007be8:	f361 0300 	bfi	r3, r1, #0, #1
 8007bec:	70d3      	strb	r3, [r2, #3]
	pSd->nBatVal			=	getChargeRate();		//	베터리 잔량 0 ~ 100 %
 8007bee:	f7f9 f8a3 	bl	8000d38 <getChargeRate>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	711a      	strb	r2, [r3, #4]

	pSd->nVerX0_00			=	0;		//	v01.01
 8007bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bfc:	7a93      	ldrb	r3, [r2, #10]
 8007bfe:	f36f 1307 	bfc	r3, #4, #4
 8007c02:	7293      	strb	r3, [r2, #10]
	pSd->nVer0X_00			=	APP_MAIN_VER;	//	2;
 8007c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c06:	7a93      	ldrb	r3, [r2, #10]
 8007c08:	2102      	movs	r1, #2
 8007c0a:	f361 0303 	bfi	r3, r1, #0, #4
 8007c0e:	7293      	strb	r3, [r2, #10]
	pSd->nVer00_X0			=	0;;
 8007c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c12:	7ad3      	ldrb	r3, [r2, #11]
 8007c14:	f36f 1307 	bfc	r3, #4, #4
 8007c18:	72d3      	strb	r3, [r2, #11]
	pSd->nVer00_0X			=	APP_SUB_VER;	//	0;
 8007c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c1c:	7ad3      	ldrb	r3, [r2, #11]
 8007c1e:	f36f 0303 	bfc	r3, #0, #4
 8007c22:	72d3      	strb	r3, [r2, #11]

	sdfrm.nETX				=	eETX;	//	0x03;		//	ETX
 8007c24:	2303      	movs	r3, #3
 8007c26:	76bb      	strb	r3, [r7, #26]

	uint16_t u16BCC = onBCCCheck( (char *)&sdfrm, sizeof(FRAME_SD) - 2 );
 8007c28:	f107 030c 	add.w	r3, r7, #12
 8007c2c:	210f      	movs	r1, #15
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff ff0c 	bl	8007a4c <onBCCCheck>
 8007c34:	4603      	mov	r3, r0
 8007c36:	857b      	strh	r3, [r7, #42]	; 0x2a

	sdfrm.nBCC1				=	(u16BCC >> 8) & 0xFF;	//	BCC 1
 8007c38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007c3a:	0a1b      	lsrs	r3, r3, #8
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	76fb      	strb	r3, [r7, #27]
	sdfrm.nBCC2				=	(u16BCC & 0xFF);		//	BCC 2
 8007c42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	773b      	strb	r3, [r7, #28]

	uint32_t nTxStart, nTxEnd;

	nTxStart = HAL_GetTick();
 8007c48:	f7fa f86a 	bl	8001d20 <HAL_GetTick>
 8007c4c:	6278      	str	r0, [r7, #36]	; 0x24
	SendRS485((char *) &sdfrm, sizeof( FRAME_SD ),nCh );
 8007c4e:	f107 030c 	add.w	r3, r7, #12
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	2111      	movs	r1, #17
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ff5e 	bl	8007b18 <SendRS485>
	nTxEnd = HAL_GetTick();
 8007c5c:	f7fa f860 	bl	8001d20 <HAL_GetTick>
 8007c60:	6238      	str	r0, [r7, #32]

	//Dump( "Rx : ", pSdr, sizeof( FRAME_SDR ) );

	Dump( "Tx : ",(char *) &sdfrm, sizeof( FRAME_SD ) );
 8007c62:	f107 030c 	add.w	r3, r7, #12
 8007c66:	2211      	movs	r2, #17
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4806      	ldr	r0, [pc, #24]	; (8007c84 <SendSD_3+0x100>)
 8007c6c:	f000 f9b6 	bl	8007fdc <Dump>

//	printf( "%s : Rx Last(%08d) / Tx Start(%08d) / Tx End(%08d) / delta(%08d)\n", __func__,
//			g_nStampRx3, nTxStart, nTxEnd, (nTxStart - g_nStampRx3) );
}
 8007c70:	bf00      	nop
 8007c72:	3730      	adds	r7, #48	; 0x30
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	20000410 	.word	0x20000410
 8007c7c:	200003f0 	.word	0x200003f0
 8007c80:	2000040c 	.word	0x2000040c
 8007c84:	0800c6f4 	.word	0x0800c6f4

08007c88 <SendSD_5>:
//========================================================================
void SendSD_5( const FRAME_SDR *pSdr,int nCh )			//	CH5 - TRS
//========================================================================
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08a      	sub	sp, #40	; 0x28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]

	FRAME_TRSD sdfrm;
	memset( &sdfrm, 0, sizeof( sdfrm ) );
 8007c92:	f107 0308 	add.w	r3, r7, #8
 8007c96:	220e      	movs	r2, #14
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f001 fb92 	bl	80093c4 <memset>

	sdfrm.nSTX				=	eSTX;	//	0x02;		//	STX
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	723b      	strb	r3, [r7, #8]

	TRSD_t	*pSd = &sdfrm.sd;
 8007ca4:	f107 0308 	add.w	r3, r7, #8
 8007ca8:	3301      	adds	r3, #1
 8007caa:	627b      	str	r3, [r7, #36]	; 0x24

	pSd->cSD				=	eSDTrs;					//	SD
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	2232      	movs	r2, #50	; 0x32
 8007cb0:	701a      	strb	r2, [r3, #0]

	pSd->c0x22				=	0x22;
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	2222      	movs	r2, #34	; 0x22
 8007cb6:	705a      	strb	r2, [r3, #1]
	pSd->bRFMFault			=	(g_bRFMOk)?0:1;			//	RFM 모듈통신상태.
 8007cb8:	4b17      	ldr	r3, [pc, #92]	; (8007d18 <SendSD_5+0x90>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	bf0c      	ite	eq
 8007cc0:	2301      	moveq	r3, #1
 8007cc2:	2300      	movne	r3, #0
 8007cc4:	b2d9      	uxtb	r1, r3
 8007cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc8:	7893      	ldrb	r3, [r2, #2]
 8007cca:	f361 0300 	bfi	r3, r1, #0, #1
 8007cce:	7093      	strb	r3, [r2, #2]

	sdfrm.nETX				=	eETX;	//	0x03;		//	ETX
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	74fb      	strb	r3, [r7, #19]

	uint16_t u16BCC = onBCCCheck( (char *)&sdfrm, sizeof(FRAME_TRSD) - 2 );
 8007cd4:	f107 0308 	add.w	r3, r7, #8
 8007cd8:	210c      	movs	r1, #12
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7ff feb6 	bl	8007a4c <onBCCCheck>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	847b      	strh	r3, [r7, #34]	; 0x22

	sdfrm.nBCC1				=	(u16BCC >> 8) & 0xFF;	//	BCC 1
 8007ce4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007ce6:	0a1b      	lsrs	r3, r3, #8
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	753b      	strb	r3, [r7, #20]
	sdfrm.nBCC2				=	(u16BCC & 0xFF);		//	BCC 2
 8007cee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	757b      	strb	r3, [r7, #21]

	uint32_t nTxStart, nTxEnd;

	nTxStart = HAL_GetTick();
 8007cf4:	f7fa f814 	bl	8001d20 <HAL_GetTick>
 8007cf8:	61f8      	str	r0, [r7, #28]
	SendRS485((char *) &sdfrm, sizeof( FRAME_TRSD ),nCh );
 8007cfa:	f107 0308 	add.w	r3, r7, #8
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	210e      	movs	r1, #14
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff ff08 	bl	8007b18 <SendRS485>
	nTxEnd = HAL_GetTick();
 8007d08:	f7fa f80a 	bl	8001d20 <HAL_GetTick>
 8007d0c:	61b8      	str	r0, [r7, #24]

	//Dump( "Tx : ",(char *) &sdfrm, sizeof( FRAME_SD ) );

//	printf( "%s : Rx Last(%08d) / Tx Start(%08d) / Tx End(%08d) / delta(%08d)\n", __func__,
//			g_nStampRx3, nTxStart, nTxEnd, (nTxStart - g_nStampRx3) );
}
 8007d0e:	bf00      	nop
 8007d10:	3728      	adds	r7, #40	; 0x28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20000410 	.word	0x20000410

08007d1c <ProcessFrameSDR>:
}

//========================================================================
void ProcessFrameSDR( const uint8_t *pBuf, int nLen,int nCh )
//========================================================================
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b0c8      	sub	sp, #288	; 0x120
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007d2a:	6018      	str	r0, [r3, #0]
 8007d2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007d34:	6019      	str	r1, [r3, #0]
 8007d36:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d3a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d3e:	601a      	str	r2, [r3, #0]
	static sOccFlag = 0;
	//========================================================================
	//	SD 상태정보 응답.
    
    if(nCh == 3)
 8007d40:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d44:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d16a      	bne.n	8007e24 <ProcessFrameSDR+0x108>
    {
    	//	CH3		-	TCMS

    	//	SD 전송.
        SendSD_3( (FRAME_SDR *)pBuf, nCh);
 8007d4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d52:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8007d56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007d5e:	6811      	ldr	r1, [r2, #0]
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	f7ff ff0f 	bl	8007b84 <SendSD_3>

    	//========================================================================
    	//	SDR 처리
    	const FRAME_SDR	*pFrameSdr = (const FRAME_SDR *)pBuf;
 8007d66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    	const SDR_t		*pSdr = &pFrameSdr->sdr;
 8007d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d78:	3301      	adds	r3, #1
 8007d7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    	static int s_nTrainNo = -1;

    	//	편성번호값에 따른 편성번호 설정.
    	if ( pSdr->bTrainNoVld )
 8007d7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d82:	7a1b      	ldrb	r3, [r3, #8]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d02a      	beq.n	8007de4 <ProcessFrameSDR+0xc8>
    	{
    		//	열차번호 설정
    		if ( s_nTrainNo != pSdr->nTrainNo )
 8007d8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d92:	7a5b      	ldrb	r3, [r3, #9]
 8007d94:	461a      	mov	r2, r3
 8007d96:	4b47      	ldr	r3, [pc, #284]	; (8007eb4 <ProcessFrameSDR+0x198>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d022      	beq.n	8007de4 <ProcessFrameSDR+0xc8>
			{
    	    	printf("Set Train No: %d\n", pSdr->nTrainNo );
 8007d9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007da2:	7a5b      	ldrb	r3, [r3, #9]
 8007da4:	4619      	mov	r1, r3
 8007da6:	4844      	ldr	r0, [pc, #272]	; (8007eb8 <ProcessFrameSDR+0x19c>)
 8007da8:	f001 fb14 	bl	80093d4 <iprintf>

    	    	char sBuf[256];
    	    	sprintf(sBuf, "ts %d\r", pSdr->nTrainNo );
 8007dac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007db0:	7a5b      	ldrb	r3, [r3, #9]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f107 0310 	add.w	r3, r7, #16
 8007db8:	4940      	ldr	r1, [pc, #256]	; (8007ebc <ProcessFrameSDR+0x1a0>)
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 fc7a 	bl	80096b4 <siprintf>

    	    	printf(sBuf);
 8007dc0:	f107 0310 	add.w	r3, r7, #16
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 fb05 	bl	80093d4 <iprintf>

    	    	//	RFMBase -> RFM 명령 전송 : UART2
    	    	HAL_UART_Transmit( &huart2, (uint8_t *)sBuf, strlen(sBuf), 100 );
 8007dca:	f107 0310 	add.w	r3, r7, #16
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7f8 fa32 	bl	8000238 <strlen>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	f107 0110 	add.w	r1, r7, #16
 8007ddc:	2364      	movs	r3, #100	; 0x64
 8007dde:	4838      	ldr	r0, [pc, #224]	; (8007ec0 <ProcessFrameSDR+0x1a4>)
 8007de0:	f7fd fec5 	bl	8005b6e <HAL_UART_Transmit>
			}
    	}

    	if(pSdr->nOCC_StartFlag == 0x01)
 8007de4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007de8:	7a9b      	ldrb	r3, [r3, #10]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d108      	bne.n	8007e00 <ProcessFrameSDR+0xe4>
    	{
    		sOccFlag = 1;
 8007dee:	4b35      	ldr	r3, [pc, #212]	; (8007ec4 <ProcessFrameSDR+0x1a8>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	601a      	str	r2, [r3, #0]

    		RFMOccPaStart();
 8007df4:	f7ff fd84 	bl	8007900 <RFMOccPaStart>
    		printf("485_RFMOccPaStart \n");
 8007df8:	4833      	ldr	r0, [pc, #204]	; (8007ec8 <ProcessFrameSDR+0x1ac>)
 8007dfa:	f001 fb85 	bl	8009508 <puts>
	}
*/


	//========================================================================
}
 8007dfe:	e053      	b.n	8007ea8 <ProcessFrameSDR+0x18c>
    	else if((sOccFlag == 0x01) && (pSdr->nOCC_StartFlag == 0x00))
 8007e00:	4b30      	ldr	r3, [pc, #192]	; (8007ec4 <ProcessFrameSDR+0x1a8>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d14f      	bne.n	8007ea8 <ProcessFrameSDR+0x18c>
 8007e08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e0c:	7a9b      	ldrb	r3, [r3, #10]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d14a      	bne.n	8007ea8 <ProcessFrameSDR+0x18c>
    		sOccFlag = 0;
 8007e12:	4b2c      	ldr	r3, [pc, #176]	; (8007ec4 <ProcessFrameSDR+0x1a8>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]
    		RFMOccPaStop();
 8007e18:	f7ff fd92 	bl	8007940 <RFMOccPaStop>
    		printf("485_RFMOccPaStop \n");
 8007e1c:	482b      	ldr	r0, [pc, #172]	; (8007ecc <ProcessFrameSDR+0x1b0>)
 8007e1e:	f001 fb73 	bl	8009508 <puts>
}
 8007e22:	e041      	b.n	8007ea8 <ProcessFrameSDR+0x18c>
    else if(nCh == 5)
 8007e24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b05      	cmp	r3, #5
 8007e30:	d13a      	bne.n	8007ea8 <ProcessFrameSDR+0x18c>
        SendSD_5( (FRAME_SDR *)pBuf, nCh);
 8007e32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e36:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8007e3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007e42:	6811      	ldr	r1, [r2, #0]
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	f7ff ff1f 	bl	8007c88 <SendSD_5>
    	const FRAME_TRSDR	*pFrameSdr = (const FRAME_TRSDR *)pBuf;
 8007e4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    	const TRSDR_t		*pSdr = &pFrameSdr->sdr;
 8007e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    	if( s_nTrsStat != pSdr->bTRSFault )
 8007e62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e66:	789b      	ldrb	r3, [r3, #2]
 8007e68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	461a      	mov	r2, r3
 8007e70:	4b17      	ldr	r3, [pc, #92]	; (8007ed0 <ProcessFrameSDR+0x1b4>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d017      	beq.n	8007ea8 <ProcessFrameSDR+0x18c>
    		if ( pSdr->bTRSFault )
 8007e78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e7c:	789b      	ldrb	r3, [r3, #2]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <ProcessFrameSDR+0x174>
    			printf("TRS SD : TRS Fault\n");
 8007e88:	4812      	ldr	r0, [pc, #72]	; (8007ed4 <ProcessFrameSDR+0x1b8>)
 8007e8a:	f001 fb3d 	bl	8009508 <puts>
 8007e8e:	e002      	b.n	8007e96 <ProcessFrameSDR+0x17a>
    			printf("TRS SD : TRS OK\n");
 8007e90:	4811      	ldr	r0, [pc, #68]	; (8007ed8 <ProcessFrameSDR+0x1bc>)
 8007e92:	f001 fb39 	bl	8009508 <puts>
    		s_nTrsStat = pSdr->bTRSFault;
 8007e96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e9a:	789b      	ldrb	r3, [r3, #2]
 8007e9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <ProcessFrameSDR+0x1b4>)
 8007ea6:	601a      	str	r2, [r3, #0]
}
 8007ea8:	bf00      	nop
 8007eaa:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	2000013c 	.word	0x2000013c
 8007eb8:	0800c704 	.word	0x0800c704
 8007ebc:	0800c718 	.word	0x0800c718
 8007ec0:	20000350 	.word	0x20000350
 8007ec4:	200006a8 	.word	0x200006a8
 8007ec8:	0800c720 	.word	0x0800c720
 8007ecc:	0800c734 	.word	0x0800c734
 8007ed0:	20000140 	.word	0x20000140
 8007ed4:	0800c748 	.word	0x0800c748
 8007ed8:	0800c75c 	.word	0x0800c75c

08007edc <ProcessFrame>:

//========================================================================
void ProcessFrame( const uint8_t *pBuf, int nLen,int nCh )
//========================================================================
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af02      	add	r7, sp, #8
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
	FRAME_SDR	*pSdr	=	(FRAME_SDR *)pBuf;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	617b      	str	r3, [r7, #20]
	FRAME_SD	*pSd	=	(FRAME_SD *)pBuf;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	613b      	str	r3, [r7, #16]

	if ( nLen == sizeof( FRAME_SDR ) && pSdr->sdr.cSDR == eSDRTcms )
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2b10      	cmp	r3, #16
 8007ef4:	d114      	bne.n	8007f20 <ProcessFrame+0x44>
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	2b21      	cmp	r3, #33	; 0x21
 8007efc:	d110      	bne.n	8007f20 <ProcessFrame+0x44>
	{
		//HAL_Delay(10);
		printf( "[%d] %s(%d) - TCMS SDR Recv ( %d )\n", HAL_GetTick(),  __func__, __LINE__, nLen );
 8007efe:	f7f9 ff0f 	bl	8001d20 <HAL_GetTick>
 8007f02:	4601      	mov	r1, r0
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 8007f0c:	4a16      	ldr	r2, [pc, #88]	; (8007f68 <ProcessFrame+0x8c>)
 8007f0e:	4817      	ldr	r0, [pc, #92]	; (8007f6c <ProcessFrame+0x90>)
 8007f10:	f001 fa60 	bl	80093d4 <iprintf>
		ProcessFrameSDR( pBuf, nLen, 3 );
 8007f14:	2203      	movs	r2, #3
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f7ff feff 	bl	8007d1c <ProcessFrameSDR>
 8007f1e:	e01f      	b.n	8007f60 <ProcessFrame+0x84>
	}
    else if ( nLen == sizeof( FRAME_TRSDR ) && pSdr->sdr.cSDR == eSDRTrs )
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2b0e      	cmp	r3, #14
 8007f24:	d114      	bne.n	8007f50 <ProcessFrame+0x74>
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	785b      	ldrb	r3, [r3, #1]
 8007f2a:	2b22      	cmp	r3, #34	; 0x22
 8007f2c:	d110      	bne.n	8007f50 <ProcessFrame+0x74>
    {
		printf( "[%d] %s(%d) - TRS SDR Recv ( %d )\n", HAL_GetTick(),  __func__, __LINE__, nLen );
 8007f2e:	f7f9 fef7 	bl	8001d20 <HAL_GetTick>
 8007f32:	4601      	mov	r1, r0
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	f240 13b9 	movw	r3, #441	; 0x1b9
 8007f3c:	4a0a      	ldr	r2, [pc, #40]	; (8007f68 <ProcessFrame+0x8c>)
 8007f3e:	480c      	ldr	r0, [pc, #48]	; (8007f70 <ProcessFrame+0x94>)
 8007f40:	f001 fa48 	bl	80093d4 <iprintf>
        ProcessFrameSDR( pBuf, nLen, 5 );
 8007f44:	2205      	movs	r2, #5
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff fee7 	bl	8007d1c <ProcessFrameSDR>
 8007f4e:	e007      	b.n	8007f60 <ProcessFrame+0x84>
////		printf( "[%d] %s(%d) - SD Recv ( %d )\n", HAL_GetTick(), __func__, __LINE__, length );
////		ProcessFrameSD( pbuf, length );
//	}
	else
	{
		printf( "%s(%d) - Invalid Data ( %d )\n", __func__, __LINE__, nLen );
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8007f56:	4904      	ldr	r1, [pc, #16]	; (8007f68 <ProcessFrame+0x8c>)
 8007f58:	4806      	ldr	r0, [pc, #24]	; (8007f74 <ProcessFrame+0x98>)
 8007f5a:	f001 fa3b 	bl	80093d4 <iprintf>
	}
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	0800c9f4 	.word	0x0800c9f4
 8007f6c:	0800c76c 	.word	0x0800c76c
 8007f70:	0800c790 	.word	0x0800c790
 8007f74:	0800c7b4 	.word	0x0800c7b4

08007f78 <InitRS485>:
static int nFlagRxState = FlagNone;

//========================================================================
void InitRS485(void)
//========================================================================
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
	memset(rxbuffer, 0, sizeof(rxbuffer));
 8007f7c:	2280      	movs	r2, #128	; 0x80
 8007f7e:	2100      	movs	r1, #0
 8007f80:	480f      	ldr	r0, [pc, #60]	; (8007fc0 <InitRS485+0x48>)
 8007f82:	f001 fa1f 	bl	80093c4 <memset>
    memset(rxbuffer_2, 0, sizeof(rxbuffer_2));
 8007f86:	2280      	movs	r2, #128	; 0x80
 8007f88:	2100      	movs	r1, #0
 8007f8a:	480e      	ldr	r0, [pc, #56]	; (8007fc4 <InitRS485+0x4c>)
 8007f8c:	f001 fa1a 	bl	80093c4 <memset>
    memset(rxbuffer_5, 0, sizeof(rxbuffer_5));
 8007f90:	2280      	movs	r2, #128	; 0x80
 8007f92:	2100      	movs	r1, #0
 8007f94:	480c      	ldr	r0, [pc, #48]	; (8007fc8 <InitRS485+0x50>)
 8007f96:	f001 fa15 	bl	80093c4 <memset>

	rts_low(&huart3);		//	Recv Mode
 8007f9a:	480c      	ldr	r0, [pc, #48]	; (8007fcc <InitRS485+0x54>)
 8007f9c:	f000 fab6 	bl	800850c <rts_low>
	rts_low(&huart5);		//	Recv Mode
 8007fa0:	480b      	ldr	r0, [pc, #44]	; (8007fd0 <InitRS485+0x58>)
 8007fa2:	f000 fab3 	bl	800850c <rts_low>

	HAL_UART_Receive_IT(&huart3, dataRx3, 1);
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	490a      	ldr	r1, [pc, #40]	; (8007fd4 <InitRS485+0x5c>)
 8007faa:	4808      	ldr	r0, [pc, #32]	; (8007fcc <InitRS485+0x54>)
 8007fac:	f7fd ff10 	bl	8005dd0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart5, dataRx5, 1);
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	4909      	ldr	r1, [pc, #36]	; (8007fd8 <InitRS485+0x60>)
 8007fb4:	4806      	ldr	r0, [pc, #24]	; (8007fd0 <InitRS485+0x58>)
 8007fb6:	f7fd ff0b 	bl	8005dd0 <HAL_UART_Receive_IT>
}
 8007fba:	bf00      	nop
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000520 	.word	0x20000520
 8007fc4:	200005a4 	.word	0x200005a4
 8007fc8:	20000628 	.word	0x20000628
 8007fcc:	20000390 	.word	0x20000390
 8007fd0:	200002d0 	.word	0x200002d0
 8007fd4:	20000b14 	.word	0x20000b14
 8007fd8:	20000b1c 	.word	0x20000b1c

08007fdc <Dump>:


//========================================================================
void Dump( char *sTitle, char *sBuf, int nSize )
//========================================================================
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
	printf( "[%08d]%s ", HAL_GetTick(), sTitle );
 8007fe8:	f7f9 fe9a 	bl	8001d20 <HAL_GetTick>
 8007fec:	4603      	mov	r3, r0
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	480e      	ldr	r0, [pc, #56]	; (800802c <Dump+0x50>)
 8007ff4:	f001 f9ee 	bl	80093d4 <iprintf>

	int idx;
	for ( idx = 0; idx < nSize; idx++ )
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	e00a      	b.n	8008014 <Dump+0x38>
	{
		printf( "%02X ", sBuf[idx] );
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	4413      	add	r3, r2
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	4619      	mov	r1, r3
 8008008:	4809      	ldr	r0, [pc, #36]	; (8008030 <Dump+0x54>)
 800800a:	f001 f9e3 	bl	80093d4 <iprintf>
	for ( idx = 0; idx < nSize; idx++ )
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	3301      	adds	r3, #1
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	dbf0      	blt.n	8007ffe <Dump+0x22>
	}
	printf("\n");
 800801c:	200a      	movs	r0, #10
 800801e:	f001 f9f1 	bl	8009404 <putchar>
}
 8008022:	bf00      	nop
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	0800c7d4 	.word	0x0800c7d4
 8008030:	0800c7e0 	.word	0x0800c7e0

08008034 <LoopProcRS485_3ch>:


//========================================================================
void LoopProcRS485_3ch(void)		//	TCMS
//========================================================================
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af02      	add	r7, sp, #8
	  static int s_RxnTick;

	  static int s_RxOkFlag =0;
	  static int s_RxOkLen =0;

	  int s_EtxLen = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	60fb      	str	r3, [r7, #12]
        
    //=============================================================================
	//
	char	c;

	nTick = HAL_GetTick();
 800803e:	f7f9 fe6f 	bl	8001d20 <HAL_GetTick>
 8008042:	4603      	mov	r3, r0
 8008044:	60bb      	str	r3, [r7, #8]

	while (qcount(&g_qUart3) > 0)
 8008046:	e07a      	b.n	800813e <LoopProcRS485_3ch+0x10a>
	{

		s_nTick_F = nTick;
 8008048:	4a4e      	ldr	r2, [pc, #312]	; (8008184 <LoopProcRS485_3ch+0x150>)
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6013      	str	r3, [r2, #0]

		// 통신 중간에 타임 아웃시 카운터 클리어 하는 부분 추가.
		if ( (s_nTick_F - s_nTick_R) >= 5){  length = 0; printf("C"); }
 800804e:	4b4d      	ldr	r3, [pc, #308]	; (8008184 <LoopProcRS485_3ch+0x150>)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	4b4d      	ldr	r3, [pc, #308]	; (8008188 <LoopProcRS485_3ch+0x154>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2b04      	cmp	r3, #4
 800805a:	dd05      	ble.n	8008068 <LoopProcRS485_3ch+0x34>
 800805c:	4b4b      	ldr	r3, [pc, #300]	; (800818c <LoopProcRS485_3ch+0x158>)
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	2043      	movs	r0, #67	; 0x43
 8008064:	f001 f9ce 	bl	8009404 <putchar>
//		if ( (s_nTick_F - s_nTick_R) >= 1000){  length = 0; printf("C"); }
		s_nTick_R = s_nTick_F;
 8008068:	4b46      	ldr	r3, [pc, #280]	; (8008184 <LoopProcRS485_3ch+0x150>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a46      	ldr	r2, [pc, #280]	; (8008188 <LoopProcRS485_3ch+0x154>)
 800806e:	6013      	str	r3, [r2, #0]

		c = qget(&g_qUart3);
 8008070:	4847      	ldr	r0, [pc, #284]	; (8008190 <LoopProcRS485_3ch+0x15c>)
 8008072:	f7fe fb38 	bl	80066e6 <qget>
 8008076:	4603      	mov	r3, r0
 8008078:	71fb      	strb	r3, [r7, #7]
//				printf( "0x%02X ", c );

		rxbuffer[length++] = c;		//	Buffering
 800807a:	4b44      	ldr	r3, [pc, #272]	; (800818c <LoopProcRS485_3ch+0x158>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	4942      	ldr	r1, [pc, #264]	; (800818c <LoopProcRS485_3ch+0x158>)
 8008082:	600a      	str	r2, [r1, #0]
 8008084:	4943      	ldr	r1, [pc, #268]	; (8008194 <LoopProcRS485_3ch+0x160>)
 8008086:	79fa      	ldrb	r2, [r7, #7]
 8008088:	54ca      	strb	r2, [r1, r3]

		s_EtxLen = (sizeof(FRAME_SDR) - 3);
 800808a:	230d      	movs	r3, #13
 800808c:	60fb      	str	r3, [r7, #12]

		switch(length)
 800808e:	4b3f      	ldr	r3, [pc, #252]	; (800818c <LoopProcRS485_3ch+0x158>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b03      	cmp	r3, #3
 8008094:	d016      	beq.n	80080c4 <LoopProcRS485_3ch+0x90>
 8008096:	2b03      	cmp	r3, #3
 8008098:	d81c      	bhi.n	80080d4 <LoopProcRS485_3ch+0xa0>
 800809a:	2b01      	cmp	r3, #1
 800809c:	d002      	beq.n	80080a4 <LoopProcRS485_3ch+0x70>
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d008      	beq.n	80080b4 <LoopProcRS485_3ch+0x80>
 80080a2:	e017      	b.n	80080d4 <LoopProcRS485_3ch+0xa0>
		{
		case 1: if(rxbuffer[0] != 0x02) length = 0; break;
 80080a4:	4b3b      	ldr	r3, [pc, #236]	; (8008194 <LoopProcRS485_3ch+0x160>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d048      	beq.n	800813e <LoopProcRS485_3ch+0x10a>
 80080ac:	4b37      	ldr	r3, [pc, #220]	; (800818c <LoopProcRS485_3ch+0x158>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	e044      	b.n	800813e <LoopProcRS485_3ch+0x10a>
		case 2: if(rxbuffer[1] != 0x21) length = 0; break;
 80080b4:	4b37      	ldr	r3, [pc, #220]	; (8008194 <LoopProcRS485_3ch+0x160>)
 80080b6:	785b      	ldrb	r3, [r3, #1]
 80080b8:	2b21      	cmp	r3, #33	; 0x21
 80080ba:	d040      	beq.n	800813e <LoopProcRS485_3ch+0x10a>
 80080bc:	4b33      	ldr	r3, [pc, #204]	; (800818c <LoopProcRS485_3ch+0x158>)
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	e03c      	b.n	800813e <LoopProcRS485_3ch+0x10a>
		case 3: if(rxbuffer[2] != 0x11) length = 0; break;
 80080c4:	4b33      	ldr	r3, [pc, #204]	; (8008194 <LoopProcRS485_3ch+0x160>)
 80080c6:	789b      	ldrb	r3, [r3, #2]
 80080c8:	2b11      	cmp	r3, #17
 80080ca:	d038      	beq.n	800813e <LoopProcRS485_3ch+0x10a>
 80080cc:	4b2f      	ldr	r3, [pc, #188]	; (800818c <LoopProcRS485_3ch+0x158>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	e034      	b.n	800813e <LoopProcRS485_3ch+0x10a>
		default:
			if(length >= sizeof(FRAME_SDR))
 80080d4:	4b2d      	ldr	r3, [pc, #180]	; (800818c <LoopProcRS485_3ch+0x158>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b0f      	cmp	r3, #15
 80080da:	d92f      	bls.n	800813c <LoopProcRS485_3ch+0x108>
			{
				if(rxbuffer[s_EtxLen] == 0x03 )//&& IsBCCOK(&rxbuffer[1],(length-3)))
 80080dc:	4a2d      	ldr	r2, [pc, #180]	; (8008194 <LoopProcRS485_3ch+0x160>)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4413      	add	r3, r2
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d115      	bne.n	8008114 <LoopProcRS485_3ch+0xe0>
				{
//					printf("OK");
					s_RxOkFlag = 1;
 80080e8:	4b2b      	ldr	r3, [pc, #172]	; (8008198 <LoopProcRS485_3ch+0x164>)
 80080ea:	2201      	movs	r2, #1
 80080ec:	601a      	str	r2, [r3, #0]
					s_RxOkLen = length;
 80080ee:	4b27      	ldr	r3, [pc, #156]	; (800818c <LoopProcRS485_3ch+0x158>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	4b29      	ldr	r3, [pc, #164]	; (800819c <LoopProcRS485_3ch+0x168>)
 80080f6:	601a      	str	r2, [r3, #0]

					s_RxnTick = nTick;
 80080f8:	4a29      	ldr	r2, [pc, #164]	; (80081a0 <LoopProcRS485_3ch+0x16c>)
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	6013      	str	r3, [r2, #0]

					Dump( "Rx : ", rxbuffer, length );
 80080fe:	4b23      	ldr	r3, [pc, #140]	; (800818c <LoopProcRS485_3ch+0x158>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	4923      	ldr	r1, [pc, #140]	; (8008194 <LoopProcRS485_3ch+0x160>)
 8008106:	4827      	ldr	r0, [pc, #156]	; (80081a4 <LoopProcRS485_3ch+0x170>)
 8008108:	f7ff ff68 	bl	8007fdc <Dump>

					length = 0;
 800810c:	4b1f      	ldr	r3, [pc, #124]	; (800818c <LoopProcRS485_3ch+0x158>)
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	e013      	b.n	800813c <LoopProcRS485_3ch+0x108>
				}
				else
				{
					printf( "[%d] %s(%d) - Invalid packet(%d) / framesize(%d)\n", HAL_GetTick(), __func__, __LINE__, length, sizeof(FRAME_SDR) );
 8008114:	f7f9 fe04 	bl	8001d20 <HAL_GetTick>
 8008118:	4601      	mov	r1, r0
 800811a:	4b1c      	ldr	r3, [pc, #112]	; (800818c <LoopProcRS485_3ch+0x158>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2210      	movs	r2, #16
 8008120:	9201      	str	r2, [sp, #4]
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	f240 233f 	movw	r3, #575	; 0x23f
 8008128:	4a1f      	ldr	r2, [pc, #124]	; (80081a8 <LoopProcRS485_3ch+0x174>)
 800812a:	4820      	ldr	r0, [pc, #128]	; (80081ac <LoopProcRS485_3ch+0x178>)
 800812c:	f001 f952 	bl	80093d4 <iprintf>

					//===========================================================================
					init_queue(&g_qUart3);		//	Queue Clear
 8008130:	4817      	ldr	r0, [pc, #92]	; (8008190 <LoopProcRS485_3ch+0x15c>)
 8008132:	f7fe fa7f 	bl	8006634 <init_queue>
					//===========================================================================

					//	최대 패킷 사이즈보다 큰경우. -> Clear Buffer
					length = 0;
 8008136:	4b15      	ldr	r3, [pc, #84]	; (800818c <LoopProcRS485_3ch+0x158>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 800813c:	bf00      	nop
	while (qcount(&g_qUart3) > 0)
 800813e:	4814      	ldr	r0, [pc, #80]	; (8008190 <LoopProcRS485_3ch+0x15c>)
 8008140:	f7fe fa8b 	bl	800665a <qcount>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	f73f af7e 	bgt.w	8008048 <LoopProcRS485_3ch+0x14>
		}
	}

	// RX 수신 OK 하면.
//	if ( s_RxOkFlag == 1)
	if ( ((nTick - s_RxnTick) >= 10) && (s_RxOkFlag == 1))
 800814c:	4b14      	ldr	r3, [pc, #80]	; (80081a0 <LoopProcRS485_3ch+0x16c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b09      	cmp	r3, #9
 8008156:	dd10      	ble.n	800817a <LoopProcRS485_3ch+0x146>
 8008158:	4b0f      	ldr	r3, [pc, #60]	; (8008198 <LoopProcRS485_3ch+0x164>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10c      	bne.n	800817a <LoopProcRS485_3ch+0x146>
	{
		s_RxOkFlag = 0;
 8008160:	4b0d      	ldr	r3, [pc, #52]	; (8008198 <LoopProcRS485_3ch+0x164>)
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
		s_RxnTick = nTick;
 8008166:	4a0e      	ldr	r2, [pc, #56]	; (80081a0 <LoopProcRS485_3ch+0x16c>)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6013      	str	r3, [r2, #0]

		ProcessFrame(rxbuffer, s_RxOkLen,3);
 800816c:	4b0b      	ldr	r3, [pc, #44]	; (800819c <LoopProcRS485_3ch+0x168>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2203      	movs	r2, #3
 8008172:	4619      	mov	r1, r3
 8008174:	4807      	ldr	r0, [pc, #28]	; (8008194 <LoopProcRS485_3ch+0x160>)
 8008176:	f7ff feb1 	bl	8007edc <ProcessFrame>
	}

	//=============================================================================

}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	200006ac 	.word	0x200006ac
 8008188:	200006b0 	.word	0x200006b0
 800818c:	2000051c 	.word	0x2000051c
 8008190:	200008f4 	.word	0x200008f4
 8008194:	20000520 	.word	0x20000520
 8008198:	200006b4 	.word	0x200006b4
 800819c:	200006b8 	.word	0x200006b8
 80081a0:	200006bc 	.word	0x200006bc
 80081a4:	0800c7e8 	.word	0x0800c7e8
 80081a8:	0800ca04 	.word	0x0800ca04
 80081ac:	0800c7f0 	.word	0x0800c7f0

080081b0 <LoopProcRS485_5ch>:

//========================================================================
void LoopProcRS485_5ch(void)		//	TRS
//========================================================================
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af02      	add	r7, sp, #8
	  static int s_RxnTick;

	  static int s_RxOkFlag =0;
	  static int s_RxOkLen =0;

	  int s_EtxLen = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]
        
    //=============================================================================
	//
	char	c;

	nTick = HAL_GetTick();
 80081ba:	f7f9 fdb1 	bl	8001d20 <HAL_GetTick>
 80081be:	4603      	mov	r3, r0
 80081c0:	60bb      	str	r3, [r7, #8]

	while (qcount(&g_qUart5) > 0)
 80081c2:	e079      	b.n	80082b8 <LoopProcRS485_5ch+0x108>
	{

		s_nTick_F = nTick;
 80081c4:	4a4d      	ldr	r2, [pc, #308]	; (80082fc <LoopProcRS485_5ch+0x14c>)
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	6013      	str	r3, [r2, #0]

		// 통신 중간에 타임 아웃시 카운터 클리어 하는 부분 추가.
		if ( (s_nTick_F - s_nTick_R) >= 5){  length_5 = 0; printf("C"); }
 80081ca:	4b4c      	ldr	r3, [pc, #304]	; (80082fc <LoopProcRS485_5ch+0x14c>)
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	4b4c      	ldr	r3, [pc, #304]	; (8008300 <LoopProcRS485_5ch+0x150>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	2b04      	cmp	r3, #4
 80081d6:	dd05      	ble.n	80081e4 <LoopProcRS485_5ch+0x34>
 80081d8:	4b4a      	ldr	r3, [pc, #296]	; (8008304 <LoopProcRS485_5ch+0x154>)
 80081da:	2200      	movs	r2, #0
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	2043      	movs	r0, #67	; 0x43
 80081e0:	f001 f910 	bl	8009404 <putchar>
//		if ( (s_nTick_F - s_nTick_R) >= 100){  length_5 = 0; printf("C"); }
		s_nTick_R = s_nTick_F;
 80081e4:	4b45      	ldr	r3, [pc, #276]	; (80082fc <LoopProcRS485_5ch+0x14c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a45      	ldr	r2, [pc, #276]	; (8008300 <LoopProcRS485_5ch+0x150>)
 80081ea:	6013      	str	r3, [r2, #0]

		c = qget(&g_qUart5);
 80081ec:	4846      	ldr	r0, [pc, #280]	; (8008308 <LoopProcRS485_5ch+0x158>)
 80081ee:	f7fe fa7a 	bl	80066e6 <qget>
 80081f2:	4603      	mov	r3, r0
 80081f4:	71fb      	strb	r3, [r7, #7]
//				printf( "0x%02X ", c );

		rxbuffer_5[length_5++] = c;		//	Buffering
 80081f6:	4b43      	ldr	r3, [pc, #268]	; (8008304 <LoopProcRS485_5ch+0x154>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	4941      	ldr	r1, [pc, #260]	; (8008304 <LoopProcRS485_5ch+0x154>)
 80081fe:	600a      	str	r2, [r1, #0]
 8008200:	4942      	ldr	r1, [pc, #264]	; (800830c <LoopProcRS485_5ch+0x15c>)
 8008202:	79fa      	ldrb	r2, [r7, #7]
 8008204:	54ca      	strb	r2, [r1, r3]

		s_EtxLen = (sizeof(FRAME_TRSDR) - 3);
 8008206:	230b      	movs	r3, #11
 8008208:	60fb      	str	r3, [r7, #12]

		switch(length_5)
 800820a:	4b3e      	ldr	r3, [pc, #248]	; (8008304 <LoopProcRS485_5ch+0x154>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b03      	cmp	r3, #3
 8008210:	d016      	beq.n	8008240 <LoopProcRS485_5ch+0x90>
 8008212:	2b03      	cmp	r3, #3
 8008214:	d81c      	bhi.n	8008250 <LoopProcRS485_5ch+0xa0>
 8008216:	2b01      	cmp	r3, #1
 8008218:	d002      	beq.n	8008220 <LoopProcRS485_5ch+0x70>
 800821a:	2b02      	cmp	r3, #2
 800821c:	d008      	beq.n	8008230 <LoopProcRS485_5ch+0x80>
 800821e:	e017      	b.n	8008250 <LoopProcRS485_5ch+0xa0>
		{
		case 1: if(rxbuffer_5[0] != 0x02) length_5 = 0; break;
 8008220:	4b3a      	ldr	r3, [pc, #232]	; (800830c <LoopProcRS485_5ch+0x15c>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	2b02      	cmp	r3, #2
 8008226:	d047      	beq.n	80082b8 <LoopProcRS485_5ch+0x108>
 8008228:	4b36      	ldr	r3, [pc, #216]	; (8008304 <LoopProcRS485_5ch+0x154>)
 800822a:	2200      	movs	r2, #0
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	e043      	b.n	80082b8 <LoopProcRS485_5ch+0x108>
		case 2: if(rxbuffer_5[1] != 0x22) length_5 = 0; break;
 8008230:	4b36      	ldr	r3, [pc, #216]	; (800830c <LoopProcRS485_5ch+0x15c>)
 8008232:	785b      	ldrb	r3, [r3, #1]
 8008234:	2b22      	cmp	r3, #34	; 0x22
 8008236:	d03f      	beq.n	80082b8 <LoopProcRS485_5ch+0x108>
 8008238:	4b32      	ldr	r3, [pc, #200]	; (8008304 <LoopProcRS485_5ch+0x154>)
 800823a:	2200      	movs	r2, #0
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	e03b      	b.n	80082b8 <LoopProcRS485_5ch+0x108>
		case 3: if(rxbuffer_5[2] != 0x11) length_5 = 0; break;
 8008240:	4b32      	ldr	r3, [pc, #200]	; (800830c <LoopProcRS485_5ch+0x15c>)
 8008242:	789b      	ldrb	r3, [r3, #2]
 8008244:	2b11      	cmp	r3, #17
 8008246:	d037      	beq.n	80082b8 <LoopProcRS485_5ch+0x108>
 8008248:	4b2e      	ldr	r3, [pc, #184]	; (8008304 <LoopProcRS485_5ch+0x154>)
 800824a:	2200      	movs	r2, #0
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	e033      	b.n	80082b8 <LoopProcRS485_5ch+0x108>
		default:
			if(length_5 >= sizeof(FRAME_TRSDR))
 8008250:	4b2c      	ldr	r3, [pc, #176]	; (8008304 <LoopProcRS485_5ch+0x154>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b0d      	cmp	r3, #13
 8008256:	d92f      	bls.n	80082b8 <LoopProcRS485_5ch+0x108>
			{
				if(rxbuffer_5[s_EtxLen] == 0x03)// && IsBCCOK(&rxbuffer_5[1],(length_5-3)))
 8008258:	4a2c      	ldr	r2, [pc, #176]	; (800830c <LoopProcRS485_5ch+0x15c>)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4413      	add	r3, r2
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b03      	cmp	r3, #3
 8008262:	d115      	bne.n	8008290 <LoopProcRS485_5ch+0xe0>
				{
					s_RxOkFlag = 1;
 8008264:	4b2a      	ldr	r3, [pc, #168]	; (8008310 <LoopProcRS485_5ch+0x160>)
 8008266:	2201      	movs	r2, #1
 8008268:	601a      	str	r2, [r3, #0]
					s_RxOkLen = length_5;
 800826a:	4b26      	ldr	r3, [pc, #152]	; (8008304 <LoopProcRS485_5ch+0x154>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	4b28      	ldr	r3, [pc, #160]	; (8008314 <LoopProcRS485_5ch+0x164>)
 8008272:	601a      	str	r2, [r3, #0]

					s_RxnTick = nTick;
 8008274:	4a28      	ldr	r2, [pc, #160]	; (8008318 <LoopProcRS485_5ch+0x168>)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6013      	str	r3, [r2, #0]

					Dump( "Rx : ", rxbuffer_5, length_5 );
 800827a:	4b22      	ldr	r3, [pc, #136]	; (8008304 <LoopProcRS485_5ch+0x154>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	4922      	ldr	r1, [pc, #136]	; (800830c <LoopProcRS485_5ch+0x15c>)
 8008282:	4826      	ldr	r0, [pc, #152]	; (800831c <LoopProcRS485_5ch+0x16c>)
 8008284:	f7ff feaa 	bl	8007fdc <Dump>

					length_5 = 0;
 8008288:	4b1e      	ldr	r3, [pc, #120]	; (8008304 <LoopProcRS485_5ch+0x154>)
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e013      	b.n	80082b8 <LoopProcRS485_5ch+0x108>
				}
				else
				{
					printf( "[%d] %s(%d) - Invalid packet(%d) FrameSize(%d)\n", HAL_GetTick(), __func__, __LINE__, length_5, sizeof(FRAME_TRSDR) );
 8008290:	f7f9 fd46 	bl	8001d20 <HAL_GetTick>
 8008294:	4601      	mov	r1, r0
 8008296:	4b1b      	ldr	r3, [pc, #108]	; (8008304 <LoopProcRS485_5ch+0x154>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	220e      	movs	r2, #14
 800829c:	9201      	str	r2, [sp, #4]
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	f240 239e 	movw	r3, #670	; 0x29e
 80082a4:	4a1e      	ldr	r2, [pc, #120]	; (8008320 <LoopProcRS485_5ch+0x170>)
 80082a6:	481f      	ldr	r0, [pc, #124]	; (8008324 <LoopProcRS485_5ch+0x174>)
 80082a8:	f001 f894 	bl	80093d4 <iprintf>

					//===========================================================================
					init_queue(&g_qUart5);		//	Queue Clear
 80082ac:	4816      	ldr	r0, [pc, #88]	; (8008308 <LoopProcRS485_5ch+0x158>)
 80082ae:	f7fe f9c1 	bl	8006634 <init_queue>
					//===========================================================================

					//	최대 패킷 사이즈보다 큰경우. -> Clear Buffer
					length_5 = 0;
 80082b2:	4b14      	ldr	r3, [pc, #80]	; (8008304 <LoopProcRS485_5ch+0x154>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]
	while (qcount(&g_qUart5) > 0)
 80082b8:	4813      	ldr	r0, [pc, #76]	; (8008308 <LoopProcRS485_5ch+0x158>)
 80082ba:	f7fe f9ce 	bl	800665a <qcount>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f73f af7f 	bgt.w	80081c4 <LoopProcRS485_5ch+0x14>
			}
		}
	}
	
	// RX 수신 OK 하면.
	if ( ((nTick - s_RxnTick) >= 10) && (s_RxOkFlag == 1))
 80082c6:	4b14      	ldr	r3, [pc, #80]	; (8008318 <LoopProcRS485_5ch+0x168>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b09      	cmp	r3, #9
 80082d0:	dd10      	ble.n	80082f4 <LoopProcRS485_5ch+0x144>
 80082d2:	4b0f      	ldr	r3, [pc, #60]	; (8008310 <LoopProcRS485_5ch+0x160>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d10c      	bne.n	80082f4 <LoopProcRS485_5ch+0x144>
	{
		s_RxOkFlag = 0;
 80082da:	4b0d      	ldr	r3, [pc, #52]	; (8008310 <LoopProcRS485_5ch+0x160>)
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
		s_RxnTick = nTick;
 80082e0:	4a0d      	ldr	r2, [pc, #52]	; (8008318 <LoopProcRS485_5ch+0x168>)
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	6013      	str	r3, [r2, #0]

		ProcessFrame(rxbuffer_5, s_RxOkLen,5);
 80082e6:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <LoopProcRS485_5ch+0x164>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2205      	movs	r2, #5
 80082ec:	4619      	mov	r1, r3
 80082ee:	4807      	ldr	r0, [pc, #28]	; (800830c <LoopProcRS485_5ch+0x15c>)
 80082f0:	f7ff fdf4 	bl	8007edc <ProcessFrame>
	}
}
 80082f4:	bf00      	nop
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	200006c0 	.word	0x200006c0
 8008300:	200006c4 	.word	0x200006c4
 8008304:	20000624 	.word	0x20000624
 8008308:	200009fc 	.word	0x200009fc
 800830c:	20000628 	.word	0x20000628
 8008310:	200006c8 	.word	0x200006c8
 8008314:	200006cc 	.word	0x200006cc
 8008318:	200006d0 	.word	0x200006d0
 800831c:	0800c7e8 	.word	0x0800c7e8
 8008320:	0800ca18 	.word	0x0800ca18
 8008324:	0800c824 	.word	0x0800c824

08008328 <LoopProcRFM_2ch>:

//========================================================================
void LoopProcRFM_2ch(void)
//========================================================================
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
	  static int s_RxnTick;

	  static int s_RxOkFlag =0;
	  static int s_RxOkLen =0;

	  int s_EtxLen = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
        
    //=============================================================================
	//
	char	c;

	nTick = HAL_GetTick();
 8008332:	f7f9 fcf5 	bl	8001d20 <HAL_GetTick>
 8008336:	4603      	mov	r3, r0
 8008338:	60bb      	str	r3, [r7, #8]

	while (qcount(&g_qUart2) > 0)
 800833a:	e04c      	b.n	80083d6 <LoopProcRFM_2ch+0xae>
	{

		s_nTick_F = nTick;
 800833c:	4a33      	ldr	r2, [pc, #204]	; (800840c <LoopProcRFM_2ch+0xe4>)
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	6013      	str	r3, [r2, #0]

		// 통신 중간에 타임 아웃시 카운터 클리어 하는 부분 추가.
		if ( (s_nTick_F - s_nTick_R) >= 5){  length_2 = 0; }
 8008342:	4b32      	ldr	r3, [pc, #200]	; (800840c <LoopProcRFM_2ch+0xe4>)
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	4b32      	ldr	r3, [pc, #200]	; (8008410 <LoopProcRFM_2ch+0xe8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	2b04      	cmp	r3, #4
 800834e:	dd02      	ble.n	8008356 <LoopProcRFM_2ch+0x2e>
 8008350:	4b30      	ldr	r3, [pc, #192]	; (8008414 <LoopProcRFM_2ch+0xec>)
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]
		s_nTick_R = s_nTick_F;
 8008356:	4b2d      	ldr	r3, [pc, #180]	; (800840c <LoopProcRFM_2ch+0xe4>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a2d      	ldr	r2, [pc, #180]	; (8008410 <LoopProcRFM_2ch+0xe8>)
 800835c:	6013      	str	r3, [r2, #0]

		c = qget(&g_qUart2);
 800835e:	482e      	ldr	r0, [pc, #184]	; (8008418 <LoopProcRFM_2ch+0xf0>)
 8008360:	f7fe f9c1 	bl	80066e6 <qget>
 8008364:	4603      	mov	r3, r0
 8008366:	71fb      	strb	r3, [r7, #7]
		//		printf( "0x%02X ", c );

		rxbuffer_2[length_2++] = c;		//	Buffering
 8008368:	4b2a      	ldr	r3, [pc, #168]	; (8008414 <LoopProcRFM_2ch+0xec>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	1c5a      	adds	r2, r3, #1
 800836e:	4929      	ldr	r1, [pc, #164]	; (8008414 <LoopProcRFM_2ch+0xec>)
 8008370:	600a      	str	r2, [r1, #0]
 8008372:	492a      	ldr	r1, [pc, #168]	; (800841c <LoopProcRFM_2ch+0xf4>)
 8008374:	79fa      	ldrb	r2, [r7, #7]
 8008376:	54ca      	strb	r2, [r1, r3]

		s_EtxLen = (sizeof(FRAME_SDR) - 3);
 8008378:	230d      	movs	r3, #13
 800837a:	60fb      	str	r3, [r7, #12]

		switch(length_2)
 800837c:	4b25      	ldr	r3, [pc, #148]	; (8008414 <LoopProcRFM_2ch+0xec>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d100      	bne.n	8008386 <LoopProcRFM_2ch+0x5e>
		{
		case 1:  break;
 8008384:	e027      	b.n	80083d6 <LoopProcRFM_2ch+0xae>
		default:
			if(length_2 >= 7 )
 8008386:	4b23      	ldr	r3, [pc, #140]	; (8008414 <LoopProcRFM_2ch+0xec>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b06      	cmp	r3, #6
 800838c:	d922      	bls.n	80083d4 <LoopProcRFM_2ch+0xac>
			{
				if (strncmp((char*)(rxbuffer_2), "RSSI_NG", 7) == 0)
 800838e:	2207      	movs	r2, #7
 8008390:	4923      	ldr	r1, [pc, #140]	; (8008420 <LoopProcRFM_2ch+0xf8>)
 8008392:	4822      	ldr	r0, [pc, #136]	; (800841c <LoopProcRFM_2ch+0xf4>)
 8008394:	f001 fa32 	bl	80097fc <strncmp>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d114      	bne.n	80083c8 <LoopProcRFM_2ch+0xa0>
				{
					if(uRssi_NgFlag < 6)
 800839e:	4b21      	ldr	r3, [pc, #132]	; (8008424 <LoopProcRFM_2ch+0xfc>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b05      	cmp	r3, #5
 80083a4:	d805      	bhi.n	80083b2 <LoopProcRFM_2ch+0x8a>
					{
						uRssi_NgFlag++;
 80083a6:	4b1f      	ldr	r3, [pc, #124]	; (8008424 <LoopProcRFM_2ch+0xfc>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	3301      	adds	r3, #1
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	4b1d      	ldr	r3, [pc, #116]	; (8008424 <LoopProcRFM_2ch+0xfc>)
 80083b0:	701a      	strb	r2, [r3, #0]
					}

					 Dump( "Rx : ", rxbuffer_2, length_2 );
 80083b2:	4b18      	ldr	r3, [pc, #96]	; (8008414 <LoopProcRFM_2ch+0xec>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	4918      	ldr	r1, [pc, #96]	; (800841c <LoopProcRFM_2ch+0xf4>)
 80083ba:	481b      	ldr	r0, [pc, #108]	; (8008428 <LoopProcRFM_2ch+0x100>)
 80083bc:	f7ff fe0e 	bl	8007fdc <Dump>

					 length_2 = 0;
 80083c0:	4b14      	ldr	r3, [pc, #80]	; (8008414 <LoopProcRFM_2ch+0xec>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	e005      	b.n	80083d4 <LoopProcRFM_2ch+0xac>

				}
				else
				{
					init_queue(&g_qUart2);		//	Queue Clear
 80083c8:	4813      	ldr	r0, [pc, #76]	; (8008418 <LoopProcRFM_2ch+0xf0>)
 80083ca:	f7fe f933 	bl	8006634 <init_queue>
					
					length_2 = 0;
 80083ce:	4b11      	ldr	r3, [pc, #68]	; (8008414 <LoopProcRFM_2ch+0xec>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
				}

			}
			break;
 80083d4:	bf00      	nop
	while (qcount(&g_qUart2) > 0)
 80083d6:	4810      	ldr	r0, [pc, #64]	; (8008418 <LoopProcRFM_2ch+0xf0>)
 80083d8:	f7fe f93f 	bl	800665a <qcount>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dcac      	bgt.n	800833c <LoopProcRFM_2ch+0x14>
		}
	}
	
	// RX 수신 OK 하면.
	if ( ((nTick - s_RxnTick) >= 10) && (s_RxOkFlag == 1))
 80083e2:	4b12      	ldr	r3, [pc, #72]	; (800842c <LoopProcRFM_2ch+0x104>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b09      	cmp	r3, #9
 80083ec:	dd09      	ble.n	8008402 <LoopProcRFM_2ch+0xda>
 80083ee:	4b10      	ldr	r3, [pc, #64]	; (8008430 <LoopProcRFM_2ch+0x108>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d105      	bne.n	8008402 <LoopProcRFM_2ch+0xda>
	{
		s_RxOkFlag = 0;
 80083f6:	4b0e      	ldr	r3, [pc, #56]	; (8008430 <LoopProcRFM_2ch+0x108>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]
		s_RxnTick = nTick;
 80083fc:	4a0b      	ldr	r2, [pc, #44]	; (800842c <LoopProcRFM_2ch+0x104>)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	6013      	str	r3, [r2, #0]

		//ProcessFrame(rxbuffer_2, s_RxOkLen);
	}
}
 8008402:	bf00      	nop
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	200006d4 	.word	0x200006d4
 8008410:	200006d8 	.word	0x200006d8
 8008414:	200005a0 	.word	0x200005a0
 8008418:	200007ec 	.word	0x200007ec
 800841c:	200005a4 	.word	0x200005a4
 8008420:	0800c854 	.word	0x0800c854
 8008424:	2000040b 	.word	0x2000040b
 8008428:	0800c7e8 	.word	0x0800c7e8
 800842c:	200006dc 	.word	0x200006dc
 8008430:	200006e0 	.word	0x200006e0

08008434 <cmd_sd>:

//========================================================================
int cmd_sd(int argc, char *argv[])
//========================================================================
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
	printf("%s(%d)\n", __func__, __LINE__ );
 800843e:	f240 320f 	movw	r2, #783	; 0x30f
 8008442:	490b      	ldr	r1, [pc, #44]	; (8008470 <cmd_sd+0x3c>)
 8008444:	480b      	ldr	r0, [pc, #44]	; (8008474 <cmd_sd+0x40>)
 8008446:	f000 ffc5 	bl	80093d4 <iprintf>

	FRAME_SDR	sdr;
	memset( &sdr, 0, sizeof(FRAME_SDR) );
 800844a:	f107 0308 	add.w	r3, r7, #8
 800844e:	2210      	movs	r2, #16
 8008450:	2100      	movs	r1, #0
 8008452:	4618      	mov	r0, r3
 8008454:	f000 ffb6 	bl	80093c4 <memset>

	SendSD_3( &sdr, 3 );
 8008458:	f107 0308 	add.w	r3, r7, #8
 800845c:	2103      	movs	r1, #3
 800845e:	4618      	mov	r0, r3
 8008460:	f7ff fb90 	bl	8007b84 <SendSD_3>

	return 0;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	0800ca2c 	.word	0x0800ca2c
 8008474:	0800c6fc 	.word	0x0800c6fc

08008478 <cmd_sd2>:

//========================================================================
int cmd_sd2(int argc, char *argv[])
//========================================================================
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
	printf("%s(%d)\n", __func__, __LINE__ );
 8008482:	f240 321d 	movw	r2, #797	; 0x31d
 8008486:	490b      	ldr	r1, [pc, #44]	; (80084b4 <cmd_sd2+0x3c>)
 8008488:	480b      	ldr	r0, [pc, #44]	; (80084b8 <cmd_sd2+0x40>)
 800848a:	f000 ffa3 	bl	80093d4 <iprintf>

	FRAME_SDR	sdr;
	memset( &sdr, 0, sizeof(FRAME_SDR) );
 800848e:	f107 0308 	add.w	r3, r7, #8
 8008492:	2210      	movs	r2, #16
 8008494:	2100      	movs	r1, #0
 8008496:	4618      	mov	r0, r3
 8008498:	f000 ff94 	bl	80093c4 <memset>

	SendSD_5( &sdr, 5 );
 800849c:	f107 0308 	add.w	r3, r7, #8
 80084a0:	2105      	movs	r1, #5
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff fbf0 	bl	8007c88 <SendSD_5>

	return 0;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	0800ca34 	.word	0x0800ca34
 80084b8:	0800c6fc 	.word	0x0800c6fc

080084bc <rts_high>:


//=============================================================================
void	rts_high		( UART_HandleTypeDef *_phuart )
//=============================================================================
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
	HAL_HalfDuplex_EnableTransmitter( _phuart );	// disable receiver, enable transmitter
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7fd fe4a 	bl	800615e <HAL_HalfDuplex_EnableTransmitter>

	if ( _phuart->Instance == USART3 )
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a0b      	ldr	r2, [pc, #44]	; (80084fc <rts_high+0x40>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d104      	bne.n	80084de <rts_high+0x22>
	{
		HAL_GPIO_WritePin( RE_GPIO_Port, RE_Pin, GPIO_PIN_SET );		//	RTS High
 80084d4:	2201      	movs	r2, #1
 80084d6:	2108      	movs	r1, #8
 80084d8:	4809      	ldr	r0, [pc, #36]	; (8008500 <rts_high+0x44>)
 80084da:	f7fa ff5a 	bl	8003392 <HAL_GPIO_WritePin>
	}

	if ( _phuart->Instance == UART5 )
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a08      	ldr	r2, [pc, #32]	; (8008504 <rts_high+0x48>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d104      	bne.n	80084f2 <rts_high+0x36>
	{
		HAL_GPIO_WritePin( RE1_GPIO_Port, RE1_Pin, GPIO_PIN_SET );		//	RTS High
 80084e8:	2201      	movs	r2, #1
 80084ea:	2101      	movs	r1, #1
 80084ec:	4806      	ldr	r0, [pc, #24]	; (8008508 <rts_high+0x4c>)
 80084ee:	f7fa ff50 	bl	8003392 <HAL_GPIO_WritePin>
	}
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	40004800 	.word	0x40004800
 8008500:	40011000 	.word	0x40011000
 8008504:	40005000 	.word	0x40005000
 8008508:	40010800 	.word	0x40010800

0800850c <rts_low>:

//=============================================================================
void	rts_low			( UART_HandleTypeDef *_phuart )
//=============================================================================
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	if ( _phuart->Instance == USART3 )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a0c      	ldr	r2, [pc, #48]	; (800854c <rts_low+0x40>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d104      	bne.n	8008528 <rts_low+0x1c>
	{
		HAL_GPIO_WritePin( RE_GPIO_Port, RE_Pin, GPIO_PIN_RESET );		//	RTS Low
 800851e:	2200      	movs	r2, #0
 8008520:	2108      	movs	r1, #8
 8008522:	480b      	ldr	r0, [pc, #44]	; (8008550 <rts_low+0x44>)
 8008524:	f7fa ff35 	bl	8003392 <HAL_GPIO_WritePin>
	}

	if ( _phuart->Instance == UART5 )
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a09      	ldr	r2, [pc, #36]	; (8008554 <rts_low+0x48>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d104      	bne.n	800853c <rts_low+0x30>
	{
		HAL_GPIO_WritePin( RE1_GPIO_Port, RE1_Pin, GPIO_PIN_RESET );	//	RTS Low
 8008532:	2200      	movs	r2, #0
 8008534:	2101      	movs	r1, #1
 8008536:	4808      	ldr	r0, [pc, #32]	; (8008558 <rts_low+0x4c>)
 8008538:	f7fa ff2b 	bl	8003392 <HAL_GPIO_WritePin>
	}

	HAL_HalfDuplex_EnableReceiver( _phuart );	// enable receiver, disable transmitter
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7fd fe41 	bl	80061c4 <HAL_HalfDuplex_EnableReceiver>
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	40004800 	.word	0x40004800
 8008550:	40011000 	.word	0x40011000
 8008554:	40005000 	.word	0x40005000
 8008558:	40010800 	.word	0x40010800

0800855c <__io_putchar>:
  * @retval None
  */
//===========================================================================
PUTCHAR_PROTOTYPE
//===========================================================================
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */

	//========================================================================
	//	Console
	if ( phuart1 )
 8008564:	4b0d      	ldr	r3, [pc, #52]	; (800859c <__io_putchar+0x40>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d012      	beq.n	8008592 <__io_putchar+0x36>
	{
		HAL_UART_Transmit( phuart1, (uint8_t *)&ch, 1, 0xFFFF );
 800856c:	4b0b      	ldr	r3, [pc, #44]	; (800859c <__io_putchar+0x40>)
 800856e:	6818      	ldr	r0, [r3, #0]
 8008570:	1d39      	adds	r1, r7, #4
 8008572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008576:	2201      	movs	r2, #1
 8008578:	f7fd faf9 	bl	8005b6e <HAL_UART_Transmit>
		if ( ch == '\n' )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b0a      	cmp	r3, #10
 8008580:	d107      	bne.n	8008592 <__io_putchar+0x36>
		{
			HAL_UART_Transmit( phuart1, (uint8_t *)"\r", 1, 0xFFFF );
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <__io_putchar+0x40>)
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800858a:	2201      	movs	r2, #1
 800858c:	4904      	ldr	r1, [pc, #16]	; (80085a0 <__io_putchar+0x44>)
 800858e:	f7fd faee 	bl	8005b6e <HAL_UART_Transmit>
		}
	}
	//	*/
	//========================================================================

	return ch;
 8008592:	687b      	ldr	r3, [r7, #4]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	20000b34 	.word	0x20000b34
 80085a0:	0800c85c 	.word	0x0800c85c

080085a4 <__io_getchar>:

//===========================================================================
GETCHAR_PROTOTYPE
//===========================================================================
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
	char	c;

	while( !qcount( &g_qUart1 ) )
 80085aa:	bf00      	nop
 80085ac:	4809      	ldr	r0, [pc, #36]	; (80085d4 <__io_getchar+0x30>)
 80085ae:	f7fe f854 	bl	800665a <qcount>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d102      	bne.n	80085be <__io_getchar+0x1a>
	{
//		osDelay(0);
#if defined( USE_FREERTOS )
		taskYIELD();
#else
		return -1;		//	Non-Blocking ( OS less )
 80085b8:	f04f 33ff 	mov.w	r3, #4294967295
 80085bc:	e005      	b.n	80085ca <__io_getchar+0x26>
//		HAL_Delay( 0 );
#endif
	}
	c = qget( &g_qUart1 );
 80085be:	4805      	ldr	r0, [pc, #20]	; (80085d4 <__io_getchar+0x30>)
 80085c0:	f7fe f891 	bl	80066e6 <qget>
 80085c4:	4603      	mov	r3, r0
 80085c6:	71fb      	strb	r3, [r7, #7]

	return c;
 80085c8:	79fb      	ldrb	r3, [r7, #7]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	200006e4 	.word	0x200006e4

080085d8 <HAL_UART_RxCpltCallback>:
  * @retval None
  */
//===========================================================================
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
//===========================================================================
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	//	portBASE_TYPE	xHigherPriorityTaskWoken = pdFALSE;
	//	인터럽트.

	//===========================================================================
	if ( huart->Instance == USART1 && phuart1 )
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a34      	ldr	r2, [pc, #208]	; (80086b8 <HAL_UART_RxCpltCallback+0xe0>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d114      	bne.n	8008614 <HAL_UART_RxCpltCallback+0x3c>
 80085ea:	4b34      	ldr	r3, [pc, #208]	; (80086bc <HAL_UART_RxCpltCallback+0xe4>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d010      	beq.n	8008614 <HAL_UART_RxCpltCallback+0x3c>
	{
		//	Debug Console
		g_nStampRx1 = HAL_GetTick();
 80085f2:	f7f9 fb95 	bl	8001d20 <HAL_GetTick>
 80085f6:	4603      	mov	r3, r0
 80085f8:	4a31      	ldr	r2, [pc, #196]	; (80086c0 <HAL_UART_RxCpltCallback+0xe8>)
 80085fa:	6013      	str	r3, [r2, #0]

		//	입력내용 콘솔로 출력.
		//		HAL_UART_Transmit( huart, (uint8_t *)&dataRx1[0], 1, 0xFFFF );

				HAL_UART_Receive_IT( huart, dataRx1, 1 );
 80085fc:	2201      	movs	r2, #1
 80085fe:	4931      	ldr	r1, [pc, #196]	; (80086c4 <HAL_UART_RxCpltCallback+0xec>)
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7fd fbe5 	bl	8005dd0 <HAL_UART_Receive_IT>

		//	문자 Queue에 쌓기.
		qput( &g_qUart1, dataRx1[0] );
 8008606:	4b2f      	ldr	r3, [pc, #188]	; (80086c4 <HAL_UART_RxCpltCallback+0xec>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	4619      	mov	r1, r3
 800860c:	482e      	ldr	r0, [pc, #184]	; (80086c8 <HAL_UART_RxCpltCallback+0xf0>)
 800860e:	f7fe f83b 	bl	8006688 <qput>
 8008612:	e04d      	b.n	80086b0 <HAL_UART_RxCpltCallback+0xd8>


	}
	//===========================================================================
	else if ( huart->Instance == USART2 && phuart2 )
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a2c      	ldr	r2, [pc, #176]	; (80086cc <HAL_UART_RxCpltCallback+0xf4>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d114      	bne.n	8008648 <HAL_UART_RxCpltCallback+0x70>
 800861e:	4b2c      	ldr	r3, [pc, #176]	; (80086d0 <HAL_UART_RxCpltCallback+0xf8>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d010      	beq.n	8008648 <HAL_UART_RxCpltCallback+0x70>
	{
		//	RS232 - RFM
		g_nStampRx2 = HAL_GetTick();
 8008626:	f7f9 fb7b 	bl	8001d20 <HAL_GetTick>
 800862a:	4603      	mov	r3, r0
 800862c:	4a29      	ldr	r2, [pc, #164]	; (80086d4 <HAL_UART_RxCpltCallback+0xfc>)
 800862e:	6013      	str	r3, [r2, #0]

		HAL_UART_Receive_IT( huart, dataRx2, 1 );
 8008630:	2201      	movs	r2, #1
 8008632:	4929      	ldr	r1, [pc, #164]	; (80086d8 <HAL_UART_RxCpltCallback+0x100>)
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7fd fbcb 	bl	8005dd0 <HAL_UART_Receive_IT>

		qput( &g_qUart2, dataRx2[0] );
 800863a:	4b27      	ldr	r3, [pc, #156]	; (80086d8 <HAL_UART_RxCpltCallback+0x100>)
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	4619      	mov	r1, r3
 8008640:	4826      	ldr	r0, [pc, #152]	; (80086dc <HAL_UART_RxCpltCallback+0x104>)
 8008642:	f7fe f821 	bl	8006688 <qput>
 8008646:	e033      	b.n	80086b0 <HAL_UART_RxCpltCallback+0xd8>


	}
	//===========================================================================
	else if ( huart->Instance == USART3 && phuart3 )
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a24      	ldr	r2, [pc, #144]	; (80086e0 <HAL_UART_RxCpltCallback+0x108>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d114      	bne.n	800867c <HAL_UART_RxCpltCallback+0xa4>
 8008652:	4b24      	ldr	r3, [pc, #144]	; (80086e4 <HAL_UART_RxCpltCallback+0x10c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d010      	beq.n	800867c <HAL_UART_RxCpltCallback+0xa4>
	{
		//	RS485
		g_nStampRx3 = HAL_GetTick();
 800865a:	f7f9 fb61 	bl	8001d20 <HAL_GetTick>
 800865e:	4603      	mov	r3, r0
 8008660:	4a21      	ldr	r2, [pc, #132]	; (80086e8 <HAL_UART_RxCpltCallback+0x110>)
 8008662:	6013      	str	r3, [r2, #0]

		HAL_UART_Receive_IT( huart, dataRx3, 1 );
 8008664:	2201      	movs	r2, #1
 8008666:	4921      	ldr	r1, [pc, #132]	; (80086ec <HAL_UART_RxCpltCallback+0x114>)
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7fd fbb1 	bl	8005dd0 <HAL_UART_Receive_IT>

		qput( &g_qUart3, dataRx3[0] );
 800866e:	4b1f      	ldr	r3, [pc, #124]	; (80086ec <HAL_UART_RxCpltCallback+0x114>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	4619      	mov	r1, r3
 8008674:	481e      	ldr	r0, [pc, #120]	; (80086f0 <HAL_UART_RxCpltCallback+0x118>)
 8008676:	f7fe f807 	bl	8006688 <qput>
 800867a:	e019      	b.n	80086b0 <HAL_UART_RxCpltCallback+0xd8>

	}
	//===========================================================================
	else if ( huart->Instance == UART5 && phuart5 )
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a1c      	ldr	r2, [pc, #112]	; (80086f4 <HAL_UART_RxCpltCallback+0x11c>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d114      	bne.n	80086b0 <HAL_UART_RxCpltCallback+0xd8>
 8008686:	4b1c      	ldr	r3, [pc, #112]	; (80086f8 <HAL_UART_RxCpltCallback+0x120>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d010      	beq.n	80086b0 <HAL_UART_RxCpltCallback+0xd8>
	{
		//	RS485
		g_nStampRx5 = HAL_GetTick();
 800868e:	f7f9 fb47 	bl	8001d20 <HAL_GetTick>
 8008692:	4603      	mov	r3, r0
 8008694:	4a19      	ldr	r2, [pc, #100]	; (80086fc <HAL_UART_RxCpltCallback+0x124>)
 8008696:	6013      	str	r3, [r2, #0]

		HAL_UART_Receive_IT( huart, dataRx5, 1 );
 8008698:	2201      	movs	r2, #1
 800869a:	4919      	ldr	r1, [pc, #100]	; (8008700 <HAL_UART_RxCpltCallback+0x128>)
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7fd fb97 	bl	8005dd0 <HAL_UART_Receive_IT>

		qput( &g_qUart5, dataRx5[0] );
 80086a2:	4b17      	ldr	r3, [pc, #92]	; (8008700 <HAL_UART_RxCpltCallback+0x128>)
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	4619      	mov	r1, r3
 80086a8:	4816      	ldr	r0, [pc, #88]	; (8008704 <HAL_UART_RxCpltCallback+0x12c>)
 80086aa:	f7fd ffed 	bl	8006688 <qput>


	}

	//===========================================================================
}
 80086ae:	e7ff      	b.n	80086b0 <HAL_UART_RxCpltCallback+0xd8>
 80086b0:	bf00      	nop
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40013800 	.word	0x40013800
 80086bc:	20000b34 	.word	0x20000b34
 80086c0:	20000b24 	.word	0x20000b24
 80086c4:	20000b04 	.word	0x20000b04
 80086c8:	200006e4 	.word	0x200006e4
 80086cc:	40004400 	.word	0x40004400
 80086d0:	20000b38 	.word	0x20000b38
 80086d4:	20000b28 	.word	0x20000b28
 80086d8:	20000b0c 	.word	0x20000b0c
 80086dc:	200007ec 	.word	0x200007ec
 80086e0:	40004800 	.word	0x40004800
 80086e4:	20000b3c 	.word	0x20000b3c
 80086e8:	20000b2c 	.word	0x20000b2c
 80086ec:	20000b14 	.word	0x20000b14
 80086f0:	200008f4 	.word	0x200008f4
 80086f4:	40005000 	.word	0x40005000
 80086f8:	20000b40 	.word	0x20000b40
 80086fc:	20000b30 	.word	0x20000b30
 8008700:	20000b1c 	.word	0x20000b1c
 8008704:	200009fc 	.word	0x200009fc

08008708 <checkSerial>:
/* check overrun and recovery on uart */
//	Add a comment to this line
//=============================================================================
void checkSerial(UART_HandleTypeDef* uart)
//=============================================================================
{
 8008708:	b590      	push	{r4, r7, lr}
 800870a:	b087      	sub	sp, #28
 800870c:	af02      	add	r7, sp, #8
 800870e:	6078      	str	r0, [r7, #4]

#if defined(_WIN32)
#else		//	STM32
	if (__HAL_UART_GET_FLAG(uart, UART_FLAG_ORE))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0308 	and.w	r3, r3, #8
 800871a:	2b08      	cmp	r3, #8
 800871c:	d14a      	bne.n	80087b4 <checkSerial+0xac>
	{
		if (HAL_UART_Init(uart) != HAL_OK)
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7fd f9d8 	bl	8005ad4 <HAL_UART_Init>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d005      	beq.n	8008736 <checkSerial+0x2e>
		{
			//_Error_Handler(__FILE__, __LINE__);
			printf("%s(%d)\n", __FILE__, __LINE__);
 800872a:	f240 121d 	movw	r2, #285	; 0x11d
 800872e:	4923      	ldr	r1, [pc, #140]	; (80087bc <checkSerial+0xb4>)
 8008730:	4823      	ldr	r0, [pc, #140]	; (80087c0 <checkSerial+0xb8>)
 8008732:	f000 fe4f 	bl	80093d4 <iprintf>
		}
		char c;
		HAL_UART_Receive_IT(uart, (uint8_t*)&c, 1);
 8008736:	f107 030f 	add.w	r3, r7, #15
 800873a:	2201      	movs	r2, #1
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7fd fb46 	bl	8005dd0 <HAL_UART_Receive_IT>
		printf("[ERR] UART overrun detected\n");
 8008744:	481f      	ldr	r0, [pc, #124]	; (80087c4 <checkSerial+0xbc>)
 8008746:	f000 fedf 	bl	8009508 <puts>
		printf("UART Inst : 0x%08X\n", uart->Instance );
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4619      	mov	r1, r3
 8008750:	481d      	ldr	r0, [pc, #116]	; (80087c8 <checkSerial+0xc0>)
 8008752:	f000 fe3f 	bl	80093d4 <iprintf>
		printf("UART > err code : %x tStat: %x rStat: %x SR: %x DR %x \n", uart->ErrorCode, uart->gState, uart->RxState, uart->Instance->SR, uart->Instance->DR);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008760:	b2db      	uxtb	r3, r3
 8008762:	4618      	mov	r0, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800876a:	b2db      	uxtb	r3, r3
 800876c:	461c      	mov	r4, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	6812      	ldr	r2, [r2, #0]
 8008778:	6852      	ldr	r2, [r2, #4]
 800877a:	9201      	str	r2, [sp, #4]
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	4623      	mov	r3, r4
 8008780:	4602      	mov	r2, r0
 8008782:	4812      	ldr	r0, [pc, #72]	; (80087cc <checkSerial+0xc4>)
 8008784:	f000 fe26 	bl	80093d4 <iprintf>
		printf("UART > BRR : %x CR1: %x CR2: %x CR3: %x GTPR %x \n", uart->Instance->BRR, uart->Instance->CR1, uart->Instance->CR2, uart->Instance->CR3, uart->Instance->GTPR);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6899      	ldr	r1, [r3, #8]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68d8      	ldr	r0, [r3, #12]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691c      	ldr	r4, [r3, #16]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6812      	ldr	r2, [r2, #0]
 80087a4:	6992      	ldr	r2, [r2, #24]
 80087a6:	9201      	str	r2, [sp, #4]
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	4623      	mov	r3, r4
 80087ac:	4602      	mov	r2, r0
 80087ae:	4808      	ldr	r0, [pc, #32]	; (80087d0 <checkSerial+0xc8>)
 80087b0:	f000 fe10 	bl	80093d4 <iprintf>
	}

#endif
}
 80087b4:	bf00      	nop
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd90      	pop	{r4, r7, pc}
 80087bc:	0800c860 	.word	0x0800c860
 80087c0:	0800c874 	.word	0x0800c874
 80087c4:	0800c87c 	.word	0x0800c87c
 80087c8:	0800c898 	.word	0x0800c898
 80087cc:	0800c8ac 	.word	0x0800c8ac
 80087d0:	0800c8e4 	.word	0x0800c8e4

080087d4 <SerialInitQueue>:


// ============================================================================
void SerialInitQueue( void )
//===========================================================================
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
	//	Debug Queue
	init_queue( &g_qUart1 );
 80087d8:	4806      	ldr	r0, [pc, #24]	; (80087f4 <SerialInitQueue+0x20>)
 80087da:	f7fd ff2b 	bl	8006634 <init_queue>

	//	RFM
	init_queue( &g_qUart2 );
 80087de:	4806      	ldr	r0, [pc, #24]	; (80087f8 <SerialInitQueue+0x24>)
 80087e0:	f7fd ff28 	bl	8006634 <init_queue>

	//	RS485 Queue
	init_queue( &g_qUart3 );
 80087e4:	4805      	ldr	r0, [pc, #20]	; (80087fc <SerialInitQueue+0x28>)
 80087e6:	f7fd ff25 	bl	8006634 <init_queue>

	//	RS485 Queue
	init_queue( &g_qUart5 );
 80087ea:	4805      	ldr	r0, [pc, #20]	; (8008800 <SerialInitQueue+0x2c>)
 80087ec:	f7fd ff22 	bl	8006634 <init_queue>
}
 80087f0:	bf00      	nop
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	200006e4 	.word	0x200006e4
 80087f8:	200007ec 	.word	0x200007ec
 80087fc:	200008f4 	.word	0x200008f4
 8008800:	200009fc 	.word	0x200009fc

08008804 <SerialInit>:

//===========================================================================
void SerialInit( UART_HandleTypeDef *_phuart1, UART_HandleTypeDef *_phuart2, UART_HandleTypeDef *_phuart3, UART_HandleTypeDef *_phuart5 )
//===========================================================================
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	603b      	str	r3, [r7, #0]
	SerialInitQueue();
 8008812:	f7ff ffdf 	bl	80087d4 <SerialInitQueue>

	//===========================================================================
	//	Set Serial Handle
	phuart1 = _phuart1;
 8008816:	4a1e      	ldr	r2, [pc, #120]	; (8008890 <SerialInit+0x8c>)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6013      	str	r3, [r2, #0]
	phuart2 = _phuart2;
 800881c:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <SerialInit+0x90>)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6013      	str	r3, [r2, #0]
	phuart3 = _phuart3;
 8008822:	4a1d      	ldr	r2, [pc, #116]	; (8008898 <SerialInit+0x94>)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6013      	str	r3, [r2, #0]
	phuart5 = _phuart5;
 8008828:	4a1c      	ldr	r2, [pc, #112]	; (800889c <SerialInit+0x98>)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	6013      	str	r3, [r2, #0]

#if defined(_WIN32)
#else

	//	UART Console
	if ( phuart1 )		HAL_UART_Receive_IT( phuart1, dataRx1, 1 );
 800882e:	4b18      	ldr	r3, [pc, #96]	; (8008890 <SerialInit+0x8c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d006      	beq.n	8008844 <SerialInit+0x40>
 8008836:	4b16      	ldr	r3, [pc, #88]	; (8008890 <SerialInit+0x8c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2201      	movs	r2, #1
 800883c:	4918      	ldr	r1, [pc, #96]	; (80088a0 <SerialInit+0x9c>)
 800883e:	4618      	mov	r0, r3
 8008840:	f7fd fac6 	bl	8005dd0 <HAL_UART_Receive_IT>
	//	RFM
	if ( phuart2 )		HAL_UART_Receive_IT( phuart2, dataRx2, 1 );
 8008844:	4b13      	ldr	r3, [pc, #76]	; (8008894 <SerialInit+0x90>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d006      	beq.n	800885a <SerialInit+0x56>
 800884c:	4b11      	ldr	r3, [pc, #68]	; (8008894 <SerialInit+0x90>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2201      	movs	r2, #1
 8008852:	4914      	ldr	r1, [pc, #80]	; (80088a4 <SerialInit+0xa0>)
 8008854:	4618      	mov	r0, r3
 8008856:	f7fd fabb 	bl	8005dd0 <HAL_UART_Receive_IT>
	//	UART RS485
	if ( phuart3 )		HAL_UART_Receive_IT( phuart3, dataRx3, 1 );
 800885a:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <SerialInit+0x94>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d006      	beq.n	8008870 <SerialInit+0x6c>
 8008862:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <SerialInit+0x94>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2201      	movs	r2, #1
 8008868:	490f      	ldr	r1, [pc, #60]	; (80088a8 <SerialInit+0xa4>)
 800886a:	4618      	mov	r0, r3
 800886c:	f7fd fab0 	bl	8005dd0 <HAL_UART_Receive_IT>
	//	UART RS485
	if ( phuart5 )		HAL_UART_Receive_IT( phuart5, dataRx5, 1 );
 8008870:	4b0a      	ldr	r3, [pc, #40]	; (800889c <SerialInit+0x98>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d006      	beq.n	8008886 <SerialInit+0x82>
 8008878:	4b08      	ldr	r3, [pc, #32]	; (800889c <SerialInit+0x98>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2201      	movs	r2, #1
 800887e:	490b      	ldr	r1, [pc, #44]	; (80088ac <SerialInit+0xa8>)
 8008880:	4618      	mov	r0, r3
 8008882:	f7fd faa5 	bl	8005dd0 <HAL_UART_Receive_IT>

#endif
}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	20000b34 	.word	0x20000b34
 8008894:	20000b38 	.word	0x20000b38
 8008898:	20000b3c 	.word	0x20000b3c
 800889c:	20000b40 	.word	0x20000b40
 80088a0:	20000b04 	.word	0x20000b04
 80088a4:	20000b0c 	.word	0x20000b0c
 80088a8:	20000b14 	.word	0x20000b14
 80088ac:	20000b1c 	.word	0x20000b1c

080088b0 <input_check>:

//===========================================================================
int input_check( void )
//===========================================================================
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	af00      	add	r7, sp, #0
	return qcount( &g_qUart1 );
 80088b4:	4802      	ldr	r0, [pc, #8]	; (80088c0 <input_check+0x10>)
 80088b6:	f7fd fed0 	bl	800665a <qcount>
 80088ba:	4603      	mov	r3, r0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	200006e4 	.word	0x200006e4

080088c4 <ReceivePacket>:
 * @retval HAL_OK: normally return
 *         HAL_BUSY: abort by user
 */
static HAL_StatusTypeDef ReceivePacket( uint8_t *p_data, uint32_t *p_length,
        uint32_t timeout )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
	uint32_t crc;
	uint32_t packet_size = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef status;
	uint8_t char1;

	*p_length = 0;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Receive( pUartY, &char1, 1, timeout );
 80088da:	4b60      	ldr	r3, [pc, #384]	; (8008a5c <ReceivePacket+0x198>)
 80088dc:	6818      	ldr	r0, [r3, #0]
 80088de:	f107 0113 	add.w	r1, r7, #19
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f7fd f9d4 	bl	8005c92 <HAL_UART_Receive>
 80088ea:	4603      	mov	r3, r0
 80088ec:	76fb      	strb	r3, [r7, #27]

	if ( status == HAL_OK )
 80088ee:	7efb      	ldrb	r3, [r7, #27]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f040 80ab 	bne.w	8008a4c <ReceivePacket+0x188>
	{
		switch ( char1 )
 80088f6:	7cfb      	ldrb	r3, [r7, #19]
 80088f8:	2b61      	cmp	r3, #97	; 0x61
 80088fa:	d059      	beq.n	80089b0 <ReceivePacket+0xec>
 80088fc:	2b61      	cmp	r3, #97	; 0x61
 80088fe:	dc5a      	bgt.n	80089b6 <ReceivePacket+0xf2>
 8008900:	2b18      	cmp	r3, #24
 8008902:	dc37      	bgt.n	8008974 <ReceivePacket+0xb0>
 8008904:	2b00      	cmp	r3, #0
 8008906:	dd56      	ble.n	80089b6 <ReceivePacket+0xf2>
 8008908:	3b01      	subs	r3, #1
 800890a:	2b17      	cmp	r3, #23
 800890c:	d853      	bhi.n	80089b6 <ReceivePacket+0xf2>
 800890e:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <ReceivePacket+0x50>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	0800897b 	.word	0x0800897b
 8008918:	08008981 	.word	0x08008981
 800891c:	080089b7 	.word	0x080089b7
 8008920:	080089bd 	.word	0x080089bd
 8008924:	080089b7 	.word	0x080089b7
 8008928:	080089b7 	.word	0x080089b7
 800892c:	080089b7 	.word	0x080089b7
 8008930:	080089b7 	.word	0x080089b7
 8008934:	080089b7 	.word	0x080089b7
 8008938:	080089b7 	.word	0x080089b7
 800893c:	080089b7 	.word	0x080089b7
 8008940:	080089b7 	.word	0x080089b7
 8008944:	080089b7 	.word	0x080089b7
 8008948:	080089b7 	.word	0x080089b7
 800894c:	080089b7 	.word	0x080089b7
 8008950:	080089b7 	.word	0x080089b7
 8008954:	080089b7 	.word	0x080089b7
 8008958:	080089b7 	.word	0x080089b7
 800895c:	080089b7 	.word	0x080089b7
 8008960:	080089b7 	.word	0x080089b7
 8008964:	080089b7 	.word	0x080089b7
 8008968:	080089b7 	.word	0x080089b7
 800896c:	080089b7 	.word	0x080089b7
 8008970:	08008989 	.word	0x08008989
 8008974:	2b41      	cmp	r3, #65	; 0x41
 8008976:	d01b      	beq.n	80089b0 <ReceivePacket+0xec>
 8008978:	e01d      	b.n	80089b6 <ReceivePacket+0xf2>
		{
		case SOH:
			packet_size = PACKET_SIZE;
 800897a:	2380      	movs	r3, #128	; 0x80
 800897c:	61fb      	str	r3, [r7, #28]
			break;
 800897e:	e01e      	b.n	80089be <ReceivePacket+0xfa>
		case STX:
			packet_size = PACKET_1K_SIZE;
 8008980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008984:	61fb      	str	r3, [r7, #28]
			break;
 8008986:	e01a      	b.n	80089be <ReceivePacket+0xfa>
		case EOT:
			break;
		case CA:
			if ( (HAL_UART_Receive( pUartY, &char1, 1, timeout ) == HAL_OK)
 8008988:	4b34      	ldr	r3, [pc, #208]	; (8008a5c <ReceivePacket+0x198>)
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	f107 0113 	add.w	r1, r7, #19
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f7fd f97d 	bl	8005c92 <HAL_UART_Receive>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d105      	bne.n	80089aa <ReceivePacket+0xe6>
			        && (char1 == CA) )
 800899e:	7cfb      	ldrb	r3, [r7, #19]
 80089a0:	2b18      	cmp	r3, #24
 80089a2:	d102      	bne.n	80089aa <ReceivePacket+0xe6>
			{
				packet_size = 2;
 80089a4:	2302      	movs	r3, #2
 80089a6:	61fb      	str	r3, [r7, #28]
			}
			else
			{
				status = HAL_ERROR;
			}
			break;
 80089a8:	e009      	b.n	80089be <ReceivePacket+0xfa>
				status = HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	76fb      	strb	r3, [r7, #27]
			break;
 80089ae:	e006      	b.n	80089be <ReceivePacket+0xfa>
		case ABORT1:
		case ABORT2:
			status = HAL_BUSY;
 80089b0:	2302      	movs	r3, #2
 80089b2:	76fb      	strb	r3, [r7, #27]
			break;
 80089b4:	e003      	b.n	80089be <ReceivePacket+0xfa>
		default:
			status = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	76fb      	strb	r3, [r7, #27]
			break;
 80089ba:	e000      	b.n	80089be <ReceivePacket+0xfa>
			break;
 80089bc:	bf00      	nop
		}
		*p_data = char1;
 80089be:	7cfa      	ldrb	r2, [r7, #19]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	701a      	strb	r2, [r3, #0]

		if ( packet_size >= PACKET_SIZE )
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	2b7f      	cmp	r3, #127	; 0x7f
 80089c8:	d940      	bls.n	8008a4c <ReceivePacket+0x188>
		{
			status = HAL_UART_Receive( pUartY, &p_data[PACKET_NUMBER_INDEX],
 80089ca:	4b24      	ldr	r3, [pc, #144]	; (8008a5c <ReceivePacket+0x198>)
 80089cc:	6818      	ldr	r0, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	1c99      	adds	r1, r3, #2
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3304      	adds	r3, #4
 80089d8:	b29a      	uxth	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f7fd f959 	bl	8005c92 <HAL_UART_Receive>
 80089e0:	4603      	mov	r3, r0
 80089e2:	76fb      	strb	r3, [r7, #27]
			        packet_size + PACKET_OVERHEAD_SIZE, timeout );

			/* Simple packet sanity check */
			if ( status == HAL_OK )
 80089e4:	7efb      	ldrb	r3, [r7, #27]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d12e      	bne.n	8008a48 <ReceivePacket+0x184>
			{
				if ( p_data[PACKET_NUMBER_INDEX]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3302      	adds	r3, #2
 80089ee:	781a      	ldrb	r2, [r3, #0]
				        != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE) )
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3303      	adds	r3, #3
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	43db      	mvns	r3, r3
 80089f8:	b2db      	uxtb	r3, r3
				if ( p_data[PACKET_NUMBER_INDEX]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d004      	beq.n	8008a08 <ReceivePacket+0x144>
				{
					packet_size = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	61fb      	str	r3, [r7, #28]
					status = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	76fb      	strb	r3, [r7, #27]
 8008a06:	e021      	b.n	8008a4c <ReceivePacket+0x188>
				}
				else
				{
					/* Check packet CRC */
					crc = p_data[packet_size + PACKET_DATA_INDEX] << 8;
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4413      	add	r3, r2
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	021b      	lsls	r3, r3, #8
 8008a14:	617b      	str	r3, [r7, #20]
					crc += p_data[packet_size + PACKET_DATA_INDEX + 1];
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	3305      	adds	r3, #5
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	461a      	mov	r2, r3
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	4413      	add	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]
					if ( Cal_CRC16( &p_data[PACKET_DATA_INDEX], packet_size )
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	69f9      	ldr	r1, [r7, #28]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 f909 	bl	8008c46 <Cal_CRC16>
 8008a34:	4603      	mov	r3, r0
 8008a36:	461a      	mov	r2, r3
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d006      	beq.n	8008a4c <ReceivePacket+0x188>
					        != crc )
					{
						packet_size = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	61fb      	str	r3, [r7, #28]
						status = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	76fb      	strb	r3, [r7, #27]
 8008a46:	e001      	b.n	8008a4c <ReceivePacket+0x188>
					}
				}
			}
			else
			{
				packet_size = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	61fb      	str	r3, [r7, #28]
			}
		}
	}
	*p_length = packet_size;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	69fa      	ldr	r2, [r7, #28]
 8008a50:	601a      	str	r2, [r3, #0]
	return status;
 8008a52:	7efb      	ldrb	r3, [r7, #27]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3720      	adds	r7, #32
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	20000130 	.word	0x20000130

08008a60 <PrepareIntialPacket>:
 * @param  length: length of the file to be sent in bytes
 * @retval None
 */
static void PrepareIntialPacket( uint8_t *p_data, const uint8_t *p_file_name,
        uint32_t length )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08a      	sub	sp, #40	; 0x28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
	uint32_t i, j = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	623b      	str	r3, [r7, #32]
	uint8_t astring[10];

	/* first 3 bytes are constant */
	p_data[PACKET_START_INDEX] = SOH;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	2201      	movs	r2, #1
 8008a76:	701a      	strb	r2, [r3, #0]
	p_data[PACKET_NUMBER_INDEX] = 0x00;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	3302      	adds	r3, #2
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	701a      	strb	r2, [r3, #0]
	p_data[PACKET_CNUMBER_INDEX] = 0xff;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3303      	adds	r3, #3
 8008a84:	22ff      	movs	r2, #255	; 0xff
 8008a86:	701a      	strb	r2, [r3, #0]

	/* Filename written */
	for ( i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++ )
 8008a88:	2300      	movs	r3, #0
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8c:	e00b      	b.n	8008aa6 <PrepareIntialPacket+0x46>
	{
		p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	441a      	add	r2, r3
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	3304      	adds	r3, #4
 8008a98:	68f9      	ldr	r1, [r7, #12]
 8008a9a:	440b      	add	r3, r1
 8008a9c:	7812      	ldrb	r2, [r2, #0]
 8008a9e:	701a      	strb	r2, [r3, #0]
	for ( i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++ )
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	4413      	add	r3, r2
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <PrepareIntialPacket+0x58>
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	2b3f      	cmp	r3, #63	; 0x3f
 8008ab6:	d9ea      	bls.n	8008a8e <PrepareIntialPacket+0x2e>
	}

	p_data[i + PACKET_DATA_INDEX] = 0x00;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	3304      	adds	r3, #4
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4413      	add	r3, r2
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	701a      	strb	r2, [r3, #0]

	/* file size written */
	Int2Str( astring, length );
 8008ac4:	f107 0314 	add.w	r3, r7, #20
 8008ac8:	6879      	ldr	r1, [r7, #4]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fb14 	bl	80070f8 <Int2Str>
	i = i + PACKET_DATA_INDEX + 1;
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	3305      	adds	r3, #5
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
	while ( astring[j] != '\0' )
 8008ad6:	e00c      	b.n	8008af2 <PrepareIntialPacket+0x92>
	{
		p_data[i++] = astring[j++];
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	623a      	str	r2, [r7, #32]
 8008ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae0:	1c51      	adds	r1, r2, #1
 8008ae2:	6279      	str	r1, [r7, #36]	; 0x24
 8008ae4:	68f9      	ldr	r1, [r7, #12]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	3328      	adds	r3, #40	; 0x28
 8008aea:	443b      	add	r3, r7
 8008aec:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8008af0:	7013      	strb	r3, [r2, #0]
	while ( astring[j] != '\0' )
 8008af2:	f107 0214 	add.w	r2, r7, #20
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	4413      	add	r3, r2
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1eb      	bne.n	8008ad8 <PrepareIntialPacket+0x78>
	}

	/* padding with zeros */
	for ( j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++ )
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	623b      	str	r3, [r7, #32]
 8008b04:	e007      	b.n	8008b16 <PrepareIntialPacket+0xb6>
	{
		p_data[j] = 0;
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	701a      	strb	r2, [r3, #0]
	for ( j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++ )
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	3301      	adds	r3, #1
 8008b14:	623b      	str	r3, [r7, #32]
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	2b83      	cmp	r3, #131	; 0x83
 8008b1a:	d9f4      	bls.n	8008b06 <PrepareIntialPacket+0xa6>
	}
}
 8008b1c:	bf00      	nop
 8008b1e:	bf00      	nop
 8008b20:	3728      	adds	r7, #40	; 0x28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <PreparePacket>:
 * @param  size_blk: length of the block to be sent in bytes
 * @retval None
 */
static void PreparePacket( uint8_t *p_source, uint8_t *p_packet, uint8_t pkt_nr,
        uint32_t size_blk )
{
 8008b26:	b480      	push	{r7}
 8008b28:	b089      	sub	sp, #36	; 0x24
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	60f8      	str	r0, [r7, #12]
 8008b2e:	60b9      	str	r1, [r7, #8]
 8008b30:	603b      	str	r3, [r7, #0]
 8008b32:	4613      	mov	r3, r2
 8008b34:	71fb      	strb	r3, [r7, #7]
	uint8_t *p_record;
	uint32_t i, size, packet_size;

	/* Make first three packet */
	packet_size = size_blk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b3c:	d302      	bcc.n	8008b44 <PreparePacket+0x1e>
 8008b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b42:	e000      	b.n	8008b46 <PreparePacket+0x20>
 8008b44:	2380      	movs	r3, #128	; 0x80
 8008b46:	617b      	str	r3, [r7, #20]
	size = size_blk < packet_size ? size_blk : packet_size;
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	bf28      	it	cs
 8008b50:	4613      	movcs	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]
	if ( packet_size == PACKET_1K_SIZE )
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b5a:	d104      	bne.n	8008b66 <PreparePacket+0x40>
	{
		p_packet[PACKET_START_INDEX] = STX;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	2202      	movs	r2, #2
 8008b62:	701a      	strb	r2, [r3, #0]
 8008b64:	e003      	b.n	8008b6e <PreparePacket+0x48>
	}
	else
	{
		p_packet[PACKET_START_INDEX] = SOH;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	701a      	strb	r2, [r3, #0]
	}
	p_packet[PACKET_NUMBER_INDEX] = pkt_nr;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	3302      	adds	r3, #2
 8008b72:	79fa      	ldrb	r2, [r7, #7]
 8008b74:	701a      	strb	r2, [r3, #0]
	p_packet[PACKET_CNUMBER_INDEX] = (~pkt_nr);
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	3303      	adds	r3, #3
 8008b7a:	79fa      	ldrb	r2, [r7, #7]
 8008b7c:	43d2      	mvns	r2, r2
 8008b7e:	b2d2      	uxtb	r2, r2
 8008b80:	701a      	strb	r2, [r3, #0]
	p_record = p_source;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	61fb      	str	r3, [r7, #28]

	/* Filename packet has valid data */
	for ( i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX; i++ )
 8008b86:	2304      	movs	r3, #4
 8008b88:	61bb      	str	r3, [r7, #24]
 8008b8a:	e00a      	b.n	8008ba2 <PreparePacket+0x7c>
	{
		p_packet[i] = *p_record++;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	61fa      	str	r2, [r7, #28]
 8008b92:	68b9      	ldr	r1, [r7, #8]
 8008b94:	69ba      	ldr	r2, [r7, #24]
 8008b96:	440a      	add	r2, r1
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	7013      	strb	r3, [r2, #0]
	for ( i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX; i++ )
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	61bb      	str	r3, [r7, #24]
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	3304      	adds	r3, #4
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d3ef      	bcc.n	8008b8c <PreparePacket+0x66>
	}
	if ( size <= packet_size )
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d810      	bhi.n	8008bd6 <PreparePacket+0xb0>
	{
		for ( i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	61bb      	str	r3, [r7, #24]
 8008bba:	e007      	b.n	8008bcc <PreparePacket+0xa6>
		        i++ )
		{
			p_packet[i] = 0x1A; /* EOF (0x1A) or 0x00 */
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	221a      	movs	r2, #26
 8008bc4:	701a      	strb	r2, [r3, #0]
		        i++ )
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	61bb      	str	r3, [r7, #24]
		for ( i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d3f2      	bcc.n	8008bbc <PreparePacket+0x96>
		}
	}
}
 8008bd6:	bf00      	nop
 8008bd8:	3724      	adds	r7, #36	; 0x24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bc80      	pop	{r7}
 8008bde:	4770      	bx	lr

08008be0 <UpdateCRC16>:
 * @param  crc_in input value
 * @param  input byte
 * @retval None
 */
uint16_t UpdateCRC16( uint16_t crc_in, uint8_t byte )
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	460a      	mov	r2, r1
 8008bea:	80fb      	strh	r3, [r7, #6]
 8008bec:	4613      	mov	r3, r2
 8008bee:	717b      	strb	r3, [r7, #5]
	uint32_t crc = crc_in;
 8008bf0:	88fb      	ldrh	r3, [r7, #6]
 8008bf2:	60fb      	str	r3, [r7, #12]
	uint32_t in = byte | 0x100;
 8008bf4:	797b      	ldrb	r3, [r7, #5]
 8008bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bfa:	60bb      	str	r3, [r7, #8]

	do
	{
		crc <<= 1;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	60fb      	str	r3, [r7, #12]
		in <<= 1;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	60bb      	str	r3, [r7, #8]
		if ( in & 0x100 )
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <UpdateCRC16+0x38>
			++crc;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3301      	adds	r3, #1
 8008c16:	60fb      	str	r3, [r7, #12]
		if ( crc & 0x10000 )
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d005      	beq.n	8008c2e <UpdateCRC16+0x4e>
			crc ^= 0x1021;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8008c28:	f083 0301 	eor.w	r3, r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]
	}

	while ( !(in & 0x10000) );
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0e1      	beq.n	8008bfc <UpdateCRC16+0x1c>

	return crc & 0xffffu;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	b29b      	uxth	r3, r3
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bc80      	pop	{r7}
 8008c44:	4770      	bx	lr

08008c46 <Cal_CRC16>:
 * @param  data
 * @param  length
 * @retval None
 */
uint16_t Cal_CRC16( const uint8_t *p_data, uint32_t size )
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	6039      	str	r1, [r7, #0]
	uint32_t crc = 0;
 8008c50:	2300      	movs	r3, #0
 8008c52:	60fb      	str	r3, [r7, #12]
	const uint8_t *dataEnd = p_data + size;
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	4413      	add	r3, r2
 8008c5a:	60bb      	str	r3, [r7, #8]

	while ( p_data < dataEnd )
 8008c5c:	e00a      	b.n	8008c74 <Cal_CRC16+0x2e>
		crc = UpdateCRC16( crc, *p_data++ );
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	b298      	uxth	r0, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	1c5a      	adds	r2, r3, #1
 8008c66:	607a      	str	r2, [r7, #4]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	f7ff ffb8 	bl	8008be0 <UpdateCRC16>
 8008c70:	4603      	mov	r3, r0
 8008c72:	60fb      	str	r3, [r7, #12]
	while ( p_data < dataEnd )
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d3f0      	bcc.n	8008c5e <Cal_CRC16+0x18>

	crc = UpdateCRC16( crc, 0 );
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	2100      	movs	r1, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7ff ffac 	bl	8008be0 <UpdateCRC16>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	60fb      	str	r3, [r7, #12]
	crc = UpdateCRC16( crc, 0 );
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	2100      	movs	r1, #0
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff ffa4 	bl	8008be0 <UpdateCRC16>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	60fb      	str	r3, [r7, #12]

	return crc & 0xffffu;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	b29b      	uxth	r3, r3
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <Ymodem_Receive>:
 * @brief  Receive a file using the ymodem protocol with CRC16.
 * @param  p_size The size of the file.
 * @retval COM_StatusTypeDef result of reception/programming
 */
COM_StatusTypeDef Ymodem_Receive( uint32_t *p_size )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b092      	sub	sp, #72	; 0x48
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
	uint32_t i, packet_length, session_done = 0, file_done, errors = 0,
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	63bb      	str	r3, [r7, #56]	; 0x38
	        session_begin = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t flashdestination, ramsource, filesize;
	uint8_t *file_ptr;
	uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
	COM_StatusTypeDef result = COM_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//========================================================================
	/* Initialize flashdestination variable */
//	flashdestination = APPLICATION_ADDRESS;
	flashdestination = ADDR_FLASH_IMGAPP;		//	0x08024000
 8008cc2:	4b86      	ldr	r3, [pc, #536]	; (8008edc <Ymodem_Receive+0x234>)
 8008cc4:	633b      	str	r3, [r7, #48]	; 0x30
	//========================================================================

	while ( (session_done == 0) && (result == COM_OK) )
 8008cc6:	e0fb      	b.n	8008ec0 <Ymodem_Receive+0x218>
	{
		packets_received = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		file_done = 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
		while ( (file_done == 0) && (result == COM_OK) )
 8008cd2:	e0ed      	b.n	8008eb0 <Ymodem_Receive+0x208>
		{
			switch ( ReceivePacket( aPacketData, &packet_length,
 8008cd4:	f107 0320 	add.w	r3, r7, #32
 8008cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4880      	ldr	r0, [pc, #512]	; (8008ee0 <Ymodem_Receive+0x238>)
 8008ce0:	f7ff fdf0 	bl	80088c4 <ReceivePacket>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <Ymodem_Receive+0x4a>
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	f000 80c2 	beq.w	8008e74 <Ymodem_Receive+0x1cc>
 8008cf0:	e0ca      	b.n	8008e88 <Ymodem_Receive+0x1e0>
			        DOWNLOAD_TIMEOUT ) )
			{
			case HAL_OK:
				errors = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	63bb      	str	r3, [r7, #56]	; 0x38
				switch ( packet_length )
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d008      	beq.n	8008d0e <Ymodem_Receive+0x66>
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d10c      	bne.n	8008d1a <Ymodem_Receive+0x72>
				{
				case 2:
					/* Abort by sender */
					Serial_PutByte( ACK );
 8008d00:	2006      	movs	r0, #6
 8008d02:	f7fe fb67 	bl	80073d4 <Serial_PutByte>
					result = COM_ABORT;
 8008d06:	2302      	movs	r3, #2
 8008d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					break;
 8008d0c:	e0b1      	b.n	8008e72 <Ymodem_Receive+0x1ca>
				case 0:
					/* End of transmission */
					Serial_PutByte( ACK );
 8008d0e:	2006      	movs	r0, #6
 8008d10:	f7fe fb60 	bl	80073d4 <Serial_PutByte>
					file_done = 1;
 8008d14:	2301      	movs	r3, #1
 8008d16:	63fb      	str	r3, [r7, #60]	; 0x3c
					break;
 8008d18:	e0ab      	b.n	8008e72 <Ymodem_Receive+0x1ca>
				default:
					/* Normal packet */
					if ( aPacketData[PACKET_NUMBER_INDEX] != packets_received )
 8008d1a:	4b71      	ldr	r3, [pc, #452]	; (8008ee0 <Ymodem_Receive+0x238>)
 8008d1c:	789b      	ldrb	r3, [r3, #2]
 8008d1e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d003      	beq.n	8008d2e <Ymodem_Receive+0x86>
					{
						Serial_PutByte( NAK );
 8008d26:	2015      	movs	r0, #21
 8008d28:	f7fe fb54 	bl	80073d4 <Serial_PutByte>
							}
						}
						packets_received++;
						session_begin = 1;
					}
					break;
 8008d2c:	e0a0      	b.n	8008e70 <Ymodem_Receive+0x1c8>
						if ( packets_received == 0 )
 8008d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d178      	bne.n	8008e28 <Ymodem_Receive+0x180>
							if ( aPacketData[PACKET_DATA_INDEX] != 0 )
 8008d36:	4b6a      	ldr	r3, [pc, #424]	; (8008ee0 <Ymodem_Receive+0x238>)
 8008d38:	791b      	ldrb	r3, [r3, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d06c      	beq.n	8008e18 <Ymodem_Receive+0x170>
								i = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	647b      	str	r3, [r7, #68]	; 0x44
								file_ptr = aPacketData + PACKET_DATA_INDEX;
 8008d42:	4b68      	ldr	r3, [pc, #416]	; (8008ee4 <Ymodem_Receive+0x23c>)
 8008d44:	62fb      	str	r3, [r7, #44]	; 0x2c
								while ( (*file_ptr != 0)
 8008d46:	e008      	b.n	8008d5a <Ymodem_Receive+0xb2>
									aFileName[i++] = *file_ptr++;
 8008d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d4a:	1c53      	adds	r3, r2, #1
 8008d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d50:	1c59      	adds	r1, r3, #1
 8008d52:	6479      	str	r1, [r7, #68]	; 0x44
 8008d54:	7811      	ldrb	r1, [r2, #0]
 8008d56:	4a64      	ldr	r2, [pc, #400]	; (8008ee8 <Ymodem_Receive+0x240>)
 8008d58:	54d1      	strb	r1, [r2, r3]
								while ( (*file_ptr != 0)
 8008d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d002      	beq.n	8008d68 <Ymodem_Receive+0xc0>
								        && (i < FILE_NAME_LENGTH) )
 8008d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d64:	2b3f      	cmp	r3, #63	; 0x3f
 8008d66:	d9ef      	bls.n	8008d48 <Ymodem_Receive+0xa0>
								aFileName[i++] = '\0';
 8008d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	647a      	str	r2, [r7, #68]	; 0x44
 8008d6e:	4a5e      	ldr	r2, [pc, #376]	; (8008ee8 <Ymodem_Receive+0x240>)
 8008d70:	2100      	movs	r1, #0
 8008d72:	54d1      	strb	r1, [r2, r3]
								i = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	647b      	str	r3, [r7, #68]	; 0x44
								file_ptr++;
 8008d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
								while ( (*file_ptr != ' ')
 8008d7e:	e00a      	b.n	8008d96 <Ymodem_Receive+0xee>
									file_size[i++] = *file_ptr++;
 8008d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d82:	1c53      	adds	r3, r2, #1
 8008d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d88:	1c59      	adds	r1, r3, #1
 8008d8a:	6479      	str	r1, [r7, #68]	; 0x44
 8008d8c:	7812      	ldrb	r2, [r2, #0]
 8008d8e:	3348      	adds	r3, #72	; 0x48
 8008d90:	443b      	add	r3, r7
 8008d92:	f803 2c3c 	strb.w	r2, [r3, #-60]
								while ( (*file_ptr != ' ')
 8008d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b20      	cmp	r3, #32
 8008d9c:	d002      	beq.n	8008da4 <Ymodem_Receive+0xfc>
								        && (i < FILE_SIZE_LENGTH) )
 8008d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da0:	2b0f      	cmp	r3, #15
 8008da2:	d9ed      	bls.n	8008d80 <Ymodem_Receive+0xd8>
								file_size[i++] = '\0';
 8008da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	647a      	str	r2, [r7, #68]	; 0x44
 8008daa:	3348      	adds	r3, #72	; 0x48
 8008dac:	443b      	add	r3, r7
 8008dae:	2200      	movs	r2, #0
 8008db0:	f803 2c3c 	strb.w	r2, [r3, #-60]
								Str2Int( file_size, &filesize );
 8008db4:	f107 021c 	add.w	r2, r7, #28
 8008db8:	f107 030c 	add.w	r3, r7, #12
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe f9ee 	bl	80071a0 <Str2Int>
								if ( *p_size > (USER_FLASH_SIZE + 1) )
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f243 0201 	movw	r2, #12289	; 0x3001
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d916      	bls.n	8008dfe <Ymodem_Receive+0x156>
									tmp = CA;
 8008dd0:	2318      	movs	r3, #24
 8008dd2:	72fb      	strb	r3, [r7, #11]
									HAL_UART_Transmit( pUartY, &tmp, 1,
 8008dd4:	4b45      	ldr	r3, [pc, #276]	; (8008eec <Ymodem_Receive+0x244>)
 8008dd6:	6818      	ldr	r0, [r3, #0]
 8008dd8:	f107 010b 	add.w	r1, r7, #11
 8008ddc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008de0:	2201      	movs	r2, #1
 8008de2:	f7fc fec4 	bl	8005b6e <HAL_UART_Transmit>
									HAL_UART_Transmit( pUartY, &tmp, 1,
 8008de6:	4b41      	ldr	r3, [pc, #260]	; (8008eec <Ymodem_Receive+0x244>)
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	f107 010b 	add.w	r1, r7, #11
 8008dee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008df2:	2201      	movs	r2, #1
 8008df4:	f7fc febb 	bl	8005b6e <HAL_UART_Transmit>
									result = COM_LIMIT;
 8008df8:	2305      	movs	r3, #5
 8008dfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
								FLASH_If_Erase( ADDR_FLASH_IMGBOOT );	//	0x08020000
 8008dfe:	483c      	ldr	r0, [pc, #240]	; (8008ef0 <Ymodem_Receive+0x248>)
 8008e00:	f7fe f836 	bl	8006e70 <FLASH_If_Erase>
								*p_size = filesize;
 8008e04:	69fa      	ldr	r2, [r7, #28]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	601a      	str	r2, [r3, #0]
								Serial_PutByte( ACK );
 8008e0a:	2006      	movs	r0, #6
 8008e0c:	f7fe fae2 	bl	80073d4 <Serial_PutByte>
								Serial_PutByte( CRC16 );
 8008e10:	2043      	movs	r0, #67	; 0x43
 8008e12:	f7fe fadf 	bl	80073d4 <Serial_PutByte>
 8008e16:	e024      	b.n	8008e62 <Ymodem_Receive+0x1ba>
								Serial_PutByte( ACK );
 8008e18:	2006      	movs	r0, #6
 8008e1a:	f7fe fadb 	bl	80073d4 <Serial_PutByte>
								file_done = 1;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
								session_done = 1;
 8008e22:	2301      	movs	r3, #1
 8008e24:	643b      	str	r3, [r7, #64]	; 0x40
								break;
 8008e26:	e024      	b.n	8008e72 <Ymodem_Receive+0x1ca>
							ramsource =
 8008e28:	4b2e      	ldr	r3, [pc, #184]	; (8008ee4 <Ymodem_Receive+0x23c>)
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
							if ( FLASH_If_Write( flashdestination,
 8008e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	089b      	lsrs	r3, r3, #2
 8008e32:	461a      	mov	r2, r3
 8008e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e36:	f7fe f84f 	bl	8006ed8 <FLASH_If_Write>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d107      	bne.n	8008e50 <Ymodem_Receive+0x1a8>
								flashdestination += packet_length;
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e44:	4413      	add	r3, r2
 8008e46:	633b      	str	r3, [r7, #48]	; 0x30
								Serial_PutByte( ACK );
 8008e48:	2006      	movs	r0, #6
 8008e4a:	f7fe fac3 	bl	80073d4 <Serial_PutByte>
 8008e4e:	e008      	b.n	8008e62 <Ymodem_Receive+0x1ba>
								Serial_PutByte( CA );
 8008e50:	2018      	movs	r0, #24
 8008e52:	f7fe fabf 	bl	80073d4 <Serial_PutByte>
								Serial_PutByte( CA );
 8008e56:	2018      	movs	r0, #24
 8008e58:	f7fe fabc 	bl	80073d4 <Serial_PutByte>
								result = COM_DATA;
 8008e5c:	2304      	movs	r3, #4
 8008e5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
						packets_received++;
 8008e62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e66:	3301      	adds	r3, #1
 8008e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
						session_begin = 1;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8008e70:	bf00      	nop
				}
				break;
 8008e72:	e01d      	b.n	8008eb0 <Ymodem_Receive+0x208>
			case HAL_BUSY: /* Abort actually */
				Serial_PutByte( CA );
 8008e74:	2018      	movs	r0, #24
 8008e76:	f7fe faad 	bl	80073d4 <Serial_PutByte>
				Serial_PutByte( CA );
 8008e7a:	2018      	movs	r0, #24
 8008e7c:	f7fe faaa 	bl	80073d4 <Serial_PutByte>
				result = COM_ABORT;
 8008e80:	2302      	movs	r3, #2
 8008e82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				break;
 8008e86:	e013      	b.n	8008eb0 <Ymodem_Receive+0x208>
			default:
				if ( session_begin > 0 )
 8008e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <Ymodem_Receive+0x1ec>
				{
					errors++;
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e90:	3301      	adds	r3, #1
 8008e92:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if ( errors > MAX_ERRORS )
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	2b05      	cmp	r3, #5
 8008e98:	d906      	bls.n	8008ea8 <Ymodem_Receive+0x200>
				{
					/* Abort communication */
					Serial_PutByte( CA );
 8008e9a:	2018      	movs	r0, #24
 8008e9c:	f7fe fa9a 	bl	80073d4 <Serial_PutByte>
					Serial_PutByte( CA );
 8008ea0:	2018      	movs	r0, #24
 8008ea2:	f7fe fa97 	bl	80073d4 <Serial_PutByte>
 8008ea6:	e002      	b.n	8008eae <Ymodem_Receive+0x206>
				}
				else
				{
					Serial_PutByte( CRC16 ); /* Ask for a packet */
 8008ea8:	2043      	movs	r0, #67	; 0x43
 8008eaa:	f7fe fa93 	bl	80073d4 <Serial_PutByte>
				}
				break;
 8008eae:	bf00      	nop
		while ( (file_done == 0) && (result == COM_OK) )
 8008eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d104      	bne.n	8008ec0 <Ymodem_Receive+0x218>
 8008eb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f43f af0a 	beq.w	8008cd4 <Ymodem_Receive+0x2c>
	while ( (session_done == 0) && (result == COM_OK) )
 8008ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d104      	bne.n	8008ed0 <Ymodem_Receive+0x228>
 8008ec6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f43f aefc 	beq.w	8008cc8 <Ymodem_Receive+0x20>
			}
		}
	}
	return result;
 8008ed0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3748      	adds	r7, #72	; 0x48
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	08024000 	.word	0x08024000
 8008ee0:	20000b44 	.word	0x20000b44
 8008ee4:	20000b48 	.word	0x20000b48
 8008ee8:	200004cc 	.word	0x200004cc
 8008eec:	20000130 	.word	0x20000130
 8008ef0:	08020000 	.word	0x08020000

08008ef4 <Ymodem_Transmit>:
 * @param  file_size: Size of the transmission
 * @retval COM_StatusTypeDef result of the communication
 */
COM_StatusTypeDef Ymodem_Transmit( uint8_t *p_buf, const uint8_t *p_file_name,
        uint32_t file_size )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08e      	sub	sp, #56	; 0x38
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
	uint32_t errors = 0, ack_recpt = 0, size = 0, pkt_size;
 8008f00:	2300      	movs	r3, #0
 8008f02:	637b      	str	r3, [r7, #52]	; 0x34
 8008f04:	2300      	movs	r3, #0
 8008f06:	633b      	str	r3, [r7, #48]	; 0x30
 8008f08:	2300      	movs	r3, #0
 8008f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t *p_buf_int;
	COM_StatusTypeDef result = COM_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t blk_number = 1;
 8008f12:	2301      	movs	r3, #1
 8008f14:	61fb      	str	r3, [r7, #28]
#else /* CRC16_F */   
  uint8_t temp_chksum;
#endif /* CRC16_F */  

	/* Prepare first block - header */
	PrepareIntialPacket( aPacketData, p_file_name, file_size );
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	68b9      	ldr	r1, [r7, #8]
 8008f1a:	489a      	ldr	r0, [pc, #616]	; (8009184 <Ymodem_Transmit+0x290>)
 8008f1c:	f7ff fda0 	bl	8008a60 <PrepareIntialPacket>

	while ( (!ack_recpt) && (result == COM_OK) )
 8008f20:	e050      	b.n	8008fc4 <Ymodem_Transmit+0xd0>
	{
		/* Send Packet */
		HAL_UART_Transmit( pUartY, &aPacketData[PACKET_START_INDEX],
 8008f22:	4b99      	ldr	r3, [pc, #612]	; (8009188 <Ymodem_Transmit+0x294>)
 8008f24:	6818      	ldr	r0, [r3, #0]
 8008f26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f2a:	2283      	movs	r2, #131	; 0x83
 8008f2c:	4997      	ldr	r1, [pc, #604]	; (800918c <Ymodem_Transmit+0x298>)
 8008f2e:	f7fc fe1e 	bl	8005b6e <HAL_UART_Transmit>
		PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT );

		/* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
		temp_crc = Cal_CRC16( &aPacketData[PACKET_DATA_INDEX], PACKET_SIZE );
 8008f32:	2180      	movs	r1, #128	; 0x80
 8008f34:	4896      	ldr	r0, [pc, #600]	; (8009190 <Ymodem_Transmit+0x29c>)
 8008f36:	f7ff fe86 	bl	8008c46 <Cal_CRC16>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	617b      	str	r3, [r7, #20]
		Serial_PutByte( temp_crc >> 8 );
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	0a1b      	lsrs	r3, r3, #8
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fe fa45 	bl	80073d4 <Serial_PutByte>
		Serial_PutByte( temp_crc & 0xFF );
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe fa40 	bl	80073d4 <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

		/* Wait for Ack and 'C' */
		if ( HAL_UART_Receive( pUartY, &a_rx_ctrl[0], 1, NAK_TIMEOUT )
 8008f54:	4b8c      	ldr	r3, [pc, #560]	; (8009188 <Ymodem_Transmit+0x294>)
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	f107 0110 	add.w	r1, r7, #16
 8008f5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f60:	2201      	movs	r2, #1
 8008f62:	f7fc fe96 	bl	8005c92 <HAL_UART_Receive>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d122      	bne.n	8008fb2 <Ymodem_Transmit+0xbe>
		        == HAL_OK )
		{
			if ( a_rx_ctrl[0] == ACK )
 8008f6c:	7c3b      	ldrb	r3, [r7, #16]
 8008f6e:	2b06      	cmp	r3, #6
 8008f70:	d102      	bne.n	8008f78 <Ymodem_Transmit+0x84>
			{
				ack_recpt = 1;
 8008f72:	2301      	movs	r3, #1
 8008f74:	633b      	str	r3, [r7, #48]	; 0x30
 8008f76:	e01f      	b.n	8008fb8 <Ymodem_Transmit+0xc4>
			}
			else if ( a_rx_ctrl[0] == CA )
 8008f78:	7c3b      	ldrb	r3, [r7, #16]
 8008f7a:	2b18      	cmp	r3, #24
 8008f7c:	d11c      	bne.n	8008fb8 <Ymodem_Transmit+0xc4>
			{
				if ( (HAL_UART_Receive( pUartY, &a_rx_ctrl[0], 1, NAK_TIMEOUT )
 8008f7e:	4b82      	ldr	r3, [pc, #520]	; (8009188 <Ymodem_Transmit+0x294>)
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	f107 0110 	add.w	r1, r7, #16
 8008f86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f7fc fe81 	bl	8005c92 <HAL_UART_Receive>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d110      	bne.n	8008fb8 <Ymodem_Transmit+0xc4>
				        == HAL_OK) && (a_rx_ctrl[0] == CA) )
 8008f96:	7c3b      	ldrb	r3, [r7, #16]
 8008f98:	2b18      	cmp	r3, #24
 8008f9a:	d10d      	bne.n	8008fb8 <Ymodem_Transmit+0xc4>
				{
					HAL_Delay( 2 );
 8008f9c:	2002      	movs	r0, #2
 8008f9e:	f7f8 fec9 	bl	8001d34 <HAL_Delay>
					__HAL_UART_FLUSH_DRREGISTER( pUartY );
 8008fa2:	4b79      	ldr	r3, [pc, #484]	; (8009188 <Ymodem_Transmit+0x294>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
					result = COM_ABORT;
 8008faa:	2302      	movs	r3, #2
 8008fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fb0:	e002      	b.n	8008fb8 <Ymodem_Transmit+0xc4>
				}
			}
		}
		else
		{
			errors++;
 8008fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if ( errors >= MAX_ERRORS )
 8008fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fba:	2b04      	cmp	r3, #4
 8008fbc:	d902      	bls.n	8008fc4 <Ymodem_Transmit+0xd0>
		{
			result = COM_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while ( (!ack_recpt) && (result == COM_OK) )
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d103      	bne.n	8008fd2 <Ymodem_Transmit+0xde>
 8008fca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0a7      	beq.n	8008f22 <Ymodem_Transmit+0x2e>
		}
	}

	p_buf_int = p_buf;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
	size = file_size;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Here 1024 bytes length is used to send the packets */
	while ( (size) && (result == COM_OK) )
 8008fda:	e072      	b.n	80090c2 <Ymodem_Transmit+0x1ce>
	{
		/* Prepare next packet */
		PreparePacket( p_buf_int, aPacketData, blk_number, size );
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	4968      	ldr	r1, [pc, #416]	; (8009184 <Ymodem_Transmit+0x290>)
 8008fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fe6:	f7ff fd9e 	bl	8008b26 <PreparePacket>
		ack_recpt = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	633b      	str	r3, [r7, #48]	; 0x30
		a_rx_ctrl[0] = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	743b      	strb	r3, [r7, #16]
		errors = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	637b      	str	r3, [r7, #52]	; 0x34

		/* Resend packet if NAK for few times else end of communication */
		while ( (!ack_recpt) && (result == COM_OK) )
 8008ff6:	e05d      	b.n	80090b4 <Ymodem_Transmit+0x1c0>
		{
			/* Send next packet */
			if ( size >= PACKET_1K_SIZE )
 8008ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ffe:	d303      	bcc.n	8009008 <Ymodem_Transmit+0x114>
			{
				pkt_size = PACKET_1K_SIZE;
 8009000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009004:	62bb      	str	r3, [r7, #40]	; 0x28
 8009006:	e001      	b.n	800900c <Ymodem_Transmit+0x118>
			}
			else
			{
				pkt_size = PACKET_SIZE;
 8009008:	2380      	movs	r3, #128	; 0x80
 800900a:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			HAL_UART_Transmit( pUartY, &aPacketData[PACKET_START_INDEX],
 800900c:	4b5e      	ldr	r3, [pc, #376]	; (8009188 <Ymodem_Transmit+0x294>)
 800900e:	6818      	ldr	r0, [r3, #0]
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	b29b      	uxth	r3, r3
 8009014:	3303      	adds	r3, #3
 8009016:	b29a      	uxth	r2, r3
 8009018:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800901c:	495b      	ldr	r1, [pc, #364]	; (800918c <Ymodem_Transmit+0x298>)
 800901e:	f7fc fda6 	bl	8005b6e <HAL_UART_Transmit>
			        pkt_size + PACKET_HEADER_SIZE, NAK_TIMEOUT );

			/* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
			temp_crc = Cal_CRC16( &aPacketData[PACKET_DATA_INDEX], pkt_size );
 8009022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009024:	485a      	ldr	r0, [pc, #360]	; (8009190 <Ymodem_Transmit+0x29c>)
 8009026:	f7ff fe0e 	bl	8008c46 <Cal_CRC16>
 800902a:	4603      	mov	r3, r0
 800902c:	617b      	str	r3, [r7, #20]
			Serial_PutByte( temp_crc >> 8 );
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	0a1b      	lsrs	r3, r3, #8
 8009032:	b2db      	uxtb	r3, r3
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe f9cd 	bl	80073d4 <Serial_PutByte>
			Serial_PutByte( temp_crc & 0xFF );
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	4618      	mov	r0, r3
 8009040:	f7fe f9c8 	bl	80073d4 <Serial_PutByte>
      temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], pkt_size);
      Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

			/* Wait for Ack */
			if ( (HAL_UART_Receive( pUartY, &a_rx_ctrl[0], 1, NAK_TIMEOUT )
 8009044:	4b50      	ldr	r3, [pc, #320]	; (8009188 <Ymodem_Transmit+0x294>)
 8009046:	6818      	ldr	r0, [r3, #0]
 8009048:	f107 0110 	add.w	r1, r7, #16
 800904c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009050:	2201      	movs	r2, #1
 8009052:	f7fc fe1e 	bl	8005c92 <HAL_UART_Receive>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d122      	bne.n	80090a2 <Ymodem_Transmit+0x1ae>
			        == HAL_OK) && (a_rx_ctrl[0] == ACK) )
 800905c:	7c3b      	ldrb	r3, [r7, #16]
 800905e:	2b06      	cmp	r3, #6
 8009060:	d11f      	bne.n	80090a2 <Ymodem_Transmit+0x1ae>
			{
				ack_recpt = 1;
 8009062:	2301      	movs	r3, #1
 8009064:	633b      	str	r3, [r7, #48]	; 0x30
				if ( size > pkt_size )
 8009066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	429a      	cmp	r2, r3
 800906c:	d912      	bls.n	8009094 <Ymodem_Transmit+0x1a0>
				{
					p_buf_int += pkt_size;
 800906e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	4413      	add	r3, r2
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
					size -= pkt_size;
 8009076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
					if ( blk_number == (USER_FLASH_SIZE / PACKET_1K_SIZE) )
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	2b0c      	cmp	r3, #12
 8009082:	d103      	bne.n	800908c <Ymodem_Transmit+0x198>
					{
						result = COM_LIMIT; /* boundary error */
 8009084:	2305      	movs	r3, #5
 8009086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				if ( size > pkt_size )
 800908a:	e00d      	b.n	80090a8 <Ymodem_Transmit+0x1b4>
					}
					else
					{
						blk_number++;
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	3301      	adds	r3, #1
 8009090:	61fb      	str	r3, [r7, #28]
				if ( size > pkt_size )
 8009092:	e009      	b.n	80090a8 <Ymodem_Transmit+0x1b4>
					}
				}
				else
				{
					p_buf_int += pkt_size;
 8009094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	4413      	add	r3, r2
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
					size = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	62fb      	str	r3, [r7, #44]	; 0x2c
				if ( size > pkt_size )
 80090a0:	e002      	b.n	80090a8 <Ymodem_Transmit+0x1b4>
				}
			}
			else
			{
				errors++;
 80090a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a4:	3301      	adds	r3, #1
 80090a6:	637b      	str	r3, [r7, #52]	; 0x34
			}

			/* Resend packet if NAK  for a count of 10 else end of communication */
			if ( errors >= MAX_ERRORS )
 80090a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d902      	bls.n	80090b4 <Ymodem_Transmit+0x1c0>
			{
				result = COM_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while ( (!ack_recpt) && (result == COM_OK) )
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d103      	bne.n	80090c2 <Ymodem_Transmit+0x1ce>
 80090ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d09a      	beq.n	8008ff8 <Ymodem_Transmit+0x104>
	while ( (size) && (result == COM_OK) )
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d003      	beq.n	80090d0 <Ymodem_Transmit+0x1dc>
 80090c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d085      	beq.n	8008fdc <Ymodem_Transmit+0xe8>
			}
		}
	}

	/* Sending End Of Transmission char */
	ack_recpt = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	633b      	str	r3, [r7, #48]	; 0x30
	a_rx_ctrl[0] = 0x00;
 80090d4:	2300      	movs	r3, #0
 80090d6:	743b      	strb	r3, [r7, #16]
	errors = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	637b      	str	r3, [r7, #52]	; 0x34
	while ( (!ack_recpt) && (result == COM_OK) )
 80090dc:	e03a      	b.n	8009154 <Ymodem_Transmit+0x260>
	{
		Serial_PutByte( EOT );
 80090de:	2004      	movs	r0, #4
 80090e0:	f7fe f978 	bl	80073d4 <Serial_PutByte>

		/* Wait for Ack */
		if ( HAL_UART_Receive( pUartY, &a_rx_ctrl[0], 1, NAK_TIMEOUT )
 80090e4:	4b28      	ldr	r3, [pc, #160]	; (8009188 <Ymodem_Transmit+0x294>)
 80090e6:	6818      	ldr	r0, [r3, #0]
 80090e8:	f107 0110 	add.w	r1, r7, #16
 80090ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80090f0:	2201      	movs	r2, #1
 80090f2:	f7fc fdce 	bl	8005c92 <HAL_UART_Receive>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d122      	bne.n	8009142 <Ymodem_Transmit+0x24e>
		        == HAL_OK )
		{
			if ( a_rx_ctrl[0] == ACK )
 80090fc:	7c3b      	ldrb	r3, [r7, #16]
 80090fe:	2b06      	cmp	r3, #6
 8009100:	d102      	bne.n	8009108 <Ymodem_Transmit+0x214>
			{
				ack_recpt = 1;
 8009102:	2301      	movs	r3, #1
 8009104:	633b      	str	r3, [r7, #48]	; 0x30
 8009106:	e01f      	b.n	8009148 <Ymodem_Transmit+0x254>
			}
			else if ( a_rx_ctrl[0] == CA )
 8009108:	7c3b      	ldrb	r3, [r7, #16]
 800910a:	2b18      	cmp	r3, #24
 800910c:	d11c      	bne.n	8009148 <Ymodem_Transmit+0x254>
			{
				if ( (HAL_UART_Receive( pUartY, &a_rx_ctrl[0], 1, NAK_TIMEOUT )
 800910e:	4b1e      	ldr	r3, [pc, #120]	; (8009188 <Ymodem_Transmit+0x294>)
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	f107 0110 	add.w	r1, r7, #16
 8009116:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800911a:	2201      	movs	r2, #1
 800911c:	f7fc fdb9 	bl	8005c92 <HAL_UART_Receive>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d110      	bne.n	8009148 <Ymodem_Transmit+0x254>
				        == HAL_OK) && (a_rx_ctrl[0] == CA) )
 8009126:	7c3b      	ldrb	r3, [r7, #16]
 8009128:	2b18      	cmp	r3, #24
 800912a:	d10d      	bne.n	8009148 <Ymodem_Transmit+0x254>
				{
					HAL_Delay( 2 );
 800912c:	2002      	movs	r0, #2
 800912e:	f7f8 fe01 	bl	8001d34 <HAL_Delay>
					__HAL_UART_FLUSH_DRREGISTER( pUartY );
 8009132:	4b15      	ldr	r3, [pc, #84]	; (8009188 <Ymodem_Transmit+0x294>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	685b      	ldr	r3, [r3, #4]
					result = COM_ABORT;
 800913a:	2302      	movs	r3, #2
 800913c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009140:	e002      	b.n	8009148 <Ymodem_Transmit+0x254>
				}
			}
		}
		else
		{
			errors++;
 8009142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009144:	3301      	adds	r3, #1
 8009146:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if ( errors >= MAX_ERRORS )
 8009148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914a:	2b04      	cmp	r3, #4
 800914c:	d902      	bls.n	8009154 <Ymodem_Transmit+0x260>
		{
			result = COM_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while ( (!ack_recpt) && (result == COM_OK) )
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	2b00      	cmp	r3, #0
 8009158:	d103      	bne.n	8009162 <Ymodem_Transmit+0x26e>
 800915a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0bd      	beq.n	80090de <Ymodem_Transmit+0x1ea>
		}
	}

	/* Empty packet sent - some terminal emulators need this to close session */
	if ( result == COM_OK )
 8009162:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009166:	2b00      	cmp	r3, #0
 8009168:	d150      	bne.n	800920c <Ymodem_Transmit+0x318>
	{
		/* Preparing an empty packet */
		aPacketData[PACKET_START_INDEX] = SOH;
 800916a:	4b06      	ldr	r3, [pc, #24]	; (8009184 <Ymodem_Transmit+0x290>)
 800916c:	2201      	movs	r2, #1
 800916e:	705a      	strb	r2, [r3, #1]
		aPacketData[PACKET_NUMBER_INDEX] = 0;
 8009170:	4b04      	ldr	r3, [pc, #16]	; (8009184 <Ymodem_Transmit+0x290>)
 8009172:	2200      	movs	r2, #0
 8009174:	709a      	strb	r2, [r3, #2]
		aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 8009176:	4b03      	ldr	r3, [pc, #12]	; (8009184 <Ymodem_Transmit+0x290>)
 8009178:	22ff      	movs	r2, #255	; 0xff
 800917a:	70da      	strb	r2, [r3, #3]
		for ( i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX);
 800917c:	2304      	movs	r3, #4
 800917e:	76fb      	strb	r3, [r7, #27]
 8009180:	e00f      	b.n	80091a2 <Ymodem_Transmit+0x2ae>
 8009182:	bf00      	nop
 8009184:	20000b44 	.word	0x20000b44
 8009188:	20000130 	.word	0x20000130
 800918c:	20000b45 	.word	0x20000b45
 8009190:	20000b48 	.word	0x20000b48
		        i++ )
		{
			aPacketData[i] = 0x00;
 8009194:	7efb      	ldrb	r3, [r7, #27]
 8009196:	4a20      	ldr	r2, [pc, #128]	; (8009218 <Ymodem_Transmit+0x324>)
 8009198:	2100      	movs	r1, #0
 800919a:	54d1      	strb	r1, [r2, r3]
		        i++ )
 800919c:	7efb      	ldrb	r3, [r7, #27]
 800919e:	3301      	adds	r3, #1
 80091a0:	76fb      	strb	r3, [r7, #27]
		for ( i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX);
 80091a2:	7efb      	ldrb	r3, [r7, #27]
 80091a4:	2b83      	cmp	r3, #131	; 0x83
 80091a6:	d9f5      	bls.n	8009194 <Ymodem_Transmit+0x2a0>
		}

		/* Send Packet */
		HAL_UART_Transmit( pUartY, &aPacketData[PACKET_START_INDEX],
 80091a8:	4b1c      	ldr	r3, [pc, #112]	; (800921c <Ymodem_Transmit+0x328>)
 80091aa:	6818      	ldr	r0, [r3, #0]
 80091ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80091b0:	2283      	movs	r2, #131	; 0x83
 80091b2:	491b      	ldr	r1, [pc, #108]	; (8009220 <Ymodem_Transmit+0x32c>)
 80091b4:	f7fc fcdb 	bl	8005b6e <HAL_UART_Transmit>
		PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT );

		/* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
		temp_crc = Cal_CRC16( &aPacketData[PACKET_DATA_INDEX], PACKET_SIZE );
 80091b8:	2180      	movs	r1, #128	; 0x80
 80091ba:	481a      	ldr	r0, [pc, #104]	; (8009224 <Ymodem_Transmit+0x330>)
 80091bc:	f7ff fd43 	bl	8008c46 <Cal_CRC16>
 80091c0:	4603      	mov	r3, r0
 80091c2:	617b      	str	r3, [r7, #20]
		Serial_PutByte( temp_crc >> 8 );
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	0a1b      	lsrs	r3, r3, #8
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fe f902 	bl	80073d4 <Serial_PutByte>
		Serial_PutByte( temp_crc & 0xFF );
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe f8fd 	bl	80073d4 <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

		/* Wait for Ack and 'C' */
		if ( HAL_UART_Receive( pUartY, &a_rx_ctrl[0], 1, NAK_TIMEOUT )
 80091da:	4b10      	ldr	r3, [pc, #64]	; (800921c <Ymodem_Transmit+0x328>)
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	f107 0110 	add.w	r1, r7, #16
 80091e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80091e6:	2201      	movs	r2, #1
 80091e8:	f7fc fd53 	bl	8005c92 <HAL_UART_Receive>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10c      	bne.n	800920c <Ymodem_Transmit+0x318>
		        == HAL_OK )
		{
			if ( a_rx_ctrl[0] == CA )
 80091f2:	7c3b      	ldrb	r3, [r7, #16]
 80091f4:	2b18      	cmp	r3, #24
 80091f6:	d109      	bne.n	800920c <Ymodem_Transmit+0x318>
			{
				HAL_Delay( 2 );
 80091f8:	2002      	movs	r0, #2
 80091fa:	f7f8 fd9b 	bl	8001d34 <HAL_Delay>
				__HAL_UART_FLUSH_DRREGISTER( pUartY );
 80091fe:	4b07      	ldr	r3, [pc, #28]	; (800921c <Ymodem_Transmit+0x328>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
				result = COM_ABORT;
 8009206:	2302      	movs	r3, #2
 8009208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			}
		}
	}

	return result; /* file transmitted successfully */
 800920c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009210:	4618      	mov	r0, r3
 8009212:	3738      	adds	r7, #56	; 0x38
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	20000b44 	.word	0x20000b44
 800921c:	20000130 	.word	0x20000130
 8009220:	20000b45 	.word	0x20000b45
 8009224:	20000b48 	.word	0x20000b48

08009228 <cmd_ymodem>:

//========================================================================
int cmd_ymodem( int argc, char *argv[] )
//========================================================================
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af02      	add	r7, sp, #8
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
	//	ymodem [down/up] [app/boot]

	char *sCmd = "down";
 8009232:	4b33      	ldr	r3, [pc, #204]	; (8009300 <cmd_ymodem+0xd8>)
 8009234:	617b      	str	r3, [r7, #20]
	char *sImage = "app";
 8009236:	4b33      	ldr	r3, [pc, #204]	; (8009304 <cmd_ymodem+0xdc>)
 8009238:	613b      	str	r3, [r7, #16]

	switch ( argc )
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b02      	cmp	r3, #2
 800923e:	d005      	beq.n	800924c <cmd_ymodem+0x24>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b03      	cmp	r3, #3
 8009244:	d106      	bne.n	8009254 <cmd_ymodem+0x2c>
	{
	case 3:
		sImage = argv[2];		//	ymodem [cmd] [image]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	613b      	str	r3, [r7, #16]
	case 2:
		sCmd = argv[1];			//	ymodem [cmd]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	617b      	str	r3, [r7, #20]
		break;
 8009252:	bf00      	nop

	//========================================================================
	//	Y-Modem Test - Uart1 ( Console )
	{
		//	Disable Uart Interrupt Uart1 ( Console )
		SerialInit( NULL, NULL, NULL, NULL );
 8009254:	2300      	movs	r3, #0
 8009256:	2200      	movs	r2, #0
 8009258:	2100      	movs	r1, #0
 800925a:	2000      	movs	r0, #0
 800925c:	f7ff fad2 	bl	8008804 <SerialInit>

		//	Set Uart Y-modem
		SetYmodemUart( &huart1 );
 8009260:	4829      	ldr	r0, [pc, #164]	; (8009308 <cmd_ymodem+0xe0>)
 8009262:	f7fe f8cb 	bl	80073fc <SetYmodemUart>
		//	Uart Clear
//		__HAL_UART_FLUSH_DRREGISTER( pUartY );
//		HAL_Delay(100);

		//	Abort Rx Interrupt
		HAL_UART_AbortReceive_IT( pUartY );
 8009266:	4b29      	ldr	r3, [pc, #164]	; (800930c <cmd_ymodem+0xe4>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4618      	mov	r0, r3
 800926c:	f7fc fe04 	bl	8005e78 <HAL_UART_AbortReceive_IT>

		//========================================================================
		//	FIXME : Rx Interrupt 중지 후 Delay필요. ( HAL_BUSY 상태에서 Ready로 변경될때 까지 1초간 Delay )
		HAL_Delay(1000);
 8009270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009274:	f7f8 fd5e 	bl	8001d34 <HAL_Delay>
		//========================================================================
	}
	//========================================================================

	int ret = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]

	if ( strcmp( sCmd, "down" ) == 0 )
 800927c:	4920      	ldr	r1, [pc, #128]	; (8009300 <cmd_ymodem+0xd8>)
 800927e:	6978      	ldr	r0, [r7, #20]
 8009280:	f7f6 ffd0 	bl	8000224 <strcmp>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10c      	bne.n	80092a4 <cmd_ymodem+0x7c>
	{
		printf( "%s(%d) - cmd(%s) / image(%s)", __func__, __LINE__, sCmd,
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f240 22da 	movw	r2, #730	; 0x2da
 8009294:	491e      	ldr	r1, [pc, #120]	; (8009310 <cmd_ymodem+0xe8>)
 8009296:	481f      	ldr	r0, [pc, #124]	; (8009314 <cmd_ymodem+0xec>)
 8009298:	f000 f89c 	bl	80093d4 <iprintf>
		        sImage );
		ret = SerialDownload();
 800929c:	f7fe f8bc 	bl	8007418 <SerialDownload>
 80092a0:	60f8      	str	r0, [r7, #12]
 80092a2:	e01a      	b.n	80092da <cmd_ymodem+0xb2>
	}
	else if ( strcmp( sCmd, "up" ) == 0 )
 80092a4:	491c      	ldr	r1, [pc, #112]	; (8009318 <cmd_ymodem+0xf0>)
 80092a6:	6978      	ldr	r0, [r7, #20]
 80092a8:	f7f6 ffbc 	bl	8000224 <strcmp>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10c      	bne.n	80092cc <cmd_ymodem+0xa4>
	{
		printf( "%s(%d) - cmd(%s) / image(%s)", __func__, __LINE__, sCmd,
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80092bc:	4914      	ldr	r1, [pc, #80]	; (8009310 <cmd_ymodem+0xe8>)
 80092be:	4815      	ldr	r0, [pc, #84]	; (8009314 <cmd_ymodem+0xec>)
 80092c0:	f000 f888 	bl	80093d4 <iprintf>
		        sImage );
		ret = SerialUpload();
 80092c4:	f7fe f928 	bl	8007518 <SerialUpload>
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	e006      	b.n	80092da <cmd_ymodem+0xb2>
	}
	else
	{
		printf( "%s(%d) - invalid cmd(%s)", __func__, __LINE__, sCmd );
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f240 22e6 	movw	r2, #742	; 0x2e6
 80092d2:	490f      	ldr	r1, [pc, #60]	; (8009310 <cmd_ymodem+0xe8>)
 80092d4:	4811      	ldr	r0, [pc, #68]	; (800931c <cmd_ymodem+0xf4>)
 80092d6:	f000 f87d 	bl	80093d4 <iprintf>
	//========================================================================
	//	Y-Modem Test - Uart1 ( Console )
	{
		//	Enable Uart Interrupt
//		SerialInit( NULL, NULL, NULL, NULL );
		SerialInit( &huart1, &huart2, &huart3, &huart5 );
 80092da:	4b11      	ldr	r3, [pc, #68]	; (8009320 <cmd_ymodem+0xf8>)
 80092dc:	4a11      	ldr	r2, [pc, #68]	; (8009324 <cmd_ymodem+0xfc>)
 80092de:	4912      	ldr	r1, [pc, #72]	; (8009328 <cmd_ymodem+0x100>)
 80092e0:	4809      	ldr	r0, [pc, #36]	; (8009308 <cmd_ymodem+0xe0>)
 80092e2:	f7ff fa8f 	bl	8008804 <SerialInit>

		//	Uart Clear
		printf( "%s(%d) - return ( %d )\n", __func__, __LINE__, ret );
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80092ec:	4908      	ldr	r1, [pc, #32]	; (8009310 <cmd_ymodem+0xe8>)
 80092ee:	480f      	ldr	r0, [pc, #60]	; (800932c <cmd_ymodem+0x104>)
 80092f0:	f000 f870 	bl	80093d4 <iprintf>

		//	Uart Clear
//		SetYmodemUart( &huart1 );
	}
	//========================================================================
}
 80092f4:	bf00      	nop
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	0800c918 	.word	0x0800c918
 8009304:	0800c920 	.word	0x0800c920
 8009308:	20000310 	.word	0x20000310
 800930c:	20000130 	.word	0x20000130
 8009310:	0800ca3c 	.word	0x0800ca3c
 8009314:	0800c924 	.word	0x0800c924
 8009318:	0800c944 	.word	0x0800c944
 800931c:	0800c948 	.word	0x0800c948
 8009320:	200002d0 	.word	0x200002d0
 8009324:	20000390 	.word	0x20000390
 8009328:	20000350 	.word	0x20000350
 800932c:	0800c964 	.word	0x0800c964

08009330 <__errno>:
 8009330:	4b01      	ldr	r3, [pc, #4]	; (8009338 <__errno+0x8>)
 8009332:	6818      	ldr	r0, [r3, #0]
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	20000144 	.word	0x20000144

0800933c <getchar>:
 800933c:	4b07      	ldr	r3, [pc, #28]	; (800935c <getchar+0x20>)
 800933e:	b510      	push	{r4, lr}
 8009340:	681c      	ldr	r4, [r3, #0]
 8009342:	b124      	cbz	r4, 800934e <getchar+0x12>
 8009344:	69a3      	ldr	r3, [r4, #24]
 8009346:	b913      	cbnz	r3, 800934e <getchar+0x12>
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fd1f 	bl	8009d8c <__sinit>
 800934e:	4620      	mov	r0, r4
 8009350:	6861      	ldr	r1, [r4, #4]
 8009352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009356:	f000 bdd3 	b.w	8009f00 <_getc_r>
 800935a:	bf00      	nop
 800935c:	20000144 	.word	0x20000144

08009360 <__libc_init_array>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	2600      	movs	r6, #0
 8009364:	4d0c      	ldr	r5, [pc, #48]	; (8009398 <__libc_init_array+0x38>)
 8009366:	4c0d      	ldr	r4, [pc, #52]	; (800939c <__libc_init_array+0x3c>)
 8009368:	1b64      	subs	r4, r4, r5
 800936a:	10a4      	asrs	r4, r4, #2
 800936c:	42a6      	cmp	r6, r4
 800936e:	d109      	bne.n	8009384 <__libc_init_array+0x24>
 8009370:	f002 f972 	bl	800b658 <_init>
 8009374:	2600      	movs	r6, #0
 8009376:	4d0a      	ldr	r5, [pc, #40]	; (80093a0 <__libc_init_array+0x40>)
 8009378:	4c0a      	ldr	r4, [pc, #40]	; (80093a4 <__libc_init_array+0x44>)
 800937a:	1b64      	subs	r4, r4, r5
 800937c:	10a4      	asrs	r4, r4, #2
 800937e:	42a6      	cmp	r6, r4
 8009380:	d105      	bne.n	800938e <__libc_init_array+0x2e>
 8009382:	bd70      	pop	{r4, r5, r6, pc}
 8009384:	f855 3b04 	ldr.w	r3, [r5], #4
 8009388:	4798      	blx	r3
 800938a:	3601      	adds	r6, #1
 800938c:	e7ee      	b.n	800936c <__libc_init_array+0xc>
 800938e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009392:	4798      	blx	r3
 8009394:	3601      	adds	r6, #1
 8009396:	e7f2      	b.n	800937e <__libc_init_array+0x1e>
 8009398:	0800cc00 	.word	0x0800cc00
 800939c:	0800cc00 	.word	0x0800cc00
 80093a0:	0800cc00 	.word	0x0800cc00
 80093a4:	0800cc04 	.word	0x0800cc04

080093a8 <memcpy>:
 80093a8:	440a      	add	r2, r1
 80093aa:	4291      	cmp	r1, r2
 80093ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80093b0:	d100      	bne.n	80093b4 <memcpy+0xc>
 80093b2:	4770      	bx	lr
 80093b4:	b510      	push	{r4, lr}
 80093b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ba:	4291      	cmp	r1, r2
 80093bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093c0:	d1f9      	bne.n	80093b6 <memcpy+0xe>
 80093c2:	bd10      	pop	{r4, pc}

080093c4 <memset>:
 80093c4:	4603      	mov	r3, r0
 80093c6:	4402      	add	r2, r0
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d100      	bne.n	80093ce <memset+0xa>
 80093cc:	4770      	bx	lr
 80093ce:	f803 1b01 	strb.w	r1, [r3], #1
 80093d2:	e7f9      	b.n	80093c8 <memset+0x4>

080093d4 <iprintf>:
 80093d4:	b40f      	push	{r0, r1, r2, r3}
 80093d6:	4b0a      	ldr	r3, [pc, #40]	; (8009400 <iprintf+0x2c>)
 80093d8:	b513      	push	{r0, r1, r4, lr}
 80093da:	681c      	ldr	r4, [r3, #0]
 80093dc:	b124      	cbz	r4, 80093e8 <iprintf+0x14>
 80093de:	69a3      	ldr	r3, [r4, #24]
 80093e0:	b913      	cbnz	r3, 80093e8 <iprintf+0x14>
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fcd2 	bl	8009d8c <__sinit>
 80093e8:	ab05      	add	r3, sp, #20
 80093ea:	4620      	mov	r0, r4
 80093ec:	9a04      	ldr	r2, [sp, #16]
 80093ee:	68a1      	ldr	r1, [r4, #8]
 80093f0:	9301      	str	r3, [sp, #4]
 80093f2:	f001 fa7d 	bl	800a8f0 <_vfiprintf_r>
 80093f6:	b002      	add	sp, #8
 80093f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093fc:	b004      	add	sp, #16
 80093fe:	4770      	bx	lr
 8009400:	20000144 	.word	0x20000144

08009404 <putchar>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4b08      	ldr	r3, [pc, #32]	; (8009428 <putchar+0x24>)
 8009408:	4605      	mov	r5, r0
 800940a:	681c      	ldr	r4, [r3, #0]
 800940c:	b124      	cbz	r4, 8009418 <putchar+0x14>
 800940e:	69a3      	ldr	r3, [r4, #24]
 8009410:	b913      	cbnz	r3, 8009418 <putchar+0x14>
 8009412:	4620      	mov	r0, r4
 8009414:	f000 fcba 	bl	8009d8c <__sinit>
 8009418:	4629      	mov	r1, r5
 800941a:	4620      	mov	r0, r4
 800941c:	68a2      	ldr	r2, [r4, #8]
 800941e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009422:	f001 be7d 	b.w	800b120 <_putc_r>
 8009426:	bf00      	nop
 8009428:	20000144 	.word	0x20000144

0800942c <_puts_r>:
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	460e      	mov	r6, r1
 8009430:	4605      	mov	r5, r0
 8009432:	b118      	cbz	r0, 800943c <_puts_r+0x10>
 8009434:	6983      	ldr	r3, [r0, #24]
 8009436:	b90b      	cbnz	r3, 800943c <_puts_r+0x10>
 8009438:	f000 fca8 	bl	8009d8c <__sinit>
 800943c:	69ab      	ldr	r3, [r5, #24]
 800943e:	68ac      	ldr	r4, [r5, #8]
 8009440:	b913      	cbnz	r3, 8009448 <_puts_r+0x1c>
 8009442:	4628      	mov	r0, r5
 8009444:	f000 fca2 	bl	8009d8c <__sinit>
 8009448:	4b2c      	ldr	r3, [pc, #176]	; (80094fc <_puts_r+0xd0>)
 800944a:	429c      	cmp	r4, r3
 800944c:	d120      	bne.n	8009490 <_puts_r+0x64>
 800944e:	686c      	ldr	r4, [r5, #4]
 8009450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009452:	07db      	lsls	r3, r3, #31
 8009454:	d405      	bmi.n	8009462 <_puts_r+0x36>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	0598      	lsls	r0, r3, #22
 800945a:	d402      	bmi.n	8009462 <_puts_r+0x36>
 800945c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800945e:	f000 fd90 	bl	8009f82 <__retarget_lock_acquire_recursive>
 8009462:	89a3      	ldrh	r3, [r4, #12]
 8009464:	0719      	lsls	r1, r3, #28
 8009466:	d51d      	bpl.n	80094a4 <_puts_r+0x78>
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	b1db      	cbz	r3, 80094a4 <_puts_r+0x78>
 800946c:	3e01      	subs	r6, #1
 800946e:	68a3      	ldr	r3, [r4, #8]
 8009470:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009474:	3b01      	subs	r3, #1
 8009476:	60a3      	str	r3, [r4, #8]
 8009478:	bb39      	cbnz	r1, 80094ca <_puts_r+0x9e>
 800947a:	2b00      	cmp	r3, #0
 800947c:	da38      	bge.n	80094f0 <_puts_r+0xc4>
 800947e:	4622      	mov	r2, r4
 8009480:	210a      	movs	r1, #10
 8009482:	4628      	mov	r0, r5
 8009484:	f000 fa78 	bl	8009978 <__swbuf_r>
 8009488:	3001      	adds	r0, #1
 800948a:	d011      	beq.n	80094b0 <_puts_r+0x84>
 800948c:	250a      	movs	r5, #10
 800948e:	e011      	b.n	80094b4 <_puts_r+0x88>
 8009490:	4b1b      	ldr	r3, [pc, #108]	; (8009500 <_puts_r+0xd4>)
 8009492:	429c      	cmp	r4, r3
 8009494:	d101      	bne.n	800949a <_puts_r+0x6e>
 8009496:	68ac      	ldr	r4, [r5, #8]
 8009498:	e7da      	b.n	8009450 <_puts_r+0x24>
 800949a:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <_puts_r+0xd8>)
 800949c:	429c      	cmp	r4, r3
 800949e:	bf08      	it	eq
 80094a0:	68ec      	ldreq	r4, [r5, #12]
 80094a2:	e7d5      	b.n	8009450 <_puts_r+0x24>
 80094a4:	4621      	mov	r1, r4
 80094a6:	4628      	mov	r0, r5
 80094a8:	f000 faca 	bl	8009a40 <__swsetup_r>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d0dd      	beq.n	800946c <_puts_r+0x40>
 80094b0:	f04f 35ff 	mov.w	r5, #4294967295
 80094b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094b6:	07da      	lsls	r2, r3, #31
 80094b8:	d405      	bmi.n	80094c6 <_puts_r+0x9a>
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	059b      	lsls	r3, r3, #22
 80094be:	d402      	bmi.n	80094c6 <_puts_r+0x9a>
 80094c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094c2:	f000 fd5f 	bl	8009f84 <__retarget_lock_release_recursive>
 80094c6:	4628      	mov	r0, r5
 80094c8:	bd70      	pop	{r4, r5, r6, pc}
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	da04      	bge.n	80094d8 <_puts_r+0xac>
 80094ce:	69a2      	ldr	r2, [r4, #24]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	dc06      	bgt.n	80094e2 <_puts_r+0xb6>
 80094d4:	290a      	cmp	r1, #10
 80094d6:	d004      	beq.n	80094e2 <_puts_r+0xb6>
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	6022      	str	r2, [r4, #0]
 80094de:	7019      	strb	r1, [r3, #0]
 80094e0:	e7c5      	b.n	800946e <_puts_r+0x42>
 80094e2:	4622      	mov	r2, r4
 80094e4:	4628      	mov	r0, r5
 80094e6:	f000 fa47 	bl	8009978 <__swbuf_r>
 80094ea:	3001      	adds	r0, #1
 80094ec:	d1bf      	bne.n	800946e <_puts_r+0x42>
 80094ee:	e7df      	b.n	80094b0 <_puts_r+0x84>
 80094f0:	250a      	movs	r5, #10
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	1c5a      	adds	r2, r3, #1
 80094f6:	6022      	str	r2, [r4, #0]
 80094f8:	701d      	strb	r5, [r3, #0]
 80094fa:	e7db      	b.n	80094b4 <_puts_r+0x88>
 80094fc:	0800cb70 	.word	0x0800cb70
 8009500:	0800cb90 	.word	0x0800cb90
 8009504:	0800cb50 	.word	0x0800cb50

08009508 <puts>:
 8009508:	4b02      	ldr	r3, [pc, #8]	; (8009514 <puts+0xc>)
 800950a:	4601      	mov	r1, r0
 800950c:	6818      	ldr	r0, [r3, #0]
 800950e:	f7ff bf8d 	b.w	800942c <_puts_r>
 8009512:	bf00      	nop
 8009514:	20000144 	.word	0x20000144

08009518 <setbuf>:
 8009518:	2900      	cmp	r1, #0
 800951a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800951e:	bf0c      	ite	eq
 8009520:	2202      	moveq	r2, #2
 8009522:	2200      	movne	r2, #0
 8009524:	f000 b800 	b.w	8009528 <setvbuf>

08009528 <setvbuf>:
 8009528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800952c:	461d      	mov	r5, r3
 800952e:	4b5d      	ldr	r3, [pc, #372]	; (80096a4 <setvbuf+0x17c>)
 8009530:	4604      	mov	r4, r0
 8009532:	681f      	ldr	r7, [r3, #0]
 8009534:	460e      	mov	r6, r1
 8009536:	4690      	mov	r8, r2
 8009538:	b127      	cbz	r7, 8009544 <setvbuf+0x1c>
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	b913      	cbnz	r3, 8009544 <setvbuf+0x1c>
 800953e:	4638      	mov	r0, r7
 8009540:	f000 fc24 	bl	8009d8c <__sinit>
 8009544:	4b58      	ldr	r3, [pc, #352]	; (80096a8 <setvbuf+0x180>)
 8009546:	429c      	cmp	r4, r3
 8009548:	d167      	bne.n	800961a <setvbuf+0xf2>
 800954a:	687c      	ldr	r4, [r7, #4]
 800954c:	f1b8 0f02 	cmp.w	r8, #2
 8009550:	d006      	beq.n	8009560 <setvbuf+0x38>
 8009552:	f1b8 0f01 	cmp.w	r8, #1
 8009556:	f200 809f 	bhi.w	8009698 <setvbuf+0x170>
 800955a:	2d00      	cmp	r5, #0
 800955c:	f2c0 809c 	blt.w	8009698 <setvbuf+0x170>
 8009560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009562:	07db      	lsls	r3, r3, #31
 8009564:	d405      	bmi.n	8009572 <setvbuf+0x4a>
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	0598      	lsls	r0, r3, #22
 800956a:	d402      	bmi.n	8009572 <setvbuf+0x4a>
 800956c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800956e:	f000 fd08 	bl	8009f82 <__retarget_lock_acquire_recursive>
 8009572:	4621      	mov	r1, r4
 8009574:	4638      	mov	r0, r7
 8009576:	f000 fb63 	bl	8009c40 <_fflush_r>
 800957a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800957c:	b141      	cbz	r1, 8009590 <setvbuf+0x68>
 800957e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009582:	4299      	cmp	r1, r3
 8009584:	d002      	beq.n	800958c <setvbuf+0x64>
 8009586:	4638      	mov	r0, r7
 8009588:	f000 fd7e 	bl	800a088 <_free_r>
 800958c:	2300      	movs	r3, #0
 800958e:	6363      	str	r3, [r4, #52]	; 0x34
 8009590:	2300      	movs	r3, #0
 8009592:	61a3      	str	r3, [r4, #24]
 8009594:	6063      	str	r3, [r4, #4]
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	0619      	lsls	r1, r3, #24
 800959a:	d503      	bpl.n	80095a4 <setvbuf+0x7c>
 800959c:	4638      	mov	r0, r7
 800959e:	6921      	ldr	r1, [r4, #16]
 80095a0:	f000 fd72 	bl	800a088 <_free_r>
 80095a4:	89a3      	ldrh	r3, [r4, #12]
 80095a6:	f1b8 0f02 	cmp.w	r8, #2
 80095aa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80095ae:	f023 0303 	bic.w	r3, r3, #3
 80095b2:	81a3      	strh	r3, [r4, #12]
 80095b4:	d06c      	beq.n	8009690 <setvbuf+0x168>
 80095b6:	ab01      	add	r3, sp, #4
 80095b8:	466a      	mov	r2, sp
 80095ba:	4621      	mov	r1, r4
 80095bc:	4638      	mov	r0, r7
 80095be:	f000 fcf5 	bl	8009fac <__swhatbuf_r>
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	4318      	orrs	r0, r3
 80095c6:	81a0      	strh	r0, [r4, #12]
 80095c8:	2d00      	cmp	r5, #0
 80095ca:	d130      	bne.n	800962e <setvbuf+0x106>
 80095cc:	9d00      	ldr	r5, [sp, #0]
 80095ce:	4628      	mov	r0, r5
 80095d0:	f000 fd52 	bl	800a078 <malloc>
 80095d4:	4606      	mov	r6, r0
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d155      	bne.n	8009686 <setvbuf+0x15e>
 80095da:	f8dd 9000 	ldr.w	r9, [sp]
 80095de:	45a9      	cmp	r9, r5
 80095e0:	d14a      	bne.n	8009678 <setvbuf+0x150>
 80095e2:	f04f 35ff 	mov.w	r5, #4294967295
 80095e6:	2200      	movs	r2, #0
 80095e8:	60a2      	str	r2, [r4, #8]
 80095ea:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80095ee:	6022      	str	r2, [r4, #0]
 80095f0:	6122      	str	r2, [r4, #16]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095f8:	6162      	str	r2, [r4, #20]
 80095fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095fc:	f043 0302 	orr.w	r3, r3, #2
 8009600:	07d2      	lsls	r2, r2, #31
 8009602:	81a3      	strh	r3, [r4, #12]
 8009604:	d405      	bmi.n	8009612 <setvbuf+0xea>
 8009606:	f413 7f00 	tst.w	r3, #512	; 0x200
 800960a:	d102      	bne.n	8009612 <setvbuf+0xea>
 800960c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800960e:	f000 fcb9 	bl	8009f84 <__retarget_lock_release_recursive>
 8009612:	4628      	mov	r0, r5
 8009614:	b003      	add	sp, #12
 8009616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800961a:	4b24      	ldr	r3, [pc, #144]	; (80096ac <setvbuf+0x184>)
 800961c:	429c      	cmp	r4, r3
 800961e:	d101      	bne.n	8009624 <setvbuf+0xfc>
 8009620:	68bc      	ldr	r4, [r7, #8]
 8009622:	e793      	b.n	800954c <setvbuf+0x24>
 8009624:	4b22      	ldr	r3, [pc, #136]	; (80096b0 <setvbuf+0x188>)
 8009626:	429c      	cmp	r4, r3
 8009628:	bf08      	it	eq
 800962a:	68fc      	ldreq	r4, [r7, #12]
 800962c:	e78e      	b.n	800954c <setvbuf+0x24>
 800962e:	2e00      	cmp	r6, #0
 8009630:	d0cd      	beq.n	80095ce <setvbuf+0xa6>
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	b913      	cbnz	r3, 800963c <setvbuf+0x114>
 8009636:	4638      	mov	r0, r7
 8009638:	f000 fba8 	bl	8009d8c <__sinit>
 800963c:	f1b8 0f01 	cmp.w	r8, #1
 8009640:	bf08      	it	eq
 8009642:	89a3      	ldrheq	r3, [r4, #12]
 8009644:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009648:	bf04      	itt	eq
 800964a:	f043 0301 	orreq.w	r3, r3, #1
 800964e:	81a3      	strheq	r3, [r4, #12]
 8009650:	89a2      	ldrh	r2, [r4, #12]
 8009652:	6026      	str	r6, [r4, #0]
 8009654:	f012 0308 	ands.w	r3, r2, #8
 8009658:	d01c      	beq.n	8009694 <setvbuf+0x16c>
 800965a:	07d3      	lsls	r3, r2, #31
 800965c:	bf41      	itttt	mi
 800965e:	2300      	movmi	r3, #0
 8009660:	426d      	negmi	r5, r5
 8009662:	60a3      	strmi	r3, [r4, #8]
 8009664:	61a5      	strmi	r5, [r4, #24]
 8009666:	bf58      	it	pl
 8009668:	60a5      	strpl	r5, [r4, #8]
 800966a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800966c:	f015 0501 	ands.w	r5, r5, #1
 8009670:	d115      	bne.n	800969e <setvbuf+0x176>
 8009672:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009676:	e7c8      	b.n	800960a <setvbuf+0xe2>
 8009678:	4648      	mov	r0, r9
 800967a:	f000 fcfd 	bl	800a078 <malloc>
 800967e:	4606      	mov	r6, r0
 8009680:	2800      	cmp	r0, #0
 8009682:	d0ae      	beq.n	80095e2 <setvbuf+0xba>
 8009684:	464d      	mov	r5, r9
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968c:	81a3      	strh	r3, [r4, #12]
 800968e:	e7d0      	b.n	8009632 <setvbuf+0x10a>
 8009690:	2500      	movs	r5, #0
 8009692:	e7a8      	b.n	80095e6 <setvbuf+0xbe>
 8009694:	60a3      	str	r3, [r4, #8]
 8009696:	e7e8      	b.n	800966a <setvbuf+0x142>
 8009698:	f04f 35ff 	mov.w	r5, #4294967295
 800969c:	e7b9      	b.n	8009612 <setvbuf+0xea>
 800969e:	2500      	movs	r5, #0
 80096a0:	e7b7      	b.n	8009612 <setvbuf+0xea>
 80096a2:	bf00      	nop
 80096a4:	20000144 	.word	0x20000144
 80096a8:	0800cb70 	.word	0x0800cb70
 80096ac:	0800cb90 	.word	0x0800cb90
 80096b0:	0800cb50 	.word	0x0800cb50

080096b4 <siprintf>:
 80096b4:	b40e      	push	{r1, r2, r3}
 80096b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096ba:	b500      	push	{lr}
 80096bc:	b09c      	sub	sp, #112	; 0x70
 80096be:	ab1d      	add	r3, sp, #116	; 0x74
 80096c0:	9002      	str	r0, [sp, #8]
 80096c2:	9006      	str	r0, [sp, #24]
 80096c4:	9107      	str	r1, [sp, #28]
 80096c6:	9104      	str	r1, [sp, #16]
 80096c8:	4808      	ldr	r0, [pc, #32]	; (80096ec <siprintf+0x38>)
 80096ca:	4909      	ldr	r1, [pc, #36]	; (80096f0 <siprintf+0x3c>)
 80096cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d0:	9105      	str	r1, [sp, #20]
 80096d2:	6800      	ldr	r0, [r0, #0]
 80096d4:	a902      	add	r1, sp, #8
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	f000 fe0e 	bl	800a2f8 <_svfiprintf_r>
 80096dc:	2200      	movs	r2, #0
 80096de:	9b02      	ldr	r3, [sp, #8]
 80096e0:	701a      	strb	r2, [r3, #0]
 80096e2:	b01c      	add	sp, #112	; 0x70
 80096e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e8:	b003      	add	sp, #12
 80096ea:	4770      	bx	lr
 80096ec:	20000144 	.word	0x20000144
 80096f0:	ffff0208 	.word	0xffff0208

080096f4 <siscanf>:
 80096f4:	b40e      	push	{r1, r2, r3}
 80096f6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80096fa:	b530      	push	{r4, r5, lr}
 80096fc:	b09c      	sub	sp, #112	; 0x70
 80096fe:	ac1f      	add	r4, sp, #124	; 0x7c
 8009700:	f854 5b04 	ldr.w	r5, [r4], #4
 8009704:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009708:	9002      	str	r0, [sp, #8]
 800970a:	9006      	str	r0, [sp, #24]
 800970c:	f7f6 fd94 	bl	8000238 <strlen>
 8009710:	4b0b      	ldr	r3, [pc, #44]	; (8009740 <siscanf+0x4c>)
 8009712:	9003      	str	r0, [sp, #12]
 8009714:	930b      	str	r3, [sp, #44]	; 0x2c
 8009716:	2300      	movs	r3, #0
 8009718:	930f      	str	r3, [sp, #60]	; 0x3c
 800971a:	9314      	str	r3, [sp, #80]	; 0x50
 800971c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009720:	9007      	str	r0, [sp, #28]
 8009722:	4808      	ldr	r0, [pc, #32]	; (8009744 <siscanf+0x50>)
 8009724:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009728:	462a      	mov	r2, r5
 800972a:	4623      	mov	r3, r4
 800972c:	a902      	add	r1, sp, #8
 800972e:	6800      	ldr	r0, [r0, #0]
 8009730:	9401      	str	r4, [sp, #4]
 8009732:	f000 ff3b 	bl	800a5ac <__ssvfiscanf_r>
 8009736:	b01c      	add	sp, #112	; 0x70
 8009738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800973c:	b003      	add	sp, #12
 800973e:	4770      	bx	lr
 8009740:	0800976b 	.word	0x0800976b
 8009744:	20000144 	.word	0x20000144

08009748 <__sread>:
 8009748:	b510      	push	{r4, lr}
 800974a:	460c      	mov	r4, r1
 800974c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009750:	f001 fd2e 	bl	800b1b0 <_read_r>
 8009754:	2800      	cmp	r0, #0
 8009756:	bfab      	itete	ge
 8009758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800975a:	89a3      	ldrhlt	r3, [r4, #12]
 800975c:	181b      	addge	r3, r3, r0
 800975e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009762:	bfac      	ite	ge
 8009764:	6563      	strge	r3, [r4, #84]	; 0x54
 8009766:	81a3      	strhlt	r3, [r4, #12]
 8009768:	bd10      	pop	{r4, pc}

0800976a <__seofread>:
 800976a:	2000      	movs	r0, #0
 800976c:	4770      	bx	lr

0800976e <__swrite>:
 800976e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009772:	461f      	mov	r7, r3
 8009774:	898b      	ldrh	r3, [r1, #12]
 8009776:	4605      	mov	r5, r0
 8009778:	05db      	lsls	r3, r3, #23
 800977a:	460c      	mov	r4, r1
 800977c:	4616      	mov	r6, r2
 800977e:	d505      	bpl.n	800978c <__swrite+0x1e>
 8009780:	2302      	movs	r3, #2
 8009782:	2200      	movs	r2, #0
 8009784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009788:	f000 fbfe 	bl	8009f88 <_lseek_r>
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	4632      	mov	r2, r6
 8009790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009794:	81a3      	strh	r3, [r4, #12]
 8009796:	4628      	mov	r0, r5
 8009798:	463b      	mov	r3, r7
 800979a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800979e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097a2:	f000 b93b 	b.w	8009a1c <_write_r>

080097a6 <__sseek>:
 80097a6:	b510      	push	{r4, lr}
 80097a8:	460c      	mov	r4, r1
 80097aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ae:	f000 fbeb 	bl	8009f88 <_lseek_r>
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	bf15      	itete	ne
 80097b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80097ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097c2:	81a3      	strheq	r3, [r4, #12]
 80097c4:	bf18      	it	ne
 80097c6:	81a3      	strhne	r3, [r4, #12]
 80097c8:	bd10      	pop	{r4, pc}

080097ca <__sclose>:
 80097ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ce:	f000 b9a5 	b.w	8009b1c <_close_r>

080097d2 <strchr>:
 80097d2:	4603      	mov	r3, r0
 80097d4:	b2c9      	uxtb	r1, r1
 80097d6:	4618      	mov	r0, r3
 80097d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097dc:	b112      	cbz	r2, 80097e4 <strchr+0x12>
 80097de:	428a      	cmp	r2, r1
 80097e0:	d1f9      	bne.n	80097d6 <strchr+0x4>
 80097e2:	4770      	bx	lr
 80097e4:	2900      	cmp	r1, #0
 80097e6:	bf18      	it	ne
 80097e8:	2000      	movne	r0, #0
 80097ea:	4770      	bx	lr

080097ec <strcpy>:
 80097ec:	4603      	mov	r3, r0
 80097ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097f2:	f803 2b01 	strb.w	r2, [r3], #1
 80097f6:	2a00      	cmp	r2, #0
 80097f8:	d1f9      	bne.n	80097ee <strcpy+0x2>
 80097fa:	4770      	bx	lr

080097fc <strncmp>:
 80097fc:	4603      	mov	r3, r0
 80097fe:	b510      	push	{r4, lr}
 8009800:	b172      	cbz	r2, 8009820 <strncmp+0x24>
 8009802:	3901      	subs	r1, #1
 8009804:	1884      	adds	r4, r0, r2
 8009806:	f813 0b01 	ldrb.w	r0, [r3], #1
 800980a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800980e:	4290      	cmp	r0, r2
 8009810:	d101      	bne.n	8009816 <strncmp+0x1a>
 8009812:	42a3      	cmp	r3, r4
 8009814:	d101      	bne.n	800981a <strncmp+0x1e>
 8009816:	1a80      	subs	r0, r0, r2
 8009818:	bd10      	pop	{r4, pc}
 800981a:	2800      	cmp	r0, #0
 800981c:	d1f3      	bne.n	8009806 <strncmp+0xa>
 800981e:	e7fa      	b.n	8009816 <strncmp+0x1a>
 8009820:	4610      	mov	r0, r2
 8009822:	e7f9      	b.n	8009818 <strncmp+0x1c>

08009824 <__strtok_r>:
 8009824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009826:	b908      	cbnz	r0, 800982c <__strtok_r+0x8>
 8009828:	6810      	ldr	r0, [r2, #0]
 800982a:	b188      	cbz	r0, 8009850 <__strtok_r+0x2c>
 800982c:	4604      	mov	r4, r0
 800982e:	460f      	mov	r7, r1
 8009830:	4620      	mov	r0, r4
 8009832:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009836:	f817 6b01 	ldrb.w	r6, [r7], #1
 800983a:	b91e      	cbnz	r6, 8009844 <__strtok_r+0x20>
 800983c:	b965      	cbnz	r5, 8009858 <__strtok_r+0x34>
 800983e:	4628      	mov	r0, r5
 8009840:	6015      	str	r5, [r2, #0]
 8009842:	e005      	b.n	8009850 <__strtok_r+0x2c>
 8009844:	42b5      	cmp	r5, r6
 8009846:	d1f6      	bne.n	8009836 <__strtok_r+0x12>
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1f0      	bne.n	800982e <__strtok_r+0xa>
 800984c:	6014      	str	r4, [r2, #0]
 800984e:	7003      	strb	r3, [r0, #0]
 8009850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009852:	461c      	mov	r4, r3
 8009854:	e00c      	b.n	8009870 <__strtok_r+0x4c>
 8009856:	b915      	cbnz	r5, 800985e <__strtok_r+0x3a>
 8009858:	460e      	mov	r6, r1
 800985a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800985e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009862:	42ab      	cmp	r3, r5
 8009864:	d1f7      	bne.n	8009856 <__strtok_r+0x32>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d0f3      	beq.n	8009852 <__strtok_r+0x2e>
 800986a:	2300      	movs	r3, #0
 800986c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009870:	6014      	str	r4, [r2, #0]
 8009872:	e7ed      	b.n	8009850 <__strtok_r+0x2c>

08009874 <strtok_r>:
 8009874:	2301      	movs	r3, #1
 8009876:	f7ff bfd5 	b.w	8009824 <__strtok_r>
	...

0800987c <_strtol_l.constprop.0>:
 800987c:	2b01      	cmp	r3, #1
 800987e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009882:	4680      	mov	r8, r0
 8009884:	d001      	beq.n	800988a <_strtol_l.constprop.0+0xe>
 8009886:	2b24      	cmp	r3, #36	; 0x24
 8009888:	d906      	bls.n	8009898 <_strtol_l.constprop.0+0x1c>
 800988a:	f7ff fd51 	bl	8009330 <__errno>
 800988e:	2316      	movs	r3, #22
 8009890:	6003      	str	r3, [r0, #0]
 8009892:	2000      	movs	r0, #0
 8009894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009898:	460d      	mov	r5, r1
 800989a:	4f35      	ldr	r7, [pc, #212]	; (8009970 <_strtol_l.constprop.0+0xf4>)
 800989c:	4628      	mov	r0, r5
 800989e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098a2:	5de6      	ldrb	r6, [r4, r7]
 80098a4:	f016 0608 	ands.w	r6, r6, #8
 80098a8:	d1f8      	bne.n	800989c <_strtol_l.constprop.0+0x20>
 80098aa:	2c2d      	cmp	r4, #45	; 0x2d
 80098ac:	d12f      	bne.n	800990e <_strtol_l.constprop.0+0x92>
 80098ae:	2601      	movs	r6, #1
 80098b0:	782c      	ldrb	r4, [r5, #0]
 80098b2:	1c85      	adds	r5, r0, #2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d057      	beq.n	8009968 <_strtol_l.constprop.0+0xec>
 80098b8:	2b10      	cmp	r3, #16
 80098ba:	d109      	bne.n	80098d0 <_strtol_l.constprop.0+0x54>
 80098bc:	2c30      	cmp	r4, #48	; 0x30
 80098be:	d107      	bne.n	80098d0 <_strtol_l.constprop.0+0x54>
 80098c0:	7828      	ldrb	r0, [r5, #0]
 80098c2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80098c6:	2858      	cmp	r0, #88	; 0x58
 80098c8:	d149      	bne.n	800995e <_strtol_l.constprop.0+0xe2>
 80098ca:	2310      	movs	r3, #16
 80098cc:	786c      	ldrb	r4, [r5, #1]
 80098ce:	3502      	adds	r5, #2
 80098d0:	2700      	movs	r7, #0
 80098d2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80098d6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80098da:	fbbe f9f3 	udiv	r9, lr, r3
 80098de:	4638      	mov	r0, r7
 80098e0:	fb03 ea19 	mls	sl, r3, r9, lr
 80098e4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80098e8:	f1bc 0f09 	cmp.w	ip, #9
 80098ec:	d814      	bhi.n	8009918 <_strtol_l.constprop.0+0x9c>
 80098ee:	4664      	mov	r4, ip
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	dd22      	ble.n	800993a <_strtol_l.constprop.0+0xbe>
 80098f4:	2f00      	cmp	r7, #0
 80098f6:	db1d      	blt.n	8009934 <_strtol_l.constprop.0+0xb8>
 80098f8:	4581      	cmp	r9, r0
 80098fa:	d31b      	bcc.n	8009934 <_strtol_l.constprop.0+0xb8>
 80098fc:	d101      	bne.n	8009902 <_strtol_l.constprop.0+0x86>
 80098fe:	45a2      	cmp	sl, r4
 8009900:	db18      	blt.n	8009934 <_strtol_l.constprop.0+0xb8>
 8009902:	2701      	movs	r7, #1
 8009904:	fb00 4003 	mla	r0, r0, r3, r4
 8009908:	f815 4b01 	ldrb.w	r4, [r5], #1
 800990c:	e7ea      	b.n	80098e4 <_strtol_l.constprop.0+0x68>
 800990e:	2c2b      	cmp	r4, #43	; 0x2b
 8009910:	bf04      	itt	eq
 8009912:	782c      	ldrbeq	r4, [r5, #0]
 8009914:	1c85      	addeq	r5, r0, #2
 8009916:	e7cd      	b.n	80098b4 <_strtol_l.constprop.0+0x38>
 8009918:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800991c:	f1bc 0f19 	cmp.w	ip, #25
 8009920:	d801      	bhi.n	8009926 <_strtol_l.constprop.0+0xaa>
 8009922:	3c37      	subs	r4, #55	; 0x37
 8009924:	e7e4      	b.n	80098f0 <_strtol_l.constprop.0+0x74>
 8009926:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800992a:	f1bc 0f19 	cmp.w	ip, #25
 800992e:	d804      	bhi.n	800993a <_strtol_l.constprop.0+0xbe>
 8009930:	3c57      	subs	r4, #87	; 0x57
 8009932:	e7dd      	b.n	80098f0 <_strtol_l.constprop.0+0x74>
 8009934:	f04f 37ff 	mov.w	r7, #4294967295
 8009938:	e7e6      	b.n	8009908 <_strtol_l.constprop.0+0x8c>
 800993a:	2f00      	cmp	r7, #0
 800993c:	da07      	bge.n	800994e <_strtol_l.constprop.0+0xd2>
 800993e:	2322      	movs	r3, #34	; 0x22
 8009940:	4670      	mov	r0, lr
 8009942:	f8c8 3000 	str.w	r3, [r8]
 8009946:	2a00      	cmp	r2, #0
 8009948:	d0a4      	beq.n	8009894 <_strtol_l.constprop.0+0x18>
 800994a:	1e69      	subs	r1, r5, #1
 800994c:	e005      	b.n	800995a <_strtol_l.constprop.0+0xde>
 800994e:	b106      	cbz	r6, 8009952 <_strtol_l.constprop.0+0xd6>
 8009950:	4240      	negs	r0, r0
 8009952:	2a00      	cmp	r2, #0
 8009954:	d09e      	beq.n	8009894 <_strtol_l.constprop.0+0x18>
 8009956:	2f00      	cmp	r7, #0
 8009958:	d1f7      	bne.n	800994a <_strtol_l.constprop.0+0xce>
 800995a:	6011      	str	r1, [r2, #0]
 800995c:	e79a      	b.n	8009894 <_strtol_l.constprop.0+0x18>
 800995e:	2430      	movs	r4, #48	; 0x30
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1b5      	bne.n	80098d0 <_strtol_l.constprop.0+0x54>
 8009964:	2308      	movs	r3, #8
 8009966:	e7b3      	b.n	80098d0 <_strtol_l.constprop.0+0x54>
 8009968:	2c30      	cmp	r4, #48	; 0x30
 800996a:	d0a9      	beq.n	80098c0 <_strtol_l.constprop.0+0x44>
 800996c:	230a      	movs	r3, #10
 800996e:	e7af      	b.n	80098d0 <_strtol_l.constprop.0+0x54>
 8009970:	0800ca4d 	.word	0x0800ca4d

08009974 <_strtol_r>:
 8009974:	f7ff bf82 	b.w	800987c <_strtol_l.constprop.0>

08009978 <__swbuf_r>:
 8009978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997a:	460e      	mov	r6, r1
 800997c:	4614      	mov	r4, r2
 800997e:	4605      	mov	r5, r0
 8009980:	b118      	cbz	r0, 800998a <__swbuf_r+0x12>
 8009982:	6983      	ldr	r3, [r0, #24]
 8009984:	b90b      	cbnz	r3, 800998a <__swbuf_r+0x12>
 8009986:	f000 fa01 	bl	8009d8c <__sinit>
 800998a:	4b21      	ldr	r3, [pc, #132]	; (8009a10 <__swbuf_r+0x98>)
 800998c:	429c      	cmp	r4, r3
 800998e:	d12b      	bne.n	80099e8 <__swbuf_r+0x70>
 8009990:	686c      	ldr	r4, [r5, #4]
 8009992:	69a3      	ldr	r3, [r4, #24]
 8009994:	60a3      	str	r3, [r4, #8]
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	071a      	lsls	r2, r3, #28
 800999a:	d52f      	bpl.n	80099fc <__swbuf_r+0x84>
 800999c:	6923      	ldr	r3, [r4, #16]
 800999e:	b36b      	cbz	r3, 80099fc <__swbuf_r+0x84>
 80099a0:	6923      	ldr	r3, [r4, #16]
 80099a2:	6820      	ldr	r0, [r4, #0]
 80099a4:	b2f6      	uxtb	r6, r6
 80099a6:	1ac0      	subs	r0, r0, r3
 80099a8:	6963      	ldr	r3, [r4, #20]
 80099aa:	4637      	mov	r7, r6
 80099ac:	4283      	cmp	r3, r0
 80099ae:	dc04      	bgt.n	80099ba <__swbuf_r+0x42>
 80099b0:	4621      	mov	r1, r4
 80099b2:	4628      	mov	r0, r5
 80099b4:	f000 f944 	bl	8009c40 <_fflush_r>
 80099b8:	bb30      	cbnz	r0, 8009a08 <__swbuf_r+0x90>
 80099ba:	68a3      	ldr	r3, [r4, #8]
 80099bc:	3001      	adds	r0, #1
 80099be:	3b01      	subs	r3, #1
 80099c0:	60a3      	str	r3, [r4, #8]
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	1c5a      	adds	r2, r3, #1
 80099c6:	6022      	str	r2, [r4, #0]
 80099c8:	701e      	strb	r6, [r3, #0]
 80099ca:	6963      	ldr	r3, [r4, #20]
 80099cc:	4283      	cmp	r3, r0
 80099ce:	d004      	beq.n	80099da <__swbuf_r+0x62>
 80099d0:	89a3      	ldrh	r3, [r4, #12]
 80099d2:	07db      	lsls	r3, r3, #31
 80099d4:	d506      	bpl.n	80099e4 <__swbuf_r+0x6c>
 80099d6:	2e0a      	cmp	r6, #10
 80099d8:	d104      	bne.n	80099e4 <__swbuf_r+0x6c>
 80099da:	4621      	mov	r1, r4
 80099dc:	4628      	mov	r0, r5
 80099de:	f000 f92f 	bl	8009c40 <_fflush_r>
 80099e2:	b988      	cbnz	r0, 8009a08 <__swbuf_r+0x90>
 80099e4:	4638      	mov	r0, r7
 80099e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099e8:	4b0a      	ldr	r3, [pc, #40]	; (8009a14 <__swbuf_r+0x9c>)
 80099ea:	429c      	cmp	r4, r3
 80099ec:	d101      	bne.n	80099f2 <__swbuf_r+0x7a>
 80099ee:	68ac      	ldr	r4, [r5, #8]
 80099f0:	e7cf      	b.n	8009992 <__swbuf_r+0x1a>
 80099f2:	4b09      	ldr	r3, [pc, #36]	; (8009a18 <__swbuf_r+0xa0>)
 80099f4:	429c      	cmp	r4, r3
 80099f6:	bf08      	it	eq
 80099f8:	68ec      	ldreq	r4, [r5, #12]
 80099fa:	e7ca      	b.n	8009992 <__swbuf_r+0x1a>
 80099fc:	4621      	mov	r1, r4
 80099fe:	4628      	mov	r0, r5
 8009a00:	f000 f81e 	bl	8009a40 <__swsetup_r>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d0cb      	beq.n	80099a0 <__swbuf_r+0x28>
 8009a08:	f04f 37ff 	mov.w	r7, #4294967295
 8009a0c:	e7ea      	b.n	80099e4 <__swbuf_r+0x6c>
 8009a0e:	bf00      	nop
 8009a10:	0800cb70 	.word	0x0800cb70
 8009a14:	0800cb90 	.word	0x0800cb90
 8009a18:	0800cb50 	.word	0x0800cb50

08009a1c <_write_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4608      	mov	r0, r1
 8009a22:	4611      	mov	r1, r2
 8009a24:	2200      	movs	r2, #0
 8009a26:	4d05      	ldr	r5, [pc, #20]	; (8009a3c <_write_r+0x20>)
 8009a28:	602a      	str	r2, [r5, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f7f8 f875 	bl	8001b1a <_write>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_write_r+0x1e>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_write_r+0x1e>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	20000f58 	.word	0x20000f58

08009a40 <__swsetup_r>:
 8009a40:	4b32      	ldr	r3, [pc, #200]	; (8009b0c <__swsetup_r+0xcc>)
 8009a42:	b570      	push	{r4, r5, r6, lr}
 8009a44:	681d      	ldr	r5, [r3, #0]
 8009a46:	4606      	mov	r6, r0
 8009a48:	460c      	mov	r4, r1
 8009a4a:	b125      	cbz	r5, 8009a56 <__swsetup_r+0x16>
 8009a4c:	69ab      	ldr	r3, [r5, #24]
 8009a4e:	b913      	cbnz	r3, 8009a56 <__swsetup_r+0x16>
 8009a50:	4628      	mov	r0, r5
 8009a52:	f000 f99b 	bl	8009d8c <__sinit>
 8009a56:	4b2e      	ldr	r3, [pc, #184]	; (8009b10 <__swsetup_r+0xd0>)
 8009a58:	429c      	cmp	r4, r3
 8009a5a:	d10f      	bne.n	8009a7c <__swsetup_r+0x3c>
 8009a5c:	686c      	ldr	r4, [r5, #4]
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a64:	0719      	lsls	r1, r3, #28
 8009a66:	d42c      	bmi.n	8009ac2 <__swsetup_r+0x82>
 8009a68:	06dd      	lsls	r5, r3, #27
 8009a6a:	d411      	bmi.n	8009a90 <__swsetup_r+0x50>
 8009a6c:	2309      	movs	r3, #9
 8009a6e:	6033      	str	r3, [r6, #0]
 8009a70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295
 8009a78:	81a3      	strh	r3, [r4, #12]
 8009a7a:	e03e      	b.n	8009afa <__swsetup_r+0xba>
 8009a7c:	4b25      	ldr	r3, [pc, #148]	; (8009b14 <__swsetup_r+0xd4>)
 8009a7e:	429c      	cmp	r4, r3
 8009a80:	d101      	bne.n	8009a86 <__swsetup_r+0x46>
 8009a82:	68ac      	ldr	r4, [r5, #8]
 8009a84:	e7eb      	b.n	8009a5e <__swsetup_r+0x1e>
 8009a86:	4b24      	ldr	r3, [pc, #144]	; (8009b18 <__swsetup_r+0xd8>)
 8009a88:	429c      	cmp	r4, r3
 8009a8a:	bf08      	it	eq
 8009a8c:	68ec      	ldreq	r4, [r5, #12]
 8009a8e:	e7e6      	b.n	8009a5e <__swsetup_r+0x1e>
 8009a90:	0758      	lsls	r0, r3, #29
 8009a92:	d512      	bpl.n	8009aba <__swsetup_r+0x7a>
 8009a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a96:	b141      	cbz	r1, 8009aaa <__swsetup_r+0x6a>
 8009a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a9c:	4299      	cmp	r1, r3
 8009a9e:	d002      	beq.n	8009aa6 <__swsetup_r+0x66>
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f000 faf1 	bl	800a088 <_free_r>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ab0:	81a3      	strh	r3, [r4, #12]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	6063      	str	r3, [r4, #4]
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	f043 0308 	orr.w	r3, r3, #8
 8009ac0:	81a3      	strh	r3, [r4, #12]
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	b94b      	cbnz	r3, 8009ada <__swsetup_r+0x9a>
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad0:	d003      	beq.n	8009ada <__swsetup_r+0x9a>
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f000 fa8f 	bl	8009ff8 <__smakebuf_r>
 8009ada:	89a0      	ldrh	r0, [r4, #12]
 8009adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ae0:	f010 0301 	ands.w	r3, r0, #1
 8009ae4:	d00a      	beq.n	8009afc <__swsetup_r+0xbc>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	60a3      	str	r3, [r4, #8]
 8009aea:	6963      	ldr	r3, [r4, #20]
 8009aec:	425b      	negs	r3, r3
 8009aee:	61a3      	str	r3, [r4, #24]
 8009af0:	6923      	ldr	r3, [r4, #16]
 8009af2:	b943      	cbnz	r3, 8009b06 <__swsetup_r+0xc6>
 8009af4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009af8:	d1ba      	bne.n	8009a70 <__swsetup_r+0x30>
 8009afa:	bd70      	pop	{r4, r5, r6, pc}
 8009afc:	0781      	lsls	r1, r0, #30
 8009afe:	bf58      	it	pl
 8009b00:	6963      	ldrpl	r3, [r4, #20]
 8009b02:	60a3      	str	r3, [r4, #8]
 8009b04:	e7f4      	b.n	8009af0 <__swsetup_r+0xb0>
 8009b06:	2000      	movs	r0, #0
 8009b08:	e7f7      	b.n	8009afa <__swsetup_r+0xba>
 8009b0a:	bf00      	nop
 8009b0c:	20000144 	.word	0x20000144
 8009b10:	0800cb70 	.word	0x0800cb70
 8009b14:	0800cb90 	.word	0x0800cb90
 8009b18:	0800cb50 	.word	0x0800cb50

08009b1c <_close_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	2300      	movs	r3, #0
 8009b20:	4d05      	ldr	r5, [pc, #20]	; (8009b38 <_close_r+0x1c>)
 8009b22:	4604      	mov	r4, r0
 8009b24:	4608      	mov	r0, r1
 8009b26:	602b      	str	r3, [r5, #0]
 8009b28:	f7f8 f813 	bl	8001b52 <_close>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d102      	bne.n	8009b36 <_close_r+0x1a>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	b103      	cbz	r3, 8009b36 <_close_r+0x1a>
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	20000f58 	.word	0x20000f58

08009b3c <__sflush_r>:
 8009b3c:	898a      	ldrh	r2, [r1, #12]
 8009b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b40:	4605      	mov	r5, r0
 8009b42:	0710      	lsls	r0, r2, #28
 8009b44:	460c      	mov	r4, r1
 8009b46:	d457      	bmi.n	8009bf8 <__sflush_r+0xbc>
 8009b48:	684b      	ldr	r3, [r1, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	dc04      	bgt.n	8009b58 <__sflush_r+0x1c>
 8009b4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	dc01      	bgt.n	8009b58 <__sflush_r+0x1c>
 8009b54:	2000      	movs	r0, #0
 8009b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b5a:	2e00      	cmp	r6, #0
 8009b5c:	d0fa      	beq.n	8009b54 <__sflush_r+0x18>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b64:	682f      	ldr	r7, [r5, #0]
 8009b66:	602b      	str	r3, [r5, #0]
 8009b68:	d032      	beq.n	8009bd0 <__sflush_r+0x94>
 8009b6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	075a      	lsls	r2, r3, #29
 8009b70:	d505      	bpl.n	8009b7e <__sflush_r+0x42>
 8009b72:	6863      	ldr	r3, [r4, #4]
 8009b74:	1ac0      	subs	r0, r0, r3
 8009b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b78:	b10b      	cbz	r3, 8009b7e <__sflush_r+0x42>
 8009b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b7c:	1ac0      	subs	r0, r0, r3
 8009b7e:	2300      	movs	r3, #0
 8009b80:	4602      	mov	r2, r0
 8009b82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b84:	4628      	mov	r0, r5
 8009b86:	6a21      	ldr	r1, [r4, #32]
 8009b88:	47b0      	blx	r6
 8009b8a:	1c43      	adds	r3, r0, #1
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	d106      	bne.n	8009b9e <__sflush_r+0x62>
 8009b90:	6829      	ldr	r1, [r5, #0]
 8009b92:	291d      	cmp	r1, #29
 8009b94:	d82c      	bhi.n	8009bf0 <__sflush_r+0xb4>
 8009b96:	4a29      	ldr	r2, [pc, #164]	; (8009c3c <__sflush_r+0x100>)
 8009b98:	40ca      	lsrs	r2, r1
 8009b9a:	07d6      	lsls	r6, r2, #31
 8009b9c:	d528      	bpl.n	8009bf0 <__sflush_r+0xb4>
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	6062      	str	r2, [r4, #4]
 8009ba2:	6922      	ldr	r2, [r4, #16]
 8009ba4:	04d9      	lsls	r1, r3, #19
 8009ba6:	6022      	str	r2, [r4, #0]
 8009ba8:	d504      	bpl.n	8009bb4 <__sflush_r+0x78>
 8009baa:	1c42      	adds	r2, r0, #1
 8009bac:	d101      	bne.n	8009bb2 <__sflush_r+0x76>
 8009bae:	682b      	ldr	r3, [r5, #0]
 8009bb0:	b903      	cbnz	r3, 8009bb4 <__sflush_r+0x78>
 8009bb2:	6560      	str	r0, [r4, #84]	; 0x54
 8009bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bb6:	602f      	str	r7, [r5, #0]
 8009bb8:	2900      	cmp	r1, #0
 8009bba:	d0cb      	beq.n	8009b54 <__sflush_r+0x18>
 8009bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bc0:	4299      	cmp	r1, r3
 8009bc2:	d002      	beq.n	8009bca <__sflush_r+0x8e>
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f000 fa5f 	bl	800a088 <_free_r>
 8009bca:	2000      	movs	r0, #0
 8009bcc:	6360      	str	r0, [r4, #52]	; 0x34
 8009bce:	e7c2      	b.n	8009b56 <__sflush_r+0x1a>
 8009bd0:	6a21      	ldr	r1, [r4, #32]
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	47b0      	blx	r6
 8009bd8:	1c41      	adds	r1, r0, #1
 8009bda:	d1c7      	bne.n	8009b6c <__sflush_r+0x30>
 8009bdc:	682b      	ldr	r3, [r5, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0c4      	beq.n	8009b6c <__sflush_r+0x30>
 8009be2:	2b1d      	cmp	r3, #29
 8009be4:	d001      	beq.n	8009bea <__sflush_r+0xae>
 8009be6:	2b16      	cmp	r3, #22
 8009be8:	d101      	bne.n	8009bee <__sflush_r+0xb2>
 8009bea:	602f      	str	r7, [r5, #0]
 8009bec:	e7b2      	b.n	8009b54 <__sflush_r+0x18>
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf4:	81a3      	strh	r3, [r4, #12]
 8009bf6:	e7ae      	b.n	8009b56 <__sflush_r+0x1a>
 8009bf8:	690f      	ldr	r7, [r1, #16]
 8009bfa:	2f00      	cmp	r7, #0
 8009bfc:	d0aa      	beq.n	8009b54 <__sflush_r+0x18>
 8009bfe:	0793      	lsls	r3, r2, #30
 8009c00:	bf18      	it	ne
 8009c02:	2300      	movne	r3, #0
 8009c04:	680e      	ldr	r6, [r1, #0]
 8009c06:	bf08      	it	eq
 8009c08:	694b      	ldreq	r3, [r1, #20]
 8009c0a:	1bf6      	subs	r6, r6, r7
 8009c0c:	600f      	str	r7, [r1, #0]
 8009c0e:	608b      	str	r3, [r1, #8]
 8009c10:	2e00      	cmp	r6, #0
 8009c12:	dd9f      	ble.n	8009b54 <__sflush_r+0x18>
 8009c14:	4633      	mov	r3, r6
 8009c16:	463a      	mov	r2, r7
 8009c18:	4628      	mov	r0, r5
 8009c1a:	6a21      	ldr	r1, [r4, #32]
 8009c1c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009c20:	47e0      	blx	ip
 8009c22:	2800      	cmp	r0, #0
 8009c24:	dc06      	bgt.n	8009c34 <__sflush_r+0xf8>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c30:	81a3      	strh	r3, [r4, #12]
 8009c32:	e790      	b.n	8009b56 <__sflush_r+0x1a>
 8009c34:	4407      	add	r7, r0
 8009c36:	1a36      	subs	r6, r6, r0
 8009c38:	e7ea      	b.n	8009c10 <__sflush_r+0xd4>
 8009c3a:	bf00      	nop
 8009c3c:	20400001 	.word	0x20400001

08009c40 <_fflush_r>:
 8009c40:	b538      	push	{r3, r4, r5, lr}
 8009c42:	690b      	ldr	r3, [r1, #16]
 8009c44:	4605      	mov	r5, r0
 8009c46:	460c      	mov	r4, r1
 8009c48:	b913      	cbnz	r3, 8009c50 <_fflush_r+0x10>
 8009c4a:	2500      	movs	r5, #0
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	b118      	cbz	r0, 8009c5a <_fflush_r+0x1a>
 8009c52:	6983      	ldr	r3, [r0, #24]
 8009c54:	b90b      	cbnz	r3, 8009c5a <_fflush_r+0x1a>
 8009c56:	f000 f899 	bl	8009d8c <__sinit>
 8009c5a:	4b14      	ldr	r3, [pc, #80]	; (8009cac <_fflush_r+0x6c>)
 8009c5c:	429c      	cmp	r4, r3
 8009c5e:	d11b      	bne.n	8009c98 <_fflush_r+0x58>
 8009c60:	686c      	ldr	r4, [r5, #4]
 8009c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d0ef      	beq.n	8009c4a <_fflush_r+0xa>
 8009c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c6c:	07d0      	lsls	r0, r2, #31
 8009c6e:	d404      	bmi.n	8009c7a <_fflush_r+0x3a>
 8009c70:	0599      	lsls	r1, r3, #22
 8009c72:	d402      	bmi.n	8009c7a <_fflush_r+0x3a>
 8009c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c76:	f000 f984 	bl	8009f82 <__retarget_lock_acquire_recursive>
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	f7ff ff5d 	bl	8009b3c <__sflush_r>
 8009c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c84:	4605      	mov	r5, r0
 8009c86:	07da      	lsls	r2, r3, #31
 8009c88:	d4e0      	bmi.n	8009c4c <_fflush_r+0xc>
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	059b      	lsls	r3, r3, #22
 8009c8e:	d4dd      	bmi.n	8009c4c <_fflush_r+0xc>
 8009c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c92:	f000 f977 	bl	8009f84 <__retarget_lock_release_recursive>
 8009c96:	e7d9      	b.n	8009c4c <_fflush_r+0xc>
 8009c98:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <_fflush_r+0x70>)
 8009c9a:	429c      	cmp	r4, r3
 8009c9c:	d101      	bne.n	8009ca2 <_fflush_r+0x62>
 8009c9e:	68ac      	ldr	r4, [r5, #8]
 8009ca0:	e7df      	b.n	8009c62 <_fflush_r+0x22>
 8009ca2:	4b04      	ldr	r3, [pc, #16]	; (8009cb4 <_fflush_r+0x74>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	bf08      	it	eq
 8009ca8:	68ec      	ldreq	r4, [r5, #12]
 8009caa:	e7da      	b.n	8009c62 <_fflush_r+0x22>
 8009cac:	0800cb70 	.word	0x0800cb70
 8009cb0:	0800cb90 	.word	0x0800cb90
 8009cb4:	0800cb50 	.word	0x0800cb50

08009cb8 <fflush>:
 8009cb8:	4601      	mov	r1, r0
 8009cba:	b920      	cbnz	r0, 8009cc6 <fflush+0xe>
 8009cbc:	4b04      	ldr	r3, [pc, #16]	; (8009cd0 <fflush+0x18>)
 8009cbe:	4905      	ldr	r1, [pc, #20]	; (8009cd4 <fflush+0x1c>)
 8009cc0:	6818      	ldr	r0, [r3, #0]
 8009cc2:	f000 b8fe 	b.w	8009ec2 <_fwalk_reent>
 8009cc6:	4b04      	ldr	r3, [pc, #16]	; (8009cd8 <fflush+0x20>)
 8009cc8:	6818      	ldr	r0, [r3, #0]
 8009cca:	f7ff bfb9 	b.w	8009c40 <_fflush_r>
 8009cce:	bf00      	nop
 8009cd0:	0800ca48 	.word	0x0800ca48
 8009cd4:	08009c41 	.word	0x08009c41
 8009cd8:	20000144 	.word	0x20000144

08009cdc <std>:
 8009cdc:	2300      	movs	r3, #0
 8009cde:	b510      	push	{r4, lr}
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cea:	6083      	str	r3, [r0, #8]
 8009cec:	8181      	strh	r1, [r0, #12]
 8009cee:	6643      	str	r3, [r0, #100]	; 0x64
 8009cf0:	81c2      	strh	r2, [r0, #14]
 8009cf2:	6183      	str	r3, [r0, #24]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	2208      	movs	r2, #8
 8009cf8:	305c      	adds	r0, #92	; 0x5c
 8009cfa:	f7ff fb63 	bl	80093c4 <memset>
 8009cfe:	4b05      	ldr	r3, [pc, #20]	; (8009d14 <std+0x38>)
 8009d00:	6224      	str	r4, [r4, #32]
 8009d02:	6263      	str	r3, [r4, #36]	; 0x24
 8009d04:	4b04      	ldr	r3, [pc, #16]	; (8009d18 <std+0x3c>)
 8009d06:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d08:	4b04      	ldr	r3, [pc, #16]	; (8009d1c <std+0x40>)
 8009d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d0c:	4b04      	ldr	r3, [pc, #16]	; (8009d20 <std+0x44>)
 8009d0e:	6323      	str	r3, [r4, #48]	; 0x30
 8009d10:	bd10      	pop	{r4, pc}
 8009d12:	bf00      	nop
 8009d14:	08009749 	.word	0x08009749
 8009d18:	0800976f 	.word	0x0800976f
 8009d1c:	080097a7 	.word	0x080097a7
 8009d20:	080097cb 	.word	0x080097cb

08009d24 <_cleanup_r>:
 8009d24:	4901      	ldr	r1, [pc, #4]	; (8009d2c <_cleanup_r+0x8>)
 8009d26:	f000 b8cc 	b.w	8009ec2 <_fwalk_reent>
 8009d2a:	bf00      	nop
 8009d2c:	08009c41 	.word	0x08009c41

08009d30 <__sfmoreglue>:
 8009d30:	2268      	movs	r2, #104	; 0x68
 8009d32:	b570      	push	{r4, r5, r6, lr}
 8009d34:	1e4d      	subs	r5, r1, #1
 8009d36:	4355      	muls	r5, r2
 8009d38:	460e      	mov	r6, r1
 8009d3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d3e:	f000 fa0b 	bl	800a158 <_malloc_r>
 8009d42:	4604      	mov	r4, r0
 8009d44:	b140      	cbz	r0, 8009d58 <__sfmoreglue+0x28>
 8009d46:	2100      	movs	r1, #0
 8009d48:	e9c0 1600 	strd	r1, r6, [r0]
 8009d4c:	300c      	adds	r0, #12
 8009d4e:	60a0      	str	r0, [r4, #8]
 8009d50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d54:	f7ff fb36 	bl	80093c4 <memset>
 8009d58:	4620      	mov	r0, r4
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}

08009d5c <__sfp_lock_acquire>:
 8009d5c:	4801      	ldr	r0, [pc, #4]	; (8009d64 <__sfp_lock_acquire+0x8>)
 8009d5e:	f000 b910 	b.w	8009f82 <__retarget_lock_acquire_recursive>
 8009d62:	bf00      	nop
 8009d64:	20000f4b 	.word	0x20000f4b

08009d68 <__sfp_lock_release>:
 8009d68:	4801      	ldr	r0, [pc, #4]	; (8009d70 <__sfp_lock_release+0x8>)
 8009d6a:	f000 b90b 	b.w	8009f84 <__retarget_lock_release_recursive>
 8009d6e:	bf00      	nop
 8009d70:	20000f4b 	.word	0x20000f4b

08009d74 <__sinit_lock_acquire>:
 8009d74:	4801      	ldr	r0, [pc, #4]	; (8009d7c <__sinit_lock_acquire+0x8>)
 8009d76:	f000 b904 	b.w	8009f82 <__retarget_lock_acquire_recursive>
 8009d7a:	bf00      	nop
 8009d7c:	20000f4c 	.word	0x20000f4c

08009d80 <__sinit_lock_release>:
 8009d80:	4801      	ldr	r0, [pc, #4]	; (8009d88 <__sinit_lock_release+0x8>)
 8009d82:	f000 b8ff 	b.w	8009f84 <__retarget_lock_release_recursive>
 8009d86:	bf00      	nop
 8009d88:	20000f4c 	.word	0x20000f4c

08009d8c <__sinit>:
 8009d8c:	b510      	push	{r4, lr}
 8009d8e:	4604      	mov	r4, r0
 8009d90:	f7ff fff0 	bl	8009d74 <__sinit_lock_acquire>
 8009d94:	69a3      	ldr	r3, [r4, #24]
 8009d96:	b11b      	cbz	r3, 8009da0 <__sinit+0x14>
 8009d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d9c:	f7ff bff0 	b.w	8009d80 <__sinit_lock_release>
 8009da0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009da4:	6523      	str	r3, [r4, #80]	; 0x50
 8009da6:	4b13      	ldr	r3, [pc, #76]	; (8009df4 <__sinit+0x68>)
 8009da8:	4a13      	ldr	r2, [pc, #76]	; (8009df8 <__sinit+0x6c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	62a2      	str	r2, [r4, #40]	; 0x28
 8009dae:	42a3      	cmp	r3, r4
 8009db0:	bf08      	it	eq
 8009db2:	2301      	moveq	r3, #1
 8009db4:	4620      	mov	r0, r4
 8009db6:	bf08      	it	eq
 8009db8:	61a3      	streq	r3, [r4, #24]
 8009dba:	f000 f81f 	bl	8009dfc <__sfp>
 8009dbe:	6060      	str	r0, [r4, #4]
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 f81b 	bl	8009dfc <__sfp>
 8009dc6:	60a0      	str	r0, [r4, #8]
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 f817 	bl	8009dfc <__sfp>
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2104      	movs	r1, #4
 8009dd2:	60e0      	str	r0, [r4, #12]
 8009dd4:	6860      	ldr	r0, [r4, #4]
 8009dd6:	f7ff ff81 	bl	8009cdc <std>
 8009dda:	2201      	movs	r2, #1
 8009ddc:	2109      	movs	r1, #9
 8009dde:	68a0      	ldr	r0, [r4, #8]
 8009de0:	f7ff ff7c 	bl	8009cdc <std>
 8009de4:	2202      	movs	r2, #2
 8009de6:	2112      	movs	r1, #18
 8009de8:	68e0      	ldr	r0, [r4, #12]
 8009dea:	f7ff ff77 	bl	8009cdc <std>
 8009dee:	2301      	movs	r3, #1
 8009df0:	61a3      	str	r3, [r4, #24]
 8009df2:	e7d1      	b.n	8009d98 <__sinit+0xc>
 8009df4:	0800ca48 	.word	0x0800ca48
 8009df8:	08009d25 	.word	0x08009d25

08009dfc <__sfp>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	4607      	mov	r7, r0
 8009e00:	f7ff ffac 	bl	8009d5c <__sfp_lock_acquire>
 8009e04:	4b1e      	ldr	r3, [pc, #120]	; (8009e80 <__sfp+0x84>)
 8009e06:	681e      	ldr	r6, [r3, #0]
 8009e08:	69b3      	ldr	r3, [r6, #24]
 8009e0a:	b913      	cbnz	r3, 8009e12 <__sfp+0x16>
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f7ff ffbd 	bl	8009d8c <__sinit>
 8009e12:	3648      	adds	r6, #72	; 0x48
 8009e14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	d503      	bpl.n	8009e24 <__sfp+0x28>
 8009e1c:	6833      	ldr	r3, [r6, #0]
 8009e1e:	b30b      	cbz	r3, 8009e64 <__sfp+0x68>
 8009e20:	6836      	ldr	r6, [r6, #0]
 8009e22:	e7f7      	b.n	8009e14 <__sfp+0x18>
 8009e24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e28:	b9d5      	cbnz	r5, 8009e60 <__sfp+0x64>
 8009e2a:	4b16      	ldr	r3, [pc, #88]	; (8009e84 <__sfp+0x88>)
 8009e2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e30:	60e3      	str	r3, [r4, #12]
 8009e32:	6665      	str	r5, [r4, #100]	; 0x64
 8009e34:	f000 f8a4 	bl	8009f80 <__retarget_lock_init_recursive>
 8009e38:	f7ff ff96 	bl	8009d68 <__sfp_lock_release>
 8009e3c:	2208      	movs	r2, #8
 8009e3e:	4629      	mov	r1, r5
 8009e40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e48:	6025      	str	r5, [r4, #0]
 8009e4a:	61a5      	str	r5, [r4, #24]
 8009e4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e50:	f7ff fab8 	bl	80093c4 <memset>
 8009e54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e60:	3468      	adds	r4, #104	; 0x68
 8009e62:	e7d9      	b.n	8009e18 <__sfp+0x1c>
 8009e64:	2104      	movs	r1, #4
 8009e66:	4638      	mov	r0, r7
 8009e68:	f7ff ff62 	bl	8009d30 <__sfmoreglue>
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	6030      	str	r0, [r6, #0]
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d1d5      	bne.n	8009e20 <__sfp+0x24>
 8009e74:	f7ff ff78 	bl	8009d68 <__sfp_lock_release>
 8009e78:	230c      	movs	r3, #12
 8009e7a:	603b      	str	r3, [r7, #0]
 8009e7c:	e7ee      	b.n	8009e5c <__sfp+0x60>
 8009e7e:	bf00      	nop
 8009e80:	0800ca48 	.word	0x0800ca48
 8009e84:	ffff0001 	.word	0xffff0001

08009e88 <_fwalk>:
 8009e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8c:	460f      	mov	r7, r1
 8009e8e:	2600      	movs	r6, #0
 8009e90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e94:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8009e98:	f1b8 0801 	subs.w	r8, r8, #1
 8009e9c:	d505      	bpl.n	8009eaa <_fwalk+0x22>
 8009e9e:	6824      	ldr	r4, [r4, #0]
 8009ea0:	2c00      	cmp	r4, #0
 8009ea2:	d1f7      	bne.n	8009e94 <_fwalk+0xc>
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eaa:	89ab      	ldrh	r3, [r5, #12]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d906      	bls.n	8009ebe <_fwalk+0x36>
 8009eb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	d002      	beq.n	8009ebe <_fwalk+0x36>
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b8      	blx	r7
 8009ebc:	4306      	orrs	r6, r0
 8009ebe:	3568      	adds	r5, #104	; 0x68
 8009ec0:	e7ea      	b.n	8009e98 <_fwalk+0x10>

08009ec2 <_fwalk_reent>:
 8009ec2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	4688      	mov	r8, r1
 8009eca:	2700      	movs	r7, #0
 8009ecc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ed0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ed4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ed8:	d505      	bpl.n	8009ee6 <_fwalk_reent+0x24>
 8009eda:	6824      	ldr	r4, [r4, #0]
 8009edc:	2c00      	cmp	r4, #0
 8009ede:	d1f7      	bne.n	8009ed0 <_fwalk_reent+0xe>
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ee6:	89ab      	ldrh	r3, [r5, #12]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d907      	bls.n	8009efc <_fwalk_reent+0x3a>
 8009eec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	d003      	beq.n	8009efc <_fwalk_reent+0x3a>
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	47c0      	blx	r8
 8009efa:	4307      	orrs	r7, r0
 8009efc:	3568      	adds	r5, #104	; 0x68
 8009efe:	e7e9      	b.n	8009ed4 <_fwalk_reent+0x12>

08009f00 <_getc_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	460c      	mov	r4, r1
 8009f04:	4605      	mov	r5, r0
 8009f06:	b118      	cbz	r0, 8009f10 <_getc_r+0x10>
 8009f08:	6983      	ldr	r3, [r0, #24]
 8009f0a:	b90b      	cbnz	r3, 8009f10 <_getc_r+0x10>
 8009f0c:	f7ff ff3e 	bl	8009d8c <__sinit>
 8009f10:	4b18      	ldr	r3, [pc, #96]	; (8009f74 <_getc_r+0x74>)
 8009f12:	429c      	cmp	r4, r3
 8009f14:	d11e      	bne.n	8009f54 <_getc_r+0x54>
 8009f16:	686c      	ldr	r4, [r5, #4]
 8009f18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f1a:	07d8      	lsls	r0, r3, #31
 8009f1c:	d405      	bmi.n	8009f2a <_getc_r+0x2a>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	0599      	lsls	r1, r3, #22
 8009f22:	d402      	bmi.n	8009f2a <_getc_r+0x2a>
 8009f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f26:	f000 f82c 	bl	8009f82 <__retarget_lock_acquire_recursive>
 8009f2a:	6863      	ldr	r3, [r4, #4]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	6063      	str	r3, [r4, #4]
 8009f32:	da19      	bge.n	8009f68 <_getc_r+0x68>
 8009f34:	4628      	mov	r0, r5
 8009f36:	4621      	mov	r1, r4
 8009f38:	f001 f94c 	bl	800b1d4 <__srget_r>
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f40:	07da      	lsls	r2, r3, #31
 8009f42:	d405      	bmi.n	8009f50 <_getc_r+0x50>
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	059b      	lsls	r3, r3, #22
 8009f48:	d402      	bmi.n	8009f50 <_getc_r+0x50>
 8009f4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f4c:	f000 f81a 	bl	8009f84 <__retarget_lock_release_recursive>
 8009f50:	4628      	mov	r0, r5
 8009f52:	bd38      	pop	{r3, r4, r5, pc}
 8009f54:	4b08      	ldr	r3, [pc, #32]	; (8009f78 <_getc_r+0x78>)
 8009f56:	429c      	cmp	r4, r3
 8009f58:	d101      	bne.n	8009f5e <_getc_r+0x5e>
 8009f5a:	68ac      	ldr	r4, [r5, #8]
 8009f5c:	e7dc      	b.n	8009f18 <_getc_r+0x18>
 8009f5e:	4b07      	ldr	r3, [pc, #28]	; (8009f7c <_getc_r+0x7c>)
 8009f60:	429c      	cmp	r4, r3
 8009f62:	bf08      	it	eq
 8009f64:	68ec      	ldreq	r4, [r5, #12]
 8009f66:	e7d7      	b.n	8009f18 <_getc_r+0x18>
 8009f68:	6823      	ldr	r3, [r4, #0]
 8009f6a:	1c5a      	adds	r2, r3, #1
 8009f6c:	6022      	str	r2, [r4, #0]
 8009f6e:	781d      	ldrb	r5, [r3, #0]
 8009f70:	e7e5      	b.n	8009f3e <_getc_r+0x3e>
 8009f72:	bf00      	nop
 8009f74:	0800cb70 	.word	0x0800cb70
 8009f78:	0800cb90 	.word	0x0800cb90
 8009f7c:	0800cb50 	.word	0x0800cb50

08009f80 <__retarget_lock_init_recursive>:
 8009f80:	4770      	bx	lr

08009f82 <__retarget_lock_acquire_recursive>:
 8009f82:	4770      	bx	lr

08009f84 <__retarget_lock_release_recursive>:
 8009f84:	4770      	bx	lr
	...

08009f88 <_lseek_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	4608      	mov	r0, r1
 8009f8e:	4611      	mov	r1, r2
 8009f90:	2200      	movs	r2, #0
 8009f92:	4d05      	ldr	r5, [pc, #20]	; (8009fa8 <_lseek_r+0x20>)
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	f7f7 fdff 	bl	8001b9a <_lseek>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_lseek_r+0x1e>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_lseek_r+0x1e>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	20000f58 	.word	0x20000f58

08009fac <__swhatbuf_r>:
 8009fac:	b570      	push	{r4, r5, r6, lr}
 8009fae:	460e      	mov	r6, r1
 8009fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb4:	4614      	mov	r4, r2
 8009fb6:	2900      	cmp	r1, #0
 8009fb8:	461d      	mov	r5, r3
 8009fba:	b096      	sub	sp, #88	; 0x58
 8009fbc:	da08      	bge.n	8009fd0 <__swhatbuf_r+0x24>
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009fc4:	602a      	str	r2, [r5, #0]
 8009fc6:	061a      	lsls	r2, r3, #24
 8009fc8:	d410      	bmi.n	8009fec <__swhatbuf_r+0x40>
 8009fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fce:	e00e      	b.n	8009fee <__swhatbuf_r+0x42>
 8009fd0:	466a      	mov	r2, sp
 8009fd2:	f001 fa1f 	bl	800b414 <_fstat_r>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	dbf1      	blt.n	8009fbe <__swhatbuf_r+0x12>
 8009fda:	9a01      	ldr	r2, [sp, #4]
 8009fdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fe0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fe4:	425a      	negs	r2, r3
 8009fe6:	415a      	adcs	r2, r3
 8009fe8:	602a      	str	r2, [r5, #0]
 8009fea:	e7ee      	b.n	8009fca <__swhatbuf_r+0x1e>
 8009fec:	2340      	movs	r3, #64	; 0x40
 8009fee:	2000      	movs	r0, #0
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	b016      	add	sp, #88	; 0x58
 8009ff4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ff8 <__smakebuf_r>:
 8009ff8:	898b      	ldrh	r3, [r1, #12]
 8009ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ffc:	079d      	lsls	r5, r3, #30
 8009ffe:	4606      	mov	r6, r0
 800a000:	460c      	mov	r4, r1
 800a002:	d507      	bpl.n	800a014 <__smakebuf_r+0x1c>
 800a004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	6123      	str	r3, [r4, #16]
 800a00c:	2301      	movs	r3, #1
 800a00e:	6163      	str	r3, [r4, #20]
 800a010:	b002      	add	sp, #8
 800a012:	bd70      	pop	{r4, r5, r6, pc}
 800a014:	466a      	mov	r2, sp
 800a016:	ab01      	add	r3, sp, #4
 800a018:	f7ff ffc8 	bl	8009fac <__swhatbuf_r>
 800a01c:	9900      	ldr	r1, [sp, #0]
 800a01e:	4605      	mov	r5, r0
 800a020:	4630      	mov	r0, r6
 800a022:	f000 f899 	bl	800a158 <_malloc_r>
 800a026:	b948      	cbnz	r0, 800a03c <__smakebuf_r+0x44>
 800a028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a02c:	059a      	lsls	r2, r3, #22
 800a02e:	d4ef      	bmi.n	800a010 <__smakebuf_r+0x18>
 800a030:	f023 0303 	bic.w	r3, r3, #3
 800a034:	f043 0302 	orr.w	r3, r3, #2
 800a038:	81a3      	strh	r3, [r4, #12]
 800a03a:	e7e3      	b.n	800a004 <__smakebuf_r+0xc>
 800a03c:	4b0d      	ldr	r3, [pc, #52]	; (800a074 <__smakebuf_r+0x7c>)
 800a03e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	6020      	str	r0, [r4, #0]
 800a044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a048:	81a3      	strh	r3, [r4, #12]
 800a04a:	9b00      	ldr	r3, [sp, #0]
 800a04c:	6120      	str	r0, [r4, #16]
 800a04e:	6163      	str	r3, [r4, #20]
 800a050:	9b01      	ldr	r3, [sp, #4]
 800a052:	b15b      	cbz	r3, 800a06c <__smakebuf_r+0x74>
 800a054:	4630      	mov	r0, r6
 800a056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a05a:	f001 f9ed 	bl	800b438 <_isatty_r>
 800a05e:	b128      	cbz	r0, 800a06c <__smakebuf_r+0x74>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	f023 0303 	bic.w	r3, r3, #3
 800a066:	f043 0301 	orr.w	r3, r3, #1
 800a06a:	81a3      	strh	r3, [r4, #12]
 800a06c:	89a0      	ldrh	r0, [r4, #12]
 800a06e:	4305      	orrs	r5, r0
 800a070:	81a5      	strh	r5, [r4, #12]
 800a072:	e7cd      	b.n	800a010 <__smakebuf_r+0x18>
 800a074:	08009d25 	.word	0x08009d25

0800a078 <malloc>:
 800a078:	4b02      	ldr	r3, [pc, #8]	; (800a084 <malloc+0xc>)
 800a07a:	4601      	mov	r1, r0
 800a07c:	6818      	ldr	r0, [r3, #0]
 800a07e:	f000 b86b 	b.w	800a158 <_malloc_r>
 800a082:	bf00      	nop
 800a084:	20000144 	.word	0x20000144

0800a088 <_free_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	4605      	mov	r5, r0
 800a08c:	2900      	cmp	r1, #0
 800a08e:	d040      	beq.n	800a112 <_free_r+0x8a>
 800a090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a094:	1f0c      	subs	r4, r1, #4
 800a096:	2b00      	cmp	r3, #0
 800a098:	bfb8      	it	lt
 800a09a:	18e4      	addlt	r4, r4, r3
 800a09c:	f001 fa04 	bl	800b4a8 <__malloc_lock>
 800a0a0:	4a1c      	ldr	r2, [pc, #112]	; (800a114 <_free_r+0x8c>)
 800a0a2:	6813      	ldr	r3, [r2, #0]
 800a0a4:	b933      	cbnz	r3, 800a0b4 <_free_r+0x2c>
 800a0a6:	6063      	str	r3, [r4, #4]
 800a0a8:	6014      	str	r4, [r2, #0]
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0b0:	f001 ba00 	b.w	800b4b4 <__malloc_unlock>
 800a0b4:	42a3      	cmp	r3, r4
 800a0b6:	d908      	bls.n	800a0ca <_free_r+0x42>
 800a0b8:	6820      	ldr	r0, [r4, #0]
 800a0ba:	1821      	adds	r1, r4, r0
 800a0bc:	428b      	cmp	r3, r1
 800a0be:	bf01      	itttt	eq
 800a0c0:	6819      	ldreq	r1, [r3, #0]
 800a0c2:	685b      	ldreq	r3, [r3, #4]
 800a0c4:	1809      	addeq	r1, r1, r0
 800a0c6:	6021      	streq	r1, [r4, #0]
 800a0c8:	e7ed      	b.n	800a0a6 <_free_r+0x1e>
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	b10b      	cbz	r3, 800a0d4 <_free_r+0x4c>
 800a0d0:	42a3      	cmp	r3, r4
 800a0d2:	d9fa      	bls.n	800a0ca <_free_r+0x42>
 800a0d4:	6811      	ldr	r1, [r2, #0]
 800a0d6:	1850      	adds	r0, r2, r1
 800a0d8:	42a0      	cmp	r0, r4
 800a0da:	d10b      	bne.n	800a0f4 <_free_r+0x6c>
 800a0dc:	6820      	ldr	r0, [r4, #0]
 800a0de:	4401      	add	r1, r0
 800a0e0:	1850      	adds	r0, r2, r1
 800a0e2:	4283      	cmp	r3, r0
 800a0e4:	6011      	str	r1, [r2, #0]
 800a0e6:	d1e0      	bne.n	800a0aa <_free_r+0x22>
 800a0e8:	6818      	ldr	r0, [r3, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	4401      	add	r1, r0
 800a0ee:	6011      	str	r1, [r2, #0]
 800a0f0:	6053      	str	r3, [r2, #4]
 800a0f2:	e7da      	b.n	800a0aa <_free_r+0x22>
 800a0f4:	d902      	bls.n	800a0fc <_free_r+0x74>
 800a0f6:	230c      	movs	r3, #12
 800a0f8:	602b      	str	r3, [r5, #0]
 800a0fa:	e7d6      	b.n	800a0aa <_free_r+0x22>
 800a0fc:	6820      	ldr	r0, [r4, #0]
 800a0fe:	1821      	adds	r1, r4, r0
 800a100:	428b      	cmp	r3, r1
 800a102:	bf01      	itttt	eq
 800a104:	6819      	ldreq	r1, [r3, #0]
 800a106:	685b      	ldreq	r3, [r3, #4]
 800a108:	1809      	addeq	r1, r1, r0
 800a10a:	6021      	streq	r1, [r4, #0]
 800a10c:	6063      	str	r3, [r4, #4]
 800a10e:	6054      	str	r4, [r2, #4]
 800a110:	e7cb      	b.n	800a0aa <_free_r+0x22>
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20000f50 	.word	0x20000f50

0800a118 <sbrk_aligned>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	4e0e      	ldr	r6, [pc, #56]	; (800a154 <sbrk_aligned+0x3c>)
 800a11c:	460c      	mov	r4, r1
 800a11e:	6831      	ldr	r1, [r6, #0]
 800a120:	4605      	mov	r5, r0
 800a122:	b911      	cbnz	r1, 800a12a <sbrk_aligned+0x12>
 800a124:	f001 f882 	bl	800b22c <_sbrk_r>
 800a128:	6030      	str	r0, [r6, #0]
 800a12a:	4621      	mov	r1, r4
 800a12c:	4628      	mov	r0, r5
 800a12e:	f001 f87d 	bl	800b22c <_sbrk_r>
 800a132:	1c43      	adds	r3, r0, #1
 800a134:	d00a      	beq.n	800a14c <sbrk_aligned+0x34>
 800a136:	1cc4      	adds	r4, r0, #3
 800a138:	f024 0403 	bic.w	r4, r4, #3
 800a13c:	42a0      	cmp	r0, r4
 800a13e:	d007      	beq.n	800a150 <sbrk_aligned+0x38>
 800a140:	1a21      	subs	r1, r4, r0
 800a142:	4628      	mov	r0, r5
 800a144:	f001 f872 	bl	800b22c <_sbrk_r>
 800a148:	3001      	adds	r0, #1
 800a14a:	d101      	bne.n	800a150 <sbrk_aligned+0x38>
 800a14c:	f04f 34ff 	mov.w	r4, #4294967295
 800a150:	4620      	mov	r0, r4
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	20000f54 	.word	0x20000f54

0800a158 <_malloc_r>:
 800a158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a15c:	1ccd      	adds	r5, r1, #3
 800a15e:	f025 0503 	bic.w	r5, r5, #3
 800a162:	3508      	adds	r5, #8
 800a164:	2d0c      	cmp	r5, #12
 800a166:	bf38      	it	cc
 800a168:	250c      	movcc	r5, #12
 800a16a:	2d00      	cmp	r5, #0
 800a16c:	4607      	mov	r7, r0
 800a16e:	db01      	blt.n	800a174 <_malloc_r+0x1c>
 800a170:	42a9      	cmp	r1, r5
 800a172:	d905      	bls.n	800a180 <_malloc_r+0x28>
 800a174:	230c      	movs	r3, #12
 800a176:	2600      	movs	r6, #0
 800a178:	603b      	str	r3, [r7, #0]
 800a17a:	4630      	mov	r0, r6
 800a17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a180:	4e2e      	ldr	r6, [pc, #184]	; (800a23c <_malloc_r+0xe4>)
 800a182:	f001 f991 	bl	800b4a8 <__malloc_lock>
 800a186:	6833      	ldr	r3, [r6, #0]
 800a188:	461c      	mov	r4, r3
 800a18a:	bb34      	cbnz	r4, 800a1da <_malloc_r+0x82>
 800a18c:	4629      	mov	r1, r5
 800a18e:	4638      	mov	r0, r7
 800a190:	f7ff ffc2 	bl	800a118 <sbrk_aligned>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	4604      	mov	r4, r0
 800a198:	d14d      	bne.n	800a236 <_malloc_r+0xde>
 800a19a:	6834      	ldr	r4, [r6, #0]
 800a19c:	4626      	mov	r6, r4
 800a19e:	2e00      	cmp	r6, #0
 800a1a0:	d140      	bne.n	800a224 <_malloc_r+0xcc>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	eb04 0803 	add.w	r8, r4, r3
 800a1ac:	f001 f83e 	bl	800b22c <_sbrk_r>
 800a1b0:	4580      	cmp	r8, r0
 800a1b2:	d13a      	bne.n	800a22a <_malloc_r+0xd2>
 800a1b4:	6821      	ldr	r1, [r4, #0]
 800a1b6:	3503      	adds	r5, #3
 800a1b8:	1a6d      	subs	r5, r5, r1
 800a1ba:	f025 0503 	bic.w	r5, r5, #3
 800a1be:	3508      	adds	r5, #8
 800a1c0:	2d0c      	cmp	r5, #12
 800a1c2:	bf38      	it	cc
 800a1c4:	250c      	movcc	r5, #12
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	f7ff ffa5 	bl	800a118 <sbrk_aligned>
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d02b      	beq.n	800a22a <_malloc_r+0xd2>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	442b      	add	r3, r5
 800a1d6:	6023      	str	r3, [r4, #0]
 800a1d8:	e00e      	b.n	800a1f8 <_malloc_r+0xa0>
 800a1da:	6822      	ldr	r2, [r4, #0]
 800a1dc:	1b52      	subs	r2, r2, r5
 800a1de:	d41e      	bmi.n	800a21e <_malloc_r+0xc6>
 800a1e0:	2a0b      	cmp	r2, #11
 800a1e2:	d916      	bls.n	800a212 <_malloc_r+0xba>
 800a1e4:	1961      	adds	r1, r4, r5
 800a1e6:	42a3      	cmp	r3, r4
 800a1e8:	6025      	str	r5, [r4, #0]
 800a1ea:	bf18      	it	ne
 800a1ec:	6059      	strne	r1, [r3, #4]
 800a1ee:	6863      	ldr	r3, [r4, #4]
 800a1f0:	bf08      	it	eq
 800a1f2:	6031      	streq	r1, [r6, #0]
 800a1f4:	5162      	str	r2, [r4, r5]
 800a1f6:	604b      	str	r3, [r1, #4]
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	f104 060b 	add.w	r6, r4, #11
 800a1fe:	f001 f959 	bl	800b4b4 <__malloc_unlock>
 800a202:	f026 0607 	bic.w	r6, r6, #7
 800a206:	1d23      	adds	r3, r4, #4
 800a208:	1af2      	subs	r2, r6, r3
 800a20a:	d0b6      	beq.n	800a17a <_malloc_r+0x22>
 800a20c:	1b9b      	subs	r3, r3, r6
 800a20e:	50a3      	str	r3, [r4, r2]
 800a210:	e7b3      	b.n	800a17a <_malloc_r+0x22>
 800a212:	6862      	ldr	r2, [r4, #4]
 800a214:	42a3      	cmp	r3, r4
 800a216:	bf0c      	ite	eq
 800a218:	6032      	streq	r2, [r6, #0]
 800a21a:	605a      	strne	r2, [r3, #4]
 800a21c:	e7ec      	b.n	800a1f8 <_malloc_r+0xa0>
 800a21e:	4623      	mov	r3, r4
 800a220:	6864      	ldr	r4, [r4, #4]
 800a222:	e7b2      	b.n	800a18a <_malloc_r+0x32>
 800a224:	4634      	mov	r4, r6
 800a226:	6876      	ldr	r6, [r6, #4]
 800a228:	e7b9      	b.n	800a19e <_malloc_r+0x46>
 800a22a:	230c      	movs	r3, #12
 800a22c:	4638      	mov	r0, r7
 800a22e:	603b      	str	r3, [r7, #0]
 800a230:	f001 f940 	bl	800b4b4 <__malloc_unlock>
 800a234:	e7a1      	b.n	800a17a <_malloc_r+0x22>
 800a236:	6025      	str	r5, [r4, #0]
 800a238:	e7de      	b.n	800a1f8 <_malloc_r+0xa0>
 800a23a:	bf00      	nop
 800a23c:	20000f50 	.word	0x20000f50

0800a240 <__ssputs_r>:
 800a240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a244:	688e      	ldr	r6, [r1, #8]
 800a246:	4682      	mov	sl, r0
 800a248:	429e      	cmp	r6, r3
 800a24a:	460c      	mov	r4, r1
 800a24c:	4690      	mov	r8, r2
 800a24e:	461f      	mov	r7, r3
 800a250:	d838      	bhi.n	800a2c4 <__ssputs_r+0x84>
 800a252:	898a      	ldrh	r2, [r1, #12]
 800a254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a258:	d032      	beq.n	800a2c0 <__ssputs_r+0x80>
 800a25a:	6825      	ldr	r5, [r4, #0]
 800a25c:	6909      	ldr	r1, [r1, #16]
 800a25e:	3301      	adds	r3, #1
 800a260:	eba5 0901 	sub.w	r9, r5, r1
 800a264:	6965      	ldr	r5, [r4, #20]
 800a266:	444b      	add	r3, r9
 800a268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a26c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a270:	106d      	asrs	r5, r5, #1
 800a272:	429d      	cmp	r5, r3
 800a274:	bf38      	it	cc
 800a276:	461d      	movcc	r5, r3
 800a278:	0553      	lsls	r3, r2, #21
 800a27a:	d531      	bpl.n	800a2e0 <__ssputs_r+0xa0>
 800a27c:	4629      	mov	r1, r5
 800a27e:	f7ff ff6b 	bl	800a158 <_malloc_r>
 800a282:	4606      	mov	r6, r0
 800a284:	b950      	cbnz	r0, 800a29c <__ssputs_r+0x5c>
 800a286:	230c      	movs	r3, #12
 800a288:	f04f 30ff 	mov.w	r0, #4294967295
 800a28c:	f8ca 3000 	str.w	r3, [sl]
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a296:	81a3      	strh	r3, [r4, #12]
 800a298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a29c:	464a      	mov	r2, r9
 800a29e:	6921      	ldr	r1, [r4, #16]
 800a2a0:	f7ff f882 	bl	80093a8 <memcpy>
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ae:	81a3      	strh	r3, [r4, #12]
 800a2b0:	6126      	str	r6, [r4, #16]
 800a2b2:	444e      	add	r6, r9
 800a2b4:	6026      	str	r6, [r4, #0]
 800a2b6:	463e      	mov	r6, r7
 800a2b8:	6165      	str	r5, [r4, #20]
 800a2ba:	eba5 0509 	sub.w	r5, r5, r9
 800a2be:	60a5      	str	r5, [r4, #8]
 800a2c0:	42be      	cmp	r6, r7
 800a2c2:	d900      	bls.n	800a2c6 <__ssputs_r+0x86>
 800a2c4:	463e      	mov	r6, r7
 800a2c6:	4632      	mov	r2, r6
 800a2c8:	4641      	mov	r1, r8
 800a2ca:	6820      	ldr	r0, [r4, #0]
 800a2cc:	f001 f8d2 	bl	800b474 <memmove>
 800a2d0:	68a3      	ldr	r3, [r4, #8]
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	1b9b      	subs	r3, r3, r6
 800a2d6:	60a3      	str	r3, [r4, #8]
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	4433      	add	r3, r6
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	e7db      	b.n	800a298 <__ssputs_r+0x58>
 800a2e0:	462a      	mov	r2, r5
 800a2e2:	f001 f8ed 	bl	800b4c0 <_realloc_r>
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d1e1      	bne.n	800a2b0 <__ssputs_r+0x70>
 800a2ec:	4650      	mov	r0, sl
 800a2ee:	6921      	ldr	r1, [r4, #16]
 800a2f0:	f7ff feca 	bl	800a088 <_free_r>
 800a2f4:	e7c7      	b.n	800a286 <__ssputs_r+0x46>
	...

0800a2f8 <_svfiprintf_r>:
 800a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fc:	4698      	mov	r8, r3
 800a2fe:	898b      	ldrh	r3, [r1, #12]
 800a300:	4607      	mov	r7, r0
 800a302:	061b      	lsls	r3, r3, #24
 800a304:	460d      	mov	r5, r1
 800a306:	4614      	mov	r4, r2
 800a308:	b09d      	sub	sp, #116	; 0x74
 800a30a:	d50e      	bpl.n	800a32a <_svfiprintf_r+0x32>
 800a30c:	690b      	ldr	r3, [r1, #16]
 800a30e:	b963      	cbnz	r3, 800a32a <_svfiprintf_r+0x32>
 800a310:	2140      	movs	r1, #64	; 0x40
 800a312:	f7ff ff21 	bl	800a158 <_malloc_r>
 800a316:	6028      	str	r0, [r5, #0]
 800a318:	6128      	str	r0, [r5, #16]
 800a31a:	b920      	cbnz	r0, 800a326 <_svfiprintf_r+0x2e>
 800a31c:	230c      	movs	r3, #12
 800a31e:	603b      	str	r3, [r7, #0]
 800a320:	f04f 30ff 	mov.w	r0, #4294967295
 800a324:	e0d1      	b.n	800a4ca <_svfiprintf_r+0x1d2>
 800a326:	2340      	movs	r3, #64	; 0x40
 800a328:	616b      	str	r3, [r5, #20]
 800a32a:	2300      	movs	r3, #0
 800a32c:	9309      	str	r3, [sp, #36]	; 0x24
 800a32e:	2320      	movs	r3, #32
 800a330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a334:	2330      	movs	r3, #48	; 0x30
 800a336:	f04f 0901 	mov.w	r9, #1
 800a33a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a33e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a4e4 <_svfiprintf_r+0x1ec>
 800a342:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a346:	4623      	mov	r3, r4
 800a348:	469a      	mov	sl, r3
 800a34a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a34e:	b10a      	cbz	r2, 800a354 <_svfiprintf_r+0x5c>
 800a350:	2a25      	cmp	r2, #37	; 0x25
 800a352:	d1f9      	bne.n	800a348 <_svfiprintf_r+0x50>
 800a354:	ebba 0b04 	subs.w	fp, sl, r4
 800a358:	d00b      	beq.n	800a372 <_svfiprintf_r+0x7a>
 800a35a:	465b      	mov	r3, fp
 800a35c:	4622      	mov	r2, r4
 800a35e:	4629      	mov	r1, r5
 800a360:	4638      	mov	r0, r7
 800a362:	f7ff ff6d 	bl	800a240 <__ssputs_r>
 800a366:	3001      	adds	r0, #1
 800a368:	f000 80aa 	beq.w	800a4c0 <_svfiprintf_r+0x1c8>
 800a36c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a36e:	445a      	add	r2, fp
 800a370:	9209      	str	r2, [sp, #36]	; 0x24
 800a372:	f89a 3000 	ldrb.w	r3, [sl]
 800a376:	2b00      	cmp	r3, #0
 800a378:	f000 80a2 	beq.w	800a4c0 <_svfiprintf_r+0x1c8>
 800a37c:	2300      	movs	r3, #0
 800a37e:	f04f 32ff 	mov.w	r2, #4294967295
 800a382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a386:	f10a 0a01 	add.w	sl, sl, #1
 800a38a:	9304      	str	r3, [sp, #16]
 800a38c:	9307      	str	r3, [sp, #28]
 800a38e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a392:	931a      	str	r3, [sp, #104]	; 0x68
 800a394:	4654      	mov	r4, sl
 800a396:	2205      	movs	r2, #5
 800a398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39c:	4851      	ldr	r0, [pc, #324]	; (800a4e4 <_svfiprintf_r+0x1ec>)
 800a39e:	f001 f85b 	bl	800b458 <memchr>
 800a3a2:	9a04      	ldr	r2, [sp, #16]
 800a3a4:	b9d8      	cbnz	r0, 800a3de <_svfiprintf_r+0xe6>
 800a3a6:	06d0      	lsls	r0, r2, #27
 800a3a8:	bf44      	itt	mi
 800a3aa:	2320      	movmi	r3, #32
 800a3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3b0:	0711      	lsls	r1, r2, #28
 800a3b2:	bf44      	itt	mi
 800a3b4:	232b      	movmi	r3, #43	; 0x2b
 800a3b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a3be:	2b2a      	cmp	r3, #42	; 0x2a
 800a3c0:	d015      	beq.n	800a3ee <_svfiprintf_r+0xf6>
 800a3c2:	4654      	mov	r4, sl
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	f04f 0c0a 	mov.w	ip, #10
 800a3ca:	9a07      	ldr	r2, [sp, #28]
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3d2:	3b30      	subs	r3, #48	; 0x30
 800a3d4:	2b09      	cmp	r3, #9
 800a3d6:	d94e      	bls.n	800a476 <_svfiprintf_r+0x17e>
 800a3d8:	b1b0      	cbz	r0, 800a408 <_svfiprintf_r+0x110>
 800a3da:	9207      	str	r2, [sp, #28]
 800a3dc:	e014      	b.n	800a408 <_svfiprintf_r+0x110>
 800a3de:	eba0 0308 	sub.w	r3, r0, r8
 800a3e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	46a2      	mov	sl, r4
 800a3ea:	9304      	str	r3, [sp, #16]
 800a3ec:	e7d2      	b.n	800a394 <_svfiprintf_r+0x9c>
 800a3ee:	9b03      	ldr	r3, [sp, #12]
 800a3f0:	1d19      	adds	r1, r3, #4
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	9103      	str	r1, [sp, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	bfbb      	ittet	lt
 800a3fa:	425b      	neglt	r3, r3
 800a3fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a400:	9307      	strge	r3, [sp, #28]
 800a402:	9307      	strlt	r3, [sp, #28]
 800a404:	bfb8      	it	lt
 800a406:	9204      	strlt	r2, [sp, #16]
 800a408:	7823      	ldrb	r3, [r4, #0]
 800a40a:	2b2e      	cmp	r3, #46	; 0x2e
 800a40c:	d10c      	bne.n	800a428 <_svfiprintf_r+0x130>
 800a40e:	7863      	ldrb	r3, [r4, #1]
 800a410:	2b2a      	cmp	r3, #42	; 0x2a
 800a412:	d135      	bne.n	800a480 <_svfiprintf_r+0x188>
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	3402      	adds	r4, #2
 800a418:	1d1a      	adds	r2, r3, #4
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	9203      	str	r2, [sp, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	bfb8      	it	lt
 800a422:	f04f 33ff 	movlt.w	r3, #4294967295
 800a426:	9305      	str	r3, [sp, #20]
 800a428:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a4e8 <_svfiprintf_r+0x1f0>
 800a42c:	2203      	movs	r2, #3
 800a42e:	4650      	mov	r0, sl
 800a430:	7821      	ldrb	r1, [r4, #0]
 800a432:	f001 f811 	bl	800b458 <memchr>
 800a436:	b140      	cbz	r0, 800a44a <_svfiprintf_r+0x152>
 800a438:	2340      	movs	r3, #64	; 0x40
 800a43a:	eba0 000a 	sub.w	r0, r0, sl
 800a43e:	fa03 f000 	lsl.w	r0, r3, r0
 800a442:	9b04      	ldr	r3, [sp, #16]
 800a444:	3401      	adds	r4, #1
 800a446:	4303      	orrs	r3, r0
 800a448:	9304      	str	r3, [sp, #16]
 800a44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a44e:	2206      	movs	r2, #6
 800a450:	4826      	ldr	r0, [pc, #152]	; (800a4ec <_svfiprintf_r+0x1f4>)
 800a452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a456:	f000 ffff 	bl	800b458 <memchr>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d038      	beq.n	800a4d0 <_svfiprintf_r+0x1d8>
 800a45e:	4b24      	ldr	r3, [pc, #144]	; (800a4f0 <_svfiprintf_r+0x1f8>)
 800a460:	bb1b      	cbnz	r3, 800a4aa <_svfiprintf_r+0x1b2>
 800a462:	9b03      	ldr	r3, [sp, #12]
 800a464:	3307      	adds	r3, #7
 800a466:	f023 0307 	bic.w	r3, r3, #7
 800a46a:	3308      	adds	r3, #8
 800a46c:	9303      	str	r3, [sp, #12]
 800a46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a470:	4433      	add	r3, r6
 800a472:	9309      	str	r3, [sp, #36]	; 0x24
 800a474:	e767      	b.n	800a346 <_svfiprintf_r+0x4e>
 800a476:	460c      	mov	r4, r1
 800a478:	2001      	movs	r0, #1
 800a47a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a47e:	e7a5      	b.n	800a3cc <_svfiprintf_r+0xd4>
 800a480:	2300      	movs	r3, #0
 800a482:	f04f 0c0a 	mov.w	ip, #10
 800a486:	4619      	mov	r1, r3
 800a488:	3401      	adds	r4, #1
 800a48a:	9305      	str	r3, [sp, #20]
 800a48c:	4620      	mov	r0, r4
 800a48e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a492:	3a30      	subs	r2, #48	; 0x30
 800a494:	2a09      	cmp	r2, #9
 800a496:	d903      	bls.n	800a4a0 <_svfiprintf_r+0x1a8>
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d0c5      	beq.n	800a428 <_svfiprintf_r+0x130>
 800a49c:	9105      	str	r1, [sp, #20]
 800a49e:	e7c3      	b.n	800a428 <_svfiprintf_r+0x130>
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4a8:	e7f0      	b.n	800a48c <_svfiprintf_r+0x194>
 800a4aa:	ab03      	add	r3, sp, #12
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	462a      	mov	r2, r5
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	4b10      	ldr	r3, [pc, #64]	; (800a4f4 <_svfiprintf_r+0x1fc>)
 800a4b4:	a904      	add	r1, sp, #16
 800a4b6:	f3af 8000 	nop.w
 800a4ba:	1c42      	adds	r2, r0, #1
 800a4bc:	4606      	mov	r6, r0
 800a4be:	d1d6      	bne.n	800a46e <_svfiprintf_r+0x176>
 800a4c0:	89ab      	ldrh	r3, [r5, #12]
 800a4c2:	065b      	lsls	r3, r3, #25
 800a4c4:	f53f af2c 	bmi.w	800a320 <_svfiprintf_r+0x28>
 800a4c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4ca:	b01d      	add	sp, #116	; 0x74
 800a4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d0:	ab03      	add	r3, sp, #12
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	462a      	mov	r2, r5
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	4b06      	ldr	r3, [pc, #24]	; (800a4f4 <_svfiprintf_r+0x1fc>)
 800a4da:	a904      	add	r1, sp, #16
 800a4dc:	f000 fba8 	bl	800ac30 <_printf_i>
 800a4e0:	e7eb      	b.n	800a4ba <_svfiprintf_r+0x1c2>
 800a4e2:	bf00      	nop
 800a4e4:	0800cbb0 	.word	0x0800cbb0
 800a4e8:	0800cbb6 	.word	0x0800cbb6
 800a4ec:	0800cbba 	.word	0x0800cbba
 800a4f0:	00000000 	.word	0x00000000
 800a4f4:	0800a241 	.word	0x0800a241

0800a4f8 <_sungetc_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	1c4b      	adds	r3, r1, #1
 800a4fc:	4614      	mov	r4, r2
 800a4fe:	d103      	bne.n	800a508 <_sungetc_r+0x10>
 800a500:	f04f 35ff 	mov.w	r5, #4294967295
 800a504:	4628      	mov	r0, r5
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	8993      	ldrh	r3, [r2, #12]
 800a50a:	b2cd      	uxtb	r5, r1
 800a50c:	f023 0320 	bic.w	r3, r3, #32
 800a510:	8193      	strh	r3, [r2, #12]
 800a512:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a514:	6852      	ldr	r2, [r2, #4]
 800a516:	b18b      	cbz	r3, 800a53c <_sungetc_r+0x44>
 800a518:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a51a:	4293      	cmp	r3, r2
 800a51c:	dd08      	ble.n	800a530 <_sungetc_r+0x38>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	1e5a      	subs	r2, r3, #1
 800a522:	6022      	str	r2, [r4, #0]
 800a524:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a528:	6863      	ldr	r3, [r4, #4]
 800a52a:	3301      	adds	r3, #1
 800a52c:	6063      	str	r3, [r4, #4]
 800a52e:	e7e9      	b.n	800a504 <_sungetc_r+0xc>
 800a530:	4621      	mov	r1, r4
 800a532:	f000 ff37 	bl	800b3a4 <__submore>
 800a536:	2800      	cmp	r0, #0
 800a538:	d0f1      	beq.n	800a51e <_sungetc_r+0x26>
 800a53a:	e7e1      	b.n	800a500 <_sungetc_r+0x8>
 800a53c:	6921      	ldr	r1, [r4, #16]
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	b151      	cbz	r1, 800a558 <_sungetc_r+0x60>
 800a542:	4299      	cmp	r1, r3
 800a544:	d208      	bcs.n	800a558 <_sungetc_r+0x60>
 800a546:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a54a:	42a9      	cmp	r1, r5
 800a54c:	d104      	bne.n	800a558 <_sungetc_r+0x60>
 800a54e:	3b01      	subs	r3, #1
 800a550:	3201      	adds	r2, #1
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	6062      	str	r2, [r4, #4]
 800a556:	e7d5      	b.n	800a504 <_sungetc_r+0xc>
 800a558:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a55c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a560:	6363      	str	r3, [r4, #52]	; 0x34
 800a562:	2303      	movs	r3, #3
 800a564:	63a3      	str	r3, [r4, #56]	; 0x38
 800a566:	4623      	mov	r3, r4
 800a568:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	2301      	movs	r3, #1
 800a570:	e7dc      	b.n	800a52c <_sungetc_r+0x34>

0800a572 <__ssrefill_r>:
 800a572:	b510      	push	{r4, lr}
 800a574:	460c      	mov	r4, r1
 800a576:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a578:	b169      	cbz	r1, 800a596 <__ssrefill_r+0x24>
 800a57a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a57e:	4299      	cmp	r1, r3
 800a580:	d001      	beq.n	800a586 <__ssrefill_r+0x14>
 800a582:	f7ff fd81 	bl	800a088 <_free_r>
 800a586:	2000      	movs	r0, #0
 800a588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a58a:	6360      	str	r0, [r4, #52]	; 0x34
 800a58c:	6063      	str	r3, [r4, #4]
 800a58e:	b113      	cbz	r3, 800a596 <__ssrefill_r+0x24>
 800a590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	bd10      	pop	{r4, pc}
 800a596:	6923      	ldr	r3, [r4, #16]
 800a598:	f04f 30ff 	mov.w	r0, #4294967295
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	6063      	str	r3, [r4, #4]
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	f043 0320 	orr.w	r3, r3, #32
 800a5a8:	81a3      	strh	r3, [r4, #12]
 800a5aa:	e7f3      	b.n	800a594 <__ssrefill_r+0x22>

0800a5ac <__ssvfiscanf_r>:
 800a5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a5ba:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a5be:	49a7      	ldr	r1, [pc, #668]	; (800a85c <__ssvfiscanf_r+0x2b0>)
 800a5c0:	f10d 0804 	add.w	r8, sp, #4
 800a5c4:	91a0      	str	r1, [sp, #640]	; 0x280
 800a5c6:	49a6      	ldr	r1, [pc, #664]	; (800a860 <__ssvfiscanf_r+0x2b4>)
 800a5c8:	4fa6      	ldr	r7, [pc, #664]	; (800a864 <__ssvfiscanf_r+0x2b8>)
 800a5ca:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800a868 <__ssvfiscanf_r+0x2bc>
 800a5ce:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a5d2:	91a1      	str	r1, [sp, #644]	; 0x284
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	7813      	ldrb	r3, [r2, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 815c 	beq.w	800a896 <__ssvfiscanf_r+0x2ea>
 800a5de:	5dd9      	ldrb	r1, [r3, r7]
 800a5e0:	1c55      	adds	r5, r2, #1
 800a5e2:	f011 0108 	ands.w	r1, r1, #8
 800a5e6:	d019      	beq.n	800a61c <__ssvfiscanf_r+0x70>
 800a5e8:	6863      	ldr	r3, [r4, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	dd0f      	ble.n	800a60e <__ssvfiscanf_r+0x62>
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	781a      	ldrb	r2, [r3, #0]
 800a5f2:	5cba      	ldrb	r2, [r7, r2]
 800a5f4:	0712      	lsls	r2, r2, #28
 800a5f6:	d401      	bmi.n	800a5fc <__ssvfiscanf_r+0x50>
 800a5f8:	462a      	mov	r2, r5
 800a5fa:	e7ec      	b.n	800a5d6 <__ssvfiscanf_r+0x2a>
 800a5fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a5fe:	3301      	adds	r3, #1
 800a600:	3201      	adds	r2, #1
 800a602:	9245      	str	r2, [sp, #276]	; 0x114
 800a604:	6862      	ldr	r2, [r4, #4]
 800a606:	6023      	str	r3, [r4, #0]
 800a608:	3a01      	subs	r2, #1
 800a60a:	6062      	str	r2, [r4, #4]
 800a60c:	e7ec      	b.n	800a5e8 <__ssvfiscanf_r+0x3c>
 800a60e:	4621      	mov	r1, r4
 800a610:	4630      	mov	r0, r6
 800a612:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a614:	4798      	blx	r3
 800a616:	2800      	cmp	r0, #0
 800a618:	d0e9      	beq.n	800a5ee <__ssvfiscanf_r+0x42>
 800a61a:	e7ed      	b.n	800a5f8 <__ssvfiscanf_r+0x4c>
 800a61c:	2b25      	cmp	r3, #37	; 0x25
 800a61e:	d012      	beq.n	800a646 <__ssvfiscanf_r+0x9a>
 800a620:	469a      	mov	sl, r3
 800a622:	6863      	ldr	r3, [r4, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f340 8094 	ble.w	800a752 <__ssvfiscanf_r+0x1a6>
 800a62a:	6822      	ldr	r2, [r4, #0]
 800a62c:	7813      	ldrb	r3, [r2, #0]
 800a62e:	4553      	cmp	r3, sl
 800a630:	f040 8131 	bne.w	800a896 <__ssvfiscanf_r+0x2ea>
 800a634:	6863      	ldr	r3, [r4, #4]
 800a636:	3201      	adds	r2, #1
 800a638:	3b01      	subs	r3, #1
 800a63a:	6063      	str	r3, [r4, #4]
 800a63c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a63e:	6022      	str	r2, [r4, #0]
 800a640:	3301      	adds	r3, #1
 800a642:	9345      	str	r3, [sp, #276]	; 0x114
 800a644:	e7d8      	b.n	800a5f8 <__ssvfiscanf_r+0x4c>
 800a646:	9141      	str	r1, [sp, #260]	; 0x104
 800a648:	9143      	str	r1, [sp, #268]	; 0x10c
 800a64a:	7853      	ldrb	r3, [r2, #1]
 800a64c:	2b2a      	cmp	r3, #42	; 0x2a
 800a64e:	bf04      	itt	eq
 800a650:	2310      	moveq	r3, #16
 800a652:	1c95      	addeq	r5, r2, #2
 800a654:	f04f 020a 	mov.w	r2, #10
 800a658:	bf08      	it	eq
 800a65a:	9341      	streq	r3, [sp, #260]	; 0x104
 800a65c:	46aa      	mov	sl, r5
 800a65e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a662:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a666:	2b09      	cmp	r3, #9
 800a668:	d91d      	bls.n	800a6a6 <__ssvfiscanf_r+0xfa>
 800a66a:	2203      	movs	r2, #3
 800a66c:	487e      	ldr	r0, [pc, #504]	; (800a868 <__ssvfiscanf_r+0x2bc>)
 800a66e:	f000 fef3 	bl	800b458 <memchr>
 800a672:	b140      	cbz	r0, 800a686 <__ssvfiscanf_r+0xda>
 800a674:	2301      	movs	r3, #1
 800a676:	4655      	mov	r5, sl
 800a678:	eba0 0009 	sub.w	r0, r0, r9
 800a67c:	fa03 f000 	lsl.w	r0, r3, r0
 800a680:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a682:	4318      	orrs	r0, r3
 800a684:	9041      	str	r0, [sp, #260]	; 0x104
 800a686:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a68a:	2b78      	cmp	r3, #120	; 0x78
 800a68c:	d806      	bhi.n	800a69c <__ssvfiscanf_r+0xf0>
 800a68e:	2b57      	cmp	r3, #87	; 0x57
 800a690:	d810      	bhi.n	800a6b4 <__ssvfiscanf_r+0x108>
 800a692:	2b25      	cmp	r3, #37	; 0x25
 800a694:	d0c4      	beq.n	800a620 <__ssvfiscanf_r+0x74>
 800a696:	d857      	bhi.n	800a748 <__ssvfiscanf_r+0x19c>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d065      	beq.n	800a768 <__ssvfiscanf_r+0x1bc>
 800a69c:	2303      	movs	r3, #3
 800a69e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a6a0:	230a      	movs	r3, #10
 800a6a2:	9342      	str	r3, [sp, #264]	; 0x108
 800a6a4:	e072      	b.n	800a78c <__ssvfiscanf_r+0x1e0>
 800a6a6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a6a8:	4655      	mov	r5, sl
 800a6aa:	fb02 1103 	mla	r1, r2, r3, r1
 800a6ae:	3930      	subs	r1, #48	; 0x30
 800a6b0:	9143      	str	r1, [sp, #268]	; 0x10c
 800a6b2:	e7d3      	b.n	800a65c <__ssvfiscanf_r+0xb0>
 800a6b4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a6b8:	2a20      	cmp	r2, #32
 800a6ba:	d8ef      	bhi.n	800a69c <__ssvfiscanf_r+0xf0>
 800a6bc:	a101      	add	r1, pc, #4	; (adr r1, 800a6c4 <__ssvfiscanf_r+0x118>)
 800a6be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a6c2:	bf00      	nop
 800a6c4:	0800a777 	.word	0x0800a777
 800a6c8:	0800a69d 	.word	0x0800a69d
 800a6cc:	0800a69d 	.word	0x0800a69d
 800a6d0:	0800a7d5 	.word	0x0800a7d5
 800a6d4:	0800a69d 	.word	0x0800a69d
 800a6d8:	0800a69d 	.word	0x0800a69d
 800a6dc:	0800a69d 	.word	0x0800a69d
 800a6e0:	0800a69d 	.word	0x0800a69d
 800a6e4:	0800a69d 	.word	0x0800a69d
 800a6e8:	0800a69d 	.word	0x0800a69d
 800a6ec:	0800a69d 	.word	0x0800a69d
 800a6f0:	0800a7eb 	.word	0x0800a7eb
 800a6f4:	0800a7c1 	.word	0x0800a7c1
 800a6f8:	0800a74f 	.word	0x0800a74f
 800a6fc:	0800a74f 	.word	0x0800a74f
 800a700:	0800a74f 	.word	0x0800a74f
 800a704:	0800a69d 	.word	0x0800a69d
 800a708:	0800a7c5 	.word	0x0800a7c5
 800a70c:	0800a69d 	.word	0x0800a69d
 800a710:	0800a69d 	.word	0x0800a69d
 800a714:	0800a69d 	.word	0x0800a69d
 800a718:	0800a69d 	.word	0x0800a69d
 800a71c:	0800a7fb 	.word	0x0800a7fb
 800a720:	0800a7cd 	.word	0x0800a7cd
 800a724:	0800a76f 	.word	0x0800a76f
 800a728:	0800a69d 	.word	0x0800a69d
 800a72c:	0800a69d 	.word	0x0800a69d
 800a730:	0800a7f7 	.word	0x0800a7f7
 800a734:	0800a69d 	.word	0x0800a69d
 800a738:	0800a7c1 	.word	0x0800a7c1
 800a73c:	0800a69d 	.word	0x0800a69d
 800a740:	0800a69d 	.word	0x0800a69d
 800a744:	0800a777 	.word	0x0800a777
 800a748:	3b45      	subs	r3, #69	; 0x45
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d8a6      	bhi.n	800a69c <__ssvfiscanf_r+0xf0>
 800a74e:	2305      	movs	r3, #5
 800a750:	e01b      	b.n	800a78a <__ssvfiscanf_r+0x1de>
 800a752:	4621      	mov	r1, r4
 800a754:	4630      	mov	r0, r6
 800a756:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a758:	4798      	blx	r3
 800a75a:	2800      	cmp	r0, #0
 800a75c:	f43f af65 	beq.w	800a62a <__ssvfiscanf_r+0x7e>
 800a760:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a762:	2800      	cmp	r0, #0
 800a764:	f040 808d 	bne.w	800a882 <__ssvfiscanf_r+0x2d6>
 800a768:	f04f 30ff 	mov.w	r0, #4294967295
 800a76c:	e08f      	b.n	800a88e <__ssvfiscanf_r+0x2e2>
 800a76e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a770:	f042 0220 	orr.w	r2, r2, #32
 800a774:	9241      	str	r2, [sp, #260]	; 0x104
 800a776:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a77c:	9241      	str	r2, [sp, #260]	; 0x104
 800a77e:	2210      	movs	r2, #16
 800a780:	2b6f      	cmp	r3, #111	; 0x6f
 800a782:	bf34      	ite	cc
 800a784:	2303      	movcc	r3, #3
 800a786:	2304      	movcs	r3, #4
 800a788:	9242      	str	r2, [sp, #264]	; 0x108
 800a78a:	9347      	str	r3, [sp, #284]	; 0x11c
 800a78c:	6863      	ldr	r3, [r4, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	dd42      	ble.n	800a818 <__ssvfiscanf_r+0x26c>
 800a792:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a794:	0659      	lsls	r1, r3, #25
 800a796:	d404      	bmi.n	800a7a2 <__ssvfiscanf_r+0x1f6>
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	781a      	ldrb	r2, [r3, #0]
 800a79c:	5cba      	ldrb	r2, [r7, r2]
 800a79e:	0712      	lsls	r2, r2, #28
 800a7a0:	d441      	bmi.n	800a826 <__ssvfiscanf_r+0x27a>
 800a7a2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	dc50      	bgt.n	800a84a <__ssvfiscanf_r+0x29e>
 800a7a8:	466b      	mov	r3, sp
 800a7aa:	4622      	mov	r2, r4
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	a941      	add	r1, sp, #260	; 0x104
 800a7b0:	f000 fb64 	bl	800ae7c <_scanf_chars>
 800a7b4:	2801      	cmp	r0, #1
 800a7b6:	d06e      	beq.n	800a896 <__ssvfiscanf_r+0x2ea>
 800a7b8:	2802      	cmp	r0, #2
 800a7ba:	f47f af1d 	bne.w	800a5f8 <__ssvfiscanf_r+0x4c>
 800a7be:	e7cf      	b.n	800a760 <__ssvfiscanf_r+0x1b4>
 800a7c0:	220a      	movs	r2, #10
 800a7c2:	e7dd      	b.n	800a780 <__ssvfiscanf_r+0x1d4>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	9342      	str	r3, [sp, #264]	; 0x108
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e7de      	b.n	800a78a <__ssvfiscanf_r+0x1de>
 800a7cc:	2308      	movs	r3, #8
 800a7ce:	9342      	str	r3, [sp, #264]	; 0x108
 800a7d0:	2304      	movs	r3, #4
 800a7d2:	e7da      	b.n	800a78a <__ssvfiscanf_r+0x1de>
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	f000 fd38 	bl	800b24c <__sccl>
 800a7dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a7de:	4605      	mov	r5, r0
 800a7e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7e4:	9341      	str	r3, [sp, #260]	; 0x104
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e7cf      	b.n	800a78a <__ssvfiscanf_r+0x1de>
 800a7ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a7ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7f0:	9341      	str	r3, [sp, #260]	; 0x104
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e7c9      	b.n	800a78a <__ssvfiscanf_r+0x1de>
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	e7c7      	b.n	800a78a <__ssvfiscanf_r+0x1de>
 800a7fa:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a7fc:	06c3      	lsls	r3, r0, #27
 800a7fe:	f53f aefb 	bmi.w	800a5f8 <__ssvfiscanf_r+0x4c>
 800a802:	9b00      	ldr	r3, [sp, #0]
 800a804:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a806:	1d19      	adds	r1, r3, #4
 800a808:	9100      	str	r1, [sp, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f010 0f01 	tst.w	r0, #1
 800a810:	bf14      	ite	ne
 800a812:	801a      	strhne	r2, [r3, #0]
 800a814:	601a      	streq	r2, [r3, #0]
 800a816:	e6ef      	b.n	800a5f8 <__ssvfiscanf_r+0x4c>
 800a818:	4621      	mov	r1, r4
 800a81a:	4630      	mov	r0, r6
 800a81c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a81e:	4798      	blx	r3
 800a820:	2800      	cmp	r0, #0
 800a822:	d0b6      	beq.n	800a792 <__ssvfiscanf_r+0x1e6>
 800a824:	e79c      	b.n	800a760 <__ssvfiscanf_r+0x1b4>
 800a826:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a828:	3201      	adds	r2, #1
 800a82a:	9245      	str	r2, [sp, #276]	; 0x114
 800a82c:	6862      	ldr	r2, [r4, #4]
 800a82e:	3a01      	subs	r2, #1
 800a830:	2a00      	cmp	r2, #0
 800a832:	6062      	str	r2, [r4, #4]
 800a834:	dd02      	ble.n	800a83c <__ssvfiscanf_r+0x290>
 800a836:	3301      	adds	r3, #1
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	e7ad      	b.n	800a798 <__ssvfiscanf_r+0x1ec>
 800a83c:	4621      	mov	r1, r4
 800a83e:	4630      	mov	r0, r6
 800a840:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a842:	4798      	blx	r3
 800a844:	2800      	cmp	r0, #0
 800a846:	d0a7      	beq.n	800a798 <__ssvfiscanf_r+0x1ec>
 800a848:	e78a      	b.n	800a760 <__ssvfiscanf_r+0x1b4>
 800a84a:	2b04      	cmp	r3, #4
 800a84c:	dc0e      	bgt.n	800a86c <__ssvfiscanf_r+0x2c0>
 800a84e:	466b      	mov	r3, sp
 800a850:	4622      	mov	r2, r4
 800a852:	4630      	mov	r0, r6
 800a854:	a941      	add	r1, sp, #260	; 0x104
 800a856:	f000 fb6b 	bl	800af30 <_scanf_i>
 800a85a:	e7ab      	b.n	800a7b4 <__ssvfiscanf_r+0x208>
 800a85c:	0800a4f9 	.word	0x0800a4f9
 800a860:	0800a573 	.word	0x0800a573
 800a864:	0800ca4d 	.word	0x0800ca4d
 800a868:	0800cbb6 	.word	0x0800cbb6
 800a86c:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <__ssvfiscanf_r+0x2f0>)
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f43f aec2 	beq.w	800a5f8 <__ssvfiscanf_r+0x4c>
 800a874:	466b      	mov	r3, sp
 800a876:	4622      	mov	r2, r4
 800a878:	4630      	mov	r0, r6
 800a87a:	a941      	add	r1, sp, #260	; 0x104
 800a87c:	f3af 8000 	nop.w
 800a880:	e798      	b.n	800a7b4 <__ssvfiscanf_r+0x208>
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a888:	bf18      	it	ne
 800a88a:	f04f 30ff 	movne.w	r0, #4294967295
 800a88e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a896:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a898:	e7f9      	b.n	800a88e <__ssvfiscanf_r+0x2e2>
 800a89a:	bf00      	nop
 800a89c:	00000000 	.word	0x00000000

0800a8a0 <__sfputc_r>:
 800a8a0:	6893      	ldr	r3, [r2, #8]
 800a8a2:	b410      	push	{r4}
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	6093      	str	r3, [r2, #8]
 800a8aa:	da07      	bge.n	800a8bc <__sfputc_r+0x1c>
 800a8ac:	6994      	ldr	r4, [r2, #24]
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	db01      	blt.n	800a8b6 <__sfputc_r+0x16>
 800a8b2:	290a      	cmp	r1, #10
 800a8b4:	d102      	bne.n	800a8bc <__sfputc_r+0x1c>
 800a8b6:	bc10      	pop	{r4}
 800a8b8:	f7ff b85e 	b.w	8009978 <__swbuf_r>
 800a8bc:	6813      	ldr	r3, [r2, #0]
 800a8be:	1c58      	adds	r0, r3, #1
 800a8c0:	6010      	str	r0, [r2, #0]
 800a8c2:	7019      	strb	r1, [r3, #0]
 800a8c4:	4608      	mov	r0, r1
 800a8c6:	bc10      	pop	{r4}
 800a8c8:	4770      	bx	lr

0800a8ca <__sfputs_r>:
 800a8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	460f      	mov	r7, r1
 800a8d0:	4614      	mov	r4, r2
 800a8d2:	18d5      	adds	r5, r2, r3
 800a8d4:	42ac      	cmp	r4, r5
 800a8d6:	d101      	bne.n	800a8dc <__sfputs_r+0x12>
 800a8d8:	2000      	movs	r0, #0
 800a8da:	e007      	b.n	800a8ec <__sfputs_r+0x22>
 800a8dc:	463a      	mov	r2, r7
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e4:	f7ff ffdc 	bl	800a8a0 <__sfputc_r>
 800a8e8:	1c43      	adds	r3, r0, #1
 800a8ea:	d1f3      	bne.n	800a8d4 <__sfputs_r+0xa>
 800a8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8f0 <_vfiprintf_r>:
 800a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	460d      	mov	r5, r1
 800a8f6:	4614      	mov	r4, r2
 800a8f8:	4698      	mov	r8, r3
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	b09d      	sub	sp, #116	; 0x74
 800a8fe:	b118      	cbz	r0, 800a908 <_vfiprintf_r+0x18>
 800a900:	6983      	ldr	r3, [r0, #24]
 800a902:	b90b      	cbnz	r3, 800a908 <_vfiprintf_r+0x18>
 800a904:	f7ff fa42 	bl	8009d8c <__sinit>
 800a908:	4b89      	ldr	r3, [pc, #548]	; (800ab30 <_vfiprintf_r+0x240>)
 800a90a:	429d      	cmp	r5, r3
 800a90c:	d11b      	bne.n	800a946 <_vfiprintf_r+0x56>
 800a90e:	6875      	ldr	r5, [r6, #4]
 800a910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a912:	07d9      	lsls	r1, r3, #31
 800a914:	d405      	bmi.n	800a922 <_vfiprintf_r+0x32>
 800a916:	89ab      	ldrh	r3, [r5, #12]
 800a918:	059a      	lsls	r2, r3, #22
 800a91a:	d402      	bmi.n	800a922 <_vfiprintf_r+0x32>
 800a91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a91e:	f7ff fb30 	bl	8009f82 <__retarget_lock_acquire_recursive>
 800a922:	89ab      	ldrh	r3, [r5, #12]
 800a924:	071b      	lsls	r3, r3, #28
 800a926:	d501      	bpl.n	800a92c <_vfiprintf_r+0x3c>
 800a928:	692b      	ldr	r3, [r5, #16]
 800a92a:	b9eb      	cbnz	r3, 800a968 <_vfiprintf_r+0x78>
 800a92c:	4629      	mov	r1, r5
 800a92e:	4630      	mov	r0, r6
 800a930:	f7ff f886 	bl	8009a40 <__swsetup_r>
 800a934:	b1c0      	cbz	r0, 800a968 <_vfiprintf_r+0x78>
 800a936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a938:	07dc      	lsls	r4, r3, #31
 800a93a:	d50e      	bpl.n	800a95a <_vfiprintf_r+0x6a>
 800a93c:	f04f 30ff 	mov.w	r0, #4294967295
 800a940:	b01d      	add	sp, #116	; 0x74
 800a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a946:	4b7b      	ldr	r3, [pc, #492]	; (800ab34 <_vfiprintf_r+0x244>)
 800a948:	429d      	cmp	r5, r3
 800a94a:	d101      	bne.n	800a950 <_vfiprintf_r+0x60>
 800a94c:	68b5      	ldr	r5, [r6, #8]
 800a94e:	e7df      	b.n	800a910 <_vfiprintf_r+0x20>
 800a950:	4b79      	ldr	r3, [pc, #484]	; (800ab38 <_vfiprintf_r+0x248>)
 800a952:	429d      	cmp	r5, r3
 800a954:	bf08      	it	eq
 800a956:	68f5      	ldreq	r5, [r6, #12]
 800a958:	e7da      	b.n	800a910 <_vfiprintf_r+0x20>
 800a95a:	89ab      	ldrh	r3, [r5, #12]
 800a95c:	0598      	lsls	r0, r3, #22
 800a95e:	d4ed      	bmi.n	800a93c <_vfiprintf_r+0x4c>
 800a960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a962:	f7ff fb0f 	bl	8009f84 <__retarget_lock_release_recursive>
 800a966:	e7e9      	b.n	800a93c <_vfiprintf_r+0x4c>
 800a968:	2300      	movs	r3, #0
 800a96a:	9309      	str	r3, [sp, #36]	; 0x24
 800a96c:	2320      	movs	r3, #32
 800a96e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a972:	2330      	movs	r3, #48	; 0x30
 800a974:	f04f 0901 	mov.w	r9, #1
 800a978:	f8cd 800c 	str.w	r8, [sp, #12]
 800a97c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ab3c <_vfiprintf_r+0x24c>
 800a980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a984:	4623      	mov	r3, r4
 800a986:	469a      	mov	sl, r3
 800a988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a98c:	b10a      	cbz	r2, 800a992 <_vfiprintf_r+0xa2>
 800a98e:	2a25      	cmp	r2, #37	; 0x25
 800a990:	d1f9      	bne.n	800a986 <_vfiprintf_r+0x96>
 800a992:	ebba 0b04 	subs.w	fp, sl, r4
 800a996:	d00b      	beq.n	800a9b0 <_vfiprintf_r+0xc0>
 800a998:	465b      	mov	r3, fp
 800a99a:	4622      	mov	r2, r4
 800a99c:	4629      	mov	r1, r5
 800a99e:	4630      	mov	r0, r6
 800a9a0:	f7ff ff93 	bl	800a8ca <__sfputs_r>
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	f000 80aa 	beq.w	800aafe <_vfiprintf_r+0x20e>
 800a9aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9ac:	445a      	add	r2, fp
 800a9ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a9b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f000 80a2 	beq.w	800aafe <_vfiprintf_r+0x20e>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9c4:	f10a 0a01 	add.w	sl, sl, #1
 800a9c8:	9304      	str	r3, [sp, #16]
 800a9ca:	9307      	str	r3, [sp, #28]
 800a9cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a9d2:	4654      	mov	r4, sl
 800a9d4:	2205      	movs	r2, #5
 800a9d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9da:	4858      	ldr	r0, [pc, #352]	; (800ab3c <_vfiprintf_r+0x24c>)
 800a9dc:	f000 fd3c 	bl	800b458 <memchr>
 800a9e0:	9a04      	ldr	r2, [sp, #16]
 800a9e2:	b9d8      	cbnz	r0, 800aa1c <_vfiprintf_r+0x12c>
 800a9e4:	06d1      	lsls	r1, r2, #27
 800a9e6:	bf44      	itt	mi
 800a9e8:	2320      	movmi	r3, #32
 800a9ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9ee:	0713      	lsls	r3, r2, #28
 800a9f0:	bf44      	itt	mi
 800a9f2:	232b      	movmi	r3, #43	; 0x2b
 800a9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a9fe:	d015      	beq.n	800aa2c <_vfiprintf_r+0x13c>
 800aa00:	4654      	mov	r4, sl
 800aa02:	2000      	movs	r0, #0
 800aa04:	f04f 0c0a 	mov.w	ip, #10
 800aa08:	9a07      	ldr	r2, [sp, #28]
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa10:	3b30      	subs	r3, #48	; 0x30
 800aa12:	2b09      	cmp	r3, #9
 800aa14:	d94e      	bls.n	800aab4 <_vfiprintf_r+0x1c4>
 800aa16:	b1b0      	cbz	r0, 800aa46 <_vfiprintf_r+0x156>
 800aa18:	9207      	str	r2, [sp, #28]
 800aa1a:	e014      	b.n	800aa46 <_vfiprintf_r+0x156>
 800aa1c:	eba0 0308 	sub.w	r3, r0, r8
 800aa20:	fa09 f303 	lsl.w	r3, r9, r3
 800aa24:	4313      	orrs	r3, r2
 800aa26:	46a2      	mov	sl, r4
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	e7d2      	b.n	800a9d2 <_vfiprintf_r+0xe2>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	1d19      	adds	r1, r3, #4
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	9103      	str	r1, [sp, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	bfbb      	ittet	lt
 800aa38:	425b      	neglt	r3, r3
 800aa3a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa3e:	9307      	strge	r3, [sp, #28]
 800aa40:	9307      	strlt	r3, [sp, #28]
 800aa42:	bfb8      	it	lt
 800aa44:	9204      	strlt	r2, [sp, #16]
 800aa46:	7823      	ldrb	r3, [r4, #0]
 800aa48:	2b2e      	cmp	r3, #46	; 0x2e
 800aa4a:	d10c      	bne.n	800aa66 <_vfiprintf_r+0x176>
 800aa4c:	7863      	ldrb	r3, [r4, #1]
 800aa4e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa50:	d135      	bne.n	800aabe <_vfiprintf_r+0x1ce>
 800aa52:	9b03      	ldr	r3, [sp, #12]
 800aa54:	3402      	adds	r4, #2
 800aa56:	1d1a      	adds	r2, r3, #4
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	9203      	str	r2, [sp, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bfb8      	it	lt
 800aa60:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa64:	9305      	str	r3, [sp, #20]
 800aa66:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ab40 <_vfiprintf_r+0x250>
 800aa6a:	2203      	movs	r2, #3
 800aa6c:	4650      	mov	r0, sl
 800aa6e:	7821      	ldrb	r1, [r4, #0]
 800aa70:	f000 fcf2 	bl	800b458 <memchr>
 800aa74:	b140      	cbz	r0, 800aa88 <_vfiprintf_r+0x198>
 800aa76:	2340      	movs	r3, #64	; 0x40
 800aa78:	eba0 000a 	sub.w	r0, r0, sl
 800aa7c:	fa03 f000 	lsl.w	r0, r3, r0
 800aa80:	9b04      	ldr	r3, [sp, #16]
 800aa82:	3401      	adds	r4, #1
 800aa84:	4303      	orrs	r3, r0
 800aa86:	9304      	str	r3, [sp, #16]
 800aa88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8c:	2206      	movs	r2, #6
 800aa8e:	482d      	ldr	r0, [pc, #180]	; (800ab44 <_vfiprintf_r+0x254>)
 800aa90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa94:	f000 fce0 	bl	800b458 <memchr>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d03f      	beq.n	800ab1c <_vfiprintf_r+0x22c>
 800aa9c:	4b2a      	ldr	r3, [pc, #168]	; (800ab48 <_vfiprintf_r+0x258>)
 800aa9e:	bb1b      	cbnz	r3, 800aae8 <_vfiprintf_r+0x1f8>
 800aaa0:	9b03      	ldr	r3, [sp, #12]
 800aaa2:	3307      	adds	r3, #7
 800aaa4:	f023 0307 	bic.w	r3, r3, #7
 800aaa8:	3308      	adds	r3, #8
 800aaaa:	9303      	str	r3, [sp, #12]
 800aaac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaae:	443b      	add	r3, r7
 800aab0:	9309      	str	r3, [sp, #36]	; 0x24
 800aab2:	e767      	b.n	800a984 <_vfiprintf_r+0x94>
 800aab4:	460c      	mov	r4, r1
 800aab6:	2001      	movs	r0, #1
 800aab8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aabc:	e7a5      	b.n	800aa0a <_vfiprintf_r+0x11a>
 800aabe:	2300      	movs	r3, #0
 800aac0:	f04f 0c0a 	mov.w	ip, #10
 800aac4:	4619      	mov	r1, r3
 800aac6:	3401      	adds	r4, #1
 800aac8:	9305      	str	r3, [sp, #20]
 800aaca:	4620      	mov	r0, r4
 800aacc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aad0:	3a30      	subs	r2, #48	; 0x30
 800aad2:	2a09      	cmp	r2, #9
 800aad4:	d903      	bls.n	800aade <_vfiprintf_r+0x1ee>
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d0c5      	beq.n	800aa66 <_vfiprintf_r+0x176>
 800aada:	9105      	str	r1, [sp, #20]
 800aadc:	e7c3      	b.n	800aa66 <_vfiprintf_r+0x176>
 800aade:	4604      	mov	r4, r0
 800aae0:	2301      	movs	r3, #1
 800aae2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aae6:	e7f0      	b.n	800aaca <_vfiprintf_r+0x1da>
 800aae8:	ab03      	add	r3, sp, #12
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	462a      	mov	r2, r5
 800aaee:	4630      	mov	r0, r6
 800aaf0:	4b16      	ldr	r3, [pc, #88]	; (800ab4c <_vfiprintf_r+0x25c>)
 800aaf2:	a904      	add	r1, sp, #16
 800aaf4:	f3af 8000 	nop.w
 800aaf8:	4607      	mov	r7, r0
 800aafa:	1c78      	adds	r0, r7, #1
 800aafc:	d1d6      	bne.n	800aaac <_vfiprintf_r+0x1bc>
 800aafe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab00:	07d9      	lsls	r1, r3, #31
 800ab02:	d405      	bmi.n	800ab10 <_vfiprintf_r+0x220>
 800ab04:	89ab      	ldrh	r3, [r5, #12]
 800ab06:	059a      	lsls	r2, r3, #22
 800ab08:	d402      	bmi.n	800ab10 <_vfiprintf_r+0x220>
 800ab0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab0c:	f7ff fa3a 	bl	8009f84 <__retarget_lock_release_recursive>
 800ab10:	89ab      	ldrh	r3, [r5, #12]
 800ab12:	065b      	lsls	r3, r3, #25
 800ab14:	f53f af12 	bmi.w	800a93c <_vfiprintf_r+0x4c>
 800ab18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab1a:	e711      	b.n	800a940 <_vfiprintf_r+0x50>
 800ab1c:	ab03      	add	r3, sp, #12
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	462a      	mov	r2, r5
 800ab22:	4630      	mov	r0, r6
 800ab24:	4b09      	ldr	r3, [pc, #36]	; (800ab4c <_vfiprintf_r+0x25c>)
 800ab26:	a904      	add	r1, sp, #16
 800ab28:	f000 f882 	bl	800ac30 <_printf_i>
 800ab2c:	e7e4      	b.n	800aaf8 <_vfiprintf_r+0x208>
 800ab2e:	bf00      	nop
 800ab30:	0800cb70 	.word	0x0800cb70
 800ab34:	0800cb90 	.word	0x0800cb90
 800ab38:	0800cb50 	.word	0x0800cb50
 800ab3c:	0800cbb0 	.word	0x0800cbb0
 800ab40:	0800cbb6 	.word	0x0800cbb6
 800ab44:	0800cbba 	.word	0x0800cbba
 800ab48:	00000000 	.word	0x00000000
 800ab4c:	0800a8cb 	.word	0x0800a8cb

0800ab50 <_printf_common>:
 800ab50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab54:	4616      	mov	r6, r2
 800ab56:	4699      	mov	r9, r3
 800ab58:	688a      	ldr	r2, [r1, #8]
 800ab5a:	690b      	ldr	r3, [r1, #16]
 800ab5c:	4607      	mov	r7, r0
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	bfb8      	it	lt
 800ab62:	4613      	movlt	r3, r2
 800ab64:	6033      	str	r3, [r6, #0]
 800ab66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab70:	b10a      	cbz	r2, 800ab76 <_printf_common+0x26>
 800ab72:	3301      	adds	r3, #1
 800ab74:	6033      	str	r3, [r6, #0]
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	0699      	lsls	r1, r3, #26
 800ab7a:	bf42      	ittt	mi
 800ab7c:	6833      	ldrmi	r3, [r6, #0]
 800ab7e:	3302      	addmi	r3, #2
 800ab80:	6033      	strmi	r3, [r6, #0]
 800ab82:	6825      	ldr	r5, [r4, #0]
 800ab84:	f015 0506 	ands.w	r5, r5, #6
 800ab88:	d106      	bne.n	800ab98 <_printf_common+0x48>
 800ab8a:	f104 0a19 	add.w	sl, r4, #25
 800ab8e:	68e3      	ldr	r3, [r4, #12]
 800ab90:	6832      	ldr	r2, [r6, #0]
 800ab92:	1a9b      	subs	r3, r3, r2
 800ab94:	42ab      	cmp	r3, r5
 800ab96:	dc28      	bgt.n	800abea <_printf_common+0x9a>
 800ab98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab9c:	1e13      	subs	r3, r2, #0
 800ab9e:	6822      	ldr	r2, [r4, #0]
 800aba0:	bf18      	it	ne
 800aba2:	2301      	movne	r3, #1
 800aba4:	0692      	lsls	r2, r2, #26
 800aba6:	d42d      	bmi.n	800ac04 <_printf_common+0xb4>
 800aba8:	4649      	mov	r1, r9
 800abaa:	4638      	mov	r0, r7
 800abac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abb0:	47c0      	blx	r8
 800abb2:	3001      	adds	r0, #1
 800abb4:	d020      	beq.n	800abf8 <_printf_common+0xa8>
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	68e5      	ldr	r5, [r4, #12]
 800abba:	f003 0306 	and.w	r3, r3, #6
 800abbe:	2b04      	cmp	r3, #4
 800abc0:	bf18      	it	ne
 800abc2:	2500      	movne	r5, #0
 800abc4:	6832      	ldr	r2, [r6, #0]
 800abc6:	f04f 0600 	mov.w	r6, #0
 800abca:	68a3      	ldr	r3, [r4, #8]
 800abcc:	bf08      	it	eq
 800abce:	1aad      	subeq	r5, r5, r2
 800abd0:	6922      	ldr	r2, [r4, #16]
 800abd2:	bf08      	it	eq
 800abd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abd8:	4293      	cmp	r3, r2
 800abda:	bfc4      	itt	gt
 800abdc:	1a9b      	subgt	r3, r3, r2
 800abde:	18ed      	addgt	r5, r5, r3
 800abe0:	341a      	adds	r4, #26
 800abe2:	42b5      	cmp	r5, r6
 800abe4:	d11a      	bne.n	800ac1c <_printf_common+0xcc>
 800abe6:	2000      	movs	r0, #0
 800abe8:	e008      	b.n	800abfc <_printf_common+0xac>
 800abea:	2301      	movs	r3, #1
 800abec:	4652      	mov	r2, sl
 800abee:	4649      	mov	r1, r9
 800abf0:	4638      	mov	r0, r7
 800abf2:	47c0      	blx	r8
 800abf4:	3001      	adds	r0, #1
 800abf6:	d103      	bne.n	800ac00 <_printf_common+0xb0>
 800abf8:	f04f 30ff 	mov.w	r0, #4294967295
 800abfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac00:	3501      	adds	r5, #1
 800ac02:	e7c4      	b.n	800ab8e <_printf_common+0x3e>
 800ac04:	2030      	movs	r0, #48	; 0x30
 800ac06:	18e1      	adds	r1, r4, r3
 800ac08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac0c:	1c5a      	adds	r2, r3, #1
 800ac0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac12:	4422      	add	r2, r4
 800ac14:	3302      	adds	r3, #2
 800ac16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac1a:	e7c5      	b.n	800aba8 <_printf_common+0x58>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	4622      	mov	r2, r4
 800ac20:	4649      	mov	r1, r9
 800ac22:	4638      	mov	r0, r7
 800ac24:	47c0      	blx	r8
 800ac26:	3001      	adds	r0, #1
 800ac28:	d0e6      	beq.n	800abf8 <_printf_common+0xa8>
 800ac2a:	3601      	adds	r6, #1
 800ac2c:	e7d9      	b.n	800abe2 <_printf_common+0x92>
	...

0800ac30 <_printf_i>:
 800ac30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac34:	7e0f      	ldrb	r7, [r1, #24]
 800ac36:	4691      	mov	r9, r2
 800ac38:	2f78      	cmp	r7, #120	; 0x78
 800ac3a:	4680      	mov	r8, r0
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	469a      	mov	sl, r3
 800ac40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac46:	d807      	bhi.n	800ac58 <_printf_i+0x28>
 800ac48:	2f62      	cmp	r7, #98	; 0x62
 800ac4a:	d80a      	bhi.n	800ac62 <_printf_i+0x32>
 800ac4c:	2f00      	cmp	r7, #0
 800ac4e:	f000 80d9 	beq.w	800ae04 <_printf_i+0x1d4>
 800ac52:	2f58      	cmp	r7, #88	; 0x58
 800ac54:	f000 80a4 	beq.w	800ada0 <_printf_i+0x170>
 800ac58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac60:	e03a      	b.n	800acd8 <_printf_i+0xa8>
 800ac62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac66:	2b15      	cmp	r3, #21
 800ac68:	d8f6      	bhi.n	800ac58 <_printf_i+0x28>
 800ac6a:	a101      	add	r1, pc, #4	; (adr r1, 800ac70 <_printf_i+0x40>)
 800ac6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac70:	0800acc9 	.word	0x0800acc9
 800ac74:	0800acdd 	.word	0x0800acdd
 800ac78:	0800ac59 	.word	0x0800ac59
 800ac7c:	0800ac59 	.word	0x0800ac59
 800ac80:	0800ac59 	.word	0x0800ac59
 800ac84:	0800ac59 	.word	0x0800ac59
 800ac88:	0800acdd 	.word	0x0800acdd
 800ac8c:	0800ac59 	.word	0x0800ac59
 800ac90:	0800ac59 	.word	0x0800ac59
 800ac94:	0800ac59 	.word	0x0800ac59
 800ac98:	0800ac59 	.word	0x0800ac59
 800ac9c:	0800adeb 	.word	0x0800adeb
 800aca0:	0800ad0d 	.word	0x0800ad0d
 800aca4:	0800adcd 	.word	0x0800adcd
 800aca8:	0800ac59 	.word	0x0800ac59
 800acac:	0800ac59 	.word	0x0800ac59
 800acb0:	0800ae0d 	.word	0x0800ae0d
 800acb4:	0800ac59 	.word	0x0800ac59
 800acb8:	0800ad0d 	.word	0x0800ad0d
 800acbc:	0800ac59 	.word	0x0800ac59
 800acc0:	0800ac59 	.word	0x0800ac59
 800acc4:	0800add5 	.word	0x0800add5
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	1d1a      	adds	r2, r3, #4
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	602a      	str	r2, [r5, #0]
 800acd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acd8:	2301      	movs	r3, #1
 800acda:	e0a4      	b.n	800ae26 <_printf_i+0x1f6>
 800acdc:	6820      	ldr	r0, [r4, #0]
 800acde:	6829      	ldr	r1, [r5, #0]
 800ace0:	0606      	lsls	r6, r0, #24
 800ace2:	f101 0304 	add.w	r3, r1, #4
 800ace6:	d50a      	bpl.n	800acfe <_printf_i+0xce>
 800ace8:	680e      	ldr	r6, [r1, #0]
 800acea:	602b      	str	r3, [r5, #0]
 800acec:	2e00      	cmp	r6, #0
 800acee:	da03      	bge.n	800acf8 <_printf_i+0xc8>
 800acf0:	232d      	movs	r3, #45	; 0x2d
 800acf2:	4276      	negs	r6, r6
 800acf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acf8:	230a      	movs	r3, #10
 800acfa:	485e      	ldr	r0, [pc, #376]	; (800ae74 <_printf_i+0x244>)
 800acfc:	e019      	b.n	800ad32 <_printf_i+0x102>
 800acfe:	680e      	ldr	r6, [r1, #0]
 800ad00:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad04:	602b      	str	r3, [r5, #0]
 800ad06:	bf18      	it	ne
 800ad08:	b236      	sxthne	r6, r6
 800ad0a:	e7ef      	b.n	800acec <_printf_i+0xbc>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	6820      	ldr	r0, [r4, #0]
 800ad10:	1d19      	adds	r1, r3, #4
 800ad12:	6029      	str	r1, [r5, #0]
 800ad14:	0601      	lsls	r1, r0, #24
 800ad16:	d501      	bpl.n	800ad1c <_printf_i+0xec>
 800ad18:	681e      	ldr	r6, [r3, #0]
 800ad1a:	e002      	b.n	800ad22 <_printf_i+0xf2>
 800ad1c:	0646      	lsls	r6, r0, #25
 800ad1e:	d5fb      	bpl.n	800ad18 <_printf_i+0xe8>
 800ad20:	881e      	ldrh	r6, [r3, #0]
 800ad22:	2f6f      	cmp	r7, #111	; 0x6f
 800ad24:	bf0c      	ite	eq
 800ad26:	2308      	moveq	r3, #8
 800ad28:	230a      	movne	r3, #10
 800ad2a:	4852      	ldr	r0, [pc, #328]	; (800ae74 <_printf_i+0x244>)
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad32:	6865      	ldr	r5, [r4, #4]
 800ad34:	2d00      	cmp	r5, #0
 800ad36:	bfa8      	it	ge
 800ad38:	6821      	ldrge	r1, [r4, #0]
 800ad3a:	60a5      	str	r5, [r4, #8]
 800ad3c:	bfa4      	itt	ge
 800ad3e:	f021 0104 	bicge.w	r1, r1, #4
 800ad42:	6021      	strge	r1, [r4, #0]
 800ad44:	b90e      	cbnz	r6, 800ad4a <_printf_i+0x11a>
 800ad46:	2d00      	cmp	r5, #0
 800ad48:	d04d      	beq.n	800ade6 <_printf_i+0x1b6>
 800ad4a:	4615      	mov	r5, r2
 800ad4c:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad50:	fb03 6711 	mls	r7, r3, r1, r6
 800ad54:	5dc7      	ldrb	r7, [r0, r7]
 800ad56:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad5a:	4637      	mov	r7, r6
 800ad5c:	42bb      	cmp	r3, r7
 800ad5e:	460e      	mov	r6, r1
 800ad60:	d9f4      	bls.n	800ad4c <_printf_i+0x11c>
 800ad62:	2b08      	cmp	r3, #8
 800ad64:	d10b      	bne.n	800ad7e <_printf_i+0x14e>
 800ad66:	6823      	ldr	r3, [r4, #0]
 800ad68:	07de      	lsls	r6, r3, #31
 800ad6a:	d508      	bpl.n	800ad7e <_printf_i+0x14e>
 800ad6c:	6923      	ldr	r3, [r4, #16]
 800ad6e:	6861      	ldr	r1, [r4, #4]
 800ad70:	4299      	cmp	r1, r3
 800ad72:	bfde      	ittt	le
 800ad74:	2330      	movle	r3, #48	; 0x30
 800ad76:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad7e:	1b52      	subs	r2, r2, r5
 800ad80:	6122      	str	r2, [r4, #16]
 800ad82:	464b      	mov	r3, r9
 800ad84:	4621      	mov	r1, r4
 800ad86:	4640      	mov	r0, r8
 800ad88:	f8cd a000 	str.w	sl, [sp]
 800ad8c:	aa03      	add	r2, sp, #12
 800ad8e:	f7ff fedf 	bl	800ab50 <_printf_common>
 800ad92:	3001      	adds	r0, #1
 800ad94:	d14c      	bne.n	800ae30 <_printf_i+0x200>
 800ad96:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9a:	b004      	add	sp, #16
 800ad9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada0:	4834      	ldr	r0, [pc, #208]	; (800ae74 <_printf_i+0x244>)
 800ada2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ada6:	6829      	ldr	r1, [r5, #0]
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	f851 6b04 	ldr.w	r6, [r1], #4
 800adae:	6029      	str	r1, [r5, #0]
 800adb0:	061d      	lsls	r5, r3, #24
 800adb2:	d514      	bpl.n	800adde <_printf_i+0x1ae>
 800adb4:	07df      	lsls	r7, r3, #31
 800adb6:	bf44      	itt	mi
 800adb8:	f043 0320 	orrmi.w	r3, r3, #32
 800adbc:	6023      	strmi	r3, [r4, #0]
 800adbe:	b91e      	cbnz	r6, 800adc8 <_printf_i+0x198>
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	f023 0320 	bic.w	r3, r3, #32
 800adc6:	6023      	str	r3, [r4, #0]
 800adc8:	2310      	movs	r3, #16
 800adca:	e7af      	b.n	800ad2c <_printf_i+0xfc>
 800adcc:	6823      	ldr	r3, [r4, #0]
 800adce:	f043 0320 	orr.w	r3, r3, #32
 800add2:	6023      	str	r3, [r4, #0]
 800add4:	2378      	movs	r3, #120	; 0x78
 800add6:	4828      	ldr	r0, [pc, #160]	; (800ae78 <_printf_i+0x248>)
 800add8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800addc:	e7e3      	b.n	800ada6 <_printf_i+0x176>
 800adde:	0659      	lsls	r1, r3, #25
 800ade0:	bf48      	it	mi
 800ade2:	b2b6      	uxthmi	r6, r6
 800ade4:	e7e6      	b.n	800adb4 <_printf_i+0x184>
 800ade6:	4615      	mov	r5, r2
 800ade8:	e7bb      	b.n	800ad62 <_printf_i+0x132>
 800adea:	682b      	ldr	r3, [r5, #0]
 800adec:	6826      	ldr	r6, [r4, #0]
 800adee:	1d18      	adds	r0, r3, #4
 800adf0:	6961      	ldr	r1, [r4, #20]
 800adf2:	6028      	str	r0, [r5, #0]
 800adf4:	0635      	lsls	r5, r6, #24
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	d501      	bpl.n	800adfe <_printf_i+0x1ce>
 800adfa:	6019      	str	r1, [r3, #0]
 800adfc:	e002      	b.n	800ae04 <_printf_i+0x1d4>
 800adfe:	0670      	lsls	r0, r6, #25
 800ae00:	d5fb      	bpl.n	800adfa <_printf_i+0x1ca>
 800ae02:	8019      	strh	r1, [r3, #0]
 800ae04:	2300      	movs	r3, #0
 800ae06:	4615      	mov	r5, r2
 800ae08:	6123      	str	r3, [r4, #16]
 800ae0a:	e7ba      	b.n	800ad82 <_printf_i+0x152>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	2100      	movs	r1, #0
 800ae10:	1d1a      	adds	r2, r3, #4
 800ae12:	602a      	str	r2, [r5, #0]
 800ae14:	681d      	ldr	r5, [r3, #0]
 800ae16:	6862      	ldr	r2, [r4, #4]
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f000 fb1d 	bl	800b458 <memchr>
 800ae1e:	b108      	cbz	r0, 800ae24 <_printf_i+0x1f4>
 800ae20:	1b40      	subs	r0, r0, r5
 800ae22:	6060      	str	r0, [r4, #4]
 800ae24:	6863      	ldr	r3, [r4, #4]
 800ae26:	6123      	str	r3, [r4, #16]
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae2e:	e7a8      	b.n	800ad82 <_printf_i+0x152>
 800ae30:	462a      	mov	r2, r5
 800ae32:	4649      	mov	r1, r9
 800ae34:	4640      	mov	r0, r8
 800ae36:	6923      	ldr	r3, [r4, #16]
 800ae38:	47d0      	blx	sl
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	d0ab      	beq.n	800ad96 <_printf_i+0x166>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	079b      	lsls	r3, r3, #30
 800ae42:	d413      	bmi.n	800ae6c <_printf_i+0x23c>
 800ae44:	68e0      	ldr	r0, [r4, #12]
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	4298      	cmp	r0, r3
 800ae4a:	bfb8      	it	lt
 800ae4c:	4618      	movlt	r0, r3
 800ae4e:	e7a4      	b.n	800ad9a <_printf_i+0x16a>
 800ae50:	2301      	movs	r3, #1
 800ae52:	4632      	mov	r2, r6
 800ae54:	4649      	mov	r1, r9
 800ae56:	4640      	mov	r0, r8
 800ae58:	47d0      	blx	sl
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	d09b      	beq.n	800ad96 <_printf_i+0x166>
 800ae5e:	3501      	adds	r5, #1
 800ae60:	68e3      	ldr	r3, [r4, #12]
 800ae62:	9903      	ldr	r1, [sp, #12]
 800ae64:	1a5b      	subs	r3, r3, r1
 800ae66:	42ab      	cmp	r3, r5
 800ae68:	dcf2      	bgt.n	800ae50 <_printf_i+0x220>
 800ae6a:	e7eb      	b.n	800ae44 <_printf_i+0x214>
 800ae6c:	2500      	movs	r5, #0
 800ae6e:	f104 0619 	add.w	r6, r4, #25
 800ae72:	e7f5      	b.n	800ae60 <_printf_i+0x230>
 800ae74:	0800cbc1 	.word	0x0800cbc1
 800ae78:	0800cbd2 	.word	0x0800cbd2

0800ae7c <_scanf_chars>:
 800ae7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae80:	4615      	mov	r5, r2
 800ae82:	688a      	ldr	r2, [r1, #8]
 800ae84:	4680      	mov	r8, r0
 800ae86:	460c      	mov	r4, r1
 800ae88:	b932      	cbnz	r2, 800ae98 <_scanf_chars+0x1c>
 800ae8a:	698a      	ldr	r2, [r1, #24]
 800ae8c:	2a00      	cmp	r2, #0
 800ae8e:	bf0c      	ite	eq
 800ae90:	2201      	moveq	r2, #1
 800ae92:	f04f 32ff 	movne.w	r2, #4294967295
 800ae96:	608a      	str	r2, [r1, #8]
 800ae98:	2700      	movs	r7, #0
 800ae9a:	6822      	ldr	r2, [r4, #0]
 800ae9c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800af2c <_scanf_chars+0xb0>
 800aea0:	06d1      	lsls	r1, r2, #27
 800aea2:	bf5f      	itttt	pl
 800aea4:	681a      	ldrpl	r2, [r3, #0]
 800aea6:	1d11      	addpl	r1, r2, #4
 800aea8:	6019      	strpl	r1, [r3, #0]
 800aeaa:	6816      	ldrpl	r6, [r2, #0]
 800aeac:	69a0      	ldr	r0, [r4, #24]
 800aeae:	b188      	cbz	r0, 800aed4 <_scanf_chars+0x58>
 800aeb0:	2801      	cmp	r0, #1
 800aeb2:	d107      	bne.n	800aec4 <_scanf_chars+0x48>
 800aeb4:	682b      	ldr	r3, [r5, #0]
 800aeb6:	781a      	ldrb	r2, [r3, #0]
 800aeb8:	6963      	ldr	r3, [r4, #20]
 800aeba:	5c9b      	ldrb	r3, [r3, r2]
 800aebc:	b953      	cbnz	r3, 800aed4 <_scanf_chars+0x58>
 800aebe:	2f00      	cmp	r7, #0
 800aec0:	d031      	beq.n	800af26 <_scanf_chars+0xaa>
 800aec2:	e022      	b.n	800af0a <_scanf_chars+0x8e>
 800aec4:	2802      	cmp	r0, #2
 800aec6:	d120      	bne.n	800af0a <_scanf_chars+0x8e>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800aed0:	071b      	lsls	r3, r3, #28
 800aed2:	d41a      	bmi.n	800af0a <_scanf_chars+0x8e>
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	3701      	adds	r7, #1
 800aed8:	06da      	lsls	r2, r3, #27
 800aeda:	bf5e      	ittt	pl
 800aedc:	682b      	ldrpl	r3, [r5, #0]
 800aede:	781b      	ldrbpl	r3, [r3, #0]
 800aee0:	f806 3b01 	strbpl.w	r3, [r6], #1
 800aee4:	682a      	ldr	r2, [r5, #0]
 800aee6:	686b      	ldr	r3, [r5, #4]
 800aee8:	3201      	adds	r2, #1
 800aeea:	602a      	str	r2, [r5, #0]
 800aeec:	68a2      	ldr	r2, [r4, #8]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	3a01      	subs	r2, #1
 800aef2:	606b      	str	r3, [r5, #4]
 800aef4:	60a2      	str	r2, [r4, #8]
 800aef6:	b142      	cbz	r2, 800af0a <_scanf_chars+0x8e>
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	dcd7      	bgt.n	800aeac <_scanf_chars+0x30>
 800aefc:	4629      	mov	r1, r5
 800aefe:	4640      	mov	r0, r8
 800af00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af04:	4798      	blx	r3
 800af06:	2800      	cmp	r0, #0
 800af08:	d0d0      	beq.n	800aeac <_scanf_chars+0x30>
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	f013 0310 	ands.w	r3, r3, #16
 800af10:	d105      	bne.n	800af1e <_scanf_chars+0xa2>
 800af12:	68e2      	ldr	r2, [r4, #12]
 800af14:	3201      	adds	r2, #1
 800af16:	60e2      	str	r2, [r4, #12]
 800af18:	69a2      	ldr	r2, [r4, #24]
 800af1a:	b102      	cbz	r2, 800af1e <_scanf_chars+0xa2>
 800af1c:	7033      	strb	r3, [r6, #0]
 800af1e:	2000      	movs	r0, #0
 800af20:	6923      	ldr	r3, [r4, #16]
 800af22:	443b      	add	r3, r7
 800af24:	6123      	str	r3, [r4, #16]
 800af26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af2a:	bf00      	nop
 800af2c:	0800ca4d 	.word	0x0800ca4d

0800af30 <_scanf_i>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	460c      	mov	r4, r1
 800af36:	4698      	mov	r8, r3
 800af38:	4b75      	ldr	r3, [pc, #468]	; (800b110 <_scanf_i+0x1e0>)
 800af3a:	b087      	sub	sp, #28
 800af3c:	4682      	mov	sl, r0
 800af3e:	4616      	mov	r6, r2
 800af40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af44:	ab03      	add	r3, sp, #12
 800af46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800af4a:	4b72      	ldr	r3, [pc, #456]	; (800b114 <_scanf_i+0x1e4>)
 800af4c:	69a1      	ldr	r1, [r4, #24]
 800af4e:	4a72      	ldr	r2, [pc, #456]	; (800b118 <_scanf_i+0x1e8>)
 800af50:	4627      	mov	r7, r4
 800af52:	2903      	cmp	r1, #3
 800af54:	bf18      	it	ne
 800af56:	461a      	movne	r2, r3
 800af58:	68a3      	ldr	r3, [r4, #8]
 800af5a:	9201      	str	r2, [sp, #4]
 800af5c:	1e5a      	subs	r2, r3, #1
 800af5e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800af62:	bf81      	itttt	hi
 800af64:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800af68:	eb03 0905 	addhi.w	r9, r3, r5
 800af6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800af70:	60a3      	strhi	r3, [r4, #8]
 800af72:	f857 3b1c 	ldr.w	r3, [r7], #28
 800af76:	bf98      	it	ls
 800af78:	f04f 0900 	movls.w	r9, #0
 800af7c:	463d      	mov	r5, r7
 800af7e:	f04f 0b00 	mov.w	fp, #0
 800af82:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800af86:	6023      	str	r3, [r4, #0]
 800af88:	6831      	ldr	r1, [r6, #0]
 800af8a:	ab03      	add	r3, sp, #12
 800af8c:	2202      	movs	r2, #2
 800af8e:	7809      	ldrb	r1, [r1, #0]
 800af90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800af94:	f000 fa60 	bl	800b458 <memchr>
 800af98:	b328      	cbz	r0, 800afe6 <_scanf_i+0xb6>
 800af9a:	f1bb 0f01 	cmp.w	fp, #1
 800af9e:	d159      	bne.n	800b054 <_scanf_i+0x124>
 800afa0:	6862      	ldr	r2, [r4, #4]
 800afa2:	b92a      	cbnz	r2, 800afb0 <_scanf_i+0x80>
 800afa4:	2308      	movs	r3, #8
 800afa6:	6822      	ldr	r2, [r4, #0]
 800afa8:	6063      	str	r3, [r4, #4]
 800afaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afae:	6022      	str	r2, [r4, #0]
 800afb0:	6822      	ldr	r2, [r4, #0]
 800afb2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800afb6:	6022      	str	r2, [r4, #0]
 800afb8:	68a2      	ldr	r2, [r4, #8]
 800afba:	1e51      	subs	r1, r2, #1
 800afbc:	60a1      	str	r1, [r4, #8]
 800afbe:	b192      	cbz	r2, 800afe6 <_scanf_i+0xb6>
 800afc0:	6832      	ldr	r2, [r6, #0]
 800afc2:	1c51      	adds	r1, r2, #1
 800afc4:	6031      	str	r1, [r6, #0]
 800afc6:	7812      	ldrb	r2, [r2, #0]
 800afc8:	f805 2b01 	strb.w	r2, [r5], #1
 800afcc:	6872      	ldr	r2, [r6, #4]
 800afce:	3a01      	subs	r2, #1
 800afd0:	2a00      	cmp	r2, #0
 800afd2:	6072      	str	r2, [r6, #4]
 800afd4:	dc07      	bgt.n	800afe6 <_scanf_i+0xb6>
 800afd6:	4631      	mov	r1, r6
 800afd8:	4650      	mov	r0, sl
 800afda:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800afde:	4790      	blx	r2
 800afe0:	2800      	cmp	r0, #0
 800afe2:	f040 8085 	bne.w	800b0f0 <_scanf_i+0x1c0>
 800afe6:	f10b 0b01 	add.w	fp, fp, #1
 800afea:	f1bb 0f03 	cmp.w	fp, #3
 800afee:	d1cb      	bne.n	800af88 <_scanf_i+0x58>
 800aff0:	6863      	ldr	r3, [r4, #4]
 800aff2:	b90b      	cbnz	r3, 800aff8 <_scanf_i+0xc8>
 800aff4:	230a      	movs	r3, #10
 800aff6:	6063      	str	r3, [r4, #4]
 800aff8:	6863      	ldr	r3, [r4, #4]
 800affa:	4948      	ldr	r1, [pc, #288]	; (800b11c <_scanf_i+0x1ec>)
 800affc:	6960      	ldr	r0, [r4, #20]
 800affe:	1ac9      	subs	r1, r1, r3
 800b000:	f000 f924 	bl	800b24c <__sccl>
 800b004:	f04f 0b00 	mov.w	fp, #0
 800b008:	68a3      	ldr	r3, [r4, #8]
 800b00a:	6822      	ldr	r2, [r4, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d03d      	beq.n	800b08c <_scanf_i+0x15c>
 800b010:	6831      	ldr	r1, [r6, #0]
 800b012:	6960      	ldr	r0, [r4, #20]
 800b014:	f891 c000 	ldrb.w	ip, [r1]
 800b018:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d035      	beq.n	800b08c <_scanf_i+0x15c>
 800b020:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b024:	d124      	bne.n	800b070 <_scanf_i+0x140>
 800b026:	0510      	lsls	r0, r2, #20
 800b028:	d522      	bpl.n	800b070 <_scanf_i+0x140>
 800b02a:	f10b 0b01 	add.w	fp, fp, #1
 800b02e:	f1b9 0f00 	cmp.w	r9, #0
 800b032:	d003      	beq.n	800b03c <_scanf_i+0x10c>
 800b034:	3301      	adds	r3, #1
 800b036:	f109 39ff 	add.w	r9, r9, #4294967295
 800b03a:	60a3      	str	r3, [r4, #8]
 800b03c:	6873      	ldr	r3, [r6, #4]
 800b03e:	3b01      	subs	r3, #1
 800b040:	2b00      	cmp	r3, #0
 800b042:	6073      	str	r3, [r6, #4]
 800b044:	dd1b      	ble.n	800b07e <_scanf_i+0x14e>
 800b046:	6833      	ldr	r3, [r6, #0]
 800b048:	3301      	adds	r3, #1
 800b04a:	6033      	str	r3, [r6, #0]
 800b04c:	68a3      	ldr	r3, [r4, #8]
 800b04e:	3b01      	subs	r3, #1
 800b050:	60a3      	str	r3, [r4, #8]
 800b052:	e7d9      	b.n	800b008 <_scanf_i+0xd8>
 800b054:	f1bb 0f02 	cmp.w	fp, #2
 800b058:	d1ae      	bne.n	800afb8 <_scanf_i+0x88>
 800b05a:	6822      	ldr	r2, [r4, #0]
 800b05c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b060:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b064:	d1bf      	bne.n	800afe6 <_scanf_i+0xb6>
 800b066:	2310      	movs	r3, #16
 800b068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b06c:	6063      	str	r3, [r4, #4]
 800b06e:	e7a2      	b.n	800afb6 <_scanf_i+0x86>
 800b070:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b074:	6022      	str	r2, [r4, #0]
 800b076:	780b      	ldrb	r3, [r1, #0]
 800b078:	f805 3b01 	strb.w	r3, [r5], #1
 800b07c:	e7de      	b.n	800b03c <_scanf_i+0x10c>
 800b07e:	4631      	mov	r1, r6
 800b080:	4650      	mov	r0, sl
 800b082:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b086:	4798      	blx	r3
 800b088:	2800      	cmp	r0, #0
 800b08a:	d0df      	beq.n	800b04c <_scanf_i+0x11c>
 800b08c:	6823      	ldr	r3, [r4, #0]
 800b08e:	05db      	lsls	r3, r3, #23
 800b090:	d50d      	bpl.n	800b0ae <_scanf_i+0x17e>
 800b092:	42bd      	cmp	r5, r7
 800b094:	d909      	bls.n	800b0aa <_scanf_i+0x17a>
 800b096:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b09a:	4632      	mov	r2, r6
 800b09c:	4650      	mov	r0, sl
 800b09e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0a2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b0a6:	4798      	blx	r3
 800b0a8:	464d      	mov	r5, r9
 800b0aa:	42bd      	cmp	r5, r7
 800b0ac:	d02d      	beq.n	800b10a <_scanf_i+0x1da>
 800b0ae:	6822      	ldr	r2, [r4, #0]
 800b0b0:	f012 0210 	ands.w	r2, r2, #16
 800b0b4:	d113      	bne.n	800b0de <_scanf_i+0x1ae>
 800b0b6:	702a      	strb	r2, [r5, #0]
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	6863      	ldr	r3, [r4, #4]
 800b0bc:	4650      	mov	r0, sl
 800b0be:	9e01      	ldr	r6, [sp, #4]
 800b0c0:	47b0      	blx	r6
 800b0c2:	6821      	ldr	r1, [r4, #0]
 800b0c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c8:	f011 0f20 	tst.w	r1, #32
 800b0cc:	d013      	beq.n	800b0f6 <_scanf_i+0x1c6>
 800b0ce:	1d1a      	adds	r2, r3, #4
 800b0d0:	f8c8 2000 	str.w	r2, [r8]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6018      	str	r0, [r3, #0]
 800b0d8:	68e3      	ldr	r3, [r4, #12]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	60e3      	str	r3, [r4, #12]
 800b0de:	2000      	movs	r0, #0
 800b0e0:	1bed      	subs	r5, r5, r7
 800b0e2:	44ab      	add	fp, r5
 800b0e4:	6925      	ldr	r5, [r4, #16]
 800b0e6:	445d      	add	r5, fp
 800b0e8:	6125      	str	r5, [r4, #16]
 800b0ea:	b007      	add	sp, #28
 800b0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f0:	f04f 0b00 	mov.w	fp, #0
 800b0f4:	e7ca      	b.n	800b08c <_scanf_i+0x15c>
 800b0f6:	1d1a      	adds	r2, r3, #4
 800b0f8:	f8c8 2000 	str.w	r2, [r8]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f011 0f01 	tst.w	r1, #1
 800b102:	bf14      	ite	ne
 800b104:	8018      	strhne	r0, [r3, #0]
 800b106:	6018      	streq	r0, [r3, #0]
 800b108:	e7e6      	b.n	800b0d8 <_scanf_i+0x1a8>
 800b10a:	2001      	movs	r0, #1
 800b10c:	e7ed      	b.n	800b0ea <_scanf_i+0x1ba>
 800b10e:	bf00      	nop
 800b110:	0800c97c 	.word	0x0800c97c
 800b114:	0800b3a1 	.word	0x0800b3a1
 800b118:	08009975 	.word	0x08009975
 800b11c:	0800cbfc 	.word	0x0800cbfc

0800b120 <_putc_r>:
 800b120:	b570      	push	{r4, r5, r6, lr}
 800b122:	460d      	mov	r5, r1
 800b124:	4614      	mov	r4, r2
 800b126:	4606      	mov	r6, r0
 800b128:	b118      	cbz	r0, 800b132 <_putc_r+0x12>
 800b12a:	6983      	ldr	r3, [r0, #24]
 800b12c:	b90b      	cbnz	r3, 800b132 <_putc_r+0x12>
 800b12e:	f7fe fe2d 	bl	8009d8c <__sinit>
 800b132:	4b1c      	ldr	r3, [pc, #112]	; (800b1a4 <_putc_r+0x84>)
 800b134:	429c      	cmp	r4, r3
 800b136:	d124      	bne.n	800b182 <_putc_r+0x62>
 800b138:	6874      	ldr	r4, [r6, #4]
 800b13a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b13c:	07d8      	lsls	r0, r3, #31
 800b13e:	d405      	bmi.n	800b14c <_putc_r+0x2c>
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	0599      	lsls	r1, r3, #22
 800b144:	d402      	bmi.n	800b14c <_putc_r+0x2c>
 800b146:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b148:	f7fe ff1b 	bl	8009f82 <__retarget_lock_acquire_recursive>
 800b14c:	68a3      	ldr	r3, [r4, #8]
 800b14e:	3b01      	subs	r3, #1
 800b150:	2b00      	cmp	r3, #0
 800b152:	60a3      	str	r3, [r4, #8]
 800b154:	da05      	bge.n	800b162 <_putc_r+0x42>
 800b156:	69a2      	ldr	r2, [r4, #24]
 800b158:	4293      	cmp	r3, r2
 800b15a:	db1c      	blt.n	800b196 <_putc_r+0x76>
 800b15c:	b2eb      	uxtb	r3, r5
 800b15e:	2b0a      	cmp	r3, #10
 800b160:	d019      	beq.n	800b196 <_putc_r+0x76>
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	1c5a      	adds	r2, r3, #1
 800b166:	6022      	str	r2, [r4, #0]
 800b168:	701d      	strb	r5, [r3, #0]
 800b16a:	b2ed      	uxtb	r5, r5
 800b16c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b16e:	07da      	lsls	r2, r3, #31
 800b170:	d405      	bmi.n	800b17e <_putc_r+0x5e>
 800b172:	89a3      	ldrh	r3, [r4, #12]
 800b174:	059b      	lsls	r3, r3, #22
 800b176:	d402      	bmi.n	800b17e <_putc_r+0x5e>
 800b178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b17a:	f7fe ff03 	bl	8009f84 <__retarget_lock_release_recursive>
 800b17e:	4628      	mov	r0, r5
 800b180:	bd70      	pop	{r4, r5, r6, pc}
 800b182:	4b09      	ldr	r3, [pc, #36]	; (800b1a8 <_putc_r+0x88>)
 800b184:	429c      	cmp	r4, r3
 800b186:	d101      	bne.n	800b18c <_putc_r+0x6c>
 800b188:	68b4      	ldr	r4, [r6, #8]
 800b18a:	e7d6      	b.n	800b13a <_putc_r+0x1a>
 800b18c:	4b07      	ldr	r3, [pc, #28]	; (800b1ac <_putc_r+0x8c>)
 800b18e:	429c      	cmp	r4, r3
 800b190:	bf08      	it	eq
 800b192:	68f4      	ldreq	r4, [r6, #12]
 800b194:	e7d1      	b.n	800b13a <_putc_r+0x1a>
 800b196:	4629      	mov	r1, r5
 800b198:	4622      	mov	r2, r4
 800b19a:	4630      	mov	r0, r6
 800b19c:	f7fe fbec 	bl	8009978 <__swbuf_r>
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	e7e3      	b.n	800b16c <_putc_r+0x4c>
 800b1a4:	0800cb70 	.word	0x0800cb70
 800b1a8:	0800cb90 	.word	0x0800cb90
 800b1ac:	0800cb50 	.word	0x0800cb50

0800b1b0 <_read_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	4608      	mov	r0, r1
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	4d05      	ldr	r5, [pc, #20]	; (800b1d0 <_read_r+0x20>)
 800b1bc:	602a      	str	r2, [r5, #0]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	f7f6 fc8e 	bl	8001ae0 <_read>
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	d102      	bne.n	800b1ce <_read_r+0x1e>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	b103      	cbz	r3, 800b1ce <_read_r+0x1e>
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	20000f58 	.word	0x20000f58

0800b1d4 <__srget_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	4605      	mov	r5, r0
 800b1da:	b118      	cbz	r0, 800b1e4 <__srget_r+0x10>
 800b1dc:	6983      	ldr	r3, [r0, #24]
 800b1de:	b90b      	cbnz	r3, 800b1e4 <__srget_r+0x10>
 800b1e0:	f7fe fdd4 	bl	8009d8c <__sinit>
 800b1e4:	4b0e      	ldr	r3, [pc, #56]	; (800b220 <__srget_r+0x4c>)
 800b1e6:	429c      	cmp	r4, r3
 800b1e8:	d10d      	bne.n	800b206 <__srget_r+0x32>
 800b1ea:	686c      	ldr	r4, [r5, #4]
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f000 f99e 	bl	800b530 <__srefill_r>
 800b1f4:	b988      	cbnz	r0, 800b21a <__srget_r+0x46>
 800b1f6:	6863      	ldr	r3, [r4, #4]
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	6063      	str	r3, [r4, #4]
 800b1fc:	6823      	ldr	r3, [r4, #0]
 800b1fe:	1c5a      	adds	r2, r3, #1
 800b200:	6022      	str	r2, [r4, #0]
 800b202:	7818      	ldrb	r0, [r3, #0]
 800b204:	bd38      	pop	{r3, r4, r5, pc}
 800b206:	4b07      	ldr	r3, [pc, #28]	; (800b224 <__srget_r+0x50>)
 800b208:	429c      	cmp	r4, r3
 800b20a:	d101      	bne.n	800b210 <__srget_r+0x3c>
 800b20c:	68ac      	ldr	r4, [r5, #8]
 800b20e:	e7ed      	b.n	800b1ec <__srget_r+0x18>
 800b210:	4b05      	ldr	r3, [pc, #20]	; (800b228 <__srget_r+0x54>)
 800b212:	429c      	cmp	r4, r3
 800b214:	bf08      	it	eq
 800b216:	68ec      	ldreq	r4, [r5, #12]
 800b218:	e7e8      	b.n	800b1ec <__srget_r+0x18>
 800b21a:	f04f 30ff 	mov.w	r0, #4294967295
 800b21e:	e7f1      	b.n	800b204 <__srget_r+0x30>
 800b220:	0800cb70 	.word	0x0800cb70
 800b224:	0800cb90 	.word	0x0800cb90
 800b228:	0800cb50 	.word	0x0800cb50

0800b22c <_sbrk_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	2300      	movs	r3, #0
 800b230:	4d05      	ldr	r5, [pc, #20]	; (800b248 <_sbrk_r+0x1c>)
 800b232:	4604      	mov	r4, r0
 800b234:	4608      	mov	r0, r1
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	f7f6 fcbc 	bl	8001bb4 <_sbrk>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	d102      	bne.n	800b246 <_sbrk_r+0x1a>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	b103      	cbz	r3, 800b246 <_sbrk_r+0x1a>
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	bd38      	pop	{r3, r4, r5, pc}
 800b248:	20000f58 	.word	0x20000f58

0800b24c <__sccl>:
 800b24c:	b570      	push	{r4, r5, r6, lr}
 800b24e:	780b      	ldrb	r3, [r1, #0]
 800b250:	4604      	mov	r4, r0
 800b252:	2b5e      	cmp	r3, #94	; 0x5e
 800b254:	bf13      	iteet	ne
 800b256:	2200      	movne	r2, #0
 800b258:	2201      	moveq	r2, #1
 800b25a:	784b      	ldrbeq	r3, [r1, #1]
 800b25c:	1c48      	addne	r0, r1, #1
 800b25e:	bf08      	it	eq
 800b260:	1c88      	addeq	r0, r1, #2
 800b262:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b266:	1e61      	subs	r1, r4, #1
 800b268:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b26c:	42a9      	cmp	r1, r5
 800b26e:	d1fb      	bne.n	800b268 <__sccl+0x1c>
 800b270:	b90b      	cbnz	r3, 800b276 <__sccl+0x2a>
 800b272:	3801      	subs	r0, #1
 800b274:	bd70      	pop	{r4, r5, r6, pc}
 800b276:	f082 0201 	eor.w	r2, r2, #1
 800b27a:	4605      	mov	r5, r0
 800b27c:	54e2      	strb	r2, [r4, r3]
 800b27e:	4628      	mov	r0, r5
 800b280:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b284:	292d      	cmp	r1, #45	; 0x2d
 800b286:	d006      	beq.n	800b296 <__sccl+0x4a>
 800b288:	295d      	cmp	r1, #93	; 0x5d
 800b28a:	d0f3      	beq.n	800b274 <__sccl+0x28>
 800b28c:	b909      	cbnz	r1, 800b292 <__sccl+0x46>
 800b28e:	4628      	mov	r0, r5
 800b290:	e7f0      	b.n	800b274 <__sccl+0x28>
 800b292:	460b      	mov	r3, r1
 800b294:	e7f1      	b.n	800b27a <__sccl+0x2e>
 800b296:	786e      	ldrb	r6, [r5, #1]
 800b298:	2e5d      	cmp	r6, #93	; 0x5d
 800b29a:	d0fa      	beq.n	800b292 <__sccl+0x46>
 800b29c:	42b3      	cmp	r3, r6
 800b29e:	dcf8      	bgt.n	800b292 <__sccl+0x46>
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	3502      	adds	r5, #2
 800b2a4:	3101      	adds	r1, #1
 800b2a6:	428e      	cmp	r6, r1
 800b2a8:	5462      	strb	r2, [r4, r1]
 800b2aa:	dcfb      	bgt.n	800b2a4 <__sccl+0x58>
 800b2ac:	1af1      	subs	r1, r6, r3
 800b2ae:	3901      	subs	r1, #1
 800b2b0:	42b3      	cmp	r3, r6
 800b2b2:	bfa8      	it	ge
 800b2b4:	2100      	movge	r1, #0
 800b2b6:	1c58      	adds	r0, r3, #1
 800b2b8:	1843      	adds	r3, r0, r1
 800b2ba:	e7e0      	b.n	800b27e <__sccl+0x32>

0800b2bc <_strtoul_l.constprop.0>:
 800b2bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2c0:	4686      	mov	lr, r0
 800b2c2:	460d      	mov	r5, r1
 800b2c4:	4f35      	ldr	r7, [pc, #212]	; (800b39c <_strtoul_l.constprop.0+0xe0>)
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2cc:	5de6      	ldrb	r6, [r4, r7]
 800b2ce:	f016 0608 	ands.w	r6, r6, #8
 800b2d2:	d1f8      	bne.n	800b2c6 <_strtoul_l.constprop.0+0xa>
 800b2d4:	2c2d      	cmp	r4, #45	; 0x2d
 800b2d6:	d12f      	bne.n	800b338 <_strtoul_l.constprop.0+0x7c>
 800b2d8:	2601      	movs	r6, #1
 800b2da:	782c      	ldrb	r4, [r5, #0]
 800b2dc:	1c85      	adds	r5, r0, #2
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d057      	beq.n	800b392 <_strtoul_l.constprop.0+0xd6>
 800b2e2:	2b10      	cmp	r3, #16
 800b2e4:	d109      	bne.n	800b2fa <_strtoul_l.constprop.0+0x3e>
 800b2e6:	2c30      	cmp	r4, #48	; 0x30
 800b2e8:	d107      	bne.n	800b2fa <_strtoul_l.constprop.0+0x3e>
 800b2ea:	7828      	ldrb	r0, [r5, #0]
 800b2ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b2f0:	2858      	cmp	r0, #88	; 0x58
 800b2f2:	d149      	bne.n	800b388 <_strtoul_l.constprop.0+0xcc>
 800b2f4:	2310      	movs	r3, #16
 800b2f6:	786c      	ldrb	r4, [r5, #1]
 800b2f8:	3502      	adds	r5, #2
 800b2fa:	f04f 38ff 	mov.w	r8, #4294967295
 800b2fe:	fbb8 f8f3 	udiv	r8, r8, r3
 800b302:	2700      	movs	r7, #0
 800b304:	fb03 f908 	mul.w	r9, r3, r8
 800b308:	4638      	mov	r0, r7
 800b30a:	ea6f 0909 	mvn.w	r9, r9
 800b30e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b312:	f1bc 0f09 	cmp.w	ip, #9
 800b316:	d814      	bhi.n	800b342 <_strtoul_l.constprop.0+0x86>
 800b318:	4664      	mov	r4, ip
 800b31a:	42a3      	cmp	r3, r4
 800b31c:	dd22      	ble.n	800b364 <_strtoul_l.constprop.0+0xa8>
 800b31e:	2f00      	cmp	r7, #0
 800b320:	db1d      	blt.n	800b35e <_strtoul_l.constprop.0+0xa2>
 800b322:	4580      	cmp	r8, r0
 800b324:	d31b      	bcc.n	800b35e <_strtoul_l.constprop.0+0xa2>
 800b326:	d101      	bne.n	800b32c <_strtoul_l.constprop.0+0x70>
 800b328:	45a1      	cmp	r9, r4
 800b32a:	db18      	blt.n	800b35e <_strtoul_l.constprop.0+0xa2>
 800b32c:	2701      	movs	r7, #1
 800b32e:	fb00 4003 	mla	r0, r0, r3, r4
 800b332:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b336:	e7ea      	b.n	800b30e <_strtoul_l.constprop.0+0x52>
 800b338:	2c2b      	cmp	r4, #43	; 0x2b
 800b33a:	bf04      	itt	eq
 800b33c:	782c      	ldrbeq	r4, [r5, #0]
 800b33e:	1c85      	addeq	r5, r0, #2
 800b340:	e7cd      	b.n	800b2de <_strtoul_l.constprop.0+0x22>
 800b342:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b346:	f1bc 0f19 	cmp.w	ip, #25
 800b34a:	d801      	bhi.n	800b350 <_strtoul_l.constprop.0+0x94>
 800b34c:	3c37      	subs	r4, #55	; 0x37
 800b34e:	e7e4      	b.n	800b31a <_strtoul_l.constprop.0+0x5e>
 800b350:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b354:	f1bc 0f19 	cmp.w	ip, #25
 800b358:	d804      	bhi.n	800b364 <_strtoul_l.constprop.0+0xa8>
 800b35a:	3c57      	subs	r4, #87	; 0x57
 800b35c:	e7dd      	b.n	800b31a <_strtoul_l.constprop.0+0x5e>
 800b35e:	f04f 37ff 	mov.w	r7, #4294967295
 800b362:	e7e6      	b.n	800b332 <_strtoul_l.constprop.0+0x76>
 800b364:	2f00      	cmp	r7, #0
 800b366:	da07      	bge.n	800b378 <_strtoul_l.constprop.0+0xbc>
 800b368:	2322      	movs	r3, #34	; 0x22
 800b36a:	f04f 30ff 	mov.w	r0, #4294967295
 800b36e:	f8ce 3000 	str.w	r3, [lr]
 800b372:	b932      	cbnz	r2, 800b382 <_strtoul_l.constprop.0+0xc6>
 800b374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b378:	b106      	cbz	r6, 800b37c <_strtoul_l.constprop.0+0xc0>
 800b37a:	4240      	negs	r0, r0
 800b37c:	2a00      	cmp	r2, #0
 800b37e:	d0f9      	beq.n	800b374 <_strtoul_l.constprop.0+0xb8>
 800b380:	b107      	cbz	r7, 800b384 <_strtoul_l.constprop.0+0xc8>
 800b382:	1e69      	subs	r1, r5, #1
 800b384:	6011      	str	r1, [r2, #0]
 800b386:	e7f5      	b.n	800b374 <_strtoul_l.constprop.0+0xb8>
 800b388:	2430      	movs	r4, #48	; 0x30
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1b5      	bne.n	800b2fa <_strtoul_l.constprop.0+0x3e>
 800b38e:	2308      	movs	r3, #8
 800b390:	e7b3      	b.n	800b2fa <_strtoul_l.constprop.0+0x3e>
 800b392:	2c30      	cmp	r4, #48	; 0x30
 800b394:	d0a9      	beq.n	800b2ea <_strtoul_l.constprop.0+0x2e>
 800b396:	230a      	movs	r3, #10
 800b398:	e7af      	b.n	800b2fa <_strtoul_l.constprop.0+0x3e>
 800b39a:	bf00      	nop
 800b39c:	0800ca4d 	.word	0x0800ca4d

0800b3a0 <_strtoul_r>:
 800b3a0:	f7ff bf8c 	b.w	800b2bc <_strtoul_l.constprop.0>

0800b3a4 <__submore>:
 800b3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b3ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3b0:	4299      	cmp	r1, r3
 800b3b2:	d11b      	bne.n	800b3ec <__submore+0x48>
 800b3b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b3b8:	f7fe fece 	bl	800a158 <_malloc_r>
 800b3bc:	b918      	cbnz	r0, 800b3c6 <__submore+0x22>
 800b3be:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ca:	63a3      	str	r3, [r4, #56]	; 0x38
 800b3cc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b3d0:	6360      	str	r0, [r4, #52]	; 0x34
 800b3d2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b3d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b3da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b3de:	7043      	strb	r3, [r0, #1]
 800b3e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b3e4:	7003      	strb	r3, [r0, #0]
 800b3e6:	6020      	str	r0, [r4, #0]
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	e7ea      	b.n	800b3c2 <__submore+0x1e>
 800b3ec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b3ee:	0077      	lsls	r7, r6, #1
 800b3f0:	463a      	mov	r2, r7
 800b3f2:	f000 f865 	bl	800b4c0 <_realloc_r>
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d0e0      	beq.n	800b3be <__submore+0x1a>
 800b3fc:	eb00 0806 	add.w	r8, r0, r6
 800b400:	4601      	mov	r1, r0
 800b402:	4632      	mov	r2, r6
 800b404:	4640      	mov	r0, r8
 800b406:	f7fd ffcf 	bl	80093a8 <memcpy>
 800b40a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b40e:	f8c4 8000 	str.w	r8, [r4]
 800b412:	e7e9      	b.n	800b3e8 <__submore+0x44>

0800b414 <_fstat_r>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	2300      	movs	r3, #0
 800b418:	4d06      	ldr	r5, [pc, #24]	; (800b434 <_fstat_r+0x20>)
 800b41a:	4604      	mov	r4, r0
 800b41c:	4608      	mov	r0, r1
 800b41e:	4611      	mov	r1, r2
 800b420:	602b      	str	r3, [r5, #0]
 800b422:	f7f6 fba1 	bl	8001b68 <_fstat>
 800b426:	1c43      	adds	r3, r0, #1
 800b428:	d102      	bne.n	800b430 <_fstat_r+0x1c>
 800b42a:	682b      	ldr	r3, [r5, #0]
 800b42c:	b103      	cbz	r3, 800b430 <_fstat_r+0x1c>
 800b42e:	6023      	str	r3, [r4, #0]
 800b430:	bd38      	pop	{r3, r4, r5, pc}
 800b432:	bf00      	nop
 800b434:	20000f58 	.word	0x20000f58

0800b438 <_isatty_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	2300      	movs	r3, #0
 800b43c:	4d05      	ldr	r5, [pc, #20]	; (800b454 <_isatty_r+0x1c>)
 800b43e:	4604      	mov	r4, r0
 800b440:	4608      	mov	r0, r1
 800b442:	602b      	str	r3, [r5, #0]
 800b444:	f7f6 fb9f 	bl	8001b86 <_isatty>
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d102      	bne.n	800b452 <_isatty_r+0x1a>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	b103      	cbz	r3, 800b452 <_isatty_r+0x1a>
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	20000f58 	.word	0x20000f58

0800b458 <memchr>:
 800b458:	4603      	mov	r3, r0
 800b45a:	b510      	push	{r4, lr}
 800b45c:	b2c9      	uxtb	r1, r1
 800b45e:	4402      	add	r2, r0
 800b460:	4293      	cmp	r3, r2
 800b462:	4618      	mov	r0, r3
 800b464:	d101      	bne.n	800b46a <memchr+0x12>
 800b466:	2000      	movs	r0, #0
 800b468:	e003      	b.n	800b472 <memchr+0x1a>
 800b46a:	7804      	ldrb	r4, [r0, #0]
 800b46c:	3301      	adds	r3, #1
 800b46e:	428c      	cmp	r4, r1
 800b470:	d1f6      	bne.n	800b460 <memchr+0x8>
 800b472:	bd10      	pop	{r4, pc}

0800b474 <memmove>:
 800b474:	4288      	cmp	r0, r1
 800b476:	b510      	push	{r4, lr}
 800b478:	eb01 0402 	add.w	r4, r1, r2
 800b47c:	d902      	bls.n	800b484 <memmove+0x10>
 800b47e:	4284      	cmp	r4, r0
 800b480:	4623      	mov	r3, r4
 800b482:	d807      	bhi.n	800b494 <memmove+0x20>
 800b484:	1e43      	subs	r3, r0, #1
 800b486:	42a1      	cmp	r1, r4
 800b488:	d008      	beq.n	800b49c <memmove+0x28>
 800b48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b48e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b492:	e7f8      	b.n	800b486 <memmove+0x12>
 800b494:	4601      	mov	r1, r0
 800b496:	4402      	add	r2, r0
 800b498:	428a      	cmp	r2, r1
 800b49a:	d100      	bne.n	800b49e <memmove+0x2a>
 800b49c:	bd10      	pop	{r4, pc}
 800b49e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4a6:	e7f7      	b.n	800b498 <memmove+0x24>

0800b4a8 <__malloc_lock>:
 800b4a8:	4801      	ldr	r0, [pc, #4]	; (800b4b0 <__malloc_lock+0x8>)
 800b4aa:	f7fe bd6a 	b.w	8009f82 <__retarget_lock_acquire_recursive>
 800b4ae:	bf00      	nop
 800b4b0:	20000f4a 	.word	0x20000f4a

0800b4b4 <__malloc_unlock>:
 800b4b4:	4801      	ldr	r0, [pc, #4]	; (800b4bc <__malloc_unlock+0x8>)
 800b4b6:	f7fe bd65 	b.w	8009f84 <__retarget_lock_release_recursive>
 800b4ba:	bf00      	nop
 800b4bc:	20000f4a 	.word	0x20000f4a

0800b4c0 <_realloc_r>:
 800b4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	4614      	mov	r4, r2
 800b4c8:	460e      	mov	r6, r1
 800b4ca:	b921      	cbnz	r1, 800b4d6 <_realloc_r+0x16>
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d2:	f7fe be41 	b.w	800a158 <_malloc_r>
 800b4d6:	b92a      	cbnz	r2, 800b4e4 <_realloc_r+0x24>
 800b4d8:	f7fe fdd6 	bl	800a088 <_free_r>
 800b4dc:	4625      	mov	r5, r4
 800b4de:	4628      	mov	r0, r5
 800b4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e4:	f000 f8b0 	bl	800b648 <_malloc_usable_size_r>
 800b4e8:	4284      	cmp	r4, r0
 800b4ea:	4607      	mov	r7, r0
 800b4ec:	d802      	bhi.n	800b4f4 <_realloc_r+0x34>
 800b4ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4f2:	d812      	bhi.n	800b51a <_realloc_r+0x5a>
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	f7fe fe2e 	bl	800a158 <_malloc_r>
 800b4fc:	4605      	mov	r5, r0
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d0ed      	beq.n	800b4de <_realloc_r+0x1e>
 800b502:	42bc      	cmp	r4, r7
 800b504:	4622      	mov	r2, r4
 800b506:	4631      	mov	r1, r6
 800b508:	bf28      	it	cs
 800b50a:	463a      	movcs	r2, r7
 800b50c:	f7fd ff4c 	bl	80093a8 <memcpy>
 800b510:	4631      	mov	r1, r6
 800b512:	4640      	mov	r0, r8
 800b514:	f7fe fdb8 	bl	800a088 <_free_r>
 800b518:	e7e1      	b.n	800b4de <_realloc_r+0x1e>
 800b51a:	4635      	mov	r5, r6
 800b51c:	e7df      	b.n	800b4de <_realloc_r+0x1e>

0800b51e <lflush>:
 800b51e:	8983      	ldrh	r3, [r0, #12]
 800b520:	f003 0309 	and.w	r3, r3, #9
 800b524:	2b09      	cmp	r3, #9
 800b526:	d101      	bne.n	800b52c <lflush+0xe>
 800b528:	f7fe bbc6 	b.w	8009cb8 <fflush>
 800b52c:	2000      	movs	r0, #0
 800b52e:	4770      	bx	lr

0800b530 <__srefill_r>:
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	460c      	mov	r4, r1
 800b534:	4605      	mov	r5, r0
 800b536:	b118      	cbz	r0, 800b540 <__srefill_r+0x10>
 800b538:	6983      	ldr	r3, [r0, #24]
 800b53a:	b90b      	cbnz	r3, 800b540 <__srefill_r+0x10>
 800b53c:	f7fe fc26 	bl	8009d8c <__sinit>
 800b540:	4b3c      	ldr	r3, [pc, #240]	; (800b634 <__srefill_r+0x104>)
 800b542:	429c      	cmp	r4, r3
 800b544:	d10a      	bne.n	800b55c <__srefill_r+0x2c>
 800b546:	686c      	ldr	r4, [r5, #4]
 800b548:	2300      	movs	r3, #0
 800b54a:	6063      	str	r3, [r4, #4]
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b552:	069e      	lsls	r6, r3, #26
 800b554:	d50c      	bpl.n	800b570 <__srefill_r+0x40>
 800b556:	f04f 30ff 	mov.w	r0, #4294967295
 800b55a:	e067      	b.n	800b62c <__srefill_r+0xfc>
 800b55c:	4b36      	ldr	r3, [pc, #216]	; (800b638 <__srefill_r+0x108>)
 800b55e:	429c      	cmp	r4, r3
 800b560:	d101      	bne.n	800b566 <__srefill_r+0x36>
 800b562:	68ac      	ldr	r4, [r5, #8]
 800b564:	e7f0      	b.n	800b548 <__srefill_r+0x18>
 800b566:	4b35      	ldr	r3, [pc, #212]	; (800b63c <__srefill_r+0x10c>)
 800b568:	429c      	cmp	r4, r3
 800b56a:	bf08      	it	eq
 800b56c:	68ec      	ldreq	r4, [r5, #12]
 800b56e:	e7eb      	b.n	800b548 <__srefill_r+0x18>
 800b570:	0758      	lsls	r0, r3, #29
 800b572:	d449      	bmi.n	800b608 <__srefill_r+0xd8>
 800b574:	06d9      	lsls	r1, r3, #27
 800b576:	d405      	bmi.n	800b584 <__srefill_r+0x54>
 800b578:	2309      	movs	r3, #9
 800b57a:	602b      	str	r3, [r5, #0]
 800b57c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b580:	81a3      	strh	r3, [r4, #12]
 800b582:	e7e8      	b.n	800b556 <__srefill_r+0x26>
 800b584:	071a      	lsls	r2, r3, #28
 800b586:	d50b      	bpl.n	800b5a0 <__srefill_r+0x70>
 800b588:	4621      	mov	r1, r4
 800b58a:	4628      	mov	r0, r5
 800b58c:	f7fe fb58 	bl	8009c40 <_fflush_r>
 800b590:	2800      	cmp	r0, #0
 800b592:	d1e0      	bne.n	800b556 <__srefill_r+0x26>
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	60a0      	str	r0, [r4, #8]
 800b598:	f023 0308 	bic.w	r3, r3, #8
 800b59c:	81a3      	strh	r3, [r4, #12]
 800b59e:	61a0      	str	r0, [r4, #24]
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	f043 0304 	orr.w	r3, r3, #4
 800b5a6:	81a3      	strh	r3, [r4, #12]
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	b91b      	cbnz	r3, 800b5b4 <__srefill_r+0x84>
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f7fe fd22 	bl	8009ff8 <__smakebuf_r>
 800b5b4:	89a6      	ldrh	r6, [r4, #12]
 800b5b6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800b5ba:	07b3      	lsls	r3, r6, #30
 800b5bc:	d00f      	beq.n	800b5de <__srefill_r+0xae>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	4b1f      	ldr	r3, [pc, #124]	; (800b640 <__srefill_r+0x110>)
 800b5c4:	491f      	ldr	r1, [pc, #124]	; (800b644 <__srefill_r+0x114>)
 800b5c6:	6818      	ldr	r0, [r3, #0]
 800b5c8:	f006 0609 	and.w	r6, r6, #9
 800b5cc:	f7fe fc5c 	bl	8009e88 <_fwalk>
 800b5d0:	2e09      	cmp	r6, #9
 800b5d2:	81a7      	strh	r7, [r4, #12]
 800b5d4:	d103      	bne.n	800b5de <__srefill_r+0xae>
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	4628      	mov	r0, r5
 800b5da:	f7fe faaf 	bl	8009b3c <__sflush_r>
 800b5de:	6922      	ldr	r2, [r4, #16]
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5e4:	6963      	ldr	r3, [r4, #20]
 800b5e6:	6a21      	ldr	r1, [r4, #32]
 800b5e8:	6022      	str	r2, [r4, #0]
 800b5ea:	47b0      	blx	r6
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	6060      	str	r0, [r4, #4]
 800b5f0:	dc1d      	bgt.n	800b62e <__srefill_r+0xfe>
 800b5f2:	bf18      	it	ne
 800b5f4:	2200      	movne	r2, #0
 800b5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5fa:	bf16      	itet	ne
 800b5fc:	6062      	strne	r2, [r4, #4]
 800b5fe:	f043 0320 	orreq.w	r3, r3, #32
 800b602:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800b606:	e7bb      	b.n	800b580 <__srefill_r+0x50>
 800b608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b60a:	2900      	cmp	r1, #0
 800b60c:	d0cc      	beq.n	800b5a8 <__srefill_r+0x78>
 800b60e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b612:	4299      	cmp	r1, r3
 800b614:	d002      	beq.n	800b61c <__srefill_r+0xec>
 800b616:	4628      	mov	r0, r5
 800b618:	f7fe fd36 	bl	800a088 <_free_r>
 800b61c:	2000      	movs	r0, #0
 800b61e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b620:	6360      	str	r0, [r4, #52]	; 0x34
 800b622:	6063      	str	r3, [r4, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d0bf      	beq.n	800b5a8 <__srefill_r+0x78>
 800b628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b62a:	6023      	str	r3, [r4, #0]
 800b62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b62e:	2000      	movs	r0, #0
 800b630:	e7fc      	b.n	800b62c <__srefill_r+0xfc>
 800b632:	bf00      	nop
 800b634:	0800cb70 	.word	0x0800cb70
 800b638:	0800cb90 	.word	0x0800cb90
 800b63c:	0800cb50 	.word	0x0800cb50
 800b640:	0800ca48 	.word	0x0800ca48
 800b644:	0800b51f 	.word	0x0800b51f

0800b648 <_malloc_usable_size_r>:
 800b648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b64c:	1f18      	subs	r0, r3, #4
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bfbc      	itt	lt
 800b652:	580b      	ldrlt	r3, [r1, r0]
 800b654:	18c0      	addlt	r0, r0, r3
 800b656:	4770      	bx	lr

0800b658 <_init>:
 800b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65a:	bf00      	nop
 800b65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b65e:	bc08      	pop	{r3}
 800b660:	469e      	mov	lr, r3
 800b662:	4770      	bx	lr

0800b664 <_fini>:
 800b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b666:	bf00      	nop
 800b668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b66a:	bc08      	pop	{r3}
 800b66c:	469e      	mov	lr, r3
 800b66e:	4770      	bx	lr
